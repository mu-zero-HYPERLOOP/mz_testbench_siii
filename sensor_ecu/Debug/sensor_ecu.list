
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e928  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f7c  0801eab8  0801eab8  0002eab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fa34  0801fa34  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  0801fa34  0801fa34  0002fa34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fa3c  0801fa3c  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  0801fa3c  0801fa3c  0002fa3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801fa5c  0801fa5c  0002fa5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0801fa64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030204  2**0
                  CONTENTS
 10 .bss          0000a484  20000208  20000208  00030208  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  2000a68c  2000a68c  00030208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000ab6c8  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00017347  00000000  00000000  000db8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000072e0  00000000  00000000  000f2c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00006e50  00000000  00000000  000f9f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039dc9  00000000  00000000  00100d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0006cb6b  00000000  00000000  0013ab41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f1f6  00000000  00000000  001a76ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002b68a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00020ddc  00000000  00000000  002b68f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801eaa0 	.word	0x0801eaa0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0801eaa0 	.word	0x0801eaa0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	711a      	strb	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	715a      	strb	r2, [r3, #5]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000fde:	b490      	push	{r4, r7}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e009      	b.n	800101e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	0e0a      	lsrs	r2, r1, #24
 800104c:	2300      	movs	r3, #0
 800104e:	b2d3      	uxtb	r3, r2
 8001050:	4323      	orrs	r3, r4
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0a02      	lsrs	r2, r0, #8
 8001068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800106c:	0a0b      	lsrs	r3, r1, #8
 800106e:	b2d4      	uxtb	r4, r2
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c0a      	lsrs	r2, r1, #16
 8001080:	2300      	movs	r3, #0
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	4322      	orrs	r2, r4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0c02      	lsrs	r2, r0, #16
 800109e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a2:	0c0b      	lsrs	r3, r1, #16
 80010a4:	b2d4      	uxtb	r4, r2
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0a0a      	lsrs	r2, r1, #8
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	4322      	orrs	r2, r4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	0e02      	lsrs	r2, r0, #24
 80010d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d8:	0e0b      	lsrs	r3, r1, #24
 80010da:	b2d4      	uxtb	r4, r2
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	000a      	movs	r2, r1
 80010ec:	2300      	movs	r3, #0
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3303      	adds	r3, #3
 80010f4:	4322      	orrs	r2, r4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	000a      	movs	r2, r1
 800110a:	2300      	movs	r3, #0
 800110c:	b2d4      	uxtb	r4, r2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	0e02      	lsrs	r2, r0, #24
 800111e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001122:	0e0b      	lsrs	r3, r1, #24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	4322      	orrs	r2, r4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0a0a      	lsrs	r2, r1, #8
 8001140:	2300      	movs	r3, #0
 8001142:	b2d4      	uxtb	r4, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	0c02      	lsrs	r2, r0, #16
 8001154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001158:	0c0b      	lsrs	r3, r1, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3305      	adds	r3, #5
 8001160:	4322      	orrs	r2, r4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	0c0a      	lsrs	r2, r1, #16
 8001176:	2300      	movs	r3, #0
 8001178:	b2d4      	uxtb	r4, r2
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	0a02      	lsrs	r2, r0, #8
 800118a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800118e:	0a0b      	lsrs	r3, r1, #8
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4322      	orrs	r2, r4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0e0a      	lsrs	r2, r1, #24
 80011ac:	2300      	movs	r3, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3307      	adds	r3, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        }
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr

080011cc <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	6093      	str	r3, [r2, #8]
 80011e0:	60d3      	str	r3, [r2, #12]
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffe3 	bl	80011cc <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f103 0218 	add.w	r2, r3, #24
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fee4 	bl	8000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001216:	bf00      	nop
        }
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffde 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZNK3can11MessageBase4sendEm+0x54>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	f016 fadc 	bl	8017800 <osMessageQueuePut>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8001258:	f019 ff4c 	bl	801b0f4 <vPortEnterCritical>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZNK3can11MessageBase4sendEm+0x58>)
 8001262:	f015 fe77 	bl	8016f54 <printf_>
 8001266:	f019 ff75 	bl	801b154 <vPortExitCritical>
            }
        }
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200007b4 	.word	0x200007b4
 8001278:	0801eab8 	.word	0x0801eab8

0800127c <_ZN3can7MessageINS_8messages12SensorF_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	2204      	movs	r2, #4
 800128a:	2181      	movs	r1, #129	; 0x81
 800128c:	f7ff fe7e 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_ZN7canzero9emergency14consumer_entryEPv>:
#include "task.h"

TaskHandle_t emergencyTaskHandle;


void canzero::emergency::consumer_entry(void* argv){
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	emergencyTaskHandle = xTaskGetCurrentTaskHandle();
 80012a4:	f018 ff78 	bl	801a198 <xTaskGetCurrentTaskHandle>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a19      	ldr	r2, [pc, #100]	; (8001310 <_ZN7canzero9emergency14consumer_entryEPv+0x74>)
 80012ac:	6013      	str	r3, [r2, #0]

	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80012ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ffdf 	bl	800127c <_ZN3can7MessageINS_8messages12SensorF_EMCYEEC1Ev>


	uint32_t emergencyBuffer = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f019 f8fb 	bl	801a4cc <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <_ZN7canzero9emergency14consumer_entryEPv+0x46>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80012de:	f008 f87f 	bl	80093e0 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <_ZN7canzero9emergency14consumer_entryEPv+0x54>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d00b      	beq.n	8001308 <_ZN7canzero9emergency14consumer_entryEPv+0x6c>
			emcyMessage.intel = emergencyBuffer;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	461c      	mov	r4, r3
 80012f6:	4615      	mov	r5, r2
 80012f8:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff8c 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800130c:	e7db      	b.n	80012c6 <_ZN7canzero9emergency14consumer_entryEPv+0x2a>
 800130e:	bf00      	nop
 8001310:	20000224 	.word	0x20000224

08001314 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff53 	bl	80011cc <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001326:	f240 7301 	movw	r3, #1793	; 0x701
 800132a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001334:	f000 ff8e 	bl	8002254 <_ZN7canzero9getStatusEv>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f107 010c 	add.w	r1, r7, #12
 8001346:	2300      	movs	r3, #0
 8001348:	2200      	movs	r2, #0
 800134a:	f016 fa59 	bl	8017800 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 800134e:	f000 f843 	bl	80013d8 <_ZN7canzero9heartbeat11getIntervalEv>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	4618      	mov	r0, r3
 8001368:	f015 ff6e 	bl	8017248 <osDelay>
		frame ++;
 800136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136e:	3301      	adds	r3, #1
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001372:	e7df      	b.n	8001334 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 8001374:	200007b4 	.word	0x200007b4
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	f000 f826 	bl	80013d8 <_ZN7canzero9heartbeat11getIntervalEv>
 800138c:	4603      	mov	r3, r0
 800138e:	3305      	adds	r3, #5
 8001390:	461a      	mov	r2, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <_ZN7canzero9heartbeat14consumer_entryEPv+0x58>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	f107 010c 	add.w	r1, r7, #12
 80013a6:	2224      	movs	r2, #36	; 0x24
 80013a8:	4620      	mov	r0, r4
 80013aa:	f017 fe4f 	bl	801904c <xStreamBufferReceive>
 80013ae:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <_ZN7canzero9heartbeat14consumer_entryEPv+0x4e>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 80013be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 ff2a 	bl	800221c <_ZN7canzero9setStatusE9cz_status>
 80013c8:	e7dc      	b.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
		}
		else{
			canzero::handle_heartbeat_miss();
 80013ca:	f008 f813 	bl	80093f4 <_ZN7canzero21handle_heartbeat_missEv>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013ce:	e7d9      	b.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80013d0:	20000228 	.word	0x20000228
 80013d4:	10624dd3 	.word	0x10624dd3

080013d8 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80013dc:	f004 fe42 	bl	8006064 <_Z24OD_HeartbeatInterval_getv>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <_Z41__static_initialization_and_destruction_0ii>:
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10c      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	4293      	cmp	r3, r2
 8001400:	d107      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8001402:	2201      	movs	r2, #1
 8001404:	2100      	movs	r1, #0
 8001406:	20c8      	movs	r0, #200	; 0xc8
 8001408:	f017 fca0 	bl	8018d4c <xStreamBufferGenericCreate>
 800140c:	4603      	mov	r3, r0
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000228 	.word	0x20000228

08001420 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
 8001424:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ffdd 	bl	80013e8 <_Z41__static_initialization_and_destruction_0ii>
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	4798      	blx	r3
    }
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffd4 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f927 	bl	800170c <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_ZN7canzero10receiver_tD1Ev>:
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ffde 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_ZN7canzero10receiver_taSERKS0_>:
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f939 	bl	800176a <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	7d1a      	ldrb	r2, [r3, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	751a      	strb	r2, [r3, #20]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>:
};

static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
uint32_t g_size = 0;

unsigned int registerMessageReceiverInternal(std::function<void(RxMessage&)> receiver, uint32_t msgId, bool extendedId){
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b08d      	sub	sp, #52	; 0x34
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	4613      	mov	r3, r2
 8001528:	71fb      	strb	r3, [r7, #7]
	printf("registered Message receiver for id = %u\n", msgId);
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x7c>)
 800152e:	f015 fd11 	bl	8016f54 <printf_>
	taskENTER_CRITICAL();
 8001532:	f019 fddf 	bl	801b0f4 <vPortEnterCritical>
	const unsigned int id = receiverIdAcc++;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	4917      	ldr	r1, [pc, #92]	; (800159c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 800153e:	600a      	str	r2, [r1, #0]
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
	const receiver_t recv = {
		.m_callback = receiver,
		.m_id = msgId,
		.m_extendedId = extendedId,
		.m_receiverId = id
	};
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	68f9      	ldr	r1, [r7, #12]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f8ec 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	623b      	str	r3, [r7, #32]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
	g_receivers[g_size++] = recv;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	1c53      	adds	r3, r2, #1
 8001562:	490f      	ldr	r1, [pc, #60]	; (80015a0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 8001564:	600b      	str	r3, [r1, #0]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x88>)
 8001570:	4413      	add	r3, r2
 8001572:	f107 0210 	add.w	r2, r7, #16
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ffb2 	bl	80014e2 <_ZN7canzero10receiver_taSERKS0_>
	taskEXIT_CRITICAL();
 800157e:	f019 fde9 	bl	801b154 <vPortExitCritical>
	return id;
 8001582:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff9d 	bl	80014c8 <_ZN7canzero10receiver_tD1Ev>
	return id;
 800158e:	4623      	mov	r3, r4
}
 8001590:	4618      	mov	r0, r3
 8001592:	3734      	adds	r7, #52	; 0x34
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	0801eaec 	.word	0x0801eaec
 800159c:	2000022c 	.word	0x2000022c
 80015a0:	200007a8 	.word	0x200007a8
 80015a4:	20000230 	.word	0x20000230

080015a8 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:

bool processRxMessageReceiver(RxMessage& message){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d12f      	bne.n	800161c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d258      	bcs.n	800167c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 80015ca:	4930      	ldr	r1, [pc, #192]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	3314      	adds	r3, #20
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d119      	bne.n	8001614 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	4829      	ldr	r0, [pc, #164]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4403      	add	r3, r0
 80015f2:	3310      	adds	r3, #16
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4299      	cmp	r1, r3
 80015f8:	d10c      	bne.n	8001614 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001606:	4413      	add	r3, r2
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f8c8 	bl	80017a0 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001610:	2301      	movs	r3, #1
 8001612:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	3301      	adds	r3, #1
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	e7d1      	b.n	80015c0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	429a      	cmp	r2, r3
 8001628:	d228      	bcs.n	800167c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 800162a:	4918      	ldr	r1, [pc, #96]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3314      	adds	r3, #20
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d119      	bne.n	8001674 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4403      	add	r3, r0
 8001652:	3310      	adds	r3, #16
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4299      	cmp	r1, r3
 8001658:	d10c      	bne.n	8001674 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4a09      	ldr	r2, [pc, #36]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001666:	4413      	add	r3, r2
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f898 	bl	80017a0 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001670:	2301      	movs	r3, #1
 8001672:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3301      	adds	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e7d1      	b.n	8001620 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 800167c:	7dfb      	ldrb	r3, [r7, #23]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200007a8 	.word	0x200007a8
 800168c:	20000230 	.word	0x20000230

08001690 <_ZN3can25unregisterMessageReceiverEj>:



namespace can {

void unregisterMessageReceiver(unsigned int id){
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	using namespace canzero;
	taskENTER_CRITICAL();
 8001698:	f019 fd2c 	bl	801b0f4 <vPortEnterCritical>
	for(size_t i = 0;i<g_size;i++){
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	4b18      	ldr	r3, [pc, #96]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d226      	bcs.n	80016f8 <_ZN3can25unregisterMessageReceiverEj+0x68>
		if(g_receivers[i].m_receiverId == id){
 80016aa:	4917      	ldr	r1, [pc, #92]	; (8001708 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 80016ac:	68fa      	ldr	r2, [r7, #12]
 80016ae:	4613      	mov	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	1a9b      	subs	r3, r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	440b      	add	r3, r1
 80016b8:	3318      	adds	r3, #24
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d116      	bne.n	80016f0 <_ZN3can25unregisterMessageReceiverEj+0x60>
			g_receivers[i] = g_receivers[--g_size];
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 80016ce:	1898      	adds	r0, r3, r2
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	4a0b      	ldr	r2, [pc, #44]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b0a      	ldr	r3, [pc, #40]	; (8001704 <_ZN3can25unregisterMessageReceiverEj+0x74>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	4613      	mov	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	1a9b      	subs	r3, r3, r2
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	4a08      	ldr	r2, [pc, #32]	; (8001708 <_ZN3can25unregisterMessageReceiverEj+0x78>)
 80016e8:	4413      	add	r3, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f7ff fef9 	bl	80014e2 <_ZN7canzero10receiver_taSERKS0_>
	for(size_t i = 0;i<g_size;i++){
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3301      	adds	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	e7d3      	b.n	80016a0 <_ZN3can25unregisterMessageReceiverEj+0x10>
		}
	}
	taskEXIT_CRITICAL();
 80016f8:	f019 fd2c 	bl	801b154 <vPortExitCritical>
}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	200007a8 	.word	0x200007a8
 8001708:	20000230 	.word	0x20000230

0800170c <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fe8a 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
 800172e:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	4618      	mov	r0, r3
 8001734:	f7ff fe7c 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f000 f84d 	bl	80017d8 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d00d      	beq.n	8001760 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	6839      	ldr	r1, [r7, #0]
 800174c:	2202      	movs	r2, #2
 800174e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]
	}
    }
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>:
      operator=(const function& __x)
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	6839      	ldr	r1, [r7, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff ffd3 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 f836 	bl	80017f8 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>
 800178c:	f107 0308 	add.w	r3, r7, #8
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fe7f 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	return *this;
 8001796:	687b      	ldr	r3, [r7, #4]
      }
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fe60 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 80017b8:	f019 ffd0 	bl	801b75c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68dc      	ldr	r4, [r3, #12]
 80017c0:	687d      	ldr	r5, [r7, #4]
 80017c2:	6838      	ldr	r0, [r7, #0]
 80017c4:	f000 f839 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4628      	mov	r0, r5
 80017ce:	47a0      	blx	r4
 80017d0:	bf00      	nop
    }
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bdb0      	pop	{r4, r5, r7, pc}

080017d8 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>:
      explicit operator bool() const noexcept
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fe45 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f083 0301 	eor.w	r3, r3, #1
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>:
      void swap(function& __x) noexcept
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f000 f82c 	bl	8001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	f103 0208 	add.w	r2, r3, #8
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	3308      	adds	r3, #8
 8001818:	4619      	mov	r1, r3
 800181a:	4610      	mov	r0, r2
 800181c:	f000 f855 	bl	80018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f103 020c 	add.w	r2, r3, #12
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	330c      	adds	r3, #12
 800182a:	4619      	mov	r1, r3
 800182c:	4610      	mov	r0, r2
 800182e:	f000 f876 	bl	800191e <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}

0800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4618      	mov	r0, r3
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001866:	b580      	push	{r7, lr}
 8001868:	b084      	sub	sp, #16
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
 800186e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ffed 	bl	8001850 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001876:	4602      	mov	r2, r0
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001880:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001884:	6838      	ldr	r0, [r7, #0]
 8001886:	f7ff ffe3 	bl	8001850 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800188a:	4602      	mov	r2, r0
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001892:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffd8 	bl	8001850 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80018a0:	4602      	mov	r2, r0
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018a8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
 80018d2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffed 	bl	80018b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80018da:	4603      	mov	r3, r0
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80018e0:	6838      	ldr	r0, [r7, #0]
 80018e2:	f7ff ffe7 	bl	80018b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80018e6:	4603      	mov	r3, r0
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff ffde 	bl	80018b4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80018f8:	4603      	mov	r3, r0
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	601a      	str	r2, [r3, #0]
    }
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ffed 	bl	8001908 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800192e:	4603      	mov	r3, r0
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001934:	6838      	ldr	r0, [r7, #0]
 8001936:	f7ff ffe7 	bl	8001908 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800193a:	4603      	mov	r3, r0
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001942:	f107 030c 	add.w	r3, r7, #12
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ffde 	bl	8001908 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800194c:	4603      	mov	r3, r0
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	601a      	str	r2, [r3, #0]
    }
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <_Z41__static_initialization_and_destruction_0ii>:

}
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d10f      	bne.n	800198c <_Z41__static_initialization_and_destruction_0ii+0x30>
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001972:	4293      	cmp	r3, r2
 8001974:	d10a      	bne.n	800198c <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001978:	2431      	movs	r4, #49	; 0x31
 800197a:	461d      	mov	r5, r3
 800197c:	2c00      	cmp	r4, #0
 800197e:	db05      	blt.n	800198c <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001980:	4628      	mov	r0, r5
 8001982:	f7ff fd94 	bl	80014ae <_ZN7canzero10receiver_tC1Ev>
 8001986:	351c      	adds	r5, #28
 8001988:	3c01      	subs	r4, #1
 800198a:	e7f7      	b.n	800197c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d10d      	bne.n	80019ae <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001998:	4293      	cmp	r3, r2
 800199a:	d108      	bne.n	80019ae <_Z41__static_initialization_and_destruction_0ii+0x52>
 800199c:	4c07      	ldr	r4, [pc, #28]	; (80019bc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80019a0:	429c      	cmp	r4, r3
 80019a2:	d004      	beq.n	80019ae <_Z41__static_initialization_and_destruction_0ii+0x52>
 80019a4:	3c1c      	subs	r4, #28
 80019a6:	4620      	mov	r0, r4
 80019a8:	f7ff fd8e 	bl	80014c8 <_ZN7canzero10receiver_tD1Ev>
 80019ac:	e7f7      	b.n	800199e <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bdb0      	pop	{r4, r5, r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000230 	.word	0x20000230
 80019bc:	200007a8 	.word	0x200007a8

080019c0 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019c8:	2001      	movs	r0, #1
 80019ca:	f7ff ffc7 	bl	800195c <_Z41__static_initialization_and_destruction_0ii>
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019d8:	2000      	movs	r0, #0
 80019da:	f7ff ffbf 	bl	800195c <_Z41__static_initialization_and_destruction_0ii>
 80019de:	bd80      	pop	{r7, pc}

080019e0 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 80019e0:	b084      	sub	sp, #16
 80019e2:	b580      	push	{r7, lr}
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	f107 0c08 	add.w	ip, r7, #8
 80019ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 80019ee:	f107 0008 	add.w	r0, r7, #8
 80019f2:	f000 f835 	bl	8001a60 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d008      	beq.n	8001a0e <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 80019fc:	4b15      	ldr	r3, [pc, #84]	; (8001a54 <_Z9processRX9RxMessage+0x74>)
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	230a      	movs	r3, #10
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	f107 0108 	add.w	r1, r7, #8
 8001a08:	f017 fa2e 	bl	8018e68 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 8001a0c:	e01c      	b.n	8001a48 <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 8001a0e:	f107 0008 	add.w	r0, r7, #8
 8001a12:	f7ff fdc9 	bl	80015a8 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d115      	bne.n	8001a48 <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d109      	bne.n	8001a36 <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 8001a22:	f019 fb67 	bl	801b0f4 <vPortEnterCritical>
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480b      	ldr	r0, [pc, #44]	; (8001a58 <_Z9processRX9RxMessage+0x78>)
 8001a2c:	f015 fa92 	bl	8016f54 <printf_>
 8001a30:	f019 fb90 	bl	801b154 <vPortExitCritical>
}
 8001a34:	e008      	b.n	8001a48 <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 8001a36:	f019 fb5d 	bl	801b0f4 <vPortEnterCritical>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <_Z9processRX9RxMessage+0x7c>)
 8001a40:	f015 fa88 	bl	8016f54 <printf_>
 8001a44:	f019 fb86 	bl	801b154 <vPortExitCritical>
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a50:	b004      	add	sp, #16
 8001a52:	4770      	bx	lr
 8001a54:	200007ac 	.word	0x200007ac
 8001a58:	0801eb18 	.word	0x0801eb18
 8001a5c:	0801eb3c 	.word	0x0801eb3c

08001a60 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	bf0c      	ite	eq
 8001a7c:	2301      	moveq	r3, #1
 8001a7e:	2300      	movne	r3, #0
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	e000      	b.n	8001a86 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001a84:	2300      	movs	r3, #0
    }
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
	...

08001a94 <_Z41__static_initialization_and_destruction_0ii>:
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d10c      	bne.n	8001abe <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d107      	bne.n	8001abe <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 8001aae:	2201      	movs	r2, #1
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	20c8      	movs	r0, #200	; 0xc8
 8001ab4:	f017 f94a 	bl	8018d4c <xStreamBufferGenericCreate>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001abc:	6013      	str	r3, [r2, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200007ac 	.word	0x200007ac

08001acc <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7ff ffdd 	bl	8001a94 <_Z41__static_initialization_and_destruction_0ii>
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d10c      	bne.n	8001b06 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d107      	bne.n	8001b06 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001af6:	4a06      	ldr	r2, [pc, #24]	; (8001b10 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001af8:	2124      	movs	r1, #36	; 0x24
 8001afa:	2010      	movs	r0, #16
 8001afc:	f015 fe0c 	bl	8017718 <osMessageQueueNew>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a04      	ldr	r2, [pc, #16]	; (8001b14 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	0801f108 	.word	0x0801f108
 8001b14:	200007b0 	.word	0x200007b0

08001b18 <_GLOBAL__sub_I_czReceiveQueue>:
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff ffdb 	bl	8001adc <_Z41__static_initialization_and_destruction_0ii>
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2c:	f3bf 8f4f 	dsb	sy
}
 8001b30:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <__NVIC_SystemReset+0x24>)
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b3a:	4904      	ldr	r1, [pc, #16]	; (8001b4c <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <__NVIC_SystemReset+0x28>)
 8001b3e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b40:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b42:	f3bf 8f4f 	dsb	sy
}
 8001b46:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b48:	bf00      	nop
 8001b4a:	e7fd      	b.n	8001b48 <__NVIC_SystemReset+0x20>
 8001b4c:	e000ed00 	.word	0xe000ed00
 8001b50:	05fa0004 	.word	0x05fa0004

08001b54 <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 8001b54:	b5b0      	push	{r4, r5, r7, lr}
 8001b56:	b092      	sub	sp, #72	; 0x48
 8001b58:	af06      	add	r7, sp, #24
 8001b5a:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001b5c:	4b26      	ldr	r3, [pc, #152]	; (8001bf8 <_Z15cz_receive_taskPv+0xa4>)
 8001b5e:	6818      	ldr	r0, [r3, #0]
 8001b60:	f107 010c 	add.w	r1, r7, #12
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f015 fea9 	bl	80178c0 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d136      	bne.n	8001be2 <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8001b74:	f107 030c 	add.w	r3, r7, #12
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 f8e3 	bl	8001d44 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001b84:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b88:	2bff      	cmp	r3, #255	; 0xff
 8001b8a:	d1e7      	bne.n	8001b5c <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001b8c:	f7ff ffcc 	bl	8001b28 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4618      	mov	r0, r3
 8001b96:	f000 f8ee 	bl	8001d76 <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 8001ba0:	f107 030c 	add.w	r3, r7, #12
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 fc61 	bl	800546c <_Z22handleSDORequestUploadRK9RxMessage>
 8001baa:	e7d7      	b.n	8001b5c <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f000 f8f9 	bl	8001da8 <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f002 ffb6 	bl	8004b32 <_Z24handleSDORequestDownloadRK9RxMessage>
 8001bc6:	e7c9      	b.n	8001b5c <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001bc8:	466d      	mov	r5, sp
 8001bca:	f107 041c 	add.w	r4, r7, #28
 8001bce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	602b      	str	r3, [r5, #0]
 8001bd6:	f107 030c 	add.w	r3, r7, #12
 8001bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bdc:	f7ff ff00 	bl	80019e0 <_Z9processRX9RxMessage>
 8001be0:	e7bc      	b.n	8001b5c <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d1b9      	bne.n	8001b5c <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001be8:	f019 fa84 	bl	801b0f4 <vPortEnterCritical>
 8001bec:	4803      	ldr	r0, [pc, #12]	; (8001bfc <_Z15cz_receive_taskPv+0xa8>)
 8001bee:	f015 f9b1 	bl	8016f54 <printf_>
 8001bf2:	f019 faaf 	bl	801b154 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001bf6:	e7b1      	b.n	8001b5c <_Z15cz_receive_taskPv+0x8>
 8001bf8:	200007b0 	.word	0x200007b0
 8001bfc:	0801eb70 	.word	0x0801eb70

08001c00 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b096      	sub	sp, #88	; 0x58
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001c08:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c10:	2100      	movs	r1, #0
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f00f fb98 	bl	8011348 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001c18:	f107 040c 	add.w	r4, r7, #12
 8001c1c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001c20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c24:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c28:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	657b      	str	r3, [r7, #84]	; 0x54
 8001c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c32:	2b07      	cmp	r3, #7
 8001c34:	dc0e      	bgt.n	8001c54 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001c36:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	4413      	add	r3, r2
 8001c3e:	7819      	ldrb	r1, [r3, #0]
 8001c40:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	4413      	add	r3, r2
 8001c48:	460a      	mov	r2, r1
 8001c4a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4e:	3301      	adds	r3, #1
 8001c50:	657b      	str	r3, [r7, #84]	; 0x54
 8001c52:	e7ed      	b.n	8001c30 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	f107 010c 	add.w	r1, r7, #12
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f015 fdce 	bl	8017800 <osMessageQueuePut>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0

	}
}
 8001c68:	bf00      	nop
 8001c6a:	3758      	adds	r7, #88	; 0x58
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c70:	200007b0 	.word	0x200007b0

08001c74 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001c74:	b5b0      	push	{r4, r5, r7, lr}
 8001c76:	b096      	sub	sp, #88	; 0x58
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001c7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c80:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c84:	2101      	movs	r1, #1
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f00f fb5e 	bl	8011348 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001c8c:	f107 040c 	add.w	r4, r7, #12
 8001c90:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c9c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	657b      	str	r3, [r7, #84]	; 0x54
 8001ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ca6:	2b07      	cmp	r3, #7
 8001ca8:	dc0e      	bgt.n	8001cc8 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001caa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001cae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cb0:	4413      	add	r3, r2
 8001cb2:	7819      	ldrb	r1, [r3, #0]
 8001cb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cba:	4413      	add	r3, r2
 8001cbc:	460a      	mov	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8001cc6:	e7ed      	b.n	8001ca4 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	f107 010c 	add.w	r1, r7, #12
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f015 fd94 	bl	8017800 <osMessageQueuePut>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0

	}
}
 8001cdc:	bf00      	nop
 8001cde:	3758      	adds	r7, #88	; 0x58
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ce4:	200007b0 	.word	0x200007b0

08001ce8 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f00f fe72 	bl	80119da <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001cf6:	f3ef 8211 	mrs	r2, BASEPRI
 8001cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cfe:	f383 8811 	msr	BASEPRI, r3
 8001d02:	f3bf 8f6f 	isb	sy
 8001d06:	f3bf 8f4f 	dsb	sy
 8001d0a:	60fa      	str	r2, [r7, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001d10:	617b      	str	r3, [r7, #20]
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <HAL_CAN_ErrorCallback+0x44>)
 8001d14:	f015 f91e 	bl	8016f54 <printf_>
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001d22:	bf00      	nop
}
 8001d24:	bf00      	nop
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	0801eb88 	.word	0x0801eb88

08001d30 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f240 7281 	movw	r2, #1921	; 0x781
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	e000      	b.n	8001d6a <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d68:	2300      	movs	r3, #0
    }
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d109      	bne.n	8001d9a <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	e000      	b.n	8001d9c <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d9a:	2300      	movs	r3, #0
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f240 6201 	movw	r2, #1537	; 0x601
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e000      	b.n	8001dce <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001dcc:	2300      	movs	r3, #0
    }
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
	...

08001ddc <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d10c      	bne.n	8001e06 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d107      	bne.n	8001e06 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001df6:	4a06      	ldr	r2, [pc, #24]	; (8001e10 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001df8:	2120      	movs	r1, #32
 8001dfa:	2010      	movs	r0, #16
 8001dfc:	f015 fc8c 	bl	8017718 <osMessageQueueNew>
 8001e00:	4603      	mov	r3, r0
 8001e02:	4a04      	ldr	r2, [pc, #16]	; (8001e14 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	0801f120 	.word	0x0801f120
 8001e14:	200007b4 	.word	0x200007b4

08001e18 <_GLOBAL__sub_I_czSendQueue>:
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e20:	2001      	movs	r0, #1
 8001e22:	f7ff ffdb 	bl	8001ddc <_Z41__static_initialization_and_destruction_0ii>
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08e      	sub	sp, #56	; 0x38
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f9c9 	bl	80011cc <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001e3e:	4b5a      	ldr	r3, [pc, #360]	; (8001fa8 <_Z13cz_send_entryPv+0x180>)
 8001e40:	6818      	ldr	r0, [r3, #0]
 8001e42:	f107 010c 	add.w	r1, r7, #12
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f015 fd38 	bl	80178c0 <osMessageQueueGet>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	bf14      	ite	ne
 8001e56:	2301      	movne	r3, #1
 8001e58:	2300      	moveq	r3, #0
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001e60:	f00d fbe6 	bl	800f630 <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d901      	bls.n	8001e6e <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001e6a:	f00d fbe1 	bl	800f630 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	0c1b      	lsrs	r3, r3, #16
 8001e72:	041b      	lsls	r3, r3, #16
 8001e74:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e82:	d102      	bne.n	8001e8a <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001e84:	4b49      	ldr	r3, [pc, #292]	; (8001fac <_Z13cz_send_entryPv+0x184>)
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
 8001e88:	e010      	b.n	8001eac <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e90:	d102      	bne.n	8001e98 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001e92:	4b47      	ldr	r3, [pc, #284]	; (8001fb0 <_Z13cz_send_entryPv+0x188>)
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
 8001e96:	e009      	b.n	8001eac <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d102      	bne.n	8001ea8 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001ea2:	4b42      	ldr	r3, [pc, #264]	; (8001fac <_Z13cz_send_entryPv+0x184>)
 8001ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ea6:	e001      	b.n	8001eac <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001ea8:	4b41      	ldr	r3, [pc, #260]	; (8001fb0 <_Z13cz_send_entryPv+0x188>)
 8001eaa:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001eac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001eae:	f00f fa16 	bl	80112de <HAL_CAN_GetTxMailboxesFreeLevel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	bf14      	ite	ne
 8001eb8:	2301      	movne	r3, #1
 8001eba:	2300      	moveq	r3, #0
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001ec2:	f107 0008 	add.w	r0, r7, #8
 8001ec6:	f107 030c 	add.w	r3, r7, #12
 8001eca:	f103 0218 	add.w	r2, r3, #24
 8001ece:	f107 010c 	add.w	r1, r7, #12
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ed6:	f00f f927 	bl	8011128 <HAL_CAN_AddTxMessage>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf14      	ite	ne
 8001ee0:	2301      	movne	r3, #1
 8001ee2:	2300      	moveq	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d059      	beq.n	8001f9e <_Z13cz_send_entryPv+0x176>
				/* Transmission request Error */
				Error_Handler();
 8001eea:	f00d fba1 	bl	800f630 <Error_Handler>
 8001eee:	e056      	b.n	8001f9e <_Z13cz_send_entryPv+0x176>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef2:	4a2e      	ldr	r2, [pc, #184]	; (8001fac <_Z13cz_send_entryPv+0x184>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d10c      	bne.n	8001f12 <_Z13cz_send_entryPv+0xea>
				OD_CAN1_DelayedTxMessages++;
 8001ef8:	4b2e      	ldr	r3, [pc, #184]	; (8001fb4 <_Z13cz_send_entryPv+0x18c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	4a2d      	ldr	r2, [pc, #180]	; (8001fb4 <_Z13cz_send_entryPv+0x18c>)
 8001f00:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can1 tx mailbox overflow.\n")
 8001f02:	f019 f8f7 	bl	801b0f4 <vPortEnterCritical>
 8001f06:	482c      	ldr	r0, [pc, #176]	; (8001fb8 <_Z13cz_send_entryPv+0x190>)
 8001f08:	f015 f824 	bl	8016f54 <printf_>
 8001f0c:	f019 f922 	bl	801b154 <vPortExitCritical>
 8001f10:	e00b      	b.n	8001f2a <_Z13cz_send_entryPv+0x102>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <_Z13cz_send_entryPv+0x194>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a28      	ldr	r2, [pc, #160]	; (8001fbc <_Z13cz_send_entryPv+0x194>)
 8001f1a:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can2 tx mailbox overflow.\n")
 8001f1c:	f019 f8ea 	bl	801b0f4 <vPortEnterCritical>
 8001f20:	4827      	ldr	r0, [pc, #156]	; (8001fc0 <_Z13cz_send_entryPv+0x198>)
 8001f22:	f015 f817 	bl	8016f54 <printf_>
 8001f26:	f019 f915 	bl	801b154 <vPortExitCritical>
			}

			osDelay(1);		// Use smallest delay possible
 8001f2a:	2001      	movs	r0, #1
 8001f2c:	f015 f98c 	bl	8017248 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001f30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f32:	f00f f9d4 	bl	80112de <HAL_CAN_GetTxMailboxesFreeLevel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	bf14      	ite	ne
 8001f3c:	2301      	movne	r3, #1
 8001f3e:	2300      	moveq	r3, #0
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <_Z13cz_send_entryPv+0x14c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001f46:	f107 0008 	add.w	r0, r7, #8
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	f103 0218 	add.w	r2, r3, #24
 8001f52:	f107 010c 	add.w	r1, r7, #12
 8001f56:	4603      	mov	r3, r0
 8001f58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f5a:	f00f f8e5 	bl	8011128 <HAL_CAN_AddTxMessage>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	bf14      	ite	ne
 8001f64:	2301      	movne	r3, #1
 8001f66:	2300      	moveq	r3, #0
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d017      	beq.n	8001f9e <_Z13cz_send_entryPv+0x176>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001f6e:	f007 fa52 	bl	8009416 <_ZN7canzero32handle_trasmission_request_errorEv>
 8001f72:	e014      	b.n	8001f9e <_Z13cz_send_entryPv+0x176>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f76:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <_Z13cz_send_entryPv+0x184>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <_Z13cz_send_entryPv+0x166>
					OD_CAN1_DiscardedTxMessages++;
 8001f7c:	4b11      	ldr	r3, [pc, #68]	; (8001fc4 <_Z13cz_send_entryPv+0x19c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	3301      	adds	r3, #1
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <_Z13cz_send_entryPv+0x19c>)
 8001f84:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001f86:	4809      	ldr	r0, [pc, #36]	; (8001fac <_Z13cz_send_entryPv+0x184>)
 8001f88:	f007 fa3b 	bl	8009402 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001f8c:	e007      	b.n	8001f9e <_Z13cz_send_entryPv+0x176>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <_Z13cz_send_entryPv+0x1a0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <_Z13cz_send_entryPv+0x1a0>)
 8001f96:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <_Z13cz_send_entryPv+0x188>)
 8001f9a:	f007 fa32 	bl	8009402 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001fa4:	e74b      	b.n	8001e3e <_Z13cz_send_entryPv+0x16>
 8001fa6:	bf00      	nop
 8001fa8:	200007b4 	.word	0x200007b4
 8001fac:	20000f88 	.word	0x20000f88
 8001fb0:	20000fb0 	.word	0x20000fb0
 8001fb4:	20000914 	.word	0x20000914
 8001fb8:	0801ebb0 	.word	0x0801ebb0
 8001fbc:	2000092c 	.word	0x2000092c
 8001fc0:	0801ebd8 	.word	0x0801ebd8
 8001fc4:	2000090c 	.word	0x2000090c
 8001fc8:	20000924 	.word	0x20000924

08001fcc <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b08c      	sub	sp, #48	; 0x30
 8001fd0:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001fd2:	2080      	movs	r0, #128	; 0x80
 8001fd4:	f000 f922 	bl	800221c <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	dc51      	bgt.n	8002086 <_ZN7canzero4initEv+0xba>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001fea:	4b87      	ldr	r3, [pc, #540]	; (8002208 <_ZN7canzero4initEv+0x23c>)
 8001fec:	0b5b      	lsrs	r3, r3, #13
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001ff2:	4b85      	ldr	r3, [pc, #532]	; (8002208 <_ZN7canzero4initEv+0x23c>)
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001ffe:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002002:	0b5b      	lsrs	r3, r3, #13
 8002004:	b29b      	uxth	r3, r3
 8002006:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8002008:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	b29b      	uxth	r3, r3
 8002010:	f043 0306 	orr.w	r3, r3, #6
 8002014:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	0fda      	lsrs	r2, r3, #31
 800201a:	4413      	add	r3, r2
 800201c:	105b      	asrs	r3, r3, #1
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d102      	bne.n	800202c <_ZN7canzero4initEv+0x60>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	e001      	b.n	8002030 <_ZN7canzero4initEv+0x64>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800202c:	2301      	movs	r3, #1
 800202e:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8002030:	2301      	movs	r3, #1
 8002032:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8002034:	230e      	movs	r3, #14
 8002036:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8002038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800203a:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800203c:	463b      	mov	r3, r7
 800203e:	4619      	mov	r1, r3
 8002040:	4872      	ldr	r0, [pc, #456]	; (800220c <_ZN7canzero4initEv+0x240>)
 8002042:	f00e ff4d 	bl	8010ee0 <HAL_CAN_ConfigFilter>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <_ZN7canzero4initEv+0x8e>
			Error_Handler(); /* Filter configuration Error */
 8002056:	f00d faeb 	bl	800f630 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 800205a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205c:	330e      	adds	r3, #14
 800205e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8002060:	463b      	mov	r3, r7
 8002062:	4619      	mov	r1, r3
 8002064:	486a      	ldr	r0, [pc, #424]	; (8002210 <_ZN7canzero4initEv+0x244>)
 8002066:	f00e ff3b 	bl	8010ee0 <HAL_CAN_ConfigFilter>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <_ZN7canzero4initEv+0xb2>
			Error_Handler(); /* Filter configuration Error */
 800207a:	f00d fad9 	bl	800f630 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 800207e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002080:	3301      	adds	r3, #1
 8002082:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002084:	e7aa      	b.n	8001fdc <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8002086:	2300      	movs	r3, #0
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	2b16      	cmp	r3, #22
 800208e:	dc6a      	bgt.n	8002166 <_ZN7canzero4initEv+0x19a>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8002090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002092:	0fda      	lsrs	r2, r3, #31
 8002094:	4413      	add	r3, r2
 8002096:	105b      	asrs	r3, r3, #1
 8002098:	3301      	adds	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 80020a0:	4a5c      	ldr	r2, [pc, #368]	; (8002214 <_ZN7canzero4initEv+0x248>)
 80020a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	015b      	lsls	r3, r3, #5
 80020aa:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 80020ac:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <_ZN7canzero4initEv+0x24c>)
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b4:	015b      	lsls	r3, r3, #5
 80020b6:	f043 0318 	orr.w	r3, r3, #24
 80020ba:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	2b16      	cmp	r3, #22
 80020c0:	d106      	bne.n	80020d0 <_ZN7canzero4initEv+0x104>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80020c2:	2301      	movs	r3, #1
 80020c4:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 80020ca:	2306      	movs	r3, #6
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	e011      	b.n	80020f4 <_ZN7canzero4initEv+0x128>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 80020d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020d6:	3301      	adds	r3, #1
 80020d8:	4a4e      	ldr	r2, [pc, #312]	; (8002214 <_ZN7canzero4initEv+0x248>)
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	015b      	lsls	r3, r3, #5
 80020e0:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	3301      	adds	r3, #1
 80020e6:	4a4c      	ldr	r2, [pc, #304]	; (8002218 <_ZN7canzero4initEv+0x24c>)
 80020e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	f043 0318 	orr.w	r3, r3, #24
 80020f2:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	0fda      	lsrs	r2, r3, #31
 80020f8:	4413      	add	r3, r2
 80020fa:	105b      	asrs	r3, r3, #1
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <_ZN7canzero4initEv+0x13e>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002104:	2300      	movs	r3, #0
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e001      	b.n	800210e <_ZN7canzero4initEv+0x142>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800210a:	2301      	movs	r3, #1
 800210c:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 800210e:	2301      	movs	r3, #1
 8002110:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8002112:	230e      	movs	r3, #14
 8002114:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8002116:	463b      	mov	r3, r7
 8002118:	4619      	mov	r1, r3
 800211a:	483c      	ldr	r0, [pc, #240]	; (800220c <_ZN7canzero4initEv+0x240>)
 800211c:	f00e fee0 	bl	8010ee0 <HAL_CAN_ConfigFilter>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	bf14      	ite	ne
 8002126:	2301      	movne	r3, #1
 8002128:	2300      	moveq	r3, #0
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <_ZN7canzero4initEv+0x168>
			Error_Handler(); /* Filter configuration Error */
 8002130:	f00d fa7e 	bl	800f630 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	0fda      	lsrs	r2, r3, #31
 8002138:	4413      	add	r3, r2
 800213a:	105b      	asrs	r3, r3, #1
 800213c:	330f      	adds	r3, #15
 800213e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8002140:	463b      	mov	r3, r7
 8002142:	4619      	mov	r1, r3
 8002144:	4832      	ldr	r0, [pc, #200]	; (8002210 <_ZN7canzero4initEv+0x244>)
 8002146:	f00e fecb 	bl	8010ee0 <HAL_CAN_ConfigFilter>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <_ZN7canzero4initEv+0x192>
			Error_Handler(); /* Filter configuration Error */
 800215a:	f00d fa69 	bl	800f630 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 800215e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002160:	3302      	adds	r3, #2
 8002162:	62bb      	str	r3, [r7, #40]	; 0x28
 8002164:	e791      	b.n	800208a <_ZN7canzero4initEv+0xbe>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8002166:	4829      	ldr	r0, [pc, #164]	; (800220c <_ZN7canzero4initEv+0x240>)
 8002168:	f00e ff9a 	bl	80110a0 <HAL_CAN_Start>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <_ZN7canzero4initEv+0x1b2>
 8002172:	4827      	ldr	r0, [pc, #156]	; (8002210 <_ZN7canzero4initEv+0x244>)
 8002174:	f00e ff94 	bl	80110a0 <HAL_CAN_Start>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <_ZN7canzero4initEv+0x1b6>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <_ZN7canzero4initEv+0x1b8>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <_ZN7canzero4initEv+0x1c0>
		Error_Handler(); /* Start Error */
 8002188:	f00d fa52 	bl	800f630 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800218c:	2102      	movs	r1, #2
 800218e:	481f      	ldr	r0, [pc, #124]	; (800220c <_ZN7canzero4initEv+0x240>)
 8002190:	f00f f9ec 	bl	801156c <HAL_CAN_ActivateNotification>
 8002194:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10e      	bne.n	80021b8 <_ZN7canzero4initEv+0x1ec>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 800219a:	2110      	movs	r1, #16
 800219c:	481b      	ldr	r0, [pc, #108]	; (800220c <_ZN7canzero4initEv+0x240>)
 800219e:	f00f f9e5 	bl	801156c <HAL_CAN_ActivateNotification>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <_ZN7canzero4initEv+0x1ec>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80021a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ac:	4817      	ldr	r0, [pc, #92]	; (800220c <_ZN7canzero4initEv+0x240>)
 80021ae:	f00f f9dd 	bl	801156c <HAL_CAN_ActivateNotification>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <_ZN7canzero4initEv+0x1f0>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <_ZN7canzero4initEv+0x1f2>
 80021bc:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <_ZN7canzero4initEv+0x1fa>
		Error_Handler();
 80021c2:	f00d fa35 	bl	800f630 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80021c6:	2102      	movs	r1, #2
 80021c8:	4811      	ldr	r0, [pc, #68]	; (8002210 <_ZN7canzero4initEv+0x244>)
 80021ca:	f00f f9cf 	bl	801156c <HAL_CAN_ActivateNotification>
 80021ce:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10e      	bne.n	80021f2 <_ZN7canzero4initEv+0x226>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 80021d4:	2110      	movs	r1, #16
 80021d6:	480e      	ldr	r0, [pc, #56]	; (8002210 <_ZN7canzero4initEv+0x244>)
 80021d8:	f00f f9c8 	bl	801156c <HAL_CAN_ActivateNotification>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d107      	bne.n	80021f2 <_ZN7canzero4initEv+0x226>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80021e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021e6:	480a      	ldr	r0, [pc, #40]	; (8002210 <_ZN7canzero4initEv+0x244>)
 80021e8:	f00f f9c0 	bl	801156c <HAL_CAN_ActivateNotification>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <_ZN7canzero4initEv+0x22a>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <_ZN7canzero4initEv+0x22c>
 80021f6:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <_ZN7canzero4initEv+0x234>
		Error_Handler();
 80021fc:	f00d fa18 	bl	800f630 <Error_Handler>
	}
}
 8002200:	bf00      	nop
 8002202:	3730      	adds	r7, #48	; 0x30
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	1ffffffa 	.word	0x1ffffffa
 800220c:	20000f88 	.word	0x20000f88
 8002210:	20000fb0 	.word	0x20000fb0
 8002214:	0801f194 	.word	0x0801f194
 8002218:	0801f138 	.word	0x0801f138

0800221c <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8002226:	4b09      	ldr	r3, [pc, #36]	; (800224c <_ZN7canzero9setStatusE9cz_status+0x30>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f04f 31ff 	mov.w	r1, #4294967295
 800222e:	4618      	mov	r0, r3
 8002230:	f015 f8ab 	bl	801738a <osMutexAcquire>
	nodeStatus = new_status;
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <_ZN7canzero9setStatusE9cz_status+0x34>)
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <_ZN7canzero9setStatusE9cz_status+0x30>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f015 f8ee 	bl	8017420 <osMutexRelease>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200007b8 	.word	0x200007b8
 8002250:	200007bc 	.word	0x200007bc

08002254 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 800225a:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <_ZN7canzero9getStatusEv+0x30>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f04f 31ff 	mov.w	r1, #4294967295
 8002262:	4618      	mov	r0, r3
 8002264:	f015 f891 	bl	801738a <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8002268:	4b07      	ldr	r3, [pc, #28]	; (8002288 <_ZN7canzero9getStatusEv+0x34>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <_ZN7canzero9getStatusEv+0x30>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f015 f8d4 	bl	8017420 <osMutexRelease>
	return returnValue;
 8002278:	79fb      	ldrb	r3, [r7, #7]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200007b8 	.word	0x200007b8
 8002288:	200007bc 	.word	0x200007bc

0800228c <_Z41__static_initialization_and_destruction_0ii>:
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10a      	bne.n	80022b2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d105      	bne.n	80022b2 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80022a8:	f014 ffe9 	bl	801727e <osMutexNew>
 80022ac:	4603      	mov	r3, r0
 80022ae:	4a04      	ldr	r2, [pc, #16]	; (80022c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80022b0:	6013      	str	r3, [r2, #0]
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	0801f1f0 	.word	0x0801f1f0
 80022c0:	200007b8 	.word	0x200007b8

080022c4 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022cc:	2001      	movs	r0, #1
 80022ce:	f7ff ffdd 	bl	800228c <_Z41__static_initialization_and_destruction_0ii>
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08e      	sub	sp, #56	; 0x38
 80022d8:	af02      	add	r7, sp, #8
 80022da:	6078      	str	r0, [r7, #4]
	canzero::init();
 80022dc:	f7ff fe76 	bl	8001fcc <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 80022e4:	f107 0318 	add.w	r3, r7, #24
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2318      	movs	r3, #24
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022f4:	4939      	ldr	r1, [pc, #228]	; (80023dc <canzero_start+0x108>)
 80022f6:	483a      	ldr	r0, [pc, #232]	; (80023e0 <canzero_start+0x10c>)
 80022f8:	f017 f90b 	bl	8019512 <xTaskCreate>
 80022fc:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 80022fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d006      	beq.n	8002312 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8002304:	f018 fef6 	bl	801b0f4 <vPortEnterCritical>
 8002308:	4836      	ldr	r0, [pc, #216]	; (80023e4 <canzero_start+0x110>)
 800230a:	f014 fe23 	bl	8016f54 <printf_>
 800230e:	f018 ff21 	bl	801b154 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	2318      	movs	r3, #24
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	2300      	movs	r3, #0
 8002322:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002326:	4930      	ldr	r1, [pc, #192]	; (80023e8 <canzero_start+0x114>)
 8002328:	4830      	ldr	r0, [pc, #192]	; (80023ec <canzero_start+0x118>)
 800232a:	f017 f8f2 	bl	8019512 <xTaskCreate>
 800232e:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8002330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002332:	2b01      	cmp	r3, #1
 8002334:	d006      	beq.n	8002344 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 8002336:	f018 fedd 	bl	801b0f4 <vPortEnterCritical>
 800233a:	482d      	ldr	r0, [pc, #180]	; (80023f0 <canzero_start+0x11c>)
 800233c:	f014 fe0a 	bl	8016f54 <printf_>
 8002340:	f018 ff08 	bl	801b154 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 8002348:	f107 0310 	add.w	r3, r7, #16
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	2318      	movs	r3, #24
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	2300      	movs	r3, #0
 8002354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002358:	4926      	ldr	r1, [pc, #152]	; (80023f4 <canzero_start+0x120>)
 800235a:	4827      	ldr	r0, [pc, #156]	; (80023f8 <canzero_start+0x124>)
 800235c:	f017 f8d9 	bl	8019512 <xTaskCreate>
 8002360:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 8002362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002364:	2b01      	cmp	r3, #1
 8002366:	d006      	beq.n	8002376 <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 8002368:	f018 fec4 	bl	801b0f4 <vPortEnterCritical>
 800236c:	4823      	ldr	r0, [pc, #140]	; (80023fc <canzero_start+0x128>)
 800236e:	f014 fdf1 	bl	8016f54 <printf_>
 8002372:	f018 feef 	bl	801b154 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 800237a:	f107 030c 	add.w	r3, r7, #12
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	2318      	movs	r3, #24
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	2300      	movs	r3, #0
 8002386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800238a:	491d      	ldr	r1, [pc, #116]	; (8002400 <canzero_start+0x12c>)
 800238c:	481d      	ldr	r0, [pc, #116]	; (8002404 <canzero_start+0x130>)
 800238e:	f017 f8c0 	bl	8019512 <xTaskCreate>
 8002392:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d006      	beq.n	80023a8 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 800239a:	f018 feab 	bl	801b0f4 <vPortEnterCritical>
 800239e:	481a      	ldr	r0, [pc, #104]	; (8002408 <canzero_start+0x134>)
 80023a0:	f014 fdd8 	bl	8016f54 <printf_>
 80023a4:	f018 fed6 	bl	801b154 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	2328      	movs	r3, #40	; 0x28
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023bc:	4913      	ldr	r1, [pc, #76]	; (800240c <canzero_start+0x138>)
 80023be:	4814      	ldr	r0, [pc, #80]	; (8002410 <canzero_start+0x13c>)
 80023c0:	f017 f8a7 	bl	8019512 <xTaskCreate>
 80023c4:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d001      	beq.n	80023d0 <canzero_start+0xfc>
		Error_Handler();
 80023cc:	f00d f930 	bl	800f630 <Error_Handler>
	}
	*/


	while (true) {
		osDelay(osWaitForever);
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f014 ff38 	bl	8017248 <osDelay>
 80023d8:	e7fa      	b.n	80023d0 <canzero_start+0xfc>
 80023da:	bf00      	nop
 80023dc:	0801ec10 	.word	0x0801ec10
 80023e0:	08001e29 	.word	0x08001e29
 80023e4:	0801ec18 	.word	0x0801ec18
 80023e8:	0801ec3c 	.word	0x0801ec3c
 80023ec:	08001b55 	.word	0x08001b55
 80023f0:	0801ec48 	.word	0x0801ec48
 80023f4:	0801ec70 	.word	0x0801ec70
 80023f8:	0800137d 	.word	0x0800137d
 80023fc:	0801ec7c 	.word	0x0801ec7c
 8002400:	0801ecac 	.word	0x0801ecac
 8002404:	08001315 	.word	0x08001315
 8002408:	0801ecb8 	.word	0x0801ecb8
 800240c:	0801ece8 	.word	0x0801ece8
 8002410:	0800129d 	.word	0x0800129d

08002414 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]

	}
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4618      	mov	r0, r3
 8002464:	370c      	adds	r7, #12
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <_ZN10AdcChannel8setValueEt>:

	uint16_t get() {
		return m_value;
	}

	void setValue(uint16_t value){
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	807b      	strh	r3, [r7, #2]
		m_value = value;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	801a      	strh	r2, [r3, #0]
	}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4618      	mov	r0, r3
 8002498:	f7fe ffd8 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 80024a6:	b5b0      	push	{r4, r5, r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	240f      	movs	r4, #15
 80024b2:	461d      	mov	r5, r3
 80024b4:	2c00      	cmp	r4, #0
 80024b6:	db05      	blt.n	80024c4 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 80024b8:	4628      	mov	r0, r5
 80024ba:	f000 f9bb 	bl	8002834 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 80024be:	3510      	adds	r5, #16
 80024c0:	3c01      	subs	r4, #1
 80024c2:	e7f7      	b.n	80024b4 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4618      	mov	r0, r3
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bdb0      	pop	{r4, r5, r7, pc}

080024d6 <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 80024d6:	b590      	push	{r4, r7, lr}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	429c      	cmp	r4, r3
 80024ee:	d004      	beq.n	80024fa <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 80024f0:	3c10      	subs	r4, #16
 80024f2:	4620      	mov	r0, r4
 80024f4:	f7ff ffca 	bl	800248c <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 80024f8:	e7f7      	b.n	80024ea <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	bd90      	pop	{r4, r7, pc}

08002504 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
 8002508:	4801      	ldr	r0, [pc, #4]	; (8002510 <__tcf_0+0xc>)
 800250a:	f7ff ffe4 	bl	80024d6 <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200007c0 	.word	0x200007c0

08002514 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	f3bf 8f5b 	dmb	ish
 8002520:	b2db      	uxtb	r3, r3
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8002534:	480b      	ldr	r0, [pc, #44]	; (8002564 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8002536:	f019 f8fd 	bl	801b734 <__cxa_guard_acquire>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d008      	beq.n	800255c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 800254a:	4807      	ldr	r0, [pc, #28]	; (8002568 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 800254c:	f7ff ffab 	bl	80024a6 <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 8002550:	4806      	ldr	r0, [pc, #24]	; (800256c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 8002552:	f019 fc86 	bl	801be62 <atexit>
 8002556:	4803      	ldr	r0, [pc, #12]	; (8002564 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8002558:	f019 f8f8 	bl	801b74c <__cxa_guard_release>
		return instance;
 800255c:	4b02      	ldr	r3, [pc, #8]	; (8002568 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800255e:	4618      	mov	r0, r3
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	200008c4 	.word	0x200008c4
 8002568:	200007c0 	.word	0x200007c0
 800256c:	08002505 	.word	0x08002505

08002570 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002580:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002588:	1c59      	adds	r1, r3, #1
 800258a:	687a      	ldr	r2, [r7, #4]
 800258c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8002590:	011b      	lsls	r3, r3, #4
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	4413      	add	r3, r2
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f000 f958 	bl	800284e <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 800259e:	68fb      	ldr	r3, [r7, #12]
	}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}

080025a8 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	18d0      	adds	r0, r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f000 f941 	bl	800284e <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80025d2:	011b      	lsls	r3, r3, #4
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	2100      	movs	r1, #0
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f952 	bl	8002884 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80025e6:	1e5a      	subs	r2, r3, #1
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
	...

080025f8 <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
	switch (module) {
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <_ZL17AdcModuleToHandle9AdcModule+0x16>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d002      	beq.n	8002612 <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 800260c:	e003      	b.n	8002616 <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 8002610:	e004      	b.n	800261c <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 8002614:	e002      	b.n	800261c <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 8002616:	f00d f80b 	bl	800f630 <Error_Handler>
		return nullptr;
 800261a:	2300      	movs	r3, #0
	}
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000e38 	.word	0x20000e38
 8002628:	20000e80 	.word	0x20000e80

0800262c <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d104      	bne.n	800264c <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f8e4 	bl	8002814 <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 8002654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 800265e:	6838      	ldr	r0, [r7, #0]
 8002660:	f7ff ffca 	bl	80025f8 <_ZL17AdcModuleToHandle9AdcModule>
 8002664:	4602      	mov	r2, r0
					)) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	69da      	ldr	r2, [r3, #28]
					)) {
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	685c      	ldr	r4, [r3, #4]
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 800267a:	429c      	cmp	r4, r3
 800267c:	d801      	bhi.n	8002682 <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 800267e:	0063      	lsls	r3, r4, #1
 8002680:	e001      	b.n	8002686 <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 8002682:	f04f 33ff 	mov.w	r3, #4294967295
 8002686:	4618      	mov	r0, r3
 8002688:	f019 f863 	bl	801b752 <_Znaj>
 800268c:	4603      	mov	r3, r0
 800268e:	461e      	mov	r6, r3
 8002690:	4635      	mov	r5, r6
 8002692:	1e63      	subs	r3, r4, #1
 8002694:	461c      	mov	r4, r3
 8002696:	2c00      	cmp	r4, #0
 8002698:	db05      	blt.n	80026a6 <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 800269a:	4628      	mov	r0, r5
 800269c:	f7ff fedc 	bl	8002458 <_ZN10AdcChannelC1Ev>
 80026a0:	3502      	adds	r5, #2
 80026a2:	3c01      	subs	r4, #1
 80026a4:	e7f7      	b.n	8002696 <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4a22      	ldr	r2, [pc, #136]	; (8002738 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d801      	bhi.n	80026b8 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	e001      	b.n	80026bc <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 80026b8:	f04f 33ff 	mov.w	r3, #4294967295
 80026bc:	4618      	mov	r0, r3
 80026be:	f019 f848 	bl	801b752 <_Znaj>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
					)) {
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60da      	str	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 80026d0:	f7ff ff20 	bl	8002514 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 80026d4:	4604      	mov	r4, r0
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	f107 0308 	add.w	r3, r7, #8
 80026dc:	4611      	mov	r1, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f8ea 	bl	80028b8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 80026e4:	f107 0308 	add.w	r3, r7, #8
 80026e8:	4619      	mov	r1, r3
 80026ea:	4620      	mov	r0, r4
 80026ec:	f7ff ff40 	bl	8002570 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 80026f0:	4602      	mov	r2, r0
					)) {
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 80026f6:	f107 0308 	add.w	r3, r7, #8
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff fec6 	bl	800248c <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 8002700:	2200      	movs	r2, #0
 8002702:	2100      	movs	r1, #0
 8002704:	2001      	movs	r0, #1
 8002706:	f014 fec8 	bl	801749a <osSemaphoreNew>
 800270a:	4602      	mov	r2, r0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8002722:	461a      	mov	r2, r3
 8002724:	f00d ff26 	bl	8010574 <HAL_ADC_Start_DMA>
		update();
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f83f 	bl	80027ac <_ZN19AdcModuleController6updateEv>
	}
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4618      	mov	r0, r3
 8002732:	371c      	adds	r7, #28
 8002734:	46bd      	mov	sp, r7
 8002736:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002738:	3ffffffc 	.word	0x3ffffffc

0800273c <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 8002744:	f7ff fee6 	bl	8002514 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8002748:	4602      	mov	r2, r0
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	4619      	mov	r1, r3
 8002750:	4610      	mov	r0, r2
 8002752:	f7ff ff29 	bl	80025a8 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	4618      	mov	r0, r3
 800275c:	f014 ffbc 	bl	80176d8 <osSemaphoreGetCount>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	bf14      	ite	ne
 8002766:	2301      	movne	r3, #1
 8002768:	2300      	moveq	r3, #0
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d006      	beq.n	800277e <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	4618      	mov	r0, r3
 800277a:	f014 ff17 	bl	80175ac <osSemaphoreAcquire>
		}
		delete[] m_channels;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d004      	beq.n	8002790 <_ZN19AdcModuleControllerD1Ev+0x54>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	4618      	mov	r0, r3
 800278c:	f018 ffd0 	bl	801b730 <_ZdaPv>
		delete[] m_buffer;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d004      	beq.n	80027a2 <_ZN19AdcModuleControllerD1Ev+0x66>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4618      	mov	r0, r3
 800279e:	f018 ffc7 	bl	801b730 <_ZdaPv>
	}
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <_ZN19AdcModuleController6updateEv>:
			Error_Handler();
		}
		return m_channels + rank;
	}

	void update() {
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	f04f 31ff 	mov.w	r1, #4294967295
 80027bc:	4618      	mov	r0, r3
 80027be:	f014 fef5 	bl	80175ac <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	68fa      	ldr	r2, [r7, #12]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d211      	bcs.n	80027f4 <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689a      	ldr	r2, [r3, #8]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	18d0      	adds	r0, r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	4413      	add	r3, r2
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	4619      	mov	r1, r3
 80027e8:	f7ff fe41 	bl	800246e <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	e7e8      	b.n	80027c6 <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8002806:	461a      	mov	r2, r3
 8002808:	f00d feb4 	bl	8010574 <HAL_ADC_Start_DMA>
	}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <_ZN19AdcModuleController15dmaCplrCallbackEv>:
			update();
	}

private:

	void dmaCplrCallback() {
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	4618      	mov	r0, r3
 8002828:	f014 ff12 	bl	8017650 <osSemaphoreRelease>
	}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fdf6 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4618      	mov	r0, r3
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 800284e:	b580      	push	{r7, lr}
 8002850:	b086      	sub	sp, #24
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8002858:	f107 0308 	add.w	r3, r7, #8
 800285c:	6839      	ldr	r1, [r7, #0]
 800285e:	4618      	mov	r0, r3
 8002860:	f000 f854 	bl	800290c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 8002864:	f107 0308 	add.w	r3, r7, #8
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f870 	bl	8002950 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 8002870:	f107 0308 	add.w	r3, r7, #8
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fe09 	bl	800248c <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 800287a:	687b      	ldr	r3, [r7, #4]
      }
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	2203      	movs	r2, #3
 80028a0:	4798      	blx	r3
	    _M_manager = nullptr;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]
	return *this;
 80028ae:	687b      	ldr	r3, [r7, #4]
      }
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7fe fdb3 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80028ca:	463b      	mov	r3, r7
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 f86b 	bl	80029a8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00f      	beq.n	80028f8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80028d8:	687c      	ldr	r4, [r7, #4]
 80028da:	463b      	mov	r3, r7
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f86e 	bl	80029be <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4619      	mov	r1, r3
 80028e6:	4620      	mov	r0, r4
 80028e8:	f000 f874 	bl	80029d4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a05      	ldr	r2, [pc, #20]	; (8002904 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 80028f0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a04      	ldr	r2, [pc, #16]	; (8002908 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 80028f6:	609a      	str	r2, [r3, #8]
      }
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}
 8002902:	bf00      	nop
 8002904:	080029f9 	.word	0x080029f9
 8002908:	08002a23 	.word	0x08002a23

0800290c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4618      	mov	r0, r3
 800291a:	f7fe fd89 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800291e:	6838      	ldr	r0, [r7, #0]
 8002920:	f000 f89e 	bl	8002a60 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	6839      	ldr	r1, [r7, #0]
 8002932:	2202      	movs	r2, #2
 8002934:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]
    }
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7fe ff80 	bl	8001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f103 0208 	add.w	r2, r3, #8
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	3308      	adds	r3, #8
 8002970:	4619      	mov	r1, r3
 8002972:	4610      	mov	r0, r2
 8002974:	f7fe ffa9 	bl	80018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f103 020c 	add.w	r2, r3, #12
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	330c      	adds	r3, #12
 8002982:	4619      	mov	r1, r3
 8002984:	4610      	mov	r0, r2
 8002986:	f000 f886 	bl	8002a96 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	  { return true; }
 80029b0:	2301      	movs	r3, #1
 80029b2:	4618      	mov	r0, r3
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80029d4:	b590      	push	{r4, r7, lr}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f7ff ffed 	bl	80029be <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4622      	mov	r2, r4
 80029e8:	4619      	mov	r1, r3
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f872 	bl	8002ad4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}

080029f8 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f87f 	bl	8002b06 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8002a08:	4604      	mov	r4, r0
 8002a0a:	6838      	ldr	r0, [r7, #0]
 8002a0c:	f7ff ffc1 	bl	8002992 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4619      	mov	r1, r3
 8002a14:	4620      	mov	r0, r4
 8002a16:	f000 f887 	bl	8002b28 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8002a1a:	bf00      	nop
      }
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd90      	pop	{r4, r7, pc}

08002a22 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002a22:	b590      	push	{r4, r7, lr}
 8002a24:	b085      	sub	sp, #20
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d109      	bne.n	8002a4a <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f88c 	bl	8002b54 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	68b8      	ldr	r0, [r7, #8]
 8002a40:	f000 f861 	bl	8002b06 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8002a44:	4603      	mov	r3, r0
 8002a46:	6023      	str	r3, [r4, #0]
	    break;
 8002a48:	e005      	b.n	8002a56 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 f88b 	bl	8002b6c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8002a56:	2300      	movs	r3, #0
      }
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}

08002a60 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fd01 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f083 0301 	eor.w	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr

08002a96 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8002a96:	b580      	push	{r7, lr}
 8002a98:	b084      	sub	sp, #16
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
 8002a9e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ffed 	bl	8002a80 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002aac:	6838      	ldr	r0, [r7, #0]
 8002aae:	f7ff ffe7 	bl	8002a80 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff ffde 	bl	8002a80 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	601a      	str	r2, [r3, #0]
    }
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8002ae0:	68b8      	ldr	r0, [r7, #8]
 8002ae2:	f7ff ff6c 	bl	80029be <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8002ae6:	4604      	mov	r4, r0
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f7ff fc9f 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8002aee:	4603      	mov	r3, r0
 8002af0:	4619      	mov	r1, r3
 8002af2:	2004      	movs	r0, #4
 8002af4:	f7ff fc8e 	bl	8002414 <_ZnwjPv>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6823      	ldr	r3, [r4, #0]
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	bf00      	nop
 8002b00:	3714      	adds	r7, #20
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd90      	pop	{r4, r7, pc}

08002b06 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f857 	bl	8002bc2 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8002b14:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002b16:	68f8      	ldr	r0, [r7, #12]
 8002b18:	f000 f85f 	bl	8002bda <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	bf00      	nop
	}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002b28:	b5b0      	push	{r4, r5, r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f85c 	bl	8002bf0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8002b38:	4604      	mov	r4, r0
 8002b3a:	6838      	ldr	r0, [r7, #0]
 8002b3c:	f7ff ff29 	bl	8002992 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002b40:	4603      	mov	r3, r0
 8002b42:	461a      	mov	r2, r3
 8002b44:	4621      	mov	r1, r4
 8002b46:	4628      	mov	r0, r5
 8002b48:	f000 f85d 	bl	8002c06 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bdb0      	pop	{r4, r5, r7, pc}

08002b54 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff fc65 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4618      	mov	r0, r3
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002b6c:	b5b0      	push	{r4, r5, r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	4613      	mov	r3, r2
 8002b78:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d016      	beq.n	8002bae <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	dc19      	bgt.n	8002bb8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d002      	beq.n	8002b8e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d00a      	beq.n	8002ba2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 8002b8c:	e014      	b.n	8002bb8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f7ff ffe0 	bl	8002b54 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8002b94:	4604      	mov	r4, r0
 8002b96:	68b8      	ldr	r0, [r7, #8]
 8002b98:	f7ff ffb5 	bl	8002b06 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	6023      	str	r3, [r4, #0]
	      break;
 8002ba0:	e00a      	b.n	8002bb8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002ba2:	462a      	mov	r2, r5
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f000 f844 	bl	8002c34 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 8002bac:	e004      	b.n	8002bb8 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002bae:	4621      	mov	r1, r4
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 f858 	bl	8002c66 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002bb6:	bf00      	nop
	  return false;
 8002bb8:	2300      	movs	r3, #0
	}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bdb0      	pop	{r4, r5, r7, pc}

08002bc2 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7ff fc39 	bl	8002442 <_ZNKSt9_Any_data9_M_accessEv>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002c06:	b590      	push	{r4, r7, lr}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	7338      	strb	r0, [r7, #12]
 8002c0e:	60b9      	str	r1, [r7, #8]
 8002c10:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002c12:	68b8      	ldr	r0, [r7, #8]
 8002c14:	f7ff ffec 	bl	8002bf0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8002c18:	4604      	mov	r4, r0
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff feb9 	bl	8002992 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002c20:	4603      	mov	r3, r0
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4619      	mov	r1, r3
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7ff fd00 	bl	800262c <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}

08002c34 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	f7ff ffbe 	bl	8002bc2 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8002c46:	4604      	mov	r4, r0
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f7ff fbef 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4619      	mov	r1, r3
 8002c52:	2004      	movs	r0, #4
 8002c54:	f7ff fbde 	bl	8002414 <_ZnwjPv>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	6013      	str	r3, [r2, #0]
	}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd90      	pop	{r4, r7, pc}

08002c66 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
 8002c6e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 f804 	bl	8002c7e <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff fbd0 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ca0:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ca4:	f018 fd8a 	bl	801b7bc <roundf>
 8002ca8:	eef0 7a40 	vmov.f32	s15, s0
 8002cac:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 8002cb6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002cba:	b0a2      	sub	sp, #136	; 0x88
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8002cc2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	4613      	mov	r3, r2
 8002cca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002cce:	460b      	mov	r3, r1
 8002cd0:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002cd4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002cd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002ce2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002ce6:	7113      	strb	r3, [r2, #4]
 8002ce8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002cec:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002cf0:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8002cf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cfe:	3301      	adds	r3, #1
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	021b      	lsls	r3, r3, #8
 8002d04:	441a      	add	r2, r3
 8002d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	441a      	add	r2, r3
 8002d12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d16:	3303      	adds	r3, #3
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	061b      	lsls	r3, r3, #24
 8002d1c:	4413      	add	r3, r2
 8002d1e:	2200      	movs	r2, #0
 8002d20:	461c      	mov	r4, r3
 8002d22:	4615      	mov	r5, r2
 8002d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d28:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 8002d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d30:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d38:	3304      	adds	r3, #4
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2200      	movs	r2, #0
 8002d40:	673b      	str	r3, [r7, #112]	; 0x70
 8002d42:	677a      	str	r2, [r7, #116]	; 0x74
 8002d44:	f04f 0000 	mov.w	r0, #0
 8002d48:	f04f 0100 	mov.w	r1, #0
 8002d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d4e:	0019      	movs	r1, r3
 8002d50:	2000      	movs	r0, #0
 8002d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d56:	3305      	adds	r3, #5
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	f04f 0300 	mov.w	r3, #0
 8002d6a:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 8002d6c:	0233      	lsls	r3, r6, #8
 8002d6e:	2200      	movs	r2, #0
 8002d70:	eb10 0802 	adds.w	r8, r0, r2
 8002d74:	eb41 0903 	adc.w	r9, r1, r3
 8002d78:	eb14 0308 	adds.w	r3, r4, r8
 8002d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d7e:	eb45 0309 	adc.w	r3, r5, r9
 8002d82:	667b      	str	r3, [r7, #100]	; 0x64
 8002d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d88:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002d8c:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 8002d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d94:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002d98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d9c:	3306      	adds	r3, #6
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2200      	movs	r2, #0
 8002da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002da6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002da8:	f04f 0000 	mov.w	r0, #0
 8002dac:	f04f 0100 	mov.w	r1, #0
 8002db0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002db2:	0419      	lsls	r1, r3, #16
 8002db4:	2000      	movs	r0, #0
 8002db6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dba:	3307      	adds	r3, #7
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	653b      	str	r3, [r7, #80]	; 0x50
 8002dc4:	657a      	str	r2, [r7, #84]	; 0x54
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8002dd0:	0633      	lsls	r3, r6, #24
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	eb10 0a02 	adds.w	sl, r0, r2
 8002dd8:	eb41 0b03 	adc.w	fp, r1, r3
 8002ddc:	eb14 030a 	adds.w	r3, r4, sl
 8002de0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002de2:	eb45 030b 	adc.w	r3, r5, fp
 8002de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002de8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002dec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002df0:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 8002df4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002df8:	3307      	adds	r3, #7
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e02:	3306      	adds	r3, #6
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	441a      	add	r2, r3
 8002e0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e0e:	3305      	adds	r3, #5
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	441a      	add	r2, r3
 8002e16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	061b      	lsls	r3, r3, #24
 8002e20:	4413      	add	r3, r2
 8002e22:	2200      	movs	r2, #0
 8002e24:	643b      	str	r3, [r7, #64]	; 0x40
 8002e26:	647a      	str	r2, [r7, #68]	; 0x44
 8002e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e2c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002e30:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8002e34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e38:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e40:	3303      	adds	r3, #3
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2200      	movs	r2, #0
 8002e48:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e4a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e4c:	f04f 0000 	mov.w	r0, #0
 8002e50:	f04f 0100 	mov.w	r1, #0
 8002e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e56:	0019      	movs	r1, r3
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e5e:	3302      	adds	r3, #2
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2200      	movs	r2, #0
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
 8002e68:	637a      	str	r2, [r7, #52]	; 0x34
 8002e6a:	f04f 0200 	mov.w	r2, #0
 8002e6e:	f04f 0300 	mov.w	r3, #0
 8002e72:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002e74:	0233      	lsls	r3, r6, #8
 8002e76:	2200      	movs	r2, #0
 8002e78:	1886      	adds	r6, r0, r2
 8002e7a:	62be      	str	r6, [r7, #40]	; 0x28
 8002e7c:	eb41 0303 	adc.w	r3, r1, r3
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e82:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002e86:	460b      	mov	r3, r1
 8002e88:	18e3      	adds	r3, r4, r3
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	eb45 0303 	adc.w	r3, r5, r3
 8002e92:	627b      	str	r3, [r7, #36]	; 0x24
 8002e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e98:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002e9c:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 8002ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ea4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eac:	3301      	adds	r3, #1
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	61fa      	str	r2, [r7, #28]
 8002eb8:	f04f 0000 	mov.w	r0, #0
 8002ebc:	f04f 0100 	mov.w	r1, #0
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	0419      	lsls	r1, r3, #16
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2200      	movs	r2, #0
 8002ed0:	613b      	str	r3, [r7, #16]
 8002ed2:	617a      	str	r2, [r7, #20]
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	693e      	ldr	r6, [r7, #16]
 8002ede:	0633      	lsls	r3, r6, #24
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	1886      	adds	r6, r0, r2
 8002ee4:	60be      	str	r6, [r7, #8]
 8002ee6:	eb41 0303 	adc.w	r3, r1, r3
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	18e3      	adds	r3, r4, r3
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	eb45 0303 	adc.w	r3, r5, r3
 8002efc:	607b      	str	r3, [r7, #4]
 8002efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f02:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f06:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 8002f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3788      	adds	r7, #136	; 0x88
 8002f12:	46bd      	mov	sp, r7
 8002f14:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f18:	4770      	bx	lr

08002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002f1a:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f1e:	b087      	sub	sp, #28
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f30:	d302      	bcc.n	8002f38 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8002f32:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002f36:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8002f38:	887b      	ldrh	r3, [r7, #2]
 8002f3a:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f42:	8af9      	ldrh	r1, [r7, #22]
 8002f44:	2000      	movs	r0, #0
 8002f46:	468a      	mov	sl, r1
 8002f48:	4683      	mov	fp, r0
 8002f4a:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8002f4e:	2500      	movs	r5, #0
 8002f50:	ea42 0804 	orr.w	r8, r2, r4
 8002f54:	ea43 0905 	orr.w	r9, r3, r5
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8002f5e:	bf00      	nop
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f68:	4770      	bx	lr

08002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	b293      	uxth	r3, r2
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	81fb      	strh	r3, [r7, #14]
                return value;
 8002f82:	89fb      	ldrh	r3, [r7, #14]
            }
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_ZN3can7signals20SensorF_SDO_RespCode3setERyS2_Rhh>:
        class SensorF_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002f90:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002f94:	b087      	sub	sp, #28
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002faa:	7dfb      	ldrb	r3, [r7, #23]
 8002fac:	2200      	movs	r2, #0
 8002fae:	4698      	mov	r8, r3
 8002fb0:	4691      	mov	r9, r2
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8002fbe:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8002fc2:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8002fc6:	b294      	uxth	r4, r2
 8002fc8:	2500      	movs	r5, #0
 8002fca:	ea40 0a04 	orr.w	sl, r0, r4
 8002fce:	ea41 0b05 	orr.w	fp, r1, r5
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8002fd8:	bf00      	nop
 8002fda:	371c      	adds	r7, #28
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002fe2:	4770      	bx	lr

08002fe4 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_>:
                SensorF_SDO_ID::set(intel, motorola, dlc, 2320);
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
                dlc = 3;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2320) {
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff ffba 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002ffc:	bf14      	ite	ne
 8002ffe:	2301      	movne	r3, #1
 8003000:	2300      	moveq	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d000      	beq.n	800300a <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_+0x26>
                    while(1);
 8003008:	e7fe      	b.n	8003008 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	0c02      	lsrs	r2, r0, #16
 800301a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800301e:	0c0b      	lsrs	r3, r1, #16
 8003020:	4613      	mov	r3, r2
 8003022:	73fb      	strb	r3, [r7, #15]
                return value;
 8003024:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
	...

08003030 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003034:	b088      	sub	sp, #32
 8003036:	af00      	add	r7, sp, #0
 8003038:	6178      	str	r0, [r7, #20]
 800303a:	6139      	str	r1, [r7, #16]
 800303c:	60fa      	str	r2, [r7, #12]
 800303e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003042:	edd7 7a02 	vldr	s15, [r7, #8]
 8003046:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80030e4 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xb4>
 800304a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800304e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003052:	dd01      	ble.n	8003058 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8003054:	4b24      	ldr	r3, [pc, #144]	; (80030e8 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xb8>)
 8003056:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003058:	edd7 7a02 	vldr	s15, [r7, #8]
 800305c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80030ec <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xbc>
 8003060:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003068:	d501      	bpl.n	800306e <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 800306a:	4b21      	ldr	r3, [pc, #132]	; (80030f0 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc0>)
 800306c:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2599);
 800306e:	f640 2327 	movw	r3, #2599	; 0xa27
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	6939      	ldr	r1, [r7, #16]
 8003076:	6978      	ldr	r0, [r7, #20]
 8003078:	f7ff ff4f 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 800307c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003080:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80030f4 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc4>
 8003084:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003088:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80030f8 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc8>
 800308c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003090:	eeb0 0a47 	vmov.f32	s0, s14
 8003094:	f7ff fdff 	bl	8002c96 <_ZSt5roundf>
 8003098:	eef0 7a40 	vmov.f32	s15, s0
 800309c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a0:	ee17 3a90 	vmov	r3, s15
 80030a4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	8bf9      	ldrh	r1, [r7, #30]
 80030ae:	2000      	movs	r0, #0
 80030b0:	4688      	mov	r8, r1
 80030b2:	4681      	mov	r9, r0
 80030b4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80030b8:	6079      	str	r1, [r7, #4]
 80030ba:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80030be:	6039      	str	r1, [r7, #0]
 80030c0:	683c      	ldr	r4, [r7, #0]
 80030c2:	2500      	movs	r5, #0
 80030c4:	ea42 0a04 	orr.w	sl, r2, r4
 80030c8:	ea43 0b05 	orr.w	fp, r3, r5
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2204      	movs	r2, #4
 80030d6:	701a      	strb	r2, [r3, #0]
            }
 80030d8:	bf00      	nop
 80030da:	3720      	adds	r7, #32
 80030dc:	46bd      	mov	sp, r7
 80030de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030e2:	bf00      	nop
 80030e4:	440ad666 	.word	0x440ad666
 80030e8:	440ad666 	.word	0x440ad666
 80030ec:	c2c80000 	.word	0xc2c80000
 80030f0:	c2c80000 	.word	0xc2c80000
 80030f4:	42c80000 	.word	0x42c80000
 80030f8:	3c23d70a 	.word	0x3c23d70a

080030fc <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80030fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003100:	b088      	sub	sp, #32
 8003102:	af00      	add	r7, sp, #0
 8003104:	6178      	str	r0, [r7, #20]
 8003106:	6139      	str	r1, [r7, #16]
 8003108:	60fa      	str	r2, [r7, #12]
 800310a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800310e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003112:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80031b0 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xb4>
 8003116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	dd01      	ble.n	8003124 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8003120:	4b24      	ldr	r3, [pc, #144]	; (80031b4 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xb8>)
 8003122:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003124:	edd7 7a02 	vldr	s15, [r7, #8]
 8003128:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80031b8 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xbc>
 800312c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003134:	d501      	bpl.n	800313a <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8003136:	4b21      	ldr	r3, [pc, #132]	; (80031bc <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc0>)
 8003138:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2598);
 800313a:	f640 2326 	movw	r3, #2598	; 0xa26
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	6939      	ldr	r1, [r7, #16]
 8003142:	6978      	ldr	r0, [r7, #20]
 8003144:	f7ff fee9 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003148:	edd7 7a02 	vldr	s15, [r7, #8]
 800314c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80031c0 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc4>
 8003150:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003154:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80031c4 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc8>
 8003158:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800315c:	eeb0 0a47 	vmov.f32	s0, s14
 8003160:	f7ff fd99 	bl	8002c96 <_ZSt5roundf>
 8003164:	eef0 7a40 	vmov.f32	s15, s0
 8003168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316c:	ee17 3a90 	vmov	r3, s15
 8003170:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003178:	8bf9      	ldrh	r1, [r7, #30]
 800317a:	2000      	movs	r0, #0
 800317c:	4688      	mov	r8, r1
 800317e:	4681      	mov	r9, r0
 8003180:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003184:	6079      	str	r1, [r7, #4]
 8003186:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800318a:	6039      	str	r1, [r7, #0]
 800318c:	683c      	ldr	r4, [r7, #0]
 800318e:	2500      	movs	r5, #0
 8003190:	ea42 0a04 	orr.w	sl, r2, r4
 8003194:	ea43 0b05 	orr.w	fp, r3, r5
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2204      	movs	r2, #4
 80031a2:	701a      	strb	r2, [r3, #0]
            }
 80031a4:	bf00      	nop
 80031a6:	3720      	adds	r7, #32
 80031a8:	46bd      	mov	sp, r7
 80031aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ae:	bf00      	nop
 80031b0:	440ad666 	.word	0x440ad666
 80031b4:	440ad666 	.word	0x440ad666
 80031b8:	c2c80000 	.word	0xc2c80000
 80031bc:	c2c80000 	.word	0xc2c80000
 80031c0:	42c80000 	.word	0x42c80000
 80031c4:	3c23d70a 	.word	0x3c23d70a

080031c8 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80031c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031cc:	b088      	sub	sp, #32
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6178      	str	r0, [r7, #20]
 80031d2:	6139      	str	r1, [r7, #16]
 80031d4:	60fa      	str	r2, [r7, #12]
 80031d6:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80031da:	edd7 7a02 	vldr	s15, [r7, #8]
 80031de:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800327c <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xb4>
 80031e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ea:	dd01      	ble.n	80031f0 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 80031ec:	4b24      	ldr	r3, [pc, #144]	; (8003280 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xb8>)
 80031ee:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80031f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80031f4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003284 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xbc>
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	d501      	bpl.n	8003206 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8003202:	4b21      	ldr	r3, [pc, #132]	; (8003288 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc0>)
 8003204:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2597);
 8003206:	f640 2325 	movw	r3, #2597	; 0xa25
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	6939      	ldr	r1, [r7, #16]
 800320e:	6978      	ldr	r0, [r7, #20]
 8003210:	f7ff fe83 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003214:	edd7 7a02 	vldr	s15, [r7, #8]
 8003218:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800328c <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc4>
 800321c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003220:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003290 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc8>
 8003224:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003228:	eeb0 0a47 	vmov.f32	s0, s14
 800322c:	f7ff fd33 	bl	8002c96 <_ZSt5roundf>
 8003230:	eef0 7a40 	vmov.f32	s15, s0
 8003234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003238:	ee17 3a90 	vmov	r3, s15
 800323c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003244:	8bf9      	ldrh	r1, [r7, #30]
 8003246:	2000      	movs	r0, #0
 8003248:	4688      	mov	r8, r1
 800324a:	4681      	mov	r9, r0
 800324c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003250:	6079      	str	r1, [r7, #4]
 8003252:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003256:	6039      	str	r1, [r7, #0]
 8003258:	683c      	ldr	r4, [r7, #0]
 800325a:	2500      	movs	r5, #0
 800325c:	ea42 0a04 	orr.w	sl, r2, r4
 8003260:	ea43 0b05 	orr.w	fp, r3, r5
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2204      	movs	r2, #4
 800326e:	701a      	strb	r2, [r3, #0]
            }
 8003270:	bf00      	nop
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800327a:	bf00      	nop
 800327c:	440ad666 	.word	0x440ad666
 8003280:	440ad666 	.word	0x440ad666
 8003284:	c2c80000 	.word	0xc2c80000
 8003288:	c2c80000 	.word	0xc2c80000
 800328c:	42c80000 	.word	0x42c80000
 8003290:	3c23d70a 	.word	0x3c23d70a

08003294 <_ZN3can7signals21SensorF_OD_IMU_number3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2592            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2592);
 80032a4:	f44f 6322 	mov.w	r3, #2592	; 0xa20
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7ff fe34 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80032b2:	78fb      	ldrb	r3, [r7, #3]
 80032b4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032bc:	7dfb      	ldrb	r3, [r7, #23]
 80032be:	2200      	movs	r2, #0
 80032c0:	4698      	mov	r8, r3
 80032c2:	4691      	mov	r9, r2
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80032d0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80032d4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80032d8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80032dc:	2500      	movs	r5, #0
 80032de:	ea40 0a04 	orr.w	sl, r0, r4
 80032e2:	ea41 0b05 	orr.w	fp, r1, r5
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2203      	movs	r2, #3
 80032f0:	701a      	strb	r2, [r3, #0]
            }
 80032f2:	bf00      	nop
 80032f4:	3718      	adds	r7, #24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032fc <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_>:
                SensorF_SDO_ID::set(intel, motorola, dlc, 2309);
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
                dlc = 3;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2309) {
 8003306:	6839      	ldr	r1, [r7, #0]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fe2e 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800330e:	4603      	mov	r3, r0
 8003310:	461a      	mov	r2, r3
 8003312:	f640 1305 	movw	r3, #2309	; 0x905
 8003316:	429a      	cmp	r2, r3
 8003318:	bf14      	ite	ne
 800331a:	2301      	movne	r3, #1
 800331c:	2300      	moveq	r3, #0
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d000      	beq.n	8003326 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_+0x2a>
                    while(1);
 8003324:	e7fe      	b.n	8003324 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	e9d3 0100 	ldrd	r0, r1, [r3]
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	0c02      	lsrs	r2, r0, #16
 8003336:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800333a:	0c0b      	lsrs	r3, r1, #16
 800333c:	4613      	mov	r3, r2
 800333e:	73fb      	strb	r3, [r7, #15]
                return value;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
	...

0800334c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(1);
            constexpr static float max = static_cast<float>(300);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800334c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003350:	b088      	sub	sp, #32
 8003352:	af00      	add	r7, sp, #0
 8003354:	6178      	str	r0, [r7, #20]
 8003356:	6139      	str	r1, [r7, #16]
 8003358:	60fa      	str	r2, [r7, #12]
 800335a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800335e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003362:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80033f8 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xac>
 8003366:	eef4 7ac7 	vcmpe.f32	s15, s14
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	dd01      	ble.n	8003374 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0x28>
                    value = max;
 8003370:	4b22      	ldr	r3, [pc, #136]	; (80033fc <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xb0>)
 8003372:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003374:	edd7 7a02 	vldr	s15, [r7, #8]
 8003378:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800337c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d502      	bpl.n	800338c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0x40>
                    value = min;
 8003386:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800338a:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2308);
 800338c:	f640 1304 	movw	r3, #2308	; 0x904
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	6939      	ldr	r1, [r7, #16]
 8003394:	6978      	ldr	r0, [r7, #20]
 8003396:	f7ff fdc0 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.005f)));
 800339a:	edd7 7a02 	vldr	s15, [r7, #8]
 800339e:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003400 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xb4>
 80033a2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80033a6:	eeb0 0a47 	vmov.f32	s0, s14
 80033aa:	f7ff fc74 	bl	8002c96 <_ZSt5roundf>
 80033ae:	eef0 7a40 	vmov.f32	s15, s0
 80033b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033b6:	ee17 3a90 	vmov	r3, s15
 80033ba:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	8bf9      	ldrh	r1, [r7, #30]
 80033c4:	2000      	movs	r0, #0
 80033c6:	4688      	mov	r8, r1
 80033c8:	4681      	mov	r9, r0
 80033ca:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80033ce:	6079      	str	r1, [r7, #4]
 80033d0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	683c      	ldr	r4, [r7, #0]
 80033d8:	2500      	movs	r5, #0
 80033da:	ea42 0a04 	orr.w	sl, r2, r4
 80033de:	ea43 0b05 	orr.w	fp, r3, r5
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2204      	movs	r2, #4
 80033ec:	701a      	strb	r2, [r3, #0]
            }
 80033ee:	bf00      	nop
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f8:	43960000 	.word	0x43960000
 80033fc:	43960000 	.word	0x43960000
 8003400:	3ba3d70a 	.word	0x3ba3d70a

08003404 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2308) {
 800340e:	6839      	ldr	r1, [r7, #0]
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f7ff fdaa 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	f640 1304 	movw	r3, #2308	; 0x904
 800341e:	429a      	cmp	r2, r3
 8003420:	bf14      	ite	ne
 8003422:	2301      	movne	r3, #1
 8003424:	2300      	moveq	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d000      	beq.n	800342e <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x2a>
                    while(1);
 800342c:	e7fe      	b.n	800342c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	0c02      	lsrs	r2, r0, #16
 800343e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003442:	0c0b      	lsrs	r3, r1, #16
 8003444:	4613      	mov	r3, r2
 8003446:	81fb      	strh	r3, [r7, #14]
                return value * (0.005f);
 8003448:	89fb      	ldrh	r3, [r7, #14]
 800344a:	ee07 3a90 	vmov	s15, r3
 800344e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003452:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003464 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x60>
 8003456:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800345a:	eeb0 0a67 	vmov.f32	s0, s15
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	3ba3d70a 	.word	0x3ba3d70a

08003468 <_ZN3can7signals24SensorF_OD_HVBatteryMode3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2307            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	60f8      	str	r0, [r7, #12]
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2307);
 8003478:	f640 1303 	movw	r3, #2307	; 0x903
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fd4a 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003490:	7dfb      	ldrb	r3, [r7, #23]
 8003492:	2200      	movs	r2, #0
 8003494:	4698      	mov	r8, r3
 8003496:	4691      	mov	r9, r2
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80034a4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80034a8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80034ac:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80034b0:	2500      	movs	r5, #0
 80034b2:	ea40 0a04 	orr.w	sl, r0, r4
 80034b6:	ea41 0b05 	orr.w	fp, r1, r5
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2203      	movs	r2, #3
 80034c4:	701a      	strb	r2, [r3, #0]
            }
 80034c6:	bf00      	nop
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034d0 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2307) {
 80034da:	6839      	ldr	r1, [r7, #0]
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7ff fd44 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80034e2:	4603      	mov	r3, r0
 80034e4:	461a      	mov	r2, r3
 80034e6:	f640 1303 	movw	r3, #2307	; 0x903
 80034ea:	429a      	cmp	r2, r3
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d000      	beq.n	80034fa <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_+0x2a>
                    while(1);
 80034f8:	e7fe      	b.n	80034f8 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003500:	f04f 0200 	mov.w	r2, #0
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	0c02      	lsrs	r2, r0, #16
 800350a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800350e:	0c0b      	lsrs	r3, r1, #16
 8003510:	4613      	mov	r3, r2
 8003512:	73fb      	strb	r3, [r7, #15]
                return value;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <_ZN3can7signals31SensorF_OD_StateMachineActivate3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2306            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800351e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2306);
 800352e:	f640 1302 	movw	r3, #2306	; 0x902
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f7ff fcef 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	2200      	movs	r2, #0
 800354a:	4698      	mov	r8, r3
 800354c:	4691      	mov	r9, r2
 800354e:	f04f 0200 	mov.w	r2, #0
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800355a:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800355e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003562:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003566:	2500      	movs	r5, #0
 8003568:	ea40 0a04 	orr.w	sl, r0, r4
 800356c:	ea41 0b05 	orr.w	fp, r1, r5
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2203      	movs	r2, #3
 800357a:	701a      	strb	r2, [r3, #0]
            }
 800357c:	bf00      	nop
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003586 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
 800358e:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2306) {
 8003590:	6839      	ldr	r1, [r7, #0]
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff fce9 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003598:	4603      	mov	r3, r0
 800359a:	461a      	mov	r2, r3
 800359c:	f640 1302 	movw	r3, #2306	; 0x902
 80035a0:	429a      	cmp	r2, r3
 80035a2:	bf14      	ite	ne
 80035a4:	2301      	movne	r3, #1
 80035a6:	2300      	moveq	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d000      	beq.n	80035b0 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_+0x2a>
                    while(1);
 80035ae:	e7fe      	b.n	80035ae <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	0c02      	lsrs	r2, r0, #16
 80035c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035c4:	0c0b      	lsrs	r3, r1, #16
 80035c6:	4613      	mov	r3, r2
 80035c8:	73fb      	strb	r3, [r7, #15]
                return value;
 80035ca:	7bfb      	ldrb	r3, [r7, #15]
            }
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh>:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint8_t min = static_cast<uint8_t>(5);
            constexpr static uint8_t max = static_cast<uint8_t>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80035d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 80035e4:	78fb      	ldrb	r3, [r7, #3]
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh+0x1a>
                    value = max;
 80035ea:	2364      	movs	r3, #100	; 0x64
 80035ec:	70fb      	strb	r3, [r7, #3]
                }
                if (value < min) {
 80035ee:	78fb      	ldrb	r3, [r7, #3]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d801      	bhi.n	80035f8 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh+0x24>
                    value = min;
 80035f4:	2305      	movs	r3, #5
 80035f6:	70fb      	strb	r3, [r7, #3]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2305);
 80035f8:	f640 1301 	movw	r3, #2305	; 0x901
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	68b9      	ldr	r1, [r7, #8]
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff fc8a 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003606:	78fb      	ldrb	r3, [r7, #3]
 8003608:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003610:	7dfb      	ldrb	r3, [r7, #23]
 8003612:	2200      	movs	r2, #0
 8003614:	4698      	mov	r8, r3
 8003616:	4691      	mov	r9, r2
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003624:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003628:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800362c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003630:	2500      	movs	r5, #0
 8003632:	ea40 0a04 	orr.w	sl, r0, r4
 8003636:	ea41 0b05 	orr.w	fp, r1, r5
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2203      	movs	r2, #3
 8003644:	701a      	strb	r2, [r3, #0]
            }
 8003646:	bf00      	nop
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003650 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2305) {
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff fc84 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003662:	4603      	mov	r3, r0
 8003664:	461a      	mov	r2, r3
 8003666:	f640 1301 	movw	r3, #2305	; 0x901
 800366a:	429a      	cmp	r2, r3
 800366c:	bf14      	ite	ne
 800366e:	2301      	movne	r3, #1
 8003670:	2300      	moveq	r3, #0
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d000      	beq.n	800367a <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_+0x2a>
                    while(1);
 8003678:	e7fe      	b.n	8003678 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003680:	f04f 0200 	mov.w	r2, #0
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	0c02      	lsrs	r2, r0, #16
 800368a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800368e:	0c0b      	lsrs	r3, r1, #16
 8003690:	4613      	mov	r3, r2
 8003692:	73fb      	strb	r3, [r7, #15]
                return value;
 8003694:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003696:	4618      	mov	r0, r3
 8003698:	3710      	adds	r7, #16
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <_ZN3can7signals28SensorF_OD_TelemetryCommands3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2304            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800369e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2304);
 80036ae:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f7ff fc2f 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036c6:	7dfb      	ldrb	r3, [r7, #23]
 80036c8:	2200      	movs	r2, #0
 80036ca:	4698      	mov	r8, r3
 80036cc:	4691      	mov	r9, r2
 80036ce:	f04f 0200 	mov.w	r2, #0
 80036d2:	f04f 0300 	mov.w	r3, #0
 80036d6:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80036da:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80036de:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80036e2:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80036e6:	2500      	movs	r5, #0
 80036e8:	ea40 0a04 	orr.w	sl, r0, r4
 80036ec:	ea41 0b05 	orr.w	fp, r1, r5
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2203      	movs	r2, #3
 80036fa:	701a      	strb	r2, [r3, #0]
            }
 80036fc:	bf00      	nop
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003706 <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2304) {
 8003710:	6839      	ldr	r1, [r7, #0]
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff fc29 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003718:	4603      	mov	r3, r0
 800371a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800371e:	bf14      	ite	ne
 8003720:	2301      	movne	r3, #1
 8003722:	2300      	moveq	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d000      	beq.n	800372c <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_+0x26>
                    while(1);
 800372a:	e7fe      	b.n	800372a <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	0c02      	lsrs	r2, r0, #16
 800373c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003740:	0c0b      	lsrs	r3, r1, #16
 8003742:	4613      	mov	r3, r2
 8003744:	73fb      	strb	r3, [r7, #15]
                return value;
 8003746:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0.01);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003750:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003754:	b088      	sub	sp, #32
 8003756:	af00      	add	r7, sp, #0
 8003758:	6178      	str	r0, [r7, #20]
 800375a:	6139      	str	r1, [r7, #16]
 800375c:	60fa      	str	r2, [r7, #12]
 800375e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003762:	edd7 7a02 	vldr	s15, [r7, #8]
 8003766:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80037fc <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xac>
 800376a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800376e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003772:	dd01      	ble.n	8003778 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0x28>
                    value = max;
 8003774:	4b22      	ldr	r3, [pc, #136]	; (8003800 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb0>)
 8003776:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003778:	edd7 7a02 	vldr	s15, [r7, #8]
 800377c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003804 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb4>
 8003780:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003788:	d501      	bpl.n	800378e <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0x3e>
                    value = min;
 800378a:	4b1f      	ldr	r3, [pc, #124]	; (8003808 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb8>)
 800378c:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2048);
 800378e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	6939      	ldr	r1, [r7, #16]
 8003796:	6978      	ldr	r0, [r7, #20]
 8003798:	f7ff fbbf 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 800379c:	edd7 7a02 	vldr	s15, [r7, #8]
 80037a0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003804 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb4>
 80037a4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80037a8:	eeb0 0a47 	vmov.f32	s0, s14
 80037ac:	f7ff fa73 	bl	8002c96 <_ZSt5roundf>
 80037b0:	eef0 7a40 	vmov.f32	s15, s0
 80037b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037b8:	ee17 3a90 	vmov	r3, s15
 80037bc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	8bf9      	ldrh	r1, [r7, #30]
 80037c6:	2000      	movs	r0, #0
 80037c8:	4688      	mov	r8, r1
 80037ca:	4681      	mov	r9, r0
 80037cc:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80037d0:	6079      	str	r1, [r7, #4]
 80037d2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80037d6:	6039      	str	r1, [r7, #0]
 80037d8:	683c      	ldr	r4, [r7, #0]
 80037da:	2500      	movs	r5, #0
 80037dc:	ea42 0a04 	orr.w	sl, r2, r4
 80037e0:	ea43 0b05 	orr.w	fp, r3, r5
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2204      	movs	r2, #4
 80037ee:	701a      	strb	r2, [r3, #0]
            }
 80037f0:	bf00      	nop
 80037f2:	3720      	adds	r7, #32
 80037f4:	46bd      	mov	sp, r7
 80037f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037fa:	bf00      	nop
 80037fc:	42c80000 	.word	0x42c80000
 8003800:	42c80000 	.word	0x42c80000
 8003804:	3c23d70a 	.word	0x3c23d70a
 8003808:	3c23d70a 	.word	0x3c23d70a

0800380c <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2048) {
 8003816:	6839      	ldr	r1, [r7, #0]
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fba6 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800381e:	4603      	mov	r3, r0
 8003820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d000      	beq.n	8003832 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x26>
                    while(1);
 8003830:	e7fe      	b.n	8003830 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	0c02      	lsrs	r2, r0, #16
 8003842:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003846:	0c0b      	lsrs	r3, r1, #16
 8003848:	4613      	mov	r3, r2
 800384a:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 800384c:	89fb      	ldrh	r3, [r7, #14]
 800384e:	ee07 3a90 	vmov	s15, r3
 8003852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003856:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003868 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x5c>
 800385a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800385e:	eeb0 0a67 	vmov.f32	s0, s15
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	3c23d70a 	.word	0x3c23d70a

0800386c <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800386c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003870:	b088      	sub	sp, #32
 8003872:	af00      	add	r7, sp, #0
 8003874:	6178      	str	r0, [r7, #20]
 8003876:	6139      	str	r1, [r7, #16]
 8003878:	60fa      	str	r2, [r7, #12]
 800387a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003882:	d302      	bcc.n	800388a <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003884:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003888:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1129);
 800388a:	f240 4369 	movw	r3, #1129	; 0x469
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	6939      	ldr	r1, [r7, #16]
 8003892:	6978      	ldr	r0, [r7, #20]
 8003894:	f7ff fb41 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	69f9      	ldr	r1, [r7, #28]
 80038a4:	2000      	movs	r0, #0
 80038a6:	468a      	mov	sl, r1
 80038a8:	4683      	mov	fp, r0
 80038aa:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80038ae:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80038b2:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80038b6:	0424      	lsls	r4, r4, #16
 80038b8:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80038bc:	ea42 0104 	orr.w	r1, r2, r4
 80038c0:	6039      	str	r1, [r7, #0]
 80038c2:	432b      	orrs	r3, r5
 80038c4:	607b      	str	r3, [r7, #4]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038cc:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2205      	movs	r2, #5
 80038d4:	701a      	strb	r2, [r3, #0]
            }
 80038d6:	bf00      	nop
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080038e0 <_ZN3can7signals27SensorF_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80038e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1128);
 80038f0:	f44f 638d 	mov.w	r3, #1128	; 0x468
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f7ff fb0e 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80038fe:	78fb      	ldrb	r3, [r7, #3]
 8003900:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003908:	7dfb      	ldrb	r3, [r7, #23]
 800390a:	2200      	movs	r2, #0
 800390c:	4698      	mov	r8, r3
 800390e:	4691      	mov	r9, r2
 8003910:	f04f 0200 	mov.w	r2, #0
 8003914:	f04f 0300 	mov.w	r3, #0
 8003918:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800391c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003920:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003924:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003928:	2500      	movs	r5, #0
 800392a:	ea40 0a04 	orr.w	sl, r0, r4
 800392e:	ea41 0b05 	orr.w	fp, r1, r5
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2203      	movs	r2, #3
 800393c:	701a      	strb	r2, [r3, #0]
            }
 800393e:	bf00      	nop
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003948 <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800394c:	b088      	sub	sp, #32
 800394e:	af00      	add	r7, sp, #0
 8003950:	6178      	str	r0, [r7, #20]
 8003952:	6139      	str	r1, [r7, #16]
 8003954:	60fa      	str	r2, [r7, #12]
 8003956:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800395e:	d302      	bcc.n	8003966 <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003960:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003964:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1127);
 8003966:	f240 4367 	movw	r3, #1127	; 0x467
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	6939      	ldr	r1, [r7, #16]
 800396e:	6978      	ldr	r0, [r7, #20]
 8003970:	f7ff fad3 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	69f9      	ldr	r1, [r7, #28]
 8003980:	2000      	movs	r0, #0
 8003982:	468a      	mov	sl, r1
 8003984:	4683      	mov	fp, r0
 8003986:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800398a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800398e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003992:	0424      	lsls	r4, r4, #16
 8003994:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003998:	ea42 0104 	orr.w	r1, r2, r4
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	432b      	orrs	r3, r5
 80039a0:	607b      	str	r3, [r7, #4]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80039a8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2205      	movs	r2, #5
 80039b0:	701a      	strb	r2, [r3, #0]
            }
 80039b2:	bf00      	nop
 80039b4:	3720      	adds	r7, #32
 80039b6:	46bd      	mov	sp, r7
 80039b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039bc <_ZN3can7signals22SensorF_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80039bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c0:	b086      	sub	sp, #24
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
 80039ca:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1126);
 80039cc:	f240 4366 	movw	r3, #1126	; 0x466
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	68b9      	ldr	r1, [r7, #8]
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f7ff faa0 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039e4:	7dfb      	ldrb	r3, [r7, #23]
 80039e6:	2200      	movs	r2, #0
 80039e8:	4698      	mov	r8, r3
 80039ea:	4691      	mov	r9, r2
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80039f8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80039fc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003a00:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003a04:	2500      	movs	r5, #0
 8003a06:	ea40 0a04 	orr.w	sl, r0, r4
 8003a0a:	ea41 0b05 	orr.w	fp, r1, r5
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2203      	movs	r2, #3
 8003a18:	701a      	strb	r2, [r3, #0]
            }
 8003a1a:	bf00      	nop
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a24 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a28:	b088      	sub	sp, #32
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6178      	str	r0, [r7, #20]
 8003a2e:	6139      	str	r1, [r7, #16]
 8003a30:	60fa      	str	r2, [r7, #12]
 8003a32:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8003a34:	897b      	ldrh	r3, [r7, #10]
 8003a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a3a:	d902      	bls.n	8003a42 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a40:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8003a42:	897b      	ldrh	r3, [r7, #10]
 8003a44:	2b7c      	cmp	r3, #124	; 0x7c
 8003a46:	d801      	bhi.n	8003a4c <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8003a48:	237d      	movs	r3, #125	; 0x7d
 8003a4a:	817b      	strh	r3, [r7, #10]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1124);
 8003a4c:	f240 4364 	movw	r3, #1124	; 0x464
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	6939      	ldr	r1, [r7, #16]
 8003a54:	6978      	ldr	r0, [r7, #20]
 8003a56:	f7ff fa60 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003a5a:	897b      	ldrh	r3, [r7, #10]
 8003a5c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a64:	8bf9      	ldrh	r1, [r7, #30]
 8003a66:	2000      	movs	r0, #0
 8003a68:	4688      	mov	r8, r1
 8003a6a:	4681      	mov	r9, r0
 8003a6c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003a70:	6079      	str	r1, [r7, #4]
 8003a72:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003a76:	6039      	str	r1, [r7, #0]
 8003a78:	683c      	ldr	r4, [r7, #0]
 8003a7a:	2500      	movs	r5, #0
 8003a7c:	ea42 0a04 	orr.w	sl, r2, r4
 8003a80:	ea43 0b05 	orr.w	fp, r3, r5
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	701a      	strb	r2, [r3, #0]
            }
 8003a90:	bf00      	nop
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a9a <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1124) {
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fa5f 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003aac:	4603      	mov	r3, r0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f240 4364 	movw	r3, #1124	; 0x464
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d000      	beq.n	8003ac4 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8003ac2:	e7fe      	b.n	8003ac2 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	0c02      	lsrs	r2, r0, #16
 8003ad4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003ad8:	0c0b      	lsrs	r3, r1, #16
 8003ada:	4613      	mov	r3, r2
 8003adc:	81fb      	strh	r3, [r7, #14]
                return value;
 8003ade:	89fb      	ldrh	r3, [r7, #14]
            }
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	60f8      	str	r0, [r7, #12]
 8003af2:	60b9      	str	r1, [r7, #8]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1123);
 8003af8:	f240 4363 	movw	r3, #1123	; 0x463
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f7ff fa0a 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	2200      	movs	r2, #0
 8003b14:	4698      	mov	r8, r3
 8003b16:	4691      	mov	r9, r2
 8003b18:	f04f 0200 	mov.w	r2, #0
 8003b1c:	f04f 0300 	mov.w	r3, #0
 8003b20:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003b24:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003b28:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003b2c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003b30:	2500      	movs	r5, #0
 8003b32:	ea40 0a04 	orr.w	sl, r0, r4
 8003b36:	ea41 0b05 	orr.w	fp, r1, r5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2203      	movs	r2, #3
 8003b44:	701a      	strb	r2, [r3, #0]
            }
 8003b46:	bf00      	nop
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b50 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1123) {
 8003b5a:	6839      	ldr	r1, [r7, #0]
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f7ff fa04 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003b62:	4603      	mov	r3, r0
 8003b64:	461a      	mov	r2, r3
 8003b66:	f240 4363 	movw	r3, #1123	; 0x463
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	bf14      	ite	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	2300      	moveq	r3, #0
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d000      	beq.n	8003b7a <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003b78:	e7fe      	b.n	8003b78 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b80:	f04f 0200 	mov.w	r2, #0
 8003b84:	f04f 0300 	mov.w	r3, #0
 8003b88:	0c02      	lsrs	r2, r0, #16
 8003b8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003b8e:	0c0b      	lsrs	r3, r1, #16
 8003b90:	4613      	mov	r3, r2
 8003b92:	73fb      	strb	r3, [r7, #15]
                return value;
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b088      	sub	sp, #32
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	6178      	str	r0, [r7, #20]
 8003baa:	6139      	str	r1, [r7, #16]
 8003bac:	60fa      	str	r2, [r7, #12]
 8003bae:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1122);
 8003bb0:	f240 4362 	movw	r3, #1122	; 0x462
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	6939      	ldr	r1, [r7, #16]
 8003bb8:	6978      	ldr	r0, [r7, #20]
 8003bba:	f7ff f9ae 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc8:	69f9      	ldr	r1, [r7, #28]
 8003bca:	2000      	movs	r0, #0
 8003bcc:	468a      	mov	sl, r1
 8003bce:	4683      	mov	fp, r0
 8003bd0:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003bd4:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003bd8:	480c      	ldr	r0, [pc, #48]	; (8003c0c <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 8003bda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003bde:	ea08 0400 	and.w	r4, r8, r0
 8003be2:	ea09 0501 	and.w	r5, r9, r1
 8003be6:	ea42 0104 	orr.w	r1, r2, r4
 8003bea:	6039      	str	r1, [r7, #0]
 8003bec:	432b      	orrs	r3, r5
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003bf6:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2206      	movs	r2, #6
 8003bfe:	701a      	strb	r2, [r3, #0]
            }
 8003c00:	bf00      	nop
 8003c02:	3720      	adds	r7, #32
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	ffff0000 	.word	0xffff0000

08003c10 <_ZN3can7signals24SensorF_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c14:	b086      	sub	sp, #24
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	60f8      	str	r0, [r7, #12]
 8003c1a:	60b9      	str	r1, [r7, #8]
 8003c1c:	607a      	str	r2, [r7, #4]
 8003c1e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1121);
 8003c20:	f240 4361 	movw	r3, #1121	; 0x461
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68b9      	ldr	r1, [r7, #8]
 8003c28:	68f8      	ldr	r0, [r7, #12]
 8003c2a:	f7ff f976 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4698      	mov	r8, r3
 8003c3e:	4691      	mov	r9, r2
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003c4c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003c50:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003c54:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003c58:	2500      	movs	r5, #0
 8003c5a:	ea40 0a04 	orr.w	sl, r0, r4
 8003c5e:	ea41 0b05 	orr.w	fp, r1, r5
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	701a      	strb	r2, [r3, #0]
            }
 8003c6e:	bf00      	nop
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c78 <_ZN3can7signals24SensorF_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c7c:	b086      	sub	sp, #24
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1120);
 8003c88:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	68b9      	ldr	r1, [r7, #8]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f7ff f942 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ca0:	7dfb      	ldrb	r3, [r7, #23]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	4698      	mov	r8, r3
 8003ca6:	4691      	mov	r9, r2
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003cb4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003cb8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003cbc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003cc0:	2500      	movs	r5, #0
 8003cc2:	ea40 0a04 	orr.w	sl, r0, r4
 8003cc6:	ea41 0b05 	orr.w	fp, r1, r5
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2203      	movs	r2, #3
 8003cd4:	701a      	strb	r2, [r3, #0]
            }
 8003cd6:	bf00      	nop
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ce0 <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003ce0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce4:	b088      	sub	sp, #32
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6178      	str	r0, [r7, #20]
 8003cea:	6139      	str	r1, [r7, #16]
 8003cec:	60fa      	str	r2, [r7, #12]
 8003cee:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf6:	d302      	bcc.n	8003cfe <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003cf8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003cfc:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1113);
 8003cfe:	f240 4359 	movw	r3, #1113	; 0x459
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	6939      	ldr	r1, [r7, #16]
 8003d06:	6978      	ldr	r0, [r7, #20]
 8003d08:	f7ff f907 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	69f9      	ldr	r1, [r7, #28]
 8003d18:	2000      	movs	r0, #0
 8003d1a:	468a      	mov	sl, r1
 8003d1c:	4683      	mov	fp, r0
 8003d1e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003d22:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003d26:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003d2a:	0424      	lsls	r4, r4, #16
 8003d2c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003d30:	ea42 0104 	orr.w	r1, r2, r4
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	432b      	orrs	r3, r5
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d40:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2205      	movs	r2, #5
 8003d48:	701a      	strb	r2, [r3, #0]
            }
 8003d4a:	bf00      	nop
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003d54 <_ZN3can7signals27SensorF_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	60f8      	str	r0, [r7, #12]
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1112);
 8003d64:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f7ff f8d4 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003d72:	78fb      	ldrb	r3, [r7, #3]
 8003d74:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d7c:	7dfb      	ldrb	r3, [r7, #23]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	4698      	mov	r8, r3
 8003d82:	4691      	mov	r9, r2
 8003d84:	f04f 0200 	mov.w	r2, #0
 8003d88:	f04f 0300 	mov.w	r3, #0
 8003d8c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003d90:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003d94:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003d98:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003d9c:	2500      	movs	r5, #0
 8003d9e:	ea40 0a04 	orr.w	sl, r0, r4
 8003da2:	ea41 0b05 	orr.w	fp, r1, r5
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2203      	movs	r2, #3
 8003db0:	701a      	strb	r2, [r3, #0]
            }
 8003db2:	bf00      	nop
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003dbc <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc0:	b088      	sub	sp, #32
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6178      	str	r0, [r7, #20]
 8003dc6:	6139      	str	r1, [r7, #16]
 8003dc8:	60fa      	str	r2, [r7, #12]
 8003dca:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dd2:	d302      	bcc.n	8003dda <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003dd4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003dd8:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1111);
 8003dda:	f240 4357 	movw	r3, #1111	; 0x457
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	6939      	ldr	r1, [r7, #16]
 8003de2:	6978      	ldr	r0, [r7, #20]
 8003de4:	f7ff f899 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	69f9      	ldr	r1, [r7, #28]
 8003df4:	2000      	movs	r0, #0
 8003df6:	468a      	mov	sl, r1
 8003df8:	4683      	mov	fp, r0
 8003dfa:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003dfe:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003e02:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003e06:	0424      	lsls	r4, r4, #16
 8003e08:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003e0c:	ea42 0104 	orr.w	r1, r2, r4
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	432b      	orrs	r3, r5
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003e1c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2205      	movs	r2, #5
 8003e24:	701a      	strb	r2, [r3, #0]
            }
 8003e26:	bf00      	nop
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e30 <_ZN3can7signals22SensorF_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003e30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	60f8      	str	r0, [r7, #12]
 8003e3a:	60b9      	str	r1, [r7, #8]
 8003e3c:	607a      	str	r2, [r7, #4]
 8003e3e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1110);
 8003e40:	f240 4356 	movw	r3, #1110	; 0x456
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	68b9      	ldr	r1, [r7, #8]
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff f866 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003e4e:	78fb      	ldrb	r3, [r7, #3]
 8003e50:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e58:	7dfb      	ldrb	r3, [r7, #23]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	4698      	mov	r8, r3
 8003e5e:	4691      	mov	r9, r2
 8003e60:	f04f 0200 	mov.w	r2, #0
 8003e64:	f04f 0300 	mov.w	r3, #0
 8003e68:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003e6c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003e70:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003e74:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003e78:	2500      	movs	r5, #0
 8003e7a:	ea40 0a04 	orr.w	sl, r0, r4
 8003e7e:	ea41 0b05 	orr.w	fp, r1, r5
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2203      	movs	r2, #3
 8003e8c:	701a      	strb	r2, [r3, #0]
            }
 8003e8e:	bf00      	nop
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e98 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003e98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e9c:	b088      	sub	sp, #32
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6178      	str	r0, [r7, #20]
 8003ea2:	6139      	str	r1, [r7, #16]
 8003ea4:	60fa      	str	r2, [r7, #12]
 8003ea6:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8003ea8:	897b      	ldrh	r3, [r7, #10]
 8003eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003eae:	d902      	bls.n	8003eb6 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003eb4:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8003eb6:	897b      	ldrh	r3, [r7, #10]
 8003eb8:	2b7c      	cmp	r3, #124	; 0x7c
 8003eba:	d801      	bhi.n	8003ec0 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8003ebc:	237d      	movs	r3, #125	; 0x7d
 8003ebe:	817b      	strh	r3, [r7, #10]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1108);
 8003ec0:	f240 4354 	movw	r3, #1108	; 0x454
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	6939      	ldr	r1, [r7, #16]
 8003ec8:	6978      	ldr	r0, [r7, #20]
 8003eca:	f7ff f826 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003ece:	897b      	ldrh	r3, [r7, #10]
 8003ed0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed8:	8bf9      	ldrh	r1, [r7, #30]
 8003eda:	2000      	movs	r0, #0
 8003edc:	4688      	mov	r8, r1
 8003ede:	4681      	mov	r9, r0
 8003ee0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003ee4:	6079      	str	r1, [r7, #4]
 8003ee6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003eea:	6039      	str	r1, [r7, #0]
 8003eec:	683c      	ldr	r4, [r7, #0]
 8003eee:	2500      	movs	r5, #0
 8003ef0:	ea42 0a04 	orr.w	sl, r2, r4
 8003ef4:	ea43 0b05 	orr.w	fp, r3, r5
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2204      	movs	r2, #4
 8003f02:	701a      	strb	r2, [r3, #0]
            }
 8003f04:	bf00      	nop
 8003f06:	3720      	adds	r7, #32
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f0e <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
 8003f16:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1108) {
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff f825 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	f240 4354 	movw	r3, #1108	; 0x454
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	bf14      	ite	ne
 8003f2c:	2301      	movne	r3, #1
 8003f2e:	2300      	moveq	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d000      	beq.n	8003f38 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8003f36:	e7fe      	b.n	8003f36 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	0c02      	lsrs	r2, r0, #16
 8003f48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003f4c:	0c0b      	lsrs	r3, r1, #16
 8003f4e:	4613      	mov	r3, r2
 8003f50:	81fb      	strh	r3, [r7, #14]
                return value;
 8003f52:	89fb      	ldrh	r3, [r7, #14]
            }
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f60:	b086      	sub	sp, #24
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1107);
 8003f6c:	f240 4353 	movw	r3, #1107	; 0x453
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	68b9      	ldr	r1, [r7, #8]
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f7fe ffd0 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f84:	7dfb      	ldrb	r3, [r7, #23]
 8003f86:	2200      	movs	r2, #0
 8003f88:	4698      	mov	r8, r3
 8003f8a:	4691      	mov	r9, r2
 8003f8c:	f04f 0200 	mov.w	r2, #0
 8003f90:	f04f 0300 	mov.w	r3, #0
 8003f94:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003f98:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003f9c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003fa0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003fa4:	2500      	movs	r5, #0
 8003fa6:	ea40 0a04 	orr.w	sl, r0, r4
 8003faa:	ea41 0b05 	orr.w	fp, r1, r5
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	701a      	strb	r2, [r3, #0]
            }
 8003fba:	bf00      	nop
 8003fbc:	3718      	adds	r7, #24
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003fc4 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1107) {
 8003fce:	6839      	ldr	r1, [r7, #0]
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7fe ffca 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f240 4353 	movw	r3, #1107	; 0x453
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	bf14      	ite	ne
 8003fe2:	2301      	movne	r3, #1
 8003fe4:	2300      	moveq	r3, #0
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d000      	beq.n	8003fee <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003fec:	e7fe      	b.n	8003fec <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ff4:	f04f 0200 	mov.w	r2, #0
 8003ff8:	f04f 0300 	mov.w	r3, #0
 8003ffc:	0c02      	lsrs	r2, r0, #16
 8003ffe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004002:	0c0b      	lsrs	r3, r1, #16
 8004004:	4613      	mov	r3, r2
 8004006:	73fb      	strb	r3, [r7, #15]
                return value;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
            }
 800400a:	4618      	mov	r0, r3
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004018:	b088      	sub	sp, #32
 800401a:	af00      	add	r7, sp, #0
 800401c:	6178      	str	r0, [r7, #20]
 800401e:	6139      	str	r1, [r7, #16]
 8004020:	60fa      	str	r2, [r7, #12]
 8004022:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1106);
 8004024:	f240 4352 	movw	r3, #1106	; 0x452
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	6939      	ldr	r1, [r7, #16]
 800402c:	6978      	ldr	r0, [r7, #20]
 800402e:	f7fe ff74 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403c:	69f9      	ldr	r1, [r7, #28]
 800403e:	2000      	movs	r0, #0
 8004040:	468a      	mov	sl, r1
 8004042:	4683      	mov	fp, r0
 8004044:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8004048:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800404c:	480c      	ldr	r0, [pc, #48]	; (8004080 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 800404e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004052:	ea08 0400 	and.w	r4, r8, r0
 8004056:	ea09 0501 	and.w	r5, r9, r1
 800405a:	ea42 0104 	orr.w	r1, r2, r4
 800405e:	6039      	str	r1, [r7, #0]
 8004060:	432b      	orrs	r3, r5
 8004062:	607b      	str	r3, [r7, #4]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	e9d7 1200 	ldrd	r1, r2, [r7]
 800406a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2206      	movs	r2, #6
 8004072:	701a      	strb	r2, [r3, #0]
            }
 8004074:	bf00      	nop
 8004076:	3720      	adds	r7, #32
 8004078:	46bd      	mov	sp, r7
 800407a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800407e:	bf00      	nop
 8004080:	ffff0000 	.word	0xffff0000

08004084 <_ZN3can7signals24SensorF_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004088:	b086      	sub	sp, #24
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1105);
 8004094:	f240 4351 	movw	r3, #1105	; 0x451
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	68f8      	ldr	r0, [r7, #12]
 800409e:	f7fe ff3c 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80040a2:	78fb      	ldrb	r3, [r7, #3]
 80040a4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	2200      	movs	r2, #0
 80040b0:	4698      	mov	r8, r3
 80040b2:	4691      	mov	r9, r2
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80040c0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80040c4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80040c8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80040cc:	2500      	movs	r5, #0
 80040ce:	ea40 0a04 	orr.w	sl, r0, r4
 80040d2:	ea41 0b05 	orr.w	fp, r1, r5
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2203      	movs	r2, #3
 80040e0:	701a      	strb	r2, [r3, #0]
            }
 80040e2:	bf00      	nop
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080040ec <_ZN3can7signals24SensorF_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80040ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f0:	b086      	sub	sp, #24
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	60b9      	str	r1, [r7, #8]
 80040f8:	607a      	str	r2, [r7, #4]
 80040fa:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1104);
 80040fc:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	68b9      	ldr	r1, [r7, #8]
 8004104:	68f8      	ldr	r0, [r7, #12]
 8004106:	f7fe ff08 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004114:	7dfb      	ldrb	r3, [r7, #23]
 8004116:	2200      	movs	r2, #0
 8004118:	4698      	mov	r8, r3
 800411a:	4691      	mov	r9, r2
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004128:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800412c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004130:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004134:	2500      	movs	r5, #0
 8004136:	ea40 0a04 	orr.w	sl, r0, r4
 800413a:	ea41 0b05 	orr.w	fp, r1, r5
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2203      	movs	r2, #3
 8004148:	701a      	strb	r2, [r3, #0]
            }
 800414a:	bf00      	nop
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004154 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b088      	sub	sp, #32
 800415a:	af00      	add	r7, sp, #0
 800415c:	6178      	str	r0, [r7, #20]
 800415e:	6139      	str	r1, [r7, #16]
 8004160:	60fa      	str	r2, [r7, #12]
 8004162:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800416a:	d302      	bcc.n	8004172 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 800416c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004170:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1073);
 8004172:	f240 4331 	movw	r3, #1073	; 0x431
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	6939      	ldr	r1, [r7, #16]
 800417a:	6978      	ldr	r0, [r7, #20]
 800417c:	f7fe fecd 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	69f9      	ldr	r1, [r7, #28]
 800418c:	2000      	movs	r0, #0
 800418e:	468a      	mov	sl, r1
 8004190:	4683      	mov	fp, r0
 8004192:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8004196:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800419a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800419e:	0424      	lsls	r4, r4, #16
 80041a0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80041a4:	ea42 0104 	orr.w	r1, r2, r4
 80041a8:	6039      	str	r1, [r7, #0]
 80041aa:	432b      	orrs	r3, r5
 80041ac:	607b      	str	r3, [r7, #4]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041b4:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2205      	movs	r2, #5
 80041bc:	701a      	strb	r2, [r3, #0]
            }
 80041be:	bf00      	nop
 80041c0:	3720      	adds	r7, #32
 80041c2:	46bd      	mov	sp, r7
 80041c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041c8 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80041c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041cc:	b088      	sub	sp, #32
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6178      	str	r0, [r7, #20]
 80041d2:	6139      	str	r1, [r7, #16]
 80041d4:	60fa      	str	r2, [r7, #12]
 80041d6:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1072);
 80041d8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	6939      	ldr	r1, [r7, #16]
 80041e0:	6978      	ldr	r0, [r7, #20]
 80041e2:	f7fe fe9a 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	69f9      	ldr	r1, [r7, #28]
 80041f2:	2000      	movs	r0, #0
 80041f4:	468a      	mov	sl, r1
 80041f6:	4683      	mov	fp, r0
 80041f8:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80041fc:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8004200:	480c      	ldr	r0, [pc, #48]	; (8004234 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm+0x6c>)
 8004202:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004206:	ea08 0400 	and.w	r4, r8, r0
 800420a:	ea09 0501 	and.w	r5, r9, r1
 800420e:	ea42 0104 	orr.w	r1, r2, r4
 8004212:	6039      	str	r1, [r7, #0]
 8004214:	432b      	orrs	r3, r5
 8004216:	607b      	str	r3, [r7, #4]
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800421e:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2206      	movs	r2, #6
 8004226:	701a      	strb	r2, [r3, #0]
            }
 8004228:	bf00      	nop
 800422a:	3720      	adds	r7, #32
 800422c:	46bd      	mov	sp, r7
 800422e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004232:	bf00      	nop
 8004234:	ffff0000 	.word	0xffff0000

08004238 <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8004238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8004246:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800424a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800424e:	d305      	bcc.n	800425c <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8004250:	f04f 32ff 	mov.w	r2, #4294967295
 8004254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004258:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1057);
 800425c:	f240 4321 	movw	r3, #1057	; 0x421
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f7fe fe58 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 800426a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800426e:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004278:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800427c:	f04f 0200 	mov.w	r2, #0
 8004280:	f04f 0300 	mov.w	r3, #0
 8004284:	040b      	lsls	r3, r1, #16
 8004286:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800428a:	0402      	lsls	r2, r0, #16
 800428c:	ea48 0402 	orr.w	r4, r8, r2
 8004290:	ea49 0503 	orr.w	r5, r9, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2208      	movs	r2, #8
 800429e:	701a      	strb	r2, [r3, #0]
            }
 80042a0:	bf00      	nop
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080042aa <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 80042aa:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
                if (value > max) {
 80042b8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c0:	d305      	bcc.n	80042ce <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 80042c2:	f04f 32ff 	mov.w	r2, #4294967295
 80042c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042ca:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1056);
 80042ce:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	68b9      	ldr	r1, [r7, #8]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7fe fe1f 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 80042dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80042e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	040b      	lsls	r3, r1, #16
 80042f8:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80042fc:	0402      	lsls	r2, r0, #16
 80042fe:	ea48 0402 	orr.w	r4, r8, r2
 8004302:	ea49 0503 	orr.w	r5, r9, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2208      	movs	r2, #8
 8004310:	701a      	strb	r2, [r3, #0]
            }
 8004312:	bf00      	nop
 8004314:	3718      	adds	r7, #24
 8004316:	46bd      	mov	sp, r7
 8004318:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800431c <_ZN3can7signals17SensorF_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800431c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004320:	b086      	sub	sp, #24
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
 800432a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1046);
 800432c:	f240 4316 	movw	r3, #1046	; 0x416
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7fe fdf0 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800433a:	78fb      	ldrb	r3, [r7, #3]
 800433c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004344:	7dfb      	ldrb	r3, [r7, #23]
 8004346:	2200      	movs	r2, #0
 8004348:	4698      	mov	r8, r3
 800434a:	4691      	mov	r9, r2
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004358:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800435c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004360:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004364:	2500      	movs	r5, #0
 8004366:	ea40 0a04 	orr.w	sl, r0, r4
 800436a:	ea41 0b05 	orr.w	fp, r1, r5
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2203      	movs	r2, #3
 8004378:	701a      	strb	r2, [r3, #0]
            }
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004384 <_ZN3can7signals16SensorF_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af00      	add	r7, sp, #0
 800438c:	60f8      	str	r0, [r7, #12]
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1045);
 8004394:	f240 4315 	movw	r3, #1045	; 0x415
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	68b9      	ldr	r1, [r7, #8]
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7fe fdbc 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043ac:	7dfb      	ldrb	r3, [r7, #23]
 80043ae:	2200      	movs	r2, #0
 80043b0:	4698      	mov	r8, r3
 80043b2:	4691      	mov	r9, r2
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80043c0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80043c4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80043c8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80043cc:	2500      	movs	r5, #0
 80043ce:	ea40 0a04 	orr.w	sl, r0, r4
 80043d2:	ea41 0b05 	orr.w	fp, r1, r5
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2203      	movs	r2, #3
 80043e0:	701a      	strb	r2, [r3, #0]
            }
 80043e2:	bf00      	nop
 80043e4:	3718      	adds	r7, #24
 80043e6:	46bd      	mov	sp, r7
 80043e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080043ec <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80043ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f0:	b088      	sub	sp, #32
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6178      	str	r0, [r7, #20]
 80043f6:	6139      	str	r1, [r7, #16]
 80043f8:	60fa      	str	r2, [r7, #12]
 80043fa:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004402:	d302      	bcc.n	800440a <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8004404:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004408:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1044);
 800440a:	f240 4314 	movw	r3, #1044	; 0x414
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	6939      	ldr	r1, [r7, #16]
 8004412:	6978      	ldr	r0, [r7, #20]
 8004414:	f7fe fd81 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004422:	69f9      	ldr	r1, [r7, #28]
 8004424:	2000      	movs	r0, #0
 8004426:	468a      	mov	sl, r1
 8004428:	4683      	mov	fp, r0
 800442a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800442e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8004432:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8004436:	0424      	lsls	r4, r4, #16
 8004438:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 800443c:	ea42 0104 	orr.w	r1, r2, r4
 8004440:	6039      	str	r1, [r7, #0]
 8004442:	432b      	orrs	r3, r5
 8004444:	607b      	str	r3, [r7, #4]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	e9d7 1200 	ldrd	r1, r2, [r7]
 800444c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2205      	movs	r2, #5
 8004454:	701a      	strb	r2, [r3, #0]
            }
 8004456:	bf00      	nop
 8004458:	3720      	adds	r7, #32
 800445a:	46bd      	mov	sp, r7
 800445c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004460 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004464:	b088      	sub	sp, #32
 8004466:	af00      	add	r7, sp, #0
 8004468:	6178      	str	r0, [r7, #20]
 800446a:	6139      	str	r1, [r7, #16]
 800446c:	60fa      	str	r2, [r7, #12]
 800446e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8004472:	edd7 7a02 	vldr	s15, [r7, #8]
 8004476:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004508 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xa8>
 800447a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	dd01      	ble.n	8004488 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 8004484:	4b21      	ldr	r3, [pc, #132]	; (800450c <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xac>)
 8004486:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8004488:	edd7 7a02 	vldr	s15, [r7, #8]
 800448c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004494:	d502      	bpl.n	800449c <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1043);
 800449c:	f240 4313 	movw	r3, #1043	; 0x413
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	6939      	ldr	r1, [r7, #16]
 80044a4:	6978      	ldr	r0, [r7, #20]
 80044a6:	f7fe fd38 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 80044aa:	edd7 7a02 	vldr	s15, [r7, #8]
 80044ae:	eddf 6a18 	vldr	s13, [pc, #96]	; 8004510 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xb0>
 80044b2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044b6:	eeb0 0a47 	vmov.f32	s0, s14
 80044ba:	f7fe fbec 	bl	8002c96 <_ZSt5roundf>
 80044be:	eef0 7a40 	vmov.f32	s15, s0
 80044c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c6:	ee17 3a90 	vmov	r3, s15
 80044ca:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d2:	8bf9      	ldrh	r1, [r7, #30]
 80044d4:	2000      	movs	r0, #0
 80044d6:	4688      	mov	r8, r1
 80044d8:	4681      	mov	r9, r0
 80044da:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80044de:	6079      	str	r1, [r7, #4]
 80044e0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80044e4:	6039      	str	r1, [r7, #0]
 80044e6:	683c      	ldr	r4, [r7, #0]
 80044e8:	2500      	movs	r5, #0
 80044ea:	ea42 0a04 	orr.w	sl, r2, r4
 80044ee:	ea43 0b05 	orr.w	fp, r3, r5
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2204      	movs	r2, #4
 80044fc:	701a      	strb	r2, [r3, #0]
            }
 80044fe:	bf00      	nop
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004508:	428311ec 	.word	0x428311ec
 800450c:	428311ec 	.word	0x428311ec
 8004510:	3a83126f 	.word	0x3a83126f

08004514 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004518:	b088      	sub	sp, #32
 800451a:	af00      	add	r7, sp, #0
 800451c:	6178      	str	r0, [r7, #20]
 800451e:	6139      	str	r1, [r7, #16]
 8004520:	60fa      	str	r2, [r7, #12]
 8004522:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8004526:	edd7 7a02 	vldr	s15, [r7, #8]
 800452a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80045c8 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xb4>
 800452e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004536:	dd01      	ble.n	800453c <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 8004538:	4b24      	ldr	r3, [pc, #144]	; (80045cc <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 800453a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800453c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004540:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8004544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454c:	d501      	bpl.n	8004552 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 800454e:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 8004550:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1042);
 8004552:	f240 4312 	movw	r3, #1042	; 0x412
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	6939      	ldr	r1, [r7, #16]
 800455a:	6978      	ldr	r0, [r7, #20]
 800455c:	f7fe fcdd 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 8004560:	edd7 7a02 	vldr	s15, [r7, #8]
 8004564:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004568:	ee77 7a87 	vadd.f32	s15, s15, s14
 800456c:	eddf 6a19 	vldr	s13, [pc, #100]	; 80045d4 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xc0>
 8004570:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004574:	eeb0 0a47 	vmov.f32	s0, s14
 8004578:	f7fe fb8d 	bl	8002c96 <_ZSt5roundf>
 800457c:	eef0 7a40 	vmov.f32	s15, s0
 8004580:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004584:	ee17 3a90 	vmov	r3, s15
 8004588:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	8bf9      	ldrh	r1, [r7, #30]
 8004592:	2000      	movs	r0, #0
 8004594:	4688      	mov	r8, r1
 8004596:	4681      	mov	r9, r0
 8004598:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800459c:	6079      	str	r1, [r7, #4]
 800459e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80045a2:	6039      	str	r1, [r7, #0]
 80045a4:	683c      	ldr	r4, [r7, #0]
 80045a6:	2500      	movs	r5, #0
 80045a8:	ea42 0a04 	orr.w	sl, r2, r4
 80045ac:	ea43 0b05 	orr.w	fp, r3, r5
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2204      	movs	r2, #4
 80045ba:	701a      	strb	r2, [r3, #0]
            }
 80045bc:	bf00      	nop
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045c6:	bf00      	nop
 80045c8:	441c5666 	.word	0x441c5666
 80045cc:	441c5666 	.word	0x441c5666
 80045d0:	c1f00000 	.word	0xc1f00000
 80045d4:	3c23d70a 	.word	0x3c23d70a

080045d8 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80045d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045dc:	b088      	sub	sp, #32
 80045de:	af00      	add	r7, sp, #0
 80045e0:	6178      	str	r0, [r7, #20]
 80045e2:	6139      	str	r1, [r7, #16]
 80045e4:	60fa      	str	r2, [r7, #12]
 80045e6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4a16      	ldr	r2, [pc, #88]	; (8004644 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x6c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d901      	bls.n	80045f4 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 80045f0:	4b14      	ldr	r3, [pc, #80]	; (8004644 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x6c>)
 80045f2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1041);
 80045f4:	f240 4311 	movw	r3, #1041	; 0x411
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	6939      	ldr	r1, [r7, #16]
 80045fc:	6978      	ldr	r0, [r7, #20]
 80045fe:	f7fe fc8c 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	089b      	lsrs	r3, r3, #2
 8004606:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	69f9      	ldr	r1, [r7, #28]
 8004610:	2000      	movs	r0, #0
 8004612:	4688      	mov	r8, r1
 8004614:	4681      	mov	r9, r0
 8004616:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800461a:	6079      	str	r1, [r7, #4]
 800461c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004620:	6039      	str	r1, [r7, #0]
 8004622:	683c      	ldr	r4, [r7, #0]
 8004624:	2500      	movs	r5, #0
 8004626:	ea42 0a04 	orr.w	sl, r2, r4
 800462a:	ea43 0b05 	orr.w	fp, r3, r5
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2204      	movs	r2, #4
 8004638:	701a      	strb	r2, [r3, #0]
            }
 800463a:	bf00      	nop
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004644:	0003fffc 	.word	0x0003fffc

08004648 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800464c:	b088      	sub	sp, #32
 800464e:	af00      	add	r7, sp, #0
 8004650:	6178      	str	r0, [r7, #20]
 8004652:	6139      	str	r1, [r7, #16]
 8004654:	60fa      	str	r2, [r7, #12]
 8004656:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800465a:	edd7 7a02 	vldr	s15, [r7, #8]
 800465e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80046fc <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0xb4>
 8004662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466a:	dd01      	ble.n	8004670 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 800466c:	4b24      	ldr	r3, [pc, #144]	; (8004700 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 800466e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8004670:	edd7 7a02 	vldr	s15, [r7, #8]
 8004674:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467c:	d502      	bpl.n	8004684 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 800467e:	f04f 0300 	mov.w	r3, #0
 8004682:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1040);
 8004684:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	6939      	ldr	r1, [r7, #16]
 800468c:	6978      	ldr	r0, [r7, #20]
 800468e:	f7fe fc44 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 8004692:	edd7 7a02 	vldr	s15, [r7, #8]
 8004696:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800469a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800469e:	eeb0 0a47 	vmov.f32	s0, s14
 80046a2:	f7fe faf8 	bl	8002c96 <_ZSt5roundf>
 80046a6:	eef0 7a40 	vmov.f32	s15, s0
 80046aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ae:	edc7 7a01 	vstr	s15, [r7, #4]
 80046b2:	793b      	ldrb	r3, [r7, #4]
 80046b4:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046bc:	7ffb      	ldrb	r3, [r7, #31]
 80046be:	2200      	movs	r2, #0
 80046c0:	4698      	mov	r8, r3
 80046c2:	4691      	mov	r9, r2
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80046d0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80046d4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80046d8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80046dc:	2500      	movs	r5, #0
 80046de:	ea40 0a04 	orr.w	sl, r0, r4
 80046e2:	ea41 0b05 	orr.w	fp, r1, r5
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2203      	movs	r2, #3
 80046f0:	701a      	strb	r2, [r3, #0]
            }
 80046f2:	bf00      	nop
 80046f4:	3720      	adds	r7, #32
 80046f6:	46bd      	mov	sp, r7
 80046f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046fc:	42c80000 	.word	0x42c80000
 8004700:	42c80000 	.word	0x42c80000

08004704 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004704:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004708:	b088      	sub	sp, #32
 800470a:	af00      	add	r7, sp, #0
 800470c:	6178      	str	r0, [r7, #20]
 800470e:	6139      	str	r1, [r7, #16]
 8004710:	60fa      	str	r2, [r7, #12]
 8004712:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 33);
 8004714:	2321      	movs	r3, #33	; 0x21
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	6939      	ldr	r1, [r7, #16]
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f7fe fbfd 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004720:	897b      	ldrh	r3, [r7, #10]
 8004722:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472a:	8bf9      	ldrh	r1, [r7, #30]
 800472c:	2000      	movs	r0, #0
 800472e:	4688      	mov	r8, r1
 8004730:	4681      	mov	r9, r0
 8004732:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004736:	6079      	str	r1, [r7, #4]
 8004738:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800473c:	6039      	str	r1, [r7, #0]
 800473e:	683c      	ldr	r4, [r7, #0]
 8004740:	2500      	movs	r5, #0
 8004742:	ea42 0a04 	orr.w	sl, r2, r4
 8004746:	ea43 0b05 	orr.w	fp, r3, r5
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2204      	movs	r2, #4
 8004754:	701a      	strb	r2, [r3, #0]
            }
 8004756:	bf00      	nop
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004760 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 33) {
 800476a:	6839      	ldr	r1, [r7, #0]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7fe fbfc 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004772:	4603      	mov	r3, r0
 8004774:	2b21      	cmp	r3, #33	; 0x21
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d000      	beq.n	8004784 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 8004782:	e7fe      	b.n	8004782 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	e9d3 0100 	ldrd	r0, r1, [r3]
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	0c02      	lsrs	r2, r0, #16
 8004794:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004798:	0c0b      	lsrs	r3, r1, #16
 800479a:	4613      	mov	r3, r2
 800479c:	81fb      	strh	r3, [r7, #14]
                return value;
 800479e:	89fb      	ldrh	r3, [r7, #14]
            }
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80047a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	60f8      	str	r0, [r7, #12]
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 32);
 80047b8:	2320      	movs	r3, #32
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f7fe fbab 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80047c4:	78fb      	ldrb	r3, [r7, #3]
 80047c6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	2200      	movs	r2, #0
 80047d2:	4698      	mov	r8, r3
 80047d4:	4691      	mov	r9, r2
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80047e2:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80047e6:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80047ea:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80047ee:	2500      	movs	r5, #0
 80047f0:	ea40 0a04 	orr.w	sl, r0, r4
 80047f4:	ea41 0b05 	orr.w	fp, r1, r5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2203      	movs	r2, #3
 8004802:	701a      	strb	r2, [r3, #0]
            }
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800480e <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 32) {
 8004818:	6839      	ldr	r1, [r7, #0]
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe fba5 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004820:	4603      	mov	r3, r0
 8004822:	2b20      	cmp	r3, #32
 8004824:	bf14      	ite	ne
 8004826:	2301      	movne	r3, #1
 8004828:	2300      	moveq	r3, #0
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d000      	beq.n	8004832 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 8004830:	e7fe      	b.n	8004830 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	0c02      	lsrs	r2, r0, #16
 8004842:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004846:	0c0b      	lsrs	r3, r1, #16
 8004848:	4613      	mov	r3, r2
 800484a:	73fb      	strb	r3, [r7, #15]
                return value;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004856:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af00      	add	r7, sp, #0
 800485e:	6178      	str	r0, [r7, #20]
 8004860:	6139      	str	r1, [r7, #16]
 8004862:	60fa      	str	r2, [r7, #12]
 8004864:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 16);
 8004866:	2310      	movs	r3, #16
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	6939      	ldr	r1, [r7, #16]
 800486c:	6978      	ldr	r0, [r7, #20]
 800486e:	f7fe fb54 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004872:	897b      	ldrh	r3, [r7, #10]
 8004874:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487c:	8bf9      	ldrh	r1, [r7, #30]
 800487e:	2000      	movs	r0, #0
 8004880:	4688      	mov	r8, r1
 8004882:	4681      	mov	r9, r0
 8004884:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004888:	6079      	str	r1, [r7, #4]
 800488a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800488e:	6039      	str	r1, [r7, #0]
 8004890:	683c      	ldr	r4, [r7, #0]
 8004892:	2500      	movs	r5, #0
 8004894:	ea42 0a04 	orr.w	sl, r2, r4
 8004898:	ea43 0b05 	orr.w	fp, r3, r5
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2204      	movs	r2, #4
 80048a6:	701a      	strb	r2, [r3, #0]
            }
 80048a8:	bf00      	nop
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080048b2 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b084      	sub	sp, #16
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
 80048ba:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 16) {
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7fe fb53 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	bf14      	ite	ne
 80048ca:	2301      	movne	r3, #1
 80048cc:	2300      	moveq	r3, #0
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d000      	beq.n	80048d6 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 80048d4:	e7fe      	b.n	80048d4 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048dc:	f04f 0200 	mov.w	r2, #0
 80048e0:	f04f 0300 	mov.w	r3, #0
 80048e4:	0c02      	lsrs	r2, r0, #16
 80048e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80048ea:	0c0b      	lsrs	r3, r1, #16
 80048ec:	4613      	mov	r3, r2
 80048ee:	81fb      	strh	r3, [r7, #14]
                return value;
 80048f0:	89fb      	ldrh	r3, [r7, #14]
            }
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <_ZN3can7signals21SensorF_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80048fa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af00      	add	r7, sp, #0
 8004902:	6178      	str	r0, [r7, #20]
 8004904:	6139      	str	r1, [r7, #16]
 8004906:	60fa      	str	r2, [r7, #12]
 8004908:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 5);
 800490a:	2305      	movs	r3, #5
 800490c:	68fa      	ldr	r2, [r7, #12]
 800490e:	6939      	ldr	r1, [r7, #16]
 8004910:	6978      	ldr	r0, [r7, #20]
 8004912:	f7fe fb02 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004916:	897b      	ldrh	r3, [r7, #10]
 8004918:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	8bf9      	ldrh	r1, [r7, #30]
 8004922:	2000      	movs	r0, #0
 8004924:	4688      	mov	r8, r1
 8004926:	4681      	mov	r9, r0
 8004928:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800492c:	6079      	str	r1, [r7, #4]
 800492e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004932:	6039      	str	r1, [r7, #0]
 8004934:	683c      	ldr	r4, [r7, #0]
 8004936:	2500      	movs	r5, #0
 8004938:	ea42 0a04 	orr.w	sl, r2, r4
 800493c:	ea43 0b05 	orr.w	fp, r3, r5
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2204      	movs	r2, #4
 800494a:	701a      	strb	r2, [r3, #0]
            }
 800494c:	bf00      	nop
 800494e:	3720      	adds	r7, #32
 8004950:	46bd      	mov	sp, r7
 8004952:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004956 <_ZN3can7signals23SensorF_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004956:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800495a:	b088      	sub	sp, #32
 800495c:	af00      	add	r7, sp, #0
 800495e:	6178      	str	r0, [r7, #20]
 8004960:	6139      	str	r1, [r7, #16]
 8004962:	60fa      	str	r2, [r7, #12]
 8004964:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 4);
 8004966:	2304      	movs	r3, #4
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	6939      	ldr	r1, [r7, #16]
 800496c:	6978      	ldr	r0, [r7, #20]
 800496e:	f7fe fad4 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004972:	897b      	ldrh	r3, [r7, #10]
 8004974:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497c:	8bf9      	ldrh	r1, [r7, #30]
 800497e:	2000      	movs	r0, #0
 8004980:	4688      	mov	r8, r1
 8004982:	4681      	mov	r9, r0
 8004984:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004988:	6079      	str	r1, [r7, #4]
 800498a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800498e:	6039      	str	r1, [r7, #0]
 8004990:	683c      	ldr	r4, [r7, #0]
 8004992:	2500      	movs	r5, #0
 8004994:	ea42 0a04 	orr.w	sl, r2, r4
 8004998:	ea43 0b05 	orr.w	fp, r3, r5
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2204      	movs	r2, #4
 80049a6:	701a      	strb	r2, [r3, #0]
            }
 80049a8:	bf00      	nop
 80049aa:	3720      	adds	r7, #32
 80049ac:	46bd      	mov	sp, r7
 80049ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080049b2 <_ZN3can7signals26SensorF_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80049b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6178      	str	r0, [r7, #20]
 80049bc:	6139      	str	r1, [r7, #16]
 80049be:	60fa      	str	r2, [r7, #12]
 80049c0:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3);
 80049c2:	2303      	movs	r3, #3
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6939      	ldr	r1, [r7, #16]
 80049c8:	6978      	ldr	r0, [r7, #20]
 80049ca:	f7fe faa6 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80049ce:	897b      	ldrh	r3, [r7, #10]
 80049d0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	8bf9      	ldrh	r1, [r7, #30]
 80049da:	2000      	movs	r0, #0
 80049dc:	4688      	mov	r8, r1
 80049de:	4681      	mov	r9, r0
 80049e0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80049e4:	6079      	str	r1, [r7, #4]
 80049e6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80049ea:	6039      	str	r1, [r7, #0]
 80049ec:	683c      	ldr	r4, [r7, #0]
 80049ee:	2500      	movs	r5, #0
 80049f0:	ea42 0a04 	orr.w	sl, r2, r4
 80049f4:	ea43 0b05 	orr.w	fp, r3, r5
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2204      	movs	r2, #4
 8004a02:	701a      	strb	r2, [r3, #0]
            }
 8004a04:	bf00      	nop
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a0e <_ZN3can7signals21SensorF_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004a0e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2);
 8004a1e:	2302      	movs	r3, #2
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	68b9      	ldr	r1, [r7, #8]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7fe fa78 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a34:	7dfb      	ldrb	r3, [r7, #23]
 8004a36:	2200      	movs	r2, #0
 8004a38:	4698      	mov	r8, r3
 8004a3a:	4691      	mov	r9, r2
 8004a3c:	f04f 0200 	mov.w	r2, #0
 8004a40:	f04f 0300 	mov.w	r3, #0
 8004a44:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004a48:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004a4c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004a50:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004a54:	2500      	movs	r5, #0
 8004a56:	ea40 0a04 	orr.w	sl, r0, r4
 8004a5a:	ea41 0b05 	orr.w	fp, r1, r5
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2203      	movs	r2, #3
 8004a68:	701a      	strb	r2, [r3, #0]
            }
 8004a6a:	bf00      	nop
 8004a6c:	3718      	adds	r7, #24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a74 <_ZN3can7signals17SensorF_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004a74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a78:	b086      	sub	sp, #24
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	607a      	str	r2, [r7, #4]
 8004a82:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1);
 8004a84:	2301      	movs	r3, #1
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	68b9      	ldr	r1, [r7, #8]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7fe fa45 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a9a:	7dfb      	ldrb	r3, [r7, #23]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4698      	mov	r8, r3
 8004aa0:	4691      	mov	r9, r2
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	f04f 0300 	mov.w	r3, #0
 8004aaa:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004aae:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004ab2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004ab6:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004aba:	2500      	movs	r5, #0
 8004abc:	ea40 0a04 	orr.w	sl, r0, r4
 8004ac0:	ea41 0b05 	orr.w	fp, r1, r5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2203      	movs	r2, #3
 8004ace:	701a      	strb	r2, [r3, #0]
            }
 8004ad0:	bf00      	nop
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004ada <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af02      	add	r7, sp, #8
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	607a      	str	r2, [r7, #4]
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	2300      	movs	r3, #0
 8004aee:	2202      	movs	r2, #2
 8004af0:	f240 6101 	movw	r1, #1537	; 0x601
 8004af4:	f7fe f8df 	bl	8002cb6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8004afc:	f240 6201 	movw	r2, #1537	; 0x601
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d000      	beq.n	8004b06 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8004b04:	e7fe      	b.n	8004b04 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
 8004b1a:	6839      	ldr	r1, [r7, #0]
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	331c      	adds	r3, #28
 8004b20:	461a      	mov	r2, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff ffd9 	bl	8004ada <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b08a      	sub	sp, #40	; 0x28
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SensorF_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 8004b3a:	f107 0308 	add.w	r3, r7, #8
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7ff ffe5 	bl	8004b10 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SensorF_SDO_ID>();
 8004b46:	f107 0308 	add.w	r3, r7, #8
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f002 f94e 	bl	8006dec <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>
 8004b50:	4603      	mov	r3, r0
 8004b52:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8004b54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 f814 	bl	8004b84 <_Z31handleSDORequestDownloadBySDOIDt>
}
 8004b5c:	bf00      	nop
 8004b5e:	3728      	adds	r7, #40	; 0x28
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	2208      	movs	r2, #8
 8004b72:	f240 5181 	movw	r1, #1409	; 0x581
 8004b76:	f7fc fa09 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3708      	adds	r7, #8
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b092      	sub	sp, #72	; 0x48
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SensorF_SDO_Resp> msgSdoResp;
 8004b8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff ffe6 	bl	8004b64 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SensorF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	f640 2227 	movw	r2, #2599	; 0xa27
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	f300 840f 	bgt.w	80053c8 <_Z31handleSDORequestDownloadBySDOIDt+0x844>
 8004baa:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8004bae:	da15      	bge.n	8004bdc <_Z31handleSDORequestDownloadBySDOIDt+0x58>
 8004bb0:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8004bb4:	f300 8408 	bgt.w	80053c8 <_Z31handleSDORequestDownloadBySDOIDt+0x844>
 8004bb8:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004bbc:	da26      	bge.n	8004c0c <_Z31handleSDORequestDownloadBySDOIDt+0x88>
 8004bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bc2:	f000 835a 	beq.w	800527a <_Z31handleSDORequestDownloadBySDOIDt+0x6f6>
 8004bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bca:	f300 83fd 	bgt.w	80053c8 <_Z31handleSDORequestDownloadBySDOIDt+0x844>
 8004bce:	2b21      	cmp	r3, #33	; 0x21
 8004bd0:	f300 814c 	bgt.w	8004e6c <_Z31handleSDORequestDownloadBySDOIDt+0x2e8>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f300 80ff 	bgt.w	8004dd8 <_Z31handleSDORequestDownloadBySDOIDt+0x254>
 8004bda:	e3f5      	b.n	80053c8 <_Z31handleSDORequestDownloadBySDOIDt+0x844>
 8004bdc:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8004be0:	2b07      	cmp	r3, #7
 8004be2:	f200 83f1 	bhi.w	80053c8 <_Z31handleSDORequestDownloadBySDOIDt+0x844>
 8004be6:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <_Z31handleSDORequestDownloadBySDOIDt+0x68>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08005353 	.word	0x08005353
 8004bf0:	080053c9 	.word	0x080053c9
 8004bf4:	080053c9 	.word	0x080053c9
 8004bf8:	080053c9 	.word	0x080053c9
 8004bfc:	080053c9 	.word	0x080053c9
 8004c00:	0800536f 	.word	0x0800536f
 8004c04:	0800538d 	.word	0x0800538d
 8004c08:	080053ab 	.word	0x080053ab
 8004c0c:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	f200 83d9 	bhi.w	80053c8 <_Z31handleSDORequestDownloadBySDOIDt+0x844>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <_Z31handleSDORequestDownloadBySDOIDt+0x98>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08005299 	.word	0x08005299
 8004c20:	080052b5 	.word	0x080052b5
 8004c24:	080052d1 	.word	0x080052d1
 8004c28:	080052ed 	.word	0x080052ed
 8004c2c:	08005309 	.word	0x08005309
 8004c30:	08005327 	.word	0x08005327
 8004c34:	080053c9 	.word	0x080053c9
 8004c38:	080053c9 	.word	0x080053c9
 8004c3c:	080053c9 	.word	0x080053c9
 8004c40:	080053c9 	.word	0x080053c9
 8004c44:	080053c9 	.word	0x080053c9
 8004c48:	080053c9 	.word	0x080053c9
 8004c4c:	080053c9 	.word	0x080053c9
 8004c50:	080053c9 	.word	0x080053c9
 8004c54:	080053c9 	.word	0x080053c9
 8004c58:	080053c9 	.word	0x080053c9
 8004c5c:	0800533d 	.word	0x0800533d
 8004c60:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004c64:	2b59      	cmp	r3, #89	; 0x59
 8004c66:	f200 83af 	bhi.w	80053c8 <_Z31handleSDORequestDownloadBySDOIDt+0x844>
 8004c6a:	a201      	add	r2, pc, #4	; (adr r2, 8004c70 <_Z31handleSDORequestDownloadBySDOIDt+0xec>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004f61 	.word	0x08004f61
 8004c74:	08004f7f 	.word	0x08004f7f
 8004c78:	08004f99 	.word	0x08004f99
 8004c7c:	08004fb7 	.word	0x08004fb7
 8004c80:	08004fd5 	.word	0x08004fd5
 8004c84:	08004fef 	.word	0x08004fef
 8004c88:	0800500b 	.word	0x0800500b
 8004c8c:	080053c9 	.word	0x080053c9
 8004c90:	080053c9 	.word	0x080053c9
 8004c94:	080053c9 	.word	0x080053c9
 8004c98:	080053c9 	.word	0x080053c9
 8004c9c:	080053c9 	.word	0x080053c9
 8004ca0:	080053c9 	.word	0x080053c9
 8004ca4:	080053c9 	.word	0x080053c9
 8004ca8:	080053c9 	.word	0x080053c9
 8004cac:	080053c9 	.word	0x080053c9
 8004cb0:	08005027 	.word	0x08005027
 8004cb4:	08005041 	.word	0x08005041
 8004cb8:	080053c9 	.word	0x080053c9
 8004cbc:	080053c9 	.word	0x080053c9
 8004cc0:	080053c9 	.word	0x080053c9
 8004cc4:	080053c9 	.word	0x080053c9
 8004cc8:	080053c9 	.word	0x080053c9
 8004ccc:	080053c9 	.word	0x080053c9
 8004cd0:	080053c9 	.word	0x080053c9
 8004cd4:	080053c9 	.word	0x080053c9
 8004cd8:	080053c9 	.word	0x080053c9
 8004cdc:	080053c9 	.word	0x080053c9
 8004ce0:	080053c9 	.word	0x080053c9
 8004ce4:	080053c9 	.word	0x080053c9
 8004ce8:	080053c9 	.word	0x080053c9
 8004cec:	080053c9 	.word	0x080053c9
 8004cf0:	0800505b 	.word	0x0800505b
 8004cf4:	08005075 	.word	0x08005075
 8004cf8:	080053c9 	.word	0x080053c9
 8004cfc:	080053c9 	.word	0x080053c9
 8004d00:	080053c9 	.word	0x080053c9
 8004d04:	080053c9 	.word	0x080053c9
 8004d08:	080053c9 	.word	0x080053c9
 8004d0c:	080053c9 	.word	0x080053c9
 8004d10:	080053c9 	.word	0x080053c9
 8004d14:	080053c9 	.word	0x080053c9
 8004d18:	080053c9 	.word	0x080053c9
 8004d1c:	080053c9 	.word	0x080053c9
 8004d20:	080053c9 	.word	0x080053c9
 8004d24:	080053c9 	.word	0x080053c9
 8004d28:	080053c9 	.word	0x080053c9
 8004d2c:	080053c9 	.word	0x080053c9
 8004d30:	080053c9 	.word	0x080053c9
 8004d34:	080053c9 	.word	0x080053c9
 8004d38:	080053c9 	.word	0x080053c9
 8004d3c:	080053c9 	.word	0x080053c9
 8004d40:	080053c9 	.word	0x080053c9
 8004d44:	080053c9 	.word	0x080053c9
 8004d48:	080053c9 	.word	0x080053c9
 8004d4c:	080053c9 	.word	0x080053c9
 8004d50:	080053c9 	.word	0x080053c9
 8004d54:	080053c9 	.word	0x080053c9
 8004d58:	080053c9 	.word	0x080053c9
 8004d5c:	080053c9 	.word	0x080053c9
 8004d60:	080053c9 	.word	0x080053c9
 8004d64:	080053c9 	.word	0x080053c9
 8004d68:	080053c9 	.word	0x080053c9
 8004d6c:	080053c9 	.word	0x080053c9
 8004d70:	0800508f 	.word	0x0800508f
 8004d74:	080050ab 	.word	0x080050ab
 8004d78:	080050c7 	.word	0x080050c7
 8004d7c:	080050e1 	.word	0x080050e1
 8004d80:	080050fd 	.word	0x080050fd
 8004d84:	080053c9 	.word	0x080053c9
 8004d88:	08005119 	.word	0x08005119
 8004d8c:	08005135 	.word	0x08005135
 8004d90:	0800514f 	.word	0x0800514f
 8004d94:	0800516b 	.word	0x0800516b
 8004d98:	080053c9 	.word	0x080053c9
 8004d9c:	080053c9 	.word	0x080053c9
 8004da0:	080053c9 	.word	0x080053c9
 8004da4:	080053c9 	.word	0x080053c9
 8004da8:	080053c9 	.word	0x080053c9
 8004dac:	080053c9 	.word	0x080053c9
 8004db0:	08005185 	.word	0x08005185
 8004db4:	080051a1 	.word	0x080051a1
 8004db8:	080051bd 	.word	0x080051bd
 8004dbc:	080051d7 	.word	0x080051d7
 8004dc0:	080051f3 	.word	0x080051f3
 8004dc4:	080053c9 	.word	0x080053c9
 8004dc8:	0800520f 	.word	0x0800520f
 8004dcc:	0800522b 	.word	0x0800522b
 8004dd0:	08005245 	.word	0x08005245
 8004dd4:	08005261 	.word	0x08005261
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	2b20      	cmp	r3, #32
 8004ddc:	f200 82f4 	bhi.w	80053c8 <_Z31handleSDORequestDownloadBySDOIDt+0x844>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <_Z31handleSDORequestDownloadBySDOIDt+0x264>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004e81 	.word	0x08004e81
 8004dec:	08004e9d 	.word	0x08004e9d
 8004df0:	08004eb9 	.word	0x08004eb9
 8004df4:	08004ed5 	.word	0x08004ed5
 8004df8:	08004ef1 	.word	0x08004ef1
 8004dfc:	080053c9 	.word	0x080053c9
 8004e00:	080053c9 	.word	0x080053c9
 8004e04:	080053c9 	.word	0x080053c9
 8004e08:	080053c9 	.word	0x080053c9
 8004e0c:	080053c9 	.word	0x080053c9
 8004e10:	080053c9 	.word	0x080053c9
 8004e14:	080053c9 	.word	0x080053c9
 8004e18:	080053c9 	.word	0x080053c9
 8004e1c:	080053c9 	.word	0x080053c9
 8004e20:	080053c9 	.word	0x080053c9
 8004e24:	08004f0d 	.word	0x08004f0d
 8004e28:	080053c9 	.word	0x080053c9
 8004e2c:	080053c9 	.word	0x080053c9
 8004e30:	080053c9 	.word	0x080053c9
 8004e34:	080053c9 	.word	0x080053c9
 8004e38:	080053c9 	.word	0x080053c9
 8004e3c:	080053c9 	.word	0x080053c9
 8004e40:	080053c9 	.word	0x080053c9
 8004e44:	080053c9 	.word	0x080053c9
 8004e48:	080053c9 	.word	0x080053c9
 8004e4c:	080053c9 	.word	0x080053c9
 8004e50:	080053c9 	.word	0x080053c9
 8004e54:	080053c9 	.word	0x080053c9
 8004e58:	080053c9 	.word	0x080053c9
 8004e5c:	080053c9 	.word	0x080053c9
 8004e60:	080053c9 	.word	0x080053c9
 8004e64:	08004f29 	.word	0x08004f29
 8004e68:	08004f45 	.word	0x08004f45
 8004e6c:	f240 4269 	movw	r2, #1129	; 0x469
 8004e70:	4293      	cmp	r3, r2
 8004e72:	f300 82a9 	bgt.w	80053c8 <_Z31handleSDORequestDownloadBySDOIDt+0x844>
 8004e76:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8004e7a:	f6bf aef1 	bge.w	8004c60 <_Z31handleSDORequestDownloadBySDOIDt+0xdc>
 8004e7e:	e2a3      	b.n	80053c8 <_Z31handleSDORequestDownloadBySDOIDt+0x844>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SensorF_OD_NodeID>(OD_NodeID_get());
 8004e80:	f001 f864 	bl	8005f4c <_Z13OD_NodeID_getv>
 8004e84:	4603      	mov	r3, r0
 8004e86:	461a      	mov	r2, r3
 8004e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f001 ffbe 	bl	8006e10 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e9a:	e29d      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SensorF_OD_NodeStatus>(OD_NodeStatus_get());
 8004e9c:	f001 f872 	bl	8005f84 <_Z17OD_NodeStatus_getv>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f001 ffc5 	bl	8006e3a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004eb6:	e28f      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SensorF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8004eb8:	f001 f880 	bl	8005fbc <_Z22OD_ProtocolVersion_getv>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 ffcc 	bl	8006e64 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ed2:	e281      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SensorF_OD_StackVersion>(OD_StackVersion_get());
 8004ed4:	f001 f88e 	bl	8005ff4 <_Z19OD_StackVersion_getv>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f001 ffd3 	bl	8006e8e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004eee:	e273      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SensorF_OD_DbcVersion>(OD_DbcVersion_get());
 8004ef0:	f001 f89c 	bl	800602c <_Z17OD_DbcVersion_getv>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 ffda 	bl	8006eb8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f0a:	e265      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SensorF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8004f0c:	f001 f8aa 	bl	8006064 <_Z24OD_HeartbeatInterval_getv>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f18:	4611      	mov	r1, r2
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f001 ffe1 	bl	8006ee2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f26:	e257      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SensorF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8004f28:	f001 f8d4 	bl	80060d4 <_Z21OD_SendOdOnBootup_getv>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	461a      	mov	r2, r3
 8004f30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 ffe8 	bl	8006f0c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f42:	e249      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SensorF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8004f44:	f001 f8fe 	bl	8006144 <_Z26OD_OdEntrySendInterval_getv>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f50:	4611      	mov	r1, r2
 8004f52:	4618      	mov	r0, r3
 8004f54:	f001 ffef 	bl	8006f36 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f5e:	e23b      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SensorF_OD_CpuUsage>(OD_CpuUsage_get());
 8004f60:	f001 f928 	bl	80061b4 <_Z15OD_CpuUsage_getv>
 8004f64:	eef0 7a40 	vmov.f32	s15, s0
 8004f68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f70:	4618      	mov	r0, r3
 8004f72:	f001 fff5 	bl	8006f60 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f7c:	e22c      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SensorF_OD_MemFree>(OD_MemFree_get());
 8004f7e:	f001 f953 	bl	8006228 <_Z14OD_MemFree_getv>
 8004f82:	4602      	mov	r2, r0
 8004f84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 ffff 	bl	8006f8e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f90:	2300      	movs	r3, #0
 8004f92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f96:	e21f      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SensorF_OD_BoardTemp>(OD_BoardTemp_get());
 8004f98:	f001 f97e 	bl	8006298 <_Z16OD_BoardTemp_getv>
 8004f9c:	eef0 7a40 	vmov.f32	s15, s0
 8004fa0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f002 f804 	bl	8006fb6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fb4:	e210      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SensorF_OD_InputVoltage>(OD_InputVoltage_get());
 8004fb6:	f001 f9a9 	bl	800630c <_Z19OD_InputVoltage_getv>
 8004fba:	eef0 7a40 	vmov.f32	s15, s0
 8004fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f002 f80c 	bl	8006fe4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fd2:	e201      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SensorF_OD_runtime>(OD_runtime_get());
 8004fd4:	f001 f9d4 	bl	8006380 <_Z14OD_runtime_getv>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fde:	4611      	mov	r1, r2
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f002 f816 	bl	8007012 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fec:	e1f4      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SensorF_OD_SdcIn>(OD_SdcIn_get());
 8004fee:	f001 f9e3 	bl	80063b8 <_Z12OD_SdcIn_getv>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ffa:	4611      	mov	r1, r2
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f002 f81c 	bl	800703a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005002:	2300      	movs	r3, #0
 8005004:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005008:	e1e6      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SensorF_OD_SdcOut>(OD_SdcOut_get());
 800500a:	f001 f9f1 	bl	80063f0 <_Z13OD_SdcOut_getv>
 800500e:	4603      	mov	r3, r0
 8005010:	461a      	mov	r2, r3
 8005012:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f002 f823 	bl	8007064 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800501e:	2300      	movs	r3, #0
 8005020:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005024:	e1d8      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID1>(OD_ChipUID1_get());
 8005026:	f001 f9ff 	bl	8006428 <_Z15OD_ChipUID1_getv>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005032:	4608      	mov	r0, r1
 8005034:	f002 f82b 	bl	800708e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005038:	2300      	movs	r3, #0
 800503a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800503e:	e1cb      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID2>(OD_ChipUID2_get());
 8005040:	f001 fa12 	bl	8006468 <_Z15OD_ChipUID2_getv>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800504c:	4608      	mov	r0, r1
 800504e:	f002 f837 	bl	80070c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005052:	2300      	movs	r3, #0
 8005054:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005058:	e1be      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SensorF_OD_BuildDate>(OD_BuildDate_get());
 800505a:	f001 fa25 	bl	80064a8 <_Z16OD_BuildDate_getv>
 800505e:	4602      	mov	r2, r0
 8005060:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005064:	4611      	mov	r1, r2
 8005066:	4618      	mov	r0, r3
 8005068:	f002 f843 	bl	80070f2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800506c:	2300      	movs	r3, #0
 800506e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005072:	e1b1      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SensorF_OD_BuildTime>(OD_BuildTime_get());
 8005074:	f001 fa34 	bl	80064e0 <_Z16OD_BuildTime_getv>
 8005078:	4602      	mov	r2, r0
 800507a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800507e:	4611      	mov	r1, r2
 8005080:	4618      	mov	r0, r3
 8005082:	f002 f84a 	bl	800711a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800508c:	e1a4      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 800508e:	f001 fa43 	bl	8006518 <_Z20OD_CAN1_TxErrCnt_getv>
 8005092:	4603      	mov	r3, r0
 8005094:	461a      	mov	r2, r3
 8005096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f002 f850 	bl	8007142 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050a8:	e196      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 80050aa:	f001 fa51 	bl	8006550 <_Z20OD_CAN1_RxErrCnt_getv>
 80050ae:	4603      	mov	r3, r0
 80050b0:	461a      	mov	r2, r3
 80050b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050b6:	4611      	mov	r1, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	f002 f857 	bl	800716c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050be:	2300      	movs	r3, #0
 80050c0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050c4:	e188      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80050c6:	f001 fa5f 	bl	8006588 <_Z25OD_CAN1_lastErrorCode_getv>
 80050ca:	4602      	mov	r2, r0
 80050cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f002 f85f 	bl	8007196 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050de:	e17b      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 80050e0:	f001 fa6e 	bl	80065c0 <_Z26OD_CAN1_autoErrorReset_getv>
 80050e4:	4603      	mov	r3, r0
 80050e6:	461a      	mov	r2, r3
 80050e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ec:	4611      	mov	r1, r2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f002 f865 	bl	80071be <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050fa:	e16d      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 80050fc:	f001 fa98 	bl	8006630 <_Z20OD_CAN1_Baudrate_getv>
 8005100:	4603      	mov	r3, r0
 8005102:	461a      	mov	r2, r3
 8005104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005108:	4611      	mov	r1, r2
 800510a:	4618      	mov	r0, r3
 800510c:	f002 f86c 	bl	80071e8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005110:	2300      	movs	r3, #0
 8005112:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005116:	e15f      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Status>(OD_CAN1_Status_get());
 8005118:	f001 fac2 	bl	80066a0 <_Z18OD_CAN1_Status_getv>
 800511c:	4603      	mov	r3, r0
 800511e:	461a      	mov	r2, r3
 8005120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005124:	4611      	mov	r1, r2
 8005126:	4618      	mov	r0, r3
 8005128:	f002 f873 	bl	8007212 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800512c:	2300      	movs	r3, #0
 800512e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005132:	e151      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8005134:	f001 fad0 	bl	80066d8 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8005138:	4602      	mov	r2, r0
 800513a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f002 f87b 	bl	800723c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005146:	2300      	movs	r3, #0
 8005148:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800514c:	e144      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 800514e:	f001 fadf 	bl	8006710 <_Z23OD_CAN1_ErrorStatus_getv>
 8005152:	4603      	mov	r3, r0
 8005154:	461a      	mov	r2, r3
 8005156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800515a:	4611      	mov	r1, r2
 800515c:	4618      	mov	r0, r3
 800515e:	f002 f881 	bl	8007264 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005162:	2300      	movs	r3, #0
 8005164:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005168:	e136      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 800516a:	f001 faed 	bl	8006748 <_Z29OD_CAN1_DelayedTxMessages_getv>
 800516e:	4602      	mov	r2, r0
 8005170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005174:	4611      	mov	r1, r2
 8005176:	4618      	mov	r0, r3
 8005178:	f002 f889 	bl	800728e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005182:	e129      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8005184:	f001 fafc 	bl	8006780 <_Z20OD_CAN2_TxErrCnt_getv>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005190:	4611      	mov	r1, r2
 8005192:	4618      	mov	r0, r3
 8005194:	f002 f88f 	bl	80072b6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005198:	2300      	movs	r3, #0
 800519a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800519e:	e11b      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 80051a0:	f001 fb0a 	bl	80067b8 <_Z20OD_CAN2_RxErrCnt_getv>
 80051a4:	4603      	mov	r3, r0
 80051a6:	461a      	mov	r2, r3
 80051a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051ac:	4611      	mov	r1, r2
 80051ae:	4618      	mov	r0, r3
 80051b0:	f002 f896 	bl	80072e0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051b4:	2300      	movs	r3, #0
 80051b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051ba:	e10d      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 80051bc:	f001 fb18 	bl	80067f0 <_Z25OD_CAN2_lastErrorCode_getv>
 80051c0:	4602      	mov	r2, r0
 80051c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f002 f89e 	bl	800730a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051d4:	e100      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 80051d6:	f001 fb27 	bl	8006828 <_Z26OD_CAN2_autoErrorReset_getv>
 80051da:	4603      	mov	r3, r0
 80051dc:	461a      	mov	r2, r3
 80051de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051e2:	4611      	mov	r1, r2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f002 f8a4 	bl	8007332 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051f0:	e0f2      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80051f2:	f001 fb51 	bl	8006898 <_Z20OD_CAN2_Baudrate_getv>
 80051f6:	4603      	mov	r3, r0
 80051f8:	461a      	mov	r2, r3
 80051fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f002 f8ab 	bl	800735c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800520c:	e0e4      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Status>(OD_CAN2_Status_get());
 800520e:	f001 fb7b 	bl	8006908 <_Z18OD_CAN2_Status_getv>
 8005212:	4603      	mov	r3, r0
 8005214:	461a      	mov	r2, r3
 8005216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800521a:	4611      	mov	r1, r2
 800521c:	4618      	mov	r0, r3
 800521e:	f002 f8b2 	bl	8007386 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005228:	e0d6      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 800522a:	f001 fb89 	bl	8006940 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 800522e:	4602      	mov	r2, r0
 8005230:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005234:	4611      	mov	r1, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f002 f8ba 	bl	80073b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800523c:	2300      	movs	r3, #0
 800523e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005242:	e0c9      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8005244:	f001 fb98 	bl	8006978 <_Z23OD_CAN2_ErrorStatus_getv>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f002 f8c0 	bl	80073d8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800525e:	e0bb      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8005260:	f001 fba6 	bl	80069b0 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8005264:	4602      	mov	r2, r0
 8005266:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800526a:	4611      	mov	r1, r2
 800526c:	4618      	mov	r0, r3
 800526e:	f002 f8c8 	bl	8007402 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005272:	2300      	movs	r3, #0
 8005274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005278:	e0ae      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x800:    // OD_samplingInterval
            msgSdoResp.set<can::signals::SensorF_OD_samplingInterval>(OD_samplingInterval_get());
 800527a:	f001 fbb5 	bl	80069e8 <_Z23OD_samplingInterval_getv>
 800527e:	eef0 7a40 	vmov.f32	s15, s0
 8005282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005286:	eeb0 0a67 	vmov.f32	s0, s15
 800528a:	4618      	mov	r0, r3
 800528c:	f002 f8cd 	bl	800742a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005290:	2300      	movs	r3, #0
 8005292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005296:	e09f      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x900:    // OD_TelemetryCommands
            msgSdoResp.set<can::signals::SensorF_OD_TelemetryCommands>(OD_TelemetryCommands_get());
 8005298:	f001 fbe0 	bl	8006a5c <_Z24OD_TelemetryCommands_getv>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052a4:	4611      	mov	r1, r2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f002 f8d6 	bl	8007458 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052b2:	e091      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x901:    // OD_StateMachineInterval
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineInterval>(OD_StateMachineInterval_get());
 80052b4:	f001 fc0a 	bl	8006acc <_Z27OD_StateMachineInterval_getv>
 80052b8:	4603      	mov	r3, r0
 80052ba:	461a      	mov	r2, r3
 80052bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f002 f8dd 	bl	8007482 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052ce:	e083      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x902:    // OD_StateMachineActivate
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineActivate>(OD_StateMachineActivate_get());
 80052d0:	f001 fc34 	bl	8006b3c <_Z27OD_StateMachineActivate_getv>
 80052d4:	4603      	mov	r3, r0
 80052d6:	461a      	mov	r2, r3
 80052d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052dc:	4611      	mov	r1, r2
 80052de:	4618      	mov	r0, r3
 80052e0:	f002 f8e4 	bl	80074ac <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052ea:	e075      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x903:    // OD_HVBatteryMode
            msgSdoResp.set<can::signals::SensorF_OD_HVBatteryMode>(OD_HVBatteryMode_get());
 80052ec:	f001 fc5e 	bl	8006bac <_Z20OD_HVBatteryMode_getv>
 80052f0:	4603      	mov	r3, r0
 80052f2:	461a      	mov	r2, r3
 80052f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f002 f8eb 	bl	80074d6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005300:	2300      	movs	r3, #0
 8005302:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005306:	e067      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x904:    // OD_EncoderWheelDiameter
            msgSdoResp.set<can::signals::SensorF_OD_EncoderWheelDiameter>(OD_EncoderWheelDiameter_get());
 8005308:	f001 fc88 	bl	8006c1c <_Z27OD_EncoderWheelDiameter_getv>
 800530c:	eef0 7a40 	vmov.f32	s15, s0
 8005310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005314:	eeb0 0a67 	vmov.f32	s0, s15
 8005318:	4618      	mov	r0, r3
 800531a:	f002 f8f1 	bl	8007500 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800531e:	2300      	movs	r3, #0
 8005320:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005324:	e058      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x905:    // OD_EncoderResetPosition
            respCode = can::signals::SensorF_SDO_RespCode::ERR_WRITE_ONLY_OBJECT;
 8005326:	2302      	movs	r3, #2
 8005328:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x905);
 800532c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005330:	f640 1105 	movw	r1, #2309	; 0x905
 8005334:	4618      	mov	r0, r3
 8005336:	f002 f8fa 	bl	800752e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 800533a:	e04d      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0x910:    // OD_SetReset
            respCode = can::signals::SensorF_SDO_RespCode::ERR_WRITE_ONLY_OBJECT;
 800533c:	2302      	movs	r3, #2
 800533e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x910);
 8005342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005346:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800534a:	4618      	mov	r0, r3
 800534c:	f002 f8ef 	bl	800752e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005350:	e042      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0xA20:    // OD_IMU_number
            msgSdoResp.set<can::signals::SensorF_OD_IMU_number>(OD_IMU_number_get());
 8005352:	f001 fcd5 	bl	8006d00 <_Z17OD_IMU_number_getv>
 8005356:	4603      	mov	r3, r0
 8005358:	461a      	mov	r2, r3
 800535a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800535e:	4611      	mov	r1, r2
 8005360:	4618      	mov	r0, r3
 8005362:	f002 f8f9 	bl	8007558 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005366:	2300      	movs	r3, #0
 8005368:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800536c:	e034      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0xA25:    // OD_IMU1_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 800536e:	f001 fce3 	bl	8006d38 <_Z23OD_IMU1_Temperature_getv>
 8005372:	eef0 7a40 	vmov.f32	s15, s0
 8005376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800537a:	eeb0 0a67 	vmov.f32	s0, s15
 800537e:	4618      	mov	r0, r3
 8005380:	f002 f8ff 	bl	8007582 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005384:	2300      	movs	r3, #0
 8005386:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800538a:	e025      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0xA26:    // OD_IMU2_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 800538c:	f001 fcf2 	bl	8006d74 <_Z23OD_IMU2_Temperature_getv>
 8005390:	eef0 7a40 	vmov.f32	s15, s0
 8005394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005398:	eeb0 0a67 	vmov.f32	s0, s15
 800539c:	4618      	mov	r0, r3
 800539e:	f002 f907 	bl	80075b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053a8:	e016      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        case 0xA27:    // OD_IMU3_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 80053aa:	f001 fd01 	bl	8006db0 <_Z23OD_IMU3_Temperature_getv>
 80053ae:	eef0 7a40 	vmov.f32	s15, s0
 80053b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ba:	4618      	mov	r0, r3
 80053bc:	f002 f90f 	bl	80075de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053c6:	e007      	b.n	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x854>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(sdoId);
 80053c8:	88fa      	ldrh	r2, [r7, #6]
 80053ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053ce:	4611      	mov	r1, r2
 80053d0:	4618      	mov	r0, r3
 80053d2:	f002 f8ac 	bl	800752e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 80053d6:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SensorF_SDO_RespCode>(respCode);
 80053d8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80053dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053e0:	4611      	mov	r1, r2
 80053e2:	4618      	mov	r0, r3
 80053e4:	f002 f912 	bl	800760c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 80053e8:	f107 0308 	add.w	r3, r7, #8
 80053ec:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80053f0:	2200      	movs	r2, #0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fb fefe 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <_Z31handleSDORequestDownloadBySDOIDt+0x88c>)
 80053fa:	6818      	ldr	r0, [r3, #0]
 80053fc:	f107 0108 	add.w	r1, r7, #8
 8005400:	2300      	movs	r3, #0
 8005402:	2200      	movs	r2, #0
 8005404:	f012 f9fc 	bl	8017800 <osMessageQueuePut>
}
 8005408:	bf00      	nop
 800540a:	3748      	adds	r7, #72	; 0x48
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	200007b4 	.word	0x200007b4

08005414 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af02      	add	r7, sp, #8
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	9300      	str	r3, [sp, #0]
 8005426:	2300      	movs	r3, #0
 8005428:	2208      	movs	r2, #8
 800542a:	f240 51c1 	movw	r1, #1473	; 0x5c1
 800542e:	f7fd fc42 	bl	8002cb6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8005436:	f240 52c1 	movw	r2, #1473	; 0x5c1
 800543a:	4293      	cmp	r3, r2
 800543c:	d000      	beq.n	8005440 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800543e:	e7fe      	b.n	800543e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
 8005454:	6839      	ldr	r1, [r7, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	331c      	adds	r3, #28
 800545a:	461a      	mov	r2, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff ffd9 	bl	8005414 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 800546c:	b580      	push	{r7, lr}
 800546e:	b0a0      	sub	sp, #128	; 0x80
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SensorF_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 8005474:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4618      	mov	r0, r3
 800547c:	f7ff ffe5 	bl	800544a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SensorF_SDO_Resp> msgSdoResp;
 8005480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005484:	4618      	mov	r0, r3
 8005486:	f7ff fb6d 	bl	8004b64 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SensorF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 800548a:	2301      	movs	r3, #1
 800548c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint16_t sdoId = msgSdoReq.get<can::signals::SensorF_SDO_ID>();
 8005490:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005494:	4618      	mov	r0, r3
 8005496:	f002 f8ce 	bl	8007636 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>
 800549a:	4603      	mov	r3, r0
 800549c:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

    switch (sdoId) {
 80054a0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80054a4:	f640 2227 	movw	r2, #2599	; 0xa27
 80054a8:	4293      	cmp	r3, r2
 80054aa:	f300 8522 	bgt.w	8005ef2 <_Z22handleSDORequestUploadRK9RxMessage+0xa86>
 80054ae:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 80054b2:	da16      	bge.n	80054e2 <_Z22handleSDORequestUploadRK9RxMessage+0x76>
 80054b4:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80054b8:	f300 851b 	bgt.w	8005ef2 <_Z22handleSDORequestUploadRK9RxMessage+0xa86>
 80054bc:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 80054c0:	da28      	bge.n	8005514 <_Z22handleSDORequestUploadRK9RxMessage+0xa8>
 80054c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054c6:	f000 83d1 	beq.w	8005c6c <_Z22handleSDORequestUploadRK9RxMessage+0x800>
 80054ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054ce:	f300 8510 	bgt.w	8005ef2 <_Z22handleSDORequestUploadRK9RxMessage+0xa86>
 80054d2:	2b21      	cmp	r3, #33	; 0x21
 80054d4:	f300 814e 	bgt.w	8005774 <_Z22handleSDORequestUploadRK9RxMessage+0x308>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f300 8101 	bgt.w	80056e0 <_Z22handleSDORequestUploadRK9RxMessage+0x274>
 80054de:	f000 bd08 	b.w	8005ef2 <_Z22handleSDORequestUploadRK9RxMessage+0xa86>
 80054e2:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 80054e6:	2b07      	cmp	r3, #7
 80054e8:	f200 8503 	bhi.w	8005ef2 <_Z22handleSDORequestUploadRK9RxMessage+0xa86>
 80054ec:	a201      	add	r2, pc, #4	; (adr r2, 80054f4 <_Z22handleSDORequestUploadRK9RxMessage+0x88>)
 80054ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f2:	bf00      	nop
 80054f4:	08005e7d 	.word	0x08005e7d
 80054f8:	08005ef3 	.word	0x08005ef3
 80054fc:	08005ef3 	.word	0x08005ef3
 8005500:	08005ef3 	.word	0x08005ef3
 8005504:	08005ef3 	.word	0x08005ef3
 8005508:	08005e99 	.word	0x08005e99
 800550c:	08005eb7 	.word	0x08005eb7
 8005510:	08005ed5 	.word	0x08005ed5
 8005514:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8005518:	2b10      	cmp	r3, #16
 800551a:	f200 84ea 	bhi.w	8005ef2 <_Z22handleSDORequestUploadRK9RxMessage+0xa86>
 800551e:	a201      	add	r2, pc, #4	; (adr r2, 8005524 <_Z22handleSDORequestUploadRK9RxMessage+0xb8>)
 8005520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005524:	08005ccd 	.word	0x08005ccd
 8005528:	08005d03 	.word	0x08005d03
 800552c:	08005d51 	.word	0x08005d51
 8005530:	08005d87 	.word	0x08005d87
 8005534:	08005dbd 	.word	0x08005dbd
 8005538:	08005e1d 	.word	0x08005e1d
 800553c:	08005ef3 	.word	0x08005ef3
 8005540:	08005ef3 	.word	0x08005ef3
 8005544:	08005ef3 	.word	0x08005ef3
 8005548:	08005ef3 	.word	0x08005ef3
 800554c:	08005ef3 	.word	0x08005ef3
 8005550:	08005ef3 	.word	0x08005ef3
 8005554:	08005ef3 	.word	0x08005ef3
 8005558:	08005ef3 	.word	0x08005ef3
 800555c:	08005ef3 	.word	0x08005ef3
 8005560:	08005ef3 	.word	0x08005ef3
 8005564:	08005e4d 	.word	0x08005e4d
 8005568:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800556c:	2b59      	cmp	r3, #89	; 0x59
 800556e:	f200 84c0 	bhi.w	8005ef2 <_Z22handleSDORequestUploadRK9RxMessage+0xa86>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <_Z22handleSDORequestUploadRK9RxMessage+0x10c>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	080058b7 	.word	0x080058b7
 800557c:	080058d5 	.word	0x080058d5
 8005580:	080058ef 	.word	0x080058ef
 8005584:	0800590d 	.word	0x0800590d
 8005588:	0800592b 	.word	0x0800592b
 800558c:	08005945 	.word	0x08005945
 8005590:	08005961 	.word	0x08005961
 8005594:	08005ef3 	.word	0x08005ef3
 8005598:	08005ef3 	.word	0x08005ef3
 800559c:	08005ef3 	.word	0x08005ef3
 80055a0:	08005ef3 	.word	0x08005ef3
 80055a4:	08005ef3 	.word	0x08005ef3
 80055a8:	08005ef3 	.word	0x08005ef3
 80055ac:	08005ef3 	.word	0x08005ef3
 80055b0:	08005ef3 	.word	0x08005ef3
 80055b4:	08005ef3 	.word	0x08005ef3
 80055b8:	0800597d 	.word	0x0800597d
 80055bc:	08005997 	.word	0x08005997
 80055c0:	08005ef3 	.word	0x08005ef3
 80055c4:	08005ef3 	.word	0x08005ef3
 80055c8:	08005ef3 	.word	0x08005ef3
 80055cc:	08005ef3 	.word	0x08005ef3
 80055d0:	08005ef3 	.word	0x08005ef3
 80055d4:	08005ef3 	.word	0x08005ef3
 80055d8:	08005ef3 	.word	0x08005ef3
 80055dc:	08005ef3 	.word	0x08005ef3
 80055e0:	08005ef3 	.word	0x08005ef3
 80055e4:	08005ef3 	.word	0x08005ef3
 80055e8:	08005ef3 	.word	0x08005ef3
 80055ec:	08005ef3 	.word	0x08005ef3
 80055f0:	08005ef3 	.word	0x08005ef3
 80055f4:	08005ef3 	.word	0x08005ef3
 80055f8:	080059b1 	.word	0x080059b1
 80055fc:	080059cb 	.word	0x080059cb
 8005600:	08005ef3 	.word	0x08005ef3
 8005604:	08005ef3 	.word	0x08005ef3
 8005608:	08005ef3 	.word	0x08005ef3
 800560c:	08005ef3 	.word	0x08005ef3
 8005610:	08005ef3 	.word	0x08005ef3
 8005614:	08005ef3 	.word	0x08005ef3
 8005618:	08005ef3 	.word	0x08005ef3
 800561c:	08005ef3 	.word	0x08005ef3
 8005620:	08005ef3 	.word	0x08005ef3
 8005624:	08005ef3 	.word	0x08005ef3
 8005628:	08005ef3 	.word	0x08005ef3
 800562c:	08005ef3 	.word	0x08005ef3
 8005630:	08005ef3 	.word	0x08005ef3
 8005634:	08005ef3 	.word	0x08005ef3
 8005638:	08005ef3 	.word	0x08005ef3
 800563c:	08005ef3 	.word	0x08005ef3
 8005640:	08005ef3 	.word	0x08005ef3
 8005644:	08005ef3 	.word	0x08005ef3
 8005648:	08005ef3 	.word	0x08005ef3
 800564c:	08005ef3 	.word	0x08005ef3
 8005650:	08005ef3 	.word	0x08005ef3
 8005654:	08005ef3 	.word	0x08005ef3
 8005658:	08005ef3 	.word	0x08005ef3
 800565c:	08005ef3 	.word	0x08005ef3
 8005660:	08005ef3 	.word	0x08005ef3
 8005664:	08005ef3 	.word	0x08005ef3
 8005668:	08005ef3 	.word	0x08005ef3
 800566c:	08005ef3 	.word	0x08005ef3
 8005670:	08005ef3 	.word	0x08005ef3
 8005674:	08005ef3 	.word	0x08005ef3
 8005678:	080059e5 	.word	0x080059e5
 800567c:	08005a01 	.word	0x08005a01
 8005680:	08005a1d 	.word	0x08005a1d
 8005684:	08005a37 	.word	0x08005a37
 8005688:	08005a6d 	.word	0x08005a6d
 800568c:	08005ef3 	.word	0x08005ef3
 8005690:	08005abd 	.word	0x08005abd
 8005694:	08005ad9 	.word	0x08005ad9
 8005698:	08005af3 	.word	0x08005af3
 800569c:	08005b0f 	.word	0x08005b0f
 80056a0:	08005ef3 	.word	0x08005ef3
 80056a4:	08005ef3 	.word	0x08005ef3
 80056a8:	08005ef3 	.word	0x08005ef3
 80056ac:	08005ef3 	.word	0x08005ef3
 80056b0:	08005ef3 	.word	0x08005ef3
 80056b4:	08005ef3 	.word	0x08005ef3
 80056b8:	08005b29 	.word	0x08005b29
 80056bc:	08005b45 	.word	0x08005b45
 80056c0:	08005b61 	.word	0x08005b61
 80056c4:	08005b7b 	.word	0x08005b7b
 80056c8:	08005bb1 	.word	0x08005bb1
 80056cc:	08005ef3 	.word	0x08005ef3
 80056d0:	08005c01 	.word	0x08005c01
 80056d4:	08005c1d 	.word	0x08005c1d
 80056d8:	08005c37 	.word	0x08005c37
 80056dc:	08005c53 	.word	0x08005c53
 80056e0:	3b01      	subs	r3, #1
 80056e2:	2b20      	cmp	r3, #32
 80056e4:	f200 8405 	bhi.w	8005ef2 <_Z22handleSDORequestUploadRK9RxMessage+0xa86>
 80056e8:	a201      	add	r2, pc, #4	; (adr r2, 80056f0 <_Z22handleSDORequestUploadRK9RxMessage+0x284>)
 80056ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ee:	bf00      	nop
 80056f0:	08005789 	.word	0x08005789
 80056f4:	080057a5 	.word	0x080057a5
 80056f8:	080057c1 	.word	0x080057c1
 80056fc:	080057dd 	.word	0x080057dd
 8005700:	080057f9 	.word	0x080057f9
 8005704:	08005ef3 	.word	0x08005ef3
 8005708:	08005ef3 	.word	0x08005ef3
 800570c:	08005ef3 	.word	0x08005ef3
 8005710:	08005ef3 	.word	0x08005ef3
 8005714:	08005ef3 	.word	0x08005ef3
 8005718:	08005ef3 	.word	0x08005ef3
 800571c:	08005ef3 	.word	0x08005ef3
 8005720:	08005ef3 	.word	0x08005ef3
 8005724:	08005ef3 	.word	0x08005ef3
 8005728:	08005ef3 	.word	0x08005ef3
 800572c:	08005815 	.word	0x08005815
 8005730:	08005ef3 	.word	0x08005ef3
 8005734:	08005ef3 	.word	0x08005ef3
 8005738:	08005ef3 	.word	0x08005ef3
 800573c:	08005ef3 	.word	0x08005ef3
 8005740:	08005ef3 	.word	0x08005ef3
 8005744:	08005ef3 	.word	0x08005ef3
 8005748:	08005ef3 	.word	0x08005ef3
 800574c:	08005ef3 	.word	0x08005ef3
 8005750:	08005ef3 	.word	0x08005ef3
 8005754:	08005ef3 	.word	0x08005ef3
 8005758:	08005ef3 	.word	0x08005ef3
 800575c:	08005ef3 	.word	0x08005ef3
 8005760:	08005ef3 	.word	0x08005ef3
 8005764:	08005ef3 	.word	0x08005ef3
 8005768:	08005ef3 	.word	0x08005ef3
 800576c:	0800584b 	.word	0x0800584b
 8005770:	08005881 	.word	0x08005881
 8005774:	f240 4269 	movw	r2, #1129	; 0x469
 8005778:	4293      	cmp	r3, r2
 800577a:	f300 83ba 	bgt.w	8005ef2 <_Z22handleSDORequestUploadRK9RxMessage+0xa86>
 800577e:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8005782:	f6bf aef1 	bge.w	8005568 <_Z22handleSDORequestUploadRK9RxMessage+0xfc>
 8005786:	e3b4      	b.n	8005ef2 <_Z22handleSDORequestUploadRK9RxMessage+0xa86>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005788:	2303      	movs	r3, #3
 800578a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_NodeID>(OD_NodeID_get());
 800578e:	f000 fbdd 	bl	8005f4c <_Z13OD_NodeID_getv>
 8005792:	4603      	mov	r3, r0
 8005794:	461a      	mov	r2, r3
 8005796:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800579a:	4611      	mov	r1, r2
 800579c:	4618      	mov	r0, r3
 800579e:	f001 fb37 	bl	8006e10 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 80057a2:	e3af      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_NodeStatus>(OD_NodeStatus_get());
 80057aa:	f000 fbeb 	bl	8005f84 <_Z17OD_NodeStatus_getv>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057b6:	4611      	mov	r1, r2
 80057b8:	4618      	mov	r0, r3
 80057ba:	f001 fb3e 	bl	8006e3a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 80057be:	e3a1      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 80057c6:	f000 fbf9 	bl	8005fbc <_Z22OD_ProtocolVersion_getv>
 80057ca:	4603      	mov	r3, r0
 80057cc:	461a      	mov	r2, r3
 80057ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057d2:	4611      	mov	r1, r2
 80057d4:	4618      	mov	r0, r3
 80057d6:	f001 fb45 	bl	8006e64 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 80057da:	e393      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80057dc:	2303      	movs	r3, #3
 80057de:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_StackVersion>(OD_StackVersion_get());
 80057e2:	f000 fc07 	bl	8005ff4 <_Z19OD_StackVersion_getv>
 80057e6:	4603      	mov	r3, r0
 80057e8:	461a      	mov	r2, r3
 80057ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80057ee:	4611      	mov	r1, r2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 fb4c 	bl	8006e8e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 80057f6:	e385      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_DbcVersion>(OD_DbcVersion_get());
 80057fe:	f000 fc15 	bl	800602c <_Z17OD_DbcVersion_getv>
 8005802:	4603      	mov	r3, r0
 8005804:	461a      	mov	r2, r3
 8005806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800580a:	4611      	mov	r1, r2
 800580c:	4618      	mov	r0, r3
 800580e:	f001 fb53 	bl	8006eb8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 8005812:	e377      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_HeartbeatInterval>();
 8005814:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005818:	4618      	mov	r0, r3
 800581a:	f001 ff1e 	bl	800765a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 800581e:	4603      	mov	r3, r0
 8005820:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 8005824:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fc37 	bl	800609c <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 800582e:	2300      	movs	r3, #0
 8005830:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8005834:	f000 fc16 	bl	8006064 <_Z24OD_HeartbeatInterval_getv>
 8005838:	4603      	mov	r3, r0
 800583a:	461a      	mov	r2, r3
 800583c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005840:	4611      	mov	r1, r2
 8005842:	4618      	mov	r0, r3
 8005844:	f001 fb4d 	bl	8006ee2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 8005848:	e35c      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_SendOdOnBootup>();
 800584a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800584e:	4618      	mov	r0, r3
 8005850:	f001 ff15 	bl	800767e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals25SensorF_OD_SendOdOnBootupEEENT_8dataTypeEv>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 800585a:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fc54 	bl	800610c <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005864:	2300      	movs	r3, #0
 8005866:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 800586a:	f000 fc33 	bl	80060d4 <_Z21OD_SendOdOnBootup_getv>
 800586e:	4603      	mov	r3, r0
 8005870:	461a      	mov	r2, r3
 8005872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f001 fb47 	bl	8006f0c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 800587e:	e341      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_OdEntrySendInterval>();
 8005880:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005884:	4618      	mov	r0, r3
 8005886:	f001 ff0c 	bl	80076a2 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 800588a:	4603      	mov	r3, r0
 800588c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8005890:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fc71 	bl	800617c <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 800589a:	2300      	movs	r3, #0
 800589c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 80058a0:	f000 fc50 	bl	8006144 <_Z26OD_OdEntrySendInterval_getv>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058ac:	4611      	mov	r1, r2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f001 fb41 	bl	8006f36 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 80058b4:	e326      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CpuUsage>(OD_CpuUsage_get());
 80058bc:	f000 fc7a 	bl	80061b4 <_Z15OD_CpuUsage_getv>
 80058c0:	eef0 7a40 	vmov.f32	s15, s0
 80058c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058c8:	eeb0 0a67 	vmov.f32	s0, s15
 80058cc:	4618      	mov	r0, r3
 80058ce:	f001 fb47 	bl	8006f60 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 80058d2:	e317      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_MemFree>(OD_MemFree_get());
 80058da:	f000 fca5 	bl	8006228 <_Z14OD_MemFree_getv>
 80058de:	4602      	mov	r2, r0
 80058e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f001 fb51 	bl	8006f8e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 80058ec:	e30a      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BoardTemp>(OD_BoardTemp_get());
 80058f4:	f000 fcd0 	bl	8006298 <_Z16OD_BoardTemp_getv>
 80058f8:	eef0 7a40 	vmov.f32	s15, s0
 80058fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005900:	eeb0 0a67 	vmov.f32	s0, s15
 8005904:	4618      	mov	r0, r3
 8005906:	f001 fb56 	bl	8006fb6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 800590a:	e2fb      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800590c:	2303      	movs	r3, #3
 800590e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_InputVoltage>(OD_InputVoltage_get());
 8005912:	f000 fcfb 	bl	800630c <_Z19OD_InputVoltage_getv>
 8005916:	eef0 7a40 	vmov.f32	s15, s0
 800591a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800591e:	eeb0 0a67 	vmov.f32	s0, s15
 8005922:	4618      	mov	r0, r3
 8005924:	f001 fb5e 	bl	8006fe4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 8005928:	e2ec      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800592a:	2303      	movs	r3, #3
 800592c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_runtime>(OD_runtime_get());
 8005930:	f000 fd26 	bl	8006380 <_Z14OD_runtime_getv>
 8005934:	4602      	mov	r2, r0
 8005936:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800593a:	4611      	mov	r1, r2
 800593c:	4618      	mov	r0, r3
 800593e:	f001 fb68 	bl	8007012 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>
            break;
 8005942:	e2df      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005944:	2303      	movs	r3, #3
 8005946:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SdcIn>(OD_SdcIn_get());
 800594a:	f000 fd35 	bl	80063b8 <_Z12OD_SdcIn_getv>
 800594e:	4603      	mov	r3, r0
 8005950:	461a      	mov	r2, r3
 8005952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f001 fb6e 	bl	800703a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>
            break;
 800595e:	e2d1      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005960:	2303      	movs	r3, #3
 8005962:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SdcOut>(OD_SdcOut_get());
 8005966:	f000 fd43 	bl	80063f0 <_Z13OD_SdcOut_getv>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005972:	4611      	mov	r1, r2
 8005974:	4618      	mov	r0, r3
 8005976:	f001 fb75 	bl	8007064 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 800597a:	e2c3      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800597c:	2303      	movs	r3, #3
 800597e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID1>(OD_ChipUID1_get());
 8005982:	f000 fd51 	bl	8006428 <_Z15OD_ChipUID1_getv>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800598e:	4608      	mov	r0, r1
 8005990:	f001 fb7d 	bl	800708e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8005994:	e2b6      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005996:	2303      	movs	r3, #3
 8005998:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID2>(OD_ChipUID2_get());
 800599c:	f000 fd64 	bl	8006468 <_Z15OD_ChipUID2_getv>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80059a8:	4608      	mov	r0, r1
 80059aa:	f001 fb89 	bl	80070c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 80059ae:	e2a9      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BuildDate>(OD_BuildDate_get());
 80059b6:	f000 fd77 	bl	80064a8 <_Z16OD_BuildDate_getv>
 80059ba:	4602      	mov	r2, r0
 80059bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059c0:	4611      	mov	r1, r2
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 fb95 	bl	80070f2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 80059c8:	e29c      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BuildTime>(OD_BuildTime_get());
 80059d0:	f000 fd86 	bl	80064e0 <_Z16OD_BuildTime_getv>
 80059d4:	4602      	mov	r2, r0
 80059d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059da:	4611      	mov	r1, r2
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 fb9c 	bl	800711a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 80059e2:	e28f      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80059e4:	2303      	movs	r3, #3
 80059e6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 80059ea:	f000 fd95 	bl	8006518 <_Z20OD_CAN1_TxErrCnt_getv>
 80059ee:	4603      	mov	r3, r0
 80059f0:	461a      	mov	r2, r3
 80059f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 fba2 	bl	8007142 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 80059fe:	e281      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8005a06:	f000 fda3 	bl	8006550 <_Z20OD_CAN1_RxErrCnt_getv>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a12:	4611      	mov	r1, r2
 8005a14:	4618      	mov	r0, r3
 8005a16:	f001 fba9 	bl	800716c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 8005a1a:	e273      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8005a22:	f000 fdb1 	bl	8006588 <_Z25OD_CAN1_lastErrorCode_getv>
 8005a26:	4602      	mov	r2, r0
 8005a28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a2c:	4611      	mov	r1, r2
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f001 fbb1 	bl	8007196 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005a34:	e266      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN1_autoErrorReset>();
 8005a36:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 fe43 	bl	80076c6 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 8005a46:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f000 fdd4 	bl	80065f8 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8005a56:	f000 fdb3 	bl	80065c0 <_Z26OD_CAN1_autoErrorReset_getv>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a62:	4611      	mov	r1, r2
 8005a64:	4618      	mov	r0, r3
 8005a66:	f001 fbaa 	bl	80071be <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8005a6a:	e24b      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN1_Baudrate>();
 8005a6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 fe3a 	bl	80076ea <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8005a76:	4603      	mov	r3, r0
 8005a78:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8005a7c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005a80:	2b7c      	cmp	r3, #124	; 0x7c
 8005a82:	d904      	bls.n	8005a8e <_Z22handleSDORequestUploadRK9RxMessage+0x622>
 8005a84:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a8c:	d903      	bls.n	8005a96 <_Z22handleSDORequestUploadRK9RxMessage+0x62a>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005a8e:	2305      	movs	r3, #5
 8005a90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005a94:	e007      	b.n	8005aa6 <_Z22handleSDORequestUploadRK9RxMessage+0x63a>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8005a96:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f000 fde4 	bl	8006668 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8005aa6:	f000 fdc3 	bl	8006630 <_Z20OD_CAN1_Baudrate_getv>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	461a      	mov	r2, r3
 8005aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 fb97 	bl	80071e8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8005aba:	e223      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Status>(OD_CAN1_Status_get());
 8005ac2:	f000 fded 	bl	80066a0 <_Z18OD_CAN1_Status_getv>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	461a      	mov	r2, r3
 8005aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 fb9e 	bl	8007212 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 8005ad6:	e215      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8005ade:	f000 fdfb 	bl	80066d8 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ae8:	4611      	mov	r1, r2
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 fba6 	bl	800723c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005af0:	e208      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8005af8:	f000 fe0a 	bl	8006710 <_Z23OD_CAN1_ErrorStatus_getv>
 8005afc:	4603      	mov	r3, r0
 8005afe:	461a      	mov	r2, r3
 8005b00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b04:	4611      	mov	r1, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f001 fbac 	bl	8007264 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8005b0c:	e1fa      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b0e:	2303      	movs	r3, #3
 8005b10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8005b14:	f000 fe18 	bl	8006748 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b1e:	4611      	mov	r1, r2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f001 fbb4 	bl	800728e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005b26:	e1ed      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8005b2e:	f000 fe27 	bl	8006780 <_Z20OD_CAN2_TxErrCnt_getv>
 8005b32:	4603      	mov	r3, r0
 8005b34:	461a      	mov	r2, r3
 8005b36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b3a:	4611      	mov	r1, r2
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f001 fbba 	bl	80072b6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 8005b42:	e1df      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8005b4a:	f000 fe35 	bl	80067b8 <_Z20OD_CAN2_RxErrCnt_getv>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	461a      	mov	r2, r3
 8005b52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b56:	4611      	mov	r1, r2
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f001 fbc1 	bl	80072e0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 8005b5e:	e1d1      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8005b66:	f000 fe43 	bl	80067f0 <_Z25OD_CAN2_lastErrorCode_getv>
 8005b6a:	4602      	mov	r2, r0
 8005b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b70:	4611      	mov	r1, r2
 8005b72:	4618      	mov	r0, r3
 8005b74:	f001 fbc9 	bl	800730a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005b78:	e1c4      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN2_autoErrorReset>();
 8005b7a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 fdc5 	bl	800770e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8005b8a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 fe66 	bl	8006860 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8005b9a:	f000 fe45 	bl	8006828 <_Z26OD_CAN2_autoErrorReset_getv>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f001 fbc2 	bl	8007332 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8005bae:	e1a9      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN2_Baudrate>();
 8005bb0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 fdbc 	bl	8007732 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 8005bc0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005bc4:	2b7c      	cmp	r3, #124	; 0x7c
 8005bc6:	d904      	bls.n	8005bd2 <_Z22handleSDORequestUploadRK9RxMessage+0x766>
 8005bc8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005bcc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005bd0:	d903      	bls.n	8005bda <_Z22handleSDORequestUploadRK9RxMessage+0x76e>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005bd2:	2305      	movs	r3, #5
 8005bd4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005bd8:	e007      	b.n	8005bea <_Z22handleSDORequestUploadRK9RxMessage+0x77e>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 8005bda:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 fe76 	bl	80068d0 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8005bea:	f000 fe55 	bl	8006898 <_Z20OD_CAN2_Baudrate_getv>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 fbaf 	bl	800735c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 8005bfe:	e181      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c00:	2303      	movs	r3, #3
 8005c02:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Status>(OD_CAN2_Status_get());
 8005c06:	f000 fe7f 	bl	8006908 <_Z18OD_CAN2_Status_getv>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c12:	4611      	mov	r1, r2
 8005c14:	4618      	mov	r0, r3
 8005c16:	f001 fbb6 	bl	8007386 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 8005c1a:	e173      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8005c22:	f000 fe8d 	bl	8006940 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8005c26:	4602      	mov	r2, r0
 8005c28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f001 fbbe 	bl	80073b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005c34:	e166      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8005c3c:	f000 fe9c 	bl	8006978 <_Z23OD_CAN2_ErrorStatus_getv>
 8005c40:	4603      	mov	r3, r0
 8005c42:	461a      	mov	r2, r3
 8005c44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c48:	4611      	mov	r1, r2
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f001 fbc4 	bl	80073d8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8005c50:	e158      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8005c58:	f000 feaa 	bl	80069b0 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f001 fbcc 	bl	8007402 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005c6a:	e14b      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x800: {   // OD_samplingInterval
            float value = msgSdoReq.get<can::signals::SensorF_OD_samplingInterval>();
 8005c6c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 fd70 	bl	8007756 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals27SensorF_OD_samplingIntervalEEENT_8dataTypeEv>
 8005c76:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
if (value < 0.01f || value > 100.0f) {
 8005c7a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005c7e:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8005f3c <_Z22handleSDORequestUploadRK9RxMessage+0xad0>
 8005c82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c8a:	d408      	bmi.n	8005c9e <_Z22handleSDORequestUploadRK9RxMessage+0x832>
 8005c8c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005c90:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8005f40 <_Z22handleSDORequestUploadRK9RxMessage+0xad4>
 8005c94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9c:	dd03      	ble.n	8005ca6 <_Z22handleSDORequestUploadRK9RxMessage+0x83a>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005c9e:	2305      	movs	r3, #5
 8005ca0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005ca4:	e006      	b.n	8005cb4 <_Z22handleSDORequestUploadRK9RxMessage+0x848>
            }
            else {
                OD_samplingInterval_set(value);
 8005ca6:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8005caa:	f000 febb 	bl	8006a24 <_Z23OD_samplingInterval_setf>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_samplingInterval>(OD_samplingInterval_get());
 8005cb4:	f000 fe98 	bl	80069e8 <_Z23OD_samplingInterval_getv>
 8005cb8:	eef0 7a40 	vmov.f32	s15, s0
 8005cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fbb0 	bl	800742a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>
            break;
 8005cca:	e11b      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x900: {   // OD_TelemetryCommands
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_TelemetryCommands>();
 8005ccc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f001 fd54 	bl	800777e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_TelemetryCommandsEEENT_8dataTypeEv>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                OD_TelemetryCommands_set(value);
 8005cdc:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f000 fed7 	bl	8006a94 <_Z24OD_TelemetryCommands_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_TelemetryCommands>(OD_TelemetryCommands_get());
 8005cec:	f000 feb6 	bl	8006a5c <_Z24OD_TelemetryCommands_getv>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f001 fbac 	bl	8007458 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>
            break;
 8005d00:	e100      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x901: {   // OD_StateMachineInterval
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_StateMachineInterval>();
 8005d02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d06:	4618      	mov	r0, r3
 8005d08:	f001 fd4b 	bl	80077a2 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineIntervalEEENT_8dataTypeEv>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
if (value < 5 || value > 100) {
 8005d12:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d903      	bls.n	8005d22 <_Z22handleSDORequestUploadRK9RxMessage+0x8b6>
 8005d1a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005d1e:	2b64      	cmp	r3, #100	; 0x64
 8005d20:	d903      	bls.n	8005d2a <_Z22handleSDORequestUploadRK9RxMessage+0x8be>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005d22:	2305      	movs	r3, #5
 8005d24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005d28:	e007      	b.n	8005d3a <_Z22handleSDORequestUploadRK9RxMessage+0x8ce>
            }
            else {
                OD_StateMachineInterval_set(value);
 8005d2a:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fee8 	bl	8006b04 <_Z27OD_StateMachineInterval_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d34:	2300      	movs	r3, #0
 8005d36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineInterval>(OD_StateMachineInterval_get());
 8005d3a:	f000 fec7 	bl	8006acc <_Z27OD_StateMachineInterval_getv>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	461a      	mov	r2, r3
 8005d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d46:	4611      	mov	r1, r2
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f001 fb9a 	bl	8007482 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>
            break;
 8005d4e:	e0d9      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x902: {   // OD_StateMachineActivate
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_StateMachineActivate>();
 8005d50:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d54:	4618      	mov	r0, r3
 8005d56:	f001 fd36 	bl	80077c6 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineActivateEEENT_8dataTypeEv>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                OD_StateMachineActivate_set(value);
 8005d60:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 ff05 	bl	8006b74 <_Z27OD_StateMachineActivate_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineActivate>(OD_StateMachineActivate_get());
 8005d70:	f000 fee4 	bl	8006b3c <_Z27OD_StateMachineActivate_getv>
 8005d74:	4603      	mov	r3, r0
 8005d76:	461a      	mov	r2, r3
 8005d78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d7c:	4611      	mov	r1, r2
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 fb94 	bl	80074ac <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>
            break;
 8005d84:	e0be      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x903: {   // OD_HVBatteryMode
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_HVBatteryMode>();
 8005d86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 fd2d 	bl	80077ea <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_HVBatteryModeEEENT_8dataTypeEv>
 8005d90:	4603      	mov	r3, r0
 8005d92:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                OD_HVBatteryMode_set(value);
 8005d96:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 ff22 	bl	8006be4 <_Z20OD_HVBatteryMode_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005da0:	2300      	movs	r3, #0
 8005da2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_HVBatteryMode>(OD_HVBatteryMode_get());
 8005da6:	f000 ff01 	bl	8006bac <_Z20OD_HVBatteryMode_getv>
 8005daa:	4603      	mov	r3, r0
 8005dac:	461a      	mov	r2, r3
 8005dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005db2:	4611      	mov	r1, r2
 8005db4:	4618      	mov	r0, r3
 8005db6:	f001 fb8e 	bl	80074d6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>
            break;
 8005dba:	e0a3      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x904: {   // OD_EncoderWheelDiameter
            float value = msgSdoReq.get<can::signals::SensorF_OD_EncoderWheelDiameter>();
 8005dbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f001 fd24 	bl	800780e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderWheelDiameterEEENT_8dataTypeEv>
 8005dc6:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
if (value < 1.0f || value > 300.0f) {
 8005dca:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005dce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dda:	d408      	bmi.n	8005dee <_Z22handleSDORequestUploadRK9RxMessage+0x982>
 8005ddc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005de0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005f44 <_Z22handleSDORequestUploadRK9RxMessage+0xad8>
 8005de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dec:	dd03      	ble.n	8005df6 <_Z22handleSDORequestUploadRK9RxMessage+0x98a>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005dee:	2305      	movs	r3, #5
 8005df0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005df4:	e006      	b.n	8005e04 <_Z22handleSDORequestUploadRK9RxMessage+0x998>
            }
            else {
                OD_EncoderWheelDiameter_set(value);
 8005df6:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8005dfa:	f000 ff2d 	bl	8006c58 <_Z27OD_EncoderWheelDiameter_setf>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_EncoderWheelDiameter>(OD_EncoderWheelDiameter_get());
 8005e04:	f000 ff0a 	bl	8006c1c <_Z27OD_EncoderWheelDiameter_getv>
 8005e08:	eef0 7a40 	vmov.f32	s15, s0
 8005e0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e10:	eeb0 0a67 	vmov.f32	s0, s15
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 fb73 	bl	8007500 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>
            break;
 8005e1a:	e073      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x905: {   // OD_EncoderResetPosition
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_EncoderResetPosition>();
 8005e1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e20:	4618      	mov	r0, r3
 8005e22:	f001 fd08 	bl	8007836 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderResetPositionEEENT_8dataTypeEv>
 8005e26:	4603      	mov	r3, r0
 8005e28:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
                OD_EncoderResetPosition_set(value);
 8005e2c:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8005e30:	4618      	mov	r0, r3
 8005e32:	f000 ff2d 	bl	8006c90 <_Z27OD_EncoderResetPosition_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x905);
 8005e3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e40:	f640 1105 	movw	r1, #2309	; 0x905
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 fb72 	bl	800752e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005e4a:	e05b      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0x910: {   // OD_SetReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_SetReset>();
 8005e4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fd02 	bl	800785a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals19SensorF_OD_SetResetEEENT_8dataTypeEv>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                OD_SetReset_set(value);
 8005e5c:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 ff31 	bl	8006cc8 <_Z15OD_SetReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x910);
 8005e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e70:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8005e74:	4618      	mov	r0, r3
 8005e76:	f001 fb5a 	bl	800752e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005e7a:	e043      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0xA20: {   // OD_IMU_number
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_number>(OD_IMU_number_get());
 8005e82:	f000 ff3d 	bl	8006d00 <_Z17OD_IMU_number_getv>
 8005e86:	4603      	mov	r3, r0
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f001 fb61 	bl	8007558 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>
            break;
 8005e96:	e035      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0xA25: {   // OD_IMU1_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8005e9e:	f000 ff4b 	bl	8006d38 <_Z23OD_IMU1_Temperature_getv>
 8005ea2:	eef0 7a40 	vmov.f32	s15, s0
 8005ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f001 fb67 	bl	8007582 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            break;
 8005eb4:	e026      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0xA26: {   // OD_IMU2_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8005ebc:	f000 ff5a 	bl	8006d74 <_Z23OD_IMU2_Temperature_getv>
 8005ec0:	eef0 7a40 	vmov.f32	s15, s0
 8005ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f001 fb6f 	bl	80075b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            break;
 8005ed2:	e017      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        case 0xA27: {   // OD_IMU3_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 8005eda:	f000 ff69 	bl	8006db0 <_Z23OD_IMU3_Temperature_getv>
 8005ede:	eef0 7a40 	vmov.f32	s15, s0
 8005ee2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8005eea:	4618      	mov	r0, r3
 8005eec:	f001 fb77 	bl	80075de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            break;
 8005ef0:	e008      	b.n	8005f04 <_Z22handleSDORequestUploadRK9RxMessage+0xa98>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(sdoId);
 8005ef2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8005ef6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005efa:	4611      	mov	r1, r2
 8005efc:	4618      	mov	r0, r3
 8005efe:	f001 fb16 	bl	800752e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005f02:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SensorF_SDO_RespCode>(respCode);
 8005f04:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8005f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 fb7c 	bl	800760c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8005f14:	f107 0308 	add.w	r3, r7, #8
 8005f18:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	4618      	mov	r0, r3
 8005f20:	f7fb f968 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8005f24:	4b08      	ldr	r3, [pc, #32]	; (8005f48 <_Z22handleSDORequestUploadRK9RxMessage+0xadc>)
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	f107 0108 	add.w	r1, r7, #8
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f011 fc66 	bl	8017800 <osMessageQueuePut>
}
 8005f34:	bf00      	nop
 8005f36:	3780      	adds	r7, #128	; 0x80
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	3c23d70a 	.word	0x3c23d70a
 8005f40:	42c80000 	.word	0x42c80000
 8005f44:	43960000 	.word	0x43960000
 8005f48:	200007b4 	.word	0x200007b4

08005f4c <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 8005f52:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <_Z13OD_NodeID_getv+0x30>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f04f 31ff 	mov.w	r1, #4294967295
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f011 fa15 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_NodeID;
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <_Z13OD_NodeID_getv+0x34>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8005f66:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <_Z13OD_NodeID_getv+0x30>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f011 fa58 	bl	8017420 <osMutexRelease>
    return value;
 8005f70:	79fb      	ldrb	r3, [r7, #7]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000944 	.word	0x20000944
 8005f80:	200008c8 	.word	0x200008c8

08005f84 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 8005f8a:	4b0a      	ldr	r3, [pc, #40]	; (8005fb4 <_Z17OD_NodeStatus_getv+0x30>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f92:	4618      	mov	r0, r3
 8005f94:	f011 f9f9 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 8005f98:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <_Z17OD_NodeStatus_getv+0x34>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 8005f9e:	4b05      	ldr	r3, [pc, #20]	; (8005fb4 <_Z17OD_NodeStatus_getv+0x30>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f011 fa3c 	bl	8017420 <osMutexRelease>
    return value;
 8005fa8:	79fb      	ldrb	r3, [r7, #7]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000948 	.word	0x20000948
 8005fb8:	200008c9 	.word	0x200008c9

08005fbc <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8005fc2:	4b0a      	ldr	r3, [pc, #40]	; (8005fec <_Z22OD_ProtocolVersion_getv+0x30>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f011 f9dd 	bl	801738a <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8005fd0:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <_Z22OD_ProtocolVersion_getv+0x34>)
 8005fd2:	881b      	ldrh	r3, [r3, #0]
 8005fd4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 8005fd6:	4b05      	ldr	r3, [pc, #20]	; (8005fec <_Z22OD_ProtocolVersion_getv+0x30>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f011 fa20 	bl	8017420 <osMutexRelease>
    return value;
 8005fe0:	88fb      	ldrh	r3, [r7, #6]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	2000094c 	.word	0x2000094c
 8005ff0:	20000000 	.word	0x20000000

08005ff4 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <_Z19OD_StackVersion_getv+0x30>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f04f 31ff 	mov.w	r1, #4294967295
 8006002:	4618      	mov	r0, r3
 8006004:	f011 f9c1 	bl	801738a <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8006008:	4b07      	ldr	r3, [pc, #28]	; (8006028 <_Z19OD_StackVersion_getv+0x34>)
 800600a:	881b      	ldrh	r3, [r3, #0]
 800600c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 800600e:	4b05      	ldr	r3, [pc, #20]	; (8006024 <_Z19OD_StackVersion_getv+0x30>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f011 fa04 	bl	8017420 <osMutexRelease>
    return value;
 8006018:	88fb      	ldrh	r3, [r7, #6]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3708      	adds	r7, #8
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000950 	.word	0x20000950
 8006028:	200008ca 	.word	0x200008ca

0800602c <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 8006032:	4b0a      	ldr	r3, [pc, #40]	; (800605c <_Z17OD_DbcVersion_getv+0x30>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f04f 31ff 	mov.w	r1, #4294967295
 800603a:	4618      	mov	r0, r3
 800603c:	f011 f9a5 	bl	801738a <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8006040:	4b07      	ldr	r3, [pc, #28]	; (8006060 <_Z17OD_DbcVersion_getv+0x34>)
 8006042:	881b      	ldrh	r3, [r3, #0]
 8006044:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 8006046:	4b05      	ldr	r3, [pc, #20]	; (800605c <_Z17OD_DbcVersion_getv+0x30>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4618      	mov	r0, r3
 800604c:	f011 f9e8 	bl	8017420 <osMutexRelease>
    return value;
 8006050:	88fb      	ldrh	r3, [r7, #6]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	20000954 	.word	0x20000954
 8006060:	200008cc 	.word	0x200008cc

08006064 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 800606a:	4b0a      	ldr	r3, [pc, #40]	; (8006094 <_Z24OD_HeartbeatInterval_getv+0x30>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f04f 31ff 	mov.w	r1, #4294967295
 8006072:	4618      	mov	r0, r3
 8006074:	f011 f989 	bl	801738a <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8006078:	4b07      	ldr	r3, [pc, #28]	; (8006098 <_Z24OD_HeartbeatInterval_getv+0x34>)
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 800607e:	4b05      	ldr	r3, [pc, #20]	; (8006094 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f011 f9cc 	bl	8017420 <osMutexRelease>
    return value;
 8006088:	88fb      	ldrh	r3, [r7, #6]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3708      	adds	r7, #8
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000958 	.word	0x20000958
 8006098:	20000002 	.word	0x20000002

0800609c <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <_Z24OD_HeartbeatInterval_sett+0x30>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f04f 31ff 	mov.w	r1, #4294967295
 80060ae:	4618      	mov	r0, r3
 80060b0:	f011 f96b 	bl	801738a <osMutexAcquire>
    OD_HeartbeatInterval = value;
 80060b4:	4a06      	ldr	r2, [pc, #24]	; (80060d0 <_Z24OD_HeartbeatInterval_sett+0x34>)
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 80060ba:	4b04      	ldr	r3, [pc, #16]	; (80060cc <_Z24OD_HeartbeatInterval_sett+0x30>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4618      	mov	r0, r3
 80060c0:	f011 f9ae 	bl	8017420 <osMutexRelease>
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	20000958 	.word	0x20000958
 80060d0:	20000002 	.word	0x20000002

080060d4 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <_Z21OD_SendOdOnBootup_getv+0x30>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f04f 31ff 	mov.w	r1, #4294967295
 80060e2:	4618      	mov	r0, r3
 80060e4:	f011 f951 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 80060e8:	4b07      	ldr	r3, [pc, #28]	; (8006108 <_Z21OD_SendOdOnBootup_getv+0x34>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <_Z21OD_SendOdOnBootup_getv+0x30>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f011 f994 	bl	8017420 <osMutexRelease>
    return value;
 80060f8:	79fb      	ldrb	r3, [r7, #7]
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	2000095c 	.word	0x2000095c
 8006108:	200008ce 	.word	0x200008ce

0800610c <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	4603      	mov	r3, r0
 8006114:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8006116:	4b09      	ldr	r3, [pc, #36]	; (800613c <_Z21OD_SendOdOnBootup_seth+0x30>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f04f 31ff 	mov.w	r1, #4294967295
 800611e:	4618      	mov	r0, r3
 8006120:	f011 f933 	bl	801738a <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8006124:	4a06      	ldr	r2, [pc, #24]	; (8006140 <_Z21OD_SendOdOnBootup_seth+0x34>)
 8006126:	79fb      	ldrb	r3, [r7, #7]
 8006128:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 800612a:	4b04      	ldr	r3, [pc, #16]	; (800613c <_Z21OD_SendOdOnBootup_seth+0x30>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f011 f976 	bl	8017420 <osMutexRelease>
}
 8006134:	bf00      	nop
 8006136:	3708      	adds	r7, #8
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	2000095c 	.word	0x2000095c
 8006140:	200008ce 	.word	0x200008ce

08006144 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 800614a:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f04f 31ff 	mov.w	r1, #4294967295
 8006152:	4618      	mov	r0, r3
 8006154:	f011 f919 	bl	801738a <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8006158:	4b07      	ldr	r3, [pc, #28]	; (8006178 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 800615a:	881b      	ldrh	r3, [r3, #0]
 800615c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 800615e:	4b05      	ldr	r3, [pc, #20]	; (8006174 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f011 f95c 	bl	8017420 <osMutexRelease>
    return value;
 8006168:	88fb      	ldrh	r3, [r7, #6]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3708      	adds	r7, #8
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000960 	.word	0x20000960
 8006178:	20000004 	.word	0x20000004

0800617c <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	4603      	mov	r3, r0
 8006184:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8006186:	4b09      	ldr	r3, [pc, #36]	; (80061ac <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f04f 31ff 	mov.w	r1, #4294967295
 800618e:	4618      	mov	r0, r3
 8006190:	f011 f8fb 	bl	801738a <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8006194:	4a06      	ldr	r2, [pc, #24]	; (80061b0 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8006196:	88fb      	ldrh	r3, [r7, #6]
 8006198:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 800619a:	4b04      	ldr	r3, [pc, #16]	; (80061ac <_Z26OD_OdEntrySendInterval_sett+0x30>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4618      	mov	r0, r3
 80061a0:	f011 f93e 	bl	8017420 <osMutexRelease>
}
 80061a4:	bf00      	nop
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	20000960 	.word	0x20000960
 80061b0:	20000004 	.word	0x20000004

080061b4 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 80061ba:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <_Z15OD_CpuUsage_getv+0x34>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f04f 31ff 	mov.w	r1, #4294967295
 80061c2:	4618      	mov	r0, r3
 80061c4:	f011 f8e1 	bl	801738a <osMutexAcquire>
    float value = OD_CpuUsage;
 80061c8:	4b08      	ldr	r3, [pc, #32]	; (80061ec <_Z15OD_CpuUsage_getv+0x38>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 80061ce:	4b06      	ldr	r3, [pc, #24]	; (80061e8 <_Z15OD_CpuUsage_getv+0x34>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f011 f924 	bl	8017420 <osMutexRelease>
    return value;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	ee07 3a90 	vmov	s15, r3
}
 80061de:	eeb0 0a67 	vmov.f32	s0, s15
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	20000964 	.word	0x20000964
 80061ec:	200008d0 	.word	0x200008d0

080061f0 <_Z15OD_CpuUsage_setf>:
#endif
#ifndef OD_CpuUsage_SET_OVERWRITE
void WEAK_SYMBOL OD_CpuUsage_set(const float value) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <_Z15OD_CpuUsage_setf+0x30>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f04f 31ff 	mov.w	r1, #4294967295
 8006202:	4618      	mov	r0, r3
 8006204:	f011 f8c1 	bl	801738a <osMutexAcquire>
    OD_CpuUsage = value;
 8006208:	4a06      	ldr	r2, [pc, #24]	; (8006224 <_Z15OD_CpuUsage_setf+0x34>)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CpuUsage);
 800620e:	4b04      	ldr	r3, [pc, #16]	; (8006220 <_Z15OD_CpuUsage_setf+0x30>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f011 f904 	bl	8017420 <osMutexRelease>
}
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20000964 	.word	0x20000964
 8006224:	200008d0 	.word	0x200008d0

08006228 <_Z14OD_MemFree_getv>:
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8006228:	b580      	push	{r7, lr}
 800622a:	b082      	sub	sp, #8
 800622c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 800622e:	4b0a      	ldr	r3, [pc, #40]	; (8006258 <_Z14OD_MemFree_getv+0x30>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f04f 31ff 	mov.w	r1, #4294967295
 8006236:	4618      	mov	r0, r3
 8006238:	f011 f8a7 	bl	801738a <osMutexAcquire>
    uint32_t value = OD_MemFree;
 800623c:	4b07      	ldr	r3, [pc, #28]	; (800625c <_Z14OD_MemFree_getv+0x34>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8006242:	4b05      	ldr	r3, [pc, #20]	; (8006258 <_Z14OD_MemFree_getv+0x30>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f011 f8ea 	bl	8017420 <osMutexRelease>
    return value;
 800624c:	687b      	ldr	r3, [r7, #4]
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	20000968 	.word	0x20000968
 800625c:	200008d4 	.word	0x200008d4

08006260 <_Z14OD_MemFree_setm>:
#endif
#ifndef OD_MemFree_SET_OVERWRITE
void WEAK_SYMBOL OD_MemFree_set(const uint32_t value) {
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8006268:	4b09      	ldr	r3, [pc, #36]	; (8006290 <_Z14OD_MemFree_setm+0x30>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f04f 31ff 	mov.w	r1, #4294967295
 8006270:	4618      	mov	r0, r3
 8006272:	f011 f88a 	bl	801738a <osMutexAcquire>
    OD_MemFree = value;
 8006276:	4a07      	ldr	r2, [pc, #28]	; (8006294 <_Z14OD_MemFree_setm+0x34>)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_MemFree);
 800627c:	4b04      	ldr	r3, [pc, #16]	; (8006290 <_Z14OD_MemFree_setm+0x30>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f011 f8cd 	bl	8017420 <osMutexRelease>
}
 8006286:	bf00      	nop
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	20000968 	.word	0x20000968
 8006294:	200008d4 	.word	0x200008d4

08006298 <_Z16OD_BoardTemp_getv>:
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 800629e:	4b0b      	ldr	r3, [pc, #44]	; (80062cc <_Z16OD_BoardTemp_getv+0x34>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f04f 31ff 	mov.w	r1, #4294967295
 80062a6:	4618      	mov	r0, r3
 80062a8:	f011 f86f 	bl	801738a <osMutexAcquire>
    float value = OD_BoardTemp;
 80062ac:	4b08      	ldr	r3, [pc, #32]	; (80062d0 <_Z16OD_BoardTemp_getv+0x38>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <_Z16OD_BoardTemp_getv+0x34>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f011 f8b2 	bl	8017420 <osMutexRelease>
    return value;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	ee07 3a90 	vmov	s15, r3
}
 80062c2:	eeb0 0a67 	vmov.f32	s0, s15
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	2000096c 	.word	0x2000096c
 80062d0:	200008d8 	.word	0x200008d8

080062d4 <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 80062de:	4b09      	ldr	r3, [pc, #36]	; (8006304 <_Z16OD_BoardTemp_setf+0x30>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f04f 31ff 	mov.w	r1, #4294967295
 80062e6:	4618      	mov	r0, r3
 80062e8:	f011 f84f 	bl	801738a <osMutexAcquire>
    OD_BoardTemp = value;
 80062ec:	4a06      	ldr	r2, [pc, #24]	; (8006308 <_Z16OD_BoardTemp_setf+0x34>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 80062f2:	4b04      	ldr	r3, [pc, #16]	; (8006304 <_Z16OD_BoardTemp_setf+0x30>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f011 f892 	bl	8017420 <osMutexRelease>
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	2000096c 	.word	0x2000096c
 8006308:	200008d8 	.word	0x200008d8

0800630c <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <_Z19OD_InputVoltage_getv+0x34>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f04f 31ff 	mov.w	r1, #4294967295
 800631a:	4618      	mov	r0, r3
 800631c:	f011 f835 	bl	801738a <osMutexAcquire>
    float value = OD_InputVoltage;
 8006320:	4b08      	ldr	r3, [pc, #32]	; (8006344 <_Z19OD_InputVoltage_getv+0x38>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8006326:	4b06      	ldr	r3, [pc, #24]	; (8006340 <_Z19OD_InputVoltage_getv+0x34>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f011 f878 	bl	8017420 <osMutexRelease>
    return value;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	ee07 3a90 	vmov	s15, r3
}
 8006336:	eeb0 0a67 	vmov.f32	s0, s15
 800633a:	3708      	adds	r7, #8
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}
 8006340:	20000970 	.word	0x20000970
 8006344:	200008dc 	.word	0x200008dc

08006348 <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <_Z19OD_InputVoltage_setf+0x30>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f04f 31ff 	mov.w	r1, #4294967295
 800635a:	4618      	mov	r0, r3
 800635c:	f011 f815 	bl	801738a <osMutexAcquire>
    OD_InputVoltage = value;
 8006360:	4a06      	ldr	r2, [pc, #24]	; (800637c <_Z19OD_InputVoltage_setf+0x34>)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 8006366:	4b04      	ldr	r3, [pc, #16]	; (8006378 <_Z19OD_InputVoltage_setf+0x30>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4618      	mov	r0, r3
 800636c:	f011 f858 	bl	8017420 <osMutexRelease>
}
 8006370:	bf00      	nop
 8006372:	3708      	adds	r7, #8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	20000970 	.word	0x20000970
 800637c:	200008dc 	.word	0x200008dc

08006380 <_Z14OD_runtime_getv>:
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <_Z14OD_runtime_getv+0x30>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f04f 31ff 	mov.w	r1, #4294967295
 800638e:	4618      	mov	r0, r3
 8006390:	f010 fffb 	bl	801738a <osMutexAcquire>
    uint32_t value = OD_runtime;
 8006394:	4b07      	ldr	r3, [pc, #28]	; (80063b4 <_Z14OD_runtime_getv+0x34>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 800639a:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <_Z14OD_runtime_getv+0x30>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f011 f83e 	bl	8017420 <osMutexRelease>
    return value;
 80063a4:	687b      	ldr	r3, [r7, #4]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3708      	adds	r7, #8
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	20000974 	.word	0x20000974
 80063b4:	200008e0 	.word	0x200008e0

080063b8 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 80063be:	4b0a      	ldr	r3, [pc, #40]	; (80063e8 <_Z12OD_SdcIn_getv+0x30>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f04f 31ff 	mov.w	r1, #4294967295
 80063c6:	4618      	mov	r0, r3
 80063c8:	f010 ffdf 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 80063cc:	4b07      	ldr	r3, [pc, #28]	; (80063ec <_Z12OD_SdcIn_getv+0x34>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <_Z12OD_SdcIn_getv+0x30>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f011 f822 	bl	8017420 <osMutexRelease>
    return value;
 80063dc:	79fb      	ldrb	r3, [r7, #7]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3708      	adds	r7, #8
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000978 	.word	0x20000978
 80063ec:	200008e4 	.word	0x200008e4

080063f0 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b082      	sub	sp, #8
 80063f4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 80063f6:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <_Z13OD_SdcOut_getv+0x30>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f04f 31ff 	mov.w	r1, #4294967295
 80063fe:	4618      	mov	r0, r3
 8006400:	f010 ffc3 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8006404:	4b07      	ldr	r3, [pc, #28]	; (8006424 <_Z13OD_SdcOut_getv+0x34>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <_Z13OD_SdcOut_getv+0x30>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f011 f806 	bl	8017420 <osMutexRelease>
    return value;
 8006414:	79fb      	ldrb	r3, [r7, #7]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	2000097c 	.word	0x2000097c
 8006424:	200008e5 	.word	0x200008e5

08006428 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 800642e:	4b0c      	ldr	r3, [pc, #48]	; (8006460 <_Z15OD_ChipUID1_getv+0x38>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f04f 31ff 	mov.w	r1, #4294967295
 8006436:	4618      	mov	r0, r3
 8006438:	f010 ffa7 	bl	801738a <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 800643c:	4b09      	ldr	r3, [pc, #36]	; (8006464 <_Z15OD_ChipUID1_getv+0x3c>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <_Z15OD_ChipUID1_getv+0x38>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4618      	mov	r0, r3
 800644c:	f010 ffe8 	bl	8017420 <osMutexRelease>
    return value;
 8006450:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006454:	4610      	mov	r0, r2
 8006456:	4619      	mov	r1, r3
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop
 8006460:	20000980 	.word	0x20000980
 8006464:	200008e8 	.word	0x200008e8

08006468 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <_Z15OD_ChipUID2_getv+0x38>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f04f 31ff 	mov.w	r1, #4294967295
 8006476:	4618      	mov	r0, r3
 8006478:	f010 ff87 	bl	801738a <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 800647c:	4b09      	ldr	r3, [pc, #36]	; (80064a4 <_Z15OD_ChipUID2_getv+0x3c>)
 800647e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006482:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8006486:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <_Z15OD_ChipUID2_getv+0x38>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f010 ffc8 	bl	8017420 <osMutexRelease>
    return value;
 8006490:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006494:	4610      	mov	r0, r2
 8006496:	4619      	mov	r1, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000984 	.word	0x20000984
 80064a4:	200008f0 	.word	0x200008f0

080064a8 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 80064ae:	4b0a      	ldr	r3, [pc, #40]	; (80064d8 <_Z16OD_BuildDate_getv+0x30>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f04f 31ff 	mov.w	r1, #4294967295
 80064b6:	4618      	mov	r0, r3
 80064b8:	f010 ff67 	bl	801738a <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 80064bc:	4b07      	ldr	r3, [pc, #28]	; (80064dc <_Z16OD_BuildDate_getv+0x34>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 80064c2:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <_Z16OD_BuildDate_getv+0x30>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f010 ffaa 	bl	8017420 <osMutexRelease>
    return value;
 80064cc:	687b      	ldr	r3, [r7, #4]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000988 	.word	0x20000988
 80064dc:	200008f8 	.word	0x200008f8

080064e0 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 80064e6:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <_Z16OD_BuildTime_getv+0x30>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f04f 31ff 	mov.w	r1, #4294967295
 80064ee:	4618      	mov	r0, r3
 80064f0:	f010 ff4b 	bl	801738a <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 80064f4:	4b07      	ldr	r3, [pc, #28]	; (8006514 <_Z16OD_BuildTime_getv+0x34>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 80064fa:	4b05      	ldr	r3, [pc, #20]	; (8006510 <_Z16OD_BuildTime_getv+0x30>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4618      	mov	r0, r3
 8006500:	f010 ff8e 	bl	8017420 <osMutexRelease>
    return value;
 8006504:	687b      	ldr	r3, [r7, #4]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	2000098c 	.word	0x2000098c
 8006514:	200008fc 	.word	0x200008fc

08006518 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 8006518:	b580      	push	{r7, lr}
 800651a:	b082      	sub	sp, #8
 800651c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 800651e:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f04f 31ff 	mov.w	r1, #4294967295
 8006526:	4618      	mov	r0, r3
 8006528:	f010 ff2f 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 800652c:	4b07      	ldr	r3, [pc, #28]	; (800654c <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4618      	mov	r0, r3
 8006538:	f010 ff72 	bl	8017420 <osMutexRelease>
    return value;
 800653c:	79fb      	ldrb	r3, [r7, #7]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000990 	.word	0x20000990
 800654c:	20000900 	.word	0x20000900

08006550 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8006556:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f04f 31ff 	mov.w	r1, #4294967295
 800655e:	4618      	mov	r0, r3
 8006560:	f010 ff13 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8006564:	4b07      	ldr	r3, [pc, #28]	; (8006584 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 800656a:	4b05      	ldr	r3, [pc, #20]	; (8006580 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f010 ff56 	bl	8017420 <osMutexRelease>
    return value;
 8006574:	79fb      	ldrb	r3, [r7, #7]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000994 	.word	0x20000994
 8006584:	20000901 	.word	0x20000901

08006588 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 800658e:	4b0a      	ldr	r3, [pc, #40]	; (80065b8 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f04f 31ff 	mov.w	r1, #4294967295
 8006596:	4618      	mov	r0, r3
 8006598:	f010 fef7 	bl	801738a <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 800659c:	4b07      	ldr	r3, [pc, #28]	; (80065bc <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f010 ff3a 	bl	8017420 <osMutexRelease>
    return value;
 80065ac:	687b      	ldr	r3, [r7, #4]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000998 	.word	0x20000998
 80065bc:	20000904 	.word	0x20000904

080065c0 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 80065c6:	4b0a      	ldr	r3, [pc, #40]	; (80065f0 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f04f 31ff 	mov.w	r1, #4294967295
 80065ce:	4618      	mov	r0, r3
 80065d0:	f010 fedb 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 80065d4:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f010 ff1e 	bl	8017420 <osMutexRelease>
    return value;
 80065e4:	79fb      	ldrb	r3, [r7, #7]
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
 80065ee:	bf00      	nop
 80065f0:	2000099c 	.word	0x2000099c
 80065f4:	20000006 	.word	0x20000006

080065f8 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	4603      	mov	r3, r0
 8006600:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8006602:	4b09      	ldr	r3, [pc, #36]	; (8006628 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f04f 31ff 	mov.w	r1, #4294967295
 800660a:	4618      	mov	r0, r3
 800660c:	f010 febd 	bl	801738a <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 8006610:	4a06      	ldr	r2, [pc, #24]	; (800662c <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8006616:	4b04      	ldr	r3, [pc, #16]	; (8006628 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4618      	mov	r0, r3
 800661c:	f010 ff00 	bl	8017420 <osMutexRelease>
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	2000099c 	.word	0x2000099c
 800662c:	20000006 	.word	0x20000006

08006630 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8006636:	4b0a      	ldr	r3, [pc, #40]	; (8006660 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f04f 31ff 	mov.w	r1, #4294967295
 800663e:	4618      	mov	r0, r3
 8006640:	f010 fea3 	bl	801738a <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8006644:	4b07      	ldr	r3, [pc, #28]	; (8006664 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8006646:	881b      	ldrh	r3, [r3, #0]
 8006648:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 800664a:	4b05      	ldr	r3, [pc, #20]	; (8006660 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4618      	mov	r0, r3
 8006650:	f010 fee6 	bl	8017420 <osMutexRelease>
    return value;
 8006654:	88fb      	ldrh	r3, [r7, #6]
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	200009a0 	.word	0x200009a0
 8006664:	20000008 	.word	0x20000008

08006668 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f04f 31ff 	mov.w	r1, #4294967295
 800667a:	4618      	mov	r0, r3
 800667c:	f010 fe85 	bl	801738a <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8006680:	4a06      	ldr	r2, [pc, #24]	; (800669c <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8006682:	88fb      	ldrh	r3, [r7, #6]
 8006684:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8006686:	4b04      	ldr	r3, [pc, #16]	; (8006698 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f010 fec8 	bl	8017420 <osMutexRelease>
}
 8006690:	bf00      	nop
 8006692:	3708      	adds	r7, #8
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}
 8006698:	200009a0 	.word	0x200009a0
 800669c:	20000008 	.word	0x20000008

080066a0 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b082      	sub	sp, #8
 80066a4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <_Z18OD_CAN1_Status_getv+0x30>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f04f 31ff 	mov.w	r1, #4294967295
 80066ae:	4618      	mov	r0, r3
 80066b0:	f010 fe6b 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 80066b4:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <_Z18OD_CAN1_Status_getv+0x34>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <_Z18OD_CAN1_Status_getv+0x30>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f010 feae 	bl	8017420 <osMutexRelease>
    return value;
 80066c4:	79fb      	ldrb	r3, [r7, #7]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	200009a4 	.word	0x200009a4
 80066d4:	20000908 	.word	0x20000908

080066d8 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 80066de:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f04f 31ff 	mov.w	r1, #4294967295
 80066e6:	4618      	mov	r0, r3
 80066e8:	f010 fe4f 	bl	801738a <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 80066ec:	4b07      	ldr	r3, [pc, #28]	; (800670c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 80066f2:	4b05      	ldr	r3, [pc, #20]	; (8006708 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f010 fe92 	bl	8017420 <osMutexRelease>
    return value;
 80066fc:	687b      	ldr	r3, [r7, #4]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3708      	adds	r7, #8
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	200009a8 	.word	0x200009a8
 800670c:	2000090c 	.word	0x2000090c

08006710 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 8006716:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f04f 31ff 	mov.w	r1, #4294967295
 800671e:	4618      	mov	r0, r3
 8006720:	f010 fe33 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8006724:	4b07      	ldr	r3, [pc, #28]	; (8006744 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 800672a:	4b05      	ldr	r3, [pc, #20]	; (8006740 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4618      	mov	r0, r3
 8006730:	f010 fe76 	bl	8017420 <osMutexRelease>
    return value;
 8006734:	79fb      	ldrb	r3, [r7, #7]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3708      	adds	r7, #8
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	200009ac 	.word	0x200009ac
 8006744:	20000910 	.word	0x20000910

08006748 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 800674e:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f04f 31ff 	mov.w	r1, #4294967295
 8006756:	4618      	mov	r0, r3
 8006758:	f010 fe17 	bl	801738a <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 800675c:	4b07      	ldr	r3, [pc, #28]	; (800677c <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4618      	mov	r0, r3
 8006768:	f010 fe5a 	bl	8017420 <osMutexRelease>
    return value;
 800676c:	687b      	ldr	r3, [r7, #4]
}
 800676e:	4618      	mov	r0, r3
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	200009b0 	.word	0x200009b0
 800677c:	20000914 	.word	0x20000914

08006780 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8006786:	4b0a      	ldr	r3, [pc, #40]	; (80067b0 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f04f 31ff 	mov.w	r1, #4294967295
 800678e:	4618      	mov	r0, r3
 8006790:	f010 fdfb 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8006794:	4b07      	ldr	r3, [pc, #28]	; (80067b4 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f010 fe3e 	bl	8017420 <osMutexRelease>
    return value;
 80067a4:	79fb      	ldrb	r3, [r7, #7]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	200009b4 	.word	0x200009b4
 80067b4:	20000918 	.word	0x20000918

080067b8 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 80067be:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f04f 31ff 	mov.w	r1, #4294967295
 80067c6:	4618      	mov	r0, r3
 80067c8:	f010 fddf 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 80067cc:	4b07      	ldr	r3, [pc, #28]	; (80067ec <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 80067d2:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f010 fe22 	bl	8017420 <osMutexRelease>
    return value;
 80067dc:	79fb      	ldrb	r3, [r7, #7]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	200009b8 	.word	0x200009b8
 80067ec:	20000919 	.word	0x20000919

080067f0 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 80067f6:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f04f 31ff 	mov.w	r1, #4294967295
 80067fe:	4618      	mov	r0, r3
 8006800:	f010 fdc3 	bl	801738a <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8006804:	4b07      	ldr	r3, [pc, #28]	; (8006824 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 800680a:	4b05      	ldr	r3, [pc, #20]	; (8006820 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4618      	mov	r0, r3
 8006810:	f010 fe06 	bl	8017420 <osMutexRelease>
    return value;
 8006814:	687b      	ldr	r3, [r7, #4]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	200009bc 	.word	0x200009bc
 8006824:	2000091c 	.word	0x2000091c

08006828 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 800682e:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f04f 31ff 	mov.w	r1, #4294967295
 8006836:	4618      	mov	r0, r3
 8006838:	f010 fda7 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 800683c:	4b07      	ldr	r3, [pc, #28]	; (800685c <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8006842:	4b05      	ldr	r3, [pc, #20]	; (8006858 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f010 fdea 	bl	8017420 <osMutexRelease>
    return value;
 800684c:	79fb      	ldrb	r3, [r7, #7]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	200009c0 	.word	0x200009c0
 800685c:	2000000a 	.word	0x2000000a

08006860 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f04f 31ff 	mov.w	r1, #4294967295
 8006872:	4618      	mov	r0, r3
 8006874:	f010 fd89 	bl	801738a <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 8006878:	4a06      	ldr	r2, [pc, #24]	; (8006894 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 800687e:	4b04      	ldr	r3, [pc, #16]	; (8006890 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f010 fdcc 	bl	8017420 <osMutexRelease>
}
 8006888:	bf00      	nop
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	200009c0 	.word	0x200009c0
 8006894:	2000000a 	.word	0x2000000a

08006898 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 800689e:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f04f 31ff 	mov.w	r1, #4294967295
 80068a6:	4618      	mov	r0, r3
 80068a8:	f010 fd6f 	bl	801738a <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 80068ac:	4b07      	ldr	r3, [pc, #28]	; (80068cc <_Z20OD_CAN2_Baudrate_getv+0x34>)
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 80068b2:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4618      	mov	r0, r3
 80068b8:	f010 fdb2 	bl	8017420 <osMutexRelease>
    return value;
 80068bc:	88fb      	ldrh	r3, [r7, #6]
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	200009c4 	.word	0x200009c4
 80068cc:	2000000c 	.word	0x2000000c

080068d0 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 80068da:	4b09      	ldr	r3, [pc, #36]	; (8006900 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f04f 31ff 	mov.w	r1, #4294967295
 80068e2:	4618      	mov	r0, r3
 80068e4:	f010 fd51 	bl	801738a <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 80068e8:	4a06      	ldr	r2, [pc, #24]	; (8006904 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 80068ea:	88fb      	ldrh	r3, [r7, #6]
 80068ec:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 80068ee:	4b04      	ldr	r3, [pc, #16]	; (8006900 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4618      	mov	r0, r3
 80068f4:	f010 fd94 	bl	8017420 <osMutexRelease>
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	200009c4 	.word	0x200009c4
 8006904:	2000000c 	.word	0x2000000c

08006908 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 800690e:	4b0a      	ldr	r3, [pc, #40]	; (8006938 <_Z18OD_CAN2_Status_getv+0x30>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f04f 31ff 	mov.w	r1, #4294967295
 8006916:	4618      	mov	r0, r3
 8006918:	f010 fd37 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 800691c:	4b07      	ldr	r3, [pc, #28]	; (800693c <_Z18OD_CAN2_Status_getv+0x34>)
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8006922:	4b05      	ldr	r3, [pc, #20]	; (8006938 <_Z18OD_CAN2_Status_getv+0x30>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f010 fd7a 	bl	8017420 <osMutexRelease>
    return value;
 800692c:	79fb      	ldrb	r3, [r7, #7]
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	200009c8 	.word	0x200009c8
 800693c:	20000920 	.word	0x20000920

08006940 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 8006946:	4b0a      	ldr	r3, [pc, #40]	; (8006970 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f04f 31ff 	mov.w	r1, #4294967295
 800694e:	4618      	mov	r0, r3
 8006950:	f010 fd1b 	bl	801738a <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8006954:	4b07      	ldr	r3, [pc, #28]	; (8006974 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 800695a:	4b05      	ldr	r3, [pc, #20]	; (8006970 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4618      	mov	r0, r3
 8006960:	f010 fd5e 	bl	8017420 <osMutexRelease>
    return value;
 8006964:	687b      	ldr	r3, [r7, #4]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	200009cc 	.word	0x200009cc
 8006974:	20000924 	.word	0x20000924

08006978 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 800697e:	4b0a      	ldr	r3, [pc, #40]	; (80069a8 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f04f 31ff 	mov.w	r1, #4294967295
 8006986:	4618      	mov	r0, r3
 8006988:	f010 fcff 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 800698c:	4b07      	ldr	r3, [pc, #28]	; (80069ac <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 8006992:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	f010 fd42 	bl	8017420 <osMutexRelease>
    return value;
 800699c:	79fb      	ldrb	r3, [r7, #7]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	200009d0 	.word	0x200009d0
 80069ac:	20000928 	.word	0x20000928

080069b0 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f04f 31ff 	mov.w	r1, #4294967295
 80069be:	4618      	mov	r0, r3
 80069c0:	f010 fce3 	bl	801738a <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 80069c4:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 80069ca:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f010 fd26 	bl	8017420 <osMutexRelease>
    return value;
 80069d4:	687b      	ldr	r3, [r7, #4]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3708      	adds	r7, #8
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	200009d4 	.word	0x200009d4
 80069e4:	2000092c 	.word	0x2000092c

080069e8 <_Z23OD_samplingInterval_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_samplingInterval_GET_OVERWRITE
float WEAK_SYMBOL OD_samplingInterval_get() {
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_samplingInterval, portMAX_DELAY);
 80069ee:	4b0b      	ldr	r3, [pc, #44]	; (8006a1c <_Z23OD_samplingInterval_getv+0x34>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f04f 31ff 	mov.w	r1, #4294967295
 80069f6:	4618      	mov	r0, r3
 80069f8:	f010 fcc7 	bl	801738a <osMutexAcquire>
    float value = OD_samplingInterval;
 80069fc:	4b08      	ldr	r3, [pc, #32]	; (8006a20 <_Z23OD_samplingInterval_getv+0x38>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_samplingInterval);
 8006a02:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <_Z23OD_samplingInterval_getv+0x34>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f010 fd0a 	bl	8017420 <osMutexRelease>
    return value;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	ee07 3a90 	vmov	s15, r3
}
 8006a12:	eeb0 0a67 	vmov.f32	s0, s15
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	200009d8 	.word	0x200009d8
 8006a20:	20000010 	.word	0x20000010

08006a24 <_Z23OD_samplingInterval_setf>:
#endif
#ifndef OD_samplingInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_samplingInterval_set(const float value) {
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_samplingInterval, portMAX_DELAY);
 8006a2e:	4b09      	ldr	r3, [pc, #36]	; (8006a54 <_Z23OD_samplingInterval_setf+0x30>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f04f 31ff 	mov.w	r1, #4294967295
 8006a36:	4618      	mov	r0, r3
 8006a38:	f010 fca7 	bl	801738a <osMutexAcquire>
    OD_samplingInterval = value;
 8006a3c:	4a06      	ldr	r2, [pc, #24]	; (8006a58 <_Z23OD_samplingInterval_setf+0x34>)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_samplingInterval);
 8006a42:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <_Z23OD_samplingInterval_setf+0x30>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f010 fcea 	bl	8017420 <osMutexRelease>
}
 8006a4c:	bf00      	nop
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	200009d8 	.word	0x200009d8
 8006a58:	20000010 	.word	0x20000010

08006a5c <_Z24OD_TelemetryCommands_getv>:
#endif

#ifndef OD_TelemetryCommands_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_TelemetryCommands_get() {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_TelemetryCommands, portMAX_DELAY);
 8006a62:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <_Z24OD_TelemetryCommands_getv+0x30>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f04f 31ff 	mov.w	r1, #4294967295
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f010 fc8d 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_TelemetryCommands;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <_Z24OD_TelemetryCommands_getv+0x34>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_TelemetryCommands);
 8006a76:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <_Z24OD_TelemetryCommands_getv+0x30>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f010 fcd0 	bl	8017420 <osMutexRelease>
    return value;
 8006a80:	79fb      	ldrb	r3, [r7, #7]
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3708      	adds	r7, #8
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	200009dc 	.word	0x200009dc
 8006a90:	20000930 	.word	0x20000930

08006a94 <_Z24OD_TelemetryCommands_seth>:
#endif
#ifndef OD_TelemetryCommands_SET_OVERWRITE
void WEAK_SYMBOL OD_TelemetryCommands_set(const uint8_t value) {
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_TelemetryCommands, portMAX_DELAY);
 8006a9e:	4b09      	ldr	r3, [pc, #36]	; (8006ac4 <_Z24OD_TelemetryCommands_seth+0x30>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f04f 31ff 	mov.w	r1, #4294967295
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f010 fc6f 	bl	801738a <osMutexAcquire>
    OD_TelemetryCommands = value;
 8006aac:	4a06      	ldr	r2, [pc, #24]	; (8006ac8 <_Z24OD_TelemetryCommands_seth+0x34>)
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_TelemetryCommands);
 8006ab2:	4b04      	ldr	r3, [pc, #16]	; (8006ac4 <_Z24OD_TelemetryCommands_seth+0x30>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f010 fcb2 	bl	8017420 <osMutexRelease>
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	200009dc 	.word	0x200009dc
 8006ac8:	20000930 	.word	0x20000930

08006acc <_Z27OD_StateMachineInterval_getv>:
#endif

#ifndef OD_StateMachineInterval_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_StateMachineInterval_get() {
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b082      	sub	sp, #8
 8006ad0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StateMachineInterval, portMAX_DELAY);
 8006ad2:	4b0a      	ldr	r3, [pc, #40]	; (8006afc <_Z27OD_StateMachineInterval_getv+0x30>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f04f 31ff 	mov.w	r1, #4294967295
 8006ada:	4618      	mov	r0, r3
 8006adc:	f010 fc55 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_StateMachineInterval;
 8006ae0:	4b07      	ldr	r3, [pc, #28]	; (8006b00 <_Z27OD_StateMachineInterval_getv+0x34>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_StateMachineInterval);
 8006ae6:	4b05      	ldr	r3, [pc, #20]	; (8006afc <_Z27OD_StateMachineInterval_getv+0x30>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f010 fc98 	bl	8017420 <osMutexRelease>
    return value;
 8006af0:	79fb      	ldrb	r3, [r7, #7]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	200009e0 	.word	0x200009e0
 8006b00:	20000014 	.word	0x20000014

08006b04 <_Z27OD_StateMachineInterval_seth>:
#endif
#ifndef OD_StateMachineInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_StateMachineInterval_set(const uint8_t value) {
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_StateMachineInterval, portMAX_DELAY);
 8006b0e:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <_Z27OD_StateMachineInterval_seth+0x30>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f04f 31ff 	mov.w	r1, #4294967295
 8006b16:	4618      	mov	r0, r3
 8006b18:	f010 fc37 	bl	801738a <osMutexAcquire>
    OD_StateMachineInterval = value;
 8006b1c:	4a06      	ldr	r2, [pc, #24]	; (8006b38 <_Z27OD_StateMachineInterval_seth+0x34>)
 8006b1e:	79fb      	ldrb	r3, [r7, #7]
 8006b20:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_StateMachineInterval);
 8006b22:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <_Z27OD_StateMachineInterval_seth+0x30>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f010 fc7a 	bl	8017420 <osMutexRelease>
}
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	200009e0 	.word	0x200009e0
 8006b38:	20000014 	.word	0x20000014

08006b3c <_Z27OD_StateMachineActivate_getv>:
#endif

#ifndef OD_StateMachineActivate_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_StateMachineActivate_get() {
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StateMachineActivate, portMAX_DELAY);
 8006b42:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <_Z27OD_StateMachineActivate_getv+0x30>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f04f 31ff 	mov.w	r1, #4294967295
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f010 fc1d 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_StateMachineActivate;
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <_Z27OD_StateMachineActivate_getv+0x34>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_StateMachineActivate);
 8006b56:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <_Z27OD_StateMachineActivate_getv+0x30>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	f010 fc60 	bl	8017420 <osMutexRelease>
    return value;
 8006b60:	79fb      	ldrb	r3, [r7, #7]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3708      	adds	r7, #8
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200009e4 	.word	0x200009e4
 8006b70:	20000931 	.word	0x20000931

08006b74 <_Z27OD_StateMachineActivate_seth>:
#endif
#ifndef OD_StateMachineActivate_SET_OVERWRITE
void WEAK_SYMBOL OD_StateMachineActivate_set(const uint8_t value) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b082      	sub	sp, #8
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_StateMachineActivate, portMAX_DELAY);
 8006b7e:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <_Z27OD_StateMachineActivate_seth+0x30>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f04f 31ff 	mov.w	r1, #4294967295
 8006b86:	4618      	mov	r0, r3
 8006b88:	f010 fbff 	bl	801738a <osMutexAcquire>
    OD_StateMachineActivate = value;
 8006b8c:	4a06      	ldr	r2, [pc, #24]	; (8006ba8 <_Z27OD_StateMachineActivate_seth+0x34>)
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_StateMachineActivate);
 8006b92:	4b04      	ldr	r3, [pc, #16]	; (8006ba4 <_Z27OD_StateMachineActivate_seth+0x30>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f010 fc42 	bl	8017420 <osMutexRelease>
}
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	200009e4 	.word	0x200009e4
 8006ba8:	20000931 	.word	0x20000931

08006bac <_Z20OD_HVBatteryMode_getv>:
#endif

#ifndef OD_HVBatteryMode_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_HVBatteryMode_get() {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HVBatteryMode, portMAX_DELAY);
 8006bb2:	4b0a      	ldr	r3, [pc, #40]	; (8006bdc <_Z20OD_HVBatteryMode_getv+0x30>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f04f 31ff 	mov.w	r1, #4294967295
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f010 fbe5 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_HVBatteryMode;
 8006bc0:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <_Z20OD_HVBatteryMode_getv+0x34>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_HVBatteryMode);
 8006bc6:	4b05      	ldr	r3, [pc, #20]	; (8006bdc <_Z20OD_HVBatteryMode_getv+0x30>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f010 fc28 	bl	8017420 <osMutexRelease>
    return value;
 8006bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	200009e8 	.word	0x200009e8
 8006be0:	20000932 	.word	0x20000932

08006be4 <_Z20OD_HVBatteryMode_seth>:
#endif
#ifndef OD_HVBatteryMode_SET_OVERWRITE
void WEAK_SYMBOL OD_HVBatteryMode_set(const uint8_t value) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_HVBatteryMode, portMAX_DELAY);
 8006bee:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <_Z20OD_HVBatteryMode_seth+0x30>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f04f 31ff 	mov.w	r1, #4294967295
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f010 fbc7 	bl	801738a <osMutexAcquire>
    OD_HVBatteryMode = value;
 8006bfc:	4a06      	ldr	r2, [pc, #24]	; (8006c18 <_Z20OD_HVBatteryMode_seth+0x34>)
 8006bfe:	79fb      	ldrb	r3, [r7, #7]
 8006c00:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_HVBatteryMode);
 8006c02:	4b04      	ldr	r3, [pc, #16]	; (8006c14 <_Z20OD_HVBatteryMode_seth+0x30>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f010 fc0a 	bl	8017420 <osMutexRelease>
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	200009e8 	.word	0x200009e8
 8006c18:	20000932 	.word	0x20000932

08006c1c <_Z27OD_EncoderWheelDiameter_getv>:
#endif

#ifndef OD_EncoderWheelDiameter_GET_OVERWRITE
float WEAK_SYMBOL OD_EncoderWheelDiameter_get() {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_EncoderWheelDiameter, portMAX_DELAY);
 8006c22:	4b0b      	ldr	r3, [pc, #44]	; (8006c50 <_Z27OD_EncoderWheelDiameter_getv+0x34>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f04f 31ff 	mov.w	r1, #4294967295
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f010 fbad 	bl	801738a <osMutexAcquire>
    float value = OD_EncoderWheelDiameter;
 8006c30:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <_Z27OD_EncoderWheelDiameter_getv+0x38>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_EncoderWheelDiameter);
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <_Z27OD_EncoderWheelDiameter_getv+0x34>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f010 fbf0 	bl	8017420 <osMutexRelease>
    return value;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	ee07 3a90 	vmov	s15, r3
}
 8006c46:	eeb0 0a67 	vmov.f32	s0, s15
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	200009ec 	.word	0x200009ec
 8006c54:	20000018 	.word	0x20000018

08006c58 <_Z27OD_EncoderWheelDiameter_setf>:
#endif
#ifndef OD_EncoderWheelDiameter_SET_OVERWRITE
void WEAK_SYMBOL OD_EncoderWheelDiameter_set(const float value) {
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_EncoderWheelDiameter, portMAX_DELAY);
 8006c62:	4b09      	ldr	r3, [pc, #36]	; (8006c88 <_Z27OD_EncoderWheelDiameter_setf+0x30>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f04f 31ff 	mov.w	r1, #4294967295
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f010 fb8d 	bl	801738a <osMutexAcquire>
    OD_EncoderWheelDiameter = value;
 8006c70:	4a06      	ldr	r2, [pc, #24]	; (8006c8c <_Z27OD_EncoderWheelDiameter_setf+0x34>)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_EncoderWheelDiameter);
 8006c76:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <_Z27OD_EncoderWheelDiameter_setf+0x30>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f010 fbd0 	bl	8017420 <osMutexRelease>
}
 8006c80:	bf00      	nop
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	200009ec 	.word	0x200009ec
 8006c8c:	20000018 	.word	0x20000018

08006c90 <_Z27OD_EncoderResetPosition_seth>:
    osMutexRelease(mutex_OD_EncoderResetPosition);
    return value;
}
#endif
#ifndef OD_EncoderResetPosition_SET_OVERWRITE
void WEAK_SYMBOL OD_EncoderResetPosition_set(const uint8_t value) {
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_EncoderResetPosition, portMAX_DELAY);
 8006c9a:	4b09      	ldr	r3, [pc, #36]	; (8006cc0 <_Z27OD_EncoderResetPosition_seth+0x30>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f010 fb71 	bl	801738a <osMutexAcquire>
    OD_EncoderResetPosition = value;
 8006ca8:	4a06      	ldr	r2, [pc, #24]	; (8006cc4 <_Z27OD_EncoderResetPosition_seth+0x34>)
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_EncoderResetPosition);
 8006cae:	4b04      	ldr	r3, [pc, #16]	; (8006cc0 <_Z27OD_EncoderResetPosition_seth+0x30>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f010 fbb4 	bl	8017420 <osMutexRelease>
}
 8006cb8:	bf00      	nop
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	200009f0 	.word	0x200009f0
 8006cc4:	20000933 	.word	0x20000933

08006cc8 <_Z15OD_SetReset_seth>:
    osMutexRelease(mutex_OD_SetReset);
    return value;
}
#endif
#ifndef OD_SetReset_SET_OVERWRITE
void WEAK_SYMBOL OD_SetReset_set(const uint8_t value) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	4603      	mov	r3, r0
 8006cd0:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SetReset, portMAX_DELAY);
 8006cd2:	4b09      	ldr	r3, [pc, #36]	; (8006cf8 <_Z15OD_SetReset_seth+0x30>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f04f 31ff 	mov.w	r1, #4294967295
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f010 fb55 	bl	801738a <osMutexAcquire>
    OD_SetReset = value;
 8006ce0:	4a06      	ldr	r2, [pc, #24]	; (8006cfc <_Z15OD_SetReset_seth+0x34>)
 8006ce2:	79fb      	ldrb	r3, [r7, #7]
 8006ce4:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SetReset);
 8006ce6:	4b04      	ldr	r3, [pc, #16]	; (8006cf8 <_Z15OD_SetReset_seth+0x30>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f010 fb98 	bl	8017420 <osMutexRelease>
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	200009f4 	.word	0x200009f4
 8006cfc:	20000934 	.word	0x20000934

08006d00 <_Z17OD_IMU_number_getv>:
#endif

#ifndef OD_IMU_number_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_IMU_number_get() {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b082      	sub	sp, #8
 8006d04:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_number, portMAX_DELAY);
 8006d06:	4b0a      	ldr	r3, [pc, #40]	; (8006d30 <_Z17OD_IMU_number_getv+0x30>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f010 fb3b 	bl	801738a <osMutexAcquire>
    uint8_t value = OD_IMU_number;
 8006d14:	4b07      	ldr	r3, [pc, #28]	; (8006d34 <_Z17OD_IMU_number_getv+0x34>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_IMU_number);
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <_Z17OD_IMU_number_getv+0x30>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f010 fb7e 	bl	8017420 <osMutexRelease>
    return value;
 8006d24:	79fb      	ldrb	r3, [r7, #7]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3708      	adds	r7, #8
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	200009f8 	.word	0x200009f8
 8006d34:	20000935 	.word	0x20000935

08006d38 <_Z23OD_IMU1_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU_number);
}
#endif

#ifndef OD_IMU1_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU1_Temperature_get() {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU1_Temperature, portMAX_DELAY);
 8006d3e:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <_Z23OD_IMU1_Temperature_getv+0x34>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f04f 31ff 	mov.w	r1, #4294967295
 8006d46:	4618      	mov	r0, r3
 8006d48:	f010 fb1f 	bl	801738a <osMutexAcquire>
    float value = OD_IMU1_Temperature;
 8006d4c:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <_Z23OD_IMU1_Temperature_getv+0x38>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU1_Temperature);
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <_Z23OD_IMU1_Temperature_getv+0x34>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f010 fb62 	bl	8017420 <osMutexRelease>
    return value;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	ee07 3a90 	vmov	s15, r3
}
 8006d62:	eeb0 0a67 	vmov.f32	s0, s15
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	200009fc 	.word	0x200009fc
 8006d70:	20000938 	.word	0x20000938

08006d74 <_Z23OD_IMU2_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU1_Temperature);
}
#endif

#ifndef OD_IMU2_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU2_Temperature_get() {
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU2_Temperature, portMAX_DELAY);
 8006d7a:	4b0b      	ldr	r3, [pc, #44]	; (8006da8 <_Z23OD_IMU2_Temperature_getv+0x34>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8006d82:	4618      	mov	r0, r3
 8006d84:	f010 fb01 	bl	801738a <osMutexAcquire>
    float value = OD_IMU2_Temperature;
 8006d88:	4b08      	ldr	r3, [pc, #32]	; (8006dac <_Z23OD_IMU2_Temperature_getv+0x38>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU2_Temperature);
 8006d8e:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <_Z23OD_IMU2_Temperature_getv+0x34>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f010 fb44 	bl	8017420 <osMutexRelease>
    return value;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	ee07 3a90 	vmov	s15, r3
}
 8006d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	20000a00 	.word	0x20000a00
 8006dac:	2000093c 	.word	0x2000093c

08006db0 <_Z23OD_IMU3_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU2_Temperature);
}
#endif

#ifndef OD_IMU3_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU3_Temperature_get() {
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU3_Temperature, portMAX_DELAY);
 8006db6:	4b0b      	ldr	r3, [pc, #44]	; (8006de4 <_Z23OD_IMU3_Temperature_getv+0x34>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f04f 31ff 	mov.w	r1, #4294967295
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f010 fae3 	bl	801738a <osMutexAcquire>
    float value = OD_IMU3_Temperature;
 8006dc4:	4b08      	ldr	r3, [pc, #32]	; (8006de8 <_Z23OD_IMU3_Temperature_getv+0x38>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU3_Temperature);
 8006dca:	4b06      	ldr	r3, [pc, #24]	; (8006de4 <_Z23OD_IMU3_Temperature_getv+0x34>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f010 fb26 	bl	8017420 <osMutexRelease>
    return value;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	ee07 3a90 	vmov	s15, r3
}
 8006dda:	eeb0 0a67 	vmov.f32	s0, s15
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20000a04 	.word	0x20000a04
 8006de8:	20000940 	.word	0x20000940

08006dec <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f103 0208 	add.w	r2, r3, #8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	3310      	adds	r3, #16
 8006dfe:	4619      	mov	r1, r3
 8006e00:	4610      	mov	r0, r2
 8006e02:	f7fc f8b2 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8006e06:	4603      	mov	r3, r0
        }
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	460b      	mov	r3, r1
 8006e1a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f103 0008 	add.w	r0, r3, #8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f103 0110 	add.w	r1, r3, #16
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	1d1a      	adds	r2, r3, #4
 8006e2c:	78fb      	ldrb	r3, [r7, #3]
 8006e2e:	f7fd fe21 	bl	8004a74 <_ZN3can7signals17SensorF_OD_NodeID3setERyS2_Rhh>
        }
 8006e32:	bf00      	nop
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}

08006e3a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e3a:	b580      	push	{r7, lr}
 8006e3c:	b082      	sub	sp, #8
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f103 0008 	add.w	r0, r3, #8
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f103 0110 	add.w	r1, r3, #16
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	1d1a      	adds	r2, r3, #4
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	f7fd fdd9 	bl	8004a0e <_ZN3can7signals21SensorF_OD_NodeStatus3setERyS2_Rhh>
        }
 8006e5c:	bf00      	nop
 8006e5e:	3708      	adds	r7, #8
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f103 0008 	add.w	r0, r3, #8
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f103 0110 	add.w	r1, r3, #16
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	1d1a      	adds	r2, r3, #4
 8006e80:	887b      	ldrh	r3, [r7, #2]
 8006e82:	f7fd fd96 	bl	80049b2 <_ZN3can7signals26SensorF_OD_ProtocolVersion3setERyS2_Rht>
        }
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b082      	sub	sp, #8
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
 8006e96:	460b      	mov	r3, r1
 8006e98:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f103 0008 	add.w	r0, r3, #8
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f103 0110 	add.w	r1, r3, #16
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	1d1a      	adds	r2, r3, #4
 8006eaa:	887b      	ldrh	r3, [r7, #2]
 8006eac:	f7fd fd53 	bl	8004956 <_ZN3can7signals23SensorF_OD_StackVersion3setERyS2_Rht>
        }
 8006eb0:	bf00      	nop
 8006eb2:	3708      	adds	r7, #8
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f103 0008 	add.w	r0, r3, #8
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f103 0110 	add.w	r1, r3, #16
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	1d1a      	adds	r2, r3, #4
 8006ed4:	887b      	ldrh	r3, [r7, #2]
 8006ed6:	f7fd fd10 	bl	80048fa <_ZN3can7signals21SensorF_OD_DbcVersion3setERyS2_Rht>
        }
 8006eda:	bf00      	nop
 8006edc:	3708      	adds	r7, #8
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}

08006ee2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006ee2:	b580      	push	{r7, lr}
 8006ee4:	b082      	sub	sp, #8
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	6078      	str	r0, [r7, #4]
 8006eea:	460b      	mov	r3, r1
 8006eec:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f103 0008 	add.w	r0, r3, #8
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f103 0110 	add.w	r1, r3, #16
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	1d1a      	adds	r2, r3, #4
 8006efe:	887b      	ldrh	r3, [r7, #2]
 8006f00:	f7fd fca9 	bl	8004856 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3setERyS2_Rht>
        }
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f103 0008 	add.w	r0, r3, #8
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f103 0110 	add.w	r1, r3, #16
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	1d1a      	adds	r2, r3, #4
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	f7fd fc3d 	bl	80047a8 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 8006f2e:	bf00      	nop
 8006f30:	3708      	adds	r7, #8
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}

08006f36 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b082      	sub	sp, #8
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f103 0008 	add.w	r0, r3, #8
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f103 0110 	add.w	r1, r3, #16
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	1d1a      	adds	r2, r3, #4
 8006f52:	887b      	ldrh	r3, [r7, #2]
 8006f54:	f7fd fbd6 	bl	8004704 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f103 0008 	add.w	r0, r3, #8
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f103 0110 	add.w	r1, r3, #16
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	ed97 0a00 	vldr	s0, [r7]
 8006f80:	461a      	mov	r2, r3
 8006f82:	f7fd fb61 	bl	8004648 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf>
        }
 8006f86:	bf00      	nop
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f103 0008 	add.w	r0, r3, #8
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f103 0110 	add.w	r1, r3, #16
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	1d1a      	adds	r2, r3, #4
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	f7fd fb15 	bl	80045d8 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm>
        }
 8006fae:	bf00      	nop
 8006fb0:	3708      	adds	r7, #8
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b082      	sub	sp, #8
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
 8006fbe:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f103 0008 	add.w	r0, r3, #8
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f103 0110 	add.w	r1, r3, #16
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	3304      	adds	r3, #4
 8006fd2:	ed97 0a00 	vldr	s0, [r7]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f7fd fa9c 	bl	8004514 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf>
        }
 8006fdc:	bf00      	nop
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f103 0008 	add.w	r0, r3, #8
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f103 0110 	add.w	r1, r3, #16
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	3304      	adds	r3, #4
 8007000:	ed97 0a00 	vldr	s0, [r7]
 8007004:	461a      	mov	r2, r3
 8007006:	f7fd fa2b 	bl	8004460 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf>
        }
 800700a:	bf00      	nop
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}

08007012 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007012:	b580      	push	{r7, lr}
 8007014:	b082      	sub	sp, #8
 8007016:	af00      	add	r7, sp, #0
 8007018:	6078      	str	r0, [r7, #4]
 800701a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f103 0008 	add.w	r0, r3, #8
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f103 0110 	add.w	r1, r3, #16
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	1d1a      	adds	r2, r3, #4
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f7fd f9dd 	bl	80043ec <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm>
        }
 8007032:	bf00      	nop
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800703a:	b580      	push	{r7, lr}
 800703c:	b082      	sub	sp, #8
 800703e:	af00      	add	r7, sp, #0
 8007040:	6078      	str	r0, [r7, #4]
 8007042:	460b      	mov	r3, r1
 8007044:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f103 0008 	add.w	r0, r3, #8
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f103 0110 	add.w	r1, r3, #16
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	1d1a      	adds	r2, r3, #4
 8007056:	78fb      	ldrb	r3, [r7, #3]
 8007058:	f7fd f994 	bl	8004384 <_ZN3can7signals16SensorF_OD_SdcIn3setERyS2_Rhh>
        }
 800705c:	bf00      	nop
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	460b      	mov	r3, r1
 800706e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f103 0008 	add.w	r0, r3, #8
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	f103 0110 	add.w	r1, r3, #16
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	1d1a      	adds	r2, r3, #4
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	f7fd f94b 	bl	800431c <_ZN3can7signals17SensorF_OD_SdcOut3setERyS2_Rhh>
        }
 8007086:	bf00      	nop
 8007088:	3708      	adds	r7, #8
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}

0800708e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800708e:	b590      	push	{r4, r7, lr}
 8007090:	b087      	sub	sp, #28
 8007092:	af02      	add	r7, sp, #8
 8007094:	60f8      	str	r0, [r7, #12]
 8007096:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f103 0008 	add.w	r0, r3, #8
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f103 0110 	add.w	r1, r3, #16
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1d1c      	adds	r4, r3, #4
 80070aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ae:	e9cd 2300 	strd	r2, r3, [sp]
 80070b2:	4622      	mov	r2, r4
 80070b4:	f7fd f8f9 	bl	80042aa <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy>
        }
 80070b8:	bf00      	nop
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd90      	pop	{r4, r7, pc}

080070c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80070c0:	b590      	push	{r4, r7, lr}
 80070c2:	b087      	sub	sp, #28
 80070c4:	af02      	add	r7, sp, #8
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f103 0008 	add.w	r0, r3, #8
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f103 0110 	add.w	r1, r3, #16
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	1d1c      	adds	r4, r3, #4
 80070dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e0:	e9cd 2300 	strd	r2, r3, [sp]
 80070e4:	4622      	mov	r2, r4
 80070e6:	f7fd f8a7 	bl	8004238 <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy>
        }
 80070ea:	bf00      	nop
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd90      	pop	{r4, r7, pc}

080070f2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f103 0008 	add.w	r0, r3, #8
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f103 0110 	add.w	r1, r3, #16
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	1d1a      	adds	r2, r3, #4
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	f7fd f85b 	bl	80041c8 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm>
        }
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f103 0008 	add.w	r0, r3, #8
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f103 0110 	add.w	r1, r3, #16
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	1d1a      	adds	r2, r3, #4
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	f7fd f80d 	bl	8004154 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm>
        }
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f103 0008 	add.w	r0, r3, #8
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f103 0110 	add.w	r1, r3, #16
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	1d1a      	adds	r2, r3, #4
 800715e:	78fb      	ldrb	r3, [r7, #3]
 8007160:	f7fc ffc4 	bl	80040ec <_ZN3can7signals24SensorF_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 8007164:	bf00      	nop
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f103 0008 	add.w	r0, r3, #8
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f103 0110 	add.w	r1, r3, #16
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	1d1a      	adds	r2, r3, #4
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	f7fc ff7b 	bl	8004084 <_ZN3can7signals24SensorF_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}

08007196 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007196:	b580      	push	{r7, lr}
 8007198:	b082      	sub	sp, #8
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f103 0008 	add.w	r0, r3, #8
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f103 0110 	add.w	r1, r3, #16
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	1d1a      	adds	r2, r3, #4
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	f7fc ff2f 	bl	8004014 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 80071b6:	bf00      	nop
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}

080071be <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80071be:	b580      	push	{r7, lr}
 80071c0:	b082      	sub	sp, #8
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	460b      	mov	r3, r1
 80071c8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f103 0008 	add.w	r0, r3, #8
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f103 0110 	add.w	r1, r3, #16
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	1d1a      	adds	r2, r3, #4
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	f7fc febe 	bl	8003f5c <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f103 0008 	add.w	r0, r3, #8
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f103 0110 	add.w	r1, r3, #16
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	1d1a      	adds	r2, r3, #4
 8007204:	887b      	ldrh	r3, [r7, #2]
 8007206:	f7fc fe47 	bl	8003e98 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 800720a:	bf00      	nop
 800720c:	3708      	adds	r7, #8
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007212:	b580      	push	{r7, lr}
 8007214:	b082      	sub	sp, #8
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f103 0008 	add.w	r0, r3, #8
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f103 0110 	add.w	r1, r3, #16
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	1d1a      	adds	r2, r3, #4
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	f7fc fdfe 	bl	8003e30 <_ZN3can7signals22SensorF_OD_CAN1_Status3setERyS2_Rhh>
        }
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f103 0008 	add.w	r0, r3, #8
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f103 0110 	add.w	r1, r3, #16
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	1d1a      	adds	r2, r3, #4
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	f7fc fdb0 	bl	8003dbc <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f103 0008 	add.w	r0, r3, #8
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f103 0110 	add.w	r1, r3, #16
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	1d1a      	adds	r2, r3, #4
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	f7fc fd67 	bl	8003d54 <_ZN3can7signals27SensorF_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f103 0008 	add.w	r0, r3, #8
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f103 0110 	add.w	r1, r3, #16
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	1d1a      	adds	r2, r3, #4
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f7fc fd19 	bl	8003ce0 <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}

080072b6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b082      	sub	sp, #8
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	460b      	mov	r3, r1
 80072c0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f103 0008 	add.w	r0, r3, #8
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f103 0110 	add.w	r1, r3, #16
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1d1a      	adds	r2, r3, #4
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	f7fc fcd0 	bl	8003c78 <_ZN3can7signals24SensorF_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 80072d8:	bf00      	nop
 80072da:	3708      	adds	r7, #8
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f103 0008 	add.w	r0, r3, #8
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f103 0110 	add.w	r1, r3, #16
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	1d1a      	adds	r2, r3, #4
 80072fc:	78fb      	ldrb	r3, [r7, #3]
 80072fe:	f7fc fc87 	bl	8003c10 <_ZN3can7signals24SensorF_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800730a:	b580      	push	{r7, lr}
 800730c:	b082      	sub	sp, #8
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
 8007312:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f103 0008 	add.w	r0, r3, #8
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f103 0110 	add.w	r1, r3, #16
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	1d1a      	adds	r2, r3, #4
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	f7fc fc3b 	bl	8003ba0 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f103 0008 	add.w	r0, r3, #8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f103 0110 	add.w	r1, r3, #16
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	1d1a      	adds	r2, r3, #4
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	f7fc fbca 	bl	8003ae8 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f103 0008 	add.w	r0, r3, #8
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f103 0110 	add.w	r1, r3, #16
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	1d1a      	adds	r2, r3, #4
 8007378:	887b      	ldrh	r3, [r7, #2]
 800737a:	f7fc fb53 	bl	8003a24 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f103 0008 	add.w	r0, r3, #8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f103 0110 	add.w	r1, r3, #16
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	1d1a      	adds	r2, r3, #4
 80073a2:	78fb      	ldrb	r3, [r7, #3]
 80073a4:	f7fc fb0a 	bl	80039bc <_ZN3can7signals22SensorF_OD_CAN2_Status3setERyS2_Rhh>
        }
 80073a8:	bf00      	nop
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f103 0008 	add.w	r0, r3, #8
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f103 0110 	add.w	r1, r3, #16
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	1d1a      	adds	r2, r3, #4
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	f7fc fabc 	bl	8003948 <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f103 0008 	add.w	r0, r3, #8
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f103 0110 	add.w	r1, r3, #16
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	1d1a      	adds	r2, r3, #4
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	f7fc fa73 	bl	80038e0 <_ZN3can7signals27SensorF_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 80073fa:	bf00      	nop
 80073fc:	3708      	adds	r7, #8
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007402:	b580      	push	{r7, lr}
 8007404:	b082      	sub	sp, #8
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f103 0008 	add.w	r0, r3, #8
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f103 0110 	add.w	r1, r3, #16
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	1d1a      	adds	r2, r3, #4
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	f7fc fa25 	bl	800386c <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8007422:	bf00      	nop
 8007424:	3708      	adds	r7, #8
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800742a:	b580      	push	{r7, lr}
 800742c:	b082      	sub	sp, #8
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f103 0008 	add.w	r0, r3, #8
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f103 0110 	add.w	r1, r3, #16
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	3304      	adds	r3, #4
 8007446:	ed97 0a00 	vldr	s0, [r7]
 800744a:	461a      	mov	r2, r3
 800744c:	f7fc f980 	bl	8003750 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf>
        }
 8007450:	bf00      	nop
 8007452:	3708      	adds	r7, #8
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f103 0008 	add.w	r0, r3, #8
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f103 0110 	add.w	r1, r3, #16
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	1d1a      	adds	r2, r3, #4
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	f7fc f912 	bl	800369e <_ZN3can7signals28SensorF_OD_TelemetryCommands3setERyS2_Rhh>
        }
 800747a:	bf00      	nop
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	460b      	mov	r3, r1
 800748c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f103 0008 	add.w	r0, r3, #8
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f103 0110 	add.w	r1, r3, #16
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	1d1a      	adds	r2, r3, #4
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	f7fc f898 	bl	80035d4 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh>
        }
 80074a4:	bf00      	nop
 80074a6:	3708      	adds	r7, #8
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f103 0008 	add.w	r0, r3, #8
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f103 0110 	add.w	r1, r3, #16
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	1d1a      	adds	r2, r3, #4
 80074c8:	78fb      	ldrb	r3, [r7, #3]
 80074ca:	f7fc f828 	bl	800351e <_ZN3can7signals31SensorF_OD_StateMachineActivate3setERyS2_Rhh>
        }
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b082      	sub	sp, #8
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	460b      	mov	r3, r1
 80074e0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f103 0008 	add.w	r0, r3, #8
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f103 0110 	add.w	r1, r3, #16
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	1d1a      	adds	r2, r3, #4
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	f7fb ffb8 	bl	8003468 <_ZN3can7signals24SensorF_OD_HVBatteryMode3setERyS2_Rhh>
        }
 80074f8:	bf00      	nop
 80074fa:	3708      	adds	r7, #8
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007500:	b580      	push	{r7, lr}
 8007502:	b082      	sub	sp, #8
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f103 0008 	add.w	r0, r3, #8
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f103 0110 	add.w	r1, r3, #16
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	3304      	adds	r3, #4
 800751c:	ed97 0a00 	vldr	s0, [r7]
 8007520:	461a      	mov	r2, r3
 8007522:	f7fb ff13 	bl	800334c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf>
        }
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f103 0008 	add.w	r0, r3, #8
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f103 0110 	add.w	r1, r3, #16
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	1d1a      	adds	r2, r3, #4
 800754a:	887b      	ldrh	r3, [r7, #2]
 800754c:	f7fb fce5 	bl	8002f1a <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
        }
 8007550:	bf00      	nop
 8007552:	3708      	adds	r7, #8
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b082      	sub	sp, #8
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
 8007560:	460b      	mov	r3, r1
 8007562:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f103 0008 	add.w	r0, r3, #8
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f103 0110 	add.w	r1, r3, #16
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	1d1a      	adds	r2, r3, #4
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	f7fb fe8d 	bl	8003294 <_ZN3can7signals21SensorF_OD_IMU_number3setERyS2_Rhh>
        }
 800757a:	bf00      	nop
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}

08007582 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007582:	b580      	push	{r7, lr}
 8007584:	b082      	sub	sp, #8
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
 800758a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f103 0008 	add.w	r0, r3, #8
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f103 0110 	add.w	r1, r3, #16
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	3304      	adds	r3, #4
 800759e:	ed97 0a00 	vldr	s0, [r7]
 80075a2:	461a      	mov	r2, r3
 80075a4:	f7fb fe10 	bl	80031c8 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf>
        }
 80075a8:	bf00      	nop
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b082      	sub	sp, #8
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f103 0008 	add.w	r0, r3, #8
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f103 0110 	add.w	r1, r3, #16
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	3304      	adds	r3, #4
 80075cc:	ed97 0a00 	vldr	s0, [r7]
 80075d0:	461a      	mov	r2, r3
 80075d2:	f7fb fd93 	bl	80030fc <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf>
        }
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
 80075e6:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f103 0008 	add.w	r0, r3, #8
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f103 0110 	add.w	r1, r3, #16
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3304      	adds	r3, #4
 80075fa:	ed97 0a00 	vldr	s0, [r7]
 80075fe:	461a      	mov	r2, r3
 8007600:	f7fb fd16 	bl	8003030 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf>
        }
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f103 0008 	add.w	r0, r3, #8
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f103 0110 	add.w	r1, r3, #16
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	1d1a      	adds	r2, r3, #4
 8007628:	78fb      	ldrb	r3, [r7, #3]
 800762a:	f7fb fcb1 	bl	8002f90 <_ZN3can7signals20SensorF_SDO_RespCode3setERyS2_Rhh>
        }
 800762e:	bf00      	nop
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f103 0208 	add.w	r2, r3, #8
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	3310      	adds	r3, #16
 8007648:	4619      	mov	r1, r3
 800764a:	4610      	mov	r0, r2
 800764c:	f7fb fc8d 	bl	8002f6a <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8007650:	4603      	mov	r3, r0
        }
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f103 0208 	add.w	r2, r3, #8
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3310      	adds	r3, #16
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	f7fd f91f 	bl	80048b2 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_>
 8007674:	4603      	mov	r3, r0
        }
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals25SensorF_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800767e:	b580      	push	{r7, lr}
 8007680:	b082      	sub	sp, #8
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f103 0208 	add.w	r2, r3, #8
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3310      	adds	r3, #16
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f7fd f8bb 	bl	800480e <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_>
 8007698:	4603      	mov	r3, r0
        }
 800769a:	4618      	mov	r0, r3
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f103 0208 	add.w	r2, r3, #8
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3310      	adds	r3, #16
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7fd f852 	bl	8004760 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_>
 80076bc:	4603      	mov	r3, r0
        }
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f103 0208 	add.w	r2, r3, #8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3310      	adds	r3, #16
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f7fc fc72 	bl	8003fc4 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_>
 80076e0:	4603      	mov	r3, r0
        }
 80076e2:	4618      	mov	r0, r3
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f103 0208 	add.w	r2, r3, #8
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3310      	adds	r3, #16
 80076fc:	4619      	mov	r1, r3
 80076fe:	4610      	mov	r0, r2
 8007700:	f7fc fc05 	bl	8003f0e <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_>
 8007704:	4603      	mov	r3, r0
        }
 8007706:	4618      	mov	r0, r3
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800770e:	b580      	push	{r7, lr}
 8007710:	b082      	sub	sp, #8
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f103 0208 	add.w	r2, r3, #8
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	3310      	adds	r3, #16
 8007720:	4619      	mov	r1, r3
 8007722:	4610      	mov	r0, r2
 8007724:	f7fc fa14 	bl	8003b50 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_>
 8007728:	4603      	mov	r3, r0
        }
 800772a:	4618      	mov	r0, r3
 800772c:	3708      	adds	r7, #8
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007732:	b580      	push	{r7, lr}
 8007734:	b082      	sub	sp, #8
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f103 0208 	add.w	r2, r3, #8
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	3310      	adds	r3, #16
 8007744:	4619      	mov	r1, r3
 8007746:	4610      	mov	r0, r2
 8007748:	f7fc f9a7 	bl	8003a9a <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_>
 800774c:	4603      	mov	r3, r0
        }
 800774e:	4618      	mov	r0, r3
 8007750:	3708      	adds	r7, #8
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals27SensorF_OD_samplingIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007756:	b580      	push	{r7, lr}
 8007758:	b082      	sub	sp, #8
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f103 0208 	add.w	r2, r3, #8
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3310      	adds	r3, #16
 8007768:	4619      	mov	r1, r3
 800776a:	4610      	mov	r0, r2
 800776c:	f7fc f84e 	bl	800380c <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_>
 8007770:	eef0 7a40 	vmov.f32	s15, s0
        }
 8007774:	eeb0 0a67 	vmov.f32	s0, s15
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}

0800777e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_TelemetryCommandsEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f103 0208 	add.w	r2, r3, #8
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3310      	adds	r3, #16
 8007790:	4619      	mov	r1, r3
 8007792:	4610      	mov	r0, r2
 8007794:	f7fb ffb7 	bl	8003706 <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_>
 8007798:	4603      	mov	r3, r0
        }
 800779a:	4618      	mov	r0, r3
 800779c:	3708      	adds	r7, #8
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b082      	sub	sp, #8
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f103 0208 	add.w	r2, r3, #8
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	3310      	adds	r3, #16
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f7fb ff4a 	bl	8003650 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_>
 80077bc:	4603      	mov	r3, r0
        }
 80077be:	4618      	mov	r0, r3
 80077c0:	3708      	adds	r7, #8
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineActivateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b082      	sub	sp, #8
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f103 0208 	add.w	r2, r3, #8
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3310      	adds	r3, #16
 80077d8:	4619      	mov	r1, r3
 80077da:	4610      	mov	r0, r2
 80077dc:	f7fb fed3 	bl	8003586 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_>
 80077e0:	4603      	mov	r3, r0
        }
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_HVBatteryModeEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f103 0208 	add.w	r2, r3, #8
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	3310      	adds	r3, #16
 80077fc:	4619      	mov	r1, r3
 80077fe:	4610      	mov	r0, r2
 8007800:	f7fb fe66 	bl	80034d0 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_>
 8007804:	4603      	mov	r3, r0
        }
 8007806:	4618      	mov	r0, r3
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderWheelDiameterEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f103 0208 	add.w	r2, r3, #8
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3310      	adds	r3, #16
 8007820:	4619      	mov	r1, r3
 8007822:	4610      	mov	r0, r2
 8007824:	f7fb fdee 	bl	8003404 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_>
 8007828:	eef0 7a40 	vmov.f32	s15, s0
        }
 800782c:	eeb0 0a67 	vmov.f32	s0, s15
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderResetPositionEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f103 0208 	add.w	r2, r3, #8
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3310      	adds	r3, #16
 8007848:	4619      	mov	r1, r3
 800784a:	4610      	mov	r0, r2
 800784c:	f7fb fd56 	bl	80032fc <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_>
 8007850:	4603      	mov	r3, r0
        }
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals19SensorF_OD_SetResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800785a:	b580      	push	{r7, lr}
 800785c:	b082      	sub	sp, #8
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f103 0208 	add.w	r2, r3, #8
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3310      	adds	r3, #16
 800786c:	4619      	mov	r1, r3
 800786e:	4610      	mov	r0, r2
 8007870:	f7fb fbb8 	bl	8002fe4 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_>
 8007874:	4603      	mov	r3, r0
        }
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
	...

08007880 <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b01      	cmp	r3, #1
 800788e:	f040 812c 	bne.w	8007aea <_Z41__static_initialization_and_destruction_0ii+0x26a>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007898:	4293      	cmp	r3, r2
 800789a:	f040 8126 	bne.w	8007aea <_Z41__static_initialization_and_destruction_0ii+0x26a>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 800789e:	2000      	movs	r0, #0
 80078a0:	f00f fced 	bl	801727e <osMutexNew>
 80078a4:	4603      	mov	r3, r0
 80078a6:	4a93      	ldr	r2, [pc, #588]	; (8007af4 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 80078a8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 80078aa:	2000      	movs	r0, #0
 80078ac:	f00f fce7 	bl	801727e <osMutexNew>
 80078b0:	4603      	mov	r3, r0
 80078b2:	4a91      	ldr	r2, [pc, #580]	; (8007af8 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 80078b4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 80078b6:	2000      	movs	r0, #0
 80078b8:	f00f fce1 	bl	801727e <osMutexNew>
 80078bc:	4603      	mov	r3, r0
 80078be:	4a8f      	ldr	r2, [pc, #572]	; (8007afc <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 80078c0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 80078c2:	2000      	movs	r0, #0
 80078c4:	f00f fcdb 	bl	801727e <osMutexNew>
 80078c8:	4603      	mov	r3, r0
 80078ca:	4a8d      	ldr	r2, [pc, #564]	; (8007b00 <_Z41__static_initialization_and_destruction_0ii+0x280>)
 80078cc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 80078ce:	2000      	movs	r0, #0
 80078d0:	f00f fcd5 	bl	801727e <osMutexNew>
 80078d4:	4603      	mov	r3, r0
 80078d6:	4a8b      	ldr	r2, [pc, #556]	; (8007b04 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 80078d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 80078da:	2000      	movs	r0, #0
 80078dc:	f00f fccf 	bl	801727e <osMutexNew>
 80078e0:	4603      	mov	r3, r0
 80078e2:	4a89      	ldr	r2, [pc, #548]	; (8007b08 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 80078e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 80078e6:	2000      	movs	r0, #0
 80078e8:	f00f fcc9 	bl	801727e <osMutexNew>
 80078ec:	4603      	mov	r3, r0
 80078ee:	4a87      	ldr	r2, [pc, #540]	; (8007b0c <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 80078f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 80078f2:	2000      	movs	r0, #0
 80078f4:	f00f fcc3 	bl	801727e <osMutexNew>
 80078f8:	4603      	mov	r3, r0
 80078fa:	4a85      	ldr	r2, [pc, #532]	; (8007b10 <_Z41__static_initialization_and_destruction_0ii+0x290>)
 80078fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 80078fe:	2000      	movs	r0, #0
 8007900:	f00f fcbd 	bl	801727e <osMutexNew>
 8007904:	4603      	mov	r3, r0
 8007906:	4a83      	ldr	r2, [pc, #524]	; (8007b14 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8007908:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 800790a:	2000      	movs	r0, #0
 800790c:	f00f fcb7 	bl	801727e <osMutexNew>
 8007910:	4603      	mov	r3, r0
 8007912:	4a81      	ldr	r2, [pc, #516]	; (8007b18 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8007914:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 8007916:	2000      	movs	r0, #0
 8007918:	f00f fcb1 	bl	801727e <osMutexNew>
 800791c:	4603      	mov	r3, r0
 800791e:	4a7f      	ldr	r2, [pc, #508]	; (8007b1c <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8007920:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 8007922:	2000      	movs	r0, #0
 8007924:	f00f fcab 	bl	801727e <osMutexNew>
 8007928:	4603      	mov	r3, r0
 800792a:	4a7d      	ldr	r2, [pc, #500]	; (8007b20 <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 800792c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 800792e:	2000      	movs	r0, #0
 8007930:	f00f fca5 	bl	801727e <osMutexNew>
 8007934:	4603      	mov	r3, r0
 8007936:	4a7b      	ldr	r2, [pc, #492]	; (8007b24 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8007938:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 800793a:	2000      	movs	r0, #0
 800793c:	f00f fc9f 	bl	801727e <osMutexNew>
 8007940:	4603      	mov	r3, r0
 8007942:	4a79      	ldr	r2, [pc, #484]	; (8007b28 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8007944:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8007946:	2000      	movs	r0, #0
 8007948:	f00f fc99 	bl	801727e <osMutexNew>
 800794c:	4603      	mov	r3, r0
 800794e:	4a77      	ldr	r2, [pc, #476]	; (8007b2c <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 8007950:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8007952:	2000      	movs	r0, #0
 8007954:	f00f fc93 	bl	801727e <osMutexNew>
 8007958:	4603      	mov	r3, r0
 800795a:	4a75      	ldr	r2, [pc, #468]	; (8007b30 <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 800795c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 800795e:	2000      	movs	r0, #0
 8007960:	f00f fc8d 	bl	801727e <osMutexNew>
 8007964:	4603      	mov	r3, r0
 8007966:	4a73      	ldr	r2, [pc, #460]	; (8007b34 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8007968:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 800796a:	2000      	movs	r0, #0
 800796c:	f00f fc87 	bl	801727e <osMutexNew>
 8007970:	4603      	mov	r3, r0
 8007972:	4a71      	ldr	r2, [pc, #452]	; (8007b38 <_Z41__static_initialization_and_destruction_0ii+0x2b8>)
 8007974:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 8007976:	2000      	movs	r0, #0
 8007978:	f00f fc81 	bl	801727e <osMutexNew>
 800797c:	4603      	mov	r3, r0
 800797e:	4a6f      	ldr	r2, [pc, #444]	; (8007b3c <_Z41__static_initialization_and_destruction_0ii+0x2bc>)
 8007980:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8007982:	2000      	movs	r0, #0
 8007984:	f00f fc7b 	bl	801727e <osMutexNew>
 8007988:	4603      	mov	r3, r0
 800798a:	4a6d      	ldr	r2, [pc, #436]	; (8007b40 <_Z41__static_initialization_and_destruction_0ii+0x2c0>)
 800798c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 800798e:	2000      	movs	r0, #0
 8007990:	f00f fc75 	bl	801727e <osMutexNew>
 8007994:	4603      	mov	r3, r0
 8007996:	4a6b      	ldr	r2, [pc, #428]	; (8007b44 <_Z41__static_initialization_and_destruction_0ii+0x2c4>)
 8007998:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 800799a:	2000      	movs	r0, #0
 800799c:	f00f fc6f 	bl	801727e <osMutexNew>
 80079a0:	4603      	mov	r3, r0
 80079a2:	4a69      	ldr	r2, [pc, #420]	; (8007b48 <_Z41__static_initialization_and_destruction_0ii+0x2c8>)
 80079a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 80079a6:	2000      	movs	r0, #0
 80079a8:	f00f fc69 	bl	801727e <osMutexNew>
 80079ac:	4603      	mov	r3, r0
 80079ae:	4a67      	ldr	r2, [pc, #412]	; (8007b4c <_Z41__static_initialization_and_destruction_0ii+0x2cc>)
 80079b0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 80079b2:	2000      	movs	r0, #0
 80079b4:	f00f fc63 	bl	801727e <osMutexNew>
 80079b8:	4603      	mov	r3, r0
 80079ba:	4a65      	ldr	r2, [pc, #404]	; (8007b50 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 80079bc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 80079be:	2000      	movs	r0, #0
 80079c0:	f00f fc5d 	bl	801727e <osMutexNew>
 80079c4:	4603      	mov	r3, r0
 80079c6:	4a63      	ldr	r2, [pc, #396]	; (8007b54 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 80079c8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 80079ca:	2000      	movs	r0, #0
 80079cc:	f00f fc57 	bl	801727e <osMutexNew>
 80079d0:	4603      	mov	r3, r0
 80079d2:	4a61      	ldr	r2, [pc, #388]	; (8007b58 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 80079d4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 80079d6:	2000      	movs	r0, #0
 80079d8:	f00f fc51 	bl	801727e <osMutexNew>
 80079dc:	4603      	mov	r3, r0
 80079de:	4a5f      	ldr	r2, [pc, #380]	; (8007b5c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 80079e0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 80079e2:	2000      	movs	r0, #0
 80079e4:	f00f fc4b 	bl	801727e <osMutexNew>
 80079e8:	4603      	mov	r3, r0
 80079ea:	4a5d      	ldr	r2, [pc, #372]	; (8007b60 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 80079ec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 80079ee:	2000      	movs	r0, #0
 80079f0:	f00f fc45 	bl	801727e <osMutexNew>
 80079f4:	4603      	mov	r3, r0
 80079f6:	4a5b      	ldr	r2, [pc, #364]	; (8007b64 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 80079f8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 80079fa:	2000      	movs	r0, #0
 80079fc:	f00f fc3f 	bl	801727e <osMutexNew>
 8007a00:	4603      	mov	r3, r0
 8007a02:	4a59      	ldr	r2, [pc, #356]	; (8007b68 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8007a04:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8007a06:	2000      	movs	r0, #0
 8007a08:	f00f fc39 	bl	801727e <osMutexNew>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	4a57      	ldr	r2, [pc, #348]	; (8007b6c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8007a10:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8007a12:	2000      	movs	r0, #0
 8007a14:	f00f fc33 	bl	801727e <osMutexNew>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	4a55      	ldr	r2, [pc, #340]	; (8007b70 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8007a1c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 8007a1e:	2000      	movs	r0, #0
 8007a20:	f00f fc2d 	bl	801727e <osMutexNew>
 8007a24:	4603      	mov	r3, r0
 8007a26:	4a53      	ldr	r2, [pc, #332]	; (8007b74 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8007a28:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	f00f fc27 	bl	801727e <osMutexNew>
 8007a30:	4603      	mov	r3, r0
 8007a32:	4a51      	ldr	r2, [pc, #324]	; (8007b78 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8007a34:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8007a36:	2000      	movs	r0, #0
 8007a38:	f00f fc21 	bl	801727e <osMutexNew>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	4a4f      	ldr	r2, [pc, #316]	; (8007b7c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8007a40:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8007a42:	2000      	movs	r0, #0
 8007a44:	f00f fc1b 	bl	801727e <osMutexNew>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	4a4d      	ldr	r2, [pc, #308]	; (8007b80 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8007a4c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8007a4e:	2000      	movs	r0, #0
 8007a50:	f00f fc15 	bl	801727e <osMutexNew>
 8007a54:	4603      	mov	r3, r0
 8007a56:	4a4b      	ldr	r2, [pc, #300]	; (8007b84 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007a58:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_samplingInterval         = osMutexNew(NULL);
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	f00f fc0f 	bl	801727e <osMutexNew>
 8007a60:	4603      	mov	r3, r0
 8007a62:	4a49      	ldr	r2, [pc, #292]	; (8007b88 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8007a64:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_TelemetryCommands        = osMutexNew(NULL);
 8007a66:	2000      	movs	r0, #0
 8007a68:	f00f fc09 	bl	801727e <osMutexNew>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	4a47      	ldr	r2, [pc, #284]	; (8007b8c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8007a70:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineInterval     = osMutexNew(NULL);
 8007a72:	2000      	movs	r0, #0
 8007a74:	f00f fc03 	bl	801727e <osMutexNew>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	4a45      	ldr	r2, [pc, #276]	; (8007b90 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8007a7c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineActivate     = osMutexNew(NULL);
 8007a7e:	2000      	movs	r0, #0
 8007a80:	f00f fbfd 	bl	801727e <osMutexNew>
 8007a84:	4603      	mov	r3, r0
 8007a86:	4a43      	ldr	r2, [pc, #268]	; (8007b94 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8007a88:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HVBatteryMode            = osMutexNew(NULL);
 8007a8a:	2000      	movs	r0, #0
 8007a8c:	f00f fbf7 	bl	801727e <osMutexNew>
 8007a90:	4603      	mov	r3, r0
 8007a92:	4a41      	ldr	r2, [pc, #260]	; (8007b98 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007a94:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderWheelDiameter     = osMutexNew(NULL);
 8007a96:	2000      	movs	r0, #0
 8007a98:	f00f fbf1 	bl	801727e <osMutexNew>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	4a3f      	ldr	r2, [pc, #252]	; (8007b9c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8007aa0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderResetPosition     = osMutexNew(NULL);
 8007aa2:	2000      	movs	r0, #0
 8007aa4:	f00f fbeb 	bl	801727e <osMutexNew>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	4a3d      	ldr	r2, [pc, #244]	; (8007ba0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8007aac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SetReset                 = osMutexNew(NULL);
 8007aae:	2000      	movs	r0, #0
 8007ab0:	f00f fbe5 	bl	801727e <osMutexNew>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	4a3b      	ldr	r2, [pc, #236]	; (8007ba4 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8007ab8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_number               = osMutexNew(NULL);
 8007aba:	2000      	movs	r0, #0
 8007abc:	f00f fbdf 	bl	801727e <osMutexNew>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	4a39      	ldr	r2, [pc, #228]	; (8007ba8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007ac4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU1_Temperature         = osMutexNew(NULL);
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	f00f fbd9 	bl	801727e <osMutexNew>
 8007acc:	4603      	mov	r3, r0
 8007ace:	4a37      	ldr	r2, [pc, #220]	; (8007bac <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8007ad0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU2_Temperature         = osMutexNew(NULL);
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	f00f fbd3 	bl	801727e <osMutexNew>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	4a35      	ldr	r2, [pc, #212]	; (8007bb0 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8007adc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU3_Temperature         = osMutexNew(NULL);
 8007ade:	2000      	movs	r0, #0
 8007ae0:	f00f fbcd 	bl	801727e <osMutexNew>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	4a33      	ldr	r2, [pc, #204]	; (8007bb4 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8007ae8:	6013      	str	r3, [r2, #0]
 8007aea:	bf00      	nop
 8007aec:	3708      	adds	r7, #8
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	20000944 	.word	0x20000944
 8007af8:	20000948 	.word	0x20000948
 8007afc:	2000094c 	.word	0x2000094c
 8007b00:	20000950 	.word	0x20000950
 8007b04:	20000954 	.word	0x20000954
 8007b08:	20000958 	.word	0x20000958
 8007b0c:	2000095c 	.word	0x2000095c
 8007b10:	20000960 	.word	0x20000960
 8007b14:	20000964 	.word	0x20000964
 8007b18:	20000968 	.word	0x20000968
 8007b1c:	2000096c 	.word	0x2000096c
 8007b20:	20000970 	.word	0x20000970
 8007b24:	20000974 	.word	0x20000974
 8007b28:	20000978 	.word	0x20000978
 8007b2c:	2000097c 	.word	0x2000097c
 8007b30:	20000980 	.word	0x20000980
 8007b34:	20000984 	.word	0x20000984
 8007b38:	20000988 	.word	0x20000988
 8007b3c:	2000098c 	.word	0x2000098c
 8007b40:	20000990 	.word	0x20000990
 8007b44:	20000994 	.word	0x20000994
 8007b48:	20000998 	.word	0x20000998
 8007b4c:	2000099c 	.word	0x2000099c
 8007b50:	200009a0 	.word	0x200009a0
 8007b54:	200009a4 	.word	0x200009a4
 8007b58:	200009a8 	.word	0x200009a8
 8007b5c:	200009ac 	.word	0x200009ac
 8007b60:	200009b0 	.word	0x200009b0
 8007b64:	200009b4 	.word	0x200009b4
 8007b68:	200009b8 	.word	0x200009b8
 8007b6c:	200009bc 	.word	0x200009bc
 8007b70:	200009c0 	.word	0x200009c0
 8007b74:	200009c4 	.word	0x200009c4
 8007b78:	200009c8 	.word	0x200009c8
 8007b7c:	200009cc 	.word	0x200009cc
 8007b80:	200009d0 	.word	0x200009d0
 8007b84:	200009d4 	.word	0x200009d4
 8007b88:	200009d8 	.word	0x200009d8
 8007b8c:	200009dc 	.word	0x200009dc
 8007b90:	200009e0 	.word	0x200009e0
 8007b94:	200009e4 	.word	0x200009e4
 8007b98:	200009e8 	.word	0x200009e8
 8007b9c:	200009ec 	.word	0x200009ec
 8007ba0:	200009f0 	.word	0x200009f0
 8007ba4:	200009f4 	.word	0x200009f4
 8007ba8:	200009f8 	.word	0x200009f8
 8007bac:	200009fc 	.word	0x200009fc
 8007bb0:	20000a00 	.word	0x20000a00
 8007bb4:	20000a04 	.word	0x20000a04

08007bb8 <_GLOBAL__sub_I_OD_NodeID>:
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007bc0:	2001      	movs	r0, #1
 8007bc2:	f7ff fe5d 	bl	8007880 <_Z41__static_initialization_and_destruction_0ii>
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7f9 fc3a 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 8007be2:	b5b0      	push	{r4, r5, r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	240f      	movs	r4, #15
 8007bee:	461d      	mov	r5, r3
 8007bf0:	2c00      	cmp	r4, #0
 8007bf2:	db05      	blt.n	8007c00 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	f000 fa9d 	bl	8008134 <_ZNSt8functionIFvtEEC1Ev>
 8007bfa:	3510      	adds	r5, #16
 8007bfc:	3c01      	subs	r4, #1
 8007bfe:	e7f7      	b.n	8007bf0 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bdb0      	pop	{r4, r5, r7, pc}

08007c12 <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 8007c12:	b590      	push	{r4, r7, lr}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00a      	beq.n	8007c36 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	429c      	cmp	r4, r3
 8007c2a:	d004      	beq.n	8007c36 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8007c2c:	3c10      	subs	r4, #16
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f7ff ffca 	bl	8007bc8 <_ZNSt8functionIFvtEED1Ev>
 8007c34:	e7f7      	b.n	8007c26 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd90      	pop	{r4, r7, pc}

08007c40 <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 8007c40:	b580      	push	{r7, lr}
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__tcf_0+0xc>)
 8007c46:	f7ff ffe4 	bl	8007c12 <_ZN23GPIOExtiCallbackHandlerD1Ev>
 8007c4a:	bd80      	pop	{r7, pc}
 8007c4c:	20000a08 	.word	0x20000a08

08007c50 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 8007c50:	b580      	push	{r7, lr}
 8007c52:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 8007c54:	4b12      	ldr	r3, [pc, #72]	; (8007ca0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	f3bf 8f5b 	dmb	ish
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	bf0c      	ite	eq
 8007c66:	2301      	moveq	r3, #1
 8007c68:	2300      	movne	r3, #0
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d013      	beq.n	8007c98 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8007c70:	480b      	ldr	r0, [pc, #44]	; (8007ca0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8007c72:	f013 fd5f 	bl	801b734 <__cxa_guard_acquire>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bf14      	ite	ne
 8007c7c:	2301      	movne	r3, #1
 8007c7e:	2300      	moveq	r3, #0
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d008      	beq.n	8007c98 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8007c86:	4807      	ldr	r0, [pc, #28]	; (8007ca4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 8007c88:	f7ff ffab 	bl	8007be2 <_ZN23GPIOExtiCallbackHandlerC1Ev>
 8007c8c:	4806      	ldr	r0, [pc, #24]	; (8007ca8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 8007c8e:	f014 f8e8 	bl	801be62 <atexit>
 8007c92:	4803      	ldr	r0, [pc, #12]	; (8007ca0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8007c94:	f013 fd5a 	bl	801b74c <__cxa_guard_release>
		return instance;
 8007c98:	4b02      	ldr	r3, [pc, #8]	; (8007ca4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	20000b0c 	.word	0x20000b0c
 8007ca4:	20000a08 	.word	0x20000a08
 8007ca8:	08007c41 	.word	0x08007c41

08007cac <_ZN23GPIOExtiCallbackHandler16registerCallbackESt8functionIFvtEE>:
	unsigned int registerCallback(std::function<void(uint16_t)> isr) {
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007cbc:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007cc4:	1c59      	adds	r1, r3, #1
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8007ccc:	011b      	lsls	r3, r3, #4
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fa3a 	bl	800814e <_ZNSt8functionIFvtEEaSERKS1_>
		return id;
 8007cda:	68fb      	ldr	r3, [r7, #12]
	}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <_ZNSt8functionIFvbEED1Ev>:
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7f9 fbac 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt>:
class GPIOExtiController {
public:
	explicit GPIOExtiController(GPIO_TypeDef *port, uint16_t pin) :
			m_port(port), m_pin(pin) {
		m_extiIsrId = GPIOExtiCallbackHandler::getInstance().registerCallback(
				[&](uint16_t pin) {
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
 8007d06:	460b      	mov	r3, r1
 8007d08:	807b      	strh	r3, [r7, #2]
					if (m_extiCallback != nullptr && m_pin == pin) {
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	330c      	adds	r3, #12
 8007d10:	2100      	movs	r1, #0
 8007d12:	4618      	mov	r0, r3
 8007d14:	f000 fa44 	bl	80081a0 <_ZStneIvJbEEbRKSt8functionIFT_DpT0_EEDn>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d007      	beq.n	8007d2e <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x30>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	889b      	ldrh	r3, [r3, #4]
 8007d24:	887a      	ldrh	r2, [r7, #2]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d101      	bne.n	8007d2e <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x30>
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e000      	b.n	8007d30 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x32>
 8007d2e:	2300      	movs	r3, #0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d019      	beq.n	8007d68 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x6a>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
						GPIO_PinState state = HAL_GPIO_ReadPin(m_port, m_pin);
 8007d38:	681a      	ldr	r2, [r3, #0]
					if (m_extiCallback != nullptr && m_pin == pin) {
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
						GPIO_PinState state = HAL_GPIO_ReadPin(m_port, m_pin);
 8007d3e:	889b      	ldrh	r3, [r3, #4]
 8007d40:	4619      	mov	r1, r3
 8007d42:	4610      	mov	r0, r2
 8007d44:	f00a fc76 	bl	8012634 <HAL_GPIO_ReadPin>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]
					if (m_extiCallback != nullptr && m_pin == pin) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
						m_extiCallback(state == GPIO_PIN_SET);
 8007d50:	f103 020c 	add.w	r2, r3, #12
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	bf0c      	ite	eq
 8007d5a:	2301      	moveq	r3, #1
 8007d5c:	2300      	movne	r3, #0
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	4619      	mov	r1, r3
 8007d62:	4610      	mov	r0, r2
 8007d64:	f000 fa29 	bl	80081ba <_ZNKSt8functionIFvbEEclEb>
					}
				});
 8007d68:	bf00      	nop
 8007d6a:	3710      	adds	r7, #16
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>:
	explicit GPIOExtiController(GPIO_TypeDef *port, uint16_t pin) :
 8007d70:	b590      	push	{r4, r7, lr}
 8007d72:	b089      	sub	sp, #36	; 0x24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	88fa      	ldrh	r2, [r7, #6]
 8007d88:	809a      	strh	r2, [r3, #4]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4618      	mov	r0, r3
 8007d92:	f000 f9f7 	bl	8008184 <_ZNSt8functionIFvbEEC1EDn>
		m_extiIsrId = GPIOExtiCallbackHandler::getInstance().registerCallback(
 8007d96:	f7ff ff5b 	bl	8007c50 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	f107 0310 	add.w	r3, r7, #16
 8007da2:	4611      	mov	r1, r2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 fa27 	bl	80081f8 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_>
 8007daa:	f107 0310 	add.w	r3, r7, #16
 8007dae:	4619      	mov	r1, r3
 8007db0:	4620      	mov	r0, r4
 8007db2:	f7ff ff7b 	bl	8007cac <_ZN23GPIOExtiCallbackHandler16registerCallbackESt8functionIFvtEE>
 8007db6:	4602      	mov	r2, r0
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	609a      	str	r2, [r3, #8]
 8007dbc:	f107 0310 	add.w	r3, r7, #16
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff ff01 	bl	8007bc8 <_ZNSt8functionIFvtEED1Ev>
	}
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3724      	adds	r7, #36	; 0x24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd90      	pop	{r4, r7, pc}

08007dd0 <_ZN18GPIOExtiController15setExtiCallbackESt8functionIFvbEE>:
	~GPIOExtiController() {
		GPIOExtiCallbackHandler::getInstance().unregisterCallback(m_extiIsrId);
	}
	void setExtiCallback(std::function<void(bool)> extiCallback) {
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	6039      	str	r1, [r7, #0]
		m_extiCallback = extiCallback;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	6839      	ldr	r1, [r7, #0]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fa33 	bl	800824c <_ZNSt8functionIFvbEEaSERKS1_>
	}
 8007de6:	bf00      	nop
 8007de8:	3708      	adds	r7, #8
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}

08007dee <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>:
 8007dee:	b580      	push	{r7, lr}
 8007df0:	b082      	sub	sp, #8
 8007df2:	af00      	add	r7, sp, #0
 8007df4:	6078      	str	r0, [r7, #4]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7f9 fb27 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>:
			m_listeners[i](htim);
		}
	}

private:
	TimPeriodElapsedCallbackHandler() = default;
 8007e08:	b5b0      	push	{r4, r5, r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	240f      	movs	r4, #15
 8007e14:	461d      	mov	r5, r3
 8007e16:	2c00      	cmp	r4, #0
 8007e18:	db05      	blt.n	8007e26 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0x1e>
 8007e1a:	4628      	mov	r0, r5
 8007e1c:	f000 fa31 	bl	8008282 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>
 8007e20:	3510      	adds	r5, #16
 8007e22:	3c01      	subs	r4, #1
 8007e24:	e7f7      	b.n	8007e16 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0xe>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4618      	mov	r0, r3
 8007e32:	3708      	adds	r7, #8
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bdb0      	pop	{r4, r5, r7, pc}

08007e38 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>:
class TimPeriodElapsedCallbackHandler {
 8007e38:	b590      	push	{r4, r7, lr}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	429c      	cmp	r4, r3
 8007e50:	d004      	beq.n	8007e5c <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8007e52:	3c10      	subs	r4, #16
 8007e54:	4620      	mov	r0, r4
 8007e56:	f7ff ffca 	bl	8007dee <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
 8007e5a:	e7f7      	b.n	8007e4c <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x14>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	370c      	adds	r7, #12
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd90      	pop	{r4, r7, pc}
	...

08007e68 <__tcf_1>:
		static TimPeriodElapsedCallbackHandler instance;
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	4801      	ldr	r0, [pc, #4]	; (8007e74 <__tcf_1+0xc>)
 8007e6e:	f7ff ffe3 	bl	8007e38 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20000b10 	.word	0x20000b10

08007e78 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>:
	static TimPeriodElapsedCallbackHandler& getInstance() {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	af00      	add	r7, sp, #0
		static TimPeriodElapsedCallbackHandler instance;
 8007e7c:	4b12      	ldr	r3, [pc, #72]	; (8007ec8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	f3bf 8f5b 	dmb	ish
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	f003 0301 	and.w	r3, r3, #1
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	bf0c      	ite	eq
 8007e8e:	2301      	moveq	r3, #1
 8007e90:	2300      	movne	r3, #0
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d013      	beq.n	8007ec0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8007e98:	480b      	ldr	r0, [pc, #44]	; (8007ec8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8007e9a:	f013 fc4b 	bl	801b734 <__cxa_guard_acquire>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	bf14      	ite	ne
 8007ea4:	2301      	movne	r3, #1
 8007ea6:	2300      	moveq	r3, #0
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8007eae:	4807      	ldr	r0, [pc, #28]	; (8007ecc <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
 8007eb0:	f7ff ffaa 	bl	8007e08 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>
 8007eb4:	4806      	ldr	r0, [pc, #24]	; (8007ed0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x58>)
 8007eb6:	f013 ffd4 	bl	801be62 <atexit>
 8007eba:	4803      	ldr	r0, [pc, #12]	; (8007ec8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8007ebc:	f013 fc46 	bl	801b74c <__cxa_guard_release>
		return instance;
 8007ec0:	4b02      	ldr	r3, [pc, #8]	; (8007ecc <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
	}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20000c14 	.word	0x20000c14
 8007ecc:	20000b10 	.word	0x20000b10
 8007ed0:	08007e69 	.word	0x08007e69

08007ed4 <_ZN31TimPeriodElapsedCallbackHandler16registerCallbackESt8functionIFvP17TIM_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(TIM_HandleTypeDef*)> isr) {
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007ee4:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007eec:	1c59      	adds	r1, r3, #1
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8007ef4:	011b      	lsls	r3, r3, #4
 8007ef6:	687a      	ldr	r2, [r7, #4]
 8007ef8:	4413      	add	r3, r2
 8007efa:	6839      	ldr	r1, [r7, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 f9cd 	bl	800829c <_ZNSt8functionIFvP17TIM_HandleTypeDefEEaSERKS3_>
		return id;
 8007f02:	68fb      	ldr	r3, [r7, #12]
	}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_>:

class Timer {
public:
	explicit Timer(TIM_HandleTypeDef *htim) :
			m_htim(htim) {
		m_cpltIsr = TimPeriodElapsedCallbackHandler::getInstance().registerCallback([&](TIM_HandleTypeDef* htim){
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
			if(m_htim == htim){
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d104      	bne.n	8007f2c <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_+0x20>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
				m_overflow++;
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	3201      	adds	r2, #1
 8007f2a:	605a      	str	r2, [r3, #4]
			}
		});
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <_ZN5TimerC1EP17TIM_HandleTypeDef>:
	explicit Timer(TIM_HandleTypeDef *htim) :
 8007f38:	b590      	push	{r4, r7, lr}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
			m_htim(htim) {
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	683a      	ldr	r2, [r7, #0]
 8007f46:	601a      	str	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	605a      	str	r2, [r3, #4]
		m_cpltIsr = TimPeriodElapsedCallbackHandler::getInstance().registerCallback([&](TIM_HandleTypeDef* htim){
 8007f4e:	f7ff ff93 	bl	8007e78 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 8007f52:	4604      	mov	r4, r0
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	f107 0308 	add.w	r3, r7, #8
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f000 f9b9 	bl	80082d4 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_>
 8007f62:	f107 0308 	add.w	r3, r7, #8
 8007f66:	4619      	mov	r1, r3
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f7ff ffb3 	bl	8007ed4 <_ZN31TimPeriodElapsedCallbackHandler16registerCallbackESt8functionIFvP17TIM_HandleTypeDefEE>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	609a      	str	r2, [r3, #8]
 8007f74:	f107 0308 	add.w	r3, r7, #8
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7ff ff38 	bl	8007dee <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
	}
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4618      	mov	r0, r3
 8007f82:	371c      	adds	r7, #28
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd90      	pop	{r4, r7, pc}

08007f88 <_ZN5Timer5startEv>:

	void start() {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
		reset();
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f809 	bl	8007fa8 <_ZN5Timer5resetEv>
		HAL_TIM_Base_Start_IT(m_htim);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f00b ffc2 	bl	8013f24 <HAL_TIM_Base_Start_IT>
	}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <_ZN5Timer5resetEv>:

	void stop() {
		HAL_TIM_Base_Stop_IT(m_htim);
	}

	void reset() {
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
		m_overflow = 0;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	605a      	str	r2, [r3, #4]
		__HAL_TIM_SET_COUNTER(m_htim, 0);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8007fc0:	bf00      	nop
 8007fc2:	370c      	adds	r7, #12
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <_ZN5Timer3getEv>:

	[[nodiscard]] inline uint16_t get() {
 8007fcc:	b480      	push	{r7}
 8007fce:	b083      	sub	sp, #12
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
		return __HAL_TIM_GET_COUNTER(m_htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	b29b      	uxth	r3, r3
	}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	370c      	adds	r7, #12
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe8:	4770      	bx	lr

08007fea <_ZN5Timer8overflowEv>:
	[[nodiscard]] inline unsigned int overflow(){
 8007fea:	b480      	push	{r7}
 8007fec:	b083      	sub	sp, #12
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
		return m_overflow;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	685b      	ldr	r3, [r3, #4]
	}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	370c      	adds	r7, #12
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr

08008002 <_ZZN14FiducialSensorC4E14FiducialConfigENKUlbE_clEb>:

FiducialSensor::FiducialSensor(FiducialConfig config) :
		m_exti(config.m_gpio.m_port, config.m_gpio.m_pin), m_count(0), m_timer(config.m_htim), m_deltaTime(
				0), m_distanceBetweenInterrupts(
				config.m_distanceBetweenInterrupts) {
	m_exti.setExtiCallback([&](bool v) {
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
		this->extiCallback(v);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	78fa      	ldrb	r2, [r7, #3]
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f85e 	bl	80080d8 <_ZN14FiducialSensor12extiCallbackEb>
	});
 800801c:	bf00      	nop
 800801e:	3708      	adds	r7, #8
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <_ZN14FiducialSensorC1E14FiducialConfig>:
FiducialSensor::FiducialSensor(FiducialConfig config) :
 8008024:	b084      	sub	sp, #16
 8008026:	b590      	push	{r4, r7, lr}
 8008028:	b087      	sub	sp, #28
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8008032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
				config.m_distanceBetweenInterrupts) {
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800803a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800803c:	4618      	mov	r0, r3
 800803e:	f7ff fe97 	bl	8007d70 <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	61da      	str	r2, [r3, #28]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3320      	adds	r3, #32
 800804c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800804e:	4611      	mov	r1, r2
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff ff71 	bl	8007f38 <_ZN5TimerC1EP17TIM_HandleTypeDef>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	62da      	str	r2, [r3, #44]	; 0x2c
 800805c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	631a      	str	r2, [r3, #48]	; 0x30
	m_exti.setExtiCallback([&](bool v) {
 8008062:	687c      	ldr	r4, [r7, #4]
 8008064:	687a      	ldr	r2, [r7, #4]
 8008066:	f107 0308 	add.w	r3, r7, #8
 800806a:	4611      	mov	r1, r2
 800806c:	4618      	mov	r0, r3
 800806e:	f000 f95b 	bl	8008328 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_>
 8008072:	f107 0308 	add.w	r3, r7, #8
 8008076:	4619      	mov	r1, r3
 8008078:	4620      	mov	r0, r4
 800807a:	f7ff fea9 	bl	8007dd0 <_ZN18GPIOExtiController15setExtiCallbackESt8functionIFvbEE>
 800807e:	f107 0308 	add.w	r3, r7, #8
 8008082:	4618      	mov	r0, r3
 8008084:	f7ff fe2e 	bl	8007ce4 <_ZNSt8functionIFvbEED1Ev>
	m_timer.start();
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3320      	adds	r3, #32
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff ff7b 	bl	8007f88 <_ZN5Timer5startEv>
}
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	4618      	mov	r0, r3
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800809e:	b004      	add	sp, #16
 80080a0:	4770      	bx	lr

080080a2 <_ZN14FiducialSensor19estimateVelocityMPSEv>:

void FiducialSensor::reset() {
	m_timer.reset();
}

float FiducialSensor::estimateVelocityMPS() {
 80080a2:	b480      	push	{r7}
 80080a4:	b083      	sub	sp, #12
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
	return m_distanceBetweenInterrupts / (float) m_deltaTime;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ae:	ee07 3a90 	vmov	s15, r3
 80080b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ba:	ee07 3a90 	vmov	s15, r3
 80080be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80080c6:	eef0 7a66 	vmov.f32	s15, s13
}
 80080ca:	eeb0 0a67 	vmov.f32	s0, s15
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <_ZN14FiducialSensor12extiCallbackEb>:

void FiducialSensor::extiCallback(bool v) {
 80080d8:	b590      	push	{r4, r7, lr}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
	m_deltaTime = (m_timer.get() + m_timer.overflow() * 0xFFFF) / 10;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	3320      	adds	r3, #32
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7ff ff6f 	bl	8007fcc <_ZN5Timer3getEv>
 80080ee:	4603      	mov	r3, r0
 80080f0:	461c      	mov	r4, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3320      	adds	r3, #32
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7ff ff77 	bl	8007fea <_ZN5Timer8overflowEv>
 80080fc:	4602      	mov	r2, r0
 80080fe:	4613      	mov	r3, r2
 8008100:	041b      	lsls	r3, r3, #16
 8008102:	1a9b      	subs	r3, r3, r2
 8008104:	4423      	add	r3, r4
 8008106:	4a0a      	ldr	r2, [pc, #40]	; (8008130 <_ZN14FiducialSensor12extiCallbackEb+0x58>)
 8008108:	fba2 2303 	umull	r2, r3, r2, r3
 800810c:	08da      	lsrs	r2, r3, #3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	62da      	str	r2, [r3, #44]	; 0x2c
	m_timer.reset();
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	3320      	adds	r3, #32
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff ff46 	bl	8007fa8 <_ZN5Timer5resetEv>
	m_count++;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	61da      	str	r2, [r3, #28]
}
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	bd90      	pop	{r4, r7, pc}
 800812e:	bf00      	nop
 8008130:	cccccccd 	.word	0xcccccccd

08008134 <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4618      	mov	r0, r3
 8008140:	f7f9 f976 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <_ZNSt8functionIFvtEEaSERKS1_>:
      operator=(const function& __x)
 800814e:	b580      	push	{r7, lr}
 8008150:	b086      	sub	sp, #24
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
 8008156:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8008158:	f107 0308 	add.w	r3, r7, #8
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	4618      	mov	r0, r3
 8008160:	f000 f90c 	bl	800837c <_ZNSt8functionIFvtEEC1ERKS1_>
 8008164:	f107 0308 	add.w	r3, r7, #8
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	4618      	mov	r0, r3
 800816c:	f000 f928 	bl	80083c0 <_ZNSt8functionIFvtEE4swapERS1_>
 8008170:	f107 0308 	add.w	r3, r7, #8
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fd27 	bl	8007bc8 <_ZNSt8functionIFvtEED1Ev>
	return *this;
 800817a:	687b      	ldr	r3, [r7, #4]
      }
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <_ZNSt8functionIFvbEEC1EDn>:
      function(nullptr_t) noexcept
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	f7f9 f94d 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4618      	mov	r0, r3
 800819a:	3708      	adds	r7, #8
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}

080081a0 <_ZStneIvJbEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f955 	bl	800845a <_ZNKSt8functionIFvbEEcvbEv>
 80081b0:	4603      	mov	r3, r0
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <_ZNKSt8functionIFvbEEclEb>:
    function<_Res(_ArgTypes...)>::
 80081ba:	b5b0      	push	{r4, r5, r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
 80081c2:	460b      	mov	r3, r1
 80081c4:	70fb      	strb	r3, [r7, #3]
      if (_M_empty())
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7f9 f952 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <_ZNKSt8functionIFvbEEclEb+0x1e>
	__throw_bad_function_call();
 80081d4:	f013 fac2 	bl	801b75c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68dc      	ldr	r4, [r3, #12]
 80081dc:	687d      	ldr	r5, [r7, #4]
 80081de:	1cfb      	adds	r3, r7, #3
 80081e0:	4618      	mov	r0, r3
 80081e2:	f000 f94a 	bl	800847a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80081e6:	4603      	mov	r3, r0
 80081e8:	4619      	mov	r1, r3
 80081ea:	4628      	mov	r0, r5
 80081ec:	47a0      	blx	r4
 80081ee:	bf00      	nop
    }
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080081f8 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80081f8:	b590      	push	{r4, r7, lr}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4618      	mov	r0, r3
 8008206:	f7f9 f913 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800820a:	463b      	mov	r3, r7
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f93f 	bl	8008490 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E21_M_not_empty_functionIS4_EEbRKT_>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00f      	beq.n	8008238 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8008218:	687c      	ldr	r4, [r7, #4]
 800821a:	463b      	mov	r3, r7
 800821c:	4618      	mov	r0, r3
 800821e:	f000 f942 	bl	80084a6 <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8008222:	4603      	mov	r3, r0
 8008224:	4619      	mov	r1, r3
 8008226:	4620      	mov	r0, r4
 8008228:	f000 f948 	bl	80084bc <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a05      	ldr	r2, [pc, #20]	; (8008244 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x4c>)
 8008230:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a04      	ldr	r2, [pc, #16]	; (8008248 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x50>)
 8008236:	609a      	str	r2, [r3, #8]
      }
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4618      	mov	r0, r3
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	bd90      	pop	{r4, r7, pc}
 8008242:	bf00      	nop
 8008244:	080084e1 	.word	0x080084e1
 8008248:	0800850b 	.word	0x0800850b

0800824c <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 800824c:	b580      	push	{r7, lr}
 800824e:	b086      	sub	sp, #24
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8008256:	f107 0308 	add.w	r3, r7, #8
 800825a:	6839      	ldr	r1, [r7, #0]
 800825c:	4618      	mov	r0, r3
 800825e:	f000 f973 	bl	8008548 <_ZNSt8functionIFvbEEC1ERKS1_>
 8008262:	f107 0308 	add.w	r3, r7, #8
 8008266:	6879      	ldr	r1, [r7, #4]
 8008268:	4618      	mov	r0, r3
 800826a:	f000 f8d5 	bl	8008418 <_ZNSt8functionIFvbEE4swapERS1_>
 800826e:	f107 0308 	add.w	r3, r7, #8
 8008272:	4618      	mov	r0, r3
 8008274:	f7ff fd36 	bl	8007ce4 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 8008278:	687b      	ldr	r3, [r7, #4]
      }
 800827a:	4618      	mov	r0, r3
 800827c:	3718      	adds	r7, #24
 800827e:	46bd      	mov	sp, r7
 8008280:	bd80      	pop	{r7, pc}

08008282 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>:
      function() noexcept
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4618      	mov	r0, r3
 800828e:	f7f9 f8cf 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <_ZNSt8functionIFvP17TIM_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 80082a6:	f107 0308 	add.w	r3, r7, #8
 80082aa:	6839      	ldr	r1, [r7, #0]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 f96d 	bl	800858c <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_>
 80082b2:	f107 0308 	add.w	r3, r7, #8
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4618      	mov	r0, r3
 80082ba:	f000 f989 	bl	80085d0 <_ZNSt8functionIFvP17TIM_HandleTypeDefEE4swapERS3_>
 80082be:	f107 0308 	add.w	r3, r7, #8
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff fd93 	bl	8007dee <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
	return *this;
 80082c8:	687b      	ldr	r3, [r7, #4]
      }
 80082ca:	4618      	mov	r0, r3
 80082cc:	3718      	adds	r7, #24
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80082d4:	b590      	push	{r4, r7, lr}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4618      	mov	r0, r3
 80082e2:	f7f9 f8a5 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80082e6:	463b      	mov	r3, r7
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f99d 	bl	8008628 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E21_M_not_empty_functionIS4_EEbRKT_>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00f      	beq.n	8008314 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80082f4:	687c      	ldr	r4, [r7, #4]
 80082f6:	463b      	mov	r3, r7
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 f9a0 	bl	800863e <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 80082fe:	4603      	mov	r3, r0
 8008300:	4619      	mov	r1, r3
 8008302:	4620      	mov	r0, r4
 8008304:	f000 f9a6 	bl	8008654 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a05      	ldr	r2, [pc, #20]	; (8008320 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x4c>)
 800830c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a04      	ldr	r2, [pc, #16]	; (8008324 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x50>)
 8008312:	609a      	str	r2, [r3, #8]
      }
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	bd90      	pop	{r4, r7, pc}
 800831e:	bf00      	nop
 8008320:	08008679 	.word	0x08008679
 8008324:	080086a3 	.word	0x080086a3

08008328 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8008328:	b590      	push	{r4, r7, lr}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	4618      	mov	r0, r3
 8008336:	f7f9 f87b 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800833a:	463b      	mov	r3, r7
 800833c:	4618      	mov	r0, r3
 800833e:	f000 f9cf 	bl	80086e0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E21_M_not_empty_functionIS3_EEbRKT_>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00f      	beq.n	8008368 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8008348:	687c      	ldr	r4, [r7, #4]
 800834a:	463b      	mov	r3, r7
 800834c:	4618      	mov	r0, r3
 800834e:	f000 f9d2 	bl	80086f6 <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8008352:	4603      	mov	r3, r0
 8008354:	4619      	mov	r1, r3
 8008356:	4620      	mov	r0, r4
 8008358:	f000 f9d8 	bl	800870c <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a05      	ldr	r2, [pc, #20]	; (8008374 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x4c>)
 8008360:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a04      	ldr	r2, [pc, #16]	; (8008378 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x50>)
 8008366:	609a      	str	r2, [r3, #8]
      }
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	bd90      	pop	{r4, r7, pc}
 8008372:	bf00      	nop
 8008374:	08008731 	.word	0x08008731
 8008378:	0800875b 	.word	0x0800875b

0800837c <_ZNSt8functionIFvtEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4618      	mov	r0, r3
 800838a:	f7f9 f851 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800838e:	6838      	ldr	r0, [r7, #0]
 8008390:	f000 fa02 	bl	8008798 <_ZNKSt8functionIFvtEEcvbEv>
 8008394:	4603      	mov	r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00d      	beq.n	80083b6 <_ZNSt8functionIFvtEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	6839      	ldr	r1, [r7, #0]
 80083a2:	2202      	movs	r2, #2
 80083a4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	689a      	ldr	r2, [r3, #8]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	609a      	str	r2, [r3, #8]
    }
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	4618      	mov	r0, r3
 80083ba:	3708      	adds	r7, #8
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <_ZNSt8functionIFvtEE4swapERS1_>:
      void swap(function& __x) noexcept
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	683a      	ldr	r2, [r7, #0]
 80083ce:	4611      	mov	r1, r2
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7f9 fa48 	bl	8001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f103 0208 	add.w	r2, r3, #8
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	3308      	adds	r3, #8
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f7f9 fa71 	bl	80018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f103 020c 	add.w	r2, r3, #12
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	330c      	adds	r3, #12
 80083f2:	4619      	mov	r1, r3
 80083f4:	4610      	mov	r0, r2
 80083f6:	f000 f9ea 	bl	80087ce <_ZSt4swapIPFvRKSt9_Any_dataOtEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 80083fa:	bf00      	nop
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008402:	b480      	push	{r7}
 8008404:	b083      	sub	sp, #12
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4618      	mov	r0, r3
 800840e:	370c      	adds	r7, #12
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	683a      	ldr	r2, [r7, #0]
 8008426:	4611      	mov	r1, r2
 8008428:	4618      	mov	r0, r3
 800842a:	f7f9 fa1c 	bl	8001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f103 0208 	add.w	r2, r3, #8
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	3308      	adds	r3, #8
 8008438:	4619      	mov	r1, r3
 800843a:	4610      	mov	r0, r2
 800843c:	f7f9 fa45 	bl	80018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f103 020c 	add.w	r2, r3, #12
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	330c      	adds	r3, #12
 800844a:	4619      	mov	r1, r3
 800844c:	4610      	mov	r0, r2
 800844e:	f000 f9e8 	bl	8008822 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 8008452:	bf00      	nop
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 800845a:	b580      	push	{r7, lr}
 800845c:	b082      	sub	sp, #8
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4618      	mov	r0, r3
 8008466:	f7f9 f804 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 800846a:	4603      	mov	r3, r0
 800846c:	f083 0301 	eor.w	r3, r3, #1
 8008470:	b2db      	uxtb	r3, r3
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800847a:	b480      	push	{r7}
 800847c:	b083      	sub	sp, #12
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
	  { return true; }
 8008498:	2301      	movs	r3, #1
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80084bc:	b590      	push	{r4, r7, lr}
 80084be:	b083      	sub	sp, #12
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80084c6:	6838      	ldr	r0, [r7, #0]
 80084c8:	f7ff ffed 	bl	80084a6 <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 80084cc:	4603      	mov	r3, r0
 80084ce:	4622      	mov	r2, r4
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f9c4 	bl	8008860 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 80084d8:	bf00      	nop
 80084da:	370c      	adds	r7, #12
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd90      	pop	{r4, r7, pc}

080084e0 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E9_M_invokeERKSt9_Any_dataOt>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80084e0:	b590      	push	{r4, r7, lr}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f9d1 	bl	8008892 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 80084f0:	4604      	mov	r4, r0
 80084f2:	6838      	ldr	r0, [r7, #0]
 80084f4:	f7ff ff85 	bl	8008402 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80084f8:	4603      	mov	r3, r0
 80084fa:	4619      	mov	r1, r3
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 f9d9 	bl	80088b4 <_ZSt10__invoke_rIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 8008502:	bf00      	nop
      }
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	bd90      	pop	{r4, r7, pc}

0800850a <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800850a:	b590      	push	{r4, r7, lr}
 800850c:	b085      	sub	sp, #20
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	4613      	mov	r3, r2
 8008516:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8008518:	79fb      	ldrb	r3, [r7, #7]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d109      	bne.n	8008532 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 f9de 	bl	80088e0 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
 8008524:	4604      	mov	r4, r0
 8008526:	68b8      	ldr	r0, [r7, #8]
 8008528:	f000 f9b3 	bl	8008892 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 800852c:	4603      	mov	r3, r0
 800852e:	6023      	str	r3, [r4, #0]
	    break;
 8008530:	e005      	b.n	800853e <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8008532:	79fb      	ldrb	r3, [r7, #7]
 8008534:	461a      	mov	r2, r3
 8008536:	68b9      	ldr	r1, [r7, #8]
 8008538:	68f8      	ldr	r0, [r7, #12]
 800853a:	f000 f9dd 	bl	80088f8 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800853e:	2300      	movs	r3, #0
      }
 8008540:	4618      	mov	r0, r3
 8008542:	3714      	adds	r7, #20
 8008544:	46bd      	mov	sp, r7
 8008546:	bd90      	pop	{r4, r7, pc}

08008548 <_ZNSt8functionIFvbEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4618      	mov	r0, r3
 8008556:	f7f8 ff6b 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800855a:	6838      	ldr	r0, [r7, #0]
 800855c:	f7ff ff7d 	bl	800845a <_ZNKSt8functionIFvbEEcvbEv>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00d      	beq.n	8008582 <_ZNSt8functionIFvbEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	2202      	movs	r2, #2
 8008570:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	609a      	str	r2, [r3, #8]
    }
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	4618      	mov	r0, r3
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	4618      	mov	r0, r3
 800859a:	f7f8 ff49 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800859e:	6838      	ldr	r0, [r7, #0]
 80085a0:	f000 f9d5 	bl	800894e <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEcvbEv>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00d      	beq.n	80085c6 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	6839      	ldr	r1, [r7, #0]
 80085b2:	2202      	movs	r2, #2
 80085b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	68da      	ldr	r2, [r3, #12]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	689a      	ldr	r2, [r3, #8]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	609a      	str	r2, [r3, #8]
    }
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <_ZNSt8functionIFvP17TIM_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	4611      	mov	r1, r2
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7f9 f940 	bl	8001866 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f103 0208 	add.w	r2, r3, #8
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	3308      	adds	r3, #8
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f7f9 f969 	bl	80018ca <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f103 020c 	add.w	r2, r3, #12
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	330c      	adds	r3, #12
 8008602:	4619      	mov	r1, r3
 8008604:	4610      	mov	r0, r2
 8008606:	f000 f9bd 	bl	8008984 <_ZSt4swapIPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800860a:	bf00      	nop
 800860c:	3708      	adds	r7, #8
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}

08008612 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008612:	b480      	push	{r7}
 8008614:	b083      	sub	sp, #12
 8008616:	af00      	add	r7, sp, #0
 8008618:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4618      	mov	r0, r3
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8008628:	b480      	push	{r7}
 800862a:	b083      	sub	sp, #12
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8008630:	2301      	movs	r3, #1
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800863e:	b480      	push	{r7}
 8008640:	b083      	sub	sp, #12
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4618      	mov	r0, r3
 800864a:	370c      	adds	r7, #12
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8008654:	b590      	push	{r4, r7, lr}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800865e:	6838      	ldr	r0, [r7, #0]
 8008660:	f7ff ffed 	bl	800863e <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 8008664:	4603      	mov	r3, r0
 8008666:	4622      	mov	r2, r4
 8008668:	4619      	mov	r1, r3
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f9a9 	bl	80089c2 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8008670:	bf00      	nop
 8008672:	370c      	adds	r7, #12
 8008674:	46bd      	mov	sp, r7
 8008676:	bd90      	pop	{r4, r7, pc}

08008678 <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8008678:	b590      	push	{r4, r7, lr}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f9b6 	bl	80089f4 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 8008688:	4604      	mov	r4, r0
 800868a:	6838      	ldr	r0, [r7, #0]
 800868c:	f7ff ffc1 	bl	8008612 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8008690:	4603      	mov	r3, r0
 8008692:	4619      	mov	r1, r3
 8008694:	4620      	mov	r0, r4
 8008696:	f000 f9be 	bl	8008a16 <_ZSt10__invoke_rIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800869a:	bf00      	nop
      }
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd90      	pop	{r4, r7, pc}

080086a2 <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80086a2:	b590      	push	{r4, r7, lr}
 80086a4:	b085      	sub	sp, #20
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	4613      	mov	r3, r2
 80086ae:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d109      	bne.n	80086ca <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f000 f9c3 	bl	8008a42 <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
 80086bc:	4604      	mov	r4, r0
 80086be:	68b8      	ldr	r0, [r7, #8]
 80086c0:	f000 f998 	bl	80089f4 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 80086c4:	4603      	mov	r3, r0
 80086c6:	6023      	str	r3, [r4, #0]
	    break;
 80086c8:	e005      	b.n	80086d6 <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80086ca:	79fb      	ldrb	r3, [r7, #7]
 80086cc:	461a      	mov	r2, r3
 80086ce:	68b9      	ldr	r1, [r7, #8]
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f9c2 	bl	8008a5a <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 80086d6:	2300      	movs	r3, #0
      }
 80086d8:	4618      	mov	r0, r3
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd90      	pop	{r4, r7, pc}

080086e0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
	  { return true; }
 80086e8:	2301      	movs	r3, #1
 80086ea:	4618      	mov	r0, r3
 80086ec:	370c      	adds	r7, #12
 80086ee:	46bd      	mov	sp, r7
 80086f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f4:	4770      	bx	lr

080086f6 <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80086f6:	b480      	push	{r7}
 80086f8:	b083      	sub	sp, #12
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr

0800870c <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800870c:	b590      	push	{r4, r7, lr}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8008716:	6838      	ldr	r0, [r7, #0]
 8008718:	f7ff ffed 	bl	80086f6 <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800871c:	4603      	mov	r3, r0
 800871e:	4622      	mov	r2, r4
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f9c4 	bl	8008ab0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	bd90      	pop	{r4, r7, pc}

08008730 <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8008730:	b590      	push	{r4, r7, lr}
 8008732:	b083      	sub	sp, #12
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 f9d1 	bl	8008ae2 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8008740:	4604      	mov	r4, r0
 8008742:	6838      	ldr	r0, [r7, #0]
 8008744:	f7ff fe99 	bl	800847a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8008748:	4603      	mov	r3, r0
 800874a:	4619      	mov	r1, r3
 800874c:	4620      	mov	r0, r4
 800874e:	f000 f9d9 	bl	8008b04 <_ZSt10__invoke_rIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>
				     std::forward<_ArgTypes>(__args)...);
 8008752:	bf00      	nop
      }
 8008754:	370c      	adds	r7, #12
 8008756:	46bd      	mov	sp, r7
 8008758:	bd90      	pop	{r4, r7, pc}

0800875a <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800875a:	b590      	push	{r4, r7, lr}
 800875c:	b085      	sub	sp, #20
 800875e:	af00      	add	r7, sp, #0
 8008760:	60f8      	str	r0, [r7, #12]
 8008762:	60b9      	str	r1, [r7, #8]
 8008764:	4613      	mov	r3, r2
 8008766:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	2b01      	cmp	r3, #1
 800876c:	d109      	bne.n	8008782 <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f000 f9de 	bl	8008b30 <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
 8008774:	4604      	mov	r4, r0
 8008776:	68b8      	ldr	r0, [r7, #8]
 8008778:	f000 f9b3 	bl	8008ae2 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800877c:	4603      	mov	r3, r0
 800877e:	6023      	str	r3, [r4, #0]
	    break;
 8008780:	e005      	b.n	800878e <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8008782:	79fb      	ldrb	r3, [r7, #7]
 8008784:	461a      	mov	r2, r3
 8008786:	68b9      	ldr	r1, [r7, #8]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 f9dd 	bl	8008b48 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800878e:	2300      	movs	r3, #0
      }
 8008790:	4618      	mov	r0, r3
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	bd90      	pop	{r4, r7, pc}

08008798 <_ZNKSt8functionIFvtEEcvbEv>:
      explicit operator bool() const noexcept
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7f8 fe65 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80087a8:	4603      	mov	r3, r0
 80087aa:	f083 0301 	eor.w	r3, r3, #1
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4618      	mov	r0, r3
 80087c4:	370c      	adds	r7, #12
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <_ZSt4swapIPFvRKSt9_Any_dataOtEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b084      	sub	sp, #16
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7ff ffed 	bl	80087b8 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 80087de:	4603      	mov	r3, r0
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80087e4:	6838      	ldr	r0, [r7, #0]
 80087e6:	f7ff ffe7 	bl	80087b8 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 80087ea:	4603      	mov	r3, r0
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80087f2:	f107 030c 	add.w	r3, r7, #12
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7ff ffde 	bl	80087b8 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 80087fc:	4603      	mov	r3, r0
 80087fe:	681a      	ldr	r2, [r3, #0]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	601a      	str	r2, [r3, #0]
    }
 8008804:	bf00      	nop
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8008822:	b580      	push	{r7, lr}
 8008824:	b084      	sub	sp, #16
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7ff ffed 	bl	800880c <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8008832:	4603      	mov	r3, r0
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8008838:	6838      	ldr	r0, [r7, #0]
 800883a:	f7ff ffe7 	bl	800880c <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800883e:	4603      	mov	r3, r0
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8008846:	f107 030c 	add.w	r3, r7, #12
 800884a:	4618      	mov	r0, r3
 800884c:	f7ff ffde 	bl	800880c <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8008850:	4603      	mov	r3, r0
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	601a      	str	r2, [r3, #0]
    }
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8008860:	b590      	push	{r4, r7, lr}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	60f8      	str	r0, [r7, #12]
 8008868:	60b9      	str	r1, [r7, #8]
 800886a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800886c:	68b8      	ldr	r0, [r7, #8]
 800886e:	f7ff fe1a 	bl	80084a6 <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8008872:	4604      	mov	r4, r0
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f7f9 fdd9 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800887a:	4603      	mov	r3, r0
 800887c:	4619      	mov	r1, r3
 800887e:	2004      	movs	r0, #4
 8008880:	f7f9 fdc8 	bl	8002414 <_ZnwjPv>
 8008884:	4602      	mov	r2, r0
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	bf00      	nop
 800888c:	3714      	adds	r7, #20
 800888e:	46bd      	mov	sp, r7
 8008890:	bd90      	pop	{r4, r7, pc}

08008892 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 f97f 	bl	8008b9e <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>
 80088a0:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 f987 	bl	8008bb6 <_ZSt11__addressofIKZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EPT_RS5_>
 80088a8:	4603      	mov	r3, r0
 80088aa:	bf00      	nop
	}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3710      	adds	r7, #16
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <_ZSt10__invoke_rIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80088b4:	b5b0      	push	{r4, r5, r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 f984 	bl	8008bcc <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>
 80088c4:	4604      	mov	r4, r0
 80088c6:	6838      	ldr	r0, [r7, #0]
 80088c8:	f7ff fd9b 	bl	8008402 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80088cc:	4603      	mov	r3, r0
 80088ce:	461a      	mov	r2, r3
 80088d0:	4621      	mov	r1, r4
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 f985 	bl	8008be2 <_ZSt13__invoke_implIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEET_St14__invoke_otherOT0_DpOT1_>
    }
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bdb0      	pop	{r4, r5, r7, pc}

080088e0 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>:
      _M_access()
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f7f9 fd9f 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 80088ee:	4603      	mov	r3, r0
 80088f0:	4618      	mov	r0, r3
 80088f2:	3708      	adds	r7, #8
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80088f8:	b5b0      	push	{r4, r5, r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008906:	79fb      	ldrb	r3, [r7, #7]
 8008908:	2b03      	cmp	r3, #3
 800890a:	d016      	beq.n	800893a <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800890c:	2b03      	cmp	r3, #3
 800890e:	dc19      	bgt.n	8008944 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8008910:	2b01      	cmp	r3, #1
 8008912:	d002      	beq.n	800891a <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8008914:	2b02      	cmp	r3, #2
 8008916:	d00a      	beq.n	800892e <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8008918:	e014      	b.n	8008944 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f7ff ffe0 	bl	80088e0 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
 8008920:	4604      	mov	r4, r0
 8008922:	68b8      	ldr	r0, [r7, #8]
 8008924:	f7ff ffb5 	bl	8008892 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 8008928:	4603      	mov	r3, r0
 800892a:	6023      	str	r3, [r4, #0]
	      break;
 800892c:	e00a      	b.n	8008944 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800892e:	462a      	mov	r2, r5
 8008930:	68b9      	ldr	r1, [r7, #8]
 8008932:	68f8      	ldr	r0, [r7, #12]
 8008934:	f000 f96c 	bl	8008c10 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8008938:	e004      	b.n	8008944 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800893a:	4621      	mov	r1, r4
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	f000 f980 	bl	8008c42 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8008942:	bf00      	nop
	  return false;
 8008944:	2300      	movs	r3, #0
	}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bdb0      	pop	{r4, r5, r7, pc}

0800894e <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4618      	mov	r0, r3
 800895a:	f7f8 fd8a 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 800895e:	4603      	mov	r3, r0
 8008960:	f083 0301 	eor.w	r3, r3, #1
 8008964:	b2db      	uxtb	r3, r3
 8008966:	4618      	mov	r0, r3
 8008968:	3708      	adds	r7, #8
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800896e:	b480      	push	{r7}
 8008970:	b083      	sub	sp, #12
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4618      	mov	r0, r3
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <_ZSt4swapIPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8008984:	b580      	push	{r7, lr}
 8008986:	b084      	sub	sp, #16
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f7ff ffed 	bl	800896e <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8008994:	4603      	mov	r3, r0
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800899a:	6838      	ldr	r0, [r7, #0]
 800899c:	f7ff ffe7 	bl	800896e <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80089a0:	4603      	mov	r3, r0
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80089a8:	f107 030c 	add.w	r3, r7, #12
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff ffde 	bl	800896e <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80089b2:	4603      	mov	r3, r0
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	601a      	str	r2, [r3, #0]
    }
 80089ba:	bf00      	nop
 80089bc:	3710      	adds	r7, #16
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80089c2:	b590      	push	{r4, r7, lr}
 80089c4:	b085      	sub	sp, #20
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	60f8      	str	r0, [r7, #12]
 80089ca:	60b9      	str	r1, [r7, #8]
 80089cc:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80089ce:	68b8      	ldr	r0, [r7, #8]
 80089d0:	f7ff fe35 	bl	800863e <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 80089d4:	4604      	mov	r4, r0
 80089d6:	68f8      	ldr	r0, [r7, #12]
 80089d8:	f7f9 fd28 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 80089dc:	4603      	mov	r3, r0
 80089de:	4619      	mov	r1, r3
 80089e0:	2004      	movs	r0, #4
 80089e2:	f7f9 fd17 	bl	8002414 <_ZnwjPv>
 80089e6:	4602      	mov	r2, r0
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	6013      	str	r3, [r2, #0]
 80089ec:	bf00      	nop
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd90      	pop	{r4, r7, pc}

080089f4 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f92c 	bl	8008c5a <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>
 8008a02:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8008a04:	68f8      	ldr	r0, [r7, #12]
 8008a06:	f000 f934 	bl	8008c72 <_ZSt11__addressofIKZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EPT_RS5_>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	bf00      	nop
	}
 8008a0e:	4618      	mov	r0, r3
 8008a10:	3710      	adds	r7, #16
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <_ZSt10__invoke_rIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8008a16:	b5b0      	push	{r4, r5, r7, lr}
 8008a18:	b082      	sub	sp, #8
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 f931 	bl	8008c88 <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8008a26:	4604      	mov	r4, r0
 8008a28:	6838      	ldr	r0, [r7, #0]
 8008a2a:	f7ff fdf2 	bl	8008612 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	461a      	mov	r2, r3
 8008a32:	4621      	mov	r1, r4
 8008a34:	4628      	mov	r0, r5
 8008a36:	f000 f932 	bl	8008c9e <_ZSt13__invoke_implIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bdb0      	pop	{r4, r5, r7, pc}

08008a42 <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>:
      _M_access()
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b082      	sub	sp, #8
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f7f9 fcee 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8008a50:	4603      	mov	r3, r0
 8008a52:	4618      	mov	r0, r3
 8008a54:	3708      	adds	r7, #8
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008a5a:	b5b0      	push	{r4, r5, r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	60f8      	str	r0, [r7, #12]
 8008a62:	60b9      	str	r1, [r7, #8]
 8008a64:	4613      	mov	r3, r2
 8008a66:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008a68:	79fb      	ldrb	r3, [r7, #7]
 8008a6a:	2b03      	cmp	r3, #3
 8008a6c:	d016      	beq.n	8008a9c <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	dc19      	bgt.n	8008aa6 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d002      	beq.n	8008a7c <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d00a      	beq.n	8008a90 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8008a7a:	e014      	b.n	8008aa6 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8008a7c:	68f8      	ldr	r0, [r7, #12]
 8008a7e:	f7ff ffe0 	bl	8008a42 <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
 8008a82:	4604      	mov	r4, r0
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7ff ffb5 	bl	80089f4 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	6023      	str	r3, [r4, #0]
	      break;
 8008a8e:	e00a      	b.n	8008aa6 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8008a90:	462a      	mov	r2, r5
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 f919 	bl	8008ccc <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8008a9a:	e004      	b.n	8008aa6 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	68f8      	ldr	r0, [r7, #12]
 8008aa0:	f000 f92d 	bl	8008cfe <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8008aa4:	bf00      	nop
	  return false;
 8008aa6:	2300      	movs	r3, #0
	}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3710      	adds	r7, #16
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bdb0      	pop	{r4, r5, r7, pc}

08008ab0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8008ab0:	b590      	push	{r4, r7, lr}
 8008ab2:	b085      	sub	sp, #20
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8008abc:	68b8      	ldr	r0, [r7, #8]
 8008abe:	f7ff fe1a 	bl	80086f6 <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f7f9 fcb1 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8008aca:	4603      	mov	r3, r0
 8008acc:	4619      	mov	r1, r3
 8008ace:	2004      	movs	r0, #4
 8008ad0:	f7f9 fca0 	bl	8002414 <_ZnwjPv>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	6823      	ldr	r3, [r4, #0]
 8008ad8:	6013      	str	r3, [r2, #0]
 8008ada:	bf00      	nop
 8008adc:	3714      	adds	r7, #20
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd90      	pop	{r4, r7, pc}

08008ae2 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f913 	bl	8008d16 <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>
 8008af0:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f000 f91b 	bl	8008d2e <_ZSt11__addressofIKZN14FiducialSensorC4E14FiducialConfigEUlbE_EPT_RS4_>
 8008af8:	4603      	mov	r3, r0
 8008afa:	bf00      	nop
	}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <_ZSt10__invoke_rIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8008b04:	b5b0      	push	{r4, r5, r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f918 	bl	8008d44 <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8008b14:	4604      	mov	r4, r0
 8008b16:	6838      	ldr	r0, [r7, #0]
 8008b18:	f7ff fcaf 	bl	800847a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	461a      	mov	r2, r3
 8008b20:	4621      	mov	r1, r4
 8008b22:	4628      	mov	r0, r5
 8008b24:	f000 f919 	bl	8008d5a <_ZSt13__invoke_implIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
    }
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bdb0      	pop	{r4, r5, r7, pc}

08008b30 <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>:
      _M_access()
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f7f9 fc77 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	4618      	mov	r0, r3
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008b48:	b5b0      	push	{r4, r5, r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	4613      	mov	r3, r2
 8008b54:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008b56:	79fb      	ldrb	r3, [r7, #7]
 8008b58:	2b03      	cmp	r3, #3
 8008b5a:	d016      	beq.n	8008b8a <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8008b5c:	2b03      	cmp	r3, #3
 8008b5e:	dc19      	bgt.n	8008b94 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d002      	beq.n	8008b6a <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8008b64:	2b02      	cmp	r3, #2
 8008b66:	d00a      	beq.n	8008b7e <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8008b68:	e014      	b.n	8008b94 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f7ff ffe0 	bl	8008b30 <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
 8008b70:	4604      	mov	r4, r0
 8008b72:	68b8      	ldr	r0, [r7, #8]
 8008b74:	f7ff ffb5 	bl	8008ae2 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	6023      	str	r3, [r4, #0]
	      break;
 8008b7c:	e00a      	b.n	8008b94 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8008b7e:	462a      	mov	r2, r5
 8008b80:	68b9      	ldr	r1, [r7, #8]
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 f900 	bl	8008d88 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8008b88:	e004      	b.n	8008b94 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f000 f914 	bl	8008dba <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8008b92:	bf00      	nop
	  return false;
 8008b94:	2300      	movs	r3, #0
	}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3710      	adds	r7, #16
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bdb0      	pop	{r4, r5, r7, pc}

08008b9e <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>:
      _M_access() const
 8008b9e:	b580      	push	{r7, lr}
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	af00      	add	r7, sp, #0
 8008ba4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7f9 fc4b 	bl	8002442 <_ZNKSt9_Any_data9_M_accessEv>
 8008bac:	4603      	mov	r3, r0
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <_ZSt11__addressofIKZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	370c      	adds	r7, #12
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr

08008be2 <_ZSt13__invoke_implIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008be2:	b590      	push	{r4, r7, lr}
 8008be4:	b085      	sub	sp, #20
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	7338      	strb	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008bee:	68b8      	ldr	r0, [r7, #8]
 8008bf0:	f7ff ffec 	bl	8008bcc <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f7ff fc03 	bl	8008402 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	4619      	mov	r1, r3
 8008c02:	4620      	mov	r0, r4
 8008c04:	f7ff f87b 	bl	8007cfe <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt>
 8008c08:	bf00      	nop
 8008c0a:	3714      	adds	r7, #20
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd90      	pop	{r4, r7, pc}

08008c10 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8008c10:	b590      	push	{r4, r7, lr}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8008c1c:	68b8      	ldr	r0, [r7, #8]
 8008c1e:	f7ff ffbe 	bl	8008b9e <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>
 8008c22:	4604      	mov	r4, r0
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	f7f9 fc01 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	2004      	movs	r0, #4
 8008c30:	f7f9 fbf0 	bl	8002414 <_ZnwjPv>
 8008c34:	4602      	mov	r2, r0
 8008c36:	6823      	ldr	r3, [r4, #0]
 8008c38:	6013      	str	r3, [r2, #0]
	}
 8008c3a:	bf00      	nop
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd90      	pop	{r4, r7, pc}

08008c42 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b082      	sub	sp, #8
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
 8008c4a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f8c0 	bl	8008dd2 <_ZNSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
	}
 8008c52:	bf00      	nop
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>:
      _M_access() const
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f7f9 fbed 	bl	8002442 <_ZNKSt9_Any_data9_M_accessEv>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}

08008c72 <_ZSt11__addressofIKZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <_ZSt13__invoke_implIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008c9e:	b590      	push	{r4, r7, lr}
 8008ca0:	b085      	sub	sp, #20
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	7338      	strb	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008caa:	68b8      	ldr	r0, [r7, #8]
 8008cac:	f7ff ffec 	bl	8008c88 <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff fcad 	bl	8008612 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f7ff f924 	bl	8007f0c <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_>
 8008cc4:	bf00      	nop
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd90      	pop	{r4, r7, pc}

08008ccc <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8008ccc:	b590      	push	{r4, r7, lr}
 8008cce:	b085      	sub	sp, #20
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8008cd8:	68b8      	ldr	r0, [r7, #8]
 8008cda:	f7ff ffbe 	bl	8008c5a <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>
 8008cde:	4604      	mov	r4, r0
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7f9 fba3 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	4619      	mov	r1, r3
 8008cea:	2004      	movs	r0, #4
 8008cec:	f7f9 fb92 	bl	8002414 <_ZnwjPv>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	6013      	str	r3, [r2, #0]
	}
 8008cf6:	bf00      	nop
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd90      	pop	{r4, r7, pc}

08008cfe <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 f86e 	bl	8008dea <_ZNSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
	}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}

08008d16 <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>:
      _M_access() const
 8008d16:	b580      	push	{r7, lr}
 8008d18:	b082      	sub	sp, #8
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7f9 fb8f 	bl	8002442 <_ZNKSt9_Any_data9_M_accessEv>
 8008d24:	4603      	mov	r3, r0
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <_ZSt11__addressofIKZN14FiducialSensorC4E14FiducialConfigEUlbE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4618      	mov	r0, r3
 8008d50:	370c      	adds	r7, #12
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr

08008d5a <_ZSt13__invoke_implIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008d5a:	b590      	push	{r4, r7, lr}
 8008d5c:	b085      	sub	sp, #20
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	7338      	strb	r0, [r7, #12]
 8008d62:	60b9      	str	r1, [r7, #8]
 8008d64:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008d66:	68b8      	ldr	r0, [r7, #8]
 8008d68:	f7ff ffec 	bl	8008d44 <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff fb83 	bl	800847a <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8008d74:	4603      	mov	r3, r0
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	f7ff f941 	bl	8008002 <_ZZN14FiducialSensorC4E14FiducialConfigENKUlbE_clEb>
 8008d80:	bf00      	nop
 8008d82:	3714      	adds	r7, #20
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd90      	pop	{r4, r7, pc}

08008d88 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8008d88:	b590      	push	{r4, r7, lr}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8008d94:	68b8      	ldr	r0, [r7, #8]
 8008d96:	f7ff ffbe 	bl	8008d16 <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f7f9 fb45 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8008da2:	4603      	mov	r3, r0
 8008da4:	4619      	mov	r1, r3
 8008da6:	2004      	movs	r0, #4
 8008da8:	f7f9 fb34 	bl	8002414 <_ZnwjPv>
 8008dac:	4602      	mov	r2, r0
 8008dae:	6823      	ldr	r3, [r4, #0]
 8008db0:	6013      	str	r3, [r2, #0]
	}
 8008db2:	bf00      	nop
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd90      	pop	{r4, r7, pc}

08008dba <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008dba:	b580      	push	{r7, lr}
 8008dbc:	b082      	sub	sp, #8
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f81c 	bl	8008e02 <_ZNSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
	}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <_ZNSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>:
      _M_access()
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f7f9 fb26 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8008de0:	4603      	mov	r3, r0
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <_ZNSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>:
      _M_access()
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b082      	sub	sp, #8
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7f9 fb1a 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3708      	adds	r7, #8
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	bd80      	pop	{r7, pc}

08008e02 <_ZNSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>:
      _M_access()
 8008e02:	b580      	push	{r7, lr}
 8008e04:	b082      	sub	sp, #8
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7f9 fb0e 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 8008e10:	4603      	mov	r3, r0
 8008e12:	4618      	mov	r0, r3
 8008e14:	3708      	adds	r7, #8
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <_ZN5StateC1E8PodState>:

class State{
public:
	friend class StateMaschine;

	State(PodState podState) : m_podState(podState){}
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	460b      	mov	r3, r1
 8008e26:	70fb      	strb	r3, [r7, #3]
 8008e28:	4a09      	ldr	r2, [pc, #36]	; (8008e50 <_ZN5StateC1E8PodState+0x34>)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	601a      	str	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	605a      	str	r2, [r3, #4]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	721a      	strb	r2, [r3, #8]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	78fa      	ldrb	r2, [r7, #3]
 8008e3e:	725a      	strb	r2, [r3, #9]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	4618      	mov	r0, r3
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	0801f208 	.word	0x0801f208

08008e54 <_ZNK5State11getPodStateEv>:

	virtual void update() = 0;

	virtual void dispose() = 0;

	[[nodiscard]] PodState getPodState() const{
 8008e54:	b480      	push	{r7}
 8008e56:	b083      	sub	sp, #12
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
		return m_podState;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	7a5b      	ldrb	r3, [r3, #9]
	}
 8008e60:	4618      	mov	r0, r3
 8008e62:	370c      	adds	r7, #12
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <_ZN5State9getNextIdEv>:
protected:
	StateMaschine* m_stateMaschine = nullptr;
	bool m_active = false;

private:
	static unsigned int getNextId(){
 8008e6c:	b480      	push	{r7}
 8008e6e:	af00      	add	r7, sp, #0
		static unsigned int stateIdAcc;
		return stateIdAcc++;
 8008e70:	4b04      	ldr	r3, [pc, #16]	; (8008e84 <_ZN5State9getNextIdEv+0x18>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	1c5a      	adds	r2, r3, #1
 8008e76:	4903      	ldr	r1, [pc, #12]	; (8008e84 <_ZN5State9getNextIdEv+0x18>)
 8008e78:	600a      	str	r2, [r1, #0]
	}
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr
 8008e84:	20000c18 	.word	0x20000c18

08008e88 <_ZN5StateD1Ev>:
	virtual ~State() = default;
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	4a04      	ldr	r2, [pc, #16]	; (8008ea4 <_ZN5StateD1Ev+0x1c>)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	370c      	adds	r7, #12
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	0801f208 	.word	0x0801f208

08008ea8 <_ZN5StateD0Ev>:
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b082      	sub	sp, #8
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff ffe9 	bl	8008e88 <_ZN5StateD1Ev>
 8008eb6:	210c      	movs	r1, #12
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f012 fc37 	bl	801b72c <_ZdlPvj>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <_ZN22PodStopLevitationStateC1Ev>:

#include <State.hpp>

class PodStopLevitationState: public State {
public:
	PodStopLevitationState() : State(POD_STOP_LEVITATION) {}
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2107      	movs	r1, #7
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7ff ffa1 	bl	8008e1c <_ZN5StateC1E8PodState>
 8008eda:	4a04      	ldr	r2, [pc, #16]	; (8008eec <_ZN22PodStopLevitationStateC1Ev+0x24>)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	3708      	adds	r7, #8
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}
 8008eea:	bf00      	nop
 8008eec:	0801f3d8 	.word	0x0801f3d8

08008ef0 <_ZN3can7signals19SensorF_TX_PodState3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008ef0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008ef4:	b087      	sub	sp, #28
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	60f8      	str	r0, [r7, #12]
 8008efa:	60b9      	str	r1, [r7, #8]
 8008efc:	607a      	str	r2, [r7, #4]
 8008efe:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008f00:	78fb      	ldrb	r3, [r7, #3]
 8008f02:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x7ull;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	7df9      	ldrb	r1, [r7, #23]
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	468a      	mov	sl, r1
 8008f10:	4683      	mov	fp, r0
 8008f12:	f00a 0407 	and.w	r4, sl, #7
 8008f16:	2500      	movs	r5, #0
 8008f18:	ea42 0804 	orr.w	r8, r2, r4
 8008f1c:	ea43 0905 	orr.w	r9, r3, r5
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008f30:	4770      	bx	lr

08008f32 <_ZN3can7signals24SensorF_TX_PodState_Last3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008f32:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60f8      	str	r0, [r7, #12]
 8008f3c:	60b9      	str	r1, [r7, #8]
 8008f3e:	607a      	str	r2, [r7, #4]
 8008f40:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008f42:	78fb      	ldrb	r3, [r7, #3]
 8008f44:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 3) & 0x38ull;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	4698      	mov	r8, r3
 8008f52:	4691      	mov	r9, r2
 8008f54:	f04f 0200 	mov.w	r2, #0
 8008f58:	f04f 0300 	mov.w	r3, #0
 8008f5c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008f60:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008f64:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008f68:	f002 0438 	and.w	r4, r2, #56	; 0x38
 8008f6c:	2500      	movs	r5, #0
 8008f6e:	ea40 0a04 	orr.w	sl, r0, r4
 8008f72:	ea41 0b05 	orr.w	fp, r1, r5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008f7c:	bf00      	nop
 8008f7e:	371c      	adds	r7, #28
 8008f80:	46bd      	mov	sp, r7
 8008f82:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008f86:	4770      	bx	lr

08008f88 <_ZN3can7signals26SensorF_TX_PodState_Target3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8008f88:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008f8c:	b087      	sub	sp, #28
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	60f8      	str	r0, [r7, #12]
 8008f92:	60b9      	str	r1, [r7, #8]
 8008f94:	607a      	str	r2, [r7, #4]
 8008f96:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8008f98:	78fb      	ldrb	r3, [r7, #3]
 8008f9a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 8) & 0x700ull;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	4698      	mov	r8, r3
 8008fa8:	4691      	mov	r9, r2
 8008faa:	f04f 0200 	mov.w	r2, #0
 8008fae:	f04f 0300 	mov.w	r3, #0
 8008fb2:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8008fb6:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8008fba:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8008fbe:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
 8008fc2:	2500      	movs	r5, #0
 8008fc4:	ea40 0a04 	orr.w	sl, r0, r4
 8008fc8:	ea41 0b05 	orr.w	fp, r1, r5
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8008fd2:	bf00      	nop
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8008fdc:	4770      	bx	lr
	...

08008fe0 <_ZN17PodEmergencyStateC1Ev>:

#include "estdio.hpp"

class PodEmergencyState : public State {
public:
	PodEmergencyState() : State(POD_EMERGENCY) {}
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	210b      	movs	r1, #11
 8008fec:	4618      	mov	r0, r3
 8008fee:	f7ff ff15 	bl	8008e1c <_ZN5StateC1E8PodState>
 8008ff2:	4a04      	ldr	r2, [pc, #16]	; (8009004 <_ZN17PodEmergencyStateC1Ev+0x24>)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3708      	adds	r7, #8
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	0801f260 	.word	0x0801f260

08009008 <_ZN12PodIdleStateC1Ev>:

#include "estdio.hpp"

class PodIdleState : public State{
public:
	PodIdleState() : State(POD_IDLE) {}
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2101      	movs	r1, #1
 8009014:	4618      	mov	r0, r3
 8009016:	f7ff ff01 	bl	8008e1c <_ZN5StateC1E8PodState>
 800901a:	4a04      	ldr	r2, [pc, #16]	; (800902c <_ZN12PodIdleStateC1Ev+0x24>)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	601a      	str	r2, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	0801f27c 	.word	0x0801f27c

08009030 <_ZN25PodLaunchPreparationStateC1Ev>:
#include "State.hpp"
#include "SDC.hpp"

class PodLaunchPreparationState : public State{
public:
	PodLaunchPreparationState() : State(POD_LAUNCH_PREPARATION){}
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2102      	movs	r1, #2
 800903c:	4618      	mov	r0, r3
 800903e:	f7ff feed 	bl	8008e1c <_ZN5StateC1E8PodState>
 8009042:	4a04      	ldr	r2, [pc, #16]	; (8009054 <_ZN25PodLaunchPreparationStateC1Ev+0x24>)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	0801f330 	.word	0x0801f330

08009058 <_ZN17PodLaunchingStateC1Ev>:

#include "State.hpp"

class PodLaunchingState : public State{
public:
	PodLaunchingState() : State(POD_LAUNCHING) {}
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2106      	movs	r1, #6
 8009064:	4618      	mov	r0, r3
 8009066:	f7ff fed9 	bl	8008e1c <_ZN5StateC1E8PodState>
 800906a:	4a04      	ldr	r2, [pc, #16]	; (800907c <_ZN17PodLaunchingStateC1Ev+0x24>)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	601a      	str	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	0801f34c 	.word	0x0801f34c

08009080 <_ZN21PodReadyToLaunchStateC1Ev>:
#include "State.hpp"


class PodReadyToLaunchState : public State{
public:
	PodReadyToLaunchState() : State(POD_READY_TO_LAUNCH) {}
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2103      	movs	r1, #3
 800908c:	4618      	mov	r0, r3
 800908e:	f7ff fec5 	bl	8008e1c <_ZN5StateC1E8PodState>
 8009092:	4a04      	ldr	r2, [pc, #16]	; (80090a4 <_ZN21PodReadyToLaunchStateC1Ev+0x24>)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4618      	mov	r0, r3
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
 80090a2:	bf00      	nop
 80090a4:	0801f368 	.word	0x0801f368

080090a8 <_ZN18PodStartLevitationC1Ev>:
#include "PodState.hpp"


class PodStartLevitation: public State {
public:
	PodStartLevitation() : State(POD_SAFE_TO_APPROACH) {}
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	210a      	movs	r1, #10
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7ff feb1 	bl	8008e1c <_ZN5StateC1E8PodState>
 80090ba:	4a04      	ldr	r2, [pc, #16]	; (80090cc <_ZN18PodStartLevitationC1Ev+0x24>)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	601a      	str	r2, [r3, #0]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop
 80090cc:	0801f3a0 	.word	0x0801f3a0

080090d0 <_ZN17PodSafeToApproachC1Ev>:

#include <State.hpp>

class PodSafeToApproach: public State {
public:
	PodSafeToApproach() : State(POD_SAFE_TO_APPROACH) {}
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	210a      	movs	r1, #10
 80090dc:	4618      	mov	r0, r3
 80090de:	f7ff fe9d 	bl	8008e1c <_ZN5StateC1E8PodState>
 80090e2:	4a04      	ldr	r2, [pc, #16]	; (80090f4 <_ZN17PodSafeToApproachC1Ev+0x24>)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	601a      	str	r2, [r3, #0]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	4618      	mov	r0, r3
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	0801f384 	.word	0x0801f384

080090f8 <_ZN15PodStartupStateC1Ev>:
#include <State.hpp>
#include "estdio.hpp"

class PodStartupState: public State {
public:
	PodStartupState() : State(POD_OFF) {}
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2100      	movs	r1, #0
 8009104:	4618      	mov	r0, r3
 8009106:	f7ff fe89 	bl	8008e1c <_ZN5StateC1E8PodState>
 800910a:	4a04      	ldr	r2, [pc, #16]	; (800911c <_ZN15PodStartupStateC1Ev+0x24>)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	4618      	mov	r0, r3
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	0801f3bc 	.word	0x0801f3bc

08009120 <_ZN13PodBreakStateC1Ev>:

#include "State.hpp"

class PodBreakState : public State {
public:
	PodBreakState() : State(POD_BREAK) {}
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2108      	movs	r1, #8
 800912c:	4618      	mov	r0, r3
 800912e:	f7ff fe75 	bl	8008e1c <_ZN5StateC1E8PodState>
 8009132:	4a04      	ldr	r2, [pc, #16]	; (8009144 <_ZN13PodBreakStateC1Ev+0x24>)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4618      	mov	r0, r3
 800913c:	3708      	adds	r7, #8
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	0801f244 	.word	0x0801f244

08009148 <_ZN11GlobalStateD1Ev>:
	void start(){
		broadcastState(m_startupState.getPodState());
		m_stateMaschine.start<PodStartupState>();
	}

	~GlobalState() = default;
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	33c0      	adds	r3, #192	; 0xc0
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fdff 	bl	8009d58 <_ZN17PodEmergencyStateD1Ev>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	33b4      	adds	r3, #180	; 0xb4
 800915e:	4618      	mov	r0, r3
 8009160:	f000 fdd8 	bl	8009d14 <_ZN17PodSafeToApproachD1Ev>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	33a8      	adds	r3, #168	; 0xa8
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fdb1 	bl	8009cd0 <_ZN13PodBreakStateD1Ev>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	339c      	adds	r3, #156	; 0x9c
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fd8a 	bl	8009c8c <_ZN22PodStopLevitationStateD1Ev>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	3390      	adds	r3, #144	; 0x90
 800917c:	4618      	mov	r0, r3
 800917e:	f000 fd63 	bl	8009c48 <_ZN17PodLaunchingStateD1Ev>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	3384      	adds	r3, #132	; 0x84
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fd3c 	bl	8009c04 <_ZN18PodStartLevitationD1Ev>
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3378      	adds	r3, #120	; 0x78
 8009190:	4618      	mov	r0, r3
 8009192:	f000 fd15 	bl	8009bc0 <_ZN25PodLaunchPreparationStateD1Ev>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	336c      	adds	r3, #108	; 0x6c
 800919a:	4618      	mov	r0, r3
 800919c:	f000 fcee 	bl	8009b7c <_ZN21PodReadyToLaunchStateD1Ev>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3360      	adds	r3, #96	; 0x60
 80091a4:	4618      	mov	r0, r3
 80091a6:	f000 fcc7 	bl	8009b38 <_ZN12PodIdleStateD1Ev>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	3354      	adds	r3, #84	; 0x54
 80091ae:	4618      	mov	r0, r3
 80091b0:	f000 fca0 	bl	8009af4 <_ZN15PodStartupStateD1Ev>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}
	...

080091c0 <__tcf_1>:
		static GlobalState instance;
 80091c0:	b580      	push	{r7, lr}
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	4801      	ldr	r0, [pc, #4]	; (80091cc <__tcf_1+0xc>)
 80091c6:	f7ff ffbf 	bl	8009148 <_ZN11GlobalStateD1Ev>
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20000c1c 	.word	0x20000c1c

080091d0 <_ZN11GlobalState11getInstanceEv>:
	static GlobalState& getInstance() {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
		static GlobalState instance;
 80091d4:	4b12      	ldr	r3, [pc, #72]	; (8009220 <_ZN11GlobalState11getInstanceEv+0x50>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	f3bf 8f5b 	dmb	ish
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	bf0c      	ite	eq
 80091e6:	2301      	moveq	r3, #1
 80091e8:	2300      	movne	r3, #0
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d013      	beq.n	8009218 <_ZN11GlobalState11getInstanceEv+0x48>
 80091f0:	480b      	ldr	r0, [pc, #44]	; (8009220 <_ZN11GlobalState11getInstanceEv+0x50>)
 80091f2:	f012 fa9f 	bl	801b734 <__cxa_guard_acquire>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	bf14      	ite	ne
 80091fc:	2301      	movne	r3, #1
 80091fe:	2300      	moveq	r3, #0
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d008      	beq.n	8009218 <_ZN11GlobalState11getInstanceEv+0x48>
 8009206:	4807      	ldr	r0, [pc, #28]	; (8009224 <_ZN11GlobalState11getInstanceEv+0x54>)
 8009208:	f000 f84a 	bl	80092a0 <_ZN11GlobalStateC1Ev>
 800920c:	4806      	ldr	r0, [pc, #24]	; (8009228 <_ZN11GlobalState11getInstanceEv+0x58>)
 800920e:	f012 fe28 	bl	801be62 <atexit>
 8009212:	4803      	ldr	r0, [pc, #12]	; (8009220 <_ZN11GlobalState11getInstanceEv+0x50>)
 8009214:	f012 fa9a 	bl	801b74c <__cxa_guard_release>
		return instance;
 8009218:	4b02      	ldr	r3, [pc, #8]	; (8009224 <_ZN11GlobalState11getInstanceEv+0x54>)
	}
 800921a:	4618      	mov	r0, r3
 800921c:	bd80      	pop	{r7, pc}
 800921e:	bf00      	nop
 8009220:	20000ce8 	.word	0x20000ce8
 8009224:	20000c1c 	.word	0x20000c1c
 8009228:	080091c1 	.word	0x080091c1

0800922c <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	2300      	movs	r3, #0
 8009238:	2202      	movs	r2, #2
 800923a:	f240 1181 	movw	r1, #385	; 0x181
 800923e:	f7f7 fea5 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <_ZN11GlobalState14broadcastStateE8PodState>:
	GlobalState& operator=(GlobalState&) = delete;
	GlobalState& operator=(GlobalState&&) = delete;

private:

	void broadcastState(PodState state) {
 800924c:	b580      	push	{r7, lr}
 800924e:	b088      	sub	sp, #32
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	460b      	mov	r3, r1
 8009256:	70fb      	strb	r3, [r7, #3]
		can::Message<can::messages::SensorF_TX_StatePod> msg;
 8009258:	f107 0308 	add.w	r3, r7, #8
 800925c:	4618      	mov	r0, r3
 800925e:	f7ff ffe5 	bl	800922c <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEEC1Ev>
		msg.set<can::signals::SensorF_TX_PodState>(static_cast<uint8_t>(state));
 8009262:	78fa      	ldrb	r2, [r7, #3]
 8009264:	f107 0308 	add.w	r3, r7, #8
 8009268:	4611      	mov	r1, r2
 800926a:	4618      	mov	r0, r3
 800926c:	f000 f8da 	bl	8009424 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals19SensorF_TX_PodStateEEEvNT_8dataTypeE>
		msg.set<can::signals::SensorF_TX_PodState_Last>(static_cast<uint8_t>(state));
 8009270:	78fa      	ldrb	r2, [r7, #3]
 8009272:	f107 0308 	add.w	r3, r7, #8
 8009276:	4611      	mov	r1, r2
 8009278:	4618      	mov	r0, r3
 800927a:	f000 f8e8 	bl	800944e <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals24SensorF_TX_PodState_LastEEEvNT_8dataTypeE>
		msg.set<can::signals::SensorF_TX_PodState_Target>(static_cast<uint8_t>(state));
 800927e:	78fa      	ldrb	r2, [r7, #3]
 8009280:	f107 0308 	add.w	r3, r7, #8
 8009284:	4611      	mov	r1, r2
 8009286:	4618      	mov	r0, r3
 8009288:	f000 f8f6 	bl	8009478 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals26SensorF_TX_PodState_TargetEEEvNT_8dataTypeE>
		msg.send();
 800928c:	f107 0308 	add.w	r3, r7, #8
 8009290:	2100      	movs	r1, #0
 8009292:	4618      	mov	r0, r3
 8009294:	f7f7 ffc4 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
 8009298:	bf00      	nop
 800929a:	3720      	adds	r7, #32
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <_ZN11GlobalStateC1Ev>:

	explicit GlobalState() : m_stateMaschine(&m_stateMemory){
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 f8f9 	bl	80094a2 <_ZN19StateMaschineMemoryILj15EEC1Ev>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	333c      	adds	r3, #60	; 0x3c
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f000 f8fd 	bl	80094b8 <_ZN13StateMaschineC1I19StateMaschineMemoryILj15EEEEPT_>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	3354      	adds	r3, #84	; 0x54
 80092c2:	4618      	mov	r0, r3
 80092c4:	f7ff ff18 	bl	80090f8 <_ZN15PodStartupStateC1Ev>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3360      	adds	r3, #96	; 0x60
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7ff fe9b 	bl	8009008 <_ZN12PodIdleStateC1Ev>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	336c      	adds	r3, #108	; 0x6c
 80092d6:	4618      	mov	r0, r3
 80092d8:	f7ff fed2 	bl	8009080 <_ZN21PodReadyToLaunchStateC1Ev>
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	3378      	adds	r3, #120	; 0x78
 80092e0:	4618      	mov	r0, r3
 80092e2:	f7ff fea5 	bl	8009030 <_ZN25PodLaunchPreparationStateC1Ev>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	3384      	adds	r3, #132	; 0x84
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7ff fedc 	bl	80090a8 <_ZN18PodStartLevitationC1Ev>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	3390      	adds	r3, #144	; 0x90
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7ff feaf 	bl	8009058 <_ZN17PodLaunchingStateC1Ev>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	339c      	adds	r3, #156	; 0x9c
 80092fe:	4618      	mov	r0, r3
 8009300:	f7ff fde2 	bl	8008ec8 <_ZN22PodStopLevitationStateC1Ev>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	33a8      	adds	r3, #168	; 0xa8
 8009308:	4618      	mov	r0, r3
 800930a:	f7ff ff09 	bl	8009120 <_ZN13PodBreakStateC1Ev>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	33b4      	adds	r3, #180	; 0xb4
 8009312:	4618      	mov	r0, r3
 8009314:	f7ff fedc 	bl	80090d0 <_ZN17PodSafeToApproachC1Ev>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	33c0      	adds	r3, #192	; 0xc0
 800931c:	4618      	mov	r0, r3
 800931e:	f7ff fe5f 	bl	8008fe0 <_ZN17PodEmergencyStateC1Ev>
		m_stateMaschine.registerState(m_startupState);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	3354      	adds	r3, #84	; 0x54
 800932c:	4619      	mov	r1, r3
 800932e:	4610      	mov	r0, r2
 8009330:	f000 f8e7 	bl	8009502 <_ZN13StateMaschine13registerStateI15PodStartupStateEEvRT_>
		m_stateMaschine.registerState(m_idleState);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	3360      	adds	r3, #96	; 0x60
 800933e:	4619      	mov	r1, r3
 8009340:	4610      	mov	r0, r2
 8009342:	f000 f8f4 	bl	800952e <_ZN13StateMaschine13registerStateI12PodIdleStateEEvRT_>
		m_stateMaschine.registerState(m_readyToLaunch);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	336c      	adds	r3, #108	; 0x6c
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	f000 f901 	bl	800955a <_ZN13StateMaschine13registerStateI21PodReadyToLaunchStateEEvRT_>
		m_stateMaschine.registerState(m_launchPrep);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3378      	adds	r3, #120	; 0x78
 8009362:	4619      	mov	r1, r3
 8009364:	4610      	mov	r0, r2
 8009366:	f000 f90e 	bl	8009586 <_ZN13StateMaschine13registerStateI25PodLaunchPreparationStateEEvRT_>
		m_stateMaschine.registerState(m_podStartLevitation);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	3384      	adds	r3, #132	; 0x84
 8009374:	4619      	mov	r1, r3
 8009376:	4610      	mov	r0, r2
 8009378:	f000 f91b 	bl	80095b2 <_ZN13StateMaschine13registerStateI18PodStartLevitationEEvRT_>
		m_stateMaschine.registerState(m_launchingState);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3390      	adds	r3, #144	; 0x90
 8009386:	4619      	mov	r1, r3
 8009388:	4610      	mov	r0, r2
 800938a:	f000 f928 	bl	80095de <_ZN13StateMaschine13registerStateI17PodLaunchingStateEEvRT_>
		m_stateMaschine.registerState(m_stopState);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	339c      	adds	r3, #156	; 0x9c
 8009398:	4619      	mov	r1, r3
 800939a:	4610      	mov	r0, r2
 800939c:	f000 f935 	bl	800960a <_ZN13StateMaschine13registerStateI22PodStopLevitationStateEEvRT_>
		m_stateMaschine.registerState(m_breakState);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	33a8      	adds	r3, #168	; 0xa8
 80093aa:	4619      	mov	r1, r3
 80093ac:	4610      	mov	r0, r2
 80093ae:	f000 f942 	bl	8009636 <_ZN13StateMaschine13registerStateI13PodBreakStateEEvRT_>
		m_stateMaschine.registerState(m_safeState);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	33b4      	adds	r3, #180	; 0xb4
 80093bc:	4619      	mov	r1, r3
 80093be:	4610      	mov	r0, r2
 80093c0:	f000 f94f 	bl	8009662 <_ZN13StateMaschine13registerStateI17PodSafeToApproachEEvRT_>
		m_stateMaschine.registerState(m_emcyState);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	33c0      	adds	r3, #192	; 0xc0
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f000 f95c 	bl	800968e <_ZN13StateMaschine13registerStateI17PodEmergencyStateEEvRT_>
	}
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <_ZN7canzero24handle_emergency_warningEv>:


#include "GlobalState.hpp"
#include "canzero.hpp"

void canzero::handle_emergency_warning(){
 80093e0:	b580      	push	{r7, lr}
 80093e2:	af00      	add	r7, sp, #0
	GlobalState::getInstance().setState<PodEmergencyState>();
 80093e4:	f7ff fef4 	bl	80091d0 <_ZN11GlobalState11getInstanceEv>
 80093e8:	4603      	mov	r3, r0
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 f965 	bl	80096ba <_ZN11GlobalState8setStateI17PodEmergencyStateEEvv>
}
 80093f0:	bf00      	nop
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <_ZN7canzero21handle_heartbeat_missEv>:


void canzero::handle_heartbeat_miss(){
 80093f4:	b480      	push	{r7}
 80093f6:	af00      	add	r7, sp, #0
	//TODO remove me later
	//GlobalState::getInstance().setState<PodEmergencyState>();
}
 80093f8:	bf00      	nop
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 8009402:	b480      	push	{r7}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
	//ignore for now.
	//TODO missing default implementation.
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr

08009416 <_ZN7canzero32handle_trasmission_request_errorEv>:

void canzero::handle_trasmission_request_error(){
 8009416:	b480      	push	{r7}
 8009418:	af00      	add	r7, sp, #0
	//ignore for now.
	//TODO missing default implementation.
}
 800941a:	bf00      	nop
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals19SensorF_TX_PodStateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	460b      	mov	r3, r1
 800942e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f103 0008 	add.w	r0, r3, #8
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f103 0110 	add.w	r1, r3, #16
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	1d1a      	adds	r2, r3, #4
 8009440:	78fb      	ldrb	r3, [r7, #3]
 8009442:	f7ff fd55 	bl	8008ef0 <_ZN3can7signals19SensorF_TX_PodState3setERyS2_Rhh>
        }
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals24SensorF_TX_PodState_LastEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f103 0008 	add.w	r0, r3, #8
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f103 0110 	add.w	r1, r3, #16
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	1d1a      	adds	r2, r3, #4
 800946a:	78fb      	ldrb	r3, [r7, #3]
 800946c:	f7ff fd61 	bl	8008f32 <_ZN3can7signals24SensorF_TX_PodState_Last3setERyS2_Rhh>
        }
 8009470:	bf00      	nop
 8009472:	3708      	adds	r7, #8
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}

08009478 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals26SensorF_TX_PodState_TargetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	460b      	mov	r3, r1
 8009482:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f103 0008 	add.w	r0, r3, #8
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f103 0110 	add.w	r1, r3, #16
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	1d1a      	adds	r2, r3, #4
 8009494:	78fb      	ldrb	r3, [r7, #3]
 8009496:	f7ff fd77 	bl	8008f88 <_ZN3can7signals26SensorF_TX_PodState_Target3setERyS2_Rhh>
        }
 800949a:	bf00      	nop
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <_ZN19StateMaschineMemoryILj15EEC1Ev>:

template<size_t NUMBER_OF_STATES>
class StateMaschineMemory {
public:
	friend class StateMaschine;
	explicit StateMaschineMemory(){ }
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	4618      	mov	r0, r3
 80094ae:	370c      	adds	r7, #12
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <_ZN13StateMaschineC1I19StateMaschineMemoryILj15EEEEPT_>:
#include "main.h"

class StateMaschine {
public:
	template<typename StateMaschineMemory_t>
	explicit StateMaschine(StateMaschineMemory_t* memory) {
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	601a      	str	r2, [r3, #0]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	609a      	str	r2, [r3, #8]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	60da      	str	r2, [r3, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	611a      	str	r2, [r3, #16]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	751a      	strb	r2, [r3, #20]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	755a      	strb	r2, [r3, #21]
		m_states = memory->m_states;
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	601a      	str	r2, [r3, #0]
		m_statesSize = memory->size();
 80094ec:	6838      	ldr	r0, [r7, #0]
 80094ee:	f000 f92b 	bl	8009748 <_ZNK19StateMaschineMemoryILj15EE4sizeEv>
 80094f2:	4602      	mov	r2, r0
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	605a      	str	r2, [r3, #4]
	}
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4618      	mov	r0, r3
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <_ZN13StateMaschine13registerStateI15PodStartupStateEEvRT_>:
	template<typename StateImplementation>
	void registerState(StateImplementation &state) {
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
		static_assert(std::is_base_of<State, StateImplementation>::value);
		unsigned int id = State::getId<StateImplementation>();
 800950c:	f000 f8f0 	bl	80096f0 <_ZN5State5getIdI15PodStartupStateEEjv>
 8009510:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	4413      	add	r3, r2
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	601a      	str	r2, [r3, #0]
	}
 8009526:	bf00      	nop
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <_ZN13StateMaschine13registerStateI12PodIdleStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 8009538:	f000 f912 	bl	8009760 <_ZN5State5getIdI12PodIdleStateEEjv>
 800953c:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	009b      	lsls	r3, r3, #2
 800954c:	4413      	add	r3, r2
 800954e:	683a      	ldr	r2, [r7, #0]
 8009550:	601a      	str	r2, [r3, #0]
	}
 8009552:	bf00      	nop
 8009554:	3710      	adds	r7, #16
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}

0800955a <_ZN13StateMaschine13registerStateI21PodReadyToLaunchStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800955a:	b580      	push	{r7, lr}
 800955c:	b084      	sub	sp, #16
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
 8009562:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 8009564:	f000 f928 	bl	80097b8 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv>
 8009568:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	687a      	ldr	r2, [r7, #4]
 800956e:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681a      	ldr	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	601a      	str	r2, [r3, #0]
	}
 800957e:	bf00      	nop
 8009580:	3710      	adds	r7, #16
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <_ZN13StateMaschine13registerStateI25PodLaunchPreparationStateEEvRT_>:
	void registerState(StateImplementation &state) {
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 8009590:	f000 f93e 	bl	8009810 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>
 8009594:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681a      	ldr	r2, [r3, #0]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	683a      	ldr	r2, [r7, #0]
 80095a8:	601a      	str	r2, [r3, #0]
	}
 80095aa:	bf00      	nop
 80095ac:	3710      	adds	r7, #16
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <_ZN13StateMaschine13registerStateI18PodStartLevitationEEvRT_>:
	void registerState(StateImplementation &state) {
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b084      	sub	sp, #16
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
 80095ba:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 80095bc:	f000 f954 	bl	8009868 <_ZN5State5getIdI18PodStartLevitationEEjv>
 80095c0:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	4413      	add	r3, r2
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	601a      	str	r2, [r3, #0]
	}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <_ZN13StateMaschine13registerStateI17PodLaunchingStateEEvRT_>:
	void registerState(StateImplementation &state) {
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 80095e8:	f000 f96a 	bl	80098c0 <_ZN5State5getIdI17PodLaunchingStateEEjv>
 80095ec:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	4413      	add	r3, r2
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	601a      	str	r2, [r3, #0]
	}
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <_ZN13StateMaschine13registerStateI22PodStopLevitationStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800960a:	b580      	push	{r7, lr}
 800960c:	b084      	sub	sp, #16
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 8009614:	f000 f980 	bl	8009918 <_ZN5State5getIdI22PodStopLevitationStateEEjv>
 8009618:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	009b      	lsls	r3, r3, #2
 8009628:	4413      	add	r3, r2
 800962a:	683a      	ldr	r2, [r7, #0]
 800962c:	601a      	str	r2, [r3, #0]
	}
 800962e:	bf00      	nop
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <_ZN13StateMaschine13registerStateI13PodBreakStateEEvRT_>:
	void registerState(StateImplementation &state) {
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 8009640:	f000 f996 	bl	8009970 <_ZN5State5getIdI13PodBreakStateEEjv>
 8009644:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	601a      	str	r2, [r3, #0]
	}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <_ZN13StateMaschine13registerStateI17PodSafeToApproachEEvRT_>:
	void registerState(StateImplementation &state) {
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 800966c:	f000 f9ac 	bl	80099c8 <_ZN5State5getIdI17PodSafeToApproachEEjv>
 8009670:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4413      	add	r3, r2
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	601a      	str	r2, [r3, #0]
	}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <_ZN13StateMaschine13registerStateI17PodEmergencyStateEEvRT_>:
	void registerState(StateImplementation &state) {
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	6039      	str	r1, [r7, #0]
		unsigned int id = State::getId<StateImplementation>();
 8009698:	f000 f9c2 	bl	8009a20 <_ZN5State5getIdI17PodEmergencyStateEEjv>
 800969c:	60f8      	str	r0, [r7, #12]
		state.m_stateMaschine = this;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	605a      	str	r2, [r3, #4]
		m_states[id] = &state;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	4413      	add	r3, r2
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	601a      	str	r2, [r3, #0]
	}
 80096b2:	bf00      	nop
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <_ZN11GlobalState8setStateI17PodEmergencyStateEEvv>:
	void setState(){
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	333c      	adds	r3, #60	; 0x3c
 80096c6:	4618      	mov	r0, r3
 80096c8:	f000 f9d6 	bl	8009a78 <_ZN13StateMaschine8getStateI17PodEmergencyStateEERK5Statev>
 80096cc:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff fbc0 	bl	8008e54 <_ZNK5State11getPodStateEv>
 80096d4:	4603      	mov	r3, r0
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7ff fdb7 	bl	800924c <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	333c      	adds	r3, #60	; 0x3c
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 f9d8 	bl	8009a98 <_ZN13StateMaschine8setStateI17PodEmergencyStateEEvv>
	}
 80096e8:	bf00      	nop
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <_ZN5State5getIdI15PodStartupStateEEjv>:
	static unsigned int getId(){
 80096f0:	b580      	push	{r7, lr}
 80096f2:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 80096f4:	4b12      	ldr	r3, [pc, #72]	; (8009740 <_ZN5State5getIdI15PodStartupStateEEjv+0x50>)
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	f3bf 8f5b 	dmb	ish
 80096fc:	b2db      	uxtb	r3, r3
 80096fe:	f003 0301 	and.w	r3, r3, #1
 8009702:	2b00      	cmp	r3, #0
 8009704:	bf0c      	ite	eq
 8009706:	2301      	moveq	r3, #1
 8009708:	2300      	movne	r3, #0
 800970a:	b2db      	uxtb	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	d012      	beq.n	8009736 <_ZN5State5getIdI15PodStartupStateEEjv+0x46>
 8009710:	480b      	ldr	r0, [pc, #44]	; (8009740 <_ZN5State5getIdI15PodStartupStateEEjv+0x50>)
 8009712:	f012 f80f 	bl	801b734 <__cxa_guard_acquire>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	bf14      	ite	ne
 800971c:	2301      	movne	r3, #1
 800971e:	2300      	moveq	r3, #0
 8009720:	b2db      	uxtb	r3, r3
 8009722:	2b00      	cmp	r3, #0
 8009724:	d007      	beq.n	8009736 <_ZN5State5getIdI15PodStartupStateEEjv+0x46>
 8009726:	f7ff fba1 	bl	8008e6c <_ZN5State9getNextIdEv>
 800972a:	4603      	mov	r3, r0
 800972c:	4a05      	ldr	r2, [pc, #20]	; (8009744 <_ZN5State5getIdI15PodStartupStateEEjv+0x54>)
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	4803      	ldr	r0, [pc, #12]	; (8009740 <_ZN5State5getIdI15PodStartupStateEEjv+0x50>)
 8009732:	f012 f80b 	bl	801b74c <__cxa_guard_release>
		return id;
 8009736:	4b03      	ldr	r3, [pc, #12]	; (8009744 <_ZN5State5getIdI15PodStartupStateEEjv+0x54>)
 8009738:	681b      	ldr	r3, [r3, #0]
	}
 800973a:	4618      	mov	r0, r3
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	20000cf0 	.word	0x20000cf0
 8009744:	20000cec 	.word	0x20000cec

08009748 <_ZNK19StateMaschineMemoryILj15EE4sizeEv>:
private:
	constexpr size_t size() const {return NUMBER_OF_STATES;}
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	230f      	movs	r3, #15
 8009752:	4618      	mov	r0, r3
 8009754:	370c      	adds	r7, #12
 8009756:	46bd      	mov	sp, r7
 8009758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975c:	4770      	bx	lr
	...

08009760 <_ZN5State5getIdI12PodIdleStateEEjv>:
	static unsigned int getId(){
 8009760:	b580      	push	{r7, lr}
 8009762:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 8009764:	4b12      	ldr	r3, [pc, #72]	; (80097b0 <_ZN5State5getIdI12PodIdleStateEEjv+0x50>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	f3bf 8f5b 	dmb	ish
 800976c:	b2db      	uxtb	r3, r3
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b00      	cmp	r3, #0
 8009774:	bf0c      	ite	eq
 8009776:	2301      	moveq	r3, #1
 8009778:	2300      	movne	r3, #0
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d012      	beq.n	80097a6 <_ZN5State5getIdI12PodIdleStateEEjv+0x46>
 8009780:	480b      	ldr	r0, [pc, #44]	; (80097b0 <_ZN5State5getIdI12PodIdleStateEEjv+0x50>)
 8009782:	f011 ffd7 	bl	801b734 <__cxa_guard_acquire>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	bf14      	ite	ne
 800978c:	2301      	movne	r3, #1
 800978e:	2300      	moveq	r3, #0
 8009790:	b2db      	uxtb	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d007      	beq.n	80097a6 <_ZN5State5getIdI12PodIdleStateEEjv+0x46>
 8009796:	f7ff fb69 	bl	8008e6c <_ZN5State9getNextIdEv>
 800979a:	4603      	mov	r3, r0
 800979c:	4a05      	ldr	r2, [pc, #20]	; (80097b4 <_ZN5State5getIdI12PodIdleStateEEjv+0x54>)
 800979e:	6013      	str	r3, [r2, #0]
 80097a0:	4803      	ldr	r0, [pc, #12]	; (80097b0 <_ZN5State5getIdI12PodIdleStateEEjv+0x50>)
 80097a2:	f011 ffd3 	bl	801b74c <__cxa_guard_release>
		return id;
 80097a6:	4b03      	ldr	r3, [pc, #12]	; (80097b4 <_ZN5State5getIdI12PodIdleStateEEjv+0x54>)
 80097a8:	681b      	ldr	r3, [r3, #0]
	}
 80097aa:	4618      	mov	r0, r3
 80097ac:	bd80      	pop	{r7, pc}
 80097ae:	bf00      	nop
 80097b0:	20000cf8 	.word	0x20000cf8
 80097b4:	20000cf4 	.word	0x20000cf4

080097b8 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv>:
	static unsigned int getId(){
 80097b8:	b580      	push	{r7, lr}
 80097ba:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 80097bc:	4b12      	ldr	r3, [pc, #72]	; (8009808 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x50>)
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	f3bf 8f5b 	dmb	ish
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	bf0c      	ite	eq
 80097ce:	2301      	moveq	r3, #1
 80097d0:	2300      	movne	r3, #0
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d012      	beq.n	80097fe <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x46>
 80097d8:	480b      	ldr	r0, [pc, #44]	; (8009808 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x50>)
 80097da:	f011 ffab 	bl	801b734 <__cxa_guard_acquire>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	bf14      	ite	ne
 80097e4:	2301      	movne	r3, #1
 80097e6:	2300      	moveq	r3, #0
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d007      	beq.n	80097fe <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x46>
 80097ee:	f7ff fb3d 	bl	8008e6c <_ZN5State9getNextIdEv>
 80097f2:	4603      	mov	r3, r0
 80097f4:	4a05      	ldr	r2, [pc, #20]	; (800980c <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x54>)
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	4803      	ldr	r0, [pc, #12]	; (8009808 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x50>)
 80097fa:	f011 ffa7 	bl	801b74c <__cxa_guard_release>
		return id;
 80097fe:	4b03      	ldr	r3, [pc, #12]	; (800980c <_ZN5State5getIdI21PodReadyToLaunchStateEEjv+0x54>)
 8009800:	681b      	ldr	r3, [r3, #0]
	}
 8009802:	4618      	mov	r0, r3
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	20000d00 	.word	0x20000d00
 800980c:	20000cfc 	.word	0x20000cfc

08009810 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>:
	static unsigned int getId(){
 8009810:	b580      	push	{r7, lr}
 8009812:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 8009814:	4b12      	ldr	r3, [pc, #72]	; (8009860 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x50>)
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f3bf 8f5b 	dmb	ish
 800981c:	b2db      	uxtb	r3, r3
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	bf0c      	ite	eq
 8009826:	2301      	moveq	r3, #1
 8009828:	2300      	movne	r3, #0
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	d012      	beq.n	8009856 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x46>
 8009830:	480b      	ldr	r0, [pc, #44]	; (8009860 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x50>)
 8009832:	f011 ff7f 	bl	801b734 <__cxa_guard_acquire>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	bf14      	ite	ne
 800983c:	2301      	movne	r3, #1
 800983e:	2300      	moveq	r3, #0
 8009840:	b2db      	uxtb	r3, r3
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x46>
 8009846:	f7ff fb11 	bl	8008e6c <_ZN5State9getNextIdEv>
 800984a:	4603      	mov	r3, r0
 800984c:	4a05      	ldr	r2, [pc, #20]	; (8009864 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x54>)
 800984e:	6013      	str	r3, [r2, #0]
 8009850:	4803      	ldr	r0, [pc, #12]	; (8009860 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x50>)
 8009852:	f011 ff7b 	bl	801b74c <__cxa_guard_release>
		return id;
 8009856:	4b03      	ldr	r3, [pc, #12]	; (8009864 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv+0x54>)
 8009858:	681b      	ldr	r3, [r3, #0]
	}
 800985a:	4618      	mov	r0, r3
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	20000d08 	.word	0x20000d08
 8009864:	20000d04 	.word	0x20000d04

08009868 <_ZN5State5getIdI18PodStartLevitationEEjv>:
	static unsigned int getId(){
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800986c:	4b12      	ldr	r3, [pc, #72]	; (80098b8 <_ZN5State5getIdI18PodStartLevitationEEjv+0x50>)
 800986e:	781b      	ldrb	r3, [r3, #0]
 8009870:	f3bf 8f5b 	dmb	ish
 8009874:	b2db      	uxtb	r3, r3
 8009876:	f003 0301 	and.w	r3, r3, #1
 800987a:	2b00      	cmp	r3, #0
 800987c:	bf0c      	ite	eq
 800987e:	2301      	moveq	r3, #1
 8009880:	2300      	movne	r3, #0
 8009882:	b2db      	uxtb	r3, r3
 8009884:	2b00      	cmp	r3, #0
 8009886:	d012      	beq.n	80098ae <_ZN5State5getIdI18PodStartLevitationEEjv+0x46>
 8009888:	480b      	ldr	r0, [pc, #44]	; (80098b8 <_ZN5State5getIdI18PodStartLevitationEEjv+0x50>)
 800988a:	f011 ff53 	bl	801b734 <__cxa_guard_acquire>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	bf14      	ite	ne
 8009894:	2301      	movne	r3, #1
 8009896:	2300      	moveq	r3, #0
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b00      	cmp	r3, #0
 800989c:	d007      	beq.n	80098ae <_ZN5State5getIdI18PodStartLevitationEEjv+0x46>
 800989e:	f7ff fae5 	bl	8008e6c <_ZN5State9getNextIdEv>
 80098a2:	4603      	mov	r3, r0
 80098a4:	4a05      	ldr	r2, [pc, #20]	; (80098bc <_ZN5State5getIdI18PodStartLevitationEEjv+0x54>)
 80098a6:	6013      	str	r3, [r2, #0]
 80098a8:	4803      	ldr	r0, [pc, #12]	; (80098b8 <_ZN5State5getIdI18PodStartLevitationEEjv+0x50>)
 80098aa:	f011 ff4f 	bl	801b74c <__cxa_guard_release>
		return id;
 80098ae:	4b03      	ldr	r3, [pc, #12]	; (80098bc <_ZN5State5getIdI18PodStartLevitationEEjv+0x54>)
 80098b0:	681b      	ldr	r3, [r3, #0]
	}
 80098b2:	4618      	mov	r0, r3
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20000d10 	.word	0x20000d10
 80098bc:	20000d0c 	.word	0x20000d0c

080098c0 <_ZN5State5getIdI17PodLaunchingStateEEjv>:
	static unsigned int getId(){
 80098c0:	b580      	push	{r7, lr}
 80098c2:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 80098c4:	4b12      	ldr	r3, [pc, #72]	; (8009910 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x50>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	f3bf 8f5b 	dmb	ish
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	f003 0301 	and.w	r3, r3, #1
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	bf0c      	ite	eq
 80098d6:	2301      	moveq	r3, #1
 80098d8:	2300      	movne	r3, #0
 80098da:	b2db      	uxtb	r3, r3
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d012      	beq.n	8009906 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x46>
 80098e0:	480b      	ldr	r0, [pc, #44]	; (8009910 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x50>)
 80098e2:	f011 ff27 	bl	801b734 <__cxa_guard_acquire>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bf14      	ite	ne
 80098ec:	2301      	movne	r3, #1
 80098ee:	2300      	moveq	r3, #0
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d007      	beq.n	8009906 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x46>
 80098f6:	f7ff fab9 	bl	8008e6c <_ZN5State9getNextIdEv>
 80098fa:	4603      	mov	r3, r0
 80098fc:	4a05      	ldr	r2, [pc, #20]	; (8009914 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x54>)
 80098fe:	6013      	str	r3, [r2, #0]
 8009900:	4803      	ldr	r0, [pc, #12]	; (8009910 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x50>)
 8009902:	f011 ff23 	bl	801b74c <__cxa_guard_release>
		return id;
 8009906:	4b03      	ldr	r3, [pc, #12]	; (8009914 <_ZN5State5getIdI17PodLaunchingStateEEjv+0x54>)
 8009908:	681b      	ldr	r3, [r3, #0]
	}
 800990a:	4618      	mov	r0, r3
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000d18 	.word	0x20000d18
 8009914:	20000d14 	.word	0x20000d14

08009918 <_ZN5State5getIdI22PodStopLevitationStateEEjv>:
	static unsigned int getId(){
 8009918:	b580      	push	{r7, lr}
 800991a:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800991c:	4b12      	ldr	r3, [pc, #72]	; (8009968 <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x50>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	f3bf 8f5b 	dmb	ish
 8009924:	b2db      	uxtb	r3, r3
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	bf0c      	ite	eq
 800992e:	2301      	moveq	r3, #1
 8009930:	2300      	movne	r3, #0
 8009932:	b2db      	uxtb	r3, r3
 8009934:	2b00      	cmp	r3, #0
 8009936:	d012      	beq.n	800995e <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x46>
 8009938:	480b      	ldr	r0, [pc, #44]	; (8009968 <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x50>)
 800993a:	f011 fefb 	bl	801b734 <__cxa_guard_acquire>
 800993e:	4603      	mov	r3, r0
 8009940:	2b00      	cmp	r3, #0
 8009942:	bf14      	ite	ne
 8009944:	2301      	movne	r3, #1
 8009946:	2300      	moveq	r3, #0
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d007      	beq.n	800995e <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x46>
 800994e:	f7ff fa8d 	bl	8008e6c <_ZN5State9getNextIdEv>
 8009952:	4603      	mov	r3, r0
 8009954:	4a05      	ldr	r2, [pc, #20]	; (800996c <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x54>)
 8009956:	6013      	str	r3, [r2, #0]
 8009958:	4803      	ldr	r0, [pc, #12]	; (8009968 <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x50>)
 800995a:	f011 fef7 	bl	801b74c <__cxa_guard_release>
		return id;
 800995e:	4b03      	ldr	r3, [pc, #12]	; (800996c <_ZN5State5getIdI22PodStopLevitationStateEEjv+0x54>)
 8009960:	681b      	ldr	r3, [r3, #0]
	}
 8009962:	4618      	mov	r0, r3
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20000d20 	.word	0x20000d20
 800996c:	20000d1c 	.word	0x20000d1c

08009970 <_ZN5State5getIdI13PodBreakStateEEjv>:
	static unsigned int getId(){
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 8009974:	4b12      	ldr	r3, [pc, #72]	; (80099c0 <_ZN5State5getIdI13PodBreakStateEEjv+0x50>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	f3bf 8f5b 	dmb	ish
 800997c:	b2db      	uxtb	r3, r3
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	bf0c      	ite	eq
 8009986:	2301      	moveq	r3, #1
 8009988:	2300      	movne	r3, #0
 800998a:	b2db      	uxtb	r3, r3
 800998c:	2b00      	cmp	r3, #0
 800998e:	d012      	beq.n	80099b6 <_ZN5State5getIdI13PodBreakStateEEjv+0x46>
 8009990:	480b      	ldr	r0, [pc, #44]	; (80099c0 <_ZN5State5getIdI13PodBreakStateEEjv+0x50>)
 8009992:	f011 fecf 	bl	801b734 <__cxa_guard_acquire>
 8009996:	4603      	mov	r3, r0
 8009998:	2b00      	cmp	r3, #0
 800999a:	bf14      	ite	ne
 800999c:	2301      	movne	r3, #1
 800999e:	2300      	moveq	r3, #0
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d007      	beq.n	80099b6 <_ZN5State5getIdI13PodBreakStateEEjv+0x46>
 80099a6:	f7ff fa61 	bl	8008e6c <_ZN5State9getNextIdEv>
 80099aa:	4603      	mov	r3, r0
 80099ac:	4a05      	ldr	r2, [pc, #20]	; (80099c4 <_ZN5State5getIdI13PodBreakStateEEjv+0x54>)
 80099ae:	6013      	str	r3, [r2, #0]
 80099b0:	4803      	ldr	r0, [pc, #12]	; (80099c0 <_ZN5State5getIdI13PodBreakStateEEjv+0x50>)
 80099b2:	f011 fecb 	bl	801b74c <__cxa_guard_release>
		return id;
 80099b6:	4b03      	ldr	r3, [pc, #12]	; (80099c4 <_ZN5State5getIdI13PodBreakStateEEjv+0x54>)
 80099b8:	681b      	ldr	r3, [r3, #0]
	}
 80099ba:	4618      	mov	r0, r3
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20000d28 	.word	0x20000d28
 80099c4:	20000d24 	.word	0x20000d24

080099c8 <_ZN5State5getIdI17PodSafeToApproachEEjv>:
	static unsigned int getId(){
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 80099cc:	4b12      	ldr	r3, [pc, #72]	; (8009a18 <_ZN5State5getIdI17PodSafeToApproachEEjv+0x50>)
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	f3bf 8f5b 	dmb	ish
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	bf0c      	ite	eq
 80099de:	2301      	moveq	r3, #1
 80099e0:	2300      	movne	r3, #0
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d012      	beq.n	8009a0e <_ZN5State5getIdI17PodSafeToApproachEEjv+0x46>
 80099e8:	480b      	ldr	r0, [pc, #44]	; (8009a18 <_ZN5State5getIdI17PodSafeToApproachEEjv+0x50>)
 80099ea:	f011 fea3 	bl	801b734 <__cxa_guard_acquire>
 80099ee:	4603      	mov	r3, r0
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bf14      	ite	ne
 80099f4:	2301      	movne	r3, #1
 80099f6:	2300      	moveq	r3, #0
 80099f8:	b2db      	uxtb	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d007      	beq.n	8009a0e <_ZN5State5getIdI17PodSafeToApproachEEjv+0x46>
 80099fe:	f7ff fa35 	bl	8008e6c <_ZN5State9getNextIdEv>
 8009a02:	4603      	mov	r3, r0
 8009a04:	4a05      	ldr	r2, [pc, #20]	; (8009a1c <_ZN5State5getIdI17PodSafeToApproachEEjv+0x54>)
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	4803      	ldr	r0, [pc, #12]	; (8009a18 <_ZN5State5getIdI17PodSafeToApproachEEjv+0x50>)
 8009a0a:	f011 fe9f 	bl	801b74c <__cxa_guard_release>
		return id;
 8009a0e:	4b03      	ldr	r3, [pc, #12]	; (8009a1c <_ZN5State5getIdI17PodSafeToApproachEEjv+0x54>)
 8009a10:	681b      	ldr	r3, [r3, #0]
	}
 8009a12:	4618      	mov	r0, r3
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	20000d30 	.word	0x20000d30
 8009a1c:	20000d2c 	.word	0x20000d2c

08009a20 <_ZN5State5getIdI17PodEmergencyStateEEjv>:
	static unsigned int getId(){
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 8009a24:	4b12      	ldr	r3, [pc, #72]	; (8009a70 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x50>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	f3bf 8f5b 	dmb	ish
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	bf0c      	ite	eq
 8009a36:	2301      	moveq	r3, #1
 8009a38:	2300      	movne	r3, #0
 8009a3a:	b2db      	uxtb	r3, r3
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d012      	beq.n	8009a66 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x46>
 8009a40:	480b      	ldr	r0, [pc, #44]	; (8009a70 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x50>)
 8009a42:	f011 fe77 	bl	801b734 <__cxa_guard_acquire>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	bf14      	ite	ne
 8009a4c:	2301      	movne	r3, #1
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d007      	beq.n	8009a66 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x46>
 8009a56:	f7ff fa09 	bl	8008e6c <_ZN5State9getNextIdEv>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	4a05      	ldr	r2, [pc, #20]	; (8009a74 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x54>)
 8009a5e:	6013      	str	r3, [r2, #0]
 8009a60:	4803      	ldr	r0, [pc, #12]	; (8009a70 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x50>)
 8009a62:	f011 fe73 	bl	801b74c <__cxa_guard_release>
		return id;
 8009a66:	4b03      	ldr	r3, [pc, #12]	; (8009a74 <_ZN5State5getIdI17PodEmergencyStateEEjv+0x54>)
 8009a68:	681b      	ldr	r3, [r3, #0]
	}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	20000d38 	.word	0x20000d38
 8009a74:	20000d34 	.word	0x20000d34

08009a78 <_ZN13StateMaschine8getStateI17PodEmergencyStateEERK5Statev>:
		m_nextState = id;
		taskEXIT_CRITICAL();
	}

	template<typename STATE>
	const State& getState(){
 8009a78:	b590      	push	{r4, r7, lr}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
		static_assert(std::is_base_of<State, STATE>::value);
		return *(m_states[State::getId<STATE>()]);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681c      	ldr	r4, [r3, #0]
 8009a84:	f7ff ffcc 	bl	8009a20 <_ZN5State5getIdI17PodEmergencyStateEEjv>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	4423      	add	r3, r4
 8009a8e:	681b      	ldr	r3, [r3, #0]
	}
 8009a90:	4618      	mov	r0, r3
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd90      	pop	{r4, r7, pc}

08009a98 <_ZN13StateMaschine8setStateI17PodEmergencyStateEEvv>:
	void setState() {
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 8009aa0:	f011 fb28 	bl	801b0f4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68da      	ldr	r2, [r3, #12]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 8009abe:	f7ff ffaf 	bl	8009a20 <_ZN5State5getIdI17PodEmergencyStateEEjv>
 8009ac2:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	7d1b      	ldrb	r3, [r3, #20]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <_ZN13StateMaschine8setStateI17PodEmergencyStateEEvv+0x38>
			Error_Handler();
 8009acc:	f005 fdb0 	bl	800f630 <Error_Handler>
		m_states[id]->m_active = true;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2201      	movs	r2, #1
 8009ade:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	68fa      	ldr	r2, [r7, #12]
 8009ae4:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 8009ae6:	f011 fb35 	bl	801b154 <vPortExitCritical>
	}
 8009aea:	bf00      	nop
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <_ZN15PodStartupStateD1Ev>:
class PodStartupState: public State {
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	4a05      	ldr	r2, [pc, #20]	; (8009b14 <_ZN15PodStartupStateD1Ev+0x20>)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	601a      	str	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4618      	mov	r0, r3
 8009b06:	f7ff f9bf 	bl	8008e88 <_ZN5StateD1Ev>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}
 8009b14:	0801f3bc 	.word	0x0801f3bc

08009b18 <_ZN15PodStartupStateD0Ev>:
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7ff ffe7 	bl	8009af4 <_ZN15PodStartupStateD1Ev>
 8009b26:	210c      	movs	r1, #12
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f011 fdff 	bl	801b72c <_ZdlPvj>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <_ZN12PodIdleStateD1Ev>:
class PodIdleState : public State{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b082      	sub	sp, #8
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	4a05      	ldr	r2, [pc, #20]	; (8009b58 <_ZN12PodIdleStateD1Ev+0x20>)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7ff f99d 	bl	8008e88 <_ZN5StateD1Ev>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4618      	mov	r0, r3
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	0801f27c 	.word	0x0801f27c

08009b5c <_ZN12PodIdleStateD0Ev>:
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f7ff ffe7 	bl	8009b38 <_ZN12PodIdleStateD1Ev>
 8009b6a:	210c      	movs	r1, #12
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f011 fddd 	bl	801b72c <_ZdlPvj>
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <_ZN21PodReadyToLaunchStateD1Ev>:
class PodReadyToLaunchState : public State{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	4a05      	ldr	r2, [pc, #20]	; (8009b9c <_ZN21PodReadyToLaunchStateD1Ev+0x20>)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	601a      	str	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f7ff f97b 	bl	8008e88 <_ZN5StateD1Ev>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4618      	mov	r0, r3
 8009b96:	3708      	adds	r7, #8
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}
 8009b9c:	0801f368 	.word	0x0801f368

08009ba0 <_ZN21PodReadyToLaunchStateD0Ev>:
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b082      	sub	sp, #8
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7ff ffe7 	bl	8009b7c <_ZN21PodReadyToLaunchStateD1Ev>
 8009bae:	210c      	movs	r1, #12
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f011 fdbb 	bl	801b72c <_ZdlPvj>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3708      	adds	r7, #8
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}

08009bc0 <_ZN25PodLaunchPreparationStateD1Ev>:
class PodLaunchPreparationState : public State{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	4a05      	ldr	r2, [pc, #20]	; (8009be0 <_ZN25PodLaunchPreparationStateD1Ev+0x20>)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	601a      	str	r2, [r3, #0]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7ff f959 	bl	8008e88 <_ZN5StateD1Ev>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	0801f330 	.word	0x0801f330

08009be4 <_ZN25PodLaunchPreparationStateD0Ev>:
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f7ff ffe7 	bl	8009bc0 <_ZN25PodLaunchPreparationStateD1Ev>
 8009bf2:	210c      	movs	r1, #12
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f011 fd99 	bl	801b72c <_ZdlPvj>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3708      	adds	r7, #8
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <_ZN18PodStartLevitationD1Ev>:
class PodStartLevitation: public State {
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	4a05      	ldr	r2, [pc, #20]	; (8009c24 <_ZN18PodStartLevitationD1Ev+0x20>)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	601a      	str	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff f937 	bl	8008e88 <_ZN5StateD1Ev>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	0801f3a0 	.word	0x0801f3a0

08009c28 <_ZN18PodStartLevitationD0Ev>:
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff ffe7 	bl	8009c04 <_ZN18PodStartLevitationD1Ev>
 8009c36:	210c      	movs	r1, #12
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f011 fd77 	bl	801b72c <_ZdlPvj>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <_ZN17PodLaunchingStateD1Ev>:
class PodLaunchingState : public State{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	4a05      	ldr	r2, [pc, #20]	; (8009c68 <_ZN17PodLaunchingStateD1Ev+0x20>)
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7ff f915 	bl	8008e88 <_ZN5StateD1Ev>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	0801f34c 	.word	0x0801f34c

08009c6c <_ZN17PodLaunchingStateD0Ev>:
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f7ff ffe7 	bl	8009c48 <_ZN17PodLaunchingStateD1Ev>
 8009c7a:	210c      	movs	r1, #12
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f011 fd55 	bl	801b72c <_ZdlPvj>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	4618      	mov	r0, r3
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <_ZN22PodStopLevitationStateD1Ev>:
class PodStopLevitationState: public State {
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	4a05      	ldr	r2, [pc, #20]	; (8009cac <_ZN22PodStopLevitationStateD1Ev+0x20>)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7ff f8f3 	bl	8008e88 <_ZN5StateD1Ev>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	0801f3d8 	.word	0x0801f3d8

08009cb0 <_ZN22PodStopLevitationStateD0Ev>:
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f7ff ffe7 	bl	8009c8c <_ZN22PodStopLevitationStateD1Ev>
 8009cbe:	210c      	movs	r1, #12
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f011 fd33 	bl	801b72c <_ZdlPvj>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <_ZN13PodBreakStateD1Ev>:
class PodBreakState : public State {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	4a05      	ldr	r2, [pc, #20]	; (8009cf0 <_ZN13PodBreakStateD1Ev+0x20>)
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7ff f8d1 	bl	8008e88 <_ZN5StateD1Ev>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	0801f244 	.word	0x0801f244

08009cf4 <_ZN13PodBreakStateD0Ev>:
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f7ff ffe7 	bl	8009cd0 <_ZN13PodBreakStateD1Ev>
 8009d02:	210c      	movs	r1, #12
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f011 fd11 	bl	801b72c <_ZdlPvj>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <_ZN17PodSafeToApproachD1Ev>:
class PodSafeToApproach: public State {
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
 8009d1c:	4a05      	ldr	r2, [pc, #20]	; (8009d34 <_ZN17PodSafeToApproachD1Ev+0x20>)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f7ff f8af 	bl	8008e88 <_ZN5StateD1Ev>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	3708      	adds	r7, #8
 8009d30:	46bd      	mov	sp, r7
 8009d32:	bd80      	pop	{r7, pc}
 8009d34:	0801f384 	.word	0x0801f384

08009d38 <_ZN17PodSafeToApproachD0Ev>:
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f7ff ffe7 	bl	8009d14 <_ZN17PodSafeToApproachD1Ev>
 8009d46:	210c      	movs	r1, #12
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f011 fcef 	bl	801b72c <_ZdlPvj>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4618      	mov	r0, r3
 8009d52:	3708      	adds	r7, #8
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <_ZN17PodEmergencyStateD1Ev>:
class PodEmergencyState : public State {
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	4a05      	ldr	r2, [pc, #20]	; (8009d78 <_ZN17PodEmergencyStateD1Ev+0x20>)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	601a      	str	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7ff f88d 	bl	8008e88 <_ZN5StateD1Ev>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4618      	mov	r0, r3
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	0801f260 	.word	0x0801f260

08009d7c <_ZN17PodEmergencyStateD0Ev>:
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff ffe7 	bl	8009d58 <_ZN17PodEmergencyStateD1Ev>
 8009d8a:	210c      	movs	r1, #12
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f011 fccd 	bl	801b72c <_ZdlPvj>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

#include <ICM20602.hpp>
#include "FreeRTOS.h"
#include "cmsis_os2.h"

ICM20602::ICM20602(const config_t& cfg, SPI_HandleTypeDef* hspi, GPIO_TypeDef* csPort, uint16_t csPin) : m_cfg{cfg}, m_hspi{hspi}, m_csPort{csPort}, m_csPin{csPin} {
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	603b      	str	r3, [r7, #0]
 8009daa:	4a2c      	ldr	r2, [pc, #176]	; (8009e5c <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0xc0>)
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	601a      	str	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	3304      	adds	r3, #4
 8009db6:	6810      	ldr	r0, [r2, #0]
 8009db8:	6018      	str	r0, [r3, #0]
 8009dba:	7912      	ldrb	r2, [r2, #4]
 8009dbc:	711a      	strb	r2, [r3, #4]
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	60da      	str	r2, [r3, #12]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	683a      	ldr	r2, [r7, #0]
 8009dc8:	611a      	str	r2, [r3, #16]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	8b3a      	ldrh	r2, [r7, #24]
 8009dce:	829a      	strh	r2, [r3, #20]
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	759a      	strb	r2, [r3, #22]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f04f 0200 	mov.w	r2, #0
 8009ddc:	629a      	str	r2, [r3, #40]	; 0x28
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	f04f 0200 	mov.w	r2, #0
 8009de4:	62da      	str	r2, [r3, #44]	; 0x2c
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f04f 0200 	mov.w	r2, #0
 8009dec:	631a      	str	r2, [r3, #48]	; 0x30
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f04f 0200 	mov.w	r2, #0
 8009df4:	635a      	str	r2, [r3, #52]	; 0x34
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f04f 0200 	mov.w	r2, #0
 8009dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f04f 0200 	mov.w	r2, #0
 8009e04:	63da      	str	r2, [r3, #60]	; 0x3c
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	f04f 0200 	mov.w	r2, #0
 8009e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f04f 0200 	mov.w	r2, #0
 8009e14:	645a      	str	r2, [r3, #68]	; 0x44
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	f04f 0200 	mov.w	r2, #0
 8009e1c:	649a      	str	r2, [r3, #72]	; 0x48
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	64da      	str	r2, [r3, #76]	; 0x4c
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	f04f 0200 	mov.w	r2, #0
 8009e2c:	651a      	str	r2, [r3, #80]	; 0x50
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f04f 0200 	mov.w	r2, #0
 8009e34:	655a      	str	r2, [r3, #84]	; 0x54
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f04f 0200 	mov.w	r2, #0
 8009e3c:	659a      	str	r2, [r3, #88]	; 0x58
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f04f 0200 	mov.w	r2, #0
 8009e44:	65da      	str	r2, [r3, #92]	; 0x5c
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f04f 0200 	mov.w	r2, #0
 8009e4c:	661a      	str	r2, [r3, #96]	; 0x60

}
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	0801f224 	.word	0x0801f224

08009e60 <_ZN8ICM20602D1Ev>:

ICM20602::~ICM20602() {
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	4a04      	ldr	r2, [pc, #16]	; (8009e7c <_ZN8ICM20602D1Ev+0x1c>)
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	601a      	str	r2, [r3, #0]

}
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	0801f224 	.word	0x0801f224

08009e80 <_ZN8ICM20602D0Ev>:
ICM20602::~ICM20602() {
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
}
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff ffe9 	bl	8009e60 <_ZN8ICM20602D1Ev>
 8009e8e:	2164      	movs	r1, #100	; 0x64
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f011 fc4b 	bl	801b72c <_ZdlPvj>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3708      	adds	r7, #8
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <_ZN8ICM206028csEnableEv>:

inline void ICM20602::csEnable() {
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_csPort, m_csPin, GPIO_PIN_RESET);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6918      	ldr	r0, [r3, #16]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	8a9b      	ldrh	r3, [r3, #20]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	f008 fbd6 	bl	8012664 <HAL_GPIO_WritePin>
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <_ZN8ICM206029csDisableEv>:
inline void ICM20602::csDisable() {
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_csPort, m_csPin, GPIO_PIN_SET);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6918      	ldr	r0, [r3, #16]
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	8a9b      	ldrh	r3, [r3, #20]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	f008 fbc6 	bl	8012664 <HAL_GPIO_WritePin>
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <_ZN8ICM206028writeRegEhh>:

void ICM20602::writeReg(uint8_t reg, uint8_t val) {
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b082      	sub	sp, #8
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
 8009eec:	4613      	mov	r3, r2
 8009eee:	70bb      	strb	r3, [r7, #2]
	csEnable();
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff ffd5 	bl	8009ea0 <_ZN8ICM206028csEnableEv>
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68d8      	ldr	r0, [r3, #12]
 8009efa:	1cf9      	adds	r1, r7, #3
 8009efc:	230a      	movs	r3, #10
 8009efe:	2201      	movs	r2, #1
 8009f00:	f009 faa1 	bl	8013446 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(m_hspi, &val, 1, 10);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68d8      	ldr	r0, [r3, #12]
 8009f08:	1cb9      	adds	r1, r7, #2
 8009f0a:	230a      	movs	r3, #10
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f009 fa9a 	bl	8013446 <HAL_SPI_Transmit>
	csDisable();
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f7ff ffd4 	bl	8009ec0 <_ZN8ICM206029csDisableEv>
}
 8009f18:	bf00      	nop
 8009f1a:	3708      	adds	r7, #8
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <_ZN8ICM206027readRegEh>:

uint8_t ICM20602::readReg(uint8_t reg) {
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	460b      	mov	r3, r1
 8009f2a:	70fb      	strb	r3, [r7, #3]
	reg |= 128;		// Set read bit
 8009f2c:	78fb      	ldrb	r3, [r7, #3]
 8009f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009f32:	b2db      	uxtb	r3, r3
 8009f34:	70fb      	strb	r3, [r7, #3]
	uint8_t val = 0;
 8009f36:	2300      	movs	r3, #0
 8009f38:	73fb      	strb	r3, [r7, #15]
	csEnable();
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff ffb0 	bl	8009ea0 <_ZN8ICM206028csEnableEv>
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68d8      	ldr	r0, [r3, #12]
 8009f44:	1cf9      	adds	r1, r7, #3
 8009f46:	230a      	movs	r3, #10
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f009 fa7c 	bl	8013446 <HAL_SPI_Transmit>
	HAL_SPI_Receive(m_hspi, &val, 1, 10);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68d8      	ldr	r0, [r3, #12]
 8009f52:	f107 010f 	add.w	r1, r7, #15
 8009f56:	230a      	movs	r3, #10
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f009 fbb0 	bl	80136be <HAL_SPI_Receive>
	csDisable();
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f7ff ffae 	bl	8009ec0 <_ZN8ICM206029csDisableEv>
	return val;
 8009f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
	...

08009f70 <_ZN8ICM206025startEv>:

bool ICM20602::start() {
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]

	writeReg(REG_I2C_IF, 0x40);
 8009f78:	2240      	movs	r2, #64	; 0x40
 8009f7a:	2170      	movs	r1, #112	; 0x70
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7ff ffaf 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>

	// Reset device and wait
	writeReg(REG_PWR_MGMT_1, 0x80);
 8009f82:	2280      	movs	r2, #128	; 0x80
 8009f84:	216b      	movs	r1, #107	; 0x6b
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7ff ffaa 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>
	osDelay(pdMS_TO_TICKS(10));
 8009f8c:	200a      	movs	r0, #10
 8009f8e:	f00d f95b 	bl	8017248 <osDelay>

	// Check if connection is working by reading the WHO_AM_I register
	uint8_t whoAmI = readReg(REG_WHO_AM_I);
 8009f92:	2175      	movs	r1, #117	; 0x75
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7ff ffc3 	bl	8009f20 <_ZN8ICM206027readRegEh>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	73fb      	strb	r3, [r7, #15]
	if(whoAmI != 0x12) {
 8009f9e:	7bfb      	ldrb	r3, [r7, #15]
 8009fa0:	2b12      	cmp	r3, #18
 8009fa2:	d001      	beq.n	8009fa8 <_ZN8ICM206025startEv+0x38>
		return false;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	e0ce      	b.n	800a146 <_ZN8ICM206025startEv+0x1d6>
	}

	// Set internal clock to PLL
	writeReg(REG_PWR_MGMT_1, 0x01);
 8009fa8:	2201      	movs	r2, #1
 8009faa:	216b      	movs	r1, #107	; 0x6b
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff ff97 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>

	// Accel and gyro standby
	writeReg(REG_PWR_MGMT_2, 0x3F);
 8009fb2:	223f      	movs	r2, #63	; 0x3f
 8009fb4:	216c      	movs	r1, #108	; 0x6c
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7ff ff92 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>

	// Disable FIFO
	writeReg(REG_USER_CTRL, 0x00);
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	216a      	movs	r1, #106	; 0x6a
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f7ff ff8d 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>

	// Disable I2C interface
	writeReg(REG_I2C_IF, 0x40);
 8009fc6:	2240      	movs	r2, #64	; 0x40
 8009fc8:	2170      	movs	r1, #112	; 0x70
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f7ff ff88 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>

	// Enable and config acceleration
	if(m_cfg.accelDlpf == ACCEL_DLPF_BYPASS_1046_HZ) {
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	791b      	ldrb	r3, [r3, #4]
 8009fd4:	2b08      	cmp	r3, #8
 8009fd6:	d105      	bne.n	8009fe4 <_ZN8ICM206025startEv+0x74>
		writeReg(REG_ACCEL_CONFIG_2, (1 << 3));
 8009fd8:	2208      	movs	r2, #8
 8009fda:	211d      	movs	r1, #29
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff ff7f 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>
 8009fe2:	e006      	b.n	8009ff2 <_ZN8ICM206025startEv+0x82>
	} else {
		writeReg(REG_ACCEL_CONFIG_2, m_cfg.accelDlpf);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	791b      	ldrb	r3, [r3, #4]
 8009fe8:	461a      	mov	r2, r3
 8009fea:	211d      	movs	r1, #29
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff ff77 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>
	}
	writeReg(REG_ACCEL_CONFIG, m_cfg.accelFs << 3);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	795b      	ldrb	r3, [r3, #5]
 8009ff6:	00db      	lsls	r3, r3, #3
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	211c      	movs	r1, #28
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7ff ff6e 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>
	if(m_cfg.accelFs == ACCEL_FS_2G) {
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	795b      	ldrb	r3, [r3, #5]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d104      	bne.n	800a016 <_ZN8ICM206025startEv+0xa6>
		m_accelSensitivity = 16384.0f;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 800a012:	629a      	str	r2, [r3, #40]	; 0x28
 800a014:	e01c      	b.n	800a050 <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_4G) {
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	795b      	ldrb	r3, [r3, #5]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d104      	bne.n	800a028 <_ZN8ICM206025startEv+0xb8>
		m_accelSensitivity = 8192.0f;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 800a024:	629a      	str	r2, [r3, #40]	; 0x28
 800a026:	e013      	b.n	800a050 <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_8G) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	795b      	ldrb	r3, [r3, #5]
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d104      	bne.n	800a03a <_ZN8ICM206025startEv+0xca>
		m_accelSensitivity = 4096.0f;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 800a036:	629a      	str	r2, [r3, #40]	; 0x28
 800a038:	e00a      	b.n	800a050 <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_16G) {
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	795b      	ldrb	r3, [r3, #5]
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d104      	bne.n	800a04c <_ZN8ICM206025startEv+0xdc>
		m_accelSensitivity = 2048.0f;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 800a048:	629a      	str	r2, [r3, #40]	; 0x28
 800a04a:	e001      	b.n	800a050 <_ZN8ICM206025startEv+0xe0>
	} else {
		return false;
 800a04c:	2300      	movs	r3, #0
 800a04e:	e07a      	b.n	800a146 <_ZN8ICM206025startEv+0x1d6>
	}

	// Enable and config gyro
	if(m_cfg.gyroDlpf == GYRO_DLPF_BYPASS_3281_HZ) {
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	799b      	ldrb	r3, [r3, #6]
 800a054:	2b08      	cmp	r3, #8
 800a056:	d112      	bne.n	800a07e <_ZN8ICM206025startEv+0x10e>
		// Bypass dpf and set dps
		writeReg(REG_CONFIG, 0x00);
 800a058:	2200      	movs	r2, #0
 800a05a:	211a      	movs	r1, #26
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f7ff ff3f 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>

		// See table page 37 of datasheet
		writeReg(REG_GYRO_CONFIG, (m_cfg.gyroDps << 3) | 0x02);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	79db      	ldrb	r3, [r3, #7]
 800a066:	00db      	lsls	r3, r3, #3
 800a068:	b25b      	sxtb	r3, r3
 800a06a:	f043 0302 	orr.w	r3, r3, #2
 800a06e:	b25b      	sxtb	r3, r3
 800a070:	b2db      	uxtb	r3, r3
 800a072:	461a      	mov	r2, r3
 800a074:	211b      	movs	r1, #27
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f7ff ff32 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>
 800a07c:	e026      	b.n	800a0cc <_ZN8ICM206025startEv+0x15c>
	} else if(m_cfg.gyroDlpf == GYRO_DLPF_BYPASS_8173_HZ) {
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	799b      	ldrb	r3, [r3, #6]
 800a082:	2b09      	cmp	r3, #9
 800a084:	d112      	bne.n	800a0ac <_ZN8ICM206025startEv+0x13c>
		// Bypass dpf and set dps
		writeReg(REG_CONFIG, 0x00);
 800a086:	2200      	movs	r2, #0
 800a088:	211a      	movs	r1, #26
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7ff ff28 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>

		// See table page 37 of datasheet
		writeReg(REG_GYRO_CONFIG, (m_cfg.gyroDps << 3) | 0x01);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	79db      	ldrb	r3, [r3, #7]
 800a094:	00db      	lsls	r3, r3, #3
 800a096:	b25b      	sxtb	r3, r3
 800a098:	f043 0301 	orr.w	r3, r3, #1
 800a09c:	b25b      	sxtb	r3, r3
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	211b      	movs	r1, #27
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f7ff ff1b 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>
 800a0aa:	e00f      	b.n	800a0cc <_ZN8ICM206025startEv+0x15c>
	} else {
		// Configure dpf and dps
		writeReg(REG_CONFIG, m_cfg.gyroDlpf);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	799b      	ldrb	r3, [r3, #6]
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	211a      	movs	r1, #26
 800a0b4:	6878      	ldr	r0, [r7, #4]
 800a0b6:	f7ff ff13 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>

		writeReg(REG_GYRO_CONFIG, m_cfg.gyroDps << 3);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	79db      	ldrb	r3, [r3, #7]
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	211b      	movs	r1, #27
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7ff ff0a 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>
	}
	if(m_cfg.gyroDps == GYRO_RANGE_250_DPS) {
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	79db      	ldrb	r3, [r3, #7]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d103      	bne.n	800a0dc <_ZN8ICM206025startEv+0x16c>
		m_gyroSensitivity = 131.0f;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a1e      	ldr	r2, [pc, #120]	; (800a150 <_ZN8ICM206025startEv+0x1e0>)
 800a0d8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a0da:	e019      	b.n	800a110 <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_500_DPS) {
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	79db      	ldrb	r3, [r3, #7]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d103      	bne.n	800a0ec <_ZN8ICM206025startEv+0x17c>
		m_gyroSensitivity = 65.5f;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a1b      	ldr	r2, [pc, #108]	; (800a154 <_ZN8ICM206025startEv+0x1e4>)
 800a0e8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a0ea:	e011      	b.n	800a110 <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_1000_DPS) {
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	79db      	ldrb	r3, [r3, #7]
 800a0f0:	2b02      	cmp	r3, #2
 800a0f2:	d103      	bne.n	800a0fc <_ZN8ICM206025startEv+0x18c>
		m_gyroSensitivity = 32.8f;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a18      	ldr	r2, [pc, #96]	; (800a158 <_ZN8ICM206025startEv+0x1e8>)
 800a0f8:	62da      	str	r2, [r3, #44]	; 0x2c
 800a0fa:	e009      	b.n	800a110 <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_2000_DPS) {
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	79db      	ldrb	r3, [r3, #7]
 800a100:	2b03      	cmp	r3, #3
 800a102:	d103      	bne.n	800a10c <_ZN8ICM206025startEv+0x19c>
		m_gyroSensitivity = 16.4f;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a15      	ldr	r2, [pc, #84]	; (800a15c <_ZN8ICM206025startEv+0x1ec>)
 800a108:	62da      	str	r2, [r3, #44]	; 0x2c
 800a10a:	e001      	b.n	800a110 <_ZN8ICM206025startEv+0x1a0>
	} else {
		return false;
 800a10c:	2300      	movs	r3, #0
 800a10e:	e01a      	b.n	800a146 <_ZN8ICM206025startEv+0x1d6>
	}

	// We will not enable the FIFO

	// Configure sample rate divider
	writeReg(REG_SMPLRT_DIV, m_cfg.sampleRateDiv);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	7a1b      	ldrb	r3, [r3, #8]
 800a114:	461a      	mov	r2, r3
 800a116:	2119      	movs	r1, #25
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f7ff fee1 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>

	// Enable both Accel and Gyro
	writeReg(REG_PWR_MGMT_2, 0x00);
 800a11e:	2200      	movs	r2, #0
 800a120:	216c      	movs	r1, #108	; 0x6c
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	f7ff fedc 	bl	8009ee0 <_ZN8ICM206028writeRegEhh>

	// Verify that connection is still working
	whoAmI = readReg(REG_WHO_AM_I);
 800a128:	2175      	movs	r1, #117	; 0x75
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f7ff fef8 	bl	8009f20 <_ZN8ICM206027readRegEh>
 800a130:	4603      	mov	r3, r0
 800a132:	73fb      	strb	r3, [r7, #15]
	if(whoAmI != 0x12) {
 800a134:	7bfb      	ldrb	r3, [r7, #15]
 800a136:	2b12      	cmp	r3, #18
 800a138:	d001      	beq.n	800a13e <_ZN8ICM206025startEv+0x1ce>
		return false;
 800a13a:	2300      	movs	r3, #0
 800a13c:	e003      	b.n	800a146 <_ZN8ICM206025startEv+0x1d6>
	}

	m_initDone = true;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2201      	movs	r2, #1
 800a142:	759a      	strb	r2, [r3, #22]
	return true;
 800a144:	2301      	movs	r3, #1
}
 800a146:	4618      	mov	r0, r3
 800a148:	3710      	adds	r7, #16
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}
 800a14e:	bf00      	nop
 800a150:	43030000 	.word	0x43030000
 800a154:	42830000 	.word	0x42830000
 800a158:	42033333 	.word	0x42033333
 800a15c:	41833333 	.word	0x41833333

0800a160 <_ZN8ICM206024readEv>:


bool ICM20602::read() {
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	if(!m_initDone) {
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	7d9b      	ldrb	r3, [r3, #22]
 800a16c:	f083 0301 	eor.w	r3, r3, #1
 800a170:	b2db      	uxtb	r3, r3
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <_ZN8ICM206024readEv+0x1a>
		return false;
 800a176:	2300      	movs	r3, #0
 800a178:	e0dc      	b.n	800a334 <_ZN8ICM206024readEv+0x1d4>
	}

	// Read seven 16-bit data values, so 14 bytes: ACCEL_X ACCEL_Y ACCEL_Z TEMP GYRO_X GYRO_Y GYRO_Z
	csEnable();
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff fe90 	bl	8009ea0 <_ZN8ICM206028csEnableEv>
	uint8_t reg = REG_ACCEL_XOUT_H | 128;
 800a180:	23bb      	movs	r3, #187	; 0xbb
 800a182:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68d8      	ldr	r0, [r3, #12]
 800a188:	f107 0109 	add.w	r1, r7, #9
 800a18c:	230a      	movs	r3, #10
 800a18e:	2201      	movs	r2, #1
 800a190:	f009 f959 	bl	8013446 <HAL_SPI_Transmit>
	HAL_SPI_Receive(m_hspi, m_data, 14, 10);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68d8      	ldr	r0, [r3, #12]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f103 0117 	add.w	r1, r3, #23
 800a19e:	230a      	movs	r3, #10
 800a1a0:	220e      	movs	r2, #14
 800a1a2:	f009 fa8c 	bl	80136be <HAL_SPI_Receive>
	csDisable();
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f7ff fe8a 	bl	8009ec0 <_ZN8ICM206029csDisableEv>

	// Get acceleration
	int16_t accelXRaw = (m_data[0] << 8) + m_data[1];
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	7ddb      	ldrb	r3, [r3, #23]
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	021b      	lsls	r3, r3, #8
 800a1b4:	b29a      	uxth	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	7e1b      	ldrb	r3, [r3, #24]
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	4413      	add	r3, r2
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	82fb      	strh	r3, [r7, #22]
	int16_t accelYRaw = (m_data[2] << 8) + m_data[3];
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	7e5b      	ldrb	r3, [r3, #25]
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	021b      	lsls	r3, r3, #8
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	7e9b      	ldrb	r3, [r3, #26]
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	4413      	add	r3, r2
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	82bb      	strh	r3, [r7, #20]
	int16_t accelZRaw = (m_data[4] << 8) + m_data[5];
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	7edb      	ldrb	r3, [r3, #27]
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	021b      	lsls	r3, r3, #8
 800a1e0:	b29a      	uxth	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	7f1b      	ldrb	r3, [r3, #28]
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	4413      	add	r3, r2
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	827b      	strh	r3, [r7, #18]
	m_accelX = accelXRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 800a1ee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800a1f2:	ee07 3a90 	vmov	s15, r3
 800a1f6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a200:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a204:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800a33c <_ZN8ICM206024readEv+0x1dc>
 800a208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	m_accelY = accelYRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 800a212:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a224:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a228:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800a33c <_ZN8ICM206024readEv+0x1dc>
 800a22c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	m_accelZ = accelZRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 800a236:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a23a:	ee07 3a90 	vmov	s15, r3
 800a23e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800a248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a24c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800a33c <_ZN8ICM206024readEv+0x1dc>
 800a250:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	// Internal temperature sensor
	int16_t temperatureRaw = (m_data[6] << 8) + m_data[7];
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	7f5b      	ldrb	r3, [r3, #29]
 800a25e:	b29b      	uxth	r3, r3
 800a260:	021b      	lsls	r3, r3, #8
 800a262:	b29a      	uxth	r2, r3
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	7f9b      	ldrb	r3, [r3, #30]
 800a268:	b29b      	uxth	r3, r3
 800a26a:	4413      	add	r3, r2
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	823b      	strh	r3, [r7, #16]
	m_temperature = temperatureRaw / 326.8f + 25.0f;
 800a270:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a274:	ee07 3a90 	vmov	s15, r3
 800a278:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a27c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a340 <_ZN8ICM206024readEv+0x1e0>
 800a280:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a284:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800a288:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	// Get gyroscope
	int16_t gyroXRaw = (m_data[8] << 8) + m_data[9];
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	7fdb      	ldrb	r3, [r3, #31]
 800a296:	b29b      	uxth	r3, r3
 800a298:	021b      	lsls	r3, r3, #8
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	4413      	add	r3, r2
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	81fb      	strh	r3, [r7, #14]
	int16_t gyroYRaw = (m_data[10] << 8) + m_data[11];
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	021b      	lsls	r3, r3, #8
 800a2b4:	b29a      	uxth	r2, r3
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	4413      	add	r3, r2
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	81bb      	strh	r3, [r7, #12]
	int16_t gyroZRaw = (m_data[12] << 8) + m_data[13];
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800a2ca:	b29b      	uxth	r3, r3
 800a2cc:	021b      	lsls	r3, r3, #8
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	4413      	add	r3, r2
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	817b      	strh	r3, [r7, #10]
	m_gyroX = gyroXRaw / m_gyroSensitivity;
 800a2de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800a2e2:	ee07 3a90 	vmov	s15, r3
 800a2e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800a2f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	m_gyroY = gyroYRaw / m_gyroSensitivity;
 800a2fa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a2fe:	ee07 3a90 	vmov	s15, r3
 800a302:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800a30c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	m_gyroZ = gyroZRaw / m_gyroSensitivity;
 800a316:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a31a:	ee07 3a90 	vmov	s15, r3
 800a31e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800a328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	return true;
 800a332:	2301      	movs	r3, #1
}
 800a334:	4618      	mov	r0, r3
 800a336:	3718      	adds	r7, #24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	411cf5c3 	.word	0x411cf5c3
 800a340:	43a36666 	.word	0x43a36666

0800a344 <_ZN8ICM206029getAccelXEv>:

	/**
	 * Get acceleration in X direction of the IMU in m/s^2.
	 * @return Acceleration in X direction of the IMU in m/s^2.
	 */
	inline float getAccelX() { return m_accelX - m_accelXOffset; }
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800a358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a35c:	eeb0 0a67 	vmov.f32	s0, s15
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <_ZN8ICM206029getAccelYEv>:

	/**
	 * Get acceleration in Y direction of the IMU in m/s^2.
	 * @return Acceleration in Y direction of the IMU in m/s^2.
	 */
	inline float getAccelY() { return m_accelY - m_accelYOffset; }
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800a37e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a382:	eeb0 0a67 	vmov.f32	s0, s15
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <_ZN8ICM206029getAccelZEv>:

	/**
	 * Get acceleration in Z direction of the IMU in m/s^2.
	 * @return Acceleration in Z direction of the IMU in m/s^2.
	 */
	inline float getAccelZ() { return m_accelZ - m_accelZOffset; }
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800a3a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3a8:	eeb0 0a67 	vmov.f32	s0, s15
 800a3ac:	370c      	adds	r7, #12
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <_ZN8ICM2060214getTemperatureEv>:

	/**
	 * Get the internal temperature of the IMU in °C.
	 * @return Internal temperature in °C.
	 */
	inline float getTemperature() { return m_temperature; }
 800a3b6:	b480      	push	{r7}
 800a3b8:	b083      	sub	sp, #12
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3c2:	ee07 3a90 	vmov	s15, r3
 800a3c6:	eeb0 0a67 	vmov.f32	s0, s15
 800a3ca:	370c      	adds	r7, #12
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <_ZN8ICM206028getGyroXEv>:

	/**
	 * Get rotation around X axis of the IMU in °/s.
	 * @return Rotation around X axis in °/s.
	 */
	inline float getGyroX() { return m_gyroX - m_gyroXOffset; }
 800a3d4:	b480      	push	{r7}
 800a3d6:	b083      	sub	sp, #12
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800a3e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3ec:	eeb0 0a67 	vmov.f32	s0, s15
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <_ZN8ICM206028getGyroYEv>:

	/**
	 * Get rotation around Y axis of the IMU in °/s.
	 * @return Rotation around Y axis in °/s.
	 */
	inline float getGyroY() { return m_gyroY - m_gyroYOffset; }
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800a40e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a412:	eeb0 0a67 	vmov.f32	s0, s15
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <_ZN8ICM206028getGyroZEv>:

	/**
	 * Get rotation around Z axis of the IMU in °/s.
	 * @return Rotation around Z axis in °/s.
	 */
	inline float getGyroZ() { return m_gyroZ - m_gyroZOffset; }
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800a434:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a438:	eeb0 0a67 	vmov.f32	s0, s15
 800a43c:	370c      	adds	r7, #12
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
	...

0800a448 <_ZN9ImuMasterC1Ev>:
#include "cmsis_os2.h"
#include "canzero.hpp"
#include "estdio.hpp"


ImuMaster::ImuMaster() {
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af02      	add	r7, sp, #8
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	4a33      	ldr	r2, [pc, #204]	; (800a520 <_ZN9ImuMasterC1Ev+0xd8>)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	601a      	str	r2, [r3, #0]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	4a32      	ldr	r2, [pc, #200]	; (800a524 <_ZN9ImuMasterC1Ev+0xdc>)
 800a45a:	3304      	adds	r3, #4
 800a45c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a460:	6018      	str	r0, [r3, #0]
 800a462:	3304      	adds	r3, #4
 800a464:	7019      	strb	r1, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f103 000c 	add.w	r0, r3, #12
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	1d19      	adds	r1, r3, #4
 800a470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	4b2c      	ldr	r3, [pc, #176]	; (800a528 <_ZN9ImuMasterC1Ev+0xe0>)
 800a478:	4a2c      	ldr	r2, [pc, #176]	; (800a52c <_ZN9ImuMasterC1Ev+0xe4>)
 800a47a:	f7ff fc8f 	bl	8009d9c <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	1d19      	adds	r1, r3, #4
 800a488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	4b26      	ldr	r3, [pc, #152]	; (800a528 <_ZN9ImuMasterC1Ev+0xe0>)
 800a490:	4a26      	ldr	r2, [pc, #152]	; (800a52c <_ZN9ImuMasterC1Ev+0xe4>)
 800a492:	f7ff fc83 	bl	8009d9c <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	1d19      	adds	r1, r3, #4
 800a4a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4a4:	9300      	str	r3, [sp, #0]
 800a4a6:	4b20      	ldr	r3, [pc, #128]	; (800a528 <_ZN9ImuMasterC1Ev+0xe0>)
 800a4a8:	4a20      	ldr	r2, [pc, #128]	; (800a52c <_ZN9ImuMasterC1Ev+0xe4>)
 800a4aa:	f7ff fc77 	bl	8009d9c <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	f04f 0200 	mov.w	r2, #0
 800a4b4:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f04f 0200 	mov.w	r2, #0
 800a4be:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f04f 0200 	mov.w	r2, #0
 800a4c8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f04f 0200 	mov.w	r2, #0
 800a4d2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f04f 0200 	mov.w	r2, #0
 800a4dc:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f04f 0200 	mov.w	r2, #0
 800a4e6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f04f 0200 	mov.w	r2, #0
 800a4f0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2200      	movs	r2, #0
 800a510:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	// TODO Auto-generated constructor stub

}
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4618      	mov	r0, r3
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	0801f234 	.word	0x0801f234
 800a524:	0801ecf0 	.word	0x0801ecf0
 800a528:	40020400 	.word	0x40020400
 800a52c:	20001320 	.word	0x20001320

0800a530 <_ZN9ImuMasterD1Ev>:

ImuMaster::~ImuMaster() {
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	4a0b      	ldr	r2, [pc, #44]	; (800a568 <_ZN9ImuMasterD1Ev+0x38>)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	601a      	str	r2, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	33d4      	adds	r3, #212	; 0xd4
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff fc8c 	bl	8009e60 <_ZN8ICM20602D1Ev>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	3370      	adds	r3, #112	; 0x70
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fc87 	bl	8009e60 <_ZN8ICM20602D1Ev>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	330c      	adds	r3, #12
 800a556:	4618      	mov	r0, r3
 800a558:	f7ff fc82 	bl	8009e60 <_ZN8ICM20602D1Ev>
	// TODO Auto-generated destructor stub
}
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4618      	mov	r0, r3
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	0801f234 	.word	0x0801f234

0800a56c <_ZN9ImuMasterD0Ev>:
ImuMaster::~ImuMaster() {
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
}
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f7ff ffdb 	bl	800a530 <_ZN9ImuMasterD1Ev>
 800a57a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f011 f8d4 	bl	801b72c <_ZdlPvj>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4618      	mov	r0, r3
 800a588:	3708      	adds	r7, #8
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <_ZN9ImuMaster5startEv>:

bool ImuMaster::start() {
 800a590:	b580      	push	{r7, lr}
 800a592:	b082      	sub	sp, #8
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
	// Init all CS
	HAL_GPIO_WritePin(CS_IMU1_GPIO_Port, CS_IMU1_Pin, GPIO_PIN_SET);
 800a598:	2201      	movs	r2, #1
 800a59a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a59e:	4839      	ldr	r0, [pc, #228]	; (800a684 <_ZN9ImuMaster5startEv+0xf4>)
 800a5a0:	f008 f860 	bl	8012664 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_IMU2_GPIO_Port, CS_IMU2_Pin, GPIO_PIN_SET);
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5aa:	4836      	ldr	r0, [pc, #216]	; (800a684 <_ZN9ImuMaster5startEv+0xf4>)
 800a5ac:	f008 f85a 	bl	8012664 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_IMU3_GPIO_Port, CS_IMU3_Pin, GPIO_PIN_SET);
 800a5b0:	2201      	movs	r2, #1
 800a5b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5b6:	4833      	ldr	r0, [pc, #204]	; (800a684 <_ZN9ImuMaster5startEv+0xf4>)
 800a5b8:	f008 f854 	bl	8012664 <HAL_GPIO_WritePin>

	// Wait until IMUs should be ready after powerup
	osDelay(pdMS_TO_TICKS(10));
 800a5bc:	200a      	movs	r0, #10
 800a5be:	f00c fe43 	bl	8017248 <osDelay>

	// Now init all three IMUs
	m_imu1Ok = m_imu1.start();
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	330c      	adds	r3, #12
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7ff fcd2 	bl	8009f70 <_ZN8ICM206025startEv>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	m_imu2Ok = m_imu2.start();
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	3370      	adds	r3, #112	; 0x70
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7ff fcc8 	bl	8009f70 <_ZN8ICM206025startEv>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	m_imu3Ok = m_imu3.start();
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	33d4      	adds	r3, #212	; 0xd4
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7ff fcbe 	bl	8009f70 <_ZN8ICM206025startEv>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

	// Get the number of IMUs
	if(m_imu1Ok) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a604:	2b00      	cmp	r3, #0
 800a606:	d006      	beq.n	800a616 <_ZN9ImuMaster5startEv+0x86>
		m_numOfImusOnline++;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a60e:	1c5a      	adds	r2, r3, #1
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	if(m_imu2Ok) {
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d006      	beq.n	800a62e <_ZN9ImuMaster5startEv+0x9e>
		m_numOfImusOnline++;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a626:	1c5a      	adds	r2, r3, #1
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	if(m_imu3Ok) {
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800a634:	2b00      	cmp	r3, #0
 800a636:	d006      	beq.n	800a646 <_ZN9ImuMaster5startEv+0xb6>
		m_numOfImusOnline++;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a63e:	1c5a      	adds	r2, r3, #1
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	OD_IMU_number = m_numOfImusOnline;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a64c:	b2da      	uxtb	r2, r3
 800a64e:	4b0e      	ldr	r3, [pc, #56]	; (800a688 <_ZN9ImuMaster5startEv+0xf8>)
 800a650:	701a      	strb	r2, [r3, #0]

	// The internal filters of the IMU need some time to swing in
	osDelay(pdMS_TO_TICKS(100));
 800a652:	2064      	movs	r0, #100	; 0x64
 800a654:	f00c fdf8 	bl	8017248 <osDelay>

	return m_imu1Ok & m_imu2Ok & m_imu3Ok;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a65e:	461a      	mov	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a666:	4013      	ands	r3, r2
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	f892 2156 	ldrb.w	r2, [r2, #342]	; 0x156
 800a66e:	4013      	ands	r3, r2
 800a670:	2b00      	cmp	r3, #0
 800a672:	bf14      	ite	ne
 800a674:	2301      	movne	r3, #1
 800a676:	2300      	moveq	r3, #0
 800a678:	b2db      	uxtb	r3, r3
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	40020400 	.word	0x40020400
 800a688:	20000935 	.word	0x20000935

0800a68c <_ZN9ImuMaster8syncReadEv>:
	m_imu1.resetValues();
	m_imu2.resetValues();
	m_imu3.resetValues();
}

bool ImuMaster::syncRead() {
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
	if(m_numOfImusOnline == 0) {
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d101      	bne.n	800a6a2 <_ZN9ImuMaster8syncReadEv+0x16>
		return false;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	e20a      	b.n	800aab8 <_ZN9ImuMaster8syncReadEv+0x42c>
	}

	// Reset internal variables
	m_accelX = 0;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f04f 0200 	mov.w	r2, #0
 800a6a8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	m_accelY = 0;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f04f 0200 	mov.w	r2, #0
 800a6b2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	m_accelZ = 0;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f04f 0200 	mov.w	r2, #0
 800a6bc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	m_temperature = 0;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f04f 0200 	mov.w	r2, #0
 800a6c6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	m_gyroX = 0;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f04f 0200 	mov.w	r2, #0
 800a6d0:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	m_gyroY = 0;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f04f 0200 	mov.w	r2, #0
 800a6da:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	m_gyroZ = 0;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f04f 0200 	mov.w	r2, #0
 800a6e4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	// Read data from all IMUs that are online
	if(m_imu1Ok) {
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d077      	beq.n	800a7e2 <_ZN9ImuMaster8syncReadEv+0x156>
		m_imu1.read();
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	330c      	adds	r3, #12
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7ff fd32 	bl	800a160 <_ZN8ICM206024readEv>

		OD_IMU1_Temperature = m_imu1.getTemperature();
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	330c      	adds	r3, #12
 800a700:	4618      	mov	r0, r3
 800a702:	f7ff fe58 	bl	800a3b6 <_ZN8ICM2060214getTemperatureEv>
 800a706:	eef0 7a40 	vmov.f32	s15, s0
 800a70a:	4bb3      	ldr	r3, [pc, #716]	; (800a9d8 <_ZN9ImuMaster8syncReadEv+0x34c>)
 800a70c:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu1.getAccelX();
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	330c      	adds	r3, #12
 800a714:	4618      	mov	r0, r3
 800a716:	f7ff fe15 	bl	800a344 <_ZN8ICM206029getAccelXEv>
 800a71a:	eeb0 7a40 	vmov.f32	s14, s0
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800a724:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu1.getAccelY();
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	330c      	adds	r3, #12
 800a732:	4618      	mov	r0, r3
 800a734:	f7ff fe19 	bl	800a36a <_ZN8ICM206029getAccelYEv>
 800a738:	eeb0 7a40 	vmov.f32	s14, s0
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800a742:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu1.getAccelZ();
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	330c      	adds	r3, #12
 800a750:	4618      	mov	r0, r3
 800a752:	f7ff fe1d 	bl	800a390 <_ZN8ICM206029getAccelZEv>
 800a756:	eeb0 7a40 	vmov.f32	s14, s0
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800a760:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu1.getTemperature();
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	330c      	adds	r3, #12
 800a76e:	4618      	mov	r0, r3
 800a770:	f7ff fe21 	bl	800a3b6 <_ZN8ICM2060214getTemperatureEv>
 800a774:	eeb0 7a40 	vmov.f32	s14, s0
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800a77e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu1.getGyroX();
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	330c      	adds	r3, #12
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff fe21 	bl	800a3d4 <_ZN8ICM206028getGyroXEv>
 800a792:	eeb0 7a40 	vmov.f32	s14, s0
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800a79c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu1.getGyroY();
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	330c      	adds	r3, #12
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	f7ff fe25 	bl	800a3fa <_ZN8ICM206028getGyroYEv>
 800a7b0:	eeb0 7a40 	vmov.f32	s14, s0
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800a7ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu1.getGyroZ();
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	330c      	adds	r3, #12
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	f7ff fe29 	bl	800a420 <_ZN8ICM206028getGyroZEv>
 800a7ce:	eeb0 7a40 	vmov.f32	s14, s0
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800a7d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	}

	if(m_imu2Ok) {
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d077      	beq.n	800a8dc <_ZN9ImuMaster8syncReadEv+0x250>
		m_imu2.read();
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3370      	adds	r3, #112	; 0x70
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fcb5 	bl	800a160 <_ZN8ICM206024readEv>

		OD_IMU2_Temperature = m_imu2.getTemperature();
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	3370      	adds	r3, #112	; 0x70
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7ff fddb 	bl	800a3b6 <_ZN8ICM2060214getTemperatureEv>
 800a800:	eef0 7a40 	vmov.f32	s15, s0
 800a804:	4b75      	ldr	r3, [pc, #468]	; (800a9dc <_ZN9ImuMaster8syncReadEv+0x350>)
 800a806:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu2.getAccelX();
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	3370      	adds	r3, #112	; 0x70
 800a80e:	4618      	mov	r0, r3
 800a810:	f7ff fd98 	bl	800a344 <_ZN8ICM206029getAccelXEv>
 800a814:	eeb0 7a40 	vmov.f32	s14, s0
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800a81e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu2.getAccelY();
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	3370      	adds	r3, #112	; 0x70
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7ff fd9c 	bl	800a36a <_ZN8ICM206029getAccelYEv>
 800a832:	eeb0 7a40 	vmov.f32	s14, s0
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800a83c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu2.getAccelZ();
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	3370      	adds	r3, #112	; 0x70
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7ff fda0 	bl	800a390 <_ZN8ICM206029getAccelZEv>
 800a850:	eeb0 7a40 	vmov.f32	s14, s0
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800a85a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu2.getTemperature();
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3370      	adds	r3, #112	; 0x70
 800a868:	4618      	mov	r0, r3
 800a86a:	f7ff fda4 	bl	800a3b6 <_ZN8ICM2060214getTemperatureEv>
 800a86e:	eeb0 7a40 	vmov.f32	s14, s0
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800a878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu2.getGyroX();
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	3370      	adds	r3, #112	; 0x70
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff fda4 	bl	800a3d4 <_ZN8ICM206028getGyroXEv>
 800a88c:	eeb0 7a40 	vmov.f32	s14, s0
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800a896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu2.getGyroY();
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	3370      	adds	r3, #112	; 0x70
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7ff fda8 	bl	800a3fa <_ZN8ICM206028getGyroYEv>
 800a8aa:	eeb0 7a40 	vmov.f32	s14, s0
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800a8b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu2.getGyroZ();
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	3370      	adds	r3, #112	; 0x70
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7ff fdac 	bl	800a420 <_ZN8ICM206028getGyroZEv>
 800a8c8:	eeb0 7a40 	vmov.f32	s14, s0
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800a8d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	}

	if(m_imu3Ok) {
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d07e      	beq.n	800a9e4 <_ZN9ImuMaster8syncReadEv+0x358>
		m_imu3.read();
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	33d4      	adds	r3, #212	; 0xd4
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7ff fc38 	bl	800a160 <_ZN8ICM206024readEv>

		OD_IMU3_Temperature = m_imu3.getTemperature();
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	33d4      	adds	r3, #212	; 0xd4
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f7ff fd5e 	bl	800a3b6 <_ZN8ICM2060214getTemperatureEv>
 800a8fa:	eef0 7a40 	vmov.f32	s15, s0
 800a8fe:	4b38      	ldr	r3, [pc, #224]	; (800a9e0 <_ZN9ImuMaster8syncReadEv+0x354>)
 800a900:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu3.getAccelX();
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	33d4      	adds	r3, #212	; 0xd4
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff fd1b 	bl	800a344 <_ZN8ICM206029getAccelXEv>
 800a90e:	eeb0 7a40 	vmov.f32	s14, s0
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800a918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu3.getAccelY();
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	33d4      	adds	r3, #212	; 0xd4
 800a926:	4618      	mov	r0, r3
 800a928:	f7ff fd1f 	bl	800a36a <_ZN8ICM206029getAccelYEv>
 800a92c:	eeb0 7a40 	vmov.f32	s14, s0
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800a936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu3.getAccelZ();
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	33d4      	adds	r3, #212	; 0xd4
 800a944:	4618      	mov	r0, r3
 800a946:	f7ff fd23 	bl	800a390 <_ZN8ICM206029getAccelZEv>
 800a94a:	eeb0 7a40 	vmov.f32	s14, s0
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800a954:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu3.getTemperature();
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	33d4      	adds	r3, #212	; 0xd4
 800a962:	4618      	mov	r0, r3
 800a964:	f7ff fd27 	bl	800a3b6 <_ZN8ICM2060214getTemperatureEv>
 800a968:	eeb0 7a40 	vmov.f32	s14, s0
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800a972:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu3.getGyroX();
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	33d4      	adds	r3, #212	; 0xd4
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff fd27 	bl	800a3d4 <_ZN8ICM206028getGyroXEv>
 800a986:	eeb0 7a40 	vmov.f32	s14, s0
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800a990:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu3.getGyroY();
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	33d4      	adds	r3, #212	; 0xd4
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7ff fd2b 	bl	800a3fa <_ZN8ICM206028getGyroYEv>
 800a9a4:	eeb0 7a40 	vmov.f32	s14, s0
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800a9ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu3.getGyroZ();
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	33d4      	adds	r3, #212	; 0xd4
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7ff fd2f 	bl	800a420 <_ZN8ICM206028getGyroZEv>
 800a9c2:	eeb0 7a40 	vmov.f32	s14, s0
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800a9cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
 800a9d6:	e005      	b.n	800a9e4 <_ZN9ImuMaster8syncReadEv+0x358>
 800a9d8:	20000938 	.word	0x20000938
 800a9dc:	2000093c 	.word	0x2000093c
 800a9e0:	20000940 	.word	0x20000940
	}

	// Divide data by number of IMUs that are online
	m_accelX /= m_numOfImusOnline;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	edd3 6a4e 	vldr	s13, [r3, #312]	; 0x138
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a9f0:	ee07 3a90 	vmov	s15, r3
 800a9f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a9f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
	m_accelY /= m_numOfImusOnline;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	edd3 6a4f 	vldr	s13, [r3, #316]	; 0x13c
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800aa0e:	ee07 3a90 	vmov	s15, r3
 800aa12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
	m_accelZ /= m_numOfImusOnline;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800aa2c:	ee07 3a90 	vmov	s15, r3
 800aa30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
	m_temperature /= m_numOfImusOnline;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	edd3 6a51 	vldr	s13, [r3, #324]	; 0x144
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800aa4a:	ee07 3a90 	vmov	s15, r3
 800aa4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
	m_gyroX /= m_numOfImusOnline;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	edd3 6a52 	vldr	s13, [r3, #328]	; 0x148
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800aa68:	ee07 3a90 	vmov	s15, r3
 800aa6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
	m_gyroY /= m_numOfImusOnline;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	edd3 6a53 	vldr	s13, [r3, #332]	; 0x14c
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aa8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
	m_gyroZ /= m_numOfImusOnline;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800aaa4:	ee07 3a90 	vmov	s15, r3
 800aaa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800aaac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150

	return true;
 800aab6:	2301      	movs	r3, #1
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <_ZN10AdcChannel3getEv>:
	uint16_t get() {
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
		return m_value;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	881b      	ldrh	r3, [r3, #0]
	}
 800aacc:	4618      	mov	r0, r3
 800aace:	370c      	adds	r7, #12
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <_ZN19AdcModuleController16getChannelByRankEj>:
	AdcChannel* getChannelByRank(size_t rank) {
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d301      	bcc.n	800aaf0 <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 800aaec:	f004 fda0 	bl	800f630 <Error_Handler>
		return m_channels + rank;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	689a      	ldr	r2, [r3, #8]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	005b      	lsls	r3, r3, #1
 800aaf8:	4413      	add	r3, r2
	}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <_ZN19AdcModuleController10weakUpdateEv>:
	void weakUpdate() {
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	7c1b      	ldrb	r3, [r3, #16]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d103      	bne.n	800ab1a <_ZN19AdcModuleController10weakUpdateEv+0x18>
			update();
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f7f7 fe4a 	bl	80027ac <_ZN19AdcModuleController6updateEv>
 800ab18:	e000      	b.n	800ab1c <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 800ab1a:	bf00      	nop
	}
 800ab1c:	3708      	adds	r7, #8
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}

0800ab22 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 800ab22:	b580      	push	{r7, lr}
 800ab24:	b082      	sub	sp, #8
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
	switch(module){
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d004      	beq.n	800ab40 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 800ab36:	e007      	b.n	800ab48 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 800ab38:	f000 f914 	bl	800ad64 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	e008      	b.n	800ab52 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 800ab40:	f000 f946 	bl	800add0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 800ab44:	4603      	mov	r3, r0
 800ab46:	e004      	b.n	800ab52 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 800ab48:	f004 fd72 	bl	800f630 <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 800ab4c:	f000 f90a 	bl	800ad64 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 800ab50:	4603      	mov	r3, r0
	}
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	3708      	adds	r7, #8
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}

0800ab5a <_ZN20AdcChannelControllerC1E9AdcModulej>:



class AdcChannelController {
public:
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b084      	sub	sp, #16
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	60f8      	str	r0, [r7, #12]
 800ab62:	60b9      	str	r1, [r7, #8]
 800ab64:	607a      	str	r2, [r7, #4]
			m_module(_getChannelAdcModuleControllerRuntime(module)),
 800ab66:	68b8      	ldr	r0, [r7, #8]
 800ab68:	f7ff ffdb 	bl	800ab22 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 800ab6c:	4602      	mov	r2, r0
			m_channel(m_module.getChannelByRank(rank)) {
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6879      	ldr	r1, [r7, #4]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f7ff ffad 	bl	800aad8 <_ZN19AdcModuleController16getChannelByRankEj>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	605a      	str	r2, [r3, #4]
	}
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	4618      	mov	r0, r3
 800ab88:	3710      	adds	r7, #16
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}

0800ab8e <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 800ab8e:	b580      	push	{r7, lr}
 800ab90:	b082      	sub	sp, #8
 800ab92:	af00      	add	r7, sp, #0
 800ab94:	6078      	str	r0, [r7, #4]
		m_module.weakUpdate();
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7ff ffb1 	bl	800ab02 <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff ff8b 	bl	800aac0 <_ZN10AdcChannel3getEv>
 800abaa:	4603      	mov	r3, r0
	}
 800abac:	4618      	mov	r0, r3
 800abae:	3708      	adds	r7, #8
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <_ZSt3logf>:
  { return __builtin_logf(__x); }
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b082      	sub	sp, #8
 800abb8:	af00      	add	r7, sp, #0
 800abba:	ed87 0a01 	vstr	s0, [r7, #4]
 800abbe:	ed97 0a01 	vldr	s0, [r7, #4]
 800abc2:	f010 fe5f 	bl	801b884 <logf>
 800abc6:	eef0 7a40 	vmov.f32	s15, s0
 800abca:	eeb0 0a67 	vmov.f32	s0, s15
 800abce:	3708      	adds	r7, #8
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <_ZN9NTCSensorC1E25NTCTemperaturSensorConfig>:
 */

#include "NTCSensor.hpp"
#include <cmath>

NTCSensor::NTCSensor(NTCTemperaturSensorConfig config) :
 800abd4:	b084      	sub	sp, #16
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b082      	sub	sp, #8
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6078      	str	r0, [r7, #4]
 800abde:	f107 0014 	add.w	r0, r7, #20
 800abe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
		m_analogInput(config.m_adc.m_module, config.m_adc.m_rank), m_config(config) {
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6979      	ldr	r1, [r7, #20]
 800abea:	8b3a      	ldrh	r2, [r7, #24]
 800abec:	4618      	mov	r0, r3
 800abee:	f7ff ffb4 	bl	800ab5a <_ZN20AdcChannelControllerC1E9AdcModulej>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	f107 0214 	add.w	r2, r7, #20
 800abf8:	609a      	str	r2, [r3, #8]
}
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	4618      	mov	r0, r3
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac06:	b004      	add	sp, #16
 800ac08:	4770      	bx	lr
 800ac0a:	0000      	movs	r0, r0
 800ac0c:	0000      	movs	r0, r0
	...

0800ac10 <_ZN9NTCSensor14getTemperaturCEv>:

float NTCSensor::getTemperaturC(){
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b082      	sub	sp, #8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
	return getTemperaturF() - 273.15;
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 f81d 	bl	800ac58 <_ZN9NTCSensor14getTemperaturFEv>
 800ac1e:	ee10 3a10 	vmov	r3, s0
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7f5 fc90 	bl	8000548 <__aeabi_f2d>
 800ac28:	a309      	add	r3, pc, #36	; (adr r3, 800ac50 <_ZN9NTCSensor14getTemperaturCEv+0x40>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	f7f5 fb2b 	bl	8000288 <__aeabi_dsub>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	4610      	mov	r0, r2
 800ac38:	4619      	mov	r1, r3
 800ac3a:	f7f5 ffd5 	bl	8000be8 <__aeabi_d2f>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	ee07 3a90 	vmov	s15, r3
}
 800ac44:	eeb0 0a67 	vmov.f32	s0, s15
 800ac48:	3708      	adds	r7, #8
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	66666666 	.word	0x66666666
 800ac54:	40711266 	.word	0x40711266

0800ac58 <_ZN9NTCSensor14getTemperaturFEv>:

float NTCSensor::getTemperaturF(){
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b088      	sub	sp, #32
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
	uint16_t avalue = m_analogInput.get();
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7ff ff93 	bl	800ab8e <_ZN20AdcChannelController3getEv>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	83fb      	strh	r3, [r7, #30]
	float voltage = avalue * 3.3 / 4095;
 800ac6c:	8bfb      	ldrh	r3, [r7, #30]
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7f5 fc58 	bl	8000524 <__aeabi_i2d>
 800ac74:	a331      	add	r3, pc, #196	; (adr r3, 800ad3c <_ZN9NTCSensor14getTemperaturFEv+0xe4>)
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f7f5 fcbd 	bl	80005f8 <__aeabi_dmul>
 800ac7e:	4602      	mov	r2, r0
 800ac80:	460b      	mov	r3, r1
 800ac82:	4610      	mov	r0, r2
 800ac84:	4619      	mov	r1, r3
 800ac86:	a32f      	add	r3, pc, #188	; (adr r3, 800ad44 <_ZN9NTCSensor14getTemperaturFEv+0xec>)
 800ac88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8c:	f7f5 fdde 	bl	800084c <__aeabi_ddiv>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4610      	mov	r0, r2
 800ac96:	4619      	mov	r1, r3
 800ac98:	f7f5 ffa6 	bl	8000be8 <__aeabi_d2f>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	61bb      	str	r3, [r7, #24]
	float U_NTC = voltage; //test this with the actual shield.
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	617b      	str	r3, [r7, #20]
	float R_NTC = (U_NTC * m_config.m_R) / (m_config.m_U0 - U_NTC);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	ed93 7a03 	vldr	s14, [r3, #12]
 800acac:	edd7 7a05 	vldr	s15, [r7, #20]
 800acb0:	ee67 6a27 	vmul.f32	s13, s14, s15
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	ed93 7a02 	vldr	s14, [r3, #8]
 800acbc:	edd7 7a05 	vldr	s15, [r7, #20]
 800acc0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800acc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800acc8:	edc7 7a04 	vstr	s15, [r7, #16]
	float temperatur = 1.0 / (std::log(R_NTC / m_config.m_r25) / m_config.m_beta + (1.0 / 298.15));
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	edd3 7a04 	vldr	s15, [r3, #16]
 800acd4:	ed97 7a04 	vldr	s14, [r7, #16]
 800acd8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800acdc:	eeb0 0a66 	vmov.f32	s0, s13
 800ace0:	f7ff ff68 	bl	800abb4 <_ZSt3logf>
 800ace4:	eeb0 7a40 	vmov.f32	s14, s0
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	edd3 7a05 	vldr	s15, [r3, #20]
 800acf0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800acf4:	ee16 0a90 	vmov	r0, s13
 800acf8:	f7f5 fc26 	bl	8000548 <__aeabi_f2d>
 800acfc:	a313      	add	r3, pc, #76	; (adr r3, 800ad4c <_ZN9NTCSensor14getTemperaturFEv+0xf4>)
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f7f5 fac3 	bl	800028c <__adddf3>
 800ad06:	4602      	mov	r2, r0
 800ad08:	460b      	mov	r3, r1
 800ad0a:	f04f 0000 	mov.w	r0, #0
 800ad0e:	490a      	ldr	r1, [pc, #40]	; (800ad38 <_ZN9NTCSensor14getTemperaturFEv+0xe0>)
 800ad10:	f7f5 fd9c 	bl	800084c <__aeabi_ddiv>
 800ad14:	4602      	mov	r2, r0
 800ad16:	460b      	mov	r3, r1
 800ad18:	4610      	mov	r0, r2
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	f7f5 ff64 	bl	8000be8 <__aeabi_d2f>
 800ad20:	4603      	mov	r3, r0
 800ad22:	60fb      	str	r3, [r7, #12]
	return temperatur;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	ee07 3a90 	vmov	s15, r3
}
 800ad2a:	eeb0 0a67 	vmov.f32	s0, s15
 800ad2e:	3720      	adds	r7, #32
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	f3af 8000 	nop.w
 800ad38:	3ff00000 	.word	0x3ff00000
 800ad3c:	66666666 	.word	0x66666666
 800ad40:	400a6666 	.word	0x400a6666
 800ad44:	00000000 	.word	0x00000000
 800ad48:	40affe00 	.word	0x40affe00
 800ad4c:	dcb5db83 	.word	0xdcb5db83
 800ad50:	3f6b79e1 	.word	0x3f6b79e1

0800ad54 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 800ad54:	b580      	push	{r7, lr}
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	4801      	ldr	r0, [pc, #4]	; (800ad60 <__tcf_1+0xc>)
 800ad5a:	f7f7 fcef 	bl	800273c <_ZN19AdcModuleControllerD1Ev>
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	20000d3c 	.word	0x20000d3c

0800ad64 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 800ad68:	4b12      	ldr	r3, [pc, #72]	; (800adb4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	f3bf 8f5b 	dmb	ish
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	f003 0301 	and.w	r3, r3, #1
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	bf0c      	ite	eq
 800ad7a:	2301      	moveq	r3, #1
 800ad7c:	2300      	movne	r3, #0
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d014      	beq.n	800adae <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 800ad84:	480b      	ldr	r0, [pc, #44]	; (800adb4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800ad86:	f010 fcd5 	bl	801b734 <__cxa_guard_acquire>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	bf14      	ite	ne
 800ad90:	2301      	movne	r3, #1
 800ad92:	2300      	moveq	r3, #0
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d009      	beq.n	800adae <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 800ad9a:	2100      	movs	r1, #0
 800ad9c:	4806      	ldr	r0, [pc, #24]	; (800adb8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 800ad9e:	f7f7 fc59 	bl	8002654 <_ZN19AdcModuleControllerC1E9AdcModule>
 800ada2:	4806      	ldr	r0, [pc, #24]	; (800adbc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 800ada4:	f011 f85d 	bl	801be62 <atexit>
 800ada8:	4802      	ldr	r0, [pc, #8]	; (800adb4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800adaa:	f010 fccf 	bl	801b74c <__cxa_guard_release>
	return instance;
 800adae:	4b02      	ldr	r3, [pc, #8]	; (800adb8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	20000d58 	.word	0x20000d58
 800adb8:	20000d3c 	.word	0x20000d3c
 800adbc:	0800ad55 	.word	0x0800ad55

0800adc0 <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	4801      	ldr	r0, [pc, #4]	; (800adcc <__tcf_2+0xc>)
 800adc6:	f7f7 fcb9 	bl	800273c <_ZN19AdcModuleControllerD1Ev>
 800adca:	bd80      	pop	{r7, pc}
 800adcc:	20000d5c 	.word	0x20000d5c

0800add0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800add0:	b580      	push	{r7, lr}
 800add2:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 800add4:	4b12      	ldr	r3, [pc, #72]	; (800ae20 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	f3bf 8f5b 	dmb	ish
 800addc:	b2db      	uxtb	r3, r3
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bf0c      	ite	eq
 800ade6:	2301      	moveq	r3, #1
 800ade8:	2300      	movne	r3, #0
 800adea:	b2db      	uxtb	r3, r3
 800adec:	2b00      	cmp	r3, #0
 800adee:	d014      	beq.n	800ae1a <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800adf0:	480b      	ldr	r0, [pc, #44]	; (800ae20 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800adf2:	f010 fc9f 	bl	801b734 <__cxa_guard_acquire>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	bf14      	ite	ne
 800adfc:	2301      	movne	r3, #1
 800adfe:	2300      	moveq	r3, #0
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d009      	beq.n	800ae1a <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800ae06:	2101      	movs	r1, #1
 800ae08:	4806      	ldr	r0, [pc, #24]	; (800ae24 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 800ae0a:	f7f7 fc23 	bl	8002654 <_ZN19AdcModuleControllerC1E9AdcModule>
 800ae0e:	4806      	ldr	r0, [pc, #24]	; (800ae28 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 800ae10:	f011 f827 	bl	801be62 <atexit>
 800ae14:	4802      	ldr	r0, [pc, #8]	; (800ae20 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800ae16:	f010 fc99 	bl	801b74c <__cxa_guard_release>
	return instance;
 800ae1a:	4b02      	ldr	r3, [pc, #8]	; (800ae24 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	bd80      	pop	{r7, pc}
 800ae20:	20000d78 	.word	0x20000d78
 800ae24:	20000d5c 	.word	0x20000d5c
 800ae28:	0800adc1 	.word	0x0800adc1

0800ae2c <_ZN3can7signals16BrakeF_TX_Status3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x191 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue)) & 0x3ull;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0x3ull));
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae3c:	b2d3      	uxtb	r3, r2
 800ae3e:	f003 0303 	and.w	r3, r3, #3
 800ae42:	73fb      	strb	r3, [r7, #15]
                return value;
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
            }
 800ae46:	4618      	mov	r0, r3
 800ae48:	3714      	adds	r7, #20
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae50:	4770      	bx	lr

0800ae52 <_ZN3can7signals17BrakeF_TX_Enabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x191 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800ae52:	b480      	push	{r7}
 800ae54:	b085      	sub	sp, #20
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 800ae5c:	6879      	ldr	r1, [r7, #4]
 800ae5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae62:	f000 0204 	and.w	r2, r0, #4
 800ae66:	2300      	movs	r3, #0
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	bf14      	ite	ne
 800ae6e:	2301      	movne	r3, #1
 800ae70:	2300      	moveq	r3, #0
 800ae72:	73fb      	strb	r3, [r7, #15]
                return value;
 800ae74:	7bfb      	ldrb	r3, [r7, #15]
            }
 800ae76:	4618      	mov	r0, r3
 800ae78:	3714      	adds	r7, #20
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <_ZN3can7signals19BrakeF_TX_ErrorFlag3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x191 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 3) & 0x8ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800ae82:	b480      	push	{r7}
 800ae84:	b085      	sub	sp, #20
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x8ull) >> 3);
 800ae8c:	6879      	ldr	r1, [r7, #4]
 800ae8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ae92:	f000 0208 	and.w	r2, r0, #8
 800ae96:	2300      	movs	r3, #0
 800ae98:	4313      	orrs	r3, r2
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	bf14      	ite	ne
 800ae9e:	2301      	movne	r3, #1
 800aea0:	2300      	moveq	r3, #0
 800aea2:	73fb      	strb	r3, [r7, #15]
                return value;
 800aea4:	7bfb      	ldrb	r3, [r7, #15]
            }
 800aea6:	4618      	mov	r0, r3
 800aea8:	3714      	adds	r7, #20
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr

0800aeb2 <_ZN3can7signals20BrakeF_RX_ErrorReset3setERyS2_Rhb>:
        class BrakeF_RX_ErrorReset {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800aeb2:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800aeb6:	b087      	sub	sp, #28
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
 800aec0:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800aec2:	78fb      	ldrb	r3, [r7, #3]
 800aec4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	7df9      	ldrb	r1, [r7, #23]
 800aece:	2900      	cmp	r1, #0
 800aed0:	bf14      	ite	ne
 800aed2:	2101      	movne	r1, #1
 800aed4:	2100      	moveq	r1, #0
 800aed6:	b2c9      	uxtb	r1, r1
 800aed8:	b2c9      	uxtb	r1, r1
 800aeda:	2000      	movs	r0, #0
 800aedc:	460c      	mov	r4, r1
 800aede:	4605      	mov	r5, r0
 800aee0:	ea42 0804 	orr.w	r8, r2, r4
 800aee4:	ea43 0905 	orr.w	r9, r3, r5
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800aeee:	bf00      	nop
 800aef0:	371c      	adds	r7, #28
 800aef2:	46bd      	mov	sp, r7
 800aef4:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800aef8:	4770      	bx	lr

0800aefa <_ZN3can7signals16BrakeF_RX_Enable3setERyS2_Rhb>:
        class BrakeF_RX_Enable {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800aefa:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800aefe:	b089      	sub	sp, #36	; 0x24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6178      	str	r0, [r7, #20]
 800af04:	6139      	str	r1, [r7, #16]
 800af06:	60fa      	str	r2, [r7, #12]
 800af08:	72fb      	strb	r3, [r7, #11]
                bool rawValue = value;
 800af0a:	7afb      	ldrb	r3, [r7, #11]
 800af0c:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 1) & 0x2ull;
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af14:	7ff9      	ldrb	r1, [r7, #31]
 800af16:	2000      	movs	r0, #0
 800af18:	460c      	mov	r4, r1
 800af1a:	4605      	mov	r5, r0
 800af1c:	1921      	adds	r1, r4, r4
 800af1e:	6039      	str	r1, [r7, #0]
 800af20:	eb45 0105 	adc.w	r1, r5, r5
 800af24:	6079      	str	r1, [r7, #4]
 800af26:	e9d7 0100 	ldrd	r0, r1, [r7]
 800af2a:	f000 0802 	and.w	r8, r0, #2
 800af2e:	f04f 0900 	mov.w	r9, #0
 800af32:	ea42 0a08 	orr.w	sl, r2, r8
 800af36:	ea43 0b09 	orr.w	fp, r3, r9
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800af40:	bf00      	nop
 800af42:	3724      	adds	r7, #36	; 0x24
 800af44:	46bd      	mov	sp, r7
 800af46:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800af4a:	4770      	bx	lr

0800af4c <_ZN3can7signals16BrakeF_RX_Engage3setERyS2_Rhh>:
        class BrakeF_RX_Engage {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1D1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800af4c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800af50:	b087      	sub	sp, #28
 800af52:	af00      	add	r7, sp, #0
 800af54:	60f8      	str	r0, [r7, #12]
 800af56:	60b9      	str	r1, [r7, #8]
 800af58:	607a      	str	r2, [r7, #4]
 800af5a:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800af5c:	78fb      	ldrb	r3, [r7, #3]
 800af5e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0xCull;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	e9d3 0100 	ldrd	r0, r1, [r3]
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	2200      	movs	r2, #0
 800af6a:	4698      	mov	r8, r3
 800af6c:	4691      	mov	r9, r2
 800af6e:	f04f 0200 	mov.w	r2, #0
 800af72:	f04f 0300 	mov.w	r3, #0
 800af76:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800af7a:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800af7e:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800af82:	f002 040c 	and.w	r4, r2, #12
 800af86:	2500      	movs	r5, #0
 800af88:	ea40 0a04 	orr.w	sl, r0, r4
 800af8c:	ea41 0b05 	orr.w	fp, r1, r5
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800af96:	bf00      	nop
 800af98:	371c      	adds	r7, #28
 800af9a:	46bd      	mov	sp, r7
 800af9c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800afa0:	4770      	bx	lr
	...

0800afa4 <__tcf_0>:
};

class BrakeECUController {
public:
	static BrakeECUController& getInstance() {
		static BrakeECUController instance;
 800afa4:	b580      	push	{r7, lr}
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	4801      	ldr	r0, [pc, #4]	; (800afb0 <__tcf_0+0xc>)
 800afaa:	f000 f831 	bl	800b010 <_ZN18BrakeECUControllerD1Ev>
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	20000d7c 	.word	0x20000d7c

0800afb4 <_ZN18BrakeECUController11getInstanceEv>:
	static BrakeECUController& getInstance() {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	af00      	add	r7, sp, #0
		static BrakeECUController instance;
 800afb8:	4b12      	ldr	r3, [pc, #72]	; (800b004 <_ZN18BrakeECUController11getInstanceEv+0x50>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	f3bf 8f5b 	dmb	ish
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	f003 0301 	and.w	r3, r3, #1
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	bf0c      	ite	eq
 800afca:	2301      	moveq	r3, #1
 800afcc:	2300      	movne	r3, #0
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d013      	beq.n	800affc <_ZN18BrakeECUController11getInstanceEv+0x48>
 800afd4:	480b      	ldr	r0, [pc, #44]	; (800b004 <_ZN18BrakeECUController11getInstanceEv+0x50>)
 800afd6:	f010 fbad 	bl	801b734 <__cxa_guard_acquire>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	bf14      	ite	ne
 800afe0:	2301      	movne	r3, #1
 800afe2:	2300      	moveq	r3, #0
 800afe4:	b2db      	uxtb	r3, r3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d008      	beq.n	800affc <_ZN18BrakeECUController11getInstanceEv+0x48>
 800afea:	4807      	ldr	r0, [pc, #28]	; (800b008 <_ZN18BrakeECUController11getInstanceEv+0x54>)
 800afec:	f000 f8e4 	bl	800b1b8 <_ZN18BrakeECUControllerC1Ev>
 800aff0:	4806      	ldr	r0, [pc, #24]	; (800b00c <_ZN18BrakeECUController11getInstanceEv+0x58>)
 800aff2:	f010 ff36 	bl	801be62 <atexit>
 800aff6:	4803      	ldr	r0, [pc, #12]	; (800b004 <_ZN18BrakeECUController11getInstanceEv+0x50>)
 800aff8:	f010 fba8 	bl	801b74c <__cxa_guard_release>
		return instance;
 800affc:	4b02      	ldr	r3, [pc, #8]	; (800b008 <_ZN18BrakeECUController11getInstanceEv+0x54>)
	}
 800affe:	4618      	mov	r0, r3
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	20000d88 	.word	0x20000d88
 800b008:	20000d7c 	.word	0x20000d7c
 800b00c:	0800afa5 	.word	0x0800afa5

0800b010 <_ZN18BrakeECUControllerD1Ev>:

	~BrakeECUController() {
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
		can::unregisterMessageReceiver(m_receiverId);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4618      	mov	r0, r3
 800b01e:	f7f6 fb37 	bl	8001690 <_ZN3can25unregisterMessageReceiverEj>
	}
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4618      	mov	r0, r3
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}

0800b02c <_ZN18BrakeECUController12engageBrakesEv>:
	void disable() {
		m_enableTarget = false;
		controlHelper();
	}

	void engageBrakes() {
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b082      	sub	sp, #8
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
		m_engageTarget = true;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2201      	movs	r2, #1
 800b038:	725a      	strb	r2, [r3, #9]
		controlHelper();
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 f814 	bl	800b068 <_ZN18BrakeECUController13controlHelperEv>
	}
 800b040:	bf00      	nop
 800b042:	3708      	adds	r7, #8
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	2300      	movs	r3, #0
 800b054:	2201      	movs	r2, #1
 800b056:	f240 11d1 	movw	r1, #465	; 0x1d1
 800b05a:	f7f5 ff97 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	4618      	mov	r0, r3
 800b062:	3708      	adds	r7, #8
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <_ZN18BrakeECUController13controlHelperEv>:
		return m_error;
	}

private:

	void controlHelper() {
 800b068:	b580      	push	{r7, lr}
 800b06a:	b08a      	sub	sp, #40	; 0x28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
		can::Message<can::messages::BrakeF_RX_Control> msg;
 800b070:	f107 0308 	add.w	r3, r7, #8
 800b074:	4618      	mov	r0, r3
 800b076:	f7ff ffe7 	bl	800b048 <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEEC1Ev>
		msg.set<can::signals::BrakeF_RX_Enable>(m_enableTarget);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	7a1a      	ldrb	r2, [r3, #8]
 800b07e:	f107 0308 	add.w	r3, r7, #8
 800b082:	4611      	mov	r1, r2
 800b084:	4618      	mov	r0, r3
 800b086:	f000 f8e5 	bl	800b254 <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals16BrakeF_RX_EnableEEEvNT_8dataTypeE>
		uint8_t engageEnum =
				m_engageTarget ?
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	7a5b      	ldrb	r3, [r3, #9]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <_ZN18BrakeECUController13controlHelperEv+0x2e>
 800b092:	2300      	movs	r3, #0
 800b094:	e000      	b.n	800b098 <_ZN18BrakeECUController13controlHelperEv+0x30>
 800b096:	2301      	movs	r3, #1
		uint8_t engageEnum =
 800b098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						can::signals::BrakeF_RX_Engage::DISENGAGE :
						can::signals::BrakeF_RX_Engage::ENGAGEEMERGENCY;
		msg.set<can::signals::BrakeF_RX_Engage>(engageEnum);
 800b09c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b0a0:	f107 0308 	add.w	r3, r7, #8
 800b0a4:	4611      	mov	r1, r2
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 f8e9 	bl	800b27e <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals16BrakeF_RX_EngageEEEvNT_8dataTypeE>
		msg.set<can::signals::BrakeF_RX_ErrorReset>(m_error); //FIXME BAD BAD BAD.
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	79da      	ldrb	r2, [r3, #7]
 800b0b0:	f107 0308 	add.w	r3, r7, #8
 800b0b4:	4611      	mov	r1, r2
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f000 f8f6 	bl	800b2a8 <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals20BrakeF_RX_ErrorResetEEEvNT_8dataTypeE>
		msg.send();
 800b0bc:	f107 0308 	add.w	r3, r7, #8
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f7f6 f8ac 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
 800b0c8:	bf00      	nop
 800b0ca:	3728      	adds	r7, #40	; 0x28
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	2203      	movs	r2, #3
 800b0e6:	f240 1191 	movw	r1, #401	; 0x191
 800b0ea:	f7f7 fde4 	bl	8002cb6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800b0f2:	f240 1291 	movw	r2, #401	; 0x191
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d000      	beq.n	800b0fc <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800b0fa:	e7fe      	b.n	800b0fa <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	4618      	mov	r0, r3
 800b100:	3710      	adds	r7, #16
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}

0800b106 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800b106:	b580      	push	{r7, lr}
 800b108:	b082      	sub	sp, #8
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	6039      	str	r1, [r7, #0]
 800b110:	6839      	ldr	r1, [r7, #0]
 800b112:	683b      	ldr	r3, [r7, #0]
 800b114:	331c      	adds	r3, #28
 800b116:	461a      	mov	r2, r3
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f7ff ffd9 	bl	800b0d0 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	4618      	mov	r0, r3
 800b122:	3708      	adds	r7, #8
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <_ZN18BrakeECUController8callbackER9RxMessage>:

	void callback(RxMessage &raw) {
 800b128:	b580      	push	{r7, lr}
 800b12a:	b088      	sub	sp, #32
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::BrakeF_TX_Status> msg { raw };
 800b132:	f107 0308 	add.w	r3, r7, #8
 800b136:	6839      	ldr	r1, [r7, #0]
 800b138:	4618      	mov	r0, r3
 800b13a:	f7ff ffe4 	bl	800b106 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEEC1ERK9RxMessage>
		m_enable = msg.get<can::signals::BrakeF_TX_Enabled>();
 800b13e:	f107 0308 	add.w	r3, r7, #8
 800b142:	4618      	mov	r0, r3
 800b144:	f000 f8c5 	bl	800b2d2 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals17BrakeF_TX_EnabledEEENT_8dataTypeEv>
 800b148:	4603      	mov	r3, r0
 800b14a:	461a      	mov	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	715a      	strb	r2, [r3, #5]
		m_engage = msg.get<can::signals::BrakeF_TX_Status>() > 0;
 800b150:	f107 0308 	add.w	r3, r7, #8
 800b154:	4618      	mov	r0, r3
 800b156:	f000 f8ce 	bl	800b2f6 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals16BrakeF_TX_StatusEEENT_8dataTypeEv>
 800b15a:	4603      	mov	r3, r0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	bf14      	ite	ne
 800b160:	2301      	movne	r3, #1
 800b162:	2300      	moveq	r3, #0
 800b164:	b2da      	uxtb	r2, r3
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	719a      	strb	r2, [r3, #6]
		if(m_engage){
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	799b      	ldrb	r3, [r3, #6]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d003      	beq.n	800b17a <_ZN18BrakeECUController8callbackER9RxMessage+0x52>
			m_brakeState = BRAKE_ENGAGED;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	711a      	strb	r2, [r3, #4]
 800b178:	e002      	b.n	800b180 <_ZN18BrakeECUController8callbackER9RxMessage+0x58>
		}else{
			m_brakeState = BRAKE_DISENGAGED;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2202      	movs	r2, #2
 800b17e:	711a      	strb	r2, [r3, #4]
		}
		m_error = msg.get<can::signals::BrakeF_TX_ErrorFlag>();
 800b180:	f107 0308 	add.w	r3, r7, #8
 800b184:	4618      	mov	r0, r3
 800b186:	f000 f8c8 	bl	800b31a <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals19BrakeF_TX_ErrorFlagEEENT_8dataTypeEv>
 800b18a:	4603      	mov	r3, r0
 800b18c:	461a      	mov	r2, r3
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	71da      	strb	r2, [r3, #7]
	}
 800b192:	bf00      	nop
 800b194:	3720      	adds	r7, #32
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}

0800b19a <_ZZN18BrakeECUControllerC4EvENKUlR9RxMessageE_clES1_>:

	explicit BrakeECUController() {
		m_receiverId = can::registerMessageReceiver<can::messages::BrakeF_TX_Status>([this](RxMessage& raw){
 800b19a:	b580      	push	{r7, lr}
 800b19c:	b082      	sub	sp, #8
 800b19e:	af00      	add	r7, sp, #0
 800b1a0:	6078      	str	r0, [r7, #4]
 800b1a2:	6039      	str	r1, [r7, #0]
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
			this->callback(raw);
 800b1a8:	6839      	ldr	r1, [r7, #0]
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f7ff ffbc 	bl	800b128 <_ZN18BrakeECUController8callbackER9RxMessage>
		});
 800b1b0:	bf00      	nop
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <_ZN18BrakeECUControllerC1Ev>:
	explicit BrakeECUController() {
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b086      	sub	sp, #24
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	711a      	strb	r2, [r3, #4]
		m_receiverId = can::registerMessageReceiver<can::messages::BrakeF_TX_Status>([this](RxMessage& raw){
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	f107 0308 	add.w	r3, r7, #8
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f000 f8b6 	bl	800b340 <_ZNSt8functionIFvR9RxMessageEEC1IZN18BrakeECUControllerC4EvEUlS1_E_vvEET_>
 800b1d4:	f107 0308 	add.w	r3, r7, #8
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f000 f8db 	bl	800b394 <_ZN3can23registerMessageReceiverINS_8messages16BrakeF_TX_StatusEEEjSt8functionIFvR9RxMessageEE>
 800b1de:	4602      	mov	r2, r0
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	601a      	str	r2, [r3, #0]
 800b1e4:	f107 0308 	add.w	r3, r7, #8
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7f6 f953 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <_ZN13PodBreakState5setupEv>:
#include "EstimatedStateRegistry.hpp"
#include "SensorValueRegistry.hpp"

#include "estdio.hpp"

void PodBreakState::setup() {
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b082      	sub	sp, #8
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
	printf("enter break state\n");
 800b200:	4806      	ldr	r0, [pc, #24]	; (800b21c <_ZN13PodBreakState5setupEv+0x24>)
 800b202:	f00b fea7 	bl	8016f54 <printf_>
	BrakeECUController::getInstance().engageBrakes();
 800b206:	f7ff fed5 	bl	800afb4 <_ZN18BrakeECUController11getInstanceEv>
 800b20a:	4603      	mov	r3, r0
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff ff0d 	bl	800b02c <_ZN18BrakeECUController12engageBrakesEv>
}
 800b212:	bf00      	nop
 800b214:	3708      	adds	r7, #8
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	0801ed2c 	.word	0x0801ed2c

0800b220 <_ZN13PodBreakState6updateEv>:

void PodBreakState::update() {
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	osDelay(pdMS_TO_TICKS(50));
 800b228:	2032      	movs	r0, #50	; 0x32
 800b22a:	f00c f80d 	bl	8017248 <osDelay>

}
 800b22e:	bf00      	nop
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
	...

0800b238 <_ZN13PodBreakState7disposeEv>:

void PodBreakState::dispose() {
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
	printf("exit break state\n");
 800b240:	4803      	ldr	r0, [pc, #12]	; (800b250 <_ZN13PodBreakState7disposeEv+0x18>)
 800b242:	f00b fe87 	bl	8016f54 <printf_>
}
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	0801ed40 	.word	0x0801ed40

0800b254 <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals16BrakeF_RX_EnableEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800b254:	b580      	push	{r7, lr}
 800b256:	b082      	sub	sp, #8
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
 800b25c:	460b      	mov	r3, r1
 800b25e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f103 0008 	add.w	r0, r3, #8
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f103 0110 	add.w	r1, r3, #16
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	1d1a      	adds	r2, r3, #4
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	f7ff fe42 	bl	800aefa <_ZN3can7signals16BrakeF_RX_Enable3setERyS2_Rhb>
        }
 800b276:	bf00      	nop
 800b278:	3708      	adds	r7, #8
 800b27a:	46bd      	mov	sp, r7
 800b27c:	bd80      	pop	{r7, pc}

0800b27e <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals16BrakeF_RX_EngageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800b27e:	b580      	push	{r7, lr}
 800b280:	b082      	sub	sp, #8
 800b282:	af00      	add	r7, sp, #0
 800b284:	6078      	str	r0, [r7, #4]
 800b286:	460b      	mov	r3, r1
 800b288:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f103 0008 	add.w	r0, r3, #8
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f103 0110 	add.w	r1, r3, #16
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	1d1a      	adds	r2, r3, #4
 800b29a:	78fb      	ldrb	r3, [r7, #3]
 800b29c:	f7ff fe56 	bl	800af4c <_ZN3can7signals16BrakeF_RX_Engage3setERyS2_Rhh>
        }
 800b2a0:	bf00      	nop
 800b2a2:	3708      	adds	r7, #8
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <_ZN3can7MessageINS_8messages17BrakeF_RX_ControlEE3setINS_7signals20BrakeF_RX_ErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f103 0008 	add.w	r0, r3, #8
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f103 0110 	add.w	r1, r3, #16
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	1d1a      	adds	r2, r3, #4
 800b2c4:	78fb      	ldrb	r3, [r7, #3]
 800b2c6:	f7ff fdf4 	bl	800aeb2 <_ZN3can7signals20BrakeF_RX_ErrorReset3setERyS2_Rhb>
        }
 800b2ca:	bf00      	nop
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals17BrakeF_TX_EnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b082      	sub	sp, #8
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f103 0208 	add.w	r2, r3, #8
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3310      	adds	r3, #16
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	4610      	mov	r0, r2
 800b2e8:	f7ff fdb3 	bl	800ae52 <_ZN3can7signals17BrakeF_TX_Enabled3getERKyS3_>
 800b2ec:	4603      	mov	r3, r0
        }
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}

0800b2f6 <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals16BrakeF_TX_StatusEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b082      	sub	sp, #8
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f103 0208 	add.w	r2, r3, #8
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3310      	adds	r3, #16
 800b308:	4619      	mov	r1, r3
 800b30a:	4610      	mov	r0, r2
 800b30c:	f7ff fd8e 	bl	800ae2c <_ZN3can7signals16BrakeF_TX_Status3getERKyS3_>
 800b310:	4603      	mov	r3, r0
        }
 800b312:	4618      	mov	r0, r3
 800b314:	3708      	adds	r7, #8
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}

0800b31a <_ZN3can7MessageINS_8messages16BrakeF_TX_StatusEE3getINS_7signals19BrakeF_TX_ErrorFlagEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800b31a:	b580      	push	{r7, lr}
 800b31c:	b082      	sub	sp, #8
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f103 0208 	add.w	r2, r3, #8
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3310      	adds	r3, #16
 800b32c:	4619      	mov	r1, r3
 800b32e:	4610      	mov	r0, r2
 800b330:	f7ff fda7 	bl	800ae82 <_ZN3can7signals19BrakeF_TX_ErrorFlag3getERKyS3_>
 800b334:	4603      	mov	r3, r0
        }
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <_ZNSt8functionIFvR9RxMessageEEC1IZN18BrakeECUControllerC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800b340:	b590      	push	{r4, r7, lr}
 800b342:	b083      	sub	sp, #12
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7f6 f86f 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800b352:	463b      	mov	r3, r7
 800b354:	4618      	mov	r0, r3
 800b356:	f000 f83b 	bl	800b3d0 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d00f      	beq.n	800b380 <_ZNSt8functionIFvR9RxMessageEEC1IZN18BrakeECUControllerC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800b360:	687c      	ldr	r4, [r7, #4]
 800b362:	463b      	mov	r3, r7
 800b364:	4618      	mov	r0, r3
 800b366:	f000 f83e 	bl	800b3e6 <_ZSt4moveIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800b36a:	4603      	mov	r3, r0
 800b36c:	4619      	mov	r1, r3
 800b36e:	4620      	mov	r0, r4
 800b370:	f000 f844 	bl	800b3fc <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a05      	ldr	r2, [pc, #20]	; (800b38c <_ZNSt8functionIFvR9RxMessageEEC1IZN18BrakeECUControllerC4EvEUlS1_E_vvEET_+0x4c>)
 800b378:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	4a04      	ldr	r2, [pc, #16]	; (800b390 <_ZNSt8functionIFvR9RxMessageEEC1IZN18BrakeECUControllerC4EvEUlS1_E_vvEET_+0x50>)
 800b37e:	609a      	str	r2, [r3, #8]
      }
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	4618      	mov	r0, r3
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	bd90      	pop	{r4, r7, pc}
 800b38a:	bf00      	nop
 800b38c:	0800b421 	.word	0x0800b421
 800b390:	0800b44b 	.word	0x0800b44b

0800b394 <_ZN3can23registerMessageReceiverINS_8messages16BrakeF_TX_StatusEEEjSt8functionIFvR9RxMessageEE>:
}

namespace can {

template<typename MESSAGE>
inline unsigned int registerMessageReceiver(
 800b394:	b590      	push	{r4, r7, lr}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
		std::function<void(RxMessage&)> receiver) {
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800b39c:	f107 0308 	add.w	r3, r7, #8
 800b3a0:	6879      	ldr	r1, [r7, #4]
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7f6 f9bf 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800b3a8:	f107 0308 	add.w	r3, r7, #8
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f240 1191 	movw	r1, #401	; 0x191
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7f6 f8b2 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800b3b8:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800b3ba:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800b3bc:	f107 0308 	add.w	r3, r7, #8
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7f6 f867 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800b3c6:	4623      	mov	r3, r4
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	371c      	adds	r7, #28
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd90      	pop	{r4, r7, pc}

0800b3d0 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
	  { return true; }
 800b3d8:	2301      	movs	r3, #1
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <_ZSt4moveIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800b3e6:	b480      	push	{r7}
 800b3e8:	b083      	sub	sp, #12
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800b3fc:	b590      	push	{r4, r7, lr}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800b406:	6838      	ldr	r0, [r7, #0]
 800b408:	f7ff ffed 	bl	800b3e6 <_ZSt4moveIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800b40c:	4603      	mov	r3, r0
 800b40e:	4622      	mov	r2, r4
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 f838 	bl	800b488 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd90      	pop	{r4, r7, pc}

0800b420 <_ZNSt17_Function_handlerIFvR9RxMessageEZN18BrakeECUControllerC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800b420:	b590      	push	{r4, r7, lr}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 f845 	bl	800b4ba <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800b430:	4604      	mov	r4, r0
 800b432:	6838      	ldr	r0, [r7, #0]
 800b434:	f7f6 fa01 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800b438:	4603      	mov	r3, r0
 800b43a:	4619      	mov	r1, r3
 800b43c:	4620      	mov	r0, r4
 800b43e:	f000 f84d 	bl	800b4dc <_ZSt10__invoke_rIvRZN18BrakeECUControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800b442:	bf00      	nop
      }
 800b444:	370c      	adds	r7, #12
 800b446:	46bd      	mov	sp, r7
 800b448:	bd90      	pop	{r4, r7, pc}

0800b44a <_ZNSt17_Function_handlerIFvR9RxMessageEZN18BrakeECUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800b44a:	b590      	push	{r4, r7, lr}
 800b44c:	b085      	sub	sp, #20
 800b44e:	af00      	add	r7, sp, #0
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	60b9      	str	r1, [r7, #8]
 800b454:	4613      	mov	r3, r2
 800b456:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800b458:	79fb      	ldrb	r3, [r7, #7]
 800b45a:	2b01      	cmp	r3, #1
 800b45c:	d109      	bne.n	800b472 <_ZNSt17_Function_handlerIFvR9RxMessageEZN18BrakeECUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f000 f852 	bl	800b508 <_ZNSt9_Any_data9_M_accessIPZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERT_v>
 800b464:	4604      	mov	r4, r0
 800b466:	68b8      	ldr	r0, [r7, #8]
 800b468:	f000 f827 	bl	800b4ba <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800b46c:	4603      	mov	r3, r0
 800b46e:	6023      	str	r3, [r4, #0]
	    break;
 800b470:	e005      	b.n	800b47e <_ZNSt17_Function_handlerIFvR9RxMessageEZN18BrakeECUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800b472:	79fb      	ldrb	r3, [r7, #7]
 800b474:	461a      	mov	r2, r3
 800b476:	68b9      	ldr	r1, [r7, #8]
 800b478:	68f8      	ldr	r0, [r7, #12]
 800b47a:	f000 f851 	bl	800b520 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800b47e:	2300      	movs	r3, #0
      }
 800b480:	4618      	mov	r0, r3
 800b482:	3714      	adds	r7, #20
 800b484:	46bd      	mov	sp, r7
 800b486:	bd90      	pop	{r4, r7, pc}

0800b488 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800b488:	b590      	push	{r4, r7, lr}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800b494:	68b8      	ldr	r0, [r7, #8]
 800b496:	f7ff ffa6 	bl	800b3e6 <_ZSt4moveIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800b49a:	4604      	mov	r4, r0
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f7f6 ffc5 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800b4a2:	4603      	mov	r3, r0
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	2004      	movs	r0, #4
 800b4a8:	f7f6 ffb4 	bl	8002414 <_ZnwjPv>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	6013      	str	r3, [r2, #0]
 800b4b2:	bf00      	nop
 800b4b4:	3714      	adds	r7, #20
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd90      	pop	{r4, r7, pc}

0800b4ba <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800b4ba:	b580      	push	{r7, lr}
 800b4bc:	b084      	sub	sp, #16
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f857 	bl	800b576 <_ZNKSt9_Any_data9_M_accessIZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERKT_v>
 800b4c8:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800b4ca:	68f8      	ldr	r0, [r7, #12]
 800b4cc:	f000 f85f 	bl	800b58e <_ZSt11__addressofIKZN18BrakeECUControllerC4EvEUlR9RxMessageE_EPT_RS5_>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	bf00      	nop
	}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <_ZSt10__invoke_rIvRZN18BrakeECUControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800b4dc:	b5b0      	push	{r4, r5, r7, lr}
 800b4de:	b082      	sub	sp, #8
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	f000 f85c 	bl	800b5a4 <_ZSt7forwardIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800b4ec:	4604      	mov	r4, r0
 800b4ee:	6838      	ldr	r0, [r7, #0]
 800b4f0:	f7f6 f9a3 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	4621      	mov	r1, r4
 800b4fa:	4628      	mov	r0, r5
 800b4fc:	f000 f85d 	bl	800b5ba <_ZSt13__invoke_implIvRZN18BrakeECUControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800b500:	bf00      	nop
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bdb0      	pop	{r4, r5, r7, pc}

0800b508 <_ZNSt9_Any_data9_M_accessIPZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7f6 ff8b 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800b516:	4603      	mov	r3, r0
 800b518:	4618      	mov	r0, r3
 800b51a:	3708      	adds	r7, #8
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bd80      	pop	{r7, pc}

0800b520 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800b520:	b5b0      	push	{r4, r5, r7, lr}
 800b522:	b084      	sub	sp, #16
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4613      	mov	r3, r2
 800b52c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800b52e:	79fb      	ldrb	r3, [r7, #7]
 800b530:	2b03      	cmp	r3, #3
 800b532:	d016      	beq.n	800b562 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800b534:	2b03      	cmp	r3, #3
 800b536:	dc19      	bgt.n	800b56c <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d002      	beq.n	800b542 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d00a      	beq.n	800b556 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800b540:	e014      	b.n	800b56c <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f7ff ffe0 	bl	800b508 <_ZNSt9_Any_data9_M_accessIPZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERT_v>
 800b548:	4604      	mov	r4, r0
 800b54a:	68b8      	ldr	r0, [r7, #8]
 800b54c:	f7ff ffb5 	bl	800b4ba <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800b550:	4603      	mov	r3, r0
 800b552:	6023      	str	r3, [r4, #0]
	      break;
 800b554:	e00a      	b.n	800b56c <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800b556:	462a      	mov	r2, r5
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 f843 	bl	800b5e6 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800b560:	e004      	b.n	800b56c <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800b562:	4621      	mov	r1, r4
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f000 f857 	bl	800b618 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800b56a:	bf00      	nop
	  return false;
 800b56c:	2300      	movs	r3, #0
	}
 800b56e:	4618      	mov	r0, r3
 800b570:	3710      	adds	r7, #16
 800b572:	46bd      	mov	sp, r7
 800b574:	bdb0      	pop	{r4, r5, r7, pc}

0800b576 <_ZNKSt9_Any_data9_M_accessIZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f7f6 ff5f 	bl	8002442 <_ZNKSt9_Any_data9_M_accessEv>
 800b584:	4603      	mov	r3, r0
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <_ZSt11__addressofIKZN18BrakeECUControllerC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b58e:	b480      	push	{r7}
 800b590:	b083      	sub	sp, #12
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	4618      	mov	r0, r3
 800b59a:	370c      	adds	r7, #12
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr

0800b5a4 <_ZSt7forwardIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <_ZSt13__invoke_implIvRZN18BrakeECUControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800b5ba:	b590      	push	{r4, r7, lr}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	7338      	strb	r0, [r7, #12]
 800b5c2:	60b9      	str	r1, [r7, #8]
 800b5c4:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800b5c6:	68b8      	ldr	r0, [r7, #8]
 800b5c8:	f7ff ffec 	bl	800b5a4 <_ZSt7forwardIRZN18BrakeECUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800b5cc:	4604      	mov	r4, r0
 800b5ce:	6878      	ldr	r0, [r7, #4]
 800b5d0:	f7f6 f933 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f7ff fdde 	bl	800b19a <_ZZN18BrakeECUControllerC4EvENKUlR9RxMessageE_clES1_>
 800b5de:	bf00      	nop
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd90      	pop	{r4, r7, pc}

0800b5e6 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800b5e6:	b590      	push	{r4, r7, lr}
 800b5e8:	b085      	sub	sp, #20
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	60f8      	str	r0, [r7, #12]
 800b5ee:	60b9      	str	r1, [r7, #8]
 800b5f0:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800b5f2:	68b8      	ldr	r0, [r7, #8]
 800b5f4:	f7ff ffbf 	bl	800b576 <_ZNKSt9_Any_data9_M_accessIZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERKT_v>
 800b5f8:	4604      	mov	r4, r0
 800b5fa:	68f8      	ldr	r0, [r7, #12]
 800b5fc:	f7f6 ff16 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800b600:	4603      	mov	r3, r0
 800b602:	4619      	mov	r1, r3
 800b604:	2004      	movs	r0, #4
 800b606:	f7f6 ff05 	bl	8002414 <_ZnwjPv>
 800b60a:	4602      	mov	r2, r0
 800b60c:	6823      	ldr	r3, [r4, #0]
 800b60e:	6013      	str	r3, [r2, #0]
	}
 800b610:	bf00      	nop
 800b612:	3714      	adds	r7, #20
 800b614:	46bd      	mov	sp, r7
 800b616:	bd90      	pop	{r4, r7, pc}

0800b618 <_ZNSt14_Function_base13_Base_managerIZN18BrakeECUControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f804 	bl	800b630 <_ZNSt9_Any_data9_M_accessIZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERT_v>
	}
 800b628:	bf00      	nop
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <_ZNSt9_Any_data9_M_accessIZN18BrakeECUControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7f6 fef7 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800b63e:	4603      	mov	r3, r0
 800b640:	4618      	mov	r0, r3
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <_ZN17PodEmergencyState5setupEv>:
#include "PodLaunchPreparationState.hpp"
#include "PodLaunchingState.hpp"



void PodEmergencyState::setup() {
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
	printf("enter emcy state\n");
 800b650:	4803      	ldr	r0, [pc, #12]	; (800b660 <_ZN17PodEmergencyState5setupEv+0x18>)
 800b652:	f00b fc7f 	bl	8016f54 <printf_>
}
 800b656:	bf00      	nop
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	0801ed54 	.word	0x0801ed54

0800b664 <_ZN17PodEmergencyState6updateEv>:

void PodEmergencyState::update() {
 800b664:	b580      	push	{r7, lr}
 800b666:	b082      	sub	sp, #8
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
	if(m_stateMaschine->wasPreviousState<PodIdleState>()){
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	4618      	mov	r0, r3
 800b672:	f000 f847 	bl	800b704 <_ZN13StateMaschine16wasPreviousStateI12PodIdleStateEEbv>
 800b676:	4603      	mov	r3, r0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d004      	beq.n	800b686 <_ZN17PodEmergencyState6updateEv+0x22>
		osDelay(osWaitForever);
 800b67c:	f04f 30ff 	mov.w	r0, #4294967295
 800b680:	f00b fde2 	bl	8017248 <osDelay>
 800b684:	e029      	b.n	800b6da <_ZN17PodEmergencyState6updateEv+0x76>
	}else if(m_stateMaschine->wasPreviousState<PodStartupState>()){
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	4618      	mov	r0, r3
 800b68c:	f000 f84d 	bl	800b72a <_ZN13StateMaschine16wasPreviousStateI15PodStartupStateEEbv>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d004      	beq.n	800b6a0 <_ZN17PodEmergencyState6updateEv+0x3c>
		osDelay(osWaitForever);
 800b696:	f04f 30ff 	mov.w	r0, #4294967295
 800b69a:	f00b fdd5 	bl	8017248 <osDelay>
 800b69e:	e01c      	b.n	800b6da <_ZN17PodEmergencyState6updateEv+0x76>
	}else if(m_stateMaschine->wasPreviousState<PodLaunchPreparationState>()){
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	685b      	ldr	r3, [r3, #4]
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 f853 	bl	800b750 <_ZN13StateMaschine16wasPreviousStateI25PodLaunchPreparationStateEEbv>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d006      	beq.n	800b6be <_ZN17PodEmergencyState6updateEv+0x5a>
		//TODO implement handling
		Error_Handler();
 800b6b0:	f003 ffbe 	bl	800f630 <Error_Handler>
		osDelay(osWaitForever);
 800b6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b8:	f00b fdc6 	bl	8017248 <osDelay>
 800b6bc:	e00d      	b.n	800b6da <_ZN17PodEmergencyState6updateEv+0x76>
	}else if(m_stateMaschine->wasPreviousState<PodLaunchingState>()){
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	685b      	ldr	r3, [r3, #4]
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 f857 	bl	800b776 <_ZN13StateMaschine16wasPreviousStateI17PodLaunchingStateEEbv>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d005      	beq.n	800b6da <_ZN17PodEmergencyState6updateEv+0x76>
		//TODO implement handing.
		Error_Handler();
 800b6ce:	f003 ffaf 	bl	800f630 <Error_Handler>
		osDelay(osWaitForever);
 800b6d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d6:	f00b fdb7 	bl	8017248 <osDelay>
	}
	osDelay(50);
 800b6da:	2032      	movs	r0, #50	; 0x32
 800b6dc:	f00b fdb4 	bl	8017248 <osDelay>
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <_ZN17PodEmergencyState7disposeEv>:

void PodEmergencyState::dispose() {
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
	printf("exit emcy state\n");
 800b6f0:	4803      	ldr	r0, [pc, #12]	; (800b700 <_ZN17PodEmergencyState7disposeEv+0x18>)
 800b6f2:	f00b fc2f 	bl	8016f54 <printf_>
}
 800b6f6:	bf00      	nop
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	0801ed68 	.word	0x0801ed68

0800b704 <_ZN13StateMaschine16wasPreviousStateI12PodIdleStateEEbv>:
	bool wasPreviousState(){
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
		unsigned int id = State::getId<STATE>();
 800b70c:	f7fe f828 	bl	8009760 <_ZN5State5getIdI12PodIdleStateEEjv>
 800b710:	60f8      	str	r0, [r7, #12]
		return m_prevState == id;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	68fa      	ldr	r2, [r7, #12]
 800b718:	429a      	cmp	r2, r3
 800b71a:	bf0c      	ite	eq
 800b71c:	2301      	moveq	r3, #1
 800b71e:	2300      	movne	r3, #0
 800b720:	b2db      	uxtb	r3, r3
	}
 800b722:	4618      	mov	r0, r3
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}

0800b72a <_ZN13StateMaschine16wasPreviousStateI15PodStartupStateEEbv>:
	bool wasPreviousState(){
 800b72a:	b580      	push	{r7, lr}
 800b72c:	b084      	sub	sp, #16
 800b72e:	af00      	add	r7, sp, #0
 800b730:	6078      	str	r0, [r7, #4]
		unsigned int id = State::getId<STATE>();
 800b732:	f7fd ffdd 	bl	80096f0 <_ZN5State5getIdI15PodStartupStateEEjv>
 800b736:	60f8      	str	r0, [r7, #12]
		return m_prevState == id;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	689b      	ldr	r3, [r3, #8]
 800b73c:	68fa      	ldr	r2, [r7, #12]
 800b73e:	429a      	cmp	r2, r3
 800b740:	bf0c      	ite	eq
 800b742:	2301      	moveq	r3, #1
 800b744:	2300      	movne	r3, #0
 800b746:	b2db      	uxtb	r3, r3
	}
 800b748:	4618      	mov	r0, r3
 800b74a:	3710      	adds	r7, #16
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <_ZN13StateMaschine16wasPreviousStateI25PodLaunchPreparationStateEEbv>:
	bool wasPreviousState(){
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
		unsigned int id = State::getId<STATE>();
 800b758:	f7fe f85a 	bl	8009810 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>
 800b75c:	60f8      	str	r0, [r7, #12]
		return m_prevState == id;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	429a      	cmp	r2, r3
 800b766:	bf0c      	ite	eq
 800b768:	2301      	moveq	r3, #1
 800b76a:	2300      	movne	r3, #0
 800b76c:	b2db      	uxtb	r3, r3
	}
 800b76e:	4618      	mov	r0, r3
 800b770:	3710      	adds	r7, #16
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <_ZN13StateMaschine16wasPreviousStateI17PodLaunchingStateEEbv>:
	bool wasPreviousState(){
 800b776:	b580      	push	{r7, lr}
 800b778:	b084      	sub	sp, #16
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
		unsigned int id = State::getId<STATE>();
 800b77e:	f7fe f89f 	bl	80098c0 <_ZN5State5getIdI17PodLaunchingStateEEjv>
 800b782:	60f8      	str	r0, [r7, #12]
		return m_prevState == id;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	689b      	ldr	r3, [r3, #8]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	bf0c      	ite	eq
 800b78e:	2301      	moveq	r3, #1
 800b790:	2300      	movne	r3, #0
 800b792:	b2db      	uxtb	r3, r3
	}
 800b794:	4618      	mov	r0, r3
 800b796:	3710      	adds	r7, #16
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <_ZN3can7signals27TEST_GROUND_STATION_COMMAND3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFFull));
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	4613      	mov	r3, r2
 800b7ae:	73fb      	strb	r3, [r7, #15]
                return value;
 800b7b0:	7bfb      	ldrb	r3, [r7, #15]
            }
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3714      	adds	r7, #20
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7bc:	4770      	bx	lr
	...

0800b7c0 <__tcf_2>:

class GroundStationReceiver {
public:

	static GroundStationReceiver& getInstance(){
		static GroundStationReceiver instance;
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	af00      	add	r7, sp, #0
 800b7c4:	4801      	ldr	r0, [pc, #4]	; (800b7cc <__tcf_2+0xc>)
 800b7c6:	f000 f831 	bl	800b82c <_ZN21GroundStationReceiverD1Ev>
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	20000d8c 	.word	0x20000d8c

0800b7d0 <_ZN21GroundStationReceiver11getInstanceEv>:
	static GroundStationReceiver& getInstance(){
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
		static GroundStationReceiver instance;
 800b7d4:	4b12      	ldr	r3, [pc, #72]	; (800b820 <_ZN21GroundStationReceiver11getInstanceEv+0x50>)
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	f3bf 8f5b 	dmb	ish
 800b7dc:	b2db      	uxtb	r3, r3
 800b7de:	f003 0301 	and.w	r3, r3, #1
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	bf0c      	ite	eq
 800b7e6:	2301      	moveq	r3, #1
 800b7e8:	2300      	movne	r3, #0
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d013      	beq.n	800b818 <_ZN21GroundStationReceiver11getInstanceEv+0x48>
 800b7f0:	480b      	ldr	r0, [pc, #44]	; (800b820 <_ZN21GroundStationReceiver11getInstanceEv+0x50>)
 800b7f2:	f00f ff9f 	bl	801b734 <__cxa_guard_acquire>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	bf14      	ite	ne
 800b7fc:	2301      	movne	r3, #1
 800b7fe:	2300      	moveq	r3, #0
 800b800:	b2db      	uxtb	r3, r3
 800b802:	2b00      	cmp	r3, #0
 800b804:	d008      	beq.n	800b818 <_ZN21GroundStationReceiver11getInstanceEv+0x48>
 800b806:	4807      	ldr	r0, [pc, #28]	; (800b824 <_ZN21GroundStationReceiver11getInstanceEv+0x54>)
 800b808:	f000 f839 	bl	800b87e <_ZN21GroundStationReceiverC1Ev>
 800b80c:	4806      	ldr	r0, [pc, #24]	; (800b828 <_ZN21GroundStationReceiver11getInstanceEv+0x58>)
 800b80e:	f010 fb28 	bl	801be62 <atexit>
 800b812:	4803      	ldr	r0, [pc, #12]	; (800b820 <_ZN21GroundStationReceiver11getInstanceEv+0x50>)
 800b814:	f00f ff9a 	bl	801b74c <__cxa_guard_release>
		return instance;
 800b818:	4b02      	ldr	r3, [pc, #8]	; (800b824 <_ZN21GroundStationReceiver11getInstanceEv+0x54>)
	}
 800b81a:	4618      	mov	r0, r3
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20000d94 	.word	0x20000d94
 800b824:	20000d8c 	.word	0x20000d8c
 800b828:	0800b7c1 	.word	0x0800b7c1

0800b82c <_ZN21GroundStationReceiverD1Ev>:

	~GroundStationReceiver(){
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
		can::unregisterMessageReceiver(m_receiverId);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7f5 ff29 	bl	8001690 <_ZN3can25unregisterMessageReceiverEj>
	}
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}

0800b848 <_ZN21GroundStationReceiver14getLastCommandEv>:
	GroundStationReceiver(GroundStationReceiver&) = delete;
	GroundStationReceiver(GroundStationReceiver&&) = delete;
	GroundStationReceiver& operator=(GroundStationReceiver&) = delete;
	GroundStationReceiver& operator=(GroundStationReceiver&&) = delete;

	[[nodiscard]] inline GroundStationCommand getLastCommand(){
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
		return m_lastCommand;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	791b      	ldrb	r3, [r3, #4]
	}
 800b854:	4618      	mov	r0, r3
 800b856:	370c      	adds	r7, #12
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <_ZZN21GroundStationReceiverC4EvENKUlR9RxMessageE_clES1_>:
private:
	explicit GroundStationReceiver(){
		m_receiverId = can::registerMessageReceiver<can::messages::TEST_GROUND_STATION_CONTROLL>([this](RxMessage& msg){
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
			this->callback(msg);
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	4618      	mov	r0, r3
 800b872:	f000 f84f 	bl	800b914 <_ZN21GroundStationReceiver8callbackER9RxMessage>
		});
 800b876:	bf00      	nop
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}

0800b87e <_ZN21GroundStationReceiverC1Ev>:
	explicit GroundStationReceiver(){
 800b87e:	b580      	push	{r7, lr}
 800b880:	b086      	sub	sp, #24
 800b882:	af00      	add	r7, sp, #0
 800b884:	6078      	str	r0, [r7, #4]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	711a      	strb	r2, [r3, #4]
		m_receiverId = can::registerMessageReceiver<can::messages::TEST_GROUND_STATION_CONTROLL>([this](RxMessage& msg){
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	f107 0308 	add.w	r3, r7, #8
 800b892:	4611      	mov	r1, r2
 800b894:	4618      	mov	r0, r3
 800b896:	f000 f891 	bl	800b9bc <_ZNSt8functionIFvR9RxMessageEEC1IZN21GroundStationReceiverC4EvEUlS1_E_vvEET_>
 800b89a:	f107 0308 	add.w	r3, r7, #8
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f000 f8b6 	bl	800ba10 <_ZN3can23registerMessageReceiverINS_8messages28TEST_GROUND_STATION_CONTROLLEEEjSt8functionIFvR9RxMessageEE>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	601a      	str	r2, [r3, #0]
 800b8aa:	f107 0308 	add.w	r3, r7, #8
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f7f5 fdf0 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b086      	sub	sp, #24
 800b8c2:	af02      	add	r7, sp, #8
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	60b9      	str	r1, [r7, #8]
 800b8c8:	607a      	str	r2, [r7, #4]
 800b8ca:	68f8      	ldr	r0, [r7, #12]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b8d8:	f7f7 f9ed 	bl	8002cb6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800b8e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8e4:	d000      	beq.n	800b8e8 <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
                    while(1);
 800b8e6:	e7fe      	b.n	800b8e6 <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
        };
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3710      	adds	r7, #16
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}

0800b8f2 <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800b8f2:	b580      	push	{r7, lr}
 800b8f4:	b082      	sub	sp, #8
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	6078      	str	r0, [r7, #4]
 800b8fa:	6039      	str	r1, [r7, #0]
 800b8fc:	6839      	ldr	r1, [r7, #0]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	331c      	adds	r3, #28
 800b902:	461a      	mov	r2, r3
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f7ff ffda 	bl	800b8be <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4618      	mov	r0, r3
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <_ZN21GroundStationReceiver8callbackER9RxMessage>:

	void callback(RxMessage& raw){
 800b914:	b580      	push	{r7, lr}
 800b916:	b088      	sub	sp, #32
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::TEST_GROUND_STATION_CONTROLL> msg {raw};
 800b91e:	f107 0308 	add.w	r3, r7, #8
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff ffe4 	bl	800b8f2 <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEEC1ERK9RxMessage>
		m_lastCommand = static_cast<GroundStationCommand>(msg.get<can::signals::TEST_GROUND_STATION_COMMAND>());
 800b92a:	f107 0308 	add.w	r3, r7, #8
 800b92e:	4618      	mov	r0, r3
 800b930:	f000 f88c 	bl	800ba4c <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEE3getINS_7signals27TEST_GROUND_STATION_COMMANDEEENT_8dataTypeEv>
 800b934:	4603      	mov	r3, r0
 800b936:	461a      	mov	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	711a      	strb	r2, [r3, #4]
	}
 800b93c:	bf00      	nop
 800b93e:	3720      	adds	r7, #32
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}

0800b944 <_ZN12PodIdleState5setupEv>:
#include "GlobalState.hpp"
#include "GroundStationReceiver.hpp"
#include "FreeRTOS.h"
#include "cmsis_os.h"

void PodIdleState::setup(){
 800b944:	b580      	push	{r7, lr}
 800b946:	b082      	sub	sp, #8
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
	printf("enter idle state\n");
 800b94c:	4803      	ldr	r0, [pc, #12]	; (800b95c <_ZN12PodIdleState5setupEv+0x18>)
 800b94e:	f00b fb01 	bl	8016f54 <printf_>
}
 800b952:	bf00      	nop
 800b954:	3708      	adds	r7, #8
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop
 800b95c:	0801edb0 	.word	0x0801edb0

0800b960 <_ZN12PodIdleState6updateEv>:

void PodIdleState::update(){
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
	//TODO check that all ecus are connected using either a improved heartbeat or a custom method.
	if(GroundStationReceiver::getInstance().getLastCommand() == COMMAND_ENTER_LAUNCH_PREP){
 800b968:	f7ff ff32 	bl	800b7d0 <_ZN21GroundStationReceiver11getInstanceEv>
 800b96c:	4603      	mov	r3, r0
 800b96e:	4618      	mov	r0, r3
 800b970:	f7ff ff6a 	bl	800b848 <_ZN21GroundStationReceiver14getLastCommandEv>
 800b974:	4603      	mov	r3, r0
 800b976:	2b01      	cmp	r3, #1
 800b978:	bf0c      	ite	eq
 800b97a:	2301      	moveq	r3, #1
 800b97c:	2300      	movne	r3, #0
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	2b00      	cmp	r3, #0
 800b982:	d005      	beq.n	800b990 <_ZN12PodIdleState6updateEv+0x30>
		GlobalState::getInstance().setState<PodLaunchPreparationState>();
 800b984:	f7fd fc24 	bl	80091d0 <_ZN11GlobalState11getInstanceEv>
 800b988:	4603      	mov	r3, r0
 800b98a:	4618      	mov	r0, r3
 800b98c:	f000 f870 	bl	800ba70 <_ZN11GlobalState8setStateI25PodLaunchPreparationStateEEvv>
	}
	osDelay(50);
 800b990:	2032      	movs	r0, #50	; 0x32
 800b992:	f00b fc59 	bl	8017248 <osDelay>
}
 800b996:	bf00      	nop
 800b998:	3708      	adds	r7, #8
 800b99a:	46bd      	mov	sp, r7
 800b99c:	bd80      	pop	{r7, pc}
	...

0800b9a0 <_ZN12PodIdleState7disposeEv>:

void PodIdleState::dispose(){
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
	printf("exit idle state\n");
 800b9a8:	4803      	ldr	r0, [pc, #12]	; (800b9b8 <_ZN12PodIdleState7disposeEv+0x18>)
 800b9aa:	f00b fad3 	bl	8016f54 <printf_>
}
 800b9ae:	bf00      	nop
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	0801edc4 	.word	0x0801edc4

0800b9bc <_ZNSt8functionIFvR9RxMessageEEC1IZN21GroundStationReceiverC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800b9bc:	b590      	push	{r4, r7, lr}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7f5 fd31 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800b9ce:	463b      	mov	r3, r7
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f000 f868 	bl	800baa6 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d00f      	beq.n	800b9fc <_ZNSt8functionIFvR9RxMessageEEC1IZN21GroundStationReceiverC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800b9dc:	687c      	ldr	r4, [r7, #4]
 800b9de:	463b      	mov	r3, r7
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 f86b 	bl	800babc <_ZSt4moveIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	4619      	mov	r1, r3
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f000 f871 	bl	800bad2 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	4a05      	ldr	r2, [pc, #20]	; (800ba08 <_ZNSt8functionIFvR9RxMessageEEC1IZN21GroundStationReceiverC4EvEUlS1_E_vvEET_+0x4c>)
 800b9f4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a04      	ldr	r2, [pc, #16]	; (800ba0c <_ZNSt8functionIFvR9RxMessageEEC1IZN21GroundStationReceiverC4EvEUlS1_E_vvEET_+0x50>)
 800b9fa:	609a      	str	r2, [r3, #8]
      }
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	370c      	adds	r7, #12
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd90      	pop	{r4, r7, pc}
 800ba06:	bf00      	nop
 800ba08:	0800baf7 	.word	0x0800baf7
 800ba0c:	0800bb21 	.word	0x0800bb21

0800ba10 <_ZN3can23registerMessageReceiverINS_8messages28TEST_GROUND_STATION_CONTROLLEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800ba10:	b590      	push	{r4, r7, lr}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800ba18:	f107 0308 	add.w	r3, r7, #8
 800ba1c:	6879      	ldr	r1, [r7, #4]
 800ba1e:	4618      	mov	r0, r3
 800ba20:	f7f5 fe81 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800ba24:	f107 0308 	add.w	r3, r7, #8
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7f5 fd74 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800ba34:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800ba36:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800ba38:	f107 0308 	add.w	r3, r7, #8
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7f5 fd29 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800ba42:	4623      	mov	r3, r4
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	371c      	adds	r7, #28
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd90      	pop	{r4, r7, pc}

0800ba4c <_ZN3can7MessageINS_8messages28TEST_GROUND_STATION_CONTROLLEE3getINS_7signals27TEST_GROUND_STATION_COMMANDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b082      	sub	sp, #8
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f103 0208 	add.w	r2, r3, #8
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	3310      	adds	r3, #16
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4610      	mov	r0, r2
 800ba62:	f7ff fe9b 	bl	800b79c <_ZN3can7signals27TEST_GROUND_STATION_COMMAND3getERKyS3_>
 800ba66:	4603      	mov	r3, r0
        }
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <_ZN11GlobalState8setStateI25PodLaunchPreparationStateEEvv>:
	void setState(){
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	333c      	adds	r3, #60	; 0x3c
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	f000 f86e 	bl	800bb5e <_ZN13StateMaschine8getStateI25PodLaunchPreparationStateEERK5Statev>
 800ba82:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800ba84:	68f8      	ldr	r0, [r7, #12]
 800ba86:	f7fd f9e5 	bl	8008e54 <_ZNK5State11getPodStateEv>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f7fd fbdc 	bl	800924c <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	333c      	adds	r3, #60	; 0x3c
 800ba98:	4618      	mov	r0, r3
 800ba9a:	f000 f870 	bl	800bb7e <_ZN13StateMaschine8setStateI25PodLaunchPreparationStateEEvv>
	}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}

0800baa6 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800baa6:	b480      	push	{r7}
 800baa8:	b083      	sub	sp, #12
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
	  { return true; }
 800baae:	2301      	movs	r3, #1
 800bab0:	4618      	mov	r0, r3
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <_ZSt4moveIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4618      	mov	r0, r3
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800bad2:	b590      	push	{r4, r7, lr}
 800bad4:	b083      	sub	sp, #12
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800badc:	6838      	ldr	r0, [r7, #0]
 800bade:	f7ff ffed 	bl	800babc <_ZSt4moveIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800bae2:	4603      	mov	r3, r0
 800bae4:	4622      	mov	r2, r4
 800bae6:	4619      	mov	r1, r3
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 f875 	bl	800bbd8 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800baee:	bf00      	nop
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd90      	pop	{r4, r7, pc}

0800baf6 <_ZNSt17_Function_handlerIFvR9RxMessageEZN21GroundStationReceiverC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800baf6:	b590      	push	{r4, r7, lr}
 800baf8:	b083      	sub	sp, #12
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	6078      	str	r0, [r7, #4]
 800bafe:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f000 f882 	bl	800bc0a <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800bb06:	4604      	mov	r4, r0
 800bb08:	6838      	ldr	r0, [r7, #0]
 800bb0a:	f7f5 fe96 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	4619      	mov	r1, r3
 800bb12:	4620      	mov	r0, r4
 800bb14:	f000 f88a 	bl	800bc2c <_ZSt10__invoke_rIvRZN21GroundStationReceiverC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800bb18:	bf00      	nop
      }
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd90      	pop	{r4, r7, pc}

0800bb20 <_ZNSt17_Function_handlerIFvR9RxMessageEZN21GroundStationReceiverC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800bb20:	b590      	push	{r4, r7, lr}
 800bb22:	b085      	sub	sp, #20
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	4613      	mov	r3, r2
 800bb2c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800bb2e:	79fb      	ldrb	r3, [r7, #7]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d109      	bne.n	800bb48 <_ZNSt17_Function_handlerIFvR9RxMessageEZN21GroundStationReceiverC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800bb34:	68f8      	ldr	r0, [r7, #12]
 800bb36:	f000 f88f 	bl	800bc58 <_ZNSt9_Any_data9_M_accessIPZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERT_v>
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	68b8      	ldr	r0, [r7, #8]
 800bb3e:	f000 f864 	bl	800bc0a <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800bb42:	4603      	mov	r3, r0
 800bb44:	6023      	str	r3, [r4, #0]
	    break;
 800bb46:	e005      	b.n	800bb54 <_ZNSt17_Function_handlerIFvR9RxMessageEZN21GroundStationReceiverC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800bb48:	79fb      	ldrb	r3, [r7, #7]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	68b9      	ldr	r1, [r7, #8]
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 f88e 	bl	800bc70 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800bb54:	2300      	movs	r3, #0
      }
 800bb56:	4618      	mov	r0, r3
 800bb58:	3714      	adds	r7, #20
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd90      	pop	{r4, r7, pc}

0800bb5e <_ZN13StateMaschine8getStateI25PodLaunchPreparationStateEERK5Statev>:
	const State& getState(){
 800bb5e:	b590      	push	{r4, r7, lr}
 800bb60:	b083      	sub	sp, #12
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681c      	ldr	r4, [r3, #0]
 800bb6a:	f7fd fe51 	bl	8009810 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	4423      	add	r3, r4
 800bb74:	681b      	ldr	r3, [r3, #0]
	}
 800bb76:	4618      	mov	r0, r3
 800bb78:	370c      	adds	r7, #12
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd90      	pop	{r4, r7, pc}

0800bb7e <_ZN13StateMaschine8setStateI25PodLaunchPreparationStateEEvv>:
	void setState() {
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b084      	sub	sp, #16
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800bb86:	f00f fab5 	bl	801b0f4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	4413      	add	r3, r2
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	68da      	ldr	r2, [r3, #12]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800bba4:	f7fd fe34 	bl	8009810 <_ZN5State5getIdI25PodLaunchPreparationStateEEjv>
 800bba8:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	7d1b      	ldrb	r3, [r3, #20]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d101      	bne.n	800bbb6 <_ZN13StateMaschine8setStateI25PodLaunchPreparationStateEEvv+0x38>
			Error_Handler();
 800bbb2:	f003 fd3d 	bl	800f630 <Error_Handler>
		m_states[id]->m_active = true;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800bbcc:	f00f fac2 	bl	801b154 <vPortExitCritical>
	}
 800bbd0:	bf00      	nop
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800bbd8:	b590      	push	{r4, r7, lr}
 800bbda:	b085      	sub	sp, #20
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800bbe4:	68b8      	ldr	r0, [r7, #8]
 800bbe6:	f7ff ff69 	bl	800babc <_ZSt4moveIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800bbea:	4604      	mov	r4, r0
 800bbec:	68f8      	ldr	r0, [r7, #12]
 800bbee:	f7f6 fc1d 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	4619      	mov	r1, r3
 800bbf6:	2004      	movs	r0, #4
 800bbf8:	f7f6 fc0c 	bl	8002414 <_ZnwjPv>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	6823      	ldr	r3, [r4, #0]
 800bc00:	6013      	str	r3, [r2, #0]
 800bc02:	bf00      	nop
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	bd90      	pop	{r4, r7, pc}

0800bc0a <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b084      	sub	sp, #16
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f000 f857 	bl	800bcc6 <_ZNKSt9_Any_data9_M_accessIZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERKT_v>
 800bc18:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f000 f85f 	bl	800bcde <_ZSt11__addressofIKZN21GroundStationReceiverC4EvEUlR9RxMessageE_EPT_RS5_>
 800bc20:	4603      	mov	r3, r0
 800bc22:	bf00      	nop
	}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3710      	adds	r7, #16
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}

0800bc2c <_ZSt10__invoke_rIvRZN21GroundStationReceiverC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800bc2c:	b5b0      	push	{r4, r5, r7, lr}
 800bc2e:	b082      	sub	sp, #8
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
 800bc34:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f000 f85c 	bl	800bcf4 <_ZSt7forwardIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	6838      	ldr	r0, [r7, #0]
 800bc40:	f7f5 fdfb 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800bc44:	4603      	mov	r3, r0
 800bc46:	461a      	mov	r2, r3
 800bc48:	4621      	mov	r1, r4
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	f000 f85d 	bl	800bd0a <_ZSt13__invoke_implIvRZN21GroundStationReceiverC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800bc50:	bf00      	nop
 800bc52:	3708      	adds	r7, #8
 800bc54:	46bd      	mov	sp, r7
 800bc56:	bdb0      	pop	{r4, r5, r7, pc}

0800bc58 <_ZNSt9_Any_data9_M_accessIPZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7f6 fbe3 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800bc66:	4603      	mov	r3, r0
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3708      	adds	r7, #8
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	bd80      	pop	{r7, pc}

0800bc70 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800bc70:	b5b0      	push	{r4, r5, r7, lr}
 800bc72:	b084      	sub	sp, #16
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	60f8      	str	r0, [r7, #12]
 800bc78:	60b9      	str	r1, [r7, #8]
 800bc7a:	4613      	mov	r3, r2
 800bc7c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800bc7e:	79fb      	ldrb	r3, [r7, #7]
 800bc80:	2b03      	cmp	r3, #3
 800bc82:	d016      	beq.n	800bcb2 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	dc19      	bgt.n	800bcbc <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800bc88:	2b01      	cmp	r3, #1
 800bc8a:	d002      	beq.n	800bc92 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d00a      	beq.n	800bca6 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800bc90:	e014      	b.n	800bcbc <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f7ff ffe0 	bl	800bc58 <_ZNSt9_Any_data9_M_accessIPZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERT_v>
 800bc98:	4604      	mov	r4, r0
 800bc9a:	68b8      	ldr	r0, [r7, #8]
 800bc9c:	f7ff ffb5 	bl	800bc0a <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800bca0:	4603      	mov	r3, r0
 800bca2:	6023      	str	r3, [r4, #0]
	      break;
 800bca4:	e00a      	b.n	800bcbc <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800bca6:	462a      	mov	r2, r5
 800bca8:	68b9      	ldr	r1, [r7, #8]
 800bcaa:	68f8      	ldr	r0, [r7, #12]
 800bcac:	f000 f843 	bl	800bd36 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800bcb0:	e004      	b.n	800bcbc <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800bcb2:	4621      	mov	r1, r4
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f000 f857 	bl	800bd68 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800bcba:	bf00      	nop
	  return false;
 800bcbc:	2300      	movs	r3, #0
	}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bdb0      	pop	{r4, r5, r7, pc}

0800bcc6 <_ZNKSt9_Any_data9_M_accessIZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800bcc6:	b580      	push	{r7, lr}
 800bcc8:	b082      	sub	sp, #8
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7f6 fbb7 	bl	8002442 <_ZNKSt9_Any_data9_M_accessEv>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <_ZSt11__addressofIKZN21GroundStationReceiverC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800bcde:	b480      	push	{r7}
 800bce0:	b083      	sub	sp, #12
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4618      	mov	r0, r3
 800bcea:	370c      	adds	r7, #12
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <_ZSt7forwardIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bcf4:	b480      	push	{r7}
 800bcf6:	b083      	sub	sp, #12
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	370c      	adds	r7, #12
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr

0800bd0a <_ZSt13__invoke_implIvRZN21GroundStationReceiverC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800bd0a:	b590      	push	{r4, r7, lr}
 800bd0c:	b085      	sub	sp, #20
 800bd0e:	af00      	add	r7, sp, #0
 800bd10:	7338      	strb	r0, [r7, #12]
 800bd12:	60b9      	str	r1, [r7, #8]
 800bd14:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800bd16:	68b8      	ldr	r0, [r7, #8]
 800bd18:	f7ff ffec 	bl	800bcf4 <_ZSt7forwardIRZN21GroundStationReceiverC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7f5 fd8b 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800bd24:	4603      	mov	r3, r0
 800bd26:	4619      	mov	r1, r3
 800bd28:	4620      	mov	r0, r4
 800bd2a:	f7ff fd99 	bl	800b860 <_ZZN21GroundStationReceiverC4EvENKUlR9RxMessageE_clES1_>
 800bd2e:	bf00      	nop
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd90      	pop	{r4, r7, pc}

0800bd36 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800bd36:	b590      	push	{r4, r7, lr}
 800bd38:	b085      	sub	sp, #20
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	60f8      	str	r0, [r7, #12]
 800bd3e:	60b9      	str	r1, [r7, #8]
 800bd40:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800bd42:	68b8      	ldr	r0, [r7, #8]
 800bd44:	f7ff ffbf 	bl	800bcc6 <_ZNKSt9_Any_data9_M_accessIZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERKT_v>
 800bd48:	4604      	mov	r4, r0
 800bd4a:	68f8      	ldr	r0, [r7, #12]
 800bd4c:	f7f6 fb6e 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800bd50:	4603      	mov	r3, r0
 800bd52:	4619      	mov	r1, r3
 800bd54:	2004      	movs	r0, #4
 800bd56:	f7f6 fb5d 	bl	8002414 <_ZnwjPv>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	6823      	ldr	r3, [r4, #0]
 800bd5e:	6013      	str	r3, [r2, #0]
	}
 800bd60:	bf00      	nop
 800bd62:	3714      	adds	r7, #20
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd90      	pop	{r4, r7, pc}

0800bd68 <_ZNSt14_Function_base13_Base_managerIZN21GroundStationReceiverC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b082      	sub	sp, #8
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 f804 	bl	800bd80 <_ZNSt9_Any_data9_M_accessIZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERT_v>
	}
 800bd78:	bf00      	nop
 800bd7a:	3708      	adds	r7, #8
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}

0800bd80 <_ZNSt9_Any_data9_M_accessIZN21GroundStationReceiverC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f7f6 fb4f 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	4618      	mov	r0, r3
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}

0800bd98 <_ZN3can7signals6MDB_Id3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800bd98:	b480      	push	{r7}
 800bd9a:	b085      	sub	sp, #20
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFFull));
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda8:	4613      	mov	r3, r2
 800bdaa:	73fb      	strb	r3, [r7, #15]
                return value;
 800bdac:	7bfb      	ldrb	r3, [r7, #15]
            }
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3714      	adds	r7, #20
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb8:	4770      	bx	lr

0800bdba <_ZN3can7signals9MDB_State3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800bdba:	b480      	push	{r7}
 800bdbc:	b085      	sub	sp, #20
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	6039      	str	r1, [r7, #0]
                uint8_t value = static_cast<uint8_t>((intel & 0xFF00ull) >> 8);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bdca:	f04f 0200 	mov.w	r2, #0
 800bdce:	f04f 0300 	mov.w	r3, #0
 800bdd2:	0a02      	lsrs	r2, r0, #8
 800bdd4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800bdd8:	0a0b      	lsrs	r3, r1, #8
 800bdda:	4613      	mov	r3, r2
 800bddc:	73fb      	strb	r3, [r7, #15]
                return value;
 800bdde:	7bfb      	ldrb	r3, [r7, #15]
            }
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <_ZN3can7signals14PDU_TX_Enabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800bdec:	b480      	push	{r7}
 800bdee:	b085      	sub	sp, #20
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1ull));
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdfc:	f000 0201 	and.w	r2, r0, #1
 800be00:	2300      	movs	r3, #0
 800be02:	4313      	orrs	r3, r2
 800be04:	2b00      	cmp	r3, #0
 800be06:	bf14      	ite	ne
 800be08:	2301      	movne	r3, #1
 800be0a:	2300      	moveq	r3, #0
 800be0c:	73fb      	strb	r3, [r7, #15]
                return value;
 800be0e:	7bfb      	ldrb	r3, [r7, #15]
            }
 800be10:	4618      	mov	r0, r3
 800be12:	3714      	adds	r7, #20
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <_ZN3can7signals16PDU_TX_ErrorFlag3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 1) & 0x2ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800be1c:	b480      	push	{r7}
 800be1e:	b085      	sub	sp, #20
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x2ull) >> 1);
 800be26:	6879      	ldr	r1, [r7, #4]
 800be28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be2c:	f000 0202 	and.w	r2, r0, #2
 800be30:	2300      	movs	r3, #0
 800be32:	4313      	orrs	r3, r2
 800be34:	2b00      	cmp	r3, #0
 800be36:	bf14      	ite	ne
 800be38:	2301      	movne	r3, #1
 800be3a:	2300      	moveq	r3, #0
 800be3c:	73fb      	strb	r3, [r7, #15]
                return value;
 800be3e:	7bfb      	ldrb	r3, [r7, #15]
            }
 800be40:	4618      	mov	r0, r3
 800be42:	3714      	adds	r7, #20
 800be44:	46bd      	mov	sp, r7
 800be46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4a:	4770      	bx	lr

0800be4c <_ZN3can7signals18PDU_TX_PEHWEnabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800be4c:	b480      	push	{r7}
 800be4e:	b085      	sub	sp, #20
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
 800be54:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 800be56:	6879      	ldr	r1, [r7, #4]
 800be58:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be5c:	f000 0204 	and.w	r2, r0, #4
 800be60:	2300      	movs	r3, #0
 800be62:	4313      	orrs	r3, r2
 800be64:	2b00      	cmp	r3, #0
 800be66:	bf14      	ite	ne
 800be68:	2301      	movne	r3, #1
 800be6a:	2300      	moveq	r3, #0
 800be6c:	73fb      	strb	r3, [r7, #15]
                return value;
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
            }
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <_ZN3can7signals13PDU_RX_Enable3setERyS2_Rhb>:
        class PDU_RX_Enable {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800be7c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800be80:	b087      	sub	sp, #28
 800be82:	af00      	add	r7, sp, #0
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
 800be8a:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800be8c:	78fb      	ldrb	r3, [r7, #3]
 800be8e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	7df9      	ldrb	r1, [r7, #23]
 800be98:	2900      	cmp	r1, #0
 800be9a:	bf14      	ite	ne
 800be9c:	2101      	movne	r1, #1
 800be9e:	2100      	moveq	r1, #0
 800bea0:	b2c9      	uxtb	r1, r1
 800bea2:	b2c9      	uxtb	r1, r1
 800bea4:	2000      	movs	r0, #0
 800bea6:	460c      	mov	r4, r1
 800bea8:	4605      	mov	r5, r0
 800beaa:	ea42 0804 	orr.w	r8, r2, r4
 800beae:	ea43 0905 	orr.w	r9, r3, r5
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800beb8:	bf00      	nop
 800beba:	371c      	adds	r7, #28
 800bebc:	46bd      	mov	sp, r7
 800bebe:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800bec2:	4770      	bx	lr

0800bec4 <_ZN3can7signals17PDU_RX_ErrorReset3setERyS2_Rhb>:
        class PDU_RX_ErrorReset {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800bec4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bec8:	b089      	sub	sp, #36	; 0x24
 800beca:	af00      	add	r7, sp, #0
 800becc:	6178      	str	r0, [r7, #20]
 800bece:	6139      	str	r1, [r7, #16]
 800bed0:	60fa      	str	r2, [r7, #12]
 800bed2:	72fb      	strb	r3, [r7, #11]
                bool rawValue = value;
 800bed4:	7afb      	ldrb	r3, [r7, #11]
 800bed6:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 1) & 0x2ull;
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bede:	7ff9      	ldrb	r1, [r7, #31]
 800bee0:	2000      	movs	r0, #0
 800bee2:	460c      	mov	r4, r1
 800bee4:	4605      	mov	r5, r0
 800bee6:	1921      	adds	r1, r4, r4
 800bee8:	6039      	str	r1, [r7, #0]
 800beea:	eb45 0105 	adc.w	r1, r5, r5
 800beee:	6079      	str	r1, [r7, #4]
 800bef0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bef4:	f000 0802 	and.w	r8, r0, #2
 800bef8:	f04f 0900 	mov.w	r9, #0
 800befc:	ea42 0a08 	orr.w	sl, r2, r8
 800bf00:	ea43 0b09 	orr.w	fp, r3, r9
 800bf04:	697b      	ldr	r3, [r7, #20]
 800bf06:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800bf0a:	bf00      	nop
 800bf0c:	3724      	adds	r7, #36	; 0x24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bf14:	4770      	bx	lr

0800bf16 <_ZN3can7signals17PDU_RX_PEHWEnable3setERyS2_Rhb>:
        class PDU_RX_PEHWEnable {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800bf16:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bf1a:	b087      	sub	sp, #28
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800bf26:	78fb      	ldrb	r3, [r7, #3]
 800bf28:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
 800bf32:	2200      	movs	r2, #0
 800bf34:	4698      	mov	r8, r3
 800bf36:	4691      	mov	r9, r2
 800bf38:	f04f 0200 	mov.w	r2, #0
 800bf3c:	f04f 0300 	mov.w	r3, #0
 800bf40:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800bf44:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800bf48:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800bf4c:	f002 0404 	and.w	r4, r2, #4
 800bf50:	2500      	movs	r5, #0
 800bf52:	ea40 0a04 	orr.w	sl, r0, r4
 800bf56:	ea41 0b05 	orr.w	fp, r1, r5
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800bf60:	bf00      	nop
 800bf62:	371c      	adds	r7, #28
 800bf64:	46bd      	mov	sp, r7
 800bf66:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bf6a:	4770      	bx	lr

0800bf6c <_ZN18BrakeECUController13getBrakeStateEv>:
	BrakeState getBrakeState() {
 800bf6c:	b480      	push	{r7}
 800bf6e:	b083      	sub	sp, #12
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
		return m_brakeState;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	791b      	ldrb	r3, [r3, #4]
	}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	370c      	adds	r7, #12
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <_ZN18BrakeECUController15disengageBrakesEv>:
	void disengageBrakes() {
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
		m_engageTarget = false;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	725a      	strb	r2, [r3, #9]
		controlHelper();
 800bf92:	6878      	ldr	r0, [r7, #4]
 800bf94:	f7ff f868 	bl	800b068 <_ZN18BrakeECUController13controlHelperEv>
	}
 800bf98:	bf00      	nop
 800bf9a:	3708      	adds	r7, #8
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}

0800bfa0 <_ZN3SDC11getInstanceEv>:
#include "peripheral_config.hpp"
#include "GPIOWriteController.hpp"

class SDC {
public:
	static SDC& getInstance() {
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	af00      	add	r7, sp, #0
		static SDC instance {g_peripherals.m_sdcConfig, SDC_OPEN};
 800bfa4:	4b11      	ldr	r3, [pc, #68]	; (800bfec <_ZN3SDC11getInstanceEv+0x4c>)
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	f3bf 8f5b 	dmb	ish
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	f003 0301 	and.w	r3, r3, #1
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	bf0c      	ite	eq
 800bfb6:	2301      	moveq	r3, #1
 800bfb8:	2300      	movne	r3, #0
 800bfba:	b2db      	uxtb	r3, r3
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d012      	beq.n	800bfe6 <_ZN3SDC11getInstanceEv+0x46>
 800bfc0:	480a      	ldr	r0, [pc, #40]	; (800bfec <_ZN3SDC11getInstanceEv+0x4c>)
 800bfc2:	f00f fbb7 	bl	801b734 <__cxa_guard_acquire>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	bf14      	ite	ne
 800bfcc:	2301      	movne	r3, #1
 800bfce:	2300      	moveq	r3, #0
 800bfd0:	b2db      	uxtb	r3, r3
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d007      	beq.n	800bfe6 <_ZN3SDC11getInstanceEv+0x46>
 800bfd6:	2201      	movs	r2, #1
 800bfd8:	4905      	ldr	r1, [pc, #20]	; (800bff0 <_ZN3SDC11getInstanceEv+0x50>)
 800bfda:	4806      	ldr	r0, [pc, #24]	; (800bff4 <_ZN3SDC11getInstanceEv+0x54>)
 800bfdc:	f001 fa52 	bl	800d484 <_ZN3SDCC1ERK9SDCConfigNS_9SDCStatusE>
 800bfe0:	4802      	ldr	r0, [pc, #8]	; (800bfec <_ZN3SDC11getInstanceEv+0x4c>)
 800bfe2:	f00f fbb3 	bl	801b74c <__cxa_guard_release>
		return instance;
 800bfe6:	4b03      	ldr	r3, [pc, #12]	; (800bff4 <_ZN3SDC11getInstanceEv+0x54>)
	}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	20000da4 	.word	0x20000da4
 800bff0:	0801f2b0 	.word	0x0801f2b0
 800bff4:	20000d98 	.word	0x20000d98

0800bff8 <__tcf_3>:
};

class MergedMdbState {
public:
	static const MergedMdbState& getInstance(){
		static MergedMdbState instance;
 800bff8:	b580      	push	{r7, lr}
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	4801      	ldr	r0, [pc, #4]	; (800c004 <__tcf_3+0xc>)
 800bffe:	f000 f86c 	bl	800c0da <_ZN14MergedMdbStateD1Ev>
 800c002:	bd80      	pop	{r7, pc}
 800c004:	20000da8 	.word	0x20000da8

0800c008 <_ZN14MergedMdbState11getInstanceEv>:
	static const MergedMdbState& getInstance(){
 800c008:	b580      	push	{r7, lr}
 800c00a:	af00      	add	r7, sp, #0
		static MergedMdbState instance;
 800c00c:	4b12      	ldr	r3, [pc, #72]	; (800c058 <_ZN14MergedMdbState11getInstanceEv+0x50>)
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	f3bf 8f5b 	dmb	ish
 800c014:	b2db      	uxtb	r3, r3
 800c016:	f003 0301 	and.w	r3, r3, #1
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	bf0c      	ite	eq
 800c01e:	2301      	moveq	r3, #1
 800c020:	2300      	movne	r3, #0
 800c022:	b2db      	uxtb	r3, r3
 800c024:	2b00      	cmp	r3, #0
 800c026:	d013      	beq.n	800c050 <_ZN14MergedMdbState11getInstanceEv+0x48>
 800c028:	480b      	ldr	r0, [pc, #44]	; (800c058 <_ZN14MergedMdbState11getInstanceEv+0x50>)
 800c02a:	f00f fb83 	bl	801b734 <__cxa_guard_acquire>
 800c02e:	4603      	mov	r3, r0
 800c030:	2b00      	cmp	r3, #0
 800c032:	bf14      	ite	ne
 800c034:	2301      	movne	r3, #1
 800c036:	2300      	moveq	r3, #0
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d008      	beq.n	800c050 <_ZN14MergedMdbState11getInstanceEv+0x48>
 800c03e:	4807      	ldr	r0, [pc, #28]	; (800c05c <_ZN14MergedMdbState11getInstanceEv+0x54>)
 800c040:	f000 f82b 	bl	800c09a <_ZN14MergedMdbStateC1Ev>
 800c044:	4806      	ldr	r0, [pc, #24]	; (800c060 <_ZN14MergedMdbState11getInstanceEv+0x58>)
 800c046:	f00f ff0c 	bl	801be62 <atexit>
 800c04a:	4803      	ldr	r0, [pc, #12]	; (800c058 <_ZN14MergedMdbState11getInstanceEv+0x50>)
 800c04c:	f00f fb7e 	bl	801b74c <__cxa_guard_release>
		return instance;
 800c050:	4b02      	ldr	r3, [pc, #8]	; (800c05c <_ZN14MergedMdbState11getInstanceEv+0x54>)
	}
 800c052:	4618      	mov	r0, r3
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	20000db4 	.word	0x20000db4
 800c05c:	20000da8 	.word	0x20000da8
 800c060:	0800bff9 	.word	0x0800bff9

0800c064 <_ZNK14MergedMdbState8getStateEv>:
	MergedMdbState(MergedMdbState&) = delete;
	MergedMdbState(MergedMdbState&&) = delete;
	MergedMdbState& operator=(MergedMdbState&&) = delete;
	MergedMdbState& operator=(MergedMdbState&) = delete;

	MdbState getState() const{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
		return m_state;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	7a9b      	ldrb	r3, [r3, #10]
	}
 800c070:	4618      	mov	r0, r3
 800c072:	370c      	adds	r7, #12
 800c074:	46bd      	mov	sp, r7
 800c076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <_ZZN14MergedMdbStateC4EvENKUlR9RxMessageE_clES1_>:

private:
	MergedMdbState() {
		m_receiverId = can::registerMessageReceiver<can::messages::MDB_TX_State>([this](RxMessage& msg){
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b082      	sub	sp, #8
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
			this->callback(msg);
 800c08a:	6839      	ldr	r1, [r7, #0]
 800c08c:	4618      	mov	r0, r3
 800c08e:	f000 f884 	bl	800c19a <_ZN14MergedMdbState8callbackER9RxMessage>
		});
 800c092:	bf00      	nop
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <_ZN14MergedMdbStateC1Ev>:
	MergedMdbState() {
 800c09a:	b580      	push	{r7, lr}
 800c09c:	b086      	sub	sp, #24
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	729a      	strb	r2, [r3, #10]
		m_receiverId = can::registerMessageReceiver<can::messages::MDB_TX_State>([this](RxMessage& msg){
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	f107 0308 	add.w	r3, r7, #8
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f000 fa63 	bl	800c57c <_ZNSt8functionIFvR9RxMessageEEC1IZN14MergedMdbStateC4EvEUlS1_E_vvEET_>
 800c0b6:	f107 0308 	add.w	r3, r7, #8
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 fa88 	bl	800c5d0 <_ZN3can23registerMessageReceiverINS_8messages12MDB_TX_StateEEEjSt8functionIFvR9RxMessageEE>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	601a      	str	r2, [r3, #0]
 800c0c6:	f107 0308 	add.w	r3, r7, #8
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	f7f5 f9e2 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <_ZN14MergedMdbStateD1Ev>:
	~MergedMdbState(){
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b082      	sub	sp, #8
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
		can::unregisterMessageReceiver(m_receiverId);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7f5 fad2 	bl	8001690 <_ZN3can25unregisterMessageReceiverEj>
	}
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3708      	adds	r7, #8
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}

0800c0f6 <_ZN14MergedMdbState11updateStateEv>:


private:

	void updateState(){
 800c0f6:	b580      	push	{r7, lr}
 800c0f8:	b084      	sub	sp, #16
 800c0fa:	af00      	add	r7, sp, #0
 800c0fc:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800c0fe:	f00e fff9 	bl	801b0f4 <vPortEnterCritical>
		for(unsigned int i=1;i<6;i++){
 800c102:	2301      	movs	r3, #1
 800c104:	60fb      	str	r3, [r7, #12]
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2b05      	cmp	r3, #5
 800c10a:	d812      	bhi.n	800c132 <_ZN14MergedMdbState11updateStateEv+0x3c>
			if(m_states[0] != m_states[i]){
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	791a      	ldrb	r2, [r3, #4]
 800c110:	6879      	ldr	r1, [r7, #4]
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	440b      	add	r3, r1
 800c116:	3304      	adds	r3, #4
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d005      	beq.n	800c12a <_ZN14MergedMdbState11updateStateEv+0x34>
				m_state = MDB_STATE_INCONSISTANT;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2200      	movs	r2, #0
 800c122:	729a      	strb	r2, [r3, #10]
				taskEXIT_CRITICAL();
 800c124:	f00f f816 	bl	801b154 <vPortExitCritical>
				return;
 800c128:	e009      	b.n	800c13e <_ZN14MergedMdbState11updateStateEv+0x48>
		for(unsigned int i=1;i<6;i++){
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	3301      	adds	r3, #1
 800c12e:	60fb      	str	r3, [r7, #12]
 800c130:	e7e9      	b.n	800c106 <_ZN14MergedMdbState11updateStateEv+0x10>
			}
		}
		m_state = m_states[0];
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	791a      	ldrb	r2, [r3, #4]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	729a      	strb	r2, [r3, #10]
		taskEXIT_CRITICAL();
 800c13a:	f00f f80b 	bl	801b154 <vPortExitCritical>
	}
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800c144:	b580      	push	{r7, lr}
 800c146:	b086      	sub	sp, #24
 800c148:	af02      	add	r7, sp, #8
 800c14a:	60f8      	str	r0, [r7, #12]
 800c14c:	60b9      	str	r1, [r7, #8]
 800c14e:	607a      	str	r2, [r7, #4]
 800c150:	68f8      	ldr	r0, [r7, #12]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	9300      	str	r3, [sp, #0]
 800c156:	2300      	movs	r3, #0
 800c158:	2202      	movs	r2, #2
 800c15a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c15e:	f7f6 fdaa 	bl	8002cb6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800c162:	68bb      	ldr	r3, [r7, #8]
 800c164:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800c166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c16a:	d000      	beq.n	800c16e <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
                    while(1);
 800c16c:	e7fe      	b.n	800c16c <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
        };
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	4618      	mov	r0, r3
 800c172:	3710      	adds	r7, #16
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800c178:	b580      	push	{r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	331c      	adds	r3, #28
 800c188:	461a      	mov	r2, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7ff ffda 	bl	800c144 <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	4618      	mov	r0, r3
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <_ZN14MergedMdbState8callbackER9RxMessage>:

	void callback(RxMessage& raw){
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b08a      	sub	sp, #40	; 0x28
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	6078      	str	r0, [r7, #4]
 800c1a2:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::MDB_TX_State> msg {raw};
 800c1a4:	f107 0308 	add.w	r3, r7, #8
 800c1a8:	6839      	ldr	r1, [r7, #0]
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7ff ffe4 	bl	800c178 <_ZN3can7MessageINS_8messages12MDB_TX_StateEEC1ERK9RxMessage>
		uint8_t mdbId = msg.get<can::signals::MDB_Id>();
 800c1b0:	f107 0308 	add.w	r3, r7, #8
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f000 fa29 	bl	800c60c <_ZN3can7MessageINS_8messages12MDB_TX_StateEE3getINS_7signals6MDB_IdEEENT_8dataTypeEv>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t mdbStateId = msg.get<can::signals::MDB_State>();
 800c1c0:	f107 0308 	add.w	r3, r7, #8
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f000 fa33 	bl	800c630 <_ZN3can7MessageINS_8messages12MDB_TX_StateEE3getINS_7signals9MDB_StateEEENT_8dataTypeEv>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		MdbState mdbState = static_cast<MdbState>(mdbStateId);
 800c1d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c1d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		m_states[mdbId] = mdbState;
 800c1d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	4413      	add	r3, r2
 800c1e0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800c1e4:	711a      	strb	r2, [r3, #4]
		updateState();
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7ff ff85 	bl	800c0f6 <_ZN14MergedMdbState11updateStateEv>
	}
 800c1ec:	bf00      	nop
 800c1ee:	3728      	adds	r7, #40	; 0x28
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <__tcf_4>:

class PDUController {
public:

	static PDUController& getInstance(){
		static PDUController instance;
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	4801      	ldr	r0, [pc, #4]	; (800c200 <__tcf_4+0xc>)
 800c1fa:	f000 f8a1 	bl	800c340 <_ZN13PDUControllerD1Ev>
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	20000db8 	.word	0x20000db8

0800c204 <_ZN13PDUController11getInstanceEv>:
	static PDUController& getInstance(){
 800c204:	b580      	push	{r7, lr}
 800c206:	af00      	add	r7, sp, #0
		static PDUController instance;
 800c208:	4b12      	ldr	r3, [pc, #72]	; (800c254 <_ZN13PDUController11getInstanceEv+0x50>)
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	f3bf 8f5b 	dmb	ish
 800c210:	b2db      	uxtb	r3, r3
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	bf0c      	ite	eq
 800c21a:	2301      	moveq	r3, #1
 800c21c:	2300      	movne	r3, #0
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b00      	cmp	r3, #0
 800c222:	d013      	beq.n	800c24c <_ZN13PDUController11getInstanceEv+0x48>
 800c224:	480b      	ldr	r0, [pc, #44]	; (800c254 <_ZN13PDUController11getInstanceEv+0x50>)
 800c226:	f00f fa85 	bl	801b734 <__cxa_guard_acquire>
 800c22a:	4603      	mov	r3, r0
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	bf14      	ite	ne
 800c230:	2301      	movne	r3, #1
 800c232:	2300      	moveq	r3, #0
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d008      	beq.n	800c24c <_ZN13PDUController11getInstanceEv+0x48>
 800c23a:	4807      	ldr	r0, [pc, #28]	; (800c258 <_ZN13PDUController11getInstanceEv+0x54>)
 800c23c:	f000 f863 	bl	800c306 <_ZN13PDUControllerC1Ev>
 800c240:	4806      	ldr	r0, [pc, #24]	; (800c25c <_ZN13PDUController11getInstanceEv+0x58>)
 800c242:	f00f fe0e 	bl	801be62 <atexit>
 800c246:	4803      	ldr	r0, [pc, #12]	; (800c254 <_ZN13PDUController11getInstanceEv+0x50>)
 800c248:	f00f fa80 	bl	801b74c <__cxa_guard_release>
		return instance;
 800c24c:	4b02      	ldr	r3, [pc, #8]	; (800c258 <_ZN13PDUController11getInstanceEv+0x54>)
	}
 800c24e:	4618      	mov	r0, r3
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	20000dd8 	.word	0x20000dd8
 800c258:	20000db8 	.word	0x20000db8
 800c25c:	0800c1f5 	.word	0x0800c1f5

0800c260 <_ZN13PDUController9isEnabledEv>:
	PDUController(PDUController&) = delete;
	PDUController(PDUController&&) = delete;
	PDUController& operator=(PDUController&) = delete;
	PDUController& operator=(PDUController&&) = delete;

	bool isEnabled() {
 800c260:	b480      	push	{r7}
 800c262:	b083      	sub	sp, #12
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
		return m_enabled;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	791b      	ldrb	r3, [r3, #4]
	}
 800c26c:	4618      	mov	r0, r3
 800c26e:	370c      	adds	r7, #12
 800c270:	46bd      	mov	sp, r7
 800c272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c276:	4770      	bx	lr

0800c278 <_ZN13PDUController8hasErrorEv>:

	bool hasError() {
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
		return m_error;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	795b      	ldrb	r3, [r3, #5]
	}
 800c284:	4618      	mov	r0, r3
 800c286:	370c      	adds	r7, #12
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <_ZN13PDUController11isHVEnabledEv>:

	bool isHVEnabled(){
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
		return m_hvEnabled;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	799b      	ldrb	r3, [r3, #6]
	}
 800c29c:	4618      	mov	r0, r3
 800c29e:	370c      	adds	r7, #12
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a6:	4770      	bx	lr

0800c2a8 <_ZN13PDUController6enableEv>:

	void enable(){
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b082      	sub	sp, #8
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
		//TODO this is super sketchy. reseting all errors.
		controllHelper(true, m_error, m_hvEnabled);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	795a      	ldrb	r2, [r3, #5]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	799b      	ldrb	r3, [r3, #6]
 800c2b8:	2101      	movs	r1, #1
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f000 f8b3 	bl	800c426 <_ZN13PDUController14controllHelperEbbb>
	}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <_ZN13PDUController8enableHVEv>:

	void resetErrors(){
		controllHelper(m_enabled, true, m_hvEnabled);
	}

	void enableHV(){
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b082      	sub	sp, #8
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
		//TODO this is super sketchy. reseting all errors.
		controllHelper(m_enabled, m_error, true);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7919      	ldrb	r1, [r3, #4]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	795a      	ldrb	r2, [r3, #5]
 800c2d8:	2301      	movs	r3, #1
 800c2da:	6878      	ldr	r0, [r7, #4]
 800c2dc:	f000 f8a3 	bl	800c426 <_ZN13PDUController14controllHelperEbbb>
	}
 800c2e0:	bf00      	nop
 800c2e2:	3708      	adds	r7, #8
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	bd80      	pop	{r7, pc}

0800c2e8 <_ZZN13PDUControllerC4EvENKUlR9RxMessageE_clES1_>:
		controllHelper(m_enabled, m_error, false);
	}

private:
	explicit PDUController() {
		m_receiverId = can::registerMessageReceiver<can::messages::PDU_TX_Status>([this](RxMessage& msg){
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b082      	sub	sp, #8
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
 800c2f0:	6039      	str	r1, [r7, #0]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
			this->callback(msg);
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f000 f85a 	bl	800c3b2 <_ZN13PDUController8callbackER9RxMessage>
		});
 800c2fe:	bf00      	nop
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <_ZN13PDUControllerC1Ev>:
	explicit PDUController() {
 800c306:	b580      	push	{r7, lr}
 800c308:	b086      	sub	sp, #24
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
		m_receiverId = can::registerMessageReceiver<can::messages::PDU_TX_Status>([this](RxMessage& msg){
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	f107 0308 	add.w	r3, r7, #8
 800c314:	4611      	mov	r1, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f000 f99c 	bl	800c654 <_ZNSt8functionIFvR9RxMessageEEC1IZN13PDUControllerC4EvEUlS1_E_vvEET_>
 800c31c:	f107 0308 	add.w	r3, r7, #8
 800c320:	4618      	mov	r0, r3
 800c322:	f000 f9c1 	bl	800c6a8 <_ZN3can23registerMessageReceiverINS_8messages13PDU_TX_StatusEEEjSt8functionIFvR9RxMessageEE>
 800c326:	4602      	mov	r2, r0
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	601a      	str	r2, [r3, #0]
 800c32c:	f107 0308 	add.w	r3, r7, #8
 800c330:	4618      	mov	r0, r3
 800c332:	f7f5 f8af 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	4618      	mov	r0, r3
 800c33a:	3718      	adds	r7, #24
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <_ZN13PDUControllerD1Ev>:
	~PDUController(){
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
		can::unregisterMessageReceiver(m_receiverId);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7f5 f99f 	bl	8001690 <_ZN3can25unregisterMessageReceiverEj>
	}
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	4618      	mov	r0, r3
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b086      	sub	sp, #24
 800c360:	af02      	add	r7, sp, #8
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	2300      	movs	r3, #0
 800c370:	2201      	movs	r2, #1
 800c372:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c376:	f7f6 fc9e 	bl	8002cb6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800c37e:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800c382:	d000      	beq.n	800c386 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
                    while(1);
 800c384:	e7fe      	b.n	800c384 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
        };
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	331c      	adds	r3, #28
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f7ff ffda 	bl	800c35c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	3708      	adds	r7, #8
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}

0800c3b2 <_ZN13PDUController8callbackER9RxMessage>:

	void callback(RxMessage& raw){
 800c3b2:	b580      	push	{r7, lr}
 800c3b4:	b088      	sub	sp, #32
 800c3b6:	af00      	add	r7, sp, #0
 800c3b8:	6078      	str	r0, [r7, #4]
 800c3ba:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::PDU_TX_Status> msg {raw};
 800c3bc:	f107 0308 	add.w	r3, r7, #8
 800c3c0:	6839      	ldr	r1, [r7, #0]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	f7ff ffe4 	bl	800c390 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK9RxMessage>
		m_enabled = msg.get<can::signals::PDU_TX_Enabled>();
 800c3c8:	f107 0308 	add.w	r3, r7, #8
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 f989 	bl	800c6e4 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals14PDU_TX_EnabledEEENT_8dataTypeEv>
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	711a      	strb	r2, [r3, #4]
		m_error = msg.get<can::signals::PDU_TX_ErrorFlag>();
 800c3da:	f107 0308 	add.w	r3, r7, #8
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f000 f992 	bl	800c708 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals16PDU_TX_ErrorFlagEEENT_8dataTypeEv>
 800c3e4:	4603      	mov	r3, r0
 800c3e6:	461a      	mov	r2, r3
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	715a      	strb	r2, [r3, #5]
		m_hvEnabled = msg.get<can::signals::PDU_TX_PEHWEnabled>();
 800c3ec:	f107 0308 	add.w	r3, r7, #8
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 f99b 	bl	800c72c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals18PDU_TX_PEHWEnabledEEENT_8dataTypeEv>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	461a      	mov	r2, r3
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	719a      	strb	r2, [r3, #6]
	}
 800c3fe:	bf00      	nop
 800c400:	3720      	adds	r7, #32
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}

0800c406 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800c406:	b580      	push	{r7, lr}
 800c408:	b082      	sub	sp, #8
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	2300      	movs	r3, #0
 800c412:	2201      	movs	r2, #1
 800c414:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800c418:	f7f4 fdb8 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <_ZN13PDUController14controllHelperEbbb>:

	void controllHelper(bool enable, bool resetErrors, bool hvEnable){
 800c426:	b580      	push	{r7, lr}
 800c428:	b088      	sub	sp, #32
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	4608      	mov	r0, r1
 800c430:	4611      	mov	r1, r2
 800c432:	461a      	mov	r2, r3
 800c434:	4603      	mov	r3, r0
 800c436:	70fb      	strb	r3, [r7, #3]
 800c438:	460b      	mov	r3, r1
 800c43a:	70bb      	strb	r3, [r7, #2]
 800c43c:	4613      	mov	r3, r2
 800c43e:	707b      	strb	r3, [r7, #1]
		can::Message<can::messages::PDU_RX_Control> msg;
 800c440:	f107 0308 	add.w	r3, r7, #8
 800c444:	4618      	mov	r0, r3
 800c446:	f7ff ffde 	bl	800c406 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1Ev>
		msg.set<can::signals::PDU_RX_Enable>(enable);
 800c44a:	78fa      	ldrb	r2, [r7, #3]
 800c44c:	f107 0308 	add.w	r3, r7, #8
 800c450:	4611      	mov	r1, r2
 800c452:	4618      	mov	r0, r3
 800c454:	f000 f97c 	bl	800c750 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals13PDU_RX_EnableEEEvNT_8dataTypeE>
		msg.set<can::signals::PDU_RX_ErrorReset>(resetErrors);
 800c458:	78ba      	ldrb	r2, [r7, #2]
 800c45a:	f107 0308 	add.w	r3, r7, #8
 800c45e:	4611      	mov	r1, r2
 800c460:	4618      	mov	r0, r3
 800c462:	f000 f98a 	bl	800c77a <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_ErrorResetEEEvNT_8dataTypeE>
		msg.set<can::signals::PDU_RX_PEHWEnable>(hvEnable);
 800c466:	787a      	ldrb	r2, [r7, #1]
 800c468:	f107 0308 	add.w	r3, r7, #8
 800c46c:	4611      	mov	r1, r2
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 f998 	bl	800c7a4 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_PEHWEnableEEEvNT_8dataTypeE>
		msg.send();
 800c474:	f107 0308 	add.w	r3, r7, #8
 800c478:	2100      	movs	r1, #0
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7f4 fed0 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
 800c480:	bf00      	nop
 800c482:	3720      	adds	r7, #32
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <_ZN25PodLaunchPreparationState5setupEv>:
#include "cmsis_os.h"
#include "estdio.hpp"
#include "MergedMdbState.hpp"
#include "PDUController.hpp"

void PodLaunchPreparationState::setup() {
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
	printf("enter launch prep\n");
 800c490:	480f      	ldr	r0, [pc, #60]	; (800c4d0 <_ZN25PodLaunchPreparationState5setupEv+0x48>)
 800c492:	f00a fd5f 	bl	8016f54 <printf_>
	PDUController::getInstance().enable();
 800c496:	f7ff feb5 	bl	800c204 <_ZN13PDUController11getInstanceEv>
 800c49a:	4603      	mov	r3, r0
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7ff ff03 	bl	800c2a8 <_ZN13PDUController6enableEv>
	PDUController::getInstance().enableHV();
 800c4a2:	f7ff feaf 	bl	800c204 <_ZN13PDUController11getInstanceEv>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7ff ff0d 	bl	800c2c8 <_ZN13PDUController8enableHVEv>
	BrakeECUController::getInstance().disengageBrakes();
 800c4ae:	f7fe fd81 	bl	800afb4 <_ZN18BrakeECUController11getInstanceEv>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f7ff fd65 	bl	800bf84 <_ZN18BrakeECUController15disengageBrakesEv>
	SDC::getInstance().close();
 800c4ba:	f7ff fd71 	bl	800bfa0 <_ZN3SDC11getInstanceEv>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f001 f808 	bl	800d4d6 <_ZN3SDC5closeEv>
}
 800c4c6:	bf00      	nop
 800c4c8:	3708      	adds	r7, #8
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	bd80      	pop	{r7, pc}
 800c4ce:	bf00      	nop
 800c4d0:	0801ee0c 	.word	0x0801ee0c

0800c4d4 <_ZN25PodLaunchPreparationState6updateEv>:

void PodLaunchPreparationState::update() {
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
	if (MergedMdbState::getInstance().getState() == MDB_STATE_PRECHARGE_DONE
 800c4dc:	f7ff fd94 	bl	800c008 <_ZN14MergedMdbState11getInstanceEv>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f7ff fdbe 	bl	800c064 <_ZNK14MergedMdbState8getStateEv>
 800c4e8:	4603      	mov	r3, r0
			&& PDUController::getInstance().isEnabled()
			&& PDUController::getInstance().isHVEnabled()
			&& not PDUController::getInstance().hasError()
			&& BrakeECUController::getInstance().getBrakeState() == BRAKE_DISENGAGED) {
 800c4ea:	2b05      	cmp	r3, #5
 800c4ec:	d128      	bne.n	800c540 <_ZN25PodLaunchPreparationState6updateEv+0x6c>
			&& PDUController::getInstance().isEnabled()
 800c4ee:	f7ff fe89 	bl	800c204 <_ZN13PDUController11getInstanceEv>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7ff feb3 	bl	800c260 <_ZN13PDUController9isEnabledEv>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d01f      	beq.n	800c540 <_ZN25PodLaunchPreparationState6updateEv+0x6c>
			&& PDUController::getInstance().isHVEnabled()
 800c500:	f7ff fe80 	bl	800c204 <_ZN13PDUController11getInstanceEv>
 800c504:	4603      	mov	r3, r0
 800c506:	4618      	mov	r0, r3
 800c508:	f7ff fec2 	bl	800c290 <_ZN13PDUController11isHVEnabledEv>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d016      	beq.n	800c540 <_ZN25PodLaunchPreparationState6updateEv+0x6c>
			&& not PDUController::getInstance().hasError()
 800c512:	f7ff fe77 	bl	800c204 <_ZN13PDUController11getInstanceEv>
 800c516:	4603      	mov	r3, r0
 800c518:	4618      	mov	r0, r3
 800c51a:	f7ff fead 	bl	800c278 <_ZN13PDUController8hasErrorEv>
 800c51e:	4603      	mov	r3, r0
 800c520:	f083 0301 	eor.w	r3, r3, #1
 800c524:	b2db      	uxtb	r3, r3
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00a      	beq.n	800c540 <_ZN25PodLaunchPreparationState6updateEv+0x6c>
			&& BrakeECUController::getInstance().getBrakeState() == BRAKE_DISENGAGED) {
 800c52a:	f7fe fd43 	bl	800afb4 <_ZN18BrakeECUController11getInstanceEv>
 800c52e:	4603      	mov	r3, r0
 800c530:	4618      	mov	r0, r3
 800c532:	f7ff fd1b 	bl	800bf6c <_ZN18BrakeECUController13getBrakeStateEv>
 800c536:	4603      	mov	r3, r0
 800c538:	2b02      	cmp	r3, #2
 800c53a:	d101      	bne.n	800c540 <_ZN25PodLaunchPreparationState6updateEv+0x6c>
 800c53c:	2301      	movs	r3, #1
 800c53e:	e000      	b.n	800c542 <_ZN25PodLaunchPreparationState6updateEv+0x6e>
 800c540:	2300      	movs	r3, #0
	if (MergedMdbState::getInstance().getState() == MDB_STATE_PRECHARGE_DONE
 800c542:	2b00      	cmp	r3, #0
 800c544:	d005      	beq.n	800c552 <_ZN25PodLaunchPreparationState6updateEv+0x7e>
		GlobalState::getInstance().setState<PodReadyToLaunchState>();
 800c546:	f7fc fe43 	bl	80091d0 <_ZN11GlobalState11getInstanceEv>
 800c54a:	4603      	mov	r3, r0
 800c54c:	4618      	mov	r0, r3
 800c54e:	f000 f93e 	bl	800c7ce <_ZN11GlobalState8setStateI21PodReadyToLaunchStateEEvv>
	}
	osDelay(50);
 800c552:	2032      	movs	r0, #50	; 0x32
 800c554:	f00a fe78 	bl	8017248 <osDelay>
}
 800c558:	bf00      	nop
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <_ZN25PodLaunchPreparationState7disposeEv>:

void PodLaunchPreparationState::dispose() {
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
	printf("exit launch prep\n");
 800c568:	4803      	ldr	r0, [pc, #12]	; (800c578 <_ZN25PodLaunchPreparationState7disposeEv+0x18>)
 800c56a:	f00a fcf3 	bl	8016f54 <printf_>
}
 800c56e:	bf00      	nop
 800c570:	3708      	adds	r7, #8
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	0801ee20 	.word	0x0801ee20

0800c57c <_ZNSt8functionIFvR9RxMessageEEC1IZN14MergedMdbStateC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800c57c:	b590      	push	{r4, r7, lr}
 800c57e:	b083      	sub	sp, #12
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4618      	mov	r0, r3
 800c58a:	f7f4 ff51 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800c58e:	463b      	mov	r3, r7
 800c590:	4618      	mov	r0, r3
 800c592:	f000 f937 	bl	800c804 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800c596:	4603      	mov	r3, r0
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00f      	beq.n	800c5bc <_ZNSt8functionIFvR9RxMessageEEC1IZN14MergedMdbStateC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800c59c:	687c      	ldr	r4, [r7, #4]
 800c59e:	463b      	mov	r3, r7
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 f93a 	bl	800c81a <_ZSt4moveIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	f000 f940 	bl	800c830 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	4a05      	ldr	r2, [pc, #20]	; (800c5c8 <_ZNSt8functionIFvR9RxMessageEEC1IZN14MergedMdbStateC4EvEUlS1_E_vvEET_+0x4c>)
 800c5b4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	4a04      	ldr	r2, [pc, #16]	; (800c5cc <_ZNSt8functionIFvR9RxMessageEEC1IZN14MergedMdbStateC4EvEUlS1_E_vvEET_+0x50>)
 800c5ba:	609a      	str	r2, [r3, #8]
      }
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4618      	mov	r0, r3
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd90      	pop	{r4, r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	0800c855 	.word	0x0800c855
 800c5cc:	0800c87f 	.word	0x0800c87f

0800c5d0 <_ZN3can23registerMessageReceiverINS_8messages12MDB_TX_StateEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800c5d0:	b590      	push	{r4, r7, lr}
 800c5d2:	b087      	sub	sp, #28
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800c5d8:	f107 0308 	add.w	r3, r7, #8
 800c5dc:	6879      	ldr	r1, [r7, #4]
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7f5 f8a1 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800c5e4:	f107 0308 	add.w	r3, r7, #8
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7f4 ff94 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800c5f4:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800c5f6:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800c5f8:	f107 0308 	add.w	r3, r7, #8
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7f4 ff49 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800c602:	4623      	mov	r3, r4
}
 800c604:	4618      	mov	r0, r3
 800c606:	371c      	adds	r7, #28
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd90      	pop	{r4, r7, pc}

0800c60c <_ZN3can7MessageINS_8messages12MDB_TX_StateEE3getINS_7signals6MDB_IdEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f103 0208 	add.w	r2, r3, #8
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	3310      	adds	r3, #16
 800c61e:	4619      	mov	r1, r3
 800c620:	4610      	mov	r0, r2
 800c622:	f7ff fbb9 	bl	800bd98 <_ZN3can7signals6MDB_Id3getERKyS3_>
 800c626:	4603      	mov	r3, r0
        }
 800c628:	4618      	mov	r0, r3
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <_ZN3can7MessageINS_8messages12MDB_TX_StateEE3getINS_7signals9MDB_StateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800c630:	b580      	push	{r7, lr}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f103 0208 	add.w	r2, r3, #8
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	3310      	adds	r3, #16
 800c642:	4619      	mov	r1, r3
 800c644:	4610      	mov	r0, r2
 800c646:	f7ff fbb8 	bl	800bdba <_ZN3can7signals9MDB_State3getERKyS3_>
 800c64a:	4603      	mov	r3, r0
        }
 800c64c:	4618      	mov	r0, r3
 800c64e:	3708      	adds	r7, #8
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <_ZNSt8functionIFvR9RxMessageEEC1IZN13PDUControllerC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800c654:	b590      	push	{r4, r7, lr}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	4618      	mov	r0, r3
 800c662:	f7f4 fee5 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800c666:	463b      	mov	r3, r7
 800c668:	4618      	mov	r0, r3
 800c66a:	f000 f927 	bl	800c8bc <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d00f      	beq.n	800c694 <_ZNSt8functionIFvR9RxMessageEEC1IZN13PDUControllerC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800c674:	687c      	ldr	r4, [r7, #4]
 800c676:	463b      	mov	r3, r7
 800c678:	4618      	mov	r0, r3
 800c67a:	f000 f92a 	bl	800c8d2 <_ZSt4moveIRZN13PDUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800c67e:	4603      	mov	r3, r0
 800c680:	4619      	mov	r1, r3
 800c682:	4620      	mov	r0, r4
 800c684:	f000 f930 	bl	800c8e8 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	4a05      	ldr	r2, [pc, #20]	; (800c6a0 <_ZNSt8functionIFvR9RxMessageEEC1IZN13PDUControllerC4EvEUlS1_E_vvEET_+0x4c>)
 800c68c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4a04      	ldr	r2, [pc, #16]	; (800c6a4 <_ZNSt8functionIFvR9RxMessageEEC1IZN13PDUControllerC4EvEUlS1_E_vvEET_+0x50>)
 800c692:	609a      	str	r2, [r3, #8]
      }
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	4618      	mov	r0, r3
 800c698:	370c      	adds	r7, #12
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd90      	pop	{r4, r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	0800c90d 	.word	0x0800c90d
 800c6a4:	0800c937 	.word	0x0800c937

0800c6a8 <_ZN3can23registerMessageReceiverINS_8messages13PDU_TX_StatusEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800c6a8:	b590      	push	{r4, r7, lr}
 800c6aa:	b087      	sub	sp, #28
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800c6b0:	f107 0308 	add.w	r3, r7, #8
 800c6b4:	6879      	ldr	r1, [r7, #4]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7f5 f835 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800c6bc:	f107 0308 	add.w	r3, r7, #8
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f7f4 ff28 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800c6cc:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800c6ce:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800c6d0:	f107 0308 	add.w	r3, r7, #8
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f7f4 fedd 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800c6da:	4623      	mov	r3, r4
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	371c      	adds	r7, #28
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd90      	pop	{r4, r7, pc}

0800c6e4 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals14PDU_TX_EnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f103 0208 	add.w	r2, r3, #8
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	3310      	adds	r3, #16
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	f7ff fb77 	bl	800bdec <_ZN3can7signals14PDU_TX_Enabled3getERKyS3_>
 800c6fe:	4603      	mov	r3, r0
        }
 800c700:	4618      	mov	r0, r3
 800c702:	3708      	adds	r7, #8
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals16PDU_TX_ErrorFlagEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800c708:	b580      	push	{r7, lr}
 800c70a:	b082      	sub	sp, #8
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f103 0208 	add.w	r2, r3, #8
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	3310      	adds	r3, #16
 800c71a:	4619      	mov	r1, r3
 800c71c:	4610      	mov	r0, r2
 800c71e:	f7ff fb7d 	bl	800be1c <_ZN3can7signals16PDU_TX_ErrorFlag3getERKyS3_>
 800c722:	4603      	mov	r3, r0
        }
 800c724:	4618      	mov	r0, r3
 800c726:	3708      	adds	r7, #8
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals18PDU_TX_PEHWEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f103 0208 	add.w	r2, r3, #8
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	3310      	adds	r3, #16
 800c73e:	4619      	mov	r1, r3
 800c740:	4610      	mov	r0, r2
 800c742:	f7ff fb83 	bl	800be4c <_ZN3can7signals18PDU_TX_PEHWEnabled3getERKyS3_>
 800c746:	4603      	mov	r3, r0
        }
 800c748:	4618      	mov	r0, r3
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals13PDU_RX_EnableEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	460b      	mov	r3, r1
 800c75a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f103 0008 	add.w	r0, r3, #8
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f103 0110 	add.w	r1, r3, #16
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	1d1a      	adds	r2, r3, #4
 800c76c:	78fb      	ldrb	r3, [r7, #3]
 800c76e:	f7ff fb85 	bl	800be7c <_ZN3can7signals13PDU_RX_Enable3setERyS2_Rhb>
        }
 800c772:	bf00      	nop
 800c774:	3708      	adds	r7, #8
 800c776:	46bd      	mov	sp, r7
 800c778:	bd80      	pop	{r7, pc}

0800c77a <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_ErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c77a:	b580      	push	{r7, lr}
 800c77c:	b082      	sub	sp, #8
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	460b      	mov	r3, r1
 800c784:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	f103 0008 	add.w	r0, r3, #8
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	f103 0110 	add.w	r1, r3, #16
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	1d1a      	adds	r2, r3, #4
 800c796:	78fb      	ldrb	r3, [r7, #3]
 800c798:	f7ff fb94 	bl	800bec4 <_ZN3can7signals17PDU_RX_ErrorReset3setERyS2_Rhb>
        }
 800c79c:	bf00      	nop
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_PEHWEnableEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f103 0008 	add.w	r0, r3, #8
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f103 0110 	add.w	r1, r3, #16
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	1d1a      	adds	r2, r3, #4
 800c7c0:	78fb      	ldrb	r3, [r7, #3]
 800c7c2:	f7ff fba8 	bl	800bf16 <_ZN3can7signals17PDU_RX_PEHWEnable3setERyS2_Rhb>
        }
 800c7c6:	bf00      	nop
 800c7c8:	3708      	adds	r7, #8
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <_ZN11GlobalState8setStateI21PodReadyToLaunchStateEEvv>:
	void setState(){
 800c7ce:	b580      	push	{r7, lr}
 800c7d0:	b084      	sub	sp, #16
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	333c      	adds	r3, #60	; 0x3c
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f000 f8ca 	bl	800c974 <_ZN13StateMaschine8getStateI21PodReadyToLaunchStateEERK5Statev>
 800c7e0:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800c7e2:	68f8      	ldr	r0, [r7, #12]
 800c7e4:	f7fc fb36 	bl	8008e54 <_ZNK5State11getPodStateEv>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f7fc fd2d 	bl	800924c <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	333c      	adds	r3, #60	; 0x3c
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f000 f8cc 	bl	800c994 <_ZN13StateMaschine8setStateI21PodReadyToLaunchStateEEvv>
	}
 800c7fc:	bf00      	nop
 800c7fe:	3710      	adds	r7, #16
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
	  { return true; }
 800c80c:	2301      	movs	r3, #1
 800c80e:	4618      	mov	r0, r3
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <_ZSt4moveIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800c81a:	b480      	push	{r7}
 800c81c:	b083      	sub	sp, #12
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4618      	mov	r0, r3
 800c826:	370c      	adds	r7, #12
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800c830:	b590      	push	{r4, r7, lr}
 800c832:	b083      	sub	sp, #12
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800c83a:	6838      	ldr	r0, [r7, #0]
 800c83c:	f7ff ffed 	bl	800c81a <_ZSt4moveIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800c840:	4603      	mov	r3, r0
 800c842:	4622      	mov	r2, r4
 800c844:	4619      	mov	r1, r3
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f000 f8d1 	bl	800c9ee <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800c84c:	bf00      	nop
 800c84e:	370c      	adds	r7, #12
 800c850:	46bd      	mov	sp, r7
 800c852:	bd90      	pop	{r4, r7, pc}

0800c854 <_ZNSt17_Function_handlerIFvR9RxMessageEZN14MergedMdbStateC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c854:	b590      	push	{r4, r7, lr}
 800c856:	b083      	sub	sp, #12
 800c858:	af00      	add	r7, sp, #0
 800c85a:	6078      	str	r0, [r7, #4]
 800c85c:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f8de 	bl	800ca20 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800c864:	4604      	mov	r4, r0
 800c866:	6838      	ldr	r0, [r7, #0]
 800c868:	f7f4 ffe7 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800c86c:	4603      	mov	r3, r0
 800c86e:	4619      	mov	r1, r3
 800c870:	4620      	mov	r0, r4
 800c872:	f000 f8e6 	bl	800ca42 <_ZSt10__invoke_rIvRZN14MergedMdbStateC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800c876:	bf00      	nop
      }
 800c878:	370c      	adds	r7, #12
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd90      	pop	{r4, r7, pc}

0800c87e <_ZNSt17_Function_handlerIFvR9RxMessageEZN14MergedMdbStateC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c87e:	b590      	push	{r4, r7, lr}
 800c880:	b085      	sub	sp, #20
 800c882:	af00      	add	r7, sp, #0
 800c884:	60f8      	str	r0, [r7, #12]
 800c886:	60b9      	str	r1, [r7, #8]
 800c888:	4613      	mov	r3, r2
 800c88a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800c88c:	79fb      	ldrb	r3, [r7, #7]
 800c88e:	2b01      	cmp	r3, #1
 800c890:	d109      	bne.n	800c8a6 <_ZNSt17_Function_handlerIFvR9RxMessageEZN14MergedMdbStateC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800c892:	68f8      	ldr	r0, [r7, #12]
 800c894:	f000 f8eb 	bl	800ca6e <_ZNSt9_Any_data9_M_accessIPZN14MergedMdbStateC4EvEUlR9RxMessageE_EERT_v>
 800c898:	4604      	mov	r4, r0
 800c89a:	68b8      	ldr	r0, [r7, #8]
 800c89c:	f000 f8c0 	bl	800ca20 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	6023      	str	r3, [r4, #0]
	    break;
 800c8a4:	e005      	b.n	800c8b2 <_ZNSt17_Function_handlerIFvR9RxMessageEZN14MergedMdbStateC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800c8a6:	79fb      	ldrb	r3, [r7, #7]
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	68b9      	ldr	r1, [r7, #8]
 800c8ac:	68f8      	ldr	r0, [r7, #12]
 800c8ae:	f000 f8ea 	bl	800ca86 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800c8b2:	2300      	movs	r3, #0
      }
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3714      	adds	r7, #20
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd90      	pop	{r4, r7, pc}

0800c8bc <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
	  { return true; }
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <_ZSt4moveIRZN13PDUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800c8d2:	b480      	push	{r7}
 800c8d4:	b083      	sub	sp, #12
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4618      	mov	r0, r3
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800c8e8:	b590      	push	{r4, r7, lr}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800c8f2:	6838      	ldr	r0, [r7, #0]
 800c8f4:	f7ff ffed 	bl	800c8d2 <_ZSt4moveIRZN13PDUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	4622      	mov	r2, r4
 800c8fc:	4619      	mov	r1, r3
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f8ec 	bl	800cadc <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd90      	pop	{r4, r7, pc}

0800c90c <_ZNSt17_Function_handlerIFvR9RxMessageEZN13PDUControllerC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c90c:	b590      	push	{r4, r7, lr}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 f8f9 	bl	800cb0e <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800c91c:	4604      	mov	r4, r0
 800c91e:	6838      	ldr	r0, [r7, #0]
 800c920:	f7f4 ff8b 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800c924:	4603      	mov	r3, r0
 800c926:	4619      	mov	r1, r3
 800c928:	4620      	mov	r0, r4
 800c92a:	f000 f901 	bl	800cb30 <_ZSt10__invoke_rIvRZN13PDUControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800c92e:	bf00      	nop
      }
 800c930:	370c      	adds	r7, #12
 800c932:	46bd      	mov	sp, r7
 800c934:	bd90      	pop	{r4, r7, pc}

0800c936 <_ZNSt17_Function_handlerIFvR9RxMessageEZN13PDUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c936:	b590      	push	{r4, r7, lr}
 800c938:	b085      	sub	sp, #20
 800c93a:	af00      	add	r7, sp, #0
 800c93c:	60f8      	str	r0, [r7, #12]
 800c93e:	60b9      	str	r1, [r7, #8]
 800c940:	4613      	mov	r3, r2
 800c942:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800c944:	79fb      	ldrb	r3, [r7, #7]
 800c946:	2b01      	cmp	r3, #1
 800c948:	d109      	bne.n	800c95e <_ZNSt17_Function_handlerIFvR9RxMessageEZN13PDUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	f000 f906 	bl	800cb5c <_ZNSt9_Any_data9_M_accessIPZN13PDUControllerC4EvEUlR9RxMessageE_EERT_v>
 800c950:	4604      	mov	r4, r0
 800c952:	68b8      	ldr	r0, [r7, #8]
 800c954:	f000 f8db 	bl	800cb0e <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800c958:	4603      	mov	r3, r0
 800c95a:	6023      	str	r3, [r4, #0]
	    break;
 800c95c:	e005      	b.n	800c96a <_ZNSt17_Function_handlerIFvR9RxMessageEZN13PDUControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800c95e:	79fb      	ldrb	r3, [r7, #7]
 800c960:	461a      	mov	r2, r3
 800c962:	68b9      	ldr	r1, [r7, #8]
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 f905 	bl	800cb74 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800c96a:	2300      	movs	r3, #0
      }
 800c96c:	4618      	mov	r0, r3
 800c96e:	3714      	adds	r7, #20
 800c970:	46bd      	mov	sp, r7
 800c972:	bd90      	pop	{r4, r7, pc}

0800c974 <_ZN13StateMaschine8getStateI21PodReadyToLaunchStateEERK5Statev>:
	const State& getState(){
 800c974:	b590      	push	{r4, r7, lr}
 800c976:	b083      	sub	sp, #12
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681c      	ldr	r4, [r3, #0]
 800c980:	f7fc ff1a 	bl	80097b8 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv>
 800c984:	4603      	mov	r3, r0
 800c986:	009b      	lsls	r3, r3, #2
 800c988:	4423      	add	r3, r4
 800c98a:	681b      	ldr	r3, [r3, #0]
	}
 800c98c:	4618      	mov	r0, r3
 800c98e:	370c      	adds	r7, #12
 800c990:	46bd      	mov	sp, r7
 800c992:	bd90      	pop	{r4, r7, pc}

0800c994 <_ZN13StateMaschine8setStateI21PodReadyToLaunchStateEEvv>:
	void setState() {
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800c99c:	f00e fbaa 	bl	801b0f4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	009b      	lsls	r3, r3, #2
 800c9aa:	4413      	add	r3, r2
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	68da      	ldr	r2, [r3, #12]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800c9ba:	f7fc fefd 	bl	80097b8 <_ZN5State5getIdI21PodReadyToLaunchStateEEjv>
 800c9be:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	7d1b      	ldrb	r3, [r3, #20]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d101      	bne.n	800c9cc <_ZN13StateMaschine8setStateI21PodReadyToLaunchStateEEvv+0x38>
			Error_Handler();
 800c9c8:	f002 fe32 	bl	800f630 <Error_Handler>
		m_states[id]->m_active = true;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	4413      	add	r3, r2
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2201      	movs	r2, #1
 800c9da:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	68fa      	ldr	r2, [r7, #12]
 800c9e0:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800c9e2:	f00e fbb7 	bl	801b154 <vPortExitCritical>
	}
 800c9e6:	bf00      	nop
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800c9ee:	b590      	push	{r4, r7, lr}
 800c9f0:	b085      	sub	sp, #20
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	60f8      	str	r0, [r7, #12]
 800c9f6:	60b9      	str	r1, [r7, #8]
 800c9f8:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800c9fa:	68b8      	ldr	r0, [r7, #8]
 800c9fc:	f7ff ff0d 	bl	800c81a <_ZSt4moveIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800ca00:	4604      	mov	r4, r0
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f7f5 fd12 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	2004      	movs	r0, #4
 800ca0e:	f7f5 fd01 	bl	8002414 <_ZnwjPv>
 800ca12:	4602      	mov	r2, r0
 800ca14:	6823      	ldr	r3, [r4, #0]
 800ca16:	6013      	str	r3, [r2, #0]
 800ca18:	bf00      	nop
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd90      	pop	{r4, r7, pc}

0800ca20 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800ca28:	6878      	ldr	r0, [r7, #4]
 800ca2a:	f000 f8ce 	bl	800cbca <_ZNKSt9_Any_data9_M_accessIZN14MergedMdbStateC4EvEUlR9RxMessageE_EERKT_v>
 800ca2e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f000 f8d6 	bl	800cbe2 <_ZSt11__addressofIKZN14MergedMdbStateC4EvEUlR9RxMessageE_EPT_RS5_>
 800ca36:	4603      	mov	r3, r0
 800ca38:	bf00      	nop
	}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <_ZSt10__invoke_rIvRZN14MergedMdbStateC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800ca42:	b5b0      	push	{r4, r5, r7, lr}
 800ca44:	b082      	sub	sp, #8
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 f8d3 	bl	800cbf8 <_ZSt7forwardIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800ca52:	4604      	mov	r4, r0
 800ca54:	6838      	ldr	r0, [r7, #0]
 800ca56:	f7f4 fef0 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	4621      	mov	r1, r4
 800ca60:	4628      	mov	r0, r5
 800ca62:	f000 f8d4 	bl	800cc0e <_ZSt13__invoke_implIvRZN14MergedMdbStateC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800ca66:	bf00      	nop
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bdb0      	pop	{r4, r5, r7, pc}

0800ca6e <_ZNSt9_Any_data9_M_accessIPZN14MergedMdbStateC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7f5 fcd8 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800ca86:	b5b0      	push	{r4, r5, r7, lr}
 800ca88:	b084      	sub	sp, #16
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	60f8      	str	r0, [r7, #12]
 800ca8e:	60b9      	str	r1, [r7, #8]
 800ca90:	4613      	mov	r3, r2
 800ca92:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800ca94:	79fb      	ldrb	r3, [r7, #7]
 800ca96:	2b03      	cmp	r3, #3
 800ca98:	d016      	beq.n	800cac8 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800ca9a:	2b03      	cmp	r3, #3
 800ca9c:	dc19      	bgt.n	800cad2 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d002      	beq.n	800caa8 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d00a      	beq.n	800cabc <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800caa6:	e014      	b.n	800cad2 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800caa8:	68f8      	ldr	r0, [r7, #12]
 800caaa:	f7ff ffe0 	bl	800ca6e <_ZNSt9_Any_data9_M_accessIPZN14MergedMdbStateC4EvEUlR9RxMessageE_EERT_v>
 800caae:	4604      	mov	r4, r0
 800cab0:	68b8      	ldr	r0, [r7, #8]
 800cab2:	f7ff ffb5 	bl	800ca20 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800cab6:	4603      	mov	r3, r0
 800cab8:	6023      	str	r3, [r4, #0]
	      break;
 800caba:	e00a      	b.n	800cad2 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800cabc:	462a      	mov	r2, r5
 800cabe:	68b9      	ldr	r1, [r7, #8]
 800cac0:	68f8      	ldr	r0, [r7, #12]
 800cac2:	f000 f8ba 	bl	800cc3a <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800cac6:	e004      	b.n	800cad2 <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800cac8:	4621      	mov	r1, r4
 800caca:	68f8      	ldr	r0, [r7, #12]
 800cacc:	f000 f8ce 	bl	800cc6c <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800cad0:	bf00      	nop
	  return false;
 800cad2:	2300      	movs	r3, #0
	}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bdb0      	pop	{r4, r5, r7, pc}

0800cadc <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800cadc:	b590      	push	{r4, r7, lr}
 800cade:	b085      	sub	sp, #20
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800cae8:	68b8      	ldr	r0, [r7, #8]
 800caea:	f7ff fef2 	bl	800c8d2 <_ZSt4moveIRZN13PDUControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800caee:	4604      	mov	r4, r0
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f7f5 fc9b 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800caf6:	4603      	mov	r3, r0
 800caf8:	4619      	mov	r1, r3
 800cafa:	2004      	movs	r0, #4
 800cafc:	f7f5 fc8a 	bl	8002414 <_ZnwjPv>
 800cb00:	4602      	mov	r2, r0
 800cb02:	6823      	ldr	r3, [r4, #0]
 800cb04:	6013      	str	r3, [r2, #0]
 800cb06:	bf00      	nop
 800cb08:	3714      	adds	r7, #20
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd90      	pop	{r4, r7, pc}

0800cb0e <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b084      	sub	sp, #16
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 f8b4 	bl	800cc84 <_ZNKSt9_Any_data9_M_accessIZN13PDUControllerC4EvEUlR9RxMessageE_EERKT_v>
 800cb1c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f000 f8bc 	bl	800cc9c <_ZSt11__addressofIKZN13PDUControllerC4EvEUlR9RxMessageE_EPT_RS5_>
 800cb24:	4603      	mov	r3, r0
 800cb26:	bf00      	nop
	}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3710      	adds	r7, #16
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <_ZSt10__invoke_rIvRZN13PDUControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800cb30:	b5b0      	push	{r4, r5, r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
 800cb38:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800cb3a:	6878      	ldr	r0, [r7, #4]
 800cb3c:	f000 f8b9 	bl	800ccb2 <_ZSt7forwardIRZN13PDUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800cb40:	4604      	mov	r4, r0
 800cb42:	6838      	ldr	r0, [r7, #0]
 800cb44:	f7f4 fe79 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	4621      	mov	r1, r4
 800cb4e:	4628      	mov	r0, r5
 800cb50:	f000 f8ba 	bl	800ccc8 <_ZSt13__invoke_implIvRZN13PDUControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800cb54:	bf00      	nop
 800cb56:	3708      	adds	r7, #8
 800cb58:	46bd      	mov	sp, r7
 800cb5a:	bdb0      	pop	{r4, r5, r7, pc}

0800cb5c <_ZNSt9_Any_data9_M_accessIPZN13PDUControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b082      	sub	sp, #8
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7f5 fc61 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800cb74:	b5b0      	push	{r4, r5, r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	60f8      	str	r0, [r7, #12]
 800cb7c:	60b9      	str	r1, [r7, #8]
 800cb7e:	4613      	mov	r3, r2
 800cb80:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800cb82:	79fb      	ldrb	r3, [r7, #7]
 800cb84:	2b03      	cmp	r3, #3
 800cb86:	d016      	beq.n	800cbb6 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800cb88:	2b03      	cmp	r3, #3
 800cb8a:	dc19      	bgt.n	800cbc0 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d002      	beq.n	800cb96 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800cb90:	2b02      	cmp	r3, #2
 800cb92:	d00a      	beq.n	800cbaa <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800cb94:	e014      	b.n	800cbc0 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800cb96:	68f8      	ldr	r0, [r7, #12]
 800cb98:	f7ff ffe0 	bl	800cb5c <_ZNSt9_Any_data9_M_accessIPZN13PDUControllerC4EvEUlR9RxMessageE_EERT_v>
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	68b8      	ldr	r0, [r7, #8]
 800cba0:	f7ff ffb5 	bl	800cb0e <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800cba4:	4603      	mov	r3, r0
 800cba6:	6023      	str	r3, [r4, #0]
	      break;
 800cba8:	e00a      	b.n	800cbc0 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800cbaa:	462a      	mov	r2, r5
 800cbac:	68b9      	ldr	r1, [r7, #8]
 800cbae:	68f8      	ldr	r0, [r7, #12]
 800cbb0:	f000 f8a0 	bl	800ccf4 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800cbb4:	e004      	b.n	800cbc0 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800cbb6:	4621      	mov	r1, r4
 800cbb8:	68f8      	ldr	r0, [r7, #12]
 800cbba:	f000 f8b4 	bl	800cd26 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800cbbe:	bf00      	nop
	  return false;
 800cbc0:	2300      	movs	r3, #0
	}
 800cbc2:	4618      	mov	r0, r3
 800cbc4:	3710      	adds	r7, #16
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bdb0      	pop	{r4, r5, r7, pc}

0800cbca <_ZNKSt9_Any_data9_M_accessIZN14MergedMdbStateC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7f5 fc35 	bl	8002442 <_ZNKSt9_Any_data9_M_accessEv>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <_ZSt11__addressofIKZN14MergedMdbStateC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cbe2:	b480      	push	{r7}
 800cbe4:	b083      	sub	sp, #12
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	4618      	mov	r0, r3
 800cbee:	370c      	adds	r7, #12
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf6:	4770      	bx	lr

0800cbf8 <_ZSt7forwardIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800cbf8:	b480      	push	{r7}
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	4618      	mov	r0, r3
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <_ZSt13__invoke_implIvRZN14MergedMdbStateC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800cc0e:	b590      	push	{r4, r7, lr}
 800cc10:	b085      	sub	sp, #20
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	7338      	strb	r0, [r7, #12]
 800cc16:	60b9      	str	r1, [r7, #8]
 800cc18:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800cc1a:	68b8      	ldr	r0, [r7, #8]
 800cc1c:	f7ff ffec 	bl	800cbf8 <_ZSt7forwardIRZN14MergedMdbStateC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800cc20:	4604      	mov	r4, r0
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f7f4 fe09 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f7ff fa25 	bl	800c07c <_ZZN14MergedMdbStateC4EvENKUlR9RxMessageE_clES1_>
 800cc32:	bf00      	nop
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd90      	pop	{r4, r7, pc}

0800cc3a <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800cc3a:	b590      	push	{r4, r7, lr}
 800cc3c:	b085      	sub	sp, #20
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	60f8      	str	r0, [r7, #12]
 800cc42:	60b9      	str	r1, [r7, #8]
 800cc44:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800cc46:	68b8      	ldr	r0, [r7, #8]
 800cc48:	f7ff ffbf 	bl	800cbca <_ZNKSt9_Any_data9_M_accessIZN14MergedMdbStateC4EvEUlR9RxMessageE_EERKT_v>
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f7f5 fbec 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800cc54:	4603      	mov	r3, r0
 800cc56:	4619      	mov	r1, r3
 800cc58:	2004      	movs	r0, #4
 800cc5a:	f7f5 fbdb 	bl	8002414 <_ZnwjPv>
 800cc5e:	4602      	mov	r2, r0
 800cc60:	6823      	ldr	r3, [r4, #0]
 800cc62:	6013      	str	r3, [r2, #0]
	}
 800cc64:	bf00      	nop
 800cc66:	3714      	adds	r7, #20
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd90      	pop	{r4, r7, pc}

0800cc6c <_ZNSt14_Function_base13_Base_managerIZN14MergedMdbStateC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 f861 	bl	800cd3e <_ZNSt9_Any_data9_M_accessIZN14MergedMdbStateC4EvEUlR9RxMessageE_EERT_v>
	}
 800cc7c:	bf00      	nop
 800cc7e:	3708      	adds	r7, #8
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}

0800cc84 <_ZNKSt9_Any_data9_M_accessIZN13PDUControllerC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b082      	sub	sp, #8
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f7f5 fbd8 	bl	8002442 <_ZNKSt9_Any_data9_M_accessEv>
 800cc92:	4603      	mov	r3, r0
 800cc94:	4618      	mov	r0, r3
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <_ZSt11__addressofIKZN13PDUControllerC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cc9c:	b480      	push	{r7}
 800cc9e:	b083      	sub	sp, #12
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4618      	mov	r0, r3
 800cca8:	370c      	adds	r7, #12
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr

0800ccb2 <_ZSt7forwardIRZN13PDUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ccb2:	b480      	push	{r7}
 800ccb4:	b083      	sub	sp, #12
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	370c      	adds	r7, #12
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr

0800ccc8 <_ZSt13__invoke_implIvRZN13PDUControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800ccc8:	b590      	push	{r4, r7, lr}
 800ccca:	b085      	sub	sp, #20
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	7338      	strb	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800ccd4:	68b8      	ldr	r0, [r7, #8]
 800ccd6:	f7ff ffec 	bl	800ccb2 <_ZSt7forwardIRZN13PDUControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800ccda:	4604      	mov	r4, r0
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7f4 fdac 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800cce2:	4603      	mov	r3, r0
 800cce4:	4619      	mov	r1, r3
 800cce6:	4620      	mov	r0, r4
 800cce8:	f7ff fafe 	bl	800c2e8 <_ZZN13PDUControllerC4EvENKUlR9RxMessageE_clES1_>
 800ccec:	bf00      	nop
 800ccee:	3714      	adds	r7, #20
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd90      	pop	{r4, r7, pc}

0800ccf4 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800ccf4:	b590      	push	{r4, r7, lr}
 800ccf6:	b085      	sub	sp, #20
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	60f8      	str	r0, [r7, #12]
 800ccfc:	60b9      	str	r1, [r7, #8]
 800ccfe:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800cd00:	68b8      	ldr	r0, [r7, #8]
 800cd02:	f7ff ffbf 	bl	800cc84 <_ZNKSt9_Any_data9_M_accessIZN13PDUControllerC4EvEUlR9RxMessageE_EERKT_v>
 800cd06:	4604      	mov	r4, r0
 800cd08:	68f8      	ldr	r0, [r7, #12]
 800cd0a:	f7f5 fb8f 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	4619      	mov	r1, r3
 800cd12:	2004      	movs	r0, #4
 800cd14:	f7f5 fb7e 	bl	8002414 <_ZnwjPv>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	6823      	ldr	r3, [r4, #0]
 800cd1c:	6013      	str	r3, [r2, #0]
	}
 800cd1e:	bf00      	nop
 800cd20:	3714      	adds	r7, #20
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd90      	pop	{r4, r7, pc}

0800cd26 <_ZNSt14_Function_base13_Base_managerIZN13PDUControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800cd26:	b580      	push	{r7, lr}
 800cd28:	b082      	sub	sp, #8
 800cd2a:	af00      	add	r7, sp, #0
 800cd2c:	6078      	str	r0, [r7, #4]
 800cd2e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f810 	bl	800cd56 <_ZNSt9_Any_data9_M_accessIZN13PDUControllerC4EvEUlR9RxMessageE_EERT_v>
	}
 800cd36:	bf00      	nop
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}

0800cd3e <_ZNSt9_Any_data9_M_accessIZN14MergedMdbStateC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800cd3e:	b580      	push	{r7, lr}
 800cd40:	b082      	sub	sp, #8
 800cd42:	af00      	add	r7, sp, #0
 800cd44:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f7f5 fb70 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3708      	adds	r7, #8
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <_ZNSt9_Any_data9_M_accessIZN13PDUControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f7f5 fb64 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800cd64:	4603      	mov	r3, r0
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
	...

0800cd70 <_ZN22EstimatedStateRegistry11getInstanceEv>:

#pragma once

class EstimatedStateRegistry{
public:
	static EstimatedStateRegistry& getInstance() {
 800cd70:	b580      	push	{r7, lr}
 800cd72:	af00      	add	r7, sp, #0
		static EstimatedStateRegistry instance;
 800cd74:	4b10      	ldr	r3, [pc, #64]	; (800cdb8 <_ZN22EstimatedStateRegistry11getInstanceEv+0x48>)
 800cd76:	781b      	ldrb	r3, [r3, #0]
 800cd78:	f3bf 8f5b 	dmb	ish
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	f003 0301 	and.w	r3, r3, #1
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	bf0c      	ite	eq
 800cd86:	2301      	moveq	r3, #1
 800cd88:	2300      	movne	r3, #0
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d010      	beq.n	800cdb2 <_ZN22EstimatedStateRegistry11getInstanceEv+0x42>
 800cd90:	4809      	ldr	r0, [pc, #36]	; (800cdb8 <_ZN22EstimatedStateRegistry11getInstanceEv+0x48>)
 800cd92:	f00e fccf 	bl	801b734 <__cxa_guard_acquire>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	bf14      	ite	ne
 800cd9c:	2301      	movne	r3, #1
 800cd9e:	2300      	moveq	r3, #0
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d005      	beq.n	800cdb2 <_ZN22EstimatedStateRegistry11getInstanceEv+0x42>
 800cda6:	4805      	ldr	r0, [pc, #20]	; (800cdbc <_ZN22EstimatedStateRegistry11getInstanceEv+0x4c>)
 800cda8:	f000 f819 	bl	800cdde <_ZN22EstimatedStateRegistryC1Ev>
 800cdac:	4802      	ldr	r0, [pc, #8]	; (800cdb8 <_ZN22EstimatedStateRegistry11getInstanceEv+0x48>)
 800cdae:	f00e fccd 	bl	801b74c <__cxa_guard_release>
		return instance;
 800cdb2:	4b02      	ldr	r3, [pc, #8]	; (800cdbc <_ZN22EstimatedStateRegistry11getInstanceEv+0x4c>)
	}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	20000de0 	.word	0x20000de0
 800cdbc:	20000ddc 	.word	0x20000ddc

0800cdc0 <_ZN22EstimatedStateRegistry11getPositionEv>:

	[[nodiscard]] inline float getPosition(){
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
		return m_position;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	ee07 3a90 	vmov	s15, r3
	}
 800cdd0:	eeb0 0a67 	vmov.f32	s0, s15
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <_ZN22EstimatedStateRegistryC1Ev>:
	void setPosition(float position){
		m_position = position;
	}

private:
	explicit EstimatedStateRegistry(){
 800cdde:	b480      	push	{r7}
 800cde0:	b083      	sub	sp, #12
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]

	}
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4618      	mov	r0, r3
 800cdea:	370c      	adds	r7, #12
 800cdec:	46bd      	mov	sp, r7
 800cdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf2:	4770      	bx	lr

0800cdf4 <_ZN17PodLaunchingState5setupEv>:
#include "EstimatedStateRegistry.hpp"
#include "GlobalState.hpp"
#include "PodStopLevitationState.hpp"


void PodLaunchingState::setup() {
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b082      	sub	sp, #8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
	printf("enter launching state\n");
 800cdfc:	4803      	ldr	r0, [pc, #12]	; (800ce0c <_ZN17PodLaunchingState5setupEv+0x18>)
 800cdfe:	f00a f8a9 	bl	8016f54 <printf_>
}
 800ce02:	bf00      	nop
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	0801ee68 	.word	0x0801ee68

0800ce10 <_ZN17PodLaunchingState6updateEv>:

void PodLaunchingState::update() {
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
	if(EstimatedStateRegistry::getInstance().getPosition() > 2){
 800ce18:	f7ff ffaa 	bl	800cd70 <_ZN22EstimatedStateRegistry11getInstanceEv>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7ff ffce 	bl	800cdc0 <_ZN22EstimatedStateRegistry11getPositionEv>
 800ce24:	eef0 7a40 	vmov.f32	s15, s0
 800ce28:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ce2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce34:	bfcc      	ite	gt
 800ce36:	2301      	movgt	r3, #1
 800ce38:	2300      	movle	r3, #0
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d005      	beq.n	800ce4c <_ZN17PodLaunchingState6updateEv+0x3c>
		GlobalState::getInstance().setState<PodStopLevitationState>();
 800ce40:	f7fc f9c6 	bl	80091d0 <_ZN11GlobalState11getInstanceEv>
 800ce44:	4603      	mov	r3, r0
 800ce46:	4618      	mov	r0, r3
 800ce48:	f000 f812 	bl	800ce70 <_ZN11GlobalState8setStateI22PodStopLevitationStateEEvv>
	}
}
 800ce4c:	bf00      	nop
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <_ZN17PodLaunchingState7disposeEv>:

void PodLaunchingState::dispose() {
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
	printf("exit launching state\n");
 800ce5c:	4803      	ldr	r0, [pc, #12]	; (800ce6c <_ZN17PodLaunchingState7disposeEv+0x18>)
 800ce5e:	f00a f879 	bl	8016f54 <printf_>

}
 800ce62:	bf00      	nop
 800ce64:	3708      	adds	r7, #8
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	0801ee80 	.word	0x0801ee80

0800ce70 <_ZN11GlobalState8setStateI22PodStopLevitationStateEEvv>:
	void setState(){
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	333c      	adds	r3, #60	; 0x3c
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f000 f812 	bl	800cea6 <_ZN13StateMaschine8getStateI22PodStopLevitationStateEERK5Statev>
 800ce82:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7fb ffe5 	bl	8008e54 <_ZNK5State11getPodStateEv>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	4619      	mov	r1, r3
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f7fc f9dc 	bl	800924c <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	333c      	adds	r3, #60	; 0x3c
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f000 f814 	bl	800cec6 <_ZN13StateMaschine8setStateI22PodStopLevitationStateEEvv>
	}
 800ce9e:	bf00      	nop
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <_ZN13StateMaschine8getStateI22PodStopLevitationStateEERK5Statev>:
	const State& getState(){
 800cea6:	b590      	push	{r4, r7, lr}
 800cea8:	b083      	sub	sp, #12
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681c      	ldr	r4, [r3, #0]
 800ceb2:	f7fc fd31 	bl	8009918 <_ZN5State5getIdI22PodStopLevitationStateEEjv>
 800ceb6:	4603      	mov	r3, r0
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	4423      	add	r3, r4
 800cebc:	681b      	ldr	r3, [r3, #0]
	}
 800cebe:	4618      	mov	r0, r3
 800cec0:	370c      	adds	r7, #12
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd90      	pop	{r4, r7, pc}

0800cec6 <_ZN13StateMaschine8setStateI22PodStopLevitationStateEEvv>:
	void setState() {
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b084      	sub	sp, #16
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800cece:	f00e f911 	bl	801b0f4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681a      	ldr	r2, [r3, #0]
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	68db      	ldr	r3, [r3, #12]
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	2200      	movs	r2, #0
 800cee2:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	68da      	ldr	r2, [r3, #12]
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800ceec:	f7fc fd14 	bl	8009918 <_ZN5State5getIdI22PodStopLevitationStateEEjv>
 800cef0:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	7d1b      	ldrb	r3, [r3, #20]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <_ZN13StateMaschine8setStateI22PodStopLevitationStateEEvv+0x38>
			Error_Handler();
 800cefa:	f002 fb99 	bl	800f630 <Error_Handler>
		m_states[id]->m_active = true;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681a      	ldr	r2, [r3, #0]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	009b      	lsls	r3, r3, #2
 800cf06:	4413      	add	r3, r2
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	68fa      	ldr	r2, [r7, #12]
 800cf12:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800cf14:	f00e f91e 	bl	801b154 <vPortExitCritical>
	}
 800cf18:	bf00      	nop
 800cf1a:	3710      	adds	r7, #16
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <_ZN21PodReadyToLaunchState5setupEv>:
#include "GlobalState.hpp"
#include "estdio.hpp"
#include "GroundStationReceiver.hpp"


void PodReadyToLaunchState::setup() {
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
	printf("enter pod ready to launch\n");
 800cf28:	4803      	ldr	r0, [pc, #12]	; (800cf38 <_ZN21PodReadyToLaunchState5setupEv+0x18>)
 800cf2a:	f00a f813 	bl	8016f54 <printf_>
}
 800cf2e:	bf00      	nop
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	0801eecc 	.word	0x0801eecc

0800cf3c <_ZN21PodReadyToLaunchState6updateEv>:

void PodReadyToLaunchState::update() {
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
	if(GroundStationReceiver::getInstance().getLastCommand() == COMMAND_LAUNCH){
 800cf44:	f7fe fc44 	bl	800b7d0 <_ZN21GroundStationReceiver11getInstanceEv>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7fe fc7c 	bl	800b848 <_ZN21GroundStationReceiver14getLastCommandEv>
 800cf50:	4603      	mov	r3, r0
 800cf52:	2b02      	cmp	r3, #2
 800cf54:	bf0c      	ite	eq
 800cf56:	2301      	moveq	r3, #1
 800cf58:	2300      	movne	r3, #0
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d005      	beq.n	800cf6c <_ZN21PodReadyToLaunchState6updateEv+0x30>
		GlobalState::getInstance().setState<PodStartLevitation>();
 800cf60:	f7fc f936 	bl	80091d0 <_ZN11GlobalState11getInstanceEv>
 800cf64:	4603      	mov	r3, r0
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 f812 	bl	800cf90 <_ZN11GlobalState8setStateI18PodStartLevitationEEvv>
	}
}
 800cf6c:	bf00      	nop
 800cf6e:	3708      	adds	r7, #8
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}

0800cf74 <_ZN21PodReadyToLaunchState7disposeEv>:

void PodReadyToLaunchState::dispose() {
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b082      	sub	sp, #8
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
	printf("exit pod ready to launch\n");
 800cf7c:	4803      	ldr	r0, [pc, #12]	; (800cf8c <_ZN21PodReadyToLaunchState7disposeEv+0x18>)
 800cf7e:	f009 ffe9 	bl	8016f54 <printf_>
}
 800cf82:	bf00      	nop
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	0801eee8 	.word	0x0801eee8

0800cf90 <_ZN11GlobalState8setStateI18PodStartLevitationEEvv>:
	void setState(){
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	333c      	adds	r3, #60	; 0x3c
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 f812 	bl	800cfc6 <_ZN13StateMaschine8getStateI18PodStartLevitationEERK5Statev>
 800cfa2:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800cfa4:	68f8      	ldr	r0, [r7, #12]
 800cfa6:	f7fb ff55 	bl	8008e54 <_ZNK5State11getPodStateEv>
 800cfaa:	4603      	mov	r3, r0
 800cfac:	4619      	mov	r1, r3
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7fc f94c 	bl	800924c <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	333c      	adds	r3, #60	; 0x3c
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 f814 	bl	800cfe6 <_ZN13StateMaschine8setStateI18PodStartLevitationEEvv>
	}
 800cfbe:	bf00      	nop
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}

0800cfc6 <_ZN13StateMaschine8getStateI18PodStartLevitationEERK5Statev>:
	const State& getState(){
 800cfc6:	b590      	push	{r4, r7, lr}
 800cfc8:	b083      	sub	sp, #12
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681c      	ldr	r4, [r3, #0]
 800cfd2:	f7fc fc49 	bl	8009868 <_ZN5State5getIdI18PodStartLevitationEEjv>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	4423      	add	r3, r4
 800cfdc:	681b      	ldr	r3, [r3, #0]
	}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	370c      	adds	r7, #12
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd90      	pop	{r4, r7, pc}

0800cfe6 <_ZN13StateMaschine8setStateI18PodStartLevitationEEvv>:
	void setState() {
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b084      	sub	sp, #16
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800cfee:	f00e f881 	bl	801b0f4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681a      	ldr	r2, [r3, #0]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	68db      	ldr	r3, [r3, #12]
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2200      	movs	r2, #0
 800d002:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	68da      	ldr	r2, [r3, #12]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800d00c:	f7fc fc2c 	bl	8009868 <_ZN5State5getIdI18PodStartLevitationEEjv>
 800d010:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	7d1b      	ldrb	r3, [r3, #20]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d101      	bne.n	800d01e <_ZN13StateMaschine8setStateI18PodStartLevitationEEvv+0x38>
			Error_Handler();
 800d01a:	f002 fb09 	bl	800f630 <Error_Handler>
		m_states[id]->m_active = true;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	009b      	lsls	r3, r3, #2
 800d026:	4413      	add	r3, r2
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2201      	movs	r2, #1
 800d02c:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	68fa      	ldr	r2, [r7, #12]
 800d032:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800d034:	f00e f88e 	bl	801b154 <vPortExitCritical>
	}
 800d038:	bf00      	nop
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <_ZN17PodSafeToApproach5setupEv>:
 *      Author: OfficeLaptop
 */

#include <PodSafeToApproach.hpp>

void PodSafeToApproach::setup() {
 800d040:	b480      	push	{r7}
 800d042:	b083      	sub	sp, #12
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]

}
 800d048:	bf00      	nop
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr

0800d054 <_ZN17PodSafeToApproach6updateEv>:

void PodSafeToApproach::update() {
 800d054:	b480      	push	{r7}
 800d056:	b083      	sub	sp, #12
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]

}
 800d05c:	bf00      	nop
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr

0800d068 <_ZN17PodSafeToApproach7disposeEv>:

void PodSafeToApproach::dispose() {
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]

}
 800d070:	bf00      	nop
 800d072:	370c      	adds	r7, #12
 800d074:	46bd      	mov	sp, r7
 800d076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07a:	4770      	bx	lr

0800d07c <_ZN18PodStartLevitation5setupEv>:
#include "MergedMdbState.hpp"
#include "GlobalState.hpp"
#include "PodLevitationState.hpp"


void PodStartLevitation::setup(){
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
	printf("enter start levitation\n");
 800d084:	4803      	ldr	r0, [pc, #12]	; (800d094 <_ZN18PodStartLevitation5setupEv+0x18>)
 800d086:	f009 ff65 	bl	8016f54 <printf_>
}
 800d08a:	bf00      	nop
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	0801ef38 	.word	0x0801ef38

0800d098 <_ZN18PodStartLevitation6updateEv>:

void PodStartLevitation::update(){
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	6078      	str	r0, [r7, #4]
	if(MergedMdbState::getInstance().getState() == MDB_STATE_LEVITATION){
 800d0a0:	f7fe ffb2 	bl	800c008 <_ZN14MergedMdbState11getInstanceEv>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	4618      	mov	r0, r3
 800d0a8:	f7fe ffdc 	bl	800c064 <_ZNK14MergedMdbState8getStateEv>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b02      	cmp	r3, #2
 800d0b0:	bf0c      	ite	eq
 800d0b2:	2301      	moveq	r3, #1
 800d0b4:	2300      	movne	r3, #0
 800d0b6:	b2db      	uxtb	r3, r3
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d005      	beq.n	800d0c8 <_ZN18PodStartLevitation6updateEv+0x30>
		GlobalState::getInstance().setState<PodLevitationState>();
 800d0bc:	f7fc f888 	bl	80091d0 <_ZN11GlobalState11getInstanceEv>
 800d0c0:	4603      	mov	r3, r0
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f000 f812 	bl	800d0ec <_ZN11GlobalState8setStateI18PodLevitationStateEEvv>
	}
}
 800d0c8:	bf00      	nop
 800d0ca:	3708      	adds	r7, #8
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	bd80      	pop	{r7, pc}

0800d0d0 <_ZN18PodStartLevitation7disposeEv>:

void PodStartLevitation::dispose(){
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
	printf("exit start levitation\n");
 800d0d8:	4803      	ldr	r0, [pc, #12]	; (800d0e8 <_ZN18PodStartLevitation7disposeEv+0x18>)
 800d0da:	f009 ff3b 	bl	8016f54 <printf_>

}
 800d0de:	bf00      	nop
 800d0e0:	3708      	adds	r7, #8
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	0801ef50 	.word	0x0801ef50

0800d0ec <_ZN11GlobalState8setStateI18PodLevitationStateEEvv>:
	void setState(){
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	333c      	adds	r3, #60	; 0x3c
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 f812 	bl	800d122 <_ZN13StateMaschine8getStateI18PodLevitationStateEERK5Statev>
 800d0fe:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800d100:	68f8      	ldr	r0, [r7, #12]
 800d102:	f7fb fea7 	bl	8008e54 <_ZNK5State11getPodStateEv>
 800d106:	4603      	mov	r3, r0
 800d108:	4619      	mov	r1, r3
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7fc f89e 	bl	800924c <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	333c      	adds	r3, #60	; 0x3c
 800d114:	4618      	mov	r0, r3
 800d116:	f000 f814 	bl	800d142 <_ZN13StateMaschine8setStateI18PodLevitationStateEEvv>
	}
 800d11a:	bf00      	nop
 800d11c:	3710      	adds	r7, #16
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <_ZN13StateMaschine8getStateI18PodLevitationStateEERK5Statev>:
	const State& getState(){
 800d122:	b590      	push	{r4, r7, lr}
 800d124:	b083      	sub	sp, #12
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681c      	ldr	r4, [r3, #0]
 800d12e:	f000 f835 	bl	800d19c <_ZN5State5getIdI18PodLevitationStateEEjv>
 800d132:	4603      	mov	r3, r0
 800d134:	009b      	lsls	r3, r3, #2
 800d136:	4423      	add	r3, r4
 800d138:	681b      	ldr	r3, [r3, #0]
	}
 800d13a:	4618      	mov	r0, r3
 800d13c:	370c      	adds	r7, #12
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd90      	pop	{r4, r7, pc}

0800d142 <_ZN13StateMaschine8setStateI18PodLevitationStateEEvv>:
	void setState() {
 800d142:	b580      	push	{r7, lr}
 800d144:	b084      	sub	sp, #16
 800d146:	af00      	add	r7, sp, #0
 800d148:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800d14a:	f00d ffd3 	bl	801b0f4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	68db      	ldr	r3, [r3, #12]
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4413      	add	r3, r2
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2200      	movs	r2, #0
 800d15e:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	68da      	ldr	r2, [r3, #12]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800d168:	f000 f818 	bl	800d19c <_ZN5State5getIdI18PodLevitationStateEEjv>
 800d16c:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	7d1b      	ldrb	r3, [r3, #20]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <_ZN13StateMaschine8setStateI18PodLevitationStateEEvv+0x38>
			Error_Handler();
 800d176:	f002 fa5b 	bl	800f630 <Error_Handler>
		m_states[id]->m_active = true;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681a      	ldr	r2, [r3, #0]
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	4413      	add	r3, r2
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	2201      	movs	r2, #1
 800d188:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	68fa      	ldr	r2, [r7, #12]
 800d18e:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800d190:	f00d ffe0 	bl	801b154 <vPortExitCritical>
	}
 800d194:	bf00      	nop
 800d196:	3710      	adds	r7, #16
 800d198:	46bd      	mov	sp, r7
 800d19a:	bd80      	pop	{r7, pc}

0800d19c <_ZN5State5getIdI18PodLevitationStateEEjv>:
	static unsigned int getId(){
 800d19c:	b580      	push	{r7, lr}
 800d19e:	af00      	add	r7, sp, #0
		static unsigned int id = getNextId();
 800d1a0:	4b12      	ldr	r3, [pc, #72]	; (800d1ec <_ZN5State5getIdI18PodLevitationStateEEjv+0x50>)
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	f3bf 8f5b 	dmb	ish
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bf0c      	ite	eq
 800d1b2:	2301      	moveq	r3, #1
 800d1b4:	2300      	movne	r3, #0
 800d1b6:	b2db      	uxtb	r3, r3
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d012      	beq.n	800d1e2 <_ZN5State5getIdI18PodLevitationStateEEjv+0x46>
 800d1bc:	480b      	ldr	r0, [pc, #44]	; (800d1ec <_ZN5State5getIdI18PodLevitationStateEEjv+0x50>)
 800d1be:	f00e fab9 	bl	801b734 <__cxa_guard_acquire>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	bf14      	ite	ne
 800d1c8:	2301      	movne	r3, #1
 800d1ca:	2300      	moveq	r3, #0
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d007      	beq.n	800d1e2 <_ZN5State5getIdI18PodLevitationStateEEjv+0x46>
 800d1d2:	f7fb fe4b 	bl	8008e6c <_ZN5State9getNextIdEv>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	4a05      	ldr	r2, [pc, #20]	; (800d1f0 <_ZN5State5getIdI18PodLevitationStateEEjv+0x54>)
 800d1da:	6013      	str	r3, [r2, #0]
 800d1dc:	4803      	ldr	r0, [pc, #12]	; (800d1ec <_ZN5State5getIdI18PodLevitationStateEEjv+0x50>)
 800d1de:	f00e fab5 	bl	801b74c <__cxa_guard_release>
		return id;
 800d1e2:	4b03      	ldr	r3, [pc, #12]	; (800d1f0 <_ZN5State5getIdI18PodLevitationStateEEjv+0x54>)
 800d1e4:	681b      	ldr	r3, [r3, #0]
	}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	20000de8 	.word	0x20000de8
 800d1f0:	20000de4 	.word	0x20000de4

0800d1f4 <_ZN15PodStartupState5setupEv>:

#include <PodStartupState.hpp>
#include "GlobalState.hpp"
#include "PodIdleState.hpp"

void PodStartupState::setup() {
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b082      	sub	sp, #8
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
	printf("enter startup state\n");
 800d1fc:	4803      	ldr	r0, [pc, #12]	; (800d20c <_ZN15PodStartupState5setupEv+0x18>)
 800d1fe:	f009 fea9 	bl	8016f54 <printf_>
}
 800d202:	bf00      	nop
 800d204:	3708      	adds	r7, #8
 800d206:	46bd      	mov	sp, r7
 800d208:	bd80      	pop	{r7, pc}
 800d20a:	bf00      	nop
 800d20c:	0801ef9c 	.word	0x0801ef9c

0800d210 <_ZN15PodStartupState6updateEv>:

void PodStartupState::update() {
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
	GlobalState::getInstance().setState<PodIdleState>();
 800d218:	f7fb ffda 	bl	80091d0 <_ZN11GlobalState11getInstanceEv>
 800d21c:	4603      	mov	r3, r0
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 f812 	bl	800d248 <_ZN11GlobalState8setStateI12PodIdleStateEEvv>
}
 800d224:	bf00      	nop
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <_ZN15PodStartupState7disposeEv>:

void PodStartupState::dispose() {
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]

	printf("exit startup state\n");
 800d234:	4803      	ldr	r0, [pc, #12]	; (800d244 <_ZN15PodStartupState7disposeEv+0x18>)
 800d236:	f009 fe8d 	bl	8016f54 <printf_>
}
 800d23a:	bf00      	nop
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
 800d242:	bf00      	nop
 800d244:	0801efb4 	.word	0x0801efb4

0800d248 <_ZN11GlobalState8setStateI12PodIdleStateEEvv>:
	void setState(){
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	333c      	adds	r3, #60	; 0x3c
 800d254:	4618      	mov	r0, r3
 800d256:	f000 f812 	bl	800d27e <_ZN13StateMaschine8getStateI12PodIdleStateEERK5Statev>
 800d25a:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800d25c:	68f8      	ldr	r0, [r7, #12]
 800d25e:	f7fb fdf9 	bl	8008e54 <_ZNK5State11getPodStateEv>
 800d262:	4603      	mov	r3, r0
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7fb fff0 	bl	800924c <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	333c      	adds	r3, #60	; 0x3c
 800d270:	4618      	mov	r0, r3
 800d272:	f000 f814 	bl	800d29e <_ZN13StateMaschine8setStateI12PodIdleStateEEvv>
	}
 800d276:	bf00      	nop
 800d278:	3710      	adds	r7, #16
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}

0800d27e <_ZN13StateMaschine8getStateI12PodIdleStateEERK5Statev>:
	const State& getState(){
 800d27e:	b590      	push	{r4, r7, lr}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681c      	ldr	r4, [r3, #0]
 800d28a:	f7fc fa69 	bl	8009760 <_ZN5State5getIdI12PodIdleStateEEjv>
 800d28e:	4603      	mov	r3, r0
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	4423      	add	r3, r4
 800d294:	681b      	ldr	r3, [r3, #0]
	}
 800d296:	4618      	mov	r0, r3
 800d298:	370c      	adds	r7, #12
 800d29a:	46bd      	mov	sp, r7
 800d29c:	bd90      	pop	{r4, r7, pc}

0800d29e <_ZN13StateMaschine8setStateI12PodIdleStateEEvv>:
	void setState() {
 800d29e:	b580      	push	{r7, lr}
 800d2a0:	b084      	sub	sp, #16
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800d2a6:	f00d ff25 	bl	801b0f4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	68db      	ldr	r3, [r3, #12]
 800d2b2:	009b      	lsls	r3, r3, #2
 800d2b4:	4413      	add	r3, r2
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	68da      	ldr	r2, [r3, #12]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800d2c4:	f7fc fa4c 	bl	8009760 <_ZN5State5getIdI12PodIdleStateEEjv>
 800d2c8:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	7d1b      	ldrb	r3, [r3, #20]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d101      	bne.n	800d2d6 <_ZN13StateMaschine8setStateI12PodIdleStateEEvv+0x38>
			Error_Handler();
 800d2d2:	f002 f9ad 	bl	800f630 <Error_Handler>
		m_states[id]->m_active = true;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800d2ec:	f00d ff32 	bl	801b154 <vPortExitCritical>
	}
 800d2f0:	bf00      	nop
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <_ZN22PodStopLevitationState5setupEv>:
#include "SDC.hpp"
#include "MergedMdbState.hpp"
#include "GlobalState.hpp"
#include "PodBreakState.hpp"

void PodStopLevitationState::setup() {
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
	printf("enter stop levitation\n");
 800d300:	4804      	ldr	r0, [pc, #16]	; (800d314 <_ZN22PodStopLevitationState5setupEv+0x1c>)
 800d302:	f009 fe27 	bl	8016f54 <printf_>
	SDC::getInstance();
 800d306:	f7fe fe4b 	bl	800bfa0 <_ZN3SDC11getInstanceEv>
}
 800d30a:	bf00      	nop
 800d30c:	3708      	adds	r7, #8
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}
 800d312:	bf00      	nop
 800d314:	0801effc 	.word	0x0801effc

0800d318 <_ZN22PodStopLevitationState6updateEv>:

void PodStopLevitationState::update() {
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
	if(MergedMdbState::getInstance().getState() == MDB_STATE_GROUNDED){
 800d320:	f7fe fe72 	bl	800c008 <_ZN14MergedMdbState11getInstanceEv>
 800d324:	4603      	mov	r3, r0
 800d326:	4618      	mov	r0, r3
 800d328:	f7fe fe9c 	bl	800c064 <_ZNK14MergedMdbState8getStateEv>
 800d32c:	4603      	mov	r3, r0
 800d32e:	2b03      	cmp	r3, #3
 800d330:	bf0c      	ite	eq
 800d332:	2301      	moveq	r3, #1
 800d334:	2300      	movne	r3, #0
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d005      	beq.n	800d348 <_ZN22PodStopLevitationState6updateEv+0x30>
		GlobalState::getInstance().setState<PodBreakState>();
 800d33c:	f7fb ff48 	bl	80091d0 <_ZN11GlobalState11getInstanceEv>
 800d340:	4603      	mov	r3, r0
 800d342:	4618      	mov	r0, r3
 800d344:	f000 f812 	bl	800d36c <_ZN11GlobalState8setStateI13PodBreakStateEEvv>
	}
}
 800d348:	bf00      	nop
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <_ZN22PodStopLevitationState7disposeEv>:

void PodStopLevitationState::dispose() {
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
	printf("exit stop levitation\n");
 800d358:	4803      	ldr	r0, [pc, #12]	; (800d368 <_ZN22PodStopLevitationState7disposeEv+0x18>)
 800d35a:	f009 fdfb 	bl	8016f54 <printf_>
}
 800d35e:	bf00      	nop
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	0801f014 	.word	0x0801f014

0800d36c <_ZN11GlobalState8setStateI13PodBreakStateEEvv>:
	void setState(){
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
		const State& state = m_stateMaschine.getState<STATE>();
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	333c      	adds	r3, #60	; 0x3c
 800d378:	4618      	mov	r0, r3
 800d37a:	f000 f812 	bl	800d3a2 <_ZN13StateMaschine8getStateI13PodBreakStateEERK5Statev>
 800d37e:	60f8      	str	r0, [r7, #12]
		broadcastState(state.getPodState());
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f7fb fd67 	bl	8008e54 <_ZNK5State11getPodStateEv>
 800d386:	4603      	mov	r3, r0
 800d388:	4619      	mov	r1, r3
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7fb ff5e 	bl	800924c <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.setState<STATE>();
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	333c      	adds	r3, #60	; 0x3c
 800d394:	4618      	mov	r0, r3
 800d396:	f000 f814 	bl	800d3c2 <_ZN13StateMaschine8setStateI13PodBreakStateEEvv>
	}
 800d39a:	bf00      	nop
 800d39c:	3710      	adds	r7, #16
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	bd80      	pop	{r7, pc}

0800d3a2 <_ZN13StateMaschine8getStateI13PodBreakStateEERK5Statev>:
	const State& getState(){
 800d3a2:	b590      	push	{r4, r7, lr}
 800d3a4:	b083      	sub	sp, #12
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
		return *(m_states[State::getId<STATE>()]);
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681c      	ldr	r4, [r3, #0]
 800d3ae:	f7fc fadf 	bl	8009970 <_ZN5State5getIdI13PodBreakStateEEjv>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	4423      	add	r3, r4
 800d3b8:	681b      	ldr	r3, [r3, #0]
	}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	370c      	adds	r7, #12
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd90      	pop	{r4, r7, pc}

0800d3c2 <_ZN13StateMaschine8setStateI13PodBreakStateEEvv>:
	void setState() {
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b084      	sub	sp, #16
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
		taskENTER_CRITICAL();
 800d3ca:	f00d fe93 	bl	801b0f4 <vPortEnterCritical>
		m_states[m_currentState]->m_active = false;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	68db      	ldr	r3, [r3, #12]
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	721a      	strb	r2, [r3, #8]
		m_prevState = m_currentState;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	68da      	ldr	r2, [r3, #12]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	609a      	str	r2, [r3, #8]
		unsigned int id = State::getId<DestState>();
 800d3e8:	f7fc fac2 	bl	8009970 <_ZN5State5getIdI13PodBreakStateEEjv>
 800d3ec:	60f8      	str	r0, [r7, #12]
		if (m_running == false) {
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	7d1b      	ldrb	r3, [r3, #20]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d101      	bne.n	800d3fa <_ZN13StateMaschine8setStateI13PodBreakStateEEvv+0x38>
			Error_Handler();
 800d3f6:	f002 f91b 	bl	800f630 <Error_Handler>
		m_states[id]->m_active = true;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	2201      	movs	r2, #1
 800d408:	721a      	strb	r2, [r3, #8]
		m_nextState = id;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	611a      	str	r2, [r3, #16]
		taskEXIT_CRITICAL();
 800d410:	f00d fea0 	bl	801b154 <vPortExitCritical>
	}
 800d414:	bf00      	nop
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>:

#include "main.h"

class GPIOWriteController {
public:
	explicit GPIOWriteController(GPIO_TypeDef *port, uint16_t pin) :
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	60f8      	str	r0, [r7, #12]
 800d424:	60b9      	str	r1, [r7, #8]
 800d426:	4613      	mov	r3, r2
 800d428:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	68ba      	ldr	r2, [r7, #8]
 800d42e:	601a      	str	r2, [r3, #0]
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	88fa      	ldrh	r2, [r7, #6]
 800d434:	809a      	strh	r2, [r3, #4]
	}
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	4618      	mov	r0, r3
 800d43a:	3714      	adds	r7, #20
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <_ZN19GPIOWriteController3setEv>:
	void set() {
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(m_port, m_pin, GPIO_PIN_SET);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6818      	ldr	r0, [r3, #0]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	889b      	ldrh	r3, [r3, #4]
 800d454:	2201      	movs	r2, #1
 800d456:	4619      	mov	r1, r3
 800d458:	f005 f904 	bl	8012664 <HAL_GPIO_WritePin>
	}
 800d45c:	bf00      	nop
 800d45e:	3708      	adds	r7, #8
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}

0800d464 <_ZN19GPIOWriteController5resetEv>:
		if (value)
			set();
		else
			reset();
	}
	void reset() {
 800d464:	b580      	push	{r7, lr}
 800d466:	b082      	sub	sp, #8
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(m_port, m_pin, GPIO_PIN_RESET);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	6818      	ldr	r0, [r3, #0]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	889b      	ldrh	r3, [r3, #4]
 800d474:	2200      	movs	r2, #0
 800d476:	4619      	mov	r1, r3
 800d478:	f005 f8f4 	bl	8012664 <HAL_GPIO_WritePin>
	}
 800d47c:	bf00      	nop
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}

0800d484 <_ZN3SDCC1ERK9SDCConfigNS_9SDCStatusE>:
 *  Created on: Apr 26, 2023
 *      Author: OfficeLaptop
 */
#include "SDC.hpp"

SDC::SDC(const SDCConfig& config, SDCStatus initalStatus) : m_gpio(config.m_gpio.m_port, config.m_gpio.m_pin), m_status(initalStatus) {
 800d484:	b580      	push	{r7, lr}
 800d486:	b084      	sub	sp, #16
 800d488:	af00      	add	r7, sp, #0
 800d48a:	60f8      	str	r0, [r7, #12]
 800d48c:	60b9      	str	r1, [r7, #8]
 800d48e:	4613      	mov	r3, r2
 800d490:	71fb      	strb	r3, [r7, #7]
 800d492:	68f8      	ldr	r0, [r7, #12]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	6819      	ldr	r1, [r3, #0]
 800d498:	68bb      	ldr	r3, [r7, #8]
 800d49a:	889b      	ldrh	r3, [r3, #4]
 800d49c:	461a      	mov	r2, r3
 800d49e:	f7ff ffbd 	bl	800d41c <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	79fa      	ldrb	r2, [r7, #7]
 800d4a6:	721a      	strb	r2, [r3, #8]
	open();
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f000 f805 	bl	800d4b8 <_ZN3SDC4openEv>
}
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <_ZN3SDC4openEv>:

void SDC::open(){
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b082      	sub	sp, #8
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
	m_gpio.reset();
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7ff ffce 	bl	800d464 <_ZN19GPIOWriteController5resetEv>
	m_status = SDC_OPEN;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	721a      	strb	r2, [r3, #8]
}
 800d4ce:	bf00      	nop
 800d4d0:	3708      	adds	r7, #8
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}

0800d4d6 <_ZN3SDC5closeEv>:

void SDC::close(){
 800d4d6:	b580      	push	{r7, lr}
 800d4d8:	b082      	sub	sp, #8
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
	m_gpio.set();
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7ff ffaf 	bl	800d444 <_ZN19GPIOWriteController3setEv>
	m_status = SDC_CLOSED;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	721a      	strb	r2, [r3, #8]
}
 800d4ec:	bf00      	nop
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	ed87 0a01 	vstr	s0, [r7, #4]
 800d4fe:	edd7 7a01 	vldr	s15, [r7, #4]
 800d502:	eef0 7ae7 	vabs.f32	s15, s15
 800d506:	eeb0 0a67 	vmov.f32	s0, s15
 800d50a:	370c      	adds	r7, #12
 800d50c:	46bd      	mov	sp, r7
 800d50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800d514:	b480      	push	{r7}
 800d516:	b085      	sub	sp, #20
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d524:	f04f 0200 	mov.w	r2, #0
 800d528:	f04f 0300 	mov.w	r3, #0
 800d52c:	0c02      	lsrs	r2, r0, #16
 800d52e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800d532:	0c0b      	lsrs	r3, r1, #16
 800d534:	4613      	mov	r3, r2
 800d536:	81fb      	strh	r3, [r7, #14]
                return value * (0.036f);
 800d538:	89fb      	ldrh	r3, [r7, #14]
 800d53a:	ee07 3a90 	vmov	s15, r3
 800d53e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d542:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d558 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_+0x44>
 800d546:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800d54a:	eeb0 0a67 	vmov.f32	s0, s15
 800d54e:	3714      	adds	r7, #20
 800d550:	46bd      	mov	sp, r7
 800d552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d556:	4770      	bx	lr
 800d558:	3d1374bc 	.word	0x3d1374bc
 800d55c:	00000000 	.word	0x00000000

0800d560 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_>:
            constexpr static inline double get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800d560:	b580      	push	{r7, lr}
 800d562:	b084      	sub	sp, #16
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
                uint32_t value = static_cast<uint32_t>((intel & 0xFFFFFFFF00000000ull) >> 32);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d570:	f04f 0200 	mov.w	r2, #0
 800d574:	f04f 0300 	mov.w	r3, #0
 800d578:	000a      	movs	r2, r1
 800d57a:	2300      	movs	r3, #0
 800d57c:	4613      	mov	r3, r2
 800d57e:	60fb      	str	r3, [r7, #12]
                return value * (0.001);
 800d580:	68f8      	ldr	r0, [r7, #12]
 800d582:	f7f2 ffbf 	bl	8000504 <__aeabi_ui2d>
 800d586:	a308      	add	r3, pc, #32	; (adr r3, 800d5a8 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_+0x48>)
 800d588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58c:	f7f3 f834 	bl	80005f8 <__aeabi_dmul>
 800d590:	4602      	mov	r2, r0
 800d592:	460b      	mov	r3, r1
 800d594:	ec43 2b17 	vmov	d7, r2, r3
            }
 800d598:	eeb0 0a47 	vmov.f32	s0, s14
 800d59c:	eef0 0a67 	vmov.f32	s1, s15
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}
 800d5a6:	bf00      	nop
 800d5a8:	d2f1a9fc 	.word	0xd2f1a9fc
 800d5ac:	3f50624d 	.word	0x3f50624d

0800d5b0 <_ZN3can7signals18SensorF_AccFront_X3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800d5b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d5b4:	b086      	sub	sp, #24
 800d5b6:	af00      	add	r7, sp, #0
 800d5b8:	60f8      	str	r0, [r7, #12]
 800d5ba:	60b9      	str	r1, [r7, #8]
 800d5bc:	607a      	str	r2, [r7, #4]
 800d5be:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 800d5c2:	edd7 7a00 	vldr	s15, [r7]
 800d5c6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800d640 <_ZN3can7signals18SensorF_AccFront_X3setERyS2_Rhf+0x90>
 800d5ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d2:	dd01      	ble.n	800d5d8 <_ZN3can7signals18SensorF_AccFront_X3setERyS2_Rhf+0x28>
                    value = max;
 800d5d4:	4b1b      	ldr	r3, [pc, #108]	; (800d644 <_ZN3can7signals18SensorF_AccFront_X3setERyS2_Rhf+0x94>)
 800d5d6:	603b      	str	r3, [r7, #0]
                if (value < min) {
 800d5d8:	edd7 7a00 	vldr	s15, [r7]
 800d5dc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d648 <_ZN3can7signals18SensorF_AccFront_X3setERyS2_Rhf+0x98>
 800d5e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5e8:	d501      	bpl.n	800d5ee <_ZN3can7signals18SensorF_AccFront_X3setERyS2_Rhf+0x3e>
                    value = min;
 800d5ea:	4b18      	ldr	r3, [pc, #96]	; (800d64c <_ZN3can7signals18SensorF_AccFront_X3setERyS2_Rhf+0x9c>)
 800d5ec:	603b      	str	r3, [r7, #0]
                int16_t rawValue = static_cast<int16_t>(STD_ROUND((value) / (0.00125f)));
 800d5ee:	edd7 7a00 	vldr	s15, [r7]
 800d5f2:	eddf 6a17 	vldr	s13, [pc, #92]	; 800d650 <_ZN3can7signals18SensorF_AccFront_X3setERyS2_Rhf+0xa0>
 800d5f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d5fa:	eeb0 0a47 	vmov.f32	s0, s14
 800d5fe:	f7f5 fb4a 	bl	8002c96 <_ZSt5roundf>
 800d602:	eef0 7a40 	vmov.f32	s15, s0
 800d606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d60a:	ee17 3a90 	vmov	r3, s15
 800d60e:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFFull;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d616:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 800d61a:	17c8      	asrs	r0, r1, #31
 800d61c:	468a      	mov	sl, r1
 800d61e:	4683      	mov	fp, r0
 800d620:	fa1f f48a 	uxth.w	r4, sl
 800d624:	2500      	movs	r5, #0
 800d626:	ea42 0804 	orr.w	r8, r2, r4
 800d62a:	ea43 0905 	orr.w	r9, r3, r5
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800d634:	bf00      	nop
 800d636:	3718      	adds	r7, #24
 800d638:	46bd      	mov	sp, r7
 800d63a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d63e:	bf00      	nop
 800d640:	4223d5c3 	.word	0x4223d5c3
 800d644:	4223d5c3 	.word	0x4223d5c3
 800d648:	c223d70a 	.word	0xc223d70a
 800d64c:	c223d70a 	.word	0xc223d70a
 800d650:	3aa3d70a 	.word	0x3aa3d70a

0800d654 <_ZN3can7signals18SensorF_AccFront_Y3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800d654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d658:	b088      	sub	sp, #32
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	6178      	str	r0, [r7, #20]
 800d65e:	6139      	str	r1, [r7, #16]
 800d660:	60fa      	str	r2, [r7, #12]
 800d662:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800d666:	edd7 7a02 	vldr	s15, [r7, #8]
 800d66a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800d6ec <_ZN3can7signals18SensorF_AccFront_Y3setERyS2_Rhf+0x98>
 800d66e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d676:	dd01      	ble.n	800d67c <_ZN3can7signals18SensorF_AccFront_Y3setERyS2_Rhf+0x28>
                    value = max;
 800d678:	4b1d      	ldr	r3, [pc, #116]	; (800d6f0 <_ZN3can7signals18SensorF_AccFront_Y3setERyS2_Rhf+0x9c>)
 800d67a:	60bb      	str	r3, [r7, #8]
                if (value < min) {
 800d67c:	edd7 7a02 	vldr	s15, [r7, #8]
 800d680:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d6f4 <_ZN3can7signals18SensorF_AccFront_Y3setERyS2_Rhf+0xa0>
 800d684:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d68c:	d501      	bpl.n	800d692 <_ZN3can7signals18SensorF_AccFront_Y3setERyS2_Rhf+0x3e>
                    value = min;
 800d68e:	4b1a      	ldr	r3, [pc, #104]	; (800d6f8 <_ZN3can7signals18SensorF_AccFront_Y3setERyS2_Rhf+0xa4>)
 800d690:	60bb      	str	r3, [r7, #8]
                int16_t rawValue = static_cast<int16_t>(STD_ROUND((value) / (0.00125f)));
 800d692:	edd7 7a02 	vldr	s15, [r7, #8]
 800d696:	eddf 6a19 	vldr	s13, [pc, #100]	; 800d6fc <_ZN3can7signals18SensorF_AccFront_Y3setERyS2_Rhf+0xa8>
 800d69a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d69e:	eeb0 0a47 	vmov.f32	s0, s14
 800d6a2:	f7f5 faf8 	bl	8002c96 <_ZSt5roundf>
 800d6a6:	eef0 7a40 	vmov.f32	s15, s0
 800d6aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d6ae:	ee17 3a90 	vmov	r3, s15
 800d6b2:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ba:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 800d6be:	17c8      	asrs	r0, r1, #31
 800d6c0:	4688      	mov	r8, r1
 800d6c2:	4681      	mov	r9, r0
 800d6c4:	ea4f 4128 	mov.w	r1, r8, asr #16
 800d6c8:	6079      	str	r1, [r7, #4]
 800d6ca:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800d6ce:	6039      	str	r1, [r7, #0]
 800d6d0:	683c      	ldr	r4, [r7, #0]
 800d6d2:	2500      	movs	r5, #0
 800d6d4:	ea42 0a04 	orr.w	sl, r2, r4
 800d6d8:	ea43 0b05 	orr.w	fp, r3, r5
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800d6e2:	bf00      	nop
 800d6e4:	3720      	adds	r7, #32
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d6ec:	4223d5c3 	.word	0x4223d5c3
 800d6f0:	4223d5c3 	.word	0x4223d5c3
 800d6f4:	c223d70a 	.word	0xc223d70a
 800d6f8:	c223d70a 	.word	0xc223d70a
 800d6fc:	3aa3d70a 	.word	0x3aa3d70a

0800d700 <_ZN3can7signals18SensorF_AccFront_Z3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800d700:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d704:	b086      	sub	sp, #24
 800d706:	af00      	add	r7, sp, #0
 800d708:	60f8      	str	r0, [r7, #12]
 800d70a:	60b9      	str	r1, [r7, #8]
 800d70c:	607a      	str	r2, [r7, #4]
 800d70e:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 800d712:	edd7 7a00 	vldr	s15, [r7]
 800d716:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800d798 <_ZN3can7signals18SensorF_AccFront_Z3setERyS2_Rhf+0x98>
 800d71a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d71e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d722:	dd01      	ble.n	800d728 <_ZN3can7signals18SensorF_AccFront_Z3setERyS2_Rhf+0x28>
                    value = max;
 800d724:	4b1d      	ldr	r3, [pc, #116]	; (800d79c <_ZN3can7signals18SensorF_AccFront_Z3setERyS2_Rhf+0x9c>)
 800d726:	603b      	str	r3, [r7, #0]
                if (value < min) {
 800d728:	edd7 7a00 	vldr	s15, [r7]
 800d72c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d7a0 <_ZN3can7signals18SensorF_AccFront_Z3setERyS2_Rhf+0xa0>
 800d730:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d738:	d501      	bpl.n	800d73e <_ZN3can7signals18SensorF_AccFront_Z3setERyS2_Rhf+0x3e>
                    value = min;
 800d73a:	4b1a      	ldr	r3, [pc, #104]	; (800d7a4 <_ZN3can7signals18SensorF_AccFront_Z3setERyS2_Rhf+0xa4>)
 800d73c:	603b      	str	r3, [r7, #0]
                int16_t rawValue = static_cast<int16_t>(STD_ROUND((value) / (0.00125f)));
 800d73e:	edd7 7a00 	vldr	s15, [r7]
 800d742:	eddf 6a19 	vldr	s13, [pc, #100]	; 800d7a8 <_ZN3can7signals18SensorF_AccFront_Z3setERyS2_Rhf+0xa8>
 800d746:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d74a:	eeb0 0a47 	vmov.f32	s0, s14
 800d74e:	f7f5 faa2 	bl	8002c96 <_ZSt5roundf>
 800d752:	eef0 7a40 	vmov.f32	s15, s0
 800d756:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d75a:	ee17 3a90 	vmov	r3, s15
 800d75e:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 32) & 0xFFFF00000000ull;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d766:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d76a:	17da      	asrs	r2, r3, #31
 800d76c:	469a      	mov	sl, r3
 800d76e:	4693      	mov	fp, r2
 800d770:	f04f 0200 	mov.w	r2, #0
 800d774:	f04f 0300 	mov.w	r3, #0
 800d778:	4653      	mov	r3, sl
 800d77a:	2200      	movs	r2, #0
 800d77c:	2400      	movs	r4, #0
 800d77e:	b29d      	uxth	r5, r3
 800d780:	ea40 0804 	orr.w	r8, r0, r4
 800d784:	ea41 0905 	orr.w	r9, r1, r5
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800d78e:	bf00      	nop
 800d790:	3718      	adds	r7, #24
 800d792:	46bd      	mov	sp, r7
 800d794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d798:	4223d5c3 	.word	0x4223d5c3
 800d79c:	4223d5c3 	.word	0x4223d5c3
 800d7a0:	c223d70a 	.word	0xc223d70a
 800d7a4:	c223d70a 	.word	0xc223d70a
 800d7a8:	3aa3d70a 	.word	0x3aa3d70a

0800d7ac <_ZN3can7signals19SensorF_GyroFront_Z3setERyS2_Rhf>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800d7ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d7b0:	b086      	sub	sp, #24
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	60f8      	str	r0, [r7, #12]
 800d7b6:	60b9      	str	r1, [r7, #8]
 800d7b8:	607a      	str	r2, [r7, #4]
 800d7ba:	ed87 0a00 	vstr	s0, [r7]
                if (value > max) {
 800d7be:	edd7 7a00 	vldr	s15, [r7]
 800d7c2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800d844 <_ZN3can7signals19SensorF_GyroFront_Z3setERyS2_Rhf+0x98>
 800d7c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ce:	dd01      	ble.n	800d7d4 <_ZN3can7signals19SensorF_GyroFront_Z3setERyS2_Rhf+0x28>
                    value = max;
 800d7d0:	4b1d      	ldr	r3, [pc, #116]	; (800d848 <_ZN3can7signals19SensorF_GyroFront_Z3setERyS2_Rhf+0x9c>)
 800d7d2:	603b      	str	r3, [r7, #0]
                if (value < min) {
 800d7d4:	edd7 7a00 	vldr	s15, [r7]
 800d7d8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d84c <_ZN3can7signals19SensorF_GyroFront_Z3setERyS2_Rhf+0xa0>
 800d7dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7e4:	d501      	bpl.n	800d7ea <_ZN3can7signals19SensorF_GyroFront_Z3setERyS2_Rhf+0x3e>
                    value = min;
 800d7e6:	4b1a      	ldr	r3, [pc, #104]	; (800d850 <_ZN3can7signals19SensorF_GyroFront_Z3setERyS2_Rhf+0xa4>)
 800d7e8:	603b      	str	r3, [r7, #0]
                int16_t rawValue = static_cast<int16_t>(STD_ROUND((value) / (0.017f)));
 800d7ea:	edd7 7a00 	vldr	s15, [r7]
 800d7ee:	eddf 6a19 	vldr	s13, [pc, #100]	; 800d854 <_ZN3can7signals19SensorF_GyroFront_Z3setERyS2_Rhf+0xa8>
 800d7f2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800d7f6:	eeb0 0a47 	vmov.f32	s0, s14
 800d7fa:	f7f5 fa4c 	bl	8002c96 <_ZSt5roundf>
 800d7fe:	eef0 7a40 	vmov.f32	s15, s0
 800d802:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d806:	ee17 3a90 	vmov	r3, s15
 800d80a:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFFF000000000000ull;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d812:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d816:	17da      	asrs	r2, r3, #31
 800d818:	4698      	mov	r8, r3
 800d81a:	4691      	mov	r9, r2
 800d81c:	f04f 0200 	mov.w	r2, #0
 800d820:	f04f 0300 	mov.w	r3, #0
 800d824:	ea4f 4308 	mov.w	r3, r8, lsl #16
 800d828:	2200      	movs	r2, #0
 800d82a:	ea40 0402 	orr.w	r4, r0, r2
 800d82e:	ea41 0503 	orr.w	r5, r1, r3
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	e9c3 4500 	strd	r4, r5, [r3]
            }
 800d838:	bf00      	nop
 800d83a:	3718      	adds	r7, #24
 800d83c:	46bd      	mov	sp, r7
 800d83e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d842:	bf00      	nop
 800d844:	440b427f 	.word	0x440b427f
 800d848:	440b427f 	.word	0x440b427f
 800d84c:	c40b4396 	.word	0xc40b4396
 800d850:	c40b4396 	.word	0xc40b4396
 800d854:	3c8b4396 	.word	0x3c8b4396

0800d858 <_ZN14PressureSensorC1ERK14PressureConfig>:
#include "peripheral_config.hpp"
#include "AdcChannelController.hpp"

class PressureSensor {
public:
	explicit PressureSensor(const PressureConfig& config)
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
		: m_adcChannel(config.m_adc.m_module, config.m_adc.m_rank){
 800d862:	6878      	ldr	r0, [r7, #4]
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	6819      	ldr	r1, [r3, #0]
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	889b      	ldrh	r3, [r3, #4]
 800d86c:	461a      	mov	r2, r3
 800d86e:	f7fd f974 	bl	800ab5a <_ZN20AdcChannelControllerC1E9AdcModulej>

	}
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4618      	mov	r0, r3
 800d876:	3708      	adds	r7, #8
 800d878:	46bd      	mov	sp, r7
 800d87a:	bd80      	pop	{r7, pc}
 800d87c:	0000      	movs	r0, r0
	...

0800d880 <_ZN14PressureSensor11getPressureEv>:

	[[nodiscard]] inline float getPressure(){
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
		//TODO do proper convertion.
		return m_adcChannel.get() / 4095.0;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fd f97f 	bl	800ab8e <_ZN20AdcChannelController3getEv>
 800d890:	4603      	mov	r3, r0
 800d892:	4618      	mov	r0, r3
 800d894:	f7f2 fe46 	bl	8000524 <__aeabi_i2d>
 800d898:	a309      	add	r3, pc, #36	; (adr r3, 800d8c0 <_ZN14PressureSensor11getPressureEv+0x40>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	f7f2 ffd5 	bl	800084c <__aeabi_ddiv>
 800d8a2:	4602      	mov	r2, r0
 800d8a4:	460b      	mov	r3, r1
 800d8a6:	4610      	mov	r0, r2
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	f7f3 f99d 	bl	8000be8 <__aeabi_d2f>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	ee07 3a90 	vmov	s15, r3
	}
 800d8b4:	eeb0 0a67 	vmov.f32	s0, s15
 800d8b8:	3708      	adds	r7, #8
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	00000000 	.word	0x00000000
 800d8c4:	40affe00 	.word	0x40affe00

0800d8c8 <_ZN9ImuMaster9getAccelXEv>:

	/**
	 * Get acceleration in X direction of the pod in m/s^2.
	 * @return Acceleration in X direction of the pod in m/s^2.
	 */
	inline float getAccelX() { return m_accelZ; }
 800d8c8:	b480      	push	{r7}
 800d8ca:	b083      	sub	sp, #12
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d8d6:	ee07 3a90 	vmov	s15, r3
 800d8da:	eeb0 0a67 	vmov.f32	s0, s15
 800d8de:	370c      	adds	r7, #12
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <_ZN9ImuMaster9getAccelYEv>:

	/**
	 * Get acceleration in Y direction of the pod in m/s^2.
	 * @return Acceleration in Y direction of the pod in m/s^2.
	 */
	inline float getAccelY() { return -m_accelY; }
 800d8e8:	b480      	push	{r7}
 800d8ea:	b083      	sub	sp, #12
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800d8f6:	eef1 7a67 	vneg.f32	s15, s15
 800d8fa:	eeb0 0a67 	vmov.f32	s0, s15
 800d8fe:	370c      	adds	r7, #12
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <_ZN9ImuMaster9getAccelZEv>:

	/**
	 * Get acceleration in Z direction of the pod in m/s^2.
	 * @return Acceleration in Z direction of the pod in m/s^2.
	 */
	inline float getAccelZ() { return -m_accelX; }
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800d916:	eef1 7a67 	vneg.f32	s15, s15
 800d91a:	eeb0 0a67 	vmov.f32	s0, s15
 800d91e:	370c      	adds	r7, #12
 800d920:	46bd      	mov	sp, r7
 800d922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d926:	4770      	bx	lr

0800d928 <_ZN9ImuMaster8getGyroXEv>:

	/**
	 * Get rotation around X axis of the pod in °/s.
	 * @return Rotation around X axis in °/s.
	 */
	inline float getGyroX() { return m_gyroX; }
 800d928:	b480      	push	{r7}
 800d92a:	b083      	sub	sp, #12
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800d936:	ee07 3a90 	vmov	s15, r3
 800d93a:	eeb0 0a67 	vmov.f32	s0, s15
 800d93e:	370c      	adds	r7, #12
 800d940:	46bd      	mov	sp, r7
 800d942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d946:	4770      	bx	lr

0800d948 <_ZN9ImuMaster8getGyroYEv>:

	/**
	 * Get rotation around Y axis of the pod in °/s.
	 * @return Rotation around Y axis in °/s.
	 */
	inline float getGyroY() { return m_gyroZ; }
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800d956:	ee07 3a90 	vmov	s15, r3
 800d95a:	eeb0 0a67 	vmov.f32	s0, s15
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <_ZN9ImuMaster8getGyroZEv>:

	/**
	 * Get rotation around Z axis of the pod in °/s.
	 * @return Rotation around Z axis in °/s.
	 */
	inline float getGyroZ() { return -m_gyroY; }
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800d976:	eef1 7a67 	vneg.f32	s15, s15
 800d97a:	eeb0 0a67 	vmov.f32	s0, s15
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr

0800d988 <_ZN14FiducialSensor17estimatedPositionEv>:

	void extiCallback(bool v);

	[[nodiscard]] float estimateVelocityMPS();

	[[nodiscard]] float estimatedPosition(){
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
		return (m_count * m_distanceBetweenInterrupts) / 1000.0;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	69db      	ldr	r3, [r3, #28]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800d998:	fb02 f303 	mul.w	r3, r2, r3
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7f2 fdb1 	bl	8000504 <__aeabi_ui2d>
 800d9a2:	f04f 0200 	mov.w	r2, #0
 800d9a6:	4b08      	ldr	r3, [pc, #32]	; (800d9c8 <_ZN14FiducialSensor17estimatedPositionEv+0x40>)
 800d9a8:	f7f2 ff50 	bl	800084c <__aeabi_ddiv>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	4610      	mov	r0, r2
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	f7f3 f918 	bl	8000be8 <__aeabi_d2f>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	ee07 3a90 	vmov	s15, r3
	}
 800d9be:	eeb0 0a67 	vmov.f32	s0, s15
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	408f4000 	.word	0x408f4000

0800d9cc <_ZN14FiducialSensor8getCountEv>:

	[[nodiscard]] inline unsigned int getCount() {
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
		return m_count;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	69db      	ldr	r3, [r3, #28]
	}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	370c      	adds	r7, #12
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <_ZN14FiducialSensor12getDeltaTimeEv>:

	[[nodiscard]] inline uint32_t getDeltaTime(){
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
		return m_deltaTime;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	370c      	adds	r7, #12
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <_ZN19SensorValueRegistry11getInstanceEv>:
#include <cinttypes>
#include "canzero.hpp"

class SensorValueRegistry {
public:
	static SensorValueRegistry& getInstance() {
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	af00      	add	r7, sp, #0
		static SensorValueRegistry instance;
 800da00:	4b10      	ldr	r3, [pc, #64]	; (800da44 <_ZN19SensorValueRegistry11getInstanceEv+0x48>)
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	f3bf 8f5b 	dmb	ish
 800da08:	b2db      	uxtb	r3, r3
 800da0a:	f003 0301 	and.w	r3, r3, #1
 800da0e:	2b00      	cmp	r3, #0
 800da10:	bf0c      	ite	eq
 800da12:	2301      	moveq	r3, #1
 800da14:	2300      	movne	r3, #0
 800da16:	b2db      	uxtb	r3, r3
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d010      	beq.n	800da3e <_ZN19SensorValueRegistry11getInstanceEv+0x42>
 800da1c:	4809      	ldr	r0, [pc, #36]	; (800da44 <_ZN19SensorValueRegistry11getInstanceEv+0x48>)
 800da1e:	f00d fe89 	bl	801b734 <__cxa_guard_acquire>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	bf14      	ite	ne
 800da28:	2301      	movne	r3, #1
 800da2a:	2300      	moveq	r3, #0
 800da2c:	b2db      	uxtb	r3, r3
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d005      	beq.n	800da3e <_ZN19SensorValueRegistry11getInstanceEv+0x42>
 800da32:	4805      	ldr	r0, [pc, #20]	; (800da48 <_ZN19SensorValueRegistry11getInstanceEv+0x4c>)
 800da34:	f000 f92a 	bl	800dc8c <_ZN19SensorValueRegistryC1Ev>
 800da38:	4802      	ldr	r0, [pc, #8]	; (800da44 <_ZN19SensorValueRegistry11getInstanceEv+0x48>)
 800da3a:	f00d fe87 	bl	801b74c <__cxa_guard_release>
		return instance;
 800da3e:	4b02      	ldr	r3, [pc, #8]	; (800da48 <_ZN19SensorValueRegistry11getInstanceEv+0x4c>)
	}
 800da40:	4618      	mov	r0, r3
 800da42:	bd80      	pop	{r7, pc}
 800da44:	20000e34 	.word	0x20000e34
 800da48:	20000dec 	.word	0x20000dec

0800da4c <_ZN3can7MessageINS_8messages19SensorF_TX_AccFrontEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b082      	sub	sp, #8
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	6878      	ldr	r0, [r7, #4]
 800da56:	2300      	movs	r3, #0
 800da58:	2208      	movs	r2, #8
 800da5a:	f240 41c1 	movw	r1, #1217	; 0x4c1
 800da5e:	f7f3 fa95 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	4618      	mov	r0, r3
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <_ZN19SensorValueRegistry9updateCANEv>:

	void updateCAN(){
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b088      	sub	sp, #32
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
		can::Message<can::messages::SensorF_TX_AccFront> imuAccelMsg;
 800da74:	f107 0308 	add.w	r3, r7, #8
 800da78:	4618      	mov	r0, r3
 800da7a:	f7ff ffe7 	bl	800da4c <_ZN3can7MessageINS_8messages19SensorF_TX_AccFrontEEC1Ev>
		imuAccelMsg.set<can::signals::SensorF_AccFront_X>(m_accelX);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	edd3 7a03 	vldr	s15, [r3, #12]
 800da84:	f107 0308 	add.w	r3, r7, #8
 800da88:	eeb0 0a67 	vmov.f32	s0, s15
 800da8c:	4618      	mov	r0, r3
 800da8e:	f000 fb39 	bl	800e104 <_ZN3can7MessageINS_8messages19SensorF_TX_AccFrontEE3setINS_7signals18SensorF_AccFront_XEEEvNT_8dataTypeE>
		imuAccelMsg.set<can::signals::SensorF_AccFront_Y>(m_accelY);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	edd3 7a04 	vldr	s15, [r3, #16]
 800da98:	f107 0308 	add.w	r3, r7, #8
 800da9c:	eeb0 0a67 	vmov.f32	s0, s15
 800daa0:	4618      	mov	r0, r3
 800daa2:	f000 fb46 	bl	800e132 <_ZN3can7MessageINS_8messages19SensorF_TX_AccFrontEE3setINS_7signals18SensorF_AccFront_YEEEvNT_8dataTypeE>
		imuAccelMsg.set<can::signals::SensorF_AccFront_Z>(m_accelZ);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	edd3 7a05 	vldr	s15, [r3, #20]
 800daac:	f107 0308 	add.w	r3, r7, #8
 800dab0:	eeb0 0a67 	vmov.f32	s0, s15
 800dab4:	4618      	mov	r0, r3
 800dab6:	f000 fb53 	bl	800e160 <_ZN3can7MessageINS_8messages19SensorF_TX_AccFrontEE3setINS_7signals18SensorF_AccFront_ZEEEvNT_8dataTypeE>
		imuAccelMsg.set<can::signals::SensorF_GyroFront_Z>(m_gyroZ);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	edd3 7a02 	vldr	s15, [r3, #8]
 800dac0:	f107 0308 	add.w	r3, r7, #8
 800dac4:	eeb0 0a67 	vmov.f32	s0, s15
 800dac8:	4618      	mov	r0, r3
 800daca:	f000 fb60 	bl	800e18e <_ZN3can7MessageINS_8messages19SensorF_TX_AccFrontEE3setINS_7signals19SensorF_GyroFront_ZEEEvNT_8dataTypeE>
		imuAccelMsg.send();
 800dace:	f107 0308 	add.w	r3, r7, #8
 800dad2:	2100      	movs	r1, #0
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7f3 fba3 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
 800dada:	bf00      	nop
 800dadc:	3720      	adds	r7, #32
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}

0800dae2 <_ZN19SensorValueRegistry7setGyroEfff>:

	void setGyro(float x, float y, float z){
 800dae2:	b480      	push	{r7}
 800dae4:	b085      	sub	sp, #20
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	60f8      	str	r0, [r7, #12]
 800daea:	ed87 0a02 	vstr	s0, [r7, #8]
 800daee:	edc7 0a01 	vstr	s1, [r7, #4]
 800daf2:	ed87 1a00 	vstr	s2, [r7]
		m_gyroX = x;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	601a      	str	r2, [r3, #0]
		m_gyroY = y;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	605a      	str	r2, [r3, #4]
		m_gyroZ = z;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	683a      	ldr	r2, [r7, #0]
 800db06:	609a      	str	r2, [r3, #8]
	}
 800db08:	bf00      	nop
 800db0a:	3714      	adds	r7, #20
 800db0c:	46bd      	mov	sp, r7
 800db0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db12:	4770      	bx	lr

0800db14 <_ZN19SensorValueRegistry8setAccelEfff>:

	void setAccel(float x, float y, float z){
 800db14:	b480      	push	{r7}
 800db16:	b085      	sub	sp, #20
 800db18:	af00      	add	r7, sp, #0
 800db1a:	60f8      	str	r0, [r7, #12]
 800db1c:	ed87 0a02 	vstr	s0, [r7, #8]
 800db20:	edc7 0a01 	vstr	s1, [r7, #4]
 800db24:	ed87 1a00 	vstr	s2, [r7]
		m_accelX = x;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	68ba      	ldr	r2, [r7, #8]
 800db2c:	60da      	str	r2, [r3, #12]
		m_accelY = y;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	687a      	ldr	r2, [r7, #4]
 800db32:	611a      	str	r2, [r3, #16]
		m_accelZ = z;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	683a      	ldr	r2, [r7, #0]
 800db38:	615a      	str	r2, [r3, #20]
	}
 800db3a:	bf00      	nop
 800db3c:	3714      	adds	r7, #20
 800db3e:	46bd      	mov	sp, r7
 800db40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db44:	4770      	bx	lr

0800db46 <_ZN19SensorValueRegistry29setCoolingReservoirTemperaturEf>:

	void setCoolingReservoirTemperatur(float temperaturC){
 800db46:	b480      	push	{r7}
 800db48:	b083      	sub	sp, #12
 800db4a:	af00      	add	r7, sp, #0
 800db4c:	6078      	str	r0, [r7, #4]
 800db4e:	ed87 0a00 	vstr	s0, [r7]
		m_coolingReservoirTemperatur = temperaturC;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	683a      	ldr	r2, [r7, #0]
 800db56:	619a      	str	r2, [r3, #24]
	}
 800db58:	bf00      	nop
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <_ZN19SensorValueRegistry18setCoolingPressureEf>:

	void setCoolingPressure(float pressure){
 800db64:	b480      	push	{r7}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	ed87 0a00 	vstr	s0, [r7]
		m_coolingPressure = pressure;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	683a      	ldr	r2, [r7, #0]
 800db74:	61da      	str	r2, [r3, #28]
	}
 800db76:	bf00      	nop
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr

0800db82 <_ZN19SensorValueRegistry21setFiducialLeftValuesEjmff>:

	void setFiducialLeftValues(unsigned int counter, uint32_t dt, float vel, float pos){
 800db82:	b480      	push	{r7}
 800db84:	b087      	sub	sp, #28
 800db86:	af00      	add	r7, sp, #0
 800db88:	6178      	str	r0, [r7, #20]
 800db8a:	6139      	str	r1, [r7, #16]
 800db8c:	60fa      	str	r2, [r7, #12]
 800db8e:	ed87 0a02 	vstr	s0, [r7, #8]
 800db92:	edc7 0a01 	vstr	s1, [r7, #4]
		m_fiducialLeftCounter = counter;
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	693a      	ldr	r2, [r7, #16]
 800db9a:	621a      	str	r2, [r3, #32]
		m_fiducialLeftDeltaTime = dt;
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	625a      	str	r2, [r3, #36]	; 0x24
		m_fiducialLeftVelocity = vel;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	68ba      	ldr	r2, [r7, #8]
 800dba6:	629a      	str	r2, [r3, #40]	; 0x28
		m_fiducialLeftPos = pos;
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	687a      	ldr	r2, [r7, #4]
 800dbac:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800dbae:	bf00      	nop
 800dbb0:	371c      	adds	r7, #28
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb8:	4770      	bx	lr

0800dbba <_ZN19SensorValueRegistry22setFiducialRightValuesEjmff>:

	void setFiducialRightValues(unsigned int counter, uint32_t dt, float vel, float pos){
 800dbba:	b480      	push	{r7}
 800dbbc:	b087      	sub	sp, #28
 800dbbe:	af00      	add	r7, sp, #0
 800dbc0:	6178      	str	r0, [r7, #20]
 800dbc2:	6139      	str	r1, [r7, #16]
 800dbc4:	60fa      	str	r2, [r7, #12]
 800dbc6:	ed87 0a02 	vstr	s0, [r7, #8]
 800dbca:	edc7 0a01 	vstr	s1, [r7, #4]
		m_fiducialRightCounter = counter;
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	693a      	ldr	r2, [r7, #16]
 800dbd2:	631a      	str	r2, [r3, #48]	; 0x30
		m_fiducialRightDeltaTime = dt;
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	635a      	str	r2, [r3, #52]	; 0x34
		m_fiducialRightVelocity = vel;
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	639a      	str	r2, [r3, #56]	; 0x38
		m_fiducialRightPos = pos;
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	63da      	str	r2, [r3, #60]	; 0x3c
	}
 800dbe6:	bf00      	nop
 800dbe8:	371c      	adds	r7, #28
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr

0800dbf2 <_ZN19SensorValueRegistry16setKistlerValuesEff>:

	void setKistlerValues(float vel, float pos){
 800dbf2:	b480      	push	{r7}
 800dbf4:	b085      	sub	sp, #20
 800dbf6:	af00      	add	r7, sp, #0
 800dbf8:	60f8      	str	r0, [r7, #12]
 800dbfa:	ed87 0a02 	vstr	s0, [r7, #8]
 800dbfe:	edc7 0a01 	vstr	s1, [r7, #4]
		m_kistlerVel = vel;
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	68ba      	ldr	r2, [r7, #8]
 800dc06:	641a      	str	r2, [r3, #64]	; 0x40
		m_kistlerPos = pos;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	645a      	str	r2, [r3, #68]	; 0x44
	}
 800dc0e:	bf00      	nop
 800dc10:	3714      	adds	r7, #20
 800dc12:	46bd      	mov	sp, r7
 800dc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc18:	4770      	bx	lr

0800dc1a <_ZN19SensorValueRegistry18getKistlerPositionEv>:

	[[nodiscard]] inline float getKistlerVelocity(){
		return m_kistlerVel;
	}

	[[nodiscard]] inline float getKistlerPosition(){
 800dc1a:	b480      	push	{r7}
 800dc1c:	b083      	sub	sp, #12
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
		return m_kistlerPos;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc26:	ee07 3a90 	vmov	s15, r3
	}
 800dc2a:	eeb0 0a67 	vmov.f32	s0, s15
 800dc2e:	370c      	adds	r7, #12
 800dc30:	46bd      	mov	sp, r7
 800dc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc36:	4770      	bx	lr

0800dc38 <_ZN19SensorValueRegistry20getFiducialLeftCountEv>:

	[[nodiscard]] inline float getImuAccelZ(){
		return m_accelZ;
	}

	[[nodiscard]] inline unsigned int getFiducialLeftCount(){
 800dc38:	b480      	push	{r7}
 800dc3a:	b083      	sub	sp, #12
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
		return m_fiducialLeftCounter;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	6a1b      	ldr	r3, [r3, #32]
	}
 800dc44:	4618      	mov	r0, r3
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr

0800dc50 <_ZN19SensorValueRegistry23getFiducialLeftPositionEv>:

	[[nodiscard]] inline float getFiducialLeftVelocity(){
		return m_fiducialLeftVelocity;
	}

	[[nodiscard]] inline float getFiducialLeftPosition(){
 800dc50:	b480      	push	{r7}
 800dc52:	b083      	sub	sp, #12
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
		return m_fiducialLeftPos;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5c:	ee07 3a90 	vmov	s15, r3
	}
 800dc60:	eeb0 0a67 	vmov.f32	s0, s15
 800dc64:	370c      	adds	r7, #12
 800dc66:	46bd      	mov	sp, r7
 800dc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6c:	4770      	bx	lr

0800dc6e <_ZN19SensorValueRegistry24getFiducialRightPositionEv>:

	[[nodiscard]] inline float getFiducialRightVelocity(){
		return m_fiducialRightVelocity;
	}

	[[nodiscard]] inline float getFiducialRightPosition(){
 800dc6e:	b480      	push	{r7}
 800dc70:	b083      	sub	sp, #12
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
		return m_fiducialRightPos;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc7a:	ee07 3a90 	vmov	s15, r3
	}
 800dc7e:	eeb0 0a67 	vmov.f32	s0, s15
 800dc82:	370c      	adds	r7, #12
 800dc84:	46bd      	mov	sp, r7
 800dc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc8a:	4770      	bx	lr

0800dc8c <_ZN19SensorValueRegistryC1Ev>:

private:
	explicit SensorValueRegistry(){
 800dc8c:	b480      	push	{r7}
 800dc8e:	b083      	sub	sp, #12
 800dc90:	af00      	add	r7, sp, #0
 800dc92:	6078      	str	r0, [r7, #4]

	}
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4618      	mov	r0, r3
 800dc98:	370c      	adds	r7, #12
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr

0800dca2 <_ZZN17KistlerControllerC4EvENKUlR9RxMessageE_clES1_>:
#include "canzero.hpp"

class KistlerController {
public:
	explicit KistlerController(){
		m_receiverId = can::registerMessageReceiver<can::messages::OpticalSensor_TX_MainData>([this](RxMessage& msg){
 800dca2:	b580      	push	{r7, lr}
 800dca4:	b082      	sub	sp, #8
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
 800dcaa:	6039      	str	r1, [r7, #0]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	681b      	ldr	r3, [r3, #0]
			this->callback(msg);
 800dcb0:	6839      	ldr	r1, [r7, #0]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f000 f875 	bl	800dda2 <_ZN17KistlerController8callbackER9RxMessage>
		});
 800dcb8:	bf00      	nop
 800dcba:	3708      	adds	r7, #8
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <_ZN17KistlerControllerC1Ev>:
	explicit KistlerController(){
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b086      	sub	sp, #24
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	4a0f      	ldr	r2, [pc, #60]	; (800dd08 <_ZN17KistlerControllerC1Ev+0x48>)
 800dccc:	605a      	str	r2, [r3, #4]
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	4a0d      	ldr	r2, [pc, #52]	; (800dd08 <_ZN17KistlerControllerC1Ev+0x48>)
 800dcd2:	609a      	str	r2, [r3, #8]
		m_receiverId = can::registerMessageReceiver<can::messages::OpticalSensor_TX_MainData>([this](RxMessage& msg){
 800dcd4:	687a      	ldr	r2, [r7, #4]
 800dcd6:	f107 0308 	add.w	r3, r7, #8
 800dcda:	4611      	mov	r1, r2
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 fa6d 	bl	800e1bc <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_>
 800dce2:	f107 0308 	add.w	r3, r7, #8
 800dce6:	4618      	mov	r0, r3
 800dce8:	f000 fa92 	bl	800e210 <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE>
 800dcec:	4602      	mov	r2, r0
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	601a      	str	r2, [r3, #0]
 800dcf2:	f107 0308 	add.w	r3, r7, #8
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7f3 fbcc 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3718      	adds	r7, #24
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	c2c80000 	.word	0xc2c80000

0800dd0c <_ZN17KistlerController11getVelocityEv>:
	KistlerController(KistlerController&) = delete;
	KistlerController(KistlerController&&) = delete;
	KistlerController& operator=(KistlerController&) = delete;
	KistlerController& operator=(KistlerController&&) = delete;

	[[nodiscard]] inline float getVelocity(){
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
		return m_velocity;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	ee07 3a90 	vmov	s15, r3
	}
 800dd1c:	eeb0 0a67 	vmov.f32	s0, s15
 800dd20:	370c      	adds	r7, #12
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr

0800dd2a <_ZN17KistlerController11getPositionEv>:

	[[nodiscard]] inline float getPosition(){
 800dd2a:	b480      	push	{r7}
 800dd2c:	b083      	sub	sp, #12
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
		return m_position;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	689b      	ldr	r3, [r3, #8]
 800dd36:	ee07 3a90 	vmov	s15, r3
	}
 800dd3a:	eeb0 0a67 	vmov.f32	s0, s15
 800dd3e:	370c      	adds	r7, #12
 800dd40:	46bd      	mov	sp, r7
 800dd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd46:	4770      	bx	lr

0800dd48 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b086      	sub	sp, #24
 800dd4c:	af02      	add	r7, sp, #8
 800dd4e:	60f8      	str	r0, [r7, #12]
 800dd50:	60b9      	str	r1, [r7, #8]
 800dd52:	607a      	str	r2, [r7, #4]
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	2208      	movs	r2, #8
 800dd5e:	4907      	ldr	r1, [pc, #28]	; (800dd7c <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x34>)
 800dd60:	f7f4 ffa9 	bl	8002cb6 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.ExtId != MESSAGE_T::id) {
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	685b      	ldr	r3, [r3, #4]
            if(MESSAGE_T::isExtendedId) {
 800dd68:	4a04      	ldr	r2, [pc, #16]	; (800dd7c <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x34>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d000      	beq.n	800dd70 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
                    while(1);
 800dd6e:	e7fe      	b.n	800dd6e <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x26>
        };
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	4618      	mov	r0, r3
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	1ffffffa 	.word	0x1ffffffa

0800dd80 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
 800dd8a:	6839      	ldr	r1, [r7, #0]
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	331c      	adds	r3, #28
 800dd90:	461a      	mov	r2, r3
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7ff ffd8 	bl	800dd48 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3708      	adds	r7, #8
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}

0800dda2 <_ZN17KistlerController8callbackER9RxMessage>:

private:

	void callback(RxMessage& raw){
 800dda2:	b580      	push	{r7, lr}
 800dda4:	b088      	sub	sp, #32
 800dda6:	af00      	add	r7, sp, #0
 800dda8:	6078      	str	r0, [r7, #4]
 800ddaa:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::OpticalSensor_TX_MainData> msg {raw};
 800ddac:	f107 0308 	add.w	r3, r7, #8
 800ddb0:	6839      	ldr	r1, [r7, #0]
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7ff ffe4 	bl	800dd80 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK9RxMessage>
		m_velocity = msg.get<can::signals::OpticalSensor_TX_Vel>();
 800ddb8:	f107 0308 	add.w	r3, r7, #8
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f000 fa47 	bl	800e250 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals20OpticalSensor_TX_VelEEENT_8dataTypeEv>
 800ddc2:	eef0 7a40 	vmov.f32	s15, s0
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	edc3 7a01 	vstr	s15, [r3, #4]
		m_position = msg.get<can::signals::OpticalSensor_TX_Distance>();
 800ddcc:	f107 0308 	add.w	r3, r7, #8
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 fa51 	bl	800e278 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals25OpticalSensor_TX_DistanceEEENT_8dataTypeEv>
 800ddd6:	ec53 2b10 	vmov	r2, r3, d0
 800ddda:	4610      	mov	r0, r2
 800dddc:	4619      	mov	r1, r3
 800ddde:	f7f2 ff03 	bl	8000be8 <__aeabi_d2f>
 800dde2:	4602      	mov	r2, r0
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	609a      	str	r2, [r3, #8]
	}
 800dde8:	bf00      	nop
 800ddea:	3720      	adds	r7, #32
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <_ZN22EstimatedStateRegistry11setPositionEf>:
	void setPosition(float position){
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
 800ddf8:	ed87 0a00 	vstr	s0, [r7]
		m_position = position;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	601a      	str	r2, [r3, #0]
	}
 800de02:	bf00      	nop
 800de04:	370c      	adds	r7, #12
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
	...

0800de10 <main_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void main_entry(void *argv) {
 800de10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de12:	ed2d 8b02 	vpush	{d8}
 800de16:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800de1a:	af04      	add	r7, sp, #16
 800de1c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800de20:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 800de24:	6018      	str	r0, [r3, #0]
	PressureSensor pressureSensor = PressureSensor(
			g_peripherals.m_pressureConfig);
 800de26:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800de2a:	49b1      	ldr	r1, [pc, #708]	; (800e0f0 <main_entry+0x2e0>)
 800de2c:	4618      	mov	r0, r3
 800de2e:	f7ff fd13 	bl	800d858 <_ZN14PressureSensorC1ERK14PressureConfig>
	ImuMaster imuMaster;
 800de32:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800de36:	4618      	mov	r0, r3
 800de38:	f7fc fb06 	bl	800a448 <_ZN9ImuMasterC1Ev>
	NTCSensor coolingReservoirTemperatur = NTCSensor(
			g_peripherals.m_coolingReservoirTemperaturSensorConfig);
 800de3c:	4dad      	ldr	r5, [pc, #692]	; (800e0f4 <main_entry+0x2e4>)
 800de3e:	f107 067c 	add.w	r6, r7, #124	; 0x7c
 800de42:	466c      	mov	r4, sp
 800de44:	f105 0334 	add.w	r3, r5, #52	; 0x34
 800de48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800de4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800de50:	f105 0328 	add.w	r3, r5, #40	; 0x28
 800de54:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de56:	4630      	mov	r0, r6
 800de58:	f7fc febc 	bl	800abd4 <_ZN9NTCSensorC1E25NTCTemperaturSensorConfig>
	FiducialSensor fiducialRight = FiducialSensor(
			g_peripherals.m_fiducialRightConfig);
 800de5c:	4ba5      	ldr	r3, [pc, #660]	; (800e0f4 <main_entry+0x2e4>)
 800de5e:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800de62:	68da      	ldr	r2, [r3, #12]
 800de64:	9200      	str	r2, [sp, #0]
 800de66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de68:	f7fa f8dc 	bl	8008024 <_ZN14FiducialSensorC1E14FiducialConfig>
	FiducialSensor fiducialLeft = FiducialSensor(
			g_peripherals.m_fiducialLeftConfig);
 800de6c:	4ba1      	ldr	r3, [pc, #644]	; (800e0f4 <main_entry+0x2e4>)
 800de6e:	f107 0014 	add.w	r0, r7, #20
 800de72:	69da      	ldr	r2, [r3, #28]
 800de74:	9200      	str	r2, [sp, #0]
 800de76:	3310      	adds	r3, #16
 800de78:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de7a:	f7fa f8d3 	bl	8008024 <_ZN14FiducialSensorC1E14FiducialConfig>
	KistlerController kistlerController;
 800de7e:	f107 0308 	add.w	r3, r7, #8
 800de82:	4618      	mov	r0, r3
 800de84:	f7ff ff1c 	bl	800dcc0 <_ZN17KistlerControllerC1Ev>

	imuMaster.start();
 800de88:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fc fb7f 	bl	800a590 <_ZN9ImuMaster5startEv>

	while (true) {
		imuMaster.syncRead();
 800de92:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800de96:	4618      	mov	r0, r3
 800de98:	f7fc fbf8 	bl	800a68c <_ZN9ImuMaster8syncReadEv>

		SensorValueRegistry::getInstance().setGyro(imuMaster.getGyroX(),
 800de9c:	f7ff fdae 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800dea0:	4604      	mov	r4, r0
 800dea2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff fd3e 	bl	800d928 <_ZN9ImuMaster8getGyroXEv>
 800deac:	eeb0 8a40 	vmov.f32	s16, s0
 800deb0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800deb4:	4618      	mov	r0, r3
 800deb6:	f7ff fd47 	bl	800d948 <_ZN9ImuMaster8getGyroYEv>
 800deba:	eef0 8a40 	vmov.f32	s17, s0
 800debe:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff fd50 	bl	800d968 <_ZN9ImuMaster8getGyroZEv>
 800dec8:	eef0 7a40 	vmov.f32	s15, s0
 800decc:	eeb0 1a67 	vmov.f32	s2, s15
 800ded0:	eef0 0a68 	vmov.f32	s1, s17
 800ded4:	eeb0 0a48 	vmov.f32	s0, s16
 800ded8:	4620      	mov	r0, r4
 800deda:	f7ff fe02 	bl	800dae2 <_ZN19SensorValueRegistry7setGyroEfff>
				imuMaster.getGyroY(), imuMaster.getGyroZ());

		SensorValueRegistry::getInstance().setAccel(imuMaster.getAccelX(),
 800dede:	f7ff fd8d 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800dee2:	4604      	mov	r4, r0
 800dee4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800dee8:	4618      	mov	r0, r3
 800deea:	f7ff fced 	bl	800d8c8 <_ZN9ImuMaster9getAccelXEv>
 800deee:	eeb0 8a40 	vmov.f32	s16, s0
 800def2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800def6:	4618      	mov	r0, r3
 800def8:	f7ff fcf6 	bl	800d8e8 <_ZN9ImuMaster9getAccelYEv>
 800defc:	eef0 8a40 	vmov.f32	s17, s0
 800df00:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800df04:	4618      	mov	r0, r3
 800df06:	f7ff fcff 	bl	800d908 <_ZN9ImuMaster9getAccelZEv>
 800df0a:	eef0 7a40 	vmov.f32	s15, s0
 800df0e:	eeb0 1a67 	vmov.f32	s2, s15
 800df12:	eef0 0a68 	vmov.f32	s1, s17
 800df16:	eeb0 0a48 	vmov.f32	s0, s16
 800df1a:	4620      	mov	r0, r4
 800df1c:	f7ff fdfa 	bl	800db14 <_ZN19SensorValueRegistry8setAccelEfff>
				imuMaster.getAccelY(), imuMaster.getAccelZ());

		float coolingReservoirTemp =
				coolingReservoirTemperatur.getTemperaturC();
 800df20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800df24:	4618      	mov	r0, r3
 800df26:	f7fc fe73 	bl	800ac10 <_ZN9NTCSensor14getTemperaturCEv>
 800df2a:	ed87 0a87 	vstr	s0, [r7, #540]	; 0x21c
		SensorValueRegistry::getInstance().setCoolingReservoirTemperatur(
 800df2e:	f7ff fd65 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800df32:	4603      	mov	r3, r0
 800df34:	ed97 0a87 	vldr	s0, [r7, #540]	; 0x21c
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff fe04 	bl	800db46 <_ZN19SensorValueRegistry29setCoolingReservoirTemperaturEf>
				coolingReservoirTemp);

		float pressure = pressureSensor.getPressure();
 800df3e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 800df42:	4618      	mov	r0, r3
 800df44:	f7ff fc9c 	bl	800d880 <_ZN14PressureSensor11getPressureEv>
 800df48:	ed87 0a86 	vstr	s0, [r7, #536]	; 0x218
		SensorValueRegistry::getInstance().setCoolingPressure(pressure);
 800df4c:	f7ff fd56 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800df50:	4603      	mov	r3, r0
 800df52:	ed97 0a86 	vldr	s0, [r7, #536]	; 0x218
 800df56:	4618      	mov	r0, r3
 800df58:	f7ff fe04 	bl	800db64 <_ZN19SensorValueRegistry18setCoolingPressureEf>

		unsigned int fiducialLeftCounter = fiducialLeft.getCount();
 800df5c:	f107 0314 	add.w	r3, r7, #20
 800df60:	4618      	mov	r0, r3
 800df62:	f7ff fd33 	bl	800d9cc <_ZN14FiducialSensor8getCountEv>
 800df66:	f8c7 0214 	str.w	r0, [r7, #532]	; 0x214
		uint32_t fiducialLeftDeltaTime = fiducialLeft.getDeltaTime();
 800df6a:	f107 0314 	add.w	r3, r7, #20
 800df6e:	4618      	mov	r0, r3
 800df70:	f7ff fd38 	bl	800d9e4 <_ZN14FiducialSensor12getDeltaTimeEv>
 800df74:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
		float fiducialLeftVel = fiducialLeft.estimateVelocityMPS();
 800df78:	f107 0314 	add.w	r3, r7, #20
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7fa f890 	bl	80080a2 <_ZN14FiducialSensor19estimateVelocityMPSEv>
 800df82:	ed87 0a83 	vstr	s0, [r7, #524]	; 0x20c
		float fiducialLeftPos = fiducialLeft.estimatedPosition();
 800df86:	f107 0314 	add.w	r3, r7, #20
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7ff fcfc 	bl	800d988 <_ZN14FiducialSensor17estimatedPositionEv>
 800df90:	ed87 0a82 	vstr	s0, [r7, #520]	; 0x208

		SensorValueRegistry::getInstance().setFiducialLeftValues(
 800df94:	f7ff fd32 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800df98:	4603      	mov	r3, r0
 800df9a:	edd7 0a82 	vldr	s1, [r7, #520]	; 0x208
 800df9e:	ed97 0a83 	vldr	s0, [r7, #524]	; 0x20c
 800dfa2:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 800dfa6:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 800dfaa:	4618      	mov	r0, r3
 800dfac:	f7ff fde9 	bl	800db82 <_ZN19SensorValueRegistry21setFiducialLeftValuesEjmff>
				fiducialLeftCounter, fiducialLeftDeltaTime, fiducialLeftVel, fiducialLeftPos);

		unsigned int fiducialRightCounter = fiducialRight.getCount();
 800dfb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfb4:	4618      	mov	r0, r3
 800dfb6:	f7ff fd09 	bl	800d9cc <_ZN14FiducialSensor8getCountEv>
 800dfba:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
		uint32_t fiducialRightDeltaTime = fiducialRight.getDeltaTime();
 800dfbe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7ff fd0e 	bl	800d9e4 <_ZN14FiducialSensor12getDeltaTimeEv>
 800dfc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
		float fiducialRightVel = fiducialRight.estimateVelocityMPS();
 800dfcc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fa f866 	bl	80080a2 <_ZN14FiducialSensor19estimateVelocityMPSEv>
 800dfd6:	ed87 0a7f 	vstr	s0, [r7, #508]	; 0x1fc
		float fiducialRightPos = fiducialRight.estimatedPosition();
 800dfda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7ff fcd2 	bl	800d988 <_ZN14FiducialSensor17estimatedPositionEv>
 800dfe4:	ed87 0a7e 	vstr	s0, [r7, #504]	; 0x1f8

		SensorValueRegistry::getInstance().setFiducialRightValues(
 800dfe8:	f7ff fd08 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800dfec:	4603      	mov	r3, r0
 800dfee:	edd7 0a7e 	vldr	s1, [r7, #504]	; 0x1f8
 800dff2:	ed97 0a7f 	vldr	s0, [r7, #508]	; 0x1fc
 800dff6:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 800dffa:	f8d7 1204 	ldr.w	r1, [r7, #516]	; 0x204
 800dffe:	4618      	mov	r0, r3
 800e000:	f7ff fddb 	bl	800dbba <_ZN19SensorValueRegistry22setFiducialRightValuesEjmff>
				fiducialRightCounter, fiducialRightDeltaTime, fiducialRightVel, fiducialRightPos);

		float kistlerVel = kistlerController.getVelocity();
 800e004:	f107 0308 	add.w	r3, r7, #8
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff fe7f 	bl	800dd0c <_ZN17KistlerController11getVelocityEv>
 800e00e:	ed87 0a7d 	vstr	s0, [r7, #500]	; 0x1f4
		float kistlerPos = kistlerController.getPosition();
 800e012:	f107 0308 	add.w	r3, r7, #8
 800e016:	4618      	mov	r0, r3
 800e018:	f7ff fe87 	bl	800dd2a <_ZN17KistlerController11getPositionEv>
 800e01c:	ed87 0a7c 	vstr	s0, [r7, #496]	; 0x1f0
		SensorValueRegistry::getInstance().setKistlerValues(kistlerVel,
 800e020:	f7ff fcec 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800e024:	4603      	mov	r3, r0
 800e026:	edd7 0a7c 	vldr	s1, [r7, #496]	; 0x1f0
 800e02a:	ed97 0a7d 	vldr	s0, [r7, #500]	; 0x1f4
 800e02e:	4618      	mov	r0, r3
 800e030:	f7ff fddf 	bl	800dbf2 <_ZN19SensorValueRegistry16setKistlerValuesEff>
				kistlerPos);

		// =========== UPDATE-CAN ===========
		SensorValueRegistry::getInstance().updateCAN();
 800e034:	f7ff fce2 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800e038:	4603      	mov	r3, r0
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7ff fd16 	bl	800da6c <_ZN19SensorValueRegistry9updateCANEv>

		// ======= POSITION-ESTIMATION ======
		// compare fiducial left to optical Sensor.
		constexpr float FIDUCIAL_THRESHOLD = 0.1;
 800e040:	4b2d      	ldr	r3, [pc, #180]	; (800e0f8 <main_entry+0x2e8>)
 800e042:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
		if (	(std::abs(
					SensorValueRegistry::getInstance().getFiducialLeftPosition() - SensorValueRegistry::getInstance().getKistlerPosition())
 800e046:	f7ff fcd9 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800e04a:	4603      	mov	r3, r0
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7ff fdff 	bl	800dc50 <_ZN19SensorValueRegistry23getFiducialLeftPositionEv>
 800e052:	eeb0 8a40 	vmov.f32	s16, s0
 800e056:	f7ff fcd1 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800e05a:	4603      	mov	r3, r0
 800e05c:	4618      	mov	r0, r3
 800e05e:	f7ff fddc 	bl	800dc1a <_ZN19SensorValueRegistry18getKistlerPositionEv>
 800e062:	eef0 7a40 	vmov.f32	s15, s0
		if (	(std::abs(
 800e066:	ee78 7a67 	vsub.f32	s15, s16, s15
 800e06a:	eeb0 0a67 	vmov.f32	s0, s15
 800e06e:	f7ff fa41 	bl	800d4f4 <_ZSt3absf>
 800e072:	eef0 7a40 	vmov.f32	s15, s0
					> FIDUCIAL_THRESHOLD)
			|| (std::abs(
 800e076:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800e0fc <main_entry+0x2ec>
 800e07a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e07e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e082:	dc1d      	bgt.n	800e0c0 <main_entry+0x2b0>
					SensorValueRegistry::getInstance().getFiducialRightPosition() - SensorValueRegistry::getInstance().getKistlerPosition())
 800e084:	f7ff fcba 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800e088:	4603      	mov	r3, r0
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7ff fdef 	bl	800dc6e <_ZN19SensorValueRegistry24getFiducialRightPositionEv>
 800e090:	eeb0 8a40 	vmov.f32	s16, s0
 800e094:	f7ff fcb2 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800e098:	4603      	mov	r3, r0
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7ff fdbd 	bl	800dc1a <_ZN19SensorValueRegistry18getKistlerPositionEv>
 800e0a0:	eef0 7a40 	vmov.f32	s15, s0
			|| (std::abs(
 800e0a4:	ee78 7a67 	vsub.f32	s15, s16, s15
 800e0a8:	eeb0 0a67 	vmov.f32	s0, s15
 800e0ac:	f7ff fa22 	bl	800d4f4 <_ZSt3absf>
 800e0b0:	eef0 7a40 	vmov.f32	s15, s0
 800e0b4:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800e0fc <main_entry+0x2ec>
 800e0b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					> FIDUCIAL_THRESHOLD)) {
			//ERR_fiducialHighOffset_set();
			//printf("fiducial position estimation derived from kistler\n");
		}

		EstimatedStateRegistry::getInstance().setPosition(kistlerPos);
 800e0c0:	f7fe fe56 	bl	800cd70 <_ZN22EstimatedStateRegistry11getInstanceEv>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	ed97 0a7c 	vldr	s0, [r7, #496]	; 0x1f0
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7ff fe90 	bl	800ddf0 <_ZN22EstimatedStateRegistry11setPositionEf>

		printf("Fiducial Counter : %d\n", SensorValueRegistry::getInstance().getFiducialLeftCount());
 800e0d0:	f7ff fc94 	bl	800d9fc <_ZN19SensorValueRegistry11getInstanceEv>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	f7ff fdae 	bl	800dc38 <_ZN19SensorValueRegistry20getFiducialLeftCountEv>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	4619      	mov	r1, r3
 800e0e0:	4807      	ldr	r0, [pc, #28]	; (800e100 <main_entry+0x2f0>)
 800e0e2:	f008 ff37 	bl	8016f54 <printf_>

		osDelay(pdMS_TO_TICKS(1000));
 800e0e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e0ea:	f009 f8ad 	bl	8017248 <osDelay>

	}
 800e0ee:	e6d0      	b.n	800de92 <main_entry+0x82>
 800e0f0:	0801f47c 	.word	0x0801f47c
 800e0f4:	0801f3ec 	.word	0x0801f3ec
 800e0f8:	3dcccccd 	.word	0x3dcccccd
 800e0fc:	3dcccccd 	.word	0x3dcccccd
 800e100:	0801f060 	.word	0x0801f060

0800e104 <_ZN3can7MessageINS_8messages19SensorF_TX_AccFrontEE3setINS_7signals18SensorF_AccFront_XEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800e104:	b580      	push	{r7, lr}
 800e106:	b082      	sub	sp, #8
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f103 0008 	add.w	r0, r3, #8
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	f103 0110 	add.w	r1, r3, #16
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	3304      	adds	r3, #4
 800e120:	ed97 0a00 	vldr	s0, [r7]
 800e124:	461a      	mov	r2, r3
 800e126:	f7ff fa43 	bl	800d5b0 <_ZN3can7signals18SensorF_AccFront_X3setERyS2_Rhf>
        }
 800e12a:	bf00      	nop
 800e12c:	3708      	adds	r7, #8
 800e12e:	46bd      	mov	sp, r7
 800e130:	bd80      	pop	{r7, pc}

0800e132 <_ZN3can7MessageINS_8messages19SensorF_TX_AccFrontEE3setINS_7signals18SensorF_AccFront_YEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800e132:	b580      	push	{r7, lr}
 800e134:	b082      	sub	sp, #8
 800e136:	af00      	add	r7, sp, #0
 800e138:	6078      	str	r0, [r7, #4]
 800e13a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f103 0008 	add.w	r0, r3, #8
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f103 0110 	add.w	r1, r3, #16
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	3304      	adds	r3, #4
 800e14e:	ed97 0a00 	vldr	s0, [r7]
 800e152:	461a      	mov	r2, r3
 800e154:	f7ff fa7e 	bl	800d654 <_ZN3can7signals18SensorF_AccFront_Y3setERyS2_Rhf>
        }
 800e158:	bf00      	nop
 800e15a:	3708      	adds	r7, #8
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <_ZN3can7MessageINS_8messages19SensorF_TX_AccFrontEE3setINS_7signals18SensorF_AccFront_ZEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800e160:	b580      	push	{r7, lr}
 800e162:	b082      	sub	sp, #8
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
 800e168:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	f103 0008 	add.w	r0, r3, #8
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	f103 0110 	add.w	r1, r3, #16
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	3304      	adds	r3, #4
 800e17c:	ed97 0a00 	vldr	s0, [r7]
 800e180:	461a      	mov	r2, r3
 800e182:	f7ff fabd 	bl	800d700 <_ZN3can7signals18SensorF_AccFront_Z3setERyS2_Rhf>
        }
 800e186:	bf00      	nop
 800e188:	3708      	adds	r7, #8
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <_ZN3can7MessageINS_8messages19SensorF_TX_AccFrontEE3setINS_7signals19SensorF_GyroFront_ZEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800e18e:	b580      	push	{r7, lr}
 800e190:	b082      	sub	sp, #8
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f103 0008 	add.w	r0, r3, #8
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f103 0110 	add.w	r1, r3, #16
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	3304      	adds	r3, #4
 800e1aa:	ed97 0a00 	vldr	s0, [r7]
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	f7ff fafc 	bl	800d7ac <_ZN3can7signals19SensorF_GyroFront_Z3setERyS2_Rhf>
        }
 800e1b4:	bf00      	nop
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800e1bc:	b590      	push	{r4, r7, lr}
 800e1be:	b083      	sub	sp, #12
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7f3 f931 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800e1ce:	463b      	mov	r3, r7
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f000 f869 	bl	800e2a8 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d00f      	beq.n	800e1fc <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800e1dc:	687c      	ldr	r4, [r7, #4]
 800e1de:	463b      	mov	r3, r7
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f000 f86c 	bl	800e2be <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f000 f872 	bl	800e2d4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	4a05      	ldr	r2, [pc, #20]	; (800e208 <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x4c>)
 800e1f4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	4a04      	ldr	r2, [pc, #16]	; (800e20c <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x50>)
 800e1fa:	609a      	str	r2, [r3, #8]
      }
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4618      	mov	r0, r3
 800e200:	370c      	adds	r7, #12
 800e202:	46bd      	mov	sp, r7
 800e204:	bd90      	pop	{r4, r7, pc}
 800e206:	bf00      	nop
 800e208:	0800e2f9 	.word	0x0800e2f9
 800e20c:	0800e323 	.word	0x0800e323

0800e210 <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800e210:	b590      	push	{r4, r7, lr}
 800e212:	b087      	sub	sp, #28
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800e218:	f107 0308 	add.w	r3, r7, #8
 800e21c:	6879      	ldr	r1, [r7, #4]
 800e21e:	4618      	mov	r0, r3
 800e220:	f7f3 fa81 	bl	8001726 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800e224:	f107 0308 	add.w	r3, r7, #8
 800e228:	2201      	movs	r2, #1
 800e22a:	4908      	ldr	r1, [pc, #32]	; (800e24c <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE+0x3c>)
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7f3 f975 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800e232:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800e234:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800e236:	f107 0308 	add.w	r3, r7, #8
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7f3 f92a 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800e240:	4623      	mov	r3, r4
}
 800e242:	4618      	mov	r0, r3
 800e244:	371c      	adds	r7, #28
 800e246:	46bd      	mov	sp, r7
 800e248:	bd90      	pop	{r4, r7, pc}
 800e24a:	bf00      	nop
 800e24c:	1ffffffa 	.word	0x1ffffffa

0800e250 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals20OpticalSensor_TX_VelEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f103 0208 	add.w	r2, r3, #8
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	3310      	adds	r3, #16
 800e262:	4619      	mov	r1, r3
 800e264:	4610      	mov	r0, r2
 800e266:	f7ff f955 	bl	800d514 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_>
 800e26a:	eef0 7a40 	vmov.f32	s15, s0
        }
 800e26e:	eeb0 0a67 	vmov.f32	s0, s15
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}

0800e278 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals25OpticalSensor_TX_DistanceEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f103 0208 	add.w	r2, r3, #8
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	3310      	adds	r3, #16
 800e28a:	4619      	mov	r1, r3
 800e28c:	4610      	mov	r0, r2
 800e28e:	f7ff f967 	bl	800d560 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_>
 800e292:	eeb0 7a40 	vmov.f32	s14, s0
 800e296:	eef0 7a60 	vmov.f32	s15, s1
        }
 800e29a:	eeb0 0a47 	vmov.f32	s0, s14
 800e29e:	eef0 0a67 	vmov.f32	s1, s15
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
	  { return true; }
 800e2b0:	2301      	movs	r3, #1
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	370c      	adds	r7, #12
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr

0800e2be <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800e2be:	b480      	push	{r7}
 800e2c0:	b083      	sub	sp, #12
 800e2c2:	af00      	add	r7, sp, #0
 800e2c4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	370c      	adds	r7, #12
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d2:	4770      	bx	lr

0800e2d4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800e2d4:	b590      	push	{r4, r7, lr}
 800e2d6:	b083      	sub	sp, #12
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
 800e2dc:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800e2de:	6838      	ldr	r0, [r7, #0]
 800e2e0:	f7ff ffed 	bl	800e2be <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	4622      	mov	r2, r4
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 f838 	bl	800e360 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800e2f0:	bf00      	nop
 800e2f2:	370c      	adds	r7, #12
 800e2f4:	46bd      	mov	sp, r7
 800e2f6:	bd90      	pop	{r4, r7, pc}

0800e2f8 <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800e2f8:	b590      	push	{r4, r7, lr}
 800e2fa:	b083      	sub	sp, #12
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	6078      	str	r0, [r7, #4]
 800e300:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 f845 	bl	800e392 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800e308:	4604      	mov	r4, r0
 800e30a:	6838      	ldr	r0, [r7, #0]
 800e30c:	f7f3 fa95 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e310:	4603      	mov	r3, r0
 800e312:	4619      	mov	r1, r3
 800e314:	4620      	mov	r0, r4
 800e316:	f000 f84d 	bl	800e3b4 <_ZSt10__invoke_rIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800e31a:	bf00      	nop
      }
 800e31c:	370c      	adds	r7, #12
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd90      	pop	{r4, r7, pc}

0800e322 <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800e322:	b590      	push	{r4, r7, lr}
 800e324:	b085      	sub	sp, #20
 800e326:	af00      	add	r7, sp, #0
 800e328:	60f8      	str	r0, [r7, #12]
 800e32a:	60b9      	str	r1, [r7, #8]
 800e32c:	4613      	mov	r3, r2
 800e32e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	2b01      	cmp	r3, #1
 800e334:	d109      	bne.n	800e34a <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800e336:	68f8      	ldr	r0, [r7, #12]
 800e338:	f000 f852 	bl	800e3e0 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
 800e33c:	4604      	mov	r4, r0
 800e33e:	68b8      	ldr	r0, [r7, #8]
 800e340:	f000 f827 	bl	800e392 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800e344:	4603      	mov	r3, r0
 800e346:	6023      	str	r3, [r4, #0]
	    break;
 800e348:	e005      	b.n	800e356 <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800e34a:	79fb      	ldrb	r3, [r7, #7]
 800e34c:	461a      	mov	r2, r3
 800e34e:	68b9      	ldr	r1, [r7, #8]
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f000 f851 	bl	800e3f8 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800e356:	2300      	movs	r3, #0
      }
 800e358:	4618      	mov	r0, r3
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd90      	pop	{r4, r7, pc}

0800e360 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800e360:	b590      	push	{r4, r7, lr}
 800e362:	b085      	sub	sp, #20
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800e36c:	68b8      	ldr	r0, [r7, #8]
 800e36e:	f7ff ffa6 	bl	800e2be <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800e372:	4604      	mov	r4, r0
 800e374:	68f8      	ldr	r0, [r7, #12]
 800e376:	f7f4 f859 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800e37a:	4603      	mov	r3, r0
 800e37c:	4619      	mov	r1, r3
 800e37e:	2004      	movs	r0, #4
 800e380:	f7f4 f848 	bl	8002414 <_ZnwjPv>
 800e384:	4602      	mov	r2, r0
 800e386:	6823      	ldr	r3, [r4, #0]
 800e388:	6013      	str	r3, [r2, #0]
 800e38a:	bf00      	nop
 800e38c:	3714      	adds	r7, #20
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd90      	pop	{r4, r7, pc}

0800e392 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800e392:	b580      	push	{r7, lr}
 800e394:	b084      	sub	sp, #16
 800e396:	af00      	add	r7, sp, #0
 800e398:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f857 	bl	800e44e <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>
 800e3a0:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f000 f85f 	bl	800e466 <_ZSt11__addressofIKZN17KistlerControllerC4EvEUlR9RxMessageE_EPT_RS5_>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	bf00      	nop
	}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3710      	adds	r7, #16
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <_ZSt10__invoke_rIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800e3b4:	b5b0      	push	{r4, r5, r7, lr}
 800e3b6:	b082      	sub	sp, #8
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 f85c 	bl	800e47c <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	6838      	ldr	r0, [r7, #0]
 800e3c8:	f7f3 fa37 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e3cc:	4603      	mov	r3, r0
 800e3ce:	461a      	mov	r2, r3
 800e3d0:	4621      	mov	r1, r4
 800e3d2:	4628      	mov	r0, r5
 800e3d4:	f000 f85d 	bl	800e492 <_ZSt13__invoke_implIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800e3d8:	bf00      	nop
 800e3da:	3708      	adds	r7, #8
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bdb0      	pop	{r4, r5, r7, pc}

0800e3e0 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7f4 f81f 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800e3f8:	b5b0      	push	{r4, r5, r7, lr}
 800e3fa:	b084      	sub	sp, #16
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	60f8      	str	r0, [r7, #12]
 800e400:	60b9      	str	r1, [r7, #8]
 800e402:	4613      	mov	r3, r2
 800e404:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800e406:	79fb      	ldrb	r3, [r7, #7]
 800e408:	2b03      	cmp	r3, #3
 800e40a:	d016      	beq.n	800e43a <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800e40c:	2b03      	cmp	r3, #3
 800e40e:	dc19      	bgt.n	800e444 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800e410:	2b01      	cmp	r3, #1
 800e412:	d002      	beq.n	800e41a <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800e414:	2b02      	cmp	r3, #2
 800e416:	d00a      	beq.n	800e42e <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800e418:	e014      	b.n	800e444 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f7ff ffe0 	bl	800e3e0 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
 800e420:	4604      	mov	r4, r0
 800e422:	68b8      	ldr	r0, [r7, #8]
 800e424:	f7ff ffb5 	bl	800e392 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800e428:	4603      	mov	r3, r0
 800e42a:	6023      	str	r3, [r4, #0]
	      break;
 800e42c:	e00a      	b.n	800e444 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800e42e:	462a      	mov	r2, r5
 800e430:	68b9      	ldr	r1, [r7, #8]
 800e432:	68f8      	ldr	r0, [r7, #12]
 800e434:	f000 f843 	bl	800e4be <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800e438:	e004      	b.n	800e444 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800e43a:	4621      	mov	r1, r4
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f000 f857 	bl	800e4f0 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800e442:	bf00      	nop
	  return false;
 800e444:	2300      	movs	r3, #0
	}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bdb0      	pop	{r4, r5, r7, pc}

0800e44e <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800e44e:	b580      	push	{r7, lr}
 800e450:	b082      	sub	sp, #8
 800e452:	af00      	add	r7, sp, #0
 800e454:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7f3 fff3 	bl	8002442 <_ZNKSt9_Any_data9_M_accessEv>
 800e45c:	4603      	mov	r3, r0
 800e45e:	4618      	mov	r0, r3
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}

0800e466 <_ZSt11__addressofIKZN17KistlerControllerC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e466:	b480      	push	{r7}
 800e468:	b083      	sub	sp, #12
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	4618      	mov	r0, r3
 800e472:	370c      	adds	r7, #12
 800e474:	46bd      	mov	sp, r7
 800e476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e47a:	4770      	bx	lr

0800e47c <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800e47c:	b480      	push	{r7}
 800e47e:	b083      	sub	sp, #12
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	4618      	mov	r0, r3
 800e488:	370c      	adds	r7, #12
 800e48a:	46bd      	mov	sp, r7
 800e48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e490:	4770      	bx	lr

0800e492 <_ZSt13__invoke_implIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800e492:	b590      	push	{r4, r7, lr}
 800e494:	b085      	sub	sp, #20
 800e496:	af00      	add	r7, sp, #0
 800e498:	7338      	strb	r0, [r7, #12]
 800e49a:	60b9      	str	r1, [r7, #8]
 800e49c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800e49e:	68b8      	ldr	r0, [r7, #8]
 800e4a0:	f7ff ffec 	bl	800e47c <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800e4a4:	4604      	mov	r4, r0
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f7f3 f9c7 	bl	800183a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	4619      	mov	r1, r3
 800e4b0:	4620      	mov	r0, r4
 800e4b2:	f7ff fbf6 	bl	800dca2 <_ZZN17KistlerControllerC4EvENKUlR9RxMessageE_clES1_>
 800e4b6:	bf00      	nop
 800e4b8:	3714      	adds	r7, #20
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd90      	pop	{r4, r7, pc}

0800e4be <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800e4be:	b590      	push	{r4, r7, lr}
 800e4c0:	b085      	sub	sp, #20
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	60f8      	str	r0, [r7, #12]
 800e4c6:	60b9      	str	r1, [r7, #8]
 800e4c8:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800e4ca:	68b8      	ldr	r0, [r7, #8]
 800e4cc:	f7ff ffbf 	bl	800e44e <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>
 800e4d0:	4604      	mov	r4, r0
 800e4d2:	68f8      	ldr	r0, [r7, #12]
 800e4d4:	f7f3 ffaa 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	4619      	mov	r1, r3
 800e4dc:	2004      	movs	r0, #4
 800e4de:	f7f3 ff99 	bl	8002414 <_ZnwjPv>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	6823      	ldr	r3, [r4, #0]
 800e4e6:	6013      	str	r3, [r2, #0]
	}
 800e4e8:	bf00      	nop
 800e4ea:	3714      	adds	r7, #20
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd90      	pop	{r4, r7, pc}

0800e4f0 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 f804 	bl	800e508 <_ZNSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
	}
 800e500:	bf00      	nop
 800e502:	3708      	adds	r7, #8
 800e504:	46bd      	mov	sp, r7
 800e506:	bd80      	pop	{r7, pc}

0800e508 <_ZNSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f7f3 ff8b 	bl	800242c <_ZNSt9_Any_data9_M_accessEv>
 800e516:	4603      	mov	r3, r0
 800e518:	4618      	mov	r0, r3
 800e51a:	3708      	adds	r7, #8
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>:
#include <cmath>
#include "canzero.hpp"

class OnBoardSensors {
public:
	explicit OnBoardSensors(OnBoardTemperaturConfig config) :
 800e520:	b084      	sub	sp, #16
 800e522:	b5b0      	push	{r4, r5, r7, lr}
 800e524:	b082      	sub	sp, #8
 800e526:	af00      	add	r7, sp, #0
 800e528:	6078      	str	r0, [r7, #4]
 800e52a:	f107 001c 	add.w	r0, r7, #28
 800e52e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			m_internalNTC(config.m_internalNTCConfig.m_adc.m_module,
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
					config.m_externalNTCConfig.m_adc.m_module,
					config.m_externalNTCConfig.m_adc.m_rank),
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
					m_config(config) {
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	69f9      	ldr	r1, [r7, #28]
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
 800e536:	8c3a      	ldrh	r2, [r7, #32]
					m_config(config) {
 800e538:	4618      	mov	r0, r3
 800e53a:	f7fc fb0e 	bl	800ab5a <_ZN20AdcChannelControllerC1E9AdcModulej>
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	3308      	adds	r3, #8
 800e542:	6b79      	ldr	r1, [r7, #52]	; 0x34
					config.m_externalNTCConfig.m_adc.m_rank),
 800e544:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
					m_config(config) {
 800e546:	4618      	mov	r0, r3
 800e548:	f7fc fb07 	bl	800ab5a <_ZN20AdcChannelControllerC1E9AdcModulej>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	3310      	adds	r3, #16
 800e550:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
 800e552:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
					m_config(config) {
 800e556:	4618      	mov	r0, r3
 800e558:	f7fc faff 	bl	800ab5a <_ZN20AdcChannelControllerC1E9AdcModulej>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f103 0418 	add.w	r4, r3, #24
 800e562:	f107 051c 	add.w	r5, r7, #28
 800e566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e56a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e56c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e56e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e572:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e576:	e884 0003 	stmia.w	r4, {r0, r1}
	}
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	4618      	mov	r0, r3
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e586:	b004      	add	sp, #16
 800e588:	4770      	bx	lr
	...

0800e58c <_ZN14OnBoardSensors22getInternalTemperaturCEv>:

	float getInternalTemperaturC(){
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b084      	sub	sp, #16
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_internalNTC.get();
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	4618      	mov	r0, r3
 800e598:	f7fc faf9 	bl	800ab8e <_ZN20AdcChannelController3getEv>
 800e59c:	4603      	mov	r3, r0
 800e59e:	81fb      	strh	r3, [r7, #14]
		float internalTemp = (3.3f * (float) avalue/4095.0f - 0.76f) / 0.0025f + 25.0f;
 800e5a0:	89fb      	ldrh	r3, [r7, #14]
 800e5a2:	ee07 3a90 	vmov	s15, r3
 800e5a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5aa:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800e5e8 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x5c>
 800e5ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e5b2:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800e5ec <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x60>
 800e5b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e5ba:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800e5f0 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x64>
 800e5be:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e5c2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800e5f4 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x68>
 800e5c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e5ca:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800e5ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e5d2:	edc7 7a02 	vstr	s15, [r7, #8]
		return internalTemp;
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	ee07 3a90 	vmov	s15, r3
	}
 800e5dc:	eeb0 0a67 	vmov.f32	s0, s15
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}
 800e5e6:	bf00      	nop
 800e5e8:	40533333 	.word	0x40533333
 800e5ec:	457ff000 	.word	0x457ff000
 800e5f0:	3f428f5c 	.word	0x3f428f5c
 800e5f4:	3b23d70a 	.word	0x3b23d70a

0800e5f8 <_ZN14OnBoardSensors22getExternalTemperaturCEv>:

	float getExternalTemperaturC(){
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_externalNTC.get();
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	3308      	adds	r3, #8
 800e604:	4618      	mov	r0, r3
 800e606:	f7fc fac2 	bl	800ab8e <_ZN20AdcChannelController3getEv>
 800e60a:	4603      	mov	r3, r0
 800e60c:	81fb      	strh	r3, [r7, #14]
		float ntcTemperature = 1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * log(1.0f / (4095.0f / (float) avalue - 1.0f) )) - 273.15f;
 800e60e:	89fb      	ldrh	r3, [r7, #14]
 800e610:	ee07 3a90 	vmov	s15, r3
 800e614:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e618:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e6c0 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc8>
 800e61c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e620:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e624:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e628:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e62c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800e630:	ee16 0a90 	vmov	r0, s13
 800e634:	f7f1 ff88 	bl	8000548 <__aeabi_f2d>
 800e638:	4602      	mov	r2, r0
 800e63a:	460b      	mov	r3, r1
 800e63c:	ec43 2b10 	vmov	d0, r2, r3
 800e640:	f00d f8e2 	bl	801b808 <log>
 800e644:	ec51 0b10 	vmov	r0, r1, d0
 800e648:	a317      	add	r3, pc, #92	; (adr r3, 800e6a8 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb0>)
 800e64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e64e:	f7f1 ffd3 	bl	80005f8 <__aeabi_dmul>
 800e652:	4602      	mov	r2, r0
 800e654:	460b      	mov	r3, r1
 800e656:	4610      	mov	r0, r2
 800e658:	4619      	mov	r1, r3
 800e65a:	a315      	add	r3, pc, #84	; (adr r3, 800e6b0 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb8>)
 800e65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e660:	f7f1 fe14 	bl	800028c <__adddf3>
 800e664:	4602      	mov	r2, r0
 800e666:	460b      	mov	r3, r1
 800e668:	f04f 0000 	mov.w	r0, #0
 800e66c:	4915      	ldr	r1, [pc, #84]	; (800e6c4 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xcc>)
 800e66e:	f7f2 f8ed 	bl	800084c <__aeabi_ddiv>
 800e672:	4602      	mov	r2, r0
 800e674:	460b      	mov	r3, r1
 800e676:	4610      	mov	r0, r2
 800e678:	4619      	mov	r1, r3
 800e67a:	a30f      	add	r3, pc, #60	; (adr r3, 800e6b8 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc0>)
 800e67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e680:	f7f1 fe02 	bl	8000288 <__aeabi_dsub>
 800e684:	4602      	mov	r2, r0
 800e686:	460b      	mov	r3, r1
 800e688:	4610      	mov	r0, r2
 800e68a:	4619      	mov	r1, r3
 800e68c:	f7f2 faac 	bl	8000be8 <__aeabi_d2f>
 800e690:	4603      	mov	r3, r0
 800e692:	60bb      	str	r3, [r7, #8]
		return ntcTemperature;
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	ee07 3a90 	vmov	s15, r3
	}
 800e69a:	eeb0 0a67 	vmov.f32	s0, s15
 800e69e:	3710      	adds	r7, #16
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}
 800e6a4:	f3af 8000 	nop.w
 800e6a8:	60000000 	.word	0x60000000
 800e6ac:	3f3363ac 	.word	0x3f3363ac
 800e6b0:	e0000000 	.word	0xe0000000
 800e6b4:	3f6b79e1 	.word	0x3f6b79e1
 800e6b8:	60000000 	.word	0x60000000
 800e6bc:	40711266 	.word	0x40711266
 800e6c0:	457ff000 	.word	0x457ff000
 800e6c4:	3ff00000 	.word	0x3ff00000

0800e6c8 <_ZN14OnBoardSensors21getAverageTemperaturCEv>:

	float getAverageTemperaturC(){
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	ed2d 8b02 	vpush	{d8}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	6078      	str	r0, [r7, #4]
		float average = (getExternalTemperaturC() + getInternalTemperaturC() ) / 2.0;
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f7ff ff8f 	bl	800e5f8 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 800e6da:	eeb0 8a40 	vmov.f32	s16, s0
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f7ff ff54 	bl	800e58c <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 800e6e4:	eef0 7a40 	vmov.f32	s15, s0
 800e6e8:	ee78 7a27 	vadd.f32	s15, s16, s15
 800e6ec:	ee17 0a90 	vmov	r0, s15
 800e6f0:	f7f1 ff2a 	bl	8000548 <__aeabi_f2d>
 800e6f4:	f04f 0200 	mov.w	r2, #0
 800e6f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e6fc:	f7f2 f8a6 	bl	800084c <__aeabi_ddiv>
 800e700:	4602      	mov	r2, r0
 800e702:	460b      	mov	r3, r1
 800e704:	4610      	mov	r0, r2
 800e706:	4619      	mov	r1, r3
 800e708:	f7f2 fa6e 	bl	8000be8 <__aeabi_d2f>
 800e70c:	4603      	mov	r3, r0
 800e70e:	60fb      	str	r3, [r7, #12]
		return average;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	ee07 3a90 	vmov	s15, r3
	}
 800e716:	eeb0 0a67 	vmov.f32	s0, s15
 800e71a:	3710      	adds	r7, #16
 800e71c:	46bd      	mov	sp, r7
 800e71e:	ecbd 8b02 	vpop	{d8}
 800e722:	bd80      	pop	{r7, pc}

0800e724 <_ZN14OnBoardSensors15getInputVoltageEv>:

	float getInputVoltage() {
 800e724:	b580      	push	{r7, lr}
 800e726:	b084      	sub	sp, #16
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_inputVoltage.get();
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	3310      	adds	r3, #16
 800e730:	4618      	mov	r0, r3
 800e732:	f7fc fa2c 	bl	800ab8e <_ZN20AdcChannelController3getEv>
 800e736:	4603      	mov	r3, r0
 800e738:	81fb      	strh	r3, [r7, #14]
		float inputVoltage = (float)avalue/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 800e73a:	89fb      	ldrh	r3, [r7, #14]
 800e73c:	ee07 3a90 	vmov	s15, r3
 800e740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800e744:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800e778 <_ZN14OnBoardSensors15getInputVoltageEv+0x54>
 800e748:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e74c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800e77c <_ZN14OnBoardSensors15getInputVoltageEv+0x58>
 800e750:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e754:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800e780 <_ZN14OnBoardSensors15getInputVoltageEv+0x5c>
 800e758:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800e75c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800e784 <_ZN14OnBoardSensors15getInputVoltageEv+0x60>
 800e760:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e764:	edc7 7a02 	vstr	s15, [r7, #8]
		return inputVoltage;
 800e768:	68bb      	ldr	r3, [r7, #8]
 800e76a:	ee07 3a90 	vmov	s15, r3
	}
 800e76e:	eeb0 0a67 	vmov.f32	s0, s15
 800e772:	3710      	adds	r7, #16
 800e774:	46bd      	mov	sp, r7
 800e776:	bd80      	pop	{r7, pc}
 800e778:	457ff000 	.word	0x457ff000
 800e77c:	40533333 	.word	0x40533333
 800e780:	3dda09cc 	.word	0x3dda09cc
 800e784:	3f19999a 	.word	0x3f19999a

0800e788 <_ZN14OnBoardSensors9updateODsEv>:

	void updateODs(){
 800e788:	b580      	push	{r7, lr}
 800e78a:	b084      	sub	sp, #16
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
		float temp = getAverageTemperaturC();
 800e790:	6878      	ldr	r0, [r7, #4]
 800e792:	f7ff ff99 	bl	800e6c8 <_ZN14OnBoardSensors21getAverageTemperaturCEv>
 800e796:	ed87 0a03 	vstr	s0, [r7, #12]
		float vBat = getInputVoltage();
 800e79a:	6878      	ldr	r0, [r7, #4]
 800e79c:	f7ff ffc2 	bl	800e724 <_ZN14OnBoardSensors15getInputVoltageEv>
 800e7a0:	ed87 0a02 	vstr	s0, [r7, #8]
		OD_BoardTemp_set(temp);
 800e7a4:	ed97 0a03 	vldr	s0, [r7, #12]
 800e7a8:	f7f7 fd94 	bl	80062d4 <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(vBat);
 800e7ac:	ed97 0a02 	vldr	s0, [r7, #8]
 800e7b0:	f7f7 fdca 	bl	8006348 <_Z19OD_InputVoltage_setf>
	}
 800e7b4:	bf00      	nop
 800e7b6:	3710      	adds	r7, #16
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}

0800e7bc <_ZL18estimateFreeMemoryv>:
#include "canzero.hpp"
#include "FreeRTOS.h"
#include "cmsis_os.h"
#include "task.h"

static inline size_t estimateFreeMemory() {
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	af00      	add	r7, sp, #0
	return xPortGetFreeHeapSize();
 800e7c0:	f00c feec 	bl	801b59c <xPortGetFreeHeapSize>
 800e7c4:	4603      	mov	r3, r0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	bd80      	pop	{r7, pc}
	...

0800e7cc <_ZL16estimateCPUusagev>:


static inline float estimateCPUusage() {
 800e7cc:	b480      	push	{r7}
 800e7ce:	af00      	add	r7, sp, #0
	}
	g_oldIdleTick = xTaskGetIdleRunTimeCounter();
	g_oldTotalTick = portGET_RUN_TIME_COUNTER_VALUE();
	return cpuUsage;
	*/
	return 80.0;
 800e7d0:	4b04      	ldr	r3, [pc, #16]	; (800e7e4 <_ZL16estimateCPUusagev+0x18>)
 800e7d2:	ee07 3a90 	vmov	s15, r3
}
 800e7d6:	eeb0 0a67 	vmov.f32	s0, s15
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	42a00000 	.word	0x42a00000

0800e7e8 <microcontroller_info_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void microcontroller_info_entry(void *argv) {
 800e7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ea:	b0a7      	sub	sp, #156	; 0x9c
 800e7ec:	af0c      	add	r7, sp, #48	; 0x30
 800e7ee:	6078      	str	r0, [r7, #4]
	OnBoardSensors onBoardSensors(g_peripherals.m_onBoardTemperaturConfig);
 800e7f0:	4e19      	ldr	r6, [pc, #100]	; (800e858 <microcontroller_info_entry+0x70>)
 800e7f2:	f107 0c0c 	add.w	ip, r7, #12
 800e7f6:	466d      	mov	r5, sp
 800e7f8:	f106 0464 	add.w	r4, r6, #100	; 0x64
 800e7fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e7fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e800:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e802:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e804:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800e808:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e80c:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800e810:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e812:	4660      	mov	r0, ip
 800e814:	f7ff fe84 	bl	800e520 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>
	unsigned int frameCounter;
	while (true) {
		onBoardSensors.updateODs();
 800e818:	f107 030c 	add.w	r3, r7, #12
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7ff ffb3 	bl	800e788 <_ZN14OnBoardSensors9updateODsEv>
		if (frameCounter > 20) {
 800e822:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e824:	2b14      	cmp	r3, #20
 800e826:	d90f      	bls.n	800e848 <microcontroller_info_entry+0x60>
			float cpuUsage = estimateCPUusage();
 800e828:	f7ff ffd0 	bl	800e7cc <_ZL16estimateCPUusagev>
 800e82c:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
			OD_CpuUsage_set(cpuUsage);
 800e830:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800e834:	f7f7 fcdc 	bl	80061f0 <_Z15OD_CpuUsage_setf>
			size_t freeMemory = estimateFreeMemory();
 800e838:	f7ff ffc0 	bl	800e7bc <_ZL18estimateFreeMemoryv>
 800e83c:	65f8      	str	r0, [r7, #92]	; 0x5c
			OD_MemFree_set(freeMemory);
 800e83e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800e840:	f7f7 fd0e 	bl	8006260 <_Z14OD_MemFree_setm>
			frameCounter = 0;
 800e844:	2300      	movs	r3, #0
 800e846:	667b      	str	r3, [r7, #100]	; 0x64
		}
		frameCounter++;
 800e848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e84a:	3301      	adds	r3, #1
 800e84c:	667b      	str	r3, [r7, #100]	; 0x64
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
 800e84e:	2032      	movs	r0, #50	; 0x32
 800e850:	f008 fcfa 	bl	8017248 <osDelay>
	}
 800e854:	e7e0      	b.n	800e818 <microcontroller_info_entry+0x30>
 800e856:	bf00      	nop
 800e858:	0801f484 	.word	0x0801f484

0800e85c <_ZN11GlobalState5startEv>:
	void start(){
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b082      	sub	sp, #8
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
		broadcastState(m_startupState.getPodState());
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	3354      	adds	r3, #84	; 0x54
 800e868:	4618      	mov	r0, r3
 800e86a:	f7fa faf3 	bl	8008e54 <_ZNK5State11getPodStateEv>
 800e86e:	4603      	mov	r3, r0
 800e870:	4619      	mov	r1, r3
 800e872:	6878      	ldr	r0, [r7, #4]
 800e874:	f7fa fcea 	bl	800924c <_ZN11GlobalState14broadcastStateE8PodState>
		m_stateMaschine.start<PodStartupState>();
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	333c      	adds	r3, #60	; 0x3c
 800e87c:	4618      	mov	r0, r3
 800e87e:	f000 f812 	bl	800e8a6 <_ZN13StateMaschine5startI15PodStartupStateEEvv>
	}
 800e882:	bf00      	nop
 800e884:	3708      	adds	r7, #8
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}

0800e88a <state_maschine_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void state_maschine_entry(void *argv) {
 800e88a:	b580      	push	{r7, lr}
 800e88c:	b082      	sub	sp, #8
 800e88e:	af00      	add	r7, sp, #0
 800e890:	6078      	str	r0, [r7, #4]
	GlobalState::getInstance().start();
 800e892:	f7fa fc9d 	bl	80091d0 <_ZN11GlobalState11getInstanceEv>
 800e896:	4603      	mov	r3, r0
 800e898:	4618      	mov	r0, r3
 800e89a:	f7ff ffdf 	bl	800e85c <_ZN11GlobalState5startEv>

}
 800e89e:	bf00      	nop
 800e8a0:	3708      	adds	r7, #8
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <_ZN13StateMaschine5startI15PodStartupStateEEvv>:

	template<typename StartState>
	void start() {
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b082      	sub	sp, #8
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
		static_assert(std::is_base_of<State, StartState>::value);
		if(m_running == true) Error_Handler();
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	7d1b      	ldrb	r3, [r3, #20]
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d101      	bne.n	800e8ba <_ZN13StateMaschine5startI15PodStartupStateEEvv+0x14>
 800e8b6:	f000 febb 	bl	800f630 <Error_Handler>
		m_currentState = State::getId<StartState>();
 800e8ba:	f7fa ff19 	bl	80096f0 <_ZN5State5getIdI15PodStartupStateEEjv>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	60da      	str	r2, [r3, #12]
		m_nextState = m_currentState;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	68da      	ldr	r2, [r3, #12]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	611a      	str	r2, [r3, #16]
		m_prevState = m_currentState;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	68da      	ldr	r2, [r3, #12]
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	609a      	str	r2, [r3, #8]
		m_states[m_nextState]->m_active = true;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681a      	ldr	r2, [r3, #0]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	691b      	ldr	r3, [r3, #16]
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	4413      	add	r3, r2
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	721a      	strb	r2, [r3, #8]
		m_running = true;
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	2201      	movs	r2, #1
 800e8ea:	751a      	strb	r2, [r3, #20]
		m_states[m_currentState]->setup();
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681a      	ldr	r2, [r3, #0]
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	009b      	lsls	r3, r3, #2
 800e8f6:	4413      	add	r3, r2
 800e8f8:	6819      	ldr	r1, [r3, #0]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	68db      	ldr	r3, [r3, #12]
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	4413      	add	r3, r2
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	3308      	adds	r3, #8
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4608      	mov	r0, r1
 800e910:	4798      	blx	r3
		while (m_running) {
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	7d1b      	ldrb	r3, [r3, #20]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d047      	beq.n	800e9aa <_ZN13StateMaschine5startI15PodStartupStateEEvv+0x104>
			if (m_currentState != m_nextState) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68da      	ldr	r2, [r3, #12]
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	429a      	cmp	r2, r3
 800e924:	d02d      	beq.n	800e982 <_ZN13StateMaschine5startI15PodStartupStateEEvv+0xdc>
				taskENTER_CRITICAL();
 800e926:	f00c fbe5 	bl	801b0f4 <vPortEnterCritical>
				m_states[m_currentState]->dispose();
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	009b      	lsls	r3, r3, #2
 800e934:	4413      	add	r3, r2
 800e936:	6819      	ldr	r1, [r3, #0]
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	68db      	ldr	r3, [r3, #12]
 800e940:	009b      	lsls	r3, r3, #2
 800e942:	4413      	add	r3, r2
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	3310      	adds	r3, #16
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	4608      	mov	r0, r1
 800e94e:	4798      	blx	r3
				m_states[m_nextState]->setup();
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	691b      	ldr	r3, [r3, #16]
 800e958:	009b      	lsls	r3, r3, #2
 800e95a:	4413      	add	r3, r2
 800e95c:	6819      	ldr	r1, [r3, #0]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	681a      	ldr	r2, [r3, #0]
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	691b      	ldr	r3, [r3, #16]
 800e966:	009b      	lsls	r3, r3, #2
 800e968:	4413      	add	r3, r2
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	3308      	adds	r3, #8
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4608      	mov	r0, r1
 800e974:	4798      	blx	r3
				m_currentState = m_nextState;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	691a      	ldr	r2, [r3, #16]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	60da      	str	r2, [r3, #12]
				taskEXIT_CRITICAL();
 800e97e:	f00c fbe9 	bl	801b154 <vPortExitCritical>
			}
			m_states[m_currentState]->update();
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	68db      	ldr	r3, [r3, #12]
 800e98a:	009b      	lsls	r3, r3, #2
 800e98c:	4413      	add	r3, r2
 800e98e:	6819      	ldr	r1, [r3, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68db      	ldr	r3, [r3, #12]
 800e998:	009b      	lsls	r3, r3, #2
 800e99a:	4413      	add	r3, r2
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	330c      	adds	r3, #12
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	4798      	blx	r3
		while (m_running) {
 800e9a8:	e7b3      	b.n	800e912 <_ZN13StateMaschine5startI15PodStartupStateEEvv+0x6c>
		}
	}
 800e9aa:	bf00      	nop
 800e9ac:	3708      	adds	r7, #8
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	bd80      	pop	{r7, pc}
	...

0800e9b4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800e9ba:	463b      	mov	r3, r7
 800e9bc:	2200      	movs	r2, #0
 800e9be:	601a      	str	r2, [r3, #0]
 800e9c0:	605a      	str	r2, [r3, #4]
 800e9c2:	609a      	str	r2, [r3, #8]
 800e9c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800e9c6:	4b36      	ldr	r3, [pc, #216]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800e9c8:	4a36      	ldr	r2, [pc, #216]	; (800eaa4 <MX_ADC1_Init+0xf0>)
 800e9ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800e9cc:	4b34      	ldr	r3, [pc, #208]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800e9ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800e9d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e9d4:	4b32      	ldr	r3, [pc, #200]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800e9da:	4b31      	ldr	r3, [pc, #196]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800e9dc:	2201      	movs	r2, #1
 800e9de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e9e0:	4b2f      	ldr	r3, [pc, #188]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e9e6:	4b2e      	ldr	r3, [pc, #184]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800e9ee:	4b2c      	ldr	r3, [pc, #176]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800e9f4:	4b2a      	ldr	r3, [pc, #168]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800e9f6:	4a2c      	ldr	r2, [pc, #176]	; (800eaa8 <MX_ADC1_Init+0xf4>)
 800e9f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e9fa:	4b29      	ldr	r3, [pc, #164]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800ea00:	4b27      	ldr	r3, [pc, #156]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800ea02:	2204      	movs	r2, #4
 800ea04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800ea06:	4b26      	ldr	r3, [pc, #152]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800ea08:	2200      	movs	r2, #0
 800ea0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800ea0e:	4b24      	ldr	r3, [pc, #144]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800ea10:	2200      	movs	r2, #0
 800ea12:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800ea14:	4822      	ldr	r0, [pc, #136]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800ea16:	f001 fd69 	bl	80104ec <HAL_ADC_Init>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d001      	beq.n	800ea24 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800ea20:	f000 fe06 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800ea24:	230a      	movs	r3, #10
 800ea26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800ea2c:	2305      	movs	r3, #5
 800ea2e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ea30:	463b      	mov	r3, r7
 800ea32:	4619      	mov	r1, r3
 800ea34:	481a      	ldr	r0, [pc, #104]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800ea36:	f001 feb7 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d001      	beq.n	800ea44 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800ea40:	f000 fdf6 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800ea44:	230c      	movs	r3, #12
 800ea46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800ea48:	2302      	movs	r3, #2
 800ea4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ea4c:	463b      	mov	r3, r7
 800ea4e:	4619      	mov	r1, r3
 800ea50:	4813      	ldr	r0, [pc, #76]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800ea52:	f001 fea9 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d001      	beq.n	800ea60 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800ea5c:	f000 fde8 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800ea60:	2310      	movs	r3, #16
 800ea62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800ea64:	2303      	movs	r3, #3
 800ea66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ea68:	463b      	mov	r3, r7
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	480c      	ldr	r0, [pc, #48]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800ea6e:	f001 fe9b 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800ea72:	4603      	mov	r3, r0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d001      	beq.n	800ea7c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800ea78:	f000 fdda 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800ea7c:	2311      	movs	r3, #17
 800ea7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800ea80:	2304      	movs	r3, #4
 800ea82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ea84:	463b      	mov	r3, r7
 800ea86:	4619      	mov	r1, r3
 800ea88:	4805      	ldr	r0, [pc, #20]	; (800eaa0 <MX_ADC1_Init+0xec>)
 800ea8a:	f001 fe8d 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d001      	beq.n	800ea98 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800ea94:	f000 fdcc 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ea98:	bf00      	nop
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	20000e38 	.word	0x20000e38
 800eaa4:	40012000 	.word	0x40012000
 800eaa8:	0f000001 	.word	0x0f000001

0800eaac <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b084      	sub	sp, #16
 800eab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800eab2:	463b      	mov	r3, r7
 800eab4:	2200      	movs	r2, #0
 800eab6:	601a      	str	r2, [r3, #0]
 800eab8:	605a      	str	r2, [r3, #4]
 800eaba:	609a      	str	r2, [r3, #8]
 800eabc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800eabe:	4b52      	ldr	r3, [pc, #328]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eac0:	4a52      	ldr	r2, [pc, #328]	; (800ec0c <MX_ADC2_Init+0x160>)
 800eac2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800eac4:	4b50      	ldr	r3, [pc, #320]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eac6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800eaca:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800eacc:	4b4e      	ldr	r3, [pc, #312]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eace:	2200      	movs	r2, #0
 800ead0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800ead2:	4b4d      	ldr	r3, [pc, #308]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800ead4:	2201      	movs	r2, #1
 800ead6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800ead8:	4b4b      	ldr	r3, [pc, #300]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eada:	2200      	movs	r2, #0
 800eadc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800eade:	4b4a      	ldr	r3, [pc, #296]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800eae6:	4b48      	ldr	r3, [pc, #288]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eae8:	2200      	movs	r2, #0
 800eaea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800eaec:	4b46      	ldr	r3, [pc, #280]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eaee:	4a48      	ldr	r2, [pc, #288]	; (800ec10 <MX_ADC2_Init+0x164>)
 800eaf0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800eaf2:	4b45      	ldr	r3, [pc, #276]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 800eaf8:	4b43      	ldr	r3, [pc, #268]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eafa:	2208      	movs	r2, #8
 800eafc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800eafe:	4b42      	ldr	r3, [pc, #264]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eb00:	2200      	movs	r2, #0
 800eb02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800eb06:	4b40      	ldr	r3, [pc, #256]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800eb0c:	483e      	ldr	r0, [pc, #248]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eb0e:	f001 fced 	bl	80104ec <HAL_ADC_Init>
 800eb12:	4603      	mov	r3, r0
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d001      	beq.n	800eb1c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800eb18:	f000 fd8a 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800eb1c:	230f      	movs	r3, #15
 800eb1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800eb20:	2301      	movs	r3, #1
 800eb22:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800eb24:	2304      	movs	r3, #4
 800eb26:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800eb28:	463b      	mov	r3, r7
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	4836      	ldr	r0, [pc, #216]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eb2e:	f001 fe3b 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d001      	beq.n	800eb3c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800eb38:	f000 fd7a 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800eb3c:	230e      	movs	r3, #14
 800eb3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800eb40:	2302      	movs	r3, #2
 800eb42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800eb44:	463b      	mov	r3, r7
 800eb46:	4619      	mov	r1, r3
 800eb48:	482f      	ldr	r0, [pc, #188]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eb4a:	f001 fe2d 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d001      	beq.n	800eb58 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800eb54:	f000 fd6c 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800eb58:	2303      	movs	r3, #3
 800eb5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800eb5c:	2303      	movs	r3, #3
 800eb5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800eb60:	463b      	mov	r3, r7
 800eb62:	4619      	mov	r1, r3
 800eb64:	4828      	ldr	r0, [pc, #160]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eb66:	f001 fe1f 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d001      	beq.n	800eb74 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800eb70:	f000 fd5e 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800eb74:	2302      	movs	r3, #2
 800eb76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800eb78:	2304      	movs	r3, #4
 800eb7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800eb7c:	463b      	mov	r3, r7
 800eb7e:	4619      	mov	r1, r3
 800eb80:	4821      	ldr	r0, [pc, #132]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eb82:	f001 fe11 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d001      	beq.n	800eb90 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800eb8c:	f000 fd50 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800eb90:	2304      	movs	r3, #4
 800eb92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800eb94:	2305      	movs	r3, #5
 800eb96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800eb98:	463b      	mov	r3, r7
 800eb9a:	4619      	mov	r1, r3
 800eb9c:	481a      	ldr	r0, [pc, #104]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800eb9e:	f001 fe03 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800eba2:	4603      	mov	r3, r0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800eba8:	f000 fd42 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800ebac:	2305      	movs	r3, #5
 800ebae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800ebb0:	2306      	movs	r3, #6
 800ebb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ebb4:	463b      	mov	r3, r7
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	4813      	ldr	r0, [pc, #76]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800ebba:	f001 fdf5 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800ebbe:	4603      	mov	r3, r0
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d001      	beq.n	800ebc8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800ebc4:	f000 fd34 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800ebc8:	2306      	movs	r3, #6
 800ebca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800ebcc:	2307      	movs	r3, #7
 800ebce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ebd0:	463b      	mov	r3, r7
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	480c      	ldr	r0, [pc, #48]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800ebd6:	f001 fde7 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d001      	beq.n	800ebe4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 800ebe0:	f000 fd26 	bl	800f630 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800ebe4:	2307      	movs	r3, #7
 800ebe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800ebe8:	2308      	movs	r3, #8
 800ebea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800ebec:	463b      	mov	r3, r7
 800ebee:	4619      	mov	r1, r3
 800ebf0:	4805      	ldr	r0, [pc, #20]	; (800ec08 <MX_ADC2_Init+0x15c>)
 800ebf2:	f001 fdd9 	bl	80107a8 <HAL_ADC_ConfigChannel>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800ebfc:	f000 fd18 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800ec00:	bf00      	nop
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}
 800ec08:	20000e80 	.word	0x20000e80
 800ec0c:	40012100 	.word	0x40012100
 800ec10:	0f000001 	.word	0x0f000001

0800ec14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b08c      	sub	sp, #48	; 0x30
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec1c:	f107 031c 	add.w	r3, r7, #28
 800ec20:	2200      	movs	r2, #0
 800ec22:	601a      	str	r2, [r3, #0]
 800ec24:	605a      	str	r2, [r3, #4]
 800ec26:	609a      	str	r2, [r3, #8]
 800ec28:	60da      	str	r2, [r3, #12]
 800ec2a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4a6b      	ldr	r2, [pc, #428]	; (800ede0 <HAL_ADC_MspInit+0x1cc>)
 800ec32:	4293      	cmp	r3, r2
 800ec34:	d157      	bne.n	800ece6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ec36:	2300      	movs	r3, #0
 800ec38:	61bb      	str	r3, [r7, #24]
 800ec3a:	4b6a      	ldr	r3, [pc, #424]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ec3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec3e:	4a69      	ldr	r2, [pc, #420]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ec40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ec44:	6453      	str	r3, [r2, #68]	; 0x44
 800ec46:	4b67      	ldr	r3, [pc, #412]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ec48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ec4e:	61bb      	str	r3, [r7, #24]
 800ec50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ec52:	2300      	movs	r3, #0
 800ec54:	617b      	str	r3, [r7, #20]
 800ec56:	4b63      	ldr	r3, [pc, #396]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ec58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec5a:	4a62      	ldr	r2, [pc, #392]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ec5c:	f043 0304 	orr.w	r3, r3, #4
 800ec60:	6313      	str	r3, [r2, #48]	; 0x30
 800ec62:	4b60      	ldr	r3, [pc, #384]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ec64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec66:	f003 0304 	and.w	r3, r3, #4
 800ec6a:	617b      	str	r3, [r7, #20]
 800ec6c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800ec6e:	2305      	movs	r3, #5
 800ec70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ec72:	2303      	movs	r3, #3
 800ec74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec76:	2300      	movs	r3, #0
 800ec78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ec7a:	f107 031c 	add.w	r3, r7, #28
 800ec7e:	4619      	mov	r1, r3
 800ec80:	4859      	ldr	r0, [pc, #356]	; (800ede8 <HAL_ADC_MspInit+0x1d4>)
 800ec82:	f003 fb3b 	bl	80122fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800ec86:	4b59      	ldr	r3, [pc, #356]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ec88:	4a59      	ldr	r2, [pc, #356]	; (800edf0 <HAL_ADC_MspInit+0x1dc>)
 800ec8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800ec8c:	4b57      	ldr	r3, [pc, #348]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ec8e:	2200      	movs	r2, #0
 800ec90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ec92:	4b56      	ldr	r3, [pc, #344]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ec94:	2200      	movs	r2, #0
 800ec96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800ec98:	4b54      	ldr	r3, [pc, #336]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800ec9e:	4b53      	ldr	r3, [pc, #332]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800eca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800eca4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800eca6:	4b51      	ldr	r3, [pc, #324]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800eca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ecac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ecae:	4b4f      	ldr	r3, [pc, #316]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ecb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ecb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800ecb6:	4b4d      	ldr	r3, [pc, #308]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ecb8:	2200      	movs	r2, #0
 800ecba:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800ecbc:	4b4b      	ldr	r3, [pc, #300]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ecbe:	2200      	movs	r2, #0
 800ecc0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ecc2:	4b4a      	ldr	r3, [pc, #296]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800ecc8:	4848      	ldr	r0, [pc, #288]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ecca:	f002 ffa7 	bl	8011c1c <HAL_DMA_Init>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d001      	beq.n	800ecd8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800ecd4:	f000 fcac 	bl	800f630 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	4a44      	ldr	r2, [pc, #272]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ecdc:	639a      	str	r2, [r3, #56]	; 0x38
 800ecde:	4a43      	ldr	r2, [pc, #268]	; (800edec <HAL_ADC_MspInit+0x1d8>)
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800ece4:	e077      	b.n	800edd6 <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a42      	ldr	r2, [pc, #264]	; (800edf4 <HAL_ADC_MspInit+0x1e0>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d172      	bne.n	800edd6 <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	613b      	str	r3, [r7, #16]
 800ecf4:	4b3b      	ldr	r3, [pc, #236]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ecf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecf8:	4a3a      	ldr	r2, [pc, #232]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ecfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ecfe:	6453      	str	r3, [r2, #68]	; 0x44
 800ed00:	4b38      	ldr	r3, [pc, #224]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ed02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed08:	613b      	str	r3, [r7, #16]
 800ed0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	60fb      	str	r3, [r7, #12]
 800ed10:	4b34      	ldr	r3, [pc, #208]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ed12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed14:	4a33      	ldr	r2, [pc, #204]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ed16:	f043 0304 	orr.w	r3, r3, #4
 800ed1a:	6313      	str	r3, [r2, #48]	; 0x30
 800ed1c:	4b31      	ldr	r3, [pc, #196]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ed1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed20:	f003 0304 	and.w	r3, r3, #4
 800ed24:	60fb      	str	r3, [r7, #12]
 800ed26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed28:	2300      	movs	r3, #0
 800ed2a:	60bb      	str	r3, [r7, #8]
 800ed2c:	4b2d      	ldr	r3, [pc, #180]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ed2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed30:	4a2c      	ldr	r2, [pc, #176]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ed32:	f043 0301 	orr.w	r3, r3, #1
 800ed36:	6313      	str	r3, [r2, #48]	; 0x30
 800ed38:	4b2a      	ldr	r3, [pc, #168]	; (800ede4 <HAL_ADC_MspInit+0x1d0>)
 800ed3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed3c:	f003 0301 	and.w	r3, r3, #1
 800ed40:	60bb      	str	r3, [r7, #8]
 800ed42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 800ed44:	2335      	movs	r3, #53	; 0x35
 800ed46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ed48:	2303      	movs	r3, #3
 800ed4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed50:	f107 031c 	add.w	r3, r7, #28
 800ed54:	4619      	mov	r1, r3
 800ed56:	4824      	ldr	r0, [pc, #144]	; (800ede8 <HAL_ADC_MspInit+0x1d4>)
 800ed58:	f003 fad0 	bl	80122fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 800ed5c:	23fc      	movs	r3, #252	; 0xfc
 800ed5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ed60:	2303      	movs	r3, #3
 800ed62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed64:	2300      	movs	r3, #0
 800ed66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed68:	f107 031c 	add.w	r3, r7, #28
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	4822      	ldr	r0, [pc, #136]	; (800edf8 <HAL_ADC_MspInit+0x1e4>)
 800ed70:	f003 fac4 	bl	80122fc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800ed74:	4b21      	ldr	r3, [pc, #132]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800ed76:	4a22      	ldr	r2, [pc, #136]	; (800ee00 <HAL_ADC_MspInit+0x1ec>)
 800ed78:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800ed7a:	4b20      	ldr	r3, [pc, #128]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800ed7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ed80:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ed82:	4b1e      	ldr	r3, [pc, #120]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800ed84:	2200      	movs	r2, #0
 800ed86:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ed88:	4b1c      	ldr	r3, [pc, #112]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ed8e:	4b1b      	ldr	r3, [pc, #108]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800ed90:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ed94:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ed96:	4b19      	ldr	r3, [pc, #100]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800ed98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed9c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ed9e:	4b17      	ldr	r3, [pc, #92]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800eda0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eda4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800eda6:	4b15      	ldr	r3, [pc, #84]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800edac:	4b13      	ldr	r3, [pc, #76]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800edae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800edb2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800edb4:	4b11      	ldr	r3, [pc, #68]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800edb6:	2200      	movs	r2, #0
 800edb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800edba:	4810      	ldr	r0, [pc, #64]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800edbc:	f002 ff2e 	bl	8011c1c <HAL_DMA_Init>
 800edc0:	4603      	mov	r3, r0
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 800edc6:	f000 fc33 	bl	800f630 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	4a0b      	ldr	r2, [pc, #44]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800edce:	639a      	str	r2, [r3, #56]	; 0x38
 800edd0:	4a0a      	ldr	r2, [pc, #40]	; (800edfc <HAL_ADC_MspInit+0x1e8>)
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6393      	str	r3, [r2, #56]	; 0x38
}
 800edd6:	bf00      	nop
 800edd8:	3730      	adds	r7, #48	; 0x30
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	40012000 	.word	0x40012000
 800ede4:	40023800 	.word	0x40023800
 800ede8:	40020800 	.word	0x40020800
 800edec:	20000ec8 	.word	0x20000ec8
 800edf0:	40026410 	.word	0x40026410
 800edf4:	40012100 	.word	0x40012100
 800edf8:	40020000 	.word	0x40020000
 800edfc:	20000f28 	.word	0x20000f28
 800ee00:	40026440 	.word	0x40026440

0800ee04 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800ee08:	4b17      	ldr	r3, [pc, #92]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee0a:	4a18      	ldr	r2, [pc, #96]	; (800ee6c <MX_CAN1_Init+0x68>)
 800ee0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800ee0e:	4b16      	ldr	r3, [pc, #88]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee10:	2203      	movs	r2, #3
 800ee12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800ee14:	4b14      	ldr	r3, [pc, #80]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee16:	2200      	movs	r2, #0
 800ee18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800ee1a:	4b13      	ldr	r3, [pc, #76]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800ee20:	4b11      	ldr	r3, [pc, #68]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee22:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800ee26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800ee28:	4b0f      	ldr	r3, [pc, #60]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ee2e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800ee30:	4b0d      	ldr	r3, [pc, #52]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee32:	2200      	movs	r2, #0
 800ee34:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800ee36:	4b0c      	ldr	r3, [pc, #48]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee38:	2201      	movs	r2, #1
 800ee3a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800ee3c:	4b0a      	ldr	r3, [pc, #40]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee3e:	2200      	movs	r2, #0
 800ee40:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800ee42:	4b09      	ldr	r3, [pc, #36]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee44:	2201      	movs	r2, #1
 800ee46:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800ee48:	4b07      	ldr	r3, [pc, #28]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee4a:	2200      	movs	r2, #0
 800ee4c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800ee4e:	4b06      	ldr	r3, [pc, #24]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee50:	2200      	movs	r2, #0
 800ee52:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800ee54:	4804      	ldr	r0, [pc, #16]	; (800ee68 <MX_CAN1_Init+0x64>)
 800ee56:	f001 ff47 	bl	8010ce8 <HAL_CAN_Init>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d001      	beq.n	800ee64 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800ee60:	f000 fbe6 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800ee64:	bf00      	nop
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	20000f88 	.word	0x20000f88
 800ee6c:	40006400 	.word	0x40006400

0800ee70 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800ee74:	4b17      	ldr	r3, [pc, #92]	; (800eed4 <MX_CAN2_Init+0x64>)
 800ee76:	4a18      	ldr	r2, [pc, #96]	; (800eed8 <MX_CAN2_Init+0x68>)
 800ee78:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800ee7a:	4b16      	ldr	r3, [pc, #88]	; (800eed4 <MX_CAN2_Init+0x64>)
 800ee7c:	2203      	movs	r2, #3
 800ee7e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800ee80:	4b14      	ldr	r3, [pc, #80]	; (800eed4 <MX_CAN2_Init+0x64>)
 800ee82:	2200      	movs	r2, #0
 800ee84:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800ee86:	4b13      	ldr	r3, [pc, #76]	; (800eed4 <MX_CAN2_Init+0x64>)
 800ee88:	2200      	movs	r2, #0
 800ee8a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800ee8c:	4b11      	ldr	r3, [pc, #68]	; (800eed4 <MX_CAN2_Init+0x64>)
 800ee8e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800ee92:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800ee94:	4b0f      	ldr	r3, [pc, #60]	; (800eed4 <MX_CAN2_Init+0x64>)
 800ee96:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ee9a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800ee9c:	4b0d      	ldr	r3, [pc, #52]	; (800eed4 <MX_CAN2_Init+0x64>)
 800ee9e:	2200      	movs	r2, #0
 800eea0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800eea2:	4b0c      	ldr	r3, [pc, #48]	; (800eed4 <MX_CAN2_Init+0x64>)
 800eea4:	2201      	movs	r2, #1
 800eea6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800eea8:	4b0a      	ldr	r3, [pc, #40]	; (800eed4 <MX_CAN2_Init+0x64>)
 800eeaa:	2200      	movs	r2, #0
 800eeac:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 800eeae:	4b09      	ldr	r3, [pc, #36]	; (800eed4 <MX_CAN2_Init+0x64>)
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800eeb4:	4b07      	ldr	r3, [pc, #28]	; (800eed4 <MX_CAN2_Init+0x64>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800eeba:	4b06      	ldr	r3, [pc, #24]	; (800eed4 <MX_CAN2_Init+0x64>)
 800eebc:	2200      	movs	r2, #0
 800eebe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800eec0:	4804      	ldr	r0, [pc, #16]	; (800eed4 <MX_CAN2_Init+0x64>)
 800eec2:	f001 ff11 	bl	8010ce8 <HAL_CAN_Init>
 800eec6:	4603      	mov	r3, r0
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d001      	beq.n	800eed0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800eecc:	f000 fbb0 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800eed0:	bf00      	nop
 800eed2:	bd80      	pop	{r7, pc}
 800eed4:	20000fb0 	.word	0x20000fb0
 800eed8:	40006800 	.word	0x40006800

0800eedc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b08c      	sub	sp, #48	; 0x30
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eee4:	f107 031c 	add.w	r3, r7, #28
 800eee8:	2200      	movs	r2, #0
 800eeea:	601a      	str	r2, [r3, #0]
 800eeec:	605a      	str	r2, [r3, #4]
 800eeee:	609a      	str	r2, [r3, #8]
 800eef0:	60da      	str	r2, [r3, #12]
 800eef2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	4a5a      	ldr	r2, [pc, #360]	; (800f064 <HAL_CAN_MspInit+0x188>)
 800eefa:	4293      	cmp	r3, r2
 800eefc:	d14d      	bne.n	800ef9a <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800eefe:	4b5a      	ldr	r3, [pc, #360]	; (800f068 <HAL_CAN_MspInit+0x18c>)
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	3301      	adds	r3, #1
 800ef04:	4a58      	ldr	r2, [pc, #352]	; (800f068 <HAL_CAN_MspInit+0x18c>)
 800ef06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800ef08:	4b57      	ldr	r3, [pc, #348]	; (800f068 <HAL_CAN_MspInit+0x18c>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d10d      	bne.n	800ef2c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800ef10:	2300      	movs	r3, #0
 800ef12:	61bb      	str	r3, [r7, #24]
 800ef14:	4b55      	ldr	r3, [pc, #340]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800ef16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef18:	4a54      	ldr	r2, [pc, #336]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800ef1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ef1e:	6413      	str	r3, [r2, #64]	; 0x40
 800ef20:	4b52      	ldr	r3, [pc, #328]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800ef22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef28:	61bb      	str	r3, [r7, #24]
 800ef2a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	617b      	str	r3, [r7, #20]
 800ef30:	4b4e      	ldr	r3, [pc, #312]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800ef32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef34:	4a4d      	ldr	r2, [pc, #308]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800ef36:	f043 0308 	orr.w	r3, r3, #8
 800ef3a:	6313      	str	r3, [r2, #48]	; 0x30
 800ef3c:	4b4b      	ldr	r3, [pc, #300]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800ef3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef40:	f003 0308 	and.w	r3, r3, #8
 800ef44:	617b      	str	r3, [r7, #20]
 800ef46:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ef48:	2303      	movs	r3, #3
 800ef4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef4c:	2302      	movs	r3, #2
 800ef4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef54:	2303      	movs	r3, #3
 800ef56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800ef58:	2309      	movs	r3, #9
 800ef5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ef5c:	f107 031c 	add.w	r3, r7, #28
 800ef60:	4619      	mov	r1, r3
 800ef62:	4843      	ldr	r0, [pc, #268]	; (800f070 <HAL_CAN_MspInit+0x194>)
 800ef64:	f003 f9ca 	bl	80122fc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800ef68:	2200      	movs	r2, #0
 800ef6a:	2105      	movs	r1, #5
 800ef6c:	2013      	movs	r0, #19
 800ef6e:	f002 fe0f 	bl	8011b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800ef72:	2013      	movs	r0, #19
 800ef74:	f002 fe28 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800ef78:	2200      	movs	r2, #0
 800ef7a:	2105      	movs	r1, #5
 800ef7c:	2014      	movs	r0, #20
 800ef7e:	f002 fe07 	bl	8011b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800ef82:	2014      	movs	r0, #20
 800ef84:	f002 fe20 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800ef88:	2200      	movs	r2, #0
 800ef8a:	2105      	movs	r1, #5
 800ef8c:	2015      	movs	r0, #21
 800ef8e:	f002 fdff 	bl	8011b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800ef92:	2015      	movs	r0, #21
 800ef94:	f002 fe18 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800ef98:	e05f      	b.n	800f05a <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	4a35      	ldr	r2, [pc, #212]	; (800f074 <HAL_CAN_MspInit+0x198>)
 800efa0:	4293      	cmp	r3, r2
 800efa2:	d15a      	bne.n	800f05a <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800efa4:	2300      	movs	r3, #0
 800efa6:	613b      	str	r3, [r7, #16]
 800efa8:	4b30      	ldr	r3, [pc, #192]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800efaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efac:	4a2f      	ldr	r2, [pc, #188]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800efae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800efb2:	6413      	str	r3, [r2, #64]	; 0x40
 800efb4:	4b2d      	ldr	r3, [pc, #180]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800efb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800efbc:	613b      	str	r3, [r7, #16]
 800efbe:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800efc0:	4b29      	ldr	r3, [pc, #164]	; (800f068 <HAL_CAN_MspInit+0x18c>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	3301      	adds	r3, #1
 800efc6:	4a28      	ldr	r2, [pc, #160]	; (800f068 <HAL_CAN_MspInit+0x18c>)
 800efc8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800efca:	4b27      	ldr	r3, [pc, #156]	; (800f068 <HAL_CAN_MspInit+0x18c>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	2b01      	cmp	r3, #1
 800efd0:	d10d      	bne.n	800efee <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800efd2:	2300      	movs	r3, #0
 800efd4:	60fb      	str	r3, [r7, #12]
 800efd6:	4b25      	ldr	r3, [pc, #148]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800efd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efda:	4a24      	ldr	r2, [pc, #144]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800efdc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800efe0:	6413      	str	r3, [r2, #64]	; 0x40
 800efe2:	4b22      	ldr	r3, [pc, #136]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800efe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800efe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800efea:	60fb      	str	r3, [r7, #12]
 800efec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800efee:	2300      	movs	r3, #0
 800eff0:	60bb      	str	r3, [r7, #8]
 800eff2:	4b1e      	ldr	r3, [pc, #120]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800eff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eff6:	4a1d      	ldr	r2, [pc, #116]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800eff8:	f043 0302 	orr.w	r3, r3, #2
 800effc:	6313      	str	r3, [r2, #48]	; 0x30
 800effe:	4b1b      	ldr	r3, [pc, #108]	; (800f06c <HAL_CAN_MspInit+0x190>)
 800f000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f002:	f003 0302 	and.w	r3, r3, #2
 800f006:	60bb      	str	r3, [r7, #8]
 800f008:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800f00a:	2360      	movs	r3, #96	; 0x60
 800f00c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f00e:	2302      	movs	r3, #2
 800f010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f012:	2300      	movs	r3, #0
 800f014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f016:	2303      	movs	r3, #3
 800f018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800f01a:	2309      	movs	r3, #9
 800f01c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f01e:	f107 031c 	add.w	r3, r7, #28
 800f022:	4619      	mov	r1, r3
 800f024:	4814      	ldr	r0, [pc, #80]	; (800f078 <HAL_CAN_MspInit+0x19c>)
 800f026:	f003 f969 	bl	80122fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 800f02a:	2200      	movs	r2, #0
 800f02c:	2105      	movs	r1, #5
 800f02e:	203f      	movs	r0, #63	; 0x3f
 800f030:	f002 fdae 	bl	8011b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800f034:	203f      	movs	r0, #63	; 0x3f
 800f036:	f002 fdc7 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800f03a:	2200      	movs	r2, #0
 800f03c:	2105      	movs	r1, #5
 800f03e:	2040      	movs	r0, #64	; 0x40
 800f040:	f002 fda6 	bl	8011b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800f044:	2040      	movs	r0, #64	; 0x40
 800f046:	f002 fdbf 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800f04a:	2200      	movs	r2, #0
 800f04c:	2105      	movs	r1, #5
 800f04e:	2041      	movs	r0, #65	; 0x41
 800f050:	f002 fd9e 	bl	8011b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800f054:	2041      	movs	r0, #65	; 0x41
 800f056:	f002 fdb7 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
}
 800f05a:	bf00      	nop
 800f05c:	3730      	adds	r7, #48	; 0x30
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	40006400 	.word	0x40006400
 800f068:	20000fd8 	.word	0x20000fd8
 800f06c:	40023800 	.word	0x40023800
 800f070:	40020c00 	.word	0x40020c00
 800f074:	40006800 	.word	0x40006800
 800f078:	40020400 	.word	0x40020400

0800f07c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800f080:	4b06      	ldr	r3, [pc, #24]	; (800f09c <MX_CRC_Init+0x20>)
 800f082:	4a07      	ldr	r2, [pc, #28]	; (800f0a0 <MX_CRC_Init+0x24>)
 800f084:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800f086:	4805      	ldr	r0, [pc, #20]	; (800f09c <MX_CRC_Init+0x20>)
 800f088:	f002 fdac 	bl	8011be4 <HAL_CRC_Init>
 800f08c:	4603      	mov	r3, r0
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d001      	beq.n	800f096 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800f092:	f000 facd 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800f096:	bf00      	nop
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	20000fdc 	.word	0x20000fdc
 800f0a0:	40023000 	.word	0x40023000

0800f0a4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b085      	sub	sp, #20
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a0b      	ldr	r2, [pc, #44]	; (800f0e0 <HAL_CRC_MspInit+0x3c>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d10d      	bne.n	800f0d2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	60fb      	str	r3, [r7, #12]
 800f0ba:	4b0a      	ldr	r3, [pc, #40]	; (800f0e4 <HAL_CRC_MspInit+0x40>)
 800f0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0be:	4a09      	ldr	r2, [pc, #36]	; (800f0e4 <HAL_CRC_MspInit+0x40>)
 800f0c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f0c4:	6313      	str	r3, [r2, #48]	; 0x30
 800f0c6:	4b07      	ldr	r3, [pc, #28]	; (800f0e4 <HAL_CRC_MspInit+0x40>)
 800f0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f0ce:	60fb      	str	r3, [r7, #12]
 800f0d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800f0d2:	bf00      	nop
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	40023000 	.word	0x40023000
 800f0e4:	40023800 	.word	0x40023800

0800f0e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800f0e8:	b580      	push	{r7, lr}
 800f0ea:	b082      	sub	sp, #8
 800f0ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	607b      	str	r3, [r7, #4]
 800f0f2:	4b18      	ldr	r3, [pc, #96]	; (800f154 <MX_DMA_Init+0x6c>)
 800f0f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0f6:	4a17      	ldr	r2, [pc, #92]	; (800f154 <MX_DMA_Init+0x6c>)
 800f0f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f0fc:	6313      	str	r3, [r2, #48]	; 0x30
 800f0fe:	4b15      	ldr	r3, [pc, #84]	; (800f154 <MX_DMA_Init+0x6c>)
 800f100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f106:	607b      	str	r3, [r7, #4]
 800f108:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800f10a:	2200      	movs	r2, #0
 800f10c:	2105      	movs	r1, #5
 800f10e:	2038      	movs	r0, #56	; 0x38
 800f110:	f002 fd3e 	bl	8011b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f114:	2038      	movs	r0, #56	; 0x38
 800f116:	f002 fd57 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800f11a:	2200      	movs	r2, #0
 800f11c:	2105      	movs	r1, #5
 800f11e:	203a      	movs	r0, #58	; 0x3a
 800f120:	f002 fd36 	bl	8011b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800f124:	203a      	movs	r0, #58	; 0x3a
 800f126:	f002 fd4f 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800f12a:	2200      	movs	r2, #0
 800f12c:	2105      	movs	r1, #5
 800f12e:	2044      	movs	r0, #68	; 0x44
 800f130:	f002 fd2e 	bl	8011b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800f134:	2044      	movs	r0, #68	; 0x44
 800f136:	f002 fd47 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800f13a:	2200      	movs	r2, #0
 800f13c:	2105      	movs	r1, #5
 800f13e:	2046      	movs	r0, #70	; 0x46
 800f140:	f002 fd26 	bl	8011b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800f144:	2046      	movs	r0, #70	; 0x46
 800f146:	f002 fd3f 	bl	8011bc8 <HAL_NVIC_EnableIRQ>

}
 800f14a:	bf00      	nop
 800f14c:	3708      	adds	r7, #8
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	40023800 	.word	0x40023800

0800f158 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800f158:	b480      	push	{r7}
 800f15a:	af00      	add	r7, sp, #0

}
 800f15c:	bf00      	nop
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr

0800f166 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800f166:	b480      	push	{r7}
 800f168:	af00      	add	r7, sp, #0
return 0;
 800f16a:	2300      	movs	r3, #0
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr

0800f176 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800f176:	b480      	push	{r7}
 800f178:	b083      	sub	sp, #12
 800f17a:	af00      	add	r7, sp, #0
 800f17c:	6078      	str	r0, [r7, #4]
 800f17e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800f180:	bf00      	nop
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800f18c:	b480      	push	{r7}
 800f18e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800f190:	bf00      	nop
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr
	...

0800f19c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800f19c:	b580      	push	{r7, lr}
 800f19e:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 800f1a0:	4a18      	ldr	r2, [pc, #96]	; (800f204 <MX_FREERTOS_Init+0x68>)
 800f1a2:	2101      	movs	r1, #1
 800f1a4:	2010      	movs	r0, #16
 800f1a6:	f008 fab7 	bl	8017718 <osMessageQueueNew>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	4a16      	ldr	r2, [pc, #88]	; (800f208 <MX_FREERTOS_Init+0x6c>)
 800f1ae:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800f1b0:	4a16      	ldr	r2, [pc, #88]	; (800f20c <MX_FREERTOS_Init+0x70>)
 800f1b2:	2100      	movs	r1, #0
 800f1b4:	4816      	ldr	r0, [pc, #88]	; (800f210 <MX_FREERTOS_Init+0x74>)
 800f1b6:	f007 ffb5 	bl	8017124 <osThreadNew>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	4a15      	ldr	r2, [pc, #84]	; (800f214 <MX_FREERTOS_Init+0x78>)
 800f1be:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 800f1c0:	4a15      	ldr	r2, [pc, #84]	; (800f218 <MX_FREERTOS_Init+0x7c>)
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	4815      	ldr	r0, [pc, #84]	; (800f21c <MX_FREERTOS_Init+0x80>)
 800f1c6:	f007 ffad 	bl	8017124 <osThreadNew>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	4a14      	ldr	r2, [pc, #80]	; (800f220 <MX_FREERTOS_Init+0x84>)
 800f1ce:	6013      	str	r3, [r2, #0]

  /* creation of fms */
  fmsHandle = osThreadNew(state_maschine_entry, NULL, &fms_attributes);
 800f1d0:	4a14      	ldr	r2, [pc, #80]	; (800f224 <MX_FREERTOS_Init+0x88>)
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	4814      	ldr	r0, [pc, #80]	; (800f228 <MX_FREERTOS_Init+0x8c>)
 800f1d6:	f007 ffa5 	bl	8017124 <osThreadNew>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	4a13      	ldr	r2, [pc, #76]	; (800f22c <MX_FREERTOS_Init+0x90>)
 800f1de:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 800f1e0:	4a13      	ldr	r2, [pc, #76]	; (800f230 <MX_FREERTOS_Init+0x94>)
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	4813      	ldr	r0, [pc, #76]	; (800f234 <MX_FREERTOS_Init+0x98>)
 800f1e6:	f007 ff9d 	bl	8017124 <osThreadNew>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	4a12      	ldr	r2, [pc, #72]	; (800f238 <MX_FREERTOS_Init+0x9c>)
 800f1ee:	6013      	str	r3, [r2, #0]

  /* creation of info_task */
  info_taskHandle = osThreadNew(microcontroller_info_entry, NULL, &info_task_attributes);
 800f1f0:	4a12      	ldr	r2, [pc, #72]	; (800f23c <MX_FREERTOS_Init+0xa0>)
 800f1f2:	2100      	movs	r1, #0
 800f1f4:	4812      	ldr	r0, [pc, #72]	; (800f240 <MX_FREERTOS_Init+0xa4>)
 800f1f6:	f007 ff95 	bl	8017124 <osThreadNew>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	4a11      	ldr	r2, [pc, #68]	; (800f244 <MX_FREERTOS_Init+0xa8>)
 800f1fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800f200:	bf00      	nop
 800f202:	bd80      	pop	{r7, pc}
 800f204:	0801f5d0 	.word	0x0801f5d0
 800f208:	200012b8 	.word	0x200012b8
 800f20c:	0801f51c 	.word	0x0801f51c
 800f210:	0800f249 	.word	0x0800f249
 800f214:	20000fe4 	.word	0x20000fe4
 800f218:	0801f540 	.word	0x0801f540
 800f21c:	080022d5 	.word	0x080022d5
 800f220:	200012a8 	.word	0x200012a8
 800f224:	0801f564 	.word	0x0801f564
 800f228:	0800e88b 	.word	0x0800e88b
 800f22c:	200012ac 	.word	0x200012ac
 800f230:	0801f588 	.word	0x0801f588
 800f234:	0800de11 	.word	0x0800de11
 800f238:	200012b0 	.word	0x200012b0
 800f23c:	0801f5ac 	.word	0x0801f5ac
 800f240:	0800e7e9 	.word	0x0800e7e9
 800f244:	200012b4 	.word	0x200012b4

0800f248 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800f250:	2001      	movs	r0, #1
 800f252:	f007 fff9 	bl	8017248 <osDelay>
 800f256:	e7fb      	b.n	800f250 <StartDefaultTask+0x8>

0800f258 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b08a      	sub	sp, #40	; 0x28
 800f25c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f25e:	f107 0314 	add.w	r3, r7, #20
 800f262:	2200      	movs	r2, #0
 800f264:	601a      	str	r2, [r3, #0]
 800f266:	605a      	str	r2, [r3, #4]
 800f268:	609a      	str	r2, [r3, #8]
 800f26a:	60da      	str	r2, [r3, #12]
 800f26c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f26e:	2300      	movs	r3, #0
 800f270:	613b      	str	r3, [r7, #16]
 800f272:	4b58      	ldr	r3, [pc, #352]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f276:	4a57      	ldr	r2, [pc, #348]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f278:	f043 0304 	orr.w	r3, r3, #4
 800f27c:	6313      	str	r3, [r2, #48]	; 0x30
 800f27e:	4b55      	ldr	r3, [pc, #340]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f282:	f003 0304 	and.w	r3, r3, #4
 800f286:	613b      	str	r3, [r7, #16]
 800f288:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f28a:	2300      	movs	r3, #0
 800f28c:	60fb      	str	r3, [r7, #12]
 800f28e:	4b51      	ldr	r3, [pc, #324]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f292:	4a50      	ldr	r2, [pc, #320]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f298:	6313      	str	r3, [r2, #48]	; 0x30
 800f29a:	4b4e      	ldr	r3, [pc, #312]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f29e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2a2:	60fb      	str	r3, [r7, #12]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	60bb      	str	r3, [r7, #8]
 800f2aa:	4b4a      	ldr	r3, [pc, #296]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ae:	4a49      	ldr	r2, [pc, #292]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f2b0:	f043 0301 	orr.w	r3, r3, #1
 800f2b4:	6313      	str	r3, [r2, #48]	; 0x30
 800f2b6:	4b47      	ldr	r3, [pc, #284]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ba:	f003 0301 	and.w	r3, r3, #1
 800f2be:	60bb      	str	r3, [r7, #8]
 800f2c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	607b      	str	r3, [r7, #4]
 800f2c6:	4b43      	ldr	r3, [pc, #268]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ca:	4a42      	ldr	r2, [pc, #264]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f2cc:	f043 0302 	orr.w	r3, r3, #2
 800f2d0:	6313      	str	r3, [r2, #48]	; 0x30
 800f2d2:	4b40      	ldr	r3, [pc, #256]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2d6:	f003 0302 	and.w	r3, r3, #2
 800f2da:	607b      	str	r3, [r7, #4]
 800f2dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800f2de:	2300      	movs	r3, #0
 800f2e0:	603b      	str	r3, [r7, #0]
 800f2e2:	4b3c      	ldr	r3, [pc, #240]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2e6:	4a3b      	ldr	r2, [pc, #236]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f2e8:	f043 0308 	orr.w	r3, r3, #8
 800f2ec:	6313      	str	r3, [r2, #48]	; 0x30
 800f2ee:	4b39      	ldr	r3, [pc, #228]	; (800f3d4 <MX_GPIO_Init+0x17c>)
 800f2f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2f2:	f003 0308 	and.w	r3, r3, #8
 800f2f6:	603b      	str	r3, [r7, #0]
 800f2f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f641 4102 	movw	r1, #7170	; 0x1c02
 800f300:	4835      	ldr	r0, [pc, #212]	; (800f3d8 <MX_GPIO_Init+0x180>)
 800f302:	f003 f9af 	bl	8012664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN4_GPIO_Port, DIN4_Pin, GPIO_PIN_SET);
 800f306:	2201      	movs	r2, #1
 800f308:	2180      	movs	r1, #128	; 0x80
 800f30a:	4833      	ldr	r0, [pc, #204]	; (800f3d8 <MX_GPIO_Init+0x180>)
 800f30c:	f003 f9aa 	bl	8012664 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800f310:	2305      	movs	r3, #5
 800f312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f314:	2303      	movs	r3, #3
 800f316:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f318:	2300      	movs	r3, #0
 800f31a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f31c:	f107 0314 	add.w	r3, r7, #20
 800f320:	4619      	mov	r1, r3
 800f322:	482e      	ldr	r0, [pc, #184]	; (800f3dc <MX_GPIO_Init+0x184>)
 800f324:	f002 ffea 	bl	80122fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIN1_Pin|DIN2_Pin;
 800f328:	230a      	movs	r3, #10
 800f32a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800f32c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800f330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f332:	2300      	movs	r3, #0
 800f334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f336:	f107 0314 	add.w	r3, r7, #20
 800f33a:	4619      	mov	r1, r3
 800f33c:	4827      	ldr	r0, [pc, #156]	; (800f3dc <MX_GPIO_Init+0x184>)
 800f33e:	f002 ffdd 	bl	80122fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 800f342:	f641 4302 	movw	r3, #7170	; 0x1c02
 800f346:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f348:	2301      	movs	r3, #1
 800f34a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f34c:	2300      	movs	r3, #0
 800f34e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f350:	2300      	movs	r3, #0
 800f352:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f354:	f107 0314 	add.w	r3, r7, #20
 800f358:	4619      	mov	r1, r3
 800f35a:	481f      	ldr	r0, [pc, #124]	; (800f3d8 <MX_GPIO_Init+0x180>)
 800f35c:	f002 ffce 	bl	80122fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 800f360:	2318      	movs	r3, #24
 800f362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f364:	2300      	movs	r3, #0
 800f366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f368:	2300      	movs	r3, #0
 800f36a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800f36c:	f107 0314 	add.w	r3, r7, #20
 800f370:	4619      	mov	r1, r3
 800f372:	481b      	ldr	r0, [pc, #108]	; (800f3e0 <MX_GPIO_Init+0x188>)
 800f374:	f002 ffc2 	bl	80122fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN3_Pin;
 800f378:	2310      	movs	r3, #16
 800f37a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f37c:	2300      	movs	r3, #0
 800f37e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f380:	2300      	movs	r3, #0
 800f382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN3_GPIO_Port, &GPIO_InitStruct);
 800f384:	f107 0314 	add.w	r3, r7, #20
 800f388:	4619      	mov	r1, r3
 800f38a:	4813      	ldr	r0, [pc, #76]	; (800f3d8 <MX_GPIO_Init+0x180>)
 800f38c:	f002 ffb6 	bl	80122fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN4_Pin;
 800f390:	2380      	movs	r3, #128	; 0x80
 800f392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f394:	2301      	movs	r3, #1
 800f396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800f398:	2302      	movs	r3, #2
 800f39a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f39c:	2300      	movs	r3, #0
 800f39e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN4_GPIO_Port, &GPIO_InitStruct);
 800f3a0:	f107 0314 	add.w	r3, r7, #20
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	480c      	ldr	r0, [pc, #48]	; (800f3d8 <MX_GPIO_Init+0x180>)
 800f3a8:	f002 ffa8 	bl	80122fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	2105      	movs	r1, #5
 800f3b0:	2007      	movs	r0, #7
 800f3b2:	f002 fbed 	bl	8011b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800f3b6:	2007      	movs	r0, #7
 800f3b8:	f002 fc06 	bl	8011bc8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800f3bc:	2200      	movs	r2, #0
 800f3be:	2105      	movs	r1, #5
 800f3c0:	2009      	movs	r0, #9
 800f3c2:	f002 fbe5 	bl	8011b90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800f3c6:	2009      	movs	r0, #9
 800f3c8:	f002 fbfe 	bl	8011bc8 <HAL_NVIC_EnableIRQ>

}
 800f3cc:	bf00      	nop
 800f3ce:	3728      	adds	r7, #40	; 0x28
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	40023800 	.word	0x40023800
 800f3d8:	40020400 	.word	0x40020400
 800f3dc:	40020800 	.word	0x40020800
 800f3e0:	40020c00 	.word	0x40020c00

0800f3e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800f3e8:	4b12      	ldr	r3, [pc, #72]	; (800f434 <MX_I2C1_Init+0x50>)
 800f3ea:	4a13      	ldr	r2, [pc, #76]	; (800f438 <MX_I2C1_Init+0x54>)
 800f3ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800f3ee:	4b11      	ldr	r3, [pc, #68]	; (800f434 <MX_I2C1_Init+0x50>)
 800f3f0:	4a12      	ldr	r2, [pc, #72]	; (800f43c <MX_I2C1_Init+0x58>)
 800f3f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800f3f4:	4b0f      	ldr	r3, [pc, #60]	; (800f434 <MX_I2C1_Init+0x50>)
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800f3fa:	4b0e      	ldr	r3, [pc, #56]	; (800f434 <MX_I2C1_Init+0x50>)
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800f400:	4b0c      	ldr	r3, [pc, #48]	; (800f434 <MX_I2C1_Init+0x50>)
 800f402:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800f408:	4b0a      	ldr	r3, [pc, #40]	; (800f434 <MX_I2C1_Init+0x50>)
 800f40a:	2200      	movs	r2, #0
 800f40c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800f40e:	4b09      	ldr	r3, [pc, #36]	; (800f434 <MX_I2C1_Init+0x50>)
 800f410:	2200      	movs	r2, #0
 800f412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800f414:	4b07      	ldr	r3, [pc, #28]	; (800f434 <MX_I2C1_Init+0x50>)
 800f416:	2200      	movs	r2, #0
 800f418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800f41a:	4b06      	ldr	r3, [pc, #24]	; (800f434 <MX_I2C1_Init+0x50>)
 800f41c:	2200      	movs	r2, #0
 800f41e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800f420:	4804      	ldr	r0, [pc, #16]	; (800f434 <MX_I2C1_Init+0x50>)
 800f422:	f003 f951 	bl	80126c8 <HAL_I2C_Init>
 800f426:	4603      	mov	r3, r0
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d001      	beq.n	800f430 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800f42c:	f000 f900 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800f430:	bf00      	nop
 800f432:	bd80      	pop	{r7, pc}
 800f434:	200012bc 	.word	0x200012bc
 800f438:	40005400 	.word	0x40005400
 800f43c:	000186a0 	.word	0x000186a0

0800f440 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b08a      	sub	sp, #40	; 0x28
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f448:	f107 0314 	add.w	r3, r7, #20
 800f44c:	2200      	movs	r2, #0
 800f44e:	601a      	str	r2, [r3, #0]
 800f450:	605a      	str	r2, [r3, #4]
 800f452:	609a      	str	r2, [r3, #8]
 800f454:	60da      	str	r2, [r3, #12]
 800f456:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	681b      	ldr	r3, [r3, #0]
 800f45c:	4a19      	ldr	r2, [pc, #100]	; (800f4c4 <HAL_I2C_MspInit+0x84>)
 800f45e:	4293      	cmp	r3, r2
 800f460:	d12c      	bne.n	800f4bc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f462:	2300      	movs	r3, #0
 800f464:	613b      	str	r3, [r7, #16]
 800f466:	4b18      	ldr	r3, [pc, #96]	; (800f4c8 <HAL_I2C_MspInit+0x88>)
 800f468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f46a:	4a17      	ldr	r2, [pc, #92]	; (800f4c8 <HAL_I2C_MspInit+0x88>)
 800f46c:	f043 0302 	orr.w	r3, r3, #2
 800f470:	6313      	str	r3, [r2, #48]	; 0x30
 800f472:	4b15      	ldr	r3, [pc, #84]	; (800f4c8 <HAL_I2C_MspInit+0x88>)
 800f474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f476:	f003 0302 	and.w	r3, r3, #2
 800f47a:	613b      	str	r3, [r7, #16]
 800f47c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 800f47e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800f482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800f484:	2312      	movs	r3, #18
 800f486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f488:	2301      	movs	r3, #1
 800f48a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f48c:	2303      	movs	r3, #3
 800f48e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800f490:	2304      	movs	r3, #4
 800f492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f494:	f107 0314 	add.w	r3, r7, #20
 800f498:	4619      	mov	r1, r3
 800f49a:	480c      	ldr	r0, [pc, #48]	; (800f4cc <HAL_I2C_MspInit+0x8c>)
 800f49c:	f002 ff2e 	bl	80122fc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	60fb      	str	r3, [r7, #12]
 800f4a4:	4b08      	ldr	r3, [pc, #32]	; (800f4c8 <HAL_I2C_MspInit+0x88>)
 800f4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a8:	4a07      	ldr	r2, [pc, #28]	; (800f4c8 <HAL_I2C_MspInit+0x88>)
 800f4aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800f4ae:	6413      	str	r3, [r2, #64]	; 0x40
 800f4b0:	4b05      	ldr	r3, [pc, #20]	; (800f4c8 <HAL_I2C_MspInit+0x88>)
 800f4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f4b8:	60fb      	str	r3, [r7, #12]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800f4bc:	bf00      	nop
 800f4be:	3728      	adds	r7, #40	; 0x28
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}
 800f4c4:	40005400 	.word	0x40005400
 800f4c8:	40023800 	.word	0x40023800
 800f4cc:	40020400 	.word	0x40020400

0800f4d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f4d4:	f000 ffc8 	bl	8010468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f4d8:	f000 f82c 	bl	800f534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f4dc:	f7ff febc 	bl	800f258 <MX_GPIO_Init>
  MX_DMA_Init();
 800f4e0:	f7ff fe02 	bl	800f0e8 <MX_DMA_Init>
  MX_ADC1_Init();
 800f4e4:	f7ff fa66 	bl	800e9b4 <MX_ADC1_Init>
  MX_CAN1_Init();
 800f4e8:	f7ff fc8c 	bl	800ee04 <MX_CAN1_Init>
  MX_CAN2_Init();
 800f4ec:	f7ff fcc0 	bl	800ee70 <MX_CAN2_Init>
  MX_CRC_Init();
 800f4f0:	f7ff fdc4 	bl	800f07c <MX_CRC_Init>
  MX_RNG_Init();
 800f4f4:	f000 f8a2 	bl	800f63c <MX_RNG_Init>
  MX_USART2_UART_Init();
 800f4f8:	f000 fe7e 	bl	80101f8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800f4fc:	f000 fc0c 	bl	800fd18 <MX_TIM4_Init>
  MX_ADC2_Init();
 800f500:	f7ff fad4 	bl	800eaac <MX_ADC2_Init>
  MX_I2C1_Init();
 800f504:	f7ff ff6e 	bl	800f3e4 <MX_I2C1_Init>
  MX_SPI2_Init();
 800f508:	f000 f8ce 	bl	800f6a8 <MX_SPI2_Init>
  MX_TIM5_Init();
 800f50c:	f000 fc90 	bl	800fe30 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800f510:	f000 fe48 	bl	80101a4 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800f514:	f000 fd1a 	bl	800ff4c <MX_TIM14_Init>
  MX_TIM2_Init();
 800f518:	f000 fb62 	bl	800fbe0 <MX_TIM2_Init>
  MX_TIM9_Init();
 800f51c:	f000 fcdc 	bl	800fed8 <MX_TIM9_Init>
  MX_TIM3_Init();
 800f520:	f000 fbac 	bl	800fc7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800f524:	f007 fdb4 	bl	8017090 <osKernelInitialize>
  MX_FREERTOS_Init();
 800f528:	f7ff fe38 	bl	800f19c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800f52c:	f007 fdd4 	bl	80170d8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800f530:	e7fe      	b.n	800f530 <main+0x60>
	...

0800f534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b094      	sub	sp, #80	; 0x50
 800f538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f53a:	f107 0320 	add.w	r3, r7, #32
 800f53e:	2230      	movs	r2, #48	; 0x30
 800f540:	2100      	movs	r1, #0
 800f542:	4618      	mov	r0, r3
 800f544:	f00c fdd6 	bl	801c0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f548:	f107 030c 	add.w	r3, r7, #12
 800f54c:	2200      	movs	r2, #0
 800f54e:	601a      	str	r2, [r3, #0]
 800f550:	605a      	str	r2, [r3, #4]
 800f552:	609a      	str	r2, [r3, #8]
 800f554:	60da      	str	r2, [r3, #12]
 800f556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f558:	2300      	movs	r3, #0
 800f55a:	60bb      	str	r3, [r7, #8]
 800f55c:	4b28      	ldr	r3, [pc, #160]	; (800f600 <SystemClock_Config+0xcc>)
 800f55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f560:	4a27      	ldr	r2, [pc, #156]	; (800f600 <SystemClock_Config+0xcc>)
 800f562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f566:	6413      	str	r3, [r2, #64]	; 0x40
 800f568:	4b25      	ldr	r3, [pc, #148]	; (800f600 <SystemClock_Config+0xcc>)
 800f56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f56c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f570:	60bb      	str	r3, [r7, #8]
 800f572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f574:	2300      	movs	r3, #0
 800f576:	607b      	str	r3, [r7, #4]
 800f578:	4b22      	ldr	r3, [pc, #136]	; (800f604 <SystemClock_Config+0xd0>)
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	4a21      	ldr	r2, [pc, #132]	; (800f604 <SystemClock_Config+0xd0>)
 800f57e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f582:	6013      	str	r3, [r2, #0]
 800f584:	4b1f      	ldr	r3, [pc, #124]	; (800f604 <SystemClock_Config+0xd0>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f58c:	607b      	str	r3, [r7, #4]
 800f58e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800f590:	2301      	movs	r3, #1
 800f592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800f594:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f59a:	2302      	movs	r3, #2
 800f59c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800f59e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800f5a4:	2308      	movs	r3, #8
 800f5a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800f5a8:	23a8      	movs	r3, #168	; 0xa8
 800f5aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f5ac:	2302      	movs	r3, #2
 800f5ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800f5b0:	2307      	movs	r3, #7
 800f5b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f5b4:	f107 0320 	add.w	r3, r7, #32
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f003 f9c9 	bl	8012950 <HAL_RCC_OscConfig>
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	d001      	beq.n	800f5c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800f5c4:	f000 f834 	bl	800f630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f5c8:	230f      	movs	r3, #15
 800f5ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f5cc:	2302      	movs	r3, #2
 800f5ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f5d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f5d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f5da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f5e0:	f107 030c 	add.w	r3, r7, #12
 800f5e4:	2105      	movs	r1, #5
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f003 fc2a 	bl	8012e40 <HAL_RCC_ClockConfig>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d001      	beq.n	800f5f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800f5f2:	f000 f81d 	bl	800f630 <Error_Handler>
  }
}
 800f5f6:	bf00      	nop
 800f5f8:	3750      	adds	r7, #80	; 0x50
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	40023800 	.word	0x40023800
 800f604:	40007000 	.word	0x40007000

0800f608 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b082      	sub	sp, #8
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	4a05      	ldr	r2, [pc, #20]	; (800f62c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800f616:	4293      	cmp	r3, r2
 800f618:	d101      	bne.n	800f61e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800f61a:	f000 ff47 	bl	80104ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  PeriodElapsedCallback(htim);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f006 f82b 	bl	801567a <PeriodElapsedCallback>

  /* USER CODE END Callback 1 */
}
 800f624:	bf00      	nop
 800f626:	3708      	adds	r7, #8
 800f628:	46bd      	mov	sp, r7
 800f62a:	bd80      	pop	{r7, pc}
 800f62c:	40010000 	.word	0x40010000

0800f630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f630:	b480      	push	{r7}
 800f632:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800f634:	b672      	cpsid	i
}
 800f636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800f638:	e7fe      	b.n	800f638 <Error_Handler+0x8>
	...

0800f63c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800f640:	4b06      	ldr	r3, [pc, #24]	; (800f65c <MX_RNG_Init+0x20>)
 800f642:	4a07      	ldr	r2, [pc, #28]	; (800f660 <MX_RNG_Init+0x24>)
 800f644:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800f646:	4805      	ldr	r0, [pc, #20]	; (800f65c <MX_RNG_Init+0x20>)
 800f648:	f003 fe4a 	bl	80132e0 <HAL_RNG_Init>
 800f64c:	4603      	mov	r3, r0
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d001      	beq.n	800f656 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800f652:	f7ff ffed 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800f656:	bf00      	nop
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	20001310 	.word	0x20001310
 800f660:	50060800 	.word	0x50060800

0800f664 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800f664:	b480      	push	{r7}
 800f666:	b085      	sub	sp, #20
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	4a0b      	ldr	r2, [pc, #44]	; (800f6a0 <HAL_RNG_MspInit+0x3c>)
 800f672:	4293      	cmp	r3, r2
 800f674:	d10d      	bne.n	800f692 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800f676:	2300      	movs	r3, #0
 800f678:	60fb      	str	r3, [r7, #12]
 800f67a:	4b0a      	ldr	r3, [pc, #40]	; (800f6a4 <HAL_RNG_MspInit+0x40>)
 800f67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f67e:	4a09      	ldr	r2, [pc, #36]	; (800f6a4 <HAL_RNG_MspInit+0x40>)
 800f680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f684:	6353      	str	r3, [r2, #52]	; 0x34
 800f686:	4b07      	ldr	r3, [pc, #28]	; (800f6a4 <HAL_RNG_MspInit+0x40>)
 800f688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f68e:	60fb      	str	r3, [r7, #12]
 800f690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800f692:	bf00      	nop
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr
 800f69e:	bf00      	nop
 800f6a0:	50060800 	.word	0x50060800
 800f6a4:	40023800 	.word	0x40023800

0800f6a8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800f6ac:	4b17      	ldr	r3, [pc, #92]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6ae:	4a18      	ldr	r2, [pc, #96]	; (800f710 <MX_SPI2_Init+0x68>)
 800f6b0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800f6b2:	4b16      	ldr	r3, [pc, #88]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800f6b8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800f6ba:	4b14      	ldr	r3, [pc, #80]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800f6c0:	4b12      	ldr	r3, [pc, #72]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800f6c6:	4b11      	ldr	r3, [pc, #68]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800f6cc:	4b0f      	ldr	r3, [pc, #60]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6ce:	2200      	movs	r2, #0
 800f6d0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800f6d2:	4b0e      	ldr	r3, [pc, #56]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6d8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800f6da:	4b0c      	ldr	r3, [pc, #48]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800f6e0:	4b0a      	ldr	r3, [pc, #40]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800f6e6:	4b09      	ldr	r3, [pc, #36]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f6ec:	4b07      	ldr	r3, [pc, #28]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800f6f2:	4b06      	ldr	r3, [pc, #24]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6f4:	220a      	movs	r2, #10
 800f6f6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800f6f8:	4804      	ldr	r0, [pc, #16]	; (800f70c <MX_SPI2_Init+0x64>)
 800f6fa:	f003 fe1b 	bl	8013334 <HAL_SPI_Init>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	d001      	beq.n	800f708 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800f704:	f7ff ff94 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800f708:	bf00      	nop
 800f70a:	bd80      	pop	{r7, pc}
 800f70c:	20001320 	.word	0x20001320
 800f710:	40003800 	.word	0x40003800

0800f714 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b08a      	sub	sp, #40	; 0x28
 800f718:	af00      	add	r7, sp, #0
 800f71a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f71c:	f107 0314 	add.w	r3, r7, #20
 800f720:	2200      	movs	r2, #0
 800f722:	601a      	str	r2, [r3, #0]
 800f724:	605a      	str	r2, [r3, #4]
 800f726:	609a      	str	r2, [r3, #8]
 800f728:	60da      	str	r2, [r3, #12]
 800f72a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	4a19      	ldr	r2, [pc, #100]	; (800f798 <HAL_SPI_MspInit+0x84>)
 800f732:	4293      	cmp	r3, r2
 800f734:	d12c      	bne.n	800f790 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800f736:	2300      	movs	r3, #0
 800f738:	613b      	str	r3, [r7, #16]
 800f73a:	4b18      	ldr	r3, [pc, #96]	; (800f79c <HAL_SPI_MspInit+0x88>)
 800f73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f73e:	4a17      	ldr	r2, [pc, #92]	; (800f79c <HAL_SPI_MspInit+0x88>)
 800f740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f744:	6413      	str	r3, [r2, #64]	; 0x40
 800f746:	4b15      	ldr	r3, [pc, #84]	; (800f79c <HAL_SPI_MspInit+0x88>)
 800f748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f74a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f74e:	613b      	str	r3, [r7, #16]
 800f750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f752:	2300      	movs	r3, #0
 800f754:	60fb      	str	r3, [r7, #12]
 800f756:	4b11      	ldr	r3, [pc, #68]	; (800f79c <HAL_SPI_MspInit+0x88>)
 800f758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f75a:	4a10      	ldr	r2, [pc, #64]	; (800f79c <HAL_SPI_MspInit+0x88>)
 800f75c:	f043 0302 	orr.w	r3, r3, #2
 800f760:	6313      	str	r3, [r2, #48]	; 0x30
 800f762:	4b0e      	ldr	r3, [pc, #56]	; (800f79c <HAL_SPI_MspInit+0x88>)
 800f764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f766:	f003 0302 	and.w	r3, r3, #2
 800f76a:	60fb      	str	r3, [r7, #12]
 800f76c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800f76e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800f772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f774:	2302      	movs	r3, #2
 800f776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f778:	2300      	movs	r3, #0
 800f77a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f77c:	2303      	movs	r3, #3
 800f77e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800f780:	2305      	movs	r3, #5
 800f782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f784:	f107 0314 	add.w	r3, r7, #20
 800f788:	4619      	mov	r1, r3
 800f78a:	4805      	ldr	r0, [pc, #20]	; (800f7a0 <HAL_SPI_MspInit+0x8c>)
 800f78c:	f002 fdb6 	bl	80122fc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800f790:	bf00      	nop
 800f792:	3728      	adds	r7, #40	; 0x28
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	40003800 	.word	0x40003800
 800f79c:	40023800 	.word	0x40023800
 800f7a0:	40020400 	.word	0x40020400

0800f7a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f7aa:	2300      	movs	r3, #0
 800f7ac:	607b      	str	r3, [r7, #4]
 800f7ae:	4b12      	ldr	r3, [pc, #72]	; (800f7f8 <HAL_MspInit+0x54>)
 800f7b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7b2:	4a11      	ldr	r2, [pc, #68]	; (800f7f8 <HAL_MspInit+0x54>)
 800f7b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f7b8:	6453      	str	r3, [r2, #68]	; 0x44
 800f7ba:	4b0f      	ldr	r3, [pc, #60]	; (800f7f8 <HAL_MspInit+0x54>)
 800f7bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f7c2:	607b      	str	r3, [r7, #4]
 800f7c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	603b      	str	r3, [r7, #0]
 800f7ca:	4b0b      	ldr	r3, [pc, #44]	; (800f7f8 <HAL_MspInit+0x54>)
 800f7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7ce:	4a0a      	ldr	r2, [pc, #40]	; (800f7f8 <HAL_MspInit+0x54>)
 800f7d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f7d4:	6413      	str	r3, [r2, #64]	; 0x40
 800f7d6:	4b08      	ldr	r3, [pc, #32]	; (800f7f8 <HAL_MspInit+0x54>)
 800f7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f7de:	603b      	str	r3, [r7, #0]
 800f7e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	210f      	movs	r1, #15
 800f7e6:	f06f 0001 	mvn.w	r0, #1
 800f7ea:	f002 f9d1 	bl	8011b90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f7ee:	bf00      	nop
 800f7f0:	3708      	adds	r7, #8
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	40023800 	.word	0x40023800

0800f7fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	b08c      	sub	sp, #48	; 0x30
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800f804:	2300      	movs	r3, #0
 800f806:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800f808:	2300      	movs	r3, #0
 800f80a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800f80c:	2300      	movs	r3, #0
 800f80e:	60bb      	str	r3, [r7, #8]
 800f810:	4b2f      	ldr	r3, [pc, #188]	; (800f8d0 <HAL_InitTick+0xd4>)
 800f812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f814:	4a2e      	ldr	r2, [pc, #184]	; (800f8d0 <HAL_InitTick+0xd4>)
 800f816:	f043 0301 	orr.w	r3, r3, #1
 800f81a:	6453      	str	r3, [r2, #68]	; 0x44
 800f81c:	4b2c      	ldr	r3, [pc, #176]	; (800f8d0 <HAL_InitTick+0xd4>)
 800f81e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f820:	f003 0301 	and.w	r3, r3, #1
 800f824:	60bb      	str	r3, [r7, #8]
 800f826:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800f828:	f107 020c 	add.w	r2, r7, #12
 800f82c:	f107 0310 	add.w	r3, r7, #16
 800f830:	4611      	mov	r1, r2
 800f832:	4618      	mov	r0, r3
 800f834:	f003 fd22 	bl	801327c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800f838:	f003 fd0c 	bl	8013254 <HAL_RCC_GetPCLK2Freq>
 800f83c:	4603      	mov	r3, r0
 800f83e:	005b      	lsls	r3, r3, #1
 800f840:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800f842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f844:	4a23      	ldr	r2, [pc, #140]	; (800f8d4 <HAL_InitTick+0xd8>)
 800f846:	fba2 2303 	umull	r2, r3, r2, r3
 800f84a:	0c9b      	lsrs	r3, r3, #18
 800f84c:	3b01      	subs	r3, #1
 800f84e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800f850:	4b21      	ldr	r3, [pc, #132]	; (800f8d8 <HAL_InitTick+0xdc>)
 800f852:	4a22      	ldr	r2, [pc, #136]	; (800f8dc <HAL_InitTick+0xe0>)
 800f854:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800f856:	4b20      	ldr	r3, [pc, #128]	; (800f8d8 <HAL_InitTick+0xdc>)
 800f858:	f240 32e7 	movw	r2, #999	; 0x3e7
 800f85c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800f85e:	4a1e      	ldr	r2, [pc, #120]	; (800f8d8 <HAL_InitTick+0xdc>)
 800f860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f862:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800f864:	4b1c      	ldr	r3, [pc, #112]	; (800f8d8 <HAL_InitTick+0xdc>)
 800f866:	2200      	movs	r2, #0
 800f868:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f86a:	4b1b      	ldr	r3, [pc, #108]	; (800f8d8 <HAL_InitTick+0xdc>)
 800f86c:	2200      	movs	r2, #0
 800f86e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f870:	4b19      	ldr	r3, [pc, #100]	; (800f8d8 <HAL_InitTick+0xdc>)
 800f872:	2200      	movs	r2, #0
 800f874:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800f876:	4818      	ldr	r0, [pc, #96]	; (800f8d8 <HAL_InitTick+0xdc>)
 800f878:	f004 fb04 	bl	8013e84 <HAL_TIM_Base_Init>
 800f87c:	4603      	mov	r3, r0
 800f87e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800f882:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f886:	2b00      	cmp	r3, #0
 800f888:	d11b      	bne.n	800f8c2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800f88a:	4813      	ldr	r0, [pc, #76]	; (800f8d8 <HAL_InitTick+0xdc>)
 800f88c:	f004 fb4a 	bl	8013f24 <HAL_TIM_Base_Start_IT>
 800f890:	4603      	mov	r3, r0
 800f892:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800f896:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f89a:	2b00      	cmp	r3, #0
 800f89c:	d111      	bne.n	800f8c2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800f89e:	2019      	movs	r0, #25
 800f8a0:	f002 f992 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2b0f      	cmp	r3, #15
 800f8a8:	d808      	bhi.n	800f8bc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	6879      	ldr	r1, [r7, #4]
 800f8ae:	2019      	movs	r0, #25
 800f8b0:	f002 f96e 	bl	8011b90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800f8b4:	4a0a      	ldr	r2, [pc, #40]	; (800f8e0 <HAL_InitTick+0xe4>)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6013      	str	r3, [r2, #0]
 800f8ba:	e002      	b.n	800f8c2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800f8bc:	2301      	movs	r3, #1
 800f8be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800f8c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f8c6:	4618      	mov	r0, r3
 800f8c8:	3730      	adds	r7, #48	; 0x30
 800f8ca:	46bd      	mov	sp, r7
 800f8cc:	bd80      	pop	{r7, pc}
 800f8ce:	bf00      	nop
 800f8d0:	40023800 	.word	0x40023800
 800f8d4:	431bde83 	.word	0x431bde83
 800f8d8:	20001378 	.word	0x20001378
 800f8dc:	40010000 	.word	0x40010000
 800f8e0:	20000020 	.word	0x20000020

0800f8e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800f8e8:	e7fe      	b.n	800f8e8 <NMI_Handler+0x4>

0800f8ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800f8ea:	b480      	push	{r7}
 800f8ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800f8ee:	e7fe      	b.n	800f8ee <HardFault_Handler+0x4>

0800f8f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800f8f4:	e7fe      	b.n	800f8f4 <MemManage_Handler+0x4>

0800f8f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800f8f6:	b480      	push	{r7}
 800f8f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800f8fa:	e7fe      	b.n	800f8fa <BusFault_Handler+0x4>

0800f8fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800f900:	e7fe      	b.n	800f900 <UsageFault_Handler+0x4>

0800f902 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800f902:	b480      	push	{r7}
 800f904:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800f906:	bf00      	nop
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN1_Pin);
 800f914:	2002      	movs	r0, #2
 800f916:	f002 febf 	bl	8012698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800f91a:	bf00      	nop
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 800f922:	2008      	movs	r0, #8
 800f924:	f002 feb8 	bl	8012698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800f928:	bf00      	nop
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800f930:	4802      	ldr	r0, [pc, #8]	; (800f93c <CAN1_TX_IRQHandler+0x10>)
 800f932:	f001 fe41 	bl	80115b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800f936:	bf00      	nop
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	20000f88 	.word	0x20000f88

0800f940 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800f944:	4802      	ldr	r0, [pc, #8]	; (800f950 <CAN1_RX0_IRQHandler+0x10>)
 800f946:	f001 fe37 	bl	80115b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800f94a:	bf00      	nop
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	20000f88 	.word	0x20000f88

0800f954 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800f958:	4802      	ldr	r0, [pc, #8]	; (800f964 <CAN1_RX1_IRQHandler+0x10>)
 800f95a:	f001 fe2d 	bl	80115b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800f95e:	bf00      	nop
 800f960:	bd80      	pop	{r7, pc}
 800f962:	bf00      	nop
 800f964:	20000f88 	.word	0x20000f88

0800f968 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800f96c:	4802      	ldr	r0, [pc, #8]	; (800f978 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800f96e:	f004 fc48 	bl	8014202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800f972:	bf00      	nop
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	200014e4 	.word	0x200014e4

0800f97c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800f980:	4802      	ldr	r0, [pc, #8]	; (800f98c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800f982:	f004 fc3e 	bl	8014202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800f986:	bf00      	nop
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	20001378 	.word	0x20001378

0800f990 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800f994:	4802      	ldr	r0, [pc, #8]	; (800f9a0 <TIM3_IRQHandler+0x10>)
 800f996:	f004 fc34 	bl	8014202 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800f99a:	bf00      	nop
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	2000140c 	.word	0x2000140c

0800f9a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800f9a8:	4802      	ldr	r0, [pc, #8]	; (800f9b4 <DMA2_Stream0_IRQHandler+0x10>)
 800f9aa:	f002 fa3d 	bl	8011e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800f9ae:	bf00      	nop
 800f9b0:	bd80      	pop	{r7, pc}
 800f9b2:	bf00      	nop
 800f9b4:	20000ec8 	.word	0x20000ec8

0800f9b8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800f9bc:	4802      	ldr	r0, [pc, #8]	; (800f9c8 <DMA2_Stream2_IRQHandler+0x10>)
 800f9be:	f002 fa33 	bl	8011e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800f9c2:	bf00      	nop
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	20000f28 	.word	0x20000f28

0800f9cc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800f9d0:	4802      	ldr	r0, [pc, #8]	; (800f9dc <CAN2_TX_IRQHandler+0x10>)
 800f9d2:	f001 fdf1 	bl	80115b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800f9d6:	bf00      	nop
 800f9d8:	bd80      	pop	{r7, pc}
 800f9da:	bf00      	nop
 800f9dc:	20000fb0 	.word	0x20000fb0

0800f9e0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800f9e4:	4802      	ldr	r0, [pc, #8]	; (800f9f0 <CAN2_RX0_IRQHandler+0x10>)
 800f9e6:	f001 fde7 	bl	80115b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800f9ea:	bf00      	nop
 800f9ec:	bd80      	pop	{r7, pc}
 800f9ee:	bf00      	nop
 800f9f0:	20000fb0 	.word	0x20000fb0

0800f9f4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800f9f8:	4802      	ldr	r0, [pc, #8]	; (800fa04 <CAN2_RX1_IRQHandler+0x10>)
 800f9fa:	f001 fddd 	bl	80115b8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800f9fe:	bf00      	nop
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	20000fb0 	.word	0x20000fb0

0800fa08 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800fa0c:	4802      	ldr	r0, [pc, #8]	; (800fa18 <DMA2_Stream5_IRQHandler+0x10>)
 800fa0e:	f002 fa0b 	bl	8011e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800fa12:	bf00      	nop
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	2000165c 	.word	0x2000165c

0800fa1c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800fa20:	4802      	ldr	r0, [pc, #8]	; (800fa2c <DMA2_Stream7_IRQHandler+0x10>)
 800fa22:	f002 fa01 	bl	8011e28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800fa26:	bf00      	nop
 800fa28:	bd80      	pop	{r7, pc}
 800fa2a:	bf00      	nop
 800fa2c:	200015fc 	.word	0x200015fc

0800fa30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800fa30:	b480      	push	{r7}
 800fa32:	af00      	add	r7, sp, #0
  return 1;
 800fa34:	2301      	movs	r3, #1
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <_kill>:

int _kill(int pid, int sig)
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b082      	sub	sp, #8
 800fa44:	af00      	add	r7, sp, #0
 800fa46:	6078      	str	r0, [r7, #4]
 800fa48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800fa4a:	f00c fa11 	bl	801be70 <__errno>
 800fa4e:	4603      	mov	r3, r0
 800fa50:	2216      	movs	r2, #22
 800fa52:	601a      	str	r2, [r3, #0]
  return -1;
 800fa54:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <_exit>:

void _exit (int status)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b082      	sub	sp, #8
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800fa68:	f04f 31ff 	mov.w	r1, #4294967295
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f7ff ffe7 	bl	800fa40 <_kill>
  while (1) {}    /* Make sure we hang here */
 800fa72:	e7fe      	b.n	800fa72 <_exit+0x12>

0800fa74 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b086      	sub	sp, #24
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fa80:	2300      	movs	r3, #0
 800fa82:	617b      	str	r3, [r7, #20]
 800fa84:	e00a      	b.n	800fa9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800fa86:	f3af 8000 	nop.w
 800fa8a:	4601      	mov	r1, r0
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	1c5a      	adds	r2, r3, #1
 800fa90:	60ba      	str	r2, [r7, #8]
 800fa92:	b2ca      	uxtb	r2, r1
 800fa94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	3301      	adds	r3, #1
 800fa9a:	617b      	str	r3, [r7, #20]
 800fa9c:	697a      	ldr	r2, [r7, #20]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	dbf0      	blt.n	800fa86 <_read+0x12>
  }

  return len;
 800faa4:	687b      	ldr	r3, [r7, #4]
}
 800faa6:	4618      	mov	r0, r3
 800faa8:	3718      	adds	r7, #24
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800faae:	b580      	push	{r7, lr}
 800fab0:	b086      	sub	sp, #24
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	60f8      	str	r0, [r7, #12]
 800fab6:	60b9      	str	r1, [r7, #8]
 800fab8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800faba:	2300      	movs	r3, #0
 800fabc:	617b      	str	r3, [r7, #20]
 800fabe:	e009      	b.n	800fad4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	1c5a      	adds	r2, r3, #1
 800fac4:	60ba      	str	r2, [r7, #8]
 800fac6:	781b      	ldrb	r3, [r3, #0]
 800fac8:	4618      	mov	r0, r3
 800faca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	3301      	adds	r3, #1
 800fad2:	617b      	str	r3, [r7, #20]
 800fad4:	697a      	ldr	r2, [r7, #20]
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	429a      	cmp	r2, r3
 800fada:	dbf1      	blt.n	800fac0 <_write+0x12>
  }
  return len;
 800fadc:	687b      	ldr	r3, [r7, #4]
}
 800fade:	4618      	mov	r0, r3
 800fae0:	3718      	adds	r7, #24
 800fae2:	46bd      	mov	sp, r7
 800fae4:	bd80      	pop	{r7, pc}

0800fae6 <_close>:

int _close(int file)
{
 800fae6:	b480      	push	{r7}
 800fae8:	b083      	sub	sp, #12
 800faea:	af00      	add	r7, sp, #0
 800faec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800faee:	f04f 33ff 	mov.w	r3, #4294967295
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	370c      	adds	r7, #12
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr

0800fafe <_fstat>:


int _fstat(int file, struct stat *st)
{
 800fafe:	b480      	push	{r7}
 800fb00:	b083      	sub	sp, #12
 800fb02:	af00      	add	r7, sp, #0
 800fb04:	6078      	str	r0, [r7, #4]
 800fb06:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fb0e:	605a      	str	r2, [r3, #4]
  return 0;
 800fb10:	2300      	movs	r3, #0
}
 800fb12:	4618      	mov	r0, r3
 800fb14:	370c      	adds	r7, #12
 800fb16:	46bd      	mov	sp, r7
 800fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1c:	4770      	bx	lr

0800fb1e <_isatty>:

int _isatty(int file)
{
 800fb1e:	b480      	push	{r7}
 800fb20:	b083      	sub	sp, #12
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800fb26:	2301      	movs	r3, #1
}
 800fb28:	4618      	mov	r0, r3
 800fb2a:	370c      	adds	r7, #12
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb32:	4770      	bx	lr

0800fb34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b085      	sub	sp, #20
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	60f8      	str	r0, [r7, #12]
 800fb3c:	60b9      	str	r1, [r7, #8]
 800fb3e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800fb40:	2300      	movs	r3, #0
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3714      	adds	r7, #20
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
	...

0800fb50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b086      	sub	sp, #24
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800fb58:	4a14      	ldr	r2, [pc, #80]	; (800fbac <_sbrk+0x5c>)
 800fb5a:	4b15      	ldr	r3, [pc, #84]	; (800fbb0 <_sbrk+0x60>)
 800fb5c:	1ad3      	subs	r3, r2, r3
 800fb5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800fb64:	4b13      	ldr	r3, [pc, #76]	; (800fbb4 <_sbrk+0x64>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d102      	bne.n	800fb72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800fb6c:	4b11      	ldr	r3, [pc, #68]	; (800fbb4 <_sbrk+0x64>)
 800fb6e:	4a12      	ldr	r2, [pc, #72]	; (800fbb8 <_sbrk+0x68>)
 800fb70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800fb72:	4b10      	ldr	r3, [pc, #64]	; (800fbb4 <_sbrk+0x64>)
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4413      	add	r3, r2
 800fb7a:	693a      	ldr	r2, [r7, #16]
 800fb7c:	429a      	cmp	r2, r3
 800fb7e:	d207      	bcs.n	800fb90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800fb80:	f00c f976 	bl	801be70 <__errno>
 800fb84:	4603      	mov	r3, r0
 800fb86:	220c      	movs	r2, #12
 800fb88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800fb8a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb8e:	e009      	b.n	800fba4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800fb90:	4b08      	ldr	r3, [pc, #32]	; (800fbb4 <_sbrk+0x64>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800fb96:	4b07      	ldr	r3, [pc, #28]	; (800fbb4 <_sbrk+0x64>)
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	4a05      	ldr	r2, [pc, #20]	; (800fbb4 <_sbrk+0x64>)
 800fba0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800fba2:	68fb      	ldr	r3, [r7, #12]
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3718      	adds	r7, #24
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	20020000 	.word	0x20020000
 800fbb0:	00000800 	.word	0x00000800
 800fbb4:	200013c0 	.word	0x200013c0
 800fbb8:	2000a690 	.word	0x2000a690

0800fbbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800fbbc:	b480      	push	{r7}
 800fbbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800fbc0:	4b06      	ldr	r3, [pc, #24]	; (800fbdc <SystemInit+0x20>)
 800fbc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fbc6:	4a05      	ldr	r2, [pc, #20]	; (800fbdc <SystemInit+0x20>)
 800fbc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fbcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800fbd0:	bf00      	nop
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr
 800fbda:	bf00      	nop
 800fbdc:	e000ed00 	.word	0xe000ed00

0800fbe0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fbe6:	f107 0308 	add.w	r3, r7, #8
 800fbea:	2200      	movs	r2, #0
 800fbec:	601a      	str	r2, [r3, #0]
 800fbee:	605a      	str	r2, [r3, #4]
 800fbf0:	609a      	str	r2, [r3, #8]
 800fbf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fbf4:	463b      	mov	r3, r7
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	601a      	str	r2, [r3, #0]
 800fbfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800fbfc:	4b1e      	ldr	r3, [pc, #120]	; (800fc78 <MX_TIM2_Init+0x98>)
 800fbfe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800fc02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800fc04:	4b1c      	ldr	r3, [pc, #112]	; (800fc78 <MX_TIM2_Init+0x98>)
 800fc06:	f240 3247 	movw	r2, #839	; 0x347
 800fc0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fc0c:	4b1a      	ldr	r3, [pc, #104]	; (800fc78 <MX_TIM2_Init+0x98>)
 800fc0e:	2200      	movs	r2, #0
 800fc10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800fc12:	4b19      	ldr	r3, [pc, #100]	; (800fc78 <MX_TIM2_Init+0x98>)
 800fc14:	f04f 32ff 	mov.w	r2, #4294967295
 800fc18:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fc1a:	4b17      	ldr	r3, [pc, #92]	; (800fc78 <MX_TIM2_Init+0x98>)
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fc20:	4b15      	ldr	r3, [pc, #84]	; (800fc78 <MX_TIM2_Init+0x98>)
 800fc22:	2200      	movs	r2, #0
 800fc24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800fc26:	4814      	ldr	r0, [pc, #80]	; (800fc78 <MX_TIM2_Init+0x98>)
 800fc28:	f004 f92c 	bl	8013e84 <HAL_TIM_Base_Init>
 800fc2c:	4603      	mov	r3, r0
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d001      	beq.n	800fc36 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800fc32:	f7ff fcfd 	bl	800f630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fc36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800fc3c:	f107 0308 	add.w	r3, r7, #8
 800fc40:	4619      	mov	r1, r3
 800fc42:	480d      	ldr	r0, [pc, #52]	; (800fc78 <MX_TIM2_Init+0x98>)
 800fc44:	f004 fca8 	bl	8014598 <HAL_TIM_ConfigClockSource>
 800fc48:	4603      	mov	r3, r0
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d001      	beq.n	800fc52 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800fc4e:	f7ff fcef 	bl	800f630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fc52:	2300      	movs	r3, #0
 800fc54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fc56:	2300      	movs	r3, #0
 800fc58:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800fc5a:	463b      	mov	r3, r7
 800fc5c:	4619      	mov	r1, r3
 800fc5e:	4806      	ldr	r0, [pc, #24]	; (800fc78 <MX_TIM2_Init+0x98>)
 800fc60:	f005 f874 	bl	8014d4c <HAL_TIMEx_MasterConfigSynchronization>
 800fc64:	4603      	mov	r3, r0
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d001      	beq.n	800fc6e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800fc6a:	f7ff fce1 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800fc6e:	bf00      	nop
 800fc70:	3718      	adds	r7, #24
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	200013c4 	.word	0x200013c4

0800fc7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b086      	sub	sp, #24
 800fc80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fc82:	f107 0308 	add.w	r3, r7, #8
 800fc86:	2200      	movs	r2, #0
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	605a      	str	r2, [r3, #4]
 800fc8c:	609a      	str	r2, [r3, #8]
 800fc8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fc90:	463b      	mov	r3, r7
 800fc92:	2200      	movs	r2, #0
 800fc94:	601a      	str	r2, [r3, #0]
 800fc96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800fc98:	4b1d      	ldr	r3, [pc, #116]	; (800fd10 <MX_TIM3_Init+0x94>)
 800fc9a:	4a1e      	ldr	r2, [pc, #120]	; (800fd14 <MX_TIM3_Init+0x98>)
 800fc9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800 - 1;
 800fc9e:	4b1c      	ldr	r3, [pc, #112]	; (800fd10 <MX_TIM3_Init+0x94>)
 800fca0:	f244 129f 	movw	r2, #16799	; 0x419f
 800fca4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fca6:	4b1a      	ldr	r3, [pc, #104]	; (800fd10 <MX_TIM3_Init+0x94>)
 800fca8:	2200      	movs	r2, #0
 800fcaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800fcac:	4b18      	ldr	r3, [pc, #96]	; (800fd10 <MX_TIM3_Init+0x94>)
 800fcae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fcb4:	4b16      	ldr	r3, [pc, #88]	; (800fd10 <MX_TIM3_Init+0x94>)
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fcba:	4b15      	ldr	r3, [pc, #84]	; (800fd10 <MX_TIM3_Init+0x94>)
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800fcc0:	4813      	ldr	r0, [pc, #76]	; (800fd10 <MX_TIM3_Init+0x94>)
 800fcc2:	f004 f8df 	bl	8013e84 <HAL_TIM_Base_Init>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d001      	beq.n	800fcd0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800fccc:	f7ff fcb0 	bl	800f630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fcd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fcd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800fcd6:	f107 0308 	add.w	r3, r7, #8
 800fcda:	4619      	mov	r1, r3
 800fcdc:	480c      	ldr	r0, [pc, #48]	; (800fd10 <MX_TIM3_Init+0x94>)
 800fcde:	f004 fc5b 	bl	8014598 <HAL_TIM_ConfigClockSource>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d001      	beq.n	800fcec <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800fce8:	f7ff fca2 	bl	800f630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fcec:	2300      	movs	r3, #0
 800fcee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800fcf4:	463b      	mov	r3, r7
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	4805      	ldr	r0, [pc, #20]	; (800fd10 <MX_TIM3_Init+0x94>)
 800fcfa:	f005 f827 	bl	8014d4c <HAL_TIMEx_MasterConfigSynchronization>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d001      	beq.n	800fd08 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800fd04:	f7ff fc94 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800fd08:	bf00      	nop
 800fd0a:	3718      	adds	r7, #24
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}
 800fd10:	2000140c 	.word	0x2000140c
 800fd14:	40000400 	.word	0x40000400

0800fd18 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b08e      	sub	sp, #56	; 0x38
 800fd1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fd1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd22:	2200      	movs	r2, #0
 800fd24:	601a      	str	r2, [r3, #0]
 800fd26:	605a      	str	r2, [r3, #4]
 800fd28:	609a      	str	r2, [r3, #8]
 800fd2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fd2c:	f107 0320 	add.w	r3, r7, #32
 800fd30:	2200      	movs	r2, #0
 800fd32:	601a      	str	r2, [r3, #0]
 800fd34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fd36:	1d3b      	adds	r3, r7, #4
 800fd38:	2200      	movs	r2, #0
 800fd3a:	601a      	str	r2, [r3, #0]
 800fd3c:	605a      	str	r2, [r3, #4]
 800fd3e:	609a      	str	r2, [r3, #8]
 800fd40:	60da      	str	r2, [r3, #12]
 800fd42:	611a      	str	r2, [r3, #16]
 800fd44:	615a      	str	r2, [r3, #20]
 800fd46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800fd48:	4b37      	ldr	r3, [pc, #220]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fd4a:	4a38      	ldr	r2, [pc, #224]	; (800fe2c <MX_TIM4_Init+0x114>)
 800fd4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 800fd4e:	4b36      	ldr	r3, [pc, #216]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fd50:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800fd54:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fd56:	4b34      	ldr	r3, [pc, #208]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fd58:	2200      	movs	r2, #0
 800fd5a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 800fd5c:	4b32      	ldr	r3, [pc, #200]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fd5e:	22fe      	movs	r2, #254	; 0xfe
 800fd60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fd62:	4b31      	ldr	r3, [pc, #196]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fd64:	2200      	movs	r2, #0
 800fd66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fd68:	4b2f      	ldr	r3, [pc, #188]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fd6a:	2200      	movs	r2, #0
 800fd6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800fd6e:	482e      	ldr	r0, [pc, #184]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fd70:	f004 f888 	bl	8013e84 <HAL_TIM_Base_Init>
 800fd74:	4603      	mov	r3, r0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d001      	beq.n	800fd7e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800fd7a:	f7ff fc59 	bl	800f630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fd7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fd82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800fd84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fd88:	4619      	mov	r1, r3
 800fd8a:	4827      	ldr	r0, [pc, #156]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fd8c:	f004 fc04 	bl	8014598 <HAL_TIM_ConfigClockSource>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d001      	beq.n	800fd9a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800fd96:	f7ff fc4b 	bl	800f630 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800fd9a:	4823      	ldr	r0, [pc, #140]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fd9c:	f004 f932 	bl	8014004 <HAL_TIM_PWM_Init>
 800fda0:	4603      	mov	r3, r0
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d001      	beq.n	800fdaa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800fda6:	f7ff fc43 	bl	800f630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800fdb2:	f107 0320 	add.w	r3, r7, #32
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	481b      	ldr	r0, [pc, #108]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fdba:	f004 ffc7 	bl	8014d4c <HAL_TIMEx_MasterConfigSynchronization>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d001      	beq.n	800fdc8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800fdc4:	f7ff fc34 	bl	800f630 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fdc8:	2360      	movs	r3, #96	; 0x60
 800fdca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fdd8:	1d3b      	adds	r3, r7, #4
 800fdda:	2200      	movs	r2, #0
 800fddc:	4619      	mov	r1, r3
 800fdde:	4812      	ldr	r0, [pc, #72]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fde0:	f004 fb18 	bl	8014414 <HAL_TIM_PWM_ConfigChannel>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d001      	beq.n	800fdee <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800fdea:	f7ff fc21 	bl	800f630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fdee:	1d3b      	adds	r3, r7, #4
 800fdf0:	2204      	movs	r2, #4
 800fdf2:	4619      	mov	r1, r3
 800fdf4:	480c      	ldr	r0, [pc, #48]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fdf6:	f004 fb0d 	bl	8014414 <HAL_TIM_PWM_ConfigChannel>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d001      	beq.n	800fe04 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800fe00:	f7ff fc16 	bl	800f630 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fe04:	1d3b      	adds	r3, r7, #4
 800fe06:	2208      	movs	r2, #8
 800fe08:	4619      	mov	r1, r3
 800fe0a:	4807      	ldr	r0, [pc, #28]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fe0c:	f004 fb02 	bl	8014414 <HAL_TIM_PWM_ConfigChannel>
 800fe10:	4603      	mov	r3, r0
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d001      	beq.n	800fe1a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800fe16:	f7ff fc0b 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800fe1a:	4803      	ldr	r0, [pc, #12]	; (800fe28 <MX_TIM4_Init+0x110>)
 800fe1c:	f000 f988 	bl	8010130 <HAL_TIM_MspPostInit>

}
 800fe20:	bf00      	nop
 800fe22:	3738      	adds	r7, #56	; 0x38
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	20001454 	.word	0x20001454
 800fe2c:	40000800 	.word	0x40000800

0800fe30 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b08c      	sub	sp, #48	; 0x30
 800fe34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800fe36:	f107 030c 	add.w	r3, r7, #12
 800fe3a:	2224      	movs	r2, #36	; 0x24
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f00c f958 	bl	801c0f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fe44:	1d3b      	adds	r3, r7, #4
 800fe46:	2200      	movs	r2, #0
 800fe48:	601a      	str	r2, [r3, #0]
 800fe4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800fe4c:	4b20      	ldr	r3, [pc, #128]	; (800fed0 <MX_TIM5_Init+0xa0>)
 800fe4e:	4a21      	ldr	r2, [pc, #132]	; (800fed4 <MX_TIM5_Init+0xa4>)
 800fe50:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800fe52:	4b1f      	ldr	r3, [pc, #124]	; (800fed0 <MX_TIM5_Init+0xa0>)
 800fe54:	2200      	movs	r2, #0
 800fe56:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fe58:	4b1d      	ldr	r3, [pc, #116]	; (800fed0 <MX_TIM5_Init+0xa0>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800fe5e:	4b1c      	ldr	r3, [pc, #112]	; (800fed0 <MX_TIM5_Init+0xa0>)
 800fe60:	f04f 32ff 	mov.w	r2, #4294967295
 800fe64:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fe66:	4b1a      	ldr	r3, [pc, #104]	; (800fed0 <MX_TIM5_Init+0xa0>)
 800fe68:	2200      	movs	r2, #0
 800fe6a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fe6c:	4b18      	ldr	r3, [pc, #96]	; (800fed0 <MX_TIM5_Init+0xa0>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800fe72:	2301      	movs	r3, #1
 800fe74:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800fe76:	2300      	movs	r3, #0
 800fe78:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800fe7a:	2301      	movs	r3, #1
 800fe7c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800fe82:	2300      	movs	r3, #0
 800fe84:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800fe86:	2300      	movs	r3, #0
 800fe88:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800fe8a:	2301      	movs	r3, #1
 800fe8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800fe8e:	2300      	movs	r3, #0
 800fe90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800fe92:	2300      	movs	r3, #0
 800fe94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800fe96:	f107 030c 	add.w	r3, r7, #12
 800fe9a:	4619      	mov	r1, r3
 800fe9c:	480c      	ldr	r0, [pc, #48]	; (800fed0 <MX_TIM5_Init+0xa0>)
 800fe9e:	f004 f90a 	bl	80140b6 <HAL_TIM_Encoder_Init>
 800fea2:	4603      	mov	r3, r0
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d001      	beq.n	800feac <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800fea8:	f7ff fbc2 	bl	800f630 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800feac:	2300      	movs	r3, #0
 800feae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800feb0:	2300      	movs	r3, #0
 800feb2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800feb4:	1d3b      	adds	r3, r7, #4
 800feb6:	4619      	mov	r1, r3
 800feb8:	4805      	ldr	r0, [pc, #20]	; (800fed0 <MX_TIM5_Init+0xa0>)
 800feba:	f004 ff47 	bl	8014d4c <HAL_TIMEx_MasterConfigSynchronization>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d001      	beq.n	800fec8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800fec4:	f7ff fbb4 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800fec8:	bf00      	nop
 800feca:	3730      	adds	r7, #48	; 0x30
 800fecc:	46bd      	mov	sp, r7
 800fece:	bd80      	pop	{r7, pc}
 800fed0:	2000149c 	.word	0x2000149c
 800fed4:	40000c00 	.word	0x40000c00

0800fed8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b084      	sub	sp, #16
 800fedc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fede:	463b      	mov	r3, r7
 800fee0:	2200      	movs	r2, #0
 800fee2:	601a      	str	r2, [r3, #0]
 800fee4:	605a      	str	r2, [r3, #4]
 800fee6:	609a      	str	r2, [r3, #8]
 800fee8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800feea:	4b16      	ldr	r3, [pc, #88]	; (800ff44 <MX_TIM9_Init+0x6c>)
 800feec:	4a16      	ldr	r2, [pc, #88]	; (800ff48 <MX_TIM9_Init+0x70>)
 800feee:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800 - 1;
 800fef0:	4b14      	ldr	r3, [pc, #80]	; (800ff44 <MX_TIM9_Init+0x6c>)
 800fef2:	f244 129f 	movw	r2, #16799	; 0x419f
 800fef6:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800fef8:	4b12      	ldr	r3, [pc, #72]	; (800ff44 <MX_TIM9_Init+0x6c>)
 800fefa:	2200      	movs	r2, #0
 800fefc:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800fefe:	4b11      	ldr	r3, [pc, #68]	; (800ff44 <MX_TIM9_Init+0x6c>)
 800ff00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff04:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ff06:	4b0f      	ldr	r3, [pc, #60]	; (800ff44 <MX_TIM9_Init+0x6c>)
 800ff08:	2200      	movs	r2, #0
 800ff0a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ff0c:	4b0d      	ldr	r3, [pc, #52]	; (800ff44 <MX_TIM9_Init+0x6c>)
 800ff0e:	2200      	movs	r2, #0
 800ff10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800ff12:	480c      	ldr	r0, [pc, #48]	; (800ff44 <MX_TIM9_Init+0x6c>)
 800ff14:	f003 ffb6 	bl	8013e84 <HAL_TIM_Base_Init>
 800ff18:	4603      	mov	r3, r0
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d001      	beq.n	800ff22 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800ff1e:	f7ff fb87 	bl	800f630 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ff22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff26:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800ff28:	463b      	mov	r3, r7
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	4805      	ldr	r0, [pc, #20]	; (800ff44 <MX_TIM9_Init+0x6c>)
 800ff2e:	f004 fb33 	bl	8014598 <HAL_TIM_ConfigClockSource>
 800ff32:	4603      	mov	r3, r0
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 800ff38:	f7ff fb7a 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800ff3c:	bf00      	nop
 800ff3e:	3710      	adds	r7, #16
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	200014e4 	.word	0x200014e4
 800ff48:	40014000 	.word	0x40014000

0800ff4c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800ff50:	4b0e      	ldr	r3, [pc, #56]	; (800ff8c <MX_TIM14_Init+0x40>)
 800ff52:	4a0f      	ldr	r2, [pc, #60]	; (800ff90 <MX_TIM14_Init+0x44>)
 800ff54:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 800ff56:	4b0d      	ldr	r3, [pc, #52]	; (800ff8c <MX_TIM14_Init+0x40>)
 800ff58:	f240 3247 	movw	r2, #839	; 0x347
 800ff5c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ff5e:	4b0b      	ldr	r3, [pc, #44]	; (800ff8c <MX_TIM14_Init+0x40>)
 800ff60:	2200      	movs	r2, #0
 800ff62:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800ff64:	4b09      	ldr	r3, [pc, #36]	; (800ff8c <MX_TIM14_Init+0x40>)
 800ff66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff6a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ff6c:	4b07      	ldr	r3, [pc, #28]	; (800ff8c <MX_TIM14_Init+0x40>)
 800ff6e:	2200      	movs	r2, #0
 800ff70:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ff72:	4b06      	ldr	r3, [pc, #24]	; (800ff8c <MX_TIM14_Init+0x40>)
 800ff74:	2200      	movs	r2, #0
 800ff76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800ff78:	4804      	ldr	r0, [pc, #16]	; (800ff8c <MX_TIM14_Init+0x40>)
 800ff7a:	f003 ff83 	bl	8013e84 <HAL_TIM_Base_Init>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d001      	beq.n	800ff88 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800ff84:	f7ff fb54 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800ff88:	bf00      	nop
 800ff8a:	bd80      	pop	{r7, pc}
 800ff8c:	2000152c 	.word	0x2000152c
 800ff90:	40002000 	.word	0x40002000

0800ff94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	b088      	sub	sp, #32
 800ff98:	af00      	add	r7, sp, #0
 800ff9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ffa4:	d10e      	bne.n	800ffc4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	61fb      	str	r3, [r7, #28]
 800ffaa:	4b38      	ldr	r3, [pc, #224]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 800ffac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffae:	4a37      	ldr	r2, [pc, #220]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 800ffb0:	f043 0301 	orr.w	r3, r3, #1
 800ffb4:	6413      	str	r3, [r2, #64]	; 0x40
 800ffb6:	4b35      	ldr	r3, [pc, #212]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 800ffb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffba:	f003 0301 	and.w	r3, r3, #1
 800ffbe:	61fb      	str	r3, [r7, #28]
 800ffc0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800ffc2:	e05e      	b.n	8010082 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4a31      	ldr	r2, [pc, #196]	; (8010090 <HAL_TIM_Base_MspInit+0xfc>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d116      	bne.n	800fffc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ffce:	2300      	movs	r3, #0
 800ffd0:	61bb      	str	r3, [r7, #24]
 800ffd2:	4b2e      	ldr	r3, [pc, #184]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 800ffd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd6:	4a2d      	ldr	r2, [pc, #180]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 800ffd8:	f043 0302 	orr.w	r3, r3, #2
 800ffdc:	6413      	str	r3, [r2, #64]	; 0x40
 800ffde:	4b2b      	ldr	r3, [pc, #172]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 800ffe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffe2:	f003 0302 	and.w	r3, r3, #2
 800ffe6:	61bb      	str	r3, [r7, #24]
 800ffe8:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800ffea:	2200      	movs	r2, #0
 800ffec:	2105      	movs	r1, #5
 800ffee:	201d      	movs	r0, #29
 800fff0:	f001 fdce 	bl	8011b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800fff4:	201d      	movs	r0, #29
 800fff6:	f001 fde7 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
}
 800fffa:	e042      	b.n	8010082 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a24      	ldr	r2, [pc, #144]	; (8010094 <HAL_TIM_Base_MspInit+0x100>)
 8010002:	4293      	cmp	r3, r2
 8010004:	d10e      	bne.n	8010024 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8010006:	2300      	movs	r3, #0
 8010008:	617b      	str	r3, [r7, #20]
 801000a:	4b20      	ldr	r3, [pc, #128]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 801000c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801000e:	4a1f      	ldr	r2, [pc, #124]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 8010010:	f043 0304 	orr.w	r3, r3, #4
 8010014:	6413      	str	r3, [r2, #64]	; 0x40
 8010016:	4b1d      	ldr	r3, [pc, #116]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 8010018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801001a:	f003 0304 	and.w	r3, r3, #4
 801001e:	617b      	str	r3, [r7, #20]
 8010020:	697b      	ldr	r3, [r7, #20]
}
 8010022:	e02e      	b.n	8010082 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	4a1b      	ldr	r2, [pc, #108]	; (8010098 <HAL_TIM_Base_MspInit+0x104>)
 801002a:	4293      	cmp	r3, r2
 801002c:	d116      	bne.n	801005c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 801002e:	2300      	movs	r3, #0
 8010030:	613b      	str	r3, [r7, #16]
 8010032:	4b16      	ldr	r3, [pc, #88]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 8010034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010036:	4a15      	ldr	r2, [pc, #84]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 8010038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801003c:	6453      	str	r3, [r2, #68]	; 0x44
 801003e:	4b13      	ldr	r3, [pc, #76]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 8010040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010046:	613b      	str	r3, [r7, #16]
 8010048:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 801004a:	2200      	movs	r2, #0
 801004c:	2105      	movs	r1, #5
 801004e:	2018      	movs	r0, #24
 8010050:	f001 fd9e 	bl	8011b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8010054:	2018      	movs	r0, #24
 8010056:	f001 fdb7 	bl	8011bc8 <HAL_NVIC_EnableIRQ>
}
 801005a:	e012      	b.n	8010082 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM14)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	4a0e      	ldr	r2, [pc, #56]	; (801009c <HAL_TIM_Base_MspInit+0x108>)
 8010062:	4293      	cmp	r3, r2
 8010064:	d10d      	bne.n	8010082 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8010066:	2300      	movs	r3, #0
 8010068:	60fb      	str	r3, [r7, #12]
 801006a:	4b08      	ldr	r3, [pc, #32]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 801006c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801006e:	4a07      	ldr	r2, [pc, #28]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 8010070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010074:	6413      	str	r3, [r2, #64]	; 0x40
 8010076:	4b05      	ldr	r3, [pc, #20]	; (801008c <HAL_TIM_Base_MspInit+0xf8>)
 8010078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801007a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801007e:	60fb      	str	r3, [r7, #12]
 8010080:	68fb      	ldr	r3, [r7, #12]
}
 8010082:	bf00      	nop
 8010084:	3720      	adds	r7, #32
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	40023800 	.word	0x40023800
 8010090:	40000400 	.word	0x40000400
 8010094:	40000800 	.word	0x40000800
 8010098:	40014000 	.word	0x40014000
 801009c:	40002000 	.word	0x40002000

080100a0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b08a      	sub	sp, #40	; 0x28
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100a8:	f107 0314 	add.w	r3, r7, #20
 80100ac:	2200      	movs	r2, #0
 80100ae:	601a      	str	r2, [r3, #0]
 80100b0:	605a      	str	r2, [r3, #4]
 80100b2:	609a      	str	r2, [r3, #8]
 80100b4:	60da      	str	r2, [r3, #12]
 80100b6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4a19      	ldr	r2, [pc, #100]	; (8010124 <HAL_TIM_Encoder_MspInit+0x84>)
 80100be:	4293      	cmp	r3, r2
 80100c0:	d12b      	bne.n	801011a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80100c2:	2300      	movs	r3, #0
 80100c4:	613b      	str	r3, [r7, #16]
 80100c6:	4b18      	ldr	r3, [pc, #96]	; (8010128 <HAL_TIM_Encoder_MspInit+0x88>)
 80100c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ca:	4a17      	ldr	r2, [pc, #92]	; (8010128 <HAL_TIM_Encoder_MspInit+0x88>)
 80100cc:	f043 0308 	orr.w	r3, r3, #8
 80100d0:	6413      	str	r3, [r2, #64]	; 0x40
 80100d2:	4b15      	ldr	r3, [pc, #84]	; (8010128 <HAL_TIM_Encoder_MspInit+0x88>)
 80100d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100d6:	f003 0308 	and.w	r3, r3, #8
 80100da:	613b      	str	r3, [r7, #16]
 80100dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80100de:	2300      	movs	r3, #0
 80100e0:	60fb      	str	r3, [r7, #12]
 80100e2:	4b11      	ldr	r3, [pc, #68]	; (8010128 <HAL_TIM_Encoder_MspInit+0x88>)
 80100e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e6:	4a10      	ldr	r2, [pc, #64]	; (8010128 <HAL_TIM_Encoder_MspInit+0x88>)
 80100e8:	f043 0301 	orr.w	r3, r3, #1
 80100ec:	6313      	str	r3, [r2, #48]	; 0x30
 80100ee:	4b0e      	ldr	r3, [pc, #56]	; (8010128 <HAL_TIM_Encoder_MspInit+0x88>)
 80100f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100f2:	f003 0301 	and.w	r3, r3, #1
 80100f6:	60fb      	str	r3, [r7, #12]
 80100f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 80100fa:	2303      	movs	r3, #3
 80100fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80100fe:	2302      	movs	r3, #2
 8010100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010102:	2300      	movs	r3, #0
 8010104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010106:	2300      	movs	r3, #0
 8010108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 801010a:	2302      	movs	r3, #2
 801010c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801010e:	f107 0314 	add.w	r3, r7, #20
 8010112:	4619      	mov	r1, r3
 8010114:	4805      	ldr	r0, [pc, #20]	; (801012c <HAL_TIM_Encoder_MspInit+0x8c>)
 8010116:	f002 f8f1 	bl	80122fc <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 801011a:	bf00      	nop
 801011c:	3728      	adds	r7, #40	; 0x28
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}
 8010122:	bf00      	nop
 8010124:	40000c00 	.word	0x40000c00
 8010128:	40023800 	.word	0x40023800
 801012c:	40020000 	.word	0x40020000

08010130 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8010130:	b580      	push	{r7, lr}
 8010132:	b088      	sub	sp, #32
 8010134:	af00      	add	r7, sp, #0
 8010136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010138:	f107 030c 	add.w	r3, r7, #12
 801013c:	2200      	movs	r2, #0
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	605a      	str	r2, [r3, #4]
 8010142:	609a      	str	r2, [r3, #8]
 8010144:	60da      	str	r2, [r3, #12]
 8010146:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	4a12      	ldr	r2, [pc, #72]	; (8010198 <HAL_TIM_MspPostInit+0x68>)
 801014e:	4293      	cmp	r3, r2
 8010150:	d11e      	bne.n	8010190 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8010152:	2300      	movs	r3, #0
 8010154:	60bb      	str	r3, [r7, #8]
 8010156:	4b11      	ldr	r3, [pc, #68]	; (801019c <HAL_TIM_MspPostInit+0x6c>)
 8010158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801015a:	4a10      	ldr	r2, [pc, #64]	; (801019c <HAL_TIM_MspPostInit+0x6c>)
 801015c:	f043 0308 	orr.w	r3, r3, #8
 8010160:	6313      	str	r3, [r2, #48]	; 0x30
 8010162:	4b0e      	ldr	r3, [pc, #56]	; (801019c <HAL_TIM_MspPostInit+0x6c>)
 8010164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010166:	f003 0308 	and.w	r3, r3, #8
 801016a:	60bb      	str	r3, [r7, #8]
 801016c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 801016e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8010172:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010174:	2302      	movs	r3, #2
 8010176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010178:	2300      	movs	r3, #0
 801017a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801017c:	2300      	movs	r3, #0
 801017e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8010180:	2302      	movs	r3, #2
 8010182:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8010184:	f107 030c 	add.w	r3, r7, #12
 8010188:	4619      	mov	r1, r3
 801018a:	4805      	ldr	r0, [pc, #20]	; (80101a0 <HAL_TIM_MspPostInit+0x70>)
 801018c:	f002 f8b6 	bl	80122fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8010190:	bf00      	nop
 8010192:	3720      	adds	r7, #32
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	40000800 	.word	0x40000800
 801019c:	40023800 	.word	0x40023800
 80101a0:	40020c00 	.word	0x40020c00

080101a4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80101a8:	4b11      	ldr	r3, [pc, #68]	; (80101f0 <MX_USART1_UART_Init+0x4c>)
 80101aa:	4a12      	ldr	r2, [pc, #72]	; (80101f4 <MX_USART1_UART_Init+0x50>)
 80101ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80101ae:	4b10      	ldr	r3, [pc, #64]	; (80101f0 <MX_USART1_UART_Init+0x4c>)
 80101b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80101b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80101b6:	4b0e      	ldr	r3, [pc, #56]	; (80101f0 <MX_USART1_UART_Init+0x4c>)
 80101b8:	2200      	movs	r2, #0
 80101ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80101bc:	4b0c      	ldr	r3, [pc, #48]	; (80101f0 <MX_USART1_UART_Init+0x4c>)
 80101be:	2200      	movs	r2, #0
 80101c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80101c2:	4b0b      	ldr	r3, [pc, #44]	; (80101f0 <MX_USART1_UART_Init+0x4c>)
 80101c4:	2200      	movs	r2, #0
 80101c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80101c8:	4b09      	ldr	r3, [pc, #36]	; (80101f0 <MX_USART1_UART_Init+0x4c>)
 80101ca:	220c      	movs	r2, #12
 80101cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80101ce:	4b08      	ldr	r3, [pc, #32]	; (80101f0 <MX_USART1_UART_Init+0x4c>)
 80101d0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80101d4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80101d6:	4b06      	ldr	r3, [pc, #24]	; (80101f0 <MX_USART1_UART_Init+0x4c>)
 80101d8:	2200      	movs	r2, #0
 80101da:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80101dc:	4804      	ldr	r0, [pc, #16]	; (80101f0 <MX_USART1_UART_Init+0x4c>)
 80101de:	f004 fe45 	bl	8014e6c <HAL_UART_Init>
 80101e2:	4603      	mov	r3, r0
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d001      	beq.n	80101ec <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80101e8:	f7ff fa22 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80101ec:	bf00      	nop
 80101ee:	bd80      	pop	{r7, pc}
 80101f0:	20001574 	.word	0x20001574
 80101f4:	40011000 	.word	0x40011000

080101f8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80101fc:	4b11      	ldr	r3, [pc, #68]	; (8010244 <MX_USART2_UART_Init+0x4c>)
 80101fe:	4a12      	ldr	r2, [pc, #72]	; (8010248 <MX_USART2_UART_Init+0x50>)
 8010200:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8010202:	4b10      	ldr	r3, [pc, #64]	; (8010244 <MX_USART2_UART_Init+0x4c>)
 8010204:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8010208:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801020a:	4b0e      	ldr	r3, [pc, #56]	; (8010244 <MX_USART2_UART_Init+0x4c>)
 801020c:	2200      	movs	r2, #0
 801020e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010210:	4b0c      	ldr	r3, [pc, #48]	; (8010244 <MX_USART2_UART_Init+0x4c>)
 8010212:	2200      	movs	r2, #0
 8010214:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8010216:	4b0b      	ldr	r3, [pc, #44]	; (8010244 <MX_USART2_UART_Init+0x4c>)
 8010218:	2200      	movs	r2, #0
 801021a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801021c:	4b09      	ldr	r3, [pc, #36]	; (8010244 <MX_USART2_UART_Init+0x4c>)
 801021e:	220c      	movs	r2, #12
 8010220:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010222:	4b08      	ldr	r3, [pc, #32]	; (8010244 <MX_USART2_UART_Init+0x4c>)
 8010224:	2200      	movs	r2, #0
 8010226:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010228:	4b06      	ldr	r3, [pc, #24]	; (8010244 <MX_USART2_UART_Init+0x4c>)
 801022a:	2200      	movs	r2, #0
 801022c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801022e:	4805      	ldr	r0, [pc, #20]	; (8010244 <MX_USART2_UART_Init+0x4c>)
 8010230:	f004 fe1c 	bl	8014e6c <HAL_UART_Init>
 8010234:	4603      	mov	r3, r0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d001      	beq.n	801023e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801023a:	f7ff f9f9 	bl	800f630 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 801023e:	bf00      	nop
 8010240:	bd80      	pop	{r7, pc}
 8010242:	bf00      	nop
 8010244:	200015b8 	.word	0x200015b8
 8010248:	40004400 	.word	0x40004400

0801024c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801024c:	b580      	push	{r7, lr}
 801024e:	b08c      	sub	sp, #48	; 0x30
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010254:	f107 031c 	add.w	r3, r7, #28
 8010258:	2200      	movs	r2, #0
 801025a:	601a      	str	r2, [r3, #0]
 801025c:	605a      	str	r2, [r3, #4]
 801025e:	609a      	str	r2, [r3, #8]
 8010260:	60da      	str	r2, [r3, #12]
 8010262:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	4a61      	ldr	r2, [pc, #388]	; (80103f0 <HAL_UART_MspInit+0x1a4>)
 801026a:	4293      	cmp	r3, r2
 801026c:	f040 808a 	bne.w	8010384 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8010270:	2300      	movs	r3, #0
 8010272:	61bb      	str	r3, [r7, #24]
 8010274:	4b5f      	ldr	r3, [pc, #380]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 8010276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010278:	4a5e      	ldr	r2, [pc, #376]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 801027a:	f043 0310 	orr.w	r3, r3, #16
 801027e:	6453      	str	r3, [r2, #68]	; 0x44
 8010280:	4b5c      	ldr	r3, [pc, #368]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 8010282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010284:	f003 0310 	and.w	r3, r3, #16
 8010288:	61bb      	str	r3, [r7, #24]
 801028a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801028c:	2300      	movs	r3, #0
 801028e:	617b      	str	r3, [r7, #20]
 8010290:	4b58      	ldr	r3, [pc, #352]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 8010292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010294:	4a57      	ldr	r2, [pc, #348]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 8010296:	f043 0301 	orr.w	r3, r3, #1
 801029a:	6313      	str	r3, [r2, #48]	; 0x30
 801029c:	4b55      	ldr	r3, [pc, #340]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 801029e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102a0:	f003 0301 	and.w	r3, r3, #1
 80102a4:	617b      	str	r3, [r7, #20]
 80102a6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80102a8:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80102ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80102ae:	2302      	movs	r3, #2
 80102b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80102b2:	2300      	movs	r3, #0
 80102b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80102b6:	2303      	movs	r3, #3
 80102b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80102ba:	2307      	movs	r3, #7
 80102bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80102be:	f107 031c 	add.w	r3, r7, #28
 80102c2:	4619      	mov	r1, r3
 80102c4:	484c      	ldr	r0, [pc, #304]	; (80103f8 <HAL_UART_MspInit+0x1ac>)
 80102c6:	f002 f819 	bl	80122fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80102ca:	4b4c      	ldr	r3, [pc, #304]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 80102cc:	4a4c      	ldr	r2, [pc, #304]	; (8010400 <HAL_UART_MspInit+0x1b4>)
 80102ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80102d0:	4b4a      	ldr	r3, [pc, #296]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 80102d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80102d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80102d8:	4b48      	ldr	r3, [pc, #288]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 80102da:	2240      	movs	r2, #64	; 0x40
 80102dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80102de:	4b47      	ldr	r3, [pc, #284]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 80102e0:	2200      	movs	r2, #0
 80102e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80102e4:	4b45      	ldr	r3, [pc, #276]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 80102e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80102ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80102ec:	4b43      	ldr	r3, [pc, #268]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 80102ee:	2200      	movs	r2, #0
 80102f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80102f2:	4b42      	ldr	r3, [pc, #264]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 80102f4:	2200      	movs	r2, #0
 80102f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80102f8:	4b40      	ldr	r3, [pc, #256]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 80102fa:	2200      	movs	r2, #0
 80102fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80102fe:	4b3f      	ldr	r3, [pc, #252]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 8010300:	2200      	movs	r2, #0
 8010302:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010304:	4b3d      	ldr	r3, [pc, #244]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 8010306:	2200      	movs	r2, #0
 8010308:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 801030a:	483c      	ldr	r0, [pc, #240]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 801030c:	f001 fc86 	bl	8011c1c <HAL_DMA_Init>
 8010310:	4603      	mov	r3, r0
 8010312:	2b00      	cmp	r3, #0
 8010314:	d001      	beq.n	801031a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8010316:	f7ff f98b 	bl	800f630 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4a37      	ldr	r2, [pc, #220]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 801031e:	635a      	str	r2, [r3, #52]	; 0x34
 8010320:	4a36      	ldr	r2, [pc, #216]	; (80103fc <HAL_UART_MspInit+0x1b0>)
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8010326:	4b37      	ldr	r3, [pc, #220]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 8010328:	4a37      	ldr	r2, [pc, #220]	; (8010408 <HAL_UART_MspInit+0x1bc>)
 801032a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 801032c:	4b35      	ldr	r3, [pc, #212]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 801032e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010332:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010334:	4b33      	ldr	r3, [pc, #204]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 8010336:	2200      	movs	r2, #0
 8010338:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 801033a:	4b32      	ldr	r3, [pc, #200]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 801033c:	2200      	movs	r2, #0
 801033e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8010340:	4b30      	ldr	r3, [pc, #192]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 8010342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010346:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8010348:	4b2e      	ldr	r3, [pc, #184]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 801034a:	2200      	movs	r2, #0
 801034c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 801034e:	4b2d      	ldr	r3, [pc, #180]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 8010350:	2200      	movs	r2, #0
 8010352:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8010354:	4b2b      	ldr	r3, [pc, #172]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 8010356:	2200      	movs	r2, #0
 8010358:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 801035a:	4b2a      	ldr	r3, [pc, #168]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 801035c:	2200      	movs	r2, #0
 801035e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8010360:	4b28      	ldr	r3, [pc, #160]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 8010362:	2200      	movs	r2, #0
 8010364:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8010366:	4827      	ldr	r0, [pc, #156]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 8010368:	f001 fc58 	bl	8011c1c <HAL_DMA_Init>
 801036c:	4603      	mov	r3, r0
 801036e:	2b00      	cmp	r3, #0
 8010370:	d001      	beq.n	8010376 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8010372:	f7ff f95d 	bl	800f630 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	4a22      	ldr	r2, [pc, #136]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 801037a:	639a      	str	r2, [r3, #56]	; 0x38
 801037c:	4a21      	ldr	r2, [pc, #132]	; (8010404 <HAL_UART_MspInit+0x1b8>)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8010382:	e030      	b.n	80103e6 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	4a20      	ldr	r2, [pc, #128]	; (801040c <HAL_UART_MspInit+0x1c0>)
 801038a:	4293      	cmp	r3, r2
 801038c:	d12b      	bne.n	80103e6 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 801038e:	2300      	movs	r3, #0
 8010390:	613b      	str	r3, [r7, #16]
 8010392:	4b18      	ldr	r3, [pc, #96]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 8010394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010396:	4a17      	ldr	r2, [pc, #92]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 8010398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801039c:	6413      	str	r3, [r2, #64]	; 0x40
 801039e:	4b15      	ldr	r3, [pc, #84]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 80103a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80103a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80103a6:	613b      	str	r3, [r7, #16]
 80103a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80103aa:	2300      	movs	r3, #0
 80103ac:	60fb      	str	r3, [r7, #12]
 80103ae:	4b11      	ldr	r3, [pc, #68]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 80103b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103b2:	4a10      	ldr	r2, [pc, #64]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 80103b4:	f043 0308 	orr.w	r3, r3, #8
 80103b8:	6313      	str	r3, [r2, #48]	; 0x30
 80103ba:	4b0e      	ldr	r3, [pc, #56]	; (80103f4 <HAL_UART_MspInit+0x1a8>)
 80103bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103be:	f003 0308 	and.w	r3, r3, #8
 80103c2:	60fb      	str	r3, [r7, #12]
 80103c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 80103c6:	2360      	movs	r3, #96	; 0x60
 80103c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80103ca:	2302      	movs	r3, #2
 80103cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80103ce:	2300      	movs	r3, #0
 80103d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80103d2:	2303      	movs	r3, #3
 80103d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80103d6:	2307      	movs	r3, #7
 80103d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80103da:	f107 031c 	add.w	r3, r7, #28
 80103de:	4619      	mov	r1, r3
 80103e0:	480b      	ldr	r0, [pc, #44]	; (8010410 <HAL_UART_MspInit+0x1c4>)
 80103e2:	f001 ff8b 	bl	80122fc <HAL_GPIO_Init>
}
 80103e6:	bf00      	nop
 80103e8:	3730      	adds	r7, #48	; 0x30
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}
 80103ee:	bf00      	nop
 80103f0:	40011000 	.word	0x40011000
 80103f4:	40023800 	.word	0x40023800
 80103f8:	40020000 	.word	0x40020000
 80103fc:	200015fc 	.word	0x200015fc
 8010400:	400264b8 	.word	0x400264b8
 8010404:	2000165c 	.word	0x2000165c
 8010408:	40026488 	.word	0x40026488
 801040c:	40004400 	.word	0x40004400
 8010410:	40020c00 	.word	0x40020c00

08010414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8010414:	f8df d034 	ldr.w	sp, [pc, #52]	; 801044c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8010418:	480d      	ldr	r0, [pc, #52]	; (8010450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 801041a:	490e      	ldr	r1, [pc, #56]	; (8010454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 801041c:	4a0e      	ldr	r2, [pc, #56]	; (8010458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801041e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8010420:	e002      	b.n	8010428 <LoopCopyDataInit>

08010422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8010422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8010424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8010426:	3304      	adds	r3, #4

08010428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8010428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801042a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 801042c:	d3f9      	bcc.n	8010422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801042e:	4a0b      	ldr	r2, [pc, #44]	; (801045c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8010430:	4c0b      	ldr	r4, [pc, #44]	; (8010460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8010432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8010434:	e001      	b.n	801043a <LoopFillZerobss>

08010436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8010436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8010438:	3204      	adds	r2, #4

0801043a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801043a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 801043c:	d3fb      	bcc.n	8010436 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 801043e:	f7ff fbbd 	bl	800fbbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010442:	f00b fe11 	bl	801c068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010446:	f7ff f843 	bl	800f4d0 <main>
  bx  lr    
 801044a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 801044c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8010450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8010454:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8010458:	0801fa64 	.word	0x0801fa64
  ldr r2, =_sbss
 801045c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8010460:	2000a68c 	.word	0x2000a68c

08010464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010464:	e7fe      	b.n	8010464 <ADC_IRQHandler>
	...

08010468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8010468:	b580      	push	{r7, lr}
 801046a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801046c:	4b0e      	ldr	r3, [pc, #56]	; (80104a8 <HAL_Init+0x40>)
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	4a0d      	ldr	r2, [pc, #52]	; (80104a8 <HAL_Init+0x40>)
 8010472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8010478:	4b0b      	ldr	r3, [pc, #44]	; (80104a8 <HAL_Init+0x40>)
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4a0a      	ldr	r2, [pc, #40]	; (80104a8 <HAL_Init+0x40>)
 801047e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8010484:	4b08      	ldr	r3, [pc, #32]	; (80104a8 <HAL_Init+0x40>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	4a07      	ldr	r2, [pc, #28]	; (80104a8 <HAL_Init+0x40>)
 801048a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801048e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8010490:	2003      	movs	r0, #3
 8010492:	f001 fb72 	bl	8011b7a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8010496:	2005      	movs	r0, #5
 8010498:	f7ff f9b0 	bl	800f7fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801049c:	f7ff f982 	bl	800f7a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80104a0:	2300      	movs	r3, #0
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	bd80      	pop	{r7, pc}
 80104a6:	bf00      	nop
 80104a8:	40023c00 	.word	0x40023c00

080104ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80104ac:	b480      	push	{r7}
 80104ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80104b0:	4b06      	ldr	r3, [pc, #24]	; (80104cc <HAL_IncTick+0x20>)
 80104b2:	781b      	ldrb	r3, [r3, #0]
 80104b4:	461a      	mov	r2, r3
 80104b6:	4b06      	ldr	r3, [pc, #24]	; (80104d0 <HAL_IncTick+0x24>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4413      	add	r3, r2
 80104bc:	4a04      	ldr	r2, [pc, #16]	; (80104d0 <HAL_IncTick+0x24>)
 80104be:	6013      	str	r3, [r2, #0]
}
 80104c0:	bf00      	nop
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr
 80104ca:	bf00      	nop
 80104cc:	20000024 	.word	0x20000024
 80104d0:	200016bc 	.word	0x200016bc

080104d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80104d4:	b480      	push	{r7}
 80104d6:	af00      	add	r7, sp, #0
  return uwTick;
 80104d8:	4b03      	ldr	r3, [pc, #12]	; (80104e8 <HAL_GetTick+0x14>)
 80104da:	681b      	ldr	r3, [r3, #0]
}
 80104dc:	4618      	mov	r0, r3
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	200016bc 	.word	0x200016bc

080104ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b084      	sub	sp, #16
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80104f4:	2300      	movs	r3, #0
 80104f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d101      	bne.n	8010502 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80104fe:	2301      	movs	r3, #1
 8010500:	e033      	b.n	801056a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010506:	2b00      	cmp	r3, #0
 8010508:	d109      	bne.n	801051e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 801050a:	6878      	ldr	r0, [r7, #4]
 801050c:	f7fe fb82 	bl	800ec14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	2200      	movs	r2, #0
 8010514:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2200      	movs	r2, #0
 801051a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010522:	f003 0310 	and.w	r3, r3, #16
 8010526:	2b00      	cmp	r3, #0
 8010528:	d118      	bne.n	801055c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801052e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8010532:	f023 0302 	bic.w	r3, r3, #2
 8010536:	f043 0202 	orr.w	r2, r3, #2
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f000 fa54 	bl	80109ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	2200      	movs	r2, #0
 8010548:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801054e:	f023 0303 	bic.w	r3, r3, #3
 8010552:	f043 0201 	orr.w	r2, r3, #1
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	641a      	str	r2, [r3, #64]	; 0x40
 801055a:	e001      	b.n	8010560 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 801055c:	2301      	movs	r3, #1
 801055e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8010568:	7bfb      	ldrb	r3, [r7, #15]
}
 801056a:	4618      	mov	r0, r3
 801056c:	3710      	adds	r7, #16
 801056e:	46bd      	mov	sp, r7
 8010570:	bd80      	pop	{r7, pc}
	...

08010574 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8010574:	b580      	push	{r7, lr}
 8010576:	b086      	sub	sp, #24
 8010578:	af00      	add	r7, sp, #0
 801057a:	60f8      	str	r0, [r7, #12]
 801057c:	60b9      	str	r1, [r7, #8]
 801057e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8010580:	2300      	movs	r3, #0
 8010582:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801058a:	2b01      	cmp	r3, #1
 801058c:	d101      	bne.n	8010592 <HAL_ADC_Start_DMA+0x1e>
 801058e:	2302      	movs	r3, #2
 8010590:	e0e9      	b.n	8010766 <HAL_ADC_Start_DMA+0x1f2>
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2201      	movs	r2, #1
 8010596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	f003 0301 	and.w	r3, r3, #1
 80105a4:	2b01      	cmp	r3, #1
 80105a6:	d018      	beq.n	80105da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	689a      	ldr	r2, [r3, #8]
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	f042 0201 	orr.w	r2, r2, #1
 80105b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80105b8:	4b6d      	ldr	r3, [pc, #436]	; (8010770 <HAL_ADC_Start_DMA+0x1fc>)
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	4a6d      	ldr	r2, [pc, #436]	; (8010774 <HAL_ADC_Start_DMA+0x200>)
 80105be:	fba2 2303 	umull	r2, r3, r2, r3
 80105c2:	0c9a      	lsrs	r2, r3, #18
 80105c4:	4613      	mov	r3, r2
 80105c6:	005b      	lsls	r3, r3, #1
 80105c8:	4413      	add	r3, r2
 80105ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80105cc:	e002      	b.n	80105d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80105ce:	693b      	ldr	r3, [r7, #16]
 80105d0:	3b01      	subs	r3, #1
 80105d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80105d4:	693b      	ldr	r3, [r7, #16]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1f9      	bne.n	80105ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105e8:	d107      	bne.n	80105fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	689a      	ldr	r2, [r3, #8]
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80105f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	689b      	ldr	r3, [r3, #8]
 8010600:	f003 0301 	and.w	r3, r3, #1
 8010604:	2b01      	cmp	r3, #1
 8010606:	f040 80a1 	bne.w	801074c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801060e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8010612:	f023 0301 	bic.w	r3, r3, #1
 8010616:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	685b      	ldr	r3, [r3, #4]
 8010624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010628:	2b00      	cmp	r3, #0
 801062a:	d007      	beq.n	801063c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010630:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8010634:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801063c:	68fb      	ldr	r3, [r7, #12]
 801063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010640:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010648:	d106      	bne.n	8010658 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801064e:	f023 0206 	bic.w	r2, r3, #6
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	645a      	str	r2, [r3, #68]	; 0x44
 8010656:	e002      	b.n	801065e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8010658:	68fb      	ldr	r3, [r7, #12]
 801065a:	2200      	movs	r2, #0
 801065c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	2200      	movs	r2, #0
 8010662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010666:	4b44      	ldr	r3, [pc, #272]	; (8010778 <HAL_ADC_Start_DMA+0x204>)
 8010668:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801066e:	4a43      	ldr	r2, [pc, #268]	; (801077c <HAL_ADC_Start_DMA+0x208>)
 8010670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010676:	4a42      	ldr	r2, [pc, #264]	; (8010780 <HAL_ADC_Start_DMA+0x20c>)
 8010678:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801067e:	4a41      	ldr	r2, [pc, #260]	; (8010784 <HAL_ADC_Start_DMA+0x210>)
 8010680:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f06f 0222 	mvn.w	r2, #34	; 0x22
 801068a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	685a      	ldr	r2, [r3, #4]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801069a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	689a      	ldr	r2, [r3, #8]
 80106a2:	68fb      	ldr	r3, [r7, #12]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80106aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	334c      	adds	r3, #76	; 0x4c
 80106b6:	4619      	mov	r1, r3
 80106b8:	68ba      	ldr	r2, [r7, #8]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f001 fb5c 	bl	8011d78 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	f003 031f 	and.w	r3, r3, #31
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d12a      	bne.n	8010722 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	4a2d      	ldr	r2, [pc, #180]	; (8010788 <HAL_ADC_Start_DMA+0x214>)
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d015      	beq.n	8010702 <HAL_ADC_Start_DMA+0x18e>
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4a2c      	ldr	r2, [pc, #176]	; (801078c <HAL_ADC_Start_DMA+0x218>)
 80106dc:	4293      	cmp	r3, r2
 80106de:	d105      	bne.n	80106ec <HAL_ADC_Start_DMA+0x178>
 80106e0:	4b25      	ldr	r3, [pc, #148]	; (8010778 <HAL_ADC_Start_DMA+0x204>)
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	f003 031f 	and.w	r3, r3, #31
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00a      	beq.n	8010702 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	4a27      	ldr	r2, [pc, #156]	; (8010790 <HAL_ADC_Start_DMA+0x21c>)
 80106f2:	4293      	cmp	r3, r2
 80106f4:	d136      	bne.n	8010764 <HAL_ADC_Start_DMA+0x1f0>
 80106f6:	4b20      	ldr	r3, [pc, #128]	; (8010778 <HAL_ADC_Start_DMA+0x204>)
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	f003 0310 	and.w	r3, r3, #16
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d130      	bne.n	8010764 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	689b      	ldr	r3, [r3, #8]
 8010708:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801070c:	2b00      	cmp	r3, #0
 801070e:	d129      	bne.n	8010764 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	689a      	ldr	r2, [r3, #8]
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801071e:	609a      	str	r2, [r3, #8]
 8010720:	e020      	b.n	8010764 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	4a18      	ldr	r2, [pc, #96]	; (8010788 <HAL_ADC_Start_DMA+0x214>)
 8010728:	4293      	cmp	r3, r2
 801072a:	d11b      	bne.n	8010764 <HAL_ADC_Start_DMA+0x1f0>
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	689b      	ldr	r3, [r3, #8]
 8010732:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010736:	2b00      	cmp	r3, #0
 8010738:	d114      	bne.n	8010764 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	689a      	ldr	r2, [r3, #8]
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8010748:	609a      	str	r2, [r3, #8]
 801074a:	e00b      	b.n	8010764 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010750:	f043 0210 	orr.w	r2, r3, #16
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801075c:	f043 0201 	orr.w	r2, r3, #1
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8010764:	2300      	movs	r3, #0
}
 8010766:	4618      	mov	r0, r3
 8010768:	3718      	adds	r7, #24
 801076a:	46bd      	mov	sp, r7
 801076c:	bd80      	pop	{r7, pc}
 801076e:	bf00      	nop
 8010770:	2000001c 	.word	0x2000001c
 8010774:	431bde83 	.word	0x431bde83
 8010778:	40012300 	.word	0x40012300
 801077c:	08010be5 	.word	0x08010be5
 8010780:	08010c9f 	.word	0x08010c9f
 8010784:	08010cbb 	.word	0x08010cbb
 8010788:	40012000 	.word	0x40012000
 801078c:	40012100 	.word	0x40012100
 8010790:	40012200 	.word	0x40012200

08010794 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 801079c:	bf00      	nop
 801079e:	370c      	adds	r7, #12
 80107a0:	46bd      	mov	sp, r7
 80107a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a6:	4770      	bx	lr

080107a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80107a8:	b480      	push	{r7}
 80107aa:	b085      	sub	sp, #20
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	6078      	str	r0, [r7, #4]
 80107b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80107b2:	2300      	movs	r3, #0
 80107b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d101      	bne.n	80107c4 <HAL_ADC_ConfigChannel+0x1c>
 80107c0:	2302      	movs	r3, #2
 80107c2:	e105      	b.n	80109d0 <HAL_ADC_ConfigChannel+0x228>
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	2201      	movs	r2, #1
 80107c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	2b09      	cmp	r3, #9
 80107d2:	d925      	bls.n	8010820 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	68d9      	ldr	r1, [r3, #12]
 80107da:	683b      	ldr	r3, [r7, #0]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	b29b      	uxth	r3, r3
 80107e0:	461a      	mov	r2, r3
 80107e2:	4613      	mov	r3, r2
 80107e4:	005b      	lsls	r3, r3, #1
 80107e6:	4413      	add	r3, r2
 80107e8:	3b1e      	subs	r3, #30
 80107ea:	2207      	movs	r2, #7
 80107ec:	fa02 f303 	lsl.w	r3, r2, r3
 80107f0:	43da      	mvns	r2, r3
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	400a      	ands	r2, r1
 80107f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	68d9      	ldr	r1, [r3, #12]
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	689a      	ldr	r2, [r3, #8]
 8010804:	683b      	ldr	r3, [r7, #0]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	b29b      	uxth	r3, r3
 801080a:	4618      	mov	r0, r3
 801080c:	4603      	mov	r3, r0
 801080e:	005b      	lsls	r3, r3, #1
 8010810:	4403      	add	r3, r0
 8010812:	3b1e      	subs	r3, #30
 8010814:	409a      	lsls	r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	430a      	orrs	r2, r1
 801081c:	60da      	str	r2, [r3, #12]
 801081e:	e022      	b.n	8010866 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	6919      	ldr	r1, [r3, #16]
 8010826:	683b      	ldr	r3, [r7, #0]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	b29b      	uxth	r3, r3
 801082c:	461a      	mov	r2, r3
 801082e:	4613      	mov	r3, r2
 8010830:	005b      	lsls	r3, r3, #1
 8010832:	4413      	add	r3, r2
 8010834:	2207      	movs	r2, #7
 8010836:	fa02 f303 	lsl.w	r3, r2, r3
 801083a:	43da      	mvns	r2, r3
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	681b      	ldr	r3, [r3, #0]
 8010840:	400a      	ands	r2, r1
 8010842:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	6919      	ldr	r1, [r3, #16]
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	689a      	ldr	r2, [r3, #8]
 801084e:	683b      	ldr	r3, [r7, #0]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	b29b      	uxth	r3, r3
 8010854:	4618      	mov	r0, r3
 8010856:	4603      	mov	r3, r0
 8010858:	005b      	lsls	r3, r3, #1
 801085a:	4403      	add	r3, r0
 801085c:	409a      	lsls	r2, r3
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	430a      	orrs	r2, r1
 8010864:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	685b      	ldr	r3, [r3, #4]
 801086a:	2b06      	cmp	r3, #6
 801086c:	d824      	bhi.n	80108b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010874:	683b      	ldr	r3, [r7, #0]
 8010876:	685a      	ldr	r2, [r3, #4]
 8010878:	4613      	mov	r3, r2
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	4413      	add	r3, r2
 801087e:	3b05      	subs	r3, #5
 8010880:	221f      	movs	r2, #31
 8010882:	fa02 f303 	lsl.w	r3, r2, r3
 8010886:	43da      	mvns	r2, r3
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	400a      	ands	r2, r1
 801088e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8010896:	683b      	ldr	r3, [r7, #0]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	b29b      	uxth	r3, r3
 801089c:	4618      	mov	r0, r3
 801089e:	683b      	ldr	r3, [r7, #0]
 80108a0:	685a      	ldr	r2, [r3, #4]
 80108a2:	4613      	mov	r3, r2
 80108a4:	009b      	lsls	r3, r3, #2
 80108a6:	4413      	add	r3, r2
 80108a8:	3b05      	subs	r3, #5
 80108aa:	fa00 f203 	lsl.w	r2, r0, r3
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	430a      	orrs	r2, r1
 80108b4:	635a      	str	r2, [r3, #52]	; 0x34
 80108b6:	e04c      	b.n	8010952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80108b8:	683b      	ldr	r3, [r7, #0]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	2b0c      	cmp	r3, #12
 80108be:	d824      	bhi.n	801090a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	685a      	ldr	r2, [r3, #4]
 80108ca:	4613      	mov	r3, r2
 80108cc:	009b      	lsls	r3, r3, #2
 80108ce:	4413      	add	r3, r2
 80108d0:	3b23      	subs	r3, #35	; 0x23
 80108d2:	221f      	movs	r2, #31
 80108d4:	fa02 f303 	lsl.w	r3, r2, r3
 80108d8:	43da      	mvns	r2, r3
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	400a      	ands	r2, r1
 80108e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	4618      	mov	r0, r3
 80108f0:	683b      	ldr	r3, [r7, #0]
 80108f2:	685a      	ldr	r2, [r3, #4]
 80108f4:	4613      	mov	r3, r2
 80108f6:	009b      	lsls	r3, r3, #2
 80108f8:	4413      	add	r3, r2
 80108fa:	3b23      	subs	r3, #35	; 0x23
 80108fc:	fa00 f203 	lsl.w	r2, r0, r3
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	430a      	orrs	r2, r1
 8010906:	631a      	str	r2, [r3, #48]	; 0x30
 8010908:	e023      	b.n	8010952 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010910:	683b      	ldr	r3, [r7, #0]
 8010912:	685a      	ldr	r2, [r3, #4]
 8010914:	4613      	mov	r3, r2
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	4413      	add	r3, r2
 801091a:	3b41      	subs	r3, #65	; 0x41
 801091c:	221f      	movs	r2, #31
 801091e:	fa02 f303 	lsl.w	r3, r2, r3
 8010922:	43da      	mvns	r2, r3
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	400a      	ands	r2, r1
 801092a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010932:	683b      	ldr	r3, [r7, #0]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	b29b      	uxth	r3, r3
 8010938:	4618      	mov	r0, r3
 801093a:	683b      	ldr	r3, [r7, #0]
 801093c:	685a      	ldr	r2, [r3, #4]
 801093e:	4613      	mov	r3, r2
 8010940:	009b      	lsls	r3, r3, #2
 8010942:	4413      	add	r3, r2
 8010944:	3b41      	subs	r3, #65	; 0x41
 8010946:	fa00 f203 	lsl.w	r2, r0, r3
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	430a      	orrs	r2, r1
 8010950:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8010952:	4b22      	ldr	r3, [pc, #136]	; (80109dc <HAL_ADC_ConfigChannel+0x234>)
 8010954:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	4a21      	ldr	r2, [pc, #132]	; (80109e0 <HAL_ADC_ConfigChannel+0x238>)
 801095c:	4293      	cmp	r3, r2
 801095e:	d109      	bne.n	8010974 <HAL_ADC_ConfigChannel+0x1cc>
 8010960:	683b      	ldr	r3, [r7, #0]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2b12      	cmp	r3, #18
 8010966:	d105      	bne.n	8010974 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	685b      	ldr	r3, [r3, #4]
 801096c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	4a19      	ldr	r2, [pc, #100]	; (80109e0 <HAL_ADC_ConfigChannel+0x238>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d123      	bne.n	80109c6 <HAL_ADC_ConfigChannel+0x21e>
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	2b10      	cmp	r3, #16
 8010984:	d003      	beq.n	801098e <HAL_ADC_ConfigChannel+0x1e6>
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	2b11      	cmp	r3, #17
 801098c:	d11b      	bne.n	80109c6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	2b10      	cmp	r3, #16
 80109a0:	d111      	bne.n	80109c6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80109a2:	4b10      	ldr	r3, [pc, #64]	; (80109e4 <HAL_ADC_ConfigChannel+0x23c>)
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	4a10      	ldr	r2, [pc, #64]	; (80109e8 <HAL_ADC_ConfigChannel+0x240>)
 80109a8:	fba2 2303 	umull	r2, r3, r2, r3
 80109ac:	0c9a      	lsrs	r2, r3, #18
 80109ae:	4613      	mov	r3, r2
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	4413      	add	r3, r2
 80109b4:	005b      	lsls	r3, r3, #1
 80109b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80109b8:	e002      	b.n	80109c0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	3b01      	subs	r3, #1
 80109be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80109c0:	68bb      	ldr	r3, [r7, #8]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d1f9      	bne.n	80109ba <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	2200      	movs	r2, #0
 80109ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80109ce:	2300      	movs	r3, #0
}
 80109d0:	4618      	mov	r0, r3
 80109d2:	3714      	adds	r7, #20
 80109d4:	46bd      	mov	sp, r7
 80109d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109da:	4770      	bx	lr
 80109dc:	40012300 	.word	0x40012300
 80109e0:	40012000 	.word	0x40012000
 80109e4:	2000001c 	.word	0x2000001c
 80109e8:	431bde83 	.word	0x431bde83

080109ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b085      	sub	sp, #20
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80109f4:	4b79      	ldr	r3, [pc, #484]	; (8010bdc <ADC_Init+0x1f0>)
 80109f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	685b      	ldr	r3, [r3, #4]
 80109fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	685a      	ldr	r2, [r3, #4]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	431a      	orrs	r2, r3
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	685a      	ldr	r2, [r3, #4]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010a20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	6859      	ldr	r1, [r3, #4]
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	691b      	ldr	r3, [r3, #16]
 8010a2c:	021a      	lsls	r2, r3, #8
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	430a      	orrs	r2, r1
 8010a34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	685a      	ldr	r2, [r3, #4]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8010a44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	6859      	ldr	r1, [r3, #4]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	689a      	ldr	r2, [r3, #8]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	681b      	ldr	r3, [r3, #0]
 8010a54:	430a      	orrs	r2, r1
 8010a56:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	689a      	ldr	r2, [r3, #8]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010a66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	6899      	ldr	r1, [r3, #8]
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	68da      	ldr	r2, [r3, #12]
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	430a      	orrs	r2, r1
 8010a78:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a7e:	4a58      	ldr	r2, [pc, #352]	; (8010be0 <ADC_Init+0x1f4>)
 8010a80:	4293      	cmp	r3, r2
 8010a82:	d022      	beq.n	8010aca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	689a      	ldr	r2, [r3, #8]
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010a92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	6899      	ldr	r1, [r3, #8]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	430a      	orrs	r2, r1
 8010aa4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	689a      	ldr	r2, [r3, #8]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010ab4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	6899      	ldr	r1, [r3, #8]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	430a      	orrs	r2, r1
 8010ac6:	609a      	str	r2, [r3, #8]
 8010ac8:	e00f      	b.n	8010aea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	689a      	ldr	r2, [r3, #8]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8010ad8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	681b      	ldr	r3, [r3, #0]
 8010ade:	689a      	ldr	r2, [r3, #8]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8010ae8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	681b      	ldr	r3, [r3, #0]
 8010aee:	689a      	ldr	r2, [r3, #8]
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	f022 0202 	bic.w	r2, r2, #2
 8010af8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	6899      	ldr	r1, [r3, #8]
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	7e1b      	ldrb	r3, [r3, #24]
 8010b04:	005a      	lsls	r2, r3, #1
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	430a      	orrs	r2, r1
 8010b0c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d01b      	beq.n	8010b50 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	685a      	ldr	r2, [r3, #4]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010b26:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	685a      	ldr	r2, [r3, #4]
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8010b36:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	6859      	ldr	r1, [r3, #4]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b42:	3b01      	subs	r3, #1
 8010b44:	035a      	lsls	r2, r3, #13
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	430a      	orrs	r2, r1
 8010b4c:	605a      	str	r2, [r3, #4]
 8010b4e:	e007      	b.n	8010b60 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	685a      	ldr	r2, [r3, #4]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8010b5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8010b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	69db      	ldr	r3, [r3, #28]
 8010b7a:	3b01      	subs	r3, #1
 8010b7c:	051a      	lsls	r2, r3, #20
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	681b      	ldr	r3, [r3, #0]
 8010b82:	430a      	orrs	r2, r1
 8010b84:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	689a      	ldr	r2, [r3, #8]
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	681b      	ldr	r3, [r3, #0]
 8010b90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8010b94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	6899      	ldr	r1, [r3, #8]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ba2:	025a      	lsls	r2, r3, #9
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	430a      	orrs	r2, r1
 8010baa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	689a      	ldr	r2, [r3, #8]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010bba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	6899      	ldr	r1, [r3, #8]
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	695b      	ldr	r3, [r3, #20]
 8010bc6:	029a      	lsls	r2, r3, #10
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	430a      	orrs	r2, r1
 8010bce:	609a      	str	r2, [r3, #8]
}
 8010bd0:	bf00      	nop
 8010bd2:	3714      	adds	r7, #20
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bda:	4770      	bx	lr
 8010bdc:	40012300 	.word	0x40012300
 8010be0:	0f000001 	.word	0x0f000001

08010be4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	b084      	sub	sp, #16
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010bf0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bf6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d13c      	bne.n	8010c78 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d12b      	bne.n	8010c70 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d127      	bne.n	8010c70 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c26:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d006      	beq.n	8010c3c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	689b      	ldr	r3, [r3, #8]
 8010c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d119      	bne.n	8010c70 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	685a      	ldr	r2, [r3, #4]
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	f022 0220 	bic.w	r2, r2, #32
 8010c4a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d105      	bne.n	8010c70 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c68:	f043 0201 	orr.w	r2, r3, #1
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8010c70:	68f8      	ldr	r0, [r7, #12]
 8010c72:	f004 fbda 	bl	801542a <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8010c76:	e00e      	b.n	8010c96 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010c7c:	f003 0310 	and.w	r3, r3, #16
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d003      	beq.n	8010c8c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8010c84:	68f8      	ldr	r0, [r7, #12]
 8010c86:	f7ff fd85 	bl	8010794 <HAL_ADC_ErrorCallback>
}
 8010c8a:	e004      	b.n	8010c96 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	4798      	blx	r3
}
 8010c96:	bf00      	nop
 8010c98:	3710      	adds	r7, #16
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}

08010c9e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8010c9e:	b580      	push	{r7, lr}
 8010ca0:	b084      	sub	sp, #16
 8010ca2:	af00      	add	r7, sp, #0
 8010ca4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010caa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8010cac:	68f8      	ldr	r0, [r7, #12]
 8010cae:	f004 fc6a 	bl	8015586 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010cb2:	bf00      	nop
 8010cb4:	3710      	adds	r7, #16
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	bd80      	pop	{r7, pc}

08010cba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8010cba:	b580      	push	{r7, lr}
 8010cbc:	b084      	sub	sp, #16
 8010cbe:	af00      	add	r7, sp, #0
 8010cc0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2240      	movs	r2, #64	; 0x40
 8010ccc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010cd2:	f043 0204 	orr.w	r2, r3, #4
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8010cda:	68f8      	ldr	r0, [r7, #12]
 8010cdc:	f7ff fd5a 	bl	8010794 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8010ce0:	bf00      	nop
 8010ce2:	3710      	adds	r7, #16
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d101      	bne.n	8010cfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	e0ed      	b.n	8010ed6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d102      	bne.n	8010d0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8010d06:	6878      	ldr	r0, [r7, #4]
 8010d08:	f7fe f8e8 	bl	800eedc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	681a      	ldr	r2, [r3, #0]
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	f042 0201 	orr.w	r2, r2, #1
 8010d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010d1c:	f7ff fbda 	bl	80104d4 <HAL_GetTick>
 8010d20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010d22:	e012      	b.n	8010d4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010d24:	f7ff fbd6 	bl	80104d4 <HAL_GetTick>
 8010d28:	4602      	mov	r2, r0
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	1ad3      	subs	r3, r2, r3
 8010d2e:	2b0a      	cmp	r3, #10
 8010d30:	d90b      	bls.n	8010d4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2205      	movs	r2, #5
 8010d42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010d46:	2301      	movs	r3, #1
 8010d48:	e0c5      	b.n	8010ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	f003 0301 	and.w	r3, r3, #1
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d0e5      	beq.n	8010d24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	681a      	ldr	r2, [r3, #0]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f022 0202 	bic.w	r2, r2, #2
 8010d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8010d68:	f7ff fbb4 	bl	80104d4 <HAL_GetTick>
 8010d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010d6e:	e012      	b.n	8010d96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8010d70:	f7ff fbb0 	bl	80104d4 <HAL_GetTick>
 8010d74:	4602      	mov	r2, r0
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	1ad3      	subs	r3, r2, r3
 8010d7a:	2b0a      	cmp	r3, #10
 8010d7c:	d90b      	bls.n	8010d96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	2205      	movs	r2, #5
 8010d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8010d92:	2301      	movs	r3, #1
 8010d94:	e09f      	b.n	8010ed6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	685b      	ldr	r3, [r3, #4]
 8010d9c:	f003 0302 	and.w	r3, r3, #2
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d1e5      	bne.n	8010d70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	7e1b      	ldrb	r3, [r3, #24]
 8010da8:	2b01      	cmp	r3, #1
 8010daa:	d108      	bne.n	8010dbe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	681a      	ldr	r2, [r3, #0]
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010dba:	601a      	str	r2, [r3, #0]
 8010dbc:	e007      	b.n	8010dce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	681a      	ldr	r2, [r3, #0]
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010dcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	7e5b      	ldrb	r3, [r3, #25]
 8010dd2:	2b01      	cmp	r3, #1
 8010dd4:	d108      	bne.n	8010de8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	681a      	ldr	r2, [r3, #0]
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010de4:	601a      	str	r2, [r3, #0]
 8010de6:	e007      	b.n	8010df8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010df6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	7e9b      	ldrb	r3, [r3, #26]
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d108      	bne.n	8010e12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	f042 0220 	orr.w	r2, r2, #32
 8010e0e:	601a      	str	r2, [r3, #0]
 8010e10:	e007      	b.n	8010e22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	681a      	ldr	r2, [r3, #0]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	f022 0220 	bic.w	r2, r2, #32
 8010e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	7edb      	ldrb	r3, [r3, #27]
 8010e26:	2b01      	cmp	r3, #1
 8010e28:	d108      	bne.n	8010e3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	681a      	ldr	r2, [r3, #0]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	f022 0210 	bic.w	r2, r2, #16
 8010e38:	601a      	str	r2, [r3, #0]
 8010e3a:	e007      	b.n	8010e4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	681a      	ldr	r2, [r3, #0]
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	f042 0210 	orr.w	r2, r2, #16
 8010e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	7f1b      	ldrb	r3, [r3, #28]
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	d108      	bne.n	8010e66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	681a      	ldr	r2, [r3, #0]
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	f042 0208 	orr.w	r2, r2, #8
 8010e62:	601a      	str	r2, [r3, #0]
 8010e64:	e007      	b.n	8010e76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	681a      	ldr	r2, [r3, #0]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	f022 0208 	bic.w	r2, r2, #8
 8010e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	7f5b      	ldrb	r3, [r3, #29]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	d108      	bne.n	8010e90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	f042 0204 	orr.w	r2, r2, #4
 8010e8c:	601a      	str	r2, [r3, #0]
 8010e8e:	e007      	b.n	8010ea0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	681a      	ldr	r2, [r3, #0]
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	f022 0204 	bic.w	r2, r2, #4
 8010e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	689a      	ldr	r2, [r3, #8]
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	68db      	ldr	r3, [r3, #12]
 8010ea8:	431a      	orrs	r2, r3
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	691b      	ldr	r3, [r3, #16]
 8010eae:	431a      	orrs	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	695b      	ldr	r3, [r3, #20]
 8010eb4:	ea42 0103 	orr.w	r1, r2, r3
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	1e5a      	subs	r2, r3, #1
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	430a      	orrs	r2, r1
 8010ec4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2200      	movs	r2, #0
 8010eca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2201      	movs	r2, #1
 8010ed0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8010ed4:	2300      	movs	r3, #0
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3710      	adds	r7, #16
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}
	...

08010ee0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8010ee0:	b480      	push	{r7}
 8010ee2:	b087      	sub	sp, #28
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ef6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8010ef8:	7cfb      	ldrb	r3, [r7, #19]
 8010efa:	2b01      	cmp	r3, #1
 8010efc:	d003      	beq.n	8010f06 <HAL_CAN_ConfigFilter+0x26>
 8010efe:	7cfb      	ldrb	r3, [r7, #19]
 8010f00:	2b02      	cmp	r3, #2
 8010f02:	f040 80be 	bne.w	8011082 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8010f06:	4b65      	ldr	r3, [pc, #404]	; (801109c <HAL_CAN_ConfigFilter+0x1bc>)
 8010f08:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f10:	f043 0201 	orr.w	r2, r3, #1
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8010f1a:	697b      	ldr	r3, [r7, #20]
 8010f1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8010f20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8010f2a:	697b      	ldr	r3, [r7, #20]
 8010f2c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f34:	021b      	lsls	r3, r3, #8
 8010f36:	431a      	orrs	r2, r3
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	695b      	ldr	r3, [r3, #20]
 8010f42:	f003 031f 	and.w	r3, r3, #31
 8010f46:	2201      	movs	r2, #1
 8010f48:	fa02 f303 	lsl.w	r3, r2, r3
 8010f4c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8010f4e:	697b      	ldr	r3, [r7, #20]
 8010f50:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	43db      	mvns	r3, r3
 8010f58:	401a      	ands	r2, r3
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8010f60:	683b      	ldr	r3, [r7, #0]
 8010f62:	69db      	ldr	r3, [r3, #28]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d123      	bne.n	8010fb0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8010f68:	697b      	ldr	r3, [r7, #20]
 8010f6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	43db      	mvns	r3, r3
 8010f72:	401a      	ands	r2, r3
 8010f74:	697b      	ldr	r3, [r7, #20]
 8010f76:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	68db      	ldr	r3, [r3, #12]
 8010f7e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8010f80:	683b      	ldr	r3, [r7, #0]
 8010f82:	685b      	ldr	r3, [r3, #4]
 8010f84:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010f86:	683a      	ldr	r2, [r7, #0]
 8010f88:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8010f8a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010f8c:	697b      	ldr	r3, [r7, #20]
 8010f8e:	3248      	adds	r2, #72	; 0x48
 8010f90:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	689b      	ldr	r3, [r3, #8]
 8010f98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8010f9a:	683b      	ldr	r3, [r7, #0]
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010fa0:	683b      	ldr	r3, [r7, #0]
 8010fa2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010fa4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010fa6:	6979      	ldr	r1, [r7, #20]
 8010fa8:	3348      	adds	r3, #72	; 0x48
 8010faa:	00db      	lsls	r3, r3, #3
 8010fac:	440b      	add	r3, r1
 8010fae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	69db      	ldr	r3, [r3, #28]
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d122      	bne.n	8010ffe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	431a      	orrs	r2, r3
 8010fc2:	697b      	ldr	r3, [r7, #20]
 8010fc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8010fce:	683b      	ldr	r3, [r7, #0]
 8010fd0:	685b      	ldr	r3, [r3, #4]
 8010fd2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010fd4:	683a      	ldr	r2, [r7, #0]
 8010fd6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8010fd8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	3248      	adds	r2, #72	; 0x48
 8010fde:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	689b      	ldr	r3, [r3, #8]
 8010fe6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	68db      	ldr	r3, [r3, #12]
 8010fec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8010ff2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8010ff4:	6979      	ldr	r1, [r7, #20]
 8010ff6:	3348      	adds	r3, #72	; 0x48
 8010ff8:	00db      	lsls	r3, r3, #3
 8010ffa:	440b      	add	r3, r1
 8010ffc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8010ffe:	683b      	ldr	r3, [r7, #0]
 8011000:	699b      	ldr	r3, [r3, #24]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d109      	bne.n	801101a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8011006:	697b      	ldr	r3, [r7, #20]
 8011008:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	43db      	mvns	r3, r3
 8011010:	401a      	ands	r2, r3
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8011018:	e007      	b.n	801102a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 801101a:	697b      	ldr	r3, [r7, #20]
 801101c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	431a      	orrs	r2, r3
 8011024:	697b      	ldr	r3, [r7, #20]
 8011026:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	691b      	ldr	r3, [r3, #16]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d109      	bne.n	8011046 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8011032:	697b      	ldr	r3, [r7, #20]
 8011034:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	43db      	mvns	r3, r3
 801103c:	401a      	ands	r2, r3
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8011044:	e007      	b.n	8011056 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	431a      	orrs	r2, r3
 8011050:	697b      	ldr	r3, [r7, #20]
 8011052:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8011056:	683b      	ldr	r3, [r7, #0]
 8011058:	6a1b      	ldr	r3, [r3, #32]
 801105a:	2b01      	cmp	r3, #1
 801105c:	d107      	bne.n	801106e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	431a      	orrs	r2, r3
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8011074:	f023 0201 	bic.w	r2, r3, #1
 8011078:	697b      	ldr	r3, [r7, #20]
 801107a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 801107e:	2300      	movs	r3, #0
 8011080:	e006      	b.n	8011090 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011086:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801108e:	2301      	movs	r3, #1
  }
}
 8011090:	4618      	mov	r0, r3
 8011092:	371c      	adds	r7, #28
 8011094:	46bd      	mov	sp, r7
 8011096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801109a:	4770      	bx	lr
 801109c:	40006400 	.word	0x40006400

080110a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80110ae:	b2db      	uxtb	r3, r3
 80110b0:	2b01      	cmp	r3, #1
 80110b2:	d12e      	bne.n	8011112 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2202      	movs	r2, #2
 80110b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	681a      	ldr	r2, [r3, #0]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	f022 0201 	bic.w	r2, r2, #1
 80110ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80110cc:	f7ff fa02 	bl	80104d4 <HAL_GetTick>
 80110d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80110d2:	e012      	b.n	80110fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80110d4:	f7ff f9fe 	bl	80104d4 <HAL_GetTick>
 80110d8:	4602      	mov	r2, r0
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	1ad3      	subs	r3, r2, r3
 80110de:	2b0a      	cmp	r3, #10
 80110e0:	d90b      	bls.n	80110fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2205      	movs	r2, #5
 80110f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80110f6:	2301      	movs	r3, #1
 80110f8:	e012      	b.n	8011120 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	685b      	ldr	r3, [r3, #4]
 8011100:	f003 0301 	and.w	r3, r3, #1
 8011104:	2b00      	cmp	r3, #0
 8011106:	d1e5      	bne.n	80110d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2200      	movs	r2, #0
 801110c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 801110e:	2300      	movs	r3, #0
 8011110:	e006      	b.n	8011120 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011116:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801111e:	2301      	movs	r3, #1
  }
}
 8011120:	4618      	mov	r0, r3
 8011122:	3710      	adds	r7, #16
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8011128:	b480      	push	{r7}
 801112a:	b089      	sub	sp, #36	; 0x24
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	607a      	str	r2, [r7, #4]
 8011134:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	f893 3020 	ldrb.w	r3, [r3, #32]
 801113c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	689b      	ldr	r3, [r3, #8]
 8011144:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8011146:	7ffb      	ldrb	r3, [r7, #31]
 8011148:	2b01      	cmp	r3, #1
 801114a:	d003      	beq.n	8011154 <HAL_CAN_AddTxMessage+0x2c>
 801114c:	7ffb      	ldrb	r3, [r7, #31]
 801114e:	2b02      	cmp	r3, #2
 8011150:	f040 80b8 	bne.w	80112c4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8011154:	69bb      	ldr	r3, [r7, #24]
 8011156:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801115a:	2b00      	cmp	r3, #0
 801115c:	d10a      	bne.n	8011174 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8011164:	2b00      	cmp	r3, #0
 8011166:	d105      	bne.n	8011174 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8011168:	69bb      	ldr	r3, [r7, #24]
 801116a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801116e:	2b00      	cmp	r3, #0
 8011170:	f000 80a0 	beq.w	80112b4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	0e1b      	lsrs	r3, r3, #24
 8011178:	f003 0303 	and.w	r3, r3, #3
 801117c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 801117e:	697b      	ldr	r3, [r7, #20]
 8011180:	2b02      	cmp	r3, #2
 8011182:	d907      	bls.n	8011194 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011188:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8011190:	2301      	movs	r3, #1
 8011192:	e09e      	b.n	80112d2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8011194:	2201      	movs	r2, #1
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	409a      	lsls	r2, r3
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	689b      	ldr	r3, [r3, #8]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d10d      	bne.n	80111c2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80111ac:	68bb      	ldr	r3, [r7, #8]
 80111ae:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80111b0:	68f9      	ldr	r1, [r7, #12]
 80111b2:	6809      	ldr	r1, [r1, #0]
 80111b4:	431a      	orrs	r2, r3
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	3318      	adds	r3, #24
 80111ba:	011b      	lsls	r3, r3, #4
 80111bc:	440b      	add	r3, r1
 80111be:	601a      	str	r2, [r3, #0]
 80111c0:	e00f      	b.n	80111e2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	685b      	ldr	r3, [r3, #4]
 80111c6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80111cc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80111d2:	68f9      	ldr	r1, [r7, #12]
 80111d4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80111d6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	3318      	adds	r3, #24
 80111dc:	011b      	lsls	r3, r3, #4
 80111de:	440b      	add	r3, r1
 80111e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	6819      	ldr	r1, [r3, #0]
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	691a      	ldr	r2, [r3, #16]
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	3318      	adds	r3, #24
 80111ee:	011b      	lsls	r3, r3, #4
 80111f0:	440b      	add	r3, r1
 80111f2:	3304      	adds	r3, #4
 80111f4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80111f6:	68bb      	ldr	r3, [r7, #8]
 80111f8:	7d1b      	ldrb	r3, [r3, #20]
 80111fa:	2b01      	cmp	r3, #1
 80111fc:	d111      	bne.n	8011222 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	681a      	ldr	r2, [r3, #0]
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	3318      	adds	r3, #24
 8011206:	011b      	lsls	r3, r3, #4
 8011208:	4413      	add	r3, r2
 801120a:	3304      	adds	r3, #4
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68fa      	ldr	r2, [r7, #12]
 8011210:	6811      	ldr	r1, [r2, #0]
 8011212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	3318      	adds	r3, #24
 801121a:	011b      	lsls	r3, r3, #4
 801121c:	440b      	add	r3, r1
 801121e:	3304      	adds	r3, #4
 8011220:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	3307      	adds	r3, #7
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	061a      	lsls	r2, r3, #24
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	3306      	adds	r3, #6
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	041b      	lsls	r3, r3, #16
 8011232:	431a      	orrs	r2, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	3305      	adds	r3, #5
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	021b      	lsls	r3, r3, #8
 801123c:	4313      	orrs	r3, r2
 801123e:	687a      	ldr	r2, [r7, #4]
 8011240:	3204      	adds	r2, #4
 8011242:	7812      	ldrb	r2, [r2, #0]
 8011244:	4610      	mov	r0, r2
 8011246:	68fa      	ldr	r2, [r7, #12]
 8011248:	6811      	ldr	r1, [r2, #0]
 801124a:	ea43 0200 	orr.w	r2, r3, r0
 801124e:	697b      	ldr	r3, [r7, #20]
 8011250:	011b      	lsls	r3, r3, #4
 8011252:	440b      	add	r3, r1
 8011254:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8011258:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	3303      	adds	r3, #3
 801125e:	781b      	ldrb	r3, [r3, #0]
 8011260:	061a      	lsls	r2, r3, #24
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	3302      	adds	r3, #2
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	041b      	lsls	r3, r3, #16
 801126a:	431a      	orrs	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	3301      	adds	r3, #1
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	021b      	lsls	r3, r3, #8
 8011274:	4313      	orrs	r3, r2
 8011276:	687a      	ldr	r2, [r7, #4]
 8011278:	7812      	ldrb	r2, [r2, #0]
 801127a:	4610      	mov	r0, r2
 801127c:	68fa      	ldr	r2, [r7, #12]
 801127e:	6811      	ldr	r1, [r2, #0]
 8011280:	ea43 0200 	orr.w	r2, r3, r0
 8011284:	697b      	ldr	r3, [r7, #20]
 8011286:	011b      	lsls	r3, r3, #4
 8011288:	440b      	add	r3, r1
 801128a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801128e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	3318      	adds	r3, #24
 8011298:	011b      	lsls	r3, r3, #4
 801129a:	4413      	add	r3, r2
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	68fa      	ldr	r2, [r7, #12]
 80112a0:	6811      	ldr	r1, [r2, #0]
 80112a2:	f043 0201 	orr.w	r2, r3, #1
 80112a6:	697b      	ldr	r3, [r7, #20]
 80112a8:	3318      	adds	r3, #24
 80112aa:	011b      	lsls	r3, r3, #4
 80112ac:	440b      	add	r3, r1
 80112ae:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80112b0:	2300      	movs	r3, #0
 80112b2:	e00e      	b.n	80112d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80112c0:	2301      	movs	r3, #1
 80112c2:	e006      	b.n	80112d2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80112d0:	2301      	movs	r3, #1
  }
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3724      	adds	r7, #36	; 0x24
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr

080112de <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80112de:	b480      	push	{r7}
 80112e0:	b085      	sub	sp, #20
 80112e2:	af00      	add	r7, sp, #0
 80112e4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80112e6:	2300      	movs	r3, #0
 80112e8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80112f0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80112f2:	7afb      	ldrb	r3, [r7, #11]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d002      	beq.n	80112fe <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80112f8:	7afb      	ldrb	r3, [r7, #11]
 80112fa:	2b02      	cmp	r3, #2
 80112fc:	d11d      	bne.n	801133a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	689b      	ldr	r3, [r3, #8]
 8011304:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011308:	2b00      	cmp	r3, #0
 801130a:	d002      	beq.n	8011312 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	3301      	adds	r3, #1
 8011310:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	689b      	ldr	r3, [r3, #8]
 8011318:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801131c:	2b00      	cmp	r3, #0
 801131e:	d002      	beq.n	8011326 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	3301      	adds	r3, #1
 8011324:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	689b      	ldr	r3, [r3, #8]
 801132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011330:	2b00      	cmp	r3, #0
 8011332:	d002      	beq.n	801133a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	3301      	adds	r3, #1
 8011338:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 801133a:	68fb      	ldr	r3, [r7, #12]
}
 801133c:	4618      	mov	r0, r3
 801133e:	3714      	adds	r7, #20
 8011340:	46bd      	mov	sp, r7
 8011342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011346:	4770      	bx	lr

08011348 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8011348:	b480      	push	{r7}
 801134a:	b087      	sub	sp, #28
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
 8011354:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f893 3020 	ldrb.w	r3, [r3, #32]
 801135c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 801135e:	7dfb      	ldrb	r3, [r7, #23]
 8011360:	2b01      	cmp	r3, #1
 8011362:	d003      	beq.n	801136c <HAL_CAN_GetRxMessage+0x24>
 8011364:	7dfb      	ldrb	r3, [r7, #23]
 8011366:	2b02      	cmp	r3, #2
 8011368:	f040 80f3 	bne.w	8011552 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d10e      	bne.n	8011390 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	68db      	ldr	r3, [r3, #12]
 8011378:	f003 0303 	and.w	r3, r3, #3
 801137c:	2b00      	cmp	r3, #0
 801137e:	d116      	bne.n	80113ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011384:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 801138c:	2301      	movs	r3, #1
 801138e:	e0e7      	b.n	8011560 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	691b      	ldr	r3, [r3, #16]
 8011396:	f003 0303 	and.w	r3, r3, #3
 801139a:	2b00      	cmp	r3, #0
 801139c:	d107      	bne.n	80113ae <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80113aa:	2301      	movs	r3, #1
 80113ac:	e0d8      	b.n	8011560 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	681a      	ldr	r2, [r3, #0]
 80113b2:	68bb      	ldr	r3, [r7, #8]
 80113b4:	331b      	adds	r3, #27
 80113b6:	011b      	lsls	r3, r3, #4
 80113b8:	4413      	add	r3, r2
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	f003 0204 	and.w	r2, r3, #4
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	689b      	ldr	r3, [r3, #8]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d10c      	bne.n	80113e6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	681a      	ldr	r2, [r3, #0]
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	331b      	adds	r3, #27
 80113d4:	011b      	lsls	r3, r3, #4
 80113d6:	4413      	add	r3, r2
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	0d5b      	lsrs	r3, r3, #21
 80113dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	601a      	str	r2, [r3, #0]
 80113e4:	e00b      	b.n	80113fe <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	331b      	adds	r3, #27
 80113ee:	011b      	lsls	r3, r3, #4
 80113f0:	4413      	add	r3, r2
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	08db      	lsrs	r3, r3, #3
 80113f6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	331b      	adds	r3, #27
 8011406:	011b      	lsls	r3, r3, #4
 8011408:	4413      	add	r3, r2
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	f003 0202 	and.w	r2, r3, #2
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681a      	ldr	r2, [r3, #0]
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	331b      	adds	r3, #27
 801141c:	011b      	lsls	r3, r3, #4
 801141e:	4413      	add	r3, r2
 8011420:	3304      	adds	r3, #4
 8011422:	681b      	ldr	r3, [r3, #0]
 8011424:	f003 020f 	and.w	r2, r3, #15
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	331b      	adds	r3, #27
 8011434:	011b      	lsls	r3, r3, #4
 8011436:	4413      	add	r3, r2
 8011438:	3304      	adds	r3, #4
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	0a1b      	lsrs	r3, r3, #8
 801143e:	b2da      	uxtb	r2, r3
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	681a      	ldr	r2, [r3, #0]
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	331b      	adds	r3, #27
 801144c:	011b      	lsls	r3, r3, #4
 801144e:	4413      	add	r3, r2
 8011450:	3304      	adds	r3, #4
 8011452:	681b      	ldr	r3, [r3, #0]
 8011454:	0c1b      	lsrs	r3, r3, #16
 8011456:	b29a      	uxth	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	681a      	ldr	r2, [r3, #0]
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	011b      	lsls	r3, r3, #4
 8011464:	4413      	add	r3, r2
 8011466:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	b2da      	uxtb	r2, r3
 801146e:	683b      	ldr	r3, [r7, #0]
 8011470:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	681a      	ldr	r2, [r3, #0]
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	011b      	lsls	r3, r3, #4
 801147a:	4413      	add	r3, r2
 801147c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	0a1a      	lsrs	r2, r3, #8
 8011484:	683b      	ldr	r3, [r7, #0]
 8011486:	3301      	adds	r3, #1
 8011488:	b2d2      	uxtb	r2, r2
 801148a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681a      	ldr	r2, [r3, #0]
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	011b      	lsls	r3, r3, #4
 8011494:	4413      	add	r3, r2
 8011496:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	0c1a      	lsrs	r2, r3, #16
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	3302      	adds	r3, #2
 80114a2:	b2d2      	uxtb	r2, r2
 80114a4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	011b      	lsls	r3, r3, #4
 80114ae:	4413      	add	r3, r2
 80114b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	0e1a      	lsrs	r2, r3, #24
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	3303      	adds	r3, #3
 80114bc:	b2d2      	uxtb	r2, r2
 80114be:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	011b      	lsls	r3, r3, #4
 80114c8:	4413      	add	r3, r2
 80114ca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80114ce:	681a      	ldr	r2, [r3, #0]
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	3304      	adds	r3, #4
 80114d4:	b2d2      	uxtb	r2, r2
 80114d6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	681a      	ldr	r2, [r3, #0]
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	011b      	lsls	r3, r3, #4
 80114e0:	4413      	add	r3, r2
 80114e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	0a1a      	lsrs	r2, r3, #8
 80114ea:	683b      	ldr	r3, [r7, #0]
 80114ec:	3305      	adds	r3, #5
 80114ee:	b2d2      	uxtb	r2, r2
 80114f0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	011b      	lsls	r3, r3, #4
 80114fa:	4413      	add	r3, r2
 80114fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	0c1a      	lsrs	r2, r3, #16
 8011504:	683b      	ldr	r3, [r7, #0]
 8011506:	3306      	adds	r3, #6
 8011508:	b2d2      	uxtb	r2, r2
 801150a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	68bb      	ldr	r3, [r7, #8]
 8011512:	011b      	lsls	r3, r3, #4
 8011514:	4413      	add	r3, r2
 8011516:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	0e1a      	lsrs	r2, r3, #24
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	3307      	adds	r3, #7
 8011522:	b2d2      	uxtb	r2, r2
 8011524:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8011526:	68bb      	ldr	r3, [r7, #8]
 8011528:	2b00      	cmp	r3, #0
 801152a:	d108      	bne.n	801153e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	68da      	ldr	r2, [r3, #12]
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	f042 0220 	orr.w	r2, r2, #32
 801153a:	60da      	str	r2, [r3, #12]
 801153c:	e007      	b.n	801154e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	681b      	ldr	r3, [r3, #0]
 8011542:	691a      	ldr	r2, [r3, #16]
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	f042 0220 	orr.w	r2, r2, #32
 801154c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 801154e:	2300      	movs	r3, #0
 8011550:	e006      	b.n	8011560 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011556:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801155e:	2301      	movs	r3, #1
  }
}
 8011560:	4618      	mov	r0, r3
 8011562:	371c      	adds	r7, #28
 8011564:	46bd      	mov	sp, r7
 8011566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801156a:	4770      	bx	lr

0801156c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 801156c:	b480      	push	{r7}
 801156e:	b085      	sub	sp, #20
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f893 3020 	ldrb.w	r3, [r3, #32]
 801157c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 801157e:	7bfb      	ldrb	r3, [r7, #15]
 8011580:	2b01      	cmp	r3, #1
 8011582:	d002      	beq.n	801158a <HAL_CAN_ActivateNotification+0x1e>
 8011584:	7bfb      	ldrb	r3, [r7, #15]
 8011586:	2b02      	cmp	r3, #2
 8011588:	d109      	bne.n	801159e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	6959      	ldr	r1, [r3, #20]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	683a      	ldr	r2, [r7, #0]
 8011596:	430a      	orrs	r2, r1
 8011598:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 801159a:	2300      	movs	r3, #0
 801159c:	e006      	b.n	80115ac <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80115aa:	2301      	movs	r3, #1
  }
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3714      	adds	r7, #20
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr

080115b8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b08a      	sub	sp, #40	; 0x28
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80115c0:	2300      	movs	r3, #0
 80115c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	695b      	ldr	r3, [r3, #20]
 80115ca:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	689b      	ldr	r3, [r3, #8]
 80115da:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	68db      	ldr	r3, [r3, #12]
 80115e2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	691b      	ldr	r3, [r3, #16]
 80115ea:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	699b      	ldr	r3, [r3, #24]
 80115f2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80115f4:	6a3b      	ldr	r3, [r7, #32]
 80115f6:	f003 0301 	and.w	r3, r3, #1
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d07c      	beq.n	80116f8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	f003 0301 	and.w	r3, r3, #1
 8011604:	2b00      	cmp	r3, #0
 8011606:	d023      	beq.n	8011650 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2201      	movs	r2, #1
 801160e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8011610:	69bb      	ldr	r3, [r7, #24]
 8011612:	f003 0302 	and.w	r3, r3, #2
 8011616:	2b00      	cmp	r3, #0
 8011618:	d003      	beq.n	8011622 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f7f0 fb88 	bl	8001d30 <HAL_CAN_TxMailbox0CompleteCallback>
 8011620:	e016      	b.n	8011650 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	f003 0304 	and.w	r3, r3, #4
 8011628:	2b00      	cmp	r3, #0
 801162a:	d004      	beq.n	8011636 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 801162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011632:	627b      	str	r3, [r7, #36]	; 0x24
 8011634:	e00c      	b.n	8011650 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8011636:	69bb      	ldr	r3, [r7, #24]
 8011638:	f003 0308 	and.w	r3, r3, #8
 801163c:	2b00      	cmp	r3, #0
 801163e:	d004      	beq.n	801164a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8011640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011642:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011646:	627b      	str	r3, [r7, #36]	; 0x24
 8011648:	e002      	b.n	8011650 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 801164a:	6878      	ldr	r0, [r7, #4]
 801164c:	f000 f97f 	bl	801194e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8011650:	69bb      	ldr	r3, [r7, #24]
 8011652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011656:	2b00      	cmp	r3, #0
 8011658:	d024      	beq.n	80116a4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011662:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801166a:	2b00      	cmp	r3, #0
 801166c:	d003      	beq.n	8011676 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f000 f959 	bl	8011926 <HAL_CAN_TxMailbox1CompleteCallback>
 8011674:	e016      	b.n	80116a4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8011676:	69bb      	ldr	r3, [r7, #24]
 8011678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801167c:	2b00      	cmp	r3, #0
 801167e:	d004      	beq.n	801168a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8011680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011682:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8011686:	627b      	str	r3, [r7, #36]	; 0x24
 8011688:	e00c      	b.n	80116a4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 801168a:	69bb      	ldr	r3, [r7, #24]
 801168c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011690:	2b00      	cmp	r3, #0
 8011692:	d004      	beq.n	801169e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8011694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011696:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801169a:	627b      	str	r3, [r7, #36]	; 0x24
 801169c:	e002      	b.n	80116a4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 801169e:	6878      	ldr	r0, [r7, #4]
 80116a0:	f000 f95f 	bl	8011962 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80116a4:	69bb      	ldr	r3, [r7, #24]
 80116a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d024      	beq.n	80116f8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	681b      	ldr	r3, [r3, #0]
 80116b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80116b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80116b8:	69bb      	ldr	r3, [r7, #24]
 80116ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d003      	beq.n	80116ca <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f000 f939 	bl	801193a <HAL_CAN_TxMailbox2CompleteCallback>
 80116c8:	e016      	b.n	80116f8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80116ca:	69bb      	ldr	r3, [r7, #24]
 80116cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d004      	beq.n	80116de <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80116d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80116da:	627b      	str	r3, [r7, #36]	; 0x24
 80116dc:	e00c      	b.n	80116f8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80116de:	69bb      	ldr	r3, [r7, #24]
 80116e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d004      	beq.n	80116f2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80116e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80116ee:	627b      	str	r3, [r7, #36]	; 0x24
 80116f0:	e002      	b.n	80116f8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f000 f93f 	bl	8011976 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80116f8:	6a3b      	ldr	r3, [r7, #32]
 80116fa:	f003 0308 	and.w	r3, r3, #8
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d00c      	beq.n	801171c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8011702:	697b      	ldr	r3, [r7, #20]
 8011704:	f003 0310 	and.w	r3, r3, #16
 8011708:	2b00      	cmp	r3, #0
 801170a:	d007      	beq.n	801171c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 801170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801170e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011712:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2210      	movs	r2, #16
 801171a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 801171c:	6a3b      	ldr	r3, [r7, #32]
 801171e:	f003 0304 	and.w	r3, r3, #4
 8011722:	2b00      	cmp	r3, #0
 8011724:	d00b      	beq.n	801173e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8011726:	697b      	ldr	r3, [r7, #20]
 8011728:	f003 0308 	and.w	r3, r3, #8
 801172c:	2b00      	cmp	r3, #0
 801172e:	d006      	beq.n	801173e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	2208      	movs	r2, #8
 8011736:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8011738:	6878      	ldr	r0, [r7, #4]
 801173a:	f000 f926 	bl	801198a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 801173e:	6a3b      	ldr	r3, [r7, #32]
 8011740:	f003 0302 	and.w	r3, r3, #2
 8011744:	2b00      	cmp	r3, #0
 8011746:	d009      	beq.n	801175c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	f003 0303 	and.w	r3, r3, #3
 8011752:	2b00      	cmp	r3, #0
 8011754:	d002      	beq.n	801175c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8011756:	6878      	ldr	r0, [r7, #4]
 8011758:	f7f0 fa52 	bl	8001c00 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 801175c:	6a3b      	ldr	r3, [r7, #32]
 801175e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011762:	2b00      	cmp	r3, #0
 8011764:	d00c      	beq.n	8011780 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	f003 0310 	and.w	r3, r3, #16
 801176c:	2b00      	cmp	r3, #0
 801176e:	d007      	beq.n	8011780 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8011770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011776:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	2210      	movs	r2, #16
 801177e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8011780:	6a3b      	ldr	r3, [r7, #32]
 8011782:	f003 0320 	and.w	r3, r3, #32
 8011786:	2b00      	cmp	r3, #0
 8011788:	d00b      	beq.n	80117a2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	f003 0308 	and.w	r3, r3, #8
 8011790:	2b00      	cmp	r3, #0
 8011792:	d006      	beq.n	80117a2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2208      	movs	r2, #8
 801179a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 801179c:	6878      	ldr	r0, [r7, #4]
 801179e:	f000 f8fe 	bl	801199e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80117a2:	6a3b      	ldr	r3, [r7, #32]
 80117a4:	f003 0310 	and.w	r3, r3, #16
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d009      	beq.n	80117c0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	691b      	ldr	r3, [r3, #16]
 80117b2:	f003 0303 	and.w	r3, r3, #3
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d002      	beq.n	80117c0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80117ba:	6878      	ldr	r0, [r7, #4]
 80117bc:	f7f0 fa5a 	bl	8001c74 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80117c0:	6a3b      	ldr	r3, [r7, #32]
 80117c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d00b      	beq.n	80117e2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	f003 0310 	and.w	r3, r3, #16
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d006      	beq.n	80117e2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2210      	movs	r2, #16
 80117da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80117dc:	6878      	ldr	r0, [r7, #4]
 80117de:	f000 f8e8 	bl	80119b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80117e2:	6a3b      	ldr	r3, [r7, #32]
 80117e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d00b      	beq.n	8011804 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80117ec:	69fb      	ldr	r3, [r7, #28]
 80117ee:	f003 0308 	and.w	r3, r3, #8
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d006      	beq.n	8011804 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	2208      	movs	r2, #8
 80117fc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80117fe:	6878      	ldr	r0, [r7, #4]
 8011800:	f000 f8e1 	bl	80119c6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8011804:	6a3b      	ldr	r3, [r7, #32]
 8011806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801180a:	2b00      	cmp	r3, #0
 801180c:	d07b      	beq.n	8011906 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	f003 0304 	and.w	r3, r3, #4
 8011814:	2b00      	cmp	r3, #0
 8011816:	d072      	beq.n	80118fe <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011818:	6a3b      	ldr	r3, [r7, #32]
 801181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801181e:	2b00      	cmp	r3, #0
 8011820:	d008      	beq.n	8011834 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8011828:	2b00      	cmp	r3, #0
 801182a:	d003      	beq.n	8011834 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 801182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182e:	f043 0301 	orr.w	r3, r3, #1
 8011832:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011834:	6a3b      	ldr	r3, [r7, #32]
 8011836:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801183a:	2b00      	cmp	r3, #0
 801183c:	d008      	beq.n	8011850 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8011844:	2b00      	cmp	r3, #0
 8011846:	d003      	beq.n	8011850 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8011848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801184a:	f043 0302 	orr.w	r3, r3, #2
 801184e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8011850:	6a3b      	ldr	r3, [r7, #32]
 8011852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8011856:	2b00      	cmp	r3, #0
 8011858:	d008      	beq.n	801186c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8011860:	2b00      	cmp	r3, #0
 8011862:	d003      	beq.n	801186c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8011864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011866:	f043 0304 	orr.w	r3, r3, #4
 801186a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801186c:	6a3b      	ldr	r3, [r7, #32]
 801186e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011872:	2b00      	cmp	r3, #0
 8011874:	d043      	beq.n	80118fe <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 801187c:	2b00      	cmp	r3, #0
 801187e:	d03e      	beq.n	80118fe <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011886:	2b60      	cmp	r3, #96	; 0x60
 8011888:	d02b      	beq.n	80118e2 <HAL_CAN_IRQHandler+0x32a>
 801188a:	2b60      	cmp	r3, #96	; 0x60
 801188c:	d82e      	bhi.n	80118ec <HAL_CAN_IRQHandler+0x334>
 801188e:	2b50      	cmp	r3, #80	; 0x50
 8011890:	d022      	beq.n	80118d8 <HAL_CAN_IRQHandler+0x320>
 8011892:	2b50      	cmp	r3, #80	; 0x50
 8011894:	d82a      	bhi.n	80118ec <HAL_CAN_IRQHandler+0x334>
 8011896:	2b40      	cmp	r3, #64	; 0x40
 8011898:	d019      	beq.n	80118ce <HAL_CAN_IRQHandler+0x316>
 801189a:	2b40      	cmp	r3, #64	; 0x40
 801189c:	d826      	bhi.n	80118ec <HAL_CAN_IRQHandler+0x334>
 801189e:	2b30      	cmp	r3, #48	; 0x30
 80118a0:	d010      	beq.n	80118c4 <HAL_CAN_IRQHandler+0x30c>
 80118a2:	2b30      	cmp	r3, #48	; 0x30
 80118a4:	d822      	bhi.n	80118ec <HAL_CAN_IRQHandler+0x334>
 80118a6:	2b10      	cmp	r3, #16
 80118a8:	d002      	beq.n	80118b0 <HAL_CAN_IRQHandler+0x2f8>
 80118aa:	2b20      	cmp	r3, #32
 80118ac:	d005      	beq.n	80118ba <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80118ae:	e01d      	b.n	80118ec <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80118b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b2:	f043 0308 	orr.w	r3, r3, #8
 80118b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80118b8:	e019      	b.n	80118ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80118ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118bc:	f043 0310 	orr.w	r3, r3, #16
 80118c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80118c2:	e014      	b.n	80118ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80118c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c6:	f043 0320 	orr.w	r3, r3, #32
 80118ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80118cc:	e00f      	b.n	80118ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80118ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80118d6:	e00a      	b.n	80118ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80118d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80118e0:	e005      	b.n	80118ee <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80118e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80118e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80118ea:	e000      	b.n	80118ee <HAL_CAN_IRQHandler+0x336>
            break;
 80118ec:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	699a      	ldr	r2, [r3, #24]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80118fc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2204      	movs	r2, #4
 8011904:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8011906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011908:	2b00      	cmp	r3, #0
 801190a:	d008      	beq.n	801191e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011912:	431a      	orrs	r2, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f7f0 f9e5 	bl	8001ce8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801191e:	bf00      	nop
 8011920:	3728      	adds	r7, #40	; 0x28
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8011926:	b480      	push	{r7}
 8011928:	b083      	sub	sp, #12
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801192e:	bf00      	nop
 8011930:	370c      	adds	r7, #12
 8011932:	46bd      	mov	sp, r7
 8011934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011938:	4770      	bx	lr

0801193a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801193a:	b480      	push	{r7}
 801193c:	b083      	sub	sp, #12
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8011942:	bf00      	nop
 8011944:	370c      	adds	r7, #12
 8011946:	46bd      	mov	sp, r7
 8011948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194c:	4770      	bx	lr

0801194e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801194e:	b480      	push	{r7}
 8011950:	b083      	sub	sp, #12
 8011952:	af00      	add	r7, sp, #0
 8011954:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8011956:	bf00      	nop
 8011958:	370c      	adds	r7, #12
 801195a:	46bd      	mov	sp, r7
 801195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011960:	4770      	bx	lr

08011962 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011962:	b480      	push	{r7}
 8011964:	b083      	sub	sp, #12
 8011966:	af00      	add	r7, sp, #0
 8011968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 801196a:	bf00      	nop
 801196c:	370c      	adds	r7, #12
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr

08011976 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8011976:	b480      	push	{r7}
 8011978:	b083      	sub	sp, #12
 801197a:	af00      	add	r7, sp, #0
 801197c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 801197e:	bf00      	nop
 8011980:	370c      	adds	r7, #12
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr

0801198a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801198a:	b480      	push	{r7}
 801198c:	b083      	sub	sp, #12
 801198e:	af00      	add	r7, sp, #0
 8011990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8011992:	bf00      	nop
 8011994:	370c      	adds	r7, #12
 8011996:	46bd      	mov	sp, r7
 8011998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199c:	4770      	bx	lr

0801199e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 801199e:	b480      	push	{r7}
 80119a0:	b083      	sub	sp, #12
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80119a6:	bf00      	nop
 80119a8:	370c      	adds	r7, #12
 80119aa:	46bd      	mov	sp, r7
 80119ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b0:	4770      	bx	lr

080119b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80119b2:	b480      	push	{r7}
 80119b4:	b083      	sub	sp, #12
 80119b6:	af00      	add	r7, sp, #0
 80119b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80119ba:	bf00      	nop
 80119bc:	370c      	adds	r7, #12
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr

080119c6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80119c6:	b480      	push	{r7}
 80119c8:	b083      	sub	sp, #12
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80119ce:	bf00      	nop
 80119d0:	370c      	adds	r7, #12
 80119d2:	46bd      	mov	sp, r7
 80119d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d8:	4770      	bx	lr

080119da <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 80119da:	b480      	push	{r7}
 80119dc:	b085      	sub	sp, #20
 80119de:	af00      	add	r7, sp, #0
 80119e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80119e2:	2300      	movs	r3, #0
 80119e4:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80119ec:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 80119ee:	7bbb      	ldrb	r3, [r7, #14]
 80119f0:	2b01      	cmp	r3, #1
 80119f2:	d002      	beq.n	80119fa <HAL_CAN_ResetError+0x20>
 80119f4:	7bbb      	ldrb	r3, [r7, #14]
 80119f6:	2b02      	cmp	r3, #2
 80119f8:	d103      	bne.n	8011a02 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	2200      	movs	r2, #0
 80119fe:	625a      	str	r2, [r3, #36]	; 0x24
 8011a00:	e007      	b.n	8011a12 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8011a0e:	2301      	movs	r3, #1
 8011a10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8011a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3714      	adds	r7, #20
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <__NVIC_SetPriorityGrouping>:
{
 8011a20:	b480      	push	{r7}
 8011a22:	b085      	sub	sp, #20
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f003 0307 	and.w	r3, r3, #7
 8011a2e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8011a30:	4b0c      	ldr	r3, [pc, #48]	; (8011a64 <__NVIC_SetPriorityGrouping+0x44>)
 8011a32:	68db      	ldr	r3, [r3, #12]
 8011a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8011a36:	68ba      	ldr	r2, [r7, #8]
 8011a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8011a3c:	4013      	ands	r3, r2
 8011a3e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8011a44:	68bb      	ldr	r3, [r7, #8]
 8011a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8011a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8011a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8011a52:	4a04      	ldr	r2, [pc, #16]	; (8011a64 <__NVIC_SetPriorityGrouping+0x44>)
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	60d3      	str	r3, [r2, #12]
}
 8011a58:	bf00      	nop
 8011a5a:	3714      	adds	r7, #20
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr
 8011a64:	e000ed00 	.word	0xe000ed00

08011a68 <__NVIC_GetPriorityGrouping>:
{
 8011a68:	b480      	push	{r7}
 8011a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8011a6c:	4b04      	ldr	r3, [pc, #16]	; (8011a80 <__NVIC_GetPriorityGrouping+0x18>)
 8011a6e:	68db      	ldr	r3, [r3, #12]
 8011a70:	0a1b      	lsrs	r3, r3, #8
 8011a72:	f003 0307 	and.w	r3, r3, #7
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a7e:	4770      	bx	lr
 8011a80:	e000ed00 	.word	0xe000ed00

08011a84 <__NVIC_EnableIRQ>:
{
 8011a84:	b480      	push	{r7}
 8011a86:	b083      	sub	sp, #12
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	db0b      	blt.n	8011aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8011a96:	79fb      	ldrb	r3, [r7, #7]
 8011a98:	f003 021f 	and.w	r2, r3, #31
 8011a9c:	4907      	ldr	r1, [pc, #28]	; (8011abc <__NVIC_EnableIRQ+0x38>)
 8011a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011aa2:	095b      	lsrs	r3, r3, #5
 8011aa4:	2001      	movs	r0, #1
 8011aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8011aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8011aae:	bf00      	nop
 8011ab0:	370c      	adds	r7, #12
 8011ab2:	46bd      	mov	sp, r7
 8011ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab8:	4770      	bx	lr
 8011aba:	bf00      	nop
 8011abc:	e000e100 	.word	0xe000e100

08011ac0 <__NVIC_SetPriority>:
{
 8011ac0:	b480      	push	{r7}
 8011ac2:	b083      	sub	sp, #12
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	4603      	mov	r3, r0
 8011ac8:	6039      	str	r1, [r7, #0]
 8011aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	db0a      	blt.n	8011aea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	b2da      	uxtb	r2, r3
 8011ad8:	490c      	ldr	r1, [pc, #48]	; (8011b0c <__NVIC_SetPriority+0x4c>)
 8011ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ade:	0112      	lsls	r2, r2, #4
 8011ae0:	b2d2      	uxtb	r2, r2
 8011ae2:	440b      	add	r3, r1
 8011ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011ae8:	e00a      	b.n	8011b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	b2da      	uxtb	r2, r3
 8011aee:	4908      	ldr	r1, [pc, #32]	; (8011b10 <__NVIC_SetPriority+0x50>)
 8011af0:	79fb      	ldrb	r3, [r7, #7]
 8011af2:	f003 030f 	and.w	r3, r3, #15
 8011af6:	3b04      	subs	r3, #4
 8011af8:	0112      	lsls	r2, r2, #4
 8011afa:	b2d2      	uxtb	r2, r2
 8011afc:	440b      	add	r3, r1
 8011afe:	761a      	strb	r2, [r3, #24]
}
 8011b00:	bf00      	nop
 8011b02:	370c      	adds	r7, #12
 8011b04:	46bd      	mov	sp, r7
 8011b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0a:	4770      	bx	lr
 8011b0c:	e000e100 	.word	0xe000e100
 8011b10:	e000ed00 	.word	0xe000ed00

08011b14 <NVIC_EncodePriority>:
{
 8011b14:	b480      	push	{r7}
 8011b16:	b089      	sub	sp, #36	; 0x24
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	60f8      	str	r0, [r7, #12]
 8011b1c:	60b9      	str	r1, [r7, #8]
 8011b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	f003 0307 	and.w	r3, r3, #7
 8011b26:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	f1c3 0307 	rsb	r3, r3, #7
 8011b2e:	2b04      	cmp	r3, #4
 8011b30:	bf28      	it	cs
 8011b32:	2304      	movcs	r3, #4
 8011b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	3304      	adds	r3, #4
 8011b3a:	2b06      	cmp	r3, #6
 8011b3c:	d902      	bls.n	8011b44 <NVIC_EncodePriority+0x30>
 8011b3e:	69fb      	ldr	r3, [r7, #28]
 8011b40:	3b03      	subs	r3, #3
 8011b42:	e000      	b.n	8011b46 <NVIC_EncodePriority+0x32>
 8011b44:	2300      	movs	r3, #0
 8011b46:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011b48:	f04f 32ff 	mov.w	r2, #4294967295
 8011b4c:	69bb      	ldr	r3, [r7, #24]
 8011b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8011b52:	43da      	mvns	r2, r3
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	401a      	ands	r2, r3
 8011b58:	697b      	ldr	r3, [r7, #20]
 8011b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8011b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8011b60:	697b      	ldr	r3, [r7, #20]
 8011b62:	fa01 f303 	lsl.w	r3, r1, r3
 8011b66:	43d9      	mvns	r1, r3
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8011b6c:	4313      	orrs	r3, r2
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3724      	adds	r7, #36	; 0x24
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr

08011b7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8011b7a:	b580      	push	{r7, lr}
 8011b7c:	b082      	sub	sp, #8
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8011b82:	6878      	ldr	r0, [r7, #4]
 8011b84:	f7ff ff4c 	bl	8011a20 <__NVIC_SetPriorityGrouping>
}
 8011b88:	bf00      	nop
 8011b8a:	3708      	adds	r7, #8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8011b90:	b580      	push	{r7, lr}
 8011b92:	b086      	sub	sp, #24
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	4603      	mov	r3, r0
 8011b98:	60b9      	str	r1, [r7, #8]
 8011b9a:	607a      	str	r2, [r7, #4]
 8011b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8011ba2:	f7ff ff61 	bl	8011a68 <__NVIC_GetPriorityGrouping>
 8011ba6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8011ba8:	687a      	ldr	r2, [r7, #4]
 8011baa:	68b9      	ldr	r1, [r7, #8]
 8011bac:	6978      	ldr	r0, [r7, #20]
 8011bae:	f7ff ffb1 	bl	8011b14 <NVIC_EncodePriority>
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bb8:	4611      	mov	r1, r2
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7ff ff80 	bl	8011ac0 <__NVIC_SetPriority>
}
 8011bc0:	bf00      	nop
 8011bc2:	3718      	adds	r7, #24
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b082      	sub	sp, #8
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	4603      	mov	r3, r0
 8011bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8011bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7ff ff54 	bl	8011a84 <__NVIC_EnableIRQ>
}
 8011bdc:	bf00      	nop
 8011bde:	3708      	adds	r7, #8
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}

08011be4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b082      	sub	sp, #8
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d101      	bne.n	8011bf6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8011bf2:	2301      	movs	r3, #1
 8011bf4:	e00e      	b.n	8011c14 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	795b      	ldrb	r3, [r3, #5]
 8011bfa:	b2db      	uxtb	r3, r3
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d105      	bne.n	8011c0c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	2200      	movs	r2, #0
 8011c04:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8011c06:	6878      	ldr	r0, [r7, #4]
 8011c08:	f7fd fa4c 	bl	800f0a4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	2201      	movs	r2, #1
 8011c10:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8011c12:	2300      	movs	r3, #0
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3708      	adds	r7, #8
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	bd80      	pop	{r7, pc}

08011c1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	b086      	sub	sp, #24
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8011c24:	2300      	movs	r3, #0
 8011c26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8011c28:	f7fe fc54 	bl	80104d4 <HAL_GetTick>
 8011c2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d101      	bne.n	8011c38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8011c34:	2301      	movs	r3, #1
 8011c36:	e099      	b.n	8011d6c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	2202      	movs	r2, #2
 8011c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	2200      	movs	r2, #0
 8011c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	681a      	ldr	r2, [r3, #0]
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	f022 0201 	bic.w	r2, r2, #1
 8011c56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011c58:	e00f      	b.n	8011c7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8011c5a:	f7fe fc3b 	bl	80104d4 <HAL_GetTick>
 8011c5e:	4602      	mov	r2, r0
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	1ad3      	subs	r3, r2, r3
 8011c64:	2b05      	cmp	r3, #5
 8011c66:	d908      	bls.n	8011c7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	2220      	movs	r2, #32
 8011c6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2203      	movs	r2, #3
 8011c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8011c76:	2303      	movs	r3, #3
 8011c78:	e078      	b.n	8011d6c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	f003 0301 	and.w	r3, r3, #1
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d1e8      	bne.n	8011c5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8011c90:	697a      	ldr	r2, [r7, #20]
 8011c92:	4b38      	ldr	r3, [pc, #224]	; (8011d74 <HAL_DMA_Init+0x158>)
 8011c94:	4013      	ands	r3, r2
 8011c96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	685a      	ldr	r2, [r3, #4]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011ca6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	691b      	ldr	r3, [r3, #16]
 8011cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8011cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	699b      	ldr	r3, [r3, #24]
 8011cb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8011cbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6a1b      	ldr	r3, [r3, #32]
 8011cc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8011cc6:	697a      	ldr	r2, [r7, #20]
 8011cc8:	4313      	orrs	r3, r2
 8011cca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd0:	2b04      	cmp	r3, #4
 8011cd2:	d107      	bne.n	8011ce4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cdc:	4313      	orrs	r3, r2
 8011cde:	697a      	ldr	r2, [r7, #20]
 8011ce0:	4313      	orrs	r3, r2
 8011ce2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	697a      	ldr	r2, [r7, #20]
 8011cea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	695b      	ldr	r3, [r3, #20]
 8011cf2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	f023 0307 	bic.w	r3, r3, #7
 8011cfa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d00:	697a      	ldr	r2, [r7, #20]
 8011d02:	4313      	orrs	r3, r2
 8011d04:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d0a:	2b04      	cmp	r3, #4
 8011d0c:	d117      	bne.n	8011d3e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d12:	697a      	ldr	r2, [r7, #20]
 8011d14:	4313      	orrs	r3, r2
 8011d16:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d00e      	beq.n	8011d3e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f000 fa6f 	bl	8012204 <DMA_CheckFifoParam>
 8011d26:	4603      	mov	r3, r0
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d008      	beq.n	8011d3e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2240      	movs	r2, #64	; 0x40
 8011d30:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2201      	movs	r2, #1
 8011d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8011d3a:	2301      	movs	r3, #1
 8011d3c:	e016      	b.n	8011d6c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	697a      	ldr	r2, [r7, #20]
 8011d44:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f000 fa26 	bl	8012198 <DMA_CalcBaseAndBitshift>
 8011d4c:	4603      	mov	r3, r0
 8011d4e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011d54:	223f      	movs	r2, #63	; 0x3f
 8011d56:	409a      	lsls	r2, r3
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	2200      	movs	r2, #0
 8011d60:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	2201      	movs	r2, #1
 8011d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8011d6a:	2300      	movs	r3, #0
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3718      	adds	r7, #24
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}
 8011d74:	f010803f 	.word	0xf010803f

08011d78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b086      	sub	sp, #24
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	60f8      	str	r0, [r7, #12]
 8011d80:	60b9      	str	r1, [r7, #8]
 8011d82:	607a      	str	r2, [r7, #4]
 8011d84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8011d86:	2300      	movs	r3, #0
 8011d88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011d96:	2b01      	cmp	r3, #1
 8011d98:	d101      	bne.n	8011d9e <HAL_DMA_Start_IT+0x26>
 8011d9a:	2302      	movs	r3, #2
 8011d9c:	e040      	b.n	8011e20 <HAL_DMA_Start_IT+0xa8>
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	2201      	movs	r2, #1
 8011da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011dac:	b2db      	uxtb	r3, r3
 8011dae:	2b01      	cmp	r3, #1
 8011db0:	d12f      	bne.n	8011e12 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	2202      	movs	r2, #2
 8011db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	687a      	ldr	r2, [r7, #4]
 8011dc4:	68b9      	ldr	r1, [r7, #8]
 8011dc6:	68f8      	ldr	r0, [r7, #12]
 8011dc8:	f000 f9b8 	bl	801213c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011dd0:	223f      	movs	r2, #63	; 0x3f
 8011dd2:	409a      	lsls	r2, r3
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	681a      	ldr	r2, [r3, #0]
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	f042 0216 	orr.w	r2, r2, #22
 8011de6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d007      	beq.n	8011e00 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8011df0:	68fb      	ldr	r3, [r7, #12]
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	681a      	ldr	r2, [r3, #0]
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	f042 0208 	orr.w	r2, r2, #8
 8011dfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	681b      	ldr	r3, [r3, #0]
 8011e04:	681a      	ldr	r2, [r3, #0]
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	681b      	ldr	r3, [r3, #0]
 8011e0a:	f042 0201 	orr.w	r2, r2, #1
 8011e0e:	601a      	str	r2, [r3, #0]
 8011e10:	e005      	b.n	8011e1e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2200      	movs	r2, #0
 8011e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8011e1a:	2302      	movs	r3, #2
 8011e1c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8011e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3718      	adds	r7, #24
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b086      	sub	sp, #24
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8011e30:	2300      	movs	r3, #0
 8011e32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8011e34:	4b8e      	ldr	r3, [pc, #568]	; (8012070 <HAL_DMA_IRQHandler+0x248>)
 8011e36:	681b      	ldr	r3, [r3, #0]
 8011e38:	4a8e      	ldr	r2, [pc, #568]	; (8012074 <HAL_DMA_IRQHandler+0x24c>)
 8011e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8011e3e:	0a9b      	lsrs	r3, r3, #10
 8011e40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e52:	2208      	movs	r2, #8
 8011e54:	409a      	lsls	r2, r3
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	4013      	ands	r3, r2
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d01a      	beq.n	8011e94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	f003 0304 	and.w	r3, r3, #4
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d013      	beq.n	8011e94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	681a      	ldr	r2, [r3, #0]
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	f022 0204 	bic.w	r2, r2, #4
 8011e7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e80:	2208      	movs	r2, #8
 8011e82:	409a      	lsls	r2, r3
 8011e84:	693b      	ldr	r3, [r7, #16]
 8011e86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e8c:	f043 0201 	orr.w	r2, r3, #1
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011e98:	2201      	movs	r2, #1
 8011e9a:	409a      	lsls	r2, r3
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	4013      	ands	r3, r2
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d012      	beq.n	8011eca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	695b      	ldr	r3, [r3, #20]
 8011eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d00b      	beq.n	8011eca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011eb6:	2201      	movs	r2, #1
 8011eb8:	409a      	lsls	r2, r3
 8011eba:	693b      	ldr	r3, [r7, #16]
 8011ebc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ec2:	f043 0202 	orr.w	r2, r3, #2
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011ece:	2204      	movs	r2, #4
 8011ed0:	409a      	lsls	r2, r3
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	4013      	ands	r3, r2
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d012      	beq.n	8011f00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	f003 0302 	and.w	r3, r3, #2
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00b      	beq.n	8011f00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011eec:	2204      	movs	r2, #4
 8011eee:	409a      	lsls	r2, r3
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ef8:	f043 0204 	orr.w	r2, r3, #4
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f04:	2210      	movs	r2, #16
 8011f06:	409a      	lsls	r2, r3
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	4013      	ands	r3, r2
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d043      	beq.n	8011f98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f003 0308 	and.w	r3, r3, #8
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d03c      	beq.n	8011f98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f22:	2210      	movs	r2, #16
 8011f24:	409a      	lsls	r2, r3
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d018      	beq.n	8011f6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d108      	bne.n	8011f58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d024      	beq.n	8011f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f52:	6878      	ldr	r0, [r7, #4]
 8011f54:	4798      	blx	r3
 8011f56:	e01f      	b.n	8011f98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d01b      	beq.n	8011f98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	4798      	blx	r3
 8011f68:	e016      	b.n	8011f98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d107      	bne.n	8011f88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681b      	ldr	r3, [r3, #0]
 8011f7c:	681a      	ldr	r2, [r3, #0]
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	681b      	ldr	r3, [r3, #0]
 8011f82:	f022 0208 	bic.w	r2, r2, #8
 8011f86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d003      	beq.n	8011f98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011f9c:	2220      	movs	r2, #32
 8011f9e:	409a      	lsls	r2, r3
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	4013      	ands	r3, r2
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	f000 808f 	beq.w	80120c8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	f003 0310 	and.w	r3, r3, #16
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	f000 8087 	beq.w	80120c8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011fbe:	2220      	movs	r2, #32
 8011fc0:	409a      	lsls	r2, r3
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	2b05      	cmp	r3, #5
 8011fd0:	d136      	bne.n	8012040 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	681a      	ldr	r2, [r3, #0]
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	f022 0216 	bic.w	r2, r2, #22
 8011fe0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	695a      	ldr	r2, [r3, #20]
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8011ff0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d103      	bne.n	8012002 <HAL_DMA_IRQHandler+0x1da>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d007      	beq.n	8012012 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	681a      	ldr	r2, [r3, #0]
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	f022 0208 	bic.w	r2, r2, #8
 8012010:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012016:	223f      	movs	r2, #63	; 0x3f
 8012018:	409a      	lsls	r2, r3
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2201      	movs	r2, #1
 8012022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2200      	movs	r2, #0
 801202a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012032:	2b00      	cmp	r3, #0
 8012034:	d07e      	beq.n	8012134 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	4798      	blx	r3
        }
        return;
 801203e:	e079      	b.n	8012134 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801204a:	2b00      	cmp	r3, #0
 801204c:	d01d      	beq.n	801208a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8012058:	2b00      	cmp	r3, #0
 801205a:	d10d      	bne.n	8012078 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012060:	2b00      	cmp	r3, #0
 8012062:	d031      	beq.n	80120c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	4798      	blx	r3
 801206c:	e02c      	b.n	80120c8 <HAL_DMA_IRQHandler+0x2a0>
 801206e:	bf00      	nop
 8012070:	2000001c 	.word	0x2000001c
 8012074:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801207c:	2b00      	cmp	r3, #0
 801207e:	d023      	beq.n	80120c8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	4798      	blx	r3
 8012088:	e01e      	b.n	80120c8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012094:	2b00      	cmp	r3, #0
 8012096:	d10f      	bne.n	80120b8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	f022 0210 	bic.w	r2, r2, #16
 80120a6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	2201      	movs	r2, #1
 80120ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	2200      	movs	r2, #0
 80120b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d003      	beq.n	80120c8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120c4:	6878      	ldr	r0, [r7, #4]
 80120c6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d032      	beq.n	8012136 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80120d4:	f003 0301 	and.w	r3, r3, #1
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d022      	beq.n	8012122 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	2205      	movs	r2, #5
 80120e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	681a      	ldr	r2, [r3, #0]
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	f022 0201 	bic.w	r2, r2, #1
 80120f2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80120f4:	68bb      	ldr	r3, [r7, #8]
 80120f6:	3301      	adds	r3, #1
 80120f8:	60bb      	str	r3, [r7, #8]
 80120fa:	697a      	ldr	r2, [r7, #20]
 80120fc:	429a      	cmp	r2, r3
 80120fe:	d307      	bcc.n	8012110 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	f003 0301 	and.w	r3, r3, #1
 801210a:	2b00      	cmp	r3, #0
 801210c:	d1f2      	bne.n	80120f4 <HAL_DMA_IRQHandler+0x2cc>
 801210e:	e000      	b.n	8012112 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8012110:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	2201      	movs	r2, #1
 8012116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	2200      	movs	r2, #0
 801211e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012126:	2b00      	cmp	r3, #0
 8012128:	d005      	beq.n	8012136 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	4798      	blx	r3
 8012132:	e000      	b.n	8012136 <HAL_DMA_IRQHandler+0x30e>
        return;
 8012134:	bf00      	nop
    }
  }
}
 8012136:	3718      	adds	r7, #24
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}

0801213c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801213c:	b480      	push	{r7}
 801213e:	b085      	sub	sp, #20
 8012140:	af00      	add	r7, sp, #0
 8012142:	60f8      	str	r0, [r7, #12]
 8012144:	60b9      	str	r1, [r7, #8]
 8012146:	607a      	str	r2, [r7, #4]
 8012148:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	681a      	ldr	r2, [r3, #0]
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012158:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	683a      	ldr	r2, [r7, #0]
 8012160:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	689b      	ldr	r3, [r3, #8]
 8012166:	2b40      	cmp	r3, #64	; 0x40
 8012168:	d108      	bne.n	801217c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	687a      	ldr	r2, [r7, #4]
 8012170:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	681b      	ldr	r3, [r3, #0]
 8012176:	68ba      	ldr	r2, [r7, #8]
 8012178:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 801217a:	e007      	b.n	801218c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	68ba      	ldr	r2, [r7, #8]
 8012182:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	687a      	ldr	r2, [r7, #4]
 801218a:	60da      	str	r2, [r3, #12]
}
 801218c:	bf00      	nop
 801218e:	3714      	adds	r7, #20
 8012190:	46bd      	mov	sp, r7
 8012192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012196:	4770      	bx	lr

08012198 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8012198:	b480      	push	{r7}
 801219a:	b085      	sub	sp, #20
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	b2db      	uxtb	r3, r3
 80121a6:	3b10      	subs	r3, #16
 80121a8:	4a14      	ldr	r2, [pc, #80]	; (80121fc <DMA_CalcBaseAndBitshift+0x64>)
 80121aa:	fba2 2303 	umull	r2, r3, r2, r3
 80121ae:	091b      	lsrs	r3, r3, #4
 80121b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80121b2:	4a13      	ldr	r2, [pc, #76]	; (8012200 <DMA_CalcBaseAndBitshift+0x68>)
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	4413      	add	r3, r2
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	461a      	mov	r2, r3
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	2b03      	cmp	r3, #3
 80121c4:	d909      	bls.n	80121da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80121ce:	f023 0303 	bic.w	r3, r3, #3
 80121d2:	1d1a      	adds	r2, r3, #4
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	659a      	str	r2, [r3, #88]	; 0x58
 80121d8:	e007      	b.n	80121ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80121e2:	f023 0303 	bic.w	r3, r3, #3
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80121ee:	4618      	mov	r0, r3
 80121f0:	3714      	adds	r7, #20
 80121f2:	46bd      	mov	sp, r7
 80121f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f8:	4770      	bx	lr
 80121fa:	bf00      	nop
 80121fc:	aaaaaaab 	.word	0xaaaaaaab
 8012200:	0801f600 	.word	0x0801f600

08012204 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8012204:	b480      	push	{r7}
 8012206:	b085      	sub	sp, #20
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801220c:	2300      	movs	r3, #0
 801220e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012214:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	699b      	ldr	r3, [r3, #24]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d11f      	bne.n	801225e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	2b03      	cmp	r3, #3
 8012222:	d856      	bhi.n	80122d2 <DMA_CheckFifoParam+0xce>
 8012224:	a201      	add	r2, pc, #4	; (adr r2, 801222c <DMA_CheckFifoParam+0x28>)
 8012226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801222a:	bf00      	nop
 801222c:	0801223d 	.word	0x0801223d
 8012230:	0801224f 	.word	0x0801224f
 8012234:	0801223d 	.word	0x0801223d
 8012238:	080122d3 	.word	0x080122d3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012244:	2b00      	cmp	r3, #0
 8012246:	d046      	beq.n	80122d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8012248:	2301      	movs	r3, #1
 801224a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801224c:	e043      	b.n	80122d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012252:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8012256:	d140      	bne.n	80122da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8012258:	2301      	movs	r3, #1
 801225a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801225c:	e03d      	b.n	80122da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	699b      	ldr	r3, [r3, #24]
 8012262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012266:	d121      	bne.n	80122ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8012268:	68bb      	ldr	r3, [r7, #8]
 801226a:	2b03      	cmp	r3, #3
 801226c:	d837      	bhi.n	80122de <DMA_CheckFifoParam+0xda>
 801226e:	a201      	add	r2, pc, #4	; (adr r2, 8012274 <DMA_CheckFifoParam+0x70>)
 8012270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012274:	08012285 	.word	0x08012285
 8012278:	0801228b 	.word	0x0801228b
 801227c:	08012285 	.word	0x08012285
 8012280:	0801229d 	.word	0x0801229d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8012284:	2301      	movs	r3, #1
 8012286:	73fb      	strb	r3, [r7, #15]
      break;
 8012288:	e030      	b.n	80122ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801228e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012292:	2b00      	cmp	r3, #0
 8012294:	d025      	beq.n	80122e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8012296:	2301      	movs	r3, #1
 8012298:	73fb      	strb	r3, [r7, #15]
      }
      break;
 801229a:	e022      	b.n	80122e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80122a4:	d11f      	bne.n	80122e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80122a6:	2301      	movs	r3, #1
 80122a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80122aa:	e01c      	b.n	80122e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	2b02      	cmp	r3, #2
 80122b0:	d903      	bls.n	80122ba <DMA_CheckFifoParam+0xb6>
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	2b03      	cmp	r3, #3
 80122b6:	d003      	beq.n	80122c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80122b8:	e018      	b.n	80122ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80122ba:	2301      	movs	r3, #1
 80122bc:	73fb      	strb	r3, [r7, #15]
      break;
 80122be:	e015      	b.n	80122ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d00e      	beq.n	80122ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80122cc:	2301      	movs	r3, #1
 80122ce:	73fb      	strb	r3, [r7, #15]
      break;
 80122d0:	e00b      	b.n	80122ea <DMA_CheckFifoParam+0xe6>
      break;
 80122d2:	bf00      	nop
 80122d4:	e00a      	b.n	80122ec <DMA_CheckFifoParam+0xe8>
      break;
 80122d6:	bf00      	nop
 80122d8:	e008      	b.n	80122ec <DMA_CheckFifoParam+0xe8>
      break;
 80122da:	bf00      	nop
 80122dc:	e006      	b.n	80122ec <DMA_CheckFifoParam+0xe8>
      break;
 80122de:	bf00      	nop
 80122e0:	e004      	b.n	80122ec <DMA_CheckFifoParam+0xe8>
      break;
 80122e2:	bf00      	nop
 80122e4:	e002      	b.n	80122ec <DMA_CheckFifoParam+0xe8>
      break;   
 80122e6:	bf00      	nop
 80122e8:	e000      	b.n	80122ec <DMA_CheckFifoParam+0xe8>
      break;
 80122ea:	bf00      	nop
    }
  } 
  
  return status; 
 80122ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3714      	adds	r7, #20
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop

080122fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80122fc:	b480      	push	{r7}
 80122fe:	b089      	sub	sp, #36	; 0x24
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8012306:	2300      	movs	r3, #0
 8012308:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801230a:	2300      	movs	r3, #0
 801230c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801230e:	2300      	movs	r3, #0
 8012310:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8012312:	2300      	movs	r3, #0
 8012314:	61fb      	str	r3, [r7, #28]
 8012316:	e16b      	b.n	80125f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8012318:	2201      	movs	r2, #1
 801231a:	69fb      	ldr	r3, [r7, #28]
 801231c:	fa02 f303 	lsl.w	r3, r2, r3
 8012320:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012322:	683b      	ldr	r3, [r7, #0]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	697a      	ldr	r2, [r7, #20]
 8012328:	4013      	ands	r3, r2
 801232a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801232c:	693a      	ldr	r2, [r7, #16]
 801232e:	697b      	ldr	r3, [r7, #20]
 8012330:	429a      	cmp	r2, r3
 8012332:	f040 815a 	bne.w	80125ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8012336:	683b      	ldr	r3, [r7, #0]
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	f003 0303 	and.w	r3, r3, #3
 801233e:	2b01      	cmp	r3, #1
 8012340:	d005      	beq.n	801234e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801234a:	2b02      	cmp	r3, #2
 801234c:	d130      	bne.n	80123b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	689b      	ldr	r3, [r3, #8]
 8012352:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8012354:	69fb      	ldr	r3, [r7, #28]
 8012356:	005b      	lsls	r3, r3, #1
 8012358:	2203      	movs	r2, #3
 801235a:	fa02 f303 	lsl.w	r3, r2, r3
 801235e:	43db      	mvns	r3, r3
 8012360:	69ba      	ldr	r2, [r7, #24]
 8012362:	4013      	ands	r3, r2
 8012364:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	68da      	ldr	r2, [r3, #12]
 801236a:	69fb      	ldr	r3, [r7, #28]
 801236c:	005b      	lsls	r3, r3, #1
 801236e:	fa02 f303 	lsl.w	r3, r2, r3
 8012372:	69ba      	ldr	r2, [r7, #24]
 8012374:	4313      	orrs	r3, r2
 8012376:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	69ba      	ldr	r2, [r7, #24]
 801237c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	685b      	ldr	r3, [r3, #4]
 8012382:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012384:	2201      	movs	r2, #1
 8012386:	69fb      	ldr	r3, [r7, #28]
 8012388:	fa02 f303 	lsl.w	r3, r2, r3
 801238c:	43db      	mvns	r3, r3
 801238e:	69ba      	ldr	r2, [r7, #24]
 8012390:	4013      	ands	r3, r2
 8012392:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8012394:	683b      	ldr	r3, [r7, #0]
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	091b      	lsrs	r3, r3, #4
 801239a:	f003 0201 	and.w	r2, r3, #1
 801239e:	69fb      	ldr	r3, [r7, #28]
 80123a0:	fa02 f303 	lsl.w	r3, r2, r3
 80123a4:	69ba      	ldr	r2, [r7, #24]
 80123a6:	4313      	orrs	r3, r2
 80123a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	69ba      	ldr	r2, [r7, #24]
 80123ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	f003 0303 	and.w	r3, r3, #3
 80123b8:	2b03      	cmp	r3, #3
 80123ba:	d017      	beq.n	80123ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80123c2:	69fb      	ldr	r3, [r7, #28]
 80123c4:	005b      	lsls	r3, r3, #1
 80123c6:	2203      	movs	r2, #3
 80123c8:	fa02 f303 	lsl.w	r3, r2, r3
 80123cc:	43db      	mvns	r3, r3
 80123ce:	69ba      	ldr	r2, [r7, #24]
 80123d0:	4013      	ands	r3, r2
 80123d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80123d4:	683b      	ldr	r3, [r7, #0]
 80123d6:	689a      	ldr	r2, [r3, #8]
 80123d8:	69fb      	ldr	r3, [r7, #28]
 80123da:	005b      	lsls	r3, r3, #1
 80123dc:	fa02 f303 	lsl.w	r3, r2, r3
 80123e0:	69ba      	ldr	r2, [r7, #24]
 80123e2:	4313      	orrs	r3, r2
 80123e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	69ba      	ldr	r2, [r7, #24]
 80123ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80123ec:	683b      	ldr	r3, [r7, #0]
 80123ee:	685b      	ldr	r3, [r3, #4]
 80123f0:	f003 0303 	and.w	r3, r3, #3
 80123f4:	2b02      	cmp	r3, #2
 80123f6:	d123      	bne.n	8012440 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80123f8:	69fb      	ldr	r3, [r7, #28]
 80123fa:	08da      	lsrs	r2, r3, #3
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	3208      	adds	r2, #8
 8012400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012404:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8012406:	69fb      	ldr	r3, [r7, #28]
 8012408:	f003 0307 	and.w	r3, r3, #7
 801240c:	009b      	lsls	r3, r3, #2
 801240e:	220f      	movs	r2, #15
 8012410:	fa02 f303 	lsl.w	r3, r2, r3
 8012414:	43db      	mvns	r3, r3
 8012416:	69ba      	ldr	r2, [r7, #24]
 8012418:	4013      	ands	r3, r2
 801241a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	691a      	ldr	r2, [r3, #16]
 8012420:	69fb      	ldr	r3, [r7, #28]
 8012422:	f003 0307 	and.w	r3, r3, #7
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	fa02 f303 	lsl.w	r3, r2, r3
 801242c:	69ba      	ldr	r2, [r7, #24]
 801242e:	4313      	orrs	r3, r2
 8012430:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	08da      	lsrs	r2, r3, #3
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	3208      	adds	r2, #8
 801243a:	69b9      	ldr	r1, [r7, #24]
 801243c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8012446:	69fb      	ldr	r3, [r7, #28]
 8012448:	005b      	lsls	r3, r3, #1
 801244a:	2203      	movs	r2, #3
 801244c:	fa02 f303 	lsl.w	r3, r2, r3
 8012450:	43db      	mvns	r3, r3
 8012452:	69ba      	ldr	r2, [r7, #24]
 8012454:	4013      	ands	r3, r2
 8012456:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	685b      	ldr	r3, [r3, #4]
 801245c:	f003 0203 	and.w	r2, r3, #3
 8012460:	69fb      	ldr	r3, [r7, #28]
 8012462:	005b      	lsls	r3, r3, #1
 8012464:	fa02 f303 	lsl.w	r3, r2, r3
 8012468:	69ba      	ldr	r2, [r7, #24]
 801246a:	4313      	orrs	r3, r2
 801246c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	69ba      	ldr	r2, [r7, #24]
 8012472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	685b      	ldr	r3, [r3, #4]
 8012478:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801247c:	2b00      	cmp	r3, #0
 801247e:	f000 80b4 	beq.w	80125ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012482:	2300      	movs	r3, #0
 8012484:	60fb      	str	r3, [r7, #12]
 8012486:	4b60      	ldr	r3, [pc, #384]	; (8012608 <HAL_GPIO_Init+0x30c>)
 8012488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801248a:	4a5f      	ldr	r2, [pc, #380]	; (8012608 <HAL_GPIO_Init+0x30c>)
 801248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012490:	6453      	str	r3, [r2, #68]	; 0x44
 8012492:	4b5d      	ldr	r3, [pc, #372]	; (8012608 <HAL_GPIO_Init+0x30c>)
 8012494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801249a:	60fb      	str	r3, [r7, #12]
 801249c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801249e:	4a5b      	ldr	r2, [pc, #364]	; (801260c <HAL_GPIO_Init+0x310>)
 80124a0:	69fb      	ldr	r3, [r7, #28]
 80124a2:	089b      	lsrs	r3, r3, #2
 80124a4:	3302      	adds	r3, #2
 80124a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80124ac:	69fb      	ldr	r3, [r7, #28]
 80124ae:	f003 0303 	and.w	r3, r3, #3
 80124b2:	009b      	lsls	r3, r3, #2
 80124b4:	220f      	movs	r2, #15
 80124b6:	fa02 f303 	lsl.w	r3, r2, r3
 80124ba:	43db      	mvns	r3, r3
 80124bc:	69ba      	ldr	r2, [r7, #24]
 80124be:	4013      	ands	r3, r2
 80124c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	4a52      	ldr	r2, [pc, #328]	; (8012610 <HAL_GPIO_Init+0x314>)
 80124c6:	4293      	cmp	r3, r2
 80124c8:	d02b      	beq.n	8012522 <HAL_GPIO_Init+0x226>
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	4a51      	ldr	r2, [pc, #324]	; (8012614 <HAL_GPIO_Init+0x318>)
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d025      	beq.n	801251e <HAL_GPIO_Init+0x222>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4a50      	ldr	r2, [pc, #320]	; (8012618 <HAL_GPIO_Init+0x31c>)
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d01f      	beq.n	801251a <HAL_GPIO_Init+0x21e>
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4a4f      	ldr	r2, [pc, #316]	; (801261c <HAL_GPIO_Init+0x320>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d019      	beq.n	8012516 <HAL_GPIO_Init+0x21a>
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	4a4e      	ldr	r2, [pc, #312]	; (8012620 <HAL_GPIO_Init+0x324>)
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d013      	beq.n	8012512 <HAL_GPIO_Init+0x216>
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	4a4d      	ldr	r2, [pc, #308]	; (8012624 <HAL_GPIO_Init+0x328>)
 80124ee:	4293      	cmp	r3, r2
 80124f0:	d00d      	beq.n	801250e <HAL_GPIO_Init+0x212>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	4a4c      	ldr	r2, [pc, #304]	; (8012628 <HAL_GPIO_Init+0x32c>)
 80124f6:	4293      	cmp	r3, r2
 80124f8:	d007      	beq.n	801250a <HAL_GPIO_Init+0x20e>
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	4a4b      	ldr	r2, [pc, #300]	; (801262c <HAL_GPIO_Init+0x330>)
 80124fe:	4293      	cmp	r3, r2
 8012500:	d101      	bne.n	8012506 <HAL_GPIO_Init+0x20a>
 8012502:	2307      	movs	r3, #7
 8012504:	e00e      	b.n	8012524 <HAL_GPIO_Init+0x228>
 8012506:	2308      	movs	r3, #8
 8012508:	e00c      	b.n	8012524 <HAL_GPIO_Init+0x228>
 801250a:	2306      	movs	r3, #6
 801250c:	e00a      	b.n	8012524 <HAL_GPIO_Init+0x228>
 801250e:	2305      	movs	r3, #5
 8012510:	e008      	b.n	8012524 <HAL_GPIO_Init+0x228>
 8012512:	2304      	movs	r3, #4
 8012514:	e006      	b.n	8012524 <HAL_GPIO_Init+0x228>
 8012516:	2303      	movs	r3, #3
 8012518:	e004      	b.n	8012524 <HAL_GPIO_Init+0x228>
 801251a:	2302      	movs	r3, #2
 801251c:	e002      	b.n	8012524 <HAL_GPIO_Init+0x228>
 801251e:	2301      	movs	r3, #1
 8012520:	e000      	b.n	8012524 <HAL_GPIO_Init+0x228>
 8012522:	2300      	movs	r3, #0
 8012524:	69fa      	ldr	r2, [r7, #28]
 8012526:	f002 0203 	and.w	r2, r2, #3
 801252a:	0092      	lsls	r2, r2, #2
 801252c:	4093      	lsls	r3, r2
 801252e:	69ba      	ldr	r2, [r7, #24]
 8012530:	4313      	orrs	r3, r2
 8012532:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8012534:	4935      	ldr	r1, [pc, #212]	; (801260c <HAL_GPIO_Init+0x310>)
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	089b      	lsrs	r3, r3, #2
 801253a:	3302      	adds	r3, #2
 801253c:	69ba      	ldr	r2, [r7, #24]
 801253e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012542:	4b3b      	ldr	r3, [pc, #236]	; (8012630 <HAL_GPIO_Init+0x334>)
 8012544:	689b      	ldr	r3, [r3, #8]
 8012546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012548:	693b      	ldr	r3, [r7, #16]
 801254a:	43db      	mvns	r3, r3
 801254c:	69ba      	ldr	r2, [r7, #24]
 801254e:	4013      	ands	r3, r2
 8012550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	685b      	ldr	r3, [r3, #4]
 8012556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801255a:	2b00      	cmp	r3, #0
 801255c:	d003      	beq.n	8012566 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801255e:	69ba      	ldr	r2, [r7, #24]
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	4313      	orrs	r3, r2
 8012564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8012566:	4a32      	ldr	r2, [pc, #200]	; (8012630 <HAL_GPIO_Init+0x334>)
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801256c:	4b30      	ldr	r3, [pc, #192]	; (8012630 <HAL_GPIO_Init+0x334>)
 801256e:	68db      	ldr	r3, [r3, #12]
 8012570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	43db      	mvns	r3, r3
 8012576:	69ba      	ldr	r2, [r7, #24]
 8012578:	4013      	ands	r3, r2
 801257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	685b      	ldr	r3, [r3, #4]
 8012580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012584:	2b00      	cmp	r3, #0
 8012586:	d003      	beq.n	8012590 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8012588:	69ba      	ldr	r2, [r7, #24]
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	4313      	orrs	r3, r2
 801258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8012590:	4a27      	ldr	r2, [pc, #156]	; (8012630 <HAL_GPIO_Init+0x334>)
 8012592:	69bb      	ldr	r3, [r7, #24]
 8012594:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8012596:	4b26      	ldr	r3, [pc, #152]	; (8012630 <HAL_GPIO_Init+0x334>)
 8012598:	685b      	ldr	r3, [r3, #4]
 801259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801259c:	693b      	ldr	r3, [r7, #16]
 801259e:	43db      	mvns	r3, r3
 80125a0:	69ba      	ldr	r2, [r7, #24]
 80125a2:	4013      	ands	r3, r2
 80125a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	685b      	ldr	r3, [r3, #4]
 80125aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d003      	beq.n	80125ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80125b2:	69ba      	ldr	r2, [r7, #24]
 80125b4:	693b      	ldr	r3, [r7, #16]
 80125b6:	4313      	orrs	r3, r2
 80125b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80125ba:	4a1d      	ldr	r2, [pc, #116]	; (8012630 <HAL_GPIO_Init+0x334>)
 80125bc:	69bb      	ldr	r3, [r7, #24]
 80125be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80125c0:	4b1b      	ldr	r3, [pc, #108]	; (8012630 <HAL_GPIO_Init+0x334>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	43db      	mvns	r3, r3
 80125ca:	69ba      	ldr	r2, [r7, #24]
 80125cc:	4013      	ands	r3, r2
 80125ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80125d0:	683b      	ldr	r3, [r7, #0]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d003      	beq.n	80125e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80125dc:	69ba      	ldr	r2, [r7, #24]
 80125de:	693b      	ldr	r3, [r7, #16]
 80125e0:	4313      	orrs	r3, r2
 80125e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80125e4:	4a12      	ldr	r2, [pc, #72]	; (8012630 <HAL_GPIO_Init+0x334>)
 80125e6:	69bb      	ldr	r3, [r7, #24]
 80125e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	3301      	adds	r3, #1
 80125ee:	61fb      	str	r3, [r7, #28]
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	2b0f      	cmp	r3, #15
 80125f4:	f67f ae90 	bls.w	8012318 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80125f8:	bf00      	nop
 80125fa:	bf00      	nop
 80125fc:	3724      	adds	r7, #36	; 0x24
 80125fe:	46bd      	mov	sp, r7
 8012600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012604:	4770      	bx	lr
 8012606:	bf00      	nop
 8012608:	40023800 	.word	0x40023800
 801260c:	40013800 	.word	0x40013800
 8012610:	40020000 	.word	0x40020000
 8012614:	40020400 	.word	0x40020400
 8012618:	40020800 	.word	0x40020800
 801261c:	40020c00 	.word	0x40020c00
 8012620:	40021000 	.word	0x40021000
 8012624:	40021400 	.word	0x40021400
 8012628:	40021800 	.word	0x40021800
 801262c:	40021c00 	.word	0x40021c00
 8012630:	40013c00 	.word	0x40013c00

08012634 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8012634:	b480      	push	{r7}
 8012636:	b085      	sub	sp, #20
 8012638:	af00      	add	r7, sp, #0
 801263a:	6078      	str	r0, [r7, #4]
 801263c:	460b      	mov	r3, r1
 801263e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	691a      	ldr	r2, [r3, #16]
 8012644:	887b      	ldrh	r3, [r7, #2]
 8012646:	4013      	ands	r3, r2
 8012648:	2b00      	cmp	r3, #0
 801264a:	d002      	beq.n	8012652 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801264c:	2301      	movs	r3, #1
 801264e:	73fb      	strb	r3, [r7, #15]
 8012650:	e001      	b.n	8012656 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8012652:	2300      	movs	r3, #0
 8012654:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8012656:	7bfb      	ldrb	r3, [r7, #15]
}
 8012658:	4618      	mov	r0, r3
 801265a:	3714      	adds	r7, #20
 801265c:	46bd      	mov	sp, r7
 801265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012662:	4770      	bx	lr

08012664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8012664:	b480      	push	{r7}
 8012666:	b083      	sub	sp, #12
 8012668:	af00      	add	r7, sp, #0
 801266a:	6078      	str	r0, [r7, #4]
 801266c:	460b      	mov	r3, r1
 801266e:	807b      	strh	r3, [r7, #2]
 8012670:	4613      	mov	r3, r2
 8012672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8012674:	787b      	ldrb	r3, [r7, #1]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d003      	beq.n	8012682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801267a:	887a      	ldrh	r2, [r7, #2]
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8012680:	e003      	b.n	801268a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8012682:	887b      	ldrh	r3, [r7, #2]
 8012684:	041a      	lsls	r2, r3, #16
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	619a      	str	r2, [r3, #24]
}
 801268a:	bf00      	nop
 801268c:	370c      	adds	r7, #12
 801268e:	46bd      	mov	sp, r7
 8012690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012694:	4770      	bx	lr
	...

08012698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	4603      	mov	r3, r0
 80126a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80126a2:	4b08      	ldr	r3, [pc, #32]	; (80126c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80126a4:	695a      	ldr	r2, [r3, #20]
 80126a6:	88fb      	ldrh	r3, [r7, #6]
 80126a8:	4013      	ands	r3, r2
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d006      	beq.n	80126bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80126ae:	4a05      	ldr	r2, [pc, #20]	; (80126c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80126b0:	88fb      	ldrh	r3, [r7, #6]
 80126b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80126b4:	88fb      	ldrh	r3, [r7, #6]
 80126b6:	4618      	mov	r0, r3
 80126b8:	f002 ff93 	bl	80155e2 <HAL_GPIO_EXTI_Callback>
  }
}
 80126bc:	bf00      	nop
 80126be:	3708      	adds	r7, #8
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}
 80126c4:	40013c00 	.word	0x40013c00

080126c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b084      	sub	sp, #16
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d101      	bne.n	80126da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80126d6:	2301      	movs	r3, #1
 80126d8:	e12b      	b.n	8012932 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80126e0:	b2db      	uxtb	r3, r3
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d106      	bne.n	80126f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	2200      	movs	r2, #0
 80126ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80126ee:	6878      	ldr	r0, [r7, #4]
 80126f0:	f7fc fea6 	bl	800f440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	2224      	movs	r2, #36	; 0x24
 80126f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	681a      	ldr	r2, [r3, #0]
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	f022 0201 	bic.w	r2, r2, #1
 801270a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801271a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	681a      	ldr	r2, [r3, #0]
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801272a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801272c:	f000 fd7e 	bl	801322c <HAL_RCC_GetPCLK1Freq>
 8012730:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	685b      	ldr	r3, [r3, #4]
 8012736:	4a81      	ldr	r2, [pc, #516]	; (801293c <HAL_I2C_Init+0x274>)
 8012738:	4293      	cmp	r3, r2
 801273a:	d807      	bhi.n	801274c <HAL_I2C_Init+0x84>
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	4a80      	ldr	r2, [pc, #512]	; (8012940 <HAL_I2C_Init+0x278>)
 8012740:	4293      	cmp	r3, r2
 8012742:	bf94      	ite	ls
 8012744:	2301      	movls	r3, #1
 8012746:	2300      	movhi	r3, #0
 8012748:	b2db      	uxtb	r3, r3
 801274a:	e006      	b.n	801275a <HAL_I2C_Init+0x92>
 801274c:	68fb      	ldr	r3, [r7, #12]
 801274e:	4a7d      	ldr	r2, [pc, #500]	; (8012944 <HAL_I2C_Init+0x27c>)
 8012750:	4293      	cmp	r3, r2
 8012752:	bf94      	ite	ls
 8012754:	2301      	movls	r3, #1
 8012756:	2300      	movhi	r3, #0
 8012758:	b2db      	uxtb	r3, r3
 801275a:	2b00      	cmp	r3, #0
 801275c:	d001      	beq.n	8012762 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801275e:	2301      	movs	r3, #1
 8012760:	e0e7      	b.n	8012932 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	4a78      	ldr	r2, [pc, #480]	; (8012948 <HAL_I2C_Init+0x280>)
 8012766:	fba2 2303 	umull	r2, r3, r2, r3
 801276a:	0c9b      	lsrs	r3, r3, #18
 801276c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	685b      	ldr	r3, [r3, #4]
 8012774:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	68ba      	ldr	r2, [r7, #8]
 801277e:	430a      	orrs	r2, r1
 8012780:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	6a1b      	ldr	r3, [r3, #32]
 8012788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	685b      	ldr	r3, [r3, #4]
 8012790:	4a6a      	ldr	r2, [pc, #424]	; (801293c <HAL_I2C_Init+0x274>)
 8012792:	4293      	cmp	r3, r2
 8012794:	d802      	bhi.n	801279c <HAL_I2C_Init+0xd4>
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	3301      	adds	r3, #1
 801279a:	e009      	b.n	80127b0 <HAL_I2C_Init+0xe8>
 801279c:	68bb      	ldr	r3, [r7, #8]
 801279e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80127a2:	fb02 f303 	mul.w	r3, r2, r3
 80127a6:	4a69      	ldr	r2, [pc, #420]	; (801294c <HAL_I2C_Init+0x284>)
 80127a8:	fba2 2303 	umull	r2, r3, r2, r3
 80127ac:	099b      	lsrs	r3, r3, #6
 80127ae:	3301      	adds	r3, #1
 80127b0:	687a      	ldr	r2, [r7, #4]
 80127b2:	6812      	ldr	r2, [r2, #0]
 80127b4:	430b      	orrs	r3, r1
 80127b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	69db      	ldr	r3, [r3, #28]
 80127be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80127c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	685b      	ldr	r3, [r3, #4]
 80127ca:	495c      	ldr	r1, [pc, #368]	; (801293c <HAL_I2C_Init+0x274>)
 80127cc:	428b      	cmp	r3, r1
 80127ce:	d819      	bhi.n	8012804 <HAL_I2C_Init+0x13c>
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	1e59      	subs	r1, r3, #1
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	685b      	ldr	r3, [r3, #4]
 80127d8:	005b      	lsls	r3, r3, #1
 80127da:	fbb1 f3f3 	udiv	r3, r1, r3
 80127de:	1c59      	adds	r1, r3, #1
 80127e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80127e4:	400b      	ands	r3, r1
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d00a      	beq.n	8012800 <HAL_I2C_Init+0x138>
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	1e59      	subs	r1, r3, #1
 80127ee:	687b      	ldr	r3, [r7, #4]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	005b      	lsls	r3, r3, #1
 80127f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80127f8:	3301      	adds	r3, #1
 80127fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80127fe:	e051      	b.n	80128a4 <HAL_I2C_Init+0x1dc>
 8012800:	2304      	movs	r3, #4
 8012802:	e04f      	b.n	80128a4 <HAL_I2C_Init+0x1dc>
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	689b      	ldr	r3, [r3, #8]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d111      	bne.n	8012830 <HAL_I2C_Init+0x168>
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	1e58      	subs	r0, r3, #1
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	6859      	ldr	r1, [r3, #4]
 8012814:	460b      	mov	r3, r1
 8012816:	005b      	lsls	r3, r3, #1
 8012818:	440b      	add	r3, r1
 801281a:	fbb0 f3f3 	udiv	r3, r0, r3
 801281e:	3301      	adds	r3, #1
 8012820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012824:	2b00      	cmp	r3, #0
 8012826:	bf0c      	ite	eq
 8012828:	2301      	moveq	r3, #1
 801282a:	2300      	movne	r3, #0
 801282c:	b2db      	uxtb	r3, r3
 801282e:	e012      	b.n	8012856 <HAL_I2C_Init+0x18e>
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	1e58      	subs	r0, r3, #1
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6859      	ldr	r1, [r3, #4]
 8012838:	460b      	mov	r3, r1
 801283a:	009b      	lsls	r3, r3, #2
 801283c:	440b      	add	r3, r1
 801283e:	0099      	lsls	r1, r3, #2
 8012840:	440b      	add	r3, r1
 8012842:	fbb0 f3f3 	udiv	r3, r0, r3
 8012846:	3301      	adds	r3, #1
 8012848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801284c:	2b00      	cmp	r3, #0
 801284e:	bf0c      	ite	eq
 8012850:	2301      	moveq	r3, #1
 8012852:	2300      	movne	r3, #0
 8012854:	b2db      	uxtb	r3, r3
 8012856:	2b00      	cmp	r3, #0
 8012858:	d001      	beq.n	801285e <HAL_I2C_Init+0x196>
 801285a:	2301      	movs	r3, #1
 801285c:	e022      	b.n	80128a4 <HAL_I2C_Init+0x1dc>
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	689b      	ldr	r3, [r3, #8]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d10e      	bne.n	8012884 <HAL_I2C_Init+0x1bc>
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	1e58      	subs	r0, r3, #1
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6859      	ldr	r1, [r3, #4]
 801286e:	460b      	mov	r3, r1
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	440b      	add	r3, r1
 8012874:	fbb0 f3f3 	udiv	r3, r0, r3
 8012878:	3301      	adds	r3, #1
 801287a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801287e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012882:	e00f      	b.n	80128a4 <HAL_I2C_Init+0x1dc>
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	1e58      	subs	r0, r3, #1
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	6859      	ldr	r1, [r3, #4]
 801288c:	460b      	mov	r3, r1
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	440b      	add	r3, r1
 8012892:	0099      	lsls	r1, r3, #2
 8012894:	440b      	add	r3, r1
 8012896:	fbb0 f3f3 	udiv	r3, r0, r3
 801289a:	3301      	adds	r3, #1
 801289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80128a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80128a4:	6879      	ldr	r1, [r7, #4]
 80128a6:	6809      	ldr	r1, [r1, #0]
 80128a8:	4313      	orrs	r3, r2
 80128aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	69da      	ldr	r2, [r3, #28]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	6a1b      	ldr	r3, [r3, #32]
 80128be:	431a      	orrs	r2, r3
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	430a      	orrs	r2, r1
 80128c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	689b      	ldr	r3, [r3, #8]
 80128ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80128d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80128d6:	687a      	ldr	r2, [r7, #4]
 80128d8:	6911      	ldr	r1, [r2, #16]
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	68d2      	ldr	r2, [r2, #12]
 80128de:	4311      	orrs	r1, r2
 80128e0:	687a      	ldr	r2, [r7, #4]
 80128e2:	6812      	ldr	r2, [r2, #0]
 80128e4:	430b      	orrs	r3, r1
 80128e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	68db      	ldr	r3, [r3, #12]
 80128ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	695a      	ldr	r2, [r3, #20]
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	699b      	ldr	r3, [r3, #24]
 80128fa:	431a      	orrs	r2, r3
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	430a      	orrs	r2, r1
 8012902:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	f042 0201 	orr.w	r2, r2, #1
 8012912:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2200      	movs	r2, #0
 8012918:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2220      	movs	r2, #32
 801291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2200      	movs	r2, #0
 8012926:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	2200      	movs	r2, #0
 801292c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012930:	2300      	movs	r3, #0
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}
 801293a:	bf00      	nop
 801293c:	000186a0 	.word	0x000186a0
 8012940:	001e847f 	.word	0x001e847f
 8012944:	003d08ff 	.word	0x003d08ff
 8012948:	431bde83 	.word	0x431bde83
 801294c:	10624dd3 	.word	0x10624dd3

08012950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b086      	sub	sp, #24
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d101      	bne.n	8012962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801295e:	2301      	movs	r3, #1
 8012960:	e267      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	f003 0301 	and.w	r3, r3, #1
 801296a:	2b00      	cmp	r3, #0
 801296c:	d075      	beq.n	8012a5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801296e:	4b88      	ldr	r3, [pc, #544]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012970:	689b      	ldr	r3, [r3, #8]
 8012972:	f003 030c 	and.w	r3, r3, #12
 8012976:	2b04      	cmp	r3, #4
 8012978:	d00c      	beq.n	8012994 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801297a:	4b85      	ldr	r3, [pc, #532]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 801297c:	689b      	ldr	r3, [r3, #8]
 801297e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8012982:	2b08      	cmp	r3, #8
 8012984:	d112      	bne.n	80129ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8012986:	4b82      	ldr	r3, [pc, #520]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012988:	685b      	ldr	r3, [r3, #4]
 801298a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801298e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8012992:	d10b      	bne.n	80129ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012994:	4b7e      	ldr	r3, [pc, #504]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801299c:	2b00      	cmp	r3, #0
 801299e:	d05b      	beq.n	8012a58 <HAL_RCC_OscConfig+0x108>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d157      	bne.n	8012a58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80129a8:	2301      	movs	r3, #1
 80129aa:	e242      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	685b      	ldr	r3, [r3, #4]
 80129b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80129b4:	d106      	bne.n	80129c4 <HAL_RCC_OscConfig+0x74>
 80129b6:	4b76      	ldr	r3, [pc, #472]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4a75      	ldr	r2, [pc, #468]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 80129bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80129c0:	6013      	str	r3, [r2, #0]
 80129c2:	e01d      	b.n	8012a00 <HAL_RCC_OscConfig+0xb0>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	685b      	ldr	r3, [r3, #4]
 80129c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80129cc:	d10c      	bne.n	80129e8 <HAL_RCC_OscConfig+0x98>
 80129ce:	4b70      	ldr	r3, [pc, #448]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	4a6f      	ldr	r2, [pc, #444]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 80129d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80129d8:	6013      	str	r3, [r2, #0]
 80129da:	4b6d      	ldr	r3, [pc, #436]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	4a6c      	ldr	r2, [pc, #432]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 80129e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80129e4:	6013      	str	r3, [r2, #0]
 80129e6:	e00b      	b.n	8012a00 <HAL_RCC_OscConfig+0xb0>
 80129e8:	4b69      	ldr	r3, [pc, #420]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	4a68      	ldr	r2, [pc, #416]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 80129ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80129f2:	6013      	str	r3, [r2, #0]
 80129f4:	4b66      	ldr	r3, [pc, #408]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	4a65      	ldr	r2, [pc, #404]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 80129fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80129fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	685b      	ldr	r3, [r3, #4]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d013      	beq.n	8012a30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a08:	f7fd fd64 	bl	80104d4 <HAL_GetTick>
 8012a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a0e:	e008      	b.n	8012a22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012a10:	f7fd fd60 	bl	80104d4 <HAL_GetTick>
 8012a14:	4602      	mov	r2, r0
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	1ad3      	subs	r3, r2, r3
 8012a1a:	2b64      	cmp	r3, #100	; 0x64
 8012a1c:	d901      	bls.n	8012a22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8012a1e:	2303      	movs	r3, #3
 8012a20:	e207      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012a22:	4b5b      	ldr	r3, [pc, #364]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d0f0      	beq.n	8012a10 <HAL_RCC_OscConfig+0xc0>
 8012a2e:	e014      	b.n	8012a5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012a30:	f7fd fd50 	bl	80104d4 <HAL_GetTick>
 8012a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012a36:	e008      	b.n	8012a4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8012a38:	f7fd fd4c 	bl	80104d4 <HAL_GetTick>
 8012a3c:	4602      	mov	r2, r0
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	1ad3      	subs	r3, r2, r3
 8012a42:	2b64      	cmp	r3, #100	; 0x64
 8012a44:	d901      	bls.n	8012a4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8012a46:	2303      	movs	r3, #3
 8012a48:	e1f3      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8012a4a:	4b51      	ldr	r3, [pc, #324]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d1f0      	bne.n	8012a38 <HAL_RCC_OscConfig+0xe8>
 8012a56:	e000      	b.n	8012a5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8012a58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	f003 0302 	and.w	r3, r3, #2
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d063      	beq.n	8012b2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012a66:	4b4a      	ldr	r3, [pc, #296]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012a68:	689b      	ldr	r3, [r3, #8]
 8012a6a:	f003 030c 	and.w	r3, r3, #12
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d00b      	beq.n	8012a8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012a72:	4b47      	ldr	r3, [pc, #284]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012a74:	689b      	ldr	r3, [r3, #8]
 8012a76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8012a7a:	2b08      	cmp	r3, #8
 8012a7c:	d11c      	bne.n	8012ab8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8012a7e:	4b44      	ldr	r3, [pc, #272]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012a80:	685b      	ldr	r3, [r3, #4]
 8012a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d116      	bne.n	8012ab8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012a8a:	4b41      	ldr	r3, [pc, #260]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	f003 0302 	and.w	r3, r3, #2
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d005      	beq.n	8012aa2 <HAL_RCC_OscConfig+0x152>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	68db      	ldr	r3, [r3, #12]
 8012a9a:	2b01      	cmp	r3, #1
 8012a9c:	d001      	beq.n	8012aa2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8012a9e:	2301      	movs	r3, #1
 8012aa0:	e1c7      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012aa2:	4b3b      	ldr	r3, [pc, #236]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	691b      	ldr	r3, [r3, #16]
 8012aae:	00db      	lsls	r3, r3, #3
 8012ab0:	4937      	ldr	r1, [pc, #220]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012ab2:	4313      	orrs	r3, r2
 8012ab4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8012ab6:	e03a      	b.n	8012b2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d020      	beq.n	8012b02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8012ac0:	4b34      	ldr	r3, [pc, #208]	; (8012b94 <HAL_RCC_OscConfig+0x244>)
 8012ac2:	2201      	movs	r2, #1
 8012ac4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012ac6:	f7fd fd05 	bl	80104d4 <HAL_GetTick>
 8012aca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012acc:	e008      	b.n	8012ae0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012ace:	f7fd fd01 	bl	80104d4 <HAL_GetTick>
 8012ad2:	4602      	mov	r2, r0
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	1ad3      	subs	r3, r2, r3
 8012ad8:	2b02      	cmp	r3, #2
 8012ada:	d901      	bls.n	8012ae0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8012adc:	2303      	movs	r3, #3
 8012ade:	e1a8      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012ae0:	4b2b      	ldr	r3, [pc, #172]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	f003 0302 	and.w	r3, r3, #2
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d0f0      	beq.n	8012ace <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8012aec:	4b28      	ldr	r3, [pc, #160]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	691b      	ldr	r3, [r3, #16]
 8012af8:	00db      	lsls	r3, r3, #3
 8012afa:	4925      	ldr	r1, [pc, #148]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012afc:	4313      	orrs	r3, r2
 8012afe:	600b      	str	r3, [r1, #0]
 8012b00:	e015      	b.n	8012b2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8012b02:	4b24      	ldr	r3, [pc, #144]	; (8012b94 <HAL_RCC_OscConfig+0x244>)
 8012b04:	2200      	movs	r2, #0
 8012b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8012b08:	f7fd fce4 	bl	80104d4 <HAL_GetTick>
 8012b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012b0e:	e008      	b.n	8012b22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8012b10:	f7fd fce0 	bl	80104d4 <HAL_GetTick>
 8012b14:	4602      	mov	r2, r0
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	1ad3      	subs	r3, r2, r3
 8012b1a:	2b02      	cmp	r3, #2
 8012b1c:	d901      	bls.n	8012b22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8012b1e:	2303      	movs	r3, #3
 8012b20:	e187      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8012b22:	4b1b      	ldr	r3, [pc, #108]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f003 0302 	and.w	r3, r3, #2
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d1f0      	bne.n	8012b10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	f003 0308 	and.w	r3, r3, #8
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d036      	beq.n	8012ba8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	695b      	ldr	r3, [r3, #20]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d016      	beq.n	8012b70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8012b42:	4b15      	ldr	r3, [pc, #84]	; (8012b98 <HAL_RCC_OscConfig+0x248>)
 8012b44:	2201      	movs	r2, #1
 8012b46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012b48:	f7fd fcc4 	bl	80104d4 <HAL_GetTick>
 8012b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b4e:	e008      	b.n	8012b62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b50:	f7fd fcc0 	bl	80104d4 <HAL_GetTick>
 8012b54:	4602      	mov	r2, r0
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	1ad3      	subs	r3, r2, r3
 8012b5a:	2b02      	cmp	r3, #2
 8012b5c:	d901      	bls.n	8012b62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8012b5e:	2303      	movs	r3, #3
 8012b60:	e167      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8012b62:	4b0b      	ldr	r3, [pc, #44]	; (8012b90 <HAL_RCC_OscConfig+0x240>)
 8012b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b66:	f003 0302 	and.w	r3, r3, #2
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d0f0      	beq.n	8012b50 <HAL_RCC_OscConfig+0x200>
 8012b6e:	e01b      	b.n	8012ba8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8012b70:	4b09      	ldr	r3, [pc, #36]	; (8012b98 <HAL_RCC_OscConfig+0x248>)
 8012b72:	2200      	movs	r2, #0
 8012b74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012b76:	f7fd fcad 	bl	80104d4 <HAL_GetTick>
 8012b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b7c:	e00e      	b.n	8012b9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8012b7e:	f7fd fca9 	bl	80104d4 <HAL_GetTick>
 8012b82:	4602      	mov	r2, r0
 8012b84:	693b      	ldr	r3, [r7, #16]
 8012b86:	1ad3      	subs	r3, r2, r3
 8012b88:	2b02      	cmp	r3, #2
 8012b8a:	d907      	bls.n	8012b9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8012b8c:	2303      	movs	r3, #3
 8012b8e:	e150      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
 8012b90:	40023800 	.word	0x40023800
 8012b94:	42470000 	.word	0x42470000
 8012b98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8012b9c:	4b88      	ldr	r3, [pc, #544]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012b9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012ba0:	f003 0302 	and.w	r3, r3, #2
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d1ea      	bne.n	8012b7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f003 0304 	and.w	r3, r3, #4
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	f000 8097 	beq.w	8012ce4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8012bb6:	2300      	movs	r3, #0
 8012bb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8012bba:	4b81      	ldr	r3, [pc, #516]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d10f      	bne.n	8012be6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	60bb      	str	r3, [r7, #8]
 8012bca:	4b7d      	ldr	r3, [pc, #500]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bce:	4a7c      	ldr	r2, [pc, #496]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8012bd6:	4b7a      	ldr	r3, [pc, #488]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012bde:	60bb      	str	r3, [r7, #8]
 8012be0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8012be2:	2301      	movs	r3, #1
 8012be4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012be6:	4b77      	ldr	r3, [pc, #476]	; (8012dc4 <HAL_RCC_OscConfig+0x474>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d118      	bne.n	8012c24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012bf2:	4b74      	ldr	r3, [pc, #464]	; (8012dc4 <HAL_RCC_OscConfig+0x474>)
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	4a73      	ldr	r2, [pc, #460]	; (8012dc4 <HAL_RCC_OscConfig+0x474>)
 8012bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012bfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012bfe:	f7fd fc69 	bl	80104d4 <HAL_GetTick>
 8012c02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012c04:	e008      	b.n	8012c18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8012c06:	f7fd fc65 	bl	80104d4 <HAL_GetTick>
 8012c0a:	4602      	mov	r2, r0
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	1ad3      	subs	r3, r2, r3
 8012c10:	2b02      	cmp	r3, #2
 8012c12:	d901      	bls.n	8012c18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8012c14:	2303      	movs	r3, #3
 8012c16:	e10c      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8012c18:	4b6a      	ldr	r3, [pc, #424]	; (8012dc4 <HAL_RCC_OscConfig+0x474>)
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d0f0      	beq.n	8012c06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	689b      	ldr	r3, [r3, #8]
 8012c28:	2b01      	cmp	r3, #1
 8012c2a:	d106      	bne.n	8012c3a <HAL_RCC_OscConfig+0x2ea>
 8012c2c:	4b64      	ldr	r3, [pc, #400]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c30:	4a63      	ldr	r2, [pc, #396]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c32:	f043 0301 	orr.w	r3, r3, #1
 8012c36:	6713      	str	r3, [r2, #112]	; 0x70
 8012c38:	e01c      	b.n	8012c74 <HAL_RCC_OscConfig+0x324>
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	689b      	ldr	r3, [r3, #8]
 8012c3e:	2b05      	cmp	r3, #5
 8012c40:	d10c      	bne.n	8012c5c <HAL_RCC_OscConfig+0x30c>
 8012c42:	4b5f      	ldr	r3, [pc, #380]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c46:	4a5e      	ldr	r2, [pc, #376]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c48:	f043 0304 	orr.w	r3, r3, #4
 8012c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8012c4e:	4b5c      	ldr	r3, [pc, #368]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c52:	4a5b      	ldr	r2, [pc, #364]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c54:	f043 0301 	orr.w	r3, r3, #1
 8012c58:	6713      	str	r3, [r2, #112]	; 0x70
 8012c5a:	e00b      	b.n	8012c74 <HAL_RCC_OscConfig+0x324>
 8012c5c:	4b58      	ldr	r3, [pc, #352]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c60:	4a57      	ldr	r2, [pc, #348]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c62:	f023 0301 	bic.w	r3, r3, #1
 8012c66:	6713      	str	r3, [r2, #112]	; 0x70
 8012c68:	4b55      	ldr	r3, [pc, #340]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c6c:	4a54      	ldr	r2, [pc, #336]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c6e:	f023 0304 	bic.w	r3, r3, #4
 8012c72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	689b      	ldr	r3, [r3, #8]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d015      	beq.n	8012ca8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8012c7c:	f7fd fc2a 	bl	80104d4 <HAL_GetTick>
 8012c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c82:	e00a      	b.n	8012c9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012c84:	f7fd fc26 	bl	80104d4 <HAL_GetTick>
 8012c88:	4602      	mov	r2, r0
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	1ad3      	subs	r3, r2, r3
 8012c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d901      	bls.n	8012c9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8012c96:	2303      	movs	r3, #3
 8012c98:	e0cb      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8012c9a:	4b49      	ldr	r3, [pc, #292]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c9e:	f003 0302 	and.w	r3, r3, #2
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d0ee      	beq.n	8012c84 <HAL_RCC_OscConfig+0x334>
 8012ca6:	e014      	b.n	8012cd2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8012ca8:	f7fd fc14 	bl	80104d4 <HAL_GetTick>
 8012cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012cae:	e00a      	b.n	8012cc6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8012cb0:	f7fd fc10 	bl	80104d4 <HAL_GetTick>
 8012cb4:	4602      	mov	r2, r0
 8012cb6:	693b      	ldr	r3, [r7, #16]
 8012cb8:	1ad3      	subs	r3, r2, r3
 8012cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8012cbe:	4293      	cmp	r3, r2
 8012cc0:	d901      	bls.n	8012cc6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8012cc2:	2303      	movs	r3, #3
 8012cc4:	e0b5      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8012cc6:	4b3e      	ldr	r3, [pc, #248]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012cca:	f003 0302 	and.w	r3, r3, #2
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d1ee      	bne.n	8012cb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8012cd2:	7dfb      	ldrb	r3, [r7, #23]
 8012cd4:	2b01      	cmp	r3, #1
 8012cd6:	d105      	bne.n	8012ce4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8012cd8:	4b39      	ldr	r3, [pc, #228]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cdc:	4a38      	ldr	r2, [pc, #224]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012cde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012ce2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	699b      	ldr	r3, [r3, #24]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	f000 80a1 	beq.w	8012e30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8012cee:	4b34      	ldr	r3, [pc, #208]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012cf0:	689b      	ldr	r3, [r3, #8]
 8012cf2:	f003 030c 	and.w	r3, r3, #12
 8012cf6:	2b08      	cmp	r3, #8
 8012cf8:	d05c      	beq.n	8012db4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	699b      	ldr	r3, [r3, #24]
 8012cfe:	2b02      	cmp	r3, #2
 8012d00:	d141      	bne.n	8012d86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012d02:	4b31      	ldr	r3, [pc, #196]	; (8012dc8 <HAL_RCC_OscConfig+0x478>)
 8012d04:	2200      	movs	r2, #0
 8012d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d08:	f7fd fbe4 	bl	80104d4 <HAL_GetTick>
 8012d0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d0e:	e008      	b.n	8012d22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d10:	f7fd fbe0 	bl	80104d4 <HAL_GetTick>
 8012d14:	4602      	mov	r2, r0
 8012d16:	693b      	ldr	r3, [r7, #16]
 8012d18:	1ad3      	subs	r3, r2, r3
 8012d1a:	2b02      	cmp	r3, #2
 8012d1c:	d901      	bls.n	8012d22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8012d1e:	2303      	movs	r3, #3
 8012d20:	e087      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d22:	4b27      	ldr	r3, [pc, #156]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d1f0      	bne.n	8012d10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	69da      	ldr	r2, [r3, #28]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	6a1b      	ldr	r3, [r3, #32]
 8012d36:	431a      	orrs	r2, r3
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d3c:	019b      	lsls	r3, r3, #6
 8012d3e:	431a      	orrs	r2, r3
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d44:	085b      	lsrs	r3, r3, #1
 8012d46:	3b01      	subs	r3, #1
 8012d48:	041b      	lsls	r3, r3, #16
 8012d4a:	431a      	orrs	r2, r3
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d50:	061b      	lsls	r3, r3, #24
 8012d52:	491b      	ldr	r1, [pc, #108]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012d54:	4313      	orrs	r3, r2
 8012d56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8012d58:	4b1b      	ldr	r3, [pc, #108]	; (8012dc8 <HAL_RCC_OscConfig+0x478>)
 8012d5a:	2201      	movs	r2, #1
 8012d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d5e:	f7fd fbb9 	bl	80104d4 <HAL_GetTick>
 8012d62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d64:	e008      	b.n	8012d78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d66:	f7fd fbb5 	bl	80104d4 <HAL_GetTick>
 8012d6a:	4602      	mov	r2, r0
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	1ad3      	subs	r3, r2, r3
 8012d70:	2b02      	cmp	r3, #2
 8012d72:	d901      	bls.n	8012d78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8012d74:	2303      	movs	r3, #3
 8012d76:	e05c      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012d78:	4b11      	ldr	r3, [pc, #68]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d0f0      	beq.n	8012d66 <HAL_RCC_OscConfig+0x416>
 8012d84:	e054      	b.n	8012e30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8012d86:	4b10      	ldr	r3, [pc, #64]	; (8012dc8 <HAL_RCC_OscConfig+0x478>)
 8012d88:	2200      	movs	r2, #0
 8012d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012d8c:	f7fd fba2 	bl	80104d4 <HAL_GetTick>
 8012d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012d92:	e008      	b.n	8012da6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8012d94:	f7fd fb9e 	bl	80104d4 <HAL_GetTick>
 8012d98:	4602      	mov	r2, r0
 8012d9a:	693b      	ldr	r3, [r7, #16]
 8012d9c:	1ad3      	subs	r3, r2, r3
 8012d9e:	2b02      	cmp	r3, #2
 8012da0:	d901      	bls.n	8012da6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8012da2:	2303      	movs	r3, #3
 8012da4:	e045      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8012da6:	4b06      	ldr	r3, [pc, #24]	; (8012dc0 <HAL_RCC_OscConfig+0x470>)
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d1f0      	bne.n	8012d94 <HAL_RCC_OscConfig+0x444>
 8012db2:	e03d      	b.n	8012e30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	699b      	ldr	r3, [r3, #24]
 8012db8:	2b01      	cmp	r3, #1
 8012dba:	d107      	bne.n	8012dcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8012dbc:	2301      	movs	r3, #1
 8012dbe:	e038      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
 8012dc0:	40023800 	.word	0x40023800
 8012dc4:	40007000 	.word	0x40007000
 8012dc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8012dcc:	4b1b      	ldr	r3, [pc, #108]	; (8012e3c <HAL_RCC_OscConfig+0x4ec>)
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	699b      	ldr	r3, [r3, #24]
 8012dd6:	2b01      	cmp	r3, #1
 8012dd8:	d028      	beq.n	8012e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d121      	bne.n	8012e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d11a      	bne.n	8012e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012df6:	68fa      	ldr	r2, [r7, #12]
 8012df8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8012dfc:	4013      	ands	r3, r2
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8012e02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8012e04:	4293      	cmp	r3, r2
 8012e06:	d111      	bne.n	8012e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e12:	085b      	lsrs	r3, r3, #1
 8012e14:	3b01      	subs	r3, #1
 8012e16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d107      	bne.n	8012e2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8012e28:	429a      	cmp	r2, r3
 8012e2a:	d001      	beq.n	8012e30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8012e2c:	2301      	movs	r3, #1
 8012e2e:	e000      	b.n	8012e32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8012e30:	2300      	movs	r3, #0
}
 8012e32:	4618      	mov	r0, r3
 8012e34:	3718      	adds	r7, #24
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	40023800 	.word	0x40023800

08012e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d101      	bne.n	8012e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8012e50:	2301      	movs	r3, #1
 8012e52:	e0cc      	b.n	8012fee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8012e54:	4b68      	ldr	r3, [pc, #416]	; (8012ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	f003 0307 	and.w	r3, r3, #7
 8012e5c:	683a      	ldr	r2, [r7, #0]
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	d90c      	bls.n	8012e7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012e62:	4b65      	ldr	r3, [pc, #404]	; (8012ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8012e64:	683a      	ldr	r2, [r7, #0]
 8012e66:	b2d2      	uxtb	r2, r2
 8012e68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012e6a:	4b63      	ldr	r3, [pc, #396]	; (8012ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	f003 0307 	and.w	r3, r3, #7
 8012e72:	683a      	ldr	r2, [r7, #0]
 8012e74:	429a      	cmp	r2, r3
 8012e76:	d001      	beq.n	8012e7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8012e78:	2301      	movs	r3, #1
 8012e7a:	e0b8      	b.n	8012fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	f003 0302 	and.w	r3, r3, #2
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d020      	beq.n	8012eca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	f003 0304 	and.w	r3, r3, #4
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d005      	beq.n	8012ea0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8012e94:	4b59      	ldr	r3, [pc, #356]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012e96:	689b      	ldr	r3, [r3, #8]
 8012e98:	4a58      	ldr	r2, [pc, #352]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012e9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8012e9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	f003 0308 	and.w	r3, r3, #8
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d005      	beq.n	8012eb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8012eac:	4b53      	ldr	r3, [pc, #332]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012eae:	689b      	ldr	r3, [r3, #8]
 8012eb0:	4a52      	ldr	r2, [pc, #328]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012eb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8012eb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8012eb8:	4b50      	ldr	r3, [pc, #320]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012eba:	689b      	ldr	r3, [r3, #8]
 8012ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	689b      	ldr	r3, [r3, #8]
 8012ec4:	494d      	ldr	r1, [pc, #308]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012ec6:	4313      	orrs	r3, r2
 8012ec8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	f003 0301 	and.w	r3, r3, #1
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d044      	beq.n	8012f60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	685b      	ldr	r3, [r3, #4]
 8012eda:	2b01      	cmp	r3, #1
 8012edc:	d107      	bne.n	8012eee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8012ede:	4b47      	ldr	r3, [pc, #284]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d119      	bne.n	8012f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012eea:	2301      	movs	r3, #1
 8012eec:	e07f      	b.n	8012fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	685b      	ldr	r3, [r3, #4]
 8012ef2:	2b02      	cmp	r3, #2
 8012ef4:	d003      	beq.n	8012efe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8012efa:	2b03      	cmp	r3, #3
 8012efc:	d107      	bne.n	8012f0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8012efe:	4b3f      	ldr	r3, [pc, #252]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d109      	bne.n	8012f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	e06f      	b.n	8012fee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8012f0e:	4b3b      	ldr	r3, [pc, #236]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	f003 0302 	and.w	r3, r3, #2
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d101      	bne.n	8012f1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e067      	b.n	8012fee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8012f1e:	4b37      	ldr	r3, [pc, #220]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012f20:	689b      	ldr	r3, [r3, #8]
 8012f22:	f023 0203 	bic.w	r2, r3, #3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	4934      	ldr	r1, [pc, #208]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012f2c:	4313      	orrs	r3, r2
 8012f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8012f30:	f7fd fad0 	bl	80104d4 <HAL_GetTick>
 8012f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012f36:	e00a      	b.n	8012f4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8012f38:	f7fd facc 	bl	80104d4 <HAL_GetTick>
 8012f3c:	4602      	mov	r2, r0
 8012f3e:	68fb      	ldr	r3, [r7, #12]
 8012f40:	1ad3      	subs	r3, r2, r3
 8012f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f46:	4293      	cmp	r3, r2
 8012f48:	d901      	bls.n	8012f4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8012f4a:	2303      	movs	r3, #3
 8012f4c:	e04f      	b.n	8012fee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8012f4e:	4b2b      	ldr	r3, [pc, #172]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012f50:	689b      	ldr	r3, [r3, #8]
 8012f52:	f003 020c 	and.w	r2, r3, #12
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	685b      	ldr	r3, [r3, #4]
 8012f5a:	009b      	lsls	r3, r3, #2
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d1eb      	bne.n	8012f38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8012f60:	4b25      	ldr	r3, [pc, #148]	; (8012ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	f003 0307 	and.w	r3, r3, #7
 8012f68:	683a      	ldr	r2, [r7, #0]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d20c      	bcs.n	8012f88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8012f6e:	4b22      	ldr	r3, [pc, #136]	; (8012ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8012f70:	683a      	ldr	r2, [r7, #0]
 8012f72:	b2d2      	uxtb	r2, r2
 8012f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8012f76:	4b20      	ldr	r3, [pc, #128]	; (8012ff8 <HAL_RCC_ClockConfig+0x1b8>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	f003 0307 	and.w	r3, r3, #7
 8012f7e:	683a      	ldr	r2, [r7, #0]
 8012f80:	429a      	cmp	r2, r3
 8012f82:	d001      	beq.n	8012f88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8012f84:	2301      	movs	r3, #1
 8012f86:	e032      	b.n	8012fee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f003 0304 	and.w	r3, r3, #4
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d008      	beq.n	8012fa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8012f94:	4b19      	ldr	r3, [pc, #100]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012f96:	689b      	ldr	r3, [r3, #8]
 8012f98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	68db      	ldr	r3, [r3, #12]
 8012fa0:	4916      	ldr	r1, [pc, #88]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012fa2:	4313      	orrs	r3, r2
 8012fa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	f003 0308 	and.w	r3, r3, #8
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d009      	beq.n	8012fc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8012fb2:	4b12      	ldr	r3, [pc, #72]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012fb4:	689b      	ldr	r3, [r3, #8]
 8012fb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	691b      	ldr	r3, [r3, #16]
 8012fbe:	00db      	lsls	r3, r3, #3
 8012fc0:	490e      	ldr	r1, [pc, #56]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012fc2:	4313      	orrs	r3, r2
 8012fc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012fc6:	f000 f821 	bl	801300c <HAL_RCC_GetSysClockFreq>
 8012fca:	4602      	mov	r2, r0
 8012fcc:	4b0b      	ldr	r3, [pc, #44]	; (8012ffc <HAL_RCC_ClockConfig+0x1bc>)
 8012fce:	689b      	ldr	r3, [r3, #8]
 8012fd0:	091b      	lsrs	r3, r3, #4
 8012fd2:	f003 030f 	and.w	r3, r3, #15
 8012fd6:	490a      	ldr	r1, [pc, #40]	; (8013000 <HAL_RCC_ClockConfig+0x1c0>)
 8012fd8:	5ccb      	ldrb	r3, [r1, r3]
 8012fda:	fa22 f303 	lsr.w	r3, r2, r3
 8012fde:	4a09      	ldr	r2, [pc, #36]	; (8013004 <HAL_RCC_ClockConfig+0x1c4>)
 8012fe0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8012fe2:	4b09      	ldr	r3, [pc, #36]	; (8013008 <HAL_RCC_ClockConfig+0x1c8>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7fc fc08 	bl	800f7fc <HAL_InitTick>

  return HAL_OK;
 8012fec:	2300      	movs	r3, #0
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	40023c00 	.word	0x40023c00
 8012ffc:	40023800 	.word	0x40023800
 8013000:	0801f5e8 	.word	0x0801f5e8
 8013004:	2000001c 	.word	0x2000001c
 8013008:	20000020 	.word	0x20000020

0801300c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801300c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013010:	b094      	sub	sp, #80	; 0x50
 8013012:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8013014:	2300      	movs	r3, #0
 8013016:	647b      	str	r3, [r7, #68]	; 0x44
 8013018:	2300      	movs	r3, #0
 801301a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801301c:	2300      	movs	r3, #0
 801301e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8013020:	2300      	movs	r3, #0
 8013022:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013024:	4b79      	ldr	r3, [pc, #484]	; (801320c <HAL_RCC_GetSysClockFreq+0x200>)
 8013026:	689b      	ldr	r3, [r3, #8]
 8013028:	f003 030c 	and.w	r3, r3, #12
 801302c:	2b08      	cmp	r3, #8
 801302e:	d00d      	beq.n	801304c <HAL_RCC_GetSysClockFreq+0x40>
 8013030:	2b08      	cmp	r3, #8
 8013032:	f200 80e1 	bhi.w	80131f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8013036:	2b00      	cmp	r3, #0
 8013038:	d002      	beq.n	8013040 <HAL_RCC_GetSysClockFreq+0x34>
 801303a:	2b04      	cmp	r3, #4
 801303c:	d003      	beq.n	8013046 <HAL_RCC_GetSysClockFreq+0x3a>
 801303e:	e0db      	b.n	80131f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8013040:	4b73      	ldr	r3, [pc, #460]	; (8013210 <HAL_RCC_GetSysClockFreq+0x204>)
 8013042:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8013044:	e0db      	b.n	80131fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8013046:	4b72      	ldr	r3, [pc, #456]	; (8013210 <HAL_RCC_GetSysClockFreq+0x204>)
 8013048:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 801304a:	e0d8      	b.n	80131fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801304c:	4b6f      	ldr	r3, [pc, #444]	; (801320c <HAL_RCC_GetSysClockFreq+0x200>)
 801304e:	685b      	ldr	r3, [r3, #4]
 8013050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013054:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8013056:	4b6d      	ldr	r3, [pc, #436]	; (801320c <HAL_RCC_GetSysClockFreq+0x200>)
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801305e:	2b00      	cmp	r3, #0
 8013060:	d063      	beq.n	801312a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013062:	4b6a      	ldr	r3, [pc, #424]	; (801320c <HAL_RCC_GetSysClockFreq+0x200>)
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	099b      	lsrs	r3, r3, #6
 8013068:	2200      	movs	r2, #0
 801306a:	63bb      	str	r3, [r7, #56]	; 0x38
 801306c:	63fa      	str	r2, [r7, #60]	; 0x3c
 801306e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013074:	633b      	str	r3, [r7, #48]	; 0x30
 8013076:	2300      	movs	r3, #0
 8013078:	637b      	str	r3, [r7, #52]	; 0x34
 801307a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801307e:	4622      	mov	r2, r4
 8013080:	462b      	mov	r3, r5
 8013082:	f04f 0000 	mov.w	r0, #0
 8013086:	f04f 0100 	mov.w	r1, #0
 801308a:	0159      	lsls	r1, r3, #5
 801308c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013090:	0150      	lsls	r0, r2, #5
 8013092:	4602      	mov	r2, r0
 8013094:	460b      	mov	r3, r1
 8013096:	4621      	mov	r1, r4
 8013098:	1a51      	subs	r1, r2, r1
 801309a:	6139      	str	r1, [r7, #16]
 801309c:	4629      	mov	r1, r5
 801309e:	eb63 0301 	sbc.w	r3, r3, r1
 80130a2:	617b      	str	r3, [r7, #20]
 80130a4:	f04f 0200 	mov.w	r2, #0
 80130a8:	f04f 0300 	mov.w	r3, #0
 80130ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80130b0:	4659      	mov	r1, fp
 80130b2:	018b      	lsls	r3, r1, #6
 80130b4:	4651      	mov	r1, sl
 80130b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80130ba:	4651      	mov	r1, sl
 80130bc:	018a      	lsls	r2, r1, #6
 80130be:	4651      	mov	r1, sl
 80130c0:	ebb2 0801 	subs.w	r8, r2, r1
 80130c4:	4659      	mov	r1, fp
 80130c6:	eb63 0901 	sbc.w	r9, r3, r1
 80130ca:	f04f 0200 	mov.w	r2, #0
 80130ce:	f04f 0300 	mov.w	r3, #0
 80130d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80130d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80130da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80130de:	4690      	mov	r8, r2
 80130e0:	4699      	mov	r9, r3
 80130e2:	4623      	mov	r3, r4
 80130e4:	eb18 0303 	adds.w	r3, r8, r3
 80130e8:	60bb      	str	r3, [r7, #8]
 80130ea:	462b      	mov	r3, r5
 80130ec:	eb49 0303 	adc.w	r3, r9, r3
 80130f0:	60fb      	str	r3, [r7, #12]
 80130f2:	f04f 0200 	mov.w	r2, #0
 80130f6:	f04f 0300 	mov.w	r3, #0
 80130fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80130fe:	4629      	mov	r1, r5
 8013100:	028b      	lsls	r3, r1, #10
 8013102:	4621      	mov	r1, r4
 8013104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8013108:	4621      	mov	r1, r4
 801310a:	028a      	lsls	r2, r1, #10
 801310c:	4610      	mov	r0, r2
 801310e:	4619      	mov	r1, r3
 8013110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013112:	2200      	movs	r2, #0
 8013114:	62bb      	str	r3, [r7, #40]	; 0x28
 8013116:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013118:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801311c:	f7ed fdb4 	bl	8000c88 <__aeabi_uldivmod>
 8013120:	4602      	mov	r2, r0
 8013122:	460b      	mov	r3, r1
 8013124:	4613      	mov	r3, r2
 8013126:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013128:	e058      	b.n	80131dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801312a:	4b38      	ldr	r3, [pc, #224]	; (801320c <HAL_RCC_GetSysClockFreq+0x200>)
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	099b      	lsrs	r3, r3, #6
 8013130:	2200      	movs	r2, #0
 8013132:	4618      	mov	r0, r3
 8013134:	4611      	mov	r1, r2
 8013136:	f3c0 0308 	ubfx	r3, r0, #0, #9
 801313a:	623b      	str	r3, [r7, #32]
 801313c:	2300      	movs	r3, #0
 801313e:	627b      	str	r3, [r7, #36]	; 0x24
 8013140:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8013144:	4642      	mov	r2, r8
 8013146:	464b      	mov	r3, r9
 8013148:	f04f 0000 	mov.w	r0, #0
 801314c:	f04f 0100 	mov.w	r1, #0
 8013150:	0159      	lsls	r1, r3, #5
 8013152:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8013156:	0150      	lsls	r0, r2, #5
 8013158:	4602      	mov	r2, r0
 801315a:	460b      	mov	r3, r1
 801315c:	4641      	mov	r1, r8
 801315e:	ebb2 0a01 	subs.w	sl, r2, r1
 8013162:	4649      	mov	r1, r9
 8013164:	eb63 0b01 	sbc.w	fp, r3, r1
 8013168:	f04f 0200 	mov.w	r2, #0
 801316c:	f04f 0300 	mov.w	r3, #0
 8013170:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8013174:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8013178:	ea4f 128a 	mov.w	r2, sl, lsl #6
 801317c:	ebb2 040a 	subs.w	r4, r2, sl
 8013180:	eb63 050b 	sbc.w	r5, r3, fp
 8013184:	f04f 0200 	mov.w	r2, #0
 8013188:	f04f 0300 	mov.w	r3, #0
 801318c:	00eb      	lsls	r3, r5, #3
 801318e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8013192:	00e2      	lsls	r2, r4, #3
 8013194:	4614      	mov	r4, r2
 8013196:	461d      	mov	r5, r3
 8013198:	4643      	mov	r3, r8
 801319a:	18e3      	adds	r3, r4, r3
 801319c:	603b      	str	r3, [r7, #0]
 801319e:	464b      	mov	r3, r9
 80131a0:	eb45 0303 	adc.w	r3, r5, r3
 80131a4:	607b      	str	r3, [r7, #4]
 80131a6:	f04f 0200 	mov.w	r2, #0
 80131aa:	f04f 0300 	mov.w	r3, #0
 80131ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80131b2:	4629      	mov	r1, r5
 80131b4:	028b      	lsls	r3, r1, #10
 80131b6:	4621      	mov	r1, r4
 80131b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80131bc:	4621      	mov	r1, r4
 80131be:	028a      	lsls	r2, r1, #10
 80131c0:	4610      	mov	r0, r2
 80131c2:	4619      	mov	r1, r3
 80131c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80131c6:	2200      	movs	r2, #0
 80131c8:	61bb      	str	r3, [r7, #24]
 80131ca:	61fa      	str	r2, [r7, #28]
 80131cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80131d0:	f7ed fd5a 	bl	8000c88 <__aeabi_uldivmod>
 80131d4:	4602      	mov	r2, r0
 80131d6:	460b      	mov	r3, r1
 80131d8:	4613      	mov	r3, r2
 80131da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80131dc:	4b0b      	ldr	r3, [pc, #44]	; (801320c <HAL_RCC_GetSysClockFreq+0x200>)
 80131de:	685b      	ldr	r3, [r3, #4]
 80131e0:	0c1b      	lsrs	r3, r3, #16
 80131e2:	f003 0303 	and.w	r3, r3, #3
 80131e6:	3301      	adds	r3, #1
 80131e8:	005b      	lsls	r3, r3, #1
 80131ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80131ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80131ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80131f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80131f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80131f6:	e002      	b.n	80131fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80131f8:	4b05      	ldr	r3, [pc, #20]	; (8013210 <HAL_RCC_GetSysClockFreq+0x204>)
 80131fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80131fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80131fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8013200:	4618      	mov	r0, r3
 8013202:	3750      	adds	r7, #80	; 0x50
 8013204:	46bd      	mov	sp, r7
 8013206:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801320a:	bf00      	nop
 801320c:	40023800 	.word	0x40023800
 8013210:	00f42400 	.word	0x00f42400

08013214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8013214:	b480      	push	{r7}
 8013216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8013218:	4b03      	ldr	r3, [pc, #12]	; (8013228 <HAL_RCC_GetHCLKFreq+0x14>)
 801321a:	681b      	ldr	r3, [r3, #0]
}
 801321c:	4618      	mov	r0, r3
 801321e:	46bd      	mov	sp, r7
 8013220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013224:	4770      	bx	lr
 8013226:	bf00      	nop
 8013228:	2000001c 	.word	0x2000001c

0801322c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8013230:	f7ff fff0 	bl	8013214 <HAL_RCC_GetHCLKFreq>
 8013234:	4602      	mov	r2, r0
 8013236:	4b05      	ldr	r3, [pc, #20]	; (801324c <HAL_RCC_GetPCLK1Freq+0x20>)
 8013238:	689b      	ldr	r3, [r3, #8]
 801323a:	0a9b      	lsrs	r3, r3, #10
 801323c:	f003 0307 	and.w	r3, r3, #7
 8013240:	4903      	ldr	r1, [pc, #12]	; (8013250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8013242:	5ccb      	ldrb	r3, [r1, r3]
 8013244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013248:	4618      	mov	r0, r3
 801324a:	bd80      	pop	{r7, pc}
 801324c:	40023800 	.word	0x40023800
 8013250:	0801f5f8 	.word	0x0801f5f8

08013254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013254:	b580      	push	{r7, lr}
 8013256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8013258:	f7ff ffdc 	bl	8013214 <HAL_RCC_GetHCLKFreq>
 801325c:	4602      	mov	r2, r0
 801325e:	4b05      	ldr	r3, [pc, #20]	; (8013274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8013260:	689b      	ldr	r3, [r3, #8]
 8013262:	0b5b      	lsrs	r3, r3, #13
 8013264:	f003 0307 	and.w	r3, r3, #7
 8013268:	4903      	ldr	r1, [pc, #12]	; (8013278 <HAL_RCC_GetPCLK2Freq+0x24>)
 801326a:	5ccb      	ldrb	r3, [r1, r3]
 801326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8013270:	4618      	mov	r0, r3
 8013272:	bd80      	pop	{r7, pc}
 8013274:	40023800 	.word	0x40023800
 8013278:	0801f5f8 	.word	0x0801f5f8

0801327c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 801327c:	b480      	push	{r7}
 801327e:	b083      	sub	sp, #12
 8013280:	af00      	add	r7, sp, #0
 8013282:	6078      	str	r0, [r7, #4]
 8013284:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	220f      	movs	r2, #15
 801328a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 801328c:	4b12      	ldr	r3, [pc, #72]	; (80132d8 <HAL_RCC_GetClockConfig+0x5c>)
 801328e:	689b      	ldr	r3, [r3, #8]
 8013290:	f003 0203 	and.w	r2, r3, #3
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8013298:	4b0f      	ldr	r3, [pc, #60]	; (80132d8 <HAL_RCC_GetClockConfig+0x5c>)
 801329a:	689b      	ldr	r3, [r3, #8]
 801329c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80132a4:	4b0c      	ldr	r3, [pc, #48]	; (80132d8 <HAL_RCC_GetClockConfig+0x5c>)
 80132a6:	689b      	ldr	r3, [r3, #8]
 80132a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80132b0:	4b09      	ldr	r3, [pc, #36]	; (80132d8 <HAL_RCC_GetClockConfig+0x5c>)
 80132b2:	689b      	ldr	r3, [r3, #8]
 80132b4:	08db      	lsrs	r3, r3, #3
 80132b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80132be:	4b07      	ldr	r3, [pc, #28]	; (80132dc <HAL_RCC_GetClockConfig+0x60>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	f003 0207 	and.w	r2, r3, #7
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	601a      	str	r2, [r3, #0]
}
 80132ca:	bf00      	nop
 80132cc:	370c      	adds	r7, #12
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	40023800 	.word	0x40023800
 80132dc:	40023c00 	.word	0x40023c00

080132e0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d101      	bne.n	80132f2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80132ee:	2301      	movs	r3, #1
 80132f0:	e01c      	b.n	801332c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	795b      	ldrb	r3, [r3, #5]
 80132f6:	b2db      	uxtb	r3, r3
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d105      	bne.n	8013308 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	2200      	movs	r2, #0
 8013300:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f7fc f9ae 	bl	800f664 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2202      	movs	r2, #2
 801330c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	681a      	ldr	r2, [r3, #0]
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	f042 0204 	orr.w	r2, r2, #4
 801331c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2201      	movs	r2, #1
 8013322:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2200      	movs	r2, #0
 8013328:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801332a:	2300      	movs	r3, #0
}
 801332c:	4618      	mov	r0, r3
 801332e:	3708      	adds	r7, #8
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}

08013334 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d101      	bne.n	8013346 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013342:	2301      	movs	r3, #1
 8013344:	e07b      	b.n	801343e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801334a:	2b00      	cmp	r3, #0
 801334c:	d108      	bne.n	8013360 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	685b      	ldr	r3, [r3, #4]
 8013352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013356:	d009      	beq.n	801336c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	2200      	movs	r2, #0
 801335c:	61da      	str	r2, [r3, #28]
 801335e:	e005      	b.n	801336c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	2200      	movs	r2, #0
 8013364:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	2200      	movs	r2, #0
 801336a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2200      	movs	r2, #0
 8013370:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013378:	b2db      	uxtb	r3, r3
 801337a:	2b00      	cmp	r3, #0
 801337c:	d106      	bne.n	801338c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	2200      	movs	r2, #0
 8013382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f7fc f9c4 	bl	800f714 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2202      	movs	r2, #2
 8013390:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80133a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	689b      	ldr	r3, [r3, #8]
 80133b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80133b4:	431a      	orrs	r2, r3
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	68db      	ldr	r3, [r3, #12]
 80133ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80133be:	431a      	orrs	r2, r3
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	691b      	ldr	r3, [r3, #16]
 80133c4:	f003 0302 	and.w	r3, r3, #2
 80133c8:	431a      	orrs	r2, r3
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	695b      	ldr	r3, [r3, #20]
 80133ce:	f003 0301 	and.w	r3, r3, #1
 80133d2:	431a      	orrs	r2, r3
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	699b      	ldr	r3, [r3, #24]
 80133d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80133dc:	431a      	orrs	r2, r3
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	69db      	ldr	r3, [r3, #28]
 80133e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80133e6:	431a      	orrs	r2, r3
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6a1b      	ldr	r3, [r3, #32]
 80133ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80133f0:	ea42 0103 	orr.w	r1, r2, r3
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	430a      	orrs	r2, r1
 8013402:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	699b      	ldr	r3, [r3, #24]
 8013408:	0c1b      	lsrs	r3, r3, #16
 801340a:	f003 0104 	and.w	r1, r3, #4
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013412:	f003 0210 	and.w	r2, r3, #16
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	681b      	ldr	r3, [r3, #0]
 801341a:	430a      	orrs	r2, r1
 801341c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	69da      	ldr	r2, [r3, #28]
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	681b      	ldr	r3, [r3, #0]
 8013428:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801342c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	2200      	movs	r2, #0
 8013432:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2201      	movs	r2, #1
 8013438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 801343c:	2300      	movs	r3, #0
}
 801343e:	4618      	mov	r0, r3
 8013440:	3708      	adds	r7, #8
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}

08013446 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013446:	b580      	push	{r7, lr}
 8013448:	b088      	sub	sp, #32
 801344a:	af00      	add	r7, sp, #0
 801344c:	60f8      	str	r0, [r7, #12]
 801344e:	60b9      	str	r1, [r7, #8]
 8013450:	603b      	str	r3, [r7, #0]
 8013452:	4613      	mov	r3, r2
 8013454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8013456:	2300      	movs	r3, #0
 8013458:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013460:	2b01      	cmp	r3, #1
 8013462:	d101      	bne.n	8013468 <HAL_SPI_Transmit+0x22>
 8013464:	2302      	movs	r3, #2
 8013466:	e126      	b.n	80136b6 <HAL_SPI_Transmit+0x270>
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	2201      	movs	r2, #1
 801346c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013470:	f7fd f830 	bl	80104d4 <HAL_GetTick>
 8013474:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8013476:	88fb      	ldrh	r3, [r7, #6]
 8013478:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013480:	b2db      	uxtb	r3, r3
 8013482:	2b01      	cmp	r3, #1
 8013484:	d002      	beq.n	801348c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8013486:	2302      	movs	r3, #2
 8013488:	77fb      	strb	r3, [r7, #31]
    goto error;
 801348a:	e10b      	b.n	80136a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 801348c:	68bb      	ldr	r3, [r7, #8]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d002      	beq.n	8013498 <HAL_SPI_Transmit+0x52>
 8013492:	88fb      	ldrh	r3, [r7, #6]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d102      	bne.n	801349e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8013498:	2301      	movs	r3, #1
 801349a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801349c:	e102      	b.n	80136a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	2203      	movs	r2, #3
 80134a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	2200      	movs	r2, #0
 80134aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	68ba      	ldr	r2, [r7, #8]
 80134b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	88fa      	ldrh	r2, [r7, #6]
 80134b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	88fa      	ldrh	r2, [r7, #6]
 80134bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	2200      	movs	r2, #0
 80134c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	2200      	movs	r2, #0
 80134c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	2200      	movs	r2, #0
 80134ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	2200      	movs	r2, #0
 80134d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2200      	movs	r2, #0
 80134da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	689b      	ldr	r3, [r3, #8]
 80134e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80134e4:	d10f      	bne.n	8013506 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	681a      	ldr	r2, [r3, #0]
 80134ec:	68fb      	ldr	r3, [r7, #12]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80134f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	681a      	ldr	r2, [r3, #0]
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8013504:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	681b      	ldr	r3, [r3, #0]
 801350c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013510:	2b40      	cmp	r3, #64	; 0x40
 8013512:	d007      	beq.n	8013524 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	681a      	ldr	r2, [r3, #0]
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013522:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	68db      	ldr	r3, [r3, #12]
 8013528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801352c:	d14b      	bne.n	80135c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	685b      	ldr	r3, [r3, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d002      	beq.n	801353c <HAL_SPI_Transmit+0xf6>
 8013536:	8afb      	ldrh	r3, [r7, #22]
 8013538:	2b01      	cmp	r3, #1
 801353a:	d13e      	bne.n	80135ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013540:	881a      	ldrh	r2, [r3, #0]
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801354c:	1c9a      	adds	r2, r3, #2
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013552:	68fb      	ldr	r3, [r7, #12]
 8013554:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013556:	b29b      	uxth	r3, r3
 8013558:	3b01      	subs	r3, #1
 801355a:	b29a      	uxth	r2, r3
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8013560:	e02b      	b.n	80135ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	689b      	ldr	r3, [r3, #8]
 8013568:	f003 0302 	and.w	r3, r3, #2
 801356c:	2b02      	cmp	r3, #2
 801356e:	d112      	bne.n	8013596 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013574:	881a      	ldrh	r2, [r3, #0]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013580:	1c9a      	adds	r2, r3, #2
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801358a:	b29b      	uxth	r3, r3
 801358c:	3b01      	subs	r3, #1
 801358e:	b29a      	uxth	r2, r3
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	86da      	strh	r2, [r3, #54]	; 0x36
 8013594:	e011      	b.n	80135ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013596:	f7fc ff9d 	bl	80104d4 <HAL_GetTick>
 801359a:	4602      	mov	r2, r0
 801359c:	69bb      	ldr	r3, [r7, #24]
 801359e:	1ad3      	subs	r3, r2, r3
 80135a0:	683a      	ldr	r2, [r7, #0]
 80135a2:	429a      	cmp	r2, r3
 80135a4:	d803      	bhi.n	80135ae <HAL_SPI_Transmit+0x168>
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ac:	d102      	bne.n	80135b4 <HAL_SPI_Transmit+0x16e>
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d102      	bne.n	80135ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80135b4:	2303      	movs	r3, #3
 80135b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80135b8:	e074      	b.n	80136a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80135be:	b29b      	uxth	r3, r3
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d1ce      	bne.n	8013562 <HAL_SPI_Transmit+0x11c>
 80135c4:	e04c      	b.n	8013660 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80135c6:	68fb      	ldr	r3, [r7, #12]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d002      	beq.n	80135d4 <HAL_SPI_Transmit+0x18e>
 80135ce:	8afb      	ldrh	r3, [r7, #22]
 80135d0:	2b01      	cmp	r3, #1
 80135d2:	d140      	bne.n	8013656 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135d8:	68fb      	ldr	r3, [r7, #12]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	330c      	adds	r3, #12
 80135de:	7812      	ldrb	r2, [r2, #0]
 80135e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80135e2:	68fb      	ldr	r3, [r7, #12]
 80135e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135e6:	1c5a      	adds	r2, r3, #1
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80135f0:	b29b      	uxth	r3, r3
 80135f2:	3b01      	subs	r3, #1
 80135f4:	b29a      	uxth	r2, r3
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80135fa:	e02c      	b.n	8013656 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80135fc:	68fb      	ldr	r3, [r7, #12]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	689b      	ldr	r3, [r3, #8]
 8013602:	f003 0302 	and.w	r3, r3, #2
 8013606:	2b02      	cmp	r3, #2
 8013608:	d113      	bne.n	8013632 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	330c      	adds	r3, #12
 8013614:	7812      	ldrb	r2, [r2, #0]
 8013616:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801361c:	1c5a      	adds	r2, r3, #1
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013626:	b29b      	uxth	r3, r3
 8013628:	3b01      	subs	r3, #1
 801362a:	b29a      	uxth	r2, r3
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	86da      	strh	r2, [r3, #54]	; 0x36
 8013630:	e011      	b.n	8013656 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013632:	f7fc ff4f 	bl	80104d4 <HAL_GetTick>
 8013636:	4602      	mov	r2, r0
 8013638:	69bb      	ldr	r3, [r7, #24]
 801363a:	1ad3      	subs	r3, r2, r3
 801363c:	683a      	ldr	r2, [r7, #0]
 801363e:	429a      	cmp	r2, r3
 8013640:	d803      	bhi.n	801364a <HAL_SPI_Transmit+0x204>
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013648:	d102      	bne.n	8013650 <HAL_SPI_Transmit+0x20a>
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d102      	bne.n	8013656 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8013650:	2303      	movs	r3, #3
 8013652:	77fb      	strb	r3, [r7, #31]
          goto error;
 8013654:	e026      	b.n	80136a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8013656:	68fb      	ldr	r3, [r7, #12]
 8013658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801365a:	b29b      	uxth	r3, r3
 801365c:	2b00      	cmp	r3, #0
 801365e:	d1cd      	bne.n	80135fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013660:	69ba      	ldr	r2, [r7, #24]
 8013662:	6839      	ldr	r1, [r7, #0]
 8013664:	68f8      	ldr	r0, [r7, #12]
 8013666:	f000 fbcb 	bl	8013e00 <SPI_EndRxTxTransaction>
 801366a:	4603      	mov	r3, r0
 801366c:	2b00      	cmp	r3, #0
 801366e:	d002      	beq.n	8013676 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2220      	movs	r2, #32
 8013674:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	689b      	ldr	r3, [r3, #8]
 801367a:	2b00      	cmp	r3, #0
 801367c:	d10a      	bne.n	8013694 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801367e:	2300      	movs	r3, #0
 8013680:	613b      	str	r3, [r7, #16]
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	68db      	ldr	r3, [r3, #12]
 8013688:	613b      	str	r3, [r7, #16]
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	689b      	ldr	r3, [r3, #8]
 8013690:	613b      	str	r3, [r7, #16]
 8013692:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013698:	2b00      	cmp	r3, #0
 801369a:	d002      	beq.n	80136a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 801369c:	2301      	movs	r3, #1
 801369e:	77fb      	strb	r3, [r7, #31]
 80136a0:	e000      	b.n	80136a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80136a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	2201      	movs	r2, #1
 80136a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	2200      	movs	r2, #0
 80136b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80136b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80136b6:	4618      	mov	r0, r3
 80136b8:	3720      	adds	r7, #32
 80136ba:	46bd      	mov	sp, r7
 80136bc:	bd80      	pop	{r7, pc}

080136be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80136be:	b580      	push	{r7, lr}
 80136c0:	b088      	sub	sp, #32
 80136c2:	af02      	add	r7, sp, #8
 80136c4:	60f8      	str	r0, [r7, #12]
 80136c6:	60b9      	str	r1, [r7, #8]
 80136c8:	603b      	str	r3, [r7, #0]
 80136ca:	4613      	mov	r3, r2
 80136cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80136ce:	2300      	movs	r3, #0
 80136d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80136da:	d112      	bne.n	8013702 <HAL_SPI_Receive+0x44>
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	689b      	ldr	r3, [r3, #8]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	d10e      	bne.n	8013702 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	2204      	movs	r2, #4
 80136e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80136ec:	88fa      	ldrh	r2, [r7, #6]
 80136ee:	683b      	ldr	r3, [r7, #0]
 80136f0:	9300      	str	r3, [sp, #0]
 80136f2:	4613      	mov	r3, r2
 80136f4:	68ba      	ldr	r2, [r7, #8]
 80136f6:	68b9      	ldr	r1, [r7, #8]
 80136f8:	68f8      	ldr	r0, [r7, #12]
 80136fa:	f000 f8f1 	bl	80138e0 <HAL_SPI_TransmitReceive>
 80136fe:	4603      	mov	r3, r0
 8013700:	e0ea      	b.n	80138d8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8013708:	2b01      	cmp	r3, #1
 801370a:	d101      	bne.n	8013710 <HAL_SPI_Receive+0x52>
 801370c:	2302      	movs	r3, #2
 801370e:	e0e3      	b.n	80138d8 <HAL_SPI_Receive+0x21a>
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	2201      	movs	r2, #1
 8013714:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8013718:	f7fc fedc 	bl	80104d4 <HAL_GetTick>
 801371c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013724:	b2db      	uxtb	r3, r3
 8013726:	2b01      	cmp	r3, #1
 8013728:	d002      	beq.n	8013730 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801372a:	2302      	movs	r3, #2
 801372c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801372e:	e0ca      	b.n	80138c6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8013730:	68bb      	ldr	r3, [r7, #8]
 8013732:	2b00      	cmp	r3, #0
 8013734:	d002      	beq.n	801373c <HAL_SPI_Receive+0x7e>
 8013736:	88fb      	ldrh	r3, [r7, #6]
 8013738:	2b00      	cmp	r3, #0
 801373a:	d102      	bne.n	8013742 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801373c:	2301      	movs	r3, #1
 801373e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8013740:	e0c1      	b.n	80138c6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013742:	68fb      	ldr	r3, [r7, #12]
 8013744:	2204      	movs	r2, #4
 8013746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	2200      	movs	r2, #0
 801374e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	68ba      	ldr	r2, [r7, #8]
 8013754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	88fa      	ldrh	r2, [r7, #6]
 801375a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 801375c:	68fb      	ldr	r3, [r7, #12]
 801375e:	88fa      	ldrh	r2, [r7, #6]
 8013760:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	2200      	movs	r2, #0
 8013766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	2200      	movs	r2, #0
 801376c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801376e:	68fb      	ldr	r3, [r7, #12]
 8013770:	2200      	movs	r2, #0
 8013772:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	2200      	movs	r2, #0
 8013778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	2200      	movs	r2, #0
 801377e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	689b      	ldr	r3, [r3, #8]
 8013784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013788:	d10f      	bne.n	80137aa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013798:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	681a      	ldr	r2, [r3, #0]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80137a8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80137b4:	2b40      	cmp	r3, #64	; 0x40
 80137b6:	d007      	beq.n	80137c8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	681b      	ldr	r3, [r3, #0]
 80137bc:	681a      	ldr	r2, [r3, #0]
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	681b      	ldr	r3, [r3, #0]
 80137c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80137c6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	68db      	ldr	r3, [r3, #12]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d162      	bne.n	8013896 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80137d0:	e02e      	b.n	8013830 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	689b      	ldr	r3, [r3, #8]
 80137d8:	f003 0301 	and.w	r3, r3, #1
 80137dc:	2b01      	cmp	r3, #1
 80137de:	d115      	bne.n	801380c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80137e0:	68fb      	ldr	r3, [r7, #12]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	f103 020c 	add.w	r2, r3, #12
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137ec:	7812      	ldrb	r2, [r2, #0]
 80137ee:	b2d2      	uxtb	r2, r2
 80137f0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137f6:	1c5a      	adds	r2, r3, #1
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013800:	b29b      	uxth	r3, r3
 8013802:	3b01      	subs	r3, #1
 8013804:	b29a      	uxth	r2, r3
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	87da      	strh	r2, [r3, #62]	; 0x3e
 801380a:	e011      	b.n	8013830 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801380c:	f7fc fe62 	bl	80104d4 <HAL_GetTick>
 8013810:	4602      	mov	r2, r0
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	1ad3      	subs	r3, r2, r3
 8013816:	683a      	ldr	r2, [r7, #0]
 8013818:	429a      	cmp	r2, r3
 801381a:	d803      	bhi.n	8013824 <HAL_SPI_Receive+0x166>
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013822:	d102      	bne.n	801382a <HAL_SPI_Receive+0x16c>
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d102      	bne.n	8013830 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 801382a:	2303      	movs	r3, #3
 801382c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801382e:	e04a      	b.n	80138c6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013834:	b29b      	uxth	r3, r3
 8013836:	2b00      	cmp	r3, #0
 8013838:	d1cb      	bne.n	80137d2 <HAL_SPI_Receive+0x114>
 801383a:	e031      	b.n	80138a0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	689b      	ldr	r3, [r3, #8]
 8013842:	f003 0301 	and.w	r3, r3, #1
 8013846:	2b01      	cmp	r3, #1
 8013848:	d113      	bne.n	8013872 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	68da      	ldr	r2, [r3, #12]
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013854:	b292      	uxth	r2, r2
 8013856:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801385c:	1c9a      	adds	r2, r3, #2
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013866:	b29b      	uxth	r3, r3
 8013868:	3b01      	subs	r3, #1
 801386a:	b29a      	uxth	r2, r3
 801386c:	68fb      	ldr	r3, [r7, #12]
 801386e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8013870:	e011      	b.n	8013896 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8013872:	f7fc fe2f 	bl	80104d4 <HAL_GetTick>
 8013876:	4602      	mov	r2, r0
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	1ad3      	subs	r3, r2, r3
 801387c:	683a      	ldr	r2, [r7, #0]
 801387e:	429a      	cmp	r2, r3
 8013880:	d803      	bhi.n	801388a <HAL_SPI_Receive+0x1cc>
 8013882:	683b      	ldr	r3, [r7, #0]
 8013884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013888:	d102      	bne.n	8013890 <HAL_SPI_Receive+0x1d2>
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d102      	bne.n	8013896 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8013890:	2303      	movs	r3, #3
 8013892:	75fb      	strb	r3, [r7, #23]
          goto error;
 8013894:	e017      	b.n	80138c6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801389a:	b29b      	uxth	r3, r3
 801389c:	2b00      	cmp	r3, #0
 801389e:	d1cd      	bne.n	801383c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80138a0:	693a      	ldr	r2, [r7, #16]
 80138a2:	6839      	ldr	r1, [r7, #0]
 80138a4:	68f8      	ldr	r0, [r7, #12]
 80138a6:	f000 fa45 	bl	8013d34 <SPI_EndRxTransaction>
 80138aa:	4603      	mov	r3, r0
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d002      	beq.n	80138b6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	2220      	movs	r2, #32
 80138b4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d002      	beq.n	80138c4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80138be:	2301      	movs	r3, #1
 80138c0:	75fb      	strb	r3, [r7, #23]
 80138c2:	e000      	b.n	80138c6 <HAL_SPI_Receive+0x208>
  }

error :
 80138c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	2201      	movs	r2, #1
 80138ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	2200      	movs	r2, #0
 80138d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80138d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80138d8:	4618      	mov	r0, r3
 80138da:	3718      	adds	r7, #24
 80138dc:	46bd      	mov	sp, r7
 80138de:	bd80      	pop	{r7, pc}

080138e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80138e0:	b580      	push	{r7, lr}
 80138e2:	b08c      	sub	sp, #48	; 0x30
 80138e4:	af00      	add	r7, sp, #0
 80138e6:	60f8      	str	r0, [r7, #12]
 80138e8:	60b9      	str	r1, [r7, #8]
 80138ea:	607a      	str	r2, [r7, #4]
 80138ec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80138ee:	2301      	movs	r3, #1
 80138f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80138f2:	2300      	movs	r3, #0
 80138f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80138fe:	2b01      	cmp	r3, #1
 8013900:	d101      	bne.n	8013906 <HAL_SPI_TransmitReceive+0x26>
 8013902:	2302      	movs	r3, #2
 8013904:	e18a      	b.n	8013c1c <HAL_SPI_TransmitReceive+0x33c>
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	2201      	movs	r2, #1
 801390a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801390e:	f7fc fde1 	bl	80104d4 <HAL_GetTick>
 8013912:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	685b      	ldr	r3, [r3, #4]
 8013922:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8013924:	887b      	ldrh	r3, [r7, #2]
 8013926:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8013928:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801392c:	2b01      	cmp	r3, #1
 801392e:	d00f      	beq.n	8013950 <HAL_SPI_TransmitReceive+0x70>
 8013930:	69fb      	ldr	r3, [r7, #28]
 8013932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013936:	d107      	bne.n	8013948 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	689b      	ldr	r3, [r3, #8]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d103      	bne.n	8013948 <HAL_SPI_TransmitReceive+0x68>
 8013940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013944:	2b04      	cmp	r3, #4
 8013946:	d003      	beq.n	8013950 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8013948:	2302      	movs	r3, #2
 801394a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801394e:	e15b      	b.n	8013c08 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8013950:	68bb      	ldr	r3, [r7, #8]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d005      	beq.n	8013962 <HAL_SPI_TransmitReceive+0x82>
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	2b00      	cmp	r3, #0
 801395a:	d002      	beq.n	8013962 <HAL_SPI_TransmitReceive+0x82>
 801395c:	887b      	ldrh	r3, [r7, #2]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d103      	bne.n	801396a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8013962:	2301      	movs	r3, #1
 8013964:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8013968:	e14e      	b.n	8013c08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8013970:	b2db      	uxtb	r3, r3
 8013972:	2b04      	cmp	r3, #4
 8013974:	d003      	beq.n	801397e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	2205      	movs	r2, #5
 801397a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2200      	movs	r2, #0
 8013982:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	687a      	ldr	r2, [r7, #4]
 8013988:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	887a      	ldrh	r2, [r7, #2]
 801398e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	887a      	ldrh	r2, [r7, #2]
 8013994:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	68ba      	ldr	r2, [r7, #8]
 801399a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	887a      	ldrh	r2, [r7, #2]
 80139a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	887a      	ldrh	r2, [r7, #2]
 80139a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	2200      	movs	r2, #0
 80139ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80139ae:	68fb      	ldr	r3, [r7, #12]
 80139b0:	2200      	movs	r2, #0
 80139b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80139b4:	68fb      	ldr	r3, [r7, #12]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	681b      	ldr	r3, [r3, #0]
 80139ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139be:	2b40      	cmp	r3, #64	; 0x40
 80139c0:	d007      	beq.n	80139d2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	681a      	ldr	r2, [r3, #0]
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	681b      	ldr	r3, [r3, #0]
 80139cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80139d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80139d2:	68fb      	ldr	r3, [r7, #12]
 80139d4:	68db      	ldr	r3, [r3, #12]
 80139d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80139da:	d178      	bne.n	8013ace <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	685b      	ldr	r3, [r3, #4]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d002      	beq.n	80139ea <HAL_SPI_TransmitReceive+0x10a>
 80139e4:	8b7b      	ldrh	r3, [r7, #26]
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d166      	bne.n	8013ab8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139ee:	881a      	ldrh	r2, [r3, #0]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80139f6:	68fb      	ldr	r3, [r7, #12]
 80139f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139fa:	1c9a      	adds	r2, r3, #2
 80139fc:	68fb      	ldr	r3, [r7, #12]
 80139fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	3b01      	subs	r3, #1
 8013a08:	b29a      	uxth	r2, r3
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013a0e:	e053      	b.n	8013ab8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	689b      	ldr	r3, [r3, #8]
 8013a16:	f003 0302 	and.w	r3, r3, #2
 8013a1a:	2b02      	cmp	r3, #2
 8013a1c:	d11b      	bne.n	8013a56 <HAL_SPI_TransmitReceive+0x176>
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a22:	b29b      	uxth	r3, r3
 8013a24:	2b00      	cmp	r3, #0
 8013a26:	d016      	beq.n	8013a56 <HAL_SPI_TransmitReceive+0x176>
 8013a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a2a:	2b01      	cmp	r3, #1
 8013a2c:	d113      	bne.n	8013a56 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8013a2e:	68fb      	ldr	r3, [r7, #12]
 8013a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a32:	881a      	ldrh	r2, [r3, #0]
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a3e:	1c9a      	adds	r2, r3, #2
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	3b01      	subs	r3, #1
 8013a4c:	b29a      	uxth	r2, r3
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013a52:	2300      	movs	r3, #0
 8013a54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013a56:	68fb      	ldr	r3, [r7, #12]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	689b      	ldr	r3, [r3, #8]
 8013a5c:	f003 0301 	and.w	r3, r3, #1
 8013a60:	2b01      	cmp	r3, #1
 8013a62:	d119      	bne.n	8013a98 <HAL_SPI_TransmitReceive+0x1b8>
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a68:	b29b      	uxth	r3, r3
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d014      	beq.n	8013a98 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	68da      	ldr	r2, [r3, #12]
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a78:	b292      	uxth	r2, r2
 8013a7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a80:	1c9a      	adds	r2, r3, #2
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	3b01      	subs	r3, #1
 8013a8e:	b29a      	uxth	r2, r3
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013a94:	2301      	movs	r3, #1
 8013a96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8013a98:	f7fc fd1c 	bl	80104d4 <HAL_GetTick>
 8013a9c:	4602      	mov	r2, r0
 8013a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa0:	1ad3      	subs	r3, r2, r3
 8013aa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013aa4:	429a      	cmp	r2, r3
 8013aa6:	d807      	bhi.n	8013ab8 <HAL_SPI_TransmitReceive+0x1d8>
 8013aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013aae:	d003      	beq.n	8013ab8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8013ab0:	2303      	movs	r3, #3
 8013ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013ab6:	e0a7      	b.n	8013c08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013abc:	b29b      	uxth	r3, r3
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d1a6      	bne.n	8013a10 <HAL_SPI_TransmitReceive+0x130>
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013ac6:	b29b      	uxth	r3, r3
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d1a1      	bne.n	8013a10 <HAL_SPI_TransmitReceive+0x130>
 8013acc:	e07c      	b.n	8013bc8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	685b      	ldr	r3, [r3, #4]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d002      	beq.n	8013adc <HAL_SPI_TransmitReceive+0x1fc>
 8013ad6:	8b7b      	ldrh	r3, [r7, #26]
 8013ad8:	2b01      	cmp	r3, #1
 8013ada:	d16b      	bne.n	8013bb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ae0:	68fb      	ldr	r3, [r7, #12]
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	330c      	adds	r3, #12
 8013ae6:	7812      	ldrb	r2, [r2, #0]
 8013ae8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013aee:	1c5a      	adds	r2, r3, #1
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	3b01      	subs	r3, #1
 8013afc:	b29a      	uxth	r2, r3
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013b02:	e057      	b.n	8013bb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	689b      	ldr	r3, [r3, #8]
 8013b0a:	f003 0302 	and.w	r3, r3, #2
 8013b0e:	2b02      	cmp	r3, #2
 8013b10:	d11c      	bne.n	8013b4c <HAL_SPI_TransmitReceive+0x26c>
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b16:	b29b      	uxth	r3, r3
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	d017      	beq.n	8013b4c <HAL_SPI_TransmitReceive+0x26c>
 8013b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b1e:	2b01      	cmp	r3, #1
 8013b20:	d114      	bne.n	8013b4c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	330c      	adds	r3, #12
 8013b2c:	7812      	ldrb	r2, [r2, #0]
 8013b2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b34:	1c5a      	adds	r2, r3, #1
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013b3e:	b29b      	uxth	r3, r3
 8013b40:	3b01      	subs	r3, #1
 8013b42:	b29a      	uxth	r2, r3
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8013b48:	2300      	movs	r3, #0
 8013b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8013b4c:	68fb      	ldr	r3, [r7, #12]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	689b      	ldr	r3, [r3, #8]
 8013b52:	f003 0301 	and.w	r3, r3, #1
 8013b56:	2b01      	cmp	r3, #1
 8013b58:	d119      	bne.n	8013b8e <HAL_SPI_TransmitReceive+0x2ae>
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b5e:	b29b      	uxth	r3, r3
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d014      	beq.n	8013b8e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	68da      	ldr	r2, [r3, #12]
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b6e:	b2d2      	uxtb	r2, r2
 8013b70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b76:	1c5a      	adds	r2, r3, #1
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013b80:	b29b      	uxth	r3, r3
 8013b82:	3b01      	subs	r3, #1
 8013b84:	b29a      	uxth	r2, r3
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8013b8e:	f7fc fca1 	bl	80104d4 <HAL_GetTick>
 8013b92:	4602      	mov	r2, r0
 8013b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b96:	1ad3      	subs	r3, r2, r3
 8013b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b9a:	429a      	cmp	r2, r3
 8013b9c:	d803      	bhi.n	8013ba6 <HAL_SPI_TransmitReceive+0x2c6>
 8013b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ba4:	d102      	bne.n	8013bac <HAL_SPI_TransmitReceive+0x2cc>
 8013ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d103      	bne.n	8013bb4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8013bac:	2303      	movs	r3, #3
 8013bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8013bb2:	e029      	b.n	8013c08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8013bb8:	b29b      	uxth	r3, r3
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d1a2      	bne.n	8013b04 <HAL_SPI_TransmitReceive+0x224>
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8013bc2:	b29b      	uxth	r3, r3
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d19d      	bne.n	8013b04 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8013bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	f000 f917 	bl	8013e00 <SPI_EndRxTxTransaction>
 8013bd2:	4603      	mov	r3, r0
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d006      	beq.n	8013be6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8013bd8:	2301      	movs	r3, #1
 8013bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	2220      	movs	r2, #32
 8013be2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8013be4:	e010      	b.n	8013c08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	689b      	ldr	r3, [r3, #8]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d10b      	bne.n	8013c06 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013bee:	2300      	movs	r3, #0
 8013bf0:	617b      	str	r3, [r7, #20]
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	68db      	ldr	r3, [r3, #12]
 8013bf8:	617b      	str	r3, [r7, #20]
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	689b      	ldr	r3, [r3, #8]
 8013c00:	617b      	str	r3, [r7, #20]
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	e000      	b.n	8013c08 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8013c06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	2201      	movs	r2, #1
 8013c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	2200      	movs	r2, #0
 8013c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8013c18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3730      	adds	r7, #48	; 0x30
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}

08013c24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b088      	sub	sp, #32
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	60f8      	str	r0, [r7, #12]
 8013c2c:	60b9      	str	r1, [r7, #8]
 8013c2e:	603b      	str	r3, [r7, #0]
 8013c30:	4613      	mov	r3, r2
 8013c32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8013c34:	f7fc fc4e 	bl	80104d4 <HAL_GetTick>
 8013c38:	4602      	mov	r2, r0
 8013c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c3c:	1a9b      	subs	r3, r3, r2
 8013c3e:	683a      	ldr	r2, [r7, #0]
 8013c40:	4413      	add	r3, r2
 8013c42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8013c44:	f7fc fc46 	bl	80104d4 <HAL_GetTick>
 8013c48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8013c4a:	4b39      	ldr	r3, [pc, #228]	; (8013d30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	015b      	lsls	r3, r3, #5
 8013c50:	0d1b      	lsrs	r3, r3, #20
 8013c52:	69fa      	ldr	r2, [r7, #28]
 8013c54:	fb02 f303 	mul.w	r3, r2, r3
 8013c58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013c5a:	e054      	b.n	8013d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8013c5c:	683b      	ldr	r3, [r7, #0]
 8013c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c62:	d050      	beq.n	8013d06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8013c64:	f7fc fc36 	bl	80104d4 <HAL_GetTick>
 8013c68:	4602      	mov	r2, r0
 8013c6a:	69bb      	ldr	r3, [r7, #24]
 8013c6c:	1ad3      	subs	r3, r2, r3
 8013c6e:	69fa      	ldr	r2, [r7, #28]
 8013c70:	429a      	cmp	r2, r3
 8013c72:	d902      	bls.n	8013c7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8013c74:	69fb      	ldr	r3, [r7, #28]
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d13d      	bne.n	8013cf6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	685a      	ldr	r2, [r3, #4]
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8013c88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013c92:	d111      	bne.n	8013cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	689b      	ldr	r3, [r3, #8]
 8013c98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013c9c:	d004      	beq.n	8013ca8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	689b      	ldr	r3, [r3, #8]
 8013ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013ca6:	d107      	bne.n	8013cb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	681a      	ldr	r2, [r3, #0]
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013cb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013cbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013cc0:	d10f      	bne.n	8013ce2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	681a      	ldr	r2, [r3, #0]
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013cd0:	601a      	str	r2, [r3, #0]
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	681a      	ldr	r2, [r3, #0]
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013ce0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2201      	movs	r2, #1
 8013ce6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	2200      	movs	r2, #0
 8013cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8013cf2:	2303      	movs	r3, #3
 8013cf4:	e017      	b.n	8013d26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8013cf6:	697b      	ldr	r3, [r7, #20]
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d101      	bne.n	8013d00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	3b01      	subs	r3, #1
 8013d04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	689a      	ldr	r2, [r3, #8]
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	4013      	ands	r3, r2
 8013d10:	68ba      	ldr	r2, [r7, #8]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	bf0c      	ite	eq
 8013d16:	2301      	moveq	r3, #1
 8013d18:	2300      	movne	r3, #0
 8013d1a:	b2db      	uxtb	r3, r3
 8013d1c:	461a      	mov	r2, r3
 8013d1e:	79fb      	ldrb	r3, [r7, #7]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d19b      	bne.n	8013c5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8013d24:	2300      	movs	r3, #0
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3720      	adds	r7, #32
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
 8013d2e:	bf00      	nop
 8013d30:	2000001c 	.word	0x2000001c

08013d34 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b086      	sub	sp, #24
 8013d38:	af02      	add	r7, sp, #8
 8013d3a:	60f8      	str	r0, [r7, #12]
 8013d3c:	60b9      	str	r1, [r7, #8]
 8013d3e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013d40:	68fb      	ldr	r3, [r7, #12]
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013d48:	d111      	bne.n	8013d6e <SPI_EndRxTransaction+0x3a>
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	689b      	ldr	r3, [r3, #8]
 8013d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013d52:	d004      	beq.n	8013d5e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	689b      	ldr	r3, [r3, #8]
 8013d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d5c:	d107      	bne.n	8013d6e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	681a      	ldr	r2, [r3, #0]
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013d6c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	685b      	ldr	r3, [r3, #4]
 8013d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013d76:	d12a      	bne.n	8013dce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	689b      	ldr	r3, [r3, #8]
 8013d7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013d80:	d012      	beq.n	8013da8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	9300      	str	r3, [sp, #0]
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	2180      	movs	r1, #128	; 0x80
 8013d8c:	68f8      	ldr	r0, [r7, #12]
 8013d8e:	f7ff ff49 	bl	8013c24 <SPI_WaitFlagStateUntilTimeout>
 8013d92:	4603      	mov	r3, r0
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d02d      	beq.n	8013df4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d9c:	f043 0220 	orr.w	r2, r3, #32
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013da4:	2303      	movs	r3, #3
 8013da6:	e026      	b.n	8013df6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013da8:	687b      	ldr	r3, [r7, #4]
 8013daa:	9300      	str	r3, [sp, #0]
 8013dac:	68bb      	ldr	r3, [r7, #8]
 8013dae:	2200      	movs	r2, #0
 8013db0:	2101      	movs	r1, #1
 8013db2:	68f8      	ldr	r0, [r7, #12]
 8013db4:	f7ff ff36 	bl	8013c24 <SPI_WaitFlagStateUntilTimeout>
 8013db8:	4603      	mov	r3, r0
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d01a      	beq.n	8013df4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013dc2:	f043 0220 	orr.w	r2, r3, #32
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8013dca:	2303      	movs	r3, #3
 8013dcc:	e013      	b.n	8013df6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	9300      	str	r3, [sp, #0]
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	2101      	movs	r1, #1
 8013dd8:	68f8      	ldr	r0, [r7, #12]
 8013dda:	f7ff ff23 	bl	8013c24 <SPI_WaitFlagStateUntilTimeout>
 8013dde:	4603      	mov	r3, r0
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d007      	beq.n	8013df4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013de4:	68fb      	ldr	r3, [r7, #12]
 8013de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013de8:	f043 0220 	orr.w	r2, r3, #32
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013df0:	2303      	movs	r3, #3
 8013df2:	e000      	b.n	8013df6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8013df4:	2300      	movs	r3, #0
}
 8013df6:	4618      	mov	r0, r3
 8013df8:	3710      	adds	r7, #16
 8013dfa:	46bd      	mov	sp, r7
 8013dfc:	bd80      	pop	{r7, pc}
	...

08013e00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b088      	sub	sp, #32
 8013e04:	af02      	add	r7, sp, #8
 8013e06:	60f8      	str	r0, [r7, #12]
 8013e08:	60b9      	str	r1, [r7, #8]
 8013e0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8013e0c:	4b1b      	ldr	r3, [pc, #108]	; (8013e7c <SPI_EndRxTxTransaction+0x7c>)
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4a1b      	ldr	r2, [pc, #108]	; (8013e80 <SPI_EndRxTxTransaction+0x80>)
 8013e12:	fba2 2303 	umull	r2, r3, r2, r3
 8013e16:	0d5b      	lsrs	r3, r3, #21
 8013e18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8013e1c:	fb02 f303 	mul.w	r3, r2, r3
 8013e20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	685b      	ldr	r3, [r3, #4]
 8013e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8013e2a:	d112      	bne.n	8013e52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	9300      	str	r3, [sp, #0]
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	2200      	movs	r2, #0
 8013e34:	2180      	movs	r1, #128	; 0x80
 8013e36:	68f8      	ldr	r0, [r7, #12]
 8013e38:	f7ff fef4 	bl	8013c24 <SPI_WaitFlagStateUntilTimeout>
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d016      	beq.n	8013e70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8013e42:	68fb      	ldr	r3, [r7, #12]
 8013e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e46:	f043 0220 	orr.w	r2, r3, #32
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8013e4e:	2303      	movs	r3, #3
 8013e50:	e00f      	b.n	8013e72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00a      	beq.n	8013e6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8013e58:	697b      	ldr	r3, [r7, #20]
 8013e5a:	3b01      	subs	r3, #1
 8013e5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8013e5e:	68fb      	ldr	r3, [r7, #12]
 8013e60:	681b      	ldr	r3, [r3, #0]
 8013e62:	689b      	ldr	r3, [r3, #8]
 8013e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e68:	2b80      	cmp	r3, #128	; 0x80
 8013e6a:	d0f2      	beq.n	8013e52 <SPI_EndRxTxTransaction+0x52>
 8013e6c:	e000      	b.n	8013e70 <SPI_EndRxTxTransaction+0x70>
        break;
 8013e6e:	bf00      	nop
  }

  return HAL_OK;
 8013e70:	2300      	movs	r3, #0
}
 8013e72:	4618      	mov	r0, r3
 8013e74:	3718      	adds	r7, #24
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}
 8013e7a:	bf00      	nop
 8013e7c:	2000001c 	.word	0x2000001c
 8013e80:	165e9f81 	.word	0x165e9f81

08013e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013e84:	b580      	push	{r7, lr}
 8013e86:	b082      	sub	sp, #8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d101      	bne.n	8013e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013e92:	2301      	movs	r3, #1
 8013e94:	e041      	b.n	8013f1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013e9c:	b2db      	uxtb	r3, r3
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d106      	bne.n	8013eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	2200      	movs	r2, #0
 8013ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013eaa:	6878      	ldr	r0, [r7, #4]
 8013eac:	f7fc f872 	bl	800ff94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	2202      	movs	r2, #2
 8013eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	3304      	adds	r3, #4
 8013ec0:	4619      	mov	r1, r3
 8013ec2:	4610      	mov	r0, r2
 8013ec4:	f000 fc58 	bl	8014778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	2201      	movs	r2, #1
 8013ecc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	2201      	movs	r2, #1
 8013ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013ed8:	687b      	ldr	r3, [r7, #4]
 8013eda:	2201      	movs	r2, #1
 8013edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2201      	movs	r2, #1
 8013ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	2201      	movs	r2, #1
 8013eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2201      	movs	r2, #1
 8013ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2201      	movs	r2, #1
 8013efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	2201      	movs	r2, #1
 8013f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	2201      	movs	r2, #1
 8013f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2201      	movs	r2, #1
 8013f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013f18:	2300      	movs	r3, #0
}
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	3708      	adds	r7, #8
 8013f1e:	46bd      	mov	sp, r7
 8013f20:	bd80      	pop	{r7, pc}
	...

08013f24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013f24:	b480      	push	{r7}
 8013f26:	b085      	sub	sp, #20
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013f32:	b2db      	uxtb	r3, r3
 8013f34:	2b01      	cmp	r3, #1
 8013f36:	d001      	beq.n	8013f3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013f38:	2301      	movs	r3, #1
 8013f3a:	e04e      	b.n	8013fda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	2202      	movs	r2, #2
 8013f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	68da      	ldr	r2, [r3, #12]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	f042 0201 	orr.w	r2, r2, #1
 8013f52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	4a23      	ldr	r2, [pc, #140]	; (8013fe8 <HAL_TIM_Base_Start_IT+0xc4>)
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	d022      	beq.n	8013fa4 <HAL_TIM_Base_Start_IT+0x80>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013f66:	d01d      	beq.n	8013fa4 <HAL_TIM_Base_Start_IT+0x80>
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	4a1f      	ldr	r2, [pc, #124]	; (8013fec <HAL_TIM_Base_Start_IT+0xc8>)
 8013f6e:	4293      	cmp	r3, r2
 8013f70:	d018      	beq.n	8013fa4 <HAL_TIM_Base_Start_IT+0x80>
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	681b      	ldr	r3, [r3, #0]
 8013f76:	4a1e      	ldr	r2, [pc, #120]	; (8013ff0 <HAL_TIM_Base_Start_IT+0xcc>)
 8013f78:	4293      	cmp	r3, r2
 8013f7a:	d013      	beq.n	8013fa4 <HAL_TIM_Base_Start_IT+0x80>
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	4a1c      	ldr	r2, [pc, #112]	; (8013ff4 <HAL_TIM_Base_Start_IT+0xd0>)
 8013f82:	4293      	cmp	r3, r2
 8013f84:	d00e      	beq.n	8013fa4 <HAL_TIM_Base_Start_IT+0x80>
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	4a1b      	ldr	r2, [pc, #108]	; (8013ff8 <HAL_TIM_Base_Start_IT+0xd4>)
 8013f8c:	4293      	cmp	r3, r2
 8013f8e:	d009      	beq.n	8013fa4 <HAL_TIM_Base_Start_IT+0x80>
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	4a19      	ldr	r2, [pc, #100]	; (8013ffc <HAL_TIM_Base_Start_IT+0xd8>)
 8013f96:	4293      	cmp	r3, r2
 8013f98:	d004      	beq.n	8013fa4 <HAL_TIM_Base_Start_IT+0x80>
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	681b      	ldr	r3, [r3, #0]
 8013f9e:	4a18      	ldr	r2, [pc, #96]	; (8014000 <HAL_TIM_Base_Start_IT+0xdc>)
 8013fa0:	4293      	cmp	r3, r2
 8013fa2:	d111      	bne.n	8013fc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	689b      	ldr	r3, [r3, #8]
 8013faa:	f003 0307 	and.w	r3, r3, #7
 8013fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013fb0:	68fb      	ldr	r3, [r7, #12]
 8013fb2:	2b06      	cmp	r3, #6
 8013fb4:	d010      	beq.n	8013fd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	681a      	ldr	r2, [r3, #0]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	f042 0201 	orr.w	r2, r2, #1
 8013fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013fc6:	e007      	b.n	8013fd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	681a      	ldr	r2, [r3, #0]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f042 0201 	orr.w	r2, r2, #1
 8013fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8013fd8:	2300      	movs	r3, #0
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3714      	adds	r7, #20
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fe4:	4770      	bx	lr
 8013fe6:	bf00      	nop
 8013fe8:	40010000 	.word	0x40010000
 8013fec:	40000400 	.word	0x40000400
 8013ff0:	40000800 	.word	0x40000800
 8013ff4:	40000c00 	.word	0x40000c00
 8013ff8:	40010400 	.word	0x40010400
 8013ffc:	40014000 	.word	0x40014000
 8014000:	40001800 	.word	0x40001800

08014004 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b082      	sub	sp, #8
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d101      	bne.n	8014016 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8014012:	2301      	movs	r3, #1
 8014014:	e041      	b.n	801409a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801401c:	b2db      	uxtb	r3, r3
 801401e:	2b00      	cmp	r3, #0
 8014020:	d106      	bne.n	8014030 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	2200      	movs	r2, #0
 8014026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801402a:	6878      	ldr	r0, [r7, #4]
 801402c:	f000 f839 	bl	80140a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2202      	movs	r2, #2
 8014034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	3304      	adds	r3, #4
 8014040:	4619      	mov	r1, r3
 8014042:	4610      	mov	r0, r2
 8014044:	f000 fb98 	bl	8014778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	2201      	movs	r2, #1
 801404c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	2201      	movs	r2, #1
 8014054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	2201      	movs	r2, #1
 801405c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	2201      	movs	r2, #1
 8014064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2201      	movs	r2, #1
 801406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	2201      	movs	r2, #1
 8014074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	2201      	movs	r2, #1
 801407c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2201      	movs	r2, #1
 8014084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	2201      	movs	r2, #1
 801408c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2201      	movs	r2, #1
 8014094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014098:	2300      	movs	r3, #0
}
 801409a:	4618      	mov	r0, r3
 801409c:	3708      	adds	r7, #8
 801409e:	46bd      	mov	sp, r7
 80140a0:	bd80      	pop	{r7, pc}

080140a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80140a2:	b480      	push	{r7}
 80140a4:	b083      	sub	sp, #12
 80140a6:	af00      	add	r7, sp, #0
 80140a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80140aa:	bf00      	nop
 80140ac:	370c      	adds	r7, #12
 80140ae:	46bd      	mov	sp, r7
 80140b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b4:	4770      	bx	lr

080140b6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80140b6:	b580      	push	{r7, lr}
 80140b8:	b086      	sub	sp, #24
 80140ba:	af00      	add	r7, sp, #0
 80140bc:	6078      	str	r0, [r7, #4]
 80140be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d101      	bne.n	80140ca <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80140c6:	2301      	movs	r3, #1
 80140c8:	e097      	b.n	80141fa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80140d0:	b2db      	uxtb	r3, r3
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d106      	bne.n	80140e4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	2200      	movs	r2, #0
 80140da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	f7fb ffde 	bl	80100a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	2202      	movs	r2, #2
 80140e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	689b      	ldr	r3, [r3, #8]
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	6812      	ldr	r2, [r2, #0]
 80140f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80140fa:	f023 0307 	bic.w	r3, r3, #7
 80140fe:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681a      	ldr	r2, [r3, #0]
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	3304      	adds	r3, #4
 8014108:	4619      	mov	r1, r3
 801410a:	4610      	mov	r0, r2
 801410c:	f000 fb34 	bl	8014778 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014110:	687b      	ldr	r3, [r7, #4]
 8014112:	681b      	ldr	r3, [r3, #0]
 8014114:	689b      	ldr	r3, [r3, #8]
 8014116:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	699b      	ldr	r3, [r3, #24]
 801411e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	681b      	ldr	r3, [r3, #0]
 8014124:	6a1b      	ldr	r3, [r3, #32]
 8014126:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8014128:	683b      	ldr	r3, [r7, #0]
 801412a:	681b      	ldr	r3, [r3, #0]
 801412c:	697a      	ldr	r2, [r7, #20]
 801412e:	4313      	orrs	r3, r2
 8014130:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8014132:	693b      	ldr	r3, [r7, #16]
 8014134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014138:	f023 0303 	bic.w	r3, r3, #3
 801413c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	689a      	ldr	r2, [r3, #8]
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	699b      	ldr	r3, [r3, #24]
 8014146:	021b      	lsls	r3, r3, #8
 8014148:	4313      	orrs	r3, r2
 801414a:	693a      	ldr	r2, [r7, #16]
 801414c:	4313      	orrs	r3, r2
 801414e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8014150:	693b      	ldr	r3, [r7, #16]
 8014152:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8014156:	f023 030c 	bic.w	r3, r3, #12
 801415a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 801415c:	693b      	ldr	r3, [r7, #16]
 801415e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	68da      	ldr	r2, [r3, #12]
 801416c:	683b      	ldr	r3, [r7, #0]
 801416e:	69db      	ldr	r3, [r3, #28]
 8014170:	021b      	lsls	r3, r3, #8
 8014172:	4313      	orrs	r3, r2
 8014174:	693a      	ldr	r2, [r7, #16]
 8014176:	4313      	orrs	r3, r2
 8014178:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	691b      	ldr	r3, [r3, #16]
 801417e:	011a      	lsls	r2, r3, #4
 8014180:	683b      	ldr	r3, [r7, #0]
 8014182:	6a1b      	ldr	r3, [r3, #32]
 8014184:	031b      	lsls	r3, r3, #12
 8014186:	4313      	orrs	r3, r2
 8014188:	693a      	ldr	r2, [r7, #16]
 801418a:	4313      	orrs	r3, r2
 801418c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8014194:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 801419c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 801419e:	683b      	ldr	r3, [r7, #0]
 80141a0:	685a      	ldr	r2, [r3, #4]
 80141a2:	683b      	ldr	r3, [r7, #0]
 80141a4:	695b      	ldr	r3, [r3, #20]
 80141a6:	011b      	lsls	r3, r3, #4
 80141a8:	4313      	orrs	r3, r2
 80141aa:	68fa      	ldr	r2, [r7, #12]
 80141ac:	4313      	orrs	r3, r2
 80141ae:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	697a      	ldr	r2, [r7, #20]
 80141b6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	693a      	ldr	r2, [r7, #16]
 80141be:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	68fa      	ldr	r2, [r7, #12]
 80141c6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2201      	movs	r2, #1
 80141cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	2201      	movs	r2, #1
 80141d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2201      	movs	r2, #1
 80141dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	2201      	movs	r2, #1
 80141e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2201      	movs	r2, #1
 80141ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	2201      	movs	r2, #1
 80141f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80141f8:	2300      	movs	r3, #0
}
 80141fa:	4618      	mov	r0, r3
 80141fc:	3718      	adds	r7, #24
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}

08014202 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8014202:	b580      	push	{r7, lr}
 8014204:	b082      	sub	sp, #8
 8014206:	af00      	add	r7, sp, #0
 8014208:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801420a:	687b      	ldr	r3, [r7, #4]
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	691b      	ldr	r3, [r3, #16]
 8014210:	f003 0302 	and.w	r3, r3, #2
 8014214:	2b02      	cmp	r3, #2
 8014216:	d122      	bne.n	801425e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	68db      	ldr	r3, [r3, #12]
 801421e:	f003 0302 	and.w	r3, r3, #2
 8014222:	2b02      	cmp	r3, #2
 8014224:	d11b      	bne.n	801425e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	f06f 0202 	mvn.w	r2, #2
 801422e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	2201      	movs	r2, #1
 8014234:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	699b      	ldr	r3, [r3, #24]
 801423c:	f003 0303 	and.w	r3, r3, #3
 8014240:	2b00      	cmp	r3, #0
 8014242:	d003      	beq.n	801424c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8014244:	6878      	ldr	r0, [r7, #4]
 8014246:	f000 fa78 	bl	801473a <HAL_TIM_IC_CaptureCallback>
 801424a:	e005      	b.n	8014258 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801424c:	6878      	ldr	r0, [r7, #4]
 801424e:	f000 fa6a 	bl	8014726 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014252:	6878      	ldr	r0, [r7, #4]
 8014254:	f000 fa7b 	bl	801474e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2200      	movs	r2, #0
 801425c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	691b      	ldr	r3, [r3, #16]
 8014264:	f003 0304 	and.w	r3, r3, #4
 8014268:	2b04      	cmp	r3, #4
 801426a:	d122      	bne.n	80142b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	68db      	ldr	r3, [r3, #12]
 8014272:	f003 0304 	and.w	r3, r3, #4
 8014276:	2b04      	cmp	r3, #4
 8014278:	d11b      	bne.n	80142b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	f06f 0204 	mvn.w	r2, #4
 8014282:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2202      	movs	r2, #2
 8014288:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	699b      	ldr	r3, [r3, #24]
 8014290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014294:	2b00      	cmp	r3, #0
 8014296:	d003      	beq.n	80142a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f000 fa4e 	bl	801473a <HAL_TIM_IC_CaptureCallback>
 801429e:	e005      	b.n	80142ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80142a0:	6878      	ldr	r0, [r7, #4]
 80142a2:	f000 fa40 	bl	8014726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80142a6:	6878      	ldr	r0, [r7, #4]
 80142a8:	f000 fa51 	bl	801474e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	2200      	movs	r2, #0
 80142b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	691b      	ldr	r3, [r3, #16]
 80142b8:	f003 0308 	and.w	r3, r3, #8
 80142bc:	2b08      	cmp	r3, #8
 80142be:	d122      	bne.n	8014306 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	68db      	ldr	r3, [r3, #12]
 80142c6:	f003 0308 	and.w	r3, r3, #8
 80142ca:	2b08      	cmp	r3, #8
 80142cc:	d11b      	bne.n	8014306 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	681b      	ldr	r3, [r3, #0]
 80142d2:	f06f 0208 	mvn.w	r2, #8
 80142d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2204      	movs	r2, #4
 80142dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	69db      	ldr	r3, [r3, #28]
 80142e4:	f003 0303 	and.w	r3, r3, #3
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d003      	beq.n	80142f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80142ec:	6878      	ldr	r0, [r7, #4]
 80142ee:	f000 fa24 	bl	801473a <HAL_TIM_IC_CaptureCallback>
 80142f2:	e005      	b.n	8014300 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f000 fa16 	bl	8014726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80142fa:	6878      	ldr	r0, [r7, #4]
 80142fc:	f000 fa27 	bl	801474e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	2200      	movs	r2, #0
 8014304:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	691b      	ldr	r3, [r3, #16]
 801430c:	f003 0310 	and.w	r3, r3, #16
 8014310:	2b10      	cmp	r3, #16
 8014312:	d122      	bne.n	801435a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	f003 0310 	and.w	r3, r3, #16
 801431e:	2b10      	cmp	r3, #16
 8014320:	d11b      	bne.n	801435a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	f06f 0210 	mvn.w	r2, #16
 801432a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	2208      	movs	r2, #8
 8014330:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	69db      	ldr	r3, [r3, #28]
 8014338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801433c:	2b00      	cmp	r3, #0
 801433e:	d003      	beq.n	8014348 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014340:	6878      	ldr	r0, [r7, #4]
 8014342:	f000 f9fa 	bl	801473a <HAL_TIM_IC_CaptureCallback>
 8014346:	e005      	b.n	8014354 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014348:	6878      	ldr	r0, [r7, #4]
 801434a:	f000 f9ec 	bl	8014726 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801434e:	6878      	ldr	r0, [r7, #4]
 8014350:	f000 f9fd 	bl	801474e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2200      	movs	r2, #0
 8014358:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	691b      	ldr	r3, [r3, #16]
 8014360:	f003 0301 	and.w	r3, r3, #1
 8014364:	2b01      	cmp	r3, #1
 8014366:	d10e      	bne.n	8014386 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	68db      	ldr	r3, [r3, #12]
 801436e:	f003 0301 	and.w	r3, r3, #1
 8014372:	2b01      	cmp	r3, #1
 8014374:	d107      	bne.n	8014386 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	f06f 0201 	mvn.w	r2, #1
 801437e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f7fb f941 	bl	800f608 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	691b      	ldr	r3, [r3, #16]
 801438c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014390:	2b80      	cmp	r3, #128	; 0x80
 8014392:	d10e      	bne.n	80143b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	68db      	ldr	r3, [r3, #12]
 801439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801439e:	2b80      	cmp	r3, #128	; 0x80
 80143a0:	d107      	bne.n	80143b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	681b      	ldr	r3, [r3, #0]
 80143a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80143aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80143ac:	6878      	ldr	r0, [r7, #4]
 80143ae:	f000 fd53 	bl	8014e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	691b      	ldr	r3, [r3, #16]
 80143b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143bc:	2b40      	cmp	r3, #64	; 0x40
 80143be:	d10e      	bne.n	80143de <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	68db      	ldr	r3, [r3, #12]
 80143c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143ca:	2b40      	cmp	r3, #64	; 0x40
 80143cc:	d107      	bne.n	80143de <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80143d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80143d8:	6878      	ldr	r0, [r7, #4]
 80143da:	f000 f9c2 	bl	8014762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	691b      	ldr	r3, [r3, #16]
 80143e4:	f003 0320 	and.w	r3, r3, #32
 80143e8:	2b20      	cmp	r3, #32
 80143ea:	d10e      	bne.n	801440a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	681b      	ldr	r3, [r3, #0]
 80143f0:	68db      	ldr	r3, [r3, #12]
 80143f2:	f003 0320 	and.w	r3, r3, #32
 80143f6:	2b20      	cmp	r3, #32
 80143f8:	d107      	bne.n	801440a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	f06f 0220 	mvn.w	r2, #32
 8014402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8014404:	6878      	ldr	r0, [r7, #4]
 8014406:	f000 fd1d 	bl	8014e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801440a:	bf00      	nop
 801440c:	3708      	adds	r7, #8
 801440e:	46bd      	mov	sp, r7
 8014410:	bd80      	pop	{r7, pc}
	...

08014414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8014414:	b580      	push	{r7, lr}
 8014416:	b086      	sub	sp, #24
 8014418:	af00      	add	r7, sp, #0
 801441a:	60f8      	str	r0, [r7, #12]
 801441c:	60b9      	str	r1, [r7, #8]
 801441e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014420:	2300      	movs	r3, #0
 8014422:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801442a:	2b01      	cmp	r3, #1
 801442c:	d101      	bne.n	8014432 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801442e:	2302      	movs	r3, #2
 8014430:	e0ae      	b.n	8014590 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	2201      	movs	r2, #1
 8014436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	2b0c      	cmp	r3, #12
 801443e:	f200 809f 	bhi.w	8014580 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8014442:	a201      	add	r2, pc, #4	; (adr r2, 8014448 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8014444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014448:	0801447d 	.word	0x0801447d
 801444c:	08014581 	.word	0x08014581
 8014450:	08014581 	.word	0x08014581
 8014454:	08014581 	.word	0x08014581
 8014458:	080144bd 	.word	0x080144bd
 801445c:	08014581 	.word	0x08014581
 8014460:	08014581 	.word	0x08014581
 8014464:	08014581 	.word	0x08014581
 8014468:	080144ff 	.word	0x080144ff
 801446c:	08014581 	.word	0x08014581
 8014470:	08014581 	.word	0x08014581
 8014474:	08014581 	.word	0x08014581
 8014478:	0801453f 	.word	0x0801453f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	68b9      	ldr	r1, [r7, #8]
 8014482:	4618      	mov	r0, r3
 8014484:	f000 fa18 	bl	80148b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014488:	68fb      	ldr	r3, [r7, #12]
 801448a:	681b      	ldr	r3, [r3, #0]
 801448c:	699a      	ldr	r2, [r3, #24]
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	f042 0208 	orr.w	r2, r2, #8
 8014496:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	681b      	ldr	r3, [r3, #0]
 801449c:	699a      	ldr	r2, [r3, #24]
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	681b      	ldr	r3, [r3, #0]
 80144a2:	f022 0204 	bic.w	r2, r2, #4
 80144a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	6999      	ldr	r1, [r3, #24]
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	691a      	ldr	r2, [r3, #16]
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	430a      	orrs	r2, r1
 80144b8:	619a      	str	r2, [r3, #24]
      break;
 80144ba:	e064      	b.n	8014586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	681b      	ldr	r3, [r3, #0]
 80144c0:	68b9      	ldr	r1, [r7, #8]
 80144c2:	4618      	mov	r0, r3
 80144c4:	f000 fa68 	bl	8014998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	699a      	ldr	r2, [r3, #24]
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80144d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	681b      	ldr	r3, [r3, #0]
 80144dc:	699a      	ldr	r2, [r3, #24]
 80144de:	68fb      	ldr	r3, [r7, #12]
 80144e0:	681b      	ldr	r3, [r3, #0]
 80144e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80144e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	6999      	ldr	r1, [r3, #24]
 80144ee:	68bb      	ldr	r3, [r7, #8]
 80144f0:	691b      	ldr	r3, [r3, #16]
 80144f2:	021a      	lsls	r2, r3, #8
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	430a      	orrs	r2, r1
 80144fa:	619a      	str	r2, [r3, #24]
      break;
 80144fc:	e043      	b.n	8014586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	68b9      	ldr	r1, [r7, #8]
 8014504:	4618      	mov	r0, r3
 8014506:	f000 fabd 	bl	8014a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	69da      	ldr	r2, [r3, #28]
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	f042 0208 	orr.w	r2, r2, #8
 8014518:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	69da      	ldr	r2, [r3, #28]
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	f022 0204 	bic.w	r2, r2, #4
 8014528:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	69d9      	ldr	r1, [r3, #28]
 8014530:	68bb      	ldr	r3, [r7, #8]
 8014532:	691a      	ldr	r2, [r3, #16]
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	430a      	orrs	r2, r1
 801453a:	61da      	str	r2, [r3, #28]
      break;
 801453c:	e023      	b.n	8014586 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	68b9      	ldr	r1, [r7, #8]
 8014544:	4618      	mov	r0, r3
 8014546:	f000 fb11 	bl	8014b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	69da      	ldr	r2, [r3, #28]
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014558:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	69da      	ldr	r2, [r3, #28]
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	69d9      	ldr	r1, [r3, #28]
 8014570:	68bb      	ldr	r3, [r7, #8]
 8014572:	691b      	ldr	r3, [r3, #16]
 8014574:	021a      	lsls	r2, r3, #8
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	430a      	orrs	r2, r1
 801457c:	61da      	str	r2, [r3, #28]
      break;
 801457e:	e002      	b.n	8014586 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8014580:	2301      	movs	r3, #1
 8014582:	75fb      	strb	r3, [r7, #23]
      break;
 8014584:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	2200      	movs	r2, #0
 801458a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801458e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014590:	4618      	mov	r0, r3
 8014592:	3718      	adds	r7, #24
 8014594:	46bd      	mov	sp, r7
 8014596:	bd80      	pop	{r7, pc}

08014598 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b084      	sub	sp, #16
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80145a2:	2300      	movs	r3, #0
 80145a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80145ac:	2b01      	cmp	r3, #1
 80145ae:	d101      	bne.n	80145b4 <HAL_TIM_ConfigClockSource+0x1c>
 80145b0:	2302      	movs	r3, #2
 80145b2:	e0b4      	b.n	801471e <HAL_TIM_ConfigClockSource+0x186>
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2201      	movs	r2, #1
 80145b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2202      	movs	r2, #2
 80145c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	689b      	ldr	r3, [r3, #8]
 80145ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80145cc:	68bb      	ldr	r3, [r7, #8]
 80145ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80145d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80145d4:	68bb      	ldr	r3, [r7, #8]
 80145d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80145da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	68ba      	ldr	r2, [r7, #8]
 80145e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80145ec:	d03e      	beq.n	801466c <HAL_TIM_ConfigClockSource+0xd4>
 80145ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80145f2:	f200 8087 	bhi.w	8014704 <HAL_TIM_ConfigClockSource+0x16c>
 80145f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80145fa:	f000 8086 	beq.w	801470a <HAL_TIM_ConfigClockSource+0x172>
 80145fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014602:	d87f      	bhi.n	8014704 <HAL_TIM_ConfigClockSource+0x16c>
 8014604:	2b70      	cmp	r3, #112	; 0x70
 8014606:	d01a      	beq.n	801463e <HAL_TIM_ConfigClockSource+0xa6>
 8014608:	2b70      	cmp	r3, #112	; 0x70
 801460a:	d87b      	bhi.n	8014704 <HAL_TIM_ConfigClockSource+0x16c>
 801460c:	2b60      	cmp	r3, #96	; 0x60
 801460e:	d050      	beq.n	80146b2 <HAL_TIM_ConfigClockSource+0x11a>
 8014610:	2b60      	cmp	r3, #96	; 0x60
 8014612:	d877      	bhi.n	8014704 <HAL_TIM_ConfigClockSource+0x16c>
 8014614:	2b50      	cmp	r3, #80	; 0x50
 8014616:	d03c      	beq.n	8014692 <HAL_TIM_ConfigClockSource+0xfa>
 8014618:	2b50      	cmp	r3, #80	; 0x50
 801461a:	d873      	bhi.n	8014704 <HAL_TIM_ConfigClockSource+0x16c>
 801461c:	2b40      	cmp	r3, #64	; 0x40
 801461e:	d058      	beq.n	80146d2 <HAL_TIM_ConfigClockSource+0x13a>
 8014620:	2b40      	cmp	r3, #64	; 0x40
 8014622:	d86f      	bhi.n	8014704 <HAL_TIM_ConfigClockSource+0x16c>
 8014624:	2b30      	cmp	r3, #48	; 0x30
 8014626:	d064      	beq.n	80146f2 <HAL_TIM_ConfigClockSource+0x15a>
 8014628:	2b30      	cmp	r3, #48	; 0x30
 801462a:	d86b      	bhi.n	8014704 <HAL_TIM_ConfigClockSource+0x16c>
 801462c:	2b20      	cmp	r3, #32
 801462e:	d060      	beq.n	80146f2 <HAL_TIM_ConfigClockSource+0x15a>
 8014630:	2b20      	cmp	r3, #32
 8014632:	d867      	bhi.n	8014704 <HAL_TIM_ConfigClockSource+0x16c>
 8014634:	2b00      	cmp	r3, #0
 8014636:	d05c      	beq.n	80146f2 <HAL_TIM_ConfigClockSource+0x15a>
 8014638:	2b10      	cmp	r3, #16
 801463a:	d05a      	beq.n	80146f2 <HAL_TIM_ConfigClockSource+0x15a>
 801463c:	e062      	b.n	8014704 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6818      	ldr	r0, [r3, #0]
 8014642:	683b      	ldr	r3, [r7, #0]
 8014644:	6899      	ldr	r1, [r3, #8]
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	685a      	ldr	r2, [r3, #4]
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	68db      	ldr	r3, [r3, #12]
 801464e:	f000 fb5d 	bl	8014d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	689b      	ldr	r3, [r3, #8]
 8014658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8014660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	68ba      	ldr	r2, [r7, #8]
 8014668:	609a      	str	r2, [r3, #8]
      break;
 801466a:	e04f      	b.n	801470c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	6818      	ldr	r0, [r3, #0]
 8014670:	683b      	ldr	r3, [r7, #0]
 8014672:	6899      	ldr	r1, [r3, #8]
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	685a      	ldr	r2, [r3, #4]
 8014678:	683b      	ldr	r3, [r7, #0]
 801467a:	68db      	ldr	r3, [r3, #12]
 801467c:	f000 fb46 	bl	8014d0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	689a      	ldr	r2, [r3, #8]
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801468e:	609a      	str	r2, [r3, #8]
      break;
 8014690:	e03c      	b.n	801470c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	6818      	ldr	r0, [r3, #0]
 8014696:	683b      	ldr	r3, [r7, #0]
 8014698:	6859      	ldr	r1, [r3, #4]
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	68db      	ldr	r3, [r3, #12]
 801469e:	461a      	mov	r2, r3
 80146a0:	f000 faba 	bl	8014c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	681b      	ldr	r3, [r3, #0]
 80146a8:	2150      	movs	r1, #80	; 0x50
 80146aa:	4618      	mov	r0, r3
 80146ac:	f000 fb13 	bl	8014cd6 <TIM_ITRx_SetConfig>
      break;
 80146b0:	e02c      	b.n	801470c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	6818      	ldr	r0, [r3, #0]
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	6859      	ldr	r1, [r3, #4]
 80146ba:	683b      	ldr	r3, [r7, #0]
 80146bc:	68db      	ldr	r3, [r3, #12]
 80146be:	461a      	mov	r2, r3
 80146c0:	f000 fad9 	bl	8014c76 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	2160      	movs	r1, #96	; 0x60
 80146ca:	4618      	mov	r0, r3
 80146cc:	f000 fb03 	bl	8014cd6 <TIM_ITRx_SetConfig>
      break;
 80146d0:	e01c      	b.n	801470c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	6818      	ldr	r0, [r3, #0]
 80146d6:	683b      	ldr	r3, [r7, #0]
 80146d8:	6859      	ldr	r1, [r3, #4]
 80146da:	683b      	ldr	r3, [r7, #0]
 80146dc:	68db      	ldr	r3, [r3, #12]
 80146de:	461a      	mov	r2, r3
 80146e0:	f000 fa9a 	bl	8014c18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	2140      	movs	r1, #64	; 0x40
 80146ea:	4618      	mov	r0, r3
 80146ec:	f000 faf3 	bl	8014cd6 <TIM_ITRx_SetConfig>
      break;
 80146f0:	e00c      	b.n	801470c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681a      	ldr	r2, [r3, #0]
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	4619      	mov	r1, r3
 80146fc:	4610      	mov	r0, r2
 80146fe:	f000 faea 	bl	8014cd6 <TIM_ITRx_SetConfig>
      break;
 8014702:	e003      	b.n	801470c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8014704:	2301      	movs	r3, #1
 8014706:	73fb      	strb	r3, [r7, #15]
      break;
 8014708:	e000      	b.n	801470c <HAL_TIM_ConfigClockSource+0x174>
      break;
 801470a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2201      	movs	r2, #1
 8014710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	2200      	movs	r2, #0
 8014718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801471c:	7bfb      	ldrb	r3, [r7, #15]
}
 801471e:	4618      	mov	r0, r3
 8014720:	3710      	adds	r7, #16
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}

08014726 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014726:	b480      	push	{r7}
 8014728:	b083      	sub	sp, #12
 801472a:	af00      	add	r7, sp, #0
 801472c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801472e:	bf00      	nop
 8014730:	370c      	adds	r7, #12
 8014732:	46bd      	mov	sp, r7
 8014734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014738:	4770      	bx	lr

0801473a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801473a:	b480      	push	{r7}
 801473c:	b083      	sub	sp, #12
 801473e:	af00      	add	r7, sp, #0
 8014740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8014742:	bf00      	nop
 8014744:	370c      	adds	r7, #12
 8014746:	46bd      	mov	sp, r7
 8014748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801474c:	4770      	bx	lr

0801474e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801474e:	b480      	push	{r7}
 8014750:	b083      	sub	sp, #12
 8014752:	af00      	add	r7, sp, #0
 8014754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014756:	bf00      	nop
 8014758:	370c      	adds	r7, #12
 801475a:	46bd      	mov	sp, r7
 801475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014760:	4770      	bx	lr

08014762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014762:	b480      	push	{r7}
 8014764:	b083      	sub	sp, #12
 8014766:	af00      	add	r7, sp, #0
 8014768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801476a:	bf00      	nop
 801476c:	370c      	adds	r7, #12
 801476e:	46bd      	mov	sp, r7
 8014770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014774:	4770      	bx	lr
	...

08014778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8014778:	b480      	push	{r7}
 801477a:	b085      	sub	sp, #20
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
 8014780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	681b      	ldr	r3, [r3, #0]
 8014786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	4a40      	ldr	r2, [pc, #256]	; (801488c <TIM_Base_SetConfig+0x114>)
 801478c:	4293      	cmp	r3, r2
 801478e:	d013      	beq.n	80147b8 <TIM_Base_SetConfig+0x40>
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014796:	d00f      	beq.n	80147b8 <TIM_Base_SetConfig+0x40>
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	4a3d      	ldr	r2, [pc, #244]	; (8014890 <TIM_Base_SetConfig+0x118>)
 801479c:	4293      	cmp	r3, r2
 801479e:	d00b      	beq.n	80147b8 <TIM_Base_SetConfig+0x40>
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	4a3c      	ldr	r2, [pc, #240]	; (8014894 <TIM_Base_SetConfig+0x11c>)
 80147a4:	4293      	cmp	r3, r2
 80147a6:	d007      	beq.n	80147b8 <TIM_Base_SetConfig+0x40>
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	4a3b      	ldr	r2, [pc, #236]	; (8014898 <TIM_Base_SetConfig+0x120>)
 80147ac:	4293      	cmp	r3, r2
 80147ae:	d003      	beq.n	80147b8 <TIM_Base_SetConfig+0x40>
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	4a3a      	ldr	r2, [pc, #232]	; (801489c <TIM_Base_SetConfig+0x124>)
 80147b4:	4293      	cmp	r3, r2
 80147b6:	d108      	bne.n	80147ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80147be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80147c0:	683b      	ldr	r3, [r7, #0]
 80147c2:	685b      	ldr	r3, [r3, #4]
 80147c4:	68fa      	ldr	r2, [r7, #12]
 80147c6:	4313      	orrs	r3, r2
 80147c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	4a2f      	ldr	r2, [pc, #188]	; (801488c <TIM_Base_SetConfig+0x114>)
 80147ce:	4293      	cmp	r3, r2
 80147d0:	d02b      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80147d8:	d027      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 80147da:	687b      	ldr	r3, [r7, #4]
 80147dc:	4a2c      	ldr	r2, [pc, #176]	; (8014890 <TIM_Base_SetConfig+0x118>)
 80147de:	4293      	cmp	r3, r2
 80147e0:	d023      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	4a2b      	ldr	r2, [pc, #172]	; (8014894 <TIM_Base_SetConfig+0x11c>)
 80147e6:	4293      	cmp	r3, r2
 80147e8:	d01f      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	4a2a      	ldr	r2, [pc, #168]	; (8014898 <TIM_Base_SetConfig+0x120>)
 80147ee:	4293      	cmp	r3, r2
 80147f0:	d01b      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	4a29      	ldr	r2, [pc, #164]	; (801489c <TIM_Base_SetConfig+0x124>)
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d017      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	4a28      	ldr	r2, [pc, #160]	; (80148a0 <TIM_Base_SetConfig+0x128>)
 80147fe:	4293      	cmp	r3, r2
 8014800:	d013      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	4a27      	ldr	r2, [pc, #156]	; (80148a4 <TIM_Base_SetConfig+0x12c>)
 8014806:	4293      	cmp	r3, r2
 8014808:	d00f      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	4a26      	ldr	r2, [pc, #152]	; (80148a8 <TIM_Base_SetConfig+0x130>)
 801480e:	4293      	cmp	r3, r2
 8014810:	d00b      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	4a25      	ldr	r2, [pc, #148]	; (80148ac <TIM_Base_SetConfig+0x134>)
 8014816:	4293      	cmp	r3, r2
 8014818:	d007      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	4a24      	ldr	r2, [pc, #144]	; (80148b0 <TIM_Base_SetConfig+0x138>)
 801481e:	4293      	cmp	r3, r2
 8014820:	d003      	beq.n	801482a <TIM_Base_SetConfig+0xb2>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	4a23      	ldr	r2, [pc, #140]	; (80148b4 <TIM_Base_SetConfig+0x13c>)
 8014826:	4293      	cmp	r3, r2
 8014828:	d108      	bne.n	801483c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	68db      	ldr	r3, [r3, #12]
 8014836:	68fa      	ldr	r2, [r7, #12]
 8014838:	4313      	orrs	r3, r2
 801483a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014842:	683b      	ldr	r3, [r7, #0]
 8014844:	695b      	ldr	r3, [r3, #20]
 8014846:	4313      	orrs	r3, r2
 8014848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	68fa      	ldr	r2, [r7, #12]
 801484e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014850:	683b      	ldr	r3, [r7, #0]
 8014852:	689a      	ldr	r2, [r3, #8]
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014858:	683b      	ldr	r3, [r7, #0]
 801485a:	681a      	ldr	r2, [r3, #0]
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	4a0a      	ldr	r2, [pc, #40]	; (801488c <TIM_Base_SetConfig+0x114>)
 8014864:	4293      	cmp	r3, r2
 8014866:	d003      	beq.n	8014870 <TIM_Base_SetConfig+0xf8>
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	4a0c      	ldr	r2, [pc, #48]	; (801489c <TIM_Base_SetConfig+0x124>)
 801486c:	4293      	cmp	r3, r2
 801486e:	d103      	bne.n	8014878 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	691a      	ldr	r2, [r3, #16]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2201      	movs	r2, #1
 801487c:	615a      	str	r2, [r3, #20]
}
 801487e:	bf00      	nop
 8014880:	3714      	adds	r7, #20
 8014882:	46bd      	mov	sp, r7
 8014884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014888:	4770      	bx	lr
 801488a:	bf00      	nop
 801488c:	40010000 	.word	0x40010000
 8014890:	40000400 	.word	0x40000400
 8014894:	40000800 	.word	0x40000800
 8014898:	40000c00 	.word	0x40000c00
 801489c:	40010400 	.word	0x40010400
 80148a0:	40014000 	.word	0x40014000
 80148a4:	40014400 	.word	0x40014400
 80148a8:	40014800 	.word	0x40014800
 80148ac:	40001800 	.word	0x40001800
 80148b0:	40001c00 	.word	0x40001c00
 80148b4:	40002000 	.word	0x40002000

080148b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80148b8:	b480      	push	{r7}
 80148ba:	b087      	sub	sp, #28
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	6a1b      	ldr	r3, [r3, #32]
 80148c6:	f023 0201 	bic.w	r2, r3, #1
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	6a1b      	ldr	r3, [r3, #32]
 80148d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	685b      	ldr	r3, [r3, #4]
 80148d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	699b      	ldr	r3, [r3, #24]
 80148de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80148e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	f023 0303 	bic.w	r3, r3, #3
 80148ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	68fa      	ldr	r2, [r7, #12]
 80148f6:	4313      	orrs	r3, r2
 80148f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80148fa:	697b      	ldr	r3, [r7, #20]
 80148fc:	f023 0302 	bic.w	r3, r3, #2
 8014900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	689b      	ldr	r3, [r3, #8]
 8014906:	697a      	ldr	r2, [r7, #20]
 8014908:	4313      	orrs	r3, r2
 801490a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	4a20      	ldr	r2, [pc, #128]	; (8014990 <TIM_OC1_SetConfig+0xd8>)
 8014910:	4293      	cmp	r3, r2
 8014912:	d003      	beq.n	801491c <TIM_OC1_SetConfig+0x64>
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	4a1f      	ldr	r2, [pc, #124]	; (8014994 <TIM_OC1_SetConfig+0xdc>)
 8014918:	4293      	cmp	r3, r2
 801491a:	d10c      	bne.n	8014936 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801491c:	697b      	ldr	r3, [r7, #20]
 801491e:	f023 0308 	bic.w	r3, r3, #8
 8014922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	697a      	ldr	r2, [r7, #20]
 801492a:	4313      	orrs	r3, r2
 801492c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801492e:	697b      	ldr	r3, [r7, #20]
 8014930:	f023 0304 	bic.w	r3, r3, #4
 8014934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	4a15      	ldr	r2, [pc, #84]	; (8014990 <TIM_OC1_SetConfig+0xd8>)
 801493a:	4293      	cmp	r3, r2
 801493c:	d003      	beq.n	8014946 <TIM_OC1_SetConfig+0x8e>
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	4a14      	ldr	r2, [pc, #80]	; (8014994 <TIM_OC1_SetConfig+0xdc>)
 8014942:	4293      	cmp	r3, r2
 8014944:	d111      	bne.n	801496a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014946:	693b      	ldr	r3, [r7, #16]
 8014948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801494c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801494e:	693b      	ldr	r3, [r7, #16]
 8014950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	695b      	ldr	r3, [r3, #20]
 801495a:	693a      	ldr	r2, [r7, #16]
 801495c:	4313      	orrs	r3, r2
 801495e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	699b      	ldr	r3, [r3, #24]
 8014964:	693a      	ldr	r2, [r7, #16]
 8014966:	4313      	orrs	r3, r2
 8014968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	693a      	ldr	r2, [r7, #16]
 801496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	68fa      	ldr	r2, [r7, #12]
 8014974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	685a      	ldr	r2, [r3, #4]
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	697a      	ldr	r2, [r7, #20]
 8014982:	621a      	str	r2, [r3, #32]
}
 8014984:	bf00      	nop
 8014986:	371c      	adds	r7, #28
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr
 8014990:	40010000 	.word	0x40010000
 8014994:	40010400 	.word	0x40010400

08014998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014998:	b480      	push	{r7}
 801499a:	b087      	sub	sp, #28
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
 80149a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	6a1b      	ldr	r3, [r3, #32]
 80149a6:	f023 0210 	bic.w	r2, r3, #16
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	6a1b      	ldr	r3, [r3, #32]
 80149b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	699b      	ldr	r3, [r3, #24]
 80149be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80149c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80149ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	021b      	lsls	r3, r3, #8
 80149d6:	68fa      	ldr	r2, [r7, #12]
 80149d8:	4313      	orrs	r3, r2
 80149da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80149dc:	697b      	ldr	r3, [r7, #20]
 80149de:	f023 0320 	bic.w	r3, r3, #32
 80149e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80149e4:	683b      	ldr	r3, [r7, #0]
 80149e6:	689b      	ldr	r3, [r3, #8]
 80149e8:	011b      	lsls	r3, r3, #4
 80149ea:	697a      	ldr	r2, [r7, #20]
 80149ec:	4313      	orrs	r3, r2
 80149ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	4a22      	ldr	r2, [pc, #136]	; (8014a7c <TIM_OC2_SetConfig+0xe4>)
 80149f4:	4293      	cmp	r3, r2
 80149f6:	d003      	beq.n	8014a00 <TIM_OC2_SetConfig+0x68>
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	4a21      	ldr	r2, [pc, #132]	; (8014a80 <TIM_OC2_SetConfig+0xe8>)
 80149fc:	4293      	cmp	r3, r2
 80149fe:	d10d      	bne.n	8014a1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014a08:	683b      	ldr	r3, [r7, #0]
 8014a0a:	68db      	ldr	r3, [r3, #12]
 8014a0c:	011b      	lsls	r3, r3, #4
 8014a0e:	697a      	ldr	r2, [r7, #20]
 8014a10:	4313      	orrs	r3, r2
 8014a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	4a17      	ldr	r2, [pc, #92]	; (8014a7c <TIM_OC2_SetConfig+0xe4>)
 8014a20:	4293      	cmp	r3, r2
 8014a22:	d003      	beq.n	8014a2c <TIM_OC2_SetConfig+0x94>
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	4a16      	ldr	r2, [pc, #88]	; (8014a80 <TIM_OC2_SetConfig+0xe8>)
 8014a28:	4293      	cmp	r3, r2
 8014a2a:	d113      	bne.n	8014a54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014a2c:	693b      	ldr	r3, [r7, #16]
 8014a2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014a34:	693b      	ldr	r3, [r7, #16]
 8014a36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	695b      	ldr	r3, [r3, #20]
 8014a40:	009b      	lsls	r3, r3, #2
 8014a42:	693a      	ldr	r2, [r7, #16]
 8014a44:	4313      	orrs	r3, r2
 8014a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	699b      	ldr	r3, [r3, #24]
 8014a4c:	009b      	lsls	r3, r3, #2
 8014a4e:	693a      	ldr	r2, [r7, #16]
 8014a50:	4313      	orrs	r3, r2
 8014a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	693a      	ldr	r2, [r7, #16]
 8014a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	68fa      	ldr	r2, [r7, #12]
 8014a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014a60:	683b      	ldr	r3, [r7, #0]
 8014a62:	685a      	ldr	r2, [r3, #4]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	697a      	ldr	r2, [r7, #20]
 8014a6c:	621a      	str	r2, [r3, #32]
}
 8014a6e:	bf00      	nop
 8014a70:	371c      	adds	r7, #28
 8014a72:	46bd      	mov	sp, r7
 8014a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a78:	4770      	bx	lr
 8014a7a:	bf00      	nop
 8014a7c:	40010000 	.word	0x40010000
 8014a80:	40010400 	.word	0x40010400

08014a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014a84:	b480      	push	{r7}
 8014a86:	b087      	sub	sp, #28
 8014a88:	af00      	add	r7, sp, #0
 8014a8a:	6078      	str	r0, [r7, #4]
 8014a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	6a1b      	ldr	r3, [r3, #32]
 8014a92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6a1b      	ldr	r3, [r3, #32]
 8014a9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	685b      	ldr	r3, [r3, #4]
 8014aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	69db      	ldr	r3, [r3, #28]
 8014aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	f023 0303 	bic.w	r3, r3, #3
 8014aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014abc:	683b      	ldr	r3, [r7, #0]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	68fa      	ldr	r2, [r7, #12]
 8014ac2:	4313      	orrs	r3, r2
 8014ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014ac6:	697b      	ldr	r3, [r7, #20]
 8014ac8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014ace:	683b      	ldr	r3, [r7, #0]
 8014ad0:	689b      	ldr	r3, [r3, #8]
 8014ad2:	021b      	lsls	r3, r3, #8
 8014ad4:	697a      	ldr	r2, [r7, #20]
 8014ad6:	4313      	orrs	r3, r2
 8014ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	4a21      	ldr	r2, [pc, #132]	; (8014b64 <TIM_OC3_SetConfig+0xe0>)
 8014ade:	4293      	cmp	r3, r2
 8014ae0:	d003      	beq.n	8014aea <TIM_OC3_SetConfig+0x66>
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	4a20      	ldr	r2, [pc, #128]	; (8014b68 <TIM_OC3_SetConfig+0xe4>)
 8014ae6:	4293      	cmp	r3, r2
 8014ae8:	d10d      	bne.n	8014b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014aea:	697b      	ldr	r3, [r7, #20]
 8014aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	68db      	ldr	r3, [r3, #12]
 8014af6:	021b      	lsls	r3, r3, #8
 8014af8:	697a      	ldr	r2, [r7, #20]
 8014afa:	4313      	orrs	r3, r2
 8014afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014afe:	697b      	ldr	r3, [r7, #20]
 8014b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	4a16      	ldr	r2, [pc, #88]	; (8014b64 <TIM_OC3_SetConfig+0xe0>)
 8014b0a:	4293      	cmp	r3, r2
 8014b0c:	d003      	beq.n	8014b16 <TIM_OC3_SetConfig+0x92>
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	4a15      	ldr	r2, [pc, #84]	; (8014b68 <TIM_OC3_SetConfig+0xe4>)
 8014b12:	4293      	cmp	r3, r2
 8014b14:	d113      	bne.n	8014b3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014b1e:	693b      	ldr	r3, [r7, #16]
 8014b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	695b      	ldr	r3, [r3, #20]
 8014b2a:	011b      	lsls	r3, r3, #4
 8014b2c:	693a      	ldr	r2, [r7, #16]
 8014b2e:	4313      	orrs	r3, r2
 8014b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	699b      	ldr	r3, [r3, #24]
 8014b36:	011b      	lsls	r3, r3, #4
 8014b38:	693a      	ldr	r2, [r7, #16]
 8014b3a:	4313      	orrs	r3, r2
 8014b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	693a      	ldr	r2, [r7, #16]
 8014b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	68fa      	ldr	r2, [r7, #12]
 8014b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014b4a:	683b      	ldr	r3, [r7, #0]
 8014b4c:	685a      	ldr	r2, [r3, #4]
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	697a      	ldr	r2, [r7, #20]
 8014b56:	621a      	str	r2, [r3, #32]
}
 8014b58:	bf00      	nop
 8014b5a:	371c      	adds	r7, #28
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b62:	4770      	bx	lr
 8014b64:	40010000 	.word	0x40010000
 8014b68:	40010400 	.word	0x40010400

08014b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b087      	sub	sp, #28
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	6078      	str	r0, [r7, #4]
 8014b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6a1b      	ldr	r3, [r3, #32]
 8014b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6a1b      	ldr	r3, [r3, #32]
 8014b86:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	685b      	ldr	r3, [r3, #4]
 8014b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	69db      	ldr	r3, [r3, #28]
 8014b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	021b      	lsls	r3, r3, #8
 8014baa:	68fa      	ldr	r2, [r7, #12]
 8014bac:	4313      	orrs	r3, r2
 8014bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014bb0:	693b      	ldr	r3, [r7, #16]
 8014bb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	689b      	ldr	r3, [r3, #8]
 8014bbc:	031b      	lsls	r3, r3, #12
 8014bbe:	693a      	ldr	r2, [r7, #16]
 8014bc0:	4313      	orrs	r3, r2
 8014bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	4a12      	ldr	r2, [pc, #72]	; (8014c10 <TIM_OC4_SetConfig+0xa4>)
 8014bc8:	4293      	cmp	r3, r2
 8014bca:	d003      	beq.n	8014bd4 <TIM_OC4_SetConfig+0x68>
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	4a11      	ldr	r2, [pc, #68]	; (8014c14 <TIM_OC4_SetConfig+0xa8>)
 8014bd0:	4293      	cmp	r3, r2
 8014bd2:	d109      	bne.n	8014be8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014bdc:	683b      	ldr	r3, [r7, #0]
 8014bde:	695b      	ldr	r3, [r3, #20]
 8014be0:	019b      	lsls	r3, r3, #6
 8014be2:	697a      	ldr	r2, [r7, #20]
 8014be4:	4313      	orrs	r3, r2
 8014be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	697a      	ldr	r2, [r7, #20]
 8014bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	68fa      	ldr	r2, [r7, #12]
 8014bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	685a      	ldr	r2, [r3, #4]
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	693a      	ldr	r2, [r7, #16]
 8014c00:	621a      	str	r2, [r3, #32]
}
 8014c02:	bf00      	nop
 8014c04:	371c      	adds	r7, #28
 8014c06:	46bd      	mov	sp, r7
 8014c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c0c:	4770      	bx	lr
 8014c0e:	bf00      	nop
 8014c10:	40010000 	.word	0x40010000
 8014c14:	40010400 	.word	0x40010400

08014c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014c18:	b480      	push	{r7}
 8014c1a:	b087      	sub	sp, #28
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	60b9      	str	r1, [r7, #8]
 8014c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	6a1b      	ldr	r3, [r3, #32]
 8014c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	6a1b      	ldr	r3, [r3, #32]
 8014c2e:	f023 0201 	bic.w	r2, r3, #1
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	699b      	ldr	r3, [r3, #24]
 8014c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8014c3c:	693b      	ldr	r3, [r7, #16]
 8014c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8014c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	011b      	lsls	r3, r3, #4
 8014c48:	693a      	ldr	r2, [r7, #16]
 8014c4a:	4313      	orrs	r3, r2
 8014c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	f023 030a 	bic.w	r3, r3, #10
 8014c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8014c56:	697a      	ldr	r2, [r7, #20]
 8014c58:	68bb      	ldr	r3, [r7, #8]
 8014c5a:	4313      	orrs	r3, r2
 8014c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8014c5e:	68fb      	ldr	r3, [r7, #12]
 8014c60:	693a      	ldr	r2, [r7, #16]
 8014c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	697a      	ldr	r2, [r7, #20]
 8014c68:	621a      	str	r2, [r3, #32]
}
 8014c6a:	bf00      	nop
 8014c6c:	371c      	adds	r7, #28
 8014c6e:	46bd      	mov	sp, r7
 8014c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c74:	4770      	bx	lr

08014c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8014c76:	b480      	push	{r7}
 8014c78:	b087      	sub	sp, #28
 8014c7a:	af00      	add	r7, sp, #0
 8014c7c:	60f8      	str	r0, [r7, #12]
 8014c7e:	60b9      	str	r1, [r7, #8]
 8014c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	6a1b      	ldr	r3, [r3, #32]
 8014c86:	f023 0210 	bic.w	r2, r3, #16
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	699b      	ldr	r3, [r3, #24]
 8014c92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	6a1b      	ldr	r3, [r3, #32]
 8014c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8014ca0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	031b      	lsls	r3, r3, #12
 8014ca6:	697a      	ldr	r2, [r7, #20]
 8014ca8:	4313      	orrs	r3, r2
 8014caa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8014cac:	693b      	ldr	r3, [r7, #16]
 8014cae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8014cb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8014cb4:	68bb      	ldr	r3, [r7, #8]
 8014cb6:	011b      	lsls	r3, r3, #4
 8014cb8:	693a      	ldr	r2, [r7, #16]
 8014cba:	4313      	orrs	r3, r2
 8014cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	697a      	ldr	r2, [r7, #20]
 8014cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8014cc4:	68fb      	ldr	r3, [r7, #12]
 8014cc6:	693a      	ldr	r2, [r7, #16]
 8014cc8:	621a      	str	r2, [r3, #32]
}
 8014cca:	bf00      	nop
 8014ccc:	371c      	adds	r7, #28
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd4:	4770      	bx	lr

08014cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8014cd6:	b480      	push	{r7}
 8014cd8:	b085      	sub	sp, #20
 8014cda:	af00      	add	r7, sp, #0
 8014cdc:	6078      	str	r0, [r7, #4]
 8014cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	689b      	ldr	r3, [r3, #8]
 8014ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8014cee:	683a      	ldr	r2, [r7, #0]
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	4313      	orrs	r3, r2
 8014cf4:	f043 0307 	orr.w	r3, r3, #7
 8014cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	68fa      	ldr	r2, [r7, #12]
 8014cfe:	609a      	str	r2, [r3, #8]
}
 8014d00:	bf00      	nop
 8014d02:	3714      	adds	r7, #20
 8014d04:	46bd      	mov	sp, r7
 8014d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0a:	4770      	bx	lr

08014d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8014d0c:	b480      	push	{r7}
 8014d0e:	b087      	sub	sp, #28
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	60f8      	str	r0, [r7, #12]
 8014d14:	60b9      	str	r1, [r7, #8]
 8014d16:	607a      	str	r2, [r7, #4]
 8014d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	689b      	ldr	r3, [r3, #8]
 8014d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014d20:	697b      	ldr	r3, [r7, #20]
 8014d22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	021a      	lsls	r2, r3, #8
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	431a      	orrs	r2, r3
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	4313      	orrs	r3, r2
 8014d34:	697a      	ldr	r2, [r7, #20]
 8014d36:	4313      	orrs	r3, r2
 8014d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	697a      	ldr	r2, [r7, #20]
 8014d3e:	609a      	str	r2, [r3, #8]
}
 8014d40:	bf00      	nop
 8014d42:	371c      	adds	r7, #28
 8014d44:	46bd      	mov	sp, r7
 8014d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4a:	4770      	bx	lr

08014d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b085      	sub	sp, #20
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8014d5c:	2b01      	cmp	r3, #1
 8014d5e:	d101      	bne.n	8014d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8014d60:	2302      	movs	r3, #2
 8014d62:	e05a      	b.n	8014e1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	2201      	movs	r2, #1
 8014d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	2202      	movs	r2, #2
 8014d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	685b      	ldr	r3, [r3, #4]
 8014d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	689b      	ldr	r3, [r3, #8]
 8014d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8014d8c:	683b      	ldr	r3, [r7, #0]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	68fa      	ldr	r2, [r7, #12]
 8014d92:	4313      	orrs	r3, r2
 8014d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	68fa      	ldr	r2, [r7, #12]
 8014d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	4a21      	ldr	r2, [pc, #132]	; (8014e28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8014da4:	4293      	cmp	r3, r2
 8014da6:	d022      	beq.n	8014dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	681b      	ldr	r3, [r3, #0]
 8014dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014db0:	d01d      	beq.n	8014dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	4a1d      	ldr	r2, [pc, #116]	; (8014e2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8014db8:	4293      	cmp	r3, r2
 8014dba:	d018      	beq.n	8014dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	681b      	ldr	r3, [r3, #0]
 8014dc0:	4a1b      	ldr	r2, [pc, #108]	; (8014e30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8014dc2:	4293      	cmp	r3, r2
 8014dc4:	d013      	beq.n	8014dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	4a1a      	ldr	r2, [pc, #104]	; (8014e34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8014dcc:	4293      	cmp	r3, r2
 8014dce:	d00e      	beq.n	8014dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	4a18      	ldr	r2, [pc, #96]	; (8014e38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8014dd6:	4293      	cmp	r3, r2
 8014dd8:	d009      	beq.n	8014dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	4a17      	ldr	r2, [pc, #92]	; (8014e3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8014de0:	4293      	cmp	r3, r2
 8014de2:	d004      	beq.n	8014dee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	4a15      	ldr	r2, [pc, #84]	; (8014e40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8014dea:	4293      	cmp	r3, r2
 8014dec:	d10c      	bne.n	8014e08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	685b      	ldr	r3, [r3, #4]
 8014dfa:	68ba      	ldr	r2, [r7, #8]
 8014dfc:	4313      	orrs	r3, r2
 8014dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	68ba      	ldr	r2, [r7, #8]
 8014e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2201      	movs	r2, #1
 8014e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2200      	movs	r2, #0
 8014e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8014e18:	2300      	movs	r3, #0
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3714      	adds	r7, #20
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e24:	4770      	bx	lr
 8014e26:	bf00      	nop
 8014e28:	40010000 	.word	0x40010000
 8014e2c:	40000400 	.word	0x40000400
 8014e30:	40000800 	.word	0x40000800
 8014e34:	40000c00 	.word	0x40000c00
 8014e38:	40010400 	.word	0x40010400
 8014e3c:	40014000 	.word	0x40014000
 8014e40:	40001800 	.word	0x40001800

08014e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014e44:	b480      	push	{r7}
 8014e46:	b083      	sub	sp, #12
 8014e48:	af00      	add	r7, sp, #0
 8014e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014e4c:	bf00      	nop
 8014e4e:	370c      	adds	r7, #12
 8014e50:	46bd      	mov	sp, r7
 8014e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e56:	4770      	bx	lr

08014e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014e58:	b480      	push	{r7}
 8014e5a:	b083      	sub	sp, #12
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014e60:	bf00      	nop
 8014e62:	370c      	adds	r7, #12
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr

08014e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	b082      	sub	sp, #8
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d101      	bne.n	8014e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	e03f      	b.n	8014efe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014e84:	b2db      	uxtb	r3, r3
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	d106      	bne.n	8014e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014e92:	6878      	ldr	r0, [r7, #4]
 8014e94:	f7fb f9da 	bl	801024c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2224      	movs	r2, #36	; 0x24
 8014e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	68da      	ldr	r2, [r3, #12]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8014eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f000 f829 	bl	8014f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	681b      	ldr	r3, [r3, #0]
 8014eba:	691a      	ldr	r2, [r3, #16]
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8014ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	695a      	ldr	r2, [r3, #20]
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8014ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	68da      	ldr	r2, [r3, #12]
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8014ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	2200      	movs	r2, #0
 8014eea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2220      	movs	r2, #32
 8014ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	2220      	movs	r2, #32
 8014ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8014efc:	2300      	movs	r3, #0
}
 8014efe:	4618      	mov	r0, r3
 8014f00:	3708      	adds	r7, #8
 8014f02:	46bd      	mov	sp, r7
 8014f04:	bd80      	pop	{r7, pc}
	...

08014f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014f0c:	b0c0      	sub	sp, #256	; 0x100
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	691b      	ldr	r3, [r3, #16]
 8014f1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8014f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f24:	68d9      	ldr	r1, [r3, #12]
 8014f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f2a:	681a      	ldr	r2, [r3, #0]
 8014f2c:	ea40 0301 	orr.w	r3, r0, r1
 8014f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8014f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f36:	689a      	ldr	r2, [r3, #8]
 8014f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f3c:	691b      	ldr	r3, [r3, #16]
 8014f3e:	431a      	orrs	r2, r3
 8014f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f44:	695b      	ldr	r3, [r3, #20]
 8014f46:	431a      	orrs	r2, r3
 8014f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f4c:	69db      	ldr	r3, [r3, #28]
 8014f4e:	4313      	orrs	r3, r2
 8014f50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8014f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	68db      	ldr	r3, [r3, #12]
 8014f5c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8014f60:	f021 010c 	bic.w	r1, r1, #12
 8014f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014f6e:	430b      	orrs	r3, r1
 8014f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8014f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	695b      	ldr	r3, [r3, #20]
 8014f7a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8014f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f82:	6999      	ldr	r1, [r3, #24]
 8014f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f88:	681a      	ldr	r2, [r3, #0]
 8014f8a:	ea40 0301 	orr.w	r3, r0, r1
 8014f8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8014f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014f94:	681a      	ldr	r2, [r3, #0]
 8014f96:	4b8f      	ldr	r3, [pc, #572]	; (80151d4 <UART_SetConfig+0x2cc>)
 8014f98:	429a      	cmp	r2, r3
 8014f9a:	d005      	beq.n	8014fa8 <UART_SetConfig+0xa0>
 8014f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014fa0:	681a      	ldr	r2, [r3, #0]
 8014fa2:	4b8d      	ldr	r3, [pc, #564]	; (80151d8 <UART_SetConfig+0x2d0>)
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d104      	bne.n	8014fb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8014fa8:	f7fe f954 	bl	8013254 <HAL_RCC_GetPCLK2Freq>
 8014fac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8014fb0:	e003      	b.n	8014fba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8014fb2:	f7fe f93b 	bl	801322c <HAL_RCC_GetPCLK1Freq>
 8014fb6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014fbe:	69db      	ldr	r3, [r3, #28]
 8014fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014fc4:	f040 810c 	bne.w	80151e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8014fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014fcc:	2200      	movs	r2, #0
 8014fce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014fd2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8014fd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8014fda:	4622      	mov	r2, r4
 8014fdc:	462b      	mov	r3, r5
 8014fde:	1891      	adds	r1, r2, r2
 8014fe0:	65b9      	str	r1, [r7, #88]	; 0x58
 8014fe2:	415b      	adcs	r3, r3
 8014fe4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8014fea:	4621      	mov	r1, r4
 8014fec:	eb12 0801 	adds.w	r8, r2, r1
 8014ff0:	4629      	mov	r1, r5
 8014ff2:	eb43 0901 	adc.w	r9, r3, r1
 8014ff6:	f04f 0200 	mov.w	r2, #0
 8014ffa:	f04f 0300 	mov.w	r3, #0
 8014ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8015002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8015006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801500a:	4690      	mov	r8, r2
 801500c:	4699      	mov	r9, r3
 801500e:	4623      	mov	r3, r4
 8015010:	eb18 0303 	adds.w	r3, r8, r3
 8015014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8015018:	462b      	mov	r3, r5
 801501a:	eb49 0303 	adc.w	r3, r9, r3
 801501e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8015022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	2200      	movs	r2, #0
 801502a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801502e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8015032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8015036:	460b      	mov	r3, r1
 8015038:	18db      	adds	r3, r3, r3
 801503a:	653b      	str	r3, [r7, #80]	; 0x50
 801503c:	4613      	mov	r3, r2
 801503e:	eb42 0303 	adc.w	r3, r2, r3
 8015042:	657b      	str	r3, [r7, #84]	; 0x54
 8015044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015048:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 801504c:	f7eb fe1c 	bl	8000c88 <__aeabi_uldivmod>
 8015050:	4602      	mov	r2, r0
 8015052:	460b      	mov	r3, r1
 8015054:	4b61      	ldr	r3, [pc, #388]	; (80151dc <UART_SetConfig+0x2d4>)
 8015056:	fba3 2302 	umull	r2, r3, r3, r2
 801505a:	095b      	lsrs	r3, r3, #5
 801505c:	011c      	lsls	r4, r3, #4
 801505e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015062:	2200      	movs	r2, #0
 8015064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015068:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 801506c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8015070:	4642      	mov	r2, r8
 8015072:	464b      	mov	r3, r9
 8015074:	1891      	adds	r1, r2, r2
 8015076:	64b9      	str	r1, [r7, #72]	; 0x48
 8015078:	415b      	adcs	r3, r3
 801507a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801507c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8015080:	4641      	mov	r1, r8
 8015082:	eb12 0a01 	adds.w	sl, r2, r1
 8015086:	4649      	mov	r1, r9
 8015088:	eb43 0b01 	adc.w	fp, r3, r1
 801508c:	f04f 0200 	mov.w	r2, #0
 8015090:	f04f 0300 	mov.w	r3, #0
 8015094:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8015098:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 801509c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80150a0:	4692      	mov	sl, r2
 80150a2:	469b      	mov	fp, r3
 80150a4:	4643      	mov	r3, r8
 80150a6:	eb1a 0303 	adds.w	r3, sl, r3
 80150aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80150ae:	464b      	mov	r3, r9
 80150b0:	eb4b 0303 	adc.w	r3, fp, r3
 80150b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80150b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	2200      	movs	r2, #0
 80150c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80150c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80150c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80150cc:	460b      	mov	r3, r1
 80150ce:	18db      	adds	r3, r3, r3
 80150d0:	643b      	str	r3, [r7, #64]	; 0x40
 80150d2:	4613      	mov	r3, r2
 80150d4:	eb42 0303 	adc.w	r3, r2, r3
 80150d8:	647b      	str	r3, [r7, #68]	; 0x44
 80150da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80150de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80150e2:	f7eb fdd1 	bl	8000c88 <__aeabi_uldivmod>
 80150e6:	4602      	mov	r2, r0
 80150e8:	460b      	mov	r3, r1
 80150ea:	4611      	mov	r1, r2
 80150ec:	4b3b      	ldr	r3, [pc, #236]	; (80151dc <UART_SetConfig+0x2d4>)
 80150ee:	fba3 2301 	umull	r2, r3, r3, r1
 80150f2:	095b      	lsrs	r3, r3, #5
 80150f4:	2264      	movs	r2, #100	; 0x64
 80150f6:	fb02 f303 	mul.w	r3, r2, r3
 80150fa:	1acb      	subs	r3, r1, r3
 80150fc:	00db      	lsls	r3, r3, #3
 80150fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8015102:	4b36      	ldr	r3, [pc, #216]	; (80151dc <UART_SetConfig+0x2d4>)
 8015104:	fba3 2302 	umull	r2, r3, r3, r2
 8015108:	095b      	lsrs	r3, r3, #5
 801510a:	005b      	lsls	r3, r3, #1
 801510c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8015110:	441c      	add	r4, r3
 8015112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015116:	2200      	movs	r2, #0
 8015118:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801511c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8015120:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8015124:	4642      	mov	r2, r8
 8015126:	464b      	mov	r3, r9
 8015128:	1891      	adds	r1, r2, r2
 801512a:	63b9      	str	r1, [r7, #56]	; 0x38
 801512c:	415b      	adcs	r3, r3
 801512e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8015134:	4641      	mov	r1, r8
 8015136:	1851      	adds	r1, r2, r1
 8015138:	6339      	str	r1, [r7, #48]	; 0x30
 801513a:	4649      	mov	r1, r9
 801513c:	414b      	adcs	r3, r1
 801513e:	637b      	str	r3, [r7, #52]	; 0x34
 8015140:	f04f 0200 	mov.w	r2, #0
 8015144:	f04f 0300 	mov.w	r3, #0
 8015148:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 801514c:	4659      	mov	r1, fp
 801514e:	00cb      	lsls	r3, r1, #3
 8015150:	4651      	mov	r1, sl
 8015152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015156:	4651      	mov	r1, sl
 8015158:	00ca      	lsls	r2, r1, #3
 801515a:	4610      	mov	r0, r2
 801515c:	4619      	mov	r1, r3
 801515e:	4603      	mov	r3, r0
 8015160:	4642      	mov	r2, r8
 8015162:	189b      	adds	r3, r3, r2
 8015164:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015168:	464b      	mov	r3, r9
 801516a:	460a      	mov	r2, r1
 801516c:	eb42 0303 	adc.w	r3, r2, r3
 8015170:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	2200      	movs	r2, #0
 801517c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8015180:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8015184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8015188:	460b      	mov	r3, r1
 801518a:	18db      	adds	r3, r3, r3
 801518c:	62bb      	str	r3, [r7, #40]	; 0x28
 801518e:	4613      	mov	r3, r2
 8015190:	eb42 0303 	adc.w	r3, r2, r3
 8015194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801519a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 801519e:	f7eb fd73 	bl	8000c88 <__aeabi_uldivmod>
 80151a2:	4602      	mov	r2, r0
 80151a4:	460b      	mov	r3, r1
 80151a6:	4b0d      	ldr	r3, [pc, #52]	; (80151dc <UART_SetConfig+0x2d4>)
 80151a8:	fba3 1302 	umull	r1, r3, r3, r2
 80151ac:	095b      	lsrs	r3, r3, #5
 80151ae:	2164      	movs	r1, #100	; 0x64
 80151b0:	fb01 f303 	mul.w	r3, r1, r3
 80151b4:	1ad3      	subs	r3, r2, r3
 80151b6:	00db      	lsls	r3, r3, #3
 80151b8:	3332      	adds	r3, #50	; 0x32
 80151ba:	4a08      	ldr	r2, [pc, #32]	; (80151dc <UART_SetConfig+0x2d4>)
 80151bc:	fba2 2303 	umull	r2, r3, r2, r3
 80151c0:	095b      	lsrs	r3, r3, #5
 80151c2:	f003 0207 	and.w	r2, r3, #7
 80151c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80151ca:	681b      	ldr	r3, [r3, #0]
 80151cc:	4422      	add	r2, r4
 80151ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80151d0:	e105      	b.n	80153de <UART_SetConfig+0x4d6>
 80151d2:	bf00      	nop
 80151d4:	40011000 	.word	0x40011000
 80151d8:	40011400 	.word	0x40011400
 80151dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80151e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80151e4:	2200      	movs	r2, #0
 80151e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80151ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80151ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80151f2:	4642      	mov	r2, r8
 80151f4:	464b      	mov	r3, r9
 80151f6:	1891      	adds	r1, r2, r2
 80151f8:	6239      	str	r1, [r7, #32]
 80151fa:	415b      	adcs	r3, r3
 80151fc:	627b      	str	r3, [r7, #36]	; 0x24
 80151fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8015202:	4641      	mov	r1, r8
 8015204:	1854      	adds	r4, r2, r1
 8015206:	4649      	mov	r1, r9
 8015208:	eb43 0501 	adc.w	r5, r3, r1
 801520c:	f04f 0200 	mov.w	r2, #0
 8015210:	f04f 0300 	mov.w	r3, #0
 8015214:	00eb      	lsls	r3, r5, #3
 8015216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801521a:	00e2      	lsls	r2, r4, #3
 801521c:	4614      	mov	r4, r2
 801521e:	461d      	mov	r5, r3
 8015220:	4643      	mov	r3, r8
 8015222:	18e3      	adds	r3, r4, r3
 8015224:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8015228:	464b      	mov	r3, r9
 801522a:	eb45 0303 	adc.w	r3, r5, r3
 801522e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8015232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015236:	685b      	ldr	r3, [r3, #4]
 8015238:	2200      	movs	r2, #0
 801523a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801523e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8015242:	f04f 0200 	mov.w	r2, #0
 8015246:	f04f 0300 	mov.w	r3, #0
 801524a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801524e:	4629      	mov	r1, r5
 8015250:	008b      	lsls	r3, r1, #2
 8015252:	4621      	mov	r1, r4
 8015254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8015258:	4621      	mov	r1, r4
 801525a:	008a      	lsls	r2, r1, #2
 801525c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8015260:	f7eb fd12 	bl	8000c88 <__aeabi_uldivmod>
 8015264:	4602      	mov	r2, r0
 8015266:	460b      	mov	r3, r1
 8015268:	4b60      	ldr	r3, [pc, #384]	; (80153ec <UART_SetConfig+0x4e4>)
 801526a:	fba3 2302 	umull	r2, r3, r3, r2
 801526e:	095b      	lsrs	r3, r3, #5
 8015270:	011c      	lsls	r4, r3, #4
 8015272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8015276:	2200      	movs	r2, #0
 8015278:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801527c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8015280:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8015284:	4642      	mov	r2, r8
 8015286:	464b      	mov	r3, r9
 8015288:	1891      	adds	r1, r2, r2
 801528a:	61b9      	str	r1, [r7, #24]
 801528c:	415b      	adcs	r3, r3
 801528e:	61fb      	str	r3, [r7, #28]
 8015290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015294:	4641      	mov	r1, r8
 8015296:	1851      	adds	r1, r2, r1
 8015298:	6139      	str	r1, [r7, #16]
 801529a:	4649      	mov	r1, r9
 801529c:	414b      	adcs	r3, r1
 801529e:	617b      	str	r3, [r7, #20]
 80152a0:	f04f 0200 	mov.w	r2, #0
 80152a4:	f04f 0300 	mov.w	r3, #0
 80152a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80152ac:	4659      	mov	r1, fp
 80152ae:	00cb      	lsls	r3, r1, #3
 80152b0:	4651      	mov	r1, sl
 80152b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80152b6:	4651      	mov	r1, sl
 80152b8:	00ca      	lsls	r2, r1, #3
 80152ba:	4610      	mov	r0, r2
 80152bc:	4619      	mov	r1, r3
 80152be:	4603      	mov	r3, r0
 80152c0:	4642      	mov	r2, r8
 80152c2:	189b      	adds	r3, r3, r2
 80152c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80152c8:	464b      	mov	r3, r9
 80152ca:	460a      	mov	r2, r1
 80152cc:	eb42 0303 	adc.w	r3, r2, r3
 80152d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80152d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	2200      	movs	r2, #0
 80152dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80152de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80152e0:	f04f 0200 	mov.w	r2, #0
 80152e4:	f04f 0300 	mov.w	r3, #0
 80152e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80152ec:	4649      	mov	r1, r9
 80152ee:	008b      	lsls	r3, r1, #2
 80152f0:	4641      	mov	r1, r8
 80152f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80152f6:	4641      	mov	r1, r8
 80152f8:	008a      	lsls	r2, r1, #2
 80152fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80152fe:	f7eb fcc3 	bl	8000c88 <__aeabi_uldivmod>
 8015302:	4602      	mov	r2, r0
 8015304:	460b      	mov	r3, r1
 8015306:	4b39      	ldr	r3, [pc, #228]	; (80153ec <UART_SetConfig+0x4e4>)
 8015308:	fba3 1302 	umull	r1, r3, r3, r2
 801530c:	095b      	lsrs	r3, r3, #5
 801530e:	2164      	movs	r1, #100	; 0x64
 8015310:	fb01 f303 	mul.w	r3, r1, r3
 8015314:	1ad3      	subs	r3, r2, r3
 8015316:	011b      	lsls	r3, r3, #4
 8015318:	3332      	adds	r3, #50	; 0x32
 801531a:	4a34      	ldr	r2, [pc, #208]	; (80153ec <UART_SetConfig+0x4e4>)
 801531c:	fba2 2303 	umull	r2, r3, r2, r3
 8015320:	095b      	lsrs	r3, r3, #5
 8015322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015326:	441c      	add	r4, r3
 8015328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801532c:	2200      	movs	r2, #0
 801532e:	673b      	str	r3, [r7, #112]	; 0x70
 8015330:	677a      	str	r2, [r7, #116]	; 0x74
 8015332:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8015336:	4642      	mov	r2, r8
 8015338:	464b      	mov	r3, r9
 801533a:	1891      	adds	r1, r2, r2
 801533c:	60b9      	str	r1, [r7, #8]
 801533e:	415b      	adcs	r3, r3
 8015340:	60fb      	str	r3, [r7, #12]
 8015342:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015346:	4641      	mov	r1, r8
 8015348:	1851      	adds	r1, r2, r1
 801534a:	6039      	str	r1, [r7, #0]
 801534c:	4649      	mov	r1, r9
 801534e:	414b      	adcs	r3, r1
 8015350:	607b      	str	r3, [r7, #4]
 8015352:	f04f 0200 	mov.w	r2, #0
 8015356:	f04f 0300 	mov.w	r3, #0
 801535a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801535e:	4659      	mov	r1, fp
 8015360:	00cb      	lsls	r3, r1, #3
 8015362:	4651      	mov	r1, sl
 8015364:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8015368:	4651      	mov	r1, sl
 801536a:	00ca      	lsls	r2, r1, #3
 801536c:	4610      	mov	r0, r2
 801536e:	4619      	mov	r1, r3
 8015370:	4603      	mov	r3, r0
 8015372:	4642      	mov	r2, r8
 8015374:	189b      	adds	r3, r3, r2
 8015376:	66bb      	str	r3, [r7, #104]	; 0x68
 8015378:	464b      	mov	r3, r9
 801537a:	460a      	mov	r2, r1
 801537c:	eb42 0303 	adc.w	r3, r2, r3
 8015380:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8015386:	685b      	ldr	r3, [r3, #4]
 8015388:	2200      	movs	r2, #0
 801538a:	663b      	str	r3, [r7, #96]	; 0x60
 801538c:	667a      	str	r2, [r7, #100]	; 0x64
 801538e:	f04f 0200 	mov.w	r2, #0
 8015392:	f04f 0300 	mov.w	r3, #0
 8015396:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 801539a:	4649      	mov	r1, r9
 801539c:	008b      	lsls	r3, r1, #2
 801539e:	4641      	mov	r1, r8
 80153a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80153a4:	4641      	mov	r1, r8
 80153a6:	008a      	lsls	r2, r1, #2
 80153a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80153ac:	f7eb fc6c 	bl	8000c88 <__aeabi_uldivmod>
 80153b0:	4602      	mov	r2, r0
 80153b2:	460b      	mov	r3, r1
 80153b4:	4b0d      	ldr	r3, [pc, #52]	; (80153ec <UART_SetConfig+0x4e4>)
 80153b6:	fba3 1302 	umull	r1, r3, r3, r2
 80153ba:	095b      	lsrs	r3, r3, #5
 80153bc:	2164      	movs	r1, #100	; 0x64
 80153be:	fb01 f303 	mul.w	r3, r1, r3
 80153c2:	1ad3      	subs	r3, r2, r3
 80153c4:	011b      	lsls	r3, r3, #4
 80153c6:	3332      	adds	r3, #50	; 0x32
 80153c8:	4a08      	ldr	r2, [pc, #32]	; (80153ec <UART_SetConfig+0x4e4>)
 80153ca:	fba2 2303 	umull	r2, r3, r2, r3
 80153ce:	095b      	lsrs	r3, r3, #5
 80153d0:	f003 020f 	and.w	r2, r3, #15
 80153d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	4422      	add	r2, r4
 80153dc:	609a      	str	r2, [r3, #8]
}
 80153de:	bf00      	nop
 80153e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80153e4:	46bd      	mov	sp, r7
 80153e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80153ea:	bf00      	nop
 80153ec:	51eb851f 	.word	0x51eb851f

080153f0 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b084      	sub	sp, #16
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
 80153f8:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 80153fa:	2300      	movs	r3, #0
 80153fc:	60fb      	str	r3, [r7, #12]
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8015404:	68fa      	ldr	r2, [r7, #12]
 8015406:	429a      	cmp	r2, r3
 8015408:	d20b      	bcs.n	8015422 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	011b      	lsls	r3, r3, #4
 801540e:	687a      	ldr	r2, [r7, #4]
 8015410:	4413      	add	r3, r2
 8015412:	6839      	ldr	r1, [r7, #0]
 8015414:	4618      	mov	r0, r3
 8015416:	f000 f817 	bl	8015448 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	3301      	adds	r3, #1
 801541e:	60fb      	str	r3, [r7, #12]
 8015420:	e7ed      	b.n	80153fe <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 8015422:	bf00      	nop
 8015424:	3710      	adds	r7, #16
 8015426:	46bd      	mov	sp, r7
 8015428:	bd80      	pop	{r7, pc}

0801542a <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 801542a:	b580      	push	{r7, lr}
 801542c:	b082      	sub	sp, #8
 801542e:	af00      	add	r7, sp, #0
 8015430:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 8015432:	f7ed f86f 	bl	8002514 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8015436:	4603      	mov	r3, r0
 8015438:	6879      	ldr	r1, [r7, #4]
 801543a:	4618      	mov	r0, r3
 801543c:	f7ff ffd8 	bl	80153f0 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 8015440:	bf00      	nop
 8015442:	3708      	adds	r7, #8
 8015444:	46bd      	mov	sp, r7
 8015446:	bd80      	pop	{r7, pc}

08015448 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 8015448:	b5b0      	push	{r4, r5, r7, lr}
 801544a:	b082      	sub	sp, #8
 801544c:	af00      	add	r7, sp, #0
 801544e:	6078      	str	r0, [r7, #4]
 8015450:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	4618      	mov	r0, r3
 8015456:	f7ec f80c 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 801545a:	4603      	mov	r3, r0
 801545c:	2b00      	cmp	r3, #0
 801545e:	d001      	beq.n	8015464 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 8015460:	f006 f97c 	bl	801b75c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	68dc      	ldr	r4, [r3, #12]
 8015468:	687d      	ldr	r5, [r7, #4]
 801546a:	463b      	mov	r3, r7
 801546c:	4618      	mov	r0, r3
 801546e:	f7ed fa90 	bl	8002992 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8015472:	4603      	mov	r3, r0
 8015474:	4619      	mov	r1, r3
 8015476:	4628      	mov	r0, r5
 8015478:	47a0      	blx	r4
 801547a:	bf00      	nop
    }
 801547c:	3708      	adds	r7, #8
 801547e:	46bd      	mov	sp, r7
 8015480:	bdb0      	pop	{r4, r5, r7, pc}

08015482 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 8015482:	b5b0      	push	{r4, r5, r7, lr}
 8015484:	b082      	sub	sp, #8
 8015486:	af00      	add	r7, sp, #0
 8015488:	6078      	str	r0, [r7, #4]
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	240f      	movs	r4, #15
 801548e:	461d      	mov	r5, r3
 8015490:	2c00      	cmp	r4, #0
 8015492:	db05      	blt.n	80154a0 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 8015494:	4628      	mov	r0, r5
 8015496:	f7ed f9cd 	bl	8002834 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 801549a:	3510      	adds	r5, #16
 801549c:	3c01      	subs	r4, #1
 801549e:	e7f7      	b.n	8015490 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2200      	movs	r2, #0
 80154a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	4618      	mov	r0, r3
 80154ac:	3708      	adds	r7, #8
 80154ae:	46bd      	mov	sp, r7
 80154b0:	bdb0      	pop	{r4, r5, r7, pc}

080154b2 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 80154b2:	b590      	push	{r4, r7, lr}
 80154b4:	b083      	sub	sp, #12
 80154b6:	af00      	add	r7, sp, #0
 80154b8:	6078      	str	r0, [r7, #4]
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d00a      	beq.n	80154d6 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	429c      	cmp	r4, r3
 80154ca:	d004      	beq.n	80154d6 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 80154cc:	3c10      	subs	r4, #16
 80154ce:	4620      	mov	r0, r4
 80154d0:	f7ec ffdc 	bl	800248c <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 80154d4:	e7f7      	b.n	80154c6 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	4618      	mov	r0, r3
 80154da:	370c      	adds	r7, #12
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd90      	pop	{r4, r7, pc}

080154e0 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 80154e0:	b580      	push	{r7, lr}
 80154e2:	af00      	add	r7, sp, #0
 80154e4:	4801      	ldr	r0, [pc, #4]	; (80154ec <__tcf_0+0xc>)
 80154e6:	f7ff ffe4 	bl	80154b2 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	200016c0 	.word	0x200016c0

080154f0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 80154f0:	b580      	push	{r7, lr}
 80154f2:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 80154f4:	4b12      	ldr	r3, [pc, #72]	; (8015540 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 80154f6:	781b      	ldrb	r3, [r3, #0]
 80154f8:	f3bf 8f5b 	dmb	ish
 80154fc:	b2db      	uxtb	r3, r3
 80154fe:	f003 0301 	and.w	r3, r3, #1
 8015502:	2b00      	cmp	r3, #0
 8015504:	bf0c      	ite	eq
 8015506:	2301      	moveq	r3, #1
 8015508:	2300      	movne	r3, #0
 801550a:	b2db      	uxtb	r3, r3
 801550c:	2b00      	cmp	r3, #0
 801550e:	d013      	beq.n	8015538 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 8015510:	480b      	ldr	r0, [pc, #44]	; (8015540 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 8015512:	f006 f90f 	bl	801b734 <__cxa_guard_acquire>
 8015516:	4603      	mov	r3, r0
 8015518:	2b00      	cmp	r3, #0
 801551a:	bf14      	ite	ne
 801551c:	2301      	movne	r3, #1
 801551e:	2300      	moveq	r3, #0
 8015520:	b2db      	uxtb	r3, r3
 8015522:	2b00      	cmp	r3, #0
 8015524:	d008      	beq.n	8015538 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 8015526:	4807      	ldr	r0, [pc, #28]	; (8015544 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 8015528:	f7ff ffab 	bl	8015482 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 801552c:	4806      	ldr	r0, [pc, #24]	; (8015548 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 801552e:	f006 fc98 	bl	801be62 <atexit>
 8015532:	4803      	ldr	r0, [pc, #12]	; (8015540 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 8015534:	f006 f90a 	bl	801b74c <__cxa_guard_release>
		return instance;
 8015538:	4b02      	ldr	r3, [pc, #8]	; (8015544 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 801553a:	4618      	mov	r0, r3
 801553c:	bd80      	pop	{r7, pc}
 801553e:	bf00      	nop
 8015540:	200017c4 	.word	0x200017c4
 8015544:	200016c0 	.word	0x200016c0
 8015548:	080154e1 	.word	0x080154e1

0801554c <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 801554c:	b580      	push	{r7, lr}
 801554e:	b084      	sub	sp, #16
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8015556:	2300      	movs	r3, #0
 8015558:	60fb      	str	r3, [r7, #12]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8015560:	68fa      	ldr	r2, [r7, #12]
 8015562:	429a      	cmp	r2, r3
 8015564:	d20b      	bcs.n	801557e <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	011b      	lsls	r3, r3, #4
 801556a:	687a      	ldr	r2, [r7, #4]
 801556c:	4413      	add	r3, r2
 801556e:	6839      	ldr	r1, [r7, #0]
 8015570:	4618      	mov	r0, r3
 8015572:	f7ff ff69 	bl	8015448 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	3301      	adds	r3, #1
 801557a:	60fb      	str	r3, [r7, #12]
 801557c:	e7ed      	b.n	801555a <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 801557e:	bf00      	nop
 8015580:	3710      	adds	r7, #16
 8015582:	46bd      	mov	sp, r7
 8015584:	bd80      	pop	{r7, pc}

08015586 <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8015586:	b580      	push	{r7, lr}
 8015588:	b082      	sub	sp, #8
 801558a:	af00      	add	r7, sp, #0
 801558c:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 801558e:	f7ff ffaf 	bl	80154f0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 8015592:	4603      	mov	r3, r0
 8015594:	6879      	ldr	r1, [r7, #4]
 8015596:	4618      	mov	r0, r3
 8015598:	f7ff ffd8 	bl	801554c <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 801559c:	bf00      	nop
 801559e:	3708      	adds	r7, #8
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}

080155a4 <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b084      	sub	sp, #16
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
 80155ac:	460b      	mov	r3, r1
 80155ae:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 80155b0:	2300      	movs	r3, #0
 80155b2:	60fb      	str	r3, [r7, #12]
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80155ba:	68fa      	ldr	r2, [r7, #12]
 80155bc:	429a      	cmp	r2, r3
 80155be:	d20c      	bcs.n	80155da <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	011b      	lsls	r3, r3, #4
 80155c4:	687a      	ldr	r2, [r7, #4]
 80155c6:	4413      	add	r3, r2
 80155c8:	887a      	ldrh	r2, [r7, #2]
 80155ca:	4611      	mov	r1, r2
 80155cc:	4618      	mov	r0, r3
 80155ce:	f000 f819 	bl	8015604 <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	3301      	adds	r3, #1
 80155d6:	60fb      	str	r3, [r7, #12]
 80155d8:	e7ec      	b.n	80155b4 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 80155da:	bf00      	nop
 80155dc:	3710      	adds	r7, #16
 80155de:	46bd      	mov	sp, r7
 80155e0:	bd80      	pop	{r7, pc}

080155e2 <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80155e2:	b580      	push	{r7, lr}
 80155e4:	b082      	sub	sp, #8
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	4603      	mov	r3, r0
 80155ea:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 80155ec:	f7f2 fb30 	bl	8007c50 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 80155f0:	4602      	mov	r2, r0
 80155f2:	88fb      	ldrh	r3, [r7, #6]
 80155f4:	4619      	mov	r1, r3
 80155f6:	4610      	mov	r0, r2
 80155f8:	f7ff ffd4 	bl	80155a4 <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 80155fc:	bf00      	nop
 80155fe:	3708      	adds	r7, #8
 8015600:	46bd      	mov	sp, r7
 8015602:	bd80      	pop	{r7, pc}

08015604 <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 8015604:	b5b0      	push	{r4, r5, r7, lr}
 8015606:	b082      	sub	sp, #8
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
 801560c:	460b      	mov	r3, r1
 801560e:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	4618      	mov	r0, r3
 8015614:	f7eb ff2d 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8015618:	4603      	mov	r3, r0
 801561a:	2b00      	cmp	r3, #0
 801561c:	d001      	beq.n	8015622 <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 801561e:	f006 f89d 	bl	801b75c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	68dc      	ldr	r4, [r3, #12]
 8015626:	687d      	ldr	r5, [r7, #4]
 8015628:	1cbb      	adds	r3, r7, #2
 801562a:	4618      	mov	r0, r3
 801562c:	f7f2 fee9 	bl	8008402 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8015630:	4603      	mov	r3, r0
 8015632:	4619      	mov	r1, r3
 8015634:	4628      	mov	r0, r5
 8015636:	47a0      	blx	r4
 8015638:	bf00      	nop
    }
 801563a:	3708      	adds	r7, #8
 801563c:	46bd      	mov	sp, r7
 801563e:	bdb0      	pop	{r4, r5, r7, pc}

08015640 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>:
	void notify(TIM_HandleTypeDef *htim) {
 8015640:	b580      	push	{r7, lr}
 8015642:	b084      	sub	sp, #16
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
 8015648:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 801564a:	2300      	movs	r3, #0
 801564c:	60fb      	str	r3, [r7, #12]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8015654:	68fa      	ldr	r2, [r7, #12]
 8015656:	429a      	cmp	r2, r3
 8015658:	d20b      	bcs.n	8015672 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0x32>
			m_listeners[i](htim);
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	011b      	lsls	r3, r3, #4
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	4413      	add	r3, r2
 8015662:	6839      	ldr	r1, [r7, #0]
 8015664:	4618      	mov	r0, r3
 8015666:	f000 f817 	bl	8015698 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	3301      	adds	r3, #1
 801566e:	60fb      	str	r3, [r7, #12]
 8015670:	e7ed      	b.n	801564e <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0xe>
	}
 8015672:	bf00      	nop
 8015674:	3710      	adds	r7, #16
 8015676:	46bd      	mov	sp, r7
 8015678:	bd80      	pop	{r7, pc}

0801567a <PeriodElapsedCallback>:

#ifdef __cplusplus
extern "C" {
#endif

void PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 801567a:	b580      	push	{r7, lr}
 801567c:	b082      	sub	sp, #8
 801567e:	af00      	add	r7, sp, #0
 8015680:	6078      	str	r0, [r7, #4]
	TimPeriodElapsedCallbackHandler::getInstance().notify(htim);
 8015682:	f7f2 fbf9 	bl	8007e78 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 8015686:	4603      	mov	r3, r0
 8015688:	6879      	ldr	r1, [r7, #4]
 801568a:	4618      	mov	r0, r3
 801568c:	f7ff ffd8 	bl	8015640 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>
}
 8015690:	bf00      	nop
 8015692:	3708      	adds	r7, #8
 8015694:	46bd      	mov	sp, r7
 8015696:	bd80      	pop	{r7, pc}

08015698 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 8015698:	b5b0      	push	{r4, r5, r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7eb fee4 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80156aa:	4603      	mov	r3, r0
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d001      	beq.n	80156b4 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 80156b0:	f006 f854 	bl	801b75c <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	68dc      	ldr	r4, [r3, #12]
 80156b8:	687d      	ldr	r5, [r7, #4]
 80156ba:	463b      	mov	r3, r7
 80156bc:	4618      	mov	r0, r3
 80156be:	f7f2 ffa8 	bl	8008612 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80156c2:	4603      	mov	r3, r0
 80156c4:	4619      	mov	r1, r3
 80156c6:	4628      	mov	r0, r5
 80156c8:	47a0      	blx	r4
 80156ca:	bf00      	nop
    }
 80156cc:	3708      	adds	r7, #8
 80156ce:	46bd      	mov	sp, r7
 80156d0:	bdb0      	pop	{r4, r5, r7, pc}

080156d2 <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80156d2:	b480      	push	{r7}
 80156d4:	b085      	sub	sp, #20
 80156d6:	af00      	add	r7, sp, #0
 80156d8:	60b9      	str	r1, [r7, #8]
 80156da:	607a      	str	r2, [r7, #4]
 80156dc:	603b      	str	r3, [r7, #0]
 80156de:	4603      	mov	r3, r0
 80156e0:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80156e2:	bf00      	nop
 80156e4:	3714      	adds	r7, #20
 80156e6:	46bd      	mov	sp, r7
 80156e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ec:	4770      	bx	lr

080156ee <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80156ee:	b580      	push	{r7, lr}
 80156f0:	b084      	sub	sp, #16
 80156f2:	af00      	add	r7, sp, #0
 80156f4:	60b9      	str	r1, [r7, #8]
 80156f6:	607a      	str	r2, [r7, #4]
 80156f8:	603b      	str	r3, [r7, #0]
 80156fa:	4603      	mov	r3, r0
 80156fc:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80156fe:	7bfb      	ldrb	r3, [r7, #15]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d003      	beq.n	801570c <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 8015704:	7bfb      	ldrb	r3, [r7, #15]
 8015706:	4618      	mov	r0, r3
 8015708:	f001 fc71 	bl	8016fee <_putchar>
  }
}
 801570c:	bf00      	nop
 801570e:	3710      	adds	r7, #16
 8015710:	46bd      	mov	sp, r7
 8015712:	bd80      	pop	{r7, pc}

08015714 <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8015714:	b480      	push	{r7}
 8015716:	b085      	sub	sp, #20
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	60fb      	str	r3, [r7, #12]
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	781b      	ldrb	r3, [r3, #0]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d006      	beq.n	8015738 <_ZL10_strnlen_sPKcj+0x24>
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	1e5a      	subs	r2, r3, #1
 801572e:	603a      	str	r2, [r7, #0]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d001      	beq.n	8015738 <_ZL10_strnlen_sPKcj+0x24>
 8015734:	2301      	movs	r3, #1
 8015736:	e000      	b.n	801573a <_ZL10_strnlen_sPKcj+0x26>
 8015738:	2300      	movs	r3, #0
 801573a:	2b00      	cmp	r3, #0
 801573c:	d003      	beq.n	8015746 <_ZL10_strnlen_sPKcj+0x32>
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	3301      	adds	r3, #1
 8015742:	60fb      	str	r3, [r7, #12]
 8015744:	e7ed      	b.n	8015722 <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 8015746:	68fa      	ldr	r2, [r7, #12]
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	1ad3      	subs	r3, r2, r3
}
 801574c:	4618      	mov	r0, r3
 801574e:	3714      	adds	r7, #20
 8015750:	46bd      	mov	sp, r7
 8015752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015756:	4770      	bx	lr

08015758 <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8015758:	b480      	push	{r7}
 801575a:	b083      	sub	sp, #12
 801575c:	af00      	add	r7, sp, #0
 801575e:	4603      	mov	r3, r0
 8015760:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8015762:	79fb      	ldrb	r3, [r7, #7]
 8015764:	2b2f      	cmp	r3, #47	; 0x2f
 8015766:	d904      	bls.n	8015772 <_ZL9_is_digitc+0x1a>
 8015768:	79fb      	ldrb	r3, [r7, #7]
 801576a:	2b39      	cmp	r3, #57	; 0x39
 801576c:	d801      	bhi.n	8015772 <_ZL9_is_digitc+0x1a>
 801576e:	2301      	movs	r3, #1
 8015770:	e000      	b.n	8015774 <_ZL9_is_digitc+0x1c>
 8015772:	2300      	movs	r3, #0
}
 8015774:	4618      	mov	r0, r3
 8015776:	370c      	adds	r7, #12
 8015778:	46bd      	mov	sp, r7
 801577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577e:	4770      	bx	lr

08015780 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b084      	sub	sp, #16
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8015788:	2300      	movs	r3, #0
 801578a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	781b      	ldrb	r3, [r3, #0]
 8015792:	4618      	mov	r0, r3
 8015794:	f7ff ffe0 	bl	8015758 <_ZL9_is_digitc>
 8015798:	4603      	mov	r3, r0
 801579a:	2b00      	cmp	r3, #0
 801579c:	d00f      	beq.n	80157be <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 801579e:	68fa      	ldr	r2, [r7, #12]
 80157a0:	4613      	mov	r3, r2
 80157a2:	009b      	lsls	r3, r3, #2
 80157a4:	4413      	add	r3, r2
 80157a6:	005b      	lsls	r3, r3, #1
 80157a8:	4618      	mov	r0, r3
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	1c59      	adds	r1, r3, #1
 80157b0:	687a      	ldr	r2, [r7, #4]
 80157b2:	6011      	str	r1, [r2, #0]
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	4403      	add	r3, r0
 80157b8:	3b30      	subs	r3, #48	; 0x30
 80157ba:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80157bc:	e7e6      	b.n	801578c <_ZL5_atoiPPKc+0xc>
  }
  return i;
 80157be:	68fb      	ldr	r3, [r7, #12]
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3710      	adds	r7, #16
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}

080157c8 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80157c8:	b590      	push	{r4, r7, lr}
 80157ca:	b087      	sub	sp, #28
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	60f8      	str	r0, [r7, #12]
 80157d0:	60b9      	str	r1, [r7, #8]
 80157d2:	607a      	str	r2, [r7, #4]
 80157d4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80157da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157dc:	f003 0302 	and.w	r3, r3, #2
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d116      	bne.n	8015812 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 80157e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80157e6:	f003 0301 	and.w	r3, r3, #1
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d111      	bne.n	8015812 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 80157ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f0:	617b      	str	r3, [r7, #20]
 80157f2:	697a      	ldr	r2, [r7, #20]
 80157f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d20b      	bcs.n	8015812 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 80157fa:	687a      	ldr	r2, [r7, #4]
 80157fc:	1c53      	adds	r3, r2, #1
 80157fe:	607b      	str	r3, [r7, #4]
 8015800:	68fc      	ldr	r4, [r7, #12]
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	68b9      	ldr	r1, [r7, #8]
 8015806:	2020      	movs	r0, #32
 8015808:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 801580a:	697b      	ldr	r3, [r7, #20]
 801580c:	3301      	adds	r3, #1
 801580e:	617b      	str	r3, [r7, #20]
 8015810:	e7ef      	b.n	80157f2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 8015812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015814:	2b00      	cmp	r3, #0
 8015816:	d00e      	beq.n	8015836 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 8015818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801581a:	3b01      	subs	r3, #1
 801581c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801581e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015822:	4413      	add	r3, r2
 8015824:	7818      	ldrb	r0, [r3, #0]
 8015826:	687a      	ldr	r2, [r7, #4]
 8015828:	1c53      	adds	r3, r2, #1
 801582a:	607b      	str	r3, [r7, #4]
 801582c:	68fc      	ldr	r4, [r7, #12]
 801582e:	683b      	ldr	r3, [r7, #0]
 8015830:	68b9      	ldr	r1, [r7, #8]
 8015832:	47a0      	blx	r4
  while (len) {
 8015834:	e7ed      	b.n	8015812 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8015836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015838:	f003 0302 	and.w	r3, r3, #2
 801583c:	2b00      	cmp	r3, #0
 801583e:	d00e      	beq.n	801585e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 8015840:	687a      	ldr	r2, [r7, #4]
 8015842:	693b      	ldr	r3, [r7, #16]
 8015844:	1ad3      	subs	r3, r2, r3
 8015846:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015848:	429a      	cmp	r2, r3
 801584a:	d908      	bls.n	801585e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 801584c:	687a      	ldr	r2, [r7, #4]
 801584e:	1c53      	adds	r3, r2, #1
 8015850:	607b      	str	r3, [r7, #4]
 8015852:	68fc      	ldr	r4, [r7, #12]
 8015854:	683b      	ldr	r3, [r7, #0]
 8015856:	68b9      	ldr	r1, [r7, #8]
 8015858:	2020      	movs	r0, #32
 801585a:	47a0      	blx	r4
    while (idx - start_idx < width) {
 801585c:	e7f0      	b.n	8015840 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 801585e:	687b      	ldr	r3, [r7, #4]
}
 8015860:	4618      	mov	r0, r3
 8015862:	371c      	adds	r7, #28
 8015864:	46bd      	mov	sp, r7
 8015866:	bd90      	pop	{r4, r7, pc}

08015868 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b088      	sub	sp, #32
 801586c:	af04      	add	r7, sp, #16
 801586e:	60f8      	str	r0, [r7, #12]
 8015870:	60b9      	str	r1, [r7, #8]
 8015872:	607a      	str	r2, [r7, #4]
 8015874:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8015876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015878:	f003 0302 	and.w	r3, r3, #2
 801587c:	2b00      	cmp	r3, #0
 801587e:	d136      	bne.n	80158ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8015880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015882:	2b00      	cmp	r3, #0
 8015884:	d010      	beq.n	80158a8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 8015886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015888:	f003 0301 	and.w	r3, r3, #1
 801588c:	2b00      	cmp	r3, #0
 801588e:	d00b      	beq.n	80158a8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 8015890:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d104      	bne.n	80158a2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 8015898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801589a:	f003 030c 	and.w	r3, r3, #12
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d002      	beq.n	80158a8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 80158a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a4:	3b01      	subs	r3, #1
 80158a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80158a8:	69fa      	ldr	r2, [r7, #28]
 80158aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ac:	429a      	cmp	r2, r3
 80158ae:	d20a      	bcs.n	80158c6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 80158b0:	69fb      	ldr	r3, [r7, #28]
 80158b2:	2b1f      	cmp	r3, #31
 80158b4:	d807      	bhi.n	80158c6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 80158b6:	69fb      	ldr	r3, [r7, #28]
 80158b8:	1c5a      	adds	r2, r3, #1
 80158ba:	61fa      	str	r2, [r7, #28]
 80158bc:	69ba      	ldr	r2, [r7, #24]
 80158be:	4413      	add	r3, r2
 80158c0:	2230      	movs	r2, #48	; 0x30
 80158c2:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80158c4:	e7f0      	b.n	80158a8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80158c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c8:	f003 0301 	and.w	r3, r3, #1
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d00e      	beq.n	80158ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 80158d0:	69fa      	ldr	r2, [r7, #28]
 80158d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d4:	429a      	cmp	r2, r3
 80158d6:	d20a      	bcs.n	80158ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 80158d8:	69fb      	ldr	r3, [r7, #28]
 80158da:	2b1f      	cmp	r3, #31
 80158dc:	d807      	bhi.n	80158ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 80158de:	69fb      	ldr	r3, [r7, #28]
 80158e0:	1c5a      	adds	r2, r3, #1
 80158e2:	61fa      	str	r2, [r7, #28]
 80158e4:	69ba      	ldr	r2, [r7, #24]
 80158e6:	4413      	add	r3, r2
 80158e8:	2230      	movs	r2, #48	; 0x30
 80158ea:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80158ec:	e7eb      	b.n	80158c6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80158ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f0:	f003 0310 	and.w	r3, r3, #16
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d058      	beq.n	80159aa <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80158f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d116      	bne.n	8015930 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8015902:	69fb      	ldr	r3, [r7, #28]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d013      	beq.n	8015930 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8015908:	69fa      	ldr	r2, [r7, #28]
 801590a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801590c:	429a      	cmp	r2, r3
 801590e:	d003      	beq.n	8015918 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 8015910:	69fa      	ldr	r2, [r7, #28]
 8015912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015914:	429a      	cmp	r2, r3
 8015916:	d10b      	bne.n	8015930 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 8015918:	69fb      	ldr	r3, [r7, #28]
 801591a:	3b01      	subs	r3, #1
 801591c:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 801591e:	69fb      	ldr	r3, [r7, #28]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d005      	beq.n	8015930 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8015924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015926:	2b10      	cmp	r3, #16
 8015928:	d102      	bne.n	8015930 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 801592a:	69fb      	ldr	r3, [r7, #28]
 801592c:	3b01      	subs	r3, #1
 801592e:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015932:	2b10      	cmp	r3, #16
 8015934:	d10f      	bne.n	8015956 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 8015936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015938:	f003 0320 	and.w	r3, r3, #32
 801593c:	2b00      	cmp	r3, #0
 801593e:	d10a      	bne.n	8015956 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	2b1f      	cmp	r3, #31
 8015944:	d807      	bhi.n	8015956 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 8015946:	69fb      	ldr	r3, [r7, #28]
 8015948:	1c5a      	adds	r2, r3, #1
 801594a:	61fa      	str	r2, [r7, #28]
 801594c:	69ba      	ldr	r2, [r7, #24]
 801594e:	4413      	add	r3, r2
 8015950:	2278      	movs	r2, #120	; 0x78
 8015952:	701a      	strb	r2, [r3, #0]
 8015954:	e01f      	b.n	8015996 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8015956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015958:	2b10      	cmp	r3, #16
 801595a:	d10f      	bne.n	801597c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 801595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801595e:	f003 0320 	and.w	r3, r3, #32
 8015962:	2b00      	cmp	r3, #0
 8015964:	d00a      	beq.n	801597c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8015966:	69fb      	ldr	r3, [r7, #28]
 8015968:	2b1f      	cmp	r3, #31
 801596a:	d807      	bhi.n	801597c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 801596c:	69fb      	ldr	r3, [r7, #28]
 801596e:	1c5a      	adds	r2, r3, #1
 8015970:	61fa      	str	r2, [r7, #28]
 8015972:	69ba      	ldr	r2, [r7, #24]
 8015974:	4413      	add	r3, r2
 8015976:	2258      	movs	r2, #88	; 0x58
 8015978:	701a      	strb	r2, [r3, #0]
 801597a:	e00c      	b.n	8015996 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801597e:	2b02      	cmp	r3, #2
 8015980:	d109      	bne.n	8015996 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 8015982:	69fb      	ldr	r3, [r7, #28]
 8015984:	2b1f      	cmp	r3, #31
 8015986:	d806      	bhi.n	8015996 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 8015988:	69fb      	ldr	r3, [r7, #28]
 801598a:	1c5a      	adds	r2, r3, #1
 801598c:	61fa      	str	r2, [r7, #28]
 801598e:	69ba      	ldr	r2, [r7, #24]
 8015990:	4413      	add	r3, r2
 8015992:	2262      	movs	r2, #98	; 0x62
 8015994:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8015996:	69fb      	ldr	r3, [r7, #28]
 8015998:	2b1f      	cmp	r3, #31
 801599a:	d806      	bhi.n	80159aa <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 801599c:	69fb      	ldr	r3, [r7, #28]
 801599e:	1c5a      	adds	r2, r3, #1
 80159a0:	61fa      	str	r2, [r7, #28]
 80159a2:	69ba      	ldr	r2, [r7, #24]
 80159a4:	4413      	add	r3, r2
 80159a6:	2230      	movs	r2, #48	; 0x30
 80159a8:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80159aa:	69fb      	ldr	r3, [r7, #28]
 80159ac:	2b1f      	cmp	r3, #31
 80159ae:	d824      	bhi.n	80159fa <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 80159b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d007      	beq.n	80159c8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 80159b8:	69fb      	ldr	r3, [r7, #28]
 80159ba:	1c5a      	adds	r2, r3, #1
 80159bc:	61fa      	str	r2, [r7, #28]
 80159be:	69ba      	ldr	r2, [r7, #24]
 80159c0:	4413      	add	r3, r2
 80159c2:	222d      	movs	r2, #45	; 0x2d
 80159c4:	701a      	strb	r2, [r3, #0]
 80159c6:	e018      	b.n	80159fa <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80159c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ca:	f003 0304 	and.w	r3, r3, #4
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d007      	beq.n	80159e2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80159d2:	69fb      	ldr	r3, [r7, #28]
 80159d4:	1c5a      	adds	r2, r3, #1
 80159d6:	61fa      	str	r2, [r7, #28]
 80159d8:	69ba      	ldr	r2, [r7, #24]
 80159da:	4413      	add	r3, r2
 80159dc:	222b      	movs	r2, #43	; 0x2b
 80159de:	701a      	strb	r2, [r3, #0]
 80159e0:	e00b      	b.n	80159fa <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80159e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159e4:	f003 0308 	and.w	r3, r3, #8
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d006      	beq.n	80159fa <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 80159ec:	69fb      	ldr	r3, [r7, #28]
 80159ee:	1c5a      	adds	r2, r3, #1
 80159f0:	61fa      	str	r2, [r7, #28]
 80159f2:	69ba      	ldr	r2, [r7, #24]
 80159f4:	4413      	add	r3, r2
 80159f6:	2220      	movs	r2, #32
 80159f8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80159fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159fc:	9303      	str	r3, [sp, #12]
 80159fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a00:	9302      	str	r3, [sp, #8]
 8015a02:	69fb      	ldr	r3, [r7, #28]
 8015a04:	9301      	str	r3, [sp, #4]
 8015a06:	69bb      	ldr	r3, [r7, #24]
 8015a08:	9300      	str	r3, [sp, #0]
 8015a0a:	683b      	ldr	r3, [r7, #0]
 8015a0c:	687a      	ldr	r2, [r7, #4]
 8015a0e:	68b9      	ldr	r1, [r7, #8]
 8015a10:	68f8      	ldr	r0, [r7, #12]
 8015a12:	f7ff fed9 	bl	80157c8 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8015a16:	4603      	mov	r3, r0
}
 8015a18:	4618      	mov	r0, r3
 8015a1a:	3710      	adds	r7, #16
 8015a1c:	46bd      	mov	sp, r7
 8015a1e:	bd80      	pop	{r7, pc}

08015a20 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b096      	sub	sp, #88	; 0x58
 8015a24:	af08      	add	r7, sp, #32
 8015a26:	60f8      	str	r0, [r7, #12]
 8015a28:	60b9      	str	r1, [r7, #8]
 8015a2a:	607a      	str	r2, [r7, #4]
 8015a2c:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8015a2e:	2300      	movs	r3, #0
 8015a30:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8015a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d103      	bne.n	8015a40 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 8015a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a3a:	f023 0310 	bic.w	r3, r3, #16
 8015a3e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d002      	beq.n	8015a50 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 8015a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d033      	beq.n	8015ab8 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 8015a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015a54:	fbb3 f2f2 	udiv	r2, r3, r2
 8015a58:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015a5a:	fb01 f202 	mul.w	r2, r1, r2
 8015a5e:	1a9b      	subs	r3, r3, r2
 8015a60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015a64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015a68:	2b09      	cmp	r3, #9
 8015a6a:	d804      	bhi.n	8015a76 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 8015a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015a70:	3330      	adds	r3, #48	; 0x30
 8015a72:	b2da      	uxtb	r2, r3
 8015a74:	e00d      	b.n	8015a92 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 8015a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a78:	f003 0320 	and.w	r3, r3, #32
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d001      	beq.n	8015a84 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 8015a80:	2241      	movs	r2, #65	; 0x41
 8015a82:	e000      	b.n	8015a86 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 8015a84:	2261      	movs	r2, #97	; 0x61
 8015a86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015a8a:	4413      	add	r3, r2
 8015a8c:	b2db      	uxtb	r3, r3
 8015a8e:	3b0a      	subs	r3, #10
 8015a90:	b2da      	uxtb	r2, r3
 8015a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a94:	1c59      	adds	r1, r3, #1
 8015a96:	6379      	str	r1, [r7, #52]	; 0x34
 8015a98:	3338      	adds	r3, #56	; 0x38
 8015a9a:	443b      	add	r3, r7
 8015a9c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8015aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8015aa8:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8015aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d003      	beq.n	8015ab8 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 8015ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ab2:	2b1f      	cmp	r3, #31
 8015ab4:	d800      	bhi.n	8015ab8 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 8015ab6:	e7cb      	b.n	8015a50 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8015ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015aba:	9306      	str	r3, [sp, #24]
 8015abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015abe:	9305      	str	r3, [sp, #20]
 8015ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ac2:	9304      	str	r3, [sp, #16]
 8015ac4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015ac6:	9303      	str	r3, [sp, #12]
 8015ac8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8015acc:	9302      	str	r3, [sp, #8]
 8015ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ad0:	9301      	str	r3, [sp, #4]
 8015ad2:	f107 0310 	add.w	r3, r7, #16
 8015ad6:	9300      	str	r3, [sp, #0]
 8015ad8:	683b      	ldr	r3, [r7, #0]
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	68b9      	ldr	r1, [r7, #8]
 8015ade:	68f8      	ldr	r0, [r7, #12]
 8015ae0:	f7ff fec2 	bl	8015868 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 8015ae4:	4603      	mov	r3, r0
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3738      	adds	r7, #56	; 0x38
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}

08015aee <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015aee:	b580      	push	{r7, lr}
 8015af0:	b096      	sub	sp, #88	; 0x58
 8015af2:	af08      	add	r7, sp, #32
 8015af4:	60f8      	str	r0, [r7, #12]
 8015af6:	60b9      	str	r1, [r7, #8]
 8015af8:	607a      	str	r2, [r7, #4]
 8015afa:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8015afc:	2300      	movs	r3, #0
 8015afe:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8015b00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015b04:	4313      	orrs	r3, r2
 8015b06:	d103      	bne.n	8015b10 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 8015b08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b0a:	f023 0310 	bic.w	r3, r3, #16
 8015b0e:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8015b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d003      	beq.n	8015b22 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 8015b1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015b1e:	4313      	orrs	r3, r2
 8015b20:	d038      	beq.n	8015b94 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 8015b22:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8015b26:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015b2a:	f7eb f8ad 	bl	8000c88 <__aeabi_uldivmod>
 8015b2e:	4613      	mov	r3, r2
 8015b30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8015b34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015b38:	2b09      	cmp	r3, #9
 8015b3a:	d804      	bhi.n	8015b46 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 8015b3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015b40:	3330      	adds	r3, #48	; 0x30
 8015b42:	b2da      	uxtb	r2, r3
 8015b44:	e00d      	b.n	8015b62 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 8015b46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015b48:	f003 0320 	and.w	r3, r3, #32
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d001      	beq.n	8015b54 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 8015b50:	2241      	movs	r2, #65	; 0x41
 8015b52:	e000      	b.n	8015b56 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 8015b54:	2261      	movs	r2, #97	; 0x61
 8015b56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8015b5a:	4413      	add	r3, r2
 8015b5c:	b2db      	uxtb	r3, r3
 8015b5e:	3b0a      	subs	r3, #10
 8015b60:	b2da      	uxtb	r2, r3
 8015b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b64:	1c59      	adds	r1, r3, #1
 8015b66:	6379      	str	r1, [r7, #52]	; 0x34
 8015b68:	3338      	adds	r3, #56	; 0x38
 8015b6a:	443b      	add	r3, r7
 8015b6c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8015b70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8015b74:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8015b78:	f7eb f886 	bl	8000c88 <__aeabi_uldivmod>
 8015b7c:	4602      	mov	r2, r0
 8015b7e:	460b      	mov	r3, r1
 8015b80:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8015b84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8015b88:	4313      	orrs	r3, r2
 8015b8a:	d003      	beq.n	8015b94 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 8015b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b8e:	2b1f      	cmp	r3, #31
 8015b90:	d800      	bhi.n	8015b94 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 8015b92:	e7c6      	b.n	8015b22 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8015b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015b98:	9206      	str	r2, [sp, #24]
 8015b9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015b9c:	9205      	str	r2, [sp, #20]
 8015b9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015ba0:	9204      	str	r2, [sp, #16]
 8015ba2:	9303      	str	r3, [sp, #12]
 8015ba4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8015ba8:	9302      	str	r3, [sp, #8]
 8015baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015bac:	9301      	str	r3, [sp, #4]
 8015bae:	f107 0310 	add.w	r3, r7, #16
 8015bb2:	9300      	str	r3, [sp, #0]
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	687a      	ldr	r2, [r7, #4]
 8015bb8:	68b9      	ldr	r1, [r7, #8]
 8015bba:	68f8      	ldr	r0, [r7, #12]
 8015bbc:	f7ff fe54 	bl	8015868 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 8015bc0:	4603      	mov	r3, r0
}
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	3738      	adds	r7, #56	; 0x38
 8015bc6:	46bd      	mov	sp, r7
 8015bc8:	bd80      	pop	{r7, pc}
 8015bca:	0000      	movs	r0, r0
 8015bcc:	0000      	movs	r0, r0
	...

08015bd0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8015bd0:	b590      	push	{r4, r7, lr}
 8015bd2:	b09d      	sub	sp, #116	; 0x74
 8015bd4:	af04      	add	r7, sp, #16
 8015bd6:	6178      	str	r0, [r7, #20]
 8015bd8:	6139      	str	r1, [r7, #16]
 8015bda:	60fa      	str	r2, [r7, #12]
 8015bdc:	60bb      	str	r3, [r7, #8]
 8015bde:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8015be2:	2300      	movs	r3, #0
 8015be4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8015be6:	f04f 0200 	mov.w	r2, #0
 8015bea:	f04f 0300 	mov.w	r3, #0
 8015bee:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8015bf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015bf6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015bfa:	f7ea ff65 	bl	8000ac8 <__aeabi_dcmpeq>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d10f      	bne.n	8015c24 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8015c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c06:	9303      	str	r3, [sp, #12]
 8015c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c0a:	9302      	str	r3, [sp, #8]
 8015c0c:	2303      	movs	r3, #3
 8015c0e:	9301      	str	r3, [sp, #4]
 8015c10:	4ba7      	ldr	r3, [pc, #668]	; (8015eb0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 8015c12:	9300      	str	r3, [sp, #0]
 8015c14:	68bb      	ldr	r3, [r7, #8]
 8015c16:	68fa      	ldr	r2, [r7, #12]
 8015c18:	6939      	ldr	r1, [r7, #16]
 8015c1a:	6978      	ldr	r0, [r7, #20]
 8015c1c:	f7ff fdd4 	bl	80157c8 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8015c20:	4603      	mov	r3, r0
 8015c22:	e230      	b.n	8016086 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 8015c24:	f04f 32ff 	mov.w	r2, #4294967295
 8015c28:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8015c2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015c30:	f7ea ff54 	bl	8000adc <__aeabi_dcmplt>
 8015c34:	4603      	mov	r3, r0
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d00f      	beq.n	8015c5a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8015c3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c3c:	9303      	str	r3, [sp, #12]
 8015c3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c40:	9302      	str	r3, [sp, #8]
 8015c42:	2304      	movs	r3, #4
 8015c44:	9301      	str	r3, [sp, #4]
 8015c46:	4b9b      	ldr	r3, [pc, #620]	; (8015eb4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 8015c48:	9300      	str	r3, [sp, #0]
 8015c4a:	68bb      	ldr	r3, [r7, #8]
 8015c4c:	68fa      	ldr	r2, [r7, #12]
 8015c4e:	6939      	ldr	r1, [r7, #16]
 8015c50:	6978      	ldr	r0, [r7, #20]
 8015c52:	f7ff fdb9 	bl	80157c8 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8015c56:	4603      	mov	r3, r0
 8015c58:	e215      	b.n	8016086 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 8015c5a:	f04f 32ff 	mov.w	r2, #4294967295
 8015c5e:	4b96      	ldr	r3, [pc, #600]	; (8015eb8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 8015c60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015c64:	f7ea ff58 	bl	8000b18 <__aeabi_dcmpgt>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d01d      	beq.n	8015caa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8015c6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015c70:	f003 0304 	and.w	r3, r3, #4
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d001      	beq.n	8015c7c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 8015c78:	4b90      	ldr	r3, [pc, #576]	; (8015ebc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 8015c7a:	e000      	b.n	8015c7e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 8015c7c:	4b90      	ldr	r3, [pc, #576]	; (8015ec0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 8015c7e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8015c80:	f002 0204 	and.w	r2, r2, #4
 8015c84:	2a00      	cmp	r2, #0
 8015c86:	d001      	beq.n	8015c8c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 8015c88:	2204      	movs	r2, #4
 8015c8a:	e000      	b.n	8015c8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 8015c8c:	2203      	movs	r2, #3
 8015c8e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8015c90:	9103      	str	r1, [sp, #12]
 8015c92:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8015c94:	9102      	str	r1, [sp, #8]
 8015c96:	9201      	str	r2, [sp, #4]
 8015c98:	9300      	str	r3, [sp, #0]
 8015c9a:	68bb      	ldr	r3, [r7, #8]
 8015c9c:	68fa      	ldr	r2, [r7, #12]
 8015c9e:	6939      	ldr	r1, [r7, #16]
 8015ca0:	6978      	ldr	r0, [r7, #20]
 8015ca2:	f7ff fd91 	bl	80157c8 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8015ca6:	4603      	mov	r3, r0
 8015ca8:	e1ed      	b.n	8016086 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8015caa:	a37d      	add	r3, pc, #500	; (adr r3, 8015ea0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 8015cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015cb4:	f7ea ff30 	bl	8000b18 <__aeabi_dcmpgt>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d109      	bne.n	8015cd2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 8015cbe:	a37a      	add	r3, pc, #488	; (adr r3, 8015ea8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 8015cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015cc8:	f7ea ff08 	bl	8000adc <__aeabi_dcmplt>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d00f      	beq.n	8015cf2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8015cd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015cd4:	9302      	str	r3, [sp, #8]
 8015cd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015cd8:	9301      	str	r3, [sp, #4]
 8015cda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015cdc:	9300      	str	r3, [sp, #0]
 8015cde:	ed97 0b00 	vldr	d0, [r7]
 8015ce2:	68bb      	ldr	r3, [r7, #8]
 8015ce4:	68fa      	ldr	r2, [r7, #12]
 8015ce6:	6939      	ldr	r1, [r7, #16]
 8015ce8:	6978      	ldr	r0, [r7, #20]
 8015cea:	f000 f9d5 	bl	8016098 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	e1c9      	b.n	8016086 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8015cf8:	f04f 0200 	mov.w	r2, #0
 8015cfc:	f04f 0300 	mov.w	r3, #0
 8015d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015d04:	f7ea feea 	bl	8000adc <__aeabi_dcmplt>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d00e      	beq.n	8015d2c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 8015d0e:	2301      	movs	r3, #1
 8015d10:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8015d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015d18:	f04f 0000 	mov.w	r0, #0
 8015d1c:	f04f 0100 	mov.w	r1, #0
 8015d20:	f7ea fab2 	bl	8000288 <__aeabi_dsub>
 8015d24:	4602      	mov	r2, r0
 8015d26:	460b      	mov	r3, r1
 8015d28:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8015d2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d101      	bne.n	8015d3a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8015d36:	2306      	movs	r3, #6
 8015d38:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8015d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015d3c:	2b1f      	cmp	r3, #31
 8015d3e:	d80e      	bhi.n	8015d5e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 8015d40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d42:	2b09      	cmp	r3, #9
 8015d44:	d90b      	bls.n	8015d5e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 8015d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015d48:	1c5a      	adds	r2, r3, #1
 8015d4a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8015d4c:	3360      	adds	r3, #96	; 0x60
 8015d4e:	443b      	add	r3, r7
 8015d50:	2230      	movs	r2, #48	; 0x30
 8015d52:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8015d56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d58:	3b01      	subs	r3, #1
 8015d5a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8015d5c:	e7ed      	b.n	8015d3a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 8015d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015d62:	f7ea fef9 	bl	8000b58 <__aeabi_d2iz>
 8015d66:	4603      	mov	r3, r0
 8015d68:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8015d6a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015d6c:	f7ea fbda 	bl	8000524 <__aeabi_i2d>
 8015d70:	4602      	mov	r2, r0
 8015d72:	460b      	mov	r3, r1
 8015d74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015d78:	f7ea fa86 	bl	8000288 <__aeabi_dsub>
 8015d7c:	4602      	mov	r2, r0
 8015d7e:	460b      	mov	r3, r1
 8015d80:	4610      	mov	r0, r2
 8015d82:	4619      	mov	r1, r3
 8015d84:	4a4f      	ldr	r2, [pc, #316]	; (8015ec4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 8015d86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d88:	00db      	lsls	r3, r3, #3
 8015d8a:	4413      	add	r3, r2
 8015d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d90:	f7ea fc32 	bl	80005f8 <__aeabi_dmul>
 8015d94:	4602      	mov	r2, r0
 8015d96:	460b      	mov	r3, r1
 8015d98:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8015d9c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8015da0:	f7ea ff02 	bl	8000ba8 <__aeabi_d2uiz>
 8015da4:	4603      	mov	r3, r0
 8015da6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8015da8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015daa:	f7ea fbab 	bl	8000504 <__aeabi_ui2d>
 8015dae:	4602      	mov	r2, r0
 8015db0:	460b      	mov	r3, r1
 8015db2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8015db6:	f7ea fa67 	bl	8000288 <__aeabi_dsub>
 8015dba:	4602      	mov	r2, r0
 8015dbc:	460b      	mov	r3, r1
 8015dbe:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8015dc2:	f04f 0200 	mov.w	r2, #0
 8015dc6:	4b40      	ldr	r3, [pc, #256]	; (8015ec8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8015dc8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8015dcc:	f7ea fea4 	bl	8000b18 <__aeabi_dcmpgt>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d016      	beq.n	8015e04 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 8015dd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015dd8:	3301      	adds	r3, #1
 8015dda:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8015ddc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015dde:	f7ea fb91 	bl	8000504 <__aeabi_ui2d>
 8015de2:	4a38      	ldr	r2, [pc, #224]	; (8015ec4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 8015de4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015de6:	00db      	lsls	r3, r3, #3
 8015de8:	4413      	add	r3, r2
 8015dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015dee:	f7ea fe89 	bl	8000b04 <__aeabi_dcmpge>
 8015df2:	4603      	mov	r3, r0
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d01a      	beq.n	8015e2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8015dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015dfe:	3301      	adds	r3, #1
 8015e00:	657b      	str	r3, [r7, #84]	; 0x54
 8015e02:	e014      	b.n	8015e2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 8015e04:	f04f 0200 	mov.w	r2, #0
 8015e08:	4b2f      	ldr	r3, [pc, #188]	; (8015ec8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8015e0a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8015e0e:	f7ea fe65 	bl	8000adc <__aeabi_dcmplt>
 8015e12:	4603      	mov	r3, r0
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d10a      	bne.n	8015e2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8015e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d004      	beq.n	8015e28 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 8015e1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e20:	f003 0301 	and.w	r3, r3, #1
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d002      	beq.n	8015e2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8015e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015e2a:	3301      	adds	r3, #1
 8015e2c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8015e2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d14b      	bne.n	8015ecc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 8015e34:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015e36:	f7ea fb75 	bl	8000524 <__aeabi_i2d>
 8015e3a:	4602      	mov	r2, r0
 8015e3c:	460b      	mov	r3, r1
 8015e3e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015e42:	f7ea fa21 	bl	8000288 <__aeabi_dsub>
 8015e46:	4602      	mov	r2, r0
 8015e48:	460b      	mov	r3, r1
 8015e4a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8015e4e:	2301      	movs	r3, #1
 8015e50:	461c      	mov	r4, r3
 8015e52:	f04f 0200 	mov.w	r2, #0
 8015e56:	4b1c      	ldr	r3, [pc, #112]	; (8015ec8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8015e58:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8015e5c:	f7ea fe3e 	bl	8000adc <__aeabi_dcmplt>
 8015e60:	4603      	mov	r3, r0
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d101      	bne.n	8015e6a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 8015e66:	2300      	movs	r3, #0
 8015e68:	461c      	mov	r4, r3
 8015e6a:	b2e3      	uxtb	r3, r4
 8015e6c:	f083 0301 	eor.w	r3, r3, #1
 8015e70:	b2db      	uxtb	r3, r3
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d109      	bne.n	8015e8a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 8015e76:	f04f 0200 	mov.w	r2, #0
 8015e7a:	4b13      	ldr	r3, [pc, #76]	; (8015ec8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8015e7c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8015e80:	f7ea fe4a 	bl	8000b18 <__aeabi_dcmpgt>
 8015e84:	4603      	mov	r3, r0
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d06d      	beq.n	8015f66 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8015e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e8c:	f003 0301 	and.w	r3, r3, #1
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d068      	beq.n	8015f66 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8015e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015e96:	3301      	adds	r3, #1
 8015e98:	657b      	str	r3, [r7, #84]	; 0x54
 8015e9a:	e064      	b.n	8015f66 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8015e9c:	f3af 8000 	nop.w
 8015ea0:	00000000 	.word	0x00000000
 8015ea4:	41cdcd65 	.word	0x41cdcd65
 8015ea8:	00000000 	.word	0x00000000
 8015eac:	c1cdcd65 	.word	0xc1cdcd65
 8015eb0:	0801f0b0 	.word	0x0801f0b0
 8015eb4:	0801f0b4 	.word	0x0801f0b4
 8015eb8:	7fefffff 	.word	0x7fefffff
 8015ebc:	0801f0bc 	.word	0x0801f0bc
 8015ec0:	0801f0c4 	.word	0x0801f0c4
 8015ec4:	0801f608 	.word	0x0801f608
 8015ec8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8015ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015ece:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8015ed0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ed2:	2b1f      	cmp	r3, #31
 8015ed4:	d826      	bhi.n	8015f24 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 8015ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015ed8:	3b01      	subs	r3, #1
 8015eda:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8015edc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015ede:	4b6c      	ldr	r3, [pc, #432]	; (8016090 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8015ee0:	fba3 2301 	umull	r2, r3, r3, r1
 8015ee4:	08da      	lsrs	r2, r3, #3
 8015ee6:	4613      	mov	r3, r2
 8015ee8:	009b      	lsls	r3, r3, #2
 8015eea:	4413      	add	r3, r2
 8015eec:	005b      	lsls	r3, r3, #1
 8015eee:	1aca      	subs	r2, r1, r3
 8015ef0:	b2d2      	uxtb	r2, r2
 8015ef2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ef4:	1c59      	adds	r1, r3, #1
 8015ef6:	65f9      	str	r1, [r7, #92]	; 0x5c
 8015ef8:	3230      	adds	r2, #48	; 0x30
 8015efa:	b2d2      	uxtb	r2, r2
 8015efc:	3360      	adds	r3, #96	; 0x60
 8015efe:	443b      	add	r3, r7
 8015f00:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8015f04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f06:	4a62      	ldr	r2, [pc, #392]	; (8016090 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8015f08:	fba2 2303 	umull	r2, r3, r2, r3
 8015f0c:	08db      	lsrs	r3, r3, #3
 8015f0e:	653b      	str	r3, [r7, #80]	; 0x50
 8015f10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	bf0c      	ite	eq
 8015f16:	2301      	moveq	r3, #1
 8015f18:	2300      	movne	r3, #0
 8015f1a:	b2db      	uxtb	r3, r3
 8015f1c:	2b00      	cmp	r3, #0
 8015f1e:	d100      	bne.n	8015f22 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8015f20:	e7d6      	b.n	8015ed0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 8015f22:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8015f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f26:	2b1f      	cmp	r3, #31
 8015f28:	d806      	bhi.n	8015f38 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8015f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f2c:	1e5a      	subs	r2, r3, #1
 8015f2e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d001      	beq.n	8015f38 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8015f34:	2301      	movs	r3, #1
 8015f36:	e000      	b.n	8015f3a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 8015f38:	2300      	movs	r3, #0
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d008      	beq.n	8015f50 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 8015f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f40:	1c5a      	adds	r2, r3, #1
 8015f42:	65fa      	str	r2, [r7, #92]	; 0x5c
 8015f44:	3360      	adds	r3, #96	; 0x60
 8015f46:	443b      	add	r3, r7
 8015f48:	2230      	movs	r2, #48	; 0x30
 8015f4a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8015f4e:	e7e9      	b.n	8015f24 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8015f50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f52:	2b1f      	cmp	r3, #31
 8015f54:	d807      	bhi.n	8015f66 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 8015f56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f58:	1c5a      	adds	r2, r3, #1
 8015f5a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8015f5c:	3360      	adds	r3, #96	; 0x60
 8015f5e:	443b      	add	r3, r7
 8015f60:	222e      	movs	r2, #46	; 0x2e
 8015f62:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8015f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f68:	2b1f      	cmp	r3, #31
 8015f6a:	d827      	bhi.n	8015fbc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 8015f6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015f6e:	4b49      	ldr	r3, [pc, #292]	; (8016094 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8015f70:	fb83 1302 	smull	r1, r3, r3, r2
 8015f74:	1099      	asrs	r1, r3, #2
 8015f76:	17d3      	asrs	r3, r2, #31
 8015f78:	1ac9      	subs	r1, r1, r3
 8015f7a:	460b      	mov	r3, r1
 8015f7c:	009b      	lsls	r3, r3, #2
 8015f7e:	440b      	add	r3, r1
 8015f80:	005b      	lsls	r3, r3, #1
 8015f82:	1ad1      	subs	r1, r2, r3
 8015f84:	b2ca      	uxtb	r2, r1
 8015f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015f88:	1c59      	adds	r1, r3, #1
 8015f8a:	65f9      	str	r1, [r7, #92]	; 0x5c
 8015f8c:	3230      	adds	r2, #48	; 0x30
 8015f8e:	b2d2      	uxtb	r2, r2
 8015f90:	3360      	adds	r3, #96	; 0x60
 8015f92:	443b      	add	r3, r7
 8015f94:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8015f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015f9a:	4a3e      	ldr	r2, [pc, #248]	; (8016094 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8015f9c:	fb82 1203 	smull	r1, r2, r2, r3
 8015fa0:	1092      	asrs	r2, r2, #2
 8015fa2:	17db      	asrs	r3, r3, #31
 8015fa4:	1ad3      	subs	r3, r2, r3
 8015fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8015fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	bf0c      	ite	eq
 8015fae:	2301      	moveq	r3, #1
 8015fb0:	2300      	movne	r3, #0
 8015fb2:	b2db      	uxtb	r3, r3
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d100      	bne.n	8015fba <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8015fb8:	e7d5      	b.n	8015f66 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 8015fba:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8015fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015fbe:	f003 0302 	and.w	r3, r3, #2
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d123      	bne.n	801600e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 8015fc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015fc8:	f003 0301 	and.w	r3, r3, #1
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d01e      	beq.n	801600e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8015fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d00b      	beq.n	8015fee <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 8015fd6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d104      	bne.n	8015fe8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 8015fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015fe0:	f003 030c 	and.w	r3, r3, #12
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d002      	beq.n	8015fee <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 8015fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015fea:	3b01      	subs	r3, #1
 8015fec:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8015fee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	d20b      	bcs.n	801600e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 8015ff6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ff8:	2b1f      	cmp	r3, #31
 8015ffa:	d808      	bhi.n	801600e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 8015ffc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ffe:	1c5a      	adds	r2, r3, #1
 8016000:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016002:	3360      	adds	r3, #96	; 0x60
 8016004:	443b      	add	r3, r7
 8016006:	2230      	movs	r2, #48	; 0x30
 8016008:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 801600c:	e7ef      	b.n	8015fee <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 801600e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016010:	2b1f      	cmp	r3, #31
 8016012:	d827      	bhi.n	8016064 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 8016014:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8016018:	2b00      	cmp	r3, #0
 801601a:	d008      	beq.n	801602e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 801601c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801601e:	1c5a      	adds	r2, r3, #1
 8016020:	65fa      	str	r2, [r7, #92]	; 0x5c
 8016022:	3360      	adds	r3, #96	; 0x60
 8016024:	443b      	add	r3, r7
 8016026:	222d      	movs	r2, #45	; 0x2d
 8016028:	f803 2c48 	strb.w	r2, [r3, #-72]
 801602c:	e01a      	b.n	8016064 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 801602e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016030:	f003 0304 	and.w	r3, r3, #4
 8016034:	2b00      	cmp	r3, #0
 8016036:	d008      	beq.n	801604a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8016038:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801603a:	1c5a      	adds	r2, r3, #1
 801603c:	65fa      	str	r2, [r7, #92]	; 0x5c
 801603e:	3360      	adds	r3, #96	; 0x60
 8016040:	443b      	add	r3, r7
 8016042:	222b      	movs	r2, #43	; 0x2b
 8016044:	f803 2c48 	strb.w	r2, [r3, #-72]
 8016048:	e00c      	b.n	8016064 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 801604a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801604c:	f003 0308 	and.w	r3, r3, #8
 8016050:	2b00      	cmp	r3, #0
 8016052:	d007      	beq.n	8016064 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 8016054:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016056:	1c5a      	adds	r2, r3, #1
 8016058:	65fa      	str	r2, [r7, #92]	; 0x5c
 801605a:	3360      	adds	r3, #96	; 0x60
 801605c:	443b      	add	r3, r7
 801605e:	2220      	movs	r2, #32
 8016060:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8016064:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016066:	9303      	str	r3, [sp, #12]
 8016068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801606a:	9302      	str	r3, [sp, #8]
 801606c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801606e:	9301      	str	r3, [sp, #4]
 8016070:	f107 0318 	add.w	r3, r7, #24
 8016074:	9300      	str	r3, [sp, #0]
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	68fa      	ldr	r2, [r7, #12]
 801607a:	6939      	ldr	r1, [r7, #16]
 801607c:	6978      	ldr	r0, [r7, #20]
 801607e:	f7ff fba3 	bl	80157c8 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8016082:	4603      	mov	r3, r0
 8016084:	bf00      	nop
}
 8016086:	4618      	mov	r0, r3
 8016088:	3764      	adds	r7, #100	; 0x64
 801608a:	46bd      	mov	sp, r7
 801608c:	bd90      	pop	{r4, r7, pc}
 801608e:	bf00      	nop
 8016090:	cccccccd 	.word	0xcccccccd
 8016094:	66666667 	.word	0x66666667

08016098 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8016098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801609c:	b09f      	sub	sp, #124	; 0x7c
 801609e:	af06      	add	r7, sp, #24
 80160a0:	6278      	str	r0, [r7, #36]	; 0x24
 80160a2:	6239      	str	r1, [r7, #32]
 80160a4:	61fa      	str	r2, [r7, #28]
 80160a6:	61bb      	str	r3, [r7, #24]
 80160a8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 80160ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80160b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80160b4:	f7ea fd08 	bl	8000ac8 <__aeabi_dcmpeq>
 80160b8:	4603      	mov	r3, r0
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d014      	beq.n	80160e8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 80160be:	f04f 32ff 	mov.w	r2, #4294967295
 80160c2:	4bc1      	ldr	r3, [pc, #772]	; (80163c8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 80160c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80160c8:	f7ea fd26 	bl	8000b18 <__aeabi_dcmpgt>
 80160cc:	4603      	mov	r3, r0
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d10a      	bne.n	80160e8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 80160d2:	f04f 32ff 	mov.w	r2, #4294967295
 80160d6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80160da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80160de:	f7ea fcfd 	bl	8000adc <__aeabi_dcmplt>
 80160e2:	4603      	mov	r3, r0
 80160e4:	2b00      	cmp	r3, #0
 80160e6:	d012      	beq.n	801610e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80160e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80160ec:	9302      	str	r3, [sp, #8]
 80160ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80160f2:	9301      	str	r3, [sp, #4]
 80160f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80160f8:	9300      	str	r3, [sp, #0]
 80160fa:	ed97 0b04 	vldr	d0, [r7, #16]
 80160fe:	69bb      	ldr	r3, [r7, #24]
 8016100:	69fa      	ldr	r2, [r7, #28]
 8016102:	6a39      	ldr	r1, [r7, #32]
 8016104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016106:	f7ff fd63 	bl	8015bd0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 801610a:	4603      	mov	r3, r0
 801610c:	e23f      	b.n	801658e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 801610e:	2301      	movs	r3, #1
 8016110:	461e      	mov	r6, r3
 8016112:	f04f 0200 	mov.w	r2, #0
 8016116:	f04f 0300 	mov.w	r3, #0
 801611a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801611e:	f7ea fcdd 	bl	8000adc <__aeabi_dcmplt>
 8016122:	4603      	mov	r3, r0
 8016124:	2b00      	cmp	r3, #0
 8016126:	d101      	bne.n	801612c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 8016128:	2300      	movs	r3, #0
 801612a:	461e      	mov	r6, r3
 801612c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8016130:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8016134:	2b00      	cmp	r3, #0
 8016136:	d009      	beq.n	801614c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 8016138:	693b      	ldr	r3, [r7, #16]
 801613a:	603b      	str	r3, [r7, #0]
 801613c:	697b      	ldr	r3, [r7, #20]
 801613e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8016142:	607b      	str	r3, [r7, #4]
 8016144:	ed97 7b00 	vldr	d7, [r7]
 8016148:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 801614c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016154:	2b00      	cmp	r3, #0
 8016156:	d102      	bne.n	801615e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8016158:	2306      	movs	r3, #6
 801615a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 801615e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016162:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8016166:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801616a:	f04f 0200 	mov.w	r2, #0
 801616e:	f04f 0300 	mov.w	r3, #0
 8016172:	0d0a      	lsrs	r2, r1, #20
 8016174:	2300      	movs	r3, #0
 8016176:	4613      	mov	r3, r2
 8016178:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801617c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016180:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8016182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8016186:	4690      	mov	r8, r2
 8016188:	f3c3 0913 	ubfx	r9, r3, #0, #20
 801618c:	4644      	mov	r4, r8
 801618e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8016192:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016196:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 801619a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801619c:	f7ea f9c2 	bl	8000524 <__aeabi_i2d>
 80161a0:	a37d      	add	r3, pc, #500	; (adr r3, 8016398 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 80161a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161a6:	f7ea fa27 	bl	80005f8 <__aeabi_dmul>
 80161aa:	4602      	mov	r2, r0
 80161ac:	460b      	mov	r3, r1
 80161ae:	4610      	mov	r0, r2
 80161b0:	4619      	mov	r1, r3
 80161b2:	a37b      	add	r3, pc, #492	; (adr r3, 80163a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 80161b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161b8:	f7ea f868 	bl	800028c <__adddf3>
 80161bc:	4602      	mov	r2, r0
 80161be:	460b      	mov	r3, r1
 80161c0:	4614      	mov	r4, r2
 80161c2:	461d      	mov	r5, r3
 80161c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80161c8:	f04f 0200 	mov.w	r2, #0
 80161cc:	4b7f      	ldr	r3, [pc, #508]	; (80163cc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 80161ce:	f7ea f85b 	bl	8000288 <__aeabi_dsub>
 80161d2:	4602      	mov	r2, r0
 80161d4:	460b      	mov	r3, r1
 80161d6:	4610      	mov	r0, r2
 80161d8:	4619      	mov	r1, r3
 80161da:	a373      	add	r3, pc, #460	; (adr r3, 80163a8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 80161dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80161e0:	f7ea fa0a 	bl	80005f8 <__aeabi_dmul>
 80161e4:	4602      	mov	r2, r0
 80161e6:	460b      	mov	r3, r1
 80161e8:	4620      	mov	r0, r4
 80161ea:	4629      	mov	r1, r5
 80161ec:	f7ea f84e 	bl	800028c <__adddf3>
 80161f0:	4602      	mov	r2, r0
 80161f2:	460b      	mov	r3, r1
 80161f4:	4610      	mov	r0, r2
 80161f6:	4619      	mov	r1, r3
 80161f8:	f7ea fcae 	bl	8000b58 <__aeabi_d2iz>
 80161fc:	4603      	mov	r3, r0
 80161fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8016200:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8016202:	f7ea f98f 	bl	8000524 <__aeabi_i2d>
 8016206:	a36a      	add	r3, pc, #424	; (adr r3, 80163b0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 8016208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801620c:	f7ea f9f4 	bl	80005f8 <__aeabi_dmul>
 8016210:	4602      	mov	r2, r0
 8016212:	460b      	mov	r3, r1
 8016214:	4610      	mov	r0, r2
 8016216:	4619      	mov	r1, r3
 8016218:	f04f 0200 	mov.w	r2, #0
 801621c:	4b6c      	ldr	r3, [pc, #432]	; (80163d0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 801621e:	f7ea f835 	bl	800028c <__adddf3>
 8016222:	4602      	mov	r2, r0
 8016224:	460b      	mov	r3, r1
 8016226:	4610      	mov	r0, r2
 8016228:	4619      	mov	r1, r3
 801622a:	f7ea fc95 	bl	8000b58 <__aeabi_d2iz>
 801622e:	4603      	mov	r3, r0
 8016230:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8016232:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8016234:	f7ea f976 	bl	8000524 <__aeabi_i2d>
 8016238:	a35f      	add	r3, pc, #380	; (adr r3, 80163b8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 801623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801623e:	f7ea f9db 	bl	80005f8 <__aeabi_dmul>
 8016242:	4602      	mov	r2, r0
 8016244:	460b      	mov	r3, r1
 8016246:	4614      	mov	r4, r2
 8016248:	461d      	mov	r5, r3
 801624a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801624c:	f7ea f96a 	bl	8000524 <__aeabi_i2d>
 8016250:	a35b      	add	r3, pc, #364	; (adr r3, 80163c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 8016252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016256:	f7ea f9cf 	bl	80005f8 <__aeabi_dmul>
 801625a:	4602      	mov	r2, r0
 801625c:	460b      	mov	r3, r1
 801625e:	4620      	mov	r0, r4
 8016260:	4629      	mov	r1, r5
 8016262:	f7ea f811 	bl	8000288 <__aeabi_dsub>
 8016266:	4602      	mov	r2, r0
 8016268:	460b      	mov	r3, r1
 801626a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 801626e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8016272:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8016276:	f7ea f9bf 	bl	80005f8 <__aeabi_dmul>
 801627a:	4602      	mov	r2, r0
 801627c:	460b      	mov	r3, r1
 801627e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8016282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016284:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8016288:	17da      	asrs	r2, r3, #31
 801628a:	469a      	mov	sl, r3
 801628c:	4693      	mov	fp, r2
 801628e:	f04f 0200 	mov.w	r2, #0
 8016292:	f04f 0300 	mov.w	r3, #0
 8016296:	ea4f 530a 	mov.w	r3, sl, lsl #20
 801629a:	2200      	movs	r2, #0
 801629c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80162a0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80162a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80162a8:	4602      	mov	r2, r0
 80162aa:	460b      	mov	r3, r1
 80162ac:	f7e9 ffee 	bl	800028c <__adddf3>
 80162b0:	4602      	mov	r2, r0
 80162b2:	460b      	mov	r3, r1
 80162b4:	4690      	mov	r8, r2
 80162b6:	4699      	mov	r9, r3
 80162b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80162bc:	f04f 0000 	mov.w	r0, #0
 80162c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80162c4:	f7e9 ffe0 	bl	8000288 <__aeabi_dsub>
 80162c8:	4602      	mov	r2, r0
 80162ca:	460b      	mov	r3, r1
 80162cc:	4692      	mov	sl, r2
 80162ce:	469b      	mov	fp, r3
 80162d0:	f04f 0200 	mov.w	r2, #0
 80162d4:	4b3f      	ldr	r3, [pc, #252]	; (80163d4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 80162d6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80162da:	f7ea fab7 	bl	800084c <__aeabi_ddiv>
 80162de:	4602      	mov	r2, r0
 80162e0:	460b      	mov	r3, r1
 80162e2:	4610      	mov	r0, r2
 80162e4:	4619      	mov	r1, r3
 80162e6:	f04f 0200 	mov.w	r2, #0
 80162ea:	4b3b      	ldr	r3, [pc, #236]	; (80163d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 80162ec:	f7e9 ffce 	bl	800028c <__adddf3>
 80162f0:	4602      	mov	r2, r0
 80162f2:	460b      	mov	r3, r1
 80162f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80162f8:	f7ea faa8 	bl	800084c <__aeabi_ddiv>
 80162fc:	4602      	mov	r2, r0
 80162fe:	460b      	mov	r3, r1
 8016300:	4610      	mov	r0, r2
 8016302:	4619      	mov	r1, r3
 8016304:	f04f 0200 	mov.w	r2, #0
 8016308:	4b34      	ldr	r3, [pc, #208]	; (80163dc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 801630a:	f7e9 ffbf 	bl	800028c <__adddf3>
 801630e:	4602      	mov	r2, r0
 8016310:	460b      	mov	r3, r1
 8016312:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8016316:	f7ea fa99 	bl	800084c <__aeabi_ddiv>
 801631a:	4602      	mov	r2, r0
 801631c:	460b      	mov	r3, r1
 801631e:	4650      	mov	r0, sl
 8016320:	4659      	mov	r1, fp
 8016322:	f7e9 ffb3 	bl	800028c <__adddf3>
 8016326:	4602      	mov	r2, r0
 8016328:	460b      	mov	r3, r1
 801632a:	4640      	mov	r0, r8
 801632c:	4649      	mov	r1, r9
 801632e:	f7ea fa8d 	bl	800084c <__aeabi_ddiv>
 8016332:	4602      	mov	r2, r0
 8016334:	460b      	mov	r3, r1
 8016336:	4610      	mov	r0, r2
 8016338:	4619      	mov	r1, r3
 801633a:	f04f 0200 	mov.w	r2, #0
 801633e:	4b28      	ldr	r3, [pc, #160]	; (80163e0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 8016340:	f7e9 ffa4 	bl	800028c <__adddf3>
 8016344:	4602      	mov	r2, r0
 8016346:	460b      	mov	r3, r1
 8016348:	4620      	mov	r0, r4
 801634a:	4629      	mov	r1, r5
 801634c:	f7ea f954 	bl	80005f8 <__aeabi_dmul>
 8016350:	4602      	mov	r2, r0
 8016352:	460b      	mov	r3, r1
 8016354:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8016358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 801635c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016360:	f7ea fbbc 	bl	8000adc <__aeabi_dcmplt>
 8016364:	4603      	mov	r3, r0
 8016366:	2b00      	cmp	r3, #0
 8016368:	d00d      	beq.n	8016386 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 801636a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801636c:	3b01      	subs	r3, #1
 801636e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8016370:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8016374:	f04f 0200 	mov.w	r2, #0
 8016378:	4b17      	ldr	r3, [pc, #92]	; (80163d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 801637a:	f7ea fa67 	bl	800084c <__aeabi_ddiv>
 801637e:	4602      	mov	r2, r0
 8016380:	460b      	mov	r3, r1
 8016382:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8016386:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016388:	2b63      	cmp	r3, #99	; 0x63
 801638a:	dc2b      	bgt.n	80163e4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 801638c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801638e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8016392:	db27      	blt.n	80163e4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 8016394:	2304      	movs	r3, #4
 8016396:	e026      	b.n	80163e6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 8016398:	509f79fb 	.word	0x509f79fb
 801639c:	3fd34413 	.word	0x3fd34413
 80163a0:	8b60c8b3 	.word	0x8b60c8b3
 80163a4:	3fc68a28 	.word	0x3fc68a28
 80163a8:	636f4361 	.word	0x636f4361
 80163ac:	3fd287a7 	.word	0x3fd287a7
 80163b0:	0979a371 	.word	0x0979a371
 80163b4:	400a934f 	.word	0x400a934f
 80163b8:	bbb55516 	.word	0xbbb55516
 80163bc:	40026bb1 	.word	0x40026bb1
 80163c0:	fefa39ef 	.word	0xfefa39ef
 80163c4:	3fe62e42 	.word	0x3fe62e42
 80163c8:	7fefffff 	.word	0x7fefffff
 80163cc:	3ff80000 	.word	0x3ff80000
 80163d0:	3fe00000 	.word	0x3fe00000
 80163d4:	402c0000 	.word	0x402c0000
 80163d8:	40240000 	.word	0x40240000
 80163dc:	40180000 	.word	0x40180000
 80163e0:	3ff00000 	.word	0x3ff00000
 80163e4:	2305      	movs	r3, #5
 80163e6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80163e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80163ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d03d      	beq.n	8016470 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80163f4:	a368      	add	r3, pc, #416	; (adr r3, 8016598 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 80163f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80163fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80163fe:	f7ea fb81 	bl	8000b04 <__aeabi_dcmpge>
 8016402:	4603      	mov	r3, r0
 8016404:	2b00      	cmp	r3, #0
 8016406:	d024      	beq.n	8016452 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 8016408:	a365      	add	r3, pc, #404	; (adr r3, 80165a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 801640a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801640e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8016412:	f7ea fb63 	bl	8000adc <__aeabi_dcmplt>
 8016416:	4603      	mov	r3, r0
 8016418:	2b00      	cmp	r3, #0
 801641a:	d01a      	beq.n	8016452 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 801641c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016420:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8016422:	429a      	cmp	r2, r3
 8016424:	da07      	bge.n	8016436 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 8016426:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801642a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801642c:	1ad3      	subs	r3, r2, r3
 801642e:	3b01      	subs	r3, #1
 8016430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8016434:	e002      	b.n	801643c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 8016436:	2300      	movs	r3, #0
 8016438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 801643c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016440:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016444:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8016448:	2300      	movs	r3, #0
 801644a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 801644c:	2300      	movs	r3, #0
 801644e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8016450:	e00e      	b.n	8016470 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8016452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016456:	2b00      	cmp	r3, #0
 8016458:	d00a      	beq.n	8016470 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 801645a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801645e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016462:	2b00      	cmp	r3, #0
 8016464:	d004      	beq.n	8016470 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 8016466:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801646a:	3b01      	subs	r3, #1
 801646c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8016470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016474:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 8016476:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801647a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801647c:	429a      	cmp	r2, r3
 801647e:	d904      	bls.n	801648a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8016480:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016482:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016484:	1ad3      	subs	r3, r2, r3
 8016486:	657b      	str	r3, [r7, #84]	; 0x54
 8016488:	e001      	b.n	801648e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 801648a:	2300      	movs	r3, #0
 801648c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 801648e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016492:	f003 0302 	and.w	r3, r3, #2
 8016496:	2b00      	cmp	r3, #0
 8016498:	d004      	beq.n	80164a4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 801649a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801649c:	2b00      	cmp	r3, #0
 801649e:	d001      	beq.n	80164a4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80164a0:	2300      	movs	r3, #0
 80164a2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80164a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d009      	beq.n	80164be <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 80164aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80164ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80164b2:	f7ea f9cb 	bl	800084c <__aeabi_ddiv>
 80164b6:	4602      	mov	r2, r0
 80164b8:	460b      	mov	r3, r1
 80164ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80164be:	69fb      	ldr	r3, [r7, #28]
 80164c0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80164c2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d006      	beq.n	80164d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 80164ca:	693b      	ldr	r3, [r7, #16]
 80164cc:	60bb      	str	r3, [r7, #8]
 80164ce:	697b      	ldr	r3, [r7, #20]
 80164d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80164d4:	60fb      	str	r3, [r7, #12]
 80164d6:	e003      	b.n	80164e0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 80164d8:	ed97 7b04 	vldr	d7, [r7, #16]
 80164dc:	ed87 7b02 	vstr	d7, [r7, #8]
 80164e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80164e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80164e8:	9302      	str	r3, [sp, #8]
 80164ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164ec:	9301      	str	r3, [sp, #4]
 80164ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80164f2:	9300      	str	r3, [sp, #0]
 80164f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80164f8:	69bb      	ldr	r3, [r7, #24]
 80164fa:	69fa      	ldr	r2, [r7, #28]
 80164fc:	6a39      	ldr	r1, [r7, #32]
 80164fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016500:	f7ff fb66 	bl	8015bd0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8016504:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 8016506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016508:	2b00      	cmp	r3, #0
 801650a:	d03f      	beq.n	801658c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 801650c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016510:	f003 0320 	and.w	r3, r3, #32
 8016514:	2b00      	cmp	r3, #0
 8016516:	d001      	beq.n	801651c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 8016518:	2045      	movs	r0, #69	; 0x45
 801651a:	e000      	b.n	801651e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 801651c:	2065      	movs	r0, #101	; 0x65
 801651e:	69fa      	ldr	r2, [r7, #28]
 8016520:	1c53      	adds	r3, r2, #1
 8016522:	61fb      	str	r3, [r7, #28]
 8016524:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8016526:	69bb      	ldr	r3, [r7, #24]
 8016528:	6a39      	ldr	r1, [r7, #32]
 801652a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 801652c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801652e:	2b00      	cmp	r3, #0
 8016530:	bfb8      	it	lt
 8016532:	425b      	neglt	r3, r3
 8016534:	4618      	mov	r0, r3
 8016536:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016538:	0fdb      	lsrs	r3, r3, #31
 801653a:	b2db      	uxtb	r3, r3
 801653c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801653e:	3a01      	subs	r2, #1
 8016540:	2105      	movs	r1, #5
 8016542:	9105      	str	r1, [sp, #20]
 8016544:	9204      	str	r2, [sp, #16]
 8016546:	2200      	movs	r2, #0
 8016548:	9203      	str	r2, [sp, #12]
 801654a:	220a      	movs	r2, #10
 801654c:	9202      	str	r2, [sp, #8]
 801654e:	9301      	str	r3, [sp, #4]
 8016550:	9000      	str	r0, [sp, #0]
 8016552:	69bb      	ldr	r3, [r7, #24]
 8016554:	69fa      	ldr	r2, [r7, #28]
 8016556:	6a39      	ldr	r1, [r7, #32]
 8016558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801655a:	f7ff fa61 	bl	8015a20 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 801655e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8016560:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016564:	f003 0302 	and.w	r3, r3, #2
 8016568:	2b00      	cmp	r3, #0
 801656a:	d00f      	beq.n	801658c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 801656c:	69fa      	ldr	r2, [r7, #28]
 801656e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016570:	1ad3      	subs	r3, r2, r3
 8016572:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8016576:	429a      	cmp	r2, r3
 8016578:	d908      	bls.n	801658c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 801657a:	69fa      	ldr	r2, [r7, #28]
 801657c:	1c53      	adds	r3, r2, #1
 801657e:	61fb      	str	r3, [r7, #28]
 8016580:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8016582:	69bb      	ldr	r3, [r7, #24]
 8016584:	6a39      	ldr	r1, [r7, #32]
 8016586:	2020      	movs	r0, #32
 8016588:	47a0      	blx	r4
 801658a:	e7ef      	b.n	801656c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 801658c:	69fb      	ldr	r3, [r7, #28]
}
 801658e:	4618      	mov	r0, r3
 8016590:	3764      	adds	r7, #100	; 0x64
 8016592:	46bd      	mov	sp, r7
 8016594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016598:	eb1c432d 	.word	0xeb1c432d
 801659c:	3f1a36e2 	.word	0x3f1a36e2
 80165a0:	00000000 	.word	0x00000000
 80165a4:	412e8480 	.word	0x412e8480

080165a8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80165a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ac:	b0a1      	sub	sp, #132	; 0x84
 80165ae:	af0a      	add	r7, sp, #40	; 0x28
 80165b0:	60f8      	str	r0, [r7, #12]
 80165b2:	60b9      	str	r1, [r7, #8]
 80165b4:	607a      	str	r2, [r7, #4]
 80165b6:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80165b8:	2300      	movs	r3, #0
 80165ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 80165bc:	68bb      	ldr	r3, [r7, #8]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d101      	bne.n	80165c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 80165c2:	4ba5      	ldr	r3, [pc, #660]	; (8016858 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 80165c4:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	781b      	ldrb	r3, [r3, #0]
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	f000 84ae 	beq.w	8016f2c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80165d0:	683b      	ldr	r3, [r7, #0]
 80165d2:	781b      	ldrb	r3, [r3, #0]
 80165d4:	2b25      	cmp	r3, #37	; 0x25
 80165d6:	d00d      	beq.n	80165f4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 80165d8:	683b      	ldr	r3, [r7, #0]
 80165da:	7818      	ldrb	r0, [r3, #0]
 80165dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165de:	1c53      	adds	r3, r2, #1
 80165e0:	647b      	str	r3, [r7, #68]	; 0x44
 80165e2:	68fe      	ldr	r6, [r7, #12]
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	68b9      	ldr	r1, [r7, #8]
 80165e8:	47b0      	blx	r6
      format++;
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	3301      	adds	r3, #1
 80165ee:	603b      	str	r3, [r7, #0]
      continue;
 80165f0:	f000 bc9a 	b.w	8016f28 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	3301      	adds	r3, #1
 80165f8:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80165fa:	2300      	movs	r3, #0
 80165fc:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80165fe:	683b      	ldr	r3, [r7, #0]
 8016600:	781b      	ldrb	r3, [r3, #0]
 8016602:	3b20      	subs	r3, #32
 8016604:	2b10      	cmp	r3, #16
 8016606:	d857      	bhi.n	80166b8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 8016608:	a201      	add	r2, pc, #4	; (adr r2, 8016610 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 801660a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801660e:	bf00      	nop
 8016610:	08016691 	.word	0x08016691
 8016614:	080166b9 	.word	0x080166b9
 8016618:	080166b9 	.word	0x080166b9
 801661c:	080166a5 	.word	0x080166a5
 8016620:	080166b9 	.word	0x080166b9
 8016624:	080166b9 	.word	0x080166b9
 8016628:	080166b9 	.word	0x080166b9
 801662c:	080166b9 	.word	0x080166b9
 8016630:	080166b9 	.word	0x080166b9
 8016634:	080166b9 	.word	0x080166b9
 8016638:	080166b9 	.word	0x080166b9
 801663c:	0801667d 	.word	0x0801667d
 8016640:	080166b9 	.word	0x080166b9
 8016644:	08016669 	.word	0x08016669
 8016648:	080166b9 	.word	0x080166b9
 801664c:	080166b9 	.word	0x080166b9
 8016650:	08016655 	.word	0x08016655
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8016654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016656:	f043 0301 	orr.w	r3, r3, #1
 801665a:	657b      	str	r3, [r7, #84]	; 0x54
 801665c:	683b      	ldr	r3, [r7, #0]
 801665e:	3301      	adds	r3, #1
 8016660:	603b      	str	r3, [r7, #0]
 8016662:	2301      	movs	r3, #1
 8016664:	64bb      	str	r3, [r7, #72]	; 0x48
 8016666:	e02a      	b.n	80166be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8016668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801666a:	f043 0302 	orr.w	r3, r3, #2
 801666e:	657b      	str	r3, [r7, #84]	; 0x54
 8016670:	683b      	ldr	r3, [r7, #0]
 8016672:	3301      	adds	r3, #1
 8016674:	603b      	str	r3, [r7, #0]
 8016676:	2301      	movs	r3, #1
 8016678:	64bb      	str	r3, [r7, #72]	; 0x48
 801667a:	e020      	b.n	80166be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 801667c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801667e:	f043 0304 	orr.w	r3, r3, #4
 8016682:	657b      	str	r3, [r7, #84]	; 0x54
 8016684:	683b      	ldr	r3, [r7, #0]
 8016686:	3301      	adds	r3, #1
 8016688:	603b      	str	r3, [r7, #0]
 801668a:	2301      	movs	r3, #1
 801668c:	64bb      	str	r3, [r7, #72]	; 0x48
 801668e:	e016      	b.n	80166be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8016690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016692:	f043 0308 	orr.w	r3, r3, #8
 8016696:	657b      	str	r3, [r7, #84]	; 0x54
 8016698:	683b      	ldr	r3, [r7, #0]
 801669a:	3301      	adds	r3, #1
 801669c:	603b      	str	r3, [r7, #0]
 801669e:	2301      	movs	r3, #1
 80166a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80166a2:	e00c      	b.n	80166be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80166a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166a6:	f043 0310 	orr.w	r3, r3, #16
 80166aa:	657b      	str	r3, [r7, #84]	; 0x54
 80166ac:	683b      	ldr	r3, [r7, #0]
 80166ae:	3301      	adds	r3, #1
 80166b0:	603b      	str	r3, [r7, #0]
 80166b2:	2301      	movs	r3, #1
 80166b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80166b6:	e002      	b.n	80166be <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 80166b8:	2300      	movs	r3, #0
 80166ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80166bc:	bf00      	nop
      }
    } while (n);
 80166be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d000      	beq.n	80166c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 80166c4:	e79b      	b.n	80165fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 80166c6:	2300      	movs	r3, #0
 80166c8:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	781b      	ldrb	r3, [r3, #0]
 80166ce:	4618      	mov	r0, r3
 80166d0:	f7ff f842 	bl	8015758 <_ZL9_is_digitc>
 80166d4:	4603      	mov	r3, r0
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d005      	beq.n	80166e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 80166da:	463b      	mov	r3, r7
 80166dc:	4618      	mov	r0, r3
 80166de:	f7ff f84f 	bl	8015780 <_ZL5_atoiPPKc>
 80166e2:	6538      	str	r0, [r7, #80]	; 0x50
 80166e4:	e01a      	b.n	801671c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	2b2a      	cmp	r3, #42	; 0x2a
 80166ec:	d116      	bne.n	801671c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 80166ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80166f2:	1d1a      	adds	r2, r3, #4
 80166f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80166fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166fe:	2b00      	cmp	r3, #0
 8016700:	da07      	bge.n	8016712 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 8016702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016704:	f043 0302 	orr.w	r3, r3, #2
 8016708:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 801670a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801670c:	425b      	negs	r3, r3
 801670e:	653b      	str	r3, [r7, #80]	; 0x50
 8016710:	e001      	b.n	8016716 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 8016712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016714:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	3301      	adds	r3, #1
 801671a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 801671c:	2300      	movs	r3, #0
 801671e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8016720:	683b      	ldr	r3, [r7, #0]
 8016722:	781b      	ldrb	r3, [r3, #0]
 8016724:	2b2e      	cmp	r3, #46	; 0x2e
 8016726:	d126      	bne.n	8016776 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 8016728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801672a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801672e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	3301      	adds	r3, #1
 8016734:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	4618      	mov	r0, r3
 801673c:	f7ff f80c 	bl	8015758 <_ZL9_is_digitc>
 8016740:	4603      	mov	r3, r0
 8016742:	2b00      	cmp	r3, #0
 8016744:	d005      	beq.n	8016752 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 8016746:	463b      	mov	r3, r7
 8016748:	4618      	mov	r0, r3
 801674a:	f7ff f819 	bl	8015780 <_ZL5_atoiPPKc>
 801674e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016750:	e011      	b.n	8016776 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 8016752:	683b      	ldr	r3, [r7, #0]
 8016754:	781b      	ldrb	r3, [r3, #0]
 8016756:	2b2a      	cmp	r3, #42	; 0x2a
 8016758:	d10d      	bne.n	8016776 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 801675a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801675e:	1d1a      	adds	r2, r3, #4
 8016760:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8016768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801676a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801676e:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	3301      	adds	r3, #1
 8016774:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	781b      	ldrb	r3, [r3, #0]
 801677a:	3b68      	subs	r3, #104	; 0x68
 801677c:	2b12      	cmp	r3, #18
 801677e:	d867      	bhi.n	8016850 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 8016780:	a201      	add	r2, pc, #4	; (adr r2, 8016788 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 8016782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016786:	bf00      	nop
 8016788:	080167fb 	.word	0x080167fb
 801678c:	08016851 	.word	0x08016851
 8016790:	08016831 	.word	0x08016831
 8016794:	08016851 	.word	0x08016851
 8016798:	080167d5 	.word	0x080167d5
 801679c:	08016851 	.word	0x08016851
 80167a0:	08016851 	.word	0x08016851
 80167a4:	08016851 	.word	0x08016851
 80167a8:	08016851 	.word	0x08016851
 80167ac:	08016851 	.word	0x08016851
 80167b0:	08016851 	.word	0x08016851
 80167b4:	08016851 	.word	0x08016851
 80167b8:	08016821 	.word	0x08016821
 80167bc:	08016851 	.word	0x08016851
 80167c0:	08016851 	.word	0x08016851
 80167c4:	08016851 	.word	0x08016851
 80167c8:	08016851 	.word	0x08016851
 80167cc:	08016851 	.word	0x08016851
 80167d0:	08016841 	.word	0x08016841
      case 'l' :
        flags |= FLAGS_LONG;
 80167d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80167d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80167da:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	3301      	adds	r3, #1
 80167e0:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 80167e2:	683b      	ldr	r3, [r7, #0]
 80167e4:	781b      	ldrb	r3, [r3, #0]
 80167e6:	2b6c      	cmp	r3, #108	; 0x6c
 80167e8:	d134      	bne.n	8016854 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 80167ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80167ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80167f0:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80167f2:	683b      	ldr	r3, [r7, #0]
 80167f4:	3301      	adds	r3, #1
 80167f6:	603b      	str	r3, [r7, #0]
        }
        break;
 80167f8:	e02c      	b.n	8016854 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 80167fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80167fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016800:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8016802:	683b      	ldr	r3, [r7, #0]
 8016804:	3301      	adds	r3, #1
 8016806:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	781b      	ldrb	r3, [r3, #0]
 801680c:	2b68      	cmp	r3, #104	; 0x68
 801680e:	d125      	bne.n	801685c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 8016810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016816:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	3301      	adds	r3, #1
 801681c:	603b      	str	r3, [r7, #0]
        }
        break;
 801681e:	e01d      	b.n	801685c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8016820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016826:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8016828:	683b      	ldr	r3, [r7, #0]
 801682a:	3301      	adds	r3, #1
 801682c:	603b      	str	r3, [r7, #0]
        break;
 801682e:	e016      	b.n	801685e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8016830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016836:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8016838:	683b      	ldr	r3, [r7, #0]
 801683a:	3301      	adds	r3, #1
 801683c:	603b      	str	r3, [r7, #0]
        break;
 801683e:	e00e      	b.n	801685e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8016840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016846:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8016848:	683b      	ldr	r3, [r7, #0]
 801684a:	3301      	adds	r3, #1
 801684c:	603b      	str	r3, [r7, #0]
        break;
 801684e:	e006      	b.n	801685e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 8016850:	bf00      	nop
 8016852:	e004      	b.n	801685e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 8016854:	bf00      	nop
 8016856:	e002      	b.n	801685e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 8016858:	080156d3 	.word	0x080156d3
        break;
 801685c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 801685e:	683b      	ldr	r3, [r7, #0]
 8016860:	781b      	ldrb	r3, [r3, #0]
 8016862:	3b25      	subs	r3, #37	; 0x25
 8016864:	2b53      	cmp	r3, #83	; 0x53
 8016866:	f200 8352 	bhi.w	8016f0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 801686a:	a201      	add	r2, pc, #4	; (adr r2, 8016870 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 801686c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016870:	08016ef7 	.word	0x08016ef7
 8016874:	08016f0f 	.word	0x08016f0f
 8016878:	08016f0f 	.word	0x08016f0f
 801687c:	08016f0f 	.word	0x08016f0f
 8016880:	08016f0f 	.word	0x08016f0f
 8016884:	08016f0f 	.word	0x08016f0f
 8016888:	08016f0f 	.word	0x08016f0f
 801688c:	08016f0f 	.word	0x08016f0f
 8016890:	08016f0f 	.word	0x08016f0f
 8016894:	08016f0f 	.word	0x08016f0f
 8016898:	08016f0f 	.word	0x08016f0f
 801689c:	08016f0f 	.word	0x08016f0f
 80168a0:	08016f0f 	.word	0x08016f0f
 80168a4:	08016f0f 	.word	0x08016f0f
 80168a8:	08016f0f 	.word	0x08016f0f
 80168ac:	08016f0f 	.word	0x08016f0f
 80168b0:	08016f0f 	.word	0x08016f0f
 80168b4:	08016f0f 	.word	0x08016f0f
 80168b8:	08016f0f 	.word	0x08016f0f
 80168bc:	08016f0f 	.word	0x08016f0f
 80168c0:	08016f0f 	.word	0x08016f0f
 80168c4:	08016f0f 	.word	0x08016f0f
 80168c8:	08016f0f 	.word	0x08016f0f
 80168cc:	08016f0f 	.word	0x08016f0f
 80168d0:	08016f0f 	.word	0x08016f0f
 80168d4:	08016f0f 	.word	0x08016f0f
 80168d8:	08016f0f 	.word	0x08016f0f
 80168dc:	08016f0f 	.word	0x08016f0f
 80168e0:	08016f0f 	.word	0x08016f0f
 80168e4:	08016f0f 	.word	0x08016f0f
 80168e8:	08016f0f 	.word	0x08016f0f
 80168ec:	08016f0f 	.word	0x08016f0f
 80168f0:	08016cc5 	.word	0x08016cc5
 80168f4:	08016c75 	.word	0x08016c75
 80168f8:	08016cc5 	.word	0x08016cc5
 80168fc:	08016f0f 	.word	0x08016f0f
 8016900:	08016f0f 	.word	0x08016f0f
 8016904:	08016f0f 	.word	0x08016f0f
 8016908:	08016f0f 	.word	0x08016f0f
 801690c:	08016f0f 	.word	0x08016f0f
 8016910:	08016f0f 	.word	0x08016f0f
 8016914:	08016f0f 	.word	0x08016f0f
 8016918:	08016f0f 	.word	0x08016f0f
 801691c:	08016f0f 	.word	0x08016f0f
 8016920:	08016f0f 	.word	0x08016f0f
 8016924:	08016f0f 	.word	0x08016f0f
 8016928:	08016f0f 	.word	0x08016f0f
 801692c:	08016f0f 	.word	0x08016f0f
 8016930:	08016f0f 	.word	0x08016f0f
 8016934:	08016f0f 	.word	0x08016f0f
 8016938:	08016f0f 	.word	0x08016f0f
 801693c:	080169c1 	.word	0x080169c1
 8016940:	08016f0f 	.word	0x08016f0f
 8016944:	08016f0f 	.word	0x08016f0f
 8016948:	08016f0f 	.word	0x08016f0f
 801694c:	08016f0f 	.word	0x08016f0f
 8016950:	08016f0f 	.word	0x08016f0f
 8016954:	08016f0f 	.word	0x08016f0f
 8016958:	08016f0f 	.word	0x08016f0f
 801695c:	08016f0f 	.word	0x08016f0f
 8016960:	08016f0f 	.word	0x08016f0f
 8016964:	080169c1 	.word	0x080169c1
 8016968:	08016d35 	.word	0x08016d35
 801696c:	080169c1 	.word	0x080169c1
 8016970:	08016cc5 	.word	0x08016cc5
 8016974:	08016c75 	.word	0x08016c75
 8016978:	08016cc5 	.word	0x08016cc5
 801697c:	08016f0f 	.word	0x08016f0f
 8016980:	080169c1 	.word	0x080169c1
 8016984:	08016f0f 	.word	0x08016f0f
 8016988:	08016f0f 	.word	0x08016f0f
 801698c:	08016f0f 	.word	0x08016f0f
 8016990:	08016f0f 	.word	0x08016f0f
 8016994:	08016f0f 	.word	0x08016f0f
 8016998:	080169c1 	.word	0x080169c1
 801699c:	08016eab 	.word	0x08016eab
 80169a0:	08016f0f 	.word	0x08016f0f
 80169a4:	08016f0f 	.word	0x08016f0f
 80169a8:	08016dc1 	.word	0x08016dc1
 80169ac:	08016f0f 	.word	0x08016f0f
 80169b0:	080169c1 	.word	0x080169c1
 80169b4:	08016f0f 	.word	0x08016f0f
 80169b8:	08016f0f 	.word	0x08016f0f
 80169bc:	080169c1 	.word	0x080169c1
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80169c0:	683b      	ldr	r3, [r7, #0]
 80169c2:	781b      	ldrb	r3, [r3, #0]
 80169c4:	2b78      	cmp	r3, #120	; 0x78
 80169c6:	d003      	beq.n	80169d0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 80169c8:	683b      	ldr	r3, [r7, #0]
 80169ca:	781b      	ldrb	r3, [r3, #0]
 80169cc:	2b58      	cmp	r3, #88	; 0x58
 80169ce:	d102      	bne.n	80169d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 80169d0:	2310      	movs	r3, #16
 80169d2:	643b      	str	r3, [r7, #64]	; 0x40
 80169d4:	e013      	b.n	80169fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	781b      	ldrb	r3, [r3, #0]
 80169da:	2b6f      	cmp	r3, #111	; 0x6f
 80169dc:	d102      	bne.n	80169e4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 80169de:	2308      	movs	r3, #8
 80169e0:	643b      	str	r3, [r7, #64]	; 0x40
 80169e2:	e00c      	b.n	80169fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	781b      	ldrb	r3, [r3, #0]
 80169e8:	2b62      	cmp	r3, #98	; 0x62
 80169ea:	d102      	bne.n	80169f2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 80169ec:	2302      	movs	r3, #2
 80169ee:	643b      	str	r3, [r7, #64]	; 0x40
 80169f0:	e005      	b.n	80169fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 80169f2:	230a      	movs	r3, #10
 80169f4:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80169f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169f8:	f023 0310 	bic.w	r3, r3, #16
 80169fc:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	781b      	ldrb	r3, [r3, #0]
 8016a02:	2b58      	cmp	r3, #88	; 0x58
 8016a04:	d103      	bne.n	8016a0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 8016a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a08:	f043 0320 	orr.w	r3, r3, #32
 8016a0c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8016a0e:	683b      	ldr	r3, [r7, #0]
 8016a10:	781b      	ldrb	r3, [r3, #0]
 8016a12:	2b69      	cmp	r3, #105	; 0x69
 8016a14:	d007      	beq.n	8016a26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 8016a16:	683b      	ldr	r3, [r7, #0]
 8016a18:	781b      	ldrb	r3, [r3, #0]
 8016a1a:	2b64      	cmp	r3, #100	; 0x64
 8016a1c:	d003      	beq.n	8016a26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8016a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a20:	f023 030c 	bic.w	r3, r3, #12
 8016a24:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8016a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d003      	beq.n	8016a38 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 8016a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a32:	f023 0301 	bic.w	r3, r3, #1
 8016a36:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8016a38:	683b      	ldr	r3, [r7, #0]
 8016a3a:	781b      	ldrb	r3, [r3, #0]
 8016a3c:	2b69      	cmp	r3, #105	; 0x69
 8016a3e:	d004      	beq.n	8016a4a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	781b      	ldrb	r3, [r3, #0]
 8016a44:	2b64      	cmp	r3, #100	; 0x64
 8016a46:	f040 8097 	bne.w	8016b78 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8016a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016a4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d030      	beq.n	8016ab6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8016a54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016a58:	3307      	adds	r3, #7
 8016a5a:	f023 0307 	bic.w	r3, r3, #7
 8016a5e:	f103 0208 	add.w	r2, r3, #8
 8016a62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8016a6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	da05      	bge.n	8016a82 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 8016a76:	2100      	movs	r1, #0
 8016a78:	4254      	negs	r4, r2
 8016a7a:	eb61 0503 	sbc.w	r5, r1, r3
 8016a7e:	4622      	mov	r2, r4
 8016a80:	462b      	mov	r3, r5
 8016a82:	6979      	ldr	r1, [r7, #20]
 8016a84:	0fc9      	lsrs	r1, r1, #31
 8016a86:	b2c9      	uxtb	r1, r1
 8016a88:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8016a8a:	2600      	movs	r6, #0
 8016a8c:	4680      	mov	r8, r0
 8016a8e:	46b1      	mov	r9, r6
 8016a90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016a92:	9008      	str	r0, [sp, #32]
 8016a94:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8016a96:	9007      	str	r0, [sp, #28]
 8016a98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016a9a:	9006      	str	r0, [sp, #24]
 8016a9c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8016aa0:	9102      	str	r1, [sp, #8]
 8016aa2:	e9cd 2300 	strd	r2, r3, [sp]
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016aaa:	68b9      	ldr	r1, [r7, #8]
 8016aac:	68f8      	ldr	r0, [r7, #12]
 8016aae:	f7ff f81e 	bl	8015aee <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 8016ab2:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 8016ab4:	e0da      	b.n	8016c6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 8016ab6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016abc:	2b00      	cmp	r3, #0
 8016abe:	d020      	beq.n	8016b02 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 8016ac0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016ac4:	1d1a      	adds	r2, r3, #4
 8016ac6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8016ace:	69fb      	ldr	r3, [r7, #28]
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	bfb8      	it	lt
 8016ad4:	425b      	neglt	r3, r3
 8016ad6:	4619      	mov	r1, r3
 8016ad8:	69fb      	ldr	r3, [r7, #28]
 8016ada:	0fdb      	lsrs	r3, r3, #31
 8016adc:	b2db      	uxtb	r3, r3
 8016ade:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016ae0:	9205      	str	r2, [sp, #20]
 8016ae2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016ae4:	9204      	str	r2, [sp, #16]
 8016ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016ae8:	9203      	str	r2, [sp, #12]
 8016aea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016aec:	9202      	str	r2, [sp, #8]
 8016aee:	9301      	str	r3, [sp, #4]
 8016af0:	9100      	str	r1, [sp, #0]
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016af6:	68b9      	ldr	r1, [r7, #8]
 8016af8:	68f8      	ldr	r0, [r7, #12]
 8016afa:	f7fe ff91 	bl	8015a20 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8016afe:	6478      	str	r0, [r7, #68]	; 0x44
          }
 8016b00:	e0b4      	b.n	8016c6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8016b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d007      	beq.n	8016b1c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 8016b0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016b10:	1d1a      	adds	r2, r3, #4
 8016b12:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	b2db      	uxtb	r3, r3
 8016b1a:	e012      	b.n	8016b42 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 8016b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d007      	beq.n	8016b36 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 8016b26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016b2a:	1d1a      	adds	r2, r3, #4
 8016b2c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	b21b      	sxth	r3, r3
 8016b34:	e005      	b.n	8016b42 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 8016b36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016b3a:	1d1a      	adds	r2, r3, #4
 8016b3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016b40:	681b      	ldr	r3, [r3, #0]
 8016b42:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8016b44:	6a3b      	ldr	r3, [r7, #32]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	bfb8      	it	lt
 8016b4a:	425b      	neglt	r3, r3
 8016b4c:	4619      	mov	r1, r3
 8016b4e:	6a3b      	ldr	r3, [r7, #32]
 8016b50:	0fdb      	lsrs	r3, r3, #31
 8016b52:	b2db      	uxtb	r3, r3
 8016b54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016b56:	9205      	str	r2, [sp, #20]
 8016b58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016b5a:	9204      	str	r2, [sp, #16]
 8016b5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016b5e:	9203      	str	r2, [sp, #12]
 8016b60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016b62:	9202      	str	r2, [sp, #8]
 8016b64:	9301      	str	r3, [sp, #4]
 8016b66:	9100      	str	r1, [sp, #0]
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016b6c:	68b9      	ldr	r1, [r7, #8]
 8016b6e:	68f8      	ldr	r0, [r7, #12]
 8016b70:	f7fe ff56 	bl	8015a20 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8016b74:	6478      	str	r0, [r7, #68]	; 0x44
          }
 8016b76:	e079      	b.n	8016c6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8016b78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d022      	beq.n	8016bc8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8016b82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016b86:	3307      	adds	r3, #7
 8016b88:	f023 0307 	bic.w	r3, r3, #7
 8016b8c:	f103 0208 	add.w	r2, r3, #8
 8016b90:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016b9a:	2000      	movs	r0, #0
 8016b9c:	468a      	mov	sl, r1
 8016b9e:	4683      	mov	fp, r0
 8016ba0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016ba2:	9108      	str	r1, [sp, #32]
 8016ba4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016ba6:	9107      	str	r1, [sp, #28]
 8016ba8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016baa:	9106      	str	r1, [sp, #24]
 8016bac:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8016bb0:	2100      	movs	r1, #0
 8016bb2:	9102      	str	r1, [sp, #8]
 8016bb4:	e9cd 2300 	strd	r2, r3, [sp]
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016bbc:	68b9      	ldr	r1, [r7, #8]
 8016bbe:	68f8      	ldr	r0, [r7, #12]
 8016bc0:	f7fe ff95 	bl	8015aee <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 8016bc4:	6478      	str	r0, [r7, #68]	; 0x44
 8016bc6:	e051      	b.n	8016c6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8016bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d018      	beq.n	8016c04 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8016bd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016bd6:	1d1a      	adds	r2, r3, #4
 8016bd8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016be0:	9205      	str	r2, [sp, #20]
 8016be2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016be4:	9204      	str	r2, [sp, #16]
 8016be6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016be8:	9203      	str	r2, [sp, #12]
 8016bea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016bec:	9202      	str	r2, [sp, #8]
 8016bee:	2200      	movs	r2, #0
 8016bf0:	9201      	str	r2, [sp, #4]
 8016bf2:	9300      	str	r3, [sp, #0]
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016bf8:	68b9      	ldr	r1, [r7, #8]
 8016bfa:	68f8      	ldr	r0, [r7, #12]
 8016bfc:	f7fe ff10 	bl	8015a20 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8016c00:	6478      	str	r0, [r7, #68]	; 0x44
 8016c02:	e033      	b.n	8016c6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8016c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d007      	beq.n	8016c1e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 8016c0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016c12:	1d1a      	adds	r2, r3, #4
 8016c14:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	b2db      	uxtb	r3, r3
 8016c1c:	e012      	b.n	8016c44 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 8016c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d007      	beq.n	8016c38 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 8016c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016c2c:	1d1a      	adds	r2, r3, #4
 8016c2e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	b29b      	uxth	r3, r3
 8016c36:	e005      	b.n	8016c44 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 8016c38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016c3c:	1d1a      	adds	r2, r3, #4
 8016c3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8016c46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c48:	9305      	str	r3, [sp, #20]
 8016c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016c4c:	9304      	str	r3, [sp, #16]
 8016c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016c50:	9303      	str	r3, [sp, #12]
 8016c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c54:	9302      	str	r3, [sp, #8]
 8016c56:	2300      	movs	r3, #0
 8016c58:	9301      	str	r3, [sp, #4]
 8016c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c5c:	9300      	str	r3, [sp, #0]
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016c62:	68b9      	ldr	r1, [r7, #8]
 8016c64:	68f8      	ldr	r0, [r7, #12]
 8016c66:	f7fe fedb 	bl	8015a20 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8016c6a:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8016c6c:	683b      	ldr	r3, [r7, #0]
 8016c6e:	3301      	adds	r3, #1
 8016c70:	603b      	str	r3, [r7, #0]
        break;
 8016c72:	e159      	b.n	8016f28 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	781b      	ldrb	r3, [r3, #0]
 8016c78:	2b46      	cmp	r3, #70	; 0x46
 8016c7a:	d103      	bne.n	8016c84 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 8016c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c7e:	f043 0320 	orr.w	r3, r3, #32
 8016c82:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8016c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016c88:	3307      	adds	r3, #7
 8016c8a:	f023 0307 	bic.w	r3, r3, #7
 8016c8e:	f103 0208 	add.w	r2, r3, #8
 8016c92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016c96:	ed93 7b00 	vldr	d7, [r3]
 8016c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c9c:	9302      	str	r3, [sp, #8]
 8016c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ca0:	9301      	str	r3, [sp, #4]
 8016ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ca4:	9300      	str	r3, [sp, #0]
 8016ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8016caa:	eef0 0a67 	vmov.f32	s1, s15
 8016cae:	687b      	ldr	r3, [r7, #4]
 8016cb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016cb2:	68b9      	ldr	r1, [r7, #8]
 8016cb4:	68f8      	ldr	r0, [r7, #12]
 8016cb6:	f7fe ff8b 	bl	8015bd0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8016cba:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8016cbc:	683b      	ldr	r3, [r7, #0]
 8016cbe:	3301      	adds	r3, #1
 8016cc0:	603b      	str	r3, [r7, #0]
        break;
 8016cc2:	e131      	b.n	8016f28 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8016cc4:	683b      	ldr	r3, [r7, #0]
 8016cc6:	781b      	ldrb	r3, [r3, #0]
 8016cc8:	2b67      	cmp	r3, #103	; 0x67
 8016cca:	d003      	beq.n	8016cd4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 8016ccc:	683b      	ldr	r3, [r7, #0]
 8016cce:	781b      	ldrb	r3, [r3, #0]
 8016cd0:	2b47      	cmp	r3, #71	; 0x47
 8016cd2:	d103      	bne.n	8016cdc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 8016cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016cda:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8016cdc:	683b      	ldr	r3, [r7, #0]
 8016cde:	781b      	ldrb	r3, [r3, #0]
 8016ce0:	2b45      	cmp	r3, #69	; 0x45
 8016ce2:	d003      	beq.n	8016cec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 8016ce4:	683b      	ldr	r3, [r7, #0]
 8016ce6:	781b      	ldrb	r3, [r3, #0]
 8016ce8:	2b47      	cmp	r3, #71	; 0x47
 8016cea:	d103      	bne.n	8016cf4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 8016cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016cee:	f043 0320 	orr.w	r3, r3, #32
 8016cf2:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8016cf4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016cf8:	3307      	adds	r3, #7
 8016cfa:	f023 0307 	bic.w	r3, r3, #7
 8016cfe:	f103 0208 	add.w	r2, r3, #8
 8016d02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016d06:	ed93 7b00 	vldr	d7, [r3]
 8016d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d0c:	9302      	str	r3, [sp, #8]
 8016d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016d10:	9301      	str	r3, [sp, #4]
 8016d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d14:	9300      	str	r3, [sp, #0]
 8016d16:	eeb0 0a47 	vmov.f32	s0, s14
 8016d1a:	eef0 0a67 	vmov.f32	s1, s15
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d22:	68b9      	ldr	r1, [r7, #8]
 8016d24:	68f8      	ldr	r0, [r7, #12]
 8016d26:	f7ff f9b7 	bl	8016098 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8016d2a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8016d2c:	683b      	ldr	r3, [r7, #0]
 8016d2e:	3301      	adds	r3, #1
 8016d30:	603b      	str	r3, [r7, #0]
        break;
 8016d32:	e0f9      	b.n	8016f28 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8016d34:	2301      	movs	r3, #1
 8016d36:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8016d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d3a:	f003 0302 	and.w	r3, r3, #2
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d113      	bne.n	8016d6a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 8016d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d44:	1c5a      	adds	r2, r3, #1
 8016d46:	63fa      	str	r2, [r7, #60]	; 0x3c
 8016d48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	bf8c      	ite	hi
 8016d4e:	2301      	movhi	r3, #1
 8016d50:	2300      	movls	r3, #0
 8016d52:	b2db      	uxtb	r3, r3
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d008      	beq.n	8016d6a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 8016d58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d5a:	1c53      	adds	r3, r2, #1
 8016d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8016d5e:	68fe      	ldr	r6, [r7, #12]
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	68b9      	ldr	r1, [r7, #8]
 8016d64:	2020      	movs	r0, #32
 8016d66:	47b0      	blx	r6
          while (l++ < width) {
 8016d68:	e7eb      	b.n	8016d42 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8016d6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016d6e:	1d1a      	adds	r2, r3, #4
 8016d70:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	b2d8      	uxtb	r0, r3
 8016d78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016d7a:	1c53      	adds	r3, r2, #1
 8016d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8016d7e:	68fe      	ldr	r6, [r7, #12]
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	68b9      	ldr	r1, [r7, #8]
 8016d84:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 8016d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016d88:	f003 0302 	and.w	r3, r3, #2
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d013      	beq.n	8016db8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 8016d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016d92:	1c5a      	adds	r2, r3, #1
 8016d94:	63fa      	str	r2, [r7, #60]	; 0x3c
 8016d96:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016d98:	429a      	cmp	r2, r3
 8016d9a:	bf8c      	ite	hi
 8016d9c:	2301      	movhi	r3, #1
 8016d9e:	2300      	movls	r3, #0
 8016da0:	b2db      	uxtb	r3, r3
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d008      	beq.n	8016db8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 8016da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016da8:	1c53      	adds	r3, r2, #1
 8016daa:	647b      	str	r3, [r7, #68]	; 0x44
 8016dac:	68fe      	ldr	r6, [r7, #12]
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	68b9      	ldr	r1, [r7, #8]
 8016db2:	2020      	movs	r0, #32
 8016db4:	47b0      	blx	r6
          while (l++ < width) {
 8016db6:	e7eb      	b.n	8016d90 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 8016db8:	683b      	ldr	r3, [r7, #0]
 8016dba:	3301      	adds	r3, #1
 8016dbc:	603b      	str	r3, [r7, #0]
        break;
 8016dbe:	e0b3      	b.n	8016f28 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8016dc0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016dc4:	1d1a      	adds	r2, r3, #4
 8016dc6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8016dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d001      	beq.n	8016dd8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 8016dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016dd6:	e001      	b.n	8016ddc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 8016dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8016ddc:	4619      	mov	r1, r3
 8016dde:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016de0:	f7fe fc98 	bl	8015714 <_ZL10_strnlen_sPKcj>
 8016de4:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8016de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d007      	beq.n	8016e00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 8016df0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016df4:	429a      	cmp	r2, r3
 8016df6:	d201      	bcs.n	8016dfc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 8016df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016dfa:	e000      	b.n	8016dfe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 8016dfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016dfe:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8016e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e02:	f003 0302 	and.w	r3, r3, #2
 8016e06:	2b00      	cmp	r3, #0
 8016e08:	d113      	bne.n	8016e32 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 8016e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e0c:	1c5a      	adds	r2, r3, #1
 8016e0e:	637a      	str	r2, [r7, #52]	; 0x34
 8016e10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016e12:	429a      	cmp	r2, r3
 8016e14:	bf8c      	ite	hi
 8016e16:	2301      	movhi	r3, #1
 8016e18:	2300      	movls	r3, #0
 8016e1a:	b2db      	uxtb	r3, r3
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d008      	beq.n	8016e32 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 8016e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e22:	1c53      	adds	r3, r2, #1
 8016e24:	647b      	str	r3, [r7, #68]	; 0x44
 8016e26:	68fe      	ldr	r6, [r7, #12]
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	68b9      	ldr	r1, [r7, #8]
 8016e2c:	2020      	movs	r0, #32
 8016e2e:	47b0      	blx	r6
          while (l++ < width) {
 8016e30:	e7eb      	b.n	8016e0a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8016e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e34:	781b      	ldrb	r3, [r3, #0]
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	d00b      	beq.n	8016e52 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8016e3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d004      	beq.n	8016e4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 8016e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e46:	1e5a      	subs	r2, r3, #1
 8016e48:	64fa      	str	r2, [r7, #76]	; 0x4c
 8016e4a:	2b00      	cmp	r3, #0
 8016e4c:	d001      	beq.n	8016e52 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8016e4e:	2301      	movs	r3, #1
 8016e50:	e000      	b.n	8016e54 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 8016e52:	2300      	movs	r3, #0
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d00b      	beq.n	8016e70 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 8016e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e5a:	1c5a      	adds	r2, r3, #1
 8016e5c:	63ba      	str	r2, [r7, #56]	; 0x38
 8016e5e:	7818      	ldrb	r0, [r3, #0]
 8016e60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e62:	1c53      	adds	r3, r2, #1
 8016e64:	647b      	str	r3, [r7, #68]	; 0x44
 8016e66:	68fe      	ldr	r6, [r7, #12]
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	68b9      	ldr	r1, [r7, #8]
 8016e6c:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8016e6e:	e7e0      	b.n	8016e32 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8016e70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e72:	f003 0302 	and.w	r3, r3, #2
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d013      	beq.n	8016ea2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 8016e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e7c:	1c5a      	adds	r2, r3, #1
 8016e7e:	637a      	str	r2, [r7, #52]	; 0x34
 8016e80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016e82:	429a      	cmp	r2, r3
 8016e84:	bf8c      	ite	hi
 8016e86:	2301      	movhi	r3, #1
 8016e88:	2300      	movls	r3, #0
 8016e8a:	b2db      	uxtb	r3, r3
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d008      	beq.n	8016ea2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 8016e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e92:	1c53      	adds	r3, r2, #1
 8016e94:	647b      	str	r3, [r7, #68]	; 0x44
 8016e96:	68fe      	ldr	r6, [r7, #12]
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	68b9      	ldr	r1, [r7, #8]
 8016e9c:	2020      	movs	r0, #32
 8016e9e:	47b0      	blx	r6
          while (l++ < width) {
 8016ea0:	e7eb      	b.n	8016e7a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 8016ea2:	683b      	ldr	r3, [r7, #0]
 8016ea4:	3301      	adds	r3, #1
 8016ea6:	603b      	str	r3, [r7, #0]
        break;
 8016ea8:	e03e      	b.n	8016f28 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8016eaa:	2308      	movs	r3, #8
 8016eac:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8016eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016eb0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8016eb4:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8016ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016ec0:	1d1a      	adds	r2, r3, #4
 8016ec2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	461a      	mov	r2, r3
 8016eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ecc:	9305      	str	r3, [sp, #20]
 8016ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ed0:	9304      	str	r3, [sp, #16]
 8016ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ed4:	9303      	str	r3, [sp, #12]
 8016ed6:	2310      	movs	r3, #16
 8016ed8:	9302      	str	r3, [sp, #8]
 8016eda:	2300      	movs	r3, #0
 8016edc:	9301      	str	r3, [sp, #4]
 8016ede:	9200      	str	r2, [sp, #0]
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016ee4:	68b9      	ldr	r1, [r7, #8]
 8016ee6:	68f8      	ldr	r0, [r7, #12]
 8016ee8:	f7fe fd9a 	bl	8015a20 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8016eec:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	3301      	adds	r3, #1
 8016ef2:	603b      	str	r3, [r7, #0]
        break;
 8016ef4:	e018      	b.n	8016f28 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8016ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016ef8:	1c53      	adds	r3, r2, #1
 8016efa:	647b      	str	r3, [r7, #68]	; 0x44
 8016efc:	68fe      	ldr	r6, [r7, #12]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	68b9      	ldr	r1, [r7, #8]
 8016f02:	2025      	movs	r0, #37	; 0x25
 8016f04:	47b0      	blx	r6
        format++;
 8016f06:	683b      	ldr	r3, [r7, #0]
 8016f08:	3301      	adds	r3, #1
 8016f0a:	603b      	str	r3, [r7, #0]
        break;
 8016f0c:	e00c      	b.n	8016f28 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	7818      	ldrb	r0, [r3, #0]
 8016f12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f14:	1c53      	adds	r3, r2, #1
 8016f16:	647b      	str	r3, [r7, #68]	; 0x44
 8016f18:	68fe      	ldr	r6, [r7, #12]
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	68b9      	ldr	r1, [r7, #8]
 8016f1e:	47b0      	blx	r6
        format++;
 8016f20:	683b      	ldr	r3, [r7, #0]
 8016f22:	3301      	adds	r3, #1
 8016f24:	603b      	str	r3, [r7, #0]
        break;
 8016f26:	bf00      	nop
  while (*format)
 8016f28:	f7ff bb4d 	b.w	80165c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8016f2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	429a      	cmp	r2, r3
 8016f32:	d302      	bcc.n	8016f3a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	1e5a      	subs	r2, r3, #1
 8016f38:	e000      	b.n	8016f3c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 8016f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f3c:	68fc      	ldr	r4, [r7, #12]
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	68b9      	ldr	r1, [r7, #8]
 8016f42:	2000      	movs	r0, #0
 8016f44:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8016f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016f48:	4618      	mov	r0, r3
 8016f4a:	375c      	adds	r7, #92	; 0x5c
 8016f4c:	46bd      	mov	sp, r7
 8016f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f52:	bf00      	nop

08016f54 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8016f54:	b40f      	push	{r0, r1, r2, r3}
 8016f56:	b580      	push	{r7, lr}
 8016f58:	b086      	sub	sp, #24
 8016f5a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8016f5c:	f107 031c 	add.w	r3, r7, #28
 8016f60:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8016f62:	1d39      	adds	r1, r7, #4
 8016f64:	68bb      	ldr	r3, [r7, #8]
 8016f66:	9300      	str	r3, [sp, #0]
 8016f68:	69bb      	ldr	r3, [r7, #24]
 8016f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f6e:	4806      	ldr	r0, [pc, #24]	; (8016f88 <printf_+0x34>)
 8016f70:	f7ff fb1a 	bl	80165a8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 8016f74:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8016f76:	68fb      	ldr	r3, [r7, #12]
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3710      	adds	r7, #16
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8016f82:	b004      	add	sp, #16
 8016f84:	4770      	bx	lr
 8016f86:	bf00      	nop
 8016f88:	080156ef 	.word	0x080156ef

08016f8c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8016f8c:	b480      	push	{r7}
 8016f8e:	b083      	sub	sp, #12
 8016f90:	af00      	add	r7, sp, #0
 8016f92:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8016f94:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016f98:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8016f9c:	f003 0301 	and.w	r3, r3, #1
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d009      	beq.n	8016fb8 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8016fa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016fa8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8016fac:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d001      	beq.n	8016fb8 <ITM_SendChar+0x2c>
 8016fb4:	2301      	movs	r3, #1
 8016fb6:	e000      	b.n	8016fba <ITM_SendChar+0x2e>
 8016fb8:	2300      	movs	r3, #0
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d010      	beq.n	8016fe0 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8016fbe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	bf0c      	ite	eq
 8016fc8:	2301      	moveq	r3, #1
 8016fca:	2300      	movne	r3, #0
 8016fcc:	b2db      	uxtb	r3, r3
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d001      	beq.n	8016fd6 <ITM_SendChar+0x4a>
    {
      __NOP();
 8016fd2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8016fd4:	e7f3      	b.n	8016fbe <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8016fd6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8016fda:	687a      	ldr	r2, [r7, #4]
 8016fdc:	b2d2      	uxtb	r2, r2
 8016fde:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8016fe0:	687b      	ldr	r3, [r7, #4]
}
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	370c      	adds	r7, #12
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fec:	4770      	bx	lr

08016fee <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 8016fee:	b580      	push	{r7, lr}
 8016ff0:	b082      	sub	sp, #8
 8016ff2:	af00      	add	r7, sp, #0
 8016ff4:	4603      	mov	r3, r0
 8016ff6:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 8016ff8:	79fb      	ldrb	r3, [r7, #7]
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	f7ff ffc6 	bl	8016f8c <ITM_SendChar>
}
 8017000:	bf00      	nop
 8017002:	3708      	adds	r7, #8
 8017004:	46bd      	mov	sp, r7
 8017006:	bd80      	pop	{r7, pc}

08017008 <__NVIC_SetPriority>:
{
 8017008:	b480      	push	{r7}
 801700a:	b083      	sub	sp, #12
 801700c:	af00      	add	r7, sp, #0
 801700e:	4603      	mov	r3, r0
 8017010:	6039      	str	r1, [r7, #0]
 8017012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8017014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017018:	2b00      	cmp	r3, #0
 801701a:	db0a      	blt.n	8017032 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801701c:	683b      	ldr	r3, [r7, #0]
 801701e:	b2da      	uxtb	r2, r3
 8017020:	490c      	ldr	r1, [pc, #48]	; (8017054 <__NVIC_SetPriority+0x4c>)
 8017022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8017026:	0112      	lsls	r2, r2, #4
 8017028:	b2d2      	uxtb	r2, r2
 801702a:	440b      	add	r3, r1
 801702c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8017030:	e00a      	b.n	8017048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017032:	683b      	ldr	r3, [r7, #0]
 8017034:	b2da      	uxtb	r2, r3
 8017036:	4908      	ldr	r1, [pc, #32]	; (8017058 <__NVIC_SetPriority+0x50>)
 8017038:	79fb      	ldrb	r3, [r7, #7]
 801703a:	f003 030f 	and.w	r3, r3, #15
 801703e:	3b04      	subs	r3, #4
 8017040:	0112      	lsls	r2, r2, #4
 8017042:	b2d2      	uxtb	r2, r2
 8017044:	440b      	add	r3, r1
 8017046:	761a      	strb	r2, [r3, #24]
}
 8017048:	bf00      	nop
 801704a:	370c      	adds	r7, #12
 801704c:	46bd      	mov	sp, r7
 801704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017052:	4770      	bx	lr
 8017054:	e000e100 	.word	0xe000e100
 8017058:	e000ed00 	.word	0xe000ed00

0801705c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801705c:	b580      	push	{r7, lr}
 801705e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8017060:	4b05      	ldr	r3, [pc, #20]	; (8017078 <SysTick_Handler+0x1c>)
 8017062:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8017064:	f003 f8a8 	bl	801a1b8 <xTaskGetSchedulerState>
 8017068:	4603      	mov	r3, r0
 801706a:	2b01      	cmp	r3, #1
 801706c:	d001      	beq.n	8017072 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801706e:	f004 f8d3 	bl	801b218 <xPortSysTickHandler>
  }
}
 8017072:	bf00      	nop
 8017074:	bd80      	pop	{r7, pc}
 8017076:	bf00      	nop
 8017078:	e000e010 	.word	0xe000e010

0801707c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801707c:	b580      	push	{r7, lr}
 801707e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8017080:	2100      	movs	r1, #0
 8017082:	f06f 0004 	mvn.w	r0, #4
 8017086:	f7ff ffbf 	bl	8017008 <__NVIC_SetPriority>
#endif
}
 801708a:	bf00      	nop
 801708c:	bd80      	pop	{r7, pc}
	...

08017090 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8017090:	b480      	push	{r7}
 8017092:	b083      	sub	sp, #12
 8017094:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017096:	f3ef 8305 	mrs	r3, IPSR
 801709a:	603b      	str	r3, [r7, #0]
  return(result);
 801709c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d003      	beq.n	80170aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80170a2:	f06f 0305 	mvn.w	r3, #5
 80170a6:	607b      	str	r3, [r7, #4]
 80170a8:	e00c      	b.n	80170c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80170aa:	4b0a      	ldr	r3, [pc, #40]	; (80170d4 <osKernelInitialize+0x44>)
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	2b00      	cmp	r3, #0
 80170b0:	d105      	bne.n	80170be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80170b2:	4b08      	ldr	r3, [pc, #32]	; (80170d4 <osKernelInitialize+0x44>)
 80170b4:	2201      	movs	r2, #1
 80170b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80170b8:	2300      	movs	r3, #0
 80170ba:	607b      	str	r3, [r7, #4]
 80170bc:	e002      	b.n	80170c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80170be:	f04f 33ff 	mov.w	r3, #4294967295
 80170c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80170c4:	687b      	ldr	r3, [r7, #4]
}
 80170c6:	4618      	mov	r0, r3
 80170c8:	370c      	adds	r7, #12
 80170ca:	46bd      	mov	sp, r7
 80170cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d0:	4770      	bx	lr
 80170d2:	bf00      	nop
 80170d4:	200017c8 	.word	0x200017c8

080170d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80170d8:	b580      	push	{r7, lr}
 80170da:	b082      	sub	sp, #8
 80170dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80170de:	f3ef 8305 	mrs	r3, IPSR
 80170e2:	603b      	str	r3, [r7, #0]
  return(result);
 80170e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80170e6:	2b00      	cmp	r3, #0
 80170e8:	d003      	beq.n	80170f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80170ea:	f06f 0305 	mvn.w	r3, #5
 80170ee:	607b      	str	r3, [r7, #4]
 80170f0:	e010      	b.n	8017114 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80170f2:	4b0b      	ldr	r3, [pc, #44]	; (8017120 <osKernelStart+0x48>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	2b01      	cmp	r3, #1
 80170f8:	d109      	bne.n	801710e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80170fa:	f7ff ffbf 	bl	801707c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80170fe:	4b08      	ldr	r3, [pc, #32]	; (8017120 <osKernelStart+0x48>)
 8017100:	2202      	movs	r2, #2
 8017102:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8017104:	f002 fb98 	bl	8019838 <vTaskStartScheduler>
      stat = osOK;
 8017108:	2300      	movs	r3, #0
 801710a:	607b      	str	r3, [r7, #4]
 801710c:	e002      	b.n	8017114 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801710e:	f04f 33ff 	mov.w	r3, #4294967295
 8017112:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8017114:	687b      	ldr	r3, [r7, #4]
}
 8017116:	4618      	mov	r0, r3
 8017118:	3708      	adds	r7, #8
 801711a:	46bd      	mov	sp, r7
 801711c:	bd80      	pop	{r7, pc}
 801711e:	bf00      	nop
 8017120:	200017c8 	.word	0x200017c8

08017124 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8017124:	b580      	push	{r7, lr}
 8017126:	b08e      	sub	sp, #56	; 0x38
 8017128:	af04      	add	r7, sp, #16
 801712a:	60f8      	str	r0, [r7, #12]
 801712c:	60b9      	str	r1, [r7, #8]
 801712e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8017130:	2300      	movs	r3, #0
 8017132:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017134:	f3ef 8305 	mrs	r3, IPSR
 8017138:	617b      	str	r3, [r7, #20]
  return(result);
 801713a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801713c:	2b00      	cmp	r3, #0
 801713e:	d17e      	bne.n	801723e <osThreadNew+0x11a>
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d07b      	beq.n	801723e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8017146:	2380      	movs	r3, #128	; 0x80
 8017148:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801714a:	2318      	movs	r3, #24
 801714c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801714e:	2300      	movs	r3, #0
 8017150:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8017152:	f04f 33ff 	mov.w	r3, #4294967295
 8017156:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d045      	beq.n	80171ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d002      	beq.n	801716c <osThreadNew+0x48>
        name = attr->name;
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	699b      	ldr	r3, [r3, #24]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d002      	beq.n	801717a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	699b      	ldr	r3, [r3, #24]
 8017178:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801717a:	69fb      	ldr	r3, [r7, #28]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d008      	beq.n	8017192 <osThreadNew+0x6e>
 8017180:	69fb      	ldr	r3, [r7, #28]
 8017182:	2b38      	cmp	r3, #56	; 0x38
 8017184:	d805      	bhi.n	8017192 <osThreadNew+0x6e>
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	685b      	ldr	r3, [r3, #4]
 801718a:	f003 0301 	and.w	r3, r3, #1
 801718e:	2b00      	cmp	r3, #0
 8017190:	d001      	beq.n	8017196 <osThreadNew+0x72>
        return (NULL);
 8017192:	2300      	movs	r3, #0
 8017194:	e054      	b.n	8017240 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	695b      	ldr	r3, [r3, #20]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d003      	beq.n	80171a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	695b      	ldr	r3, [r3, #20]
 80171a2:	089b      	lsrs	r3, r3, #2
 80171a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	689b      	ldr	r3, [r3, #8]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d00e      	beq.n	80171cc <osThreadNew+0xa8>
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	68db      	ldr	r3, [r3, #12]
 80171b2:	2bbf      	cmp	r3, #191	; 0xbf
 80171b4:	d90a      	bls.n	80171cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d006      	beq.n	80171cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	695b      	ldr	r3, [r3, #20]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d002      	beq.n	80171cc <osThreadNew+0xa8>
        mem = 1;
 80171c6:	2301      	movs	r3, #1
 80171c8:	61bb      	str	r3, [r7, #24]
 80171ca:	e010      	b.n	80171ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	689b      	ldr	r3, [r3, #8]
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d10c      	bne.n	80171ee <osThreadNew+0xca>
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	68db      	ldr	r3, [r3, #12]
 80171d8:	2b00      	cmp	r3, #0
 80171da:	d108      	bne.n	80171ee <osThreadNew+0xca>
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	691b      	ldr	r3, [r3, #16]
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d104      	bne.n	80171ee <osThreadNew+0xca>
          mem = 0;
 80171e4:	2300      	movs	r3, #0
 80171e6:	61bb      	str	r3, [r7, #24]
 80171e8:	e001      	b.n	80171ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80171ea:	2300      	movs	r3, #0
 80171ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80171ee:	69bb      	ldr	r3, [r7, #24]
 80171f0:	2b01      	cmp	r3, #1
 80171f2:	d110      	bne.n	8017216 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80171f8:	687a      	ldr	r2, [r7, #4]
 80171fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80171fc:	9202      	str	r2, [sp, #8]
 80171fe:	9301      	str	r3, [sp, #4]
 8017200:	69fb      	ldr	r3, [r7, #28]
 8017202:	9300      	str	r3, [sp, #0]
 8017204:	68bb      	ldr	r3, [r7, #8]
 8017206:	6a3a      	ldr	r2, [r7, #32]
 8017208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801720a:	68f8      	ldr	r0, [r7, #12]
 801720c:	f002 f924 	bl	8019458 <xTaskCreateStatic>
 8017210:	4603      	mov	r3, r0
 8017212:	613b      	str	r3, [r7, #16]
 8017214:	e013      	b.n	801723e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8017216:	69bb      	ldr	r3, [r7, #24]
 8017218:	2b00      	cmp	r3, #0
 801721a:	d110      	bne.n	801723e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801721c:	6a3b      	ldr	r3, [r7, #32]
 801721e:	b29a      	uxth	r2, r3
 8017220:	f107 0310 	add.w	r3, r7, #16
 8017224:	9301      	str	r3, [sp, #4]
 8017226:	69fb      	ldr	r3, [r7, #28]
 8017228:	9300      	str	r3, [sp, #0]
 801722a:	68bb      	ldr	r3, [r7, #8]
 801722c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801722e:	68f8      	ldr	r0, [r7, #12]
 8017230:	f002 f96f 	bl	8019512 <xTaskCreate>
 8017234:	4603      	mov	r3, r0
 8017236:	2b01      	cmp	r3, #1
 8017238:	d001      	beq.n	801723e <osThreadNew+0x11a>
            hTask = NULL;
 801723a:	2300      	movs	r3, #0
 801723c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801723e:	693b      	ldr	r3, [r7, #16]
}
 8017240:	4618      	mov	r0, r3
 8017242:	3728      	adds	r7, #40	; 0x28
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}

08017248 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8017248:	b580      	push	{r7, lr}
 801724a:	b084      	sub	sp, #16
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017250:	f3ef 8305 	mrs	r3, IPSR
 8017254:	60bb      	str	r3, [r7, #8]
  return(result);
 8017256:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8017258:	2b00      	cmp	r3, #0
 801725a:	d003      	beq.n	8017264 <osDelay+0x1c>
    stat = osErrorISR;
 801725c:	f06f 0305 	mvn.w	r3, #5
 8017260:	60fb      	str	r3, [r7, #12]
 8017262:	e007      	b.n	8017274 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8017264:	2300      	movs	r3, #0
 8017266:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d002      	beq.n	8017274 <osDelay+0x2c>
      vTaskDelay(ticks);
 801726e:	6878      	ldr	r0, [r7, #4]
 8017270:	f002 faae 	bl	80197d0 <vTaskDelay>
    }
  }

  return (stat);
 8017274:	68fb      	ldr	r3, [r7, #12]
}
 8017276:	4618      	mov	r0, r3
 8017278:	3710      	adds	r7, #16
 801727a:	46bd      	mov	sp, r7
 801727c:	bd80      	pop	{r7, pc}

0801727e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 801727e:	b580      	push	{r7, lr}
 8017280:	b088      	sub	sp, #32
 8017282:	af00      	add	r7, sp, #0
 8017284:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8017286:	2300      	movs	r3, #0
 8017288:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801728a:	f3ef 8305 	mrs	r3, IPSR
 801728e:	60bb      	str	r3, [r7, #8]
  return(result);
 8017290:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8017292:	2b00      	cmp	r3, #0
 8017294:	d174      	bne.n	8017380 <osMutexNew+0x102>
    if (attr != NULL) {
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d003      	beq.n	80172a4 <osMutexNew+0x26>
      type = attr->attr_bits;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	685b      	ldr	r3, [r3, #4]
 80172a0:	61bb      	str	r3, [r7, #24]
 80172a2:	e001      	b.n	80172a8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80172a4:	2300      	movs	r3, #0
 80172a6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80172a8:	69bb      	ldr	r3, [r7, #24]
 80172aa:	f003 0301 	and.w	r3, r3, #1
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d002      	beq.n	80172b8 <osMutexNew+0x3a>
      rmtx = 1U;
 80172b2:	2301      	movs	r3, #1
 80172b4:	617b      	str	r3, [r7, #20]
 80172b6:	e001      	b.n	80172bc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80172b8:	2300      	movs	r3, #0
 80172ba:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80172bc:	69bb      	ldr	r3, [r7, #24]
 80172be:	f003 0308 	and.w	r3, r3, #8
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d15c      	bne.n	8017380 <osMutexNew+0x102>
      mem = -1;
 80172c6:	f04f 33ff 	mov.w	r3, #4294967295
 80172ca:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d015      	beq.n	80172fe <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	689b      	ldr	r3, [r3, #8]
 80172d6:	2b00      	cmp	r3, #0
 80172d8:	d006      	beq.n	80172e8 <osMutexNew+0x6a>
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	68db      	ldr	r3, [r3, #12]
 80172de:	2b4f      	cmp	r3, #79	; 0x4f
 80172e0:	d902      	bls.n	80172e8 <osMutexNew+0x6a>
          mem = 1;
 80172e2:	2301      	movs	r3, #1
 80172e4:	613b      	str	r3, [r7, #16]
 80172e6:	e00c      	b.n	8017302 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	689b      	ldr	r3, [r3, #8]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d108      	bne.n	8017302 <osMutexNew+0x84>
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	68db      	ldr	r3, [r3, #12]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d104      	bne.n	8017302 <osMutexNew+0x84>
            mem = 0;
 80172f8:	2300      	movs	r3, #0
 80172fa:	613b      	str	r3, [r7, #16]
 80172fc:	e001      	b.n	8017302 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80172fe:	2300      	movs	r3, #0
 8017300:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8017302:	693b      	ldr	r3, [r7, #16]
 8017304:	2b01      	cmp	r3, #1
 8017306:	d112      	bne.n	801732e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8017308:	697b      	ldr	r3, [r7, #20]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d007      	beq.n	801731e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 801730e:	687b      	ldr	r3, [r7, #4]
 8017310:	689b      	ldr	r3, [r3, #8]
 8017312:	4619      	mov	r1, r3
 8017314:	2004      	movs	r0, #4
 8017316:	f000 fd88 	bl	8017e2a <xQueueCreateMutexStatic>
 801731a:	61f8      	str	r0, [r7, #28]
 801731c:	e016      	b.n	801734c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	689b      	ldr	r3, [r3, #8]
 8017322:	4619      	mov	r1, r3
 8017324:	2001      	movs	r0, #1
 8017326:	f000 fd80 	bl	8017e2a <xQueueCreateMutexStatic>
 801732a:	61f8      	str	r0, [r7, #28]
 801732c:	e00e      	b.n	801734c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 801732e:	693b      	ldr	r3, [r7, #16]
 8017330:	2b00      	cmp	r3, #0
 8017332:	d10b      	bne.n	801734c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8017334:	697b      	ldr	r3, [r7, #20]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d004      	beq.n	8017344 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 801733a:	2004      	movs	r0, #4
 801733c:	f000 fd5d 	bl	8017dfa <xQueueCreateMutex>
 8017340:	61f8      	str	r0, [r7, #28]
 8017342:	e003      	b.n	801734c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8017344:	2001      	movs	r0, #1
 8017346:	f000 fd58 	bl	8017dfa <xQueueCreateMutex>
 801734a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 801734c:	69fb      	ldr	r3, [r7, #28]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d00c      	beq.n	801736c <osMutexNew+0xee>
        if (attr != NULL) {
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2b00      	cmp	r3, #0
 8017356:	d003      	beq.n	8017360 <osMutexNew+0xe2>
          name = attr->name;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	60fb      	str	r3, [r7, #12]
 801735e:	e001      	b.n	8017364 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8017360:	2300      	movs	r3, #0
 8017362:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8017364:	68f9      	ldr	r1, [r7, #12]
 8017366:	69f8      	ldr	r0, [r7, #28]
 8017368:	f001 fc68 	bl	8018c3c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 801736c:	69fb      	ldr	r3, [r7, #28]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d006      	beq.n	8017380 <osMutexNew+0x102>
 8017372:	697b      	ldr	r3, [r7, #20]
 8017374:	2b00      	cmp	r3, #0
 8017376:	d003      	beq.n	8017380 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8017378:	69fb      	ldr	r3, [r7, #28]
 801737a:	f043 0301 	orr.w	r3, r3, #1
 801737e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8017380:	69fb      	ldr	r3, [r7, #28]
}
 8017382:	4618      	mov	r0, r3
 8017384:	3720      	adds	r7, #32
 8017386:	46bd      	mov	sp, r7
 8017388:	bd80      	pop	{r7, pc}

0801738a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801738a:	b580      	push	{r7, lr}
 801738c:	b086      	sub	sp, #24
 801738e:	af00      	add	r7, sp, #0
 8017390:	6078      	str	r0, [r7, #4]
 8017392:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	f023 0301 	bic.w	r3, r3, #1
 801739a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f003 0301 	and.w	r3, r3, #1
 80173a2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80173a4:	2300      	movs	r3, #0
 80173a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80173a8:	f3ef 8305 	mrs	r3, IPSR
 80173ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80173ae:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80173b0:	2b00      	cmp	r3, #0
 80173b2:	d003      	beq.n	80173bc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80173b4:	f06f 0305 	mvn.w	r3, #5
 80173b8:	617b      	str	r3, [r7, #20]
 80173ba:	e02c      	b.n	8017416 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80173bc:	693b      	ldr	r3, [r7, #16]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d103      	bne.n	80173ca <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80173c2:	f06f 0303 	mvn.w	r3, #3
 80173c6:	617b      	str	r3, [r7, #20]
 80173c8:	e025      	b.n	8017416 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80173ca:	68fb      	ldr	r3, [r7, #12]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d011      	beq.n	80173f4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80173d0:	6839      	ldr	r1, [r7, #0]
 80173d2:	6938      	ldr	r0, [r7, #16]
 80173d4:	f000 fd78 	bl	8017ec8 <xQueueTakeMutexRecursive>
 80173d8:	4603      	mov	r3, r0
 80173da:	2b01      	cmp	r3, #1
 80173dc:	d01b      	beq.n	8017416 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d003      	beq.n	80173ec <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80173e4:	f06f 0301 	mvn.w	r3, #1
 80173e8:	617b      	str	r3, [r7, #20]
 80173ea:	e014      	b.n	8017416 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80173ec:	f06f 0302 	mvn.w	r3, #2
 80173f0:	617b      	str	r3, [r7, #20]
 80173f2:	e010      	b.n	8017416 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80173f4:	6839      	ldr	r1, [r7, #0]
 80173f6:	6938      	ldr	r0, [r7, #16]
 80173f8:	f001 f90c 	bl	8018614 <xQueueSemaphoreTake>
 80173fc:	4603      	mov	r3, r0
 80173fe:	2b01      	cmp	r3, #1
 8017400:	d009      	beq.n	8017416 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d003      	beq.n	8017410 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8017408:	f06f 0301 	mvn.w	r3, #1
 801740c:	617b      	str	r3, [r7, #20]
 801740e:	e002      	b.n	8017416 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8017410:	f06f 0302 	mvn.w	r3, #2
 8017414:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8017416:	697b      	ldr	r3, [r7, #20]
}
 8017418:	4618      	mov	r0, r3
 801741a:	3718      	adds	r7, #24
 801741c:	46bd      	mov	sp, r7
 801741e:	bd80      	pop	{r7, pc}

08017420 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8017420:	b580      	push	{r7, lr}
 8017422:	b086      	sub	sp, #24
 8017424:	af00      	add	r7, sp, #0
 8017426:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	f023 0301 	bic.w	r3, r3, #1
 801742e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	f003 0301 	and.w	r3, r3, #1
 8017436:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8017438:	2300      	movs	r3, #0
 801743a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801743c:	f3ef 8305 	mrs	r3, IPSR
 8017440:	60bb      	str	r3, [r7, #8]
  return(result);
 8017442:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8017444:	2b00      	cmp	r3, #0
 8017446:	d003      	beq.n	8017450 <osMutexRelease+0x30>
    stat = osErrorISR;
 8017448:	f06f 0305 	mvn.w	r3, #5
 801744c:	617b      	str	r3, [r7, #20]
 801744e:	e01f      	b.n	8017490 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8017450:	693b      	ldr	r3, [r7, #16]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d103      	bne.n	801745e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8017456:	f06f 0303 	mvn.w	r3, #3
 801745a:	617b      	str	r3, [r7, #20]
 801745c:	e018      	b.n	8017490 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d009      	beq.n	8017478 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8017464:	6938      	ldr	r0, [r7, #16]
 8017466:	f000 fcfb 	bl	8017e60 <xQueueGiveMutexRecursive>
 801746a:	4603      	mov	r3, r0
 801746c:	2b01      	cmp	r3, #1
 801746e:	d00f      	beq.n	8017490 <osMutexRelease+0x70>
        stat = osErrorResource;
 8017470:	f06f 0302 	mvn.w	r3, #2
 8017474:	617b      	str	r3, [r7, #20]
 8017476:	e00b      	b.n	8017490 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8017478:	2300      	movs	r3, #0
 801747a:	2200      	movs	r2, #0
 801747c:	2100      	movs	r1, #0
 801747e:	6938      	ldr	r0, [r7, #16]
 8017480:	f000 fdc2 	bl	8018008 <xQueueGenericSend>
 8017484:	4603      	mov	r3, r0
 8017486:	2b01      	cmp	r3, #1
 8017488:	d002      	beq.n	8017490 <osMutexRelease+0x70>
        stat = osErrorResource;
 801748a:	f06f 0302 	mvn.w	r3, #2
 801748e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8017490:	697b      	ldr	r3, [r7, #20]
}
 8017492:	4618      	mov	r0, r3
 8017494:	3718      	adds	r7, #24
 8017496:	46bd      	mov	sp, r7
 8017498:	bd80      	pop	{r7, pc}

0801749a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 801749a:	b580      	push	{r7, lr}
 801749c:	b08a      	sub	sp, #40	; 0x28
 801749e:	af02      	add	r7, sp, #8
 80174a0:	60f8      	str	r0, [r7, #12]
 80174a2:	60b9      	str	r1, [r7, #8]
 80174a4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80174a6:	2300      	movs	r3, #0
 80174a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80174aa:	f3ef 8305 	mrs	r3, IPSR
 80174ae:	613b      	str	r3, [r7, #16]
  return(result);
 80174b0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d175      	bne.n	80175a2 <osSemaphoreNew+0x108>
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d072      	beq.n	80175a2 <osSemaphoreNew+0x108>
 80174bc:	68ba      	ldr	r2, [r7, #8]
 80174be:	68fb      	ldr	r3, [r7, #12]
 80174c0:	429a      	cmp	r2, r3
 80174c2:	d86e      	bhi.n	80175a2 <osSemaphoreNew+0x108>
    mem = -1;
 80174c4:	f04f 33ff 	mov.w	r3, #4294967295
 80174c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d015      	beq.n	80174fc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	689b      	ldr	r3, [r3, #8]
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d006      	beq.n	80174e6 <osSemaphoreNew+0x4c>
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	68db      	ldr	r3, [r3, #12]
 80174dc:	2b4f      	cmp	r3, #79	; 0x4f
 80174de:	d902      	bls.n	80174e6 <osSemaphoreNew+0x4c>
        mem = 1;
 80174e0:	2301      	movs	r3, #1
 80174e2:	61bb      	str	r3, [r7, #24]
 80174e4:	e00c      	b.n	8017500 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	689b      	ldr	r3, [r3, #8]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d108      	bne.n	8017500 <osSemaphoreNew+0x66>
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	68db      	ldr	r3, [r3, #12]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	d104      	bne.n	8017500 <osSemaphoreNew+0x66>
          mem = 0;
 80174f6:	2300      	movs	r3, #0
 80174f8:	61bb      	str	r3, [r7, #24]
 80174fa:	e001      	b.n	8017500 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80174fc:	2300      	movs	r3, #0
 80174fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8017500:	69bb      	ldr	r3, [r7, #24]
 8017502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017506:	d04c      	beq.n	80175a2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8017508:	68fb      	ldr	r3, [r7, #12]
 801750a:	2b01      	cmp	r3, #1
 801750c:	d128      	bne.n	8017560 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 801750e:	69bb      	ldr	r3, [r7, #24]
 8017510:	2b01      	cmp	r3, #1
 8017512:	d10a      	bne.n	801752a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	689b      	ldr	r3, [r3, #8]
 8017518:	2203      	movs	r2, #3
 801751a:	9200      	str	r2, [sp, #0]
 801751c:	2200      	movs	r2, #0
 801751e:	2100      	movs	r1, #0
 8017520:	2001      	movs	r0, #1
 8017522:	f000 fb7b 	bl	8017c1c <xQueueGenericCreateStatic>
 8017526:	61f8      	str	r0, [r7, #28]
 8017528:	e005      	b.n	8017536 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801752a:	2203      	movs	r2, #3
 801752c:	2100      	movs	r1, #0
 801752e:	2001      	movs	r0, #1
 8017530:	f000 fbec 	bl	8017d0c <xQueueGenericCreate>
 8017534:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8017536:	69fb      	ldr	r3, [r7, #28]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d022      	beq.n	8017582 <osSemaphoreNew+0xe8>
 801753c:	68bb      	ldr	r3, [r7, #8]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d01f      	beq.n	8017582 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8017542:	2300      	movs	r3, #0
 8017544:	2200      	movs	r2, #0
 8017546:	2100      	movs	r1, #0
 8017548:	69f8      	ldr	r0, [r7, #28]
 801754a:	f000 fd5d 	bl	8018008 <xQueueGenericSend>
 801754e:	4603      	mov	r3, r0
 8017550:	2b01      	cmp	r3, #1
 8017552:	d016      	beq.n	8017582 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8017554:	69f8      	ldr	r0, [r7, #28]
 8017556:	f001 fa25 	bl	80189a4 <vQueueDelete>
            hSemaphore = NULL;
 801755a:	2300      	movs	r3, #0
 801755c:	61fb      	str	r3, [r7, #28]
 801755e:	e010      	b.n	8017582 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8017560:	69bb      	ldr	r3, [r7, #24]
 8017562:	2b01      	cmp	r3, #1
 8017564:	d108      	bne.n	8017578 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	689b      	ldr	r3, [r3, #8]
 801756a:	461a      	mov	r2, r3
 801756c:	68b9      	ldr	r1, [r7, #8]
 801756e:	68f8      	ldr	r0, [r7, #12]
 8017570:	f000 fce0 	bl	8017f34 <xQueueCreateCountingSemaphoreStatic>
 8017574:	61f8      	str	r0, [r7, #28]
 8017576:	e004      	b.n	8017582 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8017578:	68b9      	ldr	r1, [r7, #8]
 801757a:	68f8      	ldr	r0, [r7, #12]
 801757c:	f000 fd11 	bl	8017fa2 <xQueueCreateCountingSemaphore>
 8017580:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8017582:	69fb      	ldr	r3, [r7, #28]
 8017584:	2b00      	cmp	r3, #0
 8017586:	d00c      	beq.n	80175a2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d003      	beq.n	8017596 <osSemaphoreNew+0xfc>
          name = attr->name;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	617b      	str	r3, [r7, #20]
 8017594:	e001      	b.n	801759a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8017596:	2300      	movs	r3, #0
 8017598:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801759a:	6979      	ldr	r1, [r7, #20]
 801759c:	69f8      	ldr	r0, [r7, #28]
 801759e:	f001 fb4d 	bl	8018c3c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80175a2:	69fb      	ldr	r3, [r7, #28]
}
 80175a4:	4618      	mov	r0, r3
 80175a6:	3720      	adds	r7, #32
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}

080175ac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b086      	sub	sp, #24
 80175b0:	af00      	add	r7, sp, #0
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80175ba:	2300      	movs	r3, #0
 80175bc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d103      	bne.n	80175cc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80175c4:	f06f 0303 	mvn.w	r3, #3
 80175c8:	617b      	str	r3, [r7, #20]
 80175ca:	e039      	b.n	8017640 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80175cc:	f3ef 8305 	mrs	r3, IPSR
 80175d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80175d2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d022      	beq.n	801761e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80175d8:	683b      	ldr	r3, [r7, #0]
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d003      	beq.n	80175e6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80175de:	f06f 0303 	mvn.w	r3, #3
 80175e2:	617b      	str	r3, [r7, #20]
 80175e4:	e02c      	b.n	8017640 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80175e6:	2300      	movs	r3, #0
 80175e8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80175ea:	f107 0308 	add.w	r3, r7, #8
 80175ee:	461a      	mov	r2, r3
 80175f0:	2100      	movs	r1, #0
 80175f2:	6938      	ldr	r0, [r7, #16]
 80175f4:	f001 f91a 	bl	801882c <xQueueReceiveFromISR>
 80175f8:	4603      	mov	r3, r0
 80175fa:	2b01      	cmp	r3, #1
 80175fc:	d003      	beq.n	8017606 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80175fe:	f06f 0302 	mvn.w	r3, #2
 8017602:	617b      	str	r3, [r7, #20]
 8017604:	e01c      	b.n	8017640 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8017606:	68bb      	ldr	r3, [r7, #8]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d019      	beq.n	8017640 <osSemaphoreAcquire+0x94>
 801760c:	4b0f      	ldr	r3, [pc, #60]	; (801764c <osSemaphoreAcquire+0xa0>)
 801760e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017612:	601a      	str	r2, [r3, #0]
 8017614:	f3bf 8f4f 	dsb	sy
 8017618:	f3bf 8f6f 	isb	sy
 801761c:	e010      	b.n	8017640 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 801761e:	6839      	ldr	r1, [r7, #0]
 8017620:	6938      	ldr	r0, [r7, #16]
 8017622:	f000 fff7 	bl	8018614 <xQueueSemaphoreTake>
 8017626:	4603      	mov	r3, r0
 8017628:	2b01      	cmp	r3, #1
 801762a:	d009      	beq.n	8017640 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 801762c:	683b      	ldr	r3, [r7, #0]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d003      	beq.n	801763a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8017632:	f06f 0301 	mvn.w	r3, #1
 8017636:	617b      	str	r3, [r7, #20]
 8017638:	e002      	b.n	8017640 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801763a:	f06f 0302 	mvn.w	r3, #2
 801763e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8017640:	697b      	ldr	r3, [r7, #20]
}
 8017642:	4618      	mov	r0, r3
 8017644:	3718      	adds	r7, #24
 8017646:	46bd      	mov	sp, r7
 8017648:	bd80      	pop	{r7, pc}
 801764a:	bf00      	nop
 801764c:	e000ed04 	.word	0xe000ed04

08017650 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8017650:	b580      	push	{r7, lr}
 8017652:	b086      	sub	sp, #24
 8017654:	af00      	add	r7, sp, #0
 8017656:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801765c:	2300      	movs	r3, #0
 801765e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8017660:	693b      	ldr	r3, [r7, #16]
 8017662:	2b00      	cmp	r3, #0
 8017664:	d103      	bne.n	801766e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8017666:	f06f 0303 	mvn.w	r3, #3
 801766a:	617b      	str	r3, [r7, #20]
 801766c:	e02c      	b.n	80176c8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801766e:	f3ef 8305 	mrs	r3, IPSR
 8017672:	60fb      	str	r3, [r7, #12]
  return(result);
 8017674:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8017676:	2b00      	cmp	r3, #0
 8017678:	d01a      	beq.n	80176b0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801767a:	2300      	movs	r3, #0
 801767c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801767e:	f107 0308 	add.w	r3, r7, #8
 8017682:	4619      	mov	r1, r3
 8017684:	6938      	ldr	r0, [r7, #16]
 8017686:	f000 fe58 	bl	801833a <xQueueGiveFromISR>
 801768a:	4603      	mov	r3, r0
 801768c:	2b01      	cmp	r3, #1
 801768e:	d003      	beq.n	8017698 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8017690:	f06f 0302 	mvn.w	r3, #2
 8017694:	617b      	str	r3, [r7, #20]
 8017696:	e017      	b.n	80176c8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8017698:	68bb      	ldr	r3, [r7, #8]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d014      	beq.n	80176c8 <osSemaphoreRelease+0x78>
 801769e:	4b0d      	ldr	r3, [pc, #52]	; (80176d4 <osSemaphoreRelease+0x84>)
 80176a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80176a4:	601a      	str	r2, [r3, #0]
 80176a6:	f3bf 8f4f 	dsb	sy
 80176aa:	f3bf 8f6f 	isb	sy
 80176ae:	e00b      	b.n	80176c8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80176b0:	2300      	movs	r3, #0
 80176b2:	2200      	movs	r2, #0
 80176b4:	2100      	movs	r1, #0
 80176b6:	6938      	ldr	r0, [r7, #16]
 80176b8:	f000 fca6 	bl	8018008 <xQueueGenericSend>
 80176bc:	4603      	mov	r3, r0
 80176be:	2b01      	cmp	r3, #1
 80176c0:	d002      	beq.n	80176c8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80176c2:	f06f 0302 	mvn.w	r3, #2
 80176c6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80176c8:	697b      	ldr	r3, [r7, #20]
}
 80176ca:	4618      	mov	r0, r3
 80176cc:	3718      	adds	r7, #24
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
 80176d2:	bf00      	nop
 80176d4:	e000ed04 	.word	0xe000ed04

080176d8 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 80176d8:	b580      	push	{r7, lr}
 80176da:	b086      	sub	sp, #24
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 80176e4:	693b      	ldr	r3, [r7, #16]
 80176e6:	2b00      	cmp	r3, #0
 80176e8:	d102      	bne.n	80176f0 <osSemaphoreGetCount+0x18>
    count = 0U;
 80176ea:	2300      	movs	r3, #0
 80176ec:	617b      	str	r3, [r7, #20]
 80176ee:	e00e      	b.n	801770e <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80176f0:	f3ef 8305 	mrs	r3, IPSR
 80176f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80176f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d004      	beq.n	8017706 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80176fc:	6938      	ldr	r0, [r7, #16]
 80176fe:	f001 f933 	bl	8018968 <uxQueueMessagesWaitingFromISR>
 8017702:	6178      	str	r0, [r7, #20]
 8017704:	e003      	b.n	801770e <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8017706:	6938      	ldr	r0, [r7, #16]
 8017708:	f001 f910 	bl	801892c <uxQueueMessagesWaiting>
 801770c:	6178      	str	r0, [r7, #20]
  }

  return (count);
 801770e:	697b      	ldr	r3, [r7, #20]
}
 8017710:	4618      	mov	r0, r3
 8017712:	3718      	adds	r7, #24
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}

08017718 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8017718:	b580      	push	{r7, lr}
 801771a:	b08a      	sub	sp, #40	; 0x28
 801771c:	af02      	add	r7, sp, #8
 801771e:	60f8      	str	r0, [r7, #12]
 8017720:	60b9      	str	r1, [r7, #8]
 8017722:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8017724:	2300      	movs	r3, #0
 8017726:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017728:	f3ef 8305 	mrs	r3, IPSR
 801772c:	613b      	str	r3, [r7, #16]
  return(result);
 801772e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8017730:	2b00      	cmp	r3, #0
 8017732:	d15f      	bne.n	80177f4 <osMessageQueueNew+0xdc>
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d05c      	beq.n	80177f4 <osMessageQueueNew+0xdc>
 801773a:	68bb      	ldr	r3, [r7, #8]
 801773c:	2b00      	cmp	r3, #0
 801773e:	d059      	beq.n	80177f4 <osMessageQueueNew+0xdc>
    mem = -1;
 8017740:	f04f 33ff 	mov.w	r3, #4294967295
 8017744:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d029      	beq.n	80177a0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	689b      	ldr	r3, [r3, #8]
 8017750:	2b00      	cmp	r3, #0
 8017752:	d012      	beq.n	801777a <osMessageQueueNew+0x62>
 8017754:	687b      	ldr	r3, [r7, #4]
 8017756:	68db      	ldr	r3, [r3, #12]
 8017758:	2b4f      	cmp	r3, #79	; 0x4f
 801775a:	d90e      	bls.n	801777a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8017760:	2b00      	cmp	r3, #0
 8017762:	d00a      	beq.n	801777a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	695a      	ldr	r2, [r3, #20]
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	68b9      	ldr	r1, [r7, #8]
 801776c:	fb01 f303 	mul.w	r3, r1, r3
 8017770:	429a      	cmp	r2, r3
 8017772:	d302      	bcc.n	801777a <osMessageQueueNew+0x62>
        mem = 1;
 8017774:	2301      	movs	r3, #1
 8017776:	61bb      	str	r3, [r7, #24]
 8017778:	e014      	b.n	80177a4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	689b      	ldr	r3, [r3, #8]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d110      	bne.n	80177a4 <osMessageQueueNew+0x8c>
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	68db      	ldr	r3, [r3, #12]
 8017786:	2b00      	cmp	r3, #0
 8017788:	d10c      	bne.n	80177a4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801778e:	2b00      	cmp	r3, #0
 8017790:	d108      	bne.n	80177a4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	695b      	ldr	r3, [r3, #20]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d104      	bne.n	80177a4 <osMessageQueueNew+0x8c>
          mem = 0;
 801779a:	2300      	movs	r3, #0
 801779c:	61bb      	str	r3, [r7, #24]
 801779e:	e001      	b.n	80177a4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80177a0:	2300      	movs	r3, #0
 80177a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80177a4:	69bb      	ldr	r3, [r7, #24]
 80177a6:	2b01      	cmp	r3, #1
 80177a8:	d10b      	bne.n	80177c2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80177aa:	687b      	ldr	r3, [r7, #4]
 80177ac:	691a      	ldr	r2, [r3, #16]
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	689b      	ldr	r3, [r3, #8]
 80177b2:	2100      	movs	r1, #0
 80177b4:	9100      	str	r1, [sp, #0]
 80177b6:	68b9      	ldr	r1, [r7, #8]
 80177b8:	68f8      	ldr	r0, [r7, #12]
 80177ba:	f000 fa2f 	bl	8017c1c <xQueueGenericCreateStatic>
 80177be:	61f8      	str	r0, [r7, #28]
 80177c0:	e008      	b.n	80177d4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80177c2:	69bb      	ldr	r3, [r7, #24]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d105      	bne.n	80177d4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80177c8:	2200      	movs	r2, #0
 80177ca:	68b9      	ldr	r1, [r7, #8]
 80177cc:	68f8      	ldr	r0, [r7, #12]
 80177ce:	f000 fa9d 	bl	8017d0c <xQueueGenericCreate>
 80177d2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80177d4:	69fb      	ldr	r3, [r7, #28]
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d00c      	beq.n	80177f4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	2b00      	cmp	r3, #0
 80177de:	d003      	beq.n	80177e8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	617b      	str	r3, [r7, #20]
 80177e6:	e001      	b.n	80177ec <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80177e8:	2300      	movs	r3, #0
 80177ea:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80177ec:	6979      	ldr	r1, [r7, #20]
 80177ee:	69f8      	ldr	r0, [r7, #28]
 80177f0:	f001 fa24 	bl	8018c3c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80177f4:	69fb      	ldr	r3, [r7, #28]
}
 80177f6:	4618      	mov	r0, r3
 80177f8:	3720      	adds	r7, #32
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd80      	pop	{r7, pc}
	...

08017800 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8017800:	b580      	push	{r7, lr}
 8017802:	b088      	sub	sp, #32
 8017804:	af00      	add	r7, sp, #0
 8017806:	60f8      	str	r0, [r7, #12]
 8017808:	60b9      	str	r1, [r7, #8]
 801780a:	603b      	str	r3, [r7, #0]
 801780c:	4613      	mov	r3, r2
 801780e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8017814:	2300      	movs	r3, #0
 8017816:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8017818:	f3ef 8305 	mrs	r3, IPSR
 801781c:	617b      	str	r3, [r7, #20]
  return(result);
 801781e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8017820:	2b00      	cmp	r3, #0
 8017822:	d028      	beq.n	8017876 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8017824:	69bb      	ldr	r3, [r7, #24]
 8017826:	2b00      	cmp	r3, #0
 8017828:	d005      	beq.n	8017836 <osMessageQueuePut+0x36>
 801782a:	68bb      	ldr	r3, [r7, #8]
 801782c:	2b00      	cmp	r3, #0
 801782e:	d002      	beq.n	8017836 <osMessageQueuePut+0x36>
 8017830:	683b      	ldr	r3, [r7, #0]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d003      	beq.n	801783e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8017836:	f06f 0303 	mvn.w	r3, #3
 801783a:	61fb      	str	r3, [r7, #28]
 801783c:	e038      	b.n	80178b0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801783e:	2300      	movs	r3, #0
 8017840:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8017842:	f107 0210 	add.w	r2, r7, #16
 8017846:	2300      	movs	r3, #0
 8017848:	68b9      	ldr	r1, [r7, #8]
 801784a:	69b8      	ldr	r0, [r7, #24]
 801784c:	f000 fcda 	bl	8018204 <xQueueGenericSendFromISR>
 8017850:	4603      	mov	r3, r0
 8017852:	2b01      	cmp	r3, #1
 8017854:	d003      	beq.n	801785e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8017856:	f06f 0302 	mvn.w	r3, #2
 801785a:	61fb      	str	r3, [r7, #28]
 801785c:	e028      	b.n	80178b0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801785e:	693b      	ldr	r3, [r7, #16]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d025      	beq.n	80178b0 <osMessageQueuePut+0xb0>
 8017864:	4b15      	ldr	r3, [pc, #84]	; (80178bc <osMessageQueuePut+0xbc>)
 8017866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801786a:	601a      	str	r2, [r3, #0]
 801786c:	f3bf 8f4f 	dsb	sy
 8017870:	f3bf 8f6f 	isb	sy
 8017874:	e01c      	b.n	80178b0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017876:	69bb      	ldr	r3, [r7, #24]
 8017878:	2b00      	cmp	r3, #0
 801787a:	d002      	beq.n	8017882 <osMessageQueuePut+0x82>
 801787c:	68bb      	ldr	r3, [r7, #8]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d103      	bne.n	801788a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8017882:	f06f 0303 	mvn.w	r3, #3
 8017886:	61fb      	str	r3, [r7, #28]
 8017888:	e012      	b.n	80178b0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801788a:	2300      	movs	r3, #0
 801788c:	683a      	ldr	r2, [r7, #0]
 801788e:	68b9      	ldr	r1, [r7, #8]
 8017890:	69b8      	ldr	r0, [r7, #24]
 8017892:	f000 fbb9 	bl	8018008 <xQueueGenericSend>
 8017896:	4603      	mov	r3, r0
 8017898:	2b01      	cmp	r3, #1
 801789a:	d009      	beq.n	80178b0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801789c:	683b      	ldr	r3, [r7, #0]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d003      	beq.n	80178aa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80178a2:	f06f 0301 	mvn.w	r3, #1
 80178a6:	61fb      	str	r3, [r7, #28]
 80178a8:	e002      	b.n	80178b0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80178aa:	f06f 0302 	mvn.w	r3, #2
 80178ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80178b0:	69fb      	ldr	r3, [r7, #28]
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3720      	adds	r7, #32
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}
 80178ba:	bf00      	nop
 80178bc:	e000ed04 	.word	0xe000ed04

080178c0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80178c0:	b580      	push	{r7, lr}
 80178c2:	b088      	sub	sp, #32
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	60f8      	str	r0, [r7, #12]
 80178c8:	60b9      	str	r1, [r7, #8]
 80178ca:	607a      	str	r2, [r7, #4]
 80178cc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80178d2:	2300      	movs	r3, #0
 80178d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80178d6:	f3ef 8305 	mrs	r3, IPSR
 80178da:	617b      	str	r3, [r7, #20]
  return(result);
 80178dc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d028      	beq.n	8017934 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80178e2:	69bb      	ldr	r3, [r7, #24]
 80178e4:	2b00      	cmp	r3, #0
 80178e6:	d005      	beq.n	80178f4 <osMessageQueueGet+0x34>
 80178e8:	68bb      	ldr	r3, [r7, #8]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d002      	beq.n	80178f4 <osMessageQueueGet+0x34>
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	2b00      	cmp	r3, #0
 80178f2:	d003      	beq.n	80178fc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80178f4:	f06f 0303 	mvn.w	r3, #3
 80178f8:	61fb      	str	r3, [r7, #28]
 80178fa:	e037      	b.n	801796c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80178fc:	2300      	movs	r3, #0
 80178fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8017900:	f107 0310 	add.w	r3, r7, #16
 8017904:	461a      	mov	r2, r3
 8017906:	68b9      	ldr	r1, [r7, #8]
 8017908:	69b8      	ldr	r0, [r7, #24]
 801790a:	f000 ff8f 	bl	801882c <xQueueReceiveFromISR>
 801790e:	4603      	mov	r3, r0
 8017910:	2b01      	cmp	r3, #1
 8017912:	d003      	beq.n	801791c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8017914:	f06f 0302 	mvn.w	r3, #2
 8017918:	61fb      	str	r3, [r7, #28]
 801791a:	e027      	b.n	801796c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801791c:	693b      	ldr	r3, [r7, #16]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d024      	beq.n	801796c <osMessageQueueGet+0xac>
 8017922:	4b15      	ldr	r3, [pc, #84]	; (8017978 <osMessageQueueGet+0xb8>)
 8017924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017928:	601a      	str	r2, [r3, #0]
 801792a:	f3bf 8f4f 	dsb	sy
 801792e:	f3bf 8f6f 	isb	sy
 8017932:	e01b      	b.n	801796c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8017934:	69bb      	ldr	r3, [r7, #24]
 8017936:	2b00      	cmp	r3, #0
 8017938:	d002      	beq.n	8017940 <osMessageQueueGet+0x80>
 801793a:	68bb      	ldr	r3, [r7, #8]
 801793c:	2b00      	cmp	r3, #0
 801793e:	d103      	bne.n	8017948 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8017940:	f06f 0303 	mvn.w	r3, #3
 8017944:	61fb      	str	r3, [r7, #28]
 8017946:	e011      	b.n	801796c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8017948:	683a      	ldr	r2, [r7, #0]
 801794a:	68b9      	ldr	r1, [r7, #8]
 801794c:	69b8      	ldr	r0, [r7, #24]
 801794e:	f000 fd81 	bl	8018454 <xQueueReceive>
 8017952:	4603      	mov	r3, r0
 8017954:	2b01      	cmp	r3, #1
 8017956:	d009      	beq.n	801796c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8017958:	683b      	ldr	r3, [r7, #0]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d003      	beq.n	8017966 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801795e:	f06f 0301 	mvn.w	r3, #1
 8017962:	61fb      	str	r3, [r7, #28]
 8017964:	e002      	b.n	801796c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8017966:	f06f 0302 	mvn.w	r3, #2
 801796a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801796c:	69fb      	ldr	r3, [r7, #28]
}
 801796e:	4618      	mov	r0, r3
 8017970:	3720      	adds	r7, #32
 8017972:	46bd      	mov	sp, r7
 8017974:	bd80      	pop	{r7, pc}
 8017976:	bf00      	nop
 8017978:	e000ed04 	.word	0xe000ed04

0801797c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801797c:	b480      	push	{r7}
 801797e:	b085      	sub	sp, #20
 8017980:	af00      	add	r7, sp, #0
 8017982:	60f8      	str	r0, [r7, #12]
 8017984:	60b9      	str	r1, [r7, #8]
 8017986:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	4a07      	ldr	r2, [pc, #28]	; (80179a8 <vApplicationGetIdleTaskMemory+0x2c>)
 801798c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801798e:	68bb      	ldr	r3, [r7, #8]
 8017990:	4a06      	ldr	r2, [pc, #24]	; (80179ac <vApplicationGetIdleTaskMemory+0x30>)
 8017992:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8017994:	687b      	ldr	r3, [r7, #4]
 8017996:	2280      	movs	r2, #128	; 0x80
 8017998:	601a      	str	r2, [r3, #0]
}
 801799a:	bf00      	nop
 801799c:	3714      	adds	r7, #20
 801799e:	46bd      	mov	sp, r7
 80179a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179a4:	4770      	bx	lr
 80179a6:	bf00      	nop
 80179a8:	200017cc 	.word	0x200017cc
 80179ac:	2000188c 	.word	0x2000188c

080179b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80179b0:	b480      	push	{r7}
 80179b2:	b085      	sub	sp, #20
 80179b4:	af00      	add	r7, sp, #0
 80179b6:	60f8      	str	r0, [r7, #12]
 80179b8:	60b9      	str	r1, [r7, #8]
 80179ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	4a07      	ldr	r2, [pc, #28]	; (80179dc <vApplicationGetTimerTaskMemory+0x2c>)
 80179c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80179c2:	68bb      	ldr	r3, [r7, #8]
 80179c4:	4a06      	ldr	r2, [pc, #24]	; (80179e0 <vApplicationGetTimerTaskMemory+0x30>)
 80179c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80179ce:	601a      	str	r2, [r3, #0]
}
 80179d0:	bf00      	nop
 80179d2:	3714      	adds	r7, #20
 80179d4:	46bd      	mov	sp, r7
 80179d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179da:	4770      	bx	lr
 80179dc:	20001a8c 	.word	0x20001a8c
 80179e0:	20001b4c 	.word	0x20001b4c

080179e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80179e4:	b480      	push	{r7}
 80179e6:	b083      	sub	sp, #12
 80179e8:	af00      	add	r7, sp, #0
 80179ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	f103 0208 	add.w	r2, r3, #8
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	f04f 32ff 	mov.w	r2, #4294967295
 80179fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	f103 0208 	add.w	r2, r3, #8
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f103 0208 	add.w	r2, r3, #8
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	2200      	movs	r2, #0
 8017a16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8017a18:	bf00      	nop
 8017a1a:	370c      	adds	r7, #12
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a22:	4770      	bx	lr

08017a24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8017a24:	b480      	push	{r7}
 8017a26:	b083      	sub	sp, #12
 8017a28:	af00      	add	r7, sp, #0
 8017a2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	2200      	movs	r2, #0
 8017a30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8017a32:	bf00      	nop
 8017a34:	370c      	adds	r7, #12
 8017a36:	46bd      	mov	sp, r7
 8017a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3c:	4770      	bx	lr

08017a3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017a3e:	b480      	push	{r7}
 8017a40:	b085      	sub	sp, #20
 8017a42:	af00      	add	r7, sp, #0
 8017a44:	6078      	str	r0, [r7, #4]
 8017a46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	685b      	ldr	r3, [r3, #4]
 8017a4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8017a4e:	683b      	ldr	r3, [r7, #0]
 8017a50:	68fa      	ldr	r2, [r7, #12]
 8017a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8017a54:	68fb      	ldr	r3, [r7, #12]
 8017a56:	689a      	ldr	r2, [r3, #8]
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8017a5c:	68fb      	ldr	r3, [r7, #12]
 8017a5e:	689b      	ldr	r3, [r3, #8]
 8017a60:	683a      	ldr	r2, [r7, #0]
 8017a62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	683a      	ldr	r2, [r7, #0]
 8017a68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8017a6a:	683b      	ldr	r3, [r7, #0]
 8017a6c:	687a      	ldr	r2, [r7, #4]
 8017a6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	1c5a      	adds	r2, r3, #1
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	601a      	str	r2, [r3, #0]
}
 8017a7a:	bf00      	nop
 8017a7c:	3714      	adds	r7, #20
 8017a7e:	46bd      	mov	sp, r7
 8017a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a84:	4770      	bx	lr

08017a86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8017a86:	b480      	push	{r7}
 8017a88:	b085      	sub	sp, #20
 8017a8a:	af00      	add	r7, sp, #0
 8017a8c:	6078      	str	r0, [r7, #4]
 8017a8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8017a90:	683b      	ldr	r3, [r7, #0]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8017a96:	68bb      	ldr	r3, [r7, #8]
 8017a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a9c:	d103      	bne.n	8017aa6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	691b      	ldr	r3, [r3, #16]
 8017aa2:	60fb      	str	r3, [r7, #12]
 8017aa4:	e00c      	b.n	8017ac0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	3308      	adds	r3, #8
 8017aaa:	60fb      	str	r3, [r7, #12]
 8017aac:	e002      	b.n	8017ab4 <vListInsert+0x2e>
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	685b      	ldr	r3, [r3, #4]
 8017ab2:	60fb      	str	r3, [r7, #12]
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	685b      	ldr	r3, [r3, #4]
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	68ba      	ldr	r2, [r7, #8]
 8017abc:	429a      	cmp	r2, r3
 8017abe:	d2f6      	bcs.n	8017aae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	685a      	ldr	r2, [r3, #4]
 8017ac4:	683b      	ldr	r3, [r7, #0]
 8017ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8017ac8:	683b      	ldr	r3, [r7, #0]
 8017aca:	685b      	ldr	r3, [r3, #4]
 8017acc:	683a      	ldr	r2, [r7, #0]
 8017ace:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	68fa      	ldr	r2, [r7, #12]
 8017ad4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8017ad6:	68fb      	ldr	r3, [r7, #12]
 8017ad8:	683a      	ldr	r2, [r7, #0]
 8017ada:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8017adc:	683b      	ldr	r3, [r7, #0]
 8017ade:	687a      	ldr	r2, [r7, #4]
 8017ae0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	681b      	ldr	r3, [r3, #0]
 8017ae6:	1c5a      	adds	r2, r3, #1
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	601a      	str	r2, [r3, #0]
}
 8017aec:	bf00      	nop
 8017aee:	3714      	adds	r7, #20
 8017af0:	46bd      	mov	sp, r7
 8017af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af6:	4770      	bx	lr

08017af8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8017af8:	b480      	push	{r7}
 8017afa:	b085      	sub	sp, #20
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	691b      	ldr	r3, [r3, #16]
 8017b04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	685b      	ldr	r3, [r3, #4]
 8017b0a:	687a      	ldr	r2, [r7, #4]
 8017b0c:	6892      	ldr	r2, [r2, #8]
 8017b0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	689b      	ldr	r3, [r3, #8]
 8017b14:	687a      	ldr	r2, [r7, #4]
 8017b16:	6852      	ldr	r2, [r2, #4]
 8017b18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	685b      	ldr	r3, [r3, #4]
 8017b1e:	687a      	ldr	r2, [r7, #4]
 8017b20:	429a      	cmp	r2, r3
 8017b22:	d103      	bne.n	8017b2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	689a      	ldr	r2, [r3, #8]
 8017b28:	68fb      	ldr	r3, [r7, #12]
 8017b2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2200      	movs	r2, #0
 8017b30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8017b32:	68fb      	ldr	r3, [r7, #12]
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	1e5a      	subs	r2, r3, #1
 8017b38:	68fb      	ldr	r3, [r7, #12]
 8017b3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	681b      	ldr	r3, [r3, #0]
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3714      	adds	r7, #20
 8017b44:	46bd      	mov	sp, r7
 8017b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b4a:	4770      	bx	lr

08017b4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8017b4c:	b580      	push	{r7, lr}
 8017b4e:	b084      	sub	sp, #16
 8017b50:	af00      	add	r7, sp, #0
 8017b52:	6078      	str	r0, [r7, #4]
 8017b54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8017b5a:	68fb      	ldr	r3, [r7, #12]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d10a      	bne.n	8017b76 <xQueueGenericReset+0x2a>
	__asm volatile
 8017b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b64:	f383 8811 	msr	BASEPRI, r3
 8017b68:	f3bf 8f6f 	isb	sy
 8017b6c:	f3bf 8f4f 	dsb	sy
 8017b70:	60bb      	str	r3, [r7, #8]
}
 8017b72:	bf00      	nop
 8017b74:	e7fe      	b.n	8017b74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8017b76:	f003 fabd 	bl	801b0f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	681a      	ldr	r2, [r3, #0]
 8017b7e:	68fb      	ldr	r3, [r7, #12]
 8017b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017b82:	68f9      	ldr	r1, [r7, #12]
 8017b84:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017b86:	fb01 f303 	mul.w	r3, r1, r3
 8017b8a:	441a      	add	r2, r3
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	2200      	movs	r2, #0
 8017b94:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	681a      	ldr	r2, [r3, #0]
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	681a      	ldr	r2, [r3, #0]
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017ba6:	3b01      	subs	r3, #1
 8017ba8:	68f9      	ldr	r1, [r7, #12]
 8017baa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8017bac:	fb01 f303 	mul.w	r3, r1, r3
 8017bb0:	441a      	add	r2, r3
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8017bb6:	68fb      	ldr	r3, [r7, #12]
 8017bb8:	22ff      	movs	r2, #255	; 0xff
 8017bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	22ff      	movs	r2, #255	; 0xff
 8017bc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d114      	bne.n	8017bf6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	691b      	ldr	r3, [r3, #16]
 8017bd0:	2b00      	cmp	r3, #0
 8017bd2:	d01a      	beq.n	8017c0a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	3310      	adds	r3, #16
 8017bd8:	4618      	mov	r0, r3
 8017bda:	f002 f8f5 	bl	8019dc8 <xTaskRemoveFromEventList>
 8017bde:	4603      	mov	r3, r0
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	d012      	beq.n	8017c0a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8017be4:	4b0c      	ldr	r3, [pc, #48]	; (8017c18 <xQueueGenericReset+0xcc>)
 8017be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017bea:	601a      	str	r2, [r3, #0]
 8017bec:	f3bf 8f4f 	dsb	sy
 8017bf0:	f3bf 8f6f 	isb	sy
 8017bf4:	e009      	b.n	8017c0a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	3310      	adds	r3, #16
 8017bfa:	4618      	mov	r0, r3
 8017bfc:	f7ff fef2 	bl	80179e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8017c00:	68fb      	ldr	r3, [r7, #12]
 8017c02:	3324      	adds	r3, #36	; 0x24
 8017c04:	4618      	mov	r0, r3
 8017c06:	f7ff feed 	bl	80179e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8017c0a:	f003 faa3 	bl	801b154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8017c0e:	2301      	movs	r3, #1
}
 8017c10:	4618      	mov	r0, r3
 8017c12:	3710      	adds	r7, #16
 8017c14:	46bd      	mov	sp, r7
 8017c16:	bd80      	pop	{r7, pc}
 8017c18:	e000ed04 	.word	0xe000ed04

08017c1c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8017c1c:	b580      	push	{r7, lr}
 8017c1e:	b08e      	sub	sp, #56	; 0x38
 8017c20:	af02      	add	r7, sp, #8
 8017c22:	60f8      	str	r0, [r7, #12]
 8017c24:	60b9      	str	r1, [r7, #8]
 8017c26:	607a      	str	r2, [r7, #4]
 8017c28:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d10a      	bne.n	8017c46 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8017c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c34:	f383 8811 	msr	BASEPRI, r3
 8017c38:	f3bf 8f6f 	isb	sy
 8017c3c:	f3bf 8f4f 	dsb	sy
 8017c40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8017c42:	bf00      	nop
 8017c44:	e7fe      	b.n	8017c44 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8017c46:	683b      	ldr	r3, [r7, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d10a      	bne.n	8017c62 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8017c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c50:	f383 8811 	msr	BASEPRI, r3
 8017c54:	f3bf 8f6f 	isb	sy
 8017c58:	f3bf 8f4f 	dsb	sy
 8017c5c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8017c5e:	bf00      	nop
 8017c60:	e7fe      	b.n	8017c60 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	d002      	beq.n	8017c6e <xQueueGenericCreateStatic+0x52>
 8017c68:	68bb      	ldr	r3, [r7, #8]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d001      	beq.n	8017c72 <xQueueGenericCreateStatic+0x56>
 8017c6e:	2301      	movs	r3, #1
 8017c70:	e000      	b.n	8017c74 <xQueueGenericCreateStatic+0x58>
 8017c72:	2300      	movs	r3, #0
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d10a      	bne.n	8017c8e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8017c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c7c:	f383 8811 	msr	BASEPRI, r3
 8017c80:	f3bf 8f6f 	isb	sy
 8017c84:	f3bf 8f4f 	dsb	sy
 8017c88:	623b      	str	r3, [r7, #32]
}
 8017c8a:	bf00      	nop
 8017c8c:	e7fe      	b.n	8017c8c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	d102      	bne.n	8017c9a <xQueueGenericCreateStatic+0x7e>
 8017c94:	68bb      	ldr	r3, [r7, #8]
 8017c96:	2b00      	cmp	r3, #0
 8017c98:	d101      	bne.n	8017c9e <xQueueGenericCreateStatic+0x82>
 8017c9a:	2301      	movs	r3, #1
 8017c9c:	e000      	b.n	8017ca0 <xQueueGenericCreateStatic+0x84>
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	2b00      	cmp	r3, #0
 8017ca2:	d10a      	bne.n	8017cba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8017ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ca8:	f383 8811 	msr	BASEPRI, r3
 8017cac:	f3bf 8f6f 	isb	sy
 8017cb0:	f3bf 8f4f 	dsb	sy
 8017cb4:	61fb      	str	r3, [r7, #28]
}
 8017cb6:	bf00      	nop
 8017cb8:	e7fe      	b.n	8017cb8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8017cba:	2350      	movs	r3, #80	; 0x50
 8017cbc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8017cbe:	697b      	ldr	r3, [r7, #20]
 8017cc0:	2b50      	cmp	r3, #80	; 0x50
 8017cc2:	d00a      	beq.n	8017cda <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8017cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cc8:	f383 8811 	msr	BASEPRI, r3
 8017ccc:	f3bf 8f6f 	isb	sy
 8017cd0:	f3bf 8f4f 	dsb	sy
 8017cd4:	61bb      	str	r3, [r7, #24]
}
 8017cd6:	bf00      	nop
 8017cd8:	e7fe      	b.n	8017cd8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8017cda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017cdc:	683b      	ldr	r3, [r7, #0]
 8017cde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8017ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce2:	2b00      	cmp	r3, #0
 8017ce4:	d00d      	beq.n	8017d02 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8017ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce8:	2201      	movs	r2, #1
 8017cea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017cee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8017cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf4:	9300      	str	r3, [sp, #0]
 8017cf6:	4613      	mov	r3, r2
 8017cf8:	687a      	ldr	r2, [r7, #4]
 8017cfa:	68b9      	ldr	r1, [r7, #8]
 8017cfc:	68f8      	ldr	r0, [r7, #12]
 8017cfe:	f000 f83f 	bl	8017d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8017d04:	4618      	mov	r0, r3
 8017d06:	3730      	adds	r7, #48	; 0x30
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	bd80      	pop	{r7, pc}

08017d0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8017d0c:	b580      	push	{r7, lr}
 8017d0e:	b08a      	sub	sp, #40	; 0x28
 8017d10:	af02      	add	r7, sp, #8
 8017d12:	60f8      	str	r0, [r7, #12]
 8017d14:	60b9      	str	r1, [r7, #8]
 8017d16:	4613      	mov	r3, r2
 8017d18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8017d1a:	68fb      	ldr	r3, [r7, #12]
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d10a      	bne.n	8017d36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8017d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d24:	f383 8811 	msr	BASEPRI, r3
 8017d28:	f3bf 8f6f 	isb	sy
 8017d2c:	f3bf 8f4f 	dsb	sy
 8017d30:	613b      	str	r3, [r7, #16]
}
 8017d32:	bf00      	nop
 8017d34:	e7fe      	b.n	8017d34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	68ba      	ldr	r2, [r7, #8]
 8017d3a:	fb02 f303 	mul.w	r3, r2, r3
 8017d3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8017d40:	69fb      	ldr	r3, [r7, #28]
 8017d42:	3350      	adds	r3, #80	; 0x50
 8017d44:	4618      	mov	r0, r3
 8017d46:	f003 faf7 	bl	801b338 <pvPortMalloc>
 8017d4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8017d4c:	69bb      	ldr	r3, [r7, #24]
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d011      	beq.n	8017d76 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8017d52:	69bb      	ldr	r3, [r7, #24]
 8017d54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8017d56:	697b      	ldr	r3, [r7, #20]
 8017d58:	3350      	adds	r3, #80	; 0x50
 8017d5a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8017d5c:	69bb      	ldr	r3, [r7, #24]
 8017d5e:	2200      	movs	r2, #0
 8017d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8017d64:	79fa      	ldrb	r2, [r7, #7]
 8017d66:	69bb      	ldr	r3, [r7, #24]
 8017d68:	9300      	str	r3, [sp, #0]
 8017d6a:	4613      	mov	r3, r2
 8017d6c:	697a      	ldr	r2, [r7, #20]
 8017d6e:	68b9      	ldr	r1, [r7, #8]
 8017d70:	68f8      	ldr	r0, [r7, #12]
 8017d72:	f000 f805 	bl	8017d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8017d76:	69bb      	ldr	r3, [r7, #24]
	}
 8017d78:	4618      	mov	r0, r3
 8017d7a:	3720      	adds	r7, #32
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	bd80      	pop	{r7, pc}

08017d80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b084      	sub	sp, #16
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	60f8      	str	r0, [r7, #12]
 8017d88:	60b9      	str	r1, [r7, #8]
 8017d8a:	607a      	str	r2, [r7, #4]
 8017d8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8017d8e:	68bb      	ldr	r3, [r7, #8]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d103      	bne.n	8017d9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8017d94:	69bb      	ldr	r3, [r7, #24]
 8017d96:	69ba      	ldr	r2, [r7, #24]
 8017d98:	601a      	str	r2, [r3, #0]
 8017d9a:	e002      	b.n	8017da2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8017d9c:	69bb      	ldr	r3, [r7, #24]
 8017d9e:	687a      	ldr	r2, [r7, #4]
 8017da0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8017da2:	69bb      	ldr	r3, [r7, #24]
 8017da4:	68fa      	ldr	r2, [r7, #12]
 8017da6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8017da8:	69bb      	ldr	r3, [r7, #24]
 8017daa:	68ba      	ldr	r2, [r7, #8]
 8017dac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8017dae:	2101      	movs	r1, #1
 8017db0:	69b8      	ldr	r0, [r7, #24]
 8017db2:	f7ff fecb 	bl	8017b4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8017db6:	69bb      	ldr	r3, [r7, #24]
 8017db8:	78fa      	ldrb	r2, [r7, #3]
 8017dba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8017dbe:	bf00      	nop
 8017dc0:	3710      	adds	r7, #16
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bd80      	pop	{r7, pc}

08017dc6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8017dc6:	b580      	push	{r7, lr}
 8017dc8:	b082      	sub	sp, #8
 8017dca:	af00      	add	r7, sp, #0
 8017dcc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d00e      	beq.n	8017df2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	2200      	movs	r2, #0
 8017dde:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	2200      	movs	r2, #0
 8017de4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8017de6:	2300      	movs	r3, #0
 8017de8:	2200      	movs	r2, #0
 8017dea:	2100      	movs	r1, #0
 8017dec:	6878      	ldr	r0, [r7, #4]
 8017dee:	f000 f90b 	bl	8018008 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8017df2:	bf00      	nop
 8017df4:	3708      	adds	r7, #8
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}

08017dfa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8017dfa:	b580      	push	{r7, lr}
 8017dfc:	b086      	sub	sp, #24
 8017dfe:	af00      	add	r7, sp, #0
 8017e00:	4603      	mov	r3, r0
 8017e02:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8017e04:	2301      	movs	r3, #1
 8017e06:	617b      	str	r3, [r7, #20]
 8017e08:	2300      	movs	r3, #0
 8017e0a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8017e0c:	79fb      	ldrb	r3, [r7, #7]
 8017e0e:	461a      	mov	r2, r3
 8017e10:	6939      	ldr	r1, [r7, #16]
 8017e12:	6978      	ldr	r0, [r7, #20]
 8017e14:	f7ff ff7a 	bl	8017d0c <xQueueGenericCreate>
 8017e18:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8017e1a:	68f8      	ldr	r0, [r7, #12]
 8017e1c:	f7ff ffd3 	bl	8017dc6 <prvInitialiseMutex>

		return xNewQueue;
 8017e20:	68fb      	ldr	r3, [r7, #12]
	}
 8017e22:	4618      	mov	r0, r3
 8017e24:	3718      	adds	r7, #24
 8017e26:	46bd      	mov	sp, r7
 8017e28:	bd80      	pop	{r7, pc}

08017e2a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8017e2a:	b580      	push	{r7, lr}
 8017e2c:	b088      	sub	sp, #32
 8017e2e:	af02      	add	r7, sp, #8
 8017e30:	4603      	mov	r3, r0
 8017e32:	6039      	str	r1, [r7, #0]
 8017e34:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8017e36:	2301      	movs	r3, #1
 8017e38:	617b      	str	r3, [r7, #20]
 8017e3a:	2300      	movs	r3, #0
 8017e3c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8017e3e:	79fb      	ldrb	r3, [r7, #7]
 8017e40:	9300      	str	r3, [sp, #0]
 8017e42:	683b      	ldr	r3, [r7, #0]
 8017e44:	2200      	movs	r2, #0
 8017e46:	6939      	ldr	r1, [r7, #16]
 8017e48:	6978      	ldr	r0, [r7, #20]
 8017e4a:	f7ff fee7 	bl	8017c1c <xQueueGenericCreateStatic>
 8017e4e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8017e50:	68f8      	ldr	r0, [r7, #12]
 8017e52:	f7ff ffb8 	bl	8017dc6 <prvInitialiseMutex>

		return xNewQueue;
 8017e56:	68fb      	ldr	r3, [r7, #12]
	}
 8017e58:	4618      	mov	r0, r3
 8017e5a:	3718      	adds	r7, #24
 8017e5c:	46bd      	mov	sp, r7
 8017e5e:	bd80      	pop	{r7, pc}

08017e60 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8017e60:	b590      	push	{r4, r7, lr}
 8017e62:	b087      	sub	sp, #28
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8017e6c:	693b      	ldr	r3, [r7, #16]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d10a      	bne.n	8017e88 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8017e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e76:	f383 8811 	msr	BASEPRI, r3
 8017e7a:	f3bf 8f6f 	isb	sy
 8017e7e:	f3bf 8f4f 	dsb	sy
 8017e82:	60fb      	str	r3, [r7, #12]
}
 8017e84:	bf00      	nop
 8017e86:	e7fe      	b.n	8017e86 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8017e88:	693b      	ldr	r3, [r7, #16]
 8017e8a:	689c      	ldr	r4, [r3, #8]
 8017e8c:	f002 f984 	bl	801a198 <xTaskGetCurrentTaskHandle>
 8017e90:	4603      	mov	r3, r0
 8017e92:	429c      	cmp	r4, r3
 8017e94:	d111      	bne.n	8017eba <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8017e96:	693b      	ldr	r3, [r7, #16]
 8017e98:	68db      	ldr	r3, [r3, #12]
 8017e9a:	1e5a      	subs	r2, r3, #1
 8017e9c:	693b      	ldr	r3, [r7, #16]
 8017e9e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8017ea0:	693b      	ldr	r3, [r7, #16]
 8017ea2:	68db      	ldr	r3, [r3, #12]
 8017ea4:	2b00      	cmp	r3, #0
 8017ea6:	d105      	bne.n	8017eb4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8017ea8:	2300      	movs	r3, #0
 8017eaa:	2200      	movs	r2, #0
 8017eac:	2100      	movs	r1, #0
 8017eae:	6938      	ldr	r0, [r7, #16]
 8017eb0:	f000 f8aa 	bl	8018008 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8017eb4:	2301      	movs	r3, #1
 8017eb6:	617b      	str	r3, [r7, #20]
 8017eb8:	e001      	b.n	8017ebe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8017eba:	2300      	movs	r3, #0
 8017ebc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8017ebe:	697b      	ldr	r3, [r7, #20]
	}
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	371c      	adds	r7, #28
 8017ec4:	46bd      	mov	sp, r7
 8017ec6:	bd90      	pop	{r4, r7, pc}

08017ec8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8017ec8:	b590      	push	{r4, r7, lr}
 8017eca:	b087      	sub	sp, #28
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	6078      	str	r0, [r7, #4]
 8017ed0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8017ed6:	693b      	ldr	r3, [r7, #16]
 8017ed8:	2b00      	cmp	r3, #0
 8017eda:	d10a      	bne.n	8017ef2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8017edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ee0:	f383 8811 	msr	BASEPRI, r3
 8017ee4:	f3bf 8f6f 	isb	sy
 8017ee8:	f3bf 8f4f 	dsb	sy
 8017eec:	60fb      	str	r3, [r7, #12]
}
 8017eee:	bf00      	nop
 8017ef0:	e7fe      	b.n	8017ef0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8017ef2:	693b      	ldr	r3, [r7, #16]
 8017ef4:	689c      	ldr	r4, [r3, #8]
 8017ef6:	f002 f94f 	bl	801a198 <xTaskGetCurrentTaskHandle>
 8017efa:	4603      	mov	r3, r0
 8017efc:	429c      	cmp	r4, r3
 8017efe:	d107      	bne.n	8017f10 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8017f00:	693b      	ldr	r3, [r7, #16]
 8017f02:	68db      	ldr	r3, [r3, #12]
 8017f04:	1c5a      	adds	r2, r3, #1
 8017f06:	693b      	ldr	r3, [r7, #16]
 8017f08:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	617b      	str	r3, [r7, #20]
 8017f0e:	e00c      	b.n	8017f2a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8017f10:	6839      	ldr	r1, [r7, #0]
 8017f12:	6938      	ldr	r0, [r7, #16]
 8017f14:	f000 fb7e 	bl	8018614 <xQueueSemaphoreTake>
 8017f18:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8017f1a:	697b      	ldr	r3, [r7, #20]
 8017f1c:	2b00      	cmp	r3, #0
 8017f1e:	d004      	beq.n	8017f2a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8017f20:	693b      	ldr	r3, [r7, #16]
 8017f22:	68db      	ldr	r3, [r3, #12]
 8017f24:	1c5a      	adds	r2, r3, #1
 8017f26:	693b      	ldr	r3, [r7, #16]
 8017f28:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8017f2a:	697b      	ldr	r3, [r7, #20]
	}
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	371c      	adds	r7, #28
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd90      	pop	{r4, r7, pc}

08017f34 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8017f34:	b580      	push	{r7, lr}
 8017f36:	b08a      	sub	sp, #40	; 0x28
 8017f38:	af02      	add	r7, sp, #8
 8017f3a:	60f8      	str	r0, [r7, #12]
 8017f3c:	60b9      	str	r1, [r7, #8]
 8017f3e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8017f40:	68fb      	ldr	r3, [r7, #12]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d10a      	bne.n	8017f5c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8017f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f4a:	f383 8811 	msr	BASEPRI, r3
 8017f4e:	f3bf 8f6f 	isb	sy
 8017f52:	f3bf 8f4f 	dsb	sy
 8017f56:	61bb      	str	r3, [r7, #24]
}
 8017f58:	bf00      	nop
 8017f5a:	e7fe      	b.n	8017f5a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8017f5c:	68ba      	ldr	r2, [r7, #8]
 8017f5e:	68fb      	ldr	r3, [r7, #12]
 8017f60:	429a      	cmp	r2, r3
 8017f62:	d90a      	bls.n	8017f7a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8017f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f68:	f383 8811 	msr	BASEPRI, r3
 8017f6c:	f3bf 8f6f 	isb	sy
 8017f70:	f3bf 8f4f 	dsb	sy
 8017f74:	617b      	str	r3, [r7, #20]
}
 8017f76:	bf00      	nop
 8017f78:	e7fe      	b.n	8017f78 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8017f7a:	2302      	movs	r3, #2
 8017f7c:	9300      	str	r3, [sp, #0]
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	2200      	movs	r2, #0
 8017f82:	2100      	movs	r1, #0
 8017f84:	68f8      	ldr	r0, [r7, #12]
 8017f86:	f7ff fe49 	bl	8017c1c <xQueueGenericCreateStatic>
 8017f8a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8017f8c:	69fb      	ldr	r3, [r7, #28]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d002      	beq.n	8017f98 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017f92:	69fb      	ldr	r3, [r7, #28]
 8017f94:	68ba      	ldr	r2, [r7, #8]
 8017f96:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8017f98:	69fb      	ldr	r3, [r7, #28]
	}
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	3720      	adds	r7, #32
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	bd80      	pop	{r7, pc}

08017fa2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8017fa2:	b580      	push	{r7, lr}
 8017fa4:	b086      	sub	sp, #24
 8017fa6:	af00      	add	r7, sp, #0
 8017fa8:	6078      	str	r0, [r7, #4]
 8017faa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d10a      	bne.n	8017fc8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8017fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fb6:	f383 8811 	msr	BASEPRI, r3
 8017fba:	f3bf 8f6f 	isb	sy
 8017fbe:	f3bf 8f4f 	dsb	sy
 8017fc2:	613b      	str	r3, [r7, #16]
}
 8017fc4:	bf00      	nop
 8017fc6:	e7fe      	b.n	8017fc6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8017fc8:	683a      	ldr	r2, [r7, #0]
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	429a      	cmp	r2, r3
 8017fce:	d90a      	bls.n	8017fe6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8017fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fd4:	f383 8811 	msr	BASEPRI, r3
 8017fd8:	f3bf 8f6f 	isb	sy
 8017fdc:	f3bf 8f4f 	dsb	sy
 8017fe0:	60fb      	str	r3, [r7, #12]
}
 8017fe2:	bf00      	nop
 8017fe4:	e7fe      	b.n	8017fe4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8017fe6:	2202      	movs	r2, #2
 8017fe8:	2100      	movs	r1, #0
 8017fea:	6878      	ldr	r0, [r7, #4]
 8017fec:	f7ff fe8e 	bl	8017d0c <xQueueGenericCreate>
 8017ff0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8017ff2:	697b      	ldr	r3, [r7, #20]
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d002      	beq.n	8017ffe <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	683a      	ldr	r2, [r7, #0]
 8017ffc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8017ffe:	697b      	ldr	r3, [r7, #20]
	}
 8018000:	4618      	mov	r0, r3
 8018002:	3718      	adds	r7, #24
 8018004:	46bd      	mov	sp, r7
 8018006:	bd80      	pop	{r7, pc}

08018008 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018008:	b580      	push	{r7, lr}
 801800a:	b08e      	sub	sp, #56	; 0x38
 801800c:	af00      	add	r7, sp, #0
 801800e:	60f8      	str	r0, [r7, #12]
 8018010:	60b9      	str	r1, [r7, #8]
 8018012:	607a      	str	r2, [r7, #4]
 8018014:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018016:	2300      	movs	r3, #0
 8018018:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018020:	2b00      	cmp	r3, #0
 8018022:	d10a      	bne.n	801803a <xQueueGenericSend+0x32>
	__asm volatile
 8018024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018028:	f383 8811 	msr	BASEPRI, r3
 801802c:	f3bf 8f6f 	isb	sy
 8018030:	f3bf 8f4f 	dsb	sy
 8018034:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018036:	bf00      	nop
 8018038:	e7fe      	b.n	8018038 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801803a:	68bb      	ldr	r3, [r7, #8]
 801803c:	2b00      	cmp	r3, #0
 801803e:	d103      	bne.n	8018048 <xQueueGenericSend+0x40>
 8018040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018044:	2b00      	cmp	r3, #0
 8018046:	d101      	bne.n	801804c <xQueueGenericSend+0x44>
 8018048:	2301      	movs	r3, #1
 801804a:	e000      	b.n	801804e <xQueueGenericSend+0x46>
 801804c:	2300      	movs	r3, #0
 801804e:	2b00      	cmp	r3, #0
 8018050:	d10a      	bne.n	8018068 <xQueueGenericSend+0x60>
	__asm volatile
 8018052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018056:	f383 8811 	msr	BASEPRI, r3
 801805a:	f3bf 8f6f 	isb	sy
 801805e:	f3bf 8f4f 	dsb	sy
 8018062:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018064:	bf00      	nop
 8018066:	e7fe      	b.n	8018066 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018068:	683b      	ldr	r3, [r7, #0]
 801806a:	2b02      	cmp	r3, #2
 801806c:	d103      	bne.n	8018076 <xQueueGenericSend+0x6e>
 801806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018072:	2b01      	cmp	r3, #1
 8018074:	d101      	bne.n	801807a <xQueueGenericSend+0x72>
 8018076:	2301      	movs	r3, #1
 8018078:	e000      	b.n	801807c <xQueueGenericSend+0x74>
 801807a:	2300      	movs	r3, #0
 801807c:	2b00      	cmp	r3, #0
 801807e:	d10a      	bne.n	8018096 <xQueueGenericSend+0x8e>
	__asm volatile
 8018080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018084:	f383 8811 	msr	BASEPRI, r3
 8018088:	f3bf 8f6f 	isb	sy
 801808c:	f3bf 8f4f 	dsb	sy
 8018090:	623b      	str	r3, [r7, #32]
}
 8018092:	bf00      	nop
 8018094:	e7fe      	b.n	8018094 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018096:	f002 f88f 	bl	801a1b8 <xTaskGetSchedulerState>
 801809a:	4603      	mov	r3, r0
 801809c:	2b00      	cmp	r3, #0
 801809e:	d102      	bne.n	80180a6 <xQueueGenericSend+0x9e>
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d101      	bne.n	80180aa <xQueueGenericSend+0xa2>
 80180a6:	2301      	movs	r3, #1
 80180a8:	e000      	b.n	80180ac <xQueueGenericSend+0xa4>
 80180aa:	2300      	movs	r3, #0
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d10a      	bne.n	80180c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80180b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180b4:	f383 8811 	msr	BASEPRI, r3
 80180b8:	f3bf 8f6f 	isb	sy
 80180bc:	f3bf 8f4f 	dsb	sy
 80180c0:	61fb      	str	r3, [r7, #28]
}
 80180c2:	bf00      	nop
 80180c4:	e7fe      	b.n	80180c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80180c6:	f003 f815 	bl	801b0f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80180ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80180ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80180d2:	429a      	cmp	r2, r3
 80180d4:	d302      	bcc.n	80180dc <xQueueGenericSend+0xd4>
 80180d6:	683b      	ldr	r3, [r7, #0]
 80180d8:	2b02      	cmp	r3, #2
 80180da:	d129      	bne.n	8018130 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80180dc:	683a      	ldr	r2, [r7, #0]
 80180de:	68b9      	ldr	r1, [r7, #8]
 80180e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80180e2:	f000 fc9a 	bl	8018a1a <prvCopyDataToQueue>
 80180e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80180e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d010      	beq.n	8018112 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80180f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80180f2:	3324      	adds	r3, #36	; 0x24
 80180f4:	4618      	mov	r0, r3
 80180f6:	f001 fe67 	bl	8019dc8 <xTaskRemoveFromEventList>
 80180fa:	4603      	mov	r3, r0
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d013      	beq.n	8018128 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8018100:	4b3f      	ldr	r3, [pc, #252]	; (8018200 <xQueueGenericSend+0x1f8>)
 8018102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018106:	601a      	str	r2, [r3, #0]
 8018108:	f3bf 8f4f 	dsb	sy
 801810c:	f3bf 8f6f 	isb	sy
 8018110:	e00a      	b.n	8018128 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8018112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018114:	2b00      	cmp	r3, #0
 8018116:	d007      	beq.n	8018128 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8018118:	4b39      	ldr	r3, [pc, #228]	; (8018200 <xQueueGenericSend+0x1f8>)
 801811a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801811e:	601a      	str	r2, [r3, #0]
 8018120:	f3bf 8f4f 	dsb	sy
 8018124:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8018128:	f003 f814 	bl	801b154 <vPortExitCritical>
				return pdPASS;
 801812c:	2301      	movs	r3, #1
 801812e:	e063      	b.n	80181f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d103      	bne.n	801813e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018136:	f003 f80d 	bl	801b154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801813a:	2300      	movs	r3, #0
 801813c:	e05c      	b.n	80181f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801813e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018140:	2b00      	cmp	r3, #0
 8018142:	d106      	bne.n	8018152 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018144:	f107 0314 	add.w	r3, r7, #20
 8018148:	4618      	mov	r0, r3
 801814a:	f001 fec7 	bl	8019edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801814e:	2301      	movs	r3, #1
 8018150:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018152:	f002 ffff 	bl	801b154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018156:	f001 fbe1 	bl	801991c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801815a:	f002 ffcb 	bl	801b0f4 <vPortEnterCritical>
 801815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018164:	b25b      	sxtb	r3, r3
 8018166:	f1b3 3fff 	cmp.w	r3, #4294967295
 801816a:	d103      	bne.n	8018174 <xQueueGenericSend+0x16c>
 801816c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801816e:	2200      	movs	r2, #0
 8018170:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018176:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801817a:	b25b      	sxtb	r3, r3
 801817c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018180:	d103      	bne.n	801818a <xQueueGenericSend+0x182>
 8018182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018184:	2200      	movs	r2, #0
 8018186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801818a:	f002 ffe3 	bl	801b154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801818e:	1d3a      	adds	r2, r7, #4
 8018190:	f107 0314 	add.w	r3, r7, #20
 8018194:	4611      	mov	r1, r2
 8018196:	4618      	mov	r0, r3
 8018198:	f001 feb6 	bl	8019f08 <xTaskCheckForTimeOut>
 801819c:	4603      	mov	r3, r0
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d124      	bne.n	80181ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80181a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181a4:	f000 fd31 	bl	8018c0a <prvIsQueueFull>
 80181a8:	4603      	mov	r3, r0
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d018      	beq.n	80181e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80181ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b0:	3310      	adds	r3, #16
 80181b2:	687a      	ldr	r2, [r7, #4]
 80181b4:	4611      	mov	r1, r2
 80181b6:	4618      	mov	r0, r3
 80181b8:	f001 fdb6 	bl	8019d28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80181bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181be:	f000 fcbc 	bl	8018b3a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80181c2:	f001 fbb9 	bl	8019938 <xTaskResumeAll>
 80181c6:	4603      	mov	r3, r0
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	f47f af7c 	bne.w	80180c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80181ce:	4b0c      	ldr	r3, [pc, #48]	; (8018200 <xQueueGenericSend+0x1f8>)
 80181d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181d4:	601a      	str	r2, [r3, #0]
 80181d6:	f3bf 8f4f 	dsb	sy
 80181da:	f3bf 8f6f 	isb	sy
 80181de:	e772      	b.n	80180c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80181e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181e2:	f000 fcaa 	bl	8018b3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80181e6:	f001 fba7 	bl	8019938 <xTaskResumeAll>
 80181ea:	e76c      	b.n	80180c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80181ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181ee:	f000 fca4 	bl	8018b3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80181f2:	f001 fba1 	bl	8019938 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80181f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80181f8:	4618      	mov	r0, r3
 80181fa:	3738      	adds	r7, #56	; 0x38
 80181fc:	46bd      	mov	sp, r7
 80181fe:	bd80      	pop	{r7, pc}
 8018200:	e000ed04 	.word	0xe000ed04

08018204 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8018204:	b580      	push	{r7, lr}
 8018206:	b090      	sub	sp, #64	; 0x40
 8018208:	af00      	add	r7, sp, #0
 801820a:	60f8      	str	r0, [r7, #12]
 801820c:	60b9      	str	r1, [r7, #8]
 801820e:	607a      	str	r2, [r7, #4]
 8018210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8018216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018218:	2b00      	cmp	r3, #0
 801821a:	d10a      	bne.n	8018232 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018220:	f383 8811 	msr	BASEPRI, r3
 8018224:	f3bf 8f6f 	isb	sy
 8018228:	f3bf 8f4f 	dsb	sy
 801822c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801822e:	bf00      	nop
 8018230:	e7fe      	b.n	8018230 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018232:	68bb      	ldr	r3, [r7, #8]
 8018234:	2b00      	cmp	r3, #0
 8018236:	d103      	bne.n	8018240 <xQueueGenericSendFromISR+0x3c>
 8018238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801823a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801823c:	2b00      	cmp	r3, #0
 801823e:	d101      	bne.n	8018244 <xQueueGenericSendFromISR+0x40>
 8018240:	2301      	movs	r3, #1
 8018242:	e000      	b.n	8018246 <xQueueGenericSendFromISR+0x42>
 8018244:	2300      	movs	r3, #0
 8018246:	2b00      	cmp	r3, #0
 8018248:	d10a      	bne.n	8018260 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801824a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801824e:	f383 8811 	msr	BASEPRI, r3
 8018252:	f3bf 8f6f 	isb	sy
 8018256:	f3bf 8f4f 	dsb	sy
 801825a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801825c:	bf00      	nop
 801825e:	e7fe      	b.n	801825e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	2b02      	cmp	r3, #2
 8018264:	d103      	bne.n	801826e <xQueueGenericSendFromISR+0x6a>
 8018266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801826a:	2b01      	cmp	r3, #1
 801826c:	d101      	bne.n	8018272 <xQueueGenericSendFromISR+0x6e>
 801826e:	2301      	movs	r3, #1
 8018270:	e000      	b.n	8018274 <xQueueGenericSendFromISR+0x70>
 8018272:	2300      	movs	r3, #0
 8018274:	2b00      	cmp	r3, #0
 8018276:	d10a      	bne.n	801828e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8018278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801827c:	f383 8811 	msr	BASEPRI, r3
 8018280:	f3bf 8f6f 	isb	sy
 8018284:	f3bf 8f4f 	dsb	sy
 8018288:	623b      	str	r3, [r7, #32]
}
 801828a:	bf00      	nop
 801828c:	e7fe      	b.n	801828c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801828e:	f003 f813 	bl	801b2b8 <vPortValidateInterruptPriority>
	__asm volatile
 8018292:	f3ef 8211 	mrs	r2, BASEPRI
 8018296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801829a:	f383 8811 	msr	BASEPRI, r3
 801829e:	f3bf 8f6f 	isb	sy
 80182a2:	f3bf 8f4f 	dsb	sy
 80182a6:	61fa      	str	r2, [r7, #28]
 80182a8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80182aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80182ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80182ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80182b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182b6:	429a      	cmp	r2, r3
 80182b8:	d302      	bcc.n	80182c0 <xQueueGenericSendFromISR+0xbc>
 80182ba:	683b      	ldr	r3, [r7, #0]
 80182bc:	2b02      	cmp	r3, #2
 80182be:	d12f      	bne.n	8018320 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80182c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80182c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80182ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80182ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80182d0:	683a      	ldr	r2, [r7, #0]
 80182d2:	68b9      	ldr	r1, [r7, #8]
 80182d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80182d6:	f000 fba0 	bl	8018a1a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80182da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80182de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182e2:	d112      	bne.n	801830a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80182e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d016      	beq.n	801831a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80182ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182ee:	3324      	adds	r3, #36	; 0x24
 80182f0:	4618      	mov	r0, r3
 80182f2:	f001 fd69 	bl	8019dc8 <xTaskRemoveFromEventList>
 80182f6:	4603      	mov	r3, r0
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d00e      	beq.n	801831a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d00b      	beq.n	801831a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	2201      	movs	r2, #1
 8018306:	601a      	str	r2, [r3, #0]
 8018308:	e007      	b.n	801831a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801830a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801830e:	3301      	adds	r3, #1
 8018310:	b2db      	uxtb	r3, r3
 8018312:	b25a      	sxtb	r2, r3
 8018314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018316:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801831a:	2301      	movs	r3, #1
 801831c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801831e:	e001      	b.n	8018324 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8018320:	2300      	movs	r3, #0
 8018322:	63fb      	str	r3, [r7, #60]	; 0x3c
 8018324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018326:	617b      	str	r3, [r7, #20]
	__asm volatile
 8018328:	697b      	ldr	r3, [r7, #20]
 801832a:	f383 8811 	msr	BASEPRI, r3
}
 801832e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8018332:	4618      	mov	r0, r3
 8018334:	3740      	adds	r7, #64	; 0x40
 8018336:	46bd      	mov	sp, r7
 8018338:	bd80      	pop	{r7, pc}

0801833a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801833a:	b580      	push	{r7, lr}
 801833c:	b08e      	sub	sp, #56	; 0x38
 801833e:	af00      	add	r7, sp, #0
 8018340:	6078      	str	r0, [r7, #4]
 8018342:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8018348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801834a:	2b00      	cmp	r3, #0
 801834c:	d10a      	bne.n	8018364 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018352:	f383 8811 	msr	BASEPRI, r3
 8018356:	f3bf 8f6f 	isb	sy
 801835a:	f3bf 8f4f 	dsb	sy
 801835e:	623b      	str	r3, [r7, #32]
}
 8018360:	bf00      	nop
 8018362:	e7fe      	b.n	8018362 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018368:	2b00      	cmp	r3, #0
 801836a:	d00a      	beq.n	8018382 <xQueueGiveFromISR+0x48>
	__asm volatile
 801836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018370:	f383 8811 	msr	BASEPRI, r3
 8018374:	f3bf 8f6f 	isb	sy
 8018378:	f3bf 8f4f 	dsb	sy
 801837c:	61fb      	str	r3, [r7, #28]
}
 801837e:	bf00      	nop
 8018380:	e7fe      	b.n	8018380 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8018382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	2b00      	cmp	r3, #0
 8018388:	d103      	bne.n	8018392 <xQueueGiveFromISR+0x58>
 801838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801838c:	689b      	ldr	r3, [r3, #8]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d101      	bne.n	8018396 <xQueueGiveFromISR+0x5c>
 8018392:	2301      	movs	r3, #1
 8018394:	e000      	b.n	8018398 <xQueueGiveFromISR+0x5e>
 8018396:	2300      	movs	r3, #0
 8018398:	2b00      	cmp	r3, #0
 801839a:	d10a      	bne.n	80183b2 <xQueueGiveFromISR+0x78>
	__asm volatile
 801839c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183a0:	f383 8811 	msr	BASEPRI, r3
 80183a4:	f3bf 8f6f 	isb	sy
 80183a8:	f3bf 8f4f 	dsb	sy
 80183ac:	61bb      	str	r3, [r7, #24]
}
 80183ae:	bf00      	nop
 80183b0:	e7fe      	b.n	80183b0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80183b2:	f002 ff81 	bl	801b2b8 <vPortValidateInterruptPriority>
	__asm volatile
 80183b6:	f3ef 8211 	mrs	r2, BASEPRI
 80183ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183be:	f383 8811 	msr	BASEPRI, r3
 80183c2:	f3bf 8f6f 	isb	sy
 80183c6:	f3bf 8f4f 	dsb	sy
 80183ca:	617a      	str	r2, [r7, #20]
 80183cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80183ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80183d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80183d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80183d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80183d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80183dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183de:	429a      	cmp	r2, r3
 80183e0:	d22b      	bcs.n	801843a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80183e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80183e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80183ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ee:	1c5a      	adds	r2, r3, #1
 80183f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80183f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80183f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183fc:	d112      	bne.n	8018424 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80183fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018402:	2b00      	cmp	r3, #0
 8018404:	d016      	beq.n	8018434 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018408:	3324      	adds	r3, #36	; 0x24
 801840a:	4618      	mov	r0, r3
 801840c:	f001 fcdc 	bl	8019dc8 <xTaskRemoveFromEventList>
 8018410:	4603      	mov	r3, r0
 8018412:	2b00      	cmp	r3, #0
 8018414:	d00e      	beq.n	8018434 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8018416:	683b      	ldr	r3, [r7, #0]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d00b      	beq.n	8018434 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801841c:	683b      	ldr	r3, [r7, #0]
 801841e:	2201      	movs	r2, #1
 8018420:	601a      	str	r2, [r3, #0]
 8018422:	e007      	b.n	8018434 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8018424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018428:	3301      	adds	r3, #1
 801842a:	b2db      	uxtb	r3, r3
 801842c:	b25a      	sxtb	r2, r3
 801842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8018434:	2301      	movs	r3, #1
 8018436:	637b      	str	r3, [r7, #52]	; 0x34
 8018438:	e001      	b.n	801843e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801843a:	2300      	movs	r3, #0
 801843c:	637b      	str	r3, [r7, #52]	; 0x34
 801843e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018440:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	f383 8811 	msr	BASEPRI, r3
}
 8018448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801844a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801844c:	4618      	mov	r0, r3
 801844e:	3738      	adds	r7, #56	; 0x38
 8018450:	46bd      	mov	sp, r7
 8018452:	bd80      	pop	{r7, pc}

08018454 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8018454:	b580      	push	{r7, lr}
 8018456:	b08c      	sub	sp, #48	; 0x30
 8018458:	af00      	add	r7, sp, #0
 801845a:	60f8      	str	r0, [r7, #12]
 801845c:	60b9      	str	r1, [r7, #8]
 801845e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8018460:	2300      	movs	r3, #0
 8018462:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8018468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801846a:	2b00      	cmp	r3, #0
 801846c:	d10a      	bne.n	8018484 <xQueueReceive+0x30>
	__asm volatile
 801846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018472:	f383 8811 	msr	BASEPRI, r3
 8018476:	f3bf 8f6f 	isb	sy
 801847a:	f3bf 8f4f 	dsb	sy
 801847e:	623b      	str	r3, [r7, #32]
}
 8018480:	bf00      	nop
 8018482:	e7fe      	b.n	8018482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018484:	68bb      	ldr	r3, [r7, #8]
 8018486:	2b00      	cmp	r3, #0
 8018488:	d103      	bne.n	8018492 <xQueueReceive+0x3e>
 801848a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801848c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801848e:	2b00      	cmp	r3, #0
 8018490:	d101      	bne.n	8018496 <xQueueReceive+0x42>
 8018492:	2301      	movs	r3, #1
 8018494:	e000      	b.n	8018498 <xQueueReceive+0x44>
 8018496:	2300      	movs	r3, #0
 8018498:	2b00      	cmp	r3, #0
 801849a:	d10a      	bne.n	80184b2 <xQueueReceive+0x5e>
	__asm volatile
 801849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184a0:	f383 8811 	msr	BASEPRI, r3
 80184a4:	f3bf 8f6f 	isb	sy
 80184a8:	f3bf 8f4f 	dsb	sy
 80184ac:	61fb      	str	r3, [r7, #28]
}
 80184ae:	bf00      	nop
 80184b0:	e7fe      	b.n	80184b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80184b2:	f001 fe81 	bl	801a1b8 <xTaskGetSchedulerState>
 80184b6:	4603      	mov	r3, r0
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d102      	bne.n	80184c2 <xQueueReceive+0x6e>
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d101      	bne.n	80184c6 <xQueueReceive+0x72>
 80184c2:	2301      	movs	r3, #1
 80184c4:	e000      	b.n	80184c8 <xQueueReceive+0x74>
 80184c6:	2300      	movs	r3, #0
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d10a      	bne.n	80184e2 <xQueueReceive+0x8e>
	__asm volatile
 80184cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184d0:	f383 8811 	msr	BASEPRI, r3
 80184d4:	f3bf 8f6f 	isb	sy
 80184d8:	f3bf 8f4f 	dsb	sy
 80184dc:	61bb      	str	r3, [r7, #24]
}
 80184de:	bf00      	nop
 80184e0:	e7fe      	b.n	80184e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80184e2:	f002 fe07 	bl	801b0f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80184e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80184ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80184ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d01f      	beq.n	8018532 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80184f2:	68b9      	ldr	r1, [r7, #8]
 80184f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80184f6:	f000 fafa 	bl	8018aee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80184fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184fc:	1e5a      	subs	r2, r3, #1
 80184fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018500:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018504:	691b      	ldr	r3, [r3, #16]
 8018506:	2b00      	cmp	r3, #0
 8018508:	d00f      	beq.n	801852a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801850c:	3310      	adds	r3, #16
 801850e:	4618      	mov	r0, r3
 8018510:	f001 fc5a 	bl	8019dc8 <xTaskRemoveFromEventList>
 8018514:	4603      	mov	r3, r0
 8018516:	2b00      	cmp	r3, #0
 8018518:	d007      	beq.n	801852a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801851a:	4b3d      	ldr	r3, [pc, #244]	; (8018610 <xQueueReceive+0x1bc>)
 801851c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018520:	601a      	str	r2, [r3, #0]
 8018522:	f3bf 8f4f 	dsb	sy
 8018526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801852a:	f002 fe13 	bl	801b154 <vPortExitCritical>
				return pdPASS;
 801852e:	2301      	movs	r3, #1
 8018530:	e069      	b.n	8018606 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8018532:	687b      	ldr	r3, [r7, #4]
 8018534:	2b00      	cmp	r3, #0
 8018536:	d103      	bne.n	8018540 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8018538:	f002 fe0c 	bl	801b154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801853c:	2300      	movs	r3, #0
 801853e:	e062      	b.n	8018606 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018542:	2b00      	cmp	r3, #0
 8018544:	d106      	bne.n	8018554 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8018546:	f107 0310 	add.w	r3, r7, #16
 801854a:	4618      	mov	r0, r3
 801854c:	f001 fcc6 	bl	8019edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018550:	2301      	movs	r3, #1
 8018552:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8018554:	f002 fdfe 	bl	801b154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018558:	f001 f9e0 	bl	801991c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801855c:	f002 fdca 	bl	801b0f4 <vPortEnterCritical>
 8018560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018566:	b25b      	sxtb	r3, r3
 8018568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801856c:	d103      	bne.n	8018576 <xQueueReceive+0x122>
 801856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018570:	2200      	movs	r2, #0
 8018572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801857c:	b25b      	sxtb	r3, r3
 801857e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018582:	d103      	bne.n	801858c <xQueueReceive+0x138>
 8018584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018586:	2200      	movs	r2, #0
 8018588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801858c:	f002 fde2 	bl	801b154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018590:	1d3a      	adds	r2, r7, #4
 8018592:	f107 0310 	add.w	r3, r7, #16
 8018596:	4611      	mov	r1, r2
 8018598:	4618      	mov	r0, r3
 801859a:	f001 fcb5 	bl	8019f08 <xTaskCheckForTimeOut>
 801859e:	4603      	mov	r3, r0
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d123      	bne.n	80185ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80185a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185a6:	f000 fb1a 	bl	8018bde <prvIsQueueEmpty>
 80185aa:	4603      	mov	r3, r0
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d017      	beq.n	80185e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80185b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185b2:	3324      	adds	r3, #36	; 0x24
 80185b4:	687a      	ldr	r2, [r7, #4]
 80185b6:	4611      	mov	r1, r2
 80185b8:	4618      	mov	r0, r3
 80185ba:	f001 fbb5 	bl	8019d28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80185be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185c0:	f000 fabb 	bl	8018b3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80185c4:	f001 f9b8 	bl	8019938 <xTaskResumeAll>
 80185c8:	4603      	mov	r3, r0
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d189      	bne.n	80184e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80185ce:	4b10      	ldr	r3, [pc, #64]	; (8018610 <xQueueReceive+0x1bc>)
 80185d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185d4:	601a      	str	r2, [r3, #0]
 80185d6:	f3bf 8f4f 	dsb	sy
 80185da:	f3bf 8f6f 	isb	sy
 80185de:	e780      	b.n	80184e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80185e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185e2:	f000 faaa 	bl	8018b3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80185e6:	f001 f9a7 	bl	8019938 <xTaskResumeAll>
 80185ea:	e77a      	b.n	80184e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80185ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185ee:	f000 faa4 	bl	8018b3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80185f2:	f001 f9a1 	bl	8019938 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80185f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80185f8:	f000 faf1 	bl	8018bde <prvIsQueueEmpty>
 80185fc:	4603      	mov	r3, r0
 80185fe:	2b00      	cmp	r3, #0
 8018600:	f43f af6f 	beq.w	80184e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8018604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8018606:	4618      	mov	r0, r3
 8018608:	3730      	adds	r7, #48	; 0x30
 801860a:	46bd      	mov	sp, r7
 801860c:	bd80      	pop	{r7, pc}
 801860e:	bf00      	nop
 8018610:	e000ed04 	.word	0xe000ed04

08018614 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b08e      	sub	sp, #56	; 0x38
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801861e:	2300      	movs	r3, #0
 8018620:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8018626:	2300      	movs	r3, #0
 8018628:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801862a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801862c:	2b00      	cmp	r3, #0
 801862e:	d10a      	bne.n	8018646 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8018630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018634:	f383 8811 	msr	BASEPRI, r3
 8018638:	f3bf 8f6f 	isb	sy
 801863c:	f3bf 8f4f 	dsb	sy
 8018640:	623b      	str	r3, [r7, #32]
}
 8018642:	bf00      	nop
 8018644:	e7fe      	b.n	8018644 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8018646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801864a:	2b00      	cmp	r3, #0
 801864c:	d00a      	beq.n	8018664 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018652:	f383 8811 	msr	BASEPRI, r3
 8018656:	f3bf 8f6f 	isb	sy
 801865a:	f3bf 8f4f 	dsb	sy
 801865e:	61fb      	str	r3, [r7, #28]
}
 8018660:	bf00      	nop
 8018662:	e7fe      	b.n	8018662 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018664:	f001 fda8 	bl	801a1b8 <xTaskGetSchedulerState>
 8018668:	4603      	mov	r3, r0
 801866a:	2b00      	cmp	r3, #0
 801866c:	d102      	bne.n	8018674 <xQueueSemaphoreTake+0x60>
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d101      	bne.n	8018678 <xQueueSemaphoreTake+0x64>
 8018674:	2301      	movs	r3, #1
 8018676:	e000      	b.n	801867a <xQueueSemaphoreTake+0x66>
 8018678:	2300      	movs	r3, #0
 801867a:	2b00      	cmp	r3, #0
 801867c:	d10a      	bne.n	8018694 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018682:	f383 8811 	msr	BASEPRI, r3
 8018686:	f3bf 8f6f 	isb	sy
 801868a:	f3bf 8f4f 	dsb	sy
 801868e:	61bb      	str	r3, [r7, #24]
}
 8018690:	bf00      	nop
 8018692:	e7fe      	b.n	8018692 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018694:	f002 fd2e 	bl	801b0f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8018698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801869c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801869e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d024      	beq.n	80186ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80186a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a6:	1e5a      	subs	r2, r3, #1
 80186a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80186ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186ae:	681b      	ldr	r3, [r3, #0]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d104      	bne.n	80186be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80186b4:	f001 fef6 	bl	801a4a4 <pvTaskIncrementMutexHeldCount>
 80186b8:	4602      	mov	r2, r0
 80186ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80186be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c0:	691b      	ldr	r3, [r3, #16]
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d00f      	beq.n	80186e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80186c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c8:	3310      	adds	r3, #16
 80186ca:	4618      	mov	r0, r3
 80186cc:	f001 fb7c 	bl	8019dc8 <xTaskRemoveFromEventList>
 80186d0:	4603      	mov	r3, r0
 80186d2:	2b00      	cmp	r3, #0
 80186d4:	d007      	beq.n	80186e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80186d6:	4b54      	ldr	r3, [pc, #336]	; (8018828 <xQueueSemaphoreTake+0x214>)
 80186d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186dc:	601a      	str	r2, [r3, #0]
 80186de:	f3bf 8f4f 	dsb	sy
 80186e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80186e6:	f002 fd35 	bl	801b154 <vPortExitCritical>
				return pdPASS;
 80186ea:	2301      	movs	r3, #1
 80186ec:	e097      	b.n	801881e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80186ee:	683b      	ldr	r3, [r7, #0]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	d111      	bne.n	8018718 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80186f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d00a      	beq.n	8018710 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80186fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186fe:	f383 8811 	msr	BASEPRI, r3
 8018702:	f3bf 8f6f 	isb	sy
 8018706:	f3bf 8f4f 	dsb	sy
 801870a:	617b      	str	r3, [r7, #20]
}
 801870c:	bf00      	nop
 801870e:	e7fe      	b.n	801870e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8018710:	f002 fd20 	bl	801b154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8018714:	2300      	movs	r3, #0
 8018716:	e082      	b.n	801881e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8018718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801871a:	2b00      	cmp	r3, #0
 801871c:	d106      	bne.n	801872c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801871e:	f107 030c 	add.w	r3, r7, #12
 8018722:	4618      	mov	r0, r3
 8018724:	f001 fbda 	bl	8019edc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8018728:	2301      	movs	r3, #1
 801872a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801872c:	f002 fd12 	bl	801b154 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8018730:	f001 f8f4 	bl	801991c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8018734:	f002 fcde 	bl	801b0f4 <vPortEnterCritical>
 8018738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801873a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801873e:	b25b      	sxtb	r3, r3
 8018740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018744:	d103      	bne.n	801874e <xQueueSemaphoreTake+0x13a>
 8018746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018748:	2200      	movs	r2, #0
 801874a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801874e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018754:	b25b      	sxtb	r3, r3
 8018756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801875a:	d103      	bne.n	8018764 <xQueueSemaphoreTake+0x150>
 801875c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801875e:	2200      	movs	r2, #0
 8018760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018764:	f002 fcf6 	bl	801b154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8018768:	463a      	mov	r2, r7
 801876a:	f107 030c 	add.w	r3, r7, #12
 801876e:	4611      	mov	r1, r2
 8018770:	4618      	mov	r0, r3
 8018772:	f001 fbc9 	bl	8019f08 <xTaskCheckForTimeOut>
 8018776:	4603      	mov	r3, r0
 8018778:	2b00      	cmp	r3, #0
 801877a:	d132      	bne.n	80187e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801877c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801877e:	f000 fa2e 	bl	8018bde <prvIsQueueEmpty>
 8018782:	4603      	mov	r3, r0
 8018784:	2b00      	cmp	r3, #0
 8018786:	d026      	beq.n	80187d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801878a:	681b      	ldr	r3, [r3, #0]
 801878c:	2b00      	cmp	r3, #0
 801878e:	d109      	bne.n	80187a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8018790:	f002 fcb0 	bl	801b0f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018796:	689b      	ldr	r3, [r3, #8]
 8018798:	4618      	mov	r0, r3
 801879a:	f001 fd2b 	bl	801a1f4 <xTaskPriorityInherit>
 801879e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80187a0:	f002 fcd8 	bl	801b154 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80187a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187a6:	3324      	adds	r3, #36	; 0x24
 80187a8:	683a      	ldr	r2, [r7, #0]
 80187aa:	4611      	mov	r1, r2
 80187ac:	4618      	mov	r0, r3
 80187ae:	f001 fabb 	bl	8019d28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80187b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187b4:	f000 f9c1 	bl	8018b3a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80187b8:	f001 f8be 	bl	8019938 <xTaskResumeAll>
 80187bc:	4603      	mov	r3, r0
 80187be:	2b00      	cmp	r3, #0
 80187c0:	f47f af68 	bne.w	8018694 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80187c4:	4b18      	ldr	r3, [pc, #96]	; (8018828 <xQueueSemaphoreTake+0x214>)
 80187c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80187ca:	601a      	str	r2, [r3, #0]
 80187cc:	f3bf 8f4f 	dsb	sy
 80187d0:	f3bf 8f6f 	isb	sy
 80187d4:	e75e      	b.n	8018694 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80187d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187d8:	f000 f9af 	bl	8018b3a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80187dc:	f001 f8ac 	bl	8019938 <xTaskResumeAll>
 80187e0:	e758      	b.n	8018694 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80187e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187e4:	f000 f9a9 	bl	8018b3a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80187e8:	f001 f8a6 	bl	8019938 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80187ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80187ee:	f000 f9f6 	bl	8018bde <prvIsQueueEmpty>
 80187f2:	4603      	mov	r3, r0
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	f43f af4d 	beq.w	8018694 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80187fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d00d      	beq.n	801881c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8018800:	f002 fc78 	bl	801b0f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8018804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018806:	f000 f8f0 	bl	80189ea <prvGetDisinheritPriorityAfterTimeout>
 801880a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801880c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801880e:	689b      	ldr	r3, [r3, #8]
 8018810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018812:	4618      	mov	r0, r3
 8018814:	f001 fdc4 	bl	801a3a0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8018818:	f002 fc9c 	bl	801b154 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801881c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801881e:	4618      	mov	r0, r3
 8018820:	3738      	adds	r7, #56	; 0x38
 8018822:	46bd      	mov	sp, r7
 8018824:	bd80      	pop	{r7, pc}
 8018826:	bf00      	nop
 8018828:	e000ed04 	.word	0xe000ed04

0801882c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801882c:	b580      	push	{r7, lr}
 801882e:	b08e      	sub	sp, #56	; 0x38
 8018830:	af00      	add	r7, sp, #0
 8018832:	60f8      	str	r0, [r7, #12]
 8018834:	60b9      	str	r1, [r7, #8]
 8018836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8018838:	68fb      	ldr	r3, [r7, #12]
 801883a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801883e:	2b00      	cmp	r3, #0
 8018840:	d10a      	bne.n	8018858 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8018842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018846:	f383 8811 	msr	BASEPRI, r3
 801884a:	f3bf 8f6f 	isb	sy
 801884e:	f3bf 8f4f 	dsb	sy
 8018852:	623b      	str	r3, [r7, #32]
}
 8018854:	bf00      	nop
 8018856:	e7fe      	b.n	8018856 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018858:	68bb      	ldr	r3, [r7, #8]
 801885a:	2b00      	cmp	r3, #0
 801885c:	d103      	bne.n	8018866 <xQueueReceiveFromISR+0x3a>
 801885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018862:	2b00      	cmp	r3, #0
 8018864:	d101      	bne.n	801886a <xQueueReceiveFromISR+0x3e>
 8018866:	2301      	movs	r3, #1
 8018868:	e000      	b.n	801886c <xQueueReceiveFromISR+0x40>
 801886a:	2300      	movs	r3, #0
 801886c:	2b00      	cmp	r3, #0
 801886e:	d10a      	bne.n	8018886 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8018870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018874:	f383 8811 	msr	BASEPRI, r3
 8018878:	f3bf 8f6f 	isb	sy
 801887c:	f3bf 8f4f 	dsb	sy
 8018880:	61fb      	str	r3, [r7, #28]
}
 8018882:	bf00      	nop
 8018884:	e7fe      	b.n	8018884 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8018886:	f002 fd17 	bl	801b2b8 <vPortValidateInterruptPriority>
	__asm volatile
 801888a:	f3ef 8211 	mrs	r2, BASEPRI
 801888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018892:	f383 8811 	msr	BASEPRI, r3
 8018896:	f3bf 8f6f 	isb	sy
 801889a:	f3bf 8f4f 	dsb	sy
 801889e:	61ba      	str	r2, [r7, #24]
 80188a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80188a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80188a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80188a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80188ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188ae:	2b00      	cmp	r3, #0
 80188b0:	d02f      	beq.n	8018912 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80188b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80188b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80188bc:	68b9      	ldr	r1, [r7, #8]
 80188be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80188c0:	f000 f915 	bl	8018aee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80188c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188c6:	1e5a      	subs	r2, r3, #1
 80188c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80188cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80188d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80188d4:	d112      	bne.n	80188fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80188d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188d8:	691b      	ldr	r3, [r3, #16]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d016      	beq.n	801890c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80188de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80188e0:	3310      	adds	r3, #16
 80188e2:	4618      	mov	r0, r3
 80188e4:	f001 fa70 	bl	8019dc8 <xTaskRemoveFromEventList>
 80188e8:	4603      	mov	r3, r0
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d00e      	beq.n	801890c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d00b      	beq.n	801890c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	2201      	movs	r2, #1
 80188f8:	601a      	str	r2, [r3, #0]
 80188fa:	e007      	b.n	801890c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80188fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018900:	3301      	adds	r3, #1
 8018902:	b2db      	uxtb	r3, r3
 8018904:	b25a      	sxtb	r2, r3
 8018906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801890c:	2301      	movs	r3, #1
 801890e:	637b      	str	r3, [r7, #52]	; 0x34
 8018910:	e001      	b.n	8018916 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8018912:	2300      	movs	r3, #0
 8018914:	637b      	str	r3, [r7, #52]	; 0x34
 8018916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018918:	613b      	str	r3, [r7, #16]
	__asm volatile
 801891a:	693b      	ldr	r3, [r7, #16]
 801891c:	f383 8811 	msr	BASEPRI, r3
}
 8018920:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8018924:	4618      	mov	r0, r3
 8018926:	3738      	adds	r7, #56	; 0x38
 8018928:	46bd      	mov	sp, r7
 801892a:	bd80      	pop	{r7, pc}

0801892c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801892c:	b580      	push	{r7, lr}
 801892e:	b084      	sub	sp, #16
 8018930:	af00      	add	r7, sp, #0
 8018932:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d10a      	bne.n	8018950 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 801893a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801893e:	f383 8811 	msr	BASEPRI, r3
 8018942:	f3bf 8f6f 	isb	sy
 8018946:	f3bf 8f4f 	dsb	sy
 801894a:	60bb      	str	r3, [r7, #8]
}
 801894c:	bf00      	nop
 801894e:	e7fe      	b.n	801894e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8018950:	f002 fbd0 	bl	801b0f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018958:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801895a:	f002 fbfb 	bl	801b154 <vPortExitCritical>

	return uxReturn;
 801895e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8018960:	4618      	mov	r0, r3
 8018962:	3710      	adds	r7, #16
 8018964:	46bd      	mov	sp, r7
 8018966:	bd80      	pop	{r7, pc}

08018968 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8018968:	b480      	push	{r7}
 801896a:	b087      	sub	sp, #28
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8018974:	697b      	ldr	r3, [r7, #20]
 8018976:	2b00      	cmp	r3, #0
 8018978:	d10a      	bne.n	8018990 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801897a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801897e:	f383 8811 	msr	BASEPRI, r3
 8018982:	f3bf 8f6f 	isb	sy
 8018986:	f3bf 8f4f 	dsb	sy
 801898a:	60fb      	str	r3, [r7, #12]
}
 801898c:	bf00      	nop
 801898e:	e7fe      	b.n	801898e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8018990:	697b      	ldr	r3, [r7, #20]
 8018992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018994:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8018996:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8018998:	4618      	mov	r0, r3
 801899a:	371c      	adds	r7, #28
 801899c:	46bd      	mov	sp, r7
 801899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a2:	4770      	bx	lr

080189a4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80189a4:	b580      	push	{r7, lr}
 80189a6:	b084      	sub	sp, #16
 80189a8:	af00      	add	r7, sp, #0
 80189aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80189b0:	68fb      	ldr	r3, [r7, #12]
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d10a      	bne.n	80189cc <vQueueDelete+0x28>
	__asm volatile
 80189b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ba:	f383 8811 	msr	BASEPRI, r3
 80189be:	f3bf 8f6f 	isb	sy
 80189c2:	f3bf 8f4f 	dsb	sy
 80189c6:	60bb      	str	r3, [r7, #8]
}
 80189c8:	bf00      	nop
 80189ca:	e7fe      	b.n	80189ca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80189cc:	68f8      	ldr	r0, [r7, #12]
 80189ce:	f000 f95f 	bl	8018c90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80189d2:	68fb      	ldr	r3, [r7, #12]
 80189d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d102      	bne.n	80189e2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80189dc:	68f8      	ldr	r0, [r7, #12]
 80189de:	f002 fd7b 	bl	801b4d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80189e2:	bf00      	nop
 80189e4:	3710      	adds	r7, #16
 80189e6:	46bd      	mov	sp, r7
 80189e8:	bd80      	pop	{r7, pc}

080189ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80189ea:	b480      	push	{r7}
 80189ec:	b085      	sub	sp, #20
 80189ee:	af00      	add	r7, sp, #0
 80189f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d006      	beq.n	8018a08 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8018a04:	60fb      	str	r3, [r7, #12]
 8018a06:	e001      	b.n	8018a0c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8018a08:	2300      	movs	r3, #0
 8018a0a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8018a0c:	68fb      	ldr	r3, [r7, #12]
	}
 8018a0e:	4618      	mov	r0, r3
 8018a10:	3714      	adds	r7, #20
 8018a12:	46bd      	mov	sp, r7
 8018a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a18:	4770      	bx	lr

08018a1a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8018a1a:	b580      	push	{r7, lr}
 8018a1c:	b086      	sub	sp, #24
 8018a1e:	af00      	add	r7, sp, #0
 8018a20:	60f8      	str	r0, [r7, #12]
 8018a22:	60b9      	str	r1, [r7, #8]
 8018a24:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8018a26:	2300      	movs	r3, #0
 8018a28:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a2e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8018a30:	68fb      	ldr	r3, [r7, #12]
 8018a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d10d      	bne.n	8018a54 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	2b00      	cmp	r3, #0
 8018a3e:	d14d      	bne.n	8018adc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8018a40:	68fb      	ldr	r3, [r7, #12]
 8018a42:	689b      	ldr	r3, [r3, #8]
 8018a44:	4618      	mov	r0, r3
 8018a46:	f001 fc3d 	bl	801a2c4 <xTaskPriorityDisinherit>
 8018a4a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8018a4c:	68fb      	ldr	r3, [r7, #12]
 8018a4e:	2200      	movs	r2, #0
 8018a50:	609a      	str	r2, [r3, #8]
 8018a52:	e043      	b.n	8018adc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d119      	bne.n	8018a8e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	6858      	ldr	r0, [r3, #4]
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a62:	461a      	mov	r2, r3
 8018a64:	68b9      	ldr	r1, [r7, #8]
 8018a66:	f003 fb37 	bl	801c0d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	685a      	ldr	r2, [r3, #4]
 8018a6e:	68fb      	ldr	r3, [r7, #12]
 8018a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a72:	441a      	add	r2, r3
 8018a74:	68fb      	ldr	r3, [r7, #12]
 8018a76:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018a78:	68fb      	ldr	r3, [r7, #12]
 8018a7a:	685a      	ldr	r2, [r3, #4]
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	689b      	ldr	r3, [r3, #8]
 8018a80:	429a      	cmp	r2, r3
 8018a82:	d32b      	bcc.n	8018adc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8018a84:	68fb      	ldr	r3, [r7, #12]
 8018a86:	681a      	ldr	r2, [r3, #0]
 8018a88:	68fb      	ldr	r3, [r7, #12]
 8018a8a:	605a      	str	r2, [r3, #4]
 8018a8c:	e026      	b.n	8018adc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	68d8      	ldr	r0, [r3, #12]
 8018a92:	68fb      	ldr	r3, [r7, #12]
 8018a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018a96:	461a      	mov	r2, r3
 8018a98:	68b9      	ldr	r1, [r7, #8]
 8018a9a:	f003 fb1d 	bl	801c0d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	68da      	ldr	r2, [r3, #12]
 8018aa2:	68fb      	ldr	r3, [r7, #12]
 8018aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018aa6:	425b      	negs	r3, r3
 8018aa8:	441a      	add	r2, r3
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	68da      	ldr	r2, [r3, #12]
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	429a      	cmp	r2, r3
 8018ab8:	d207      	bcs.n	8018aca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8018aba:	68fb      	ldr	r3, [r7, #12]
 8018abc:	689a      	ldr	r2, [r3, #8]
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ac2:	425b      	negs	r3, r3
 8018ac4:	441a      	add	r2, r3
 8018ac6:	68fb      	ldr	r3, [r7, #12]
 8018ac8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	2b02      	cmp	r3, #2
 8018ace:	d105      	bne.n	8018adc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8018ad0:	693b      	ldr	r3, [r7, #16]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d002      	beq.n	8018adc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8018ad6:	693b      	ldr	r3, [r7, #16]
 8018ad8:	3b01      	subs	r3, #1
 8018ada:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	1c5a      	adds	r2, r3, #1
 8018ae0:	68fb      	ldr	r3, [r7, #12]
 8018ae2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8018ae4:	697b      	ldr	r3, [r7, #20]
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3718      	adds	r7, #24
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}

08018aee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8018aee:	b580      	push	{r7, lr}
 8018af0:	b082      	sub	sp, #8
 8018af2:	af00      	add	r7, sp, #0
 8018af4:	6078      	str	r0, [r7, #4]
 8018af6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8018af8:	687b      	ldr	r3, [r7, #4]
 8018afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d018      	beq.n	8018b32 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	68da      	ldr	r2, [r3, #12]
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b08:	441a      	add	r2, r3
 8018b0a:	687b      	ldr	r3, [r7, #4]
 8018b0c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	68da      	ldr	r2, [r3, #12]
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	689b      	ldr	r3, [r3, #8]
 8018b16:	429a      	cmp	r2, r3
 8018b18:	d303      	bcc.n	8018b22 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681a      	ldr	r2, [r3, #0]
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	68d9      	ldr	r1, [r3, #12]
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b2a:	461a      	mov	r2, r3
 8018b2c:	6838      	ldr	r0, [r7, #0]
 8018b2e:	f003 fad3 	bl	801c0d8 <memcpy>
	}
}
 8018b32:	bf00      	nop
 8018b34:	3708      	adds	r7, #8
 8018b36:	46bd      	mov	sp, r7
 8018b38:	bd80      	pop	{r7, pc}

08018b3a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8018b3a:	b580      	push	{r7, lr}
 8018b3c:	b084      	sub	sp, #16
 8018b3e:	af00      	add	r7, sp, #0
 8018b40:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8018b42:	f002 fad7 	bl	801b0f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018b4c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018b4e:	e011      	b.n	8018b74 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d012      	beq.n	8018b7e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	3324      	adds	r3, #36	; 0x24
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f001 f933 	bl	8019dc8 <xTaskRemoveFromEventList>
 8018b62:	4603      	mov	r3, r0
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d001      	beq.n	8018b6c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8018b68:	f001 fa30 	bl	8019fcc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8018b6c:	7bfb      	ldrb	r3, [r7, #15]
 8018b6e:	3b01      	subs	r3, #1
 8018b70:	b2db      	uxtb	r3, r3
 8018b72:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8018b74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	dce9      	bgt.n	8018b50 <prvUnlockQueue+0x16>
 8018b7c:	e000      	b.n	8018b80 <prvUnlockQueue+0x46>
					break;
 8018b7e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	22ff      	movs	r2, #255	; 0xff
 8018b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8018b88:	f002 fae4 	bl	801b154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8018b8c:	f002 fab2 	bl	801b0f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018b96:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018b98:	e011      	b.n	8018bbe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	691b      	ldr	r3, [r3, #16]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d012      	beq.n	8018bc8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	3310      	adds	r3, #16
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f001 f90e 	bl	8019dc8 <xTaskRemoveFromEventList>
 8018bac:	4603      	mov	r3, r0
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d001      	beq.n	8018bb6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8018bb2:	f001 fa0b 	bl	8019fcc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8018bb6:	7bbb      	ldrb	r3, [r7, #14]
 8018bb8:	3b01      	subs	r3, #1
 8018bba:	b2db      	uxtb	r3, r3
 8018bbc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8018bbe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018bc2:	2b00      	cmp	r3, #0
 8018bc4:	dce9      	bgt.n	8018b9a <prvUnlockQueue+0x60>
 8018bc6:	e000      	b.n	8018bca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8018bc8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	22ff      	movs	r2, #255	; 0xff
 8018bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8018bd2:	f002 fabf 	bl	801b154 <vPortExitCritical>
}
 8018bd6:	bf00      	nop
 8018bd8:	3710      	adds	r7, #16
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}

08018bde <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8018bde:	b580      	push	{r7, lr}
 8018be0:	b084      	sub	sp, #16
 8018be2:	af00      	add	r7, sp, #0
 8018be4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018be6:	f002 fa85 	bl	801b0f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d102      	bne.n	8018bf8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8018bf2:	2301      	movs	r3, #1
 8018bf4:	60fb      	str	r3, [r7, #12]
 8018bf6:	e001      	b.n	8018bfc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018bfc:	f002 faaa 	bl	801b154 <vPortExitCritical>

	return xReturn;
 8018c00:	68fb      	ldr	r3, [r7, #12]
}
 8018c02:	4618      	mov	r0, r3
 8018c04:	3710      	adds	r7, #16
 8018c06:	46bd      	mov	sp, r7
 8018c08:	bd80      	pop	{r7, pc}

08018c0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8018c0a:	b580      	push	{r7, lr}
 8018c0c:	b084      	sub	sp, #16
 8018c0e:	af00      	add	r7, sp, #0
 8018c10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8018c12:	f002 fa6f 	bl	801b0f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8018c16:	687b      	ldr	r3, [r7, #4]
 8018c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c1e:	429a      	cmp	r2, r3
 8018c20:	d102      	bne.n	8018c28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8018c22:	2301      	movs	r3, #1
 8018c24:	60fb      	str	r3, [r7, #12]
 8018c26:	e001      	b.n	8018c2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8018c2c:	f002 fa92 	bl	801b154 <vPortExitCritical>

	return xReturn;
 8018c30:	68fb      	ldr	r3, [r7, #12]
}
 8018c32:	4618      	mov	r0, r3
 8018c34:	3710      	adds	r7, #16
 8018c36:	46bd      	mov	sp, r7
 8018c38:	bd80      	pop	{r7, pc}
	...

08018c3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8018c3c:	b480      	push	{r7}
 8018c3e:	b085      	sub	sp, #20
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
 8018c44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018c46:	2300      	movs	r3, #0
 8018c48:	60fb      	str	r3, [r7, #12]
 8018c4a:	e014      	b.n	8018c76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8018c4c:	4a0f      	ldr	r2, [pc, #60]	; (8018c8c <vQueueAddToRegistry+0x50>)
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d10b      	bne.n	8018c70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8018c58:	490c      	ldr	r1, [pc, #48]	; (8018c8c <vQueueAddToRegistry+0x50>)
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	683a      	ldr	r2, [r7, #0]
 8018c5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8018c62:	4a0a      	ldr	r2, [pc, #40]	; (8018c8c <vQueueAddToRegistry+0x50>)
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	00db      	lsls	r3, r3, #3
 8018c68:	4413      	add	r3, r2
 8018c6a:	687a      	ldr	r2, [r7, #4]
 8018c6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8018c6e:	e006      	b.n	8018c7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	3301      	adds	r3, #1
 8018c74:	60fb      	str	r3, [r7, #12]
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	2b07      	cmp	r3, #7
 8018c7a:	d9e7      	bls.n	8018c4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8018c7c:	bf00      	nop
 8018c7e:	bf00      	nop
 8018c80:	3714      	adds	r7, #20
 8018c82:	46bd      	mov	sp, r7
 8018c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c88:	4770      	bx	lr
 8018c8a:	bf00      	nop
 8018c8c:	20001f4c 	.word	0x20001f4c

08018c90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8018c90:	b480      	push	{r7}
 8018c92:	b085      	sub	sp, #20
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018c98:	2300      	movs	r3, #0
 8018c9a:	60fb      	str	r3, [r7, #12]
 8018c9c:	e016      	b.n	8018ccc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8018c9e:	4a10      	ldr	r2, [pc, #64]	; (8018ce0 <vQueueUnregisterQueue+0x50>)
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	00db      	lsls	r3, r3, #3
 8018ca4:	4413      	add	r3, r2
 8018ca6:	685b      	ldr	r3, [r3, #4]
 8018ca8:	687a      	ldr	r2, [r7, #4]
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d10b      	bne.n	8018cc6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8018cae:	4a0c      	ldr	r2, [pc, #48]	; (8018ce0 <vQueueUnregisterQueue+0x50>)
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	2100      	movs	r1, #0
 8018cb4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8018cb8:	4a09      	ldr	r2, [pc, #36]	; (8018ce0 <vQueueUnregisterQueue+0x50>)
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	00db      	lsls	r3, r3, #3
 8018cbe:	4413      	add	r3, r2
 8018cc0:	2200      	movs	r2, #0
 8018cc2:	605a      	str	r2, [r3, #4]
				break;
 8018cc4:	e006      	b.n	8018cd4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8018cc6:	68fb      	ldr	r3, [r7, #12]
 8018cc8:	3301      	adds	r3, #1
 8018cca:	60fb      	str	r3, [r7, #12]
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	2b07      	cmp	r3, #7
 8018cd0:	d9e5      	bls.n	8018c9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8018cd2:	bf00      	nop
 8018cd4:	bf00      	nop
 8018cd6:	3714      	adds	r7, #20
 8018cd8:	46bd      	mov	sp, r7
 8018cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cde:	4770      	bx	lr
 8018ce0:	20001f4c 	.word	0x20001f4c

08018ce4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b086      	sub	sp, #24
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	60f8      	str	r0, [r7, #12]
 8018cec:	60b9      	str	r1, [r7, #8]
 8018cee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8018cf4:	f002 f9fe 	bl	801b0f4 <vPortEnterCritical>
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8018cfe:	b25b      	sxtb	r3, r3
 8018d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d04:	d103      	bne.n	8018d0e <vQueueWaitForMessageRestricted+0x2a>
 8018d06:	697b      	ldr	r3, [r7, #20]
 8018d08:	2200      	movs	r2, #0
 8018d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8018d0e:	697b      	ldr	r3, [r7, #20]
 8018d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8018d14:	b25b      	sxtb	r3, r3
 8018d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d1a:	d103      	bne.n	8018d24 <vQueueWaitForMessageRestricted+0x40>
 8018d1c:	697b      	ldr	r3, [r7, #20]
 8018d1e:	2200      	movs	r2, #0
 8018d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8018d24:	f002 fa16 	bl	801b154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8018d28:	697b      	ldr	r3, [r7, #20]
 8018d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d106      	bne.n	8018d3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	3324      	adds	r3, #36	; 0x24
 8018d34:	687a      	ldr	r2, [r7, #4]
 8018d36:	68b9      	ldr	r1, [r7, #8]
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f001 f819 	bl	8019d70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8018d3e:	6978      	ldr	r0, [r7, #20]
 8018d40:	f7ff fefb 	bl	8018b3a <prvUnlockQueue>
	}
 8018d44:	bf00      	nop
 8018d46:	3718      	adds	r7, #24
 8018d48:	46bd      	mov	sp, r7
 8018d4a:	bd80      	pop	{r7, pc}

08018d4c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b08c      	sub	sp, #48	; 0x30
 8018d50:	af02      	add	r7, sp, #8
 8018d52:	60f8      	str	r0, [r7, #12]
 8018d54:	60b9      	str	r1, [r7, #8]
 8018d56:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	2b01      	cmp	r3, #1
 8018d5c:	d110      	bne.n	8018d80 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8018d5e:	2301      	movs	r3, #1
 8018d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	2b04      	cmp	r3, #4
 8018d68:	d81b      	bhi.n	8018da2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8018d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d6e:	f383 8811 	msr	BASEPRI, r3
 8018d72:	f3bf 8f6f 	isb	sy
 8018d76:	f3bf 8f4f 	dsb	sy
 8018d7a:	61fb      	str	r3, [r7, #28]
}
 8018d7c:	bf00      	nop
 8018d7e:	e7fe      	b.n	8018d7e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8018d80:	2300      	movs	r3, #0
 8018d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d10a      	bne.n	8018da2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8018d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d90:	f383 8811 	msr	BASEPRI, r3
 8018d94:	f3bf 8f6f 	isb	sy
 8018d98:	f3bf 8f4f 	dsb	sy
 8018d9c:	61bb      	str	r3, [r7, #24]
}
 8018d9e:	bf00      	nop
 8018da0:	e7fe      	b.n	8018da0 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8018da2:	68ba      	ldr	r2, [r7, #8]
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	429a      	cmp	r2, r3
 8018da8:	d90a      	bls.n	8018dc0 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8018daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dae:	f383 8811 	msr	BASEPRI, r3
 8018db2:	f3bf 8f6f 	isb	sy
 8018db6:	f3bf 8f4f 	dsb	sy
 8018dba:	617b      	str	r3, [r7, #20]
}
 8018dbc:	bf00      	nop
 8018dbe:	e7fe      	b.n	8018dbe <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8018dc0:	68bb      	ldr	r3, [r7, #8]
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d101      	bne.n	8018dca <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8018dc6:	2301      	movs	r3, #1
 8018dc8:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	3301      	adds	r3, #1
 8018dce:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	3324      	adds	r3, #36	; 0x24
 8018dd4:	4618      	mov	r0, r3
 8018dd6:	f002 faaf 	bl	801b338 <pvPortMalloc>
 8018dda:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8018ddc:	6a3b      	ldr	r3, [r7, #32]
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	d00a      	beq.n	8018df8 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8018de2:	6a3b      	ldr	r3, [r7, #32]
 8018de4:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8018de8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018dec:	9300      	str	r3, [sp, #0]
 8018dee:	68bb      	ldr	r3, [r7, #8]
 8018df0:	68fa      	ldr	r2, [r7, #12]
 8018df2:	6a38      	ldr	r0, [r7, #32]
 8018df4:	f000 fafd 	bl	80193f2 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8018df8:	6a3b      	ldr	r3, [r7, #32]
	}
 8018dfa:	4618      	mov	r0, r3
 8018dfc:	3728      	adds	r7, #40	; 0x28
 8018dfe:	46bd      	mov	sp, r7
 8018e00:	bd80      	pop	{r7, pc}

08018e02 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8018e02:	b480      	push	{r7}
 8018e04:	b087      	sub	sp, #28
 8018e06:	af00      	add	r7, sp, #0
 8018e08:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8018e0e:	693b      	ldr	r3, [r7, #16]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d10a      	bne.n	8018e2a <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8018e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e18:	f383 8811 	msr	BASEPRI, r3
 8018e1c:	f3bf 8f6f 	isb	sy
 8018e20:	f3bf 8f4f 	dsb	sy
 8018e24:	60fb      	str	r3, [r7, #12]
}
 8018e26:	bf00      	nop
 8018e28:	e7fe      	b.n	8018e28 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8018e2a:	693b      	ldr	r3, [r7, #16]
 8018e2c:	689a      	ldr	r2, [r3, #8]
 8018e2e:	693b      	ldr	r3, [r7, #16]
 8018e30:	681b      	ldr	r3, [r3, #0]
 8018e32:	4413      	add	r3, r2
 8018e34:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8018e36:	693b      	ldr	r3, [r7, #16]
 8018e38:	685b      	ldr	r3, [r3, #4]
 8018e3a:	697a      	ldr	r2, [r7, #20]
 8018e3c:	1ad3      	subs	r3, r2, r3
 8018e3e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8018e40:	697b      	ldr	r3, [r7, #20]
 8018e42:	3b01      	subs	r3, #1
 8018e44:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8018e46:	693b      	ldr	r3, [r7, #16]
 8018e48:	689b      	ldr	r3, [r3, #8]
 8018e4a:	697a      	ldr	r2, [r7, #20]
 8018e4c:	429a      	cmp	r2, r3
 8018e4e:	d304      	bcc.n	8018e5a <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8018e50:	693b      	ldr	r3, [r7, #16]
 8018e52:	689b      	ldr	r3, [r3, #8]
 8018e54:	697a      	ldr	r2, [r7, #20]
 8018e56:	1ad3      	subs	r3, r2, r3
 8018e58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8018e5a:	697b      	ldr	r3, [r7, #20]
}
 8018e5c:	4618      	mov	r0, r3
 8018e5e:	371c      	adds	r7, #28
 8018e60:	46bd      	mov	sp, r7
 8018e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e66:	4770      	bx	lr

08018e68 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8018e68:	b580      	push	{r7, lr}
 8018e6a:	b090      	sub	sp, #64	; 0x40
 8018e6c:	af02      	add	r7, sp, #8
 8018e6e:	60f8      	str	r0, [r7, #12]
 8018e70:	60b9      	str	r1, [r7, #8]
 8018e72:	607a      	str	r2, [r7, #4]
 8018e74:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8018e7a:	2300      	movs	r3, #0
 8018e7c:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8018e82:	68bb      	ldr	r3, [r7, #8]
 8018e84:	2b00      	cmp	r3, #0
 8018e86:	d10a      	bne.n	8018e9e <xStreamBufferSend+0x36>
	__asm volatile
 8018e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e8c:	f383 8811 	msr	BASEPRI, r3
 8018e90:	f3bf 8f6f 	isb	sy
 8018e94:	f3bf 8f4f 	dsb	sy
 8018e98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018e9a:	bf00      	nop
 8018e9c:	e7fe      	b.n	8018e9c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8018e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	d10a      	bne.n	8018eba <xStreamBufferSend+0x52>
	__asm volatile
 8018ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ea8:	f383 8811 	msr	BASEPRI, r3
 8018eac:	f3bf 8f6f 	isb	sy
 8018eb0:	f3bf 8f4f 	dsb	sy
 8018eb4:	623b      	str	r3, [r7, #32]
}
 8018eb6:	bf00      	nop
 8018eb8:	e7fe      	b.n	8018eb8 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8018eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ebc:	7f1b      	ldrb	r3, [r3, #28]
 8018ebe:	f003 0301 	and.w	r3, r3, #1
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d011      	beq.n	8018eea <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8018ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ec8:	3304      	adds	r3, #4
 8018eca:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8018ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	429a      	cmp	r2, r3
 8018ed2:	d80a      	bhi.n	8018eea <xStreamBufferSend+0x82>
	__asm volatile
 8018ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ed8:	f383 8811 	msr	BASEPRI, r3
 8018edc:	f3bf 8f6f 	isb	sy
 8018ee0:	f3bf 8f4f 	dsb	sy
 8018ee4:	61fb      	str	r3, [r7, #28]
}
 8018ee6:	bf00      	nop
 8018ee8:	e7fe      	b.n	8018ee8 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8018eea:	683b      	ldr	r3, [r7, #0]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d03e      	beq.n	8018f6e <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8018ef0:	f107 0310 	add.w	r3, r7, #16
 8018ef4:	4618      	mov	r0, r3
 8018ef6:	f000 ffcb 	bl	8019e90 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8018efa:	f002 f8fb 	bl	801b0f4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8018efe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018f00:	f7ff ff7f 	bl	8018e02 <xStreamBufferSpacesAvailable>
 8018f04:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8018f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f0a:	429a      	cmp	r2, r3
 8018f0c:	d217      	bcs.n	8018f3e <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8018f0e:	2000      	movs	r0, #0
 8018f10:	f001 fbfa 	bl	801a708 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8018f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f16:	695b      	ldr	r3, [r3, #20]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d00a      	beq.n	8018f32 <xStreamBufferSend+0xca>
	__asm volatile
 8018f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f20:	f383 8811 	msr	BASEPRI, r3
 8018f24:	f3bf 8f6f 	isb	sy
 8018f28:	f3bf 8f4f 	dsb	sy
 8018f2c:	61bb      	str	r3, [r7, #24]
}
 8018f2e:	bf00      	nop
 8018f30:	e7fe      	b.n	8018f30 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8018f32:	f001 f931 	bl	801a198 <xTaskGetCurrentTaskHandle>
 8018f36:	4602      	mov	r2, r0
 8018f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f3a:	615a      	str	r2, [r3, #20]
 8018f3c:	e002      	b.n	8018f44 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8018f3e:	f002 f909 	bl	801b154 <vPortExitCritical>
					break;
 8018f42:	e014      	b.n	8018f6e <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8018f44:	f002 f906 	bl	801b154 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8018f48:	683b      	ldr	r3, [r7, #0]
 8018f4a:	2200      	movs	r2, #0
 8018f4c:	2100      	movs	r1, #0
 8018f4e:	2000      	movs	r0, #0
 8018f50:	f001 fabc 	bl	801a4cc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8018f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f56:	2200      	movs	r2, #0
 8018f58:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8018f5a:	463a      	mov	r2, r7
 8018f5c:	f107 0310 	add.w	r3, r7, #16
 8018f60:	4611      	mov	r1, r2
 8018f62:	4618      	mov	r0, r3
 8018f64:	f000 ffd0 	bl	8019f08 <xTaskCheckForTimeOut>
 8018f68:	4603      	mov	r3, r0
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d0c5      	beq.n	8018efa <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8018f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f70:	2b00      	cmp	r3, #0
 8018f72:	d103      	bne.n	8018f7c <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8018f74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018f76:	f7ff ff44 	bl	8018e02 <xStreamBufferSpacesAvailable>
 8018f7a:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8018f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f7e:	9300      	str	r3, [sp, #0]
 8018f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018f82:	687a      	ldr	r2, [r7, #4]
 8018f84:	68b9      	ldr	r1, [r7, #8]
 8018f86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018f88:	f000 f823 	bl	8018fd2 <prvWriteMessageToBuffer>
 8018f8c:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8018f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f90:	2b00      	cmp	r3, #0
 8018f92:	d019      	beq.n	8018fc8 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8018f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018f96:	f000 fa0c 	bl	80193b2 <prvBytesInBuffer>
 8018f9a:	4602      	mov	r2, r0
 8018f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f9e:	68db      	ldr	r3, [r3, #12]
 8018fa0:	429a      	cmp	r2, r3
 8018fa2:	d311      	bcc.n	8018fc8 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8018fa4:	f000 fcba 	bl	801991c <vTaskSuspendAll>
 8018fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018faa:	691b      	ldr	r3, [r3, #16]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d009      	beq.n	8018fc4 <xStreamBufferSend+0x15c>
 8018fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fb2:	6918      	ldr	r0, [r3, #16]
 8018fb4:	2300      	movs	r3, #0
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	2100      	movs	r1, #0
 8018fba:	f001 fae7 	bl	801a58c <xTaskGenericNotify>
 8018fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fc0:	2200      	movs	r2, #0
 8018fc2:	611a      	str	r2, [r3, #16]
 8018fc4:	f000 fcb8 	bl	8019938 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8018fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8018fca:	4618      	mov	r0, r3
 8018fcc:	3738      	adds	r7, #56	; 0x38
 8018fce:	46bd      	mov	sp, r7
 8018fd0:	bd80      	pop	{r7, pc}

08018fd2 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8018fd2:	b580      	push	{r7, lr}
 8018fd4:	b086      	sub	sp, #24
 8018fd6:	af00      	add	r7, sp, #0
 8018fd8:	60f8      	str	r0, [r7, #12]
 8018fda:	60b9      	str	r1, [r7, #8]
 8018fdc:	607a      	str	r2, [r7, #4]
 8018fde:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8018fe0:	683b      	ldr	r3, [r7, #0]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d102      	bne.n	8018fec <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8018fe6:	2300      	movs	r3, #0
 8018fe8:	617b      	str	r3, [r7, #20]
 8018fea:	e01d      	b.n	8019028 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8018fec:	68fb      	ldr	r3, [r7, #12]
 8018fee:	7f1b      	ldrb	r3, [r3, #28]
 8018ff0:	f003 0301 	and.w	r3, r3, #1
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d108      	bne.n	801900a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8018ff8:	2301      	movs	r3, #1
 8018ffa:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8018ffc:	687a      	ldr	r2, [r7, #4]
 8018ffe:	683b      	ldr	r3, [r7, #0]
 8019000:	4293      	cmp	r3, r2
 8019002:	bf28      	it	cs
 8019004:	4613      	movcs	r3, r2
 8019006:	607b      	str	r3, [r7, #4]
 8019008:	e00e      	b.n	8019028 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 801900a:	683a      	ldr	r2, [r7, #0]
 801900c:	6a3b      	ldr	r3, [r7, #32]
 801900e:	429a      	cmp	r2, r3
 8019010:	d308      	bcc.n	8019024 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8019012:	2301      	movs	r3, #1
 8019014:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8019016:	1d3b      	adds	r3, r7, #4
 8019018:	2204      	movs	r2, #4
 801901a:	4619      	mov	r1, r3
 801901c:	68f8      	ldr	r0, [r7, #12]
 801901e:	f000 f8dc 	bl	80191da <prvWriteBytesToBuffer>
 8019022:	e001      	b.n	8019028 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8019024:	2300      	movs	r3, #0
 8019026:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8019028:	697b      	ldr	r3, [r7, #20]
 801902a:	2b00      	cmp	r3, #0
 801902c:	d007      	beq.n	801903e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 801902e:	687b      	ldr	r3, [r7, #4]
 8019030:	461a      	mov	r2, r3
 8019032:	68b9      	ldr	r1, [r7, #8]
 8019034:	68f8      	ldr	r0, [r7, #12]
 8019036:	f000 f8d0 	bl	80191da <prvWriteBytesToBuffer>
 801903a:	6138      	str	r0, [r7, #16]
 801903c:	e001      	b.n	8019042 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 801903e:	2300      	movs	r3, #0
 8019040:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8019042:	693b      	ldr	r3, [r7, #16]
}
 8019044:	4618      	mov	r0, r3
 8019046:	3718      	adds	r7, #24
 8019048:	46bd      	mov	sp, r7
 801904a:	bd80      	pop	{r7, pc}

0801904c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b08e      	sub	sp, #56	; 0x38
 8019050:	af02      	add	r7, sp, #8
 8019052:	60f8      	str	r0, [r7, #12]
 8019054:	60b9      	str	r1, [r7, #8]
 8019056:	607a      	str	r2, [r7, #4]
 8019058:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 801905e:	2300      	movs	r3, #0
 8019060:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8019062:	68bb      	ldr	r3, [r7, #8]
 8019064:	2b00      	cmp	r3, #0
 8019066:	d10a      	bne.n	801907e <xStreamBufferReceive+0x32>
	__asm volatile
 8019068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801906c:	f383 8811 	msr	BASEPRI, r3
 8019070:	f3bf 8f6f 	isb	sy
 8019074:	f3bf 8f4f 	dsb	sy
 8019078:	61fb      	str	r3, [r7, #28]
}
 801907a:	bf00      	nop
 801907c:	e7fe      	b.n	801907c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 801907e:	6a3b      	ldr	r3, [r7, #32]
 8019080:	2b00      	cmp	r3, #0
 8019082:	d10a      	bne.n	801909a <xStreamBufferReceive+0x4e>
	__asm volatile
 8019084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019088:	f383 8811 	msr	BASEPRI, r3
 801908c:	f3bf 8f6f 	isb	sy
 8019090:	f3bf 8f4f 	dsb	sy
 8019094:	61bb      	str	r3, [r7, #24]
}
 8019096:	bf00      	nop
 8019098:	e7fe      	b.n	8019098 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 801909a:	6a3b      	ldr	r3, [r7, #32]
 801909c:	7f1b      	ldrb	r3, [r3, #28]
 801909e:	f003 0301 	and.w	r3, r3, #1
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d002      	beq.n	80190ac <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80190a6:	2304      	movs	r3, #4
 80190a8:	627b      	str	r3, [r7, #36]	; 0x24
 80190aa:	e001      	b.n	80190b0 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80190ac:	2300      	movs	r3, #0
 80190ae:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80190b0:	683b      	ldr	r3, [r7, #0]
 80190b2:	2b00      	cmp	r3, #0
 80190b4:	d034      	beq.n	8019120 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80190b6:	f002 f81d 	bl	801b0f4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80190ba:	6a38      	ldr	r0, [r7, #32]
 80190bc:	f000 f979 	bl	80193b2 <prvBytesInBuffer>
 80190c0:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80190c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80190c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80190c6:	429a      	cmp	r2, r3
 80190c8:	d816      	bhi.n	80190f8 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80190ca:	2000      	movs	r0, #0
 80190cc:	f001 fb1c 	bl	801a708 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80190d0:	6a3b      	ldr	r3, [r7, #32]
 80190d2:	691b      	ldr	r3, [r3, #16]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d00a      	beq.n	80190ee <xStreamBufferReceive+0xa2>
	__asm volatile
 80190d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190dc:	f383 8811 	msr	BASEPRI, r3
 80190e0:	f3bf 8f6f 	isb	sy
 80190e4:	f3bf 8f4f 	dsb	sy
 80190e8:	617b      	str	r3, [r7, #20]
}
 80190ea:	bf00      	nop
 80190ec:	e7fe      	b.n	80190ec <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80190ee:	f001 f853 	bl	801a198 <xTaskGetCurrentTaskHandle>
 80190f2:	4602      	mov	r2, r0
 80190f4:	6a3b      	ldr	r3, [r7, #32]
 80190f6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80190f8:	f002 f82c 	bl	801b154 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80190fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80190fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019100:	429a      	cmp	r2, r3
 8019102:	d811      	bhi.n	8019128 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8019104:	683b      	ldr	r3, [r7, #0]
 8019106:	2200      	movs	r2, #0
 8019108:	2100      	movs	r1, #0
 801910a:	2000      	movs	r0, #0
 801910c:	f001 f9de 	bl	801a4cc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8019110:	6a3b      	ldr	r3, [r7, #32]
 8019112:	2200      	movs	r2, #0
 8019114:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8019116:	6a38      	ldr	r0, [r7, #32]
 8019118:	f000 f94b 	bl	80193b2 <prvBytesInBuffer>
 801911c:	62b8      	str	r0, [r7, #40]	; 0x28
 801911e:	e003      	b.n	8019128 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8019120:	6a38      	ldr	r0, [r7, #32]
 8019122:	f000 f946 	bl	80193b2 <prvBytesInBuffer>
 8019126:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8019128:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801912c:	429a      	cmp	r2, r3
 801912e:	d91d      	bls.n	801916c <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8019130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019132:	9300      	str	r3, [sp, #0]
 8019134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019136:	687a      	ldr	r2, [r7, #4]
 8019138:	68b9      	ldr	r1, [r7, #8]
 801913a:	6a38      	ldr	r0, [r7, #32]
 801913c:	f000 f81b 	bl	8019176 <prvReadMessageFromBuffer>
 8019140:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8019142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019144:	2b00      	cmp	r3, #0
 8019146:	d011      	beq.n	801916c <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8019148:	f000 fbe8 	bl	801991c <vTaskSuspendAll>
 801914c:	6a3b      	ldr	r3, [r7, #32]
 801914e:	695b      	ldr	r3, [r3, #20]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d009      	beq.n	8019168 <xStreamBufferReceive+0x11c>
 8019154:	6a3b      	ldr	r3, [r7, #32]
 8019156:	6958      	ldr	r0, [r3, #20]
 8019158:	2300      	movs	r3, #0
 801915a:	2200      	movs	r2, #0
 801915c:	2100      	movs	r1, #0
 801915e:	f001 fa15 	bl	801a58c <xTaskGenericNotify>
 8019162:	6a3b      	ldr	r3, [r7, #32]
 8019164:	2200      	movs	r2, #0
 8019166:	615a      	str	r2, [r3, #20]
 8019168:	f000 fbe6 	bl	8019938 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 801916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801916e:	4618      	mov	r0, r3
 8019170:	3730      	adds	r7, #48	; 0x30
 8019172:	46bd      	mov	sp, r7
 8019174:	bd80      	pop	{r7, pc}

08019176 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8019176:	b580      	push	{r7, lr}
 8019178:	b088      	sub	sp, #32
 801917a:	af00      	add	r7, sp, #0
 801917c:	60f8      	str	r0, [r7, #12]
 801917e:	60b9      	str	r1, [r7, #8]
 8019180:	607a      	str	r2, [r7, #4]
 8019182:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8019184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019186:	2b00      	cmp	r3, #0
 8019188:	d019      	beq.n	80191be <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8019190:	f107 0110 	add.w	r1, r7, #16
 8019194:	683b      	ldr	r3, [r7, #0]
 8019196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019198:	68f8      	ldr	r0, [r7, #12]
 801919a:	f000 f890 	bl	80192be <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 801919e:	693b      	ldr	r3, [r7, #16]
 80191a0:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80191a2:	683a      	ldr	r2, [r7, #0]
 80191a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191a6:	1ad3      	subs	r3, r2, r3
 80191a8:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80191aa:	69fa      	ldr	r2, [r7, #28]
 80191ac:	687b      	ldr	r3, [r7, #4]
 80191ae:	429a      	cmp	r2, r3
 80191b0:	d907      	bls.n	80191c2 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80191b2:	68fb      	ldr	r3, [r7, #12]
 80191b4:	69ba      	ldr	r2, [r7, #24]
 80191b6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80191b8:	2300      	movs	r3, #0
 80191ba:	61fb      	str	r3, [r7, #28]
 80191bc:	e001      	b.n	80191c2 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80191c2:	683b      	ldr	r3, [r7, #0]
 80191c4:	69fa      	ldr	r2, [r7, #28]
 80191c6:	68b9      	ldr	r1, [r7, #8]
 80191c8:	68f8      	ldr	r0, [r7, #12]
 80191ca:	f000 f878 	bl	80192be <prvReadBytesFromBuffer>
 80191ce:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80191d0:	697b      	ldr	r3, [r7, #20]
}
 80191d2:	4618      	mov	r0, r3
 80191d4:	3720      	adds	r7, #32
 80191d6:	46bd      	mov	sp, r7
 80191d8:	bd80      	pop	{r7, pc}

080191da <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80191da:	b580      	push	{r7, lr}
 80191dc:	b08a      	sub	sp, #40	; 0x28
 80191de:	af00      	add	r7, sp, #0
 80191e0:	60f8      	str	r0, [r7, #12]
 80191e2:	60b9      	str	r1, [r7, #8]
 80191e4:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	2b00      	cmp	r3, #0
 80191ea:	d10a      	bne.n	8019202 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 80191ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191f0:	f383 8811 	msr	BASEPRI, r3
 80191f4:	f3bf 8f6f 	isb	sy
 80191f8:	f3bf 8f4f 	dsb	sy
 80191fc:	61fb      	str	r3, [r7, #28]
}
 80191fe:	bf00      	nop
 8019200:	e7fe      	b.n	8019200 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	685b      	ldr	r3, [r3, #4]
 8019206:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	689a      	ldr	r2, [r3, #8]
 801920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801920e:	1ad3      	subs	r3, r2, r3
 8019210:	687a      	ldr	r2, [r7, #4]
 8019212:	4293      	cmp	r3, r2
 8019214:	bf28      	it	cs
 8019216:	4613      	movcs	r3, r2
 8019218:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 801921a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801921c:	6a3b      	ldr	r3, [r7, #32]
 801921e:	441a      	add	r2, r3
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	689b      	ldr	r3, [r3, #8]
 8019224:	429a      	cmp	r2, r3
 8019226:	d90a      	bls.n	801923e <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8019228:	f04f 0350 	mov.w	r3, #80	; 0x50
 801922c:	f383 8811 	msr	BASEPRI, r3
 8019230:	f3bf 8f6f 	isb	sy
 8019234:	f3bf 8f4f 	dsb	sy
 8019238:	61bb      	str	r3, [r7, #24]
}
 801923a:	bf00      	nop
 801923c:	e7fe      	b.n	801923c <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 801923e:	68fb      	ldr	r3, [r7, #12]
 8019240:	699a      	ldr	r2, [r3, #24]
 8019242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019244:	4413      	add	r3, r2
 8019246:	6a3a      	ldr	r2, [r7, #32]
 8019248:	68b9      	ldr	r1, [r7, #8]
 801924a:	4618      	mov	r0, r3
 801924c:	f002 ff44 	bl	801c0d8 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8019250:	687a      	ldr	r2, [r7, #4]
 8019252:	6a3b      	ldr	r3, [r7, #32]
 8019254:	429a      	cmp	r2, r3
 8019256:	d91c      	bls.n	8019292 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8019258:	687a      	ldr	r2, [r7, #4]
 801925a:	6a3b      	ldr	r3, [r7, #32]
 801925c:	1ad2      	subs	r2, r2, r3
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	689b      	ldr	r3, [r3, #8]
 8019262:	429a      	cmp	r2, r3
 8019264:	d90a      	bls.n	801927c <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8019266:	f04f 0350 	mov.w	r3, #80	; 0x50
 801926a:	f383 8811 	msr	BASEPRI, r3
 801926e:	f3bf 8f6f 	isb	sy
 8019272:	f3bf 8f4f 	dsb	sy
 8019276:	617b      	str	r3, [r7, #20]
}
 8019278:	bf00      	nop
 801927a:	e7fe      	b.n	801927a <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	6998      	ldr	r0, [r3, #24]
 8019280:	68ba      	ldr	r2, [r7, #8]
 8019282:	6a3b      	ldr	r3, [r7, #32]
 8019284:	18d1      	adds	r1, r2, r3
 8019286:	687a      	ldr	r2, [r7, #4]
 8019288:	6a3b      	ldr	r3, [r7, #32]
 801928a:	1ad3      	subs	r3, r2, r3
 801928c:	461a      	mov	r2, r3
 801928e:	f002 ff23 	bl	801c0d8 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8019292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	4413      	add	r3, r2
 8019298:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	689b      	ldr	r3, [r3, #8]
 801929e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192a0:	429a      	cmp	r2, r3
 80192a2:	d304      	bcc.n	80192ae <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	689b      	ldr	r3, [r3, #8]
 80192a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192aa:	1ad3      	subs	r3, r2, r3
 80192ac:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80192ae:	68fb      	ldr	r3, [r7, #12]
 80192b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80192b2:	605a      	str	r2, [r3, #4]

	return xCount;
 80192b4:	687b      	ldr	r3, [r7, #4]
}
 80192b6:	4618      	mov	r0, r3
 80192b8:	3728      	adds	r7, #40	; 0x28
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}

080192be <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80192be:	b580      	push	{r7, lr}
 80192c0:	b08a      	sub	sp, #40	; 0x28
 80192c2:	af00      	add	r7, sp, #0
 80192c4:	60f8      	str	r0, [r7, #12]
 80192c6:	60b9      	str	r1, [r7, #8]
 80192c8:	607a      	str	r2, [r7, #4]
 80192ca:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80192cc:	687a      	ldr	r2, [r7, #4]
 80192ce:	683b      	ldr	r3, [r7, #0]
 80192d0:	4293      	cmp	r3, r2
 80192d2:	bf28      	it	cs
 80192d4:	4613      	movcs	r3, r2
 80192d6:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80192d8:	6a3b      	ldr	r3, [r7, #32]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d064      	beq.n	80193a8 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 80192de:	68fb      	ldr	r3, [r7, #12]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	689a      	ldr	r2, [r3, #8]
 80192e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ea:	1ad3      	subs	r3, r2, r3
 80192ec:	6a3a      	ldr	r2, [r7, #32]
 80192ee:	4293      	cmp	r3, r2
 80192f0:	bf28      	it	cs
 80192f2:	4613      	movcs	r3, r2
 80192f4:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80192f6:	69fa      	ldr	r2, [r7, #28]
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	429a      	cmp	r2, r3
 80192fc:	d90a      	bls.n	8019314 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 80192fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019302:	f383 8811 	msr	BASEPRI, r3
 8019306:	f3bf 8f6f 	isb	sy
 801930a:	f3bf 8f4f 	dsb	sy
 801930e:	61bb      	str	r3, [r7, #24]
}
 8019310:	bf00      	nop
 8019312:	e7fe      	b.n	8019312 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8019314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019316:	69fb      	ldr	r3, [r7, #28]
 8019318:	441a      	add	r2, r3
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	689b      	ldr	r3, [r3, #8]
 801931e:	429a      	cmp	r2, r3
 8019320:	d90a      	bls.n	8019338 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8019322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019326:	f383 8811 	msr	BASEPRI, r3
 801932a:	f3bf 8f6f 	isb	sy
 801932e:	f3bf 8f4f 	dsb	sy
 8019332:	617b      	str	r3, [r7, #20]
}
 8019334:	bf00      	nop
 8019336:	e7fe      	b.n	8019336 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019338:	68fb      	ldr	r3, [r7, #12]
 801933a:	699a      	ldr	r2, [r3, #24]
 801933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801933e:	4413      	add	r3, r2
 8019340:	69fa      	ldr	r2, [r7, #28]
 8019342:	4619      	mov	r1, r3
 8019344:	68b8      	ldr	r0, [r7, #8]
 8019346:	f002 fec7 	bl	801c0d8 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 801934a:	6a3a      	ldr	r2, [r7, #32]
 801934c:	69fb      	ldr	r3, [r7, #28]
 801934e:	429a      	cmp	r2, r3
 8019350:	d919      	bls.n	8019386 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8019352:	6a3a      	ldr	r2, [r7, #32]
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	429a      	cmp	r2, r3
 8019358:	d90a      	bls.n	8019370 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 801935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801935e:	f383 8811 	msr	BASEPRI, r3
 8019362:	f3bf 8f6f 	isb	sy
 8019366:	f3bf 8f4f 	dsb	sy
 801936a:	613b      	str	r3, [r7, #16]
}
 801936c:	bf00      	nop
 801936e:	e7fe      	b.n	801936e <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8019370:	68ba      	ldr	r2, [r7, #8]
 8019372:	69fb      	ldr	r3, [r7, #28]
 8019374:	18d0      	adds	r0, r2, r3
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	6999      	ldr	r1, [r3, #24]
 801937a:	6a3a      	ldr	r2, [r7, #32]
 801937c:	69fb      	ldr	r3, [r7, #28]
 801937e:	1ad3      	subs	r3, r2, r3
 8019380:	461a      	mov	r2, r3
 8019382:	f002 fea9 	bl	801c0d8 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8019386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019388:	6a3b      	ldr	r3, [r7, #32]
 801938a:	4413      	add	r3, r2
 801938c:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	689b      	ldr	r3, [r3, #8]
 8019392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019394:	429a      	cmp	r2, r3
 8019396:	d304      	bcc.n	80193a2 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8019398:	68fb      	ldr	r3, [r7, #12]
 801939a:	689b      	ldr	r3, [r3, #8]
 801939c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801939e:	1ad3      	subs	r3, r2, r3
 80193a0:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80193a6:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80193a8:	6a3b      	ldr	r3, [r7, #32]
}
 80193aa:	4618      	mov	r0, r3
 80193ac:	3728      	adds	r7, #40	; 0x28
 80193ae:	46bd      	mov	sp, r7
 80193b0:	bd80      	pop	{r7, pc}

080193b2 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80193b2:	b480      	push	{r7}
 80193b4:	b085      	sub	sp, #20
 80193b6:	af00      	add	r7, sp, #0
 80193b8:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80193ba:	687b      	ldr	r3, [r7, #4]
 80193bc:	689a      	ldr	r2, [r3, #8]
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	685b      	ldr	r3, [r3, #4]
 80193c2:	4413      	add	r3, r2
 80193c4:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80193c6:	687b      	ldr	r3, [r7, #4]
 80193c8:	681b      	ldr	r3, [r3, #0]
 80193ca:	68fa      	ldr	r2, [r7, #12]
 80193cc:	1ad3      	subs	r3, r2, r3
 80193ce:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	689b      	ldr	r3, [r3, #8]
 80193d4:	68fa      	ldr	r2, [r7, #12]
 80193d6:	429a      	cmp	r2, r3
 80193d8:	d304      	bcc.n	80193e4 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	689b      	ldr	r3, [r3, #8]
 80193de:	68fa      	ldr	r2, [r7, #12]
 80193e0:	1ad3      	subs	r3, r2, r3
 80193e2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80193e4:	68fb      	ldr	r3, [r7, #12]
}
 80193e6:	4618      	mov	r0, r3
 80193e8:	3714      	adds	r7, #20
 80193ea:	46bd      	mov	sp, r7
 80193ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193f0:	4770      	bx	lr

080193f2 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80193f2:	b580      	push	{r7, lr}
 80193f4:	b086      	sub	sp, #24
 80193f6:	af00      	add	r7, sp, #0
 80193f8:	60f8      	str	r0, [r7, #12]
 80193fa:	60b9      	str	r1, [r7, #8]
 80193fc:	607a      	str	r2, [r7, #4]
 80193fe:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8019400:	2355      	movs	r3, #85	; 0x55
 8019402:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8019404:	687a      	ldr	r2, [r7, #4]
 8019406:	6979      	ldr	r1, [r7, #20]
 8019408:	68b8      	ldr	r0, [r7, #8]
 801940a:	f002 fe73 	bl	801c0f4 <memset>
 801940e:	4602      	mov	r2, r0
 8019410:	68bb      	ldr	r3, [r7, #8]
 8019412:	4293      	cmp	r3, r2
 8019414:	d00a      	beq.n	801942c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8019416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801941a:	f383 8811 	msr	BASEPRI, r3
 801941e:	f3bf 8f6f 	isb	sy
 8019422:	f3bf 8f4f 	dsb	sy
 8019426:	613b      	str	r3, [r7, #16]
}
 8019428:	bf00      	nop
 801942a:	e7fe      	b.n	801942a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 801942c:	2224      	movs	r2, #36	; 0x24
 801942e:	2100      	movs	r1, #0
 8019430:	68f8      	ldr	r0, [r7, #12]
 8019432:	f002 fe5f 	bl	801c0f4 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8019436:	68fb      	ldr	r3, [r7, #12]
 8019438:	68ba      	ldr	r2, [r7, #8]
 801943a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	687a      	ldr	r2, [r7, #4]
 8019440:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	683a      	ldr	r2, [r7, #0]
 8019446:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	f897 2020 	ldrb.w	r2, [r7, #32]
 801944e:	771a      	strb	r2, [r3, #28]
}
 8019450:	bf00      	nop
 8019452:	3718      	adds	r7, #24
 8019454:	46bd      	mov	sp, r7
 8019456:	bd80      	pop	{r7, pc}

08019458 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8019458:	b580      	push	{r7, lr}
 801945a:	b08e      	sub	sp, #56	; 0x38
 801945c:	af04      	add	r7, sp, #16
 801945e:	60f8      	str	r0, [r7, #12]
 8019460:	60b9      	str	r1, [r7, #8]
 8019462:	607a      	str	r2, [r7, #4]
 8019464:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8019466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019468:	2b00      	cmp	r3, #0
 801946a:	d10a      	bne.n	8019482 <xTaskCreateStatic+0x2a>
	__asm volatile
 801946c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019470:	f383 8811 	msr	BASEPRI, r3
 8019474:	f3bf 8f6f 	isb	sy
 8019478:	f3bf 8f4f 	dsb	sy
 801947c:	623b      	str	r3, [r7, #32]
}
 801947e:	bf00      	nop
 8019480:	e7fe      	b.n	8019480 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8019482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019484:	2b00      	cmp	r3, #0
 8019486:	d10a      	bne.n	801949e <xTaskCreateStatic+0x46>
	__asm volatile
 8019488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801948c:	f383 8811 	msr	BASEPRI, r3
 8019490:	f3bf 8f6f 	isb	sy
 8019494:	f3bf 8f4f 	dsb	sy
 8019498:	61fb      	str	r3, [r7, #28]
}
 801949a:	bf00      	nop
 801949c:	e7fe      	b.n	801949c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801949e:	23c0      	movs	r3, #192	; 0xc0
 80194a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80194a2:	693b      	ldr	r3, [r7, #16]
 80194a4:	2bc0      	cmp	r3, #192	; 0xc0
 80194a6:	d00a      	beq.n	80194be <xTaskCreateStatic+0x66>
	__asm volatile
 80194a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194ac:	f383 8811 	msr	BASEPRI, r3
 80194b0:	f3bf 8f6f 	isb	sy
 80194b4:	f3bf 8f4f 	dsb	sy
 80194b8:	61bb      	str	r3, [r7, #24]
}
 80194ba:	bf00      	nop
 80194bc:	e7fe      	b.n	80194bc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80194be:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80194c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d01e      	beq.n	8019504 <xTaskCreateStatic+0xac>
 80194c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d01b      	beq.n	8019504 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80194cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80194ce:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80194d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80194d4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80194d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194d8:	2202      	movs	r2, #2
 80194da:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80194de:	2300      	movs	r3, #0
 80194e0:	9303      	str	r3, [sp, #12]
 80194e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194e4:	9302      	str	r3, [sp, #8]
 80194e6:	f107 0314 	add.w	r3, r7, #20
 80194ea:	9301      	str	r3, [sp, #4]
 80194ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194ee:	9300      	str	r3, [sp, #0]
 80194f0:	683b      	ldr	r3, [r7, #0]
 80194f2:	687a      	ldr	r2, [r7, #4]
 80194f4:	68b9      	ldr	r1, [r7, #8]
 80194f6:	68f8      	ldr	r0, [r7, #12]
 80194f8:	f000 f850 	bl	801959c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80194fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80194fe:	f000 f8f7 	bl	80196f0 <prvAddNewTaskToReadyList>
 8019502:	e001      	b.n	8019508 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8019504:	2300      	movs	r3, #0
 8019506:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8019508:	697b      	ldr	r3, [r7, #20]
	}
 801950a:	4618      	mov	r0, r3
 801950c:	3728      	adds	r7, #40	; 0x28
 801950e:	46bd      	mov	sp, r7
 8019510:	bd80      	pop	{r7, pc}

08019512 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8019512:	b580      	push	{r7, lr}
 8019514:	b08c      	sub	sp, #48	; 0x30
 8019516:	af04      	add	r7, sp, #16
 8019518:	60f8      	str	r0, [r7, #12]
 801951a:	60b9      	str	r1, [r7, #8]
 801951c:	603b      	str	r3, [r7, #0]
 801951e:	4613      	mov	r3, r2
 8019520:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8019522:	88fb      	ldrh	r3, [r7, #6]
 8019524:	009b      	lsls	r3, r3, #2
 8019526:	4618      	mov	r0, r3
 8019528:	f001 ff06 	bl	801b338 <pvPortMalloc>
 801952c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801952e:	697b      	ldr	r3, [r7, #20]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d00e      	beq.n	8019552 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8019534:	20c0      	movs	r0, #192	; 0xc0
 8019536:	f001 feff 	bl	801b338 <pvPortMalloc>
 801953a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801953c:	69fb      	ldr	r3, [r7, #28]
 801953e:	2b00      	cmp	r3, #0
 8019540:	d003      	beq.n	801954a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8019542:	69fb      	ldr	r3, [r7, #28]
 8019544:	697a      	ldr	r2, [r7, #20]
 8019546:	631a      	str	r2, [r3, #48]	; 0x30
 8019548:	e005      	b.n	8019556 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801954a:	6978      	ldr	r0, [r7, #20]
 801954c:	f001 ffc4 	bl	801b4d8 <vPortFree>
 8019550:	e001      	b.n	8019556 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8019552:	2300      	movs	r3, #0
 8019554:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8019556:	69fb      	ldr	r3, [r7, #28]
 8019558:	2b00      	cmp	r3, #0
 801955a:	d017      	beq.n	801958c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801955c:	69fb      	ldr	r3, [r7, #28]
 801955e:	2200      	movs	r2, #0
 8019560:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019564:	88fa      	ldrh	r2, [r7, #6]
 8019566:	2300      	movs	r3, #0
 8019568:	9303      	str	r3, [sp, #12]
 801956a:	69fb      	ldr	r3, [r7, #28]
 801956c:	9302      	str	r3, [sp, #8]
 801956e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019570:	9301      	str	r3, [sp, #4]
 8019572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019574:	9300      	str	r3, [sp, #0]
 8019576:	683b      	ldr	r3, [r7, #0]
 8019578:	68b9      	ldr	r1, [r7, #8]
 801957a:	68f8      	ldr	r0, [r7, #12]
 801957c:	f000 f80e 	bl	801959c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019580:	69f8      	ldr	r0, [r7, #28]
 8019582:	f000 f8b5 	bl	80196f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019586:	2301      	movs	r3, #1
 8019588:	61bb      	str	r3, [r7, #24]
 801958a:	e002      	b.n	8019592 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801958c:	f04f 33ff 	mov.w	r3, #4294967295
 8019590:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019592:	69bb      	ldr	r3, [r7, #24]
	}
 8019594:	4618      	mov	r0, r3
 8019596:	3720      	adds	r7, #32
 8019598:	46bd      	mov	sp, r7
 801959a:	bd80      	pop	{r7, pc}

0801959c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801959c:	b580      	push	{r7, lr}
 801959e:	b088      	sub	sp, #32
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	60f8      	str	r0, [r7, #12]
 80195a4:	60b9      	str	r1, [r7, #8]
 80195a6:	607a      	str	r2, [r7, #4]
 80195a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80195aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195ac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80195ae:	687b      	ldr	r3, [r7, #4]
 80195b0:	009b      	lsls	r3, r3, #2
 80195b2:	461a      	mov	r2, r3
 80195b4:	21a5      	movs	r1, #165	; 0xa5
 80195b6:	f002 fd9d 	bl	801c0f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80195ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80195c4:	3b01      	subs	r3, #1
 80195c6:	009b      	lsls	r3, r3, #2
 80195c8:	4413      	add	r3, r2
 80195ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80195cc:	69bb      	ldr	r3, [r7, #24]
 80195ce:	f023 0307 	bic.w	r3, r3, #7
 80195d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80195d4:	69bb      	ldr	r3, [r7, #24]
 80195d6:	f003 0307 	and.w	r3, r3, #7
 80195da:	2b00      	cmp	r3, #0
 80195dc:	d00a      	beq.n	80195f4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80195de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195e2:	f383 8811 	msr	BASEPRI, r3
 80195e6:	f3bf 8f6f 	isb	sy
 80195ea:	f3bf 8f4f 	dsb	sy
 80195ee:	617b      	str	r3, [r7, #20]
}
 80195f0:	bf00      	nop
 80195f2:	e7fe      	b.n	80195f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80195f4:	68bb      	ldr	r3, [r7, #8]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d01f      	beq.n	801963a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80195fa:	2300      	movs	r3, #0
 80195fc:	61fb      	str	r3, [r7, #28]
 80195fe:	e012      	b.n	8019626 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8019600:	68ba      	ldr	r2, [r7, #8]
 8019602:	69fb      	ldr	r3, [r7, #28]
 8019604:	4413      	add	r3, r2
 8019606:	7819      	ldrb	r1, [r3, #0]
 8019608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801960a:	69fb      	ldr	r3, [r7, #28]
 801960c:	4413      	add	r3, r2
 801960e:	3334      	adds	r3, #52	; 0x34
 8019610:	460a      	mov	r2, r1
 8019612:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8019614:	68ba      	ldr	r2, [r7, #8]
 8019616:	69fb      	ldr	r3, [r7, #28]
 8019618:	4413      	add	r3, r2
 801961a:	781b      	ldrb	r3, [r3, #0]
 801961c:	2b00      	cmp	r3, #0
 801961e:	d006      	beq.n	801962e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8019620:	69fb      	ldr	r3, [r7, #28]
 8019622:	3301      	adds	r3, #1
 8019624:	61fb      	str	r3, [r7, #28]
 8019626:	69fb      	ldr	r3, [r7, #28]
 8019628:	2b0f      	cmp	r3, #15
 801962a:	d9e9      	bls.n	8019600 <prvInitialiseNewTask+0x64>
 801962c:	e000      	b.n	8019630 <prvInitialiseNewTask+0x94>
			{
				break;
 801962e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8019630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019632:	2200      	movs	r2, #0
 8019634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8019638:	e003      	b.n	8019642 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801963a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801963c:	2200      	movs	r2, #0
 801963e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8019642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019644:	2b37      	cmp	r3, #55	; 0x37
 8019646:	d901      	bls.n	801964c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8019648:	2337      	movs	r3, #55	; 0x37
 801964a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801964c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801964e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019650:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8019652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019656:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8019658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801965a:	2200      	movs	r2, #0
 801965c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801965e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019660:	3304      	adds	r3, #4
 8019662:	4618      	mov	r0, r3
 8019664:	f7fe f9de 	bl	8017a24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801966a:	3318      	adds	r3, #24
 801966c:	4618      	mov	r0, r3
 801966e:	f7fe f9d9 	bl	8017a24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019676:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801967a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801967e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019680:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019686:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8019688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801968a:	2200      	movs	r2, #0
 801968c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801968e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019690:	2200      	movs	r2, #0
 8019692:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019698:	2200      	movs	r2, #0
 801969a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801969e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196a0:	3358      	adds	r3, #88	; 0x58
 80196a2:	2260      	movs	r2, #96	; 0x60
 80196a4:	2100      	movs	r1, #0
 80196a6:	4618      	mov	r0, r3
 80196a8:	f002 fd24 	bl	801c0f4 <memset>
 80196ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196ae:	4a0d      	ldr	r2, [pc, #52]	; (80196e4 <prvInitialiseNewTask+0x148>)
 80196b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80196b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196b4:	4a0c      	ldr	r2, [pc, #48]	; (80196e8 <prvInitialiseNewTask+0x14c>)
 80196b6:	661a      	str	r2, [r3, #96]	; 0x60
 80196b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196ba:	4a0c      	ldr	r2, [pc, #48]	; (80196ec <prvInitialiseNewTask+0x150>)
 80196bc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80196be:	683a      	ldr	r2, [r7, #0]
 80196c0:	68f9      	ldr	r1, [r7, #12]
 80196c2:	69b8      	ldr	r0, [r7, #24]
 80196c4:	f001 fbe8 	bl	801ae98 <pxPortInitialiseStack>
 80196c8:	4602      	mov	r2, r0
 80196ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80196ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d002      	beq.n	80196da <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80196d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80196d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80196da:	bf00      	nop
 80196dc:	3720      	adds	r7, #32
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}
 80196e2:	bf00      	nop
 80196e4:	0801f678 	.word	0x0801f678
 80196e8:	0801f698 	.word	0x0801f698
 80196ec:	0801f658 	.word	0x0801f658

080196f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b082      	sub	sp, #8
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80196f8:	f001 fcfc 	bl	801b0f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80196fc:	4b2d      	ldr	r3, [pc, #180]	; (80197b4 <prvAddNewTaskToReadyList+0xc4>)
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	3301      	adds	r3, #1
 8019702:	4a2c      	ldr	r2, [pc, #176]	; (80197b4 <prvAddNewTaskToReadyList+0xc4>)
 8019704:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019706:	4b2c      	ldr	r3, [pc, #176]	; (80197b8 <prvAddNewTaskToReadyList+0xc8>)
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d109      	bne.n	8019722 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801970e:	4a2a      	ldr	r2, [pc, #168]	; (80197b8 <prvAddNewTaskToReadyList+0xc8>)
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019714:	4b27      	ldr	r3, [pc, #156]	; (80197b4 <prvAddNewTaskToReadyList+0xc4>)
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	2b01      	cmp	r3, #1
 801971a:	d110      	bne.n	801973e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801971c:	f000 fc7a 	bl	801a014 <prvInitialiseTaskLists>
 8019720:	e00d      	b.n	801973e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8019722:	4b26      	ldr	r3, [pc, #152]	; (80197bc <prvAddNewTaskToReadyList+0xcc>)
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	2b00      	cmp	r3, #0
 8019728:	d109      	bne.n	801973e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801972a:	4b23      	ldr	r3, [pc, #140]	; (80197b8 <prvAddNewTaskToReadyList+0xc8>)
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019734:	429a      	cmp	r2, r3
 8019736:	d802      	bhi.n	801973e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8019738:	4a1f      	ldr	r2, [pc, #124]	; (80197b8 <prvAddNewTaskToReadyList+0xc8>)
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801973e:	4b20      	ldr	r3, [pc, #128]	; (80197c0 <prvAddNewTaskToReadyList+0xd0>)
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	3301      	adds	r3, #1
 8019744:	4a1e      	ldr	r2, [pc, #120]	; (80197c0 <prvAddNewTaskToReadyList+0xd0>)
 8019746:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8019748:	4b1d      	ldr	r3, [pc, #116]	; (80197c0 <prvAddNewTaskToReadyList+0xd0>)
 801974a:	681a      	ldr	r2, [r3, #0]
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019754:	4b1b      	ldr	r3, [pc, #108]	; (80197c4 <prvAddNewTaskToReadyList+0xd4>)
 8019756:	681b      	ldr	r3, [r3, #0]
 8019758:	429a      	cmp	r2, r3
 801975a:	d903      	bls.n	8019764 <prvAddNewTaskToReadyList+0x74>
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019760:	4a18      	ldr	r2, [pc, #96]	; (80197c4 <prvAddNewTaskToReadyList+0xd4>)
 8019762:	6013      	str	r3, [r2, #0]
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019768:	4613      	mov	r3, r2
 801976a:	009b      	lsls	r3, r3, #2
 801976c:	4413      	add	r3, r2
 801976e:	009b      	lsls	r3, r3, #2
 8019770:	4a15      	ldr	r2, [pc, #84]	; (80197c8 <prvAddNewTaskToReadyList+0xd8>)
 8019772:	441a      	add	r2, r3
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	3304      	adds	r3, #4
 8019778:	4619      	mov	r1, r3
 801977a:	4610      	mov	r0, r2
 801977c:	f7fe f95f 	bl	8017a3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8019780:	f001 fce8 	bl	801b154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8019784:	4b0d      	ldr	r3, [pc, #52]	; (80197bc <prvAddNewTaskToReadyList+0xcc>)
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	2b00      	cmp	r3, #0
 801978a:	d00e      	beq.n	80197aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801978c:	4b0a      	ldr	r3, [pc, #40]	; (80197b8 <prvAddNewTaskToReadyList+0xc8>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019796:	429a      	cmp	r2, r3
 8019798:	d207      	bcs.n	80197aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801979a:	4b0c      	ldr	r3, [pc, #48]	; (80197cc <prvAddNewTaskToReadyList+0xdc>)
 801979c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80197a0:	601a      	str	r2, [r3, #0]
 80197a2:	f3bf 8f4f 	dsb	sy
 80197a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80197aa:	bf00      	nop
 80197ac:	3708      	adds	r7, #8
 80197ae:	46bd      	mov	sp, r7
 80197b0:	bd80      	pop	{r7, pc}
 80197b2:	bf00      	nop
 80197b4:	20002460 	.word	0x20002460
 80197b8:	20001f8c 	.word	0x20001f8c
 80197bc:	2000246c 	.word	0x2000246c
 80197c0:	2000247c 	.word	0x2000247c
 80197c4:	20002468 	.word	0x20002468
 80197c8:	20001f90 	.word	0x20001f90
 80197cc:	e000ed04 	.word	0xe000ed04

080197d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b084      	sub	sp, #16
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80197d8:	2300      	movs	r3, #0
 80197da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d017      	beq.n	8019812 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80197e2:	4b13      	ldr	r3, [pc, #76]	; (8019830 <vTaskDelay+0x60>)
 80197e4:	681b      	ldr	r3, [r3, #0]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d00a      	beq.n	8019800 <vTaskDelay+0x30>
	__asm volatile
 80197ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197ee:	f383 8811 	msr	BASEPRI, r3
 80197f2:	f3bf 8f6f 	isb	sy
 80197f6:	f3bf 8f4f 	dsb	sy
 80197fa:	60bb      	str	r3, [r7, #8]
}
 80197fc:	bf00      	nop
 80197fe:	e7fe      	b.n	80197fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8019800:	f000 f88c 	bl	801991c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019804:	2100      	movs	r1, #0
 8019806:	6878      	ldr	r0, [r7, #4]
 8019808:	f000 ffa4 	bl	801a754 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801980c:	f000 f894 	bl	8019938 <xTaskResumeAll>
 8019810:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	2b00      	cmp	r3, #0
 8019816:	d107      	bne.n	8019828 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8019818:	4b06      	ldr	r3, [pc, #24]	; (8019834 <vTaskDelay+0x64>)
 801981a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801981e:	601a      	str	r2, [r3, #0]
 8019820:	f3bf 8f4f 	dsb	sy
 8019824:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019828:	bf00      	nop
 801982a:	3710      	adds	r7, #16
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}
 8019830:	20002488 	.word	0x20002488
 8019834:	e000ed04 	.word	0xe000ed04

08019838 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b08a      	sub	sp, #40	; 0x28
 801983c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801983e:	2300      	movs	r3, #0
 8019840:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019842:	2300      	movs	r3, #0
 8019844:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019846:	463a      	mov	r2, r7
 8019848:	1d39      	adds	r1, r7, #4
 801984a:	f107 0308 	add.w	r3, r7, #8
 801984e:	4618      	mov	r0, r3
 8019850:	f7fe f894 	bl	801797c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019854:	6839      	ldr	r1, [r7, #0]
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	68ba      	ldr	r2, [r7, #8]
 801985a:	9202      	str	r2, [sp, #8]
 801985c:	9301      	str	r3, [sp, #4]
 801985e:	2300      	movs	r3, #0
 8019860:	9300      	str	r3, [sp, #0]
 8019862:	2300      	movs	r3, #0
 8019864:	460a      	mov	r2, r1
 8019866:	4925      	ldr	r1, [pc, #148]	; (80198fc <vTaskStartScheduler+0xc4>)
 8019868:	4825      	ldr	r0, [pc, #148]	; (8019900 <vTaskStartScheduler+0xc8>)
 801986a:	f7ff fdf5 	bl	8019458 <xTaskCreateStatic>
 801986e:	4603      	mov	r3, r0
 8019870:	4a24      	ldr	r2, [pc, #144]	; (8019904 <vTaskStartScheduler+0xcc>)
 8019872:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019874:	4b23      	ldr	r3, [pc, #140]	; (8019904 <vTaskStartScheduler+0xcc>)
 8019876:	681b      	ldr	r3, [r3, #0]
 8019878:	2b00      	cmp	r3, #0
 801987a:	d002      	beq.n	8019882 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801987c:	2301      	movs	r3, #1
 801987e:	617b      	str	r3, [r7, #20]
 8019880:	e001      	b.n	8019886 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019882:	2300      	movs	r3, #0
 8019884:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8019886:	697b      	ldr	r3, [r7, #20]
 8019888:	2b01      	cmp	r3, #1
 801988a:	d102      	bne.n	8019892 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801988c:	f000 ffb6 	bl	801a7fc <xTimerCreateTimerTask>
 8019890:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019892:	697b      	ldr	r3, [r7, #20]
 8019894:	2b01      	cmp	r3, #1
 8019896:	d11d      	bne.n	80198d4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8019898:	f04f 0350 	mov.w	r3, #80	; 0x50
 801989c:	f383 8811 	msr	BASEPRI, r3
 80198a0:	f3bf 8f6f 	isb	sy
 80198a4:	f3bf 8f4f 	dsb	sy
 80198a8:	613b      	str	r3, [r7, #16]
}
 80198aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80198ac:	4b16      	ldr	r3, [pc, #88]	; (8019908 <vTaskStartScheduler+0xd0>)
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	3358      	adds	r3, #88	; 0x58
 80198b2:	4a16      	ldr	r2, [pc, #88]	; (801990c <vTaskStartScheduler+0xd4>)
 80198b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80198b6:	4b16      	ldr	r3, [pc, #88]	; (8019910 <vTaskStartScheduler+0xd8>)
 80198b8:	f04f 32ff 	mov.w	r2, #4294967295
 80198bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80198be:	4b15      	ldr	r3, [pc, #84]	; (8019914 <vTaskStartScheduler+0xdc>)
 80198c0:	2201      	movs	r2, #1
 80198c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80198c4:	4b14      	ldr	r3, [pc, #80]	; (8019918 <vTaskStartScheduler+0xe0>)
 80198c6:	2200      	movs	r2, #0
 80198c8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80198ca:	f7f5 fc45 	bl	800f158 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80198ce:	f001 fb6f 	bl	801afb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80198d2:	e00e      	b.n	80198f2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80198d4:	697b      	ldr	r3, [r7, #20]
 80198d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198da:	d10a      	bne.n	80198f2 <vTaskStartScheduler+0xba>
	__asm volatile
 80198dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198e0:	f383 8811 	msr	BASEPRI, r3
 80198e4:	f3bf 8f6f 	isb	sy
 80198e8:	f3bf 8f4f 	dsb	sy
 80198ec:	60fb      	str	r3, [r7, #12]
}
 80198ee:	bf00      	nop
 80198f0:	e7fe      	b.n	80198f0 <vTaskStartScheduler+0xb8>
}
 80198f2:	bf00      	nop
 80198f4:	3718      	adds	r7, #24
 80198f6:	46bd      	mov	sp, r7
 80198f8:	bd80      	pop	{r7, pc}
 80198fa:	bf00      	nop
 80198fc:	0801f0c8 	.word	0x0801f0c8
 8019900:	08019fe5 	.word	0x08019fe5
 8019904:	20002484 	.word	0x20002484
 8019908:	20001f8c 	.word	0x20001f8c
 801990c:	20000030 	.word	0x20000030
 8019910:	20002480 	.word	0x20002480
 8019914:	2000246c 	.word	0x2000246c
 8019918:	20002464 	.word	0x20002464

0801991c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801991c:	b480      	push	{r7}
 801991e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8019920:	4b04      	ldr	r3, [pc, #16]	; (8019934 <vTaskSuspendAll+0x18>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	3301      	adds	r3, #1
 8019926:	4a03      	ldr	r2, [pc, #12]	; (8019934 <vTaskSuspendAll+0x18>)
 8019928:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801992a:	bf00      	nop
 801992c:	46bd      	mov	sp, r7
 801992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019932:	4770      	bx	lr
 8019934:	20002488 	.word	0x20002488

08019938 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019938:	b580      	push	{r7, lr}
 801993a:	b084      	sub	sp, #16
 801993c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801993e:	2300      	movs	r3, #0
 8019940:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019942:	2300      	movs	r3, #0
 8019944:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019946:	4b42      	ldr	r3, [pc, #264]	; (8019a50 <xTaskResumeAll+0x118>)
 8019948:	681b      	ldr	r3, [r3, #0]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d10a      	bne.n	8019964 <xTaskResumeAll+0x2c>
	__asm volatile
 801994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019952:	f383 8811 	msr	BASEPRI, r3
 8019956:	f3bf 8f6f 	isb	sy
 801995a:	f3bf 8f4f 	dsb	sy
 801995e:	603b      	str	r3, [r7, #0]
}
 8019960:	bf00      	nop
 8019962:	e7fe      	b.n	8019962 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019964:	f001 fbc6 	bl	801b0f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019968:	4b39      	ldr	r3, [pc, #228]	; (8019a50 <xTaskResumeAll+0x118>)
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	3b01      	subs	r3, #1
 801996e:	4a38      	ldr	r2, [pc, #224]	; (8019a50 <xTaskResumeAll+0x118>)
 8019970:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019972:	4b37      	ldr	r3, [pc, #220]	; (8019a50 <xTaskResumeAll+0x118>)
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d162      	bne.n	8019a40 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801997a:	4b36      	ldr	r3, [pc, #216]	; (8019a54 <xTaskResumeAll+0x11c>)
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d05e      	beq.n	8019a40 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019982:	e02f      	b.n	80199e4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019984:	4b34      	ldr	r3, [pc, #208]	; (8019a58 <xTaskResumeAll+0x120>)
 8019986:	68db      	ldr	r3, [r3, #12]
 8019988:	68db      	ldr	r3, [r3, #12]
 801998a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	3318      	adds	r3, #24
 8019990:	4618      	mov	r0, r3
 8019992:	f7fe f8b1 	bl	8017af8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	3304      	adds	r3, #4
 801999a:	4618      	mov	r0, r3
 801999c:	f7fe f8ac 	bl	8017af8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80199a0:	68fb      	ldr	r3, [r7, #12]
 80199a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80199a4:	4b2d      	ldr	r3, [pc, #180]	; (8019a5c <xTaskResumeAll+0x124>)
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	429a      	cmp	r2, r3
 80199aa:	d903      	bls.n	80199b4 <xTaskResumeAll+0x7c>
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199b0:	4a2a      	ldr	r2, [pc, #168]	; (8019a5c <xTaskResumeAll+0x124>)
 80199b2:	6013      	str	r3, [r2, #0]
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80199b8:	4613      	mov	r3, r2
 80199ba:	009b      	lsls	r3, r3, #2
 80199bc:	4413      	add	r3, r2
 80199be:	009b      	lsls	r3, r3, #2
 80199c0:	4a27      	ldr	r2, [pc, #156]	; (8019a60 <xTaskResumeAll+0x128>)
 80199c2:	441a      	add	r2, r3
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	3304      	adds	r3, #4
 80199c8:	4619      	mov	r1, r3
 80199ca:	4610      	mov	r0, r2
 80199cc:	f7fe f837 	bl	8017a3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80199d0:	68fb      	ldr	r3, [r7, #12]
 80199d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80199d4:	4b23      	ldr	r3, [pc, #140]	; (8019a64 <xTaskResumeAll+0x12c>)
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199da:	429a      	cmp	r2, r3
 80199dc:	d302      	bcc.n	80199e4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80199de:	4b22      	ldr	r3, [pc, #136]	; (8019a68 <xTaskResumeAll+0x130>)
 80199e0:	2201      	movs	r2, #1
 80199e2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80199e4:	4b1c      	ldr	r3, [pc, #112]	; (8019a58 <xTaskResumeAll+0x120>)
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d1cb      	bne.n	8019984 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80199ec:	68fb      	ldr	r3, [r7, #12]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d001      	beq.n	80199f6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80199f2:	f000 fbb1 	bl	801a158 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80199f6:	4b1d      	ldr	r3, [pc, #116]	; (8019a6c <xTaskResumeAll+0x134>)
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d010      	beq.n	8019a24 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019a02:	f000 f847 	bl	8019a94 <xTaskIncrementTick>
 8019a06:	4603      	mov	r3, r0
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d002      	beq.n	8019a12 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8019a0c:	4b16      	ldr	r3, [pc, #88]	; (8019a68 <xTaskResumeAll+0x130>)
 8019a0e:	2201      	movs	r2, #1
 8019a10:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	3b01      	subs	r3, #1
 8019a16:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d1f1      	bne.n	8019a02 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8019a1e:	4b13      	ldr	r3, [pc, #76]	; (8019a6c <xTaskResumeAll+0x134>)
 8019a20:	2200      	movs	r2, #0
 8019a22:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019a24:	4b10      	ldr	r3, [pc, #64]	; (8019a68 <xTaskResumeAll+0x130>)
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d009      	beq.n	8019a40 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019a2c:	2301      	movs	r3, #1
 8019a2e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019a30:	4b0f      	ldr	r3, [pc, #60]	; (8019a70 <xTaskResumeAll+0x138>)
 8019a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a36:	601a      	str	r2, [r3, #0]
 8019a38:	f3bf 8f4f 	dsb	sy
 8019a3c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019a40:	f001 fb88 	bl	801b154 <vPortExitCritical>

	return xAlreadyYielded;
 8019a44:	68bb      	ldr	r3, [r7, #8]
}
 8019a46:	4618      	mov	r0, r3
 8019a48:	3710      	adds	r7, #16
 8019a4a:	46bd      	mov	sp, r7
 8019a4c:	bd80      	pop	{r7, pc}
 8019a4e:	bf00      	nop
 8019a50:	20002488 	.word	0x20002488
 8019a54:	20002460 	.word	0x20002460
 8019a58:	20002420 	.word	0x20002420
 8019a5c:	20002468 	.word	0x20002468
 8019a60:	20001f90 	.word	0x20001f90
 8019a64:	20001f8c 	.word	0x20001f8c
 8019a68:	20002474 	.word	0x20002474
 8019a6c:	20002470 	.word	0x20002470
 8019a70:	e000ed04 	.word	0xe000ed04

08019a74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019a74:	b480      	push	{r7}
 8019a76:	b083      	sub	sp, #12
 8019a78:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019a7a:	4b05      	ldr	r3, [pc, #20]	; (8019a90 <xTaskGetTickCount+0x1c>)
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8019a80:	687b      	ldr	r3, [r7, #4]
}
 8019a82:	4618      	mov	r0, r3
 8019a84:	370c      	adds	r7, #12
 8019a86:	46bd      	mov	sp, r7
 8019a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a8c:	4770      	bx	lr
 8019a8e:	bf00      	nop
 8019a90:	20002464 	.word	0x20002464

08019a94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019a94:	b580      	push	{r7, lr}
 8019a96:	b086      	sub	sp, #24
 8019a98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019a9a:	2300      	movs	r3, #0
 8019a9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019a9e:	4b4f      	ldr	r3, [pc, #316]	; (8019bdc <xTaskIncrementTick+0x148>)
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	2b00      	cmp	r3, #0
 8019aa4:	f040 808f 	bne.w	8019bc6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019aa8:	4b4d      	ldr	r3, [pc, #308]	; (8019be0 <xTaskIncrementTick+0x14c>)
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	3301      	adds	r3, #1
 8019aae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019ab0:	4a4b      	ldr	r2, [pc, #300]	; (8019be0 <xTaskIncrementTick+0x14c>)
 8019ab2:	693b      	ldr	r3, [r7, #16]
 8019ab4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019ab6:	693b      	ldr	r3, [r7, #16]
 8019ab8:	2b00      	cmp	r3, #0
 8019aba:	d120      	bne.n	8019afe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8019abc:	4b49      	ldr	r3, [pc, #292]	; (8019be4 <xTaskIncrementTick+0x150>)
 8019abe:	681b      	ldr	r3, [r3, #0]
 8019ac0:	681b      	ldr	r3, [r3, #0]
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	d00a      	beq.n	8019adc <xTaskIncrementTick+0x48>
	__asm volatile
 8019ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019aca:	f383 8811 	msr	BASEPRI, r3
 8019ace:	f3bf 8f6f 	isb	sy
 8019ad2:	f3bf 8f4f 	dsb	sy
 8019ad6:	603b      	str	r3, [r7, #0]
}
 8019ad8:	bf00      	nop
 8019ada:	e7fe      	b.n	8019ada <xTaskIncrementTick+0x46>
 8019adc:	4b41      	ldr	r3, [pc, #260]	; (8019be4 <xTaskIncrementTick+0x150>)
 8019ade:	681b      	ldr	r3, [r3, #0]
 8019ae0:	60fb      	str	r3, [r7, #12]
 8019ae2:	4b41      	ldr	r3, [pc, #260]	; (8019be8 <xTaskIncrementTick+0x154>)
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	4a3f      	ldr	r2, [pc, #252]	; (8019be4 <xTaskIncrementTick+0x150>)
 8019ae8:	6013      	str	r3, [r2, #0]
 8019aea:	4a3f      	ldr	r2, [pc, #252]	; (8019be8 <xTaskIncrementTick+0x154>)
 8019aec:	68fb      	ldr	r3, [r7, #12]
 8019aee:	6013      	str	r3, [r2, #0]
 8019af0:	4b3e      	ldr	r3, [pc, #248]	; (8019bec <xTaskIncrementTick+0x158>)
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	3301      	adds	r3, #1
 8019af6:	4a3d      	ldr	r2, [pc, #244]	; (8019bec <xTaskIncrementTick+0x158>)
 8019af8:	6013      	str	r3, [r2, #0]
 8019afa:	f000 fb2d 	bl	801a158 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019afe:	4b3c      	ldr	r3, [pc, #240]	; (8019bf0 <xTaskIncrementTick+0x15c>)
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	693a      	ldr	r2, [r7, #16]
 8019b04:	429a      	cmp	r2, r3
 8019b06:	d349      	bcc.n	8019b9c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019b08:	4b36      	ldr	r3, [pc, #216]	; (8019be4 <xTaskIncrementTick+0x150>)
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	2b00      	cmp	r3, #0
 8019b10:	d104      	bne.n	8019b1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019b12:	4b37      	ldr	r3, [pc, #220]	; (8019bf0 <xTaskIncrementTick+0x15c>)
 8019b14:	f04f 32ff 	mov.w	r2, #4294967295
 8019b18:	601a      	str	r2, [r3, #0]
					break;
 8019b1a:	e03f      	b.n	8019b9c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019b1c:	4b31      	ldr	r3, [pc, #196]	; (8019be4 <xTaskIncrementTick+0x150>)
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	68db      	ldr	r3, [r3, #12]
 8019b22:	68db      	ldr	r3, [r3, #12]
 8019b24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019b26:	68bb      	ldr	r3, [r7, #8]
 8019b28:	685b      	ldr	r3, [r3, #4]
 8019b2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019b2c:	693a      	ldr	r2, [r7, #16]
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	429a      	cmp	r2, r3
 8019b32:	d203      	bcs.n	8019b3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019b34:	4a2e      	ldr	r2, [pc, #184]	; (8019bf0 <xTaskIncrementTick+0x15c>)
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019b3a:	e02f      	b.n	8019b9c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019b3c:	68bb      	ldr	r3, [r7, #8]
 8019b3e:	3304      	adds	r3, #4
 8019b40:	4618      	mov	r0, r3
 8019b42:	f7fd ffd9 	bl	8017af8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019b46:	68bb      	ldr	r3, [r7, #8]
 8019b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d004      	beq.n	8019b58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019b4e:	68bb      	ldr	r3, [r7, #8]
 8019b50:	3318      	adds	r3, #24
 8019b52:	4618      	mov	r0, r3
 8019b54:	f7fd ffd0 	bl	8017af8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019b58:	68bb      	ldr	r3, [r7, #8]
 8019b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b5c:	4b25      	ldr	r3, [pc, #148]	; (8019bf4 <xTaskIncrementTick+0x160>)
 8019b5e:	681b      	ldr	r3, [r3, #0]
 8019b60:	429a      	cmp	r2, r3
 8019b62:	d903      	bls.n	8019b6c <xTaskIncrementTick+0xd8>
 8019b64:	68bb      	ldr	r3, [r7, #8]
 8019b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b68:	4a22      	ldr	r2, [pc, #136]	; (8019bf4 <xTaskIncrementTick+0x160>)
 8019b6a:	6013      	str	r3, [r2, #0]
 8019b6c:	68bb      	ldr	r3, [r7, #8]
 8019b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b70:	4613      	mov	r3, r2
 8019b72:	009b      	lsls	r3, r3, #2
 8019b74:	4413      	add	r3, r2
 8019b76:	009b      	lsls	r3, r3, #2
 8019b78:	4a1f      	ldr	r2, [pc, #124]	; (8019bf8 <xTaskIncrementTick+0x164>)
 8019b7a:	441a      	add	r2, r3
 8019b7c:	68bb      	ldr	r3, [r7, #8]
 8019b7e:	3304      	adds	r3, #4
 8019b80:	4619      	mov	r1, r3
 8019b82:	4610      	mov	r0, r2
 8019b84:	f7fd ff5b 	bl	8017a3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019b88:	68bb      	ldr	r3, [r7, #8]
 8019b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019b8c:	4b1b      	ldr	r3, [pc, #108]	; (8019bfc <xTaskIncrementTick+0x168>)
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019b92:	429a      	cmp	r2, r3
 8019b94:	d3b8      	bcc.n	8019b08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8019b96:	2301      	movs	r3, #1
 8019b98:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019b9a:	e7b5      	b.n	8019b08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019b9c:	4b17      	ldr	r3, [pc, #92]	; (8019bfc <xTaskIncrementTick+0x168>)
 8019b9e:	681b      	ldr	r3, [r3, #0]
 8019ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019ba2:	4915      	ldr	r1, [pc, #84]	; (8019bf8 <xTaskIncrementTick+0x164>)
 8019ba4:	4613      	mov	r3, r2
 8019ba6:	009b      	lsls	r3, r3, #2
 8019ba8:	4413      	add	r3, r2
 8019baa:	009b      	lsls	r3, r3, #2
 8019bac:	440b      	add	r3, r1
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	2b01      	cmp	r3, #1
 8019bb2:	d901      	bls.n	8019bb8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8019bb4:	2301      	movs	r3, #1
 8019bb6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8019bb8:	4b11      	ldr	r3, [pc, #68]	; (8019c00 <xTaskIncrementTick+0x16c>)
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d007      	beq.n	8019bd0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8019bc0:	2301      	movs	r3, #1
 8019bc2:	617b      	str	r3, [r7, #20]
 8019bc4:	e004      	b.n	8019bd0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8019bc6:	4b0f      	ldr	r3, [pc, #60]	; (8019c04 <xTaskIncrementTick+0x170>)
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	3301      	adds	r3, #1
 8019bcc:	4a0d      	ldr	r2, [pc, #52]	; (8019c04 <xTaskIncrementTick+0x170>)
 8019bce:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8019bd0:	697b      	ldr	r3, [r7, #20]
}
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	3718      	adds	r7, #24
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	bd80      	pop	{r7, pc}
 8019bda:	bf00      	nop
 8019bdc:	20002488 	.word	0x20002488
 8019be0:	20002464 	.word	0x20002464
 8019be4:	20002418 	.word	0x20002418
 8019be8:	2000241c 	.word	0x2000241c
 8019bec:	20002478 	.word	0x20002478
 8019bf0:	20002480 	.word	0x20002480
 8019bf4:	20002468 	.word	0x20002468
 8019bf8:	20001f90 	.word	0x20001f90
 8019bfc:	20001f8c 	.word	0x20001f8c
 8019c00:	20002474 	.word	0x20002474
 8019c04:	20002470 	.word	0x20002470

08019c08 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8019c08:	b580      	push	{r7, lr}
 8019c0a:	b084      	sub	sp, #16
 8019c0c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8019c0e:	4b3e      	ldr	r3, [pc, #248]	; (8019d08 <vTaskSwitchContext+0x100>)
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d003      	beq.n	8019c1e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8019c16:	4b3d      	ldr	r3, [pc, #244]	; (8019d0c <vTaskSwitchContext+0x104>)
 8019c18:	2201      	movs	r2, #1
 8019c1a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8019c1c:	e070      	b.n	8019d00 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 8019c1e:	4b3b      	ldr	r3, [pc, #236]	; (8019d0c <vTaskSwitchContext+0x104>)
 8019c20:	2200      	movs	r2, #0
 8019c22:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8019c24:	f7f5 fa9f 	bl	800f166 <getRunTimeCounterValue>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	4a39      	ldr	r2, [pc, #228]	; (8019d10 <vTaskSwitchContext+0x108>)
 8019c2c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8019c2e:	4b38      	ldr	r3, [pc, #224]	; (8019d10 <vTaskSwitchContext+0x108>)
 8019c30:	681a      	ldr	r2, [r3, #0]
 8019c32:	4b38      	ldr	r3, [pc, #224]	; (8019d14 <vTaskSwitchContext+0x10c>)
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	429a      	cmp	r2, r3
 8019c38:	d909      	bls.n	8019c4e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8019c3a:	4b37      	ldr	r3, [pc, #220]	; (8019d18 <vTaskSwitchContext+0x110>)
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8019c40:	4a33      	ldr	r2, [pc, #204]	; (8019d10 <vTaskSwitchContext+0x108>)
 8019c42:	6810      	ldr	r0, [r2, #0]
 8019c44:	4a33      	ldr	r2, [pc, #204]	; (8019d14 <vTaskSwitchContext+0x10c>)
 8019c46:	6812      	ldr	r2, [r2, #0]
 8019c48:	1a82      	subs	r2, r0, r2
 8019c4a:	440a      	add	r2, r1
 8019c4c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8019c4e:	4b30      	ldr	r3, [pc, #192]	; (8019d10 <vTaskSwitchContext+0x108>)
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	4a30      	ldr	r2, [pc, #192]	; (8019d14 <vTaskSwitchContext+0x10c>)
 8019c54:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8019c56:	4b30      	ldr	r3, [pc, #192]	; (8019d18 <vTaskSwitchContext+0x110>)
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	681a      	ldr	r2, [r3, #0]
 8019c5c:	4b2e      	ldr	r3, [pc, #184]	; (8019d18 <vTaskSwitchContext+0x110>)
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019c62:	429a      	cmp	r2, r3
 8019c64:	d808      	bhi.n	8019c78 <vTaskSwitchContext+0x70>
 8019c66:	4b2c      	ldr	r3, [pc, #176]	; (8019d18 <vTaskSwitchContext+0x110>)
 8019c68:	681a      	ldr	r2, [r3, #0]
 8019c6a:	4b2b      	ldr	r3, [pc, #172]	; (8019d18 <vTaskSwitchContext+0x110>)
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	3334      	adds	r3, #52	; 0x34
 8019c70:	4619      	mov	r1, r3
 8019c72:	4610      	mov	r0, r2
 8019c74:	f7f5 fa7f 	bl	800f176 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019c78:	4b28      	ldr	r3, [pc, #160]	; (8019d1c <vTaskSwitchContext+0x114>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	60fb      	str	r3, [r7, #12]
 8019c7e:	e010      	b.n	8019ca2 <vTaskSwitchContext+0x9a>
 8019c80:	68fb      	ldr	r3, [r7, #12]
 8019c82:	2b00      	cmp	r3, #0
 8019c84:	d10a      	bne.n	8019c9c <vTaskSwitchContext+0x94>
	__asm volatile
 8019c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c8a:	f383 8811 	msr	BASEPRI, r3
 8019c8e:	f3bf 8f6f 	isb	sy
 8019c92:	f3bf 8f4f 	dsb	sy
 8019c96:	607b      	str	r3, [r7, #4]
}
 8019c98:	bf00      	nop
 8019c9a:	e7fe      	b.n	8019c9a <vTaskSwitchContext+0x92>
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	3b01      	subs	r3, #1
 8019ca0:	60fb      	str	r3, [r7, #12]
 8019ca2:	491f      	ldr	r1, [pc, #124]	; (8019d20 <vTaskSwitchContext+0x118>)
 8019ca4:	68fa      	ldr	r2, [r7, #12]
 8019ca6:	4613      	mov	r3, r2
 8019ca8:	009b      	lsls	r3, r3, #2
 8019caa:	4413      	add	r3, r2
 8019cac:	009b      	lsls	r3, r3, #2
 8019cae:	440b      	add	r3, r1
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d0e4      	beq.n	8019c80 <vTaskSwitchContext+0x78>
 8019cb6:	68fa      	ldr	r2, [r7, #12]
 8019cb8:	4613      	mov	r3, r2
 8019cba:	009b      	lsls	r3, r3, #2
 8019cbc:	4413      	add	r3, r2
 8019cbe:	009b      	lsls	r3, r3, #2
 8019cc0:	4a17      	ldr	r2, [pc, #92]	; (8019d20 <vTaskSwitchContext+0x118>)
 8019cc2:	4413      	add	r3, r2
 8019cc4:	60bb      	str	r3, [r7, #8]
 8019cc6:	68bb      	ldr	r3, [r7, #8]
 8019cc8:	685b      	ldr	r3, [r3, #4]
 8019cca:	685a      	ldr	r2, [r3, #4]
 8019ccc:	68bb      	ldr	r3, [r7, #8]
 8019cce:	605a      	str	r2, [r3, #4]
 8019cd0:	68bb      	ldr	r3, [r7, #8]
 8019cd2:	685a      	ldr	r2, [r3, #4]
 8019cd4:	68bb      	ldr	r3, [r7, #8]
 8019cd6:	3308      	adds	r3, #8
 8019cd8:	429a      	cmp	r2, r3
 8019cda:	d104      	bne.n	8019ce6 <vTaskSwitchContext+0xde>
 8019cdc:	68bb      	ldr	r3, [r7, #8]
 8019cde:	685b      	ldr	r3, [r3, #4]
 8019ce0:	685a      	ldr	r2, [r3, #4]
 8019ce2:	68bb      	ldr	r3, [r7, #8]
 8019ce4:	605a      	str	r2, [r3, #4]
 8019ce6:	68bb      	ldr	r3, [r7, #8]
 8019ce8:	685b      	ldr	r3, [r3, #4]
 8019cea:	68db      	ldr	r3, [r3, #12]
 8019cec:	4a0a      	ldr	r2, [pc, #40]	; (8019d18 <vTaskSwitchContext+0x110>)
 8019cee:	6013      	str	r3, [r2, #0]
 8019cf0:	4a0a      	ldr	r2, [pc, #40]	; (8019d1c <vTaskSwitchContext+0x114>)
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8019cf6:	4b08      	ldr	r3, [pc, #32]	; (8019d18 <vTaskSwitchContext+0x110>)
 8019cf8:	681b      	ldr	r3, [r3, #0]
 8019cfa:	3358      	adds	r3, #88	; 0x58
 8019cfc:	4a09      	ldr	r2, [pc, #36]	; (8019d24 <vTaskSwitchContext+0x11c>)
 8019cfe:	6013      	str	r3, [r2, #0]
}
 8019d00:	bf00      	nop
 8019d02:	3710      	adds	r7, #16
 8019d04:	46bd      	mov	sp, r7
 8019d06:	bd80      	pop	{r7, pc}
 8019d08:	20002488 	.word	0x20002488
 8019d0c:	20002474 	.word	0x20002474
 8019d10:	20002490 	.word	0x20002490
 8019d14:	2000248c 	.word	0x2000248c
 8019d18:	20001f8c 	.word	0x20001f8c
 8019d1c:	20002468 	.word	0x20002468
 8019d20:	20001f90 	.word	0x20001f90
 8019d24:	20000030 	.word	0x20000030

08019d28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b084      	sub	sp, #16
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
 8019d30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8019d32:	687b      	ldr	r3, [r7, #4]
 8019d34:	2b00      	cmp	r3, #0
 8019d36:	d10a      	bne.n	8019d4e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8019d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d3c:	f383 8811 	msr	BASEPRI, r3
 8019d40:	f3bf 8f6f 	isb	sy
 8019d44:	f3bf 8f4f 	dsb	sy
 8019d48:	60fb      	str	r3, [r7, #12]
}
 8019d4a:	bf00      	nop
 8019d4c:	e7fe      	b.n	8019d4c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019d4e:	4b07      	ldr	r3, [pc, #28]	; (8019d6c <vTaskPlaceOnEventList+0x44>)
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	3318      	adds	r3, #24
 8019d54:	4619      	mov	r1, r3
 8019d56:	6878      	ldr	r0, [r7, #4]
 8019d58:	f7fd fe95 	bl	8017a86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8019d5c:	2101      	movs	r1, #1
 8019d5e:	6838      	ldr	r0, [r7, #0]
 8019d60:	f000 fcf8 	bl	801a754 <prvAddCurrentTaskToDelayedList>
}
 8019d64:	bf00      	nop
 8019d66:	3710      	adds	r7, #16
 8019d68:	46bd      	mov	sp, r7
 8019d6a:	bd80      	pop	{r7, pc}
 8019d6c:	20001f8c 	.word	0x20001f8c

08019d70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019d70:	b580      	push	{r7, lr}
 8019d72:	b086      	sub	sp, #24
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	60f8      	str	r0, [r7, #12]
 8019d78:	60b9      	str	r1, [r7, #8]
 8019d7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	2b00      	cmp	r3, #0
 8019d80:	d10a      	bne.n	8019d98 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8019d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d86:	f383 8811 	msr	BASEPRI, r3
 8019d8a:	f3bf 8f6f 	isb	sy
 8019d8e:	f3bf 8f4f 	dsb	sy
 8019d92:	617b      	str	r3, [r7, #20]
}
 8019d94:	bf00      	nop
 8019d96:	e7fe      	b.n	8019d96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8019d98:	4b0a      	ldr	r3, [pc, #40]	; (8019dc4 <vTaskPlaceOnEventListRestricted+0x54>)
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	3318      	adds	r3, #24
 8019d9e:	4619      	mov	r1, r3
 8019da0:	68f8      	ldr	r0, [r7, #12]
 8019da2:	f7fd fe4c 	bl	8017a3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	2b00      	cmp	r3, #0
 8019daa:	d002      	beq.n	8019db2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8019dac:	f04f 33ff 	mov.w	r3, #4294967295
 8019db0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8019db2:	6879      	ldr	r1, [r7, #4]
 8019db4:	68b8      	ldr	r0, [r7, #8]
 8019db6:	f000 fccd 	bl	801a754 <prvAddCurrentTaskToDelayedList>
	}
 8019dba:	bf00      	nop
 8019dbc:	3718      	adds	r7, #24
 8019dbe:	46bd      	mov	sp, r7
 8019dc0:	bd80      	pop	{r7, pc}
 8019dc2:	bf00      	nop
 8019dc4:	20001f8c 	.word	0x20001f8c

08019dc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b086      	sub	sp, #24
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	68db      	ldr	r3, [r3, #12]
 8019dd4:	68db      	ldr	r3, [r3, #12]
 8019dd6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8019dd8:	693b      	ldr	r3, [r7, #16]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d10a      	bne.n	8019df4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8019dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019de2:	f383 8811 	msr	BASEPRI, r3
 8019de6:	f3bf 8f6f 	isb	sy
 8019dea:	f3bf 8f4f 	dsb	sy
 8019dee:	60fb      	str	r3, [r7, #12]
}
 8019df0:	bf00      	nop
 8019df2:	e7fe      	b.n	8019df2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8019df4:	693b      	ldr	r3, [r7, #16]
 8019df6:	3318      	adds	r3, #24
 8019df8:	4618      	mov	r0, r3
 8019dfa:	f7fd fe7d 	bl	8017af8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019dfe:	4b1e      	ldr	r3, [pc, #120]	; (8019e78 <xTaskRemoveFromEventList+0xb0>)
 8019e00:	681b      	ldr	r3, [r3, #0]
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d11d      	bne.n	8019e42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8019e06:	693b      	ldr	r3, [r7, #16]
 8019e08:	3304      	adds	r3, #4
 8019e0a:	4618      	mov	r0, r3
 8019e0c:	f7fd fe74 	bl	8017af8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8019e10:	693b      	ldr	r3, [r7, #16]
 8019e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e14:	4b19      	ldr	r3, [pc, #100]	; (8019e7c <xTaskRemoveFromEventList+0xb4>)
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	429a      	cmp	r2, r3
 8019e1a:	d903      	bls.n	8019e24 <xTaskRemoveFromEventList+0x5c>
 8019e1c:	693b      	ldr	r3, [r7, #16]
 8019e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e20:	4a16      	ldr	r2, [pc, #88]	; (8019e7c <xTaskRemoveFromEventList+0xb4>)
 8019e22:	6013      	str	r3, [r2, #0]
 8019e24:	693b      	ldr	r3, [r7, #16]
 8019e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e28:	4613      	mov	r3, r2
 8019e2a:	009b      	lsls	r3, r3, #2
 8019e2c:	4413      	add	r3, r2
 8019e2e:	009b      	lsls	r3, r3, #2
 8019e30:	4a13      	ldr	r2, [pc, #76]	; (8019e80 <xTaskRemoveFromEventList+0xb8>)
 8019e32:	441a      	add	r2, r3
 8019e34:	693b      	ldr	r3, [r7, #16]
 8019e36:	3304      	adds	r3, #4
 8019e38:	4619      	mov	r1, r3
 8019e3a:	4610      	mov	r0, r2
 8019e3c:	f7fd fdff 	bl	8017a3e <vListInsertEnd>
 8019e40:	e005      	b.n	8019e4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8019e42:	693b      	ldr	r3, [r7, #16]
 8019e44:	3318      	adds	r3, #24
 8019e46:	4619      	mov	r1, r3
 8019e48:	480e      	ldr	r0, [pc, #56]	; (8019e84 <xTaskRemoveFromEventList+0xbc>)
 8019e4a:	f7fd fdf8 	bl	8017a3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8019e4e:	693b      	ldr	r3, [r7, #16]
 8019e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e52:	4b0d      	ldr	r3, [pc, #52]	; (8019e88 <xTaskRemoveFromEventList+0xc0>)
 8019e54:	681b      	ldr	r3, [r3, #0]
 8019e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e58:	429a      	cmp	r2, r3
 8019e5a:	d905      	bls.n	8019e68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8019e5c:	2301      	movs	r3, #1
 8019e5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8019e60:	4b0a      	ldr	r3, [pc, #40]	; (8019e8c <xTaskRemoveFromEventList+0xc4>)
 8019e62:	2201      	movs	r2, #1
 8019e64:	601a      	str	r2, [r3, #0]
 8019e66:	e001      	b.n	8019e6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8019e68:	2300      	movs	r3, #0
 8019e6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8019e6c:	697b      	ldr	r3, [r7, #20]
}
 8019e6e:	4618      	mov	r0, r3
 8019e70:	3718      	adds	r7, #24
 8019e72:	46bd      	mov	sp, r7
 8019e74:	bd80      	pop	{r7, pc}
 8019e76:	bf00      	nop
 8019e78:	20002488 	.word	0x20002488
 8019e7c:	20002468 	.word	0x20002468
 8019e80:	20001f90 	.word	0x20001f90
 8019e84:	20002420 	.word	0x20002420
 8019e88:	20001f8c 	.word	0x20001f8c
 8019e8c:	20002474 	.word	0x20002474

08019e90 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b084      	sub	sp, #16
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	2b00      	cmp	r3, #0
 8019e9c:	d10a      	bne.n	8019eb4 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8019e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ea2:	f383 8811 	msr	BASEPRI, r3
 8019ea6:	f3bf 8f6f 	isb	sy
 8019eaa:	f3bf 8f4f 	dsb	sy
 8019eae:	60fb      	str	r3, [r7, #12]
}
 8019eb0:	bf00      	nop
 8019eb2:	e7fe      	b.n	8019eb2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8019eb4:	f001 f91e 	bl	801b0f4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019eb8:	4b06      	ldr	r3, [pc, #24]	; (8019ed4 <vTaskSetTimeOutState+0x44>)
 8019eba:	681a      	ldr	r2, [r3, #0]
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8019ec0:	4b05      	ldr	r3, [pc, #20]	; (8019ed8 <vTaskSetTimeOutState+0x48>)
 8019ec2:	681a      	ldr	r2, [r3, #0]
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8019ec8:	f001 f944 	bl	801b154 <vPortExitCritical>
}
 8019ecc:	bf00      	nop
 8019ece:	3710      	adds	r7, #16
 8019ed0:	46bd      	mov	sp, r7
 8019ed2:	bd80      	pop	{r7, pc}
 8019ed4:	20002478 	.word	0x20002478
 8019ed8:	20002464 	.word	0x20002464

08019edc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8019edc:	b480      	push	{r7}
 8019ede:	b083      	sub	sp, #12
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8019ee4:	4b06      	ldr	r3, [pc, #24]	; (8019f00 <vTaskInternalSetTimeOutState+0x24>)
 8019ee6:	681a      	ldr	r2, [r3, #0]
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8019eec:	4b05      	ldr	r3, [pc, #20]	; (8019f04 <vTaskInternalSetTimeOutState+0x28>)
 8019eee:	681a      	ldr	r2, [r3, #0]
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	605a      	str	r2, [r3, #4]
}
 8019ef4:	bf00      	nop
 8019ef6:	370c      	adds	r7, #12
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019efe:	4770      	bx	lr
 8019f00:	20002478 	.word	0x20002478
 8019f04:	20002464 	.word	0x20002464

08019f08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b088      	sub	sp, #32
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
 8019f10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	2b00      	cmp	r3, #0
 8019f16:	d10a      	bne.n	8019f2e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8019f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f1c:	f383 8811 	msr	BASEPRI, r3
 8019f20:	f3bf 8f6f 	isb	sy
 8019f24:	f3bf 8f4f 	dsb	sy
 8019f28:	613b      	str	r3, [r7, #16]
}
 8019f2a:	bf00      	nop
 8019f2c:	e7fe      	b.n	8019f2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8019f2e:	683b      	ldr	r3, [r7, #0]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d10a      	bne.n	8019f4a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8019f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f38:	f383 8811 	msr	BASEPRI, r3
 8019f3c:	f3bf 8f6f 	isb	sy
 8019f40:	f3bf 8f4f 	dsb	sy
 8019f44:	60fb      	str	r3, [r7, #12]
}
 8019f46:	bf00      	nop
 8019f48:	e7fe      	b.n	8019f48 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8019f4a:	f001 f8d3 	bl	801b0f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8019f4e:	4b1d      	ldr	r3, [pc, #116]	; (8019fc4 <xTaskCheckForTimeOut+0xbc>)
 8019f50:	681b      	ldr	r3, [r3, #0]
 8019f52:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	685b      	ldr	r3, [r3, #4]
 8019f58:	69ba      	ldr	r2, [r7, #24]
 8019f5a:	1ad3      	subs	r3, r2, r3
 8019f5c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8019f5e:	683b      	ldr	r3, [r7, #0]
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f66:	d102      	bne.n	8019f6e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8019f68:	2300      	movs	r3, #0
 8019f6a:	61fb      	str	r3, [r7, #28]
 8019f6c:	e023      	b.n	8019fb6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	681a      	ldr	r2, [r3, #0]
 8019f72:	4b15      	ldr	r3, [pc, #84]	; (8019fc8 <xTaskCheckForTimeOut+0xc0>)
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	429a      	cmp	r2, r3
 8019f78:	d007      	beq.n	8019f8a <xTaskCheckForTimeOut+0x82>
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	685b      	ldr	r3, [r3, #4]
 8019f7e:	69ba      	ldr	r2, [r7, #24]
 8019f80:	429a      	cmp	r2, r3
 8019f82:	d302      	bcc.n	8019f8a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8019f84:	2301      	movs	r3, #1
 8019f86:	61fb      	str	r3, [r7, #28]
 8019f88:	e015      	b.n	8019fb6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8019f8a:	683b      	ldr	r3, [r7, #0]
 8019f8c:	681b      	ldr	r3, [r3, #0]
 8019f8e:	697a      	ldr	r2, [r7, #20]
 8019f90:	429a      	cmp	r2, r3
 8019f92:	d20b      	bcs.n	8019fac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8019f94:	683b      	ldr	r3, [r7, #0]
 8019f96:	681a      	ldr	r2, [r3, #0]
 8019f98:	697b      	ldr	r3, [r7, #20]
 8019f9a:	1ad2      	subs	r2, r2, r3
 8019f9c:	683b      	ldr	r3, [r7, #0]
 8019f9e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8019fa0:	6878      	ldr	r0, [r7, #4]
 8019fa2:	f7ff ff9b 	bl	8019edc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	61fb      	str	r3, [r7, #28]
 8019faa:	e004      	b.n	8019fb6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8019fac:	683b      	ldr	r3, [r7, #0]
 8019fae:	2200      	movs	r2, #0
 8019fb0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8019fb2:	2301      	movs	r3, #1
 8019fb4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8019fb6:	f001 f8cd 	bl	801b154 <vPortExitCritical>

	return xReturn;
 8019fba:	69fb      	ldr	r3, [r7, #28]
}
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	3720      	adds	r7, #32
 8019fc0:	46bd      	mov	sp, r7
 8019fc2:	bd80      	pop	{r7, pc}
 8019fc4:	20002464 	.word	0x20002464
 8019fc8:	20002478 	.word	0x20002478

08019fcc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8019fcc:	b480      	push	{r7}
 8019fce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8019fd0:	4b03      	ldr	r3, [pc, #12]	; (8019fe0 <vTaskMissedYield+0x14>)
 8019fd2:	2201      	movs	r2, #1
 8019fd4:	601a      	str	r2, [r3, #0]
}
 8019fd6:	bf00      	nop
 8019fd8:	46bd      	mov	sp, r7
 8019fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fde:	4770      	bx	lr
 8019fe0:	20002474 	.word	0x20002474

08019fe4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8019fe4:	b580      	push	{r7, lr}
 8019fe6:	b082      	sub	sp, #8
 8019fe8:	af00      	add	r7, sp, #0
 8019fea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8019fec:	f000 f852 	bl	801a094 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8019ff0:	4b06      	ldr	r3, [pc, #24]	; (801a00c <prvIdleTask+0x28>)
 8019ff2:	681b      	ldr	r3, [r3, #0]
 8019ff4:	2b01      	cmp	r3, #1
 8019ff6:	d9f9      	bls.n	8019fec <prvIdleTask+0x8>
			{
				taskYIELD();
 8019ff8:	4b05      	ldr	r3, [pc, #20]	; (801a010 <prvIdleTask+0x2c>)
 8019ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019ffe:	601a      	str	r2, [r3, #0]
 801a000:	f3bf 8f4f 	dsb	sy
 801a004:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a008:	e7f0      	b.n	8019fec <prvIdleTask+0x8>
 801a00a:	bf00      	nop
 801a00c:	20001f90 	.word	0x20001f90
 801a010:	e000ed04 	.word	0xe000ed04

0801a014 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a014:	b580      	push	{r7, lr}
 801a016:	b082      	sub	sp, #8
 801a018:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a01a:	2300      	movs	r3, #0
 801a01c:	607b      	str	r3, [r7, #4]
 801a01e:	e00c      	b.n	801a03a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a020:	687a      	ldr	r2, [r7, #4]
 801a022:	4613      	mov	r3, r2
 801a024:	009b      	lsls	r3, r3, #2
 801a026:	4413      	add	r3, r2
 801a028:	009b      	lsls	r3, r3, #2
 801a02a:	4a12      	ldr	r2, [pc, #72]	; (801a074 <prvInitialiseTaskLists+0x60>)
 801a02c:	4413      	add	r3, r2
 801a02e:	4618      	mov	r0, r3
 801a030:	f7fd fcd8 	bl	80179e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	3301      	adds	r3, #1
 801a038:	607b      	str	r3, [r7, #4]
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	2b37      	cmp	r3, #55	; 0x37
 801a03e:	d9ef      	bls.n	801a020 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a040:	480d      	ldr	r0, [pc, #52]	; (801a078 <prvInitialiseTaskLists+0x64>)
 801a042:	f7fd fccf 	bl	80179e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a046:	480d      	ldr	r0, [pc, #52]	; (801a07c <prvInitialiseTaskLists+0x68>)
 801a048:	f7fd fccc 	bl	80179e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a04c:	480c      	ldr	r0, [pc, #48]	; (801a080 <prvInitialiseTaskLists+0x6c>)
 801a04e:	f7fd fcc9 	bl	80179e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a052:	480c      	ldr	r0, [pc, #48]	; (801a084 <prvInitialiseTaskLists+0x70>)
 801a054:	f7fd fcc6 	bl	80179e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a058:	480b      	ldr	r0, [pc, #44]	; (801a088 <prvInitialiseTaskLists+0x74>)
 801a05a:	f7fd fcc3 	bl	80179e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a05e:	4b0b      	ldr	r3, [pc, #44]	; (801a08c <prvInitialiseTaskLists+0x78>)
 801a060:	4a05      	ldr	r2, [pc, #20]	; (801a078 <prvInitialiseTaskLists+0x64>)
 801a062:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a064:	4b0a      	ldr	r3, [pc, #40]	; (801a090 <prvInitialiseTaskLists+0x7c>)
 801a066:	4a05      	ldr	r2, [pc, #20]	; (801a07c <prvInitialiseTaskLists+0x68>)
 801a068:	601a      	str	r2, [r3, #0]
}
 801a06a:	bf00      	nop
 801a06c:	3708      	adds	r7, #8
 801a06e:	46bd      	mov	sp, r7
 801a070:	bd80      	pop	{r7, pc}
 801a072:	bf00      	nop
 801a074:	20001f90 	.word	0x20001f90
 801a078:	200023f0 	.word	0x200023f0
 801a07c:	20002404 	.word	0x20002404
 801a080:	20002420 	.word	0x20002420
 801a084:	20002434 	.word	0x20002434
 801a088:	2000244c 	.word	0x2000244c
 801a08c:	20002418 	.word	0x20002418
 801a090:	2000241c 	.word	0x2000241c

0801a094 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a094:	b580      	push	{r7, lr}
 801a096:	b082      	sub	sp, #8
 801a098:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a09a:	e019      	b.n	801a0d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a09c:	f001 f82a 	bl	801b0f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a0a0:	4b10      	ldr	r3, [pc, #64]	; (801a0e4 <prvCheckTasksWaitingTermination+0x50>)
 801a0a2:	68db      	ldr	r3, [r3, #12]
 801a0a4:	68db      	ldr	r3, [r3, #12]
 801a0a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	3304      	adds	r3, #4
 801a0ac:	4618      	mov	r0, r3
 801a0ae:	f7fd fd23 	bl	8017af8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a0b2:	4b0d      	ldr	r3, [pc, #52]	; (801a0e8 <prvCheckTasksWaitingTermination+0x54>)
 801a0b4:	681b      	ldr	r3, [r3, #0]
 801a0b6:	3b01      	subs	r3, #1
 801a0b8:	4a0b      	ldr	r2, [pc, #44]	; (801a0e8 <prvCheckTasksWaitingTermination+0x54>)
 801a0ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a0bc:	4b0b      	ldr	r3, [pc, #44]	; (801a0ec <prvCheckTasksWaitingTermination+0x58>)
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	3b01      	subs	r3, #1
 801a0c2:	4a0a      	ldr	r2, [pc, #40]	; (801a0ec <prvCheckTasksWaitingTermination+0x58>)
 801a0c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a0c6:	f001 f845 	bl	801b154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a0ca:	6878      	ldr	r0, [r7, #4]
 801a0cc:	f000 f810 	bl	801a0f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a0d0:	4b06      	ldr	r3, [pc, #24]	; (801a0ec <prvCheckTasksWaitingTermination+0x58>)
 801a0d2:	681b      	ldr	r3, [r3, #0]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d1e1      	bne.n	801a09c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a0d8:	bf00      	nop
 801a0da:	bf00      	nop
 801a0dc:	3708      	adds	r7, #8
 801a0de:	46bd      	mov	sp, r7
 801a0e0:	bd80      	pop	{r7, pc}
 801a0e2:	bf00      	nop
 801a0e4:	20002434 	.word	0x20002434
 801a0e8:	20002460 	.word	0x20002460
 801a0ec:	20002448 	.word	0x20002448

0801a0f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a0f0:	b580      	push	{r7, lr}
 801a0f2:	b084      	sub	sp, #16
 801a0f4:	af00      	add	r7, sp, #0
 801a0f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	3358      	adds	r3, #88	; 0x58
 801a0fc:	4618      	mov	r0, r3
 801a0fe:	f002 fd59 	bl	801cbb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a102:	687b      	ldr	r3, [r7, #4]
 801a104:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d108      	bne.n	801a11e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a110:	4618      	mov	r0, r3
 801a112:	f001 f9e1 	bl	801b4d8 <vPortFree>
				vPortFree( pxTCB );
 801a116:	6878      	ldr	r0, [r7, #4]
 801a118:	f001 f9de 	bl	801b4d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a11c:	e018      	b.n	801a150 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801a124:	2b01      	cmp	r3, #1
 801a126:	d103      	bne.n	801a130 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801a128:	6878      	ldr	r0, [r7, #4]
 801a12a:	f001 f9d5 	bl	801b4d8 <vPortFree>
	}
 801a12e:	e00f      	b.n	801a150 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801a136:	2b02      	cmp	r3, #2
 801a138:	d00a      	beq.n	801a150 <prvDeleteTCB+0x60>
	__asm volatile
 801a13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a13e:	f383 8811 	msr	BASEPRI, r3
 801a142:	f3bf 8f6f 	isb	sy
 801a146:	f3bf 8f4f 	dsb	sy
 801a14a:	60fb      	str	r3, [r7, #12]
}
 801a14c:	bf00      	nop
 801a14e:	e7fe      	b.n	801a14e <prvDeleteTCB+0x5e>
	}
 801a150:	bf00      	nop
 801a152:	3710      	adds	r7, #16
 801a154:	46bd      	mov	sp, r7
 801a156:	bd80      	pop	{r7, pc}

0801a158 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a158:	b480      	push	{r7}
 801a15a:	b083      	sub	sp, #12
 801a15c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a15e:	4b0c      	ldr	r3, [pc, #48]	; (801a190 <prvResetNextTaskUnblockTime+0x38>)
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	681b      	ldr	r3, [r3, #0]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d104      	bne.n	801a172 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a168:	4b0a      	ldr	r3, [pc, #40]	; (801a194 <prvResetNextTaskUnblockTime+0x3c>)
 801a16a:	f04f 32ff 	mov.w	r2, #4294967295
 801a16e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a170:	e008      	b.n	801a184 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a172:	4b07      	ldr	r3, [pc, #28]	; (801a190 <prvResetNextTaskUnblockTime+0x38>)
 801a174:	681b      	ldr	r3, [r3, #0]
 801a176:	68db      	ldr	r3, [r3, #12]
 801a178:	68db      	ldr	r3, [r3, #12]
 801a17a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	685b      	ldr	r3, [r3, #4]
 801a180:	4a04      	ldr	r2, [pc, #16]	; (801a194 <prvResetNextTaskUnblockTime+0x3c>)
 801a182:	6013      	str	r3, [r2, #0]
}
 801a184:	bf00      	nop
 801a186:	370c      	adds	r7, #12
 801a188:	46bd      	mov	sp, r7
 801a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a18e:	4770      	bx	lr
 801a190:	20002418 	.word	0x20002418
 801a194:	20002480 	.word	0x20002480

0801a198 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801a198:	b480      	push	{r7}
 801a19a:	b083      	sub	sp, #12
 801a19c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801a19e:	4b05      	ldr	r3, [pc, #20]	; (801a1b4 <xTaskGetCurrentTaskHandle+0x1c>)
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	607b      	str	r3, [r7, #4]

		return xReturn;
 801a1a4:	687b      	ldr	r3, [r7, #4]
	}
 801a1a6:	4618      	mov	r0, r3
 801a1a8:	370c      	adds	r7, #12
 801a1aa:	46bd      	mov	sp, r7
 801a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1b0:	4770      	bx	lr
 801a1b2:	bf00      	nop
 801a1b4:	20001f8c 	.word	0x20001f8c

0801a1b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a1b8:	b480      	push	{r7}
 801a1ba:	b083      	sub	sp, #12
 801a1bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a1be:	4b0b      	ldr	r3, [pc, #44]	; (801a1ec <xTaskGetSchedulerState+0x34>)
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d102      	bne.n	801a1cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a1c6:	2301      	movs	r3, #1
 801a1c8:	607b      	str	r3, [r7, #4]
 801a1ca:	e008      	b.n	801a1de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a1cc:	4b08      	ldr	r3, [pc, #32]	; (801a1f0 <xTaskGetSchedulerState+0x38>)
 801a1ce:	681b      	ldr	r3, [r3, #0]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d102      	bne.n	801a1da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a1d4:	2302      	movs	r3, #2
 801a1d6:	607b      	str	r3, [r7, #4]
 801a1d8:	e001      	b.n	801a1de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a1da:	2300      	movs	r3, #0
 801a1dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a1de:	687b      	ldr	r3, [r7, #4]
	}
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	370c      	adds	r7, #12
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1ea:	4770      	bx	lr
 801a1ec:	2000246c 	.word	0x2000246c
 801a1f0:	20002488 	.word	0x20002488

0801a1f4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801a1f4:	b580      	push	{r7, lr}
 801a1f6:	b084      	sub	sp, #16
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801a200:	2300      	movs	r3, #0
 801a202:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d051      	beq.n	801a2ae <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801a20a:	68bb      	ldr	r3, [r7, #8]
 801a20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a20e:	4b2a      	ldr	r3, [pc, #168]	; (801a2b8 <xTaskPriorityInherit+0xc4>)
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a214:	429a      	cmp	r2, r3
 801a216:	d241      	bcs.n	801a29c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a218:	68bb      	ldr	r3, [r7, #8]
 801a21a:	699b      	ldr	r3, [r3, #24]
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	db06      	blt.n	801a22e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a220:	4b25      	ldr	r3, [pc, #148]	; (801a2b8 <xTaskPriorityInherit+0xc4>)
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a226:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a22a:	68bb      	ldr	r3, [r7, #8]
 801a22c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801a22e:	68bb      	ldr	r3, [r7, #8]
 801a230:	6959      	ldr	r1, [r3, #20]
 801a232:	68bb      	ldr	r3, [r7, #8]
 801a234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a236:	4613      	mov	r3, r2
 801a238:	009b      	lsls	r3, r3, #2
 801a23a:	4413      	add	r3, r2
 801a23c:	009b      	lsls	r3, r3, #2
 801a23e:	4a1f      	ldr	r2, [pc, #124]	; (801a2bc <xTaskPriorityInherit+0xc8>)
 801a240:	4413      	add	r3, r2
 801a242:	4299      	cmp	r1, r3
 801a244:	d122      	bne.n	801a28c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a246:	68bb      	ldr	r3, [r7, #8]
 801a248:	3304      	adds	r3, #4
 801a24a:	4618      	mov	r0, r3
 801a24c:	f7fd fc54 	bl	8017af8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a250:	4b19      	ldr	r3, [pc, #100]	; (801a2b8 <xTaskPriorityInherit+0xc4>)
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a256:	68bb      	ldr	r3, [r7, #8]
 801a258:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801a25a:	68bb      	ldr	r3, [r7, #8]
 801a25c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a25e:	4b18      	ldr	r3, [pc, #96]	; (801a2c0 <xTaskPriorityInherit+0xcc>)
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	429a      	cmp	r2, r3
 801a264:	d903      	bls.n	801a26e <xTaskPriorityInherit+0x7a>
 801a266:	68bb      	ldr	r3, [r7, #8]
 801a268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a26a:	4a15      	ldr	r2, [pc, #84]	; (801a2c0 <xTaskPriorityInherit+0xcc>)
 801a26c:	6013      	str	r3, [r2, #0]
 801a26e:	68bb      	ldr	r3, [r7, #8]
 801a270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a272:	4613      	mov	r3, r2
 801a274:	009b      	lsls	r3, r3, #2
 801a276:	4413      	add	r3, r2
 801a278:	009b      	lsls	r3, r3, #2
 801a27a:	4a10      	ldr	r2, [pc, #64]	; (801a2bc <xTaskPriorityInherit+0xc8>)
 801a27c:	441a      	add	r2, r3
 801a27e:	68bb      	ldr	r3, [r7, #8]
 801a280:	3304      	adds	r3, #4
 801a282:	4619      	mov	r1, r3
 801a284:	4610      	mov	r0, r2
 801a286:	f7fd fbda 	bl	8017a3e <vListInsertEnd>
 801a28a:	e004      	b.n	801a296 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801a28c:	4b0a      	ldr	r3, [pc, #40]	; (801a2b8 <xTaskPriorityInherit+0xc4>)
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a292:	68bb      	ldr	r3, [r7, #8]
 801a294:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801a296:	2301      	movs	r3, #1
 801a298:	60fb      	str	r3, [r7, #12]
 801a29a:	e008      	b.n	801a2ae <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801a29c:	68bb      	ldr	r3, [r7, #8]
 801a29e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a2a0:	4b05      	ldr	r3, [pc, #20]	; (801a2b8 <xTaskPriorityInherit+0xc4>)
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2a6:	429a      	cmp	r2, r3
 801a2a8:	d201      	bcs.n	801a2ae <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801a2aa:	2301      	movs	r3, #1
 801a2ac:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a2ae:	68fb      	ldr	r3, [r7, #12]
	}
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	3710      	adds	r7, #16
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd80      	pop	{r7, pc}
 801a2b8:	20001f8c 	.word	0x20001f8c
 801a2bc:	20001f90 	.word	0x20001f90
 801a2c0:	20002468 	.word	0x20002468

0801a2c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a2c4:	b580      	push	{r7, lr}
 801a2c6:	b086      	sub	sp, #24
 801a2c8:	af00      	add	r7, sp, #0
 801a2ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a2cc:	687b      	ldr	r3, [r7, #4]
 801a2ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	2b00      	cmp	r3, #0
 801a2d8:	d056      	beq.n	801a388 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a2da:	4b2e      	ldr	r3, [pc, #184]	; (801a394 <xTaskPriorityDisinherit+0xd0>)
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	693a      	ldr	r2, [r7, #16]
 801a2e0:	429a      	cmp	r2, r3
 801a2e2:	d00a      	beq.n	801a2fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801a2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2e8:	f383 8811 	msr	BASEPRI, r3
 801a2ec:	f3bf 8f6f 	isb	sy
 801a2f0:	f3bf 8f4f 	dsb	sy
 801a2f4:	60fb      	str	r3, [r7, #12]
}
 801a2f6:	bf00      	nop
 801a2f8:	e7fe      	b.n	801a2f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801a2fa:	693b      	ldr	r3, [r7, #16]
 801a2fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d10a      	bne.n	801a318 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a306:	f383 8811 	msr	BASEPRI, r3
 801a30a:	f3bf 8f6f 	isb	sy
 801a30e:	f3bf 8f4f 	dsb	sy
 801a312:	60bb      	str	r3, [r7, #8]
}
 801a314:	bf00      	nop
 801a316:	e7fe      	b.n	801a316 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801a318:	693b      	ldr	r3, [r7, #16]
 801a31a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a31c:	1e5a      	subs	r2, r3, #1
 801a31e:	693b      	ldr	r3, [r7, #16]
 801a320:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a322:	693b      	ldr	r3, [r7, #16]
 801a324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a326:	693b      	ldr	r3, [r7, #16]
 801a328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a32a:	429a      	cmp	r2, r3
 801a32c:	d02c      	beq.n	801a388 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a32e:	693b      	ldr	r3, [r7, #16]
 801a330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a332:	2b00      	cmp	r3, #0
 801a334:	d128      	bne.n	801a388 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a336:	693b      	ldr	r3, [r7, #16]
 801a338:	3304      	adds	r3, #4
 801a33a:	4618      	mov	r0, r3
 801a33c:	f7fd fbdc 	bl	8017af8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a340:	693b      	ldr	r3, [r7, #16]
 801a342:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a344:	693b      	ldr	r3, [r7, #16]
 801a346:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a348:	693b      	ldr	r3, [r7, #16]
 801a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a34c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a350:	693b      	ldr	r3, [r7, #16]
 801a352:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a354:	693b      	ldr	r3, [r7, #16]
 801a356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a358:	4b0f      	ldr	r3, [pc, #60]	; (801a398 <xTaskPriorityDisinherit+0xd4>)
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	429a      	cmp	r2, r3
 801a35e:	d903      	bls.n	801a368 <xTaskPriorityDisinherit+0xa4>
 801a360:	693b      	ldr	r3, [r7, #16]
 801a362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a364:	4a0c      	ldr	r2, [pc, #48]	; (801a398 <xTaskPriorityDisinherit+0xd4>)
 801a366:	6013      	str	r3, [r2, #0]
 801a368:	693b      	ldr	r3, [r7, #16]
 801a36a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a36c:	4613      	mov	r3, r2
 801a36e:	009b      	lsls	r3, r3, #2
 801a370:	4413      	add	r3, r2
 801a372:	009b      	lsls	r3, r3, #2
 801a374:	4a09      	ldr	r2, [pc, #36]	; (801a39c <xTaskPriorityDisinherit+0xd8>)
 801a376:	441a      	add	r2, r3
 801a378:	693b      	ldr	r3, [r7, #16]
 801a37a:	3304      	adds	r3, #4
 801a37c:	4619      	mov	r1, r3
 801a37e:	4610      	mov	r0, r2
 801a380:	f7fd fb5d 	bl	8017a3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a384:	2301      	movs	r3, #1
 801a386:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a388:	697b      	ldr	r3, [r7, #20]
	}
 801a38a:	4618      	mov	r0, r3
 801a38c:	3718      	adds	r7, #24
 801a38e:	46bd      	mov	sp, r7
 801a390:	bd80      	pop	{r7, pc}
 801a392:	bf00      	nop
 801a394:	20001f8c 	.word	0x20001f8c
 801a398:	20002468 	.word	0x20002468
 801a39c:	20001f90 	.word	0x20001f90

0801a3a0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801a3a0:	b580      	push	{r7, lr}
 801a3a2:	b088      	sub	sp, #32
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	6078      	str	r0, [r7, #4]
 801a3a8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801a3ae:	2301      	movs	r3, #1
 801a3b0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d06a      	beq.n	801a48e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801a3b8:	69bb      	ldr	r3, [r7, #24]
 801a3ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d10a      	bne.n	801a3d6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801a3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a3c4:	f383 8811 	msr	BASEPRI, r3
 801a3c8:	f3bf 8f6f 	isb	sy
 801a3cc:	f3bf 8f4f 	dsb	sy
 801a3d0:	60fb      	str	r3, [r7, #12]
}
 801a3d2:	bf00      	nop
 801a3d4:	e7fe      	b.n	801a3d4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801a3d6:	69bb      	ldr	r3, [r7, #24]
 801a3d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a3da:	683a      	ldr	r2, [r7, #0]
 801a3dc:	429a      	cmp	r2, r3
 801a3de:	d902      	bls.n	801a3e6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801a3e0:	683b      	ldr	r3, [r7, #0]
 801a3e2:	61fb      	str	r3, [r7, #28]
 801a3e4:	e002      	b.n	801a3ec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801a3e6:	69bb      	ldr	r3, [r7, #24]
 801a3e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a3ea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801a3ec:	69bb      	ldr	r3, [r7, #24]
 801a3ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3f0:	69fa      	ldr	r2, [r7, #28]
 801a3f2:	429a      	cmp	r2, r3
 801a3f4:	d04b      	beq.n	801a48e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801a3f6:	69bb      	ldr	r3, [r7, #24]
 801a3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a3fa:	697a      	ldr	r2, [r7, #20]
 801a3fc:	429a      	cmp	r2, r3
 801a3fe:	d146      	bne.n	801a48e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801a400:	4b25      	ldr	r3, [pc, #148]	; (801a498 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801a402:	681b      	ldr	r3, [r3, #0]
 801a404:	69ba      	ldr	r2, [r7, #24]
 801a406:	429a      	cmp	r2, r3
 801a408:	d10a      	bne.n	801a420 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a40e:	f383 8811 	msr	BASEPRI, r3
 801a412:	f3bf 8f6f 	isb	sy
 801a416:	f3bf 8f4f 	dsb	sy
 801a41a:	60bb      	str	r3, [r7, #8]
}
 801a41c:	bf00      	nop
 801a41e:	e7fe      	b.n	801a41e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801a420:	69bb      	ldr	r3, [r7, #24]
 801a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a424:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801a426:	69bb      	ldr	r3, [r7, #24]
 801a428:	69fa      	ldr	r2, [r7, #28]
 801a42a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801a42c:	69bb      	ldr	r3, [r7, #24]
 801a42e:	699b      	ldr	r3, [r3, #24]
 801a430:	2b00      	cmp	r3, #0
 801a432:	db04      	blt.n	801a43e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a434:	69fb      	ldr	r3, [r7, #28]
 801a436:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a43a:	69bb      	ldr	r3, [r7, #24]
 801a43c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801a43e:	69bb      	ldr	r3, [r7, #24]
 801a440:	6959      	ldr	r1, [r3, #20]
 801a442:	693a      	ldr	r2, [r7, #16]
 801a444:	4613      	mov	r3, r2
 801a446:	009b      	lsls	r3, r3, #2
 801a448:	4413      	add	r3, r2
 801a44a:	009b      	lsls	r3, r3, #2
 801a44c:	4a13      	ldr	r2, [pc, #76]	; (801a49c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801a44e:	4413      	add	r3, r2
 801a450:	4299      	cmp	r1, r3
 801a452:	d11c      	bne.n	801a48e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a454:	69bb      	ldr	r3, [r7, #24]
 801a456:	3304      	adds	r3, #4
 801a458:	4618      	mov	r0, r3
 801a45a:	f7fd fb4d 	bl	8017af8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801a45e:	69bb      	ldr	r3, [r7, #24]
 801a460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a462:	4b0f      	ldr	r3, [pc, #60]	; (801a4a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	429a      	cmp	r2, r3
 801a468:	d903      	bls.n	801a472 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801a46a:	69bb      	ldr	r3, [r7, #24]
 801a46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a46e:	4a0c      	ldr	r2, [pc, #48]	; (801a4a0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801a470:	6013      	str	r3, [r2, #0]
 801a472:	69bb      	ldr	r3, [r7, #24]
 801a474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a476:	4613      	mov	r3, r2
 801a478:	009b      	lsls	r3, r3, #2
 801a47a:	4413      	add	r3, r2
 801a47c:	009b      	lsls	r3, r3, #2
 801a47e:	4a07      	ldr	r2, [pc, #28]	; (801a49c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801a480:	441a      	add	r2, r3
 801a482:	69bb      	ldr	r3, [r7, #24]
 801a484:	3304      	adds	r3, #4
 801a486:	4619      	mov	r1, r3
 801a488:	4610      	mov	r0, r2
 801a48a:	f7fd fad8 	bl	8017a3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801a48e:	bf00      	nop
 801a490:	3720      	adds	r7, #32
 801a492:	46bd      	mov	sp, r7
 801a494:	bd80      	pop	{r7, pc}
 801a496:	bf00      	nop
 801a498:	20001f8c 	.word	0x20001f8c
 801a49c:	20001f90 	.word	0x20001f90
 801a4a0:	20002468 	.word	0x20002468

0801a4a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801a4a4:	b480      	push	{r7}
 801a4a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801a4a8:	4b07      	ldr	r3, [pc, #28]	; (801a4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d004      	beq.n	801a4ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801a4b0:	4b05      	ldr	r3, [pc, #20]	; (801a4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 801a4b2:	681b      	ldr	r3, [r3, #0]
 801a4b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a4b6:	3201      	adds	r2, #1
 801a4b8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 801a4ba:	4b03      	ldr	r3, [pc, #12]	; (801a4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 801a4bc:	681b      	ldr	r3, [r3, #0]
	}
 801a4be:	4618      	mov	r0, r3
 801a4c0:	46bd      	mov	sp, r7
 801a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c6:	4770      	bx	lr
 801a4c8:	20001f8c 	.word	0x20001f8c

0801a4cc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b086      	sub	sp, #24
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	60f8      	str	r0, [r7, #12]
 801a4d4:	60b9      	str	r1, [r7, #8]
 801a4d6:	607a      	str	r2, [r7, #4]
 801a4d8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 801a4da:	f000 fe0b 	bl	801b0f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801a4de:	4b29      	ldr	r3, [pc, #164]	; (801a584 <xTaskNotifyWait+0xb8>)
 801a4e0:	681b      	ldr	r3, [r3, #0]
 801a4e2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801a4e6:	b2db      	uxtb	r3, r3
 801a4e8:	2b02      	cmp	r3, #2
 801a4ea:	d01c      	beq.n	801a526 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801a4ec:	4b25      	ldr	r3, [pc, #148]	; (801a584 <xTaskNotifyWait+0xb8>)
 801a4ee:	681b      	ldr	r3, [r3, #0]
 801a4f0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801a4f4:	68fa      	ldr	r2, [r7, #12]
 801a4f6:	43d2      	mvns	r2, r2
 801a4f8:	400a      	ands	r2, r1
 801a4fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801a4fe:	4b21      	ldr	r3, [pc, #132]	; (801a584 <xTaskNotifyWait+0xb8>)
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	2201      	movs	r2, #1
 801a504:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 801a508:	683b      	ldr	r3, [r7, #0]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d00b      	beq.n	801a526 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a50e:	2101      	movs	r1, #1
 801a510:	6838      	ldr	r0, [r7, #0]
 801a512:	f000 f91f 	bl	801a754 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801a516:	4b1c      	ldr	r3, [pc, #112]	; (801a588 <xTaskNotifyWait+0xbc>)
 801a518:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a51c:	601a      	str	r2, [r3, #0]
 801a51e:	f3bf 8f4f 	dsb	sy
 801a522:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801a526:	f000 fe15 	bl	801b154 <vPortExitCritical>

		taskENTER_CRITICAL();
 801a52a:	f000 fde3 	bl	801b0f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	2b00      	cmp	r3, #0
 801a532:	d005      	beq.n	801a540 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 801a534:	4b13      	ldr	r3, [pc, #76]	; (801a584 <xTaskNotifyWait+0xb8>)
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801a540:	4b10      	ldr	r3, [pc, #64]	; (801a584 <xTaskNotifyWait+0xb8>)
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801a548:	b2db      	uxtb	r3, r3
 801a54a:	2b02      	cmp	r3, #2
 801a54c:	d002      	beq.n	801a554 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801a54e:	2300      	movs	r3, #0
 801a550:	617b      	str	r3, [r7, #20]
 801a552:	e00a      	b.n	801a56a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801a554:	4b0b      	ldr	r3, [pc, #44]	; (801a584 <xTaskNotifyWait+0xb8>)
 801a556:	681b      	ldr	r3, [r3, #0]
 801a558:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801a55c:	68ba      	ldr	r2, [r7, #8]
 801a55e:	43d2      	mvns	r2, r2
 801a560:	400a      	ands	r2, r1
 801a562:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 801a566:	2301      	movs	r3, #1
 801a568:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a56a:	4b06      	ldr	r3, [pc, #24]	; (801a584 <xTaskNotifyWait+0xb8>)
 801a56c:	681b      	ldr	r3, [r3, #0]
 801a56e:	2200      	movs	r2, #0
 801a570:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 801a574:	f000 fdee 	bl	801b154 <vPortExitCritical>

		return xReturn;
 801a578:	697b      	ldr	r3, [r7, #20]
	}
 801a57a:	4618      	mov	r0, r3
 801a57c:	3718      	adds	r7, #24
 801a57e:	46bd      	mov	sp, r7
 801a580:	bd80      	pop	{r7, pc}
 801a582:	bf00      	nop
 801a584:	20001f8c 	.word	0x20001f8c
 801a588:	e000ed04 	.word	0xe000ed04

0801a58c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801a58c:	b580      	push	{r7, lr}
 801a58e:	b08a      	sub	sp, #40	; 0x28
 801a590:	af00      	add	r7, sp, #0
 801a592:	60f8      	str	r0, [r7, #12]
 801a594:	60b9      	str	r1, [r7, #8]
 801a596:	603b      	str	r3, [r7, #0]
 801a598:	4613      	mov	r3, r2
 801a59a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801a59c:	2301      	movs	r3, #1
 801a59e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 801a5a0:	68fb      	ldr	r3, [r7, #12]
 801a5a2:	2b00      	cmp	r3, #0
 801a5a4:	d10a      	bne.n	801a5bc <xTaskGenericNotify+0x30>
	__asm volatile
 801a5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a5aa:	f383 8811 	msr	BASEPRI, r3
 801a5ae:	f3bf 8f6f 	isb	sy
 801a5b2:	f3bf 8f4f 	dsb	sy
 801a5b6:	61bb      	str	r3, [r7, #24]
}
 801a5b8:	bf00      	nop
 801a5ba:	e7fe      	b.n	801a5ba <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 801a5bc:	68fb      	ldr	r3, [r7, #12]
 801a5be:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801a5c0:	f000 fd98 	bl	801b0f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801a5c4:	683b      	ldr	r3, [r7, #0]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d004      	beq.n	801a5d4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 801a5ca:	6a3b      	ldr	r3, [r7, #32]
 801a5cc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801a5d0:	683b      	ldr	r3, [r7, #0]
 801a5d2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801a5d4:	6a3b      	ldr	r3, [r7, #32]
 801a5d6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801a5da:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 801a5dc:	6a3b      	ldr	r3, [r7, #32]
 801a5de:	2202      	movs	r2, #2
 801a5e0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 801a5e4:	79fb      	ldrb	r3, [r7, #7]
 801a5e6:	2b04      	cmp	r3, #4
 801a5e8:	d82d      	bhi.n	801a646 <xTaskGenericNotify+0xba>
 801a5ea:	a201      	add	r2, pc, #4	; (adr r2, 801a5f0 <xTaskGenericNotify+0x64>)
 801a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5f0:	0801a669 	.word	0x0801a669
 801a5f4:	0801a605 	.word	0x0801a605
 801a5f8:	0801a617 	.word	0x0801a617
 801a5fc:	0801a627 	.word	0x0801a627
 801a600:	0801a631 	.word	0x0801a631
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801a604:	6a3b      	ldr	r3, [r7, #32]
 801a606:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801a60a:	68bb      	ldr	r3, [r7, #8]
 801a60c:	431a      	orrs	r2, r3
 801a60e:	6a3b      	ldr	r3, [r7, #32]
 801a610:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801a614:	e02b      	b.n	801a66e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801a616:	6a3b      	ldr	r3, [r7, #32]
 801a618:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a61c:	1c5a      	adds	r2, r3, #1
 801a61e:	6a3b      	ldr	r3, [r7, #32]
 801a620:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801a624:	e023      	b.n	801a66e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801a626:	6a3b      	ldr	r3, [r7, #32]
 801a628:	68ba      	ldr	r2, [r7, #8]
 801a62a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801a62e:	e01e      	b.n	801a66e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801a630:	7ffb      	ldrb	r3, [r7, #31]
 801a632:	2b02      	cmp	r3, #2
 801a634:	d004      	beq.n	801a640 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 801a636:	6a3b      	ldr	r3, [r7, #32]
 801a638:	68ba      	ldr	r2, [r7, #8]
 801a63a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801a63e:	e016      	b.n	801a66e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 801a640:	2300      	movs	r3, #0
 801a642:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801a644:	e013      	b.n	801a66e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801a646:	6a3b      	ldr	r3, [r7, #32]
 801a648:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801a64c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a650:	d00c      	beq.n	801a66c <xTaskGenericNotify+0xe0>
	__asm volatile
 801a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a656:	f383 8811 	msr	BASEPRI, r3
 801a65a:	f3bf 8f6f 	isb	sy
 801a65e:	f3bf 8f4f 	dsb	sy
 801a662:	617b      	str	r3, [r7, #20]
}
 801a664:	bf00      	nop
 801a666:	e7fe      	b.n	801a666 <xTaskGenericNotify+0xda>
					break;
 801a668:	bf00      	nop
 801a66a:	e000      	b.n	801a66e <xTaskGenericNotify+0xe2>

					break;
 801a66c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801a66e:	7ffb      	ldrb	r3, [r7, #31]
 801a670:	2b01      	cmp	r3, #1
 801a672:	d13a      	bne.n	801a6ea <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a674:	6a3b      	ldr	r3, [r7, #32]
 801a676:	3304      	adds	r3, #4
 801a678:	4618      	mov	r0, r3
 801a67a:	f7fd fa3d 	bl	8017af8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801a67e:	6a3b      	ldr	r3, [r7, #32]
 801a680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a682:	4b1d      	ldr	r3, [pc, #116]	; (801a6f8 <xTaskGenericNotify+0x16c>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	429a      	cmp	r2, r3
 801a688:	d903      	bls.n	801a692 <xTaskGenericNotify+0x106>
 801a68a:	6a3b      	ldr	r3, [r7, #32]
 801a68c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a68e:	4a1a      	ldr	r2, [pc, #104]	; (801a6f8 <xTaskGenericNotify+0x16c>)
 801a690:	6013      	str	r3, [r2, #0]
 801a692:	6a3b      	ldr	r3, [r7, #32]
 801a694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a696:	4613      	mov	r3, r2
 801a698:	009b      	lsls	r3, r3, #2
 801a69a:	4413      	add	r3, r2
 801a69c:	009b      	lsls	r3, r3, #2
 801a69e:	4a17      	ldr	r2, [pc, #92]	; (801a6fc <xTaskGenericNotify+0x170>)
 801a6a0:	441a      	add	r2, r3
 801a6a2:	6a3b      	ldr	r3, [r7, #32]
 801a6a4:	3304      	adds	r3, #4
 801a6a6:	4619      	mov	r1, r3
 801a6a8:	4610      	mov	r0, r2
 801a6aa:	f7fd f9c8 	bl	8017a3e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801a6ae:	6a3b      	ldr	r3, [r7, #32]
 801a6b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d00a      	beq.n	801a6cc <xTaskGenericNotify+0x140>
	__asm volatile
 801a6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a6ba:	f383 8811 	msr	BASEPRI, r3
 801a6be:	f3bf 8f6f 	isb	sy
 801a6c2:	f3bf 8f4f 	dsb	sy
 801a6c6:	613b      	str	r3, [r7, #16]
}
 801a6c8:	bf00      	nop
 801a6ca:	e7fe      	b.n	801a6ca <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a6cc:	6a3b      	ldr	r3, [r7, #32]
 801a6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a6d0:	4b0b      	ldr	r3, [pc, #44]	; (801a700 <xTaskGenericNotify+0x174>)
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a6d6:	429a      	cmp	r2, r3
 801a6d8:	d907      	bls.n	801a6ea <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 801a6da:	4b0a      	ldr	r3, [pc, #40]	; (801a704 <xTaskGenericNotify+0x178>)
 801a6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a6e0:	601a      	str	r2, [r3, #0]
 801a6e2:	f3bf 8f4f 	dsb	sy
 801a6e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801a6ea:	f000 fd33 	bl	801b154 <vPortExitCritical>

		return xReturn;
 801a6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801a6f0:	4618      	mov	r0, r3
 801a6f2:	3728      	adds	r7, #40	; 0x28
 801a6f4:	46bd      	mov	sp, r7
 801a6f6:	bd80      	pop	{r7, pc}
 801a6f8:	20002468 	.word	0x20002468
 801a6fc:	20001f90 	.word	0x20001f90
 801a700:	20001f8c 	.word	0x20001f8c
 801a704:	e000ed04 	.word	0xe000ed04

0801a708 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 801a708:	b580      	push	{r7, lr}
 801a70a:	b084      	sub	sp, #16
 801a70c:	af00      	add	r7, sp, #0
 801a70e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	2b00      	cmp	r3, #0
 801a714:	d102      	bne.n	801a71c <xTaskNotifyStateClear+0x14>
 801a716:	4b0e      	ldr	r3, [pc, #56]	; (801a750 <xTaskNotifyStateClear+0x48>)
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	e000      	b.n	801a71e <xTaskNotifyStateClear+0x16>
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 801a720:	f000 fce8 	bl	801b0f4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 801a724:	68bb      	ldr	r3, [r7, #8]
 801a726:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801a72a:	b2db      	uxtb	r3, r3
 801a72c:	2b02      	cmp	r3, #2
 801a72e:	d106      	bne.n	801a73e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801a730:	68bb      	ldr	r3, [r7, #8]
 801a732:	2200      	movs	r2, #0
 801a734:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 801a738:	2301      	movs	r3, #1
 801a73a:	60fb      	str	r3, [r7, #12]
 801a73c:	e001      	b.n	801a742 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 801a73e:	2300      	movs	r3, #0
 801a740:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 801a742:	f000 fd07 	bl	801b154 <vPortExitCritical>

		return xReturn;
 801a746:	68fb      	ldr	r3, [r7, #12]
	}
 801a748:	4618      	mov	r0, r3
 801a74a:	3710      	adds	r7, #16
 801a74c:	46bd      	mov	sp, r7
 801a74e:	bd80      	pop	{r7, pc}
 801a750:	20001f8c 	.word	0x20001f8c

0801a754 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a754:	b580      	push	{r7, lr}
 801a756:	b084      	sub	sp, #16
 801a758:	af00      	add	r7, sp, #0
 801a75a:	6078      	str	r0, [r7, #4]
 801a75c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a75e:	4b21      	ldr	r3, [pc, #132]	; (801a7e4 <prvAddCurrentTaskToDelayedList+0x90>)
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a764:	4b20      	ldr	r3, [pc, #128]	; (801a7e8 <prvAddCurrentTaskToDelayedList+0x94>)
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	3304      	adds	r3, #4
 801a76a:	4618      	mov	r0, r3
 801a76c:	f7fd f9c4 	bl	8017af8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a776:	d10a      	bne.n	801a78e <prvAddCurrentTaskToDelayedList+0x3a>
 801a778:	683b      	ldr	r3, [r7, #0]
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	d007      	beq.n	801a78e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a77e:	4b1a      	ldr	r3, [pc, #104]	; (801a7e8 <prvAddCurrentTaskToDelayedList+0x94>)
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	3304      	adds	r3, #4
 801a784:	4619      	mov	r1, r3
 801a786:	4819      	ldr	r0, [pc, #100]	; (801a7ec <prvAddCurrentTaskToDelayedList+0x98>)
 801a788:	f7fd f959 	bl	8017a3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a78c:	e026      	b.n	801a7dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a78e:	68fa      	ldr	r2, [r7, #12]
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	4413      	add	r3, r2
 801a794:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a796:	4b14      	ldr	r3, [pc, #80]	; (801a7e8 <prvAddCurrentTaskToDelayedList+0x94>)
 801a798:	681b      	ldr	r3, [r3, #0]
 801a79a:	68ba      	ldr	r2, [r7, #8]
 801a79c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a79e:	68ba      	ldr	r2, [r7, #8]
 801a7a0:	68fb      	ldr	r3, [r7, #12]
 801a7a2:	429a      	cmp	r2, r3
 801a7a4:	d209      	bcs.n	801a7ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a7a6:	4b12      	ldr	r3, [pc, #72]	; (801a7f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 801a7a8:	681a      	ldr	r2, [r3, #0]
 801a7aa:	4b0f      	ldr	r3, [pc, #60]	; (801a7e8 <prvAddCurrentTaskToDelayedList+0x94>)
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	3304      	adds	r3, #4
 801a7b0:	4619      	mov	r1, r3
 801a7b2:	4610      	mov	r0, r2
 801a7b4:	f7fd f967 	bl	8017a86 <vListInsert>
}
 801a7b8:	e010      	b.n	801a7dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a7ba:	4b0e      	ldr	r3, [pc, #56]	; (801a7f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801a7bc:	681a      	ldr	r2, [r3, #0]
 801a7be:	4b0a      	ldr	r3, [pc, #40]	; (801a7e8 <prvAddCurrentTaskToDelayedList+0x94>)
 801a7c0:	681b      	ldr	r3, [r3, #0]
 801a7c2:	3304      	adds	r3, #4
 801a7c4:	4619      	mov	r1, r3
 801a7c6:	4610      	mov	r0, r2
 801a7c8:	f7fd f95d 	bl	8017a86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a7cc:	4b0a      	ldr	r3, [pc, #40]	; (801a7f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	68ba      	ldr	r2, [r7, #8]
 801a7d2:	429a      	cmp	r2, r3
 801a7d4:	d202      	bcs.n	801a7dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801a7d6:	4a08      	ldr	r2, [pc, #32]	; (801a7f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801a7d8:	68bb      	ldr	r3, [r7, #8]
 801a7da:	6013      	str	r3, [r2, #0]
}
 801a7dc:	bf00      	nop
 801a7de:	3710      	adds	r7, #16
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	bd80      	pop	{r7, pc}
 801a7e4:	20002464 	.word	0x20002464
 801a7e8:	20001f8c 	.word	0x20001f8c
 801a7ec:	2000244c 	.word	0x2000244c
 801a7f0:	2000241c 	.word	0x2000241c
 801a7f4:	20002418 	.word	0x20002418
 801a7f8:	20002480 	.word	0x20002480

0801a7fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801a7fc:	b580      	push	{r7, lr}
 801a7fe:	b08a      	sub	sp, #40	; 0x28
 801a800:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801a802:	2300      	movs	r3, #0
 801a804:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801a806:	f000 fb07 	bl	801ae18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801a80a:	4b1c      	ldr	r3, [pc, #112]	; (801a87c <xTimerCreateTimerTask+0x80>)
 801a80c:	681b      	ldr	r3, [r3, #0]
 801a80e:	2b00      	cmp	r3, #0
 801a810:	d021      	beq.n	801a856 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a812:	2300      	movs	r3, #0
 801a814:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a816:	2300      	movs	r3, #0
 801a818:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a81a:	1d3a      	adds	r2, r7, #4
 801a81c:	f107 0108 	add.w	r1, r7, #8
 801a820:	f107 030c 	add.w	r3, r7, #12
 801a824:	4618      	mov	r0, r3
 801a826:	f7fd f8c3 	bl	80179b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a82a:	6879      	ldr	r1, [r7, #4]
 801a82c:	68bb      	ldr	r3, [r7, #8]
 801a82e:	68fa      	ldr	r2, [r7, #12]
 801a830:	9202      	str	r2, [sp, #8]
 801a832:	9301      	str	r3, [sp, #4]
 801a834:	2302      	movs	r3, #2
 801a836:	9300      	str	r3, [sp, #0]
 801a838:	2300      	movs	r3, #0
 801a83a:	460a      	mov	r2, r1
 801a83c:	4910      	ldr	r1, [pc, #64]	; (801a880 <xTimerCreateTimerTask+0x84>)
 801a83e:	4811      	ldr	r0, [pc, #68]	; (801a884 <xTimerCreateTimerTask+0x88>)
 801a840:	f7fe fe0a 	bl	8019458 <xTaskCreateStatic>
 801a844:	4603      	mov	r3, r0
 801a846:	4a10      	ldr	r2, [pc, #64]	; (801a888 <xTimerCreateTimerTask+0x8c>)
 801a848:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801a84a:	4b0f      	ldr	r3, [pc, #60]	; (801a888 <xTimerCreateTimerTask+0x8c>)
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	2b00      	cmp	r3, #0
 801a850:	d001      	beq.n	801a856 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801a852:	2301      	movs	r3, #1
 801a854:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801a856:	697b      	ldr	r3, [r7, #20]
 801a858:	2b00      	cmp	r3, #0
 801a85a:	d10a      	bne.n	801a872 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801a85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a860:	f383 8811 	msr	BASEPRI, r3
 801a864:	f3bf 8f6f 	isb	sy
 801a868:	f3bf 8f4f 	dsb	sy
 801a86c:	613b      	str	r3, [r7, #16]
}
 801a86e:	bf00      	nop
 801a870:	e7fe      	b.n	801a870 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801a872:	697b      	ldr	r3, [r7, #20]
}
 801a874:	4618      	mov	r0, r3
 801a876:	3718      	adds	r7, #24
 801a878:	46bd      	mov	sp, r7
 801a87a:	bd80      	pop	{r7, pc}
 801a87c:	200024c4 	.word	0x200024c4
 801a880:	0801f0f8 	.word	0x0801f0f8
 801a884:	0801a9c1 	.word	0x0801a9c1
 801a888:	200024c8 	.word	0x200024c8

0801a88c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b08a      	sub	sp, #40	; 0x28
 801a890:	af00      	add	r7, sp, #0
 801a892:	60f8      	str	r0, [r7, #12]
 801a894:	60b9      	str	r1, [r7, #8]
 801a896:	607a      	str	r2, [r7, #4]
 801a898:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801a89a:	2300      	movs	r3, #0
 801a89c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d10a      	bne.n	801a8ba <xTimerGenericCommand+0x2e>
	__asm volatile
 801a8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8a8:	f383 8811 	msr	BASEPRI, r3
 801a8ac:	f3bf 8f6f 	isb	sy
 801a8b0:	f3bf 8f4f 	dsb	sy
 801a8b4:	623b      	str	r3, [r7, #32]
}
 801a8b6:	bf00      	nop
 801a8b8:	e7fe      	b.n	801a8b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801a8ba:	4b1a      	ldr	r3, [pc, #104]	; (801a924 <xTimerGenericCommand+0x98>)
 801a8bc:	681b      	ldr	r3, [r3, #0]
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d02a      	beq.n	801a918 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801a8c2:	68bb      	ldr	r3, [r7, #8]
 801a8c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a8ce:	68bb      	ldr	r3, [r7, #8]
 801a8d0:	2b05      	cmp	r3, #5
 801a8d2:	dc18      	bgt.n	801a906 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a8d4:	f7ff fc70 	bl	801a1b8 <xTaskGetSchedulerState>
 801a8d8:	4603      	mov	r3, r0
 801a8da:	2b02      	cmp	r3, #2
 801a8dc:	d109      	bne.n	801a8f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a8de:	4b11      	ldr	r3, [pc, #68]	; (801a924 <xTimerGenericCommand+0x98>)
 801a8e0:	6818      	ldr	r0, [r3, #0]
 801a8e2:	f107 0110 	add.w	r1, r7, #16
 801a8e6:	2300      	movs	r3, #0
 801a8e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a8ea:	f7fd fb8d 	bl	8018008 <xQueueGenericSend>
 801a8ee:	6278      	str	r0, [r7, #36]	; 0x24
 801a8f0:	e012      	b.n	801a918 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a8f2:	4b0c      	ldr	r3, [pc, #48]	; (801a924 <xTimerGenericCommand+0x98>)
 801a8f4:	6818      	ldr	r0, [r3, #0]
 801a8f6:	f107 0110 	add.w	r1, r7, #16
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	2200      	movs	r2, #0
 801a8fe:	f7fd fb83 	bl	8018008 <xQueueGenericSend>
 801a902:	6278      	str	r0, [r7, #36]	; 0x24
 801a904:	e008      	b.n	801a918 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a906:	4b07      	ldr	r3, [pc, #28]	; (801a924 <xTimerGenericCommand+0x98>)
 801a908:	6818      	ldr	r0, [r3, #0]
 801a90a:	f107 0110 	add.w	r1, r7, #16
 801a90e:	2300      	movs	r3, #0
 801a910:	683a      	ldr	r2, [r7, #0]
 801a912:	f7fd fc77 	bl	8018204 <xQueueGenericSendFromISR>
 801a916:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a91a:	4618      	mov	r0, r3
 801a91c:	3728      	adds	r7, #40	; 0x28
 801a91e:	46bd      	mov	sp, r7
 801a920:	bd80      	pop	{r7, pc}
 801a922:	bf00      	nop
 801a924:	200024c4 	.word	0x200024c4

0801a928 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801a928:	b580      	push	{r7, lr}
 801a92a:	b088      	sub	sp, #32
 801a92c:	af02      	add	r7, sp, #8
 801a92e:	6078      	str	r0, [r7, #4]
 801a930:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a932:	4b22      	ldr	r3, [pc, #136]	; (801a9bc <prvProcessExpiredTimer+0x94>)
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	68db      	ldr	r3, [r3, #12]
 801a938:	68db      	ldr	r3, [r3, #12]
 801a93a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a93c:	697b      	ldr	r3, [r7, #20]
 801a93e:	3304      	adds	r3, #4
 801a940:	4618      	mov	r0, r3
 801a942:	f7fd f8d9 	bl	8017af8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a946:	697b      	ldr	r3, [r7, #20]
 801a948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a94c:	f003 0304 	and.w	r3, r3, #4
 801a950:	2b00      	cmp	r3, #0
 801a952:	d022      	beq.n	801a99a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a954:	697b      	ldr	r3, [r7, #20]
 801a956:	699a      	ldr	r2, [r3, #24]
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	18d1      	adds	r1, r2, r3
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	683a      	ldr	r2, [r7, #0]
 801a960:	6978      	ldr	r0, [r7, #20]
 801a962:	f000 f8d1 	bl	801ab08 <prvInsertTimerInActiveList>
 801a966:	4603      	mov	r3, r0
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d01f      	beq.n	801a9ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801a96c:	2300      	movs	r3, #0
 801a96e:	9300      	str	r3, [sp, #0]
 801a970:	2300      	movs	r3, #0
 801a972:	687a      	ldr	r2, [r7, #4]
 801a974:	2100      	movs	r1, #0
 801a976:	6978      	ldr	r0, [r7, #20]
 801a978:	f7ff ff88 	bl	801a88c <xTimerGenericCommand>
 801a97c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801a97e:	693b      	ldr	r3, [r7, #16]
 801a980:	2b00      	cmp	r3, #0
 801a982:	d113      	bne.n	801a9ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 801a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a988:	f383 8811 	msr	BASEPRI, r3
 801a98c:	f3bf 8f6f 	isb	sy
 801a990:	f3bf 8f4f 	dsb	sy
 801a994:	60fb      	str	r3, [r7, #12]
}
 801a996:	bf00      	nop
 801a998:	e7fe      	b.n	801a998 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801a99a:	697b      	ldr	r3, [r7, #20]
 801a99c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a9a0:	f023 0301 	bic.w	r3, r3, #1
 801a9a4:	b2da      	uxtb	r2, r3
 801a9a6:	697b      	ldr	r3, [r7, #20]
 801a9a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801a9ac:	697b      	ldr	r3, [r7, #20]
 801a9ae:	6a1b      	ldr	r3, [r3, #32]
 801a9b0:	6978      	ldr	r0, [r7, #20]
 801a9b2:	4798      	blx	r3
}
 801a9b4:	bf00      	nop
 801a9b6:	3718      	adds	r7, #24
 801a9b8:	46bd      	mov	sp, r7
 801a9ba:	bd80      	pop	{r7, pc}
 801a9bc:	200024bc 	.word	0x200024bc

0801a9c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801a9c0:	b580      	push	{r7, lr}
 801a9c2:	b084      	sub	sp, #16
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a9c8:	f107 0308 	add.w	r3, r7, #8
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	f000 f857 	bl	801aa80 <prvGetNextExpireTime>
 801a9d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801a9d4:	68bb      	ldr	r3, [r7, #8]
 801a9d6:	4619      	mov	r1, r3
 801a9d8:	68f8      	ldr	r0, [r7, #12]
 801a9da:	f000 f803 	bl	801a9e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801a9de:	f000 f8d5 	bl	801ab8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801a9e2:	e7f1      	b.n	801a9c8 <prvTimerTask+0x8>

0801a9e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801a9e4:	b580      	push	{r7, lr}
 801a9e6:	b084      	sub	sp, #16
 801a9e8:	af00      	add	r7, sp, #0
 801a9ea:	6078      	str	r0, [r7, #4]
 801a9ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801a9ee:	f7fe ff95 	bl	801991c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801a9f2:	f107 0308 	add.w	r3, r7, #8
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	f000 f866 	bl	801aac8 <prvSampleTimeNow>
 801a9fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801a9fe:	68bb      	ldr	r3, [r7, #8]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d130      	bne.n	801aa66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801aa04:	683b      	ldr	r3, [r7, #0]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d10a      	bne.n	801aa20 <prvProcessTimerOrBlockTask+0x3c>
 801aa0a:	687a      	ldr	r2, [r7, #4]
 801aa0c:	68fb      	ldr	r3, [r7, #12]
 801aa0e:	429a      	cmp	r2, r3
 801aa10:	d806      	bhi.n	801aa20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801aa12:	f7fe ff91 	bl	8019938 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801aa16:	68f9      	ldr	r1, [r7, #12]
 801aa18:	6878      	ldr	r0, [r7, #4]
 801aa1a:	f7ff ff85 	bl	801a928 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801aa1e:	e024      	b.n	801aa6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801aa20:	683b      	ldr	r3, [r7, #0]
 801aa22:	2b00      	cmp	r3, #0
 801aa24:	d008      	beq.n	801aa38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801aa26:	4b13      	ldr	r3, [pc, #76]	; (801aa74 <prvProcessTimerOrBlockTask+0x90>)
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	2b00      	cmp	r3, #0
 801aa2e:	d101      	bne.n	801aa34 <prvProcessTimerOrBlockTask+0x50>
 801aa30:	2301      	movs	r3, #1
 801aa32:	e000      	b.n	801aa36 <prvProcessTimerOrBlockTask+0x52>
 801aa34:	2300      	movs	r3, #0
 801aa36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801aa38:	4b0f      	ldr	r3, [pc, #60]	; (801aa78 <prvProcessTimerOrBlockTask+0x94>)
 801aa3a:	6818      	ldr	r0, [r3, #0]
 801aa3c:	687a      	ldr	r2, [r7, #4]
 801aa3e:	68fb      	ldr	r3, [r7, #12]
 801aa40:	1ad3      	subs	r3, r2, r3
 801aa42:	683a      	ldr	r2, [r7, #0]
 801aa44:	4619      	mov	r1, r3
 801aa46:	f7fe f94d 	bl	8018ce4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801aa4a:	f7fe ff75 	bl	8019938 <xTaskResumeAll>
 801aa4e:	4603      	mov	r3, r0
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d10a      	bne.n	801aa6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801aa54:	4b09      	ldr	r3, [pc, #36]	; (801aa7c <prvProcessTimerOrBlockTask+0x98>)
 801aa56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aa5a:	601a      	str	r2, [r3, #0]
 801aa5c:	f3bf 8f4f 	dsb	sy
 801aa60:	f3bf 8f6f 	isb	sy
}
 801aa64:	e001      	b.n	801aa6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801aa66:	f7fe ff67 	bl	8019938 <xTaskResumeAll>
}
 801aa6a:	bf00      	nop
 801aa6c:	3710      	adds	r7, #16
 801aa6e:	46bd      	mov	sp, r7
 801aa70:	bd80      	pop	{r7, pc}
 801aa72:	bf00      	nop
 801aa74:	200024c0 	.word	0x200024c0
 801aa78:	200024c4 	.word	0x200024c4
 801aa7c:	e000ed04 	.word	0xe000ed04

0801aa80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801aa80:	b480      	push	{r7}
 801aa82:	b085      	sub	sp, #20
 801aa84:	af00      	add	r7, sp, #0
 801aa86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801aa88:	4b0e      	ldr	r3, [pc, #56]	; (801aac4 <prvGetNextExpireTime+0x44>)
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d101      	bne.n	801aa96 <prvGetNextExpireTime+0x16>
 801aa92:	2201      	movs	r2, #1
 801aa94:	e000      	b.n	801aa98 <prvGetNextExpireTime+0x18>
 801aa96:	2200      	movs	r2, #0
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d105      	bne.n	801aab0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801aaa4:	4b07      	ldr	r3, [pc, #28]	; (801aac4 <prvGetNextExpireTime+0x44>)
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	68db      	ldr	r3, [r3, #12]
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	60fb      	str	r3, [r7, #12]
 801aaae:	e001      	b.n	801aab4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801aab0:	2300      	movs	r3, #0
 801aab2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801aab4:	68fb      	ldr	r3, [r7, #12]
}
 801aab6:	4618      	mov	r0, r3
 801aab8:	3714      	adds	r7, #20
 801aaba:	46bd      	mov	sp, r7
 801aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aac0:	4770      	bx	lr
 801aac2:	bf00      	nop
 801aac4:	200024bc 	.word	0x200024bc

0801aac8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801aac8:	b580      	push	{r7, lr}
 801aaca:	b084      	sub	sp, #16
 801aacc:	af00      	add	r7, sp, #0
 801aace:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801aad0:	f7fe ffd0 	bl	8019a74 <xTaskGetTickCount>
 801aad4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801aad6:	4b0b      	ldr	r3, [pc, #44]	; (801ab04 <prvSampleTimeNow+0x3c>)
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	68fa      	ldr	r2, [r7, #12]
 801aadc:	429a      	cmp	r2, r3
 801aade:	d205      	bcs.n	801aaec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801aae0:	f000 f936 	bl	801ad50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	2201      	movs	r2, #1
 801aae8:	601a      	str	r2, [r3, #0]
 801aaea:	e002      	b.n	801aaf2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	2200      	movs	r2, #0
 801aaf0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801aaf2:	4a04      	ldr	r2, [pc, #16]	; (801ab04 <prvSampleTimeNow+0x3c>)
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801aaf8:	68fb      	ldr	r3, [r7, #12]
}
 801aafa:	4618      	mov	r0, r3
 801aafc:	3710      	adds	r7, #16
 801aafe:	46bd      	mov	sp, r7
 801ab00:	bd80      	pop	{r7, pc}
 801ab02:	bf00      	nop
 801ab04:	200024cc 	.word	0x200024cc

0801ab08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b086      	sub	sp, #24
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	60f8      	str	r0, [r7, #12]
 801ab10:	60b9      	str	r1, [r7, #8]
 801ab12:	607a      	str	r2, [r7, #4]
 801ab14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801ab16:	2300      	movs	r3, #0
 801ab18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801ab1a:	68fb      	ldr	r3, [r7, #12]
 801ab1c:	68ba      	ldr	r2, [r7, #8]
 801ab1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	68fa      	ldr	r2, [r7, #12]
 801ab24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801ab26:	68ba      	ldr	r2, [r7, #8]
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	429a      	cmp	r2, r3
 801ab2c:	d812      	bhi.n	801ab54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ab2e:	687a      	ldr	r2, [r7, #4]
 801ab30:	683b      	ldr	r3, [r7, #0]
 801ab32:	1ad2      	subs	r2, r2, r3
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	699b      	ldr	r3, [r3, #24]
 801ab38:	429a      	cmp	r2, r3
 801ab3a:	d302      	bcc.n	801ab42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801ab3c:	2301      	movs	r3, #1
 801ab3e:	617b      	str	r3, [r7, #20]
 801ab40:	e01b      	b.n	801ab7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801ab42:	4b10      	ldr	r3, [pc, #64]	; (801ab84 <prvInsertTimerInActiveList+0x7c>)
 801ab44:	681a      	ldr	r2, [r3, #0]
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	3304      	adds	r3, #4
 801ab4a:	4619      	mov	r1, r3
 801ab4c:	4610      	mov	r0, r2
 801ab4e:	f7fc ff9a 	bl	8017a86 <vListInsert>
 801ab52:	e012      	b.n	801ab7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801ab54:	687a      	ldr	r2, [r7, #4]
 801ab56:	683b      	ldr	r3, [r7, #0]
 801ab58:	429a      	cmp	r2, r3
 801ab5a:	d206      	bcs.n	801ab6a <prvInsertTimerInActiveList+0x62>
 801ab5c:	68ba      	ldr	r2, [r7, #8]
 801ab5e:	683b      	ldr	r3, [r7, #0]
 801ab60:	429a      	cmp	r2, r3
 801ab62:	d302      	bcc.n	801ab6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801ab64:	2301      	movs	r3, #1
 801ab66:	617b      	str	r3, [r7, #20]
 801ab68:	e007      	b.n	801ab7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ab6a:	4b07      	ldr	r3, [pc, #28]	; (801ab88 <prvInsertTimerInActiveList+0x80>)
 801ab6c:	681a      	ldr	r2, [r3, #0]
 801ab6e:	68fb      	ldr	r3, [r7, #12]
 801ab70:	3304      	adds	r3, #4
 801ab72:	4619      	mov	r1, r3
 801ab74:	4610      	mov	r0, r2
 801ab76:	f7fc ff86 	bl	8017a86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801ab7a:	697b      	ldr	r3, [r7, #20]
}
 801ab7c:	4618      	mov	r0, r3
 801ab7e:	3718      	adds	r7, #24
 801ab80:	46bd      	mov	sp, r7
 801ab82:	bd80      	pop	{r7, pc}
 801ab84:	200024c0 	.word	0x200024c0
 801ab88:	200024bc 	.word	0x200024bc

0801ab8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801ab8c:	b580      	push	{r7, lr}
 801ab8e:	b08e      	sub	sp, #56	; 0x38
 801ab90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ab92:	e0ca      	b.n	801ad2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	da18      	bge.n	801abcc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801ab9a:	1d3b      	adds	r3, r7, #4
 801ab9c:	3304      	adds	r3, #4
 801ab9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801aba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d10a      	bne.n	801abbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 801aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 801abaa:	f383 8811 	msr	BASEPRI, r3
 801abae:	f3bf 8f6f 	isb	sy
 801abb2:	f3bf 8f4f 	dsb	sy
 801abb6:	61fb      	str	r3, [r7, #28]
}
 801abb8:	bf00      	nop
 801abba:	e7fe      	b.n	801abba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801abc2:	6850      	ldr	r0, [r2, #4]
 801abc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801abc6:	6892      	ldr	r2, [r2, #8]
 801abc8:	4611      	mov	r1, r2
 801abca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	f2c0 80aa 	blt.w	801ad28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801abd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abda:	695b      	ldr	r3, [r3, #20]
 801abdc:	2b00      	cmp	r3, #0
 801abde:	d004      	beq.n	801abea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801abe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abe2:	3304      	adds	r3, #4
 801abe4:	4618      	mov	r0, r3
 801abe6:	f7fc ff87 	bl	8017af8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801abea:	463b      	mov	r3, r7
 801abec:	4618      	mov	r0, r3
 801abee:	f7ff ff6b 	bl	801aac8 <prvSampleTimeNow>
 801abf2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	2b09      	cmp	r3, #9
 801abf8:	f200 8097 	bhi.w	801ad2a <prvProcessReceivedCommands+0x19e>
 801abfc:	a201      	add	r2, pc, #4	; (adr r2, 801ac04 <prvProcessReceivedCommands+0x78>)
 801abfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac02:	bf00      	nop
 801ac04:	0801ac2d 	.word	0x0801ac2d
 801ac08:	0801ac2d 	.word	0x0801ac2d
 801ac0c:	0801ac2d 	.word	0x0801ac2d
 801ac10:	0801aca1 	.word	0x0801aca1
 801ac14:	0801acb5 	.word	0x0801acb5
 801ac18:	0801acff 	.word	0x0801acff
 801ac1c:	0801ac2d 	.word	0x0801ac2d
 801ac20:	0801ac2d 	.word	0x0801ac2d
 801ac24:	0801aca1 	.word	0x0801aca1
 801ac28:	0801acb5 	.word	0x0801acb5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801ac2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ac32:	f043 0301 	orr.w	r3, r3, #1
 801ac36:	b2da      	uxtb	r2, r3
 801ac38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801ac3e:	68ba      	ldr	r2, [r7, #8]
 801ac40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac42:	699b      	ldr	r3, [r3, #24]
 801ac44:	18d1      	adds	r1, r2, r3
 801ac46:	68bb      	ldr	r3, [r7, #8]
 801ac48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ac4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ac4c:	f7ff ff5c 	bl	801ab08 <prvInsertTimerInActiveList>
 801ac50:	4603      	mov	r3, r0
 801ac52:	2b00      	cmp	r3, #0
 801ac54:	d069      	beq.n	801ad2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ac56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac58:	6a1b      	ldr	r3, [r3, #32]
 801ac5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ac5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ac64:	f003 0304 	and.w	r3, r3, #4
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	d05e      	beq.n	801ad2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801ac6c:	68ba      	ldr	r2, [r7, #8]
 801ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac70:	699b      	ldr	r3, [r3, #24]
 801ac72:	441a      	add	r2, r3
 801ac74:	2300      	movs	r3, #0
 801ac76:	9300      	str	r3, [sp, #0]
 801ac78:	2300      	movs	r3, #0
 801ac7a:	2100      	movs	r1, #0
 801ac7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ac7e:	f7ff fe05 	bl	801a88c <xTimerGenericCommand>
 801ac82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801ac84:	6a3b      	ldr	r3, [r7, #32]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d14f      	bne.n	801ad2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac8e:	f383 8811 	msr	BASEPRI, r3
 801ac92:	f3bf 8f6f 	isb	sy
 801ac96:	f3bf 8f4f 	dsb	sy
 801ac9a:	61bb      	str	r3, [r7, #24]
}
 801ac9c:	bf00      	nop
 801ac9e:	e7fe      	b.n	801ac9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801aca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aca6:	f023 0301 	bic.w	r3, r3, #1
 801acaa:	b2da      	uxtb	r2, r3
 801acac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801acb2:	e03a      	b.n	801ad2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801acba:	f043 0301 	orr.w	r3, r3, #1
 801acbe:	b2da      	uxtb	r2, r3
 801acc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801acc6:	68ba      	ldr	r2, [r7, #8]
 801acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801accc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acce:	699b      	ldr	r3, [r3, #24]
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d10a      	bne.n	801acea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801acd8:	f383 8811 	msr	BASEPRI, r3
 801acdc:	f3bf 8f6f 	isb	sy
 801ace0:	f3bf 8f4f 	dsb	sy
 801ace4:	617b      	str	r3, [r7, #20]
}
 801ace6:	bf00      	nop
 801ace8:	e7fe      	b.n	801ace8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801acea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acec:	699a      	ldr	r2, [r3, #24]
 801acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf0:	18d1      	adds	r1, r2, r3
 801acf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801acf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801acf8:	f7ff ff06 	bl	801ab08 <prvInsertTimerInActiveList>
					break;
 801acfc:	e015      	b.n	801ad2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad04:	f003 0302 	and.w	r3, r3, #2
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d103      	bne.n	801ad14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801ad0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ad0e:	f000 fbe3 	bl	801b4d8 <vPortFree>
 801ad12:	e00a      	b.n	801ad2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ad14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad1a:	f023 0301 	bic.w	r3, r3, #1
 801ad1e:	b2da      	uxtb	r2, r3
 801ad20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801ad26:	e000      	b.n	801ad2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801ad28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ad2a:	4b08      	ldr	r3, [pc, #32]	; (801ad4c <prvProcessReceivedCommands+0x1c0>)
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	1d39      	adds	r1, r7, #4
 801ad30:	2200      	movs	r2, #0
 801ad32:	4618      	mov	r0, r3
 801ad34:	f7fd fb8e 	bl	8018454 <xQueueReceive>
 801ad38:	4603      	mov	r3, r0
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	f47f af2a 	bne.w	801ab94 <prvProcessReceivedCommands+0x8>
	}
}
 801ad40:	bf00      	nop
 801ad42:	bf00      	nop
 801ad44:	3730      	adds	r7, #48	; 0x30
 801ad46:	46bd      	mov	sp, r7
 801ad48:	bd80      	pop	{r7, pc}
 801ad4a:	bf00      	nop
 801ad4c:	200024c4 	.word	0x200024c4

0801ad50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b088      	sub	sp, #32
 801ad54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ad56:	e048      	b.n	801adea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ad58:	4b2d      	ldr	r3, [pc, #180]	; (801ae10 <prvSwitchTimerLists+0xc0>)
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	68db      	ldr	r3, [r3, #12]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ad62:	4b2b      	ldr	r3, [pc, #172]	; (801ae10 <prvSwitchTimerLists+0xc0>)
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	68db      	ldr	r3, [r3, #12]
 801ad68:	68db      	ldr	r3, [r3, #12]
 801ad6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ad6c:	68fb      	ldr	r3, [r7, #12]
 801ad6e:	3304      	adds	r3, #4
 801ad70:	4618      	mov	r0, r3
 801ad72:	f7fc fec1 	bl	8017af8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ad76:	68fb      	ldr	r3, [r7, #12]
 801ad78:	6a1b      	ldr	r3, [r3, #32]
 801ad7a:	68f8      	ldr	r0, [r7, #12]
 801ad7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ad7e:	68fb      	ldr	r3, [r7, #12]
 801ad80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad84:	f003 0304 	and.w	r3, r3, #4
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	d02e      	beq.n	801adea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	699b      	ldr	r3, [r3, #24]
 801ad90:	693a      	ldr	r2, [r7, #16]
 801ad92:	4413      	add	r3, r2
 801ad94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801ad96:	68ba      	ldr	r2, [r7, #8]
 801ad98:	693b      	ldr	r3, [r7, #16]
 801ad9a:	429a      	cmp	r2, r3
 801ad9c:	d90e      	bls.n	801adbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801ad9e:	68fb      	ldr	r3, [r7, #12]
 801ada0:	68ba      	ldr	r2, [r7, #8]
 801ada2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	68fa      	ldr	r2, [r7, #12]
 801ada8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801adaa:	4b19      	ldr	r3, [pc, #100]	; (801ae10 <prvSwitchTimerLists+0xc0>)
 801adac:	681a      	ldr	r2, [r3, #0]
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	3304      	adds	r3, #4
 801adb2:	4619      	mov	r1, r3
 801adb4:	4610      	mov	r0, r2
 801adb6:	f7fc fe66 	bl	8017a86 <vListInsert>
 801adba:	e016      	b.n	801adea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801adbc:	2300      	movs	r3, #0
 801adbe:	9300      	str	r3, [sp, #0]
 801adc0:	2300      	movs	r3, #0
 801adc2:	693a      	ldr	r2, [r7, #16]
 801adc4:	2100      	movs	r1, #0
 801adc6:	68f8      	ldr	r0, [r7, #12]
 801adc8:	f7ff fd60 	bl	801a88c <xTimerGenericCommand>
 801adcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d10a      	bne.n	801adea <prvSwitchTimerLists+0x9a>
	__asm volatile
 801add4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801add8:	f383 8811 	msr	BASEPRI, r3
 801addc:	f3bf 8f6f 	isb	sy
 801ade0:	f3bf 8f4f 	dsb	sy
 801ade4:	603b      	str	r3, [r7, #0]
}
 801ade6:	bf00      	nop
 801ade8:	e7fe      	b.n	801ade8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801adea:	4b09      	ldr	r3, [pc, #36]	; (801ae10 <prvSwitchTimerLists+0xc0>)
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d1b1      	bne.n	801ad58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801adf4:	4b06      	ldr	r3, [pc, #24]	; (801ae10 <prvSwitchTimerLists+0xc0>)
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801adfa:	4b06      	ldr	r3, [pc, #24]	; (801ae14 <prvSwitchTimerLists+0xc4>)
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	4a04      	ldr	r2, [pc, #16]	; (801ae10 <prvSwitchTimerLists+0xc0>)
 801ae00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801ae02:	4a04      	ldr	r2, [pc, #16]	; (801ae14 <prvSwitchTimerLists+0xc4>)
 801ae04:	697b      	ldr	r3, [r7, #20]
 801ae06:	6013      	str	r3, [r2, #0]
}
 801ae08:	bf00      	nop
 801ae0a:	3718      	adds	r7, #24
 801ae0c:	46bd      	mov	sp, r7
 801ae0e:	bd80      	pop	{r7, pc}
 801ae10:	200024bc 	.word	0x200024bc
 801ae14:	200024c0 	.word	0x200024c0

0801ae18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b082      	sub	sp, #8
 801ae1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801ae1e:	f000 f969 	bl	801b0f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801ae22:	4b15      	ldr	r3, [pc, #84]	; (801ae78 <prvCheckForValidListAndQueue+0x60>)
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d120      	bne.n	801ae6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801ae2a:	4814      	ldr	r0, [pc, #80]	; (801ae7c <prvCheckForValidListAndQueue+0x64>)
 801ae2c:	f7fc fdda 	bl	80179e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801ae30:	4813      	ldr	r0, [pc, #76]	; (801ae80 <prvCheckForValidListAndQueue+0x68>)
 801ae32:	f7fc fdd7 	bl	80179e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801ae36:	4b13      	ldr	r3, [pc, #76]	; (801ae84 <prvCheckForValidListAndQueue+0x6c>)
 801ae38:	4a10      	ldr	r2, [pc, #64]	; (801ae7c <prvCheckForValidListAndQueue+0x64>)
 801ae3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801ae3c:	4b12      	ldr	r3, [pc, #72]	; (801ae88 <prvCheckForValidListAndQueue+0x70>)
 801ae3e:	4a10      	ldr	r2, [pc, #64]	; (801ae80 <prvCheckForValidListAndQueue+0x68>)
 801ae40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801ae42:	2300      	movs	r3, #0
 801ae44:	9300      	str	r3, [sp, #0]
 801ae46:	4b11      	ldr	r3, [pc, #68]	; (801ae8c <prvCheckForValidListAndQueue+0x74>)
 801ae48:	4a11      	ldr	r2, [pc, #68]	; (801ae90 <prvCheckForValidListAndQueue+0x78>)
 801ae4a:	2110      	movs	r1, #16
 801ae4c:	200a      	movs	r0, #10
 801ae4e:	f7fc fee5 	bl	8017c1c <xQueueGenericCreateStatic>
 801ae52:	4603      	mov	r3, r0
 801ae54:	4a08      	ldr	r2, [pc, #32]	; (801ae78 <prvCheckForValidListAndQueue+0x60>)
 801ae56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801ae58:	4b07      	ldr	r3, [pc, #28]	; (801ae78 <prvCheckForValidListAndQueue+0x60>)
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d005      	beq.n	801ae6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801ae60:	4b05      	ldr	r3, [pc, #20]	; (801ae78 <prvCheckForValidListAndQueue+0x60>)
 801ae62:	681b      	ldr	r3, [r3, #0]
 801ae64:	490b      	ldr	r1, [pc, #44]	; (801ae94 <prvCheckForValidListAndQueue+0x7c>)
 801ae66:	4618      	mov	r0, r3
 801ae68:	f7fd fee8 	bl	8018c3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801ae6c:	f000 f972 	bl	801b154 <vPortExitCritical>
}
 801ae70:	bf00      	nop
 801ae72:	46bd      	mov	sp, r7
 801ae74:	bd80      	pop	{r7, pc}
 801ae76:	bf00      	nop
 801ae78:	200024c4 	.word	0x200024c4
 801ae7c:	20002494 	.word	0x20002494
 801ae80:	200024a8 	.word	0x200024a8
 801ae84:	200024bc 	.word	0x200024bc
 801ae88:	200024c0 	.word	0x200024c0
 801ae8c:	20002570 	.word	0x20002570
 801ae90:	200024d0 	.word	0x200024d0
 801ae94:	0801f100 	.word	0x0801f100

0801ae98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801ae98:	b480      	push	{r7}
 801ae9a:	b085      	sub	sp, #20
 801ae9c:	af00      	add	r7, sp, #0
 801ae9e:	60f8      	str	r0, [r7, #12]
 801aea0:	60b9      	str	r1, [r7, #8]
 801aea2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801aea4:	68fb      	ldr	r3, [r7, #12]
 801aea6:	3b04      	subs	r3, #4
 801aea8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801aeb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	3b04      	subs	r3, #4
 801aeb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801aeb8:	68bb      	ldr	r3, [r7, #8]
 801aeba:	f023 0201 	bic.w	r2, r3, #1
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801aec2:	68fb      	ldr	r3, [r7, #12]
 801aec4:	3b04      	subs	r3, #4
 801aec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801aec8:	4a0c      	ldr	r2, [pc, #48]	; (801aefc <pxPortInitialiseStack+0x64>)
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	3b14      	subs	r3, #20
 801aed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801aed4:	687a      	ldr	r2, [r7, #4]
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801aeda:	68fb      	ldr	r3, [r7, #12]
 801aedc:	3b04      	subs	r3, #4
 801aede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	f06f 0202 	mvn.w	r2, #2
 801aee6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	3b20      	subs	r3, #32
 801aeec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801aeee:	68fb      	ldr	r3, [r7, #12]
}
 801aef0:	4618      	mov	r0, r3
 801aef2:	3714      	adds	r7, #20
 801aef4:	46bd      	mov	sp, r7
 801aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefa:	4770      	bx	lr
 801aefc:	0801af01 	.word	0x0801af01

0801af00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801af00:	b480      	push	{r7}
 801af02:	b085      	sub	sp, #20
 801af04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801af06:	2300      	movs	r3, #0
 801af08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801af0a:	4b12      	ldr	r3, [pc, #72]	; (801af54 <prvTaskExitError+0x54>)
 801af0c:	681b      	ldr	r3, [r3, #0]
 801af0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801af12:	d00a      	beq.n	801af2a <prvTaskExitError+0x2a>
	__asm volatile
 801af14:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af18:	f383 8811 	msr	BASEPRI, r3
 801af1c:	f3bf 8f6f 	isb	sy
 801af20:	f3bf 8f4f 	dsb	sy
 801af24:	60fb      	str	r3, [r7, #12]
}
 801af26:	bf00      	nop
 801af28:	e7fe      	b.n	801af28 <prvTaskExitError+0x28>
	__asm volatile
 801af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801af2e:	f383 8811 	msr	BASEPRI, r3
 801af32:	f3bf 8f6f 	isb	sy
 801af36:	f3bf 8f4f 	dsb	sy
 801af3a:	60bb      	str	r3, [r7, #8]
}
 801af3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801af3e:	bf00      	nop
 801af40:	687b      	ldr	r3, [r7, #4]
 801af42:	2b00      	cmp	r3, #0
 801af44:	d0fc      	beq.n	801af40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801af46:	bf00      	nop
 801af48:	bf00      	nop
 801af4a:	3714      	adds	r7, #20
 801af4c:	46bd      	mov	sp, r7
 801af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af52:	4770      	bx	lr
 801af54:	20000028 	.word	0x20000028
	...

0801af60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801af60:	4b07      	ldr	r3, [pc, #28]	; (801af80 <pxCurrentTCBConst2>)
 801af62:	6819      	ldr	r1, [r3, #0]
 801af64:	6808      	ldr	r0, [r1, #0]
 801af66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af6a:	f380 8809 	msr	PSP, r0
 801af6e:	f3bf 8f6f 	isb	sy
 801af72:	f04f 0000 	mov.w	r0, #0
 801af76:	f380 8811 	msr	BASEPRI, r0
 801af7a:	4770      	bx	lr
 801af7c:	f3af 8000 	nop.w

0801af80 <pxCurrentTCBConst2>:
 801af80:	20001f8c 	.word	0x20001f8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801af84:	bf00      	nop
 801af86:	bf00      	nop

0801af88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801af88:	4808      	ldr	r0, [pc, #32]	; (801afac <prvPortStartFirstTask+0x24>)
 801af8a:	6800      	ldr	r0, [r0, #0]
 801af8c:	6800      	ldr	r0, [r0, #0]
 801af8e:	f380 8808 	msr	MSP, r0
 801af92:	f04f 0000 	mov.w	r0, #0
 801af96:	f380 8814 	msr	CONTROL, r0
 801af9a:	b662      	cpsie	i
 801af9c:	b661      	cpsie	f
 801af9e:	f3bf 8f4f 	dsb	sy
 801afa2:	f3bf 8f6f 	isb	sy
 801afa6:	df00      	svc	0
 801afa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801afaa:	bf00      	nop
 801afac:	e000ed08 	.word	0xe000ed08

0801afb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801afb0:	b580      	push	{r7, lr}
 801afb2:	b086      	sub	sp, #24
 801afb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801afb6:	4b46      	ldr	r3, [pc, #280]	; (801b0d0 <xPortStartScheduler+0x120>)
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	4a46      	ldr	r2, [pc, #280]	; (801b0d4 <xPortStartScheduler+0x124>)
 801afbc:	4293      	cmp	r3, r2
 801afbe:	d10a      	bne.n	801afd6 <xPortStartScheduler+0x26>
	__asm volatile
 801afc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afc4:	f383 8811 	msr	BASEPRI, r3
 801afc8:	f3bf 8f6f 	isb	sy
 801afcc:	f3bf 8f4f 	dsb	sy
 801afd0:	613b      	str	r3, [r7, #16]
}
 801afd2:	bf00      	nop
 801afd4:	e7fe      	b.n	801afd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801afd6:	4b3e      	ldr	r3, [pc, #248]	; (801b0d0 <xPortStartScheduler+0x120>)
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	4a3f      	ldr	r2, [pc, #252]	; (801b0d8 <xPortStartScheduler+0x128>)
 801afdc:	4293      	cmp	r3, r2
 801afde:	d10a      	bne.n	801aff6 <xPortStartScheduler+0x46>
	__asm volatile
 801afe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801afe4:	f383 8811 	msr	BASEPRI, r3
 801afe8:	f3bf 8f6f 	isb	sy
 801afec:	f3bf 8f4f 	dsb	sy
 801aff0:	60fb      	str	r3, [r7, #12]
}
 801aff2:	bf00      	nop
 801aff4:	e7fe      	b.n	801aff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801aff6:	4b39      	ldr	r3, [pc, #228]	; (801b0dc <xPortStartScheduler+0x12c>)
 801aff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801affa:	697b      	ldr	r3, [r7, #20]
 801affc:	781b      	ldrb	r3, [r3, #0]
 801affe:	b2db      	uxtb	r3, r3
 801b000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b002:	697b      	ldr	r3, [r7, #20]
 801b004:	22ff      	movs	r2, #255	; 0xff
 801b006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b008:	697b      	ldr	r3, [r7, #20]
 801b00a:	781b      	ldrb	r3, [r3, #0]
 801b00c:	b2db      	uxtb	r3, r3
 801b00e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b010:	78fb      	ldrb	r3, [r7, #3]
 801b012:	b2db      	uxtb	r3, r3
 801b014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b018:	b2da      	uxtb	r2, r3
 801b01a:	4b31      	ldr	r3, [pc, #196]	; (801b0e0 <xPortStartScheduler+0x130>)
 801b01c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b01e:	4b31      	ldr	r3, [pc, #196]	; (801b0e4 <xPortStartScheduler+0x134>)
 801b020:	2207      	movs	r2, #7
 801b022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b024:	e009      	b.n	801b03a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801b026:	4b2f      	ldr	r3, [pc, #188]	; (801b0e4 <xPortStartScheduler+0x134>)
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	3b01      	subs	r3, #1
 801b02c:	4a2d      	ldr	r2, [pc, #180]	; (801b0e4 <xPortStartScheduler+0x134>)
 801b02e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b030:	78fb      	ldrb	r3, [r7, #3]
 801b032:	b2db      	uxtb	r3, r3
 801b034:	005b      	lsls	r3, r3, #1
 801b036:	b2db      	uxtb	r3, r3
 801b038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b03a:	78fb      	ldrb	r3, [r7, #3]
 801b03c:	b2db      	uxtb	r3, r3
 801b03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b042:	2b80      	cmp	r3, #128	; 0x80
 801b044:	d0ef      	beq.n	801b026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b046:	4b27      	ldr	r3, [pc, #156]	; (801b0e4 <xPortStartScheduler+0x134>)
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	f1c3 0307 	rsb	r3, r3, #7
 801b04e:	2b04      	cmp	r3, #4
 801b050:	d00a      	beq.n	801b068 <xPortStartScheduler+0xb8>
	__asm volatile
 801b052:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b056:	f383 8811 	msr	BASEPRI, r3
 801b05a:	f3bf 8f6f 	isb	sy
 801b05e:	f3bf 8f4f 	dsb	sy
 801b062:	60bb      	str	r3, [r7, #8]
}
 801b064:	bf00      	nop
 801b066:	e7fe      	b.n	801b066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b068:	4b1e      	ldr	r3, [pc, #120]	; (801b0e4 <xPortStartScheduler+0x134>)
 801b06a:	681b      	ldr	r3, [r3, #0]
 801b06c:	021b      	lsls	r3, r3, #8
 801b06e:	4a1d      	ldr	r2, [pc, #116]	; (801b0e4 <xPortStartScheduler+0x134>)
 801b070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b072:	4b1c      	ldr	r3, [pc, #112]	; (801b0e4 <xPortStartScheduler+0x134>)
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b07a:	4a1a      	ldr	r2, [pc, #104]	; (801b0e4 <xPortStartScheduler+0x134>)
 801b07c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	b2da      	uxtb	r2, r3
 801b082:	697b      	ldr	r3, [r7, #20]
 801b084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b086:	4b18      	ldr	r3, [pc, #96]	; (801b0e8 <xPortStartScheduler+0x138>)
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	4a17      	ldr	r2, [pc, #92]	; (801b0e8 <xPortStartScheduler+0x138>)
 801b08c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b092:	4b15      	ldr	r3, [pc, #84]	; (801b0e8 <xPortStartScheduler+0x138>)
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	4a14      	ldr	r2, [pc, #80]	; (801b0e8 <xPortStartScheduler+0x138>)
 801b098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b09c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b09e:	f000 f8dd 	bl	801b25c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b0a2:	4b12      	ldr	r3, [pc, #72]	; (801b0ec <xPortStartScheduler+0x13c>)
 801b0a4:	2200      	movs	r2, #0
 801b0a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b0a8:	f000 f8fc 	bl	801b2a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b0ac:	4b10      	ldr	r3, [pc, #64]	; (801b0f0 <xPortStartScheduler+0x140>)
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	4a0f      	ldr	r2, [pc, #60]	; (801b0f0 <xPortStartScheduler+0x140>)
 801b0b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b0b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b0b8:	f7ff ff66 	bl	801af88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b0bc:	f7fe fda4 	bl	8019c08 <vTaskSwitchContext>
	prvTaskExitError();
 801b0c0:	f7ff ff1e 	bl	801af00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b0c4:	2300      	movs	r3, #0
}
 801b0c6:	4618      	mov	r0, r3
 801b0c8:	3718      	adds	r7, #24
 801b0ca:	46bd      	mov	sp, r7
 801b0cc:	bd80      	pop	{r7, pc}
 801b0ce:	bf00      	nop
 801b0d0:	e000ed00 	.word	0xe000ed00
 801b0d4:	410fc271 	.word	0x410fc271
 801b0d8:	410fc270 	.word	0x410fc270
 801b0dc:	e000e400 	.word	0xe000e400
 801b0e0:	200025c0 	.word	0x200025c0
 801b0e4:	200025c4 	.word	0x200025c4
 801b0e8:	e000ed20 	.word	0xe000ed20
 801b0ec:	20000028 	.word	0x20000028
 801b0f0:	e000ef34 	.word	0xe000ef34

0801b0f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b0f4:	b480      	push	{r7}
 801b0f6:	b083      	sub	sp, #12
 801b0f8:	af00      	add	r7, sp, #0
	__asm volatile
 801b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0fe:	f383 8811 	msr	BASEPRI, r3
 801b102:	f3bf 8f6f 	isb	sy
 801b106:	f3bf 8f4f 	dsb	sy
 801b10a:	607b      	str	r3, [r7, #4]
}
 801b10c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b10e:	4b0f      	ldr	r3, [pc, #60]	; (801b14c <vPortEnterCritical+0x58>)
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	3301      	adds	r3, #1
 801b114:	4a0d      	ldr	r2, [pc, #52]	; (801b14c <vPortEnterCritical+0x58>)
 801b116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b118:	4b0c      	ldr	r3, [pc, #48]	; (801b14c <vPortEnterCritical+0x58>)
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	2b01      	cmp	r3, #1
 801b11e:	d10f      	bne.n	801b140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b120:	4b0b      	ldr	r3, [pc, #44]	; (801b150 <vPortEnterCritical+0x5c>)
 801b122:	681b      	ldr	r3, [r3, #0]
 801b124:	b2db      	uxtb	r3, r3
 801b126:	2b00      	cmp	r3, #0
 801b128:	d00a      	beq.n	801b140 <vPortEnterCritical+0x4c>
	__asm volatile
 801b12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b12e:	f383 8811 	msr	BASEPRI, r3
 801b132:	f3bf 8f6f 	isb	sy
 801b136:	f3bf 8f4f 	dsb	sy
 801b13a:	603b      	str	r3, [r7, #0]
}
 801b13c:	bf00      	nop
 801b13e:	e7fe      	b.n	801b13e <vPortEnterCritical+0x4a>
	}
}
 801b140:	bf00      	nop
 801b142:	370c      	adds	r7, #12
 801b144:	46bd      	mov	sp, r7
 801b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b14a:	4770      	bx	lr
 801b14c:	20000028 	.word	0x20000028
 801b150:	e000ed04 	.word	0xe000ed04

0801b154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b154:	b480      	push	{r7}
 801b156:	b083      	sub	sp, #12
 801b158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b15a:	4b12      	ldr	r3, [pc, #72]	; (801b1a4 <vPortExitCritical+0x50>)
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d10a      	bne.n	801b178 <vPortExitCritical+0x24>
	__asm volatile
 801b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b166:	f383 8811 	msr	BASEPRI, r3
 801b16a:	f3bf 8f6f 	isb	sy
 801b16e:	f3bf 8f4f 	dsb	sy
 801b172:	607b      	str	r3, [r7, #4]
}
 801b174:	bf00      	nop
 801b176:	e7fe      	b.n	801b176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b178:	4b0a      	ldr	r3, [pc, #40]	; (801b1a4 <vPortExitCritical+0x50>)
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	3b01      	subs	r3, #1
 801b17e:	4a09      	ldr	r2, [pc, #36]	; (801b1a4 <vPortExitCritical+0x50>)
 801b180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b182:	4b08      	ldr	r3, [pc, #32]	; (801b1a4 <vPortExitCritical+0x50>)
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	2b00      	cmp	r3, #0
 801b188:	d105      	bne.n	801b196 <vPortExitCritical+0x42>
 801b18a:	2300      	movs	r3, #0
 801b18c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b18e:	683b      	ldr	r3, [r7, #0]
 801b190:	f383 8811 	msr	BASEPRI, r3
}
 801b194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b196:	bf00      	nop
 801b198:	370c      	adds	r7, #12
 801b19a:	46bd      	mov	sp, r7
 801b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1a0:	4770      	bx	lr
 801b1a2:	bf00      	nop
 801b1a4:	20000028 	.word	0x20000028
	...

0801b1b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b1b0:	f3ef 8009 	mrs	r0, PSP
 801b1b4:	f3bf 8f6f 	isb	sy
 801b1b8:	4b15      	ldr	r3, [pc, #84]	; (801b210 <pxCurrentTCBConst>)
 801b1ba:	681a      	ldr	r2, [r3, #0]
 801b1bc:	f01e 0f10 	tst.w	lr, #16
 801b1c0:	bf08      	it	eq
 801b1c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b1c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1ca:	6010      	str	r0, [r2, #0]
 801b1cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b1d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b1d4:	f380 8811 	msr	BASEPRI, r0
 801b1d8:	f3bf 8f4f 	dsb	sy
 801b1dc:	f3bf 8f6f 	isb	sy
 801b1e0:	f7fe fd12 	bl	8019c08 <vTaskSwitchContext>
 801b1e4:	f04f 0000 	mov.w	r0, #0
 801b1e8:	f380 8811 	msr	BASEPRI, r0
 801b1ec:	bc09      	pop	{r0, r3}
 801b1ee:	6819      	ldr	r1, [r3, #0]
 801b1f0:	6808      	ldr	r0, [r1, #0]
 801b1f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1f6:	f01e 0f10 	tst.w	lr, #16
 801b1fa:	bf08      	it	eq
 801b1fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b200:	f380 8809 	msr	PSP, r0
 801b204:	f3bf 8f6f 	isb	sy
 801b208:	4770      	bx	lr
 801b20a:	bf00      	nop
 801b20c:	f3af 8000 	nop.w

0801b210 <pxCurrentTCBConst>:
 801b210:	20001f8c 	.word	0x20001f8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b214:	bf00      	nop
 801b216:	bf00      	nop

0801b218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b218:	b580      	push	{r7, lr}
 801b21a:	b082      	sub	sp, #8
 801b21c:	af00      	add	r7, sp, #0
	__asm volatile
 801b21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b222:	f383 8811 	msr	BASEPRI, r3
 801b226:	f3bf 8f6f 	isb	sy
 801b22a:	f3bf 8f4f 	dsb	sy
 801b22e:	607b      	str	r3, [r7, #4]
}
 801b230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b232:	f7fe fc2f 	bl	8019a94 <xTaskIncrementTick>
 801b236:	4603      	mov	r3, r0
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d003      	beq.n	801b244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b23c:	4b06      	ldr	r3, [pc, #24]	; (801b258 <xPortSysTickHandler+0x40>)
 801b23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b242:	601a      	str	r2, [r3, #0]
 801b244:	2300      	movs	r3, #0
 801b246:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b248:	683b      	ldr	r3, [r7, #0]
 801b24a:	f383 8811 	msr	BASEPRI, r3
}
 801b24e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b250:	bf00      	nop
 801b252:	3708      	adds	r7, #8
 801b254:	46bd      	mov	sp, r7
 801b256:	bd80      	pop	{r7, pc}
 801b258:	e000ed04 	.word	0xe000ed04

0801b25c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b25c:	b480      	push	{r7}
 801b25e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b260:	4b0b      	ldr	r3, [pc, #44]	; (801b290 <vPortSetupTimerInterrupt+0x34>)
 801b262:	2200      	movs	r2, #0
 801b264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b266:	4b0b      	ldr	r3, [pc, #44]	; (801b294 <vPortSetupTimerInterrupt+0x38>)
 801b268:	2200      	movs	r2, #0
 801b26a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b26c:	4b0a      	ldr	r3, [pc, #40]	; (801b298 <vPortSetupTimerInterrupt+0x3c>)
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	4a0a      	ldr	r2, [pc, #40]	; (801b29c <vPortSetupTimerInterrupt+0x40>)
 801b272:	fba2 2303 	umull	r2, r3, r2, r3
 801b276:	099b      	lsrs	r3, r3, #6
 801b278:	4a09      	ldr	r2, [pc, #36]	; (801b2a0 <vPortSetupTimerInterrupt+0x44>)
 801b27a:	3b01      	subs	r3, #1
 801b27c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b27e:	4b04      	ldr	r3, [pc, #16]	; (801b290 <vPortSetupTimerInterrupt+0x34>)
 801b280:	2207      	movs	r2, #7
 801b282:	601a      	str	r2, [r3, #0]
}
 801b284:	bf00      	nop
 801b286:	46bd      	mov	sp, r7
 801b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b28c:	4770      	bx	lr
 801b28e:	bf00      	nop
 801b290:	e000e010 	.word	0xe000e010
 801b294:	e000e018 	.word	0xe000e018
 801b298:	2000001c 	.word	0x2000001c
 801b29c:	10624dd3 	.word	0x10624dd3
 801b2a0:	e000e014 	.word	0xe000e014

0801b2a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b2a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b2b4 <vPortEnableVFP+0x10>
 801b2a8:	6801      	ldr	r1, [r0, #0]
 801b2aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b2ae:	6001      	str	r1, [r0, #0]
 801b2b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b2b2:	bf00      	nop
 801b2b4:	e000ed88 	.word	0xe000ed88

0801b2b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b2b8:	b480      	push	{r7}
 801b2ba:	b085      	sub	sp, #20
 801b2bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b2be:	f3ef 8305 	mrs	r3, IPSR
 801b2c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b2c4:	68fb      	ldr	r3, [r7, #12]
 801b2c6:	2b0f      	cmp	r3, #15
 801b2c8:	d914      	bls.n	801b2f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b2ca:	4a17      	ldr	r2, [pc, #92]	; (801b328 <vPortValidateInterruptPriority+0x70>)
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	4413      	add	r3, r2
 801b2d0:	781b      	ldrb	r3, [r3, #0]
 801b2d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b2d4:	4b15      	ldr	r3, [pc, #84]	; (801b32c <vPortValidateInterruptPriority+0x74>)
 801b2d6:	781b      	ldrb	r3, [r3, #0]
 801b2d8:	7afa      	ldrb	r2, [r7, #11]
 801b2da:	429a      	cmp	r2, r3
 801b2dc:	d20a      	bcs.n	801b2f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801b2de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b2e2:	f383 8811 	msr	BASEPRI, r3
 801b2e6:	f3bf 8f6f 	isb	sy
 801b2ea:	f3bf 8f4f 	dsb	sy
 801b2ee:	607b      	str	r3, [r7, #4]
}
 801b2f0:	bf00      	nop
 801b2f2:	e7fe      	b.n	801b2f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b2f4:	4b0e      	ldr	r3, [pc, #56]	; (801b330 <vPortValidateInterruptPriority+0x78>)
 801b2f6:	681b      	ldr	r3, [r3, #0]
 801b2f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b2fc:	4b0d      	ldr	r3, [pc, #52]	; (801b334 <vPortValidateInterruptPriority+0x7c>)
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	429a      	cmp	r2, r3
 801b302:	d90a      	bls.n	801b31a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801b304:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b308:	f383 8811 	msr	BASEPRI, r3
 801b30c:	f3bf 8f6f 	isb	sy
 801b310:	f3bf 8f4f 	dsb	sy
 801b314:	603b      	str	r3, [r7, #0]
}
 801b316:	bf00      	nop
 801b318:	e7fe      	b.n	801b318 <vPortValidateInterruptPriority+0x60>
	}
 801b31a:	bf00      	nop
 801b31c:	3714      	adds	r7, #20
 801b31e:	46bd      	mov	sp, r7
 801b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b324:	4770      	bx	lr
 801b326:	bf00      	nop
 801b328:	e000e3f0 	.word	0xe000e3f0
 801b32c:	200025c0 	.word	0x200025c0
 801b330:	e000ed0c 	.word	0xe000ed0c
 801b334:	200025c4 	.word	0x200025c4

0801b338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b08a      	sub	sp, #40	; 0x28
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b340:	2300      	movs	r3, #0
 801b342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b344:	f7fe faea 	bl	801991c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b348:	4b5d      	ldr	r3, [pc, #372]	; (801b4c0 <pvPortMalloc+0x188>)
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	d101      	bne.n	801b354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b350:	f000 f930 	bl	801b5b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b354:	4b5b      	ldr	r3, [pc, #364]	; (801b4c4 <pvPortMalloc+0x18c>)
 801b356:	681a      	ldr	r2, [r3, #0]
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	4013      	ands	r3, r2
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	f040 8093 	bne.w	801b488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	2b00      	cmp	r3, #0
 801b366:	d01d      	beq.n	801b3a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801b368:	2208      	movs	r2, #8
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	4413      	add	r3, r2
 801b36e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	f003 0307 	and.w	r3, r3, #7
 801b376:	2b00      	cmp	r3, #0
 801b378:	d014      	beq.n	801b3a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	f023 0307 	bic.w	r3, r3, #7
 801b380:	3308      	adds	r3, #8
 801b382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b384:	687b      	ldr	r3, [r7, #4]
 801b386:	f003 0307 	and.w	r3, r3, #7
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d00a      	beq.n	801b3a4 <pvPortMalloc+0x6c>
	__asm volatile
 801b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b392:	f383 8811 	msr	BASEPRI, r3
 801b396:	f3bf 8f6f 	isb	sy
 801b39a:	f3bf 8f4f 	dsb	sy
 801b39e:	617b      	str	r3, [r7, #20]
}
 801b3a0:	bf00      	nop
 801b3a2:	e7fe      	b.n	801b3a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d06e      	beq.n	801b488 <pvPortMalloc+0x150>
 801b3aa:	4b47      	ldr	r3, [pc, #284]	; (801b4c8 <pvPortMalloc+0x190>)
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	687a      	ldr	r2, [r7, #4]
 801b3b0:	429a      	cmp	r2, r3
 801b3b2:	d869      	bhi.n	801b488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b3b4:	4b45      	ldr	r3, [pc, #276]	; (801b4cc <pvPortMalloc+0x194>)
 801b3b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b3b8:	4b44      	ldr	r3, [pc, #272]	; (801b4cc <pvPortMalloc+0x194>)
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b3be:	e004      	b.n	801b3ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801b3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b3c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3c6:	681b      	ldr	r3, [r3, #0]
 801b3c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3cc:	685b      	ldr	r3, [r3, #4]
 801b3ce:	687a      	ldr	r2, [r7, #4]
 801b3d0:	429a      	cmp	r2, r3
 801b3d2:	d903      	bls.n	801b3dc <pvPortMalloc+0xa4>
 801b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d1f1      	bne.n	801b3c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b3dc:	4b38      	ldr	r3, [pc, #224]	; (801b4c0 <pvPortMalloc+0x188>)
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b3e2:	429a      	cmp	r2, r3
 801b3e4:	d050      	beq.n	801b488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b3e6:	6a3b      	ldr	r3, [r7, #32]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	2208      	movs	r2, #8
 801b3ec:	4413      	add	r3, r2
 801b3ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3f2:	681a      	ldr	r2, [r3, #0]
 801b3f4:	6a3b      	ldr	r3, [r7, #32]
 801b3f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3fa:	685a      	ldr	r2, [r3, #4]
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	1ad2      	subs	r2, r2, r3
 801b400:	2308      	movs	r3, #8
 801b402:	005b      	lsls	r3, r3, #1
 801b404:	429a      	cmp	r2, r3
 801b406:	d91f      	bls.n	801b448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	4413      	add	r3, r2
 801b40e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b410:	69bb      	ldr	r3, [r7, #24]
 801b412:	f003 0307 	and.w	r3, r3, #7
 801b416:	2b00      	cmp	r3, #0
 801b418:	d00a      	beq.n	801b430 <pvPortMalloc+0xf8>
	__asm volatile
 801b41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b41e:	f383 8811 	msr	BASEPRI, r3
 801b422:	f3bf 8f6f 	isb	sy
 801b426:	f3bf 8f4f 	dsb	sy
 801b42a:	613b      	str	r3, [r7, #16]
}
 801b42c:	bf00      	nop
 801b42e:	e7fe      	b.n	801b42e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b432:	685a      	ldr	r2, [r3, #4]
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	1ad2      	subs	r2, r2, r3
 801b438:	69bb      	ldr	r3, [r7, #24]
 801b43a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b43e:	687a      	ldr	r2, [r7, #4]
 801b440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b442:	69b8      	ldr	r0, [r7, #24]
 801b444:	f000 f918 	bl	801b678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b448:	4b1f      	ldr	r3, [pc, #124]	; (801b4c8 <pvPortMalloc+0x190>)
 801b44a:	681a      	ldr	r2, [r3, #0]
 801b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b44e:	685b      	ldr	r3, [r3, #4]
 801b450:	1ad3      	subs	r3, r2, r3
 801b452:	4a1d      	ldr	r2, [pc, #116]	; (801b4c8 <pvPortMalloc+0x190>)
 801b454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b456:	4b1c      	ldr	r3, [pc, #112]	; (801b4c8 <pvPortMalloc+0x190>)
 801b458:	681a      	ldr	r2, [r3, #0]
 801b45a:	4b1d      	ldr	r3, [pc, #116]	; (801b4d0 <pvPortMalloc+0x198>)
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	429a      	cmp	r2, r3
 801b460:	d203      	bcs.n	801b46a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b462:	4b19      	ldr	r3, [pc, #100]	; (801b4c8 <pvPortMalloc+0x190>)
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	4a1a      	ldr	r2, [pc, #104]	; (801b4d0 <pvPortMalloc+0x198>)
 801b468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b46c:	685a      	ldr	r2, [r3, #4]
 801b46e:	4b15      	ldr	r3, [pc, #84]	; (801b4c4 <pvPortMalloc+0x18c>)
 801b470:	681b      	ldr	r3, [r3, #0]
 801b472:	431a      	orrs	r2, r3
 801b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b47a:	2200      	movs	r2, #0
 801b47c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801b47e:	4b15      	ldr	r3, [pc, #84]	; (801b4d4 <pvPortMalloc+0x19c>)
 801b480:	681b      	ldr	r3, [r3, #0]
 801b482:	3301      	adds	r3, #1
 801b484:	4a13      	ldr	r2, [pc, #76]	; (801b4d4 <pvPortMalloc+0x19c>)
 801b486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b488:	f7fe fa56 	bl	8019938 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801b48c:	69fb      	ldr	r3, [r7, #28]
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d101      	bne.n	801b496 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801b492:	f7f3 fe7b 	bl	800f18c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b496:	69fb      	ldr	r3, [r7, #28]
 801b498:	f003 0307 	and.w	r3, r3, #7
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d00a      	beq.n	801b4b6 <pvPortMalloc+0x17e>
	__asm volatile
 801b4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4a4:	f383 8811 	msr	BASEPRI, r3
 801b4a8:	f3bf 8f6f 	isb	sy
 801b4ac:	f3bf 8f4f 	dsb	sy
 801b4b0:	60fb      	str	r3, [r7, #12]
}
 801b4b2:	bf00      	nop
 801b4b4:	e7fe      	b.n	801b4b4 <pvPortMalloc+0x17c>
	return pvReturn;
 801b4b6:	69fb      	ldr	r3, [r7, #28]
}
 801b4b8:	4618      	mov	r0, r3
 801b4ba:	3728      	adds	r7, #40	; 0x28
 801b4bc:	46bd      	mov	sp, r7
 801b4be:	bd80      	pop	{r7, pc}
 801b4c0:	2000a5d0 	.word	0x2000a5d0
 801b4c4:	2000a5e4 	.word	0x2000a5e4
 801b4c8:	2000a5d4 	.word	0x2000a5d4
 801b4cc:	2000a5c8 	.word	0x2000a5c8
 801b4d0:	2000a5d8 	.word	0x2000a5d8
 801b4d4:	2000a5dc 	.word	0x2000a5dc

0801b4d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b086      	sub	sp, #24
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d04d      	beq.n	801b586 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b4ea:	2308      	movs	r3, #8
 801b4ec:	425b      	negs	r3, r3
 801b4ee:	697a      	ldr	r2, [r7, #20]
 801b4f0:	4413      	add	r3, r2
 801b4f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b4f4:	697b      	ldr	r3, [r7, #20]
 801b4f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b4f8:	693b      	ldr	r3, [r7, #16]
 801b4fa:	685a      	ldr	r2, [r3, #4]
 801b4fc:	4b24      	ldr	r3, [pc, #144]	; (801b590 <vPortFree+0xb8>)
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	4013      	ands	r3, r2
 801b502:	2b00      	cmp	r3, #0
 801b504:	d10a      	bne.n	801b51c <vPortFree+0x44>
	__asm volatile
 801b506:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b50a:	f383 8811 	msr	BASEPRI, r3
 801b50e:	f3bf 8f6f 	isb	sy
 801b512:	f3bf 8f4f 	dsb	sy
 801b516:	60fb      	str	r3, [r7, #12]
}
 801b518:	bf00      	nop
 801b51a:	e7fe      	b.n	801b51a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b51c:	693b      	ldr	r3, [r7, #16]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	2b00      	cmp	r3, #0
 801b522:	d00a      	beq.n	801b53a <vPortFree+0x62>
	__asm volatile
 801b524:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b528:	f383 8811 	msr	BASEPRI, r3
 801b52c:	f3bf 8f6f 	isb	sy
 801b530:	f3bf 8f4f 	dsb	sy
 801b534:	60bb      	str	r3, [r7, #8]
}
 801b536:	bf00      	nop
 801b538:	e7fe      	b.n	801b538 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b53a:	693b      	ldr	r3, [r7, #16]
 801b53c:	685a      	ldr	r2, [r3, #4]
 801b53e:	4b14      	ldr	r3, [pc, #80]	; (801b590 <vPortFree+0xb8>)
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	4013      	ands	r3, r2
 801b544:	2b00      	cmp	r3, #0
 801b546:	d01e      	beq.n	801b586 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b548:	693b      	ldr	r3, [r7, #16]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d11a      	bne.n	801b586 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b550:	693b      	ldr	r3, [r7, #16]
 801b552:	685a      	ldr	r2, [r3, #4]
 801b554:	4b0e      	ldr	r3, [pc, #56]	; (801b590 <vPortFree+0xb8>)
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	43db      	mvns	r3, r3
 801b55a:	401a      	ands	r2, r3
 801b55c:	693b      	ldr	r3, [r7, #16]
 801b55e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b560:	f7fe f9dc 	bl	801991c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b564:	693b      	ldr	r3, [r7, #16]
 801b566:	685a      	ldr	r2, [r3, #4]
 801b568:	4b0a      	ldr	r3, [pc, #40]	; (801b594 <vPortFree+0xbc>)
 801b56a:	681b      	ldr	r3, [r3, #0]
 801b56c:	4413      	add	r3, r2
 801b56e:	4a09      	ldr	r2, [pc, #36]	; (801b594 <vPortFree+0xbc>)
 801b570:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b572:	6938      	ldr	r0, [r7, #16]
 801b574:	f000 f880 	bl	801b678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b578:	4b07      	ldr	r3, [pc, #28]	; (801b598 <vPortFree+0xc0>)
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	3301      	adds	r3, #1
 801b57e:	4a06      	ldr	r2, [pc, #24]	; (801b598 <vPortFree+0xc0>)
 801b580:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801b582:	f7fe f9d9 	bl	8019938 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b586:	bf00      	nop
 801b588:	3718      	adds	r7, #24
 801b58a:	46bd      	mov	sp, r7
 801b58c:	bd80      	pop	{r7, pc}
 801b58e:	bf00      	nop
 801b590:	2000a5e4 	.word	0x2000a5e4
 801b594:	2000a5d4 	.word	0x2000a5d4
 801b598:	2000a5e0 	.word	0x2000a5e0

0801b59c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 801b59c:	b480      	push	{r7}
 801b59e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 801b5a0:	4b03      	ldr	r3, [pc, #12]	; (801b5b0 <xPortGetFreeHeapSize+0x14>)
 801b5a2:	681b      	ldr	r3, [r3, #0]
}
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	46bd      	mov	sp, r7
 801b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ac:	4770      	bx	lr
 801b5ae:	bf00      	nop
 801b5b0:	2000a5d4 	.word	0x2000a5d4

0801b5b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b5b4:	b480      	push	{r7}
 801b5b6:	b085      	sub	sp, #20
 801b5b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b5ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b5be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b5c0:	4b27      	ldr	r3, [pc, #156]	; (801b660 <prvHeapInit+0xac>)
 801b5c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b5c4:	68fb      	ldr	r3, [r7, #12]
 801b5c6:	f003 0307 	and.w	r3, r3, #7
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d00c      	beq.n	801b5e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b5ce:	68fb      	ldr	r3, [r7, #12]
 801b5d0:	3307      	adds	r3, #7
 801b5d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b5d4:	68fb      	ldr	r3, [r7, #12]
 801b5d6:	f023 0307 	bic.w	r3, r3, #7
 801b5da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b5dc:	68ba      	ldr	r2, [r7, #8]
 801b5de:	68fb      	ldr	r3, [r7, #12]
 801b5e0:	1ad3      	subs	r3, r2, r3
 801b5e2:	4a1f      	ldr	r2, [pc, #124]	; (801b660 <prvHeapInit+0xac>)
 801b5e4:	4413      	add	r3, r2
 801b5e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b5ec:	4a1d      	ldr	r2, [pc, #116]	; (801b664 <prvHeapInit+0xb0>)
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b5f2:	4b1c      	ldr	r3, [pc, #112]	; (801b664 <prvHeapInit+0xb0>)
 801b5f4:	2200      	movs	r2, #0
 801b5f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	68ba      	ldr	r2, [r7, #8]
 801b5fc:	4413      	add	r3, r2
 801b5fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b600:	2208      	movs	r2, #8
 801b602:	68fb      	ldr	r3, [r7, #12]
 801b604:	1a9b      	subs	r3, r3, r2
 801b606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	f023 0307 	bic.w	r3, r3, #7
 801b60e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	4a15      	ldr	r2, [pc, #84]	; (801b668 <prvHeapInit+0xb4>)
 801b614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b616:	4b14      	ldr	r3, [pc, #80]	; (801b668 <prvHeapInit+0xb4>)
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	2200      	movs	r2, #0
 801b61c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b61e:	4b12      	ldr	r3, [pc, #72]	; (801b668 <prvHeapInit+0xb4>)
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	2200      	movs	r2, #0
 801b624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b62a:	683b      	ldr	r3, [r7, #0]
 801b62c:	68fa      	ldr	r2, [r7, #12]
 801b62e:	1ad2      	subs	r2, r2, r3
 801b630:	683b      	ldr	r3, [r7, #0]
 801b632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b634:	4b0c      	ldr	r3, [pc, #48]	; (801b668 <prvHeapInit+0xb4>)
 801b636:	681a      	ldr	r2, [r3, #0]
 801b638:	683b      	ldr	r3, [r7, #0]
 801b63a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b63c:	683b      	ldr	r3, [r7, #0]
 801b63e:	685b      	ldr	r3, [r3, #4]
 801b640:	4a0a      	ldr	r2, [pc, #40]	; (801b66c <prvHeapInit+0xb8>)
 801b642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b644:	683b      	ldr	r3, [r7, #0]
 801b646:	685b      	ldr	r3, [r3, #4]
 801b648:	4a09      	ldr	r2, [pc, #36]	; (801b670 <prvHeapInit+0xbc>)
 801b64a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b64c:	4b09      	ldr	r3, [pc, #36]	; (801b674 <prvHeapInit+0xc0>)
 801b64e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b652:	601a      	str	r2, [r3, #0]
}
 801b654:	bf00      	nop
 801b656:	3714      	adds	r7, #20
 801b658:	46bd      	mov	sp, r7
 801b65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b65e:	4770      	bx	lr
 801b660:	200025c8 	.word	0x200025c8
 801b664:	2000a5c8 	.word	0x2000a5c8
 801b668:	2000a5d0 	.word	0x2000a5d0
 801b66c:	2000a5d8 	.word	0x2000a5d8
 801b670:	2000a5d4 	.word	0x2000a5d4
 801b674:	2000a5e4 	.word	0x2000a5e4

0801b678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b678:	b480      	push	{r7}
 801b67a:	b085      	sub	sp, #20
 801b67c:	af00      	add	r7, sp, #0
 801b67e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b680:	4b28      	ldr	r3, [pc, #160]	; (801b724 <prvInsertBlockIntoFreeList+0xac>)
 801b682:	60fb      	str	r3, [r7, #12]
 801b684:	e002      	b.n	801b68c <prvInsertBlockIntoFreeList+0x14>
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	681b      	ldr	r3, [r3, #0]
 801b68a:	60fb      	str	r3, [r7, #12]
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	687a      	ldr	r2, [r7, #4]
 801b692:	429a      	cmp	r2, r3
 801b694:	d8f7      	bhi.n	801b686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b696:	68fb      	ldr	r3, [r7, #12]
 801b698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b69a:	68fb      	ldr	r3, [r7, #12]
 801b69c:	685b      	ldr	r3, [r3, #4]
 801b69e:	68ba      	ldr	r2, [r7, #8]
 801b6a0:	4413      	add	r3, r2
 801b6a2:	687a      	ldr	r2, [r7, #4]
 801b6a4:	429a      	cmp	r2, r3
 801b6a6:	d108      	bne.n	801b6ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	685a      	ldr	r2, [r3, #4]
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	685b      	ldr	r3, [r3, #4]
 801b6b0:	441a      	add	r2, r3
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b6b6:	68fb      	ldr	r3, [r7, #12]
 801b6b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	685b      	ldr	r3, [r3, #4]
 801b6c2:	68ba      	ldr	r2, [r7, #8]
 801b6c4:	441a      	add	r2, r3
 801b6c6:	68fb      	ldr	r3, [r7, #12]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	429a      	cmp	r2, r3
 801b6cc:	d118      	bne.n	801b700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b6ce:	68fb      	ldr	r3, [r7, #12]
 801b6d0:	681a      	ldr	r2, [r3, #0]
 801b6d2:	4b15      	ldr	r3, [pc, #84]	; (801b728 <prvInsertBlockIntoFreeList+0xb0>)
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	429a      	cmp	r2, r3
 801b6d8:	d00d      	beq.n	801b6f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b6da:	687b      	ldr	r3, [r7, #4]
 801b6dc:	685a      	ldr	r2, [r3, #4]
 801b6de:	68fb      	ldr	r3, [r7, #12]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	685b      	ldr	r3, [r3, #4]
 801b6e4:	441a      	add	r2, r3
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b6ea:	68fb      	ldr	r3, [r7, #12]
 801b6ec:	681b      	ldr	r3, [r3, #0]
 801b6ee:	681a      	ldr	r2, [r3, #0]
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	601a      	str	r2, [r3, #0]
 801b6f4:	e008      	b.n	801b708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b6f6:	4b0c      	ldr	r3, [pc, #48]	; (801b728 <prvInsertBlockIntoFreeList+0xb0>)
 801b6f8:	681a      	ldr	r2, [r3, #0]
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	601a      	str	r2, [r3, #0]
 801b6fe:	e003      	b.n	801b708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	681a      	ldr	r2, [r3, #0]
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b708:	68fa      	ldr	r2, [r7, #12]
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	429a      	cmp	r2, r3
 801b70e:	d002      	beq.n	801b716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	687a      	ldr	r2, [r7, #4]
 801b714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b716:	bf00      	nop
 801b718:	3714      	adds	r7, #20
 801b71a:	46bd      	mov	sp, r7
 801b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b720:	4770      	bx	lr
 801b722:	bf00      	nop
 801b724:	2000a5c8 	.word	0x2000a5c8
 801b728:	2000a5d0 	.word	0x2000a5d0

0801b72c <_ZdlPvj>:
 801b72c:	f000 b819 	b.w	801b762 <_ZdlPv>

0801b730 <_ZdaPv>:
 801b730:	f000 b817 	b.w	801b762 <_ZdlPv>

0801b734 <__cxa_guard_acquire>:
 801b734:	6803      	ldr	r3, [r0, #0]
 801b736:	07db      	lsls	r3, r3, #31
 801b738:	d406      	bmi.n	801b748 <__cxa_guard_acquire+0x14>
 801b73a:	7843      	ldrb	r3, [r0, #1]
 801b73c:	b103      	cbz	r3, 801b740 <__cxa_guard_acquire+0xc>
 801b73e:	deff      	udf	#255	; 0xff
 801b740:	2301      	movs	r3, #1
 801b742:	7043      	strb	r3, [r0, #1]
 801b744:	4618      	mov	r0, r3
 801b746:	4770      	bx	lr
 801b748:	2000      	movs	r0, #0
 801b74a:	4770      	bx	lr

0801b74c <__cxa_guard_release>:
 801b74c:	2301      	movs	r3, #1
 801b74e:	6003      	str	r3, [r0, #0]
 801b750:	4770      	bx	lr

0801b752 <_Znaj>:
 801b752:	f000 b81a 	b.w	801b78a <_Znwj>

0801b756 <__cxa_pure_virtual>:
 801b756:	b508      	push	{r3, lr}
 801b758:	f000 f812 	bl	801b780 <_ZSt9terminatev>

0801b75c <_ZSt25__throw_bad_function_callv>:
 801b75c:	b508      	push	{r3, lr}
 801b75e:	f000 fb79 	bl	801be54 <abort>

0801b762 <_ZdlPv>:
 801b762:	f000 bcb1 	b.w	801c0c8 <free>

0801b766 <_ZN10__cxxabiv111__terminateEPFvvE>:
 801b766:	b508      	push	{r3, lr}
 801b768:	4780      	blx	r0
 801b76a:	f000 fb73 	bl	801be54 <abort>
	...

0801b770 <_ZSt13get_terminatev>:
 801b770:	4b02      	ldr	r3, [pc, #8]	; (801b77c <_ZSt13get_terminatev+0xc>)
 801b772:	6818      	ldr	r0, [r3, #0]
 801b774:	f3bf 8f5b 	dmb	ish
 801b778:	4770      	bx	lr
 801b77a:	bf00      	nop
 801b77c:	2000002c 	.word	0x2000002c

0801b780 <_ZSt9terminatev>:
 801b780:	b508      	push	{r3, lr}
 801b782:	f7ff fff5 	bl	801b770 <_ZSt13get_terminatev>
 801b786:	f7ff ffee 	bl	801b766 <_ZN10__cxxabiv111__terminateEPFvvE>

0801b78a <_Znwj>:
 801b78a:	2801      	cmp	r0, #1
 801b78c:	bf38      	it	cc
 801b78e:	2001      	movcc	r0, #1
 801b790:	b510      	push	{r4, lr}
 801b792:	4604      	mov	r4, r0
 801b794:	4620      	mov	r0, r4
 801b796:	f000 fc8f 	bl	801c0b8 <malloc>
 801b79a:	b930      	cbnz	r0, 801b7aa <_Znwj+0x20>
 801b79c:	f000 f806 	bl	801b7ac <_ZSt15get_new_handlerv>
 801b7a0:	b908      	cbnz	r0, 801b7a6 <_Znwj+0x1c>
 801b7a2:	f000 fb57 	bl	801be54 <abort>
 801b7a6:	4780      	blx	r0
 801b7a8:	e7f4      	b.n	801b794 <_Znwj+0xa>
 801b7aa:	bd10      	pop	{r4, pc}

0801b7ac <_ZSt15get_new_handlerv>:
 801b7ac:	4b02      	ldr	r3, [pc, #8]	; (801b7b8 <_ZSt15get_new_handlerv+0xc>)
 801b7ae:	6818      	ldr	r0, [r3, #0]
 801b7b0:	f3bf 8f5b 	dmb	ish
 801b7b4:	4770      	bx	lr
 801b7b6:	bf00      	nop
 801b7b8:	2000a5e8 	.word	0x2000a5e8

0801b7bc <roundf>:
 801b7bc:	ee10 0a10 	vmov	r0, s0
 801b7c0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801b7c4:	3a7f      	subs	r2, #127	; 0x7f
 801b7c6:	2a16      	cmp	r2, #22
 801b7c8:	dc15      	bgt.n	801b7f6 <roundf+0x3a>
 801b7ca:	2a00      	cmp	r2, #0
 801b7cc:	da08      	bge.n	801b7e0 <roundf+0x24>
 801b7ce:	3201      	adds	r2, #1
 801b7d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801b7d4:	d101      	bne.n	801b7da <roundf+0x1e>
 801b7d6:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801b7da:	ee00 3a10 	vmov	s0, r3
 801b7de:	4770      	bx	lr
 801b7e0:	4907      	ldr	r1, [pc, #28]	; (801b800 <roundf+0x44>)
 801b7e2:	4111      	asrs	r1, r2
 801b7e4:	4208      	tst	r0, r1
 801b7e6:	d0fa      	beq.n	801b7de <roundf+0x22>
 801b7e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b7ec:	4113      	asrs	r3, r2
 801b7ee:	4403      	add	r3, r0
 801b7f0:	ea23 0301 	bic.w	r3, r3, r1
 801b7f4:	e7f1      	b.n	801b7da <roundf+0x1e>
 801b7f6:	2a80      	cmp	r2, #128	; 0x80
 801b7f8:	d1f1      	bne.n	801b7de <roundf+0x22>
 801b7fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b7fe:	4770      	bx	lr
 801b800:	007fffff 	.word	0x007fffff
 801b804:	00000000 	.word	0x00000000

0801b808 <log>:
 801b808:	b538      	push	{r3, r4, r5, lr}
 801b80a:	ed2d 8b02 	vpush	{d8}
 801b80e:	ec55 4b10 	vmov	r4, r5, d0
 801b812:	f000 f865 	bl	801b8e0 <__ieee754_log>
 801b816:	4622      	mov	r2, r4
 801b818:	462b      	mov	r3, r5
 801b81a:	4620      	mov	r0, r4
 801b81c:	4629      	mov	r1, r5
 801b81e:	eeb0 8a40 	vmov.f32	s16, s0
 801b822:	eef0 8a60 	vmov.f32	s17, s1
 801b826:	f7e5 f981 	bl	8000b2c <__aeabi_dcmpun>
 801b82a:	b998      	cbnz	r0, 801b854 <log+0x4c>
 801b82c:	2200      	movs	r2, #0
 801b82e:	2300      	movs	r3, #0
 801b830:	4620      	mov	r0, r4
 801b832:	4629      	mov	r1, r5
 801b834:	f7e5 f970 	bl	8000b18 <__aeabi_dcmpgt>
 801b838:	b960      	cbnz	r0, 801b854 <log+0x4c>
 801b83a:	2200      	movs	r2, #0
 801b83c:	2300      	movs	r3, #0
 801b83e:	4620      	mov	r0, r4
 801b840:	4629      	mov	r1, r5
 801b842:	f7e5 f941 	bl	8000ac8 <__aeabi_dcmpeq>
 801b846:	b160      	cbz	r0, 801b862 <log+0x5a>
 801b848:	f000 fb12 	bl	801be70 <__errno>
 801b84c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 801b878 <log+0x70>
 801b850:	2322      	movs	r3, #34	; 0x22
 801b852:	6003      	str	r3, [r0, #0]
 801b854:	eeb0 0a48 	vmov.f32	s0, s16
 801b858:	eef0 0a68 	vmov.f32	s1, s17
 801b85c:	ecbd 8b02 	vpop	{d8}
 801b860:	bd38      	pop	{r3, r4, r5, pc}
 801b862:	f000 fb05 	bl	801be70 <__errno>
 801b866:	ecbd 8b02 	vpop	{d8}
 801b86a:	2321      	movs	r3, #33	; 0x21
 801b86c:	6003      	str	r3, [r0, #0]
 801b86e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b872:	4803      	ldr	r0, [pc, #12]	; (801b880 <log+0x78>)
 801b874:	f000 bae0 	b.w	801be38 <nan>
 801b878:	00000000 	.word	0x00000000
 801b87c:	fff00000 	.word	0xfff00000
 801b880:	0801f917 	.word	0x0801f917

0801b884 <logf>:
 801b884:	b508      	push	{r3, lr}
 801b886:	ed2d 8b02 	vpush	{d8}
 801b88a:	eeb0 8a40 	vmov.f32	s16, s0
 801b88e:	f000 f9e1 	bl	801bc54 <__ieee754_logf>
 801b892:	eeb4 8a48 	vcmp.f32	s16, s16
 801b896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b89a:	d60f      	bvs.n	801b8bc <logf+0x38>
 801b89c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8a4:	dc0a      	bgt.n	801b8bc <logf+0x38>
 801b8a6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8ae:	d108      	bne.n	801b8c2 <logf+0x3e>
 801b8b0:	f000 fade 	bl	801be70 <__errno>
 801b8b4:	2322      	movs	r3, #34	; 0x22
 801b8b6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801b8d8 <logf+0x54>
 801b8ba:	6003      	str	r3, [r0, #0]
 801b8bc:	ecbd 8b02 	vpop	{d8}
 801b8c0:	bd08      	pop	{r3, pc}
 801b8c2:	f000 fad5 	bl	801be70 <__errno>
 801b8c6:	ecbd 8b02 	vpop	{d8}
 801b8ca:	2321      	movs	r3, #33	; 0x21
 801b8cc:	6003      	str	r3, [r0, #0]
 801b8ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801b8d2:	4802      	ldr	r0, [pc, #8]	; (801b8dc <logf+0x58>)
 801b8d4:	f000 bab8 	b.w	801be48 <nanf>
 801b8d8:	ff800000 	.word	0xff800000
 801b8dc:	0801f917 	.word	0x0801f917

0801b8e0 <__ieee754_log>:
 801b8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b8e4:	ec51 0b10 	vmov	r0, r1, d0
 801b8e8:	ed2d 8b04 	vpush	{d8-d9}
 801b8ec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801b8f0:	b083      	sub	sp, #12
 801b8f2:	460d      	mov	r5, r1
 801b8f4:	da29      	bge.n	801b94a <__ieee754_log+0x6a>
 801b8f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b8fa:	4303      	orrs	r3, r0
 801b8fc:	ee10 2a10 	vmov	r2, s0
 801b900:	d10c      	bne.n	801b91c <__ieee754_log+0x3c>
 801b902:	49cf      	ldr	r1, [pc, #828]	; (801bc40 <__ieee754_log+0x360>)
 801b904:	2200      	movs	r2, #0
 801b906:	2300      	movs	r3, #0
 801b908:	2000      	movs	r0, #0
 801b90a:	f7e4 ff9f 	bl	800084c <__aeabi_ddiv>
 801b90e:	ec41 0b10 	vmov	d0, r0, r1
 801b912:	b003      	add	sp, #12
 801b914:	ecbd 8b04 	vpop	{d8-d9}
 801b918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b91c:	2900      	cmp	r1, #0
 801b91e:	da05      	bge.n	801b92c <__ieee754_log+0x4c>
 801b920:	460b      	mov	r3, r1
 801b922:	f7e4 fcb1 	bl	8000288 <__aeabi_dsub>
 801b926:	2200      	movs	r2, #0
 801b928:	2300      	movs	r3, #0
 801b92a:	e7ee      	b.n	801b90a <__ieee754_log+0x2a>
 801b92c:	4bc5      	ldr	r3, [pc, #788]	; (801bc44 <__ieee754_log+0x364>)
 801b92e:	2200      	movs	r2, #0
 801b930:	f7e4 fe62 	bl	80005f8 <__aeabi_dmul>
 801b934:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801b938:	460d      	mov	r5, r1
 801b93a:	4ac3      	ldr	r2, [pc, #780]	; (801bc48 <__ieee754_log+0x368>)
 801b93c:	4295      	cmp	r5, r2
 801b93e:	dd06      	ble.n	801b94e <__ieee754_log+0x6e>
 801b940:	4602      	mov	r2, r0
 801b942:	460b      	mov	r3, r1
 801b944:	f7e4 fca2 	bl	800028c <__adddf3>
 801b948:	e7e1      	b.n	801b90e <__ieee754_log+0x2e>
 801b94a:	2300      	movs	r3, #0
 801b94c:	e7f5      	b.n	801b93a <__ieee754_log+0x5a>
 801b94e:	152c      	asrs	r4, r5, #20
 801b950:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801b954:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801b958:	441c      	add	r4, r3
 801b95a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801b95e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801b962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b966:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801b96a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801b96e:	ea42 0105 	orr.w	r1, r2, r5
 801b972:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801b976:	2200      	movs	r2, #0
 801b978:	4bb4      	ldr	r3, [pc, #720]	; (801bc4c <__ieee754_log+0x36c>)
 801b97a:	f7e4 fc85 	bl	8000288 <__aeabi_dsub>
 801b97e:	1cab      	adds	r3, r5, #2
 801b980:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b984:	2b02      	cmp	r3, #2
 801b986:	4682      	mov	sl, r0
 801b988:	468b      	mov	fp, r1
 801b98a:	f04f 0200 	mov.w	r2, #0
 801b98e:	dc53      	bgt.n	801ba38 <__ieee754_log+0x158>
 801b990:	2300      	movs	r3, #0
 801b992:	f7e5 f899 	bl	8000ac8 <__aeabi_dcmpeq>
 801b996:	b1d0      	cbz	r0, 801b9ce <__ieee754_log+0xee>
 801b998:	2c00      	cmp	r4, #0
 801b99a:	f000 8122 	beq.w	801bbe2 <__ieee754_log+0x302>
 801b99e:	4620      	mov	r0, r4
 801b9a0:	f7e4 fdc0 	bl	8000524 <__aeabi_i2d>
 801b9a4:	a390      	add	r3, pc, #576	; (adr r3, 801bbe8 <__ieee754_log+0x308>)
 801b9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9aa:	4606      	mov	r6, r0
 801b9ac:	460f      	mov	r7, r1
 801b9ae:	f7e4 fe23 	bl	80005f8 <__aeabi_dmul>
 801b9b2:	a38f      	add	r3, pc, #572	; (adr r3, 801bbf0 <__ieee754_log+0x310>)
 801b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9b8:	4604      	mov	r4, r0
 801b9ba:	460d      	mov	r5, r1
 801b9bc:	4630      	mov	r0, r6
 801b9be:	4639      	mov	r1, r7
 801b9c0:	f7e4 fe1a 	bl	80005f8 <__aeabi_dmul>
 801b9c4:	4602      	mov	r2, r0
 801b9c6:	460b      	mov	r3, r1
 801b9c8:	4620      	mov	r0, r4
 801b9ca:	4629      	mov	r1, r5
 801b9cc:	e7ba      	b.n	801b944 <__ieee754_log+0x64>
 801b9ce:	a38a      	add	r3, pc, #552	; (adr r3, 801bbf8 <__ieee754_log+0x318>)
 801b9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9d4:	4650      	mov	r0, sl
 801b9d6:	4659      	mov	r1, fp
 801b9d8:	f7e4 fe0e 	bl	80005f8 <__aeabi_dmul>
 801b9dc:	4602      	mov	r2, r0
 801b9de:	460b      	mov	r3, r1
 801b9e0:	2000      	movs	r0, #0
 801b9e2:	499b      	ldr	r1, [pc, #620]	; (801bc50 <__ieee754_log+0x370>)
 801b9e4:	f7e4 fc50 	bl	8000288 <__aeabi_dsub>
 801b9e8:	4652      	mov	r2, sl
 801b9ea:	4606      	mov	r6, r0
 801b9ec:	460f      	mov	r7, r1
 801b9ee:	465b      	mov	r3, fp
 801b9f0:	4650      	mov	r0, sl
 801b9f2:	4659      	mov	r1, fp
 801b9f4:	f7e4 fe00 	bl	80005f8 <__aeabi_dmul>
 801b9f8:	4602      	mov	r2, r0
 801b9fa:	460b      	mov	r3, r1
 801b9fc:	4630      	mov	r0, r6
 801b9fe:	4639      	mov	r1, r7
 801ba00:	f7e4 fdfa 	bl	80005f8 <__aeabi_dmul>
 801ba04:	4606      	mov	r6, r0
 801ba06:	460f      	mov	r7, r1
 801ba08:	b914      	cbnz	r4, 801ba10 <__ieee754_log+0x130>
 801ba0a:	4632      	mov	r2, r6
 801ba0c:	463b      	mov	r3, r7
 801ba0e:	e0a2      	b.n	801bb56 <__ieee754_log+0x276>
 801ba10:	4620      	mov	r0, r4
 801ba12:	f7e4 fd87 	bl	8000524 <__aeabi_i2d>
 801ba16:	a374      	add	r3, pc, #464	; (adr r3, 801bbe8 <__ieee754_log+0x308>)
 801ba18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba1c:	4680      	mov	r8, r0
 801ba1e:	4689      	mov	r9, r1
 801ba20:	f7e4 fdea 	bl	80005f8 <__aeabi_dmul>
 801ba24:	a372      	add	r3, pc, #456	; (adr r3, 801bbf0 <__ieee754_log+0x310>)
 801ba26:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba2a:	4604      	mov	r4, r0
 801ba2c:	460d      	mov	r5, r1
 801ba2e:	4640      	mov	r0, r8
 801ba30:	4649      	mov	r1, r9
 801ba32:	f7e4 fde1 	bl	80005f8 <__aeabi_dmul>
 801ba36:	e0a7      	b.n	801bb88 <__ieee754_log+0x2a8>
 801ba38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801ba3c:	f7e4 fc26 	bl	800028c <__adddf3>
 801ba40:	4602      	mov	r2, r0
 801ba42:	460b      	mov	r3, r1
 801ba44:	4650      	mov	r0, sl
 801ba46:	4659      	mov	r1, fp
 801ba48:	f7e4 ff00 	bl	800084c <__aeabi_ddiv>
 801ba4c:	ec41 0b18 	vmov	d8, r0, r1
 801ba50:	4620      	mov	r0, r4
 801ba52:	f7e4 fd67 	bl	8000524 <__aeabi_i2d>
 801ba56:	ec53 2b18 	vmov	r2, r3, d8
 801ba5a:	ec41 0b19 	vmov	d9, r0, r1
 801ba5e:	ec51 0b18 	vmov	r0, r1, d8
 801ba62:	f7e4 fdc9 	bl	80005f8 <__aeabi_dmul>
 801ba66:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801ba6a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801ba6e:	9301      	str	r3, [sp, #4]
 801ba70:	4602      	mov	r2, r0
 801ba72:	460b      	mov	r3, r1
 801ba74:	4680      	mov	r8, r0
 801ba76:	4689      	mov	r9, r1
 801ba78:	f7e4 fdbe 	bl	80005f8 <__aeabi_dmul>
 801ba7c:	a360      	add	r3, pc, #384	; (adr r3, 801bc00 <__ieee754_log+0x320>)
 801ba7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba82:	4606      	mov	r6, r0
 801ba84:	460f      	mov	r7, r1
 801ba86:	f7e4 fdb7 	bl	80005f8 <__aeabi_dmul>
 801ba8a:	a35f      	add	r3, pc, #380	; (adr r3, 801bc08 <__ieee754_log+0x328>)
 801ba8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba90:	f7e4 fbfc 	bl	800028c <__adddf3>
 801ba94:	4632      	mov	r2, r6
 801ba96:	463b      	mov	r3, r7
 801ba98:	f7e4 fdae 	bl	80005f8 <__aeabi_dmul>
 801ba9c:	a35c      	add	r3, pc, #368	; (adr r3, 801bc10 <__ieee754_log+0x330>)
 801ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baa2:	f7e4 fbf3 	bl	800028c <__adddf3>
 801baa6:	4632      	mov	r2, r6
 801baa8:	463b      	mov	r3, r7
 801baaa:	f7e4 fda5 	bl	80005f8 <__aeabi_dmul>
 801baae:	a35a      	add	r3, pc, #360	; (adr r3, 801bc18 <__ieee754_log+0x338>)
 801bab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bab4:	f7e4 fbea 	bl	800028c <__adddf3>
 801bab8:	4642      	mov	r2, r8
 801baba:	464b      	mov	r3, r9
 801babc:	f7e4 fd9c 	bl	80005f8 <__aeabi_dmul>
 801bac0:	a357      	add	r3, pc, #348	; (adr r3, 801bc20 <__ieee754_log+0x340>)
 801bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bac6:	4680      	mov	r8, r0
 801bac8:	4689      	mov	r9, r1
 801baca:	4630      	mov	r0, r6
 801bacc:	4639      	mov	r1, r7
 801bace:	f7e4 fd93 	bl	80005f8 <__aeabi_dmul>
 801bad2:	a355      	add	r3, pc, #340	; (adr r3, 801bc28 <__ieee754_log+0x348>)
 801bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bad8:	f7e4 fbd8 	bl	800028c <__adddf3>
 801badc:	4632      	mov	r2, r6
 801bade:	463b      	mov	r3, r7
 801bae0:	f7e4 fd8a 	bl	80005f8 <__aeabi_dmul>
 801bae4:	a352      	add	r3, pc, #328	; (adr r3, 801bc30 <__ieee754_log+0x350>)
 801bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baea:	f7e4 fbcf 	bl	800028c <__adddf3>
 801baee:	4632      	mov	r2, r6
 801baf0:	463b      	mov	r3, r7
 801baf2:	f7e4 fd81 	bl	80005f8 <__aeabi_dmul>
 801baf6:	460b      	mov	r3, r1
 801baf8:	4602      	mov	r2, r0
 801bafa:	4649      	mov	r1, r9
 801bafc:	4640      	mov	r0, r8
 801bafe:	f7e4 fbc5 	bl	800028c <__adddf3>
 801bb02:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801bb06:	9b01      	ldr	r3, [sp, #4]
 801bb08:	3551      	adds	r5, #81	; 0x51
 801bb0a:	431d      	orrs	r5, r3
 801bb0c:	2d00      	cmp	r5, #0
 801bb0e:	4680      	mov	r8, r0
 801bb10:	4689      	mov	r9, r1
 801bb12:	dd48      	ble.n	801bba6 <__ieee754_log+0x2c6>
 801bb14:	4b4e      	ldr	r3, [pc, #312]	; (801bc50 <__ieee754_log+0x370>)
 801bb16:	2200      	movs	r2, #0
 801bb18:	4650      	mov	r0, sl
 801bb1a:	4659      	mov	r1, fp
 801bb1c:	f7e4 fd6c 	bl	80005f8 <__aeabi_dmul>
 801bb20:	4652      	mov	r2, sl
 801bb22:	465b      	mov	r3, fp
 801bb24:	f7e4 fd68 	bl	80005f8 <__aeabi_dmul>
 801bb28:	4602      	mov	r2, r0
 801bb2a:	460b      	mov	r3, r1
 801bb2c:	4606      	mov	r6, r0
 801bb2e:	460f      	mov	r7, r1
 801bb30:	4640      	mov	r0, r8
 801bb32:	4649      	mov	r1, r9
 801bb34:	f7e4 fbaa 	bl	800028c <__adddf3>
 801bb38:	ec53 2b18 	vmov	r2, r3, d8
 801bb3c:	f7e4 fd5c 	bl	80005f8 <__aeabi_dmul>
 801bb40:	4680      	mov	r8, r0
 801bb42:	4689      	mov	r9, r1
 801bb44:	b964      	cbnz	r4, 801bb60 <__ieee754_log+0x280>
 801bb46:	4602      	mov	r2, r0
 801bb48:	460b      	mov	r3, r1
 801bb4a:	4630      	mov	r0, r6
 801bb4c:	4639      	mov	r1, r7
 801bb4e:	f7e4 fb9b 	bl	8000288 <__aeabi_dsub>
 801bb52:	4602      	mov	r2, r0
 801bb54:	460b      	mov	r3, r1
 801bb56:	4650      	mov	r0, sl
 801bb58:	4659      	mov	r1, fp
 801bb5a:	f7e4 fb95 	bl	8000288 <__aeabi_dsub>
 801bb5e:	e6d6      	b.n	801b90e <__ieee754_log+0x2e>
 801bb60:	a321      	add	r3, pc, #132	; (adr r3, 801bbe8 <__ieee754_log+0x308>)
 801bb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb66:	ec51 0b19 	vmov	r0, r1, d9
 801bb6a:	f7e4 fd45 	bl	80005f8 <__aeabi_dmul>
 801bb6e:	a320      	add	r3, pc, #128	; (adr r3, 801bbf0 <__ieee754_log+0x310>)
 801bb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb74:	4604      	mov	r4, r0
 801bb76:	460d      	mov	r5, r1
 801bb78:	ec51 0b19 	vmov	r0, r1, d9
 801bb7c:	f7e4 fd3c 	bl	80005f8 <__aeabi_dmul>
 801bb80:	4642      	mov	r2, r8
 801bb82:	464b      	mov	r3, r9
 801bb84:	f7e4 fb82 	bl	800028c <__adddf3>
 801bb88:	4602      	mov	r2, r0
 801bb8a:	460b      	mov	r3, r1
 801bb8c:	4630      	mov	r0, r6
 801bb8e:	4639      	mov	r1, r7
 801bb90:	f7e4 fb7a 	bl	8000288 <__aeabi_dsub>
 801bb94:	4652      	mov	r2, sl
 801bb96:	465b      	mov	r3, fp
 801bb98:	f7e4 fb76 	bl	8000288 <__aeabi_dsub>
 801bb9c:	4602      	mov	r2, r0
 801bb9e:	460b      	mov	r3, r1
 801bba0:	4620      	mov	r0, r4
 801bba2:	4629      	mov	r1, r5
 801bba4:	e7d9      	b.n	801bb5a <__ieee754_log+0x27a>
 801bba6:	4602      	mov	r2, r0
 801bba8:	460b      	mov	r3, r1
 801bbaa:	4650      	mov	r0, sl
 801bbac:	4659      	mov	r1, fp
 801bbae:	f7e4 fb6b 	bl	8000288 <__aeabi_dsub>
 801bbb2:	ec53 2b18 	vmov	r2, r3, d8
 801bbb6:	f7e4 fd1f 	bl	80005f8 <__aeabi_dmul>
 801bbba:	4606      	mov	r6, r0
 801bbbc:	460f      	mov	r7, r1
 801bbbe:	2c00      	cmp	r4, #0
 801bbc0:	f43f af23 	beq.w	801ba0a <__ieee754_log+0x12a>
 801bbc4:	a308      	add	r3, pc, #32	; (adr r3, 801bbe8 <__ieee754_log+0x308>)
 801bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbca:	ec51 0b19 	vmov	r0, r1, d9
 801bbce:	f7e4 fd13 	bl	80005f8 <__aeabi_dmul>
 801bbd2:	a307      	add	r3, pc, #28	; (adr r3, 801bbf0 <__ieee754_log+0x310>)
 801bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbd8:	4604      	mov	r4, r0
 801bbda:	460d      	mov	r5, r1
 801bbdc:	ec51 0b19 	vmov	r0, r1, d9
 801bbe0:	e727      	b.n	801ba32 <__ieee754_log+0x152>
 801bbe2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801bc38 <__ieee754_log+0x358>
 801bbe6:	e694      	b.n	801b912 <__ieee754_log+0x32>
 801bbe8:	fee00000 	.word	0xfee00000
 801bbec:	3fe62e42 	.word	0x3fe62e42
 801bbf0:	35793c76 	.word	0x35793c76
 801bbf4:	3dea39ef 	.word	0x3dea39ef
 801bbf8:	55555555 	.word	0x55555555
 801bbfc:	3fd55555 	.word	0x3fd55555
 801bc00:	df3e5244 	.word	0xdf3e5244
 801bc04:	3fc2f112 	.word	0x3fc2f112
 801bc08:	96cb03de 	.word	0x96cb03de
 801bc0c:	3fc74664 	.word	0x3fc74664
 801bc10:	94229359 	.word	0x94229359
 801bc14:	3fd24924 	.word	0x3fd24924
 801bc18:	55555593 	.word	0x55555593
 801bc1c:	3fe55555 	.word	0x3fe55555
 801bc20:	d078c69f 	.word	0xd078c69f
 801bc24:	3fc39a09 	.word	0x3fc39a09
 801bc28:	1d8e78af 	.word	0x1d8e78af
 801bc2c:	3fcc71c5 	.word	0x3fcc71c5
 801bc30:	9997fa04 	.word	0x9997fa04
 801bc34:	3fd99999 	.word	0x3fd99999
	...
 801bc40:	c3500000 	.word	0xc3500000
 801bc44:	43500000 	.word	0x43500000
 801bc48:	7fefffff 	.word	0x7fefffff
 801bc4c:	3ff00000 	.word	0x3ff00000
 801bc50:	3fe00000 	.word	0x3fe00000

0801bc54 <__ieee754_logf>:
 801bc54:	ee10 3a10 	vmov	r3, s0
 801bc58:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801bc5c:	d106      	bne.n	801bc6c <__ieee754_logf+0x18>
 801bc5e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 801bdf4 <__ieee754_logf+0x1a0>
 801bc62:	eddf 7a65 	vldr	s15, [pc, #404]	; 801bdf8 <__ieee754_logf+0x1a4>
 801bc66:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801bc6a:	4770      	bx	lr
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	da02      	bge.n	801bc76 <__ieee754_logf+0x22>
 801bc70:	ee30 7a40 	vsub.f32	s14, s0, s0
 801bc74:	e7f5      	b.n	801bc62 <__ieee754_logf+0xe>
 801bc76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801bc7a:	db02      	blt.n	801bc82 <__ieee754_logf+0x2e>
 801bc7c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bc80:	4770      	bx	lr
 801bc82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801bc86:	bfb8      	it	lt
 801bc88:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 801bdfc <__ieee754_logf+0x1a8>
 801bc8c:	485c      	ldr	r0, [pc, #368]	; (801be00 <__ieee754_logf+0x1ac>)
 801bc8e:	bfbe      	ittt	lt
 801bc90:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801bc94:	f06f 0118 	mvnlt.w	r1, #24
 801bc98:	ee17 3a90 	vmovlt	r3, s15
 801bc9c:	ea4f 52e3 	mov.w	r2, r3, asr #23
 801bca0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801bca4:	4418      	add	r0, r3
 801bca6:	bfa8      	it	ge
 801bca8:	2100      	movge	r1, #0
 801bcaa:	3a7f      	subs	r2, #127	; 0x7f
 801bcac:	440a      	add	r2, r1
 801bcae:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 801bcb2:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801bcb6:	4319      	orrs	r1, r3
 801bcb8:	ee00 1a10 	vmov	s0, r1
 801bcbc:	4951      	ldr	r1, [pc, #324]	; (801be04 <__ieee754_logf+0x1b0>)
 801bcbe:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 801bcc2:	f103 000f 	add.w	r0, r3, #15
 801bcc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801bcca:	4001      	ands	r1, r0
 801bccc:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bcd0:	bb89      	cbnz	r1, 801bd36 <__ieee754_logf+0xe2>
 801bcd2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801bcd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcda:	d10f      	bne.n	801bcfc <__ieee754_logf+0xa8>
 801bcdc:	2a00      	cmp	r2, #0
 801bcde:	f000 8085 	beq.w	801bdec <__ieee754_logf+0x198>
 801bce2:	ee07 2a90 	vmov	s15, r2
 801bce6:	ed9f 0a48 	vldr	s0, [pc, #288]	; 801be08 <__ieee754_logf+0x1b4>
 801bcea:	ed9f 7a48 	vldr	s14, [pc, #288]	; 801be0c <__ieee754_logf+0x1b8>
 801bcee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bcf2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801bcf6:	eea7 0a87 	vfma.f32	s0, s15, s14
 801bcfa:	4770      	bx	lr
 801bcfc:	eddf 6a44 	vldr	s13, [pc, #272]	; 801be10 <__ieee754_logf+0x1bc>
 801bd00:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801bd04:	eee0 7a66 	vfms.f32	s15, s0, s13
 801bd08:	ee20 7a00 	vmul.f32	s14, s0, s0
 801bd0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 801bd10:	b912      	cbnz	r2, 801bd18 <__ieee754_logf+0xc4>
 801bd12:	ee30 0a47 	vsub.f32	s0, s0, s14
 801bd16:	4770      	bx	lr
 801bd18:	ee07 2a90 	vmov	s15, r2
 801bd1c:	eddf 6a3a 	vldr	s13, [pc, #232]	; 801be08 <__ieee754_logf+0x1b4>
 801bd20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bd24:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801bd28:	ee37 0a40 	vsub.f32	s0, s14, s0
 801bd2c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801be0c <__ieee754_logf+0x1b8>
 801bd30:	ee97 0a87 	vfnms.f32	s0, s15, s14
 801bd34:	4770      	bx	lr
 801bd36:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801bd3a:	ee70 7a27 	vadd.f32	s15, s0, s15
 801bd3e:	eddf 5a35 	vldr	s11, [pc, #212]	; 801be14 <__ieee754_logf+0x1c0>
 801bd42:	eddf 4a35 	vldr	s9, [pc, #212]	; 801be18 <__ieee754_logf+0x1c4>
 801bd46:	4935      	ldr	r1, [pc, #212]	; (801be1c <__ieee754_logf+0x1c8>)
 801bd48:	ee80 6a27 	vdiv.f32	s12, s0, s15
 801bd4c:	4419      	add	r1, r3
 801bd4e:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 801bd52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801bd56:	430b      	orrs	r3, r1
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	ee07 2a90 	vmov	s15, r2
 801bd5e:	ee26 5a06 	vmul.f32	s10, s12, s12
 801bd62:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801bd66:	ee25 7a05 	vmul.f32	s14, s10, s10
 801bd6a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 801be20 <__ieee754_logf+0x1cc>
 801bd6e:	eee7 7a25 	vfma.f32	s15, s14, s11
 801bd72:	eddf 5a2c 	vldr	s11, [pc, #176]	; 801be24 <__ieee754_logf+0x1d0>
 801bd76:	eee7 5a87 	vfma.f32	s11, s15, s14
 801bd7a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801be28 <__ieee754_logf+0x1d4>
 801bd7e:	eee7 7a24 	vfma.f32	s15, s14, s9
 801bd82:	eddf 4a2a 	vldr	s9, [pc, #168]	; 801be2c <__ieee754_logf+0x1d8>
 801bd86:	eee7 4a87 	vfma.f32	s9, s15, s14
 801bd8a:	eddf 7a29 	vldr	s15, [pc, #164]	; 801be30 <__ieee754_logf+0x1dc>
 801bd8e:	eee4 7a87 	vfma.f32	s15, s9, s14
 801bd92:	ee67 7a85 	vmul.f32	s15, s15, s10
 801bd96:	eee5 7a87 	vfma.f32	s15, s11, s14
 801bd9a:	dd1c      	ble.n	801bdd6 <__ieee754_logf+0x182>
 801bd9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801bda0:	ee20 7a07 	vmul.f32	s14, s0, s14
 801bda4:	ee27 7a00 	vmul.f32	s14, s14, s0
 801bda8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801bdac:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bdb0:	b922      	cbnz	r2, 801bdbc <__ieee754_logf+0x168>
 801bdb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bdb6:	ee30 0a67 	vsub.f32	s0, s0, s15
 801bdba:	4770      	bx	lr
 801bdbc:	ed9f 6a12 	vldr	s12, [pc, #72]	; 801be08 <__ieee754_logf+0x1b4>
 801bdc0:	eee6 7a86 	vfma.f32	s15, s13, s12
 801bdc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 801bdc8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801bdcc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801be0c <__ieee754_logf+0x1b8>
 801bdd0:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 801bdd4:	4770      	bx	lr
 801bdd6:	ee70 7a67 	vsub.f32	s15, s0, s15
 801bdda:	ee67 7a86 	vmul.f32	s15, s15, s12
 801bdde:	2a00      	cmp	r2, #0
 801bde0:	d0e9      	beq.n	801bdb6 <__ieee754_logf+0x162>
 801bde2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801be08 <__ieee754_logf+0x1b4>
 801bde6:	eee6 7ac7 	vfms.f32	s15, s13, s14
 801bdea:	e7ed      	b.n	801bdc8 <__ieee754_logf+0x174>
 801bdec:	ed9f 0a02 	vldr	s0, [pc, #8]	; 801bdf8 <__ieee754_logf+0x1a4>
 801bdf0:	4770      	bx	lr
 801bdf2:	bf00      	nop
 801bdf4:	cc000000 	.word	0xcc000000
 801bdf8:	00000000 	.word	0x00000000
 801bdfc:	4c000000 	.word	0x4c000000
 801be00:	004afb20 	.word	0x004afb20
 801be04:	007ffff0 	.word	0x007ffff0
 801be08:	3717f7d1 	.word	0x3717f7d1
 801be0c:	3f317180 	.word	0x3f317180
 801be10:	3eaaaaab 	.word	0x3eaaaaab
 801be14:	3e1cd04f 	.word	0x3e1cd04f
 801be18:	3e178897 	.word	0x3e178897
 801be1c:	ffcf5c30 	.word	0xffcf5c30
 801be20:	3e638e29 	.word	0x3e638e29
 801be24:	3ecccccd 	.word	0x3ecccccd
 801be28:	3e3a3325 	.word	0x3e3a3325
 801be2c:	3e924925 	.word	0x3e924925
 801be30:	3f2aaaab 	.word	0x3f2aaaab
 801be34:	00000000 	.word	0x00000000

0801be38 <nan>:
 801be38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801be40 <nan+0x8>
 801be3c:	4770      	bx	lr
 801be3e:	bf00      	nop
 801be40:	00000000 	.word	0x00000000
 801be44:	7ff80000 	.word	0x7ff80000

0801be48 <nanf>:
 801be48:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801be50 <nanf+0x8>
 801be4c:	4770      	bx	lr
 801be4e:	bf00      	nop
 801be50:	7fc00000 	.word	0x7fc00000

0801be54 <abort>:
 801be54:	b508      	push	{r3, lr}
 801be56:	2006      	movs	r0, #6
 801be58:	f000 ff40 	bl	801ccdc <raise>
 801be5c:	2001      	movs	r0, #1
 801be5e:	f7f3 fdff 	bl	800fa60 <_exit>

0801be62 <atexit>:
 801be62:	2300      	movs	r3, #0
 801be64:	4601      	mov	r1, r0
 801be66:	461a      	mov	r2, r3
 801be68:	4618      	mov	r0, r3
 801be6a:	f000 bfa9 	b.w	801cdc0 <__register_exitproc>
	...

0801be70 <__errno>:
 801be70:	4b01      	ldr	r3, [pc, #4]	; (801be78 <__errno+0x8>)
 801be72:	6818      	ldr	r0, [r3, #0]
 801be74:	4770      	bx	lr
 801be76:	bf00      	nop
 801be78:	20000030 	.word	0x20000030

0801be7c <std>:
 801be7c:	2300      	movs	r3, #0
 801be7e:	b510      	push	{r4, lr}
 801be80:	4604      	mov	r4, r0
 801be82:	e9c0 3300 	strd	r3, r3, [r0]
 801be86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801be8a:	6083      	str	r3, [r0, #8]
 801be8c:	8181      	strh	r1, [r0, #12]
 801be8e:	6643      	str	r3, [r0, #100]	; 0x64
 801be90:	81c2      	strh	r2, [r0, #14]
 801be92:	6183      	str	r3, [r0, #24]
 801be94:	4619      	mov	r1, r3
 801be96:	2208      	movs	r2, #8
 801be98:	305c      	adds	r0, #92	; 0x5c
 801be9a:	f000 f92b 	bl	801c0f4 <memset>
 801be9e:	4b05      	ldr	r3, [pc, #20]	; (801beb4 <std+0x38>)
 801bea0:	6263      	str	r3, [r4, #36]	; 0x24
 801bea2:	4b05      	ldr	r3, [pc, #20]	; (801beb8 <std+0x3c>)
 801bea4:	62a3      	str	r3, [r4, #40]	; 0x28
 801bea6:	4b05      	ldr	r3, [pc, #20]	; (801bebc <std+0x40>)
 801bea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801beaa:	4b05      	ldr	r3, [pc, #20]	; (801bec0 <std+0x44>)
 801beac:	6224      	str	r4, [r4, #32]
 801beae:	6323      	str	r3, [r4, #48]	; 0x30
 801beb0:	bd10      	pop	{r4, pc}
 801beb2:	bf00      	nop
 801beb4:	0801cd15 	.word	0x0801cd15
 801beb8:	0801cd37 	.word	0x0801cd37
 801bebc:	0801cd6f 	.word	0x0801cd6f
 801bec0:	0801cd93 	.word	0x0801cd93

0801bec4 <_cleanup_r>:
 801bec4:	4901      	ldr	r1, [pc, #4]	; (801becc <_cleanup_r+0x8>)
 801bec6:	f000 b8af 	b.w	801c028 <_fwalk_reent>
 801beca:	bf00      	nop
 801becc:	0801dca9 	.word	0x0801dca9

0801bed0 <__sfmoreglue>:
 801bed0:	b570      	push	{r4, r5, r6, lr}
 801bed2:	2268      	movs	r2, #104	; 0x68
 801bed4:	1e4d      	subs	r5, r1, #1
 801bed6:	4355      	muls	r5, r2
 801bed8:	460e      	mov	r6, r1
 801beda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bede:	f000 f97d 	bl	801c1dc <_malloc_r>
 801bee2:	4604      	mov	r4, r0
 801bee4:	b140      	cbz	r0, 801bef8 <__sfmoreglue+0x28>
 801bee6:	2100      	movs	r1, #0
 801bee8:	e9c0 1600 	strd	r1, r6, [r0]
 801beec:	300c      	adds	r0, #12
 801beee:	60a0      	str	r0, [r4, #8]
 801bef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bef4:	f000 f8fe 	bl	801c0f4 <memset>
 801bef8:	4620      	mov	r0, r4
 801befa:	bd70      	pop	{r4, r5, r6, pc}

0801befc <__sfp_lock_acquire>:
 801befc:	4801      	ldr	r0, [pc, #4]	; (801bf04 <__sfp_lock_acquire+0x8>)
 801befe:	f000 b8d8 	b.w	801c0b2 <__retarget_lock_acquire_recursive>
 801bf02:	bf00      	nop
 801bf04:	2000a5ee 	.word	0x2000a5ee

0801bf08 <__sfp_lock_release>:
 801bf08:	4801      	ldr	r0, [pc, #4]	; (801bf10 <__sfp_lock_release+0x8>)
 801bf0a:	f000 b8d4 	b.w	801c0b6 <__retarget_lock_release_recursive>
 801bf0e:	bf00      	nop
 801bf10:	2000a5ee 	.word	0x2000a5ee

0801bf14 <__sinit_lock_acquire>:
 801bf14:	4801      	ldr	r0, [pc, #4]	; (801bf1c <__sinit_lock_acquire+0x8>)
 801bf16:	f000 b8cc 	b.w	801c0b2 <__retarget_lock_acquire_recursive>
 801bf1a:	bf00      	nop
 801bf1c:	2000a5ef 	.word	0x2000a5ef

0801bf20 <__sinit_lock_release>:
 801bf20:	4801      	ldr	r0, [pc, #4]	; (801bf28 <__sinit_lock_release+0x8>)
 801bf22:	f000 b8c8 	b.w	801c0b6 <__retarget_lock_release_recursive>
 801bf26:	bf00      	nop
 801bf28:	2000a5ef 	.word	0x2000a5ef

0801bf2c <__sinit>:
 801bf2c:	b510      	push	{r4, lr}
 801bf2e:	4604      	mov	r4, r0
 801bf30:	f7ff fff0 	bl	801bf14 <__sinit_lock_acquire>
 801bf34:	69a3      	ldr	r3, [r4, #24]
 801bf36:	b11b      	cbz	r3, 801bf40 <__sinit+0x14>
 801bf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bf3c:	f7ff bff0 	b.w	801bf20 <__sinit_lock_release>
 801bf40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bf44:	6523      	str	r3, [r4, #80]	; 0x50
 801bf46:	4b13      	ldr	r3, [pc, #76]	; (801bf94 <__sinit+0x68>)
 801bf48:	4a13      	ldr	r2, [pc, #76]	; (801bf98 <__sinit+0x6c>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	62a2      	str	r2, [r4, #40]	; 0x28
 801bf4e:	42a3      	cmp	r3, r4
 801bf50:	bf04      	itt	eq
 801bf52:	2301      	moveq	r3, #1
 801bf54:	61a3      	streq	r3, [r4, #24]
 801bf56:	4620      	mov	r0, r4
 801bf58:	f000 f820 	bl	801bf9c <__sfp>
 801bf5c:	6060      	str	r0, [r4, #4]
 801bf5e:	4620      	mov	r0, r4
 801bf60:	f000 f81c 	bl	801bf9c <__sfp>
 801bf64:	60a0      	str	r0, [r4, #8]
 801bf66:	4620      	mov	r0, r4
 801bf68:	f000 f818 	bl	801bf9c <__sfp>
 801bf6c:	2200      	movs	r2, #0
 801bf6e:	60e0      	str	r0, [r4, #12]
 801bf70:	2104      	movs	r1, #4
 801bf72:	6860      	ldr	r0, [r4, #4]
 801bf74:	f7ff ff82 	bl	801be7c <std>
 801bf78:	68a0      	ldr	r0, [r4, #8]
 801bf7a:	2201      	movs	r2, #1
 801bf7c:	2109      	movs	r1, #9
 801bf7e:	f7ff ff7d 	bl	801be7c <std>
 801bf82:	68e0      	ldr	r0, [r4, #12]
 801bf84:	2202      	movs	r2, #2
 801bf86:	2112      	movs	r1, #18
 801bf88:	f7ff ff78 	bl	801be7c <std>
 801bf8c:	2301      	movs	r3, #1
 801bf8e:	61a3      	str	r3, [r4, #24]
 801bf90:	e7d2      	b.n	801bf38 <__sinit+0xc>
 801bf92:	bf00      	nop
 801bf94:	0801f6b8 	.word	0x0801f6b8
 801bf98:	0801bec5 	.word	0x0801bec5

0801bf9c <__sfp>:
 801bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bf9e:	4607      	mov	r7, r0
 801bfa0:	f7ff ffac 	bl	801befc <__sfp_lock_acquire>
 801bfa4:	4b1e      	ldr	r3, [pc, #120]	; (801c020 <__sfp+0x84>)
 801bfa6:	681e      	ldr	r6, [r3, #0]
 801bfa8:	69b3      	ldr	r3, [r6, #24]
 801bfaa:	b913      	cbnz	r3, 801bfb2 <__sfp+0x16>
 801bfac:	4630      	mov	r0, r6
 801bfae:	f7ff ffbd 	bl	801bf2c <__sinit>
 801bfb2:	3648      	adds	r6, #72	; 0x48
 801bfb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bfb8:	3b01      	subs	r3, #1
 801bfba:	d503      	bpl.n	801bfc4 <__sfp+0x28>
 801bfbc:	6833      	ldr	r3, [r6, #0]
 801bfbe:	b30b      	cbz	r3, 801c004 <__sfp+0x68>
 801bfc0:	6836      	ldr	r6, [r6, #0]
 801bfc2:	e7f7      	b.n	801bfb4 <__sfp+0x18>
 801bfc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bfc8:	b9d5      	cbnz	r5, 801c000 <__sfp+0x64>
 801bfca:	4b16      	ldr	r3, [pc, #88]	; (801c024 <__sfp+0x88>)
 801bfcc:	60e3      	str	r3, [r4, #12]
 801bfce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bfd2:	6665      	str	r5, [r4, #100]	; 0x64
 801bfd4:	f000 f86c 	bl	801c0b0 <__retarget_lock_init_recursive>
 801bfd8:	f7ff ff96 	bl	801bf08 <__sfp_lock_release>
 801bfdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bfe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bfe4:	6025      	str	r5, [r4, #0]
 801bfe6:	61a5      	str	r5, [r4, #24]
 801bfe8:	2208      	movs	r2, #8
 801bfea:	4629      	mov	r1, r5
 801bfec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bff0:	f000 f880 	bl	801c0f4 <memset>
 801bff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bffc:	4620      	mov	r0, r4
 801bffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c000:	3468      	adds	r4, #104	; 0x68
 801c002:	e7d9      	b.n	801bfb8 <__sfp+0x1c>
 801c004:	2104      	movs	r1, #4
 801c006:	4638      	mov	r0, r7
 801c008:	f7ff ff62 	bl	801bed0 <__sfmoreglue>
 801c00c:	4604      	mov	r4, r0
 801c00e:	6030      	str	r0, [r6, #0]
 801c010:	2800      	cmp	r0, #0
 801c012:	d1d5      	bne.n	801bfc0 <__sfp+0x24>
 801c014:	f7ff ff78 	bl	801bf08 <__sfp_lock_release>
 801c018:	230c      	movs	r3, #12
 801c01a:	603b      	str	r3, [r7, #0]
 801c01c:	e7ee      	b.n	801bffc <__sfp+0x60>
 801c01e:	bf00      	nop
 801c020:	0801f6b8 	.word	0x0801f6b8
 801c024:	ffff0001 	.word	0xffff0001

0801c028 <_fwalk_reent>:
 801c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c02c:	4606      	mov	r6, r0
 801c02e:	4688      	mov	r8, r1
 801c030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c034:	2700      	movs	r7, #0
 801c036:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c03a:	f1b9 0901 	subs.w	r9, r9, #1
 801c03e:	d505      	bpl.n	801c04c <_fwalk_reent+0x24>
 801c040:	6824      	ldr	r4, [r4, #0]
 801c042:	2c00      	cmp	r4, #0
 801c044:	d1f7      	bne.n	801c036 <_fwalk_reent+0xe>
 801c046:	4638      	mov	r0, r7
 801c048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c04c:	89ab      	ldrh	r3, [r5, #12]
 801c04e:	2b01      	cmp	r3, #1
 801c050:	d907      	bls.n	801c062 <_fwalk_reent+0x3a>
 801c052:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c056:	3301      	adds	r3, #1
 801c058:	d003      	beq.n	801c062 <_fwalk_reent+0x3a>
 801c05a:	4629      	mov	r1, r5
 801c05c:	4630      	mov	r0, r6
 801c05e:	47c0      	blx	r8
 801c060:	4307      	orrs	r7, r0
 801c062:	3568      	adds	r5, #104	; 0x68
 801c064:	e7e9      	b.n	801c03a <_fwalk_reent+0x12>
	...

0801c068 <__libc_init_array>:
 801c068:	b570      	push	{r4, r5, r6, lr}
 801c06a:	4d0d      	ldr	r5, [pc, #52]	; (801c0a0 <__libc_init_array+0x38>)
 801c06c:	4c0d      	ldr	r4, [pc, #52]	; (801c0a4 <__libc_init_array+0x3c>)
 801c06e:	1b64      	subs	r4, r4, r5
 801c070:	10a4      	asrs	r4, r4, #2
 801c072:	2600      	movs	r6, #0
 801c074:	42a6      	cmp	r6, r4
 801c076:	d109      	bne.n	801c08c <__libc_init_array+0x24>
 801c078:	4d0b      	ldr	r5, [pc, #44]	; (801c0a8 <__libc_init_array+0x40>)
 801c07a:	4c0c      	ldr	r4, [pc, #48]	; (801c0ac <__libc_init_array+0x44>)
 801c07c:	f002 fd10 	bl	801eaa0 <_init>
 801c080:	1b64      	subs	r4, r4, r5
 801c082:	10a4      	asrs	r4, r4, #2
 801c084:	2600      	movs	r6, #0
 801c086:	42a6      	cmp	r6, r4
 801c088:	d105      	bne.n	801c096 <__libc_init_array+0x2e>
 801c08a:	bd70      	pop	{r4, r5, r6, pc}
 801c08c:	f855 3b04 	ldr.w	r3, [r5], #4
 801c090:	4798      	blx	r3
 801c092:	3601      	adds	r6, #1
 801c094:	e7ee      	b.n	801c074 <__libc_init_array+0xc>
 801c096:	f855 3b04 	ldr.w	r3, [r5], #4
 801c09a:	4798      	blx	r3
 801c09c:	3601      	adds	r6, #1
 801c09e:	e7f2      	b.n	801c086 <__libc_init_array+0x1e>
 801c0a0:	0801fa3c 	.word	0x0801fa3c
 801c0a4:	0801fa3c 	.word	0x0801fa3c
 801c0a8:	0801fa3c 	.word	0x0801fa3c
 801c0ac:	0801fa5c 	.word	0x0801fa5c

0801c0b0 <__retarget_lock_init_recursive>:
 801c0b0:	4770      	bx	lr

0801c0b2 <__retarget_lock_acquire_recursive>:
 801c0b2:	4770      	bx	lr

0801c0b4 <__retarget_lock_release>:
 801c0b4:	4770      	bx	lr

0801c0b6 <__retarget_lock_release_recursive>:
 801c0b6:	4770      	bx	lr

0801c0b8 <malloc>:
 801c0b8:	4b02      	ldr	r3, [pc, #8]	; (801c0c4 <malloc+0xc>)
 801c0ba:	4601      	mov	r1, r0
 801c0bc:	6818      	ldr	r0, [r3, #0]
 801c0be:	f000 b88d 	b.w	801c1dc <_malloc_r>
 801c0c2:	bf00      	nop
 801c0c4:	20000030 	.word	0x20000030

0801c0c8 <free>:
 801c0c8:	4b02      	ldr	r3, [pc, #8]	; (801c0d4 <free+0xc>)
 801c0ca:	4601      	mov	r1, r0
 801c0cc:	6818      	ldr	r0, [r3, #0]
 801c0ce:	f000 b819 	b.w	801c104 <_free_r>
 801c0d2:	bf00      	nop
 801c0d4:	20000030 	.word	0x20000030

0801c0d8 <memcpy>:
 801c0d8:	440a      	add	r2, r1
 801c0da:	4291      	cmp	r1, r2
 801c0dc:	f100 33ff 	add.w	r3, r0, #4294967295
 801c0e0:	d100      	bne.n	801c0e4 <memcpy+0xc>
 801c0e2:	4770      	bx	lr
 801c0e4:	b510      	push	{r4, lr}
 801c0e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c0ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801c0ee:	4291      	cmp	r1, r2
 801c0f0:	d1f9      	bne.n	801c0e6 <memcpy+0xe>
 801c0f2:	bd10      	pop	{r4, pc}

0801c0f4 <memset>:
 801c0f4:	4402      	add	r2, r0
 801c0f6:	4603      	mov	r3, r0
 801c0f8:	4293      	cmp	r3, r2
 801c0fa:	d100      	bne.n	801c0fe <memset+0xa>
 801c0fc:	4770      	bx	lr
 801c0fe:	f803 1b01 	strb.w	r1, [r3], #1
 801c102:	e7f9      	b.n	801c0f8 <memset+0x4>

0801c104 <_free_r>:
 801c104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c106:	2900      	cmp	r1, #0
 801c108:	d044      	beq.n	801c194 <_free_r+0x90>
 801c10a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c10e:	9001      	str	r0, [sp, #4]
 801c110:	2b00      	cmp	r3, #0
 801c112:	f1a1 0404 	sub.w	r4, r1, #4
 801c116:	bfb8      	it	lt
 801c118:	18e4      	addlt	r4, r4, r3
 801c11a:	f001 fe17 	bl	801dd4c <__malloc_lock>
 801c11e:	4a1e      	ldr	r2, [pc, #120]	; (801c198 <_free_r+0x94>)
 801c120:	9801      	ldr	r0, [sp, #4]
 801c122:	6813      	ldr	r3, [r2, #0]
 801c124:	b933      	cbnz	r3, 801c134 <_free_r+0x30>
 801c126:	6063      	str	r3, [r4, #4]
 801c128:	6014      	str	r4, [r2, #0]
 801c12a:	b003      	add	sp, #12
 801c12c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c130:	f001 be12 	b.w	801dd58 <__malloc_unlock>
 801c134:	42a3      	cmp	r3, r4
 801c136:	d908      	bls.n	801c14a <_free_r+0x46>
 801c138:	6825      	ldr	r5, [r4, #0]
 801c13a:	1961      	adds	r1, r4, r5
 801c13c:	428b      	cmp	r3, r1
 801c13e:	bf01      	itttt	eq
 801c140:	6819      	ldreq	r1, [r3, #0]
 801c142:	685b      	ldreq	r3, [r3, #4]
 801c144:	1949      	addeq	r1, r1, r5
 801c146:	6021      	streq	r1, [r4, #0]
 801c148:	e7ed      	b.n	801c126 <_free_r+0x22>
 801c14a:	461a      	mov	r2, r3
 801c14c:	685b      	ldr	r3, [r3, #4]
 801c14e:	b10b      	cbz	r3, 801c154 <_free_r+0x50>
 801c150:	42a3      	cmp	r3, r4
 801c152:	d9fa      	bls.n	801c14a <_free_r+0x46>
 801c154:	6811      	ldr	r1, [r2, #0]
 801c156:	1855      	adds	r5, r2, r1
 801c158:	42a5      	cmp	r5, r4
 801c15a:	d10b      	bne.n	801c174 <_free_r+0x70>
 801c15c:	6824      	ldr	r4, [r4, #0]
 801c15e:	4421      	add	r1, r4
 801c160:	1854      	adds	r4, r2, r1
 801c162:	42a3      	cmp	r3, r4
 801c164:	6011      	str	r1, [r2, #0]
 801c166:	d1e0      	bne.n	801c12a <_free_r+0x26>
 801c168:	681c      	ldr	r4, [r3, #0]
 801c16a:	685b      	ldr	r3, [r3, #4]
 801c16c:	6053      	str	r3, [r2, #4]
 801c16e:	4421      	add	r1, r4
 801c170:	6011      	str	r1, [r2, #0]
 801c172:	e7da      	b.n	801c12a <_free_r+0x26>
 801c174:	d902      	bls.n	801c17c <_free_r+0x78>
 801c176:	230c      	movs	r3, #12
 801c178:	6003      	str	r3, [r0, #0]
 801c17a:	e7d6      	b.n	801c12a <_free_r+0x26>
 801c17c:	6825      	ldr	r5, [r4, #0]
 801c17e:	1961      	adds	r1, r4, r5
 801c180:	428b      	cmp	r3, r1
 801c182:	bf04      	itt	eq
 801c184:	6819      	ldreq	r1, [r3, #0]
 801c186:	685b      	ldreq	r3, [r3, #4]
 801c188:	6063      	str	r3, [r4, #4]
 801c18a:	bf04      	itt	eq
 801c18c:	1949      	addeq	r1, r1, r5
 801c18e:	6021      	streq	r1, [r4, #0]
 801c190:	6054      	str	r4, [r2, #4]
 801c192:	e7ca      	b.n	801c12a <_free_r+0x26>
 801c194:	b003      	add	sp, #12
 801c196:	bd30      	pop	{r4, r5, pc}
 801c198:	2000a5f0 	.word	0x2000a5f0

0801c19c <sbrk_aligned>:
 801c19c:	b570      	push	{r4, r5, r6, lr}
 801c19e:	4e0e      	ldr	r6, [pc, #56]	; (801c1d8 <sbrk_aligned+0x3c>)
 801c1a0:	460c      	mov	r4, r1
 801c1a2:	6831      	ldr	r1, [r6, #0]
 801c1a4:	4605      	mov	r5, r0
 801c1a6:	b911      	cbnz	r1, 801c1ae <sbrk_aligned+0x12>
 801c1a8:	f000 fd60 	bl	801cc6c <_sbrk_r>
 801c1ac:	6030      	str	r0, [r6, #0]
 801c1ae:	4621      	mov	r1, r4
 801c1b0:	4628      	mov	r0, r5
 801c1b2:	f000 fd5b 	bl	801cc6c <_sbrk_r>
 801c1b6:	1c43      	adds	r3, r0, #1
 801c1b8:	d00a      	beq.n	801c1d0 <sbrk_aligned+0x34>
 801c1ba:	1cc4      	adds	r4, r0, #3
 801c1bc:	f024 0403 	bic.w	r4, r4, #3
 801c1c0:	42a0      	cmp	r0, r4
 801c1c2:	d007      	beq.n	801c1d4 <sbrk_aligned+0x38>
 801c1c4:	1a21      	subs	r1, r4, r0
 801c1c6:	4628      	mov	r0, r5
 801c1c8:	f000 fd50 	bl	801cc6c <_sbrk_r>
 801c1cc:	3001      	adds	r0, #1
 801c1ce:	d101      	bne.n	801c1d4 <sbrk_aligned+0x38>
 801c1d0:	f04f 34ff 	mov.w	r4, #4294967295
 801c1d4:	4620      	mov	r0, r4
 801c1d6:	bd70      	pop	{r4, r5, r6, pc}
 801c1d8:	2000a5f4 	.word	0x2000a5f4

0801c1dc <_malloc_r>:
 801c1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1e0:	1ccd      	adds	r5, r1, #3
 801c1e2:	f025 0503 	bic.w	r5, r5, #3
 801c1e6:	3508      	adds	r5, #8
 801c1e8:	2d0c      	cmp	r5, #12
 801c1ea:	bf38      	it	cc
 801c1ec:	250c      	movcc	r5, #12
 801c1ee:	2d00      	cmp	r5, #0
 801c1f0:	4607      	mov	r7, r0
 801c1f2:	db01      	blt.n	801c1f8 <_malloc_r+0x1c>
 801c1f4:	42a9      	cmp	r1, r5
 801c1f6:	d905      	bls.n	801c204 <_malloc_r+0x28>
 801c1f8:	230c      	movs	r3, #12
 801c1fa:	603b      	str	r3, [r7, #0]
 801c1fc:	2600      	movs	r6, #0
 801c1fe:	4630      	mov	r0, r6
 801c200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c204:	4e2e      	ldr	r6, [pc, #184]	; (801c2c0 <_malloc_r+0xe4>)
 801c206:	f001 fda1 	bl	801dd4c <__malloc_lock>
 801c20a:	6833      	ldr	r3, [r6, #0]
 801c20c:	461c      	mov	r4, r3
 801c20e:	bb34      	cbnz	r4, 801c25e <_malloc_r+0x82>
 801c210:	4629      	mov	r1, r5
 801c212:	4638      	mov	r0, r7
 801c214:	f7ff ffc2 	bl	801c19c <sbrk_aligned>
 801c218:	1c43      	adds	r3, r0, #1
 801c21a:	4604      	mov	r4, r0
 801c21c:	d14d      	bne.n	801c2ba <_malloc_r+0xde>
 801c21e:	6834      	ldr	r4, [r6, #0]
 801c220:	4626      	mov	r6, r4
 801c222:	2e00      	cmp	r6, #0
 801c224:	d140      	bne.n	801c2a8 <_malloc_r+0xcc>
 801c226:	6823      	ldr	r3, [r4, #0]
 801c228:	4631      	mov	r1, r6
 801c22a:	4638      	mov	r0, r7
 801c22c:	eb04 0803 	add.w	r8, r4, r3
 801c230:	f000 fd1c 	bl	801cc6c <_sbrk_r>
 801c234:	4580      	cmp	r8, r0
 801c236:	d13a      	bne.n	801c2ae <_malloc_r+0xd2>
 801c238:	6821      	ldr	r1, [r4, #0]
 801c23a:	3503      	adds	r5, #3
 801c23c:	1a6d      	subs	r5, r5, r1
 801c23e:	f025 0503 	bic.w	r5, r5, #3
 801c242:	3508      	adds	r5, #8
 801c244:	2d0c      	cmp	r5, #12
 801c246:	bf38      	it	cc
 801c248:	250c      	movcc	r5, #12
 801c24a:	4629      	mov	r1, r5
 801c24c:	4638      	mov	r0, r7
 801c24e:	f7ff ffa5 	bl	801c19c <sbrk_aligned>
 801c252:	3001      	adds	r0, #1
 801c254:	d02b      	beq.n	801c2ae <_malloc_r+0xd2>
 801c256:	6823      	ldr	r3, [r4, #0]
 801c258:	442b      	add	r3, r5
 801c25a:	6023      	str	r3, [r4, #0]
 801c25c:	e00e      	b.n	801c27c <_malloc_r+0xa0>
 801c25e:	6822      	ldr	r2, [r4, #0]
 801c260:	1b52      	subs	r2, r2, r5
 801c262:	d41e      	bmi.n	801c2a2 <_malloc_r+0xc6>
 801c264:	2a0b      	cmp	r2, #11
 801c266:	d916      	bls.n	801c296 <_malloc_r+0xba>
 801c268:	1961      	adds	r1, r4, r5
 801c26a:	42a3      	cmp	r3, r4
 801c26c:	6025      	str	r5, [r4, #0]
 801c26e:	bf18      	it	ne
 801c270:	6059      	strne	r1, [r3, #4]
 801c272:	6863      	ldr	r3, [r4, #4]
 801c274:	bf08      	it	eq
 801c276:	6031      	streq	r1, [r6, #0]
 801c278:	5162      	str	r2, [r4, r5]
 801c27a:	604b      	str	r3, [r1, #4]
 801c27c:	4638      	mov	r0, r7
 801c27e:	f104 060b 	add.w	r6, r4, #11
 801c282:	f001 fd69 	bl	801dd58 <__malloc_unlock>
 801c286:	f026 0607 	bic.w	r6, r6, #7
 801c28a:	1d23      	adds	r3, r4, #4
 801c28c:	1af2      	subs	r2, r6, r3
 801c28e:	d0b6      	beq.n	801c1fe <_malloc_r+0x22>
 801c290:	1b9b      	subs	r3, r3, r6
 801c292:	50a3      	str	r3, [r4, r2]
 801c294:	e7b3      	b.n	801c1fe <_malloc_r+0x22>
 801c296:	6862      	ldr	r2, [r4, #4]
 801c298:	42a3      	cmp	r3, r4
 801c29a:	bf0c      	ite	eq
 801c29c:	6032      	streq	r2, [r6, #0]
 801c29e:	605a      	strne	r2, [r3, #4]
 801c2a0:	e7ec      	b.n	801c27c <_malloc_r+0xa0>
 801c2a2:	4623      	mov	r3, r4
 801c2a4:	6864      	ldr	r4, [r4, #4]
 801c2a6:	e7b2      	b.n	801c20e <_malloc_r+0x32>
 801c2a8:	4634      	mov	r4, r6
 801c2aa:	6876      	ldr	r6, [r6, #4]
 801c2ac:	e7b9      	b.n	801c222 <_malloc_r+0x46>
 801c2ae:	230c      	movs	r3, #12
 801c2b0:	603b      	str	r3, [r7, #0]
 801c2b2:	4638      	mov	r0, r7
 801c2b4:	f001 fd50 	bl	801dd58 <__malloc_unlock>
 801c2b8:	e7a1      	b.n	801c1fe <_malloc_r+0x22>
 801c2ba:	6025      	str	r5, [r4, #0]
 801c2bc:	e7de      	b.n	801c27c <_malloc_r+0xa0>
 801c2be:	bf00      	nop
 801c2c0:	2000a5f0 	.word	0x2000a5f0

0801c2c4 <__cvt>:
 801c2c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c2c8:	ec55 4b10 	vmov	r4, r5, d0
 801c2cc:	2d00      	cmp	r5, #0
 801c2ce:	460e      	mov	r6, r1
 801c2d0:	4619      	mov	r1, r3
 801c2d2:	462b      	mov	r3, r5
 801c2d4:	bfbb      	ittet	lt
 801c2d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801c2da:	461d      	movlt	r5, r3
 801c2dc:	2300      	movge	r3, #0
 801c2de:	232d      	movlt	r3, #45	; 0x2d
 801c2e0:	700b      	strb	r3, [r1, #0]
 801c2e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c2e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801c2e8:	4691      	mov	r9, r2
 801c2ea:	f023 0820 	bic.w	r8, r3, #32
 801c2ee:	bfbc      	itt	lt
 801c2f0:	4622      	movlt	r2, r4
 801c2f2:	4614      	movlt	r4, r2
 801c2f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c2f8:	d005      	beq.n	801c306 <__cvt+0x42>
 801c2fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801c2fe:	d100      	bne.n	801c302 <__cvt+0x3e>
 801c300:	3601      	adds	r6, #1
 801c302:	2102      	movs	r1, #2
 801c304:	e000      	b.n	801c308 <__cvt+0x44>
 801c306:	2103      	movs	r1, #3
 801c308:	ab03      	add	r3, sp, #12
 801c30a:	9301      	str	r3, [sp, #4]
 801c30c:	ab02      	add	r3, sp, #8
 801c30e:	9300      	str	r3, [sp, #0]
 801c310:	ec45 4b10 	vmov	d0, r4, r5
 801c314:	4653      	mov	r3, sl
 801c316:	4632      	mov	r2, r6
 801c318:	f000 fe52 	bl	801cfc0 <_dtoa_r>
 801c31c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801c320:	4607      	mov	r7, r0
 801c322:	d102      	bne.n	801c32a <__cvt+0x66>
 801c324:	f019 0f01 	tst.w	r9, #1
 801c328:	d022      	beq.n	801c370 <__cvt+0xac>
 801c32a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801c32e:	eb07 0906 	add.w	r9, r7, r6
 801c332:	d110      	bne.n	801c356 <__cvt+0x92>
 801c334:	783b      	ldrb	r3, [r7, #0]
 801c336:	2b30      	cmp	r3, #48	; 0x30
 801c338:	d10a      	bne.n	801c350 <__cvt+0x8c>
 801c33a:	2200      	movs	r2, #0
 801c33c:	2300      	movs	r3, #0
 801c33e:	4620      	mov	r0, r4
 801c340:	4629      	mov	r1, r5
 801c342:	f7e4 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 801c346:	b918      	cbnz	r0, 801c350 <__cvt+0x8c>
 801c348:	f1c6 0601 	rsb	r6, r6, #1
 801c34c:	f8ca 6000 	str.w	r6, [sl]
 801c350:	f8da 3000 	ldr.w	r3, [sl]
 801c354:	4499      	add	r9, r3
 801c356:	2200      	movs	r2, #0
 801c358:	2300      	movs	r3, #0
 801c35a:	4620      	mov	r0, r4
 801c35c:	4629      	mov	r1, r5
 801c35e:	f7e4 fbb3 	bl	8000ac8 <__aeabi_dcmpeq>
 801c362:	b108      	cbz	r0, 801c368 <__cvt+0xa4>
 801c364:	f8cd 900c 	str.w	r9, [sp, #12]
 801c368:	2230      	movs	r2, #48	; 0x30
 801c36a:	9b03      	ldr	r3, [sp, #12]
 801c36c:	454b      	cmp	r3, r9
 801c36e:	d307      	bcc.n	801c380 <__cvt+0xbc>
 801c370:	9b03      	ldr	r3, [sp, #12]
 801c372:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c374:	1bdb      	subs	r3, r3, r7
 801c376:	4638      	mov	r0, r7
 801c378:	6013      	str	r3, [r2, #0]
 801c37a:	b004      	add	sp, #16
 801c37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c380:	1c59      	adds	r1, r3, #1
 801c382:	9103      	str	r1, [sp, #12]
 801c384:	701a      	strb	r2, [r3, #0]
 801c386:	e7f0      	b.n	801c36a <__cvt+0xa6>

0801c388 <__exponent>:
 801c388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c38a:	4603      	mov	r3, r0
 801c38c:	2900      	cmp	r1, #0
 801c38e:	bfb8      	it	lt
 801c390:	4249      	neglt	r1, r1
 801c392:	f803 2b02 	strb.w	r2, [r3], #2
 801c396:	bfb4      	ite	lt
 801c398:	222d      	movlt	r2, #45	; 0x2d
 801c39a:	222b      	movge	r2, #43	; 0x2b
 801c39c:	2909      	cmp	r1, #9
 801c39e:	7042      	strb	r2, [r0, #1]
 801c3a0:	dd2a      	ble.n	801c3f8 <__exponent+0x70>
 801c3a2:	f10d 0407 	add.w	r4, sp, #7
 801c3a6:	46a4      	mov	ip, r4
 801c3a8:	270a      	movs	r7, #10
 801c3aa:	46a6      	mov	lr, r4
 801c3ac:	460a      	mov	r2, r1
 801c3ae:	fb91 f6f7 	sdiv	r6, r1, r7
 801c3b2:	fb07 1516 	mls	r5, r7, r6, r1
 801c3b6:	3530      	adds	r5, #48	; 0x30
 801c3b8:	2a63      	cmp	r2, #99	; 0x63
 801c3ba:	f104 34ff 	add.w	r4, r4, #4294967295
 801c3be:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801c3c2:	4631      	mov	r1, r6
 801c3c4:	dcf1      	bgt.n	801c3aa <__exponent+0x22>
 801c3c6:	3130      	adds	r1, #48	; 0x30
 801c3c8:	f1ae 0502 	sub.w	r5, lr, #2
 801c3cc:	f804 1c01 	strb.w	r1, [r4, #-1]
 801c3d0:	1c44      	adds	r4, r0, #1
 801c3d2:	4629      	mov	r1, r5
 801c3d4:	4561      	cmp	r1, ip
 801c3d6:	d30a      	bcc.n	801c3ee <__exponent+0x66>
 801c3d8:	f10d 0209 	add.w	r2, sp, #9
 801c3dc:	eba2 020e 	sub.w	r2, r2, lr
 801c3e0:	4565      	cmp	r5, ip
 801c3e2:	bf88      	it	hi
 801c3e4:	2200      	movhi	r2, #0
 801c3e6:	4413      	add	r3, r2
 801c3e8:	1a18      	subs	r0, r3, r0
 801c3ea:	b003      	add	sp, #12
 801c3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c3ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 801c3f2:	f804 2f01 	strb.w	r2, [r4, #1]!
 801c3f6:	e7ed      	b.n	801c3d4 <__exponent+0x4c>
 801c3f8:	2330      	movs	r3, #48	; 0x30
 801c3fa:	3130      	adds	r1, #48	; 0x30
 801c3fc:	7083      	strb	r3, [r0, #2]
 801c3fe:	70c1      	strb	r1, [r0, #3]
 801c400:	1d03      	adds	r3, r0, #4
 801c402:	e7f1      	b.n	801c3e8 <__exponent+0x60>

0801c404 <_printf_float>:
 801c404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c408:	ed2d 8b02 	vpush	{d8}
 801c40c:	b08d      	sub	sp, #52	; 0x34
 801c40e:	460c      	mov	r4, r1
 801c410:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801c414:	4616      	mov	r6, r2
 801c416:	461f      	mov	r7, r3
 801c418:	4605      	mov	r5, r0
 801c41a:	f001 fc81 	bl	801dd20 <_localeconv_r>
 801c41e:	f8d0 a000 	ldr.w	sl, [r0]
 801c422:	4650      	mov	r0, sl
 801c424:	f7e3 fed4 	bl	80001d0 <strlen>
 801c428:	2300      	movs	r3, #0
 801c42a:	930a      	str	r3, [sp, #40]	; 0x28
 801c42c:	6823      	ldr	r3, [r4, #0]
 801c42e:	9305      	str	r3, [sp, #20]
 801c430:	f8d8 3000 	ldr.w	r3, [r8]
 801c434:	f894 b018 	ldrb.w	fp, [r4, #24]
 801c438:	3307      	adds	r3, #7
 801c43a:	f023 0307 	bic.w	r3, r3, #7
 801c43e:	f103 0208 	add.w	r2, r3, #8
 801c442:	f8c8 2000 	str.w	r2, [r8]
 801c446:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c44a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801c44e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801c452:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801c456:	9307      	str	r3, [sp, #28]
 801c458:	f8cd 8018 	str.w	r8, [sp, #24]
 801c45c:	ee08 0a10 	vmov	s16, r0
 801c460:	4b9f      	ldr	r3, [pc, #636]	; (801c6e0 <_printf_float+0x2dc>)
 801c462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c466:	f04f 32ff 	mov.w	r2, #4294967295
 801c46a:	f7e4 fb5f 	bl	8000b2c <__aeabi_dcmpun>
 801c46e:	bb88      	cbnz	r0, 801c4d4 <_printf_float+0xd0>
 801c470:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801c474:	4b9a      	ldr	r3, [pc, #616]	; (801c6e0 <_printf_float+0x2dc>)
 801c476:	f04f 32ff 	mov.w	r2, #4294967295
 801c47a:	f7e4 fb39 	bl	8000af0 <__aeabi_dcmple>
 801c47e:	bb48      	cbnz	r0, 801c4d4 <_printf_float+0xd0>
 801c480:	2200      	movs	r2, #0
 801c482:	2300      	movs	r3, #0
 801c484:	4640      	mov	r0, r8
 801c486:	4649      	mov	r1, r9
 801c488:	f7e4 fb28 	bl	8000adc <__aeabi_dcmplt>
 801c48c:	b110      	cbz	r0, 801c494 <_printf_float+0x90>
 801c48e:	232d      	movs	r3, #45	; 0x2d
 801c490:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c494:	4b93      	ldr	r3, [pc, #588]	; (801c6e4 <_printf_float+0x2e0>)
 801c496:	4894      	ldr	r0, [pc, #592]	; (801c6e8 <_printf_float+0x2e4>)
 801c498:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801c49c:	bf94      	ite	ls
 801c49e:	4698      	movls	r8, r3
 801c4a0:	4680      	movhi	r8, r0
 801c4a2:	2303      	movs	r3, #3
 801c4a4:	6123      	str	r3, [r4, #16]
 801c4a6:	9b05      	ldr	r3, [sp, #20]
 801c4a8:	f023 0204 	bic.w	r2, r3, #4
 801c4ac:	6022      	str	r2, [r4, #0]
 801c4ae:	f04f 0900 	mov.w	r9, #0
 801c4b2:	9700      	str	r7, [sp, #0]
 801c4b4:	4633      	mov	r3, r6
 801c4b6:	aa0b      	add	r2, sp, #44	; 0x2c
 801c4b8:	4621      	mov	r1, r4
 801c4ba:	4628      	mov	r0, r5
 801c4bc:	f000 f9d8 	bl	801c870 <_printf_common>
 801c4c0:	3001      	adds	r0, #1
 801c4c2:	f040 8090 	bne.w	801c5e6 <_printf_float+0x1e2>
 801c4c6:	f04f 30ff 	mov.w	r0, #4294967295
 801c4ca:	b00d      	add	sp, #52	; 0x34
 801c4cc:	ecbd 8b02 	vpop	{d8}
 801c4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c4d4:	4642      	mov	r2, r8
 801c4d6:	464b      	mov	r3, r9
 801c4d8:	4640      	mov	r0, r8
 801c4da:	4649      	mov	r1, r9
 801c4dc:	f7e4 fb26 	bl	8000b2c <__aeabi_dcmpun>
 801c4e0:	b140      	cbz	r0, 801c4f4 <_printf_float+0xf0>
 801c4e2:	464b      	mov	r3, r9
 801c4e4:	2b00      	cmp	r3, #0
 801c4e6:	bfbc      	itt	lt
 801c4e8:	232d      	movlt	r3, #45	; 0x2d
 801c4ea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801c4ee:	487f      	ldr	r0, [pc, #508]	; (801c6ec <_printf_float+0x2e8>)
 801c4f0:	4b7f      	ldr	r3, [pc, #508]	; (801c6f0 <_printf_float+0x2ec>)
 801c4f2:	e7d1      	b.n	801c498 <_printf_float+0x94>
 801c4f4:	6863      	ldr	r3, [r4, #4]
 801c4f6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801c4fa:	9206      	str	r2, [sp, #24]
 801c4fc:	1c5a      	adds	r2, r3, #1
 801c4fe:	d13f      	bne.n	801c580 <_printf_float+0x17c>
 801c500:	2306      	movs	r3, #6
 801c502:	6063      	str	r3, [r4, #4]
 801c504:	9b05      	ldr	r3, [sp, #20]
 801c506:	6861      	ldr	r1, [r4, #4]
 801c508:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801c50c:	2300      	movs	r3, #0
 801c50e:	9303      	str	r3, [sp, #12]
 801c510:	ab0a      	add	r3, sp, #40	; 0x28
 801c512:	e9cd b301 	strd	fp, r3, [sp, #4]
 801c516:	ab09      	add	r3, sp, #36	; 0x24
 801c518:	ec49 8b10 	vmov	d0, r8, r9
 801c51c:	9300      	str	r3, [sp, #0]
 801c51e:	6022      	str	r2, [r4, #0]
 801c520:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801c524:	4628      	mov	r0, r5
 801c526:	f7ff fecd 	bl	801c2c4 <__cvt>
 801c52a:	9b06      	ldr	r3, [sp, #24]
 801c52c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c52e:	2b47      	cmp	r3, #71	; 0x47
 801c530:	4680      	mov	r8, r0
 801c532:	d108      	bne.n	801c546 <_printf_float+0x142>
 801c534:	1cc8      	adds	r0, r1, #3
 801c536:	db02      	blt.n	801c53e <_printf_float+0x13a>
 801c538:	6863      	ldr	r3, [r4, #4]
 801c53a:	4299      	cmp	r1, r3
 801c53c:	dd41      	ble.n	801c5c2 <_printf_float+0x1be>
 801c53e:	f1ab 0b02 	sub.w	fp, fp, #2
 801c542:	fa5f fb8b 	uxtb.w	fp, fp
 801c546:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c54a:	d820      	bhi.n	801c58e <_printf_float+0x18a>
 801c54c:	3901      	subs	r1, #1
 801c54e:	465a      	mov	r2, fp
 801c550:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801c554:	9109      	str	r1, [sp, #36]	; 0x24
 801c556:	f7ff ff17 	bl	801c388 <__exponent>
 801c55a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c55c:	1813      	adds	r3, r2, r0
 801c55e:	2a01      	cmp	r2, #1
 801c560:	4681      	mov	r9, r0
 801c562:	6123      	str	r3, [r4, #16]
 801c564:	dc02      	bgt.n	801c56c <_printf_float+0x168>
 801c566:	6822      	ldr	r2, [r4, #0]
 801c568:	07d2      	lsls	r2, r2, #31
 801c56a:	d501      	bpl.n	801c570 <_printf_float+0x16c>
 801c56c:	3301      	adds	r3, #1
 801c56e:	6123      	str	r3, [r4, #16]
 801c570:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801c574:	2b00      	cmp	r3, #0
 801c576:	d09c      	beq.n	801c4b2 <_printf_float+0xae>
 801c578:	232d      	movs	r3, #45	; 0x2d
 801c57a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c57e:	e798      	b.n	801c4b2 <_printf_float+0xae>
 801c580:	9a06      	ldr	r2, [sp, #24]
 801c582:	2a47      	cmp	r2, #71	; 0x47
 801c584:	d1be      	bne.n	801c504 <_printf_float+0x100>
 801c586:	2b00      	cmp	r3, #0
 801c588:	d1bc      	bne.n	801c504 <_printf_float+0x100>
 801c58a:	2301      	movs	r3, #1
 801c58c:	e7b9      	b.n	801c502 <_printf_float+0xfe>
 801c58e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801c592:	d118      	bne.n	801c5c6 <_printf_float+0x1c2>
 801c594:	2900      	cmp	r1, #0
 801c596:	6863      	ldr	r3, [r4, #4]
 801c598:	dd0b      	ble.n	801c5b2 <_printf_float+0x1ae>
 801c59a:	6121      	str	r1, [r4, #16]
 801c59c:	b913      	cbnz	r3, 801c5a4 <_printf_float+0x1a0>
 801c59e:	6822      	ldr	r2, [r4, #0]
 801c5a0:	07d0      	lsls	r0, r2, #31
 801c5a2:	d502      	bpl.n	801c5aa <_printf_float+0x1a6>
 801c5a4:	3301      	adds	r3, #1
 801c5a6:	440b      	add	r3, r1
 801c5a8:	6123      	str	r3, [r4, #16]
 801c5aa:	65a1      	str	r1, [r4, #88]	; 0x58
 801c5ac:	f04f 0900 	mov.w	r9, #0
 801c5b0:	e7de      	b.n	801c570 <_printf_float+0x16c>
 801c5b2:	b913      	cbnz	r3, 801c5ba <_printf_float+0x1b6>
 801c5b4:	6822      	ldr	r2, [r4, #0]
 801c5b6:	07d2      	lsls	r2, r2, #31
 801c5b8:	d501      	bpl.n	801c5be <_printf_float+0x1ba>
 801c5ba:	3302      	adds	r3, #2
 801c5bc:	e7f4      	b.n	801c5a8 <_printf_float+0x1a4>
 801c5be:	2301      	movs	r3, #1
 801c5c0:	e7f2      	b.n	801c5a8 <_printf_float+0x1a4>
 801c5c2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801c5c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c5c8:	4299      	cmp	r1, r3
 801c5ca:	db05      	blt.n	801c5d8 <_printf_float+0x1d4>
 801c5cc:	6823      	ldr	r3, [r4, #0]
 801c5ce:	6121      	str	r1, [r4, #16]
 801c5d0:	07d8      	lsls	r0, r3, #31
 801c5d2:	d5ea      	bpl.n	801c5aa <_printf_float+0x1a6>
 801c5d4:	1c4b      	adds	r3, r1, #1
 801c5d6:	e7e7      	b.n	801c5a8 <_printf_float+0x1a4>
 801c5d8:	2900      	cmp	r1, #0
 801c5da:	bfd4      	ite	le
 801c5dc:	f1c1 0202 	rsble	r2, r1, #2
 801c5e0:	2201      	movgt	r2, #1
 801c5e2:	4413      	add	r3, r2
 801c5e4:	e7e0      	b.n	801c5a8 <_printf_float+0x1a4>
 801c5e6:	6823      	ldr	r3, [r4, #0]
 801c5e8:	055a      	lsls	r2, r3, #21
 801c5ea:	d407      	bmi.n	801c5fc <_printf_float+0x1f8>
 801c5ec:	6923      	ldr	r3, [r4, #16]
 801c5ee:	4642      	mov	r2, r8
 801c5f0:	4631      	mov	r1, r6
 801c5f2:	4628      	mov	r0, r5
 801c5f4:	47b8      	blx	r7
 801c5f6:	3001      	adds	r0, #1
 801c5f8:	d12c      	bne.n	801c654 <_printf_float+0x250>
 801c5fa:	e764      	b.n	801c4c6 <_printf_float+0xc2>
 801c5fc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801c600:	f240 80e0 	bls.w	801c7c4 <_printf_float+0x3c0>
 801c604:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c608:	2200      	movs	r2, #0
 801c60a:	2300      	movs	r3, #0
 801c60c:	f7e4 fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 801c610:	2800      	cmp	r0, #0
 801c612:	d034      	beq.n	801c67e <_printf_float+0x27a>
 801c614:	4a37      	ldr	r2, [pc, #220]	; (801c6f4 <_printf_float+0x2f0>)
 801c616:	2301      	movs	r3, #1
 801c618:	4631      	mov	r1, r6
 801c61a:	4628      	mov	r0, r5
 801c61c:	47b8      	blx	r7
 801c61e:	3001      	adds	r0, #1
 801c620:	f43f af51 	beq.w	801c4c6 <_printf_float+0xc2>
 801c624:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c628:	429a      	cmp	r2, r3
 801c62a:	db02      	blt.n	801c632 <_printf_float+0x22e>
 801c62c:	6823      	ldr	r3, [r4, #0]
 801c62e:	07d8      	lsls	r0, r3, #31
 801c630:	d510      	bpl.n	801c654 <_printf_float+0x250>
 801c632:	ee18 3a10 	vmov	r3, s16
 801c636:	4652      	mov	r2, sl
 801c638:	4631      	mov	r1, r6
 801c63a:	4628      	mov	r0, r5
 801c63c:	47b8      	blx	r7
 801c63e:	3001      	adds	r0, #1
 801c640:	f43f af41 	beq.w	801c4c6 <_printf_float+0xc2>
 801c644:	f04f 0800 	mov.w	r8, #0
 801c648:	f104 091a 	add.w	r9, r4, #26
 801c64c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c64e:	3b01      	subs	r3, #1
 801c650:	4543      	cmp	r3, r8
 801c652:	dc09      	bgt.n	801c668 <_printf_float+0x264>
 801c654:	6823      	ldr	r3, [r4, #0]
 801c656:	079b      	lsls	r3, r3, #30
 801c658:	f100 8105 	bmi.w	801c866 <_printf_float+0x462>
 801c65c:	68e0      	ldr	r0, [r4, #12]
 801c65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c660:	4298      	cmp	r0, r3
 801c662:	bfb8      	it	lt
 801c664:	4618      	movlt	r0, r3
 801c666:	e730      	b.n	801c4ca <_printf_float+0xc6>
 801c668:	2301      	movs	r3, #1
 801c66a:	464a      	mov	r2, r9
 801c66c:	4631      	mov	r1, r6
 801c66e:	4628      	mov	r0, r5
 801c670:	47b8      	blx	r7
 801c672:	3001      	adds	r0, #1
 801c674:	f43f af27 	beq.w	801c4c6 <_printf_float+0xc2>
 801c678:	f108 0801 	add.w	r8, r8, #1
 801c67c:	e7e6      	b.n	801c64c <_printf_float+0x248>
 801c67e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c680:	2b00      	cmp	r3, #0
 801c682:	dc39      	bgt.n	801c6f8 <_printf_float+0x2f4>
 801c684:	4a1b      	ldr	r2, [pc, #108]	; (801c6f4 <_printf_float+0x2f0>)
 801c686:	2301      	movs	r3, #1
 801c688:	4631      	mov	r1, r6
 801c68a:	4628      	mov	r0, r5
 801c68c:	47b8      	blx	r7
 801c68e:	3001      	adds	r0, #1
 801c690:	f43f af19 	beq.w	801c4c6 <_printf_float+0xc2>
 801c694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c698:	4313      	orrs	r3, r2
 801c69a:	d102      	bne.n	801c6a2 <_printf_float+0x29e>
 801c69c:	6823      	ldr	r3, [r4, #0]
 801c69e:	07d9      	lsls	r1, r3, #31
 801c6a0:	d5d8      	bpl.n	801c654 <_printf_float+0x250>
 801c6a2:	ee18 3a10 	vmov	r3, s16
 801c6a6:	4652      	mov	r2, sl
 801c6a8:	4631      	mov	r1, r6
 801c6aa:	4628      	mov	r0, r5
 801c6ac:	47b8      	blx	r7
 801c6ae:	3001      	adds	r0, #1
 801c6b0:	f43f af09 	beq.w	801c4c6 <_printf_float+0xc2>
 801c6b4:	f04f 0900 	mov.w	r9, #0
 801c6b8:	f104 0a1a 	add.w	sl, r4, #26
 801c6bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6be:	425b      	negs	r3, r3
 801c6c0:	454b      	cmp	r3, r9
 801c6c2:	dc01      	bgt.n	801c6c8 <_printf_float+0x2c4>
 801c6c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c6c6:	e792      	b.n	801c5ee <_printf_float+0x1ea>
 801c6c8:	2301      	movs	r3, #1
 801c6ca:	4652      	mov	r2, sl
 801c6cc:	4631      	mov	r1, r6
 801c6ce:	4628      	mov	r0, r5
 801c6d0:	47b8      	blx	r7
 801c6d2:	3001      	adds	r0, #1
 801c6d4:	f43f aef7 	beq.w	801c4c6 <_printf_float+0xc2>
 801c6d8:	f109 0901 	add.w	r9, r9, #1
 801c6dc:	e7ee      	b.n	801c6bc <_printf_float+0x2b8>
 801c6de:	bf00      	nop
 801c6e0:	7fefffff 	.word	0x7fefffff
 801c6e4:	0801f6bc 	.word	0x0801f6bc
 801c6e8:	0801f6c0 	.word	0x0801f6c0
 801c6ec:	0801f6c8 	.word	0x0801f6c8
 801c6f0:	0801f6c4 	.word	0x0801f6c4
 801c6f4:	0801f6cc 	.word	0x0801f6cc
 801c6f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c6fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c6fc:	429a      	cmp	r2, r3
 801c6fe:	bfa8      	it	ge
 801c700:	461a      	movge	r2, r3
 801c702:	2a00      	cmp	r2, #0
 801c704:	4691      	mov	r9, r2
 801c706:	dc37      	bgt.n	801c778 <_printf_float+0x374>
 801c708:	f04f 0b00 	mov.w	fp, #0
 801c70c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c710:	f104 021a 	add.w	r2, r4, #26
 801c714:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801c716:	9305      	str	r3, [sp, #20]
 801c718:	eba3 0309 	sub.w	r3, r3, r9
 801c71c:	455b      	cmp	r3, fp
 801c71e:	dc33      	bgt.n	801c788 <_printf_float+0x384>
 801c720:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c724:	429a      	cmp	r2, r3
 801c726:	db3b      	blt.n	801c7a0 <_printf_float+0x39c>
 801c728:	6823      	ldr	r3, [r4, #0]
 801c72a:	07da      	lsls	r2, r3, #31
 801c72c:	d438      	bmi.n	801c7a0 <_printf_float+0x39c>
 801c72e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c730:	9a05      	ldr	r2, [sp, #20]
 801c732:	9909      	ldr	r1, [sp, #36]	; 0x24
 801c734:	1a9a      	subs	r2, r3, r2
 801c736:	eba3 0901 	sub.w	r9, r3, r1
 801c73a:	4591      	cmp	r9, r2
 801c73c:	bfa8      	it	ge
 801c73e:	4691      	movge	r9, r2
 801c740:	f1b9 0f00 	cmp.w	r9, #0
 801c744:	dc35      	bgt.n	801c7b2 <_printf_float+0x3ae>
 801c746:	f04f 0800 	mov.w	r8, #0
 801c74a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801c74e:	f104 0a1a 	add.w	sl, r4, #26
 801c752:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801c756:	1a9b      	subs	r3, r3, r2
 801c758:	eba3 0309 	sub.w	r3, r3, r9
 801c75c:	4543      	cmp	r3, r8
 801c75e:	f77f af79 	ble.w	801c654 <_printf_float+0x250>
 801c762:	2301      	movs	r3, #1
 801c764:	4652      	mov	r2, sl
 801c766:	4631      	mov	r1, r6
 801c768:	4628      	mov	r0, r5
 801c76a:	47b8      	blx	r7
 801c76c:	3001      	adds	r0, #1
 801c76e:	f43f aeaa 	beq.w	801c4c6 <_printf_float+0xc2>
 801c772:	f108 0801 	add.w	r8, r8, #1
 801c776:	e7ec      	b.n	801c752 <_printf_float+0x34e>
 801c778:	4613      	mov	r3, r2
 801c77a:	4631      	mov	r1, r6
 801c77c:	4642      	mov	r2, r8
 801c77e:	4628      	mov	r0, r5
 801c780:	47b8      	blx	r7
 801c782:	3001      	adds	r0, #1
 801c784:	d1c0      	bne.n	801c708 <_printf_float+0x304>
 801c786:	e69e      	b.n	801c4c6 <_printf_float+0xc2>
 801c788:	2301      	movs	r3, #1
 801c78a:	4631      	mov	r1, r6
 801c78c:	4628      	mov	r0, r5
 801c78e:	9205      	str	r2, [sp, #20]
 801c790:	47b8      	blx	r7
 801c792:	3001      	adds	r0, #1
 801c794:	f43f ae97 	beq.w	801c4c6 <_printf_float+0xc2>
 801c798:	9a05      	ldr	r2, [sp, #20]
 801c79a:	f10b 0b01 	add.w	fp, fp, #1
 801c79e:	e7b9      	b.n	801c714 <_printf_float+0x310>
 801c7a0:	ee18 3a10 	vmov	r3, s16
 801c7a4:	4652      	mov	r2, sl
 801c7a6:	4631      	mov	r1, r6
 801c7a8:	4628      	mov	r0, r5
 801c7aa:	47b8      	blx	r7
 801c7ac:	3001      	adds	r0, #1
 801c7ae:	d1be      	bne.n	801c72e <_printf_float+0x32a>
 801c7b0:	e689      	b.n	801c4c6 <_printf_float+0xc2>
 801c7b2:	9a05      	ldr	r2, [sp, #20]
 801c7b4:	464b      	mov	r3, r9
 801c7b6:	4442      	add	r2, r8
 801c7b8:	4631      	mov	r1, r6
 801c7ba:	4628      	mov	r0, r5
 801c7bc:	47b8      	blx	r7
 801c7be:	3001      	adds	r0, #1
 801c7c0:	d1c1      	bne.n	801c746 <_printf_float+0x342>
 801c7c2:	e680      	b.n	801c4c6 <_printf_float+0xc2>
 801c7c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c7c6:	2a01      	cmp	r2, #1
 801c7c8:	dc01      	bgt.n	801c7ce <_printf_float+0x3ca>
 801c7ca:	07db      	lsls	r3, r3, #31
 801c7cc:	d538      	bpl.n	801c840 <_printf_float+0x43c>
 801c7ce:	2301      	movs	r3, #1
 801c7d0:	4642      	mov	r2, r8
 801c7d2:	4631      	mov	r1, r6
 801c7d4:	4628      	mov	r0, r5
 801c7d6:	47b8      	blx	r7
 801c7d8:	3001      	adds	r0, #1
 801c7da:	f43f ae74 	beq.w	801c4c6 <_printf_float+0xc2>
 801c7de:	ee18 3a10 	vmov	r3, s16
 801c7e2:	4652      	mov	r2, sl
 801c7e4:	4631      	mov	r1, r6
 801c7e6:	4628      	mov	r0, r5
 801c7e8:	47b8      	blx	r7
 801c7ea:	3001      	adds	r0, #1
 801c7ec:	f43f ae6b 	beq.w	801c4c6 <_printf_float+0xc2>
 801c7f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801c7f4:	2200      	movs	r2, #0
 801c7f6:	2300      	movs	r3, #0
 801c7f8:	f7e4 f966 	bl	8000ac8 <__aeabi_dcmpeq>
 801c7fc:	b9d8      	cbnz	r0, 801c836 <_printf_float+0x432>
 801c7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c800:	f108 0201 	add.w	r2, r8, #1
 801c804:	3b01      	subs	r3, #1
 801c806:	4631      	mov	r1, r6
 801c808:	4628      	mov	r0, r5
 801c80a:	47b8      	blx	r7
 801c80c:	3001      	adds	r0, #1
 801c80e:	d10e      	bne.n	801c82e <_printf_float+0x42a>
 801c810:	e659      	b.n	801c4c6 <_printf_float+0xc2>
 801c812:	2301      	movs	r3, #1
 801c814:	4652      	mov	r2, sl
 801c816:	4631      	mov	r1, r6
 801c818:	4628      	mov	r0, r5
 801c81a:	47b8      	blx	r7
 801c81c:	3001      	adds	r0, #1
 801c81e:	f43f ae52 	beq.w	801c4c6 <_printf_float+0xc2>
 801c822:	f108 0801 	add.w	r8, r8, #1
 801c826:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c828:	3b01      	subs	r3, #1
 801c82a:	4543      	cmp	r3, r8
 801c82c:	dcf1      	bgt.n	801c812 <_printf_float+0x40e>
 801c82e:	464b      	mov	r3, r9
 801c830:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801c834:	e6dc      	b.n	801c5f0 <_printf_float+0x1ec>
 801c836:	f04f 0800 	mov.w	r8, #0
 801c83a:	f104 0a1a 	add.w	sl, r4, #26
 801c83e:	e7f2      	b.n	801c826 <_printf_float+0x422>
 801c840:	2301      	movs	r3, #1
 801c842:	4642      	mov	r2, r8
 801c844:	e7df      	b.n	801c806 <_printf_float+0x402>
 801c846:	2301      	movs	r3, #1
 801c848:	464a      	mov	r2, r9
 801c84a:	4631      	mov	r1, r6
 801c84c:	4628      	mov	r0, r5
 801c84e:	47b8      	blx	r7
 801c850:	3001      	adds	r0, #1
 801c852:	f43f ae38 	beq.w	801c4c6 <_printf_float+0xc2>
 801c856:	f108 0801 	add.w	r8, r8, #1
 801c85a:	68e3      	ldr	r3, [r4, #12]
 801c85c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801c85e:	1a5b      	subs	r3, r3, r1
 801c860:	4543      	cmp	r3, r8
 801c862:	dcf0      	bgt.n	801c846 <_printf_float+0x442>
 801c864:	e6fa      	b.n	801c65c <_printf_float+0x258>
 801c866:	f04f 0800 	mov.w	r8, #0
 801c86a:	f104 0919 	add.w	r9, r4, #25
 801c86e:	e7f4      	b.n	801c85a <_printf_float+0x456>

0801c870 <_printf_common>:
 801c870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c874:	4616      	mov	r6, r2
 801c876:	4699      	mov	r9, r3
 801c878:	688a      	ldr	r2, [r1, #8]
 801c87a:	690b      	ldr	r3, [r1, #16]
 801c87c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801c880:	4293      	cmp	r3, r2
 801c882:	bfb8      	it	lt
 801c884:	4613      	movlt	r3, r2
 801c886:	6033      	str	r3, [r6, #0]
 801c888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801c88c:	4607      	mov	r7, r0
 801c88e:	460c      	mov	r4, r1
 801c890:	b10a      	cbz	r2, 801c896 <_printf_common+0x26>
 801c892:	3301      	adds	r3, #1
 801c894:	6033      	str	r3, [r6, #0]
 801c896:	6823      	ldr	r3, [r4, #0]
 801c898:	0699      	lsls	r1, r3, #26
 801c89a:	bf42      	ittt	mi
 801c89c:	6833      	ldrmi	r3, [r6, #0]
 801c89e:	3302      	addmi	r3, #2
 801c8a0:	6033      	strmi	r3, [r6, #0]
 801c8a2:	6825      	ldr	r5, [r4, #0]
 801c8a4:	f015 0506 	ands.w	r5, r5, #6
 801c8a8:	d106      	bne.n	801c8b8 <_printf_common+0x48>
 801c8aa:	f104 0a19 	add.w	sl, r4, #25
 801c8ae:	68e3      	ldr	r3, [r4, #12]
 801c8b0:	6832      	ldr	r2, [r6, #0]
 801c8b2:	1a9b      	subs	r3, r3, r2
 801c8b4:	42ab      	cmp	r3, r5
 801c8b6:	dc26      	bgt.n	801c906 <_printf_common+0x96>
 801c8b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801c8bc:	1e13      	subs	r3, r2, #0
 801c8be:	6822      	ldr	r2, [r4, #0]
 801c8c0:	bf18      	it	ne
 801c8c2:	2301      	movne	r3, #1
 801c8c4:	0692      	lsls	r2, r2, #26
 801c8c6:	d42b      	bmi.n	801c920 <_printf_common+0xb0>
 801c8c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801c8cc:	4649      	mov	r1, r9
 801c8ce:	4638      	mov	r0, r7
 801c8d0:	47c0      	blx	r8
 801c8d2:	3001      	adds	r0, #1
 801c8d4:	d01e      	beq.n	801c914 <_printf_common+0xa4>
 801c8d6:	6823      	ldr	r3, [r4, #0]
 801c8d8:	68e5      	ldr	r5, [r4, #12]
 801c8da:	6832      	ldr	r2, [r6, #0]
 801c8dc:	f003 0306 	and.w	r3, r3, #6
 801c8e0:	2b04      	cmp	r3, #4
 801c8e2:	bf08      	it	eq
 801c8e4:	1aad      	subeq	r5, r5, r2
 801c8e6:	68a3      	ldr	r3, [r4, #8]
 801c8e8:	6922      	ldr	r2, [r4, #16]
 801c8ea:	bf0c      	ite	eq
 801c8ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c8f0:	2500      	movne	r5, #0
 801c8f2:	4293      	cmp	r3, r2
 801c8f4:	bfc4      	itt	gt
 801c8f6:	1a9b      	subgt	r3, r3, r2
 801c8f8:	18ed      	addgt	r5, r5, r3
 801c8fa:	2600      	movs	r6, #0
 801c8fc:	341a      	adds	r4, #26
 801c8fe:	42b5      	cmp	r5, r6
 801c900:	d11a      	bne.n	801c938 <_printf_common+0xc8>
 801c902:	2000      	movs	r0, #0
 801c904:	e008      	b.n	801c918 <_printf_common+0xa8>
 801c906:	2301      	movs	r3, #1
 801c908:	4652      	mov	r2, sl
 801c90a:	4649      	mov	r1, r9
 801c90c:	4638      	mov	r0, r7
 801c90e:	47c0      	blx	r8
 801c910:	3001      	adds	r0, #1
 801c912:	d103      	bne.n	801c91c <_printf_common+0xac>
 801c914:	f04f 30ff 	mov.w	r0, #4294967295
 801c918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c91c:	3501      	adds	r5, #1
 801c91e:	e7c6      	b.n	801c8ae <_printf_common+0x3e>
 801c920:	18e1      	adds	r1, r4, r3
 801c922:	1c5a      	adds	r2, r3, #1
 801c924:	2030      	movs	r0, #48	; 0x30
 801c926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801c92a:	4422      	add	r2, r4
 801c92c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801c930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801c934:	3302      	adds	r3, #2
 801c936:	e7c7      	b.n	801c8c8 <_printf_common+0x58>
 801c938:	2301      	movs	r3, #1
 801c93a:	4622      	mov	r2, r4
 801c93c:	4649      	mov	r1, r9
 801c93e:	4638      	mov	r0, r7
 801c940:	47c0      	blx	r8
 801c942:	3001      	adds	r0, #1
 801c944:	d0e6      	beq.n	801c914 <_printf_common+0xa4>
 801c946:	3601      	adds	r6, #1
 801c948:	e7d9      	b.n	801c8fe <_printf_common+0x8e>
	...

0801c94c <_printf_i>:
 801c94c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c950:	7e0f      	ldrb	r7, [r1, #24]
 801c952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801c954:	2f78      	cmp	r7, #120	; 0x78
 801c956:	4691      	mov	r9, r2
 801c958:	4680      	mov	r8, r0
 801c95a:	460c      	mov	r4, r1
 801c95c:	469a      	mov	sl, r3
 801c95e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801c962:	d807      	bhi.n	801c974 <_printf_i+0x28>
 801c964:	2f62      	cmp	r7, #98	; 0x62
 801c966:	d80a      	bhi.n	801c97e <_printf_i+0x32>
 801c968:	2f00      	cmp	r7, #0
 801c96a:	f000 80d8 	beq.w	801cb1e <_printf_i+0x1d2>
 801c96e:	2f58      	cmp	r7, #88	; 0x58
 801c970:	f000 80a3 	beq.w	801caba <_printf_i+0x16e>
 801c974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c97c:	e03a      	b.n	801c9f4 <_printf_i+0xa8>
 801c97e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c982:	2b15      	cmp	r3, #21
 801c984:	d8f6      	bhi.n	801c974 <_printf_i+0x28>
 801c986:	a101      	add	r1, pc, #4	; (adr r1, 801c98c <_printf_i+0x40>)
 801c988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c98c:	0801c9e5 	.word	0x0801c9e5
 801c990:	0801c9f9 	.word	0x0801c9f9
 801c994:	0801c975 	.word	0x0801c975
 801c998:	0801c975 	.word	0x0801c975
 801c99c:	0801c975 	.word	0x0801c975
 801c9a0:	0801c975 	.word	0x0801c975
 801c9a4:	0801c9f9 	.word	0x0801c9f9
 801c9a8:	0801c975 	.word	0x0801c975
 801c9ac:	0801c975 	.word	0x0801c975
 801c9b0:	0801c975 	.word	0x0801c975
 801c9b4:	0801c975 	.word	0x0801c975
 801c9b8:	0801cb05 	.word	0x0801cb05
 801c9bc:	0801ca29 	.word	0x0801ca29
 801c9c0:	0801cae7 	.word	0x0801cae7
 801c9c4:	0801c975 	.word	0x0801c975
 801c9c8:	0801c975 	.word	0x0801c975
 801c9cc:	0801cb27 	.word	0x0801cb27
 801c9d0:	0801c975 	.word	0x0801c975
 801c9d4:	0801ca29 	.word	0x0801ca29
 801c9d8:	0801c975 	.word	0x0801c975
 801c9dc:	0801c975 	.word	0x0801c975
 801c9e0:	0801caef 	.word	0x0801caef
 801c9e4:	682b      	ldr	r3, [r5, #0]
 801c9e6:	1d1a      	adds	r2, r3, #4
 801c9e8:	681b      	ldr	r3, [r3, #0]
 801c9ea:	602a      	str	r2, [r5, #0]
 801c9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801c9f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c9f4:	2301      	movs	r3, #1
 801c9f6:	e0a3      	b.n	801cb40 <_printf_i+0x1f4>
 801c9f8:	6820      	ldr	r0, [r4, #0]
 801c9fa:	6829      	ldr	r1, [r5, #0]
 801c9fc:	0606      	lsls	r6, r0, #24
 801c9fe:	f101 0304 	add.w	r3, r1, #4
 801ca02:	d50a      	bpl.n	801ca1a <_printf_i+0xce>
 801ca04:	680e      	ldr	r6, [r1, #0]
 801ca06:	602b      	str	r3, [r5, #0]
 801ca08:	2e00      	cmp	r6, #0
 801ca0a:	da03      	bge.n	801ca14 <_printf_i+0xc8>
 801ca0c:	232d      	movs	r3, #45	; 0x2d
 801ca0e:	4276      	negs	r6, r6
 801ca10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ca14:	485e      	ldr	r0, [pc, #376]	; (801cb90 <_printf_i+0x244>)
 801ca16:	230a      	movs	r3, #10
 801ca18:	e019      	b.n	801ca4e <_printf_i+0x102>
 801ca1a:	680e      	ldr	r6, [r1, #0]
 801ca1c:	602b      	str	r3, [r5, #0]
 801ca1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ca22:	bf18      	it	ne
 801ca24:	b236      	sxthne	r6, r6
 801ca26:	e7ef      	b.n	801ca08 <_printf_i+0xbc>
 801ca28:	682b      	ldr	r3, [r5, #0]
 801ca2a:	6820      	ldr	r0, [r4, #0]
 801ca2c:	1d19      	adds	r1, r3, #4
 801ca2e:	6029      	str	r1, [r5, #0]
 801ca30:	0601      	lsls	r1, r0, #24
 801ca32:	d501      	bpl.n	801ca38 <_printf_i+0xec>
 801ca34:	681e      	ldr	r6, [r3, #0]
 801ca36:	e002      	b.n	801ca3e <_printf_i+0xf2>
 801ca38:	0646      	lsls	r6, r0, #25
 801ca3a:	d5fb      	bpl.n	801ca34 <_printf_i+0xe8>
 801ca3c:	881e      	ldrh	r6, [r3, #0]
 801ca3e:	4854      	ldr	r0, [pc, #336]	; (801cb90 <_printf_i+0x244>)
 801ca40:	2f6f      	cmp	r7, #111	; 0x6f
 801ca42:	bf0c      	ite	eq
 801ca44:	2308      	moveq	r3, #8
 801ca46:	230a      	movne	r3, #10
 801ca48:	2100      	movs	r1, #0
 801ca4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ca4e:	6865      	ldr	r5, [r4, #4]
 801ca50:	60a5      	str	r5, [r4, #8]
 801ca52:	2d00      	cmp	r5, #0
 801ca54:	bfa2      	ittt	ge
 801ca56:	6821      	ldrge	r1, [r4, #0]
 801ca58:	f021 0104 	bicge.w	r1, r1, #4
 801ca5c:	6021      	strge	r1, [r4, #0]
 801ca5e:	b90e      	cbnz	r6, 801ca64 <_printf_i+0x118>
 801ca60:	2d00      	cmp	r5, #0
 801ca62:	d04d      	beq.n	801cb00 <_printf_i+0x1b4>
 801ca64:	4615      	mov	r5, r2
 801ca66:	fbb6 f1f3 	udiv	r1, r6, r3
 801ca6a:	fb03 6711 	mls	r7, r3, r1, r6
 801ca6e:	5dc7      	ldrb	r7, [r0, r7]
 801ca70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ca74:	4637      	mov	r7, r6
 801ca76:	42bb      	cmp	r3, r7
 801ca78:	460e      	mov	r6, r1
 801ca7a:	d9f4      	bls.n	801ca66 <_printf_i+0x11a>
 801ca7c:	2b08      	cmp	r3, #8
 801ca7e:	d10b      	bne.n	801ca98 <_printf_i+0x14c>
 801ca80:	6823      	ldr	r3, [r4, #0]
 801ca82:	07de      	lsls	r6, r3, #31
 801ca84:	d508      	bpl.n	801ca98 <_printf_i+0x14c>
 801ca86:	6923      	ldr	r3, [r4, #16]
 801ca88:	6861      	ldr	r1, [r4, #4]
 801ca8a:	4299      	cmp	r1, r3
 801ca8c:	bfde      	ittt	le
 801ca8e:	2330      	movle	r3, #48	; 0x30
 801ca90:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ca94:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ca98:	1b52      	subs	r2, r2, r5
 801ca9a:	6122      	str	r2, [r4, #16]
 801ca9c:	f8cd a000 	str.w	sl, [sp]
 801caa0:	464b      	mov	r3, r9
 801caa2:	aa03      	add	r2, sp, #12
 801caa4:	4621      	mov	r1, r4
 801caa6:	4640      	mov	r0, r8
 801caa8:	f7ff fee2 	bl	801c870 <_printf_common>
 801caac:	3001      	adds	r0, #1
 801caae:	d14c      	bne.n	801cb4a <_printf_i+0x1fe>
 801cab0:	f04f 30ff 	mov.w	r0, #4294967295
 801cab4:	b004      	add	sp, #16
 801cab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801caba:	4835      	ldr	r0, [pc, #212]	; (801cb90 <_printf_i+0x244>)
 801cabc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801cac0:	6829      	ldr	r1, [r5, #0]
 801cac2:	6823      	ldr	r3, [r4, #0]
 801cac4:	f851 6b04 	ldr.w	r6, [r1], #4
 801cac8:	6029      	str	r1, [r5, #0]
 801caca:	061d      	lsls	r5, r3, #24
 801cacc:	d514      	bpl.n	801caf8 <_printf_i+0x1ac>
 801cace:	07df      	lsls	r7, r3, #31
 801cad0:	bf44      	itt	mi
 801cad2:	f043 0320 	orrmi.w	r3, r3, #32
 801cad6:	6023      	strmi	r3, [r4, #0]
 801cad8:	b91e      	cbnz	r6, 801cae2 <_printf_i+0x196>
 801cada:	6823      	ldr	r3, [r4, #0]
 801cadc:	f023 0320 	bic.w	r3, r3, #32
 801cae0:	6023      	str	r3, [r4, #0]
 801cae2:	2310      	movs	r3, #16
 801cae4:	e7b0      	b.n	801ca48 <_printf_i+0xfc>
 801cae6:	6823      	ldr	r3, [r4, #0]
 801cae8:	f043 0320 	orr.w	r3, r3, #32
 801caec:	6023      	str	r3, [r4, #0]
 801caee:	2378      	movs	r3, #120	; 0x78
 801caf0:	4828      	ldr	r0, [pc, #160]	; (801cb94 <_printf_i+0x248>)
 801caf2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801caf6:	e7e3      	b.n	801cac0 <_printf_i+0x174>
 801caf8:	0659      	lsls	r1, r3, #25
 801cafa:	bf48      	it	mi
 801cafc:	b2b6      	uxthmi	r6, r6
 801cafe:	e7e6      	b.n	801cace <_printf_i+0x182>
 801cb00:	4615      	mov	r5, r2
 801cb02:	e7bb      	b.n	801ca7c <_printf_i+0x130>
 801cb04:	682b      	ldr	r3, [r5, #0]
 801cb06:	6826      	ldr	r6, [r4, #0]
 801cb08:	6961      	ldr	r1, [r4, #20]
 801cb0a:	1d18      	adds	r0, r3, #4
 801cb0c:	6028      	str	r0, [r5, #0]
 801cb0e:	0635      	lsls	r5, r6, #24
 801cb10:	681b      	ldr	r3, [r3, #0]
 801cb12:	d501      	bpl.n	801cb18 <_printf_i+0x1cc>
 801cb14:	6019      	str	r1, [r3, #0]
 801cb16:	e002      	b.n	801cb1e <_printf_i+0x1d2>
 801cb18:	0670      	lsls	r0, r6, #25
 801cb1a:	d5fb      	bpl.n	801cb14 <_printf_i+0x1c8>
 801cb1c:	8019      	strh	r1, [r3, #0]
 801cb1e:	2300      	movs	r3, #0
 801cb20:	6123      	str	r3, [r4, #16]
 801cb22:	4615      	mov	r5, r2
 801cb24:	e7ba      	b.n	801ca9c <_printf_i+0x150>
 801cb26:	682b      	ldr	r3, [r5, #0]
 801cb28:	1d1a      	adds	r2, r3, #4
 801cb2a:	602a      	str	r2, [r5, #0]
 801cb2c:	681d      	ldr	r5, [r3, #0]
 801cb2e:	6862      	ldr	r2, [r4, #4]
 801cb30:	2100      	movs	r1, #0
 801cb32:	4628      	mov	r0, r5
 801cb34:	f7e3 fb54 	bl	80001e0 <memchr>
 801cb38:	b108      	cbz	r0, 801cb3e <_printf_i+0x1f2>
 801cb3a:	1b40      	subs	r0, r0, r5
 801cb3c:	6060      	str	r0, [r4, #4]
 801cb3e:	6863      	ldr	r3, [r4, #4]
 801cb40:	6123      	str	r3, [r4, #16]
 801cb42:	2300      	movs	r3, #0
 801cb44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801cb48:	e7a8      	b.n	801ca9c <_printf_i+0x150>
 801cb4a:	6923      	ldr	r3, [r4, #16]
 801cb4c:	462a      	mov	r2, r5
 801cb4e:	4649      	mov	r1, r9
 801cb50:	4640      	mov	r0, r8
 801cb52:	47d0      	blx	sl
 801cb54:	3001      	adds	r0, #1
 801cb56:	d0ab      	beq.n	801cab0 <_printf_i+0x164>
 801cb58:	6823      	ldr	r3, [r4, #0]
 801cb5a:	079b      	lsls	r3, r3, #30
 801cb5c:	d413      	bmi.n	801cb86 <_printf_i+0x23a>
 801cb5e:	68e0      	ldr	r0, [r4, #12]
 801cb60:	9b03      	ldr	r3, [sp, #12]
 801cb62:	4298      	cmp	r0, r3
 801cb64:	bfb8      	it	lt
 801cb66:	4618      	movlt	r0, r3
 801cb68:	e7a4      	b.n	801cab4 <_printf_i+0x168>
 801cb6a:	2301      	movs	r3, #1
 801cb6c:	4632      	mov	r2, r6
 801cb6e:	4649      	mov	r1, r9
 801cb70:	4640      	mov	r0, r8
 801cb72:	47d0      	blx	sl
 801cb74:	3001      	adds	r0, #1
 801cb76:	d09b      	beq.n	801cab0 <_printf_i+0x164>
 801cb78:	3501      	adds	r5, #1
 801cb7a:	68e3      	ldr	r3, [r4, #12]
 801cb7c:	9903      	ldr	r1, [sp, #12]
 801cb7e:	1a5b      	subs	r3, r3, r1
 801cb80:	42ab      	cmp	r3, r5
 801cb82:	dcf2      	bgt.n	801cb6a <_printf_i+0x21e>
 801cb84:	e7eb      	b.n	801cb5e <_printf_i+0x212>
 801cb86:	2500      	movs	r5, #0
 801cb88:	f104 0619 	add.w	r6, r4, #25
 801cb8c:	e7f5      	b.n	801cb7a <_printf_i+0x22e>
 801cb8e:	bf00      	nop
 801cb90:	0801f6ce 	.word	0x0801f6ce
 801cb94:	0801f6df 	.word	0x0801f6df

0801cb98 <cleanup_glue>:
 801cb98:	b538      	push	{r3, r4, r5, lr}
 801cb9a:	460c      	mov	r4, r1
 801cb9c:	6809      	ldr	r1, [r1, #0]
 801cb9e:	4605      	mov	r5, r0
 801cba0:	b109      	cbz	r1, 801cba6 <cleanup_glue+0xe>
 801cba2:	f7ff fff9 	bl	801cb98 <cleanup_glue>
 801cba6:	4621      	mov	r1, r4
 801cba8:	4628      	mov	r0, r5
 801cbaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cbae:	f7ff baa9 	b.w	801c104 <_free_r>
	...

0801cbb4 <_reclaim_reent>:
 801cbb4:	4b2c      	ldr	r3, [pc, #176]	; (801cc68 <_reclaim_reent+0xb4>)
 801cbb6:	681b      	ldr	r3, [r3, #0]
 801cbb8:	4283      	cmp	r3, r0
 801cbba:	b570      	push	{r4, r5, r6, lr}
 801cbbc:	4604      	mov	r4, r0
 801cbbe:	d051      	beq.n	801cc64 <_reclaim_reent+0xb0>
 801cbc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801cbc2:	b143      	cbz	r3, 801cbd6 <_reclaim_reent+0x22>
 801cbc4:	68db      	ldr	r3, [r3, #12]
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d14a      	bne.n	801cc60 <_reclaim_reent+0xac>
 801cbca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cbcc:	6819      	ldr	r1, [r3, #0]
 801cbce:	b111      	cbz	r1, 801cbd6 <_reclaim_reent+0x22>
 801cbd0:	4620      	mov	r0, r4
 801cbd2:	f7ff fa97 	bl	801c104 <_free_r>
 801cbd6:	6961      	ldr	r1, [r4, #20]
 801cbd8:	b111      	cbz	r1, 801cbe0 <_reclaim_reent+0x2c>
 801cbda:	4620      	mov	r0, r4
 801cbdc:	f7ff fa92 	bl	801c104 <_free_r>
 801cbe0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801cbe2:	b111      	cbz	r1, 801cbea <_reclaim_reent+0x36>
 801cbe4:	4620      	mov	r0, r4
 801cbe6:	f7ff fa8d 	bl	801c104 <_free_r>
 801cbea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801cbec:	b111      	cbz	r1, 801cbf4 <_reclaim_reent+0x40>
 801cbee:	4620      	mov	r0, r4
 801cbf0:	f7ff fa88 	bl	801c104 <_free_r>
 801cbf4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801cbf6:	b111      	cbz	r1, 801cbfe <_reclaim_reent+0x4a>
 801cbf8:	4620      	mov	r0, r4
 801cbfa:	f7ff fa83 	bl	801c104 <_free_r>
 801cbfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801cc00:	b111      	cbz	r1, 801cc08 <_reclaim_reent+0x54>
 801cc02:	4620      	mov	r0, r4
 801cc04:	f7ff fa7e 	bl	801c104 <_free_r>
 801cc08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801cc0a:	b111      	cbz	r1, 801cc12 <_reclaim_reent+0x5e>
 801cc0c:	4620      	mov	r0, r4
 801cc0e:	f7ff fa79 	bl	801c104 <_free_r>
 801cc12:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801cc14:	b111      	cbz	r1, 801cc1c <_reclaim_reent+0x68>
 801cc16:	4620      	mov	r0, r4
 801cc18:	f7ff fa74 	bl	801c104 <_free_r>
 801cc1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801cc1e:	b111      	cbz	r1, 801cc26 <_reclaim_reent+0x72>
 801cc20:	4620      	mov	r0, r4
 801cc22:	f7ff fa6f 	bl	801c104 <_free_r>
 801cc26:	69a3      	ldr	r3, [r4, #24]
 801cc28:	b1e3      	cbz	r3, 801cc64 <_reclaim_reent+0xb0>
 801cc2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801cc2c:	4620      	mov	r0, r4
 801cc2e:	4798      	blx	r3
 801cc30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801cc32:	b1b9      	cbz	r1, 801cc64 <_reclaim_reent+0xb0>
 801cc34:	4620      	mov	r0, r4
 801cc36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801cc3a:	f7ff bfad 	b.w	801cb98 <cleanup_glue>
 801cc3e:	5949      	ldr	r1, [r1, r5]
 801cc40:	b941      	cbnz	r1, 801cc54 <_reclaim_reent+0xa0>
 801cc42:	3504      	adds	r5, #4
 801cc44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cc46:	2d80      	cmp	r5, #128	; 0x80
 801cc48:	68d9      	ldr	r1, [r3, #12]
 801cc4a:	d1f8      	bne.n	801cc3e <_reclaim_reent+0x8a>
 801cc4c:	4620      	mov	r0, r4
 801cc4e:	f7ff fa59 	bl	801c104 <_free_r>
 801cc52:	e7ba      	b.n	801cbca <_reclaim_reent+0x16>
 801cc54:	680e      	ldr	r6, [r1, #0]
 801cc56:	4620      	mov	r0, r4
 801cc58:	f7ff fa54 	bl	801c104 <_free_r>
 801cc5c:	4631      	mov	r1, r6
 801cc5e:	e7ef      	b.n	801cc40 <_reclaim_reent+0x8c>
 801cc60:	2500      	movs	r5, #0
 801cc62:	e7ef      	b.n	801cc44 <_reclaim_reent+0x90>
 801cc64:	bd70      	pop	{r4, r5, r6, pc}
 801cc66:	bf00      	nop
 801cc68:	20000030 	.word	0x20000030

0801cc6c <_sbrk_r>:
 801cc6c:	b538      	push	{r3, r4, r5, lr}
 801cc6e:	4d06      	ldr	r5, [pc, #24]	; (801cc88 <_sbrk_r+0x1c>)
 801cc70:	2300      	movs	r3, #0
 801cc72:	4604      	mov	r4, r0
 801cc74:	4608      	mov	r0, r1
 801cc76:	602b      	str	r3, [r5, #0]
 801cc78:	f7f2 ff6a 	bl	800fb50 <_sbrk>
 801cc7c:	1c43      	adds	r3, r0, #1
 801cc7e:	d102      	bne.n	801cc86 <_sbrk_r+0x1a>
 801cc80:	682b      	ldr	r3, [r5, #0]
 801cc82:	b103      	cbz	r3, 801cc86 <_sbrk_r+0x1a>
 801cc84:	6023      	str	r3, [r4, #0]
 801cc86:	bd38      	pop	{r3, r4, r5, pc}
 801cc88:	2000a5f8 	.word	0x2000a5f8

0801cc8c <_raise_r>:
 801cc8c:	291f      	cmp	r1, #31
 801cc8e:	b538      	push	{r3, r4, r5, lr}
 801cc90:	4604      	mov	r4, r0
 801cc92:	460d      	mov	r5, r1
 801cc94:	d904      	bls.n	801cca0 <_raise_r+0x14>
 801cc96:	2316      	movs	r3, #22
 801cc98:	6003      	str	r3, [r0, #0]
 801cc9a:	f04f 30ff 	mov.w	r0, #4294967295
 801cc9e:	bd38      	pop	{r3, r4, r5, pc}
 801cca0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801cca2:	b112      	cbz	r2, 801ccaa <_raise_r+0x1e>
 801cca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cca8:	b94b      	cbnz	r3, 801ccbe <_raise_r+0x32>
 801ccaa:	4620      	mov	r0, r4
 801ccac:	f000 f830 	bl	801cd10 <_getpid_r>
 801ccb0:	462a      	mov	r2, r5
 801ccb2:	4601      	mov	r1, r0
 801ccb4:	4620      	mov	r0, r4
 801ccb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ccba:	f000 b817 	b.w	801ccec <_kill_r>
 801ccbe:	2b01      	cmp	r3, #1
 801ccc0:	d00a      	beq.n	801ccd8 <_raise_r+0x4c>
 801ccc2:	1c59      	adds	r1, r3, #1
 801ccc4:	d103      	bne.n	801ccce <_raise_r+0x42>
 801ccc6:	2316      	movs	r3, #22
 801ccc8:	6003      	str	r3, [r0, #0]
 801ccca:	2001      	movs	r0, #1
 801cccc:	e7e7      	b.n	801cc9e <_raise_r+0x12>
 801ccce:	2400      	movs	r4, #0
 801ccd0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ccd4:	4628      	mov	r0, r5
 801ccd6:	4798      	blx	r3
 801ccd8:	2000      	movs	r0, #0
 801ccda:	e7e0      	b.n	801cc9e <_raise_r+0x12>

0801ccdc <raise>:
 801ccdc:	4b02      	ldr	r3, [pc, #8]	; (801cce8 <raise+0xc>)
 801ccde:	4601      	mov	r1, r0
 801cce0:	6818      	ldr	r0, [r3, #0]
 801cce2:	f7ff bfd3 	b.w	801cc8c <_raise_r>
 801cce6:	bf00      	nop
 801cce8:	20000030 	.word	0x20000030

0801ccec <_kill_r>:
 801ccec:	b538      	push	{r3, r4, r5, lr}
 801ccee:	4d07      	ldr	r5, [pc, #28]	; (801cd0c <_kill_r+0x20>)
 801ccf0:	2300      	movs	r3, #0
 801ccf2:	4604      	mov	r4, r0
 801ccf4:	4608      	mov	r0, r1
 801ccf6:	4611      	mov	r1, r2
 801ccf8:	602b      	str	r3, [r5, #0]
 801ccfa:	f7f2 fea1 	bl	800fa40 <_kill>
 801ccfe:	1c43      	adds	r3, r0, #1
 801cd00:	d102      	bne.n	801cd08 <_kill_r+0x1c>
 801cd02:	682b      	ldr	r3, [r5, #0]
 801cd04:	b103      	cbz	r3, 801cd08 <_kill_r+0x1c>
 801cd06:	6023      	str	r3, [r4, #0]
 801cd08:	bd38      	pop	{r3, r4, r5, pc}
 801cd0a:	bf00      	nop
 801cd0c:	2000a5f8 	.word	0x2000a5f8

0801cd10 <_getpid_r>:
 801cd10:	f7f2 be8e 	b.w	800fa30 <_getpid>

0801cd14 <__sread>:
 801cd14:	b510      	push	{r4, lr}
 801cd16:	460c      	mov	r4, r1
 801cd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd1c:	f001 fbbc 	bl	801e498 <_read_r>
 801cd20:	2800      	cmp	r0, #0
 801cd22:	bfab      	itete	ge
 801cd24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801cd26:	89a3      	ldrhlt	r3, [r4, #12]
 801cd28:	181b      	addge	r3, r3, r0
 801cd2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801cd2e:	bfac      	ite	ge
 801cd30:	6563      	strge	r3, [r4, #84]	; 0x54
 801cd32:	81a3      	strhlt	r3, [r4, #12]
 801cd34:	bd10      	pop	{r4, pc}

0801cd36 <__swrite>:
 801cd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd3a:	461f      	mov	r7, r3
 801cd3c:	898b      	ldrh	r3, [r1, #12]
 801cd3e:	05db      	lsls	r3, r3, #23
 801cd40:	4605      	mov	r5, r0
 801cd42:	460c      	mov	r4, r1
 801cd44:	4616      	mov	r6, r2
 801cd46:	d505      	bpl.n	801cd54 <__swrite+0x1e>
 801cd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd4c:	2302      	movs	r3, #2
 801cd4e:	2200      	movs	r2, #0
 801cd50:	f000 ffea 	bl	801dd28 <_lseek_r>
 801cd54:	89a3      	ldrh	r3, [r4, #12]
 801cd56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cd5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801cd5e:	81a3      	strh	r3, [r4, #12]
 801cd60:	4632      	mov	r2, r6
 801cd62:	463b      	mov	r3, r7
 801cd64:	4628      	mov	r0, r5
 801cd66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cd6a:	f000 b817 	b.w	801cd9c <_write_r>

0801cd6e <__sseek>:
 801cd6e:	b510      	push	{r4, lr}
 801cd70:	460c      	mov	r4, r1
 801cd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd76:	f000 ffd7 	bl	801dd28 <_lseek_r>
 801cd7a:	1c43      	adds	r3, r0, #1
 801cd7c:	89a3      	ldrh	r3, [r4, #12]
 801cd7e:	bf15      	itete	ne
 801cd80:	6560      	strne	r0, [r4, #84]	; 0x54
 801cd82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801cd86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801cd8a:	81a3      	strheq	r3, [r4, #12]
 801cd8c:	bf18      	it	ne
 801cd8e:	81a3      	strhne	r3, [r4, #12]
 801cd90:	bd10      	pop	{r4, pc}

0801cd92 <__sclose>:
 801cd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cd96:	f000 b875 	b.w	801ce84 <_close_r>
	...

0801cd9c <_write_r>:
 801cd9c:	b538      	push	{r3, r4, r5, lr}
 801cd9e:	4d07      	ldr	r5, [pc, #28]	; (801cdbc <_write_r+0x20>)
 801cda0:	4604      	mov	r4, r0
 801cda2:	4608      	mov	r0, r1
 801cda4:	4611      	mov	r1, r2
 801cda6:	2200      	movs	r2, #0
 801cda8:	602a      	str	r2, [r5, #0]
 801cdaa:	461a      	mov	r2, r3
 801cdac:	f7f2 fe7f 	bl	800faae <_write>
 801cdb0:	1c43      	adds	r3, r0, #1
 801cdb2:	d102      	bne.n	801cdba <_write_r+0x1e>
 801cdb4:	682b      	ldr	r3, [r5, #0]
 801cdb6:	b103      	cbz	r3, 801cdba <_write_r+0x1e>
 801cdb8:	6023      	str	r3, [r4, #0]
 801cdba:	bd38      	pop	{r3, r4, r5, pc}
 801cdbc:	2000a5f8 	.word	0x2000a5f8

0801cdc0 <__register_exitproc>:
 801cdc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cdc4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801ce80 <__register_exitproc+0xc0>
 801cdc8:	4606      	mov	r6, r0
 801cdca:	f8d8 0000 	ldr.w	r0, [r8]
 801cdce:	461f      	mov	r7, r3
 801cdd0:	460d      	mov	r5, r1
 801cdd2:	4691      	mov	r9, r2
 801cdd4:	f7ff f96d 	bl	801c0b2 <__retarget_lock_acquire_recursive>
 801cdd8:	4b25      	ldr	r3, [pc, #148]	; (801ce70 <__register_exitproc+0xb0>)
 801cdda:	681c      	ldr	r4, [r3, #0]
 801cddc:	b934      	cbnz	r4, 801cdec <__register_exitproc+0x2c>
 801cdde:	4c25      	ldr	r4, [pc, #148]	; (801ce74 <__register_exitproc+0xb4>)
 801cde0:	601c      	str	r4, [r3, #0]
 801cde2:	4b25      	ldr	r3, [pc, #148]	; (801ce78 <__register_exitproc+0xb8>)
 801cde4:	b113      	cbz	r3, 801cdec <__register_exitproc+0x2c>
 801cde6:	681b      	ldr	r3, [r3, #0]
 801cde8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801cdec:	6863      	ldr	r3, [r4, #4]
 801cdee:	2b1f      	cmp	r3, #31
 801cdf0:	dd07      	ble.n	801ce02 <__register_exitproc+0x42>
 801cdf2:	f8d8 0000 	ldr.w	r0, [r8]
 801cdf6:	f7ff f95e 	bl	801c0b6 <__retarget_lock_release_recursive>
 801cdfa:	f04f 30ff 	mov.w	r0, #4294967295
 801cdfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce02:	b34e      	cbz	r6, 801ce58 <__register_exitproc+0x98>
 801ce04:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801ce08:	b988      	cbnz	r0, 801ce2e <__register_exitproc+0x6e>
 801ce0a:	4b1c      	ldr	r3, [pc, #112]	; (801ce7c <__register_exitproc+0xbc>)
 801ce0c:	b923      	cbnz	r3, 801ce18 <__register_exitproc+0x58>
 801ce0e:	f8d8 0000 	ldr.w	r0, [r8]
 801ce12:	f7ff f94f 	bl	801c0b4 <__retarget_lock_release>
 801ce16:	e7f0      	b.n	801cdfa <__register_exitproc+0x3a>
 801ce18:	f44f 7084 	mov.w	r0, #264	; 0x108
 801ce1c:	f7ff f94c 	bl	801c0b8 <malloc>
 801ce20:	2800      	cmp	r0, #0
 801ce22:	d0f4      	beq.n	801ce0e <__register_exitproc+0x4e>
 801ce24:	2300      	movs	r3, #0
 801ce26:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801ce2a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801ce2e:	6863      	ldr	r3, [r4, #4]
 801ce30:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801ce34:	2201      	movs	r2, #1
 801ce36:	409a      	lsls	r2, r3
 801ce38:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801ce3c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801ce40:	4313      	orrs	r3, r2
 801ce42:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801ce46:	2e02      	cmp	r6, #2
 801ce48:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801ce4c:	bf02      	ittt	eq
 801ce4e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801ce52:	4313      	orreq	r3, r2
 801ce54:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801ce58:	6863      	ldr	r3, [r4, #4]
 801ce5a:	f8d8 0000 	ldr.w	r0, [r8]
 801ce5e:	1c5a      	adds	r2, r3, #1
 801ce60:	3302      	adds	r3, #2
 801ce62:	6062      	str	r2, [r4, #4]
 801ce64:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801ce68:	f7ff f925 	bl	801c0b6 <__retarget_lock_release_recursive>
 801ce6c:	2000      	movs	r0, #0
 801ce6e:	e7c6      	b.n	801cdfe <__register_exitproc+0x3e>
 801ce70:	2000a688 	.word	0x2000a688
 801ce74:	2000a5fc 	.word	0x2000a5fc
 801ce78:	00000000 	.word	0x00000000
 801ce7c:	0801c0b9 	.word	0x0801c0b9
 801ce80:	20000094 	.word	0x20000094

0801ce84 <_close_r>:
 801ce84:	b538      	push	{r3, r4, r5, lr}
 801ce86:	4d06      	ldr	r5, [pc, #24]	; (801cea0 <_close_r+0x1c>)
 801ce88:	2300      	movs	r3, #0
 801ce8a:	4604      	mov	r4, r0
 801ce8c:	4608      	mov	r0, r1
 801ce8e:	602b      	str	r3, [r5, #0]
 801ce90:	f7f2 fe29 	bl	800fae6 <_close>
 801ce94:	1c43      	adds	r3, r0, #1
 801ce96:	d102      	bne.n	801ce9e <_close_r+0x1a>
 801ce98:	682b      	ldr	r3, [r5, #0]
 801ce9a:	b103      	cbz	r3, 801ce9e <_close_r+0x1a>
 801ce9c:	6023      	str	r3, [r4, #0]
 801ce9e:	bd38      	pop	{r3, r4, r5, pc}
 801cea0:	2000a5f8 	.word	0x2000a5f8

0801cea4 <quorem>:
 801cea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cea8:	6903      	ldr	r3, [r0, #16]
 801ceaa:	690c      	ldr	r4, [r1, #16]
 801ceac:	42a3      	cmp	r3, r4
 801ceae:	4607      	mov	r7, r0
 801ceb0:	f2c0 8081 	blt.w	801cfb6 <quorem+0x112>
 801ceb4:	3c01      	subs	r4, #1
 801ceb6:	f101 0814 	add.w	r8, r1, #20
 801ceba:	f100 0514 	add.w	r5, r0, #20
 801cebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cec2:	9301      	str	r3, [sp, #4]
 801cec4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801cec8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cecc:	3301      	adds	r3, #1
 801cece:	429a      	cmp	r2, r3
 801ced0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ced4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ced8:	fbb2 f6f3 	udiv	r6, r2, r3
 801cedc:	d331      	bcc.n	801cf42 <quorem+0x9e>
 801cede:	f04f 0e00 	mov.w	lr, #0
 801cee2:	4640      	mov	r0, r8
 801cee4:	46ac      	mov	ip, r5
 801cee6:	46f2      	mov	sl, lr
 801cee8:	f850 2b04 	ldr.w	r2, [r0], #4
 801ceec:	b293      	uxth	r3, r2
 801ceee:	fb06 e303 	mla	r3, r6, r3, lr
 801cef2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801cef6:	b29b      	uxth	r3, r3
 801cef8:	ebaa 0303 	sub.w	r3, sl, r3
 801cefc:	f8dc a000 	ldr.w	sl, [ip]
 801cf00:	0c12      	lsrs	r2, r2, #16
 801cf02:	fa13 f38a 	uxtah	r3, r3, sl
 801cf06:	fb06 e202 	mla	r2, r6, r2, lr
 801cf0a:	9300      	str	r3, [sp, #0]
 801cf0c:	9b00      	ldr	r3, [sp, #0]
 801cf0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801cf12:	b292      	uxth	r2, r2
 801cf14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801cf18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cf1c:	f8bd 3000 	ldrh.w	r3, [sp]
 801cf20:	4581      	cmp	r9, r0
 801cf22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cf26:	f84c 3b04 	str.w	r3, [ip], #4
 801cf2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801cf2e:	d2db      	bcs.n	801cee8 <quorem+0x44>
 801cf30:	f855 300b 	ldr.w	r3, [r5, fp]
 801cf34:	b92b      	cbnz	r3, 801cf42 <quorem+0x9e>
 801cf36:	9b01      	ldr	r3, [sp, #4]
 801cf38:	3b04      	subs	r3, #4
 801cf3a:	429d      	cmp	r5, r3
 801cf3c:	461a      	mov	r2, r3
 801cf3e:	d32e      	bcc.n	801cf9e <quorem+0xfa>
 801cf40:	613c      	str	r4, [r7, #16]
 801cf42:	4638      	mov	r0, r7
 801cf44:	f001 f990 	bl	801e268 <__mcmp>
 801cf48:	2800      	cmp	r0, #0
 801cf4a:	db24      	blt.n	801cf96 <quorem+0xf2>
 801cf4c:	3601      	adds	r6, #1
 801cf4e:	4628      	mov	r0, r5
 801cf50:	f04f 0c00 	mov.w	ip, #0
 801cf54:	f858 2b04 	ldr.w	r2, [r8], #4
 801cf58:	f8d0 e000 	ldr.w	lr, [r0]
 801cf5c:	b293      	uxth	r3, r2
 801cf5e:	ebac 0303 	sub.w	r3, ip, r3
 801cf62:	0c12      	lsrs	r2, r2, #16
 801cf64:	fa13 f38e 	uxtah	r3, r3, lr
 801cf68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801cf6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801cf70:	b29b      	uxth	r3, r3
 801cf72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801cf76:	45c1      	cmp	r9, r8
 801cf78:	f840 3b04 	str.w	r3, [r0], #4
 801cf7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801cf80:	d2e8      	bcs.n	801cf54 <quorem+0xb0>
 801cf82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801cf86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801cf8a:	b922      	cbnz	r2, 801cf96 <quorem+0xf2>
 801cf8c:	3b04      	subs	r3, #4
 801cf8e:	429d      	cmp	r5, r3
 801cf90:	461a      	mov	r2, r3
 801cf92:	d30a      	bcc.n	801cfaa <quorem+0x106>
 801cf94:	613c      	str	r4, [r7, #16]
 801cf96:	4630      	mov	r0, r6
 801cf98:	b003      	add	sp, #12
 801cf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf9e:	6812      	ldr	r2, [r2, #0]
 801cfa0:	3b04      	subs	r3, #4
 801cfa2:	2a00      	cmp	r2, #0
 801cfa4:	d1cc      	bne.n	801cf40 <quorem+0x9c>
 801cfa6:	3c01      	subs	r4, #1
 801cfa8:	e7c7      	b.n	801cf3a <quorem+0x96>
 801cfaa:	6812      	ldr	r2, [r2, #0]
 801cfac:	3b04      	subs	r3, #4
 801cfae:	2a00      	cmp	r2, #0
 801cfb0:	d1f0      	bne.n	801cf94 <quorem+0xf0>
 801cfb2:	3c01      	subs	r4, #1
 801cfb4:	e7eb      	b.n	801cf8e <quorem+0xea>
 801cfb6:	2000      	movs	r0, #0
 801cfb8:	e7ee      	b.n	801cf98 <quorem+0xf4>
 801cfba:	0000      	movs	r0, r0
 801cfbc:	0000      	movs	r0, r0
	...

0801cfc0 <_dtoa_r>:
 801cfc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfc4:	ed2d 8b04 	vpush	{d8-d9}
 801cfc8:	ec57 6b10 	vmov	r6, r7, d0
 801cfcc:	b093      	sub	sp, #76	; 0x4c
 801cfce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cfd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801cfd4:	9106      	str	r1, [sp, #24]
 801cfd6:	ee10 aa10 	vmov	sl, s0
 801cfda:	4604      	mov	r4, r0
 801cfdc:	9209      	str	r2, [sp, #36]	; 0x24
 801cfde:	930c      	str	r3, [sp, #48]	; 0x30
 801cfe0:	46bb      	mov	fp, r7
 801cfe2:	b975      	cbnz	r5, 801d002 <_dtoa_r+0x42>
 801cfe4:	2010      	movs	r0, #16
 801cfe6:	f7ff f867 	bl	801c0b8 <malloc>
 801cfea:	4602      	mov	r2, r0
 801cfec:	6260      	str	r0, [r4, #36]	; 0x24
 801cfee:	b920      	cbnz	r0, 801cffa <_dtoa_r+0x3a>
 801cff0:	4ba7      	ldr	r3, [pc, #668]	; (801d290 <_dtoa_r+0x2d0>)
 801cff2:	21ea      	movs	r1, #234	; 0xea
 801cff4:	48a7      	ldr	r0, [pc, #668]	; (801d294 <_dtoa_r+0x2d4>)
 801cff6:	f001 fa61 	bl	801e4bc <__assert_func>
 801cffa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801cffe:	6005      	str	r5, [r0, #0]
 801d000:	60c5      	str	r5, [r0, #12]
 801d002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d004:	6819      	ldr	r1, [r3, #0]
 801d006:	b151      	cbz	r1, 801d01e <_dtoa_r+0x5e>
 801d008:	685a      	ldr	r2, [r3, #4]
 801d00a:	604a      	str	r2, [r1, #4]
 801d00c:	2301      	movs	r3, #1
 801d00e:	4093      	lsls	r3, r2
 801d010:	608b      	str	r3, [r1, #8]
 801d012:	4620      	mov	r0, r4
 801d014:	f000 fee6 	bl	801dde4 <_Bfree>
 801d018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d01a:	2200      	movs	r2, #0
 801d01c:	601a      	str	r2, [r3, #0]
 801d01e:	1e3b      	subs	r3, r7, #0
 801d020:	bfaa      	itet	ge
 801d022:	2300      	movge	r3, #0
 801d024:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801d028:	f8c8 3000 	strge.w	r3, [r8]
 801d02c:	4b9a      	ldr	r3, [pc, #616]	; (801d298 <_dtoa_r+0x2d8>)
 801d02e:	bfbc      	itt	lt
 801d030:	2201      	movlt	r2, #1
 801d032:	f8c8 2000 	strlt.w	r2, [r8]
 801d036:	ea33 030b 	bics.w	r3, r3, fp
 801d03a:	d11b      	bne.n	801d074 <_dtoa_r+0xb4>
 801d03c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d03e:	f242 730f 	movw	r3, #9999	; 0x270f
 801d042:	6013      	str	r3, [r2, #0]
 801d044:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d048:	4333      	orrs	r3, r6
 801d04a:	f000 8592 	beq.w	801db72 <_dtoa_r+0xbb2>
 801d04e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d050:	b963      	cbnz	r3, 801d06c <_dtoa_r+0xac>
 801d052:	4b92      	ldr	r3, [pc, #584]	; (801d29c <_dtoa_r+0x2dc>)
 801d054:	e022      	b.n	801d09c <_dtoa_r+0xdc>
 801d056:	4b92      	ldr	r3, [pc, #584]	; (801d2a0 <_dtoa_r+0x2e0>)
 801d058:	9301      	str	r3, [sp, #4]
 801d05a:	3308      	adds	r3, #8
 801d05c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801d05e:	6013      	str	r3, [r2, #0]
 801d060:	9801      	ldr	r0, [sp, #4]
 801d062:	b013      	add	sp, #76	; 0x4c
 801d064:	ecbd 8b04 	vpop	{d8-d9}
 801d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d06c:	4b8b      	ldr	r3, [pc, #556]	; (801d29c <_dtoa_r+0x2dc>)
 801d06e:	9301      	str	r3, [sp, #4]
 801d070:	3303      	adds	r3, #3
 801d072:	e7f3      	b.n	801d05c <_dtoa_r+0x9c>
 801d074:	2200      	movs	r2, #0
 801d076:	2300      	movs	r3, #0
 801d078:	4650      	mov	r0, sl
 801d07a:	4659      	mov	r1, fp
 801d07c:	f7e3 fd24 	bl	8000ac8 <__aeabi_dcmpeq>
 801d080:	ec4b ab19 	vmov	d9, sl, fp
 801d084:	4680      	mov	r8, r0
 801d086:	b158      	cbz	r0, 801d0a0 <_dtoa_r+0xe0>
 801d088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d08a:	2301      	movs	r3, #1
 801d08c:	6013      	str	r3, [r2, #0]
 801d08e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d090:	2b00      	cmp	r3, #0
 801d092:	f000 856b 	beq.w	801db6c <_dtoa_r+0xbac>
 801d096:	4883      	ldr	r0, [pc, #524]	; (801d2a4 <_dtoa_r+0x2e4>)
 801d098:	6018      	str	r0, [r3, #0]
 801d09a:	1e43      	subs	r3, r0, #1
 801d09c:	9301      	str	r3, [sp, #4]
 801d09e:	e7df      	b.n	801d060 <_dtoa_r+0xa0>
 801d0a0:	ec4b ab10 	vmov	d0, sl, fp
 801d0a4:	aa10      	add	r2, sp, #64	; 0x40
 801d0a6:	a911      	add	r1, sp, #68	; 0x44
 801d0a8:	4620      	mov	r0, r4
 801d0aa:	f001 f983 	bl	801e3b4 <__d2b>
 801d0ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801d0b2:	ee08 0a10 	vmov	s16, r0
 801d0b6:	2d00      	cmp	r5, #0
 801d0b8:	f000 8084 	beq.w	801d1c4 <_dtoa_r+0x204>
 801d0bc:	ee19 3a90 	vmov	r3, s19
 801d0c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d0c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801d0c8:	4656      	mov	r6, sl
 801d0ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801d0ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801d0d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801d0d6:	4b74      	ldr	r3, [pc, #464]	; (801d2a8 <_dtoa_r+0x2e8>)
 801d0d8:	2200      	movs	r2, #0
 801d0da:	4630      	mov	r0, r6
 801d0dc:	4639      	mov	r1, r7
 801d0de:	f7e3 f8d3 	bl	8000288 <__aeabi_dsub>
 801d0e2:	a365      	add	r3, pc, #404	; (adr r3, 801d278 <_dtoa_r+0x2b8>)
 801d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0e8:	f7e3 fa86 	bl	80005f8 <__aeabi_dmul>
 801d0ec:	a364      	add	r3, pc, #400	; (adr r3, 801d280 <_dtoa_r+0x2c0>)
 801d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0f2:	f7e3 f8cb 	bl	800028c <__adddf3>
 801d0f6:	4606      	mov	r6, r0
 801d0f8:	4628      	mov	r0, r5
 801d0fa:	460f      	mov	r7, r1
 801d0fc:	f7e3 fa12 	bl	8000524 <__aeabi_i2d>
 801d100:	a361      	add	r3, pc, #388	; (adr r3, 801d288 <_dtoa_r+0x2c8>)
 801d102:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d106:	f7e3 fa77 	bl	80005f8 <__aeabi_dmul>
 801d10a:	4602      	mov	r2, r0
 801d10c:	460b      	mov	r3, r1
 801d10e:	4630      	mov	r0, r6
 801d110:	4639      	mov	r1, r7
 801d112:	f7e3 f8bb 	bl	800028c <__adddf3>
 801d116:	4606      	mov	r6, r0
 801d118:	460f      	mov	r7, r1
 801d11a:	f7e3 fd1d 	bl	8000b58 <__aeabi_d2iz>
 801d11e:	2200      	movs	r2, #0
 801d120:	9000      	str	r0, [sp, #0]
 801d122:	2300      	movs	r3, #0
 801d124:	4630      	mov	r0, r6
 801d126:	4639      	mov	r1, r7
 801d128:	f7e3 fcd8 	bl	8000adc <__aeabi_dcmplt>
 801d12c:	b150      	cbz	r0, 801d144 <_dtoa_r+0x184>
 801d12e:	9800      	ldr	r0, [sp, #0]
 801d130:	f7e3 f9f8 	bl	8000524 <__aeabi_i2d>
 801d134:	4632      	mov	r2, r6
 801d136:	463b      	mov	r3, r7
 801d138:	f7e3 fcc6 	bl	8000ac8 <__aeabi_dcmpeq>
 801d13c:	b910      	cbnz	r0, 801d144 <_dtoa_r+0x184>
 801d13e:	9b00      	ldr	r3, [sp, #0]
 801d140:	3b01      	subs	r3, #1
 801d142:	9300      	str	r3, [sp, #0]
 801d144:	9b00      	ldr	r3, [sp, #0]
 801d146:	2b16      	cmp	r3, #22
 801d148:	d85a      	bhi.n	801d200 <_dtoa_r+0x240>
 801d14a:	9a00      	ldr	r2, [sp, #0]
 801d14c:	4b57      	ldr	r3, [pc, #348]	; (801d2ac <_dtoa_r+0x2ec>)
 801d14e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d152:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d156:	ec51 0b19 	vmov	r0, r1, d9
 801d15a:	f7e3 fcbf 	bl	8000adc <__aeabi_dcmplt>
 801d15e:	2800      	cmp	r0, #0
 801d160:	d050      	beq.n	801d204 <_dtoa_r+0x244>
 801d162:	9b00      	ldr	r3, [sp, #0]
 801d164:	3b01      	subs	r3, #1
 801d166:	9300      	str	r3, [sp, #0]
 801d168:	2300      	movs	r3, #0
 801d16a:	930b      	str	r3, [sp, #44]	; 0x2c
 801d16c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d16e:	1b5d      	subs	r5, r3, r5
 801d170:	1e6b      	subs	r3, r5, #1
 801d172:	9305      	str	r3, [sp, #20]
 801d174:	bf45      	ittet	mi
 801d176:	f1c5 0301 	rsbmi	r3, r5, #1
 801d17a:	9304      	strmi	r3, [sp, #16]
 801d17c:	2300      	movpl	r3, #0
 801d17e:	2300      	movmi	r3, #0
 801d180:	bf4c      	ite	mi
 801d182:	9305      	strmi	r3, [sp, #20]
 801d184:	9304      	strpl	r3, [sp, #16]
 801d186:	9b00      	ldr	r3, [sp, #0]
 801d188:	2b00      	cmp	r3, #0
 801d18a:	db3d      	blt.n	801d208 <_dtoa_r+0x248>
 801d18c:	9b05      	ldr	r3, [sp, #20]
 801d18e:	9a00      	ldr	r2, [sp, #0]
 801d190:	920a      	str	r2, [sp, #40]	; 0x28
 801d192:	4413      	add	r3, r2
 801d194:	9305      	str	r3, [sp, #20]
 801d196:	2300      	movs	r3, #0
 801d198:	9307      	str	r3, [sp, #28]
 801d19a:	9b06      	ldr	r3, [sp, #24]
 801d19c:	2b09      	cmp	r3, #9
 801d19e:	f200 8089 	bhi.w	801d2b4 <_dtoa_r+0x2f4>
 801d1a2:	2b05      	cmp	r3, #5
 801d1a4:	bfc4      	itt	gt
 801d1a6:	3b04      	subgt	r3, #4
 801d1a8:	9306      	strgt	r3, [sp, #24]
 801d1aa:	9b06      	ldr	r3, [sp, #24]
 801d1ac:	f1a3 0302 	sub.w	r3, r3, #2
 801d1b0:	bfcc      	ite	gt
 801d1b2:	2500      	movgt	r5, #0
 801d1b4:	2501      	movle	r5, #1
 801d1b6:	2b03      	cmp	r3, #3
 801d1b8:	f200 8087 	bhi.w	801d2ca <_dtoa_r+0x30a>
 801d1bc:	e8df f003 	tbb	[pc, r3]
 801d1c0:	59383a2d 	.word	0x59383a2d
 801d1c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801d1c8:	441d      	add	r5, r3
 801d1ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801d1ce:	2b20      	cmp	r3, #32
 801d1d0:	bfc1      	itttt	gt
 801d1d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801d1d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801d1da:	fa0b f303 	lslgt.w	r3, fp, r3
 801d1de:	fa26 f000 	lsrgt.w	r0, r6, r0
 801d1e2:	bfda      	itte	le
 801d1e4:	f1c3 0320 	rsble	r3, r3, #32
 801d1e8:	fa06 f003 	lslle.w	r0, r6, r3
 801d1ec:	4318      	orrgt	r0, r3
 801d1ee:	f7e3 f989 	bl	8000504 <__aeabi_ui2d>
 801d1f2:	2301      	movs	r3, #1
 801d1f4:	4606      	mov	r6, r0
 801d1f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801d1fa:	3d01      	subs	r5, #1
 801d1fc:	930e      	str	r3, [sp, #56]	; 0x38
 801d1fe:	e76a      	b.n	801d0d6 <_dtoa_r+0x116>
 801d200:	2301      	movs	r3, #1
 801d202:	e7b2      	b.n	801d16a <_dtoa_r+0x1aa>
 801d204:	900b      	str	r0, [sp, #44]	; 0x2c
 801d206:	e7b1      	b.n	801d16c <_dtoa_r+0x1ac>
 801d208:	9b04      	ldr	r3, [sp, #16]
 801d20a:	9a00      	ldr	r2, [sp, #0]
 801d20c:	1a9b      	subs	r3, r3, r2
 801d20e:	9304      	str	r3, [sp, #16]
 801d210:	4253      	negs	r3, r2
 801d212:	9307      	str	r3, [sp, #28]
 801d214:	2300      	movs	r3, #0
 801d216:	930a      	str	r3, [sp, #40]	; 0x28
 801d218:	e7bf      	b.n	801d19a <_dtoa_r+0x1da>
 801d21a:	2300      	movs	r3, #0
 801d21c:	9308      	str	r3, [sp, #32]
 801d21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d220:	2b00      	cmp	r3, #0
 801d222:	dc55      	bgt.n	801d2d0 <_dtoa_r+0x310>
 801d224:	2301      	movs	r3, #1
 801d226:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d22a:	461a      	mov	r2, r3
 801d22c:	9209      	str	r2, [sp, #36]	; 0x24
 801d22e:	e00c      	b.n	801d24a <_dtoa_r+0x28a>
 801d230:	2301      	movs	r3, #1
 801d232:	e7f3      	b.n	801d21c <_dtoa_r+0x25c>
 801d234:	2300      	movs	r3, #0
 801d236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d238:	9308      	str	r3, [sp, #32]
 801d23a:	9b00      	ldr	r3, [sp, #0]
 801d23c:	4413      	add	r3, r2
 801d23e:	9302      	str	r3, [sp, #8]
 801d240:	3301      	adds	r3, #1
 801d242:	2b01      	cmp	r3, #1
 801d244:	9303      	str	r3, [sp, #12]
 801d246:	bfb8      	it	lt
 801d248:	2301      	movlt	r3, #1
 801d24a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d24c:	2200      	movs	r2, #0
 801d24e:	6042      	str	r2, [r0, #4]
 801d250:	2204      	movs	r2, #4
 801d252:	f102 0614 	add.w	r6, r2, #20
 801d256:	429e      	cmp	r6, r3
 801d258:	6841      	ldr	r1, [r0, #4]
 801d25a:	d93d      	bls.n	801d2d8 <_dtoa_r+0x318>
 801d25c:	4620      	mov	r0, r4
 801d25e:	f000 fd81 	bl	801dd64 <_Balloc>
 801d262:	9001      	str	r0, [sp, #4]
 801d264:	2800      	cmp	r0, #0
 801d266:	d13b      	bne.n	801d2e0 <_dtoa_r+0x320>
 801d268:	4b11      	ldr	r3, [pc, #68]	; (801d2b0 <_dtoa_r+0x2f0>)
 801d26a:	4602      	mov	r2, r0
 801d26c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801d270:	e6c0      	b.n	801cff4 <_dtoa_r+0x34>
 801d272:	2301      	movs	r3, #1
 801d274:	e7df      	b.n	801d236 <_dtoa_r+0x276>
 801d276:	bf00      	nop
 801d278:	636f4361 	.word	0x636f4361
 801d27c:	3fd287a7 	.word	0x3fd287a7
 801d280:	8b60c8b3 	.word	0x8b60c8b3
 801d284:	3fc68a28 	.word	0x3fc68a28
 801d288:	509f79fb 	.word	0x509f79fb
 801d28c:	3fd34413 	.word	0x3fd34413
 801d290:	0801f6fd 	.word	0x0801f6fd
 801d294:	0801f714 	.word	0x0801f714
 801d298:	7ff00000 	.word	0x7ff00000
 801d29c:	0801f6f9 	.word	0x0801f6f9
 801d2a0:	0801f6f0 	.word	0x0801f6f0
 801d2a4:	0801f6cd 	.word	0x0801f6cd
 801d2a8:	3ff80000 	.word	0x3ff80000
 801d2ac:	0801f808 	.word	0x0801f808
 801d2b0:	0801f76f 	.word	0x0801f76f
 801d2b4:	2501      	movs	r5, #1
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	9306      	str	r3, [sp, #24]
 801d2ba:	9508      	str	r5, [sp, #32]
 801d2bc:	f04f 33ff 	mov.w	r3, #4294967295
 801d2c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d2c4:	2200      	movs	r2, #0
 801d2c6:	2312      	movs	r3, #18
 801d2c8:	e7b0      	b.n	801d22c <_dtoa_r+0x26c>
 801d2ca:	2301      	movs	r3, #1
 801d2cc:	9308      	str	r3, [sp, #32]
 801d2ce:	e7f5      	b.n	801d2bc <_dtoa_r+0x2fc>
 801d2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d2d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801d2d6:	e7b8      	b.n	801d24a <_dtoa_r+0x28a>
 801d2d8:	3101      	adds	r1, #1
 801d2da:	6041      	str	r1, [r0, #4]
 801d2dc:	0052      	lsls	r2, r2, #1
 801d2de:	e7b8      	b.n	801d252 <_dtoa_r+0x292>
 801d2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2e2:	9a01      	ldr	r2, [sp, #4]
 801d2e4:	601a      	str	r2, [r3, #0]
 801d2e6:	9b03      	ldr	r3, [sp, #12]
 801d2e8:	2b0e      	cmp	r3, #14
 801d2ea:	f200 809d 	bhi.w	801d428 <_dtoa_r+0x468>
 801d2ee:	2d00      	cmp	r5, #0
 801d2f0:	f000 809a 	beq.w	801d428 <_dtoa_r+0x468>
 801d2f4:	9b00      	ldr	r3, [sp, #0]
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	dd32      	ble.n	801d360 <_dtoa_r+0x3a0>
 801d2fa:	4ab7      	ldr	r2, [pc, #732]	; (801d5d8 <_dtoa_r+0x618>)
 801d2fc:	f003 030f 	and.w	r3, r3, #15
 801d300:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801d304:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d308:	9b00      	ldr	r3, [sp, #0]
 801d30a:	05d8      	lsls	r0, r3, #23
 801d30c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801d310:	d516      	bpl.n	801d340 <_dtoa_r+0x380>
 801d312:	4bb2      	ldr	r3, [pc, #712]	; (801d5dc <_dtoa_r+0x61c>)
 801d314:	ec51 0b19 	vmov	r0, r1, d9
 801d318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801d31c:	f7e3 fa96 	bl	800084c <__aeabi_ddiv>
 801d320:	f007 070f 	and.w	r7, r7, #15
 801d324:	4682      	mov	sl, r0
 801d326:	468b      	mov	fp, r1
 801d328:	2503      	movs	r5, #3
 801d32a:	4eac      	ldr	r6, [pc, #688]	; (801d5dc <_dtoa_r+0x61c>)
 801d32c:	b957      	cbnz	r7, 801d344 <_dtoa_r+0x384>
 801d32e:	4642      	mov	r2, r8
 801d330:	464b      	mov	r3, r9
 801d332:	4650      	mov	r0, sl
 801d334:	4659      	mov	r1, fp
 801d336:	f7e3 fa89 	bl	800084c <__aeabi_ddiv>
 801d33a:	4682      	mov	sl, r0
 801d33c:	468b      	mov	fp, r1
 801d33e:	e028      	b.n	801d392 <_dtoa_r+0x3d2>
 801d340:	2502      	movs	r5, #2
 801d342:	e7f2      	b.n	801d32a <_dtoa_r+0x36a>
 801d344:	07f9      	lsls	r1, r7, #31
 801d346:	d508      	bpl.n	801d35a <_dtoa_r+0x39a>
 801d348:	4640      	mov	r0, r8
 801d34a:	4649      	mov	r1, r9
 801d34c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d350:	f7e3 f952 	bl	80005f8 <__aeabi_dmul>
 801d354:	3501      	adds	r5, #1
 801d356:	4680      	mov	r8, r0
 801d358:	4689      	mov	r9, r1
 801d35a:	107f      	asrs	r7, r7, #1
 801d35c:	3608      	adds	r6, #8
 801d35e:	e7e5      	b.n	801d32c <_dtoa_r+0x36c>
 801d360:	f000 809b 	beq.w	801d49a <_dtoa_r+0x4da>
 801d364:	9b00      	ldr	r3, [sp, #0]
 801d366:	4f9d      	ldr	r7, [pc, #628]	; (801d5dc <_dtoa_r+0x61c>)
 801d368:	425e      	negs	r6, r3
 801d36a:	4b9b      	ldr	r3, [pc, #620]	; (801d5d8 <_dtoa_r+0x618>)
 801d36c:	f006 020f 	and.w	r2, r6, #15
 801d370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d374:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d378:	ec51 0b19 	vmov	r0, r1, d9
 801d37c:	f7e3 f93c 	bl	80005f8 <__aeabi_dmul>
 801d380:	1136      	asrs	r6, r6, #4
 801d382:	4682      	mov	sl, r0
 801d384:	468b      	mov	fp, r1
 801d386:	2300      	movs	r3, #0
 801d388:	2502      	movs	r5, #2
 801d38a:	2e00      	cmp	r6, #0
 801d38c:	d17a      	bne.n	801d484 <_dtoa_r+0x4c4>
 801d38e:	2b00      	cmp	r3, #0
 801d390:	d1d3      	bne.n	801d33a <_dtoa_r+0x37a>
 801d392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d394:	2b00      	cmp	r3, #0
 801d396:	f000 8082 	beq.w	801d49e <_dtoa_r+0x4de>
 801d39a:	4b91      	ldr	r3, [pc, #580]	; (801d5e0 <_dtoa_r+0x620>)
 801d39c:	2200      	movs	r2, #0
 801d39e:	4650      	mov	r0, sl
 801d3a0:	4659      	mov	r1, fp
 801d3a2:	f7e3 fb9b 	bl	8000adc <__aeabi_dcmplt>
 801d3a6:	2800      	cmp	r0, #0
 801d3a8:	d079      	beq.n	801d49e <_dtoa_r+0x4de>
 801d3aa:	9b03      	ldr	r3, [sp, #12]
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d076      	beq.n	801d49e <_dtoa_r+0x4de>
 801d3b0:	9b02      	ldr	r3, [sp, #8]
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	dd36      	ble.n	801d424 <_dtoa_r+0x464>
 801d3b6:	9b00      	ldr	r3, [sp, #0]
 801d3b8:	4650      	mov	r0, sl
 801d3ba:	4659      	mov	r1, fp
 801d3bc:	1e5f      	subs	r7, r3, #1
 801d3be:	2200      	movs	r2, #0
 801d3c0:	4b88      	ldr	r3, [pc, #544]	; (801d5e4 <_dtoa_r+0x624>)
 801d3c2:	f7e3 f919 	bl	80005f8 <__aeabi_dmul>
 801d3c6:	9e02      	ldr	r6, [sp, #8]
 801d3c8:	4682      	mov	sl, r0
 801d3ca:	468b      	mov	fp, r1
 801d3cc:	3501      	adds	r5, #1
 801d3ce:	4628      	mov	r0, r5
 801d3d0:	f7e3 f8a8 	bl	8000524 <__aeabi_i2d>
 801d3d4:	4652      	mov	r2, sl
 801d3d6:	465b      	mov	r3, fp
 801d3d8:	f7e3 f90e 	bl	80005f8 <__aeabi_dmul>
 801d3dc:	4b82      	ldr	r3, [pc, #520]	; (801d5e8 <_dtoa_r+0x628>)
 801d3de:	2200      	movs	r2, #0
 801d3e0:	f7e2 ff54 	bl	800028c <__adddf3>
 801d3e4:	46d0      	mov	r8, sl
 801d3e6:	46d9      	mov	r9, fp
 801d3e8:	4682      	mov	sl, r0
 801d3ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801d3ee:	2e00      	cmp	r6, #0
 801d3f0:	d158      	bne.n	801d4a4 <_dtoa_r+0x4e4>
 801d3f2:	4b7e      	ldr	r3, [pc, #504]	; (801d5ec <_dtoa_r+0x62c>)
 801d3f4:	2200      	movs	r2, #0
 801d3f6:	4640      	mov	r0, r8
 801d3f8:	4649      	mov	r1, r9
 801d3fa:	f7e2 ff45 	bl	8000288 <__aeabi_dsub>
 801d3fe:	4652      	mov	r2, sl
 801d400:	465b      	mov	r3, fp
 801d402:	4680      	mov	r8, r0
 801d404:	4689      	mov	r9, r1
 801d406:	f7e3 fb87 	bl	8000b18 <__aeabi_dcmpgt>
 801d40a:	2800      	cmp	r0, #0
 801d40c:	f040 8295 	bne.w	801d93a <_dtoa_r+0x97a>
 801d410:	4652      	mov	r2, sl
 801d412:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801d416:	4640      	mov	r0, r8
 801d418:	4649      	mov	r1, r9
 801d41a:	f7e3 fb5f 	bl	8000adc <__aeabi_dcmplt>
 801d41e:	2800      	cmp	r0, #0
 801d420:	f040 8289 	bne.w	801d936 <_dtoa_r+0x976>
 801d424:	ec5b ab19 	vmov	sl, fp, d9
 801d428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d42a:	2b00      	cmp	r3, #0
 801d42c:	f2c0 8148 	blt.w	801d6c0 <_dtoa_r+0x700>
 801d430:	9a00      	ldr	r2, [sp, #0]
 801d432:	2a0e      	cmp	r2, #14
 801d434:	f300 8144 	bgt.w	801d6c0 <_dtoa_r+0x700>
 801d438:	4b67      	ldr	r3, [pc, #412]	; (801d5d8 <_dtoa_r+0x618>)
 801d43a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d43e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d444:	2b00      	cmp	r3, #0
 801d446:	f280 80d5 	bge.w	801d5f4 <_dtoa_r+0x634>
 801d44a:	9b03      	ldr	r3, [sp, #12]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	f300 80d1 	bgt.w	801d5f4 <_dtoa_r+0x634>
 801d452:	f040 826f 	bne.w	801d934 <_dtoa_r+0x974>
 801d456:	4b65      	ldr	r3, [pc, #404]	; (801d5ec <_dtoa_r+0x62c>)
 801d458:	2200      	movs	r2, #0
 801d45a:	4640      	mov	r0, r8
 801d45c:	4649      	mov	r1, r9
 801d45e:	f7e3 f8cb 	bl	80005f8 <__aeabi_dmul>
 801d462:	4652      	mov	r2, sl
 801d464:	465b      	mov	r3, fp
 801d466:	f7e3 fb4d 	bl	8000b04 <__aeabi_dcmpge>
 801d46a:	9e03      	ldr	r6, [sp, #12]
 801d46c:	4637      	mov	r7, r6
 801d46e:	2800      	cmp	r0, #0
 801d470:	f040 8245 	bne.w	801d8fe <_dtoa_r+0x93e>
 801d474:	9d01      	ldr	r5, [sp, #4]
 801d476:	2331      	movs	r3, #49	; 0x31
 801d478:	f805 3b01 	strb.w	r3, [r5], #1
 801d47c:	9b00      	ldr	r3, [sp, #0]
 801d47e:	3301      	adds	r3, #1
 801d480:	9300      	str	r3, [sp, #0]
 801d482:	e240      	b.n	801d906 <_dtoa_r+0x946>
 801d484:	07f2      	lsls	r2, r6, #31
 801d486:	d505      	bpl.n	801d494 <_dtoa_r+0x4d4>
 801d488:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d48c:	f7e3 f8b4 	bl	80005f8 <__aeabi_dmul>
 801d490:	3501      	adds	r5, #1
 801d492:	2301      	movs	r3, #1
 801d494:	1076      	asrs	r6, r6, #1
 801d496:	3708      	adds	r7, #8
 801d498:	e777      	b.n	801d38a <_dtoa_r+0x3ca>
 801d49a:	2502      	movs	r5, #2
 801d49c:	e779      	b.n	801d392 <_dtoa_r+0x3d2>
 801d49e:	9f00      	ldr	r7, [sp, #0]
 801d4a0:	9e03      	ldr	r6, [sp, #12]
 801d4a2:	e794      	b.n	801d3ce <_dtoa_r+0x40e>
 801d4a4:	9901      	ldr	r1, [sp, #4]
 801d4a6:	4b4c      	ldr	r3, [pc, #304]	; (801d5d8 <_dtoa_r+0x618>)
 801d4a8:	4431      	add	r1, r6
 801d4aa:	910d      	str	r1, [sp, #52]	; 0x34
 801d4ac:	9908      	ldr	r1, [sp, #32]
 801d4ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801d4b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801d4b6:	2900      	cmp	r1, #0
 801d4b8:	d043      	beq.n	801d542 <_dtoa_r+0x582>
 801d4ba:	494d      	ldr	r1, [pc, #308]	; (801d5f0 <_dtoa_r+0x630>)
 801d4bc:	2000      	movs	r0, #0
 801d4be:	f7e3 f9c5 	bl	800084c <__aeabi_ddiv>
 801d4c2:	4652      	mov	r2, sl
 801d4c4:	465b      	mov	r3, fp
 801d4c6:	f7e2 fedf 	bl	8000288 <__aeabi_dsub>
 801d4ca:	9d01      	ldr	r5, [sp, #4]
 801d4cc:	4682      	mov	sl, r0
 801d4ce:	468b      	mov	fp, r1
 801d4d0:	4649      	mov	r1, r9
 801d4d2:	4640      	mov	r0, r8
 801d4d4:	f7e3 fb40 	bl	8000b58 <__aeabi_d2iz>
 801d4d8:	4606      	mov	r6, r0
 801d4da:	f7e3 f823 	bl	8000524 <__aeabi_i2d>
 801d4de:	4602      	mov	r2, r0
 801d4e0:	460b      	mov	r3, r1
 801d4e2:	4640      	mov	r0, r8
 801d4e4:	4649      	mov	r1, r9
 801d4e6:	f7e2 fecf 	bl	8000288 <__aeabi_dsub>
 801d4ea:	3630      	adds	r6, #48	; 0x30
 801d4ec:	f805 6b01 	strb.w	r6, [r5], #1
 801d4f0:	4652      	mov	r2, sl
 801d4f2:	465b      	mov	r3, fp
 801d4f4:	4680      	mov	r8, r0
 801d4f6:	4689      	mov	r9, r1
 801d4f8:	f7e3 faf0 	bl	8000adc <__aeabi_dcmplt>
 801d4fc:	2800      	cmp	r0, #0
 801d4fe:	d163      	bne.n	801d5c8 <_dtoa_r+0x608>
 801d500:	4642      	mov	r2, r8
 801d502:	464b      	mov	r3, r9
 801d504:	4936      	ldr	r1, [pc, #216]	; (801d5e0 <_dtoa_r+0x620>)
 801d506:	2000      	movs	r0, #0
 801d508:	f7e2 febe 	bl	8000288 <__aeabi_dsub>
 801d50c:	4652      	mov	r2, sl
 801d50e:	465b      	mov	r3, fp
 801d510:	f7e3 fae4 	bl	8000adc <__aeabi_dcmplt>
 801d514:	2800      	cmp	r0, #0
 801d516:	f040 80b5 	bne.w	801d684 <_dtoa_r+0x6c4>
 801d51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d51c:	429d      	cmp	r5, r3
 801d51e:	d081      	beq.n	801d424 <_dtoa_r+0x464>
 801d520:	4b30      	ldr	r3, [pc, #192]	; (801d5e4 <_dtoa_r+0x624>)
 801d522:	2200      	movs	r2, #0
 801d524:	4650      	mov	r0, sl
 801d526:	4659      	mov	r1, fp
 801d528:	f7e3 f866 	bl	80005f8 <__aeabi_dmul>
 801d52c:	4b2d      	ldr	r3, [pc, #180]	; (801d5e4 <_dtoa_r+0x624>)
 801d52e:	4682      	mov	sl, r0
 801d530:	468b      	mov	fp, r1
 801d532:	4640      	mov	r0, r8
 801d534:	4649      	mov	r1, r9
 801d536:	2200      	movs	r2, #0
 801d538:	f7e3 f85e 	bl	80005f8 <__aeabi_dmul>
 801d53c:	4680      	mov	r8, r0
 801d53e:	4689      	mov	r9, r1
 801d540:	e7c6      	b.n	801d4d0 <_dtoa_r+0x510>
 801d542:	4650      	mov	r0, sl
 801d544:	4659      	mov	r1, fp
 801d546:	f7e3 f857 	bl	80005f8 <__aeabi_dmul>
 801d54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d54c:	9d01      	ldr	r5, [sp, #4]
 801d54e:	930f      	str	r3, [sp, #60]	; 0x3c
 801d550:	4682      	mov	sl, r0
 801d552:	468b      	mov	fp, r1
 801d554:	4649      	mov	r1, r9
 801d556:	4640      	mov	r0, r8
 801d558:	f7e3 fafe 	bl	8000b58 <__aeabi_d2iz>
 801d55c:	4606      	mov	r6, r0
 801d55e:	f7e2 ffe1 	bl	8000524 <__aeabi_i2d>
 801d562:	3630      	adds	r6, #48	; 0x30
 801d564:	4602      	mov	r2, r0
 801d566:	460b      	mov	r3, r1
 801d568:	4640      	mov	r0, r8
 801d56a:	4649      	mov	r1, r9
 801d56c:	f7e2 fe8c 	bl	8000288 <__aeabi_dsub>
 801d570:	f805 6b01 	strb.w	r6, [r5], #1
 801d574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801d576:	429d      	cmp	r5, r3
 801d578:	4680      	mov	r8, r0
 801d57a:	4689      	mov	r9, r1
 801d57c:	f04f 0200 	mov.w	r2, #0
 801d580:	d124      	bne.n	801d5cc <_dtoa_r+0x60c>
 801d582:	4b1b      	ldr	r3, [pc, #108]	; (801d5f0 <_dtoa_r+0x630>)
 801d584:	4650      	mov	r0, sl
 801d586:	4659      	mov	r1, fp
 801d588:	f7e2 fe80 	bl	800028c <__adddf3>
 801d58c:	4602      	mov	r2, r0
 801d58e:	460b      	mov	r3, r1
 801d590:	4640      	mov	r0, r8
 801d592:	4649      	mov	r1, r9
 801d594:	f7e3 fac0 	bl	8000b18 <__aeabi_dcmpgt>
 801d598:	2800      	cmp	r0, #0
 801d59a:	d173      	bne.n	801d684 <_dtoa_r+0x6c4>
 801d59c:	4652      	mov	r2, sl
 801d59e:	465b      	mov	r3, fp
 801d5a0:	4913      	ldr	r1, [pc, #76]	; (801d5f0 <_dtoa_r+0x630>)
 801d5a2:	2000      	movs	r0, #0
 801d5a4:	f7e2 fe70 	bl	8000288 <__aeabi_dsub>
 801d5a8:	4602      	mov	r2, r0
 801d5aa:	460b      	mov	r3, r1
 801d5ac:	4640      	mov	r0, r8
 801d5ae:	4649      	mov	r1, r9
 801d5b0:	f7e3 fa94 	bl	8000adc <__aeabi_dcmplt>
 801d5b4:	2800      	cmp	r0, #0
 801d5b6:	f43f af35 	beq.w	801d424 <_dtoa_r+0x464>
 801d5ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801d5bc:	1e6b      	subs	r3, r5, #1
 801d5be:	930f      	str	r3, [sp, #60]	; 0x3c
 801d5c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801d5c4:	2b30      	cmp	r3, #48	; 0x30
 801d5c6:	d0f8      	beq.n	801d5ba <_dtoa_r+0x5fa>
 801d5c8:	9700      	str	r7, [sp, #0]
 801d5ca:	e049      	b.n	801d660 <_dtoa_r+0x6a0>
 801d5cc:	4b05      	ldr	r3, [pc, #20]	; (801d5e4 <_dtoa_r+0x624>)
 801d5ce:	f7e3 f813 	bl	80005f8 <__aeabi_dmul>
 801d5d2:	4680      	mov	r8, r0
 801d5d4:	4689      	mov	r9, r1
 801d5d6:	e7bd      	b.n	801d554 <_dtoa_r+0x594>
 801d5d8:	0801f808 	.word	0x0801f808
 801d5dc:	0801f7e0 	.word	0x0801f7e0
 801d5e0:	3ff00000 	.word	0x3ff00000
 801d5e4:	40240000 	.word	0x40240000
 801d5e8:	401c0000 	.word	0x401c0000
 801d5ec:	40140000 	.word	0x40140000
 801d5f0:	3fe00000 	.word	0x3fe00000
 801d5f4:	9d01      	ldr	r5, [sp, #4]
 801d5f6:	4656      	mov	r6, sl
 801d5f8:	465f      	mov	r7, fp
 801d5fa:	4642      	mov	r2, r8
 801d5fc:	464b      	mov	r3, r9
 801d5fe:	4630      	mov	r0, r6
 801d600:	4639      	mov	r1, r7
 801d602:	f7e3 f923 	bl	800084c <__aeabi_ddiv>
 801d606:	f7e3 faa7 	bl	8000b58 <__aeabi_d2iz>
 801d60a:	4682      	mov	sl, r0
 801d60c:	f7e2 ff8a 	bl	8000524 <__aeabi_i2d>
 801d610:	4642      	mov	r2, r8
 801d612:	464b      	mov	r3, r9
 801d614:	f7e2 fff0 	bl	80005f8 <__aeabi_dmul>
 801d618:	4602      	mov	r2, r0
 801d61a:	460b      	mov	r3, r1
 801d61c:	4630      	mov	r0, r6
 801d61e:	4639      	mov	r1, r7
 801d620:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801d624:	f7e2 fe30 	bl	8000288 <__aeabi_dsub>
 801d628:	f805 6b01 	strb.w	r6, [r5], #1
 801d62c:	9e01      	ldr	r6, [sp, #4]
 801d62e:	9f03      	ldr	r7, [sp, #12]
 801d630:	1bae      	subs	r6, r5, r6
 801d632:	42b7      	cmp	r7, r6
 801d634:	4602      	mov	r2, r0
 801d636:	460b      	mov	r3, r1
 801d638:	d135      	bne.n	801d6a6 <_dtoa_r+0x6e6>
 801d63a:	f7e2 fe27 	bl	800028c <__adddf3>
 801d63e:	4642      	mov	r2, r8
 801d640:	464b      	mov	r3, r9
 801d642:	4606      	mov	r6, r0
 801d644:	460f      	mov	r7, r1
 801d646:	f7e3 fa67 	bl	8000b18 <__aeabi_dcmpgt>
 801d64a:	b9d0      	cbnz	r0, 801d682 <_dtoa_r+0x6c2>
 801d64c:	4642      	mov	r2, r8
 801d64e:	464b      	mov	r3, r9
 801d650:	4630      	mov	r0, r6
 801d652:	4639      	mov	r1, r7
 801d654:	f7e3 fa38 	bl	8000ac8 <__aeabi_dcmpeq>
 801d658:	b110      	cbz	r0, 801d660 <_dtoa_r+0x6a0>
 801d65a:	f01a 0f01 	tst.w	sl, #1
 801d65e:	d110      	bne.n	801d682 <_dtoa_r+0x6c2>
 801d660:	4620      	mov	r0, r4
 801d662:	ee18 1a10 	vmov	r1, s16
 801d666:	f000 fbbd 	bl	801dde4 <_Bfree>
 801d66a:	2300      	movs	r3, #0
 801d66c:	9800      	ldr	r0, [sp, #0]
 801d66e:	702b      	strb	r3, [r5, #0]
 801d670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801d672:	3001      	adds	r0, #1
 801d674:	6018      	str	r0, [r3, #0]
 801d676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801d678:	2b00      	cmp	r3, #0
 801d67a:	f43f acf1 	beq.w	801d060 <_dtoa_r+0xa0>
 801d67e:	601d      	str	r5, [r3, #0]
 801d680:	e4ee      	b.n	801d060 <_dtoa_r+0xa0>
 801d682:	9f00      	ldr	r7, [sp, #0]
 801d684:	462b      	mov	r3, r5
 801d686:	461d      	mov	r5, r3
 801d688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801d68c:	2a39      	cmp	r2, #57	; 0x39
 801d68e:	d106      	bne.n	801d69e <_dtoa_r+0x6de>
 801d690:	9a01      	ldr	r2, [sp, #4]
 801d692:	429a      	cmp	r2, r3
 801d694:	d1f7      	bne.n	801d686 <_dtoa_r+0x6c6>
 801d696:	9901      	ldr	r1, [sp, #4]
 801d698:	2230      	movs	r2, #48	; 0x30
 801d69a:	3701      	adds	r7, #1
 801d69c:	700a      	strb	r2, [r1, #0]
 801d69e:	781a      	ldrb	r2, [r3, #0]
 801d6a0:	3201      	adds	r2, #1
 801d6a2:	701a      	strb	r2, [r3, #0]
 801d6a4:	e790      	b.n	801d5c8 <_dtoa_r+0x608>
 801d6a6:	4ba6      	ldr	r3, [pc, #664]	; (801d940 <_dtoa_r+0x980>)
 801d6a8:	2200      	movs	r2, #0
 801d6aa:	f7e2 ffa5 	bl	80005f8 <__aeabi_dmul>
 801d6ae:	2200      	movs	r2, #0
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	4606      	mov	r6, r0
 801d6b4:	460f      	mov	r7, r1
 801d6b6:	f7e3 fa07 	bl	8000ac8 <__aeabi_dcmpeq>
 801d6ba:	2800      	cmp	r0, #0
 801d6bc:	d09d      	beq.n	801d5fa <_dtoa_r+0x63a>
 801d6be:	e7cf      	b.n	801d660 <_dtoa_r+0x6a0>
 801d6c0:	9a08      	ldr	r2, [sp, #32]
 801d6c2:	2a00      	cmp	r2, #0
 801d6c4:	f000 80d7 	beq.w	801d876 <_dtoa_r+0x8b6>
 801d6c8:	9a06      	ldr	r2, [sp, #24]
 801d6ca:	2a01      	cmp	r2, #1
 801d6cc:	f300 80ba 	bgt.w	801d844 <_dtoa_r+0x884>
 801d6d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801d6d2:	2a00      	cmp	r2, #0
 801d6d4:	f000 80b2 	beq.w	801d83c <_dtoa_r+0x87c>
 801d6d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801d6dc:	9e07      	ldr	r6, [sp, #28]
 801d6de:	9d04      	ldr	r5, [sp, #16]
 801d6e0:	9a04      	ldr	r2, [sp, #16]
 801d6e2:	441a      	add	r2, r3
 801d6e4:	9204      	str	r2, [sp, #16]
 801d6e6:	9a05      	ldr	r2, [sp, #20]
 801d6e8:	2101      	movs	r1, #1
 801d6ea:	441a      	add	r2, r3
 801d6ec:	4620      	mov	r0, r4
 801d6ee:	9205      	str	r2, [sp, #20]
 801d6f0:	f000 fc30 	bl	801df54 <__i2b>
 801d6f4:	4607      	mov	r7, r0
 801d6f6:	2d00      	cmp	r5, #0
 801d6f8:	dd0c      	ble.n	801d714 <_dtoa_r+0x754>
 801d6fa:	9b05      	ldr	r3, [sp, #20]
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	dd09      	ble.n	801d714 <_dtoa_r+0x754>
 801d700:	42ab      	cmp	r3, r5
 801d702:	9a04      	ldr	r2, [sp, #16]
 801d704:	bfa8      	it	ge
 801d706:	462b      	movge	r3, r5
 801d708:	1ad2      	subs	r2, r2, r3
 801d70a:	9204      	str	r2, [sp, #16]
 801d70c:	9a05      	ldr	r2, [sp, #20]
 801d70e:	1aed      	subs	r5, r5, r3
 801d710:	1ad3      	subs	r3, r2, r3
 801d712:	9305      	str	r3, [sp, #20]
 801d714:	9b07      	ldr	r3, [sp, #28]
 801d716:	b31b      	cbz	r3, 801d760 <_dtoa_r+0x7a0>
 801d718:	9b08      	ldr	r3, [sp, #32]
 801d71a:	2b00      	cmp	r3, #0
 801d71c:	f000 80af 	beq.w	801d87e <_dtoa_r+0x8be>
 801d720:	2e00      	cmp	r6, #0
 801d722:	dd13      	ble.n	801d74c <_dtoa_r+0x78c>
 801d724:	4639      	mov	r1, r7
 801d726:	4632      	mov	r2, r6
 801d728:	4620      	mov	r0, r4
 801d72a:	f000 fcd3 	bl	801e0d4 <__pow5mult>
 801d72e:	ee18 2a10 	vmov	r2, s16
 801d732:	4601      	mov	r1, r0
 801d734:	4607      	mov	r7, r0
 801d736:	4620      	mov	r0, r4
 801d738:	f000 fc22 	bl	801df80 <__multiply>
 801d73c:	ee18 1a10 	vmov	r1, s16
 801d740:	4680      	mov	r8, r0
 801d742:	4620      	mov	r0, r4
 801d744:	f000 fb4e 	bl	801dde4 <_Bfree>
 801d748:	ee08 8a10 	vmov	s16, r8
 801d74c:	9b07      	ldr	r3, [sp, #28]
 801d74e:	1b9a      	subs	r2, r3, r6
 801d750:	d006      	beq.n	801d760 <_dtoa_r+0x7a0>
 801d752:	ee18 1a10 	vmov	r1, s16
 801d756:	4620      	mov	r0, r4
 801d758:	f000 fcbc 	bl	801e0d4 <__pow5mult>
 801d75c:	ee08 0a10 	vmov	s16, r0
 801d760:	2101      	movs	r1, #1
 801d762:	4620      	mov	r0, r4
 801d764:	f000 fbf6 	bl	801df54 <__i2b>
 801d768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	4606      	mov	r6, r0
 801d76e:	f340 8088 	ble.w	801d882 <_dtoa_r+0x8c2>
 801d772:	461a      	mov	r2, r3
 801d774:	4601      	mov	r1, r0
 801d776:	4620      	mov	r0, r4
 801d778:	f000 fcac 	bl	801e0d4 <__pow5mult>
 801d77c:	9b06      	ldr	r3, [sp, #24]
 801d77e:	2b01      	cmp	r3, #1
 801d780:	4606      	mov	r6, r0
 801d782:	f340 8081 	ble.w	801d888 <_dtoa_r+0x8c8>
 801d786:	f04f 0800 	mov.w	r8, #0
 801d78a:	6933      	ldr	r3, [r6, #16]
 801d78c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801d790:	6918      	ldr	r0, [r3, #16]
 801d792:	f000 fb8f 	bl	801deb4 <__hi0bits>
 801d796:	f1c0 0020 	rsb	r0, r0, #32
 801d79a:	9b05      	ldr	r3, [sp, #20]
 801d79c:	4418      	add	r0, r3
 801d79e:	f010 001f 	ands.w	r0, r0, #31
 801d7a2:	f000 8092 	beq.w	801d8ca <_dtoa_r+0x90a>
 801d7a6:	f1c0 0320 	rsb	r3, r0, #32
 801d7aa:	2b04      	cmp	r3, #4
 801d7ac:	f340 808a 	ble.w	801d8c4 <_dtoa_r+0x904>
 801d7b0:	f1c0 001c 	rsb	r0, r0, #28
 801d7b4:	9b04      	ldr	r3, [sp, #16]
 801d7b6:	4403      	add	r3, r0
 801d7b8:	9304      	str	r3, [sp, #16]
 801d7ba:	9b05      	ldr	r3, [sp, #20]
 801d7bc:	4403      	add	r3, r0
 801d7be:	4405      	add	r5, r0
 801d7c0:	9305      	str	r3, [sp, #20]
 801d7c2:	9b04      	ldr	r3, [sp, #16]
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	dd07      	ble.n	801d7d8 <_dtoa_r+0x818>
 801d7c8:	ee18 1a10 	vmov	r1, s16
 801d7cc:	461a      	mov	r2, r3
 801d7ce:	4620      	mov	r0, r4
 801d7d0:	f000 fcda 	bl	801e188 <__lshift>
 801d7d4:	ee08 0a10 	vmov	s16, r0
 801d7d8:	9b05      	ldr	r3, [sp, #20]
 801d7da:	2b00      	cmp	r3, #0
 801d7dc:	dd05      	ble.n	801d7ea <_dtoa_r+0x82a>
 801d7de:	4631      	mov	r1, r6
 801d7e0:	461a      	mov	r2, r3
 801d7e2:	4620      	mov	r0, r4
 801d7e4:	f000 fcd0 	bl	801e188 <__lshift>
 801d7e8:	4606      	mov	r6, r0
 801d7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801d7ec:	2b00      	cmp	r3, #0
 801d7ee:	d06e      	beq.n	801d8ce <_dtoa_r+0x90e>
 801d7f0:	ee18 0a10 	vmov	r0, s16
 801d7f4:	4631      	mov	r1, r6
 801d7f6:	f000 fd37 	bl	801e268 <__mcmp>
 801d7fa:	2800      	cmp	r0, #0
 801d7fc:	da67      	bge.n	801d8ce <_dtoa_r+0x90e>
 801d7fe:	9b00      	ldr	r3, [sp, #0]
 801d800:	3b01      	subs	r3, #1
 801d802:	ee18 1a10 	vmov	r1, s16
 801d806:	9300      	str	r3, [sp, #0]
 801d808:	220a      	movs	r2, #10
 801d80a:	2300      	movs	r3, #0
 801d80c:	4620      	mov	r0, r4
 801d80e:	f000 fb0b 	bl	801de28 <__multadd>
 801d812:	9b08      	ldr	r3, [sp, #32]
 801d814:	ee08 0a10 	vmov	s16, r0
 801d818:	2b00      	cmp	r3, #0
 801d81a:	f000 81b1 	beq.w	801db80 <_dtoa_r+0xbc0>
 801d81e:	2300      	movs	r3, #0
 801d820:	4639      	mov	r1, r7
 801d822:	220a      	movs	r2, #10
 801d824:	4620      	mov	r0, r4
 801d826:	f000 faff 	bl	801de28 <__multadd>
 801d82a:	9b02      	ldr	r3, [sp, #8]
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	4607      	mov	r7, r0
 801d830:	f300 808e 	bgt.w	801d950 <_dtoa_r+0x990>
 801d834:	9b06      	ldr	r3, [sp, #24]
 801d836:	2b02      	cmp	r3, #2
 801d838:	dc51      	bgt.n	801d8de <_dtoa_r+0x91e>
 801d83a:	e089      	b.n	801d950 <_dtoa_r+0x990>
 801d83c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d83e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801d842:	e74b      	b.n	801d6dc <_dtoa_r+0x71c>
 801d844:	9b03      	ldr	r3, [sp, #12]
 801d846:	1e5e      	subs	r6, r3, #1
 801d848:	9b07      	ldr	r3, [sp, #28]
 801d84a:	42b3      	cmp	r3, r6
 801d84c:	bfbf      	itttt	lt
 801d84e:	9b07      	ldrlt	r3, [sp, #28]
 801d850:	9607      	strlt	r6, [sp, #28]
 801d852:	1af2      	sublt	r2, r6, r3
 801d854:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801d856:	bfb6      	itet	lt
 801d858:	189b      	addlt	r3, r3, r2
 801d85a:	1b9e      	subge	r6, r3, r6
 801d85c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801d85e:	9b03      	ldr	r3, [sp, #12]
 801d860:	bfb8      	it	lt
 801d862:	2600      	movlt	r6, #0
 801d864:	2b00      	cmp	r3, #0
 801d866:	bfb7      	itett	lt
 801d868:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801d86c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801d870:	1a9d      	sublt	r5, r3, r2
 801d872:	2300      	movlt	r3, #0
 801d874:	e734      	b.n	801d6e0 <_dtoa_r+0x720>
 801d876:	9e07      	ldr	r6, [sp, #28]
 801d878:	9d04      	ldr	r5, [sp, #16]
 801d87a:	9f08      	ldr	r7, [sp, #32]
 801d87c:	e73b      	b.n	801d6f6 <_dtoa_r+0x736>
 801d87e:	9a07      	ldr	r2, [sp, #28]
 801d880:	e767      	b.n	801d752 <_dtoa_r+0x792>
 801d882:	9b06      	ldr	r3, [sp, #24]
 801d884:	2b01      	cmp	r3, #1
 801d886:	dc18      	bgt.n	801d8ba <_dtoa_r+0x8fa>
 801d888:	f1ba 0f00 	cmp.w	sl, #0
 801d88c:	d115      	bne.n	801d8ba <_dtoa_r+0x8fa>
 801d88e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d892:	b993      	cbnz	r3, 801d8ba <_dtoa_r+0x8fa>
 801d894:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801d898:	0d1b      	lsrs	r3, r3, #20
 801d89a:	051b      	lsls	r3, r3, #20
 801d89c:	b183      	cbz	r3, 801d8c0 <_dtoa_r+0x900>
 801d89e:	9b04      	ldr	r3, [sp, #16]
 801d8a0:	3301      	adds	r3, #1
 801d8a2:	9304      	str	r3, [sp, #16]
 801d8a4:	9b05      	ldr	r3, [sp, #20]
 801d8a6:	3301      	adds	r3, #1
 801d8a8:	9305      	str	r3, [sp, #20]
 801d8aa:	f04f 0801 	mov.w	r8, #1
 801d8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d8b0:	2b00      	cmp	r3, #0
 801d8b2:	f47f af6a 	bne.w	801d78a <_dtoa_r+0x7ca>
 801d8b6:	2001      	movs	r0, #1
 801d8b8:	e76f      	b.n	801d79a <_dtoa_r+0x7da>
 801d8ba:	f04f 0800 	mov.w	r8, #0
 801d8be:	e7f6      	b.n	801d8ae <_dtoa_r+0x8ee>
 801d8c0:	4698      	mov	r8, r3
 801d8c2:	e7f4      	b.n	801d8ae <_dtoa_r+0x8ee>
 801d8c4:	f43f af7d 	beq.w	801d7c2 <_dtoa_r+0x802>
 801d8c8:	4618      	mov	r0, r3
 801d8ca:	301c      	adds	r0, #28
 801d8cc:	e772      	b.n	801d7b4 <_dtoa_r+0x7f4>
 801d8ce:	9b03      	ldr	r3, [sp, #12]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	dc37      	bgt.n	801d944 <_dtoa_r+0x984>
 801d8d4:	9b06      	ldr	r3, [sp, #24]
 801d8d6:	2b02      	cmp	r3, #2
 801d8d8:	dd34      	ble.n	801d944 <_dtoa_r+0x984>
 801d8da:	9b03      	ldr	r3, [sp, #12]
 801d8dc:	9302      	str	r3, [sp, #8]
 801d8de:	9b02      	ldr	r3, [sp, #8]
 801d8e0:	b96b      	cbnz	r3, 801d8fe <_dtoa_r+0x93e>
 801d8e2:	4631      	mov	r1, r6
 801d8e4:	2205      	movs	r2, #5
 801d8e6:	4620      	mov	r0, r4
 801d8e8:	f000 fa9e 	bl	801de28 <__multadd>
 801d8ec:	4601      	mov	r1, r0
 801d8ee:	4606      	mov	r6, r0
 801d8f0:	ee18 0a10 	vmov	r0, s16
 801d8f4:	f000 fcb8 	bl	801e268 <__mcmp>
 801d8f8:	2800      	cmp	r0, #0
 801d8fa:	f73f adbb 	bgt.w	801d474 <_dtoa_r+0x4b4>
 801d8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d900:	9d01      	ldr	r5, [sp, #4]
 801d902:	43db      	mvns	r3, r3
 801d904:	9300      	str	r3, [sp, #0]
 801d906:	f04f 0800 	mov.w	r8, #0
 801d90a:	4631      	mov	r1, r6
 801d90c:	4620      	mov	r0, r4
 801d90e:	f000 fa69 	bl	801dde4 <_Bfree>
 801d912:	2f00      	cmp	r7, #0
 801d914:	f43f aea4 	beq.w	801d660 <_dtoa_r+0x6a0>
 801d918:	f1b8 0f00 	cmp.w	r8, #0
 801d91c:	d005      	beq.n	801d92a <_dtoa_r+0x96a>
 801d91e:	45b8      	cmp	r8, r7
 801d920:	d003      	beq.n	801d92a <_dtoa_r+0x96a>
 801d922:	4641      	mov	r1, r8
 801d924:	4620      	mov	r0, r4
 801d926:	f000 fa5d 	bl	801dde4 <_Bfree>
 801d92a:	4639      	mov	r1, r7
 801d92c:	4620      	mov	r0, r4
 801d92e:	f000 fa59 	bl	801dde4 <_Bfree>
 801d932:	e695      	b.n	801d660 <_dtoa_r+0x6a0>
 801d934:	2600      	movs	r6, #0
 801d936:	4637      	mov	r7, r6
 801d938:	e7e1      	b.n	801d8fe <_dtoa_r+0x93e>
 801d93a:	9700      	str	r7, [sp, #0]
 801d93c:	4637      	mov	r7, r6
 801d93e:	e599      	b.n	801d474 <_dtoa_r+0x4b4>
 801d940:	40240000 	.word	0x40240000
 801d944:	9b08      	ldr	r3, [sp, #32]
 801d946:	2b00      	cmp	r3, #0
 801d948:	f000 80ca 	beq.w	801dae0 <_dtoa_r+0xb20>
 801d94c:	9b03      	ldr	r3, [sp, #12]
 801d94e:	9302      	str	r3, [sp, #8]
 801d950:	2d00      	cmp	r5, #0
 801d952:	dd05      	ble.n	801d960 <_dtoa_r+0x9a0>
 801d954:	4639      	mov	r1, r7
 801d956:	462a      	mov	r2, r5
 801d958:	4620      	mov	r0, r4
 801d95a:	f000 fc15 	bl	801e188 <__lshift>
 801d95e:	4607      	mov	r7, r0
 801d960:	f1b8 0f00 	cmp.w	r8, #0
 801d964:	d05b      	beq.n	801da1e <_dtoa_r+0xa5e>
 801d966:	6879      	ldr	r1, [r7, #4]
 801d968:	4620      	mov	r0, r4
 801d96a:	f000 f9fb 	bl	801dd64 <_Balloc>
 801d96e:	4605      	mov	r5, r0
 801d970:	b928      	cbnz	r0, 801d97e <_dtoa_r+0x9be>
 801d972:	4b87      	ldr	r3, [pc, #540]	; (801db90 <_dtoa_r+0xbd0>)
 801d974:	4602      	mov	r2, r0
 801d976:	f240 21ea 	movw	r1, #746	; 0x2ea
 801d97a:	f7ff bb3b 	b.w	801cff4 <_dtoa_r+0x34>
 801d97e:	693a      	ldr	r2, [r7, #16]
 801d980:	3202      	adds	r2, #2
 801d982:	0092      	lsls	r2, r2, #2
 801d984:	f107 010c 	add.w	r1, r7, #12
 801d988:	300c      	adds	r0, #12
 801d98a:	f7fe fba5 	bl	801c0d8 <memcpy>
 801d98e:	2201      	movs	r2, #1
 801d990:	4629      	mov	r1, r5
 801d992:	4620      	mov	r0, r4
 801d994:	f000 fbf8 	bl	801e188 <__lshift>
 801d998:	9b01      	ldr	r3, [sp, #4]
 801d99a:	f103 0901 	add.w	r9, r3, #1
 801d99e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d9a2:	4413      	add	r3, r2
 801d9a4:	9305      	str	r3, [sp, #20]
 801d9a6:	f00a 0301 	and.w	r3, sl, #1
 801d9aa:	46b8      	mov	r8, r7
 801d9ac:	9304      	str	r3, [sp, #16]
 801d9ae:	4607      	mov	r7, r0
 801d9b0:	4631      	mov	r1, r6
 801d9b2:	ee18 0a10 	vmov	r0, s16
 801d9b6:	f7ff fa75 	bl	801cea4 <quorem>
 801d9ba:	4641      	mov	r1, r8
 801d9bc:	9002      	str	r0, [sp, #8]
 801d9be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801d9c2:	ee18 0a10 	vmov	r0, s16
 801d9c6:	f000 fc4f 	bl	801e268 <__mcmp>
 801d9ca:	463a      	mov	r2, r7
 801d9cc:	9003      	str	r0, [sp, #12]
 801d9ce:	4631      	mov	r1, r6
 801d9d0:	4620      	mov	r0, r4
 801d9d2:	f000 fc65 	bl	801e2a0 <__mdiff>
 801d9d6:	68c2      	ldr	r2, [r0, #12]
 801d9d8:	f109 3bff 	add.w	fp, r9, #4294967295
 801d9dc:	4605      	mov	r5, r0
 801d9de:	bb02      	cbnz	r2, 801da22 <_dtoa_r+0xa62>
 801d9e0:	4601      	mov	r1, r0
 801d9e2:	ee18 0a10 	vmov	r0, s16
 801d9e6:	f000 fc3f 	bl	801e268 <__mcmp>
 801d9ea:	4602      	mov	r2, r0
 801d9ec:	4629      	mov	r1, r5
 801d9ee:	4620      	mov	r0, r4
 801d9f0:	9207      	str	r2, [sp, #28]
 801d9f2:	f000 f9f7 	bl	801dde4 <_Bfree>
 801d9f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801d9fa:	ea43 0102 	orr.w	r1, r3, r2
 801d9fe:	9b04      	ldr	r3, [sp, #16]
 801da00:	430b      	orrs	r3, r1
 801da02:	464d      	mov	r5, r9
 801da04:	d10f      	bne.n	801da26 <_dtoa_r+0xa66>
 801da06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801da0a:	d02a      	beq.n	801da62 <_dtoa_r+0xaa2>
 801da0c:	9b03      	ldr	r3, [sp, #12]
 801da0e:	2b00      	cmp	r3, #0
 801da10:	dd02      	ble.n	801da18 <_dtoa_r+0xa58>
 801da12:	9b02      	ldr	r3, [sp, #8]
 801da14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801da18:	f88b a000 	strb.w	sl, [fp]
 801da1c:	e775      	b.n	801d90a <_dtoa_r+0x94a>
 801da1e:	4638      	mov	r0, r7
 801da20:	e7ba      	b.n	801d998 <_dtoa_r+0x9d8>
 801da22:	2201      	movs	r2, #1
 801da24:	e7e2      	b.n	801d9ec <_dtoa_r+0xa2c>
 801da26:	9b03      	ldr	r3, [sp, #12]
 801da28:	2b00      	cmp	r3, #0
 801da2a:	db04      	blt.n	801da36 <_dtoa_r+0xa76>
 801da2c:	9906      	ldr	r1, [sp, #24]
 801da2e:	430b      	orrs	r3, r1
 801da30:	9904      	ldr	r1, [sp, #16]
 801da32:	430b      	orrs	r3, r1
 801da34:	d122      	bne.n	801da7c <_dtoa_r+0xabc>
 801da36:	2a00      	cmp	r2, #0
 801da38:	ddee      	ble.n	801da18 <_dtoa_r+0xa58>
 801da3a:	ee18 1a10 	vmov	r1, s16
 801da3e:	2201      	movs	r2, #1
 801da40:	4620      	mov	r0, r4
 801da42:	f000 fba1 	bl	801e188 <__lshift>
 801da46:	4631      	mov	r1, r6
 801da48:	ee08 0a10 	vmov	s16, r0
 801da4c:	f000 fc0c 	bl	801e268 <__mcmp>
 801da50:	2800      	cmp	r0, #0
 801da52:	dc03      	bgt.n	801da5c <_dtoa_r+0xa9c>
 801da54:	d1e0      	bne.n	801da18 <_dtoa_r+0xa58>
 801da56:	f01a 0f01 	tst.w	sl, #1
 801da5a:	d0dd      	beq.n	801da18 <_dtoa_r+0xa58>
 801da5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801da60:	d1d7      	bne.n	801da12 <_dtoa_r+0xa52>
 801da62:	2339      	movs	r3, #57	; 0x39
 801da64:	f88b 3000 	strb.w	r3, [fp]
 801da68:	462b      	mov	r3, r5
 801da6a:	461d      	mov	r5, r3
 801da6c:	3b01      	subs	r3, #1
 801da6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801da72:	2a39      	cmp	r2, #57	; 0x39
 801da74:	d071      	beq.n	801db5a <_dtoa_r+0xb9a>
 801da76:	3201      	adds	r2, #1
 801da78:	701a      	strb	r2, [r3, #0]
 801da7a:	e746      	b.n	801d90a <_dtoa_r+0x94a>
 801da7c:	2a00      	cmp	r2, #0
 801da7e:	dd07      	ble.n	801da90 <_dtoa_r+0xad0>
 801da80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801da84:	d0ed      	beq.n	801da62 <_dtoa_r+0xaa2>
 801da86:	f10a 0301 	add.w	r3, sl, #1
 801da8a:	f88b 3000 	strb.w	r3, [fp]
 801da8e:	e73c      	b.n	801d90a <_dtoa_r+0x94a>
 801da90:	9b05      	ldr	r3, [sp, #20]
 801da92:	f809 ac01 	strb.w	sl, [r9, #-1]
 801da96:	4599      	cmp	r9, r3
 801da98:	d047      	beq.n	801db2a <_dtoa_r+0xb6a>
 801da9a:	ee18 1a10 	vmov	r1, s16
 801da9e:	2300      	movs	r3, #0
 801daa0:	220a      	movs	r2, #10
 801daa2:	4620      	mov	r0, r4
 801daa4:	f000 f9c0 	bl	801de28 <__multadd>
 801daa8:	45b8      	cmp	r8, r7
 801daaa:	ee08 0a10 	vmov	s16, r0
 801daae:	f04f 0300 	mov.w	r3, #0
 801dab2:	f04f 020a 	mov.w	r2, #10
 801dab6:	4641      	mov	r1, r8
 801dab8:	4620      	mov	r0, r4
 801daba:	d106      	bne.n	801daca <_dtoa_r+0xb0a>
 801dabc:	f000 f9b4 	bl	801de28 <__multadd>
 801dac0:	4680      	mov	r8, r0
 801dac2:	4607      	mov	r7, r0
 801dac4:	f109 0901 	add.w	r9, r9, #1
 801dac8:	e772      	b.n	801d9b0 <_dtoa_r+0x9f0>
 801daca:	f000 f9ad 	bl	801de28 <__multadd>
 801dace:	4639      	mov	r1, r7
 801dad0:	4680      	mov	r8, r0
 801dad2:	2300      	movs	r3, #0
 801dad4:	220a      	movs	r2, #10
 801dad6:	4620      	mov	r0, r4
 801dad8:	f000 f9a6 	bl	801de28 <__multadd>
 801dadc:	4607      	mov	r7, r0
 801dade:	e7f1      	b.n	801dac4 <_dtoa_r+0xb04>
 801dae0:	9b03      	ldr	r3, [sp, #12]
 801dae2:	9302      	str	r3, [sp, #8]
 801dae4:	9d01      	ldr	r5, [sp, #4]
 801dae6:	ee18 0a10 	vmov	r0, s16
 801daea:	4631      	mov	r1, r6
 801daec:	f7ff f9da 	bl	801cea4 <quorem>
 801daf0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801daf4:	9b01      	ldr	r3, [sp, #4]
 801daf6:	f805 ab01 	strb.w	sl, [r5], #1
 801dafa:	1aea      	subs	r2, r5, r3
 801dafc:	9b02      	ldr	r3, [sp, #8]
 801dafe:	4293      	cmp	r3, r2
 801db00:	dd09      	ble.n	801db16 <_dtoa_r+0xb56>
 801db02:	ee18 1a10 	vmov	r1, s16
 801db06:	2300      	movs	r3, #0
 801db08:	220a      	movs	r2, #10
 801db0a:	4620      	mov	r0, r4
 801db0c:	f000 f98c 	bl	801de28 <__multadd>
 801db10:	ee08 0a10 	vmov	s16, r0
 801db14:	e7e7      	b.n	801dae6 <_dtoa_r+0xb26>
 801db16:	9b02      	ldr	r3, [sp, #8]
 801db18:	2b00      	cmp	r3, #0
 801db1a:	bfc8      	it	gt
 801db1c:	461d      	movgt	r5, r3
 801db1e:	9b01      	ldr	r3, [sp, #4]
 801db20:	bfd8      	it	le
 801db22:	2501      	movle	r5, #1
 801db24:	441d      	add	r5, r3
 801db26:	f04f 0800 	mov.w	r8, #0
 801db2a:	ee18 1a10 	vmov	r1, s16
 801db2e:	2201      	movs	r2, #1
 801db30:	4620      	mov	r0, r4
 801db32:	f000 fb29 	bl	801e188 <__lshift>
 801db36:	4631      	mov	r1, r6
 801db38:	ee08 0a10 	vmov	s16, r0
 801db3c:	f000 fb94 	bl	801e268 <__mcmp>
 801db40:	2800      	cmp	r0, #0
 801db42:	dc91      	bgt.n	801da68 <_dtoa_r+0xaa8>
 801db44:	d102      	bne.n	801db4c <_dtoa_r+0xb8c>
 801db46:	f01a 0f01 	tst.w	sl, #1
 801db4a:	d18d      	bne.n	801da68 <_dtoa_r+0xaa8>
 801db4c:	462b      	mov	r3, r5
 801db4e:	461d      	mov	r5, r3
 801db50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801db54:	2a30      	cmp	r2, #48	; 0x30
 801db56:	d0fa      	beq.n	801db4e <_dtoa_r+0xb8e>
 801db58:	e6d7      	b.n	801d90a <_dtoa_r+0x94a>
 801db5a:	9a01      	ldr	r2, [sp, #4]
 801db5c:	429a      	cmp	r2, r3
 801db5e:	d184      	bne.n	801da6a <_dtoa_r+0xaaa>
 801db60:	9b00      	ldr	r3, [sp, #0]
 801db62:	3301      	adds	r3, #1
 801db64:	9300      	str	r3, [sp, #0]
 801db66:	2331      	movs	r3, #49	; 0x31
 801db68:	7013      	strb	r3, [r2, #0]
 801db6a:	e6ce      	b.n	801d90a <_dtoa_r+0x94a>
 801db6c:	4b09      	ldr	r3, [pc, #36]	; (801db94 <_dtoa_r+0xbd4>)
 801db6e:	f7ff ba95 	b.w	801d09c <_dtoa_r+0xdc>
 801db72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801db74:	2b00      	cmp	r3, #0
 801db76:	f47f aa6e 	bne.w	801d056 <_dtoa_r+0x96>
 801db7a:	4b07      	ldr	r3, [pc, #28]	; (801db98 <_dtoa_r+0xbd8>)
 801db7c:	f7ff ba8e 	b.w	801d09c <_dtoa_r+0xdc>
 801db80:	9b02      	ldr	r3, [sp, #8]
 801db82:	2b00      	cmp	r3, #0
 801db84:	dcae      	bgt.n	801dae4 <_dtoa_r+0xb24>
 801db86:	9b06      	ldr	r3, [sp, #24]
 801db88:	2b02      	cmp	r3, #2
 801db8a:	f73f aea8 	bgt.w	801d8de <_dtoa_r+0x91e>
 801db8e:	e7a9      	b.n	801dae4 <_dtoa_r+0xb24>
 801db90:	0801f76f 	.word	0x0801f76f
 801db94:	0801f6cc 	.word	0x0801f6cc
 801db98:	0801f6f0 	.word	0x0801f6f0

0801db9c <__sflush_r>:
 801db9c:	898a      	ldrh	r2, [r1, #12]
 801db9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dba2:	4605      	mov	r5, r0
 801dba4:	0710      	lsls	r0, r2, #28
 801dba6:	460c      	mov	r4, r1
 801dba8:	d458      	bmi.n	801dc5c <__sflush_r+0xc0>
 801dbaa:	684b      	ldr	r3, [r1, #4]
 801dbac:	2b00      	cmp	r3, #0
 801dbae:	dc05      	bgt.n	801dbbc <__sflush_r+0x20>
 801dbb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	dc02      	bgt.n	801dbbc <__sflush_r+0x20>
 801dbb6:	2000      	movs	r0, #0
 801dbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dbbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbbe:	2e00      	cmp	r6, #0
 801dbc0:	d0f9      	beq.n	801dbb6 <__sflush_r+0x1a>
 801dbc2:	2300      	movs	r3, #0
 801dbc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801dbc8:	682f      	ldr	r7, [r5, #0]
 801dbca:	602b      	str	r3, [r5, #0]
 801dbcc:	d032      	beq.n	801dc34 <__sflush_r+0x98>
 801dbce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801dbd0:	89a3      	ldrh	r3, [r4, #12]
 801dbd2:	075a      	lsls	r2, r3, #29
 801dbd4:	d505      	bpl.n	801dbe2 <__sflush_r+0x46>
 801dbd6:	6863      	ldr	r3, [r4, #4]
 801dbd8:	1ac0      	subs	r0, r0, r3
 801dbda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801dbdc:	b10b      	cbz	r3, 801dbe2 <__sflush_r+0x46>
 801dbde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801dbe0:	1ac0      	subs	r0, r0, r3
 801dbe2:	2300      	movs	r3, #0
 801dbe4:	4602      	mov	r2, r0
 801dbe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801dbe8:	6a21      	ldr	r1, [r4, #32]
 801dbea:	4628      	mov	r0, r5
 801dbec:	47b0      	blx	r6
 801dbee:	1c43      	adds	r3, r0, #1
 801dbf0:	89a3      	ldrh	r3, [r4, #12]
 801dbf2:	d106      	bne.n	801dc02 <__sflush_r+0x66>
 801dbf4:	6829      	ldr	r1, [r5, #0]
 801dbf6:	291d      	cmp	r1, #29
 801dbf8:	d82c      	bhi.n	801dc54 <__sflush_r+0xb8>
 801dbfa:	4a2a      	ldr	r2, [pc, #168]	; (801dca4 <__sflush_r+0x108>)
 801dbfc:	40ca      	lsrs	r2, r1
 801dbfe:	07d6      	lsls	r6, r2, #31
 801dc00:	d528      	bpl.n	801dc54 <__sflush_r+0xb8>
 801dc02:	2200      	movs	r2, #0
 801dc04:	6062      	str	r2, [r4, #4]
 801dc06:	04d9      	lsls	r1, r3, #19
 801dc08:	6922      	ldr	r2, [r4, #16]
 801dc0a:	6022      	str	r2, [r4, #0]
 801dc0c:	d504      	bpl.n	801dc18 <__sflush_r+0x7c>
 801dc0e:	1c42      	adds	r2, r0, #1
 801dc10:	d101      	bne.n	801dc16 <__sflush_r+0x7a>
 801dc12:	682b      	ldr	r3, [r5, #0]
 801dc14:	b903      	cbnz	r3, 801dc18 <__sflush_r+0x7c>
 801dc16:	6560      	str	r0, [r4, #84]	; 0x54
 801dc18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc1a:	602f      	str	r7, [r5, #0]
 801dc1c:	2900      	cmp	r1, #0
 801dc1e:	d0ca      	beq.n	801dbb6 <__sflush_r+0x1a>
 801dc20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc24:	4299      	cmp	r1, r3
 801dc26:	d002      	beq.n	801dc2e <__sflush_r+0x92>
 801dc28:	4628      	mov	r0, r5
 801dc2a:	f7fe fa6b 	bl	801c104 <_free_r>
 801dc2e:	2000      	movs	r0, #0
 801dc30:	6360      	str	r0, [r4, #52]	; 0x34
 801dc32:	e7c1      	b.n	801dbb8 <__sflush_r+0x1c>
 801dc34:	6a21      	ldr	r1, [r4, #32]
 801dc36:	2301      	movs	r3, #1
 801dc38:	4628      	mov	r0, r5
 801dc3a:	47b0      	blx	r6
 801dc3c:	1c41      	adds	r1, r0, #1
 801dc3e:	d1c7      	bne.n	801dbd0 <__sflush_r+0x34>
 801dc40:	682b      	ldr	r3, [r5, #0]
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d0c4      	beq.n	801dbd0 <__sflush_r+0x34>
 801dc46:	2b1d      	cmp	r3, #29
 801dc48:	d001      	beq.n	801dc4e <__sflush_r+0xb2>
 801dc4a:	2b16      	cmp	r3, #22
 801dc4c:	d101      	bne.n	801dc52 <__sflush_r+0xb6>
 801dc4e:	602f      	str	r7, [r5, #0]
 801dc50:	e7b1      	b.n	801dbb6 <__sflush_r+0x1a>
 801dc52:	89a3      	ldrh	r3, [r4, #12]
 801dc54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc58:	81a3      	strh	r3, [r4, #12]
 801dc5a:	e7ad      	b.n	801dbb8 <__sflush_r+0x1c>
 801dc5c:	690f      	ldr	r7, [r1, #16]
 801dc5e:	2f00      	cmp	r7, #0
 801dc60:	d0a9      	beq.n	801dbb6 <__sflush_r+0x1a>
 801dc62:	0793      	lsls	r3, r2, #30
 801dc64:	680e      	ldr	r6, [r1, #0]
 801dc66:	bf08      	it	eq
 801dc68:	694b      	ldreq	r3, [r1, #20]
 801dc6a:	600f      	str	r7, [r1, #0]
 801dc6c:	bf18      	it	ne
 801dc6e:	2300      	movne	r3, #0
 801dc70:	eba6 0807 	sub.w	r8, r6, r7
 801dc74:	608b      	str	r3, [r1, #8]
 801dc76:	f1b8 0f00 	cmp.w	r8, #0
 801dc7a:	dd9c      	ble.n	801dbb6 <__sflush_r+0x1a>
 801dc7c:	6a21      	ldr	r1, [r4, #32]
 801dc7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dc80:	4643      	mov	r3, r8
 801dc82:	463a      	mov	r2, r7
 801dc84:	4628      	mov	r0, r5
 801dc86:	47b0      	blx	r6
 801dc88:	2800      	cmp	r0, #0
 801dc8a:	dc06      	bgt.n	801dc9a <__sflush_r+0xfe>
 801dc8c:	89a3      	ldrh	r3, [r4, #12]
 801dc8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dc92:	81a3      	strh	r3, [r4, #12]
 801dc94:	f04f 30ff 	mov.w	r0, #4294967295
 801dc98:	e78e      	b.n	801dbb8 <__sflush_r+0x1c>
 801dc9a:	4407      	add	r7, r0
 801dc9c:	eba8 0800 	sub.w	r8, r8, r0
 801dca0:	e7e9      	b.n	801dc76 <__sflush_r+0xda>
 801dca2:	bf00      	nop
 801dca4:	20400001 	.word	0x20400001

0801dca8 <_fflush_r>:
 801dca8:	b538      	push	{r3, r4, r5, lr}
 801dcaa:	690b      	ldr	r3, [r1, #16]
 801dcac:	4605      	mov	r5, r0
 801dcae:	460c      	mov	r4, r1
 801dcb0:	b913      	cbnz	r3, 801dcb8 <_fflush_r+0x10>
 801dcb2:	2500      	movs	r5, #0
 801dcb4:	4628      	mov	r0, r5
 801dcb6:	bd38      	pop	{r3, r4, r5, pc}
 801dcb8:	b118      	cbz	r0, 801dcc2 <_fflush_r+0x1a>
 801dcba:	6983      	ldr	r3, [r0, #24]
 801dcbc:	b90b      	cbnz	r3, 801dcc2 <_fflush_r+0x1a>
 801dcbe:	f7fe f935 	bl	801bf2c <__sinit>
 801dcc2:	4b14      	ldr	r3, [pc, #80]	; (801dd14 <_fflush_r+0x6c>)
 801dcc4:	429c      	cmp	r4, r3
 801dcc6:	d11b      	bne.n	801dd00 <_fflush_r+0x58>
 801dcc8:	686c      	ldr	r4, [r5, #4]
 801dcca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d0ef      	beq.n	801dcb2 <_fflush_r+0xa>
 801dcd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801dcd4:	07d0      	lsls	r0, r2, #31
 801dcd6:	d404      	bmi.n	801dce2 <_fflush_r+0x3a>
 801dcd8:	0599      	lsls	r1, r3, #22
 801dcda:	d402      	bmi.n	801dce2 <_fflush_r+0x3a>
 801dcdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcde:	f7fe f9e8 	bl	801c0b2 <__retarget_lock_acquire_recursive>
 801dce2:	4628      	mov	r0, r5
 801dce4:	4621      	mov	r1, r4
 801dce6:	f7ff ff59 	bl	801db9c <__sflush_r>
 801dcea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801dcec:	07da      	lsls	r2, r3, #31
 801dcee:	4605      	mov	r5, r0
 801dcf0:	d4e0      	bmi.n	801dcb4 <_fflush_r+0xc>
 801dcf2:	89a3      	ldrh	r3, [r4, #12]
 801dcf4:	059b      	lsls	r3, r3, #22
 801dcf6:	d4dd      	bmi.n	801dcb4 <_fflush_r+0xc>
 801dcf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801dcfa:	f7fe f9dc 	bl	801c0b6 <__retarget_lock_release_recursive>
 801dcfe:	e7d9      	b.n	801dcb4 <_fflush_r+0xc>
 801dd00:	4b05      	ldr	r3, [pc, #20]	; (801dd18 <_fflush_r+0x70>)
 801dd02:	429c      	cmp	r4, r3
 801dd04:	d101      	bne.n	801dd0a <_fflush_r+0x62>
 801dd06:	68ac      	ldr	r4, [r5, #8]
 801dd08:	e7df      	b.n	801dcca <_fflush_r+0x22>
 801dd0a:	4b04      	ldr	r3, [pc, #16]	; (801dd1c <_fflush_r+0x74>)
 801dd0c:	429c      	cmp	r4, r3
 801dd0e:	bf08      	it	eq
 801dd10:	68ec      	ldreq	r4, [r5, #12]
 801dd12:	e7da      	b.n	801dcca <_fflush_r+0x22>
 801dd14:	0801f678 	.word	0x0801f678
 801dd18:	0801f698 	.word	0x0801f698
 801dd1c:	0801f658 	.word	0x0801f658

0801dd20 <_localeconv_r>:
 801dd20:	4800      	ldr	r0, [pc, #0]	; (801dd24 <_localeconv_r+0x4>)
 801dd22:	4770      	bx	lr
 801dd24:	20000188 	.word	0x20000188

0801dd28 <_lseek_r>:
 801dd28:	b538      	push	{r3, r4, r5, lr}
 801dd2a:	4d07      	ldr	r5, [pc, #28]	; (801dd48 <_lseek_r+0x20>)
 801dd2c:	4604      	mov	r4, r0
 801dd2e:	4608      	mov	r0, r1
 801dd30:	4611      	mov	r1, r2
 801dd32:	2200      	movs	r2, #0
 801dd34:	602a      	str	r2, [r5, #0]
 801dd36:	461a      	mov	r2, r3
 801dd38:	f7f1 fefc 	bl	800fb34 <_lseek>
 801dd3c:	1c43      	adds	r3, r0, #1
 801dd3e:	d102      	bne.n	801dd46 <_lseek_r+0x1e>
 801dd40:	682b      	ldr	r3, [r5, #0]
 801dd42:	b103      	cbz	r3, 801dd46 <_lseek_r+0x1e>
 801dd44:	6023      	str	r3, [r4, #0]
 801dd46:	bd38      	pop	{r3, r4, r5, pc}
 801dd48:	2000a5f8 	.word	0x2000a5f8

0801dd4c <__malloc_lock>:
 801dd4c:	4801      	ldr	r0, [pc, #4]	; (801dd54 <__malloc_lock+0x8>)
 801dd4e:	f7fe b9b0 	b.w	801c0b2 <__retarget_lock_acquire_recursive>
 801dd52:	bf00      	nop
 801dd54:	2000a5ed 	.word	0x2000a5ed

0801dd58 <__malloc_unlock>:
 801dd58:	4801      	ldr	r0, [pc, #4]	; (801dd60 <__malloc_unlock+0x8>)
 801dd5a:	f7fe b9ac 	b.w	801c0b6 <__retarget_lock_release_recursive>
 801dd5e:	bf00      	nop
 801dd60:	2000a5ed 	.word	0x2000a5ed

0801dd64 <_Balloc>:
 801dd64:	b570      	push	{r4, r5, r6, lr}
 801dd66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801dd68:	4604      	mov	r4, r0
 801dd6a:	460d      	mov	r5, r1
 801dd6c:	b976      	cbnz	r6, 801dd8c <_Balloc+0x28>
 801dd6e:	2010      	movs	r0, #16
 801dd70:	f7fe f9a2 	bl	801c0b8 <malloc>
 801dd74:	4602      	mov	r2, r0
 801dd76:	6260      	str	r0, [r4, #36]	; 0x24
 801dd78:	b920      	cbnz	r0, 801dd84 <_Balloc+0x20>
 801dd7a:	4b18      	ldr	r3, [pc, #96]	; (801dddc <_Balloc+0x78>)
 801dd7c:	4818      	ldr	r0, [pc, #96]	; (801dde0 <_Balloc+0x7c>)
 801dd7e:	2166      	movs	r1, #102	; 0x66
 801dd80:	f000 fb9c 	bl	801e4bc <__assert_func>
 801dd84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801dd88:	6006      	str	r6, [r0, #0]
 801dd8a:	60c6      	str	r6, [r0, #12]
 801dd8c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801dd8e:	68f3      	ldr	r3, [r6, #12]
 801dd90:	b183      	cbz	r3, 801ddb4 <_Balloc+0x50>
 801dd92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801dd94:	68db      	ldr	r3, [r3, #12]
 801dd96:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801dd9a:	b9b8      	cbnz	r0, 801ddcc <_Balloc+0x68>
 801dd9c:	2101      	movs	r1, #1
 801dd9e:	fa01 f605 	lsl.w	r6, r1, r5
 801dda2:	1d72      	adds	r2, r6, #5
 801dda4:	0092      	lsls	r2, r2, #2
 801dda6:	4620      	mov	r0, r4
 801dda8:	f000 fb60 	bl	801e46c <_calloc_r>
 801ddac:	b160      	cbz	r0, 801ddc8 <_Balloc+0x64>
 801ddae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ddb2:	e00e      	b.n	801ddd2 <_Balloc+0x6e>
 801ddb4:	2221      	movs	r2, #33	; 0x21
 801ddb6:	2104      	movs	r1, #4
 801ddb8:	4620      	mov	r0, r4
 801ddba:	f000 fb57 	bl	801e46c <_calloc_r>
 801ddbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ddc0:	60f0      	str	r0, [r6, #12]
 801ddc2:	68db      	ldr	r3, [r3, #12]
 801ddc4:	2b00      	cmp	r3, #0
 801ddc6:	d1e4      	bne.n	801dd92 <_Balloc+0x2e>
 801ddc8:	2000      	movs	r0, #0
 801ddca:	bd70      	pop	{r4, r5, r6, pc}
 801ddcc:	6802      	ldr	r2, [r0, #0]
 801ddce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ddd2:	2300      	movs	r3, #0
 801ddd4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ddd8:	e7f7      	b.n	801ddca <_Balloc+0x66>
 801ddda:	bf00      	nop
 801dddc:	0801f6fd 	.word	0x0801f6fd
 801dde0:	0801f780 	.word	0x0801f780

0801dde4 <_Bfree>:
 801dde4:	b570      	push	{r4, r5, r6, lr}
 801dde6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801dde8:	4605      	mov	r5, r0
 801ddea:	460c      	mov	r4, r1
 801ddec:	b976      	cbnz	r6, 801de0c <_Bfree+0x28>
 801ddee:	2010      	movs	r0, #16
 801ddf0:	f7fe f962 	bl	801c0b8 <malloc>
 801ddf4:	4602      	mov	r2, r0
 801ddf6:	6268      	str	r0, [r5, #36]	; 0x24
 801ddf8:	b920      	cbnz	r0, 801de04 <_Bfree+0x20>
 801ddfa:	4b09      	ldr	r3, [pc, #36]	; (801de20 <_Bfree+0x3c>)
 801ddfc:	4809      	ldr	r0, [pc, #36]	; (801de24 <_Bfree+0x40>)
 801ddfe:	218a      	movs	r1, #138	; 0x8a
 801de00:	f000 fb5c 	bl	801e4bc <__assert_func>
 801de04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801de08:	6006      	str	r6, [r0, #0]
 801de0a:	60c6      	str	r6, [r0, #12]
 801de0c:	b13c      	cbz	r4, 801de1e <_Bfree+0x3a>
 801de0e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801de10:	6862      	ldr	r2, [r4, #4]
 801de12:	68db      	ldr	r3, [r3, #12]
 801de14:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801de18:	6021      	str	r1, [r4, #0]
 801de1a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801de1e:	bd70      	pop	{r4, r5, r6, pc}
 801de20:	0801f6fd 	.word	0x0801f6fd
 801de24:	0801f780 	.word	0x0801f780

0801de28 <__multadd>:
 801de28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de2c:	690d      	ldr	r5, [r1, #16]
 801de2e:	4607      	mov	r7, r0
 801de30:	460c      	mov	r4, r1
 801de32:	461e      	mov	r6, r3
 801de34:	f101 0c14 	add.w	ip, r1, #20
 801de38:	2000      	movs	r0, #0
 801de3a:	f8dc 3000 	ldr.w	r3, [ip]
 801de3e:	b299      	uxth	r1, r3
 801de40:	fb02 6101 	mla	r1, r2, r1, r6
 801de44:	0c1e      	lsrs	r6, r3, #16
 801de46:	0c0b      	lsrs	r3, r1, #16
 801de48:	fb02 3306 	mla	r3, r2, r6, r3
 801de4c:	b289      	uxth	r1, r1
 801de4e:	3001      	adds	r0, #1
 801de50:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801de54:	4285      	cmp	r5, r0
 801de56:	f84c 1b04 	str.w	r1, [ip], #4
 801de5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801de5e:	dcec      	bgt.n	801de3a <__multadd+0x12>
 801de60:	b30e      	cbz	r6, 801dea6 <__multadd+0x7e>
 801de62:	68a3      	ldr	r3, [r4, #8]
 801de64:	42ab      	cmp	r3, r5
 801de66:	dc19      	bgt.n	801de9c <__multadd+0x74>
 801de68:	6861      	ldr	r1, [r4, #4]
 801de6a:	4638      	mov	r0, r7
 801de6c:	3101      	adds	r1, #1
 801de6e:	f7ff ff79 	bl	801dd64 <_Balloc>
 801de72:	4680      	mov	r8, r0
 801de74:	b928      	cbnz	r0, 801de82 <__multadd+0x5a>
 801de76:	4602      	mov	r2, r0
 801de78:	4b0c      	ldr	r3, [pc, #48]	; (801deac <__multadd+0x84>)
 801de7a:	480d      	ldr	r0, [pc, #52]	; (801deb0 <__multadd+0x88>)
 801de7c:	21b5      	movs	r1, #181	; 0xb5
 801de7e:	f000 fb1d 	bl	801e4bc <__assert_func>
 801de82:	6922      	ldr	r2, [r4, #16]
 801de84:	3202      	adds	r2, #2
 801de86:	f104 010c 	add.w	r1, r4, #12
 801de8a:	0092      	lsls	r2, r2, #2
 801de8c:	300c      	adds	r0, #12
 801de8e:	f7fe f923 	bl	801c0d8 <memcpy>
 801de92:	4621      	mov	r1, r4
 801de94:	4638      	mov	r0, r7
 801de96:	f7ff ffa5 	bl	801dde4 <_Bfree>
 801de9a:	4644      	mov	r4, r8
 801de9c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801dea0:	3501      	adds	r5, #1
 801dea2:	615e      	str	r6, [r3, #20]
 801dea4:	6125      	str	r5, [r4, #16]
 801dea6:	4620      	mov	r0, r4
 801dea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801deac:	0801f76f 	.word	0x0801f76f
 801deb0:	0801f780 	.word	0x0801f780

0801deb4 <__hi0bits>:
 801deb4:	0c03      	lsrs	r3, r0, #16
 801deb6:	041b      	lsls	r3, r3, #16
 801deb8:	b9d3      	cbnz	r3, 801def0 <__hi0bits+0x3c>
 801deba:	0400      	lsls	r0, r0, #16
 801debc:	2310      	movs	r3, #16
 801debe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801dec2:	bf04      	itt	eq
 801dec4:	0200      	lsleq	r0, r0, #8
 801dec6:	3308      	addeq	r3, #8
 801dec8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801decc:	bf04      	itt	eq
 801dece:	0100      	lsleq	r0, r0, #4
 801ded0:	3304      	addeq	r3, #4
 801ded2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ded6:	bf04      	itt	eq
 801ded8:	0080      	lsleq	r0, r0, #2
 801deda:	3302      	addeq	r3, #2
 801dedc:	2800      	cmp	r0, #0
 801dede:	db05      	blt.n	801deec <__hi0bits+0x38>
 801dee0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801dee4:	f103 0301 	add.w	r3, r3, #1
 801dee8:	bf08      	it	eq
 801deea:	2320      	moveq	r3, #32
 801deec:	4618      	mov	r0, r3
 801deee:	4770      	bx	lr
 801def0:	2300      	movs	r3, #0
 801def2:	e7e4      	b.n	801debe <__hi0bits+0xa>

0801def4 <__lo0bits>:
 801def4:	6803      	ldr	r3, [r0, #0]
 801def6:	f013 0207 	ands.w	r2, r3, #7
 801defa:	4601      	mov	r1, r0
 801defc:	d00b      	beq.n	801df16 <__lo0bits+0x22>
 801defe:	07da      	lsls	r2, r3, #31
 801df00:	d423      	bmi.n	801df4a <__lo0bits+0x56>
 801df02:	0798      	lsls	r0, r3, #30
 801df04:	bf49      	itett	mi
 801df06:	085b      	lsrmi	r3, r3, #1
 801df08:	089b      	lsrpl	r3, r3, #2
 801df0a:	2001      	movmi	r0, #1
 801df0c:	600b      	strmi	r3, [r1, #0]
 801df0e:	bf5c      	itt	pl
 801df10:	600b      	strpl	r3, [r1, #0]
 801df12:	2002      	movpl	r0, #2
 801df14:	4770      	bx	lr
 801df16:	b298      	uxth	r0, r3
 801df18:	b9a8      	cbnz	r0, 801df46 <__lo0bits+0x52>
 801df1a:	0c1b      	lsrs	r3, r3, #16
 801df1c:	2010      	movs	r0, #16
 801df1e:	b2da      	uxtb	r2, r3
 801df20:	b90a      	cbnz	r2, 801df26 <__lo0bits+0x32>
 801df22:	3008      	adds	r0, #8
 801df24:	0a1b      	lsrs	r3, r3, #8
 801df26:	071a      	lsls	r2, r3, #28
 801df28:	bf04      	itt	eq
 801df2a:	091b      	lsreq	r3, r3, #4
 801df2c:	3004      	addeq	r0, #4
 801df2e:	079a      	lsls	r2, r3, #30
 801df30:	bf04      	itt	eq
 801df32:	089b      	lsreq	r3, r3, #2
 801df34:	3002      	addeq	r0, #2
 801df36:	07da      	lsls	r2, r3, #31
 801df38:	d403      	bmi.n	801df42 <__lo0bits+0x4e>
 801df3a:	085b      	lsrs	r3, r3, #1
 801df3c:	f100 0001 	add.w	r0, r0, #1
 801df40:	d005      	beq.n	801df4e <__lo0bits+0x5a>
 801df42:	600b      	str	r3, [r1, #0]
 801df44:	4770      	bx	lr
 801df46:	4610      	mov	r0, r2
 801df48:	e7e9      	b.n	801df1e <__lo0bits+0x2a>
 801df4a:	2000      	movs	r0, #0
 801df4c:	4770      	bx	lr
 801df4e:	2020      	movs	r0, #32
 801df50:	4770      	bx	lr
	...

0801df54 <__i2b>:
 801df54:	b510      	push	{r4, lr}
 801df56:	460c      	mov	r4, r1
 801df58:	2101      	movs	r1, #1
 801df5a:	f7ff ff03 	bl	801dd64 <_Balloc>
 801df5e:	4602      	mov	r2, r0
 801df60:	b928      	cbnz	r0, 801df6e <__i2b+0x1a>
 801df62:	4b05      	ldr	r3, [pc, #20]	; (801df78 <__i2b+0x24>)
 801df64:	4805      	ldr	r0, [pc, #20]	; (801df7c <__i2b+0x28>)
 801df66:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801df6a:	f000 faa7 	bl	801e4bc <__assert_func>
 801df6e:	2301      	movs	r3, #1
 801df70:	6144      	str	r4, [r0, #20]
 801df72:	6103      	str	r3, [r0, #16]
 801df74:	bd10      	pop	{r4, pc}
 801df76:	bf00      	nop
 801df78:	0801f76f 	.word	0x0801f76f
 801df7c:	0801f780 	.word	0x0801f780

0801df80 <__multiply>:
 801df80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df84:	4691      	mov	r9, r2
 801df86:	690a      	ldr	r2, [r1, #16]
 801df88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801df8c:	429a      	cmp	r2, r3
 801df8e:	bfb8      	it	lt
 801df90:	460b      	movlt	r3, r1
 801df92:	460c      	mov	r4, r1
 801df94:	bfbc      	itt	lt
 801df96:	464c      	movlt	r4, r9
 801df98:	4699      	movlt	r9, r3
 801df9a:	6927      	ldr	r7, [r4, #16]
 801df9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801dfa0:	68a3      	ldr	r3, [r4, #8]
 801dfa2:	6861      	ldr	r1, [r4, #4]
 801dfa4:	eb07 060a 	add.w	r6, r7, sl
 801dfa8:	42b3      	cmp	r3, r6
 801dfaa:	b085      	sub	sp, #20
 801dfac:	bfb8      	it	lt
 801dfae:	3101      	addlt	r1, #1
 801dfb0:	f7ff fed8 	bl	801dd64 <_Balloc>
 801dfb4:	b930      	cbnz	r0, 801dfc4 <__multiply+0x44>
 801dfb6:	4602      	mov	r2, r0
 801dfb8:	4b44      	ldr	r3, [pc, #272]	; (801e0cc <__multiply+0x14c>)
 801dfba:	4845      	ldr	r0, [pc, #276]	; (801e0d0 <__multiply+0x150>)
 801dfbc:	f240 115d 	movw	r1, #349	; 0x15d
 801dfc0:	f000 fa7c 	bl	801e4bc <__assert_func>
 801dfc4:	f100 0514 	add.w	r5, r0, #20
 801dfc8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801dfcc:	462b      	mov	r3, r5
 801dfce:	2200      	movs	r2, #0
 801dfd0:	4543      	cmp	r3, r8
 801dfd2:	d321      	bcc.n	801e018 <__multiply+0x98>
 801dfd4:	f104 0314 	add.w	r3, r4, #20
 801dfd8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801dfdc:	f109 0314 	add.w	r3, r9, #20
 801dfe0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801dfe4:	9202      	str	r2, [sp, #8]
 801dfe6:	1b3a      	subs	r2, r7, r4
 801dfe8:	3a15      	subs	r2, #21
 801dfea:	f022 0203 	bic.w	r2, r2, #3
 801dfee:	3204      	adds	r2, #4
 801dff0:	f104 0115 	add.w	r1, r4, #21
 801dff4:	428f      	cmp	r7, r1
 801dff6:	bf38      	it	cc
 801dff8:	2204      	movcc	r2, #4
 801dffa:	9201      	str	r2, [sp, #4]
 801dffc:	9a02      	ldr	r2, [sp, #8]
 801dffe:	9303      	str	r3, [sp, #12]
 801e000:	429a      	cmp	r2, r3
 801e002:	d80c      	bhi.n	801e01e <__multiply+0x9e>
 801e004:	2e00      	cmp	r6, #0
 801e006:	dd03      	ble.n	801e010 <__multiply+0x90>
 801e008:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	d05a      	beq.n	801e0c6 <__multiply+0x146>
 801e010:	6106      	str	r6, [r0, #16]
 801e012:	b005      	add	sp, #20
 801e014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e018:	f843 2b04 	str.w	r2, [r3], #4
 801e01c:	e7d8      	b.n	801dfd0 <__multiply+0x50>
 801e01e:	f8b3 a000 	ldrh.w	sl, [r3]
 801e022:	f1ba 0f00 	cmp.w	sl, #0
 801e026:	d024      	beq.n	801e072 <__multiply+0xf2>
 801e028:	f104 0e14 	add.w	lr, r4, #20
 801e02c:	46a9      	mov	r9, r5
 801e02e:	f04f 0c00 	mov.w	ip, #0
 801e032:	f85e 2b04 	ldr.w	r2, [lr], #4
 801e036:	f8d9 1000 	ldr.w	r1, [r9]
 801e03a:	fa1f fb82 	uxth.w	fp, r2
 801e03e:	b289      	uxth	r1, r1
 801e040:	fb0a 110b 	mla	r1, sl, fp, r1
 801e044:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801e048:	f8d9 2000 	ldr.w	r2, [r9]
 801e04c:	4461      	add	r1, ip
 801e04e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e052:	fb0a c20b 	mla	r2, sl, fp, ip
 801e056:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801e05a:	b289      	uxth	r1, r1
 801e05c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801e060:	4577      	cmp	r7, lr
 801e062:	f849 1b04 	str.w	r1, [r9], #4
 801e066:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801e06a:	d8e2      	bhi.n	801e032 <__multiply+0xb2>
 801e06c:	9a01      	ldr	r2, [sp, #4]
 801e06e:	f845 c002 	str.w	ip, [r5, r2]
 801e072:	9a03      	ldr	r2, [sp, #12]
 801e074:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801e078:	3304      	adds	r3, #4
 801e07a:	f1b9 0f00 	cmp.w	r9, #0
 801e07e:	d020      	beq.n	801e0c2 <__multiply+0x142>
 801e080:	6829      	ldr	r1, [r5, #0]
 801e082:	f104 0c14 	add.w	ip, r4, #20
 801e086:	46ae      	mov	lr, r5
 801e088:	f04f 0a00 	mov.w	sl, #0
 801e08c:	f8bc b000 	ldrh.w	fp, [ip]
 801e090:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801e094:	fb09 220b 	mla	r2, r9, fp, r2
 801e098:	4492      	add	sl, r2
 801e09a:	b289      	uxth	r1, r1
 801e09c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801e0a0:	f84e 1b04 	str.w	r1, [lr], #4
 801e0a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 801e0a8:	f8be 1000 	ldrh.w	r1, [lr]
 801e0ac:	0c12      	lsrs	r2, r2, #16
 801e0ae:	fb09 1102 	mla	r1, r9, r2, r1
 801e0b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801e0b6:	4567      	cmp	r7, ip
 801e0b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801e0bc:	d8e6      	bhi.n	801e08c <__multiply+0x10c>
 801e0be:	9a01      	ldr	r2, [sp, #4]
 801e0c0:	50a9      	str	r1, [r5, r2]
 801e0c2:	3504      	adds	r5, #4
 801e0c4:	e79a      	b.n	801dffc <__multiply+0x7c>
 801e0c6:	3e01      	subs	r6, #1
 801e0c8:	e79c      	b.n	801e004 <__multiply+0x84>
 801e0ca:	bf00      	nop
 801e0cc:	0801f76f 	.word	0x0801f76f
 801e0d0:	0801f780 	.word	0x0801f780

0801e0d4 <__pow5mult>:
 801e0d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e0d8:	4615      	mov	r5, r2
 801e0da:	f012 0203 	ands.w	r2, r2, #3
 801e0de:	4606      	mov	r6, r0
 801e0e0:	460f      	mov	r7, r1
 801e0e2:	d007      	beq.n	801e0f4 <__pow5mult+0x20>
 801e0e4:	4c25      	ldr	r4, [pc, #148]	; (801e17c <__pow5mult+0xa8>)
 801e0e6:	3a01      	subs	r2, #1
 801e0e8:	2300      	movs	r3, #0
 801e0ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801e0ee:	f7ff fe9b 	bl	801de28 <__multadd>
 801e0f2:	4607      	mov	r7, r0
 801e0f4:	10ad      	asrs	r5, r5, #2
 801e0f6:	d03d      	beq.n	801e174 <__pow5mult+0xa0>
 801e0f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801e0fa:	b97c      	cbnz	r4, 801e11c <__pow5mult+0x48>
 801e0fc:	2010      	movs	r0, #16
 801e0fe:	f7fd ffdb 	bl	801c0b8 <malloc>
 801e102:	4602      	mov	r2, r0
 801e104:	6270      	str	r0, [r6, #36]	; 0x24
 801e106:	b928      	cbnz	r0, 801e114 <__pow5mult+0x40>
 801e108:	4b1d      	ldr	r3, [pc, #116]	; (801e180 <__pow5mult+0xac>)
 801e10a:	481e      	ldr	r0, [pc, #120]	; (801e184 <__pow5mult+0xb0>)
 801e10c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801e110:	f000 f9d4 	bl	801e4bc <__assert_func>
 801e114:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801e118:	6004      	str	r4, [r0, #0]
 801e11a:	60c4      	str	r4, [r0, #12]
 801e11c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801e120:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801e124:	b94c      	cbnz	r4, 801e13a <__pow5mult+0x66>
 801e126:	f240 2171 	movw	r1, #625	; 0x271
 801e12a:	4630      	mov	r0, r6
 801e12c:	f7ff ff12 	bl	801df54 <__i2b>
 801e130:	2300      	movs	r3, #0
 801e132:	f8c8 0008 	str.w	r0, [r8, #8]
 801e136:	4604      	mov	r4, r0
 801e138:	6003      	str	r3, [r0, #0]
 801e13a:	f04f 0900 	mov.w	r9, #0
 801e13e:	07eb      	lsls	r3, r5, #31
 801e140:	d50a      	bpl.n	801e158 <__pow5mult+0x84>
 801e142:	4639      	mov	r1, r7
 801e144:	4622      	mov	r2, r4
 801e146:	4630      	mov	r0, r6
 801e148:	f7ff ff1a 	bl	801df80 <__multiply>
 801e14c:	4639      	mov	r1, r7
 801e14e:	4680      	mov	r8, r0
 801e150:	4630      	mov	r0, r6
 801e152:	f7ff fe47 	bl	801dde4 <_Bfree>
 801e156:	4647      	mov	r7, r8
 801e158:	106d      	asrs	r5, r5, #1
 801e15a:	d00b      	beq.n	801e174 <__pow5mult+0xa0>
 801e15c:	6820      	ldr	r0, [r4, #0]
 801e15e:	b938      	cbnz	r0, 801e170 <__pow5mult+0x9c>
 801e160:	4622      	mov	r2, r4
 801e162:	4621      	mov	r1, r4
 801e164:	4630      	mov	r0, r6
 801e166:	f7ff ff0b 	bl	801df80 <__multiply>
 801e16a:	6020      	str	r0, [r4, #0]
 801e16c:	f8c0 9000 	str.w	r9, [r0]
 801e170:	4604      	mov	r4, r0
 801e172:	e7e4      	b.n	801e13e <__pow5mult+0x6a>
 801e174:	4638      	mov	r0, r7
 801e176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e17a:	bf00      	nop
 801e17c:	0801f8d0 	.word	0x0801f8d0
 801e180:	0801f6fd 	.word	0x0801f6fd
 801e184:	0801f780 	.word	0x0801f780

0801e188 <__lshift>:
 801e188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e18c:	460c      	mov	r4, r1
 801e18e:	6849      	ldr	r1, [r1, #4]
 801e190:	6923      	ldr	r3, [r4, #16]
 801e192:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801e196:	68a3      	ldr	r3, [r4, #8]
 801e198:	4607      	mov	r7, r0
 801e19a:	4691      	mov	r9, r2
 801e19c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801e1a0:	f108 0601 	add.w	r6, r8, #1
 801e1a4:	42b3      	cmp	r3, r6
 801e1a6:	db0b      	blt.n	801e1c0 <__lshift+0x38>
 801e1a8:	4638      	mov	r0, r7
 801e1aa:	f7ff fddb 	bl	801dd64 <_Balloc>
 801e1ae:	4605      	mov	r5, r0
 801e1b0:	b948      	cbnz	r0, 801e1c6 <__lshift+0x3e>
 801e1b2:	4602      	mov	r2, r0
 801e1b4:	4b2a      	ldr	r3, [pc, #168]	; (801e260 <__lshift+0xd8>)
 801e1b6:	482b      	ldr	r0, [pc, #172]	; (801e264 <__lshift+0xdc>)
 801e1b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 801e1bc:	f000 f97e 	bl	801e4bc <__assert_func>
 801e1c0:	3101      	adds	r1, #1
 801e1c2:	005b      	lsls	r3, r3, #1
 801e1c4:	e7ee      	b.n	801e1a4 <__lshift+0x1c>
 801e1c6:	2300      	movs	r3, #0
 801e1c8:	f100 0114 	add.w	r1, r0, #20
 801e1cc:	f100 0210 	add.w	r2, r0, #16
 801e1d0:	4618      	mov	r0, r3
 801e1d2:	4553      	cmp	r3, sl
 801e1d4:	db37      	blt.n	801e246 <__lshift+0xbe>
 801e1d6:	6920      	ldr	r0, [r4, #16]
 801e1d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801e1dc:	f104 0314 	add.w	r3, r4, #20
 801e1e0:	f019 091f 	ands.w	r9, r9, #31
 801e1e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801e1e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801e1ec:	d02f      	beq.n	801e24e <__lshift+0xc6>
 801e1ee:	f1c9 0e20 	rsb	lr, r9, #32
 801e1f2:	468a      	mov	sl, r1
 801e1f4:	f04f 0c00 	mov.w	ip, #0
 801e1f8:	681a      	ldr	r2, [r3, #0]
 801e1fa:	fa02 f209 	lsl.w	r2, r2, r9
 801e1fe:	ea42 020c 	orr.w	r2, r2, ip
 801e202:	f84a 2b04 	str.w	r2, [sl], #4
 801e206:	f853 2b04 	ldr.w	r2, [r3], #4
 801e20a:	4298      	cmp	r0, r3
 801e20c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801e210:	d8f2      	bhi.n	801e1f8 <__lshift+0x70>
 801e212:	1b03      	subs	r3, r0, r4
 801e214:	3b15      	subs	r3, #21
 801e216:	f023 0303 	bic.w	r3, r3, #3
 801e21a:	3304      	adds	r3, #4
 801e21c:	f104 0215 	add.w	r2, r4, #21
 801e220:	4290      	cmp	r0, r2
 801e222:	bf38      	it	cc
 801e224:	2304      	movcc	r3, #4
 801e226:	f841 c003 	str.w	ip, [r1, r3]
 801e22a:	f1bc 0f00 	cmp.w	ip, #0
 801e22e:	d001      	beq.n	801e234 <__lshift+0xac>
 801e230:	f108 0602 	add.w	r6, r8, #2
 801e234:	3e01      	subs	r6, #1
 801e236:	4638      	mov	r0, r7
 801e238:	612e      	str	r6, [r5, #16]
 801e23a:	4621      	mov	r1, r4
 801e23c:	f7ff fdd2 	bl	801dde4 <_Bfree>
 801e240:	4628      	mov	r0, r5
 801e242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e246:	f842 0f04 	str.w	r0, [r2, #4]!
 801e24a:	3301      	adds	r3, #1
 801e24c:	e7c1      	b.n	801e1d2 <__lshift+0x4a>
 801e24e:	3904      	subs	r1, #4
 801e250:	f853 2b04 	ldr.w	r2, [r3], #4
 801e254:	f841 2f04 	str.w	r2, [r1, #4]!
 801e258:	4298      	cmp	r0, r3
 801e25a:	d8f9      	bhi.n	801e250 <__lshift+0xc8>
 801e25c:	e7ea      	b.n	801e234 <__lshift+0xac>
 801e25e:	bf00      	nop
 801e260:	0801f76f 	.word	0x0801f76f
 801e264:	0801f780 	.word	0x0801f780

0801e268 <__mcmp>:
 801e268:	b530      	push	{r4, r5, lr}
 801e26a:	6902      	ldr	r2, [r0, #16]
 801e26c:	690c      	ldr	r4, [r1, #16]
 801e26e:	1b12      	subs	r2, r2, r4
 801e270:	d10e      	bne.n	801e290 <__mcmp+0x28>
 801e272:	f100 0314 	add.w	r3, r0, #20
 801e276:	3114      	adds	r1, #20
 801e278:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801e27c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801e280:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801e284:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801e288:	42a5      	cmp	r5, r4
 801e28a:	d003      	beq.n	801e294 <__mcmp+0x2c>
 801e28c:	d305      	bcc.n	801e29a <__mcmp+0x32>
 801e28e:	2201      	movs	r2, #1
 801e290:	4610      	mov	r0, r2
 801e292:	bd30      	pop	{r4, r5, pc}
 801e294:	4283      	cmp	r3, r0
 801e296:	d3f3      	bcc.n	801e280 <__mcmp+0x18>
 801e298:	e7fa      	b.n	801e290 <__mcmp+0x28>
 801e29a:	f04f 32ff 	mov.w	r2, #4294967295
 801e29e:	e7f7      	b.n	801e290 <__mcmp+0x28>

0801e2a0 <__mdiff>:
 801e2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2a4:	460c      	mov	r4, r1
 801e2a6:	4606      	mov	r6, r0
 801e2a8:	4611      	mov	r1, r2
 801e2aa:	4620      	mov	r0, r4
 801e2ac:	4690      	mov	r8, r2
 801e2ae:	f7ff ffdb 	bl	801e268 <__mcmp>
 801e2b2:	1e05      	subs	r5, r0, #0
 801e2b4:	d110      	bne.n	801e2d8 <__mdiff+0x38>
 801e2b6:	4629      	mov	r1, r5
 801e2b8:	4630      	mov	r0, r6
 801e2ba:	f7ff fd53 	bl	801dd64 <_Balloc>
 801e2be:	b930      	cbnz	r0, 801e2ce <__mdiff+0x2e>
 801e2c0:	4b3a      	ldr	r3, [pc, #232]	; (801e3ac <__mdiff+0x10c>)
 801e2c2:	4602      	mov	r2, r0
 801e2c4:	f240 2132 	movw	r1, #562	; 0x232
 801e2c8:	4839      	ldr	r0, [pc, #228]	; (801e3b0 <__mdiff+0x110>)
 801e2ca:	f000 f8f7 	bl	801e4bc <__assert_func>
 801e2ce:	2301      	movs	r3, #1
 801e2d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801e2d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2d8:	bfa4      	itt	ge
 801e2da:	4643      	movge	r3, r8
 801e2dc:	46a0      	movge	r8, r4
 801e2de:	4630      	mov	r0, r6
 801e2e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e2e4:	bfa6      	itte	ge
 801e2e6:	461c      	movge	r4, r3
 801e2e8:	2500      	movge	r5, #0
 801e2ea:	2501      	movlt	r5, #1
 801e2ec:	f7ff fd3a 	bl	801dd64 <_Balloc>
 801e2f0:	b920      	cbnz	r0, 801e2fc <__mdiff+0x5c>
 801e2f2:	4b2e      	ldr	r3, [pc, #184]	; (801e3ac <__mdiff+0x10c>)
 801e2f4:	4602      	mov	r2, r0
 801e2f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 801e2fa:	e7e5      	b.n	801e2c8 <__mdiff+0x28>
 801e2fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801e300:	6926      	ldr	r6, [r4, #16]
 801e302:	60c5      	str	r5, [r0, #12]
 801e304:	f104 0914 	add.w	r9, r4, #20
 801e308:	f108 0514 	add.w	r5, r8, #20
 801e30c:	f100 0e14 	add.w	lr, r0, #20
 801e310:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801e314:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801e318:	f108 0210 	add.w	r2, r8, #16
 801e31c:	46f2      	mov	sl, lr
 801e31e:	2100      	movs	r1, #0
 801e320:	f859 3b04 	ldr.w	r3, [r9], #4
 801e324:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801e328:	fa1f f883 	uxth.w	r8, r3
 801e32c:	fa11 f18b 	uxtah	r1, r1, fp
 801e330:	0c1b      	lsrs	r3, r3, #16
 801e332:	eba1 0808 	sub.w	r8, r1, r8
 801e336:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801e33a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801e33e:	fa1f f888 	uxth.w	r8, r8
 801e342:	1419      	asrs	r1, r3, #16
 801e344:	454e      	cmp	r6, r9
 801e346:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801e34a:	f84a 3b04 	str.w	r3, [sl], #4
 801e34e:	d8e7      	bhi.n	801e320 <__mdiff+0x80>
 801e350:	1b33      	subs	r3, r6, r4
 801e352:	3b15      	subs	r3, #21
 801e354:	f023 0303 	bic.w	r3, r3, #3
 801e358:	3304      	adds	r3, #4
 801e35a:	3415      	adds	r4, #21
 801e35c:	42a6      	cmp	r6, r4
 801e35e:	bf38      	it	cc
 801e360:	2304      	movcc	r3, #4
 801e362:	441d      	add	r5, r3
 801e364:	4473      	add	r3, lr
 801e366:	469e      	mov	lr, r3
 801e368:	462e      	mov	r6, r5
 801e36a:	4566      	cmp	r6, ip
 801e36c:	d30e      	bcc.n	801e38c <__mdiff+0xec>
 801e36e:	f10c 0203 	add.w	r2, ip, #3
 801e372:	1b52      	subs	r2, r2, r5
 801e374:	f022 0203 	bic.w	r2, r2, #3
 801e378:	3d03      	subs	r5, #3
 801e37a:	45ac      	cmp	ip, r5
 801e37c:	bf38      	it	cc
 801e37e:	2200      	movcc	r2, #0
 801e380:	441a      	add	r2, r3
 801e382:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801e386:	b17b      	cbz	r3, 801e3a8 <__mdiff+0x108>
 801e388:	6107      	str	r7, [r0, #16]
 801e38a:	e7a3      	b.n	801e2d4 <__mdiff+0x34>
 801e38c:	f856 8b04 	ldr.w	r8, [r6], #4
 801e390:	fa11 f288 	uxtah	r2, r1, r8
 801e394:	1414      	asrs	r4, r2, #16
 801e396:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801e39a:	b292      	uxth	r2, r2
 801e39c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801e3a0:	f84e 2b04 	str.w	r2, [lr], #4
 801e3a4:	1421      	asrs	r1, r4, #16
 801e3a6:	e7e0      	b.n	801e36a <__mdiff+0xca>
 801e3a8:	3f01      	subs	r7, #1
 801e3aa:	e7ea      	b.n	801e382 <__mdiff+0xe2>
 801e3ac:	0801f76f 	.word	0x0801f76f
 801e3b0:	0801f780 	.word	0x0801f780

0801e3b4 <__d2b>:
 801e3b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801e3b8:	4689      	mov	r9, r1
 801e3ba:	2101      	movs	r1, #1
 801e3bc:	ec57 6b10 	vmov	r6, r7, d0
 801e3c0:	4690      	mov	r8, r2
 801e3c2:	f7ff fccf 	bl	801dd64 <_Balloc>
 801e3c6:	4604      	mov	r4, r0
 801e3c8:	b930      	cbnz	r0, 801e3d8 <__d2b+0x24>
 801e3ca:	4602      	mov	r2, r0
 801e3cc:	4b25      	ldr	r3, [pc, #148]	; (801e464 <__d2b+0xb0>)
 801e3ce:	4826      	ldr	r0, [pc, #152]	; (801e468 <__d2b+0xb4>)
 801e3d0:	f240 310a 	movw	r1, #778	; 0x30a
 801e3d4:	f000 f872 	bl	801e4bc <__assert_func>
 801e3d8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801e3dc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e3e0:	bb35      	cbnz	r5, 801e430 <__d2b+0x7c>
 801e3e2:	2e00      	cmp	r6, #0
 801e3e4:	9301      	str	r3, [sp, #4]
 801e3e6:	d028      	beq.n	801e43a <__d2b+0x86>
 801e3e8:	4668      	mov	r0, sp
 801e3ea:	9600      	str	r6, [sp, #0]
 801e3ec:	f7ff fd82 	bl	801def4 <__lo0bits>
 801e3f0:	9900      	ldr	r1, [sp, #0]
 801e3f2:	b300      	cbz	r0, 801e436 <__d2b+0x82>
 801e3f4:	9a01      	ldr	r2, [sp, #4]
 801e3f6:	f1c0 0320 	rsb	r3, r0, #32
 801e3fa:	fa02 f303 	lsl.w	r3, r2, r3
 801e3fe:	430b      	orrs	r3, r1
 801e400:	40c2      	lsrs	r2, r0
 801e402:	6163      	str	r3, [r4, #20]
 801e404:	9201      	str	r2, [sp, #4]
 801e406:	9b01      	ldr	r3, [sp, #4]
 801e408:	61a3      	str	r3, [r4, #24]
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	bf14      	ite	ne
 801e40e:	2202      	movne	r2, #2
 801e410:	2201      	moveq	r2, #1
 801e412:	6122      	str	r2, [r4, #16]
 801e414:	b1d5      	cbz	r5, 801e44c <__d2b+0x98>
 801e416:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801e41a:	4405      	add	r5, r0
 801e41c:	f8c9 5000 	str.w	r5, [r9]
 801e420:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801e424:	f8c8 0000 	str.w	r0, [r8]
 801e428:	4620      	mov	r0, r4
 801e42a:	b003      	add	sp, #12
 801e42c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e430:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e434:	e7d5      	b.n	801e3e2 <__d2b+0x2e>
 801e436:	6161      	str	r1, [r4, #20]
 801e438:	e7e5      	b.n	801e406 <__d2b+0x52>
 801e43a:	a801      	add	r0, sp, #4
 801e43c:	f7ff fd5a 	bl	801def4 <__lo0bits>
 801e440:	9b01      	ldr	r3, [sp, #4]
 801e442:	6163      	str	r3, [r4, #20]
 801e444:	2201      	movs	r2, #1
 801e446:	6122      	str	r2, [r4, #16]
 801e448:	3020      	adds	r0, #32
 801e44a:	e7e3      	b.n	801e414 <__d2b+0x60>
 801e44c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801e450:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801e454:	f8c9 0000 	str.w	r0, [r9]
 801e458:	6918      	ldr	r0, [r3, #16]
 801e45a:	f7ff fd2b 	bl	801deb4 <__hi0bits>
 801e45e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801e462:	e7df      	b.n	801e424 <__d2b+0x70>
 801e464:	0801f76f 	.word	0x0801f76f
 801e468:	0801f780 	.word	0x0801f780

0801e46c <_calloc_r>:
 801e46c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e46e:	fba1 2402 	umull	r2, r4, r1, r2
 801e472:	b94c      	cbnz	r4, 801e488 <_calloc_r+0x1c>
 801e474:	4611      	mov	r1, r2
 801e476:	9201      	str	r2, [sp, #4]
 801e478:	f7fd feb0 	bl	801c1dc <_malloc_r>
 801e47c:	9a01      	ldr	r2, [sp, #4]
 801e47e:	4605      	mov	r5, r0
 801e480:	b930      	cbnz	r0, 801e490 <_calloc_r+0x24>
 801e482:	4628      	mov	r0, r5
 801e484:	b003      	add	sp, #12
 801e486:	bd30      	pop	{r4, r5, pc}
 801e488:	220c      	movs	r2, #12
 801e48a:	6002      	str	r2, [r0, #0]
 801e48c:	2500      	movs	r5, #0
 801e48e:	e7f8      	b.n	801e482 <_calloc_r+0x16>
 801e490:	4621      	mov	r1, r4
 801e492:	f7fd fe2f 	bl	801c0f4 <memset>
 801e496:	e7f4      	b.n	801e482 <_calloc_r+0x16>

0801e498 <_read_r>:
 801e498:	b538      	push	{r3, r4, r5, lr}
 801e49a:	4d07      	ldr	r5, [pc, #28]	; (801e4b8 <_read_r+0x20>)
 801e49c:	4604      	mov	r4, r0
 801e49e:	4608      	mov	r0, r1
 801e4a0:	4611      	mov	r1, r2
 801e4a2:	2200      	movs	r2, #0
 801e4a4:	602a      	str	r2, [r5, #0]
 801e4a6:	461a      	mov	r2, r3
 801e4a8:	f7f1 fae4 	bl	800fa74 <_read>
 801e4ac:	1c43      	adds	r3, r0, #1
 801e4ae:	d102      	bne.n	801e4b6 <_read_r+0x1e>
 801e4b0:	682b      	ldr	r3, [r5, #0]
 801e4b2:	b103      	cbz	r3, 801e4b6 <_read_r+0x1e>
 801e4b4:	6023      	str	r3, [r4, #0]
 801e4b6:	bd38      	pop	{r3, r4, r5, pc}
 801e4b8:	2000a5f8 	.word	0x2000a5f8

0801e4bc <__assert_func>:
 801e4bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e4be:	4614      	mov	r4, r2
 801e4c0:	461a      	mov	r2, r3
 801e4c2:	4b09      	ldr	r3, [pc, #36]	; (801e4e8 <__assert_func+0x2c>)
 801e4c4:	681b      	ldr	r3, [r3, #0]
 801e4c6:	4605      	mov	r5, r0
 801e4c8:	68d8      	ldr	r0, [r3, #12]
 801e4ca:	b14c      	cbz	r4, 801e4e0 <__assert_func+0x24>
 801e4cc:	4b07      	ldr	r3, [pc, #28]	; (801e4ec <__assert_func+0x30>)
 801e4ce:	9100      	str	r1, [sp, #0]
 801e4d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e4d4:	4906      	ldr	r1, [pc, #24]	; (801e4f0 <__assert_func+0x34>)
 801e4d6:	462b      	mov	r3, r5
 801e4d8:	f000 f80e 	bl	801e4f8 <fiprintf>
 801e4dc:	f7fd fcba 	bl	801be54 <abort>
 801e4e0:	4b04      	ldr	r3, [pc, #16]	; (801e4f4 <__assert_func+0x38>)
 801e4e2:	461c      	mov	r4, r3
 801e4e4:	e7f3      	b.n	801e4ce <__assert_func+0x12>
 801e4e6:	bf00      	nop
 801e4e8:	20000030 	.word	0x20000030
 801e4ec:	0801f8dc 	.word	0x0801f8dc
 801e4f0:	0801f8e9 	.word	0x0801f8e9
 801e4f4:	0801f917 	.word	0x0801f917

0801e4f8 <fiprintf>:
 801e4f8:	b40e      	push	{r1, r2, r3}
 801e4fa:	b503      	push	{r0, r1, lr}
 801e4fc:	4601      	mov	r1, r0
 801e4fe:	ab03      	add	r3, sp, #12
 801e500:	4805      	ldr	r0, [pc, #20]	; (801e518 <fiprintf+0x20>)
 801e502:	f853 2b04 	ldr.w	r2, [r3], #4
 801e506:	6800      	ldr	r0, [r0, #0]
 801e508:	9301      	str	r3, [sp, #4]
 801e50a:	f000 f843 	bl	801e594 <_vfiprintf_r>
 801e50e:	b002      	add	sp, #8
 801e510:	f85d eb04 	ldr.w	lr, [sp], #4
 801e514:	b003      	add	sp, #12
 801e516:	4770      	bx	lr
 801e518:	20000030 	.word	0x20000030

0801e51c <__ascii_mbtowc>:
 801e51c:	b082      	sub	sp, #8
 801e51e:	b901      	cbnz	r1, 801e522 <__ascii_mbtowc+0x6>
 801e520:	a901      	add	r1, sp, #4
 801e522:	b142      	cbz	r2, 801e536 <__ascii_mbtowc+0x1a>
 801e524:	b14b      	cbz	r3, 801e53a <__ascii_mbtowc+0x1e>
 801e526:	7813      	ldrb	r3, [r2, #0]
 801e528:	600b      	str	r3, [r1, #0]
 801e52a:	7812      	ldrb	r2, [r2, #0]
 801e52c:	1e10      	subs	r0, r2, #0
 801e52e:	bf18      	it	ne
 801e530:	2001      	movne	r0, #1
 801e532:	b002      	add	sp, #8
 801e534:	4770      	bx	lr
 801e536:	4610      	mov	r0, r2
 801e538:	e7fb      	b.n	801e532 <__ascii_mbtowc+0x16>
 801e53a:	f06f 0001 	mvn.w	r0, #1
 801e53e:	e7f8      	b.n	801e532 <__ascii_mbtowc+0x16>

0801e540 <__sfputc_r>:
 801e540:	6893      	ldr	r3, [r2, #8]
 801e542:	3b01      	subs	r3, #1
 801e544:	2b00      	cmp	r3, #0
 801e546:	b410      	push	{r4}
 801e548:	6093      	str	r3, [r2, #8]
 801e54a:	da08      	bge.n	801e55e <__sfputc_r+0x1e>
 801e54c:	6994      	ldr	r4, [r2, #24]
 801e54e:	42a3      	cmp	r3, r4
 801e550:	db01      	blt.n	801e556 <__sfputc_r+0x16>
 801e552:	290a      	cmp	r1, #10
 801e554:	d103      	bne.n	801e55e <__sfputc_r+0x1e>
 801e556:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e55a:	f000 b94b 	b.w	801e7f4 <__swbuf_r>
 801e55e:	6813      	ldr	r3, [r2, #0]
 801e560:	1c58      	adds	r0, r3, #1
 801e562:	6010      	str	r0, [r2, #0]
 801e564:	7019      	strb	r1, [r3, #0]
 801e566:	4608      	mov	r0, r1
 801e568:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e56c:	4770      	bx	lr

0801e56e <__sfputs_r>:
 801e56e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e570:	4606      	mov	r6, r0
 801e572:	460f      	mov	r7, r1
 801e574:	4614      	mov	r4, r2
 801e576:	18d5      	adds	r5, r2, r3
 801e578:	42ac      	cmp	r4, r5
 801e57a:	d101      	bne.n	801e580 <__sfputs_r+0x12>
 801e57c:	2000      	movs	r0, #0
 801e57e:	e007      	b.n	801e590 <__sfputs_r+0x22>
 801e580:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e584:	463a      	mov	r2, r7
 801e586:	4630      	mov	r0, r6
 801e588:	f7ff ffda 	bl	801e540 <__sfputc_r>
 801e58c:	1c43      	adds	r3, r0, #1
 801e58e:	d1f3      	bne.n	801e578 <__sfputs_r+0xa>
 801e590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e594 <_vfiprintf_r>:
 801e594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e598:	460d      	mov	r5, r1
 801e59a:	b09d      	sub	sp, #116	; 0x74
 801e59c:	4614      	mov	r4, r2
 801e59e:	4698      	mov	r8, r3
 801e5a0:	4606      	mov	r6, r0
 801e5a2:	b118      	cbz	r0, 801e5ac <_vfiprintf_r+0x18>
 801e5a4:	6983      	ldr	r3, [r0, #24]
 801e5a6:	b90b      	cbnz	r3, 801e5ac <_vfiprintf_r+0x18>
 801e5a8:	f7fd fcc0 	bl	801bf2c <__sinit>
 801e5ac:	4b89      	ldr	r3, [pc, #548]	; (801e7d4 <_vfiprintf_r+0x240>)
 801e5ae:	429d      	cmp	r5, r3
 801e5b0:	d11b      	bne.n	801e5ea <_vfiprintf_r+0x56>
 801e5b2:	6875      	ldr	r5, [r6, #4]
 801e5b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e5b6:	07d9      	lsls	r1, r3, #31
 801e5b8:	d405      	bmi.n	801e5c6 <_vfiprintf_r+0x32>
 801e5ba:	89ab      	ldrh	r3, [r5, #12]
 801e5bc:	059a      	lsls	r2, r3, #22
 801e5be:	d402      	bmi.n	801e5c6 <_vfiprintf_r+0x32>
 801e5c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e5c2:	f7fd fd76 	bl	801c0b2 <__retarget_lock_acquire_recursive>
 801e5c6:	89ab      	ldrh	r3, [r5, #12]
 801e5c8:	071b      	lsls	r3, r3, #28
 801e5ca:	d501      	bpl.n	801e5d0 <_vfiprintf_r+0x3c>
 801e5cc:	692b      	ldr	r3, [r5, #16]
 801e5ce:	b9eb      	cbnz	r3, 801e60c <_vfiprintf_r+0x78>
 801e5d0:	4629      	mov	r1, r5
 801e5d2:	4630      	mov	r0, r6
 801e5d4:	f000 f96e 	bl	801e8b4 <__swsetup_r>
 801e5d8:	b1c0      	cbz	r0, 801e60c <_vfiprintf_r+0x78>
 801e5da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e5dc:	07dc      	lsls	r4, r3, #31
 801e5de:	d50e      	bpl.n	801e5fe <_vfiprintf_r+0x6a>
 801e5e0:	f04f 30ff 	mov.w	r0, #4294967295
 801e5e4:	b01d      	add	sp, #116	; 0x74
 801e5e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e5ea:	4b7b      	ldr	r3, [pc, #492]	; (801e7d8 <_vfiprintf_r+0x244>)
 801e5ec:	429d      	cmp	r5, r3
 801e5ee:	d101      	bne.n	801e5f4 <_vfiprintf_r+0x60>
 801e5f0:	68b5      	ldr	r5, [r6, #8]
 801e5f2:	e7df      	b.n	801e5b4 <_vfiprintf_r+0x20>
 801e5f4:	4b79      	ldr	r3, [pc, #484]	; (801e7dc <_vfiprintf_r+0x248>)
 801e5f6:	429d      	cmp	r5, r3
 801e5f8:	bf08      	it	eq
 801e5fa:	68f5      	ldreq	r5, [r6, #12]
 801e5fc:	e7da      	b.n	801e5b4 <_vfiprintf_r+0x20>
 801e5fe:	89ab      	ldrh	r3, [r5, #12]
 801e600:	0598      	lsls	r0, r3, #22
 801e602:	d4ed      	bmi.n	801e5e0 <_vfiprintf_r+0x4c>
 801e604:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e606:	f7fd fd56 	bl	801c0b6 <__retarget_lock_release_recursive>
 801e60a:	e7e9      	b.n	801e5e0 <_vfiprintf_r+0x4c>
 801e60c:	2300      	movs	r3, #0
 801e60e:	9309      	str	r3, [sp, #36]	; 0x24
 801e610:	2320      	movs	r3, #32
 801e612:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e616:	f8cd 800c 	str.w	r8, [sp, #12]
 801e61a:	2330      	movs	r3, #48	; 0x30
 801e61c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801e7e0 <_vfiprintf_r+0x24c>
 801e620:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e624:	f04f 0901 	mov.w	r9, #1
 801e628:	4623      	mov	r3, r4
 801e62a:	469a      	mov	sl, r3
 801e62c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e630:	b10a      	cbz	r2, 801e636 <_vfiprintf_r+0xa2>
 801e632:	2a25      	cmp	r2, #37	; 0x25
 801e634:	d1f9      	bne.n	801e62a <_vfiprintf_r+0x96>
 801e636:	ebba 0b04 	subs.w	fp, sl, r4
 801e63a:	d00b      	beq.n	801e654 <_vfiprintf_r+0xc0>
 801e63c:	465b      	mov	r3, fp
 801e63e:	4622      	mov	r2, r4
 801e640:	4629      	mov	r1, r5
 801e642:	4630      	mov	r0, r6
 801e644:	f7ff ff93 	bl	801e56e <__sfputs_r>
 801e648:	3001      	adds	r0, #1
 801e64a:	f000 80aa 	beq.w	801e7a2 <_vfiprintf_r+0x20e>
 801e64e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e650:	445a      	add	r2, fp
 801e652:	9209      	str	r2, [sp, #36]	; 0x24
 801e654:	f89a 3000 	ldrb.w	r3, [sl]
 801e658:	2b00      	cmp	r3, #0
 801e65a:	f000 80a2 	beq.w	801e7a2 <_vfiprintf_r+0x20e>
 801e65e:	2300      	movs	r3, #0
 801e660:	f04f 32ff 	mov.w	r2, #4294967295
 801e664:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e668:	f10a 0a01 	add.w	sl, sl, #1
 801e66c:	9304      	str	r3, [sp, #16]
 801e66e:	9307      	str	r3, [sp, #28]
 801e670:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e674:	931a      	str	r3, [sp, #104]	; 0x68
 801e676:	4654      	mov	r4, sl
 801e678:	2205      	movs	r2, #5
 801e67a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e67e:	4858      	ldr	r0, [pc, #352]	; (801e7e0 <_vfiprintf_r+0x24c>)
 801e680:	f7e1 fdae 	bl	80001e0 <memchr>
 801e684:	9a04      	ldr	r2, [sp, #16]
 801e686:	b9d8      	cbnz	r0, 801e6c0 <_vfiprintf_r+0x12c>
 801e688:	06d1      	lsls	r1, r2, #27
 801e68a:	bf44      	itt	mi
 801e68c:	2320      	movmi	r3, #32
 801e68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e692:	0713      	lsls	r3, r2, #28
 801e694:	bf44      	itt	mi
 801e696:	232b      	movmi	r3, #43	; 0x2b
 801e698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e69c:	f89a 3000 	ldrb.w	r3, [sl]
 801e6a0:	2b2a      	cmp	r3, #42	; 0x2a
 801e6a2:	d015      	beq.n	801e6d0 <_vfiprintf_r+0x13c>
 801e6a4:	9a07      	ldr	r2, [sp, #28]
 801e6a6:	4654      	mov	r4, sl
 801e6a8:	2000      	movs	r0, #0
 801e6aa:	f04f 0c0a 	mov.w	ip, #10
 801e6ae:	4621      	mov	r1, r4
 801e6b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e6b4:	3b30      	subs	r3, #48	; 0x30
 801e6b6:	2b09      	cmp	r3, #9
 801e6b8:	d94e      	bls.n	801e758 <_vfiprintf_r+0x1c4>
 801e6ba:	b1b0      	cbz	r0, 801e6ea <_vfiprintf_r+0x156>
 801e6bc:	9207      	str	r2, [sp, #28]
 801e6be:	e014      	b.n	801e6ea <_vfiprintf_r+0x156>
 801e6c0:	eba0 0308 	sub.w	r3, r0, r8
 801e6c4:	fa09 f303 	lsl.w	r3, r9, r3
 801e6c8:	4313      	orrs	r3, r2
 801e6ca:	9304      	str	r3, [sp, #16]
 801e6cc:	46a2      	mov	sl, r4
 801e6ce:	e7d2      	b.n	801e676 <_vfiprintf_r+0xe2>
 801e6d0:	9b03      	ldr	r3, [sp, #12]
 801e6d2:	1d19      	adds	r1, r3, #4
 801e6d4:	681b      	ldr	r3, [r3, #0]
 801e6d6:	9103      	str	r1, [sp, #12]
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	bfbb      	ittet	lt
 801e6dc:	425b      	neglt	r3, r3
 801e6de:	f042 0202 	orrlt.w	r2, r2, #2
 801e6e2:	9307      	strge	r3, [sp, #28]
 801e6e4:	9307      	strlt	r3, [sp, #28]
 801e6e6:	bfb8      	it	lt
 801e6e8:	9204      	strlt	r2, [sp, #16]
 801e6ea:	7823      	ldrb	r3, [r4, #0]
 801e6ec:	2b2e      	cmp	r3, #46	; 0x2e
 801e6ee:	d10c      	bne.n	801e70a <_vfiprintf_r+0x176>
 801e6f0:	7863      	ldrb	r3, [r4, #1]
 801e6f2:	2b2a      	cmp	r3, #42	; 0x2a
 801e6f4:	d135      	bne.n	801e762 <_vfiprintf_r+0x1ce>
 801e6f6:	9b03      	ldr	r3, [sp, #12]
 801e6f8:	1d1a      	adds	r2, r3, #4
 801e6fa:	681b      	ldr	r3, [r3, #0]
 801e6fc:	9203      	str	r2, [sp, #12]
 801e6fe:	2b00      	cmp	r3, #0
 801e700:	bfb8      	it	lt
 801e702:	f04f 33ff 	movlt.w	r3, #4294967295
 801e706:	3402      	adds	r4, #2
 801e708:	9305      	str	r3, [sp, #20]
 801e70a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801e7f0 <_vfiprintf_r+0x25c>
 801e70e:	7821      	ldrb	r1, [r4, #0]
 801e710:	2203      	movs	r2, #3
 801e712:	4650      	mov	r0, sl
 801e714:	f7e1 fd64 	bl	80001e0 <memchr>
 801e718:	b140      	cbz	r0, 801e72c <_vfiprintf_r+0x198>
 801e71a:	2340      	movs	r3, #64	; 0x40
 801e71c:	eba0 000a 	sub.w	r0, r0, sl
 801e720:	fa03 f000 	lsl.w	r0, r3, r0
 801e724:	9b04      	ldr	r3, [sp, #16]
 801e726:	4303      	orrs	r3, r0
 801e728:	3401      	adds	r4, #1
 801e72a:	9304      	str	r3, [sp, #16]
 801e72c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e730:	482c      	ldr	r0, [pc, #176]	; (801e7e4 <_vfiprintf_r+0x250>)
 801e732:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e736:	2206      	movs	r2, #6
 801e738:	f7e1 fd52 	bl	80001e0 <memchr>
 801e73c:	2800      	cmp	r0, #0
 801e73e:	d03f      	beq.n	801e7c0 <_vfiprintf_r+0x22c>
 801e740:	4b29      	ldr	r3, [pc, #164]	; (801e7e8 <_vfiprintf_r+0x254>)
 801e742:	bb1b      	cbnz	r3, 801e78c <_vfiprintf_r+0x1f8>
 801e744:	9b03      	ldr	r3, [sp, #12]
 801e746:	3307      	adds	r3, #7
 801e748:	f023 0307 	bic.w	r3, r3, #7
 801e74c:	3308      	adds	r3, #8
 801e74e:	9303      	str	r3, [sp, #12]
 801e750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e752:	443b      	add	r3, r7
 801e754:	9309      	str	r3, [sp, #36]	; 0x24
 801e756:	e767      	b.n	801e628 <_vfiprintf_r+0x94>
 801e758:	fb0c 3202 	mla	r2, ip, r2, r3
 801e75c:	460c      	mov	r4, r1
 801e75e:	2001      	movs	r0, #1
 801e760:	e7a5      	b.n	801e6ae <_vfiprintf_r+0x11a>
 801e762:	2300      	movs	r3, #0
 801e764:	3401      	adds	r4, #1
 801e766:	9305      	str	r3, [sp, #20]
 801e768:	4619      	mov	r1, r3
 801e76a:	f04f 0c0a 	mov.w	ip, #10
 801e76e:	4620      	mov	r0, r4
 801e770:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e774:	3a30      	subs	r2, #48	; 0x30
 801e776:	2a09      	cmp	r2, #9
 801e778:	d903      	bls.n	801e782 <_vfiprintf_r+0x1ee>
 801e77a:	2b00      	cmp	r3, #0
 801e77c:	d0c5      	beq.n	801e70a <_vfiprintf_r+0x176>
 801e77e:	9105      	str	r1, [sp, #20]
 801e780:	e7c3      	b.n	801e70a <_vfiprintf_r+0x176>
 801e782:	fb0c 2101 	mla	r1, ip, r1, r2
 801e786:	4604      	mov	r4, r0
 801e788:	2301      	movs	r3, #1
 801e78a:	e7f0      	b.n	801e76e <_vfiprintf_r+0x1da>
 801e78c:	ab03      	add	r3, sp, #12
 801e78e:	9300      	str	r3, [sp, #0]
 801e790:	462a      	mov	r2, r5
 801e792:	4b16      	ldr	r3, [pc, #88]	; (801e7ec <_vfiprintf_r+0x258>)
 801e794:	a904      	add	r1, sp, #16
 801e796:	4630      	mov	r0, r6
 801e798:	f7fd fe34 	bl	801c404 <_printf_float>
 801e79c:	4607      	mov	r7, r0
 801e79e:	1c78      	adds	r0, r7, #1
 801e7a0:	d1d6      	bne.n	801e750 <_vfiprintf_r+0x1bc>
 801e7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e7a4:	07d9      	lsls	r1, r3, #31
 801e7a6:	d405      	bmi.n	801e7b4 <_vfiprintf_r+0x220>
 801e7a8:	89ab      	ldrh	r3, [r5, #12]
 801e7aa:	059a      	lsls	r2, r3, #22
 801e7ac:	d402      	bmi.n	801e7b4 <_vfiprintf_r+0x220>
 801e7ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e7b0:	f7fd fc81 	bl	801c0b6 <__retarget_lock_release_recursive>
 801e7b4:	89ab      	ldrh	r3, [r5, #12]
 801e7b6:	065b      	lsls	r3, r3, #25
 801e7b8:	f53f af12 	bmi.w	801e5e0 <_vfiprintf_r+0x4c>
 801e7bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e7be:	e711      	b.n	801e5e4 <_vfiprintf_r+0x50>
 801e7c0:	ab03      	add	r3, sp, #12
 801e7c2:	9300      	str	r3, [sp, #0]
 801e7c4:	462a      	mov	r2, r5
 801e7c6:	4b09      	ldr	r3, [pc, #36]	; (801e7ec <_vfiprintf_r+0x258>)
 801e7c8:	a904      	add	r1, sp, #16
 801e7ca:	4630      	mov	r0, r6
 801e7cc:	f7fe f8be 	bl	801c94c <_printf_i>
 801e7d0:	e7e4      	b.n	801e79c <_vfiprintf_r+0x208>
 801e7d2:	bf00      	nop
 801e7d4:	0801f678 	.word	0x0801f678
 801e7d8:	0801f698 	.word	0x0801f698
 801e7dc:	0801f658 	.word	0x0801f658
 801e7e0:	0801f922 	.word	0x0801f922
 801e7e4:	0801f92c 	.word	0x0801f92c
 801e7e8:	0801c405 	.word	0x0801c405
 801e7ec:	0801e56f 	.word	0x0801e56f
 801e7f0:	0801f928 	.word	0x0801f928

0801e7f4 <__swbuf_r>:
 801e7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7f6:	460e      	mov	r6, r1
 801e7f8:	4614      	mov	r4, r2
 801e7fa:	4605      	mov	r5, r0
 801e7fc:	b118      	cbz	r0, 801e806 <__swbuf_r+0x12>
 801e7fe:	6983      	ldr	r3, [r0, #24]
 801e800:	b90b      	cbnz	r3, 801e806 <__swbuf_r+0x12>
 801e802:	f7fd fb93 	bl	801bf2c <__sinit>
 801e806:	4b21      	ldr	r3, [pc, #132]	; (801e88c <__swbuf_r+0x98>)
 801e808:	429c      	cmp	r4, r3
 801e80a:	d12b      	bne.n	801e864 <__swbuf_r+0x70>
 801e80c:	686c      	ldr	r4, [r5, #4]
 801e80e:	69a3      	ldr	r3, [r4, #24]
 801e810:	60a3      	str	r3, [r4, #8]
 801e812:	89a3      	ldrh	r3, [r4, #12]
 801e814:	071a      	lsls	r2, r3, #28
 801e816:	d52f      	bpl.n	801e878 <__swbuf_r+0x84>
 801e818:	6923      	ldr	r3, [r4, #16]
 801e81a:	b36b      	cbz	r3, 801e878 <__swbuf_r+0x84>
 801e81c:	6923      	ldr	r3, [r4, #16]
 801e81e:	6820      	ldr	r0, [r4, #0]
 801e820:	1ac0      	subs	r0, r0, r3
 801e822:	6963      	ldr	r3, [r4, #20]
 801e824:	b2f6      	uxtb	r6, r6
 801e826:	4283      	cmp	r3, r0
 801e828:	4637      	mov	r7, r6
 801e82a:	dc04      	bgt.n	801e836 <__swbuf_r+0x42>
 801e82c:	4621      	mov	r1, r4
 801e82e:	4628      	mov	r0, r5
 801e830:	f7ff fa3a 	bl	801dca8 <_fflush_r>
 801e834:	bb30      	cbnz	r0, 801e884 <__swbuf_r+0x90>
 801e836:	68a3      	ldr	r3, [r4, #8]
 801e838:	3b01      	subs	r3, #1
 801e83a:	60a3      	str	r3, [r4, #8]
 801e83c:	6823      	ldr	r3, [r4, #0]
 801e83e:	1c5a      	adds	r2, r3, #1
 801e840:	6022      	str	r2, [r4, #0]
 801e842:	701e      	strb	r6, [r3, #0]
 801e844:	6963      	ldr	r3, [r4, #20]
 801e846:	3001      	adds	r0, #1
 801e848:	4283      	cmp	r3, r0
 801e84a:	d004      	beq.n	801e856 <__swbuf_r+0x62>
 801e84c:	89a3      	ldrh	r3, [r4, #12]
 801e84e:	07db      	lsls	r3, r3, #31
 801e850:	d506      	bpl.n	801e860 <__swbuf_r+0x6c>
 801e852:	2e0a      	cmp	r6, #10
 801e854:	d104      	bne.n	801e860 <__swbuf_r+0x6c>
 801e856:	4621      	mov	r1, r4
 801e858:	4628      	mov	r0, r5
 801e85a:	f7ff fa25 	bl	801dca8 <_fflush_r>
 801e85e:	b988      	cbnz	r0, 801e884 <__swbuf_r+0x90>
 801e860:	4638      	mov	r0, r7
 801e862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e864:	4b0a      	ldr	r3, [pc, #40]	; (801e890 <__swbuf_r+0x9c>)
 801e866:	429c      	cmp	r4, r3
 801e868:	d101      	bne.n	801e86e <__swbuf_r+0x7a>
 801e86a:	68ac      	ldr	r4, [r5, #8]
 801e86c:	e7cf      	b.n	801e80e <__swbuf_r+0x1a>
 801e86e:	4b09      	ldr	r3, [pc, #36]	; (801e894 <__swbuf_r+0xa0>)
 801e870:	429c      	cmp	r4, r3
 801e872:	bf08      	it	eq
 801e874:	68ec      	ldreq	r4, [r5, #12]
 801e876:	e7ca      	b.n	801e80e <__swbuf_r+0x1a>
 801e878:	4621      	mov	r1, r4
 801e87a:	4628      	mov	r0, r5
 801e87c:	f000 f81a 	bl	801e8b4 <__swsetup_r>
 801e880:	2800      	cmp	r0, #0
 801e882:	d0cb      	beq.n	801e81c <__swbuf_r+0x28>
 801e884:	f04f 37ff 	mov.w	r7, #4294967295
 801e888:	e7ea      	b.n	801e860 <__swbuf_r+0x6c>
 801e88a:	bf00      	nop
 801e88c:	0801f678 	.word	0x0801f678
 801e890:	0801f698 	.word	0x0801f698
 801e894:	0801f658 	.word	0x0801f658

0801e898 <__ascii_wctomb>:
 801e898:	b149      	cbz	r1, 801e8ae <__ascii_wctomb+0x16>
 801e89a:	2aff      	cmp	r2, #255	; 0xff
 801e89c:	bf85      	ittet	hi
 801e89e:	238a      	movhi	r3, #138	; 0x8a
 801e8a0:	6003      	strhi	r3, [r0, #0]
 801e8a2:	700a      	strbls	r2, [r1, #0]
 801e8a4:	f04f 30ff 	movhi.w	r0, #4294967295
 801e8a8:	bf98      	it	ls
 801e8aa:	2001      	movls	r0, #1
 801e8ac:	4770      	bx	lr
 801e8ae:	4608      	mov	r0, r1
 801e8b0:	4770      	bx	lr
	...

0801e8b4 <__swsetup_r>:
 801e8b4:	4b32      	ldr	r3, [pc, #200]	; (801e980 <__swsetup_r+0xcc>)
 801e8b6:	b570      	push	{r4, r5, r6, lr}
 801e8b8:	681d      	ldr	r5, [r3, #0]
 801e8ba:	4606      	mov	r6, r0
 801e8bc:	460c      	mov	r4, r1
 801e8be:	b125      	cbz	r5, 801e8ca <__swsetup_r+0x16>
 801e8c0:	69ab      	ldr	r3, [r5, #24]
 801e8c2:	b913      	cbnz	r3, 801e8ca <__swsetup_r+0x16>
 801e8c4:	4628      	mov	r0, r5
 801e8c6:	f7fd fb31 	bl	801bf2c <__sinit>
 801e8ca:	4b2e      	ldr	r3, [pc, #184]	; (801e984 <__swsetup_r+0xd0>)
 801e8cc:	429c      	cmp	r4, r3
 801e8ce:	d10f      	bne.n	801e8f0 <__swsetup_r+0x3c>
 801e8d0:	686c      	ldr	r4, [r5, #4]
 801e8d2:	89a3      	ldrh	r3, [r4, #12]
 801e8d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e8d8:	0719      	lsls	r1, r3, #28
 801e8da:	d42c      	bmi.n	801e936 <__swsetup_r+0x82>
 801e8dc:	06dd      	lsls	r5, r3, #27
 801e8de:	d411      	bmi.n	801e904 <__swsetup_r+0x50>
 801e8e0:	2309      	movs	r3, #9
 801e8e2:	6033      	str	r3, [r6, #0]
 801e8e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e8e8:	81a3      	strh	r3, [r4, #12]
 801e8ea:	f04f 30ff 	mov.w	r0, #4294967295
 801e8ee:	e03e      	b.n	801e96e <__swsetup_r+0xba>
 801e8f0:	4b25      	ldr	r3, [pc, #148]	; (801e988 <__swsetup_r+0xd4>)
 801e8f2:	429c      	cmp	r4, r3
 801e8f4:	d101      	bne.n	801e8fa <__swsetup_r+0x46>
 801e8f6:	68ac      	ldr	r4, [r5, #8]
 801e8f8:	e7eb      	b.n	801e8d2 <__swsetup_r+0x1e>
 801e8fa:	4b24      	ldr	r3, [pc, #144]	; (801e98c <__swsetup_r+0xd8>)
 801e8fc:	429c      	cmp	r4, r3
 801e8fe:	bf08      	it	eq
 801e900:	68ec      	ldreq	r4, [r5, #12]
 801e902:	e7e6      	b.n	801e8d2 <__swsetup_r+0x1e>
 801e904:	0758      	lsls	r0, r3, #29
 801e906:	d512      	bpl.n	801e92e <__swsetup_r+0x7a>
 801e908:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e90a:	b141      	cbz	r1, 801e91e <__swsetup_r+0x6a>
 801e90c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e910:	4299      	cmp	r1, r3
 801e912:	d002      	beq.n	801e91a <__swsetup_r+0x66>
 801e914:	4630      	mov	r0, r6
 801e916:	f7fd fbf5 	bl	801c104 <_free_r>
 801e91a:	2300      	movs	r3, #0
 801e91c:	6363      	str	r3, [r4, #52]	; 0x34
 801e91e:	89a3      	ldrh	r3, [r4, #12]
 801e920:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e924:	81a3      	strh	r3, [r4, #12]
 801e926:	2300      	movs	r3, #0
 801e928:	6063      	str	r3, [r4, #4]
 801e92a:	6923      	ldr	r3, [r4, #16]
 801e92c:	6023      	str	r3, [r4, #0]
 801e92e:	89a3      	ldrh	r3, [r4, #12]
 801e930:	f043 0308 	orr.w	r3, r3, #8
 801e934:	81a3      	strh	r3, [r4, #12]
 801e936:	6923      	ldr	r3, [r4, #16]
 801e938:	b94b      	cbnz	r3, 801e94e <__swsetup_r+0x9a>
 801e93a:	89a3      	ldrh	r3, [r4, #12]
 801e93c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e940:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e944:	d003      	beq.n	801e94e <__swsetup_r+0x9a>
 801e946:	4621      	mov	r1, r4
 801e948:	4630      	mov	r0, r6
 801e94a:	f000 f847 	bl	801e9dc <__smakebuf_r>
 801e94e:	89a0      	ldrh	r0, [r4, #12]
 801e950:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e954:	f010 0301 	ands.w	r3, r0, #1
 801e958:	d00a      	beq.n	801e970 <__swsetup_r+0xbc>
 801e95a:	2300      	movs	r3, #0
 801e95c:	60a3      	str	r3, [r4, #8]
 801e95e:	6963      	ldr	r3, [r4, #20]
 801e960:	425b      	negs	r3, r3
 801e962:	61a3      	str	r3, [r4, #24]
 801e964:	6923      	ldr	r3, [r4, #16]
 801e966:	b943      	cbnz	r3, 801e97a <__swsetup_r+0xc6>
 801e968:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e96c:	d1ba      	bne.n	801e8e4 <__swsetup_r+0x30>
 801e96e:	bd70      	pop	{r4, r5, r6, pc}
 801e970:	0781      	lsls	r1, r0, #30
 801e972:	bf58      	it	pl
 801e974:	6963      	ldrpl	r3, [r4, #20]
 801e976:	60a3      	str	r3, [r4, #8]
 801e978:	e7f4      	b.n	801e964 <__swsetup_r+0xb0>
 801e97a:	2000      	movs	r0, #0
 801e97c:	e7f7      	b.n	801e96e <__swsetup_r+0xba>
 801e97e:	bf00      	nop
 801e980:	20000030 	.word	0x20000030
 801e984:	0801f678 	.word	0x0801f678
 801e988:	0801f698 	.word	0x0801f698
 801e98c:	0801f658 	.word	0x0801f658

0801e990 <__swhatbuf_r>:
 801e990:	b570      	push	{r4, r5, r6, lr}
 801e992:	460e      	mov	r6, r1
 801e994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e998:	2900      	cmp	r1, #0
 801e99a:	b096      	sub	sp, #88	; 0x58
 801e99c:	4614      	mov	r4, r2
 801e99e:	461d      	mov	r5, r3
 801e9a0:	da08      	bge.n	801e9b4 <__swhatbuf_r+0x24>
 801e9a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e9a6:	2200      	movs	r2, #0
 801e9a8:	602a      	str	r2, [r5, #0]
 801e9aa:	061a      	lsls	r2, r3, #24
 801e9ac:	d410      	bmi.n	801e9d0 <__swhatbuf_r+0x40>
 801e9ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e9b2:	e00e      	b.n	801e9d2 <__swhatbuf_r+0x42>
 801e9b4:	466a      	mov	r2, sp
 801e9b6:	f000 f851 	bl	801ea5c <_fstat_r>
 801e9ba:	2800      	cmp	r0, #0
 801e9bc:	dbf1      	blt.n	801e9a2 <__swhatbuf_r+0x12>
 801e9be:	9a01      	ldr	r2, [sp, #4]
 801e9c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e9c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e9c8:	425a      	negs	r2, r3
 801e9ca:	415a      	adcs	r2, r3
 801e9cc:	602a      	str	r2, [r5, #0]
 801e9ce:	e7ee      	b.n	801e9ae <__swhatbuf_r+0x1e>
 801e9d0:	2340      	movs	r3, #64	; 0x40
 801e9d2:	2000      	movs	r0, #0
 801e9d4:	6023      	str	r3, [r4, #0]
 801e9d6:	b016      	add	sp, #88	; 0x58
 801e9d8:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e9dc <__smakebuf_r>:
 801e9dc:	898b      	ldrh	r3, [r1, #12]
 801e9de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e9e0:	079d      	lsls	r5, r3, #30
 801e9e2:	4606      	mov	r6, r0
 801e9e4:	460c      	mov	r4, r1
 801e9e6:	d507      	bpl.n	801e9f8 <__smakebuf_r+0x1c>
 801e9e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e9ec:	6023      	str	r3, [r4, #0]
 801e9ee:	6123      	str	r3, [r4, #16]
 801e9f0:	2301      	movs	r3, #1
 801e9f2:	6163      	str	r3, [r4, #20]
 801e9f4:	b002      	add	sp, #8
 801e9f6:	bd70      	pop	{r4, r5, r6, pc}
 801e9f8:	ab01      	add	r3, sp, #4
 801e9fa:	466a      	mov	r2, sp
 801e9fc:	f7ff ffc8 	bl	801e990 <__swhatbuf_r>
 801ea00:	9900      	ldr	r1, [sp, #0]
 801ea02:	4605      	mov	r5, r0
 801ea04:	4630      	mov	r0, r6
 801ea06:	f7fd fbe9 	bl	801c1dc <_malloc_r>
 801ea0a:	b948      	cbnz	r0, 801ea20 <__smakebuf_r+0x44>
 801ea0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ea10:	059a      	lsls	r2, r3, #22
 801ea12:	d4ef      	bmi.n	801e9f4 <__smakebuf_r+0x18>
 801ea14:	f023 0303 	bic.w	r3, r3, #3
 801ea18:	f043 0302 	orr.w	r3, r3, #2
 801ea1c:	81a3      	strh	r3, [r4, #12]
 801ea1e:	e7e3      	b.n	801e9e8 <__smakebuf_r+0xc>
 801ea20:	4b0d      	ldr	r3, [pc, #52]	; (801ea58 <__smakebuf_r+0x7c>)
 801ea22:	62b3      	str	r3, [r6, #40]	; 0x28
 801ea24:	89a3      	ldrh	r3, [r4, #12]
 801ea26:	6020      	str	r0, [r4, #0]
 801ea28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ea2c:	81a3      	strh	r3, [r4, #12]
 801ea2e:	9b00      	ldr	r3, [sp, #0]
 801ea30:	6163      	str	r3, [r4, #20]
 801ea32:	9b01      	ldr	r3, [sp, #4]
 801ea34:	6120      	str	r0, [r4, #16]
 801ea36:	b15b      	cbz	r3, 801ea50 <__smakebuf_r+0x74>
 801ea38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ea3c:	4630      	mov	r0, r6
 801ea3e:	f000 f81f 	bl	801ea80 <_isatty_r>
 801ea42:	b128      	cbz	r0, 801ea50 <__smakebuf_r+0x74>
 801ea44:	89a3      	ldrh	r3, [r4, #12]
 801ea46:	f023 0303 	bic.w	r3, r3, #3
 801ea4a:	f043 0301 	orr.w	r3, r3, #1
 801ea4e:	81a3      	strh	r3, [r4, #12]
 801ea50:	89a0      	ldrh	r0, [r4, #12]
 801ea52:	4305      	orrs	r5, r0
 801ea54:	81a5      	strh	r5, [r4, #12]
 801ea56:	e7cd      	b.n	801e9f4 <__smakebuf_r+0x18>
 801ea58:	0801bec5 	.word	0x0801bec5

0801ea5c <_fstat_r>:
 801ea5c:	b538      	push	{r3, r4, r5, lr}
 801ea5e:	4d07      	ldr	r5, [pc, #28]	; (801ea7c <_fstat_r+0x20>)
 801ea60:	2300      	movs	r3, #0
 801ea62:	4604      	mov	r4, r0
 801ea64:	4608      	mov	r0, r1
 801ea66:	4611      	mov	r1, r2
 801ea68:	602b      	str	r3, [r5, #0]
 801ea6a:	f7f1 f848 	bl	800fafe <_fstat>
 801ea6e:	1c43      	adds	r3, r0, #1
 801ea70:	d102      	bne.n	801ea78 <_fstat_r+0x1c>
 801ea72:	682b      	ldr	r3, [r5, #0]
 801ea74:	b103      	cbz	r3, 801ea78 <_fstat_r+0x1c>
 801ea76:	6023      	str	r3, [r4, #0]
 801ea78:	bd38      	pop	{r3, r4, r5, pc}
 801ea7a:	bf00      	nop
 801ea7c:	2000a5f8 	.word	0x2000a5f8

0801ea80 <_isatty_r>:
 801ea80:	b538      	push	{r3, r4, r5, lr}
 801ea82:	4d06      	ldr	r5, [pc, #24]	; (801ea9c <_isatty_r+0x1c>)
 801ea84:	2300      	movs	r3, #0
 801ea86:	4604      	mov	r4, r0
 801ea88:	4608      	mov	r0, r1
 801ea8a:	602b      	str	r3, [r5, #0]
 801ea8c:	f7f1 f847 	bl	800fb1e <_isatty>
 801ea90:	1c43      	adds	r3, r0, #1
 801ea92:	d102      	bne.n	801ea9a <_isatty_r+0x1a>
 801ea94:	682b      	ldr	r3, [r5, #0]
 801ea96:	b103      	cbz	r3, 801ea9a <_isatty_r+0x1a>
 801ea98:	6023      	str	r3, [r4, #0]
 801ea9a:	bd38      	pop	{r3, r4, r5, pc}
 801ea9c:	2000a5f8 	.word	0x2000a5f8

0801eaa0 <_init>:
 801eaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eaa2:	bf00      	nop
 801eaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eaa6:	bc08      	pop	{r3}
 801eaa8:	469e      	mov	lr, r3
 801eaaa:	4770      	bx	lr

0801eaac <_fini>:
 801eaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801eaae:	bf00      	nop
 801eab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801eab2:	bc08      	pop	{r3}
 801eab4:	469e      	mov	lr, r3
 801eab6:	4770      	bx	lr
