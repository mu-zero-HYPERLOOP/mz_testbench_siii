
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001d4d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a84  0801d668  0801d668  0002d668  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e0ec  0801e0ec  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  0801e0ec  0801e0ec  0002e0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e0f4  0801e0f4  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000028  0801e0f4  0801e0f4  0002e0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801e11c  0801e11c  0002e11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0801e124  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030210  2**0
                  CONTENTS
 10 .bss          0000a32c  20000210  20000210  00030210  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  2000a53c  2000a53c  00030210  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0006568f  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000f3d1  00000000  00000000  000958cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000040c0  00000000  00000000  000a4ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003cc0  00000000  00000000  000a8d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034f71  00000000  00000000  000aca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005046e  00000000  00000000  000e1991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010a843  00000000  00000000  00131dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0023c642  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000129dc  00000000  00000000  0023c694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801d650 	.word	0x0801d650

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0801d650 	.word	0x0801d650

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	711a      	strb	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	715a      	strb	r2, [r3, #5]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000fde:	b490      	push	{r4, r7}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e009      	b.n	800101e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	0e0a      	lsrs	r2, r1, #24
 800104c:	2300      	movs	r3, #0
 800104e:	b2d3      	uxtb	r3, r2
 8001050:	4323      	orrs	r3, r4
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0a02      	lsrs	r2, r0, #8
 8001068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800106c:	0a0b      	lsrs	r3, r1, #8
 800106e:	b2d4      	uxtb	r4, r2
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c0a      	lsrs	r2, r1, #16
 8001080:	2300      	movs	r3, #0
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	4322      	orrs	r2, r4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0c02      	lsrs	r2, r0, #16
 800109e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a2:	0c0b      	lsrs	r3, r1, #16
 80010a4:	b2d4      	uxtb	r4, r2
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0a0a      	lsrs	r2, r1, #8
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	4322      	orrs	r2, r4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	0e02      	lsrs	r2, r0, #24
 80010d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d8:	0e0b      	lsrs	r3, r1, #24
 80010da:	b2d4      	uxtb	r4, r2
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	000a      	movs	r2, r1
 80010ec:	2300      	movs	r3, #0
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3303      	adds	r3, #3
 80010f4:	4322      	orrs	r2, r4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	000a      	movs	r2, r1
 800110a:	2300      	movs	r3, #0
 800110c:	b2d4      	uxtb	r4, r2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	0e02      	lsrs	r2, r0, #24
 800111e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001122:	0e0b      	lsrs	r3, r1, #24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	4322      	orrs	r2, r4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0a0a      	lsrs	r2, r1, #8
 8001140:	2300      	movs	r3, #0
 8001142:	b2d4      	uxtb	r4, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	0c02      	lsrs	r2, r0, #16
 8001154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001158:	0c0b      	lsrs	r3, r1, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3305      	adds	r3, #5
 8001160:	4322      	orrs	r2, r4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	0c0a      	lsrs	r2, r1, #16
 8001176:	2300      	movs	r3, #0
 8001178:	b2d4      	uxtb	r4, r2
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	0a02      	lsrs	r2, r0, #8
 800118a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800118e:	0a0b      	lsrs	r3, r1, #8
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4322      	orrs	r2, r4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0e0a      	lsrs	r2, r1, #24
 80011ac:	2300      	movs	r3, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3307      	adds	r3, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        }
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr

080011cc <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	6093      	str	r3, [r2, #8]
 80011e0:	60d3      	str	r3, [r2, #12]
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffe3 	bl	80011cc <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f103 0218 	add.w	r2, r3, #24
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fee4 	bl	8000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001216:	bf00      	nop
        }
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffde 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZNK3can11MessageBase4sendEm+0x54>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	f015 f9f0 	bl	8016628 <osMessageQueuePut>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8001258:	f018 fe5c 	bl	8019f14 <vPortEnterCritical>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZNK3can11MessageBase4sendEm+0x58>)
 8001262:	f014 fd8b 	bl	8015d7c <printf_>
 8001266:	f018 fe85 	bl	8019f74 <vPortExitCritical>
            }
        }
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200007bc 	.word	0x200007bc
 8001278:	0801d668 	.word	0x0801d668

0800127c <_ZN3can7MessageINS_8messages12SensorF_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	2204      	movs	r2, #4
 800128a:	2181      	movs	r1, #129	; 0x81
 800128c:	f7ff fe7e 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_ZN7canzero9emergency14consumer_entryEPv>:
#include "task.h"

TaskHandle_t emergencyTaskHandle;


void canzero::emergency::consumer_entry(void* argv){
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	emergencyTaskHandle = xTaskGetCurrentTaskHandle();
 80012a4:	f017 fe8c 	bl	8018fc0 <xTaskGetCurrentTaskHandle>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a19      	ldr	r2, [pc, #100]	; (8001310 <_ZN7canzero9emergency14consumer_entryEPv+0x74>)
 80012ac:	6013      	str	r3, [r2, #0]

	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80012ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ffdf 	bl	800127c <_ZN3can7MessageINS_8messages12SensorF_EMCYEEC1Ev>


	uint32_t emergencyBuffer = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f018 f80f 	bl	80192f4 <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <_ZN7canzero9emergency14consumer_entryEPv+0x46>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80012de:	f001 f857 	bl	8002390 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <_ZN7canzero9emergency14consumer_entryEPv+0x54>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d00b      	beq.n	8001308 <_ZN7canzero9emergency14consumer_entryEPv+0x6c>
			emcyMessage.intel = emergencyBuffer;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	461c      	mov	r4, r3
 80012f6:	4615      	mov	r5, r2
 80012f8:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff8c 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800130c:	e7db      	b.n	80012c6 <_ZN7canzero9emergency14consumer_entryEPv+0x2a>
 800130e:	bf00      	nop
 8001310:	2000022c 	.word	0x2000022c

08001314 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff53 	bl	80011cc <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001326:	f240 7301 	movw	r3, #1793	; 0x701
 800132a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001334:	f000 ff36 	bl	80021a4 <_ZN7canzero9getStatusEv>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f107 010c 	add.w	r1, r7, #12
 8001346:	2300      	movs	r3, #0
 8001348:	2200      	movs	r2, #0
 800134a:	f015 f96d 	bl	8016628 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 800134e:	f000 f843 	bl	80013d8 <_ZN7canzero9heartbeat11getIntervalEv>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	4618      	mov	r0, r3
 8001368:	f014 fe82 	bl	8016070 <osDelay>
		frame ++;
 800136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136e:	3301      	adds	r3, #1
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001372:	e7df      	b.n	8001334 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 8001374:	200007bc 	.word	0x200007bc
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	f000 f826 	bl	80013d8 <_ZN7canzero9heartbeat11getIntervalEv>
 800138c:	4603      	mov	r3, r0
 800138e:	3305      	adds	r3, #5
 8001390:	461a      	mov	r2, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <_ZN7canzero9heartbeat14consumer_entryEPv+0x58>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	f107 010c 	add.w	r1, r7, #12
 80013a6:	2224      	movs	r2, #36	; 0x24
 80013a8:	4620      	mov	r0, r4
 80013aa:	f016 fd63 	bl	8017e74 <xStreamBufferReceive>
 80013ae:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <_ZN7canzero9heartbeat14consumer_entryEPv+0x4e>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 80013be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 fed2 	bl	800216c <_ZN7canzero9setStatusE9cz_status>
 80013c8:	e7dc      	b.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
		}
		else{
			canzero::handle_heartbeat_miss();
 80013ca:	f000 ffe8 	bl	800239e <_ZN7canzero21handle_heartbeat_missEv>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013ce:	e7d9      	b.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80013d0:	20000230 	.word	0x20000230
 80013d4:	10624dd3 	.word	0x10624dd3

080013d8 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80013dc:	f004 ffaa 	bl	8006334 <_Z24OD_HeartbeatInterval_getv>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <_Z41__static_initialization_and_destruction_0ii>:
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10c      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	4293      	cmp	r3, r2
 8001400:	d107      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8001402:	2201      	movs	r2, #1
 8001404:	2100      	movs	r1, #0
 8001406:	20c8      	movs	r0, #200	; 0xc8
 8001408:	f016 fbb4 	bl	8017b74 <xStreamBufferGenericCreate>
 800140c:	4603      	mov	r3, r0
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000230 	.word	0x20000230

08001420 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
 8001424:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ffdd 	bl	80013e8 <_Z41__static_initialization_and_destruction_0ii>
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	4798      	blx	r3
    }
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffd4 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f8e9 	bl	8001690 <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_ZN7canzero10receiver_tD1Ev>:
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ffde 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_ZN7canzero10receiver_taSERKS0_>:
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f8fb 	bl	80016ee <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	7d1a      	ldrb	r2, [r3, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	751a      	strb	r2, [r3, #20]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>:
};

static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
uint32_t g_size = 0;

unsigned int registerMessageReceiverInternal(std::function<void(RxMessage&)> receiver, uint32_t msgId, bool extendedId){
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b08d      	sub	sp, #52	; 0x34
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	4613      	mov	r3, r2
 8001528:	71fb      	strb	r3, [r7, #7]
	printf("registered Message receiver for id = %u\n", msgId);
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x7c>)
 800152e:	f014 fc25 	bl	8015d7c <printf_>
	taskENTER_CRITICAL();
 8001532:	f018 fcef 	bl	8019f14 <vPortEnterCritical>
	const unsigned int id = receiverIdAcc++;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	4917      	ldr	r1, [pc, #92]	; (800159c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 800153e:	600a      	str	r2, [r1, #0]
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
	const receiver_t recv = {
		.m_callback = receiver,
		.m_id = msgId,
		.m_extendedId = extendedId,
		.m_receiverId = id
	};
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	68f9      	ldr	r1, [r7, #12]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f8ae 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	623b      	str	r3, [r7, #32]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
	g_receivers[g_size++] = recv;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	1c53      	adds	r3, r2, #1
 8001562:	490f      	ldr	r1, [pc, #60]	; (80015a0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 8001564:	600b      	str	r3, [r1, #0]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x88>)
 8001570:	4413      	add	r3, r2
 8001572:	f107 0210 	add.w	r2, r7, #16
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ffb2 	bl	80014e2 <_ZN7canzero10receiver_taSERKS0_>
	taskEXIT_CRITICAL();
 800157e:	f018 fcf9 	bl	8019f74 <vPortExitCritical>
	return id;
 8001582:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff9d 	bl	80014c8 <_ZN7canzero10receiver_tD1Ev>
	return id;
 800158e:	4623      	mov	r3, r4
}
 8001590:	4618      	mov	r0, r3
 8001592:	3734      	adds	r7, #52	; 0x34
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	0801d69c 	.word	0x0801d69c
 800159c:	20000234 	.word	0x20000234
 80015a0:	200007b0 	.word	0x200007b0
 80015a4:	20000238 	.word	0x20000238

080015a8 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:

bool processRxMessageReceiver(RxMessage& message){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d12f      	bne.n	800161c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d258      	bcs.n	800167c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 80015ca:	4930      	ldr	r1, [pc, #192]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	3314      	adds	r3, #20
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d119      	bne.n	8001614 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	4829      	ldr	r0, [pc, #164]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4403      	add	r3, r0
 80015f2:	3310      	adds	r3, #16
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4299      	cmp	r1, r3
 80015f8:	d10c      	bne.n	8001614 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001606:	4413      	add	r3, r2
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f88a 	bl	8001724 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001610:	2301      	movs	r3, #1
 8001612:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	3301      	adds	r3, #1
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	e7d1      	b.n	80015c0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	429a      	cmp	r2, r3
 8001628:	d228      	bcs.n	800167c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 800162a:	4918      	ldr	r1, [pc, #96]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3314      	adds	r3, #20
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d119      	bne.n	8001674 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4403      	add	r3, r0
 8001652:	3310      	adds	r3, #16
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4299      	cmp	r1, r3
 8001658:	d10c      	bne.n	8001674 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4a09      	ldr	r2, [pc, #36]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001666:	4413      	add	r3, r2
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f85a 	bl	8001724 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001670:	2301      	movs	r3, #1
 8001672:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3301      	adds	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e7d1      	b.n	8001620 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 800167c:	7dfb      	ldrb	r3, [r7, #23]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200007b0 	.word	0x200007b0
 800168c:	20000238 	.word	0x20000238

08001690 <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fec8 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff feba 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 80016bc:	6838      	ldr	r0, [r7, #0]
 80016be:	f000 f84d 	bl	800175c <_ZNKSt8functionIFvR9RxMessageEEcvbEv>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00d      	beq.n	80016e4 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	2202      	movs	r2, #2
 80016d2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	609a      	str	r2, [r3, #8]
	}
    }
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>:
      operator=(const function& __x)
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffd3 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f836 	bl	800177c <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff febd 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	return *this;
 800171a:	687b      	ldr	r3, [r7, #4]
      }
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001724:	b5b0      	push	{r4, r5, r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe9e 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 800173c:	f018 ff1b 	bl	801a576 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68dc      	ldr	r4, [r3, #12]
 8001744:	687d      	ldr	r5, [r7, #4]
 8001746:	6838      	ldr	r0, [r7, #0]
 8001748:	f000 f839 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800174c:	4603      	mov	r3, r0
 800174e:	4619      	mov	r1, r3
 8001750:	4628      	mov	r0, r5
 8001752:	47a0      	blx	r4
 8001754:	bf00      	nop
    }
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bdb0      	pop	{r4, r5, r7, pc}

0800175c <_ZNKSt8functionIFvR9RxMessageEEcvbEv>:
      explicit operator bool() const noexcept
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fe83 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 800176c:	4603      	mov	r3, r0
 800176e:	f083 0301 	eor.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>:
      void swap(function& __x) noexcept
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f82c 	bl	80017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f103 0208 	add.w	r2, r3, #8
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3308      	adds	r3, #8
 800179c:	4619      	mov	r1, r3
 800179e:	4610      	mov	r0, r2
 80017a0:	f000 f855 	bl	800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f103 020c 	add.w	r2, r3, #12
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	330c      	adds	r3, #12
 80017ae:	4619      	mov	r1, r3
 80017b0:	4610      	mov	r0, r2
 80017b2:	f000 f876 	bl	80018a2 <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffed 	bl	80017d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80017fa:	4602      	mov	r2, r0
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001804:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f7ff ffe3 	bl	80017d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800180e:	4602      	mov	r2, r0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001816:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffd8 	bl	80017d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001824:	4602      	mov	r2, r0
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800182c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ffed 	bl	8001838 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800185e:	4603      	mov	r3, r0
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f7ff ffe7 	bl	8001838 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800186a:	4603      	mov	r3, r0
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ffde 	bl	8001838 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800187c:	4603      	mov	r3, r0
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	601a      	str	r2, [r3, #0]
    }
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffed 	bl	800188c <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 80018b2:	4603      	mov	r3, r0
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80018b8:	6838      	ldr	r0, [r7, #0]
 80018ba:	f7ff ffe7 	bl	800188c <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 80018be:	4603      	mov	r3, r0
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ffde 	bl	800188c <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 80018d0:	4603      	mov	r3, r0
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	601a      	str	r2, [r3, #0]
    }
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	taskEXIT_CRITICAL();
}

}
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10f      	bne.n	8001910 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10a      	bne.n	8001910 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80018fc:	2431      	movs	r4, #49	; 0x31
 80018fe:	461d      	mov	r5, r3
 8001900:	2c00      	cmp	r4, #0
 8001902:	db05      	blt.n	8001910 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001904:	4628      	mov	r0, r5
 8001906:	f7ff fdd2 	bl	80014ae <_ZN7canzero10receiver_tC1Ev>
 800190a:	351c      	adds	r5, #28
 800190c:	3c01      	subs	r4, #1
 800190e:	e7f7      	b.n	8001900 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10d      	bne.n	8001932 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191c:	4293      	cmp	r3, r2
 800191e:	d108      	bne.n	8001932 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001920:	4c07      	ldr	r4, [pc, #28]	; (8001940 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001924:	429c      	cmp	r4, r3
 8001926:	d004      	beq.n	8001932 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001928:	3c1c      	subs	r4, #28
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff fdcc 	bl	80014c8 <_ZN7canzero10receiver_tD1Ev>
 8001930:	e7f7      	b.n	8001922 <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bdb0      	pop	{r4, r5, r7, pc}
 800193a:	bf00      	nop
 800193c:	20000238 	.word	0x20000238
 8001940:	200007b0 	.word	0x200007b0

08001944 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
 8001948:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff ffc7 	bl	80018e0 <_Z41__static_initialization_and_destruction_0ii>
 8001952:	bd80      	pop	{r7, pc}

08001954 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
 8001958:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff ffbf 	bl	80018e0 <_Z41__static_initialization_and_destruction_0ii>
 8001962:	bd80      	pop	{r7, pc}

08001964 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 8001964:	b084      	sub	sp, #16
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
 800196a:	f107 0c08 	add.w	ip, r7, #8
 800196e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 8001972:	f107 0008 	add.w	r0, r7, #8
 8001976:	f000 f81b 	bl	80019b0 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <_Z9processRX9RxMessage+0x48>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	230a      	movs	r3, #10
 8001986:	2224      	movs	r2, #36	; 0x24
 8001988:	f107 0108 	add.w	r1, r7, #8
 800198c:	f016 f980 	bl	8017c90 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 8001990:	e005      	b.n	800199e <_Z9processRX9RxMessage+0x3a>
	} else if (canzero::processRxMessageReceiver(message)) {
 8001992:	f107 0008 	add.w	r0, r7, #8
 8001996:	f7ff fe07 	bl	80015a8 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
}
 800199e:	bf00      	nop
 80019a0:	46bd      	mov	sp, r7
 80019a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019a6:	b004      	add	sp, #16
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200007b4 	.word	0x200007b4

080019b0 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d109      	bne.n	80019d4 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f240 12c1 	movw	r2, #449	; 0x1c1
 80019c8:	4293      	cmp	r3, r2
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	e000      	b.n	80019d6 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 80019d4:	2300      	movs	r3, #0
    }
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
	...

080019e4 <_Z41__static_initialization_and_destruction_0ii>:
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d10c      	bne.n	8001a0e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d107      	bne.n	8001a0e <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 80019fe:	2201      	movs	r2, #1
 8001a00:	2100      	movs	r1, #0
 8001a02:	20c8      	movs	r0, #200	; 0xc8
 8001a04:	f016 f8b6 	bl	8017b74 <xStreamBufferGenericCreate>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a03      	ldr	r2, [pc, #12]	; (8001a18 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001a0c:	6013      	str	r3, [r2, #0]
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	200007b4 	.word	0x200007b4

08001a1c <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7ff ffdd 	bl	80019e4 <_Z41__static_initialization_and_destruction_0ii>
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d10c      	bne.n	8001a56 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d107      	bne.n	8001a56 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a46:	4a06      	ldr	r2, [pc, #24]	; (8001a60 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001a48:	2124      	movs	r1, #36	; 0x24
 8001a4a:	2010      	movs	r0, #16
 8001a4c:	f014 fd78 	bl	8016540 <osMessageQueueNew>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4a04      	ldr	r2, [pc, #16]	; (8001a64 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	0801d8fc 	.word	0x0801d8fc
 8001a64:	200007b8 	.word	0x200007b8

08001a68 <_GLOBAL__sub_I_czReceiveQueue>:
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff ffdb 	bl	8001a2c <_Z41__static_initialization_and_destruction_0ii>
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001a7c:	f3bf 8f4f 	dsb	sy
}
 8001a80:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <__NVIC_SystemReset+0x24>)
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001a8a:	4904      	ldr	r1, [pc, #16]	; (8001a9c <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001a8c:	4b04      	ldr	r3, [pc, #16]	; (8001aa0 <__NVIC_SystemReset+0x28>)
 8001a8e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001a90:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001a92:	f3bf 8f4f 	dsb	sy
}
 8001a96:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <__NVIC_SystemReset+0x20>
 8001a9c:	e000ed00 	.word	0xe000ed00
 8001aa0:	05fa0004 	.word	0x05fa0004

08001aa4 <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b092      	sub	sp, #72	; 0x48
 8001aa8:	af06      	add	r7, sp, #24
 8001aaa:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <_Z15cz_receive_taskPv+0xa4>)
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	f107 010c 	add.w	r1, r7, #12
 8001ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f014 fe15 	bl	80166e8 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d136      	bne.n	8001b32 <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8001ac4:	f107 030c 	add.w	r3, r7, #12
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 f8e3 	bl	8001c94 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001ad4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ad8:	2bff      	cmp	r3, #255	; 0xff
 8001ada:	d1e7      	bne.n	8001aac <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001adc:	f7ff ffcc 	bl	8001a78 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f8ee 	bl	8001cc6 <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fd33 	bl	8005560 <_Z22handleSDORequestUploadRK9RxMessage>
 8001afa:	e7d7      	b.n	8001aac <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4618      	mov	r0, r3
 8001b02:	f000 f8f9 	bl	8001cf8 <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 ff9e 	bl	8004a52 <_Z24handleSDORequestDownloadRK9RxMessage>
 8001b16:	e7c9      	b.n	8001aac <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001b18:	466d      	mov	r5, sp
 8001b1a:	f107 041c 	add.w	r4, r7, #28
 8001b1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	602b      	str	r3, [r5, #0]
 8001b26:	f107 030c 	add.w	r3, r7, #12
 8001b2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b2c:	f7ff ff1a 	bl	8001964 <_Z9processRX9RxMessage>
 8001b30:	e7bc      	b.n	8001aac <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d1b9      	bne.n	8001aac <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001b38:	f018 f9ec 	bl	8019f14 <vPortEnterCritical>
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <_Z15cz_receive_taskPv+0xa8>)
 8001b3e:	f014 f91d 	bl	8015d7c <printf_>
 8001b42:	f018 fa17 	bl	8019f74 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001b46:	e7b1      	b.n	8001aac <_Z15cz_receive_taskPv+0x8>
 8001b48:	200007b8 	.word	0x200007b8
 8001b4c:	0801d6d8 	.word	0x0801d6d8

08001b50 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001b50:	b5b0      	push	{r4, r5, r7, lr}
 8001b52:	b096      	sub	sp, #88	; 0x58
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001b58:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b5c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b60:	2100      	movs	r1, #0
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f00e faae 	bl	80100c4 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001b68:	f107 040c 	add.w	r4, r7, #12
 8001b6c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001b70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b78:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	657b      	str	r3, [r7, #84]	; 0x54
 8001b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b82:	2b07      	cmp	r3, #7
 8001b84:	dc0e      	bgt.n	8001ba4 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001b86:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b8c:	4413      	add	r3, r2
 8001b8e:	7819      	ldrb	r1, [r3, #0]
 8001b90:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b96:	4413      	add	r3, r2
 8001b98:	460a      	mov	r2, r1
 8001b9a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	657b      	str	r3, [r7, #84]	; 0x54
 8001ba2:	e7ed      	b.n	8001b80 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	f107 010c 	add.w	r1, r7, #12
 8001bac:	2300      	movs	r3, #0
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f014 fd3a 	bl	8016628 <osMessageQueuePut>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0

	}
}
 8001bb8:	bf00      	nop
 8001bba:	3758      	adds	r7, #88	; 0x58
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc0:	200007b8 	.word	0x200007b8

08001bc4 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b096      	sub	sp, #88	; 0x58
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001bcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bd0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f00e fa74 	bl	80100c4 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001bdc:	f107 040c 	add.w	r4, r7, #12
 8001be0:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	657b      	str	r3, [r7, #84]	; 0x54
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bf6:	2b07      	cmp	r3, #7
 8001bf8:	dc0e      	bgt.n	8001c18 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001bfa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c00:	4413      	add	r3, r2
 8001c02:	7819      	ldrb	r1, [r3, #0]
 8001c04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c0a:	4413      	add	r3, r2
 8001c0c:	460a      	mov	r2, r1
 8001c0e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c12:	3301      	adds	r3, #1
 8001c14:	657b      	str	r3, [r7, #84]	; 0x54
 8001c16:	e7ed      	b.n	8001bf4 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	f107 010c 	add.w	r1, r7, #12
 8001c20:	2300      	movs	r3, #0
 8001c22:	2200      	movs	r2, #0
 8001c24:	f014 fd00 	bl	8016628 <osMessageQueuePut>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0

	}
}
 8001c2c:	bf00      	nop
 8001c2e:	3758      	adds	r7, #88	; 0x58
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bdb0      	pop	{r4, r5, r7, pc}
 8001c34:	200007b8 	.word	0x200007b8

08001c38 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f00e fd88 	bl	8010756 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001c46:	f3ef 8211 	mrs	r2, BASEPRI
 8001c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c4e:	f383 8811 	msr	BASEPRI, r3
 8001c52:	f3bf 8f6f 	isb	sy
 8001c56:	f3bf 8f4f 	dsb	sy
 8001c5a:	60fa      	str	r2, [r7, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <HAL_CAN_ErrorCallback+0x44>)
 8001c64:	f014 f88a 	bl	8015d7c <printf_>
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001c72:	bf00      	nop
}
 8001c74:	bf00      	nop
 8001c76:	3718      	adds	r7, #24
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0801d6f0 	.word	0x0801d6f0

08001c80 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d109      	bne.n	8001cb8 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f240 7281 	movw	r2, #1921	; 0x781
 8001cac:	4293      	cmp	r3, r2
 8001cae:	bf0c      	ite	eq
 8001cb0:	2301      	moveq	r3, #1
 8001cb2:	2300      	movne	r3, #0
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	e000      	b.n	8001cba <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001cb8:	2300      	movs	r3, #0
    }
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d109      	bne.n	8001cea <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	bf0c      	ite	eq
 8001ce2:	2301      	moveq	r3, #1
 8001ce4:	2300      	movne	r3, #0
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	e000      	b.n	8001cec <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001cea:	2300      	movs	r3, #0
    }
 8001cec:	4618      	mov	r0, r3
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f240 6201 	movw	r2, #1537	; 0x601
 8001d10:	4293      	cmp	r3, r2
 8001d12:	bf0c      	ite	eq
 8001d14:	2301      	moveq	r3, #1
 8001d16:	2300      	movne	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	e000      	b.n	8001d1e <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d1c:	2300      	movs	r3, #0
    }
 8001d1e:	4618      	mov	r0, r3
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d10c      	bne.n	8001d56 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d107      	bne.n	8001d56 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001d46:	4a06      	ldr	r2, [pc, #24]	; (8001d60 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001d48:	2120      	movs	r1, #32
 8001d4a:	2010      	movs	r0, #16
 8001d4c:	f014 fbf8 	bl	8016540 <osMessageQueueNew>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0801d914 	.word	0x0801d914
 8001d64:	200007bc 	.word	0x200007bc

08001d68 <_GLOBAL__sub_I_czSendQueue>:
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d70:	2001      	movs	r0, #1
 8001d72:	f7ff ffdb 	bl	8001d2c <_Z41__static_initialization_and_destruction_0ii>
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08e      	sub	sp, #56	; 0x38
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001d80:	f107 030c 	add.w	r3, r7, #12
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fa21 	bl	80011cc <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	; (8001ef8 <_Z13cz_send_entryPv+0x180>)
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	f107 010c 	add.w	r1, r7, #12
 8001d96:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f014 fca4 	bl	80166e8 <osMessageQueueGet>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf14      	ite	ne
 8001da6:	2301      	movne	r3, #1
 8001da8:	2300      	moveq	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001db0:	f00c fafc 	bl	800e3ac <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d901      	bls.n	8001dbe <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001dba:	f00c faf7 	bl	800e3ac <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	041b      	lsls	r3, r3, #16
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd2:	d102      	bne.n	8001dda <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001dd4:	4b49      	ldr	r3, [pc, #292]	; (8001efc <_Z13cz_send_entryPv+0x184>)
 8001dd6:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd8:	e010      	b.n	8001dfc <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ddc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001de0:	d102      	bne.n	8001de8 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001de2:	4b47      	ldr	r3, [pc, #284]	; (8001f00 <_Z13cz_send_entryPv+0x188>)
 8001de4:	637b      	str	r3, [r7, #52]	; 0x34
 8001de6:	e009      	b.n	8001dfc <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d102      	bne.n	8001df8 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001df2:	4b42      	ldr	r3, [pc, #264]	; (8001efc <_Z13cz_send_entryPv+0x184>)
 8001df4:	637b      	str	r3, [r7, #52]	; 0x34
 8001df6:	e001      	b.n	8001dfc <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001df8:	4b41      	ldr	r3, [pc, #260]	; (8001f00 <_Z13cz_send_entryPv+0x188>)
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001dfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dfe:	f00e f92c 	bl	801005a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	bf14      	ite	ne
 8001e08:	2301      	movne	r3, #1
 8001e0a:	2300      	moveq	r3, #0
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d016      	beq.n	8001e40 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001e12:	f107 0008 	add.w	r0, r7, #8
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	f103 0218 	add.w	r2, r3, #24
 8001e1e:	f107 010c 	add.w	r1, r7, #12
 8001e22:	4603      	mov	r3, r0
 8001e24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e26:	f00e f83d 	bl	800fea4 <HAL_CAN_AddTxMessage>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bf14      	ite	ne
 8001e30:	2301      	movne	r3, #1
 8001e32:	2300      	moveq	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d059      	beq.n	8001eee <_Z13cz_send_entryPv+0x176>
				/* Transmission request Error */
				Error_Handler();
 8001e3a:	f00c fab7 	bl	800e3ac <Error_Handler>
 8001e3e:	e056      	b.n	8001eee <_Z13cz_send_entryPv+0x176>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e42:	4a2e      	ldr	r2, [pc, #184]	; (8001efc <_Z13cz_send_entryPv+0x184>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d10c      	bne.n	8001e62 <_Z13cz_send_entryPv+0xea>
				OD_CAN1_DelayedTxMessages++;
 8001e48:	4b2e      	ldr	r3, [pc, #184]	; (8001f04 <_Z13cz_send_entryPv+0x18c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a2d      	ldr	r2, [pc, #180]	; (8001f04 <_Z13cz_send_entryPv+0x18c>)
 8001e50:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can1 tx mailbox overflow.\n")
 8001e52:	f018 f85f 	bl	8019f14 <vPortEnterCritical>
 8001e56:	482c      	ldr	r0, [pc, #176]	; (8001f08 <_Z13cz_send_entryPv+0x190>)
 8001e58:	f013 ff90 	bl	8015d7c <printf_>
 8001e5c:	f018 f88a 	bl	8019f74 <vPortExitCritical>
 8001e60:	e00b      	b.n	8001e7a <_Z13cz_send_entryPv+0x102>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001e62:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <_Z13cz_send_entryPv+0x194>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	3301      	adds	r3, #1
 8001e68:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <_Z13cz_send_entryPv+0x194>)
 8001e6a:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can2 tx mailbox overflow.\n")
 8001e6c:	f018 f852 	bl	8019f14 <vPortEnterCritical>
 8001e70:	4827      	ldr	r0, [pc, #156]	; (8001f10 <_Z13cz_send_entryPv+0x198>)
 8001e72:	f013 ff83 	bl	8015d7c <printf_>
 8001e76:	f018 f87d 	bl	8019f74 <vPortExitCritical>
			}

			osDelay(1);		// Use smallest delay possible
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f014 f8f8 	bl	8016070 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001e80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e82:	f00e f8ea 	bl	801005a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <_Z13cz_send_entryPv+0x14c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001e96:	f107 0008 	add.w	r0, r7, #8
 8001e9a:	f107 030c 	add.w	r3, r7, #12
 8001e9e:	f103 0218 	add.w	r2, r3, #24
 8001ea2:	f107 010c 	add.w	r1, r7, #12
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001eaa:	f00d fffb 	bl	800fea4 <HAL_CAN_AddTxMessage>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d017      	beq.n	8001eee <_Z13cz_send_entryPv+0x176>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001ebe:	f000 fa7f 	bl	80023c0 <_ZN7canzero32handle_trasmission_request_errorEv>
 8001ec2:	e014      	b.n	8001eee <_Z13cz_send_entryPv+0x176>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ec6:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <_Z13cz_send_entryPv+0x184>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d108      	bne.n	8001ede <_Z13cz_send_entryPv+0x166>
					OD_CAN1_DiscardedTxMessages++;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_Z13cz_send_entryPv+0x19c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4a10      	ldr	r2, [pc, #64]	; (8001f14 <_Z13cz_send_entryPv+0x19c>)
 8001ed4:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001ed6:	4809      	ldr	r0, [pc, #36]	; (8001efc <_Z13cz_send_entryPv+0x184>)
 8001ed8:	f000 fa68 	bl	80023ac <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001edc:	e007      	b.n	8001eee <_Z13cz_send_entryPv+0x176>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <_Z13cz_send_entryPv+0x1a0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4a0c      	ldr	r2, [pc, #48]	; (8001f18 <_Z13cz_send_entryPv+0x1a0>)
 8001ee6:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001ee8:	4805      	ldr	r0, [pc, #20]	; (8001f00 <_Z13cz_send_entryPv+0x188>)
 8001eea:	f000 fa5f 	bl	80023ac <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001ef4:	e74b      	b.n	8001d8e <_Z13cz_send_entryPv+0x16>
 8001ef6:	bf00      	nop
 8001ef8:	200007bc 	.word	0x200007bc
 8001efc:	20000e38 	.word	0x20000e38
 8001f00:	20000e60 	.word	0x20000e60
 8001f04:	20000814 	.word	0x20000814
 8001f08:	0801d718 	.word	0x0801d718
 8001f0c:	2000082c 	.word	0x2000082c
 8001f10:	0801d740 	.word	0x0801d740
 8001f14:	2000080c 	.word	0x2000080c
 8001f18:	20000824 	.word	0x20000824

08001f1c <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001f22:	2080      	movs	r0, #128	; 0x80
 8001f24:	f000 f922 	bl	800216c <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	dc51      	bgt.n	8001fd6 <_ZN7canzero4initEv+0xba>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f36:	2301      	movs	r3, #1
 8001f38:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001f3a:	4b87      	ldr	r3, [pc, #540]	; (8002158 <_ZN7canzero4initEv+0x23c>)
 8001f3c:	0b5b      	lsrs	r3, r3, #13
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001f42:	4b85      	ldr	r3, [pc, #532]	; (8002158 <_ZN7canzero4initEv+0x23c>)
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001f4e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8001f52:	0b5b      	lsrs	r3, r3, #13
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001f58:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f043 0306 	orr.w	r3, r3, #6
 8001f64:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f68:	0fda      	lsrs	r2, r3, #31
 8001f6a:	4413      	add	r3, r2
 8001f6c:	105b      	asrs	r3, r3, #1
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <_ZN7canzero4initEv+0x60>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	e001      	b.n	8001f80 <_ZN7canzero4initEv+0x64>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001f84:	230e      	movs	r3, #14
 8001f86:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8001f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8a:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4872      	ldr	r0, [pc, #456]	; (800215c <_ZN7canzero4initEv+0x240>)
 8001f92:	f00d fe63 	bl	800fc5c <HAL_CAN_ConfigFilter>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	bf14      	ite	ne
 8001f9c:	2301      	movne	r3, #1
 8001f9e:	2300      	moveq	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <_ZN7canzero4initEv+0x8e>
			Error_Handler(); /* Filter configuration Error */
 8001fa6:	f00c fa01 	bl	800e3ac <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8001faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fac:	330e      	adds	r3, #14
 8001fae:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001fb0:	463b      	mov	r3, r7
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	486a      	ldr	r0, [pc, #424]	; (8002160 <_ZN7canzero4initEv+0x244>)
 8001fb6:	f00d fe51 	bl	800fc5c <HAL_CAN_ConfigFilter>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	bf14      	ite	ne
 8001fc0:	2301      	movne	r3, #1
 8001fc2:	2300      	moveq	r3, #0
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <_ZN7canzero4initEv+0xb2>
			Error_Handler(); /* Filter configuration Error */
 8001fca:	f00c f9ef 	bl	800e3ac <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fd4:	e7aa      	b.n	8001f2c <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	2b19      	cmp	r3, #25
 8001fde:	dc6a      	bgt.n	80020b6 <_ZN7canzero4initEv+0x19a>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe2:	0fda      	lsrs	r2, r3, #31
 8001fe4:	4413      	add	r3, r2
 8001fe6:	105b      	asrs	r3, r3, #1
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8001ff0:	4a5c      	ldr	r2, [pc, #368]	; (8002164 <_ZN7canzero4initEv+0x248>)
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	015b      	lsls	r3, r3, #5
 8001ffa:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8001ffc:	4a5a      	ldr	r2, [pc, #360]	; (8002168 <_ZN7canzero4initEv+0x24c>)
 8001ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	015b      	lsls	r3, r3, #5
 8002006:	f043 0318 	orr.w	r3, r3, #24
 800200a:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 800200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800200e:	2b19      	cmp	r3, #25
 8002010:	d106      	bne.n	8002020 <_ZN7canzero4initEv+0x104>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002012:	2301      	movs	r3, #1
 8002014:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 800201a:	2306      	movs	r3, #6
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	e011      	b.n	8002044 <_ZN7canzero4initEv+0x128>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8002024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002026:	3301      	adds	r3, #1
 8002028:	4a4e      	ldr	r2, [pc, #312]	; (8002164 <_ZN7canzero4initEv+0x248>)
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	015b      	lsls	r3, r3, #5
 8002030:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	3301      	adds	r3, #1
 8002036:	4a4c      	ldr	r2, [pc, #304]	; (8002168 <_ZN7canzero4initEv+0x24c>)
 8002038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800203c:	015b      	lsls	r3, r3, #5
 800203e:	f043 0318 	orr.w	r3, r3, #24
 8002042:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8002044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002046:	0fda      	lsrs	r2, r3, #31
 8002048:	4413      	add	r3, r2
 800204a:	105b      	asrs	r3, r3, #1
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d102      	bne.n	800205a <_ZN7canzero4initEv+0x13e>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e001      	b.n	800205e <_ZN7canzero4initEv+0x142>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800205a:	2301      	movs	r3, #1
 800205c:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 800205e:	2301      	movs	r3, #1
 8002060:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8002062:	230e      	movs	r3, #14
 8002064:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8002066:	463b      	mov	r3, r7
 8002068:	4619      	mov	r1, r3
 800206a:	483c      	ldr	r0, [pc, #240]	; (800215c <_ZN7canzero4initEv+0x240>)
 800206c:	f00d fdf6 	bl	800fc5c <HAL_CAN_ConfigFilter>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	bf14      	ite	ne
 8002076:	2301      	movne	r3, #1
 8002078:	2300      	moveq	r3, #0
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b00      	cmp	r3, #0
 800207e:	d001      	beq.n	8002084 <_ZN7canzero4initEv+0x168>
			Error_Handler(); /* Filter configuration Error */
 8002080:	f00c f994 	bl	800e3ac <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	0fda      	lsrs	r2, r3, #31
 8002088:	4413      	add	r3, r2
 800208a:	105b      	asrs	r3, r3, #1
 800208c:	330f      	adds	r3, #15
 800208e:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8002090:	463b      	mov	r3, r7
 8002092:	4619      	mov	r1, r3
 8002094:	4832      	ldr	r0, [pc, #200]	; (8002160 <_ZN7canzero4initEv+0x244>)
 8002096:	f00d fde1 	bl	800fc5c <HAL_CAN_ConfigFilter>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf14      	ite	ne
 80020a0:	2301      	movne	r3, #1
 80020a2:	2300      	moveq	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <_ZN7canzero4initEv+0x192>
			Error_Handler(); /* Filter configuration Error */
 80020aa:	f00c f97f 	bl	800e3ac <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 80020ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b0:	3302      	adds	r3, #2
 80020b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80020b4:	e791      	b.n	8001fda <_ZN7canzero4initEv+0xbe>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 80020b6:	4829      	ldr	r0, [pc, #164]	; (800215c <_ZN7canzero4initEv+0x240>)
 80020b8:	f00d feb0 	bl	800fe1c <HAL_CAN_Start>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d105      	bne.n	80020ce <_ZN7canzero4initEv+0x1b2>
 80020c2:	4827      	ldr	r0, [pc, #156]	; (8002160 <_ZN7canzero4initEv+0x244>)
 80020c4:	f00d feaa 	bl	800fe1c <HAL_CAN_Start>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <_ZN7canzero4initEv+0x1b6>
 80020ce:	2301      	movs	r3, #1
 80020d0:	e000      	b.n	80020d4 <_ZN7canzero4initEv+0x1b8>
 80020d2:	2300      	movs	r3, #0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <_ZN7canzero4initEv+0x1c0>
		Error_Handler(); /* Start Error */
 80020d8:	f00c f968 	bl	800e3ac <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 80020dc:	2102      	movs	r1, #2
 80020de:	481f      	ldr	r0, [pc, #124]	; (800215c <_ZN7canzero4initEv+0x240>)
 80020e0:	f00e f902 	bl	80102e8 <HAL_CAN_ActivateNotification>
 80020e4:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10e      	bne.n	8002108 <_ZN7canzero4initEv+0x1ec>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 80020ea:	2110      	movs	r1, #16
 80020ec:	481b      	ldr	r0, [pc, #108]	; (800215c <_ZN7canzero4initEv+0x240>)
 80020ee:	f00e f8fb 	bl	80102e8 <HAL_CAN_ActivateNotification>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d107      	bne.n	8002108 <_ZN7canzero4initEv+0x1ec>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 80020f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020fc:	4817      	ldr	r0, [pc, #92]	; (800215c <_ZN7canzero4initEv+0x240>)
 80020fe:	f00e f8f3 	bl	80102e8 <HAL_CAN_ActivateNotification>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <_ZN7canzero4initEv+0x1f0>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <_ZN7canzero4initEv+0x1f2>
 800210c:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <_ZN7canzero4initEv+0x1fa>
		Error_Handler();
 8002112:	f00c f94b 	bl	800e3ac <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002116:	2102      	movs	r1, #2
 8002118:	4811      	ldr	r0, [pc, #68]	; (8002160 <_ZN7canzero4initEv+0x244>)
 800211a:	f00e f8e5 	bl	80102e8 <HAL_CAN_ActivateNotification>
 800211e:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10e      	bne.n	8002142 <_ZN7canzero4initEv+0x226>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8002124:	2110      	movs	r1, #16
 8002126:	480e      	ldr	r0, [pc, #56]	; (8002160 <_ZN7canzero4initEv+0x244>)
 8002128:	f00e f8de 	bl	80102e8 <HAL_CAN_ActivateNotification>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <_ZN7canzero4initEv+0x226>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002132:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002136:	480a      	ldr	r0, [pc, #40]	; (8002160 <_ZN7canzero4initEv+0x244>)
 8002138:	f00e f8d6 	bl	80102e8 <HAL_CAN_ActivateNotification>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <_ZN7canzero4initEv+0x22a>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <_ZN7canzero4initEv+0x22c>
 8002146:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <_ZN7canzero4initEv+0x234>
		Error_Handler();
 800214c:	f00c f92e 	bl	800e3ac <Error_Handler>
	}
}
 8002150:	bf00      	nop
 8002152:	3730      	adds	r7, #48	; 0x30
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	1ffffffa 	.word	0x1ffffffa
 800215c:	20000e38 	.word	0x20000e38
 8002160:	20000e60 	.word	0x20000e60
 8002164:	0801d994 	.word	0x0801d994
 8002168:	0801d92c 	.word	0x0801d92c

0800216c <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <_ZN7canzero9setStatusE9cz_status+0x30>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f04f 31ff 	mov.w	r1, #4294967295
 800217e:	4618      	mov	r0, r3
 8002180:	f014 f817 	bl	80161b2 <osMutexAcquire>
	nodeStatus = new_status;
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <_ZN7canzero9setStatusE9cz_status+0x34>)
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <_ZN7canzero9setStatusE9cz_status+0x30>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4618      	mov	r0, r3
 8002190:	f014 f85a 	bl	8016248 <osMutexRelease>
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	200007c0 	.word	0x200007c0
 80021a0:	200007c4 	.word	0x200007c4

080021a4 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <_ZN7canzero9getStatusEv+0x30>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f04f 31ff 	mov.w	r1, #4294967295
 80021b2:	4618      	mov	r0, r3
 80021b4:	f013 fffd 	bl	80161b2 <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <_ZN7canzero9getStatusEv+0x34>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <_ZN7canzero9getStatusEv+0x30>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f014 f840 	bl	8016248 <osMutexRelease>
	return returnValue;
 80021c8:	79fb      	ldrb	r3, [r7, #7]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200007c0 	.word	0x200007c0
 80021d8:	200007c4 	.word	0x200007c4

080021dc <_Z41__static_initialization_and_destruction_0ii>:
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d10a      	bne.n	8002202 <_Z41__static_initialization_and_destruction_0ii+0x26>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d105      	bne.n	8002202 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80021f8:	f013 ff55 	bl	80160a6 <osMutexNew>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4a04      	ldr	r2, [pc, #16]	; (8002210 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002200:	6013      	str	r3, [r2, #0]
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	0801d9fc 	.word	0x0801d9fc
 8002210:	200007c0 	.word	0x200007c0

08002214 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
 8002218:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800221c:	2001      	movs	r0, #1
 800221e:	f7ff ffdd 	bl	80021dc <_Z41__static_initialization_and_destruction_0ii>
 8002222:	bd80      	pop	{r7, pc}

08002224 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b090      	sub	sp, #64	; 0x40
 8002228:	af02      	add	r7, sp, #8
 800222a:	6078      	str	r0, [r7, #4]
	canzero::init();
 800222c:	f7ff fe76 	bl	8001f1c <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8002230:	2300      	movs	r3, #0
 8002232:	61fb      	str	r3, [r7, #28]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	9301      	str	r3, [sp, #4]
 800223a:	2320      	movs	r3, #32
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2300      	movs	r3, #0
 8002240:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002244:	4942      	ldr	r1, [pc, #264]	; (8002350 <canzero_start+0x12c>)
 8002246:	4843      	ldr	r0, [pc, #268]	; (8002354 <canzero_start+0x130>)
 8002248:	f016 f877 	bl	801833a <xTaskCreate>
 800224c:	6378      	str	r0, [r7, #52]	; 0x34
			osPriorityAboveNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 800224e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002250:	2b01      	cmp	r3, #1
 8002252:	d006      	beq.n	8002262 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8002254:	f017 fe5e 	bl	8019f14 <vPortEnterCritical>
 8002258:	483f      	ldr	r0, [pc, #252]	; (8002358 <canzero_start+0x134>)
 800225a:	f013 fd8f 	bl	8015d7c <printf_>
 800225e:	f017 fe89 	bl	8019f74 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8002262:	2300      	movs	r3, #0
 8002264:	61bb      	str	r3, [r7, #24]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 8002266:	f107 0318 	add.w	r3, r7, #24
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2318      	movs	r3, #24
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	2300      	movs	r3, #0
 8002272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002276:	4939      	ldr	r1, [pc, #228]	; (800235c <canzero_start+0x138>)
 8002278:	4839      	ldr	r0, [pc, #228]	; (8002360 <canzero_start+0x13c>)
 800227a:	f016 f85e 	bl	801833a <xTaskCreate>
 800227e:	6338      	str	r0, [r7, #48]	; 0x30
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8002280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002282:	2b01      	cmp	r3, #1
 8002284:	d006      	beq.n	8002294 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 8002286:	f017 fe45 	bl	8019f14 <vPortEnterCritical>
 800228a:	4836      	ldr	r0, [pc, #216]	; (8002364 <canzero_start+0x140>)
 800228c:	f013 fd76 	bl	8015d7c <printf_>
 8002290:	f017 fe70 	bl	8019f74 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	2318      	movs	r3, #24
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a8:	492f      	ldr	r1, [pc, #188]	; (8002368 <canzero_start+0x144>)
 80022aa:	4830      	ldr	r0, [pc, #192]	; (800236c <canzero_start+0x148>)
 80022ac:	f016 f845 	bl	801833a <xTaskCreate>
 80022b0:	62f8      	str	r0, [r7, #44]	; 0x2c
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 80022b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d006      	beq.n	80022c6 <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 80022b8:	f017 fe2c 	bl	8019f14 <vPortEnterCritical>
 80022bc:	482c      	ldr	r0, [pc, #176]	; (8002370 <canzero_start+0x14c>)
 80022be:	f013 fd5d 	bl	8015d7c <printf_>
 80022c2:	f017 fe57 	bl	8019f74 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 80022ca:	f107 0310 	add.w	r3, r7, #16
 80022ce:	9301      	str	r3, [sp, #4]
 80022d0:	2318      	movs	r3, #24
 80022d2:	9300      	str	r3, [sp, #0]
 80022d4:	2300      	movs	r3, #0
 80022d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022da:	4926      	ldr	r1, [pc, #152]	; (8002374 <canzero_start+0x150>)
 80022dc:	4826      	ldr	r0, [pc, #152]	; (8002378 <canzero_start+0x154>)
 80022de:	f016 f82c 	bl	801833a <xTaskCreate>
 80022e2:	62b8      	str	r0, [r7, #40]	; 0x28
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 80022e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d006      	beq.n	80022f8 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 80022ea:	f017 fe13 	bl	8019f14 <vPortEnterCritical>
 80022ee:	4823      	ldr	r0, [pc, #140]	; (800237c <canzero_start+0x158>)
 80022f0:	f013 fd44 	bl	8015d7c <printf_>
 80022f4:	f017 fe3e 	bl	8019f74 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60fb      	str	r3, [r7, #12]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 80022fc:	f107 030c 	add.w	r3, r7, #12
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	2328      	movs	r3, #40	; 0x28
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2300      	movs	r3, #0
 8002308:	f44f 7280 	mov.w	r2, #256	; 0x100
 800230c:	491c      	ldr	r1, [pc, #112]	; (8002380 <canzero_start+0x15c>)
 800230e:	481d      	ldr	r0, [pc, #116]	; (8002384 <canzero_start+0x160>)
 8002310:	f016 f813 	bl	801833a <xTaskCreate>
 8002314:	6278      	str	r0, [r7, #36]	; 0x24
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	2b01      	cmp	r3, #1
 800231a:	d001      	beq.n	8002320 <canzero_start+0xfc>
		Error_Handler();
 800231c:	f00c f846 	bl	800e3ac <Error_Handler>
	}

	TaskHandle_t sendOdEntriesHandle = nullptr;
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
	BaseType_t sendOdEntriesStatus = xTaskCreate(sendOdEntriesTask, "cz_sendod", 128, NULL,
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	9301      	str	r3, [sp, #4]
 800232a:	2310      	movs	r3, #16
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2300      	movs	r3, #0
 8002330:	2280      	movs	r2, #128	; 0x80
 8002332:	4915      	ldr	r1, [pc, #84]	; (8002388 <canzero_start+0x164>)
 8002334:	4815      	ldr	r0, [pc, #84]	; (800238c <canzero_start+0x168>)
 8002336:	f016 f800 	bl	801833a <xTaskCreate>
 800233a:	6238      	str	r0, [r7, #32]
			osPriorityBelowNormal, &sendOdEntriesHandle);
	if(sendOdEntriesStatus != pdPASS){
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d001      	beq.n	8002346 <canzero_start+0x122>
		Error_Handler();
 8002342:	f00c f833 	bl	800e3ac <Error_Handler>
	}


	while (true) {
		osDelay(osWaitForever);
 8002346:	f04f 30ff 	mov.w	r0, #4294967295
 800234a:	f013 fe91 	bl	8016070 <osDelay>
 800234e:	e7fa      	b.n	8002346 <canzero_start+0x122>
 8002350:	0801d778 	.word	0x0801d778
 8002354:	08001d79 	.word	0x08001d79
 8002358:	0801d780 	.word	0x0801d780
 800235c:	0801d7a4 	.word	0x0801d7a4
 8002360:	08001aa5 	.word	0x08001aa5
 8002364:	0801d7b0 	.word	0x0801d7b0
 8002368:	0801d7d8 	.word	0x0801d7d8
 800236c:	0800137d 	.word	0x0800137d
 8002370:	0801d7e4 	.word	0x0801d7e4
 8002374:	0801d814 	.word	0x0801d814
 8002378:	08001315 	.word	0x08001315
 800237c:	0801d820 	.word	0x0801d820
 8002380:	0801d850 	.word	0x0801d850
 8002384:	0800129d 	.word	0x0800129d
 8002388:	0801d858 	.word	0x0801d858
 800238c:	080075b1 	.word	0x080075b1

08002390 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <_ZN7canzero21handle_heartbeat_missEv>:


void __attribute__((weak)) canzero::handle_heartbeat_miss(){
 800239e:	b480      	push	{r7}
 80023a0:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80023a2:	bf00      	nop
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b082      	sub	sp, #8
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	ed87 0a01 	vstr	s0, [r7, #4]
 80023d8:	ed97 0a01 	vldr	s0, [r7, #4]
 80023dc:	f018 f8ea 	bl	801a5b4 <roundf>
 80023e0:	eef0 7a40 	vmov.f32	s15, s0
 80023e4:	eeb0 0a67 	vmov.f32	s0, s15
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 80023ee:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80023f2:	b0a2      	sub	sp, #136	; 0x88
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80023fa:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80023fe:	4619      	mov	r1, r3
 8002400:	4613      	mov	r3, r2
 8002402:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002406:	460b      	mov	r3, r1
 8002408:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 800240c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002410:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800241a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800241e:	7113      	strb	r3, [r2, #4]
 8002420:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002424:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002428:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 800242a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002436:	3301      	adds	r3, #1
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	441a      	add	r2, r3
 800243e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002442:	3302      	adds	r3, #2
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	041b      	lsls	r3, r3, #16
 8002448:	441a      	add	r2, r3
 800244a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800244e:	3303      	adds	r3, #3
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	061b      	lsls	r3, r3, #24
 8002454:	4413      	add	r3, r2
 8002456:	2200      	movs	r2, #0
 8002458:	461c      	mov	r4, r3
 800245a:	4615      	mov	r5, r2
 800245c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002460:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 8002464:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002468:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800246c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002470:	3304      	adds	r3, #4
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2200      	movs	r2, #0
 8002478:	673b      	str	r3, [r7, #112]	; 0x70
 800247a:	677a      	str	r2, [r7, #116]	; 0x74
 800247c:	f04f 0000 	mov.w	r0, #0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002486:	0019      	movs	r1, r3
 8002488:	2000      	movs	r0, #0
 800248a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800248e:	3305      	adds	r3, #5
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2200      	movs	r2, #0
 8002496:	66bb      	str	r3, [r7, #104]	; 0x68
 8002498:	66fa      	str	r2, [r7, #108]	; 0x6c
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 80024a4:	0233      	lsls	r3, r6, #8
 80024a6:	2200      	movs	r2, #0
 80024a8:	eb10 0802 	adds.w	r8, r0, r2
 80024ac:	eb41 0903 	adc.w	r9, r1, r3
 80024b0:	eb14 0308 	adds.w	r3, r4, r8
 80024b4:	663b      	str	r3, [r7, #96]	; 0x60
 80024b6:	eb45 0309 	adc.w	r3, r5, r9
 80024ba:	667b      	str	r3, [r7, #100]	; 0x64
 80024bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024c0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80024c4:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 80024c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024cc:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80024d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024d4:	3306      	adds	r3, #6
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2200      	movs	r2, #0
 80024dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80024de:	65fa      	str	r2, [r7, #92]	; 0x5c
 80024e0:	f04f 0000 	mov.w	r0, #0
 80024e4:	f04f 0100 	mov.w	r1, #0
 80024e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024ea:	0419      	lsls	r1, r3, #16
 80024ec:	2000      	movs	r0, #0
 80024ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024f2:	3307      	adds	r3, #7
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2200      	movs	r2, #0
 80024fa:	653b      	str	r3, [r7, #80]	; 0x50
 80024fc:	657a      	str	r2, [r7, #84]	; 0x54
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	f04f 0300 	mov.w	r3, #0
 8002506:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8002508:	0633      	lsls	r3, r6, #24
 800250a:	2200      	movs	r2, #0
 800250c:	eb10 0a02 	adds.w	sl, r0, r2
 8002510:	eb41 0b03 	adc.w	fp, r1, r3
 8002514:	eb14 030a 	adds.w	r3, r4, sl
 8002518:	64bb      	str	r3, [r7, #72]	; 0x48
 800251a:	eb45 030b 	adc.w	r3, r5, fp
 800251e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002520:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002524:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002528:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 800252c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002530:	3307      	adds	r3, #7
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800253a:	3306      	adds	r3, #6
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	021b      	lsls	r3, r3, #8
 8002540:	441a      	add	r2, r3
 8002542:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002546:	3305      	adds	r3, #5
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	041b      	lsls	r3, r3, #16
 800254c:	441a      	add	r2, r3
 800254e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002552:	3304      	adds	r3, #4
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	4413      	add	r3, r2
 800255a:	2200      	movs	r2, #0
 800255c:	643b      	str	r3, [r7, #64]	; 0x40
 800255e:	647a      	str	r2, [r7, #68]	; 0x44
 8002560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002564:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002568:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 800256c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002570:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002574:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002578:	3303      	adds	r3, #3
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2200      	movs	r2, #0
 8002580:	63bb      	str	r3, [r7, #56]	; 0x38
 8002582:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002584:	f04f 0000 	mov.w	r0, #0
 8002588:	f04f 0100 	mov.w	r1, #0
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	0019      	movs	r1, r3
 8002590:	2000      	movs	r0, #0
 8002592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002596:	3302      	adds	r3, #2
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2200      	movs	r2, #0
 800259e:	633b      	str	r3, [r7, #48]	; 0x30
 80025a0:	637a      	str	r2, [r7, #52]	; 0x34
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	f04f 0300 	mov.w	r3, #0
 80025aa:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80025ac:	0233      	lsls	r3, r6, #8
 80025ae:	2200      	movs	r2, #0
 80025b0:	1886      	adds	r6, r0, r2
 80025b2:	62be      	str	r6, [r7, #40]	; 0x28
 80025b4:	eb41 0303 	adc.w	r3, r1, r3
 80025b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80025be:	460b      	mov	r3, r1
 80025c0:	18e3      	adds	r3, r4, r3
 80025c2:	623b      	str	r3, [r7, #32]
 80025c4:	4613      	mov	r3, r2
 80025c6:	eb45 0303 	adc.w	r3, r5, r3
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
 80025cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80025d4:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 80025d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025dc:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80025e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025e4:	3301      	adds	r3, #1
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2200      	movs	r2, #0
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	61fa      	str	r2, [r7, #28]
 80025f0:	f04f 0000 	mov.w	r0, #0
 80025f4:	f04f 0100 	mov.w	r1, #0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	0419      	lsls	r1, r3, #16
 80025fc:	2000      	movs	r0, #0
 80025fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2200      	movs	r2, #0
 8002608:	613b      	str	r3, [r7, #16]
 800260a:	617a      	str	r2, [r7, #20]
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	693e      	ldr	r6, [r7, #16]
 8002616:	0633      	lsls	r3, r6, #24
 8002618:	2200      	movs	r2, #0
 800261a:	1886      	adds	r6, r0, r2
 800261c:	60be      	str	r6, [r7, #8]
 800261e:	eb41 0303 	adc.w	r3, r1, r3
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002628:	460b      	mov	r3, r1
 800262a:	18e3      	adds	r3, r4, r3
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	4613      	mov	r3, r2
 8002630:	eb45 0303 	adc.w	r3, r5, r3
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800263a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800263e:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 8002642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002646:	4618      	mov	r0, r3
 8002648:	3788      	adds	r7, #136	; 0x88
 800264a:	46bd      	mov	sp, r7
 800264c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002650:	4770      	bx	lr

08002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002652:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
 8002660:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002668:	d302      	bcc.n	8002670 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 800266a:	f640 73ff 	movw	r3, #4095	; 0xfff
 800266e:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8002670:	887b      	ldrh	r3, [r7, #2]
 8002672:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	8af9      	ldrh	r1, [r7, #22]
 800267c:	2000      	movs	r0, #0
 800267e:	468a      	mov	sl, r1
 8002680:	4683      	mov	fp, r0
 8002682:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8002686:	2500      	movs	r5, #0
 8002688:	ea42 0804 	orr.w	r8, r2, r4
 800268c:	ea43 0905 	orr.w	r9, r3, r5
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8002696:	bf00      	nop
 8002698:	371c      	adds	r7, #28
 800269a:	46bd      	mov	sp, r7
 800269c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026a0:	4770      	bx	lr

080026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80026a2:	b480      	push	{r7}
 80026a4:	b085      	sub	sp, #20
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
 80026aa:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b2:	b293      	uxth	r3, r2
 80026b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b8:	81fb      	strh	r3, [r7, #14]
                return value;
 80026ba:	89fb      	ldrh	r3, [r7, #14]
            }
 80026bc:	4618      	mov	r0, r3
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <_ZN3can7signals20SensorF_SDO_RespCode3setERyS2_Rhh>:
        class SensorF_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80026c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026cc:	b087      	sub	sp, #28
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	60f8      	str	r0, [r7, #12]
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	2200      	movs	r2, #0
 80026e6:	4698      	mov	r8, r3
 80026e8:	4691      	mov	r9, r2
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	f04f 0300 	mov.w	r3, #0
 80026f2:	ea4f 3309 	mov.w	r3, r9, lsl #12
 80026f6:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 80026fa:	ea4f 3208 	mov.w	r2, r8, lsl #12
 80026fe:	b294      	uxth	r4, r2
 8002700:	2500      	movs	r5, #0
 8002702:	ea40 0a04 	orr.w	sl, r0, r4
 8002706:	ea41 0b05 	orr.w	fp, r1, r5
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8002710:	bf00      	nop
 8002712:	371c      	adds	r7, #28
 8002714:	46bd      	mov	sp, r7
 8002716:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800271a:	4770      	bx	lr

0800271c <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_>:
                SensorF_SDO_ID::set(intel, motorola, dlc, 2320);
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
                dlc = 3;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2320) {
 8002726:	6839      	ldr	r1, [r7, #0]
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ffba 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800272e:	4603      	mov	r3, r0
 8002730:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002734:	bf14      	ite	ne
 8002736:	2301      	movne	r3, #1
 8002738:	2300      	moveq	r3, #0
 800273a:	b2db      	uxtb	r3, r3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d000      	beq.n	8002742 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_+0x26>
                    while(1);
 8002740:	e7fe      	b.n	8002740 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	0c02      	lsrs	r2, r0, #16
 8002752:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002756:	0c0b      	lsrs	r3, r1, #16
 8002758:	4613      	mov	r3, r2
 800275a:	73fb      	strb	r3, [r7, #15]
                return value;
 800275c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002768:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800276c:	b088      	sub	sp, #32
 800276e:	af00      	add	r7, sp, #0
 8002770:	6178      	str	r0, [r7, #20]
 8002772:	6139      	str	r1, [r7, #16]
 8002774:	60fa      	str	r2, [r7, #12]
 8002776:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800277a:	edd7 7a02 	vldr	s15, [r7, #8]
 800277e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800281c <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xb4>
 8002782:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800278a:	dd01      	ble.n	8002790 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0x28>
                    value = max;
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xb8>)
 800278e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002790:	edd7 7a02 	vldr	s15, [r7, #8]
 8002794:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002824 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xbc>
 8002798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a0:	d501      	bpl.n	80027a6 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0x3e>
                    value = min;
 80027a2:	4b21      	ldr	r3, [pc, #132]	; (8002828 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc0>)
 80027a4:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 3329);
 80027a6:	f640 5301 	movw	r3, #3329	; 0xd01
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	6939      	ldr	r1, [r7, #16]
 80027ae:	6978      	ldr	r0, [r7, #20]
 80027b0:	f7ff ff4f 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80027b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800282c <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc4>
 80027bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027c0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002830 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc8>
 80027c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027c8:	eeb0 0a47 	vmov.f32	s0, s14
 80027cc:	f7ff fdff 	bl	80023ce <_ZSt5roundf>
 80027d0:	eef0 7a40 	vmov.f32	s15, s0
 80027d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d8:	ee17 3a90 	vmov	r3, s15
 80027dc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e4:	8bf9      	ldrh	r1, [r7, #30]
 80027e6:	2000      	movs	r0, #0
 80027e8:	4688      	mov	r8, r1
 80027ea:	4681      	mov	r9, r0
 80027ec:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80027f0:	6079      	str	r1, [r7, #4]
 80027f2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80027f6:	6039      	str	r1, [r7, #0]
 80027f8:	683c      	ldr	r4, [r7, #0]
 80027fa:	2500      	movs	r5, #0
 80027fc:	ea42 0a04 	orr.w	sl, r2, r4
 8002800:	ea43 0b05 	orr.w	fp, r3, r5
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2204      	movs	r2, #4
 800280e:	701a      	strb	r2, [r3, #0]
            }
 8002810:	bf00      	nop
 8002812:	3720      	adds	r7, #32
 8002814:	46bd      	mov	sp, r7
 8002816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281a:	bf00      	nop
 800281c:	440ad666 	.word	0x440ad666
 8002820:	440ad666 	.word	0x440ad666
 8002824:	c2c80000 	.word	0xc2c80000
 8002828:	c2c80000 	.word	0xc2c80000
 800282c:	42c80000 	.word	0x42c80000
 8002830:	3c23d70a 	.word	0x3c23d70a

08002834 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002838:	b088      	sub	sp, #32
 800283a:	af00      	add	r7, sp, #0
 800283c:	6178      	str	r0, [r7, #20]
 800283e:	6139      	str	r1, [r7, #16]
 8002840:	60fa      	str	r2, [r7, #12]
 8002842:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002846:	edd7 7a02 	vldr	s15, [r7, #8]
 800284a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80028e8 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xb4>
 800284e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002856:	dd01      	ble.n	800285c <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0x28>
                    value = max;
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xb8>)
 800285a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800285c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002860:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80028f0 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xbc>
 8002864:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286c:	d501      	bpl.n	8002872 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0x3e>
                    value = min;
 800286e:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc0>)
 8002870:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 3328);
 8002872:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	6939      	ldr	r1, [r7, #16]
 800287a:	6978      	ldr	r0, [r7, #20]
 800287c:	f7ff fee9 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002880:	edd7 7a02 	vldr	s15, [r7, #8]
 8002884:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80028f8 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc4>
 8002888:	ee77 7a87 	vadd.f32	s15, s15, s14
 800288c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80028fc <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc8>
 8002890:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002894:	eeb0 0a47 	vmov.f32	s0, s14
 8002898:	f7ff fd99 	bl	80023ce <_ZSt5roundf>
 800289c:	eef0 7a40 	vmov.f32	s15, s0
 80028a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a4:	ee17 3a90 	vmov	r3, s15
 80028a8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	8bf9      	ldrh	r1, [r7, #30]
 80028b2:	2000      	movs	r0, #0
 80028b4:	4688      	mov	r8, r1
 80028b6:	4681      	mov	r9, r0
 80028b8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80028bc:	6079      	str	r1, [r7, #4]
 80028be:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80028c2:	6039      	str	r1, [r7, #0]
 80028c4:	683c      	ldr	r4, [r7, #0]
 80028c6:	2500      	movs	r5, #0
 80028c8:	ea42 0a04 	orr.w	sl, r2, r4
 80028cc:	ea43 0b05 	orr.w	fp, r3, r5
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2204      	movs	r2, #4
 80028da:	701a      	strb	r2, [r3, #0]
            }
 80028dc:	bf00      	nop
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028e6:	bf00      	nop
 80028e8:	440ad666 	.word	0x440ad666
 80028ec:	440ad666 	.word	0x440ad666
 80028f0:	c2c80000 	.word	0xc2c80000
 80028f4:	c2c80000 	.word	0xc2c80000
 80028f8:	42c80000 	.word	0x42c80000
 80028fc:	3c23d70a 	.word	0x3c23d70a

08002900 <_ZN3can7signals30SensorF_OD_FiducialLeftCounter3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3073            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002904:	b088      	sub	sp, #32
 8002906:	af00      	add	r7, sp, #0
 8002908:	6178      	str	r0, [r7, #20]
 800290a:	6139      	str	r1, [r7, #16]
 800290c:	60fa      	str	r2, [r7, #12]
 800290e:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3073);
 8002910:	f640 4301 	movw	r3, #3073	; 0xc01
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	6939      	ldr	r1, [r7, #16]
 8002918:	6978      	ldr	r0, [r7, #20]
 800291a:	f7ff fe9a 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800291e:	897b      	ldrh	r3, [r7, #10]
 8002920:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002928:	8bf9      	ldrh	r1, [r7, #30]
 800292a:	2000      	movs	r0, #0
 800292c:	4688      	mov	r8, r1
 800292e:	4681      	mov	r9, r0
 8002930:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002934:	6079      	str	r1, [r7, #4]
 8002936:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800293a:	6039      	str	r1, [r7, #0]
 800293c:	683c      	ldr	r4, [r7, #0]
 800293e:	2500      	movs	r5, #0
 8002940:	ea42 0a04 	orr.w	sl, r2, r4
 8002944:	ea43 0b05 	orr.w	fp, r3, r5
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2204      	movs	r2, #4
 8002952:	701a      	strb	r2, [r3, #0]
            }
 8002954:	bf00      	nop
 8002956:	3720      	adds	r7, #32
 8002958:	46bd      	mov	sp, r7
 800295a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800295e <_ZN3can7signals31SensorF_OD_FiducialRightCounter3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3072            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800295e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6178      	str	r0, [r7, #20]
 8002968:	6139      	str	r1, [r7, #16]
 800296a:	60fa      	str	r2, [r7, #12]
 800296c:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3072);
 800296e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	6939      	ldr	r1, [r7, #16]
 8002976:	6978      	ldr	r0, [r7, #20]
 8002978:	f7ff fe6b 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800297c:	897b      	ldrh	r3, [r7, #10]
 800297e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002986:	8bf9      	ldrh	r1, [r7, #30]
 8002988:	2000      	movs	r0, #0
 800298a:	4688      	mov	r8, r1
 800298c:	4681      	mov	r9, r0
 800298e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002992:	6079      	str	r1, [r7, #4]
 8002994:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002998:	6039      	str	r1, [r7, #0]
 800299a:	683c      	ldr	r4, [r7, #0]
 800299c:	2500      	movs	r5, #0
 800299e:	ea42 0a04 	orr.w	sl, r2, r4
 80029a2:	ea43 0b05 	orr.w	fp, r3, r5
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2204      	movs	r2, #4
 80029b0:	701a      	strb	r2, [r3, #0]
            }
 80029b2:	bf00      	nop
 80029b4:	3720      	adds	r7, #32
 80029b6:	46bd      	mov	sp, r7
 80029b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029bc <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b088      	sub	sp, #32
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6178      	str	r0, [r7, #20]
 80029c6:	6139      	str	r1, [r7, #16]
 80029c8:	60fa      	str	r2, [r7, #12]
 80029ca:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80029ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80029d2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002a70 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xb4>
 80029d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029de:	dd01      	ble.n	80029e4 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0x28>
                    value = max;
 80029e0:	4b24      	ldr	r3, [pc, #144]	; (8002a74 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xb8>)
 80029e2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80029e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80029e8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002a78 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xbc>
 80029ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f4:	d501      	bpl.n	80029fa <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0x3e>
                    value = min;
 80029f6:	4b21      	ldr	r3, [pc, #132]	; (8002a7c <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc0>)
 80029f8:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2816);
 80029fa:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	6939      	ldr	r1, [r7, #16]
 8002a02:	6978      	ldr	r0, [r7, #20]
 8002a04:	f7ff fe25 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002a08:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a0c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002a80 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc4>
 8002a10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a14:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a84 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc8>
 8002a18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a20:	f7ff fcd5 	bl	80023ce <_ZSt5roundf>
 8002a24:	eef0 7a40 	vmov.f32	s15, s0
 8002a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a2c:	ee17 3a90 	vmov	r3, s15
 8002a30:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	8bf9      	ldrh	r1, [r7, #30]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	4688      	mov	r8, r1
 8002a3e:	4681      	mov	r9, r0
 8002a40:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002a44:	6079      	str	r1, [r7, #4]
 8002a46:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002a4a:	6039      	str	r1, [r7, #0]
 8002a4c:	683c      	ldr	r4, [r7, #0]
 8002a4e:	2500      	movs	r5, #0
 8002a50:	ea42 0a04 	orr.w	sl, r2, r4
 8002a54:	ea43 0b05 	orr.w	fp, r3, r5
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2204      	movs	r2, #4
 8002a62:	701a      	strb	r2, [r3, #0]
            }
 8002a64:	bf00      	nop
 8002a66:	3720      	adds	r7, #32
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a6e:	bf00      	nop
 8002a70:	440ad666 	.word	0x440ad666
 8002a74:	440ad666 	.word	0x440ad666
 8002a78:	c2c80000 	.word	0xc2c80000
 8002a7c:	c2c80000 	.word	0xc2c80000
 8002a80:	42c80000 	.word	0x42c80000
 8002a84:	3c23d70a 	.word	0x3c23d70a

08002a88 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002a88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a8c:	b088      	sub	sp, #32
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6178      	str	r0, [r7, #20]
 8002a92:	6139      	str	r1, [r7, #16]
 8002a94:	60fa      	str	r2, [r7, #12]
 8002a96:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a9e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002b3c <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xb4>
 8002aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aaa:	dd01      	ble.n	8002ab0 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0x28>
                    value = max;
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xb8>)
 8002aae:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002ab0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ab4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002b44 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xbc>
 8002ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac0:	d501      	bpl.n	8002ac6 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0x3e>
                    value = min;
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc0>)
 8002ac4:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2611);
 8002ac6:	f640 2333 	movw	r3, #2611	; 0xa33
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	6939      	ldr	r1, [r7, #16]
 8002ace:	6978      	ldr	r0, [r7, #20]
 8002ad0:	f7ff fdbf 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002ad4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ad8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002b4c <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc4>
 8002adc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ae0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002b50 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc8>
 8002ae4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8002aec:	f7ff fc6f 	bl	80023ce <_ZSt5roundf>
 8002af0:	eef0 7a40 	vmov.f32	s15, s0
 8002af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002af8:	ee17 3a90 	vmov	r3, s15
 8002afc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b04:	8bf9      	ldrh	r1, [r7, #30]
 8002b06:	2000      	movs	r0, #0
 8002b08:	4688      	mov	r8, r1
 8002b0a:	4681      	mov	r9, r0
 8002b0c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002b10:	6079      	str	r1, [r7, #4]
 8002b12:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002b16:	6039      	str	r1, [r7, #0]
 8002b18:	683c      	ldr	r4, [r7, #0]
 8002b1a:	2500      	movs	r5, #0
 8002b1c:	ea42 0a04 	orr.w	sl, r2, r4
 8002b20:	ea43 0b05 	orr.w	fp, r3, r5
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2204      	movs	r2, #4
 8002b2e:	701a      	strb	r2, [r3, #0]
            }
 8002b30:	bf00      	nop
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b3a:	bf00      	nop
 8002b3c:	440ad666 	.word	0x440ad666
 8002b40:	440ad666 	.word	0x440ad666
 8002b44:	c2c80000 	.word	0xc2c80000
 8002b48:	c2c80000 	.word	0xc2c80000
 8002b4c:	42c80000 	.word	0x42c80000
 8002b50:	3c23d70a 	.word	0x3c23d70a

08002b54 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b58:	b088      	sub	sp, #32
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6178      	str	r0, [r7, #20]
 8002b5e:	6139      	str	r1, [r7, #16]
 8002b60:	60fa      	str	r2, [r7, #12]
 8002b62:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002b66:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b6a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002c08 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xb4>
 8002b6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b76:	dd01      	ble.n	8002b7c <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0x28>
                    value = max;
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xb8>)
 8002b7a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002b7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b80:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002c10 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xbc>
 8002b84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8c:	d501      	bpl.n	8002b92 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0x3e>
                    value = min;
 8002b8e:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc0>)
 8002b90:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2610);
 8002b92:	f640 2332 	movw	r3, #2610	; 0xa32
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	6939      	ldr	r1, [r7, #16]
 8002b9a:	6978      	ldr	r0, [r7, #20]
 8002b9c:	f7ff fd59 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002ba0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ba4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c18 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc4>
 8002ba8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bac:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002c1c <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc8>
 8002bb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bb4:	eeb0 0a47 	vmov.f32	s0, s14
 8002bb8:	f7ff fc09 	bl	80023ce <_ZSt5roundf>
 8002bbc:	eef0 7a40 	vmov.f32	s15, s0
 8002bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc4:	ee17 3a90 	vmov	r3, s15
 8002bc8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd0:	8bf9      	ldrh	r1, [r7, #30]
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	4688      	mov	r8, r1
 8002bd6:	4681      	mov	r9, r0
 8002bd8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002bdc:	6079      	str	r1, [r7, #4]
 8002bde:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002be2:	6039      	str	r1, [r7, #0]
 8002be4:	683c      	ldr	r4, [r7, #0]
 8002be6:	2500      	movs	r5, #0
 8002be8:	ea42 0a04 	orr.w	sl, r2, r4
 8002bec:	ea43 0b05 	orr.w	fp, r3, r5
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	701a      	strb	r2, [r3, #0]
            }
 8002bfc:	bf00      	nop
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c06:	bf00      	nop
 8002c08:	440ad666 	.word	0x440ad666
 8002c0c:	440ad666 	.word	0x440ad666
 8002c10:	c2c80000 	.word	0xc2c80000
 8002c14:	c2c80000 	.word	0xc2c80000
 8002c18:	42c80000 	.word	0x42c80000
 8002c1c:	3c23d70a 	.word	0x3c23d70a

08002c20 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c24:	b088      	sub	sp, #32
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6178      	str	r0, [r7, #20]
 8002c2a:	6139      	str	r1, [r7, #16]
 8002c2c:	60fa      	str	r2, [r7, #12]
 8002c2e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002c32:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c36:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002cd4 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xb4>
 8002c3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c42:	dd01      	ble.n	8002c48 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0x28>
                    value = max;
 8002c44:	4b24      	ldr	r3, [pc, #144]	; (8002cd8 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xb8>)
 8002c46:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002c48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c4c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002cdc <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xbc>
 8002c50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c58:	d501      	bpl.n	8002c5e <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0x3e>
                    value = min;
 8002c5a:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc0>)
 8002c5c:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2609);
 8002c5e:	f640 2331 	movw	r3, #2609	; 0xa31
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	6939      	ldr	r1, [r7, #16]
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f7ff fcf3 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002c6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c70:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002ce4 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc4>
 8002c74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c78:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002ce8 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc8>
 8002c7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c80:	eeb0 0a47 	vmov.f32	s0, s14
 8002c84:	f7ff fba3 	bl	80023ce <_ZSt5roundf>
 8002c88:	eef0 7a40 	vmov.f32	s15, s0
 8002c8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c90:	ee17 3a90 	vmov	r3, s15
 8002c94:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	8bf9      	ldrh	r1, [r7, #30]
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	4688      	mov	r8, r1
 8002ca2:	4681      	mov	r9, r0
 8002ca4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002ca8:	6079      	str	r1, [r7, #4]
 8002caa:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002cae:	6039      	str	r1, [r7, #0]
 8002cb0:	683c      	ldr	r4, [r7, #0]
 8002cb2:	2500      	movs	r5, #0
 8002cb4:	ea42 0a04 	orr.w	sl, r2, r4
 8002cb8:	ea43 0b05 	orr.w	fp, r3, r5
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	701a      	strb	r2, [r3, #0]
            }
 8002cc8:	bf00      	nop
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cd2:	bf00      	nop
 8002cd4:	440ad666 	.word	0x440ad666
 8002cd8:	440ad666 	.word	0x440ad666
 8002cdc:	c2c80000 	.word	0xc2c80000
 8002ce0:	c2c80000 	.word	0xc2c80000
 8002ce4:	42c80000 	.word	0x42c80000
 8002ce8:	3c23d70a 	.word	0x3c23d70a

08002cec <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf0:	b088      	sub	sp, #32
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6178      	str	r0, [r7, #20]
 8002cf6:	6139      	str	r1, [r7, #16]
 8002cf8:	60fa      	str	r2, [r7, #12]
 8002cfa:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002cfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d02:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002da0 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xb4>
 8002d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d0e:	dd01      	ble.n	8002d14 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0x28>
                    value = max;
 8002d10:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xb8>)
 8002d12:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002d14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d18:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002da8 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xbc>
 8002d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d24:	d501      	bpl.n	8002d2a <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0x3e>
                    value = min;
 8002d26:	4b21      	ldr	r3, [pc, #132]	; (8002dac <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc0>)
 8002d28:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2608);
 8002d2a:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	6939      	ldr	r1, [r7, #16]
 8002d32:	6978      	ldr	r0, [r7, #20]
 8002d34:	f7ff fc8d 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002d38:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d3c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002db0 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc4>
 8002d40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d44:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002db4 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc8>
 8002d48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002d50:	f7ff fb3d 	bl	80023ce <_ZSt5roundf>
 8002d54:	eef0 7a40 	vmov.f32	s15, s0
 8002d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d5c:	ee17 3a90 	vmov	r3, s15
 8002d60:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	8bf9      	ldrh	r1, [r7, #30]
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	4688      	mov	r8, r1
 8002d6e:	4681      	mov	r9, r0
 8002d70:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002d74:	6079      	str	r1, [r7, #4]
 8002d76:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002d7a:	6039      	str	r1, [r7, #0]
 8002d7c:	683c      	ldr	r4, [r7, #0]
 8002d7e:	2500      	movs	r5, #0
 8002d80:	ea42 0a04 	orr.w	sl, r2, r4
 8002d84:	ea43 0b05 	orr.w	fp, r3, r5
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2204      	movs	r2, #4
 8002d92:	701a      	strb	r2, [r3, #0]
            }
 8002d94:	bf00      	nop
 8002d96:	3720      	adds	r7, #32
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9e:	bf00      	nop
 8002da0:	440ad666 	.word	0x440ad666
 8002da4:	440ad666 	.word	0x440ad666
 8002da8:	c2c80000 	.word	0xc2c80000
 8002dac:	c2c80000 	.word	0xc2c80000
 8002db0:	42c80000 	.word	0x42c80000
 8002db4:	3c23d70a 	.word	0x3c23d70a

08002db8 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dbc:	b088      	sub	sp, #32
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6178      	str	r0, [r7, #20]
 8002dc2:	6139      	str	r1, [r7, #16]
 8002dc4:	60fa      	str	r2, [r7, #12]
 8002dc6:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002dca:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dce:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002e6c <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xb4>
 8002dd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dda:	dd01      	ble.n	8002de0 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0x28>
                    value = max;
 8002ddc:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xb8>)
 8002dde:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002de4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002e74 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xbc>
 8002de8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df0:	d501      	bpl.n	8002df6 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0x3e>
                    value = min;
 8002df2:	4b21      	ldr	r3, [pc, #132]	; (8002e78 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc0>)
 8002df4:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2601);
 8002df6:	f640 2329 	movw	r3, #2601	; 0xa29
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	6939      	ldr	r1, [r7, #16]
 8002dfe:	6978      	ldr	r0, [r7, #20]
 8002e00:	f7ff fc27 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002e04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e08:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e7c <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc4>
 8002e0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e10:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002e80 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc8>
 8002e14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e18:	eeb0 0a47 	vmov.f32	s0, s14
 8002e1c:	f7ff fad7 	bl	80023ce <_ZSt5roundf>
 8002e20:	eef0 7a40 	vmov.f32	s15, s0
 8002e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e28:	ee17 3a90 	vmov	r3, s15
 8002e2c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	8bf9      	ldrh	r1, [r7, #30]
 8002e36:	2000      	movs	r0, #0
 8002e38:	4688      	mov	r8, r1
 8002e3a:	4681      	mov	r9, r0
 8002e3c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002e40:	6079      	str	r1, [r7, #4]
 8002e42:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002e46:	6039      	str	r1, [r7, #0]
 8002e48:	683c      	ldr	r4, [r7, #0]
 8002e4a:	2500      	movs	r5, #0
 8002e4c:	ea42 0a04 	orr.w	sl, r2, r4
 8002e50:	ea43 0b05 	orr.w	fp, r3, r5
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	701a      	strb	r2, [r3, #0]
            }
 8002e60:	bf00      	nop
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e6a:	bf00      	nop
 8002e6c:	440ad666 	.word	0x440ad666
 8002e70:	440ad666 	.word	0x440ad666
 8002e74:	c2c80000 	.word	0xc2c80000
 8002e78:	c2c80000 	.word	0xc2c80000
 8002e7c:	42c80000 	.word	0x42c80000
 8002e80:	3c23d70a 	.word	0x3c23d70a

08002e84 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e88:	b088      	sub	sp, #32
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6178      	str	r0, [r7, #20]
 8002e8e:	6139      	str	r1, [r7, #16]
 8002e90:	60fa      	str	r2, [r7, #12]
 8002e92:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002e96:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e9a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002f38 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xb4>
 8002e9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea6:	dd01      	ble.n	8002eac <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0x28>
                    value = max;
 8002ea8:	4b24      	ldr	r3, [pc, #144]	; (8002f3c <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xb8>)
 8002eaa:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002eac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f40 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xbc>
 8002eb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebc:	d501      	bpl.n	8002ec2 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0x3e>
                    value = min;
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc0>)
 8002ec0:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2600);
 8002ec2:	f640 2328 	movw	r3, #2600	; 0xa28
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	6939      	ldr	r1, [r7, #16]
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff fbc1 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002ed0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ed4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002f48 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc4>
 8002ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002edc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002f4c <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc8>
 8002ee0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ee4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ee8:	f7ff fa71 	bl	80023ce <_ZSt5roundf>
 8002eec:	eef0 7a40 	vmov.f32	s15, s0
 8002ef0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ef4:	ee17 3a90 	vmov	r3, s15
 8002ef8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f00:	8bf9      	ldrh	r1, [r7, #30]
 8002f02:	2000      	movs	r0, #0
 8002f04:	4688      	mov	r8, r1
 8002f06:	4681      	mov	r9, r0
 8002f08:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002f0c:	6079      	str	r1, [r7, #4]
 8002f0e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002f12:	6039      	str	r1, [r7, #0]
 8002f14:	683c      	ldr	r4, [r7, #0]
 8002f16:	2500      	movs	r5, #0
 8002f18:	ea42 0a04 	orr.w	sl, r2, r4
 8002f1c:	ea43 0b05 	orr.w	fp, r3, r5
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	701a      	strb	r2, [r3, #0]
            }
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f36:	bf00      	nop
 8002f38:	440ad666 	.word	0x440ad666
 8002f3c:	440ad666 	.word	0x440ad666
 8002f40:	c2c80000 	.word	0xc2c80000
 8002f44:	c2c80000 	.word	0xc2c80000
 8002f48:	42c80000 	.word	0x42c80000
 8002f4c:	3c23d70a 	.word	0x3c23d70a

08002f50 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f54:	b088      	sub	sp, #32
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6178      	str	r0, [r7, #20]
 8002f5a:	6139      	str	r1, [r7, #16]
 8002f5c:	60fa      	str	r2, [r7, #12]
 8002f5e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002f62:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f66:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003004 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xb4>
 8002f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f72:	dd01      	ble.n	8002f78 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8002f74:	4b24      	ldr	r3, [pc, #144]	; (8003008 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xb8>)
 8002f76:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f7c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800300c <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xbc>
 8002f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f88:	d501      	bpl.n	8002f8e <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8002f8a:	4b21      	ldr	r3, [pc, #132]	; (8003010 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc0>)
 8002f8c:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2599);
 8002f8e:	f640 2327 	movw	r3, #2599	; 0xa27
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	6939      	ldr	r1, [r7, #16]
 8002f96:	6978      	ldr	r0, [r7, #20]
 8002f98:	f7ff fb5b 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002f9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fa0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003014 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc4>
 8002fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fa8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003018 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc8>
 8002fac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fb0:	eeb0 0a47 	vmov.f32	s0, s14
 8002fb4:	f7ff fa0b 	bl	80023ce <_ZSt5roundf>
 8002fb8:	eef0 7a40 	vmov.f32	s15, s0
 8002fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc0:	ee17 3a90 	vmov	r3, s15
 8002fc4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	8bf9      	ldrh	r1, [r7, #30]
 8002fce:	2000      	movs	r0, #0
 8002fd0:	4688      	mov	r8, r1
 8002fd2:	4681      	mov	r9, r0
 8002fd4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002fd8:	6079      	str	r1, [r7, #4]
 8002fda:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002fde:	6039      	str	r1, [r7, #0]
 8002fe0:	683c      	ldr	r4, [r7, #0]
 8002fe2:	2500      	movs	r5, #0
 8002fe4:	ea42 0a04 	orr.w	sl, r2, r4
 8002fe8:	ea43 0b05 	orr.w	fp, r3, r5
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2204      	movs	r2, #4
 8002ff6:	701a      	strb	r2, [r3, #0]
            }
 8002ff8:	bf00      	nop
 8002ffa:	3720      	adds	r7, #32
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003002:	bf00      	nop
 8003004:	440ad666 	.word	0x440ad666
 8003008:	440ad666 	.word	0x440ad666
 800300c:	c2c80000 	.word	0xc2c80000
 8003010:	c2c80000 	.word	0xc2c80000
 8003014:	42c80000 	.word	0x42c80000
 8003018:	3c23d70a 	.word	0x3c23d70a

0800301c <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800301c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003020:	b088      	sub	sp, #32
 8003022:	af00      	add	r7, sp, #0
 8003024:	6178      	str	r0, [r7, #20]
 8003026:	6139      	str	r1, [r7, #16]
 8003028:	60fa      	str	r2, [r7, #12]
 800302a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800302e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003032:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80030d0 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xb4>
 8003036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800303a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303e:	dd01      	ble.n	8003044 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8003040:	4b24      	ldr	r3, [pc, #144]	; (80030d4 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xb8>)
 8003042:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003044:	edd7 7a02 	vldr	s15, [r7, #8]
 8003048:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80030d8 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xbc>
 800304c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003054:	d501      	bpl.n	800305a <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8003056:	4b21      	ldr	r3, [pc, #132]	; (80030dc <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc0>)
 8003058:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2598);
 800305a:	f640 2326 	movw	r3, #2598	; 0xa26
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	6939      	ldr	r1, [r7, #16]
 8003062:	6978      	ldr	r0, [r7, #20]
 8003064:	f7ff faf5 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003068:	edd7 7a02 	vldr	s15, [r7, #8]
 800306c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80030e0 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc4>
 8003070:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003074:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80030e4 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc8>
 8003078:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800307c:	eeb0 0a47 	vmov.f32	s0, s14
 8003080:	f7ff f9a5 	bl	80023ce <_ZSt5roundf>
 8003084:	eef0 7a40 	vmov.f32	s15, s0
 8003088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800308c:	ee17 3a90 	vmov	r3, s15
 8003090:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	8bf9      	ldrh	r1, [r7, #30]
 800309a:	2000      	movs	r0, #0
 800309c:	4688      	mov	r8, r1
 800309e:	4681      	mov	r9, r0
 80030a0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80030a4:	6079      	str	r1, [r7, #4]
 80030a6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80030aa:	6039      	str	r1, [r7, #0]
 80030ac:	683c      	ldr	r4, [r7, #0]
 80030ae:	2500      	movs	r5, #0
 80030b0:	ea42 0a04 	orr.w	sl, r2, r4
 80030b4:	ea43 0b05 	orr.w	fp, r3, r5
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2204      	movs	r2, #4
 80030c2:	701a      	strb	r2, [r3, #0]
            }
 80030c4:	bf00      	nop
 80030c6:	3720      	adds	r7, #32
 80030c8:	46bd      	mov	sp, r7
 80030ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ce:	bf00      	nop
 80030d0:	440ad666 	.word	0x440ad666
 80030d4:	440ad666 	.word	0x440ad666
 80030d8:	c2c80000 	.word	0xc2c80000
 80030dc:	c2c80000 	.word	0xc2c80000
 80030e0:	42c80000 	.word	0x42c80000
 80030e4:	3c23d70a 	.word	0x3c23d70a

080030e8 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80030e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ec:	b088      	sub	sp, #32
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6178      	str	r0, [r7, #20]
 80030f2:	6139      	str	r1, [r7, #16]
 80030f4:	60fa      	str	r2, [r7, #12]
 80030f6:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80030fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80030fe:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800319c <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xb4>
 8003102:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800310a:	dd01      	ble.n	8003110 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 800310c:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xb8>)
 800310e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003110:	edd7 7a02 	vldr	s15, [r7, #8]
 8003114:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80031a4 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xbc>
 8003118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800311c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003120:	d501      	bpl.n	8003126 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8003122:	4b21      	ldr	r3, [pc, #132]	; (80031a8 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc0>)
 8003124:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2597);
 8003126:	f640 2325 	movw	r3, #2597	; 0xa25
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	6939      	ldr	r1, [r7, #16]
 800312e:	6978      	ldr	r0, [r7, #20]
 8003130:	f7ff fa8f 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003134:	edd7 7a02 	vldr	s15, [r7, #8]
 8003138:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80031ac <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc4>
 800313c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003140:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80031b0 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc8>
 8003144:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003148:	eeb0 0a47 	vmov.f32	s0, s14
 800314c:	f7ff f93f 	bl	80023ce <_ZSt5roundf>
 8003150:	eef0 7a40 	vmov.f32	s15, s0
 8003154:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003158:	ee17 3a90 	vmov	r3, s15
 800315c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003164:	8bf9      	ldrh	r1, [r7, #30]
 8003166:	2000      	movs	r0, #0
 8003168:	4688      	mov	r8, r1
 800316a:	4681      	mov	r9, r0
 800316c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003170:	6079      	str	r1, [r7, #4]
 8003172:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003176:	6039      	str	r1, [r7, #0]
 8003178:	683c      	ldr	r4, [r7, #0]
 800317a:	2500      	movs	r5, #0
 800317c:	ea42 0a04 	orr.w	sl, r2, r4
 8003180:	ea43 0b05 	orr.w	fp, r3, r5
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2204      	movs	r2, #4
 800318e:	701a      	strb	r2, [r3, #0]
            }
 8003190:	bf00      	nop
 8003192:	3720      	adds	r7, #32
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319a:	bf00      	nop
 800319c:	440ad666 	.word	0x440ad666
 80031a0:	440ad666 	.word	0x440ad666
 80031a4:	c2c80000 	.word	0xc2c80000
 80031a8:	c2c80000 	.word	0xc2c80000
 80031ac:	42c80000 	.word	0x42c80000
 80031b0:	3c23d70a 	.word	0x3c23d70a

080031b4 <_ZN3can7signals21SensorF_OD_IMU_number3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2592            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80031b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b8:	b086      	sub	sp, #24
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
 80031c2:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2592);
 80031c4:	f44f 6322 	mov.w	r3, #2592	; 0xa20
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7ff fa40 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80031d2:	78fb      	ldrb	r3, [r7, #3]
 80031d4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2200      	movs	r2, #0
 80031e0:	4698      	mov	r8, r3
 80031e2:	4691      	mov	r9, r2
 80031e4:	f04f 0200 	mov.w	r2, #0
 80031e8:	f04f 0300 	mov.w	r3, #0
 80031ec:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80031f0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80031f4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80031f8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80031fc:	2500      	movs	r5, #0
 80031fe:	ea40 0a04 	orr.w	sl, r0, r4
 8003202:	ea41 0b05 	orr.w	fp, r1, r5
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2203      	movs	r2, #3
 8003210:	701a      	strb	r2, [r3, #0]
            }
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800321c <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_>:
                SensorF_SDO_ID::set(intel, motorola, dlc, 2309);
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
                dlc = 3;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2309) {
 8003226:	6839      	ldr	r1, [r7, #0]
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff fa3a 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800322e:	4603      	mov	r3, r0
 8003230:	461a      	mov	r2, r3
 8003232:	f640 1305 	movw	r3, #2309	; 0x905
 8003236:	429a      	cmp	r2, r3
 8003238:	bf14      	ite	ne
 800323a:	2301      	movne	r3, #1
 800323c:	2300      	moveq	r3, #0
 800323e:	b2db      	uxtb	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	d000      	beq.n	8003246 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_+0x2a>
                    while(1);
 8003244:	e7fe      	b.n	8003244 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	e9d3 0100 	ldrd	r0, r1, [r3]
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	0c02      	lsrs	r2, r0, #16
 8003256:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800325a:	0c0b      	lsrs	r3, r1, #16
 800325c:	4613      	mov	r3, r2
 800325e:	73fb      	strb	r3, [r7, #15]
                return value;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(1);
            constexpr static float max = static_cast<float>(300);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800326c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003270:	b088      	sub	sp, #32
 8003272:	af00      	add	r7, sp, #0
 8003274:	6178      	str	r0, [r7, #20]
 8003276:	6139      	str	r1, [r7, #16]
 8003278:	60fa      	str	r2, [r7, #12]
 800327a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800327e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003282:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003318 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xac>
 8003286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328e:	dd01      	ble.n	8003294 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0x28>
                    value = max;
 8003290:	4b22      	ldr	r3, [pc, #136]	; (800331c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xb0>)
 8003292:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003294:	edd7 7a02 	vldr	s15, [r7, #8]
 8003298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800329c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a4:	d502      	bpl.n	80032ac <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0x40>
                    value = min;
 80032a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80032aa:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2308);
 80032ac:	f640 1304 	movw	r3, #2308	; 0x904
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	6939      	ldr	r1, [r7, #16]
 80032b4:	6978      	ldr	r0, [r7, #20]
 80032b6:	f7ff f9cc 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.005f)));
 80032ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80032be:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003320 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xb4>
 80032c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032c6:	eeb0 0a47 	vmov.f32	s0, s14
 80032ca:	f7ff f880 	bl	80023ce <_ZSt5roundf>
 80032ce:	eef0 7a40 	vmov.f32	s15, s0
 80032d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d6:	ee17 3a90 	vmov	r3, s15
 80032da:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e2:	8bf9      	ldrh	r1, [r7, #30]
 80032e4:	2000      	movs	r0, #0
 80032e6:	4688      	mov	r8, r1
 80032e8:	4681      	mov	r9, r0
 80032ea:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80032ee:	6079      	str	r1, [r7, #4]
 80032f0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80032f4:	6039      	str	r1, [r7, #0]
 80032f6:	683c      	ldr	r4, [r7, #0]
 80032f8:	2500      	movs	r5, #0
 80032fa:	ea42 0a04 	orr.w	sl, r2, r4
 80032fe:	ea43 0b05 	orr.w	fp, r3, r5
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2204      	movs	r2, #4
 800330c:	701a      	strb	r2, [r3, #0]
            }
 800330e:	bf00      	nop
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003318:	43960000 	.word	0x43960000
 800331c:	43960000 	.word	0x43960000
 8003320:	3ba3d70a 	.word	0x3ba3d70a

08003324 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003324:	b580      	push	{r7, lr}
 8003326:	b084      	sub	sp, #16
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2308) {
 800332e:	6839      	ldr	r1, [r7, #0]
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff f9b6 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003336:	4603      	mov	r3, r0
 8003338:	461a      	mov	r2, r3
 800333a:	f640 1304 	movw	r3, #2308	; 0x904
 800333e:	429a      	cmp	r2, r3
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d000      	beq.n	800334e <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x2a>
                    while(1);
 800334c:	e7fe      	b.n	800334c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	0c02      	lsrs	r2, r0, #16
 800335e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003362:	0c0b      	lsrs	r3, r1, #16
 8003364:	4613      	mov	r3, r2
 8003366:	81fb      	strh	r3, [r7, #14]
                return value * (0.005f);
 8003368:	89fb      	ldrh	r3, [r7, #14]
 800336a:	ee07 3a90 	vmov	s15, r3
 800336e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003372:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003384 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x60>
 8003376:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800337a:	eeb0 0a67 	vmov.f32	s0, s15
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	3ba3d70a 	.word	0x3ba3d70a

08003388 <_ZN3can7signals24SensorF_OD_HVBatteryMode3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2307            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003388:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800338c:	b086      	sub	sp, #24
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2307);
 8003398:	f640 1303 	movw	r3, #2307	; 0x903
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	68b9      	ldr	r1, [r7, #8]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7ff f956 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033b0:	7dfb      	ldrb	r3, [r7, #23]
 80033b2:	2200      	movs	r2, #0
 80033b4:	4698      	mov	r8, r3
 80033b6:	4691      	mov	r9, r2
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80033c4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80033c8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80033cc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80033d0:	2500      	movs	r5, #0
 80033d2:	ea40 0a04 	orr.w	sl, r0, r4
 80033d6:	ea41 0b05 	orr.w	fp, r1, r5
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2203      	movs	r2, #3
 80033e4:	701a      	strb	r2, [r3, #0]
            }
 80033e6:	bf00      	nop
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080033f0 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2307) {
 80033fa:	6839      	ldr	r1, [r7, #0]
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff f950 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003402:	4603      	mov	r3, r0
 8003404:	461a      	mov	r2, r3
 8003406:	f640 1303 	movw	r3, #2307	; 0x903
 800340a:	429a      	cmp	r2, r3
 800340c:	bf14      	ite	ne
 800340e:	2301      	movne	r3, #1
 8003410:	2300      	moveq	r3, #0
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d000      	beq.n	800341a <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_+0x2a>
                    while(1);
 8003418:	e7fe      	b.n	8003418 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	f04f 0300 	mov.w	r3, #0
 8003428:	0c02      	lsrs	r2, r0, #16
 800342a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800342e:	0c0b      	lsrs	r3, r1, #16
 8003430:	4613      	mov	r3, r2
 8003432:	73fb      	strb	r3, [r7, #15]
                return value;
 8003434:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <_ZN3can7signals31SensorF_OD_StateMachineActivate3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2306            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800343e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2306);
 800344e:	f640 1302 	movw	r3, #2306	; 0x902
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7ff f8fb 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	2200      	movs	r2, #0
 800346a:	4698      	mov	r8, r3
 800346c:	4691      	mov	r9, r2
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800347a:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800347e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003482:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003486:	2500      	movs	r5, #0
 8003488:	ea40 0a04 	orr.w	sl, r0, r4
 800348c:	ea41 0b05 	orr.w	fp, r1, r5
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	701a      	strb	r2, [r3, #0]
            }
 800349c:	bf00      	nop
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034a6 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2306) {
 80034b0:	6839      	ldr	r1, [r7, #0]
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff f8f5 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80034b8:	4603      	mov	r3, r0
 80034ba:	461a      	mov	r2, r3
 80034bc:	f640 1302 	movw	r3, #2306	; 0x902
 80034c0:	429a      	cmp	r2, r3
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d000      	beq.n	80034d0 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_+0x2a>
                    while(1);
 80034ce:	e7fe      	b.n	80034ce <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	0c02      	lsrs	r2, r0, #16
 80034e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80034e4:	0c0b      	lsrs	r3, r1, #16
 80034e6:	4613      	mov	r3, r2
 80034e8:	73fb      	strb	r3, [r7, #15]
                return value;
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
            }
 80034ec:	4618      	mov	r0, r3
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh>:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint8_t min = static_cast<uint8_t>(5);
            constexpr static uint8_t max = static_cast<uint8_t>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80034f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	2b64      	cmp	r3, #100	; 0x64
 8003508:	d901      	bls.n	800350e <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh+0x1a>
                    value = max;
 800350a:	2364      	movs	r3, #100	; 0x64
 800350c:	70fb      	strb	r3, [r7, #3]
                }
                if (value < min) {
 800350e:	78fb      	ldrb	r3, [r7, #3]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d801      	bhi.n	8003518 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh+0x24>
                    value = min;
 8003514:	2305      	movs	r3, #5
 8003516:	70fb      	strb	r3, [r7, #3]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2305);
 8003518:	f640 1301 	movw	r3, #2305	; 0x901
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff f896 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003526:	78fb      	ldrb	r3, [r7, #3]
 8003528:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	2200      	movs	r2, #0
 8003534:	4698      	mov	r8, r3
 8003536:	4691      	mov	r9, r2
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003544:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003548:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800354c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003550:	2500      	movs	r5, #0
 8003552:	ea40 0a04 	orr.w	sl, r0, r4
 8003556:	ea41 0b05 	orr.w	fp, r1, r5
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2203      	movs	r2, #3
 8003564:	701a      	strb	r2, [r3, #0]
            }
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003570 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2305) {
 800357a:	6839      	ldr	r1, [r7, #0]
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f7ff f890 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003582:	4603      	mov	r3, r0
 8003584:	461a      	mov	r2, r3
 8003586:	f640 1301 	movw	r3, #2305	; 0x901
 800358a:	429a      	cmp	r2, r3
 800358c:	bf14      	ite	ne
 800358e:	2301      	movne	r3, #1
 8003590:	2300      	moveq	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d000      	beq.n	800359a <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_+0x2a>
                    while(1);
 8003598:	e7fe      	b.n	8003598 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	0c02      	lsrs	r2, r0, #16
 80035aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035ae:	0c0b      	lsrs	r3, r1, #16
 80035b0:	4613      	mov	r3, r2
 80035b2:	73fb      	strb	r3, [r7, #15]
                return value;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
            }
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_ZN3can7signals28SensorF_OD_TelemetryCommands3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2304            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80035be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2304);
 80035ce:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	68b9      	ldr	r1, [r7, #8]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff f83b 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
 80035e8:	2200      	movs	r2, #0
 80035ea:	4698      	mov	r8, r3
 80035ec:	4691      	mov	r9, r2
 80035ee:	f04f 0200 	mov.w	r2, #0
 80035f2:	f04f 0300 	mov.w	r3, #0
 80035f6:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80035fa:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80035fe:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003602:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003606:	2500      	movs	r5, #0
 8003608:	ea40 0a04 	orr.w	sl, r0, r4
 800360c:	ea41 0b05 	orr.w	fp, r1, r5
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2203      	movs	r2, #3
 800361a:	701a      	strb	r2, [r3, #0]
            }
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003626 <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
 800362e:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2304) {
 8003630:	6839      	ldr	r1, [r7, #0]
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff f835 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003638:	4603      	mov	r3, r0
 800363a:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d000      	beq.n	800364c <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_+0x26>
                    while(1);
 800364a:	e7fe      	b.n	800364a <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	0c02      	lsrs	r2, r0, #16
 800365c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003660:	0c0b      	lsrs	r3, r1, #16
 8003662:	4613      	mov	r3, r2
 8003664:	73fb      	strb	r3, [r7, #15]
                return value;
 8003666:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0.01);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003674:	b088      	sub	sp, #32
 8003676:	af00      	add	r7, sp, #0
 8003678:	6178      	str	r0, [r7, #20]
 800367a:	6139      	str	r1, [r7, #16]
 800367c:	60fa      	str	r2, [r7, #12]
 800367e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003682:	edd7 7a02 	vldr	s15, [r7, #8]
 8003686:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800371c <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xac>
 800368a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800368e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003692:	dd01      	ble.n	8003698 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0x28>
                    value = max;
 8003694:	4b22      	ldr	r3, [pc, #136]	; (8003720 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb0>)
 8003696:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003698:	edd7 7a02 	vldr	s15, [r7, #8]
 800369c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003724 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb4>
 80036a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a8:	d501      	bpl.n	80036ae <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0x3e>
                    value = min;
 80036aa:	4b1f      	ldr	r3, [pc, #124]	; (8003728 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb8>)
 80036ac:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2048);
 80036ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	6939      	ldr	r1, [r7, #16]
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7fe ffcb 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 80036bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80036c0:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003724 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb4>
 80036c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036c8:	eeb0 0a47 	vmov.f32	s0, s14
 80036cc:	f7fe fe7f 	bl	80023ce <_ZSt5roundf>
 80036d0:	eef0 7a40 	vmov.f32	s15, s0
 80036d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80036d8:	ee17 3a90 	vmov	r3, s15
 80036dc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e4:	8bf9      	ldrh	r1, [r7, #30]
 80036e6:	2000      	movs	r0, #0
 80036e8:	4688      	mov	r8, r1
 80036ea:	4681      	mov	r9, r0
 80036ec:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80036f0:	6079      	str	r1, [r7, #4]
 80036f2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80036f6:	6039      	str	r1, [r7, #0]
 80036f8:	683c      	ldr	r4, [r7, #0]
 80036fa:	2500      	movs	r5, #0
 80036fc:	ea42 0a04 	orr.w	sl, r2, r4
 8003700:	ea43 0b05 	orr.w	fp, r3, r5
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2204      	movs	r2, #4
 800370e:	701a      	strb	r2, [r3, #0]
            }
 8003710:	bf00      	nop
 8003712:	3720      	adds	r7, #32
 8003714:	46bd      	mov	sp, r7
 8003716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800371a:	bf00      	nop
 800371c:	42c80000 	.word	0x42c80000
 8003720:	42c80000 	.word	0x42c80000
 8003724:	3c23d70a 	.word	0x3c23d70a
 8003728:	3c23d70a 	.word	0x3c23d70a

0800372c <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2048) {
 8003736:	6839      	ldr	r1, [r7, #0]
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f7fe ffb2 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800373e:	4603      	mov	r3, r0
 8003740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003744:	bf14      	ite	ne
 8003746:	2301      	movne	r3, #1
 8003748:	2300      	moveq	r3, #0
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d000      	beq.n	8003752 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x26>
                    while(1);
 8003750:	e7fe      	b.n	8003750 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003758:	f04f 0200 	mov.w	r2, #0
 800375c:	f04f 0300 	mov.w	r3, #0
 8003760:	0c02      	lsrs	r2, r0, #16
 8003762:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003766:	0c0b      	lsrs	r3, r1, #16
 8003768:	4613      	mov	r3, r2
 800376a:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 800376c:	89fb      	ldrh	r3, [r7, #14]
 800376e:	ee07 3a90 	vmov	s15, r3
 8003772:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003776:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8003788 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x5c>
 800377a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800377e:	eeb0 0a67 	vmov.f32	s0, s15
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	3c23d70a 	.word	0x3c23d70a

0800378c <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800378c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003790:	b088      	sub	sp, #32
 8003792:	af00      	add	r7, sp, #0
 8003794:	6178      	str	r0, [r7, #20]
 8003796:	6139      	str	r1, [r7, #16]
 8003798:	60fa      	str	r2, [r7, #12]
 800379a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037a2:	d302      	bcc.n	80037aa <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80037a4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80037a8:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1129);
 80037aa:	f240 4369 	movw	r3, #1129	; 0x469
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	6939      	ldr	r1, [r7, #16]
 80037b2:	6978      	ldr	r0, [r7, #20]
 80037b4:	f7fe ff4d 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c2:	69f9      	ldr	r1, [r7, #28]
 80037c4:	2000      	movs	r0, #0
 80037c6:	468a      	mov	sl, r1
 80037c8:	4683      	mov	fp, r0
 80037ca:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80037ce:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80037d2:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80037d6:	0424      	lsls	r4, r4, #16
 80037d8:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80037dc:	ea42 0104 	orr.w	r1, r2, r4
 80037e0:	6039      	str	r1, [r7, #0]
 80037e2:	432b      	orrs	r3, r5
 80037e4:	607b      	str	r3, [r7, #4]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80037ec:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2205      	movs	r2, #5
 80037f4:	701a      	strb	r2, [r3, #0]
            }
 80037f6:	bf00      	nop
 80037f8:	3720      	adds	r7, #32
 80037fa:	46bd      	mov	sp, r7
 80037fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003800 <_ZN3can7signals27SensorF_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003804:	b086      	sub	sp, #24
 8003806:	af00      	add	r7, sp, #0
 8003808:	60f8      	str	r0, [r7, #12]
 800380a:	60b9      	str	r1, [r7, #8]
 800380c:	607a      	str	r2, [r7, #4]
 800380e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1128);
 8003810:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	68b9      	ldr	r1, [r7, #8]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7fe ff1a 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2200      	movs	r2, #0
 800382c:	4698      	mov	r8, r3
 800382e:	4691      	mov	r9, r2
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800383c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003840:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003844:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003848:	2500      	movs	r5, #0
 800384a:	ea40 0a04 	orr.w	sl, r0, r4
 800384e:	ea41 0b05 	orr.w	fp, r1, r5
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2203      	movs	r2, #3
 800385c:	701a      	strb	r2, [r3, #0]
            }
 800385e:	bf00      	nop
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003868 <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800386c:	b088      	sub	sp, #32
 800386e:	af00      	add	r7, sp, #0
 8003870:	6178      	str	r0, [r7, #20]
 8003872:	6139      	str	r1, [r7, #16]
 8003874:	60fa      	str	r2, [r7, #12]
 8003876:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800387e:	d302      	bcc.n	8003886 <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003880:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003884:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1127);
 8003886:	f240 4367 	movw	r3, #1127	; 0x467
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	6939      	ldr	r1, [r7, #16]
 800388e:	6978      	ldr	r0, [r7, #20]
 8003890:	f7fe fedf 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	69f9      	ldr	r1, [r7, #28]
 80038a0:	2000      	movs	r0, #0
 80038a2:	468a      	mov	sl, r1
 80038a4:	4683      	mov	fp, r0
 80038a6:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80038aa:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80038ae:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80038b2:	0424      	lsls	r4, r4, #16
 80038b4:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80038b8:	ea42 0104 	orr.w	r1, r2, r4
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	432b      	orrs	r3, r5
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038c8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2205      	movs	r2, #5
 80038d0:	701a      	strb	r2, [r3, #0]
            }
 80038d2:	bf00      	nop
 80038d4:	3720      	adds	r7, #32
 80038d6:	46bd      	mov	sp, r7
 80038d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080038dc <_ZN3can7signals22SensorF_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80038dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e0:	b086      	sub	sp, #24
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1126);
 80038ec:	f240 4366 	movw	r3, #1126	; 0x466
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f7fe feac 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003904:	7dfb      	ldrb	r3, [r7, #23]
 8003906:	2200      	movs	r2, #0
 8003908:	4698      	mov	r8, r3
 800390a:	4691      	mov	r9, r2
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	f04f 0300 	mov.w	r3, #0
 8003914:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003918:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800391c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003920:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003924:	2500      	movs	r5, #0
 8003926:	ea40 0a04 	orr.w	sl, r0, r4
 800392a:	ea41 0b05 	orr.w	fp, r1, r5
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2203      	movs	r2, #3
 8003938:	701a      	strb	r2, [r3, #0]
            }
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003944 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b088      	sub	sp, #32
 800394a:	af00      	add	r7, sp, #0
 800394c:	6178      	str	r0, [r7, #20]
 800394e:	6139      	str	r1, [r7, #16]
 8003950:	60fa      	str	r2, [r7, #12]
 8003952:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8003954:	897b      	ldrh	r3, [r7, #10]
 8003956:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800395a:	d902      	bls.n	8003962 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 800395c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003960:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8003962:	897b      	ldrh	r3, [r7, #10]
 8003964:	2b7c      	cmp	r3, #124	; 0x7c
 8003966:	d801      	bhi.n	800396c <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8003968:	237d      	movs	r3, #125	; 0x7d
 800396a:	817b      	strh	r3, [r7, #10]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1124);
 800396c:	f240 4364 	movw	r3, #1124	; 0x464
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	6939      	ldr	r1, [r7, #16]
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f7fe fe6c 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800397a:	897b      	ldrh	r3, [r7, #10]
 800397c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003984:	8bf9      	ldrh	r1, [r7, #30]
 8003986:	2000      	movs	r0, #0
 8003988:	4688      	mov	r8, r1
 800398a:	4681      	mov	r9, r0
 800398c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003990:	6079      	str	r1, [r7, #4]
 8003992:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003996:	6039      	str	r1, [r7, #0]
 8003998:	683c      	ldr	r4, [r7, #0]
 800399a:	2500      	movs	r5, #0
 800399c:	ea42 0a04 	orr.w	sl, r2, r4
 80039a0:	ea43 0b05 	orr.w	fp, r3, r5
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2204      	movs	r2, #4
 80039ae:	701a      	strb	r2, [r3, #0]
            }
 80039b0:	bf00      	nop
 80039b2:	3720      	adds	r7, #32
 80039b4:	46bd      	mov	sp, r7
 80039b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039ba <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
 80039c2:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1124) {
 80039c4:	6839      	ldr	r1, [r7, #0]
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fe fe6b 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80039cc:	4603      	mov	r3, r0
 80039ce:	461a      	mov	r2, r3
 80039d0:	f240 4364 	movw	r3, #1124	; 0x464
 80039d4:	429a      	cmp	r2, r3
 80039d6:	bf14      	ite	ne
 80039d8:	2301      	movne	r3, #1
 80039da:	2300      	moveq	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d000      	beq.n	80039e4 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 80039e2:	e7fe      	b.n	80039e2 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039ea:	f04f 0200 	mov.w	r2, #0
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	0c02      	lsrs	r2, r0, #16
 80039f4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80039f8:	0c0b      	lsrs	r3, r1, #16
 80039fa:	4613      	mov	r3, r2
 80039fc:	81fb      	strh	r3, [r7, #14]
                return value;
 80039fe:	89fb      	ldrh	r3, [r7, #14]
            }
 8003a00:	4618      	mov	r0, r3
 8003a02:	3710      	adds	r7, #16
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003a08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a0c:	b086      	sub	sp, #24
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	60f8      	str	r0, [r7, #12]
 8003a12:	60b9      	str	r1, [r7, #8]
 8003a14:	607a      	str	r2, [r7, #4]
 8003a16:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1123);
 8003a18:	f240 4363 	movw	r3, #1123	; 0x463
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f7fe fe16 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2200      	movs	r2, #0
 8003a34:	4698      	mov	r8, r3
 8003a36:	4691      	mov	r9, r2
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003a44:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003a48:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003a4c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003a50:	2500      	movs	r5, #0
 8003a52:	ea40 0a04 	orr.w	sl, r0, r4
 8003a56:	ea41 0b05 	orr.w	fp, r1, r5
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2203      	movs	r2, #3
 8003a64:	701a      	strb	r2, [r3, #0]
            }
 8003a66:	bf00      	nop
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a70 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b084      	sub	sp, #16
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1123) {
 8003a7a:	6839      	ldr	r1, [r7, #0]
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fe fe10 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003a82:	4603      	mov	r3, r0
 8003a84:	461a      	mov	r2, r3
 8003a86:	f240 4363 	movw	r3, #1123	; 0x463
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	bf14      	ite	ne
 8003a8e:	2301      	movne	r3, #1
 8003a90:	2300      	moveq	r3, #0
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d000      	beq.n	8003a9a <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003a98:	e7fe      	b.n	8003a98 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003aa0:	f04f 0200 	mov.w	r2, #0
 8003aa4:	f04f 0300 	mov.w	r3, #0
 8003aa8:	0c02      	lsrs	r2, r0, #16
 8003aaa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003aae:	0c0b      	lsrs	r3, r1, #16
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	73fb      	strb	r3, [r7, #15]
                return value;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac4:	b088      	sub	sp, #32
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	6178      	str	r0, [r7, #20]
 8003aca:	6139      	str	r1, [r7, #16]
 8003acc:	60fa      	str	r2, [r7, #12]
 8003ace:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1122);
 8003ad0:	f240 4362 	movw	r3, #1122	; 0x462
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	6939      	ldr	r1, [r7, #16]
 8003ad8:	6978      	ldr	r0, [r7, #20]
 8003ada:	f7fe fdba 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	69f9      	ldr	r1, [r7, #28]
 8003aea:	2000      	movs	r0, #0
 8003aec:	468a      	mov	sl, r1
 8003aee:	4683      	mov	fp, r0
 8003af0:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003af4:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003af8:	480c      	ldr	r0, [pc, #48]	; (8003b2c <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 8003afa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003afe:	ea08 0400 	and.w	r4, r8, r0
 8003b02:	ea09 0501 	and.w	r5, r9, r1
 8003b06:	ea42 0104 	orr.w	r1, r2, r4
 8003b0a:	6039      	str	r1, [r7, #0]
 8003b0c:	432b      	orrs	r3, r5
 8003b0e:	607b      	str	r3, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b16:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2206      	movs	r2, #6
 8003b1e:	701a      	strb	r2, [r3, #0]
            }
 8003b20:	bf00      	nop
 8003b22:	3720      	adds	r7, #32
 8003b24:	46bd      	mov	sp, r7
 8003b26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b2a:	bf00      	nop
 8003b2c:	ffff0000 	.word	0xffff0000

08003b30 <_ZN3can7signals24SensorF_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b34:	b086      	sub	sp, #24
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	607a      	str	r2, [r7, #4]
 8003b3e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1121);
 8003b40:	f240 4361 	movw	r3, #1121	; 0x461
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	68b9      	ldr	r1, [r7, #8]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f7fe fd82 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	4698      	mov	r8, r3
 8003b5e:	4691      	mov	r9, r2
 8003b60:	f04f 0200 	mov.w	r2, #0
 8003b64:	f04f 0300 	mov.w	r3, #0
 8003b68:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003b6c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003b70:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003b74:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003b78:	2500      	movs	r5, #0
 8003b7a:	ea40 0a04 	orr.w	sl, r0, r4
 8003b7e:	ea41 0b05 	orr.w	fp, r1, r5
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	701a      	strb	r2, [r3, #0]
            }
 8003b8e:	bf00      	nop
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b98 <_ZN3can7signals24SensorF_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b9c:	b086      	sub	sp, #24
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1120);
 8003ba8:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7fe fd4e 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	4698      	mov	r8, r3
 8003bc6:	4691      	mov	r9, r2
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	f04f 0300 	mov.w	r3, #0
 8003bd0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003bd4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003bd8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003bdc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003be0:	2500      	movs	r5, #0
 8003be2:	ea40 0a04 	orr.w	sl, r0, r4
 8003be6:	ea41 0b05 	orr.w	fp, r1, r5
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	701a      	strb	r2, [r3, #0]
            }
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c00 <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c04:	b088      	sub	sp, #32
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6178      	str	r0, [r7, #20]
 8003c0a:	6139      	str	r1, [r7, #16]
 8003c0c:	60fa      	str	r2, [r7, #12]
 8003c0e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c16:	d302      	bcc.n	8003c1e <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003c18:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003c1c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1113);
 8003c1e:	f240 4359 	movw	r3, #1113	; 0x459
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	6939      	ldr	r1, [r7, #16]
 8003c26:	6978      	ldr	r0, [r7, #20]
 8003c28:	f7fe fd13 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c36:	69f9      	ldr	r1, [r7, #28]
 8003c38:	2000      	movs	r0, #0
 8003c3a:	468a      	mov	sl, r1
 8003c3c:	4683      	mov	fp, r0
 8003c3e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003c42:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003c46:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003c4a:	0424      	lsls	r4, r4, #16
 8003c4c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003c50:	ea42 0104 	orr.w	r1, r2, r4
 8003c54:	6039      	str	r1, [r7, #0]
 8003c56:	432b      	orrs	r3, r5
 8003c58:	607b      	str	r3, [r7, #4]
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c60:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2205      	movs	r2, #5
 8003c68:	701a      	strb	r2, [r3, #0]
            }
 8003c6a:	bf00      	nop
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c74 <_ZN3can7signals27SensorF_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c78:	b086      	sub	sp, #24
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	60f8      	str	r0, [r7, #12]
 8003c7e:	60b9      	str	r1, [r7, #8]
 8003c80:	607a      	str	r2, [r7, #4]
 8003c82:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1112);
 8003c84:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	68b9      	ldr	r1, [r7, #8]
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f7fe fce0 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c9c:	7dfb      	ldrb	r3, [r7, #23]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	4698      	mov	r8, r3
 8003ca2:	4691      	mov	r9, r2
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	f04f 0300 	mov.w	r3, #0
 8003cac:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003cb0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003cb4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003cb8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003cbc:	2500      	movs	r5, #0
 8003cbe:	ea40 0a04 	orr.w	sl, r0, r4
 8003cc2:	ea41 0b05 	orr.w	fp, r1, r5
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2203      	movs	r2, #3
 8003cd0:	701a      	strb	r2, [r3, #0]
            }
 8003cd2:	bf00      	nop
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003cdc <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ce0:	b088      	sub	sp, #32
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6178      	str	r0, [r7, #20]
 8003ce6:	6139      	str	r1, [r7, #16]
 8003ce8:	60fa      	str	r2, [r7, #12]
 8003cea:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cf2:	d302      	bcc.n	8003cfa <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003cf4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003cf8:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1111);
 8003cfa:	f240 4357 	movw	r3, #1111	; 0x457
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	6939      	ldr	r1, [r7, #16]
 8003d02:	6978      	ldr	r0, [r7, #20]
 8003d04:	f7fe fca5 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d12:	69f9      	ldr	r1, [r7, #28]
 8003d14:	2000      	movs	r0, #0
 8003d16:	468a      	mov	sl, r1
 8003d18:	4683      	mov	fp, r0
 8003d1a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003d1e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003d22:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003d26:	0424      	lsls	r4, r4, #16
 8003d28:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003d2c:	ea42 0104 	orr.w	r1, r2, r4
 8003d30:	6039      	str	r1, [r7, #0]
 8003d32:	432b      	orrs	r3, r5
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d3c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2205      	movs	r2, #5
 8003d44:	701a      	strb	r2, [r3, #0]
            }
 8003d46:	bf00      	nop
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003d50 <_ZN3can7signals22SensorF_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1110);
 8003d60:	f240 4356 	movw	r3, #1110	; 0x456
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68b9      	ldr	r1, [r7, #8]
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7fe fc72 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003d6e:	78fb      	ldrb	r3, [r7, #3]
 8003d70:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	4698      	mov	r8, r3
 8003d7e:	4691      	mov	r9, r2
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003d8c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003d90:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003d94:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003d98:	2500      	movs	r5, #0
 8003d9a:	ea40 0a04 	orr.w	sl, r0, r4
 8003d9e:	ea41 0b05 	orr.w	fp, r1, r5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2203      	movs	r2, #3
 8003dac:	701a      	strb	r2, [r3, #0]
            }
 8003dae:	bf00      	nop
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003db8 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dbc:	b088      	sub	sp, #32
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6178      	str	r0, [r7, #20]
 8003dc2:	6139      	str	r1, [r7, #16]
 8003dc4:	60fa      	str	r2, [r7, #12]
 8003dc6:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8003dc8:	897b      	ldrh	r3, [r7, #10]
 8003dca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dce:	d902      	bls.n	8003dd6 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd4:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8003dd6:	897b      	ldrh	r3, [r7, #10]
 8003dd8:	2b7c      	cmp	r3, #124	; 0x7c
 8003dda:	d801      	bhi.n	8003de0 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8003ddc:	237d      	movs	r3, #125	; 0x7d
 8003dde:	817b      	strh	r3, [r7, #10]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1108);
 8003de0:	f240 4354 	movw	r3, #1108	; 0x454
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	6939      	ldr	r1, [r7, #16]
 8003de8:	6978      	ldr	r0, [r7, #20]
 8003dea:	f7fe fc32 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003dee:	897b      	ldrh	r3, [r7, #10]
 8003df0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	8bf9      	ldrh	r1, [r7, #30]
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	4688      	mov	r8, r1
 8003dfe:	4681      	mov	r9, r0
 8003e00:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003e04:	6079      	str	r1, [r7, #4]
 8003e06:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003e0a:	6039      	str	r1, [r7, #0]
 8003e0c:	683c      	ldr	r4, [r7, #0]
 8003e0e:	2500      	movs	r5, #0
 8003e10:	ea42 0a04 	orr.w	sl, r2, r4
 8003e14:	ea43 0b05 	orr.w	fp, r3, r5
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2204      	movs	r2, #4
 8003e22:	701a      	strb	r2, [r3, #0]
            }
 8003e24:	bf00      	nop
 8003e26:	3720      	adds	r7, #32
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e2e <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b084      	sub	sp, #16
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
 8003e36:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1108) {
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f7fe fc31 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003e40:	4603      	mov	r3, r0
 8003e42:	461a      	mov	r2, r3
 8003e44:	f240 4354 	movw	r3, #1108	; 0x454
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d000      	beq.n	8003e58 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8003e56:	e7fe      	b.n	8003e56 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e5e:	f04f 0200 	mov.w	r2, #0
 8003e62:	f04f 0300 	mov.w	r3, #0
 8003e66:	0c02      	lsrs	r2, r0, #16
 8003e68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e6c:	0c0b      	lsrs	r3, r1, #16
 8003e6e:	4613      	mov	r3, r2
 8003e70:	81fb      	strh	r3, [r7, #14]
                return value;
 8003e72:	89fb      	ldrh	r3, [r7, #14]
            }
 8003e74:	4618      	mov	r0, r3
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]
 8003e8a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1107);
 8003e8c:	f240 4353 	movw	r3, #1107	; 0x453
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	68b9      	ldr	r1, [r7, #8]
 8003e94:	68f8      	ldr	r0, [r7, #12]
 8003e96:	f7fe fbdc 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003e9a:	78fb      	ldrb	r3, [r7, #3]
 8003e9c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	4698      	mov	r8, r3
 8003eaa:	4691      	mov	r9, r2
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003eb8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ebc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003ec0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003ec4:	2500      	movs	r5, #0
 8003ec6:	ea40 0a04 	orr.w	sl, r0, r4
 8003eca:	ea41 0b05 	orr.w	fp, r1, r5
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2203      	movs	r2, #3
 8003ed8:	701a      	strb	r2, [r3, #0]
            }
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ee4 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1107) {
 8003eee:	6839      	ldr	r1, [r7, #0]
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7fe fbd6 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f240 4353 	movw	r3, #1107	; 0x453
 8003efe:	429a      	cmp	r2, r3
 8003f00:	bf14      	ite	ne
 8003f02:	2301      	movne	r3, #1
 8003f04:	2300      	moveq	r3, #0
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d000      	beq.n	8003f0e <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003f0c:	e7fe      	b.n	8003f0c <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	0c02      	lsrs	r2, r0, #16
 8003f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003f22:	0c0b      	lsrs	r3, r1, #16
 8003f24:	4613      	mov	r3, r2
 8003f26:	73fb      	strb	r3, [r7, #15]
                return value;
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003f34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f38:	b088      	sub	sp, #32
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6178      	str	r0, [r7, #20]
 8003f3e:	6139      	str	r1, [r7, #16]
 8003f40:	60fa      	str	r2, [r7, #12]
 8003f42:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1106);
 8003f44:	f240 4352 	movw	r3, #1106	; 0x452
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	6939      	ldr	r1, [r7, #16]
 8003f4c:	6978      	ldr	r0, [r7, #20]
 8003f4e:	f7fe fb80 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5c:	69f9      	ldr	r1, [r7, #28]
 8003f5e:	2000      	movs	r0, #0
 8003f60:	468a      	mov	sl, r1
 8003f62:	4683      	mov	fp, r0
 8003f64:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003f68:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003f6c:	480c      	ldr	r0, [pc, #48]	; (8003fa0 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8003f6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003f72:	ea08 0400 	and.w	r4, r8, r0
 8003f76:	ea09 0501 	and.w	r5, r9, r1
 8003f7a:	ea42 0104 	orr.w	r1, r2, r4
 8003f7e:	6039      	str	r1, [r7, #0]
 8003f80:	432b      	orrs	r3, r5
 8003f82:	607b      	str	r3, [r7, #4]
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003f8a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2206      	movs	r2, #6
 8003f92:	701a      	strb	r2, [r3, #0]
            }
 8003f94:	bf00      	nop
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f9e:	bf00      	nop
 8003fa0:	ffff0000 	.word	0xffff0000

08003fa4 <_ZN3can7signals24SensorF_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
 8003fb2:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1105);
 8003fb4:	f240 4351 	movw	r3, #1105	; 0x451
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f7fe fb48 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003fc2:	78fb      	ldrb	r3, [r7, #3]
 8003fc4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	4698      	mov	r8, r3
 8003fd2:	4691      	mov	r9, r2
 8003fd4:	f04f 0200 	mov.w	r2, #0
 8003fd8:	f04f 0300 	mov.w	r3, #0
 8003fdc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003fe0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003fe4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003fe8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003fec:	2500      	movs	r5, #0
 8003fee:	ea40 0a04 	orr.w	sl, r0, r4
 8003ff2:	ea41 0b05 	orr.w	fp, r1, r5
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2203      	movs	r2, #3
 8004000:	701a      	strb	r2, [r3, #0]
            }
 8004002:	bf00      	nop
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800400c <_ZN3can7signals24SensorF_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800400c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004010:	b086      	sub	sp, #24
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1104);
 800401c:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f7fe fb14 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800402a:	78fb      	ldrb	r3, [r7, #3]
 800402c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	2200      	movs	r2, #0
 8004038:	4698      	mov	r8, r3
 800403a:	4691      	mov	r9, r2
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	f04f 0300 	mov.w	r3, #0
 8004044:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004048:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800404c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004050:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004054:	2500      	movs	r5, #0
 8004056:	ea40 0a04 	orr.w	sl, r0, r4
 800405a:	ea41 0b05 	orr.w	fp, r1, r5
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2203      	movs	r2, #3
 8004068:	701a      	strb	r2, [r3, #0]
            }
 800406a:	bf00      	nop
 800406c:	3718      	adds	r7, #24
 800406e:	46bd      	mov	sp, r7
 8004070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004074 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004078:	b088      	sub	sp, #32
 800407a:	af00      	add	r7, sp, #0
 800407c:	6178      	str	r0, [r7, #20]
 800407e:	6139      	str	r1, [r7, #16]
 8004080:	60fa      	str	r2, [r7, #12]
 8004082:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800408a:	d302      	bcc.n	8004092 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 800408c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004090:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1073);
 8004092:	f240 4331 	movw	r3, #1073	; 0x431
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	6939      	ldr	r1, [r7, #16]
 800409a:	6978      	ldr	r0, [r7, #20]
 800409c:	f7fe fad9 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	69f9      	ldr	r1, [r7, #28]
 80040ac:	2000      	movs	r0, #0
 80040ae:	468a      	mov	sl, r1
 80040b0:	4683      	mov	fp, r0
 80040b2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80040b6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80040ba:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80040be:	0424      	lsls	r4, r4, #16
 80040c0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80040c4:	ea42 0104 	orr.w	r1, r2, r4
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	432b      	orrs	r3, r5
 80040cc:	607b      	str	r3, [r7, #4]
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040d4:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2205      	movs	r2, #5
 80040dc:	701a      	strb	r2, [r3, #0]
            }
 80040de:	bf00      	nop
 80040e0:	3720      	adds	r7, #32
 80040e2:	46bd      	mov	sp, r7
 80040e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080040e8 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80040e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ec:	b088      	sub	sp, #32
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6178      	str	r0, [r7, #20]
 80040f2:	6139      	str	r1, [r7, #16]
 80040f4:	60fa      	str	r2, [r7, #12]
 80040f6:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1072);
 80040f8:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	6939      	ldr	r1, [r7, #16]
 8004100:	6978      	ldr	r0, [r7, #20]
 8004102:	f7fe faa6 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	69f9      	ldr	r1, [r7, #28]
 8004112:	2000      	movs	r0, #0
 8004114:	468a      	mov	sl, r1
 8004116:	4683      	mov	fp, r0
 8004118:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800411c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8004120:	480c      	ldr	r0, [pc, #48]	; (8004154 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm+0x6c>)
 8004122:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004126:	ea08 0400 	and.w	r4, r8, r0
 800412a:	ea09 0501 	and.w	r5, r9, r1
 800412e:	ea42 0104 	orr.w	r1, r2, r4
 8004132:	6039      	str	r1, [r7, #0]
 8004134:	432b      	orrs	r3, r5
 8004136:	607b      	str	r3, [r7, #4]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800413e:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2206      	movs	r2, #6
 8004146:	701a      	strb	r2, [r3, #0]
            }
 8004148:	bf00      	nop
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004152:	bf00      	nop
 8004154:	ffff0000 	.word	0xffff0000

08004158 <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8004158:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800415c:	b086      	sub	sp, #24
 800415e:	af00      	add	r7, sp, #0
 8004160:	60f8      	str	r0, [r7, #12]
 8004162:	60b9      	str	r1, [r7, #8]
 8004164:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8004166:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800416a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800416e:	d305      	bcc.n	800417c <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8004170:	f04f 32ff 	mov.w	r2, #4294967295
 8004174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004178:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1057);
 800417c:	f240 4321 	movw	r3, #1057	; 0x421
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7fe fa64 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 800418a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800418e:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004198:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800419c:	f04f 0200 	mov.w	r2, #0
 80041a0:	f04f 0300 	mov.w	r3, #0
 80041a4:	040b      	lsls	r3, r1, #16
 80041a6:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80041aa:	0402      	lsls	r2, r0, #16
 80041ac:	ea48 0402 	orr.w	r4, r8, r2
 80041b0:	ea49 0503 	orr.w	r5, r9, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2208      	movs	r2, #8
 80041be:	701a      	strb	r2, [r3, #0]
            }
 80041c0:	bf00      	nop
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080041ca <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 80041ca:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	607a      	str	r2, [r7, #4]
                if (value > max) {
 80041d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d305      	bcc.n	80041ee <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 80041e2:	f04f 32ff 	mov.w	r2, #4294967295
 80041e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041ea:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1056);
 80041ee:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7fe fa2b 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 80041fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004200:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	e9d3 8900 	ldrd	r8, r9, [r3]
 800420a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	040b      	lsls	r3, r1, #16
 8004218:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 800421c:	0402      	lsls	r2, r0, #16
 800421e:	ea48 0402 	orr.w	r4, r8, r2
 8004222:	ea49 0503 	orr.w	r5, r9, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2208      	movs	r2, #8
 8004230:	701a      	strb	r2, [r3, #0]
            }
 8004232:	bf00      	nop
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800423c <_ZN3can7signals17SensorF_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800423c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	607a      	str	r2, [r7, #4]
 800424a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1046);
 800424c:	f240 4316 	movw	r3, #1046	; 0x416
 8004250:	687a      	ldr	r2, [r7, #4]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7fe f9fc 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800425a:	78fb      	ldrb	r3, [r7, #3]
 800425c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004264:	7dfb      	ldrb	r3, [r7, #23]
 8004266:	2200      	movs	r2, #0
 8004268:	4698      	mov	r8, r3
 800426a:	4691      	mov	r9, r2
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004278:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800427c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004280:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004284:	2500      	movs	r5, #0
 8004286:	ea40 0a04 	orr.w	sl, r0, r4
 800428a:	ea41 0b05 	orr.w	fp, r1, r5
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2203      	movs	r2, #3
 8004298:	701a      	strb	r2, [r3, #0]
            }
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042a4 <_ZN3can7signals16SensorF_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80042a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a8:	b086      	sub	sp, #24
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	607a      	str	r2, [r7, #4]
 80042b2:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1045);
 80042b4:	f240 4315 	movw	r3, #1045	; 0x415
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f7fe f9c8 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
 80042ce:	2200      	movs	r2, #0
 80042d0:	4698      	mov	r8, r3
 80042d2:	4691      	mov	r9, r2
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80042e0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80042e4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80042e8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80042ec:	2500      	movs	r5, #0
 80042ee:	ea40 0a04 	orr.w	sl, r0, r4
 80042f2:	ea41 0b05 	orr.w	fp, r1, r5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2203      	movs	r2, #3
 8004300:	701a      	strb	r2, [r3, #0]
            }
 8004302:	bf00      	nop
 8004304:	3718      	adds	r7, #24
 8004306:	46bd      	mov	sp, r7
 8004308:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800430c <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800430c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004310:	b088      	sub	sp, #32
 8004312:	af00      	add	r7, sp, #0
 8004314:	6178      	str	r0, [r7, #20]
 8004316:	6139      	str	r1, [r7, #16]
 8004318:	60fa      	str	r2, [r7, #12]
 800431a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004322:	d302      	bcc.n	800432a <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8004324:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004328:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1044);
 800432a:	f240 4314 	movw	r3, #1044	; 0x414
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	6939      	ldr	r1, [r7, #16]
 8004332:	6978      	ldr	r0, [r7, #20]
 8004334:	f7fe f98d 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	69f9      	ldr	r1, [r7, #28]
 8004344:	2000      	movs	r0, #0
 8004346:	468a      	mov	sl, r1
 8004348:	4683      	mov	fp, r0
 800434a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800434e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8004352:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8004356:	0424      	lsls	r4, r4, #16
 8004358:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 800435c:	ea42 0104 	orr.w	r1, r2, r4
 8004360:	6039      	str	r1, [r7, #0]
 8004362:	432b      	orrs	r3, r5
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	e9d7 1200 	ldrd	r1, r2, [r7]
 800436c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2205      	movs	r2, #5
 8004374:	701a      	strb	r2, [r3, #0]
            }
 8004376:	bf00      	nop
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004380 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b088      	sub	sp, #32
 8004386:	af00      	add	r7, sp, #0
 8004388:	6178      	str	r0, [r7, #20]
 800438a:	6139      	str	r1, [r7, #16]
 800438c:	60fa      	str	r2, [r7, #12]
 800438e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8004392:	edd7 7a02 	vldr	s15, [r7, #8]
 8004396:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004428 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xa8>
 800439a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a2:	dd01      	ble.n	80043a8 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 80043a4:	4b21      	ldr	r3, [pc, #132]	; (800442c <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xac>)
 80043a6:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80043a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80043ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b4:	d502      	bpl.n	80043bc <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1043);
 80043bc:	f240 4313 	movw	r3, #1043	; 0x413
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	6939      	ldr	r1, [r7, #16]
 80043c4:	6978      	ldr	r0, [r7, #20]
 80043c6:	f7fe f944 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 80043ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80043ce:	eddf 6a18 	vldr	s13, [pc, #96]	; 8004430 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xb0>
 80043d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80043d6:	eeb0 0a47 	vmov.f32	s0, s14
 80043da:	f7fd fff8 	bl	80023ce <_ZSt5roundf>
 80043de:	eef0 7a40 	vmov.f32	s15, s0
 80043e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e6:	ee17 3a90 	vmov	r3, s15
 80043ea:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f2:	8bf9      	ldrh	r1, [r7, #30]
 80043f4:	2000      	movs	r0, #0
 80043f6:	4688      	mov	r8, r1
 80043f8:	4681      	mov	r9, r0
 80043fa:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80043fe:	6079      	str	r1, [r7, #4]
 8004400:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004404:	6039      	str	r1, [r7, #0]
 8004406:	683c      	ldr	r4, [r7, #0]
 8004408:	2500      	movs	r5, #0
 800440a:	ea42 0a04 	orr.w	sl, r2, r4
 800440e:	ea43 0b05 	orr.w	fp, r3, r5
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2204      	movs	r2, #4
 800441c:	701a      	strb	r2, [r3, #0]
            }
 800441e:	bf00      	nop
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004428:	428311ec 	.word	0x428311ec
 800442c:	428311ec 	.word	0x428311ec
 8004430:	3a83126f 	.word	0x3a83126f

08004434 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004438:	b088      	sub	sp, #32
 800443a:	af00      	add	r7, sp, #0
 800443c:	6178      	str	r0, [r7, #20]
 800443e:	6139      	str	r1, [r7, #16]
 8004440:	60fa      	str	r2, [r7, #12]
 8004442:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8004446:	edd7 7a02 	vldr	s15, [r7, #8]
 800444a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80044e8 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xb4>
 800444e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004456:	dd01      	ble.n	800445c <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 8004458:	4b24      	ldr	r3, [pc, #144]	; (80044ec <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 800445a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800445c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004460:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8004464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446c:	d501      	bpl.n	8004472 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 800446e:	4b20      	ldr	r3, [pc, #128]	; (80044f0 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 8004470:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1042);
 8004472:	f240 4312 	movw	r3, #1042	; 0x412
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	6939      	ldr	r1, [r7, #16]
 800447a:	6978      	ldr	r0, [r7, #20]
 800447c:	f7fe f8e9 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 8004480:	edd7 7a02 	vldr	s15, [r7, #8]
 8004484:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8004488:	ee77 7a87 	vadd.f32	s15, s15, s14
 800448c:	eddf 6a19 	vldr	s13, [pc, #100]	; 80044f4 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xc0>
 8004490:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004494:	eeb0 0a47 	vmov.f32	s0, s14
 8004498:	f7fd ff99 	bl	80023ce <_ZSt5roundf>
 800449c:	eef0 7a40 	vmov.f32	s15, s0
 80044a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044a4:	ee17 3a90 	vmov	r3, s15
 80044a8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b0:	8bf9      	ldrh	r1, [r7, #30]
 80044b2:	2000      	movs	r0, #0
 80044b4:	4688      	mov	r8, r1
 80044b6:	4681      	mov	r9, r0
 80044b8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80044bc:	6079      	str	r1, [r7, #4]
 80044be:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80044c2:	6039      	str	r1, [r7, #0]
 80044c4:	683c      	ldr	r4, [r7, #0]
 80044c6:	2500      	movs	r5, #0
 80044c8:	ea42 0a04 	orr.w	sl, r2, r4
 80044cc:	ea43 0b05 	orr.w	fp, r3, r5
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2204      	movs	r2, #4
 80044da:	701a      	strb	r2, [r3, #0]
            }
 80044dc:	bf00      	nop
 80044de:	3720      	adds	r7, #32
 80044e0:	46bd      	mov	sp, r7
 80044e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044e6:	bf00      	nop
 80044e8:	441c5666 	.word	0x441c5666
 80044ec:	441c5666 	.word	0x441c5666
 80044f0:	c1f00000 	.word	0xc1f00000
 80044f4:	3c23d70a 	.word	0x3c23d70a

080044f8 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80044f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044fc:	b088      	sub	sp, #32
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6178      	str	r0, [r7, #20]
 8004502:	6139      	str	r1, [r7, #16]
 8004504:	60fa      	str	r2, [r7, #12]
 8004506:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4a16      	ldr	r2, [pc, #88]	; (8004564 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x6c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d901      	bls.n	8004514 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 8004510:	4b14      	ldr	r3, [pc, #80]	; (8004564 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x6c>)
 8004512:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1041);
 8004514:	f240 4311 	movw	r3, #1041	; 0x411
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	6939      	ldr	r1, [r7, #16]
 800451c:	6978      	ldr	r0, [r7, #20]
 800451e:	f7fe f898 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	089b      	lsrs	r3, r3, #2
 8004526:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800452e:	69f9      	ldr	r1, [r7, #28]
 8004530:	2000      	movs	r0, #0
 8004532:	4688      	mov	r8, r1
 8004534:	4681      	mov	r9, r0
 8004536:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800453a:	6079      	str	r1, [r7, #4]
 800453c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	683c      	ldr	r4, [r7, #0]
 8004544:	2500      	movs	r5, #0
 8004546:	ea42 0a04 	orr.w	sl, r2, r4
 800454a:	ea43 0b05 	orr.w	fp, r3, r5
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2204      	movs	r2, #4
 8004558:	701a      	strb	r2, [r3, #0]
            }
 800455a:	bf00      	nop
 800455c:	3720      	adds	r7, #32
 800455e:	46bd      	mov	sp, r7
 8004560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004564:	0003fffc 	.word	0x0003fffc

08004568 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800456c:	b088      	sub	sp, #32
 800456e:	af00      	add	r7, sp, #0
 8004570:	6178      	str	r0, [r7, #20]
 8004572:	6139      	str	r1, [r7, #16]
 8004574:	60fa      	str	r2, [r7, #12]
 8004576:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800457a:	edd7 7a02 	vldr	s15, [r7, #8]
 800457e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800461c <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0xb4>
 8004582:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458a:	dd01      	ble.n	8004590 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 800458c:	4b24      	ldr	r3, [pc, #144]	; (8004620 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 800458e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8004590:	edd7 7a02 	vldr	s15, [r7, #8]
 8004594:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800459c:	d502      	bpl.n	80045a4 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 800459e:	f04f 0300 	mov.w	r3, #0
 80045a2:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1040);
 80045a4:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	6939      	ldr	r1, [r7, #16]
 80045ac:	6978      	ldr	r0, [r7, #20]
 80045ae:	f7fe f850 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 80045b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80045b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80045ba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80045be:	eeb0 0a47 	vmov.f32	s0, s14
 80045c2:	f7fd ff04 	bl	80023ce <_ZSt5roundf>
 80045c6:	eef0 7a40 	vmov.f32	s15, s0
 80045ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045ce:	edc7 7a01 	vstr	s15, [r7, #4]
 80045d2:	793b      	ldrb	r3, [r7, #4]
 80045d4:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045dc:	7ffb      	ldrb	r3, [r7, #31]
 80045de:	2200      	movs	r2, #0
 80045e0:	4698      	mov	r8, r3
 80045e2:	4691      	mov	r9, r2
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80045f0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80045f4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80045f8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80045fc:	2500      	movs	r5, #0
 80045fe:	ea40 0a04 	orr.w	sl, r0, r4
 8004602:	ea41 0b05 	orr.w	fp, r1, r5
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2203      	movs	r2, #3
 8004610:	701a      	strb	r2, [r3, #0]
            }
 8004612:	bf00      	nop
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461c:	42c80000 	.word	0x42c80000
 8004620:	42c80000 	.word	0x42c80000

08004624 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004628:	b088      	sub	sp, #32
 800462a:	af00      	add	r7, sp, #0
 800462c:	6178      	str	r0, [r7, #20]
 800462e:	6139      	str	r1, [r7, #16]
 8004630:	60fa      	str	r2, [r7, #12]
 8004632:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 33);
 8004634:	2321      	movs	r3, #33	; 0x21
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	6939      	ldr	r1, [r7, #16]
 800463a:	6978      	ldr	r0, [r7, #20]
 800463c:	f7fe f809 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004640:	897b      	ldrh	r3, [r7, #10]
 8004642:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800464a:	8bf9      	ldrh	r1, [r7, #30]
 800464c:	2000      	movs	r0, #0
 800464e:	4688      	mov	r8, r1
 8004650:	4681      	mov	r9, r0
 8004652:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004656:	6079      	str	r1, [r7, #4]
 8004658:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800465c:	6039      	str	r1, [r7, #0]
 800465e:	683c      	ldr	r4, [r7, #0]
 8004660:	2500      	movs	r5, #0
 8004662:	ea42 0a04 	orr.w	sl, r2, r4
 8004666:	ea43 0b05 	orr.w	fp, r3, r5
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2204      	movs	r2, #4
 8004674:	701a      	strb	r2, [r3, #0]
            }
 8004676:	bf00      	nop
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004680 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 33) {
 800468a:	6839      	ldr	r1, [r7, #0]
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7fe f808 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004692:	4603      	mov	r3, r0
 8004694:	2b21      	cmp	r3, #33	; 0x21
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d000      	beq.n	80046a4 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 80046a2:	e7fe      	b.n	80046a2 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046aa:	f04f 0200 	mov.w	r2, #0
 80046ae:	f04f 0300 	mov.w	r3, #0
 80046b2:	0c02      	lsrs	r2, r0, #16
 80046b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80046b8:	0c0b      	lsrs	r3, r1, #16
 80046ba:	4613      	mov	r3, r2
 80046bc:	81fb      	strh	r3, [r7, #14]
                return value;
 80046be:	89fb      	ldrh	r3, [r7, #14]
            }
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80046c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 32);
 80046d8:	2320      	movs	r3, #32
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7fd ffb7 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046ee:	7dfb      	ldrb	r3, [r7, #23]
 80046f0:	2200      	movs	r2, #0
 80046f2:	4698      	mov	r8, r3
 80046f4:	4691      	mov	r9, r2
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004702:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004706:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800470a:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800470e:	2500      	movs	r5, #0
 8004710:	ea40 0a04 	orr.w	sl, r0, r4
 8004714:	ea41 0b05 	orr.w	fp, r1, r5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2203      	movs	r2, #3
 8004722:	701a      	strb	r2, [r3, #0]
            }
 8004724:	bf00      	nop
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800472e <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800472e:	b580      	push	{r7, lr}
 8004730:	b084      	sub	sp, #16
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 32) {
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fd ffb1 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004740:	4603      	mov	r3, r0
 8004742:	2b20      	cmp	r3, #32
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d000      	beq.n	8004752 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 8004750:	e7fe      	b.n	8004750 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	0c02      	lsrs	r2, r0, #16
 8004762:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004766:	0c0b      	lsrs	r3, r1, #16
 8004768:	4613      	mov	r3, r2
 800476a:	73fb      	strb	r3, [r7, #15]
                return value;
 800476c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004776:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800477a:	b088      	sub	sp, #32
 800477c:	af00      	add	r7, sp, #0
 800477e:	6178      	str	r0, [r7, #20]
 8004780:	6139      	str	r1, [r7, #16]
 8004782:	60fa      	str	r2, [r7, #12]
 8004784:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 16);
 8004786:	2310      	movs	r3, #16
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	6939      	ldr	r1, [r7, #16]
 800478c:	6978      	ldr	r0, [r7, #20]
 800478e:	f7fd ff60 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	8bf9      	ldrh	r1, [r7, #30]
 800479e:	2000      	movs	r0, #0
 80047a0:	4688      	mov	r8, r1
 80047a2:	4681      	mov	r9, r0
 80047a4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80047a8:	6079      	str	r1, [r7, #4]
 80047aa:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80047ae:	6039      	str	r1, [r7, #0]
 80047b0:	683c      	ldr	r4, [r7, #0]
 80047b2:	2500      	movs	r5, #0
 80047b4:	ea42 0a04 	orr.w	sl, r2, r4
 80047b8:	ea43 0b05 	orr.w	fp, r3, r5
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2204      	movs	r2, #4
 80047c6:	701a      	strb	r2, [r3, #0]
            }
 80047c8:	bf00      	nop
 80047ca:	3720      	adds	r7, #32
 80047cc:	46bd      	mov	sp, r7
 80047ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080047d2 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80047d2:	b580      	push	{r7, lr}
 80047d4:	b084      	sub	sp, #16
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
 80047da:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 16) {
 80047dc:	6839      	ldr	r1, [r7, #0]
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fd ff5f 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80047e4:	4603      	mov	r3, r0
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	bf14      	ite	ne
 80047ea:	2301      	movne	r3, #1
 80047ec:	2300      	moveq	r3, #0
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d000      	beq.n	80047f6 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 80047f4:	e7fe      	b.n	80047f4 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80047fc:	f04f 0200 	mov.w	r2, #0
 8004800:	f04f 0300 	mov.w	r3, #0
 8004804:	0c02      	lsrs	r2, r0, #16
 8004806:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800480a:	0c0b      	lsrs	r3, r1, #16
 800480c:	4613      	mov	r3, r2
 800480e:	81fb      	strh	r3, [r7, #14]
                return value;
 8004810:	89fb      	ldrh	r3, [r7, #14]
            }
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <_ZN3can7signals21SensorF_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800481a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6178      	str	r0, [r7, #20]
 8004824:	6139      	str	r1, [r7, #16]
 8004826:	60fa      	str	r2, [r7, #12]
 8004828:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 5);
 800482a:	2305      	movs	r3, #5
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	6939      	ldr	r1, [r7, #16]
 8004830:	6978      	ldr	r0, [r7, #20]
 8004832:	f7fd ff0e 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004836:	897b      	ldrh	r3, [r7, #10]
 8004838:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	8bf9      	ldrh	r1, [r7, #30]
 8004842:	2000      	movs	r0, #0
 8004844:	4688      	mov	r8, r1
 8004846:	4681      	mov	r9, r0
 8004848:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800484c:	6079      	str	r1, [r7, #4]
 800484e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004852:	6039      	str	r1, [r7, #0]
 8004854:	683c      	ldr	r4, [r7, #0]
 8004856:	2500      	movs	r5, #0
 8004858:	ea42 0a04 	orr.w	sl, r2, r4
 800485c:	ea43 0b05 	orr.w	fp, r3, r5
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2204      	movs	r2, #4
 800486a:	701a      	strb	r2, [r3, #0]
            }
 800486c:	bf00      	nop
 800486e:	3720      	adds	r7, #32
 8004870:	46bd      	mov	sp, r7
 8004872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004876 <_ZN3can7signals23SensorF_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004876:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800487a:	b088      	sub	sp, #32
 800487c:	af00      	add	r7, sp, #0
 800487e:	6178      	str	r0, [r7, #20]
 8004880:	6139      	str	r1, [r7, #16]
 8004882:	60fa      	str	r2, [r7, #12]
 8004884:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 4);
 8004886:	2304      	movs	r3, #4
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	6939      	ldr	r1, [r7, #16]
 800488c:	6978      	ldr	r0, [r7, #20]
 800488e:	f7fd fee0 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004892:	897b      	ldrh	r3, [r7, #10]
 8004894:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	8bf9      	ldrh	r1, [r7, #30]
 800489e:	2000      	movs	r0, #0
 80048a0:	4688      	mov	r8, r1
 80048a2:	4681      	mov	r9, r0
 80048a4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80048a8:	6079      	str	r1, [r7, #4]
 80048aa:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80048ae:	6039      	str	r1, [r7, #0]
 80048b0:	683c      	ldr	r4, [r7, #0]
 80048b2:	2500      	movs	r5, #0
 80048b4:	ea42 0a04 	orr.w	sl, r2, r4
 80048b8:	ea43 0b05 	orr.w	fp, r3, r5
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2204      	movs	r2, #4
 80048c6:	701a      	strb	r2, [r3, #0]
            }
 80048c8:	bf00      	nop
 80048ca:	3720      	adds	r7, #32
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080048d2 <_ZN3can7signals26SensorF_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80048d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d6:	b088      	sub	sp, #32
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6178      	str	r0, [r7, #20]
 80048dc:	6139      	str	r1, [r7, #16]
 80048de:	60fa      	str	r2, [r7, #12]
 80048e0:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3);
 80048e2:	2303      	movs	r3, #3
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	6939      	ldr	r1, [r7, #16]
 80048e8:	6978      	ldr	r0, [r7, #20]
 80048ea:	f7fd feb2 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80048ee:	897b      	ldrh	r3, [r7, #10]
 80048f0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f8:	8bf9      	ldrh	r1, [r7, #30]
 80048fa:	2000      	movs	r0, #0
 80048fc:	4688      	mov	r8, r1
 80048fe:	4681      	mov	r9, r0
 8004900:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004904:	6079      	str	r1, [r7, #4]
 8004906:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800490a:	6039      	str	r1, [r7, #0]
 800490c:	683c      	ldr	r4, [r7, #0]
 800490e:	2500      	movs	r5, #0
 8004910:	ea42 0a04 	orr.w	sl, r2, r4
 8004914:	ea43 0b05 	orr.w	fp, r3, r5
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2204      	movs	r2, #4
 8004922:	701a      	strb	r2, [r3, #0]
            }
 8004924:	bf00      	nop
 8004926:	3720      	adds	r7, #32
 8004928:	46bd      	mov	sp, r7
 800492a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800492e <_ZN3can7signals21SensorF_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800492e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2);
 800493e:	2302      	movs	r3, #2
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68b9      	ldr	r1, [r7, #8]
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f7fd fe84 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800494a:	78fb      	ldrb	r3, [r7, #3]
 800494c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2200      	movs	r2, #0
 8004958:	4698      	mov	r8, r3
 800495a:	4691      	mov	r9, r2
 800495c:	f04f 0200 	mov.w	r2, #0
 8004960:	f04f 0300 	mov.w	r3, #0
 8004964:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004968:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800496c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004970:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004974:	2500      	movs	r5, #0
 8004976:	ea40 0a04 	orr.w	sl, r0, r4
 800497a:	ea41 0b05 	orr.w	fp, r1, r5
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2203      	movs	r2, #3
 8004988:	701a      	strb	r2, [r3, #0]
            }
 800498a:	bf00      	nop
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004994 <_ZN3can7signals17SensorF_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004998:	b086      	sub	sp, #24
 800499a:	af00      	add	r7, sp, #0
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	607a      	str	r2, [r7, #4]
 80049a2:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1);
 80049a4:	2301      	movs	r3, #1
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	68b9      	ldr	r1, [r7, #8]
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7fd fe51 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049ba:	7dfb      	ldrb	r3, [r7, #23]
 80049bc:	2200      	movs	r2, #0
 80049be:	4698      	mov	r8, r3
 80049c0:	4691      	mov	r9, r2
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80049ce:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80049d2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80049d6:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80049da:	2500      	movs	r5, #0
 80049dc:	ea40 0a04 	orr.w	sl, r0, r4
 80049e0:	ea41 0b05 	orr.w	fp, r1, r5
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2203      	movs	r2, #3
 80049ee:	701a      	strb	r2, [r3, #0]
            }
 80049f0:	bf00      	nop
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080049fa <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b086      	sub	sp, #24
 80049fe:	af02      	add	r7, sp, #8
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	607a      	str	r2, [r7, #4]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	9300      	str	r3, [sp, #0]
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	2202      	movs	r2, #2
 8004a10:	f240 6101 	movw	r1, #1537	; 0x601
 8004a14:	f7fd fceb 	bl	80023ee <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8004a1c:	f240 6201 	movw	r2, #1537	; 0x601
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d000      	beq.n	8004a26 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8004a24:	e7fe      	b.n	8004a24 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
 8004a3a:	6839      	ldr	r1, [r7, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	331c      	adds	r3, #28
 8004a40:	461a      	mov	r2, r3
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff ffd9 	bl	80049fa <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b08a      	sub	sp, #40	; 0x28
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SensorF_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 8004a5a:	f107 0308 	add.w	r3, r7, #8
 8004a5e:	6879      	ldr	r1, [r7, #4]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff ffe5 	bl	8004a30 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SensorF_SDO_ID>();
 8004a66:	f107 0308 	add.w	r3, r7, #8
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f002 fdec 	bl	8007648 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>
 8004a70:	4603      	mov	r3, r0
 8004a72:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8004a74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 f814 	bl	8004aa4 <_Z31handleSDORequestDownloadBySDOIDt>
}
 8004a7c:	bf00      	nop
 8004a7e:	3728      	adds	r7, #40	; 0x28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2208      	movs	r2, #8
 8004a92:	f240 5181 	movw	r1, #1409	; 0x581
 8004a96:	f7fc fa79 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b092      	sub	sp, #72	; 0x48
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SensorF_SDO_Resp> msgSdoResp;
 8004aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7ff ffe6 	bl	8004a84 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SensorF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8004abe:	88fb      	ldrh	r3, [r7, #6]
 8004ac0:	f640 5201 	movw	r2, #3329	; 0xd01
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	f000 84e9 	beq.w	800549c <_Z31handleSDORequestDownloadBySDOIDt+0x9f8>
 8004aca:	f640 5201 	movw	r2, #3329	; 0xd01
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	f300 84f3 	bgt.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004ad4:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004ad8:	f000 84d1 	beq.w	800547e <_Z31handleSDORequestDownloadBySDOIDt+0x9da>
 8004adc:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004ae0:	f300 84eb 	bgt.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004ae4:	f640 4201 	movw	r2, #3073	; 0xc01
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	f000 84ba 	beq.w	8005462 <_Z31handleSDORequestDownloadBySDOIDt+0x9be>
 8004aee:	f640 4201 	movw	r2, #3073	; 0xc01
 8004af2:	4293      	cmp	r3, r2
 8004af4:	f300 84e1 	bgt.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004af8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004afc:	f000 84a3 	beq.w	8005446 <_Z31handleSDORequestDownloadBySDOIDt+0x9a2>
 8004b00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b04:	f300 84d9 	bgt.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004b08:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004b0c:	f000 848c 	beq.w	8005428 <_Z31handleSDORequestDownloadBySDOIDt+0x984>
 8004b10:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004b14:	f300 84d1 	bgt.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004b18:	f640 2233 	movw	r2, #2611	; 0xa33
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	f300 84cc 	bgt.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004b22:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8004b26:	da16      	bge.n	8004b56 <_Z31handleSDORequestDownloadBySDOIDt+0xb2>
 8004b28:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8004b2c:	f300 84c5 	bgt.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004b30:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004b34:	da40      	bge.n	8004bb8 <_Z31handleSDORequestDownloadBySDOIDt+0x114>
 8004b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3a:	f000 8374 	beq.w	8005226 <_Z31handleSDORequestDownloadBySDOIDt+0x782>
 8004b3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b42:	f300 84ba 	bgt.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004b46:	2b21      	cmp	r3, #33	; 0x21
 8004b48:	f300 8166 	bgt.w	8004e18 <_Z31handleSDORequestDownloadBySDOIDt+0x374>
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	f300 8119 	bgt.w	8004d84 <_Z31handleSDORequestDownloadBySDOIDt+0x2e0>
 8004b52:	f000 bcb2 	b.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004b56:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8004b5a:	2b13      	cmp	r3, #19
 8004b5c:	f200 84ad 	bhi.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004b60:	a201      	add	r2, pc, #4	; (adr r2, 8004b68 <_Z31handleSDORequestDownloadBySDOIDt+0xc4>)
 8004b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b66:	bf00      	nop
 8004b68:	080052ff 	.word	0x080052ff
 8004b6c:	080054bb 	.word	0x080054bb
 8004b70:	080054bb 	.word	0x080054bb
 8004b74:	080054bb 	.word	0x080054bb
 8004b78:	080054bb 	.word	0x080054bb
 8004b7c:	0800531b 	.word	0x0800531b
 8004b80:	08005339 	.word	0x08005339
 8004b84:	08005357 	.word	0x08005357
 8004b88:	08005375 	.word	0x08005375
 8004b8c:	08005393 	.word	0x08005393
 8004b90:	080054bb 	.word	0x080054bb
 8004b94:	080054bb 	.word	0x080054bb
 8004b98:	080054bb 	.word	0x080054bb
 8004b9c:	080054bb 	.word	0x080054bb
 8004ba0:	080054bb 	.word	0x080054bb
 8004ba4:	080054bb 	.word	0x080054bb
 8004ba8:	080053b1 	.word	0x080053b1
 8004bac:	080053cf 	.word	0x080053cf
 8004bb0:	080053ed 	.word	0x080053ed
 8004bb4:	0800540b 	.word	0x0800540b
 8004bb8:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	f200 847c 	bhi.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004bc2:	a201      	add	r2, pc, #4	; (adr r2, 8004bc8 <_Z31handleSDORequestDownloadBySDOIDt+0x124>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08005245 	.word	0x08005245
 8004bcc:	08005261 	.word	0x08005261
 8004bd0:	0800527d 	.word	0x0800527d
 8004bd4:	08005299 	.word	0x08005299
 8004bd8:	080052b5 	.word	0x080052b5
 8004bdc:	080052d3 	.word	0x080052d3
 8004be0:	080054bb 	.word	0x080054bb
 8004be4:	080054bb 	.word	0x080054bb
 8004be8:	080054bb 	.word	0x080054bb
 8004bec:	080054bb 	.word	0x080054bb
 8004bf0:	080054bb 	.word	0x080054bb
 8004bf4:	080054bb 	.word	0x080054bb
 8004bf8:	080054bb 	.word	0x080054bb
 8004bfc:	080054bb 	.word	0x080054bb
 8004c00:	080054bb 	.word	0x080054bb
 8004c04:	080054bb 	.word	0x080054bb
 8004c08:	080052e9 	.word	0x080052e9
 8004c0c:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004c10:	2b59      	cmp	r3, #89	; 0x59
 8004c12:	f200 8452 	bhi.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004c16:	a201      	add	r2, pc, #4	; (adr r2, 8004c1c <_Z31handleSDORequestDownloadBySDOIDt+0x178>)
 8004c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c1c:	08004f0d 	.word	0x08004f0d
 8004c20:	08004f2b 	.word	0x08004f2b
 8004c24:	08004f45 	.word	0x08004f45
 8004c28:	08004f63 	.word	0x08004f63
 8004c2c:	08004f81 	.word	0x08004f81
 8004c30:	08004f9b 	.word	0x08004f9b
 8004c34:	08004fb7 	.word	0x08004fb7
 8004c38:	080054bb 	.word	0x080054bb
 8004c3c:	080054bb 	.word	0x080054bb
 8004c40:	080054bb 	.word	0x080054bb
 8004c44:	080054bb 	.word	0x080054bb
 8004c48:	080054bb 	.word	0x080054bb
 8004c4c:	080054bb 	.word	0x080054bb
 8004c50:	080054bb 	.word	0x080054bb
 8004c54:	080054bb 	.word	0x080054bb
 8004c58:	080054bb 	.word	0x080054bb
 8004c5c:	08004fd3 	.word	0x08004fd3
 8004c60:	08004fed 	.word	0x08004fed
 8004c64:	080054bb 	.word	0x080054bb
 8004c68:	080054bb 	.word	0x080054bb
 8004c6c:	080054bb 	.word	0x080054bb
 8004c70:	080054bb 	.word	0x080054bb
 8004c74:	080054bb 	.word	0x080054bb
 8004c78:	080054bb 	.word	0x080054bb
 8004c7c:	080054bb 	.word	0x080054bb
 8004c80:	080054bb 	.word	0x080054bb
 8004c84:	080054bb 	.word	0x080054bb
 8004c88:	080054bb 	.word	0x080054bb
 8004c8c:	080054bb 	.word	0x080054bb
 8004c90:	080054bb 	.word	0x080054bb
 8004c94:	080054bb 	.word	0x080054bb
 8004c98:	080054bb 	.word	0x080054bb
 8004c9c:	08005007 	.word	0x08005007
 8004ca0:	08005021 	.word	0x08005021
 8004ca4:	080054bb 	.word	0x080054bb
 8004ca8:	080054bb 	.word	0x080054bb
 8004cac:	080054bb 	.word	0x080054bb
 8004cb0:	080054bb 	.word	0x080054bb
 8004cb4:	080054bb 	.word	0x080054bb
 8004cb8:	080054bb 	.word	0x080054bb
 8004cbc:	080054bb 	.word	0x080054bb
 8004cc0:	080054bb 	.word	0x080054bb
 8004cc4:	080054bb 	.word	0x080054bb
 8004cc8:	080054bb 	.word	0x080054bb
 8004ccc:	080054bb 	.word	0x080054bb
 8004cd0:	080054bb 	.word	0x080054bb
 8004cd4:	080054bb 	.word	0x080054bb
 8004cd8:	080054bb 	.word	0x080054bb
 8004cdc:	080054bb 	.word	0x080054bb
 8004ce0:	080054bb 	.word	0x080054bb
 8004ce4:	080054bb 	.word	0x080054bb
 8004ce8:	080054bb 	.word	0x080054bb
 8004cec:	080054bb 	.word	0x080054bb
 8004cf0:	080054bb 	.word	0x080054bb
 8004cf4:	080054bb 	.word	0x080054bb
 8004cf8:	080054bb 	.word	0x080054bb
 8004cfc:	080054bb 	.word	0x080054bb
 8004d00:	080054bb 	.word	0x080054bb
 8004d04:	080054bb 	.word	0x080054bb
 8004d08:	080054bb 	.word	0x080054bb
 8004d0c:	080054bb 	.word	0x080054bb
 8004d10:	080054bb 	.word	0x080054bb
 8004d14:	080054bb 	.word	0x080054bb
 8004d18:	080054bb 	.word	0x080054bb
 8004d1c:	0800503b 	.word	0x0800503b
 8004d20:	08005057 	.word	0x08005057
 8004d24:	08005073 	.word	0x08005073
 8004d28:	0800508d 	.word	0x0800508d
 8004d2c:	080050a9 	.word	0x080050a9
 8004d30:	080054bb 	.word	0x080054bb
 8004d34:	080050c5 	.word	0x080050c5
 8004d38:	080050e1 	.word	0x080050e1
 8004d3c:	080050fb 	.word	0x080050fb
 8004d40:	08005117 	.word	0x08005117
 8004d44:	080054bb 	.word	0x080054bb
 8004d48:	080054bb 	.word	0x080054bb
 8004d4c:	080054bb 	.word	0x080054bb
 8004d50:	080054bb 	.word	0x080054bb
 8004d54:	080054bb 	.word	0x080054bb
 8004d58:	080054bb 	.word	0x080054bb
 8004d5c:	08005131 	.word	0x08005131
 8004d60:	0800514d 	.word	0x0800514d
 8004d64:	08005169 	.word	0x08005169
 8004d68:	08005183 	.word	0x08005183
 8004d6c:	0800519f 	.word	0x0800519f
 8004d70:	080054bb 	.word	0x080054bb
 8004d74:	080051bb 	.word	0x080051bb
 8004d78:	080051d7 	.word	0x080051d7
 8004d7c:	080051f1 	.word	0x080051f1
 8004d80:	0800520d 	.word	0x0800520d
 8004d84:	3b01      	subs	r3, #1
 8004d86:	2b20      	cmp	r3, #32
 8004d88:	f200 8397 	bhi.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004d8c:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <_Z31handleSDORequestDownloadBySDOIDt+0x2f0>)
 8004d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d92:	bf00      	nop
 8004d94:	08004e2d 	.word	0x08004e2d
 8004d98:	08004e49 	.word	0x08004e49
 8004d9c:	08004e65 	.word	0x08004e65
 8004da0:	08004e81 	.word	0x08004e81
 8004da4:	08004e9d 	.word	0x08004e9d
 8004da8:	080054bb 	.word	0x080054bb
 8004dac:	080054bb 	.word	0x080054bb
 8004db0:	080054bb 	.word	0x080054bb
 8004db4:	080054bb 	.word	0x080054bb
 8004db8:	080054bb 	.word	0x080054bb
 8004dbc:	080054bb 	.word	0x080054bb
 8004dc0:	080054bb 	.word	0x080054bb
 8004dc4:	080054bb 	.word	0x080054bb
 8004dc8:	080054bb 	.word	0x080054bb
 8004dcc:	080054bb 	.word	0x080054bb
 8004dd0:	08004eb9 	.word	0x08004eb9
 8004dd4:	080054bb 	.word	0x080054bb
 8004dd8:	080054bb 	.word	0x080054bb
 8004ddc:	080054bb 	.word	0x080054bb
 8004de0:	080054bb 	.word	0x080054bb
 8004de4:	080054bb 	.word	0x080054bb
 8004de8:	080054bb 	.word	0x080054bb
 8004dec:	080054bb 	.word	0x080054bb
 8004df0:	080054bb 	.word	0x080054bb
 8004df4:	080054bb 	.word	0x080054bb
 8004df8:	080054bb 	.word	0x080054bb
 8004dfc:	080054bb 	.word	0x080054bb
 8004e00:	080054bb 	.word	0x080054bb
 8004e04:	080054bb 	.word	0x080054bb
 8004e08:	080054bb 	.word	0x080054bb
 8004e0c:	080054bb 	.word	0x080054bb
 8004e10:	08004ed5 	.word	0x08004ed5
 8004e14:	08004ef1 	.word	0x08004ef1
 8004e18:	f240 4269 	movw	r2, #1129	; 0x469
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	f300 834c 	bgt.w	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004e22:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8004e26:	f6bf aef1 	bge.w	8004c0c <_Z31handleSDORequestDownloadBySDOIDt+0x168>
 8004e2a:	e346      	b.n	80054ba <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SensorF_OD_NodeID>(OD_NodeID_get());
 8004e2c:	f001 f9f6 	bl	800621c <_Z13OD_NodeID_getv>
 8004e30:	4603      	mov	r3, r0
 8004e32:	461a      	mov	r2, r3
 8004e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f002 fc16 	bl	800766c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e46:	e340      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SensorF_OD_NodeStatus>(OD_NodeStatus_get());
 8004e48:	f001 fa04 	bl	8006254 <_Z17OD_NodeStatus_getv>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e54:	4611      	mov	r1, r2
 8004e56:	4618      	mov	r0, r3
 8004e58:	f002 fc1d 	bl	8007696 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e62:	e332      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SensorF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8004e64:	f001 fa12 	bl	800628c <_Z22OD_ProtocolVersion_getv>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f002 fc24 	bl	80076c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e7e:	e324      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SensorF_OD_StackVersion>(OD_StackVersion_get());
 8004e80:	f001 fa20 	bl	80062c4 <_Z19OD_StackVersion_getv>
 8004e84:	4603      	mov	r3, r0
 8004e86:	461a      	mov	r2, r3
 8004e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f002 fc2b 	bl	80076ea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e94:	2300      	movs	r3, #0
 8004e96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e9a:	e316      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SensorF_OD_DbcVersion>(OD_DbcVersion_get());
 8004e9c:	f001 fa2e 	bl	80062fc <_Z17OD_DbcVersion_getv>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ea8:	4611      	mov	r1, r2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f002 fc32 	bl	8007714 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004eb6:	e308      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SensorF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8004eb8:	f001 fa3c 	bl	8006334 <_Z24OD_HeartbeatInterval_getv>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f002 fc39 	bl	800773e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ed2:	e2fa      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SensorF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8004ed4:	f001 fa66 	bl	80063a4 <_Z21OD_SendOdOnBootup_getv>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	461a      	mov	r2, r3
 8004edc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f002 fc40 	bl	8007768 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004eee:	e2ec      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SensorF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8004ef0:	f001 fa90 	bl	8006414 <_Z26OD_OdEntrySendInterval_getv>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f002 fc47 	bl	8007792 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f0a:	e2de      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SensorF_OD_CpuUsage>(OD_CpuUsage_get());
 8004f0c:	f001 faba 	bl	8006484 <_Z15OD_CpuUsage_getv>
 8004f10:	eef0 7a40 	vmov.f32	s15, s0
 8004f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f18:	eeb0 0a67 	vmov.f32	s0, s15
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f002 fc4d 	bl	80077bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f22:	2300      	movs	r3, #0
 8004f24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f28:	e2cf      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SensorF_OD_MemFree>(OD_MemFree_get());
 8004f2a:	f001 fae5 	bl	80064f8 <_Z14OD_MemFree_getv>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f34:	4611      	mov	r1, r2
 8004f36:	4618      	mov	r0, r3
 8004f38:	f002 fc57 	bl	80077ea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f42:	e2c2      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SensorF_OD_BoardTemp>(OD_BoardTemp_get());
 8004f44:	f001 fb10 	bl	8006568 <_Z16OD_BoardTemp_getv>
 8004f48:	eef0 7a40 	vmov.f32	s15, s0
 8004f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f50:	eeb0 0a67 	vmov.f32	s0, s15
 8004f54:	4618      	mov	r0, r3
 8004f56:	f002 fc5c 	bl	8007812 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f60:	e2b3      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SensorF_OD_InputVoltage>(OD_InputVoltage_get());
 8004f62:	f001 fb3b 	bl	80065dc <_Z19OD_InputVoltage_getv>
 8004f66:	eef0 7a40 	vmov.f32	s15, s0
 8004f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004f72:	4618      	mov	r0, r3
 8004f74:	f002 fc64 	bl	8007840 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f7e:	e2a4      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SensorF_OD_runtime>(OD_runtime_get());
 8004f80:	f001 fb66 	bl	8006650 <_Z14OD_runtime_getv>
 8004f84:	4602      	mov	r2, r0
 8004f86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f002 fc6e 	bl	800786e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f92:	2300      	movs	r3, #0
 8004f94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f98:	e297      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SensorF_OD_SdcIn>(OD_SdcIn_get());
 8004f9a:	f001 fb75 	bl	8006688 <_Z12OD_SdcIn_getv>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f002 fc74 	bl	8007896 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fb4:	e289      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SensorF_OD_SdcOut>(OD_SdcOut_get());
 8004fb6:	f001 fb83 	bl	80066c0 <_Z13OD_SdcOut_getv>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fc2:	4611      	mov	r1, r2
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f002 fc7b 	bl	80078c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fd0:	e27b      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID1>(OD_ChipUID1_get());
 8004fd2:	f001 fb91 	bl	80066f8 <_Z15OD_ChipUID1_getv>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004fde:	4608      	mov	r0, r1
 8004fe0:	f002 fc83 	bl	80078ea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fea:	e26e      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID2>(OD_ChipUID2_get());
 8004fec:	f001 fba4 	bl	8006738 <_Z15OD_ChipUID2_getv>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	f002 fc8f 	bl	800791c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005004:	e261      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SensorF_OD_BuildDate>(OD_BuildDate_get());
 8005006:	f001 fbb7 	bl	8006778 <_Z16OD_BuildDate_getv>
 800500a:	4602      	mov	r2, r0
 800500c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005010:	4611      	mov	r1, r2
 8005012:	4618      	mov	r0, r3
 8005014:	f002 fc9b 	bl	800794e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005018:	2300      	movs	r3, #0
 800501a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800501e:	e254      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SensorF_OD_BuildTime>(OD_BuildTime_get());
 8005020:	f001 fbc6 	bl	80067b0 <_Z16OD_BuildTime_getv>
 8005024:	4602      	mov	r2, r0
 8005026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800502a:	4611      	mov	r1, r2
 800502c:	4618      	mov	r0, r3
 800502e:	f002 fca2 	bl	8007976 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005032:	2300      	movs	r3, #0
 8005034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005038:	e247      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 800503a:	f001 fbd5 	bl	80067e8 <_Z20OD_CAN1_TxErrCnt_getv>
 800503e:	4603      	mov	r3, r0
 8005040:	461a      	mov	r2, r3
 8005042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f002 fca8 	bl	800799e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800504e:	2300      	movs	r3, #0
 8005050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005054:	e239      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8005056:	f001 fbe3 	bl	8006820 <_Z20OD_CAN1_RxErrCnt_getv>
 800505a:	4603      	mov	r3, r0
 800505c:	461a      	mov	r2, r3
 800505e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005062:	4611      	mov	r1, r2
 8005064:	4618      	mov	r0, r3
 8005066:	f002 fcaf 	bl	80079c8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005070:	e22b      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8005072:	f001 fbf1 	bl	8006858 <_Z25OD_CAN1_lastErrorCode_getv>
 8005076:	4602      	mov	r2, r0
 8005078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800507c:	4611      	mov	r1, r2
 800507e:	4618      	mov	r0, r3
 8005080:	f002 fcb7 	bl	80079f2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005084:	2300      	movs	r3, #0
 8005086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800508a:	e21e      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 800508c:	f001 fc00 	bl	8006890 <_Z26OD_CAN1_autoErrorReset_getv>
 8005090:	4603      	mov	r3, r0
 8005092:	461a      	mov	r2, r3
 8005094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005098:	4611      	mov	r1, r2
 800509a:	4618      	mov	r0, r3
 800509c:	f002 fcbd 	bl	8007a1a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050a6:	e210      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 80050a8:	f001 fc2a 	bl	8006900 <_Z20OD_CAN1_Baudrate_getv>
 80050ac:	4603      	mov	r3, r0
 80050ae:	461a      	mov	r2, r3
 80050b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f002 fcc4 	bl	8007a44 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050c2:	e202      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Status>(OD_CAN1_Status_get());
 80050c4:	f001 fc54 	bl	8006970 <_Z18OD_CAN1_Status_getv>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f002 fccb 	bl	8007a6e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050de:	e1f4      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 80050e0:	f001 fc62 	bl	80069a8 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 80050e4:	4602      	mov	r2, r0
 80050e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ea:	4611      	mov	r1, r2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f002 fcd3 	bl	8007a98 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050f2:	2300      	movs	r3, #0
 80050f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050f8:	e1e7      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 80050fa:	f001 fc71 	bl	80069e0 <_Z23OD_CAN1_ErrorStatus_getv>
 80050fe:	4603      	mov	r3, r0
 8005100:	461a      	mov	r2, r3
 8005102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005106:	4611      	mov	r1, r2
 8005108:	4618      	mov	r0, r3
 800510a:	f002 fcd9 	bl	8007ac0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800510e:	2300      	movs	r3, #0
 8005110:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005114:	e1d9      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8005116:	f001 fc7f 	bl	8006a18 <_Z29OD_CAN1_DelayedTxMessages_getv>
 800511a:	4602      	mov	r2, r0
 800511c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005120:	4611      	mov	r1, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f002 fce1 	bl	8007aea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005128:	2300      	movs	r3, #0
 800512a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800512e:	e1cc      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8005130:	f001 fc8e 	bl	8006a50 <_Z20OD_CAN2_TxErrCnt_getv>
 8005134:	4603      	mov	r3, r0
 8005136:	461a      	mov	r2, r3
 8005138:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800513c:	4611      	mov	r1, r2
 800513e:	4618      	mov	r0, r3
 8005140:	f002 fce7 	bl	8007b12 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005144:	2300      	movs	r3, #0
 8005146:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800514a:	e1be      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 800514c:	f001 fc9c 	bl	8006a88 <_Z20OD_CAN2_RxErrCnt_getv>
 8005150:	4603      	mov	r3, r0
 8005152:	461a      	mov	r2, r3
 8005154:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f002 fcee 	bl	8007b3c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005160:	2300      	movs	r3, #0
 8005162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005166:	e1b0      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8005168:	f001 fcaa 	bl	8006ac0 <_Z25OD_CAN2_lastErrorCode_getv>
 800516c:	4602      	mov	r2, r0
 800516e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005172:	4611      	mov	r1, r2
 8005174:	4618      	mov	r0, r3
 8005176:	f002 fcf6 	bl	8007b66 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800517a:	2300      	movs	r3, #0
 800517c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005180:	e1a3      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8005182:	f001 fcb9 	bl	8006af8 <_Z26OD_CAN2_autoErrorReset_getv>
 8005186:	4603      	mov	r3, r0
 8005188:	461a      	mov	r2, r3
 800518a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800518e:	4611      	mov	r1, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f002 fcfc 	bl	8007b8e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005196:	2300      	movs	r3, #0
 8005198:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800519c:	e195      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 800519e:	f001 fce3 	bl	8006b68 <_Z20OD_CAN2_Baudrate_getv>
 80051a2:	4603      	mov	r3, r0
 80051a4:	461a      	mov	r2, r3
 80051a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051aa:	4611      	mov	r1, r2
 80051ac:	4618      	mov	r0, r3
 80051ae:	f002 fd03 	bl	8007bb8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051b8:	e187      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Status>(OD_CAN2_Status_get());
 80051ba:	f001 fd0d 	bl	8006bd8 <_Z18OD_CAN2_Status_getv>
 80051be:	4603      	mov	r3, r0
 80051c0:	461a      	mov	r2, r3
 80051c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051c6:	4611      	mov	r1, r2
 80051c8:	4618      	mov	r0, r3
 80051ca:	f002 fd0a 	bl	8007be2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051ce:	2300      	movs	r3, #0
 80051d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051d4:	e179      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 80051d6:	f001 fd1b 	bl	8006c10 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 80051da:	4602      	mov	r2, r0
 80051dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f002 fd12 	bl	8007c0c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051ee:	e16c      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 80051f0:	f001 fd2a 	bl	8006c48 <_Z23OD_CAN2_ErrorStatus_getv>
 80051f4:	4603      	mov	r3, r0
 80051f6:	461a      	mov	r2, r3
 80051f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051fc:	4611      	mov	r1, r2
 80051fe:	4618      	mov	r0, r3
 8005200:	f002 fd18 	bl	8007c34 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005204:	2300      	movs	r3, #0
 8005206:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800520a:	e15e      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 800520c:	f001 fd38 	bl	8006c80 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8005210:	4602      	mov	r2, r0
 8005212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005216:	4611      	mov	r1, r2
 8005218:	4618      	mov	r0, r3
 800521a:	f002 fd20 	bl	8007c5e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800521e:	2300      	movs	r3, #0
 8005220:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005224:	e151      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x800:    // OD_samplingInterval
            msgSdoResp.set<can::signals::SensorF_OD_samplingInterval>(OD_samplingInterval_get());
 8005226:	f001 fd47 	bl	8006cb8 <_Z23OD_samplingInterval_getv>
 800522a:	eef0 7a40 	vmov.f32	s15, s0
 800522e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005232:	eeb0 0a67 	vmov.f32	s0, s15
 8005236:	4618      	mov	r0, r3
 8005238:	f002 fd25 	bl	8007c86 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800523c:	2300      	movs	r3, #0
 800523e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005242:	e142      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x900:    // OD_TelemetryCommands
            msgSdoResp.set<can::signals::SensorF_OD_TelemetryCommands>(OD_TelemetryCommands_get());
 8005244:	f001 fd72 	bl	8006d2c <_Z24OD_TelemetryCommands_getv>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f002 fd2e 	bl	8007cb4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005258:	2300      	movs	r3, #0
 800525a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800525e:	e134      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x901:    // OD_StateMachineInterval
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineInterval>(OD_StateMachineInterval_get());
 8005260:	f001 fd9c 	bl	8006d9c <_Z27OD_StateMachineInterval_getv>
 8005264:	4603      	mov	r3, r0
 8005266:	461a      	mov	r2, r3
 8005268:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800526c:	4611      	mov	r1, r2
 800526e:	4618      	mov	r0, r3
 8005270:	f002 fd35 	bl	8007cde <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005274:	2300      	movs	r3, #0
 8005276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800527a:	e126      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x902:    // OD_StateMachineActivate
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineActivate>(OD_StateMachineActivate_get());
 800527c:	f001 fdc6 	bl	8006e0c <_Z27OD_StateMachineActivate_getv>
 8005280:	4603      	mov	r3, r0
 8005282:	461a      	mov	r2, r3
 8005284:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005288:	4611      	mov	r1, r2
 800528a:	4618      	mov	r0, r3
 800528c:	f002 fd3c 	bl	8007d08 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005290:	2300      	movs	r3, #0
 8005292:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005296:	e118      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x903:    // OD_HVBatteryMode
            msgSdoResp.set<can::signals::SensorF_OD_HVBatteryMode>(OD_HVBatteryMode_get());
 8005298:	f001 fdf0 	bl	8006e7c <_Z20OD_HVBatteryMode_getv>
 800529c:	4603      	mov	r3, r0
 800529e:	461a      	mov	r2, r3
 80052a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052a4:	4611      	mov	r1, r2
 80052a6:	4618      	mov	r0, r3
 80052a8:	f002 fd43 	bl	8007d32 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052ac:	2300      	movs	r3, #0
 80052ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052b2:	e10a      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x904:    // OD_EncoderWheelDiameter
            msgSdoResp.set<can::signals::SensorF_OD_EncoderWheelDiameter>(OD_EncoderWheelDiameter_get());
 80052b4:	f001 fe1a 	bl	8006eec <_Z27OD_EncoderWheelDiameter_getv>
 80052b8:	eef0 7a40 	vmov.f32	s15, s0
 80052bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052c0:	eeb0 0a67 	vmov.f32	s0, s15
 80052c4:	4618      	mov	r0, r3
 80052c6:	f002 fd49 	bl	8007d5c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052d0:	e0fb      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x905:    // OD_EncoderResetPosition
            respCode = can::signals::SensorF_SDO_RespCode::ERR_WRITE_ONLY_OBJECT;
 80052d2:	2302      	movs	r3, #2
 80052d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x905);
 80052d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052dc:	f640 1105 	movw	r1, #2309	; 0x905
 80052e0:	4618      	mov	r0, r3
 80052e2:	f002 fd52 	bl	8007d8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 80052e6:	e0f0      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x910:    // OD_SetReset
            respCode = can::signals::SensorF_SDO_RespCode::ERR_WRITE_ONLY_OBJECT;
 80052e8:	2302      	movs	r3, #2
 80052ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x910);
 80052ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052f2:	f44f 6111 	mov.w	r1, #2320	; 0x910
 80052f6:	4618      	mov	r0, r3
 80052f8:	f002 fd47 	bl	8007d8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 80052fc:	e0e5      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA20:    // OD_IMU_number
            msgSdoResp.set<can::signals::SensorF_OD_IMU_number>(OD_IMU_number_get());
 80052fe:	f001 fe67 	bl	8006fd0 <_Z17OD_IMU_number_getv>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800530a:	4611      	mov	r1, r2
 800530c:	4618      	mov	r0, r3
 800530e:	f002 fd51 	bl	8007db4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005312:	2300      	movs	r3, #0
 8005314:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005318:	e0d7      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA25:    // OD_IMU1_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 800531a:	f001 fe75 	bl	8007008 <_Z23OD_IMU1_Temperature_getv>
 800531e:	eef0 7a40 	vmov.f32	s15, s0
 8005322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005326:	eeb0 0a67 	vmov.f32	s0, s15
 800532a:	4618      	mov	r0, r3
 800532c:	f002 fd57 	bl	8007dde <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005336:	e0c8      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA26:    // OD_IMU2_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8005338:	f001 fe84 	bl	8007044 <_Z23OD_IMU2_Temperature_getv>
 800533c:	eef0 7a40 	vmov.f32	s15, s0
 8005340:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005344:	eeb0 0a67 	vmov.f32	s0, s15
 8005348:	4618      	mov	r0, r3
 800534a:	f002 fd5f 	bl	8007e0c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800534e:	2300      	movs	r3, #0
 8005350:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005354:	e0b9      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA27:    // OD_IMU3_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 8005356:	f001 fe93 	bl	8007080 <_Z23OD_IMU3_Temperature_getv>
 800535a:	eef0 7a40 	vmov.f32	s15, s0
 800535e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005362:	eeb0 0a67 	vmov.f32	s0, s15
 8005366:	4618      	mov	r0, r3
 8005368:	f002 fd67 	bl	8007e3a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800536c:	2300      	movs	r3, #0
 800536e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005372:	e0aa      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA28:    // OD_IMU_AccelX
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelX>(OD_IMU_AccelX_get());
 8005374:	f001 fea2 	bl	80070bc <_Z17OD_IMU_AccelX_getv>
 8005378:	eef0 7a40 	vmov.f32	s15, s0
 800537c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005380:	eeb0 0a67 	vmov.f32	s0, s15
 8005384:	4618      	mov	r0, r3
 8005386:	f002 fd6f 	bl	8007e68 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800538a:	2300      	movs	r3, #0
 800538c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005390:	e09b      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA29:    // OD_IMU_AccelY
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelY>(OD_IMU_AccelY_get());
 8005392:	f001 fecd 	bl	8007130 <_Z17OD_IMU_AccelY_getv>
 8005396:	eef0 7a40 	vmov.f32	s15, s0
 800539a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800539e:	eeb0 0a67 	vmov.f32	s0, s15
 80053a2:	4618      	mov	r0, r3
 80053a4:	f002 fd77 	bl	8007e96 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053ae:	e08c      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA30:    // OD_IMU_AccelZ
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelZ>(OD_IMU_AccelZ_get());
 80053b0:	f001 fef8 	bl	80071a4 <_Z17OD_IMU_AccelZ_getv>
 80053b4:	eef0 7a40 	vmov.f32	s15, s0
 80053b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053bc:	eeb0 0a67 	vmov.f32	s0, s15
 80053c0:	4618      	mov	r0, r3
 80053c2:	f002 fd7f 	bl	8007ec4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053cc:	e07d      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA31:    // OD_IMU_GyroX
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroX>(OD_IMU_GyroX_get());
 80053ce:	f001 ff23 	bl	8007218 <_Z16OD_IMU_GyroX_getv>
 80053d2:	eef0 7a40 	vmov.f32	s15, s0
 80053d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053da:	eeb0 0a67 	vmov.f32	s0, s15
 80053de:	4618      	mov	r0, r3
 80053e0:	f002 fd87 	bl	8007ef2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053e4:	2300      	movs	r3, #0
 80053e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053ea:	e06e      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA32:    // OD_IMU_GyroY
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroY>(OD_IMU_GyroY_get());
 80053ec:	f001 ff4e 	bl	800728c <_Z16OD_IMU_GyroY_getv>
 80053f0:	eef0 7a40 	vmov.f32	s15, s0
 80053f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053f8:	eeb0 0a67 	vmov.f32	s0, s15
 80053fc:	4618      	mov	r0, r3
 80053fe:	f002 fd8f 	bl	8007f20 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005402:	2300      	movs	r3, #0
 8005404:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005408:	e05f      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA33:    // OD_IMU_GyroZ
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroZ>(OD_IMU_GyroZ_get());
 800540a:	f001 ff79 	bl	8007300 <_Z16OD_IMU_GyroZ_getv>
 800540e:	eef0 7a40 	vmov.f32	s15, s0
 8005412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005416:	eeb0 0a67 	vmov.f32	s0, s15
 800541a:	4618      	mov	r0, r3
 800541c:	f002 fd97 	bl	8007f4e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005420:	2300      	movs	r3, #0
 8005422:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005426:	e050      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xB00:    // OD_CoolingPressure
            msgSdoResp.set<can::signals::SensorF_OD_CoolingPressure>(OD_CoolingPressure_get());
 8005428:	f001 ffa4 	bl	8007374 <_Z22OD_CoolingPressure_getv>
 800542c:	eef0 7a40 	vmov.f32	s15, s0
 8005430:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005434:	eeb0 0a67 	vmov.f32	s0, s15
 8005438:	4618      	mov	r0, r3
 800543a:	f002 fd9f 	bl	8007f7c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800543e:	2300      	movs	r3, #0
 8005440:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005444:	e041      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xC00:    // OD_FiducialRightCounter
            msgSdoResp.set<can::signals::SensorF_OD_FiducialRightCounter>(OD_FiducialRightCounter_get());
 8005446:	f001 ffcf 	bl	80073e8 <_Z27OD_FiducialRightCounter_getv>
 800544a:	4603      	mov	r3, r0
 800544c:	461a      	mov	r2, r3
 800544e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f002 fda8 	bl	8007faa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800545a:	2300      	movs	r3, #0
 800545c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005460:	e033      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xC01:    // OD_FiducialLeftCounter
            msgSdoResp.set<can::signals::SensorF_OD_FiducialLeftCounter>(OD_FiducialLeftCounter_get());
 8005462:	f001 fff9 	bl	8007458 <_Z26OD_FiducialLeftCounter_getv>
 8005466:	4603      	mov	r3, r0
 8005468:	461a      	mov	r2, r3
 800546a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f002 fdaf 	bl	8007fd4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800547c:	e025      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xD00:    // OD_Position
            msgSdoResp.set<can::signals::SensorF_OD_Position>(OD_Position_get());
 800547e:	f002 f823 	bl	80074c8 <_Z15OD_Position_getv>
 8005482:	eef0 7a40 	vmov.f32	s15, s0
 8005486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800548a:	eeb0 0a67 	vmov.f32	s0, s15
 800548e:	4618      	mov	r0, r3
 8005490:	f002 fdb5 	bl	8007ffe <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005494:	2300      	movs	r3, #0
 8005496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800549a:	e016      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xD01:    // OD_Velocity
            msgSdoResp.set<can::signals::SensorF_OD_Velocity>(OD_Velocity_get());
 800549c:	f002 f84e 	bl	800753c <_Z15OD_Velocity_getv>
 80054a0:	eef0 7a40 	vmov.f32	s15, s0
 80054a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054a8:	eeb0 0a67 	vmov.f32	s0, s15
 80054ac:	4618      	mov	r0, r3
 80054ae:	f002 fdbd 	bl	800802c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80054b8:	e007      	b.n	80054ca <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(sdoId);
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054c0:	4611      	mov	r1, r2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f002 fc61 	bl	8007d8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 80054c8:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SensorF_SDO_RespCode>(respCode);
 80054ca:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80054ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054d2:	4611      	mov	r1, r2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f002 fdc0 	bl	800805a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 80054da:	f107 0308 	add.w	r3, r7, #8
 80054de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80054e2:	2200      	movs	r2, #0
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fb fe85 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 80054ea:	4b06      	ldr	r3, [pc, #24]	; (8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa60>)
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	f107 0108 	add.w	r1, r7, #8
 80054f2:	2300      	movs	r3, #0
 80054f4:	2200      	movs	r2, #0
 80054f6:	f011 f897 	bl	8016628 <osMessageQueuePut>
}
 80054fa:	bf00      	nop
 80054fc:	3748      	adds	r7, #72	; 0x48
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	200007bc 	.word	0x200007bc

08005508 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8005508:	b580      	push	{r7, lr}
 800550a:	b086      	sub	sp, #24
 800550c:	af02      	add	r7, sp, #8
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	9300      	str	r3, [sp, #0]
 800551a:	2300      	movs	r3, #0
 800551c:	2208      	movs	r2, #8
 800551e:	f240 51c1 	movw	r1, #1473	; 0x5c1
 8005522:	f7fc ff64 	bl	80023ee <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800552a:	f240 52c1 	movw	r2, #1473	; 0x5c1
 800552e:	4293      	cmp	r3, r2
 8005530:	d000      	beq.n	8005534 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8005532:	e7fe      	b.n	8005532 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
 8005548:	6839      	ldr	r1, [r7, #0]
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	331c      	adds	r3, #28
 800554e:	461a      	mov	r2, r3
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7ff ffd9 	bl	8005508 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8005560:	b580      	push	{r7, lr}
 8005562:	b0a0      	sub	sp, #128	; 0x80
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SensorF_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 8005568:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff ffe5 	bl	800553e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SensorF_SDO_Resp> msgSdoResp;
 8005574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff fa83 	bl	8004a84 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SensorF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 800557e:	2301      	movs	r3, #1
 8005580:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint16_t sdoId = msgSdoReq.get<can::signals::SensorF_SDO_ID>();
 8005584:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005588:	4618      	mov	r0, r3
 800558a:	f002 fd7b 	bl	8008084 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>
 800558e:	4603      	mov	r3, r0
 8005590:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

    switch (sdoId) {
 8005594:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8005598:	f640 5201 	movw	r2, #3329	; 0xd01
 800559c:	4293      	cmp	r3, r2
 800559e:	f000 8607 	beq.w	80061b0 <_Z22handleSDORequestUploadRK9RxMessage+0xc50>
 80055a2:	f640 5201 	movw	r2, #3329	; 0xd01
 80055a6:	4293      	cmp	r3, r2
 80055a8:	f300 8611 	bgt.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80055ac:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80055b0:	f000 85e9 	beq.w	8006186 <_Z22handleSDORequestUploadRK9RxMessage+0xc26>
 80055b4:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80055b8:	f300 8609 	bgt.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80055bc:	f640 4201 	movw	r2, #3073	; 0xc01
 80055c0:	4293      	cmp	r3, r2
 80055c2:	f000 85d2 	beq.w	800616a <_Z22handleSDORequestUploadRK9RxMessage+0xc0a>
 80055c6:	f640 4201 	movw	r2, #3073	; 0xc01
 80055ca:	4293      	cmp	r3, r2
 80055cc:	f300 85ff 	bgt.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80055d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055d4:	f000 85bb 	beq.w	800614e <_Z22handleSDORequestUploadRK9RxMessage+0xbee>
 80055d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055dc:	f300 85f7 	bgt.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80055e0:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80055e4:	f000 85a4 	beq.w	8006130 <_Z22handleSDORequestUploadRK9RxMessage+0xbd0>
 80055e8:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 80055ec:	f300 85ef 	bgt.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80055f0:	f640 2233 	movw	r2, #2611	; 0xa33
 80055f4:	4293      	cmp	r3, r2
 80055f6:	f300 85ea 	bgt.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80055fa:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 80055fe:	da16      	bge.n	800562e <_Z22handleSDORequestUploadRK9RxMessage+0xce>
 8005600:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005604:	f300 85e3 	bgt.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005608:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800560c:	da40      	bge.n	8005690 <_Z22handleSDORequestUploadRK9RxMessage+0x130>
 800560e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005612:	f000 83f0 	beq.w	8005df6 <_Z22handleSDORequestUploadRK9RxMessage+0x896>
 8005616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800561a:	f300 85d8 	bgt.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800561e:	2b21      	cmp	r3, #33	; 0x21
 8005620:	f300 8166 	bgt.w	80058f0 <_Z22handleSDORequestUploadRK9RxMessage+0x390>
 8005624:	2b00      	cmp	r3, #0
 8005626:	f300 8119 	bgt.w	800585c <_Z22handleSDORequestUploadRK9RxMessage+0x2fc>
 800562a:	f000 bdd0 	b.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800562e:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8005632:	2b13      	cmp	r3, #19
 8005634:	f200 85cb 	bhi.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005638:	a201      	add	r2, pc, #4	; (adr r2, 8005640 <_Z22handleSDORequestUploadRK9RxMessage+0xe0>)
 800563a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800563e:	bf00      	nop
 8005640:	08006007 	.word	0x08006007
 8005644:	080061cf 	.word	0x080061cf
 8005648:	080061cf 	.word	0x080061cf
 800564c:	080061cf 	.word	0x080061cf
 8005650:	080061cf 	.word	0x080061cf
 8005654:	08006023 	.word	0x08006023
 8005658:	08006041 	.word	0x08006041
 800565c:	0800605f 	.word	0x0800605f
 8005660:	0800607d 	.word	0x0800607d
 8005664:	0800609b 	.word	0x0800609b
 8005668:	080061cf 	.word	0x080061cf
 800566c:	080061cf 	.word	0x080061cf
 8005670:	080061cf 	.word	0x080061cf
 8005674:	080061cf 	.word	0x080061cf
 8005678:	080061cf 	.word	0x080061cf
 800567c:	080061cf 	.word	0x080061cf
 8005680:	080060b9 	.word	0x080060b9
 8005684:	080060d7 	.word	0x080060d7
 8005688:	080060f5 	.word	0x080060f5
 800568c:	08006113 	.word	0x08006113
 8005690:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8005694:	2b10      	cmp	r3, #16
 8005696:	f200 859a 	bhi.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800569a:	a201      	add	r2, pc, #4	; (adr r2, 80056a0 <_Z22handleSDORequestUploadRK9RxMessage+0x140>)
 800569c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a0:	08005e57 	.word	0x08005e57
 80056a4:	08005e8d 	.word	0x08005e8d
 80056a8:	08005edb 	.word	0x08005edb
 80056ac:	08005f11 	.word	0x08005f11
 80056b0:	08005f47 	.word	0x08005f47
 80056b4:	08005fa7 	.word	0x08005fa7
 80056b8:	080061cf 	.word	0x080061cf
 80056bc:	080061cf 	.word	0x080061cf
 80056c0:	080061cf 	.word	0x080061cf
 80056c4:	080061cf 	.word	0x080061cf
 80056c8:	080061cf 	.word	0x080061cf
 80056cc:	080061cf 	.word	0x080061cf
 80056d0:	080061cf 	.word	0x080061cf
 80056d4:	080061cf 	.word	0x080061cf
 80056d8:	080061cf 	.word	0x080061cf
 80056dc:	080061cf 	.word	0x080061cf
 80056e0:	08005fd7 	.word	0x08005fd7
 80056e4:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80056e8:	2b59      	cmp	r3, #89	; 0x59
 80056ea:	f200 8570 	bhi.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80056ee:	a201      	add	r2, pc, #4	; (adr r2, 80056f4 <_Z22handleSDORequestUploadRK9RxMessage+0x194>)
 80056f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f4:	08005a41 	.word	0x08005a41
 80056f8:	08005a5f 	.word	0x08005a5f
 80056fc:	08005a79 	.word	0x08005a79
 8005700:	08005a97 	.word	0x08005a97
 8005704:	08005ab5 	.word	0x08005ab5
 8005708:	08005acf 	.word	0x08005acf
 800570c:	08005aeb 	.word	0x08005aeb
 8005710:	080061cf 	.word	0x080061cf
 8005714:	080061cf 	.word	0x080061cf
 8005718:	080061cf 	.word	0x080061cf
 800571c:	080061cf 	.word	0x080061cf
 8005720:	080061cf 	.word	0x080061cf
 8005724:	080061cf 	.word	0x080061cf
 8005728:	080061cf 	.word	0x080061cf
 800572c:	080061cf 	.word	0x080061cf
 8005730:	080061cf 	.word	0x080061cf
 8005734:	08005b07 	.word	0x08005b07
 8005738:	08005b21 	.word	0x08005b21
 800573c:	080061cf 	.word	0x080061cf
 8005740:	080061cf 	.word	0x080061cf
 8005744:	080061cf 	.word	0x080061cf
 8005748:	080061cf 	.word	0x080061cf
 800574c:	080061cf 	.word	0x080061cf
 8005750:	080061cf 	.word	0x080061cf
 8005754:	080061cf 	.word	0x080061cf
 8005758:	080061cf 	.word	0x080061cf
 800575c:	080061cf 	.word	0x080061cf
 8005760:	080061cf 	.word	0x080061cf
 8005764:	080061cf 	.word	0x080061cf
 8005768:	080061cf 	.word	0x080061cf
 800576c:	080061cf 	.word	0x080061cf
 8005770:	080061cf 	.word	0x080061cf
 8005774:	08005b3b 	.word	0x08005b3b
 8005778:	08005b55 	.word	0x08005b55
 800577c:	080061cf 	.word	0x080061cf
 8005780:	080061cf 	.word	0x080061cf
 8005784:	080061cf 	.word	0x080061cf
 8005788:	080061cf 	.word	0x080061cf
 800578c:	080061cf 	.word	0x080061cf
 8005790:	080061cf 	.word	0x080061cf
 8005794:	080061cf 	.word	0x080061cf
 8005798:	080061cf 	.word	0x080061cf
 800579c:	080061cf 	.word	0x080061cf
 80057a0:	080061cf 	.word	0x080061cf
 80057a4:	080061cf 	.word	0x080061cf
 80057a8:	080061cf 	.word	0x080061cf
 80057ac:	080061cf 	.word	0x080061cf
 80057b0:	080061cf 	.word	0x080061cf
 80057b4:	080061cf 	.word	0x080061cf
 80057b8:	080061cf 	.word	0x080061cf
 80057bc:	080061cf 	.word	0x080061cf
 80057c0:	080061cf 	.word	0x080061cf
 80057c4:	080061cf 	.word	0x080061cf
 80057c8:	080061cf 	.word	0x080061cf
 80057cc:	080061cf 	.word	0x080061cf
 80057d0:	080061cf 	.word	0x080061cf
 80057d4:	080061cf 	.word	0x080061cf
 80057d8:	080061cf 	.word	0x080061cf
 80057dc:	080061cf 	.word	0x080061cf
 80057e0:	080061cf 	.word	0x080061cf
 80057e4:	080061cf 	.word	0x080061cf
 80057e8:	080061cf 	.word	0x080061cf
 80057ec:	080061cf 	.word	0x080061cf
 80057f0:	080061cf 	.word	0x080061cf
 80057f4:	08005b6f 	.word	0x08005b6f
 80057f8:	08005b8b 	.word	0x08005b8b
 80057fc:	08005ba7 	.word	0x08005ba7
 8005800:	08005bc1 	.word	0x08005bc1
 8005804:	08005bf7 	.word	0x08005bf7
 8005808:	080061cf 	.word	0x080061cf
 800580c:	08005c47 	.word	0x08005c47
 8005810:	08005c63 	.word	0x08005c63
 8005814:	08005c7d 	.word	0x08005c7d
 8005818:	08005c99 	.word	0x08005c99
 800581c:	080061cf 	.word	0x080061cf
 8005820:	080061cf 	.word	0x080061cf
 8005824:	080061cf 	.word	0x080061cf
 8005828:	080061cf 	.word	0x080061cf
 800582c:	080061cf 	.word	0x080061cf
 8005830:	080061cf 	.word	0x080061cf
 8005834:	08005cb3 	.word	0x08005cb3
 8005838:	08005ccf 	.word	0x08005ccf
 800583c:	08005ceb 	.word	0x08005ceb
 8005840:	08005d05 	.word	0x08005d05
 8005844:	08005d3b 	.word	0x08005d3b
 8005848:	080061cf 	.word	0x080061cf
 800584c:	08005d8b 	.word	0x08005d8b
 8005850:	08005da7 	.word	0x08005da7
 8005854:	08005dc1 	.word	0x08005dc1
 8005858:	08005ddd 	.word	0x08005ddd
 800585c:	3b01      	subs	r3, #1
 800585e:	2b20      	cmp	r3, #32
 8005860:	f200 84b5 	bhi.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005864:	a201      	add	r2, pc, #4	; (adr r2, 800586c <_Z22handleSDORequestUploadRK9RxMessage+0x30c>)
 8005866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800586a:	bf00      	nop
 800586c:	08005907 	.word	0x08005907
 8005870:	08005925 	.word	0x08005925
 8005874:	08005943 	.word	0x08005943
 8005878:	08005961 	.word	0x08005961
 800587c:	0800597f 	.word	0x0800597f
 8005880:	080061cf 	.word	0x080061cf
 8005884:	080061cf 	.word	0x080061cf
 8005888:	080061cf 	.word	0x080061cf
 800588c:	080061cf 	.word	0x080061cf
 8005890:	080061cf 	.word	0x080061cf
 8005894:	080061cf 	.word	0x080061cf
 8005898:	080061cf 	.word	0x080061cf
 800589c:	080061cf 	.word	0x080061cf
 80058a0:	080061cf 	.word	0x080061cf
 80058a4:	080061cf 	.word	0x080061cf
 80058a8:	0800599d 	.word	0x0800599d
 80058ac:	080061cf 	.word	0x080061cf
 80058b0:	080061cf 	.word	0x080061cf
 80058b4:	080061cf 	.word	0x080061cf
 80058b8:	080061cf 	.word	0x080061cf
 80058bc:	080061cf 	.word	0x080061cf
 80058c0:	080061cf 	.word	0x080061cf
 80058c4:	080061cf 	.word	0x080061cf
 80058c8:	080061cf 	.word	0x080061cf
 80058cc:	080061cf 	.word	0x080061cf
 80058d0:	080061cf 	.word	0x080061cf
 80058d4:	080061cf 	.word	0x080061cf
 80058d8:	080061cf 	.word	0x080061cf
 80058dc:	080061cf 	.word	0x080061cf
 80058e0:	080061cf 	.word	0x080061cf
 80058e4:	080061cf 	.word	0x080061cf
 80058e8:	080059d5 	.word	0x080059d5
 80058ec:	08005a0b 	.word	0x08005a0b
 80058f0:	f240 4269 	movw	r2, #1129	; 0x469
 80058f4:	4293      	cmp	r3, r2
 80058f6:	f300 846a 	bgt.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80058fa:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 80058fe:	f6bf aef1 	bge.w	80056e4 <_Z22handleSDORequestUploadRK9RxMessage+0x184>
 8005902:	f000 bc64 	b.w	80061ce <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005906:	2303      	movs	r3, #3
 8005908:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_NodeID>(OD_NodeID_get());
 800590c:	f000 fc86 	bl	800621c <_Z13OD_NodeID_getv>
 8005910:	4603      	mov	r3, r0
 8005912:	461a      	mov	r2, r3
 8005914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f001 fea6 	bl	800766c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 8005920:	f000 bc5e 	b.w	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005924:	2303      	movs	r3, #3
 8005926:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_NodeStatus>(OD_NodeStatus_get());
 800592a:	f000 fc93 	bl	8006254 <_Z17OD_NodeStatus_getv>
 800592e:	4603      	mov	r3, r0
 8005930:	461a      	mov	r2, r3
 8005932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005936:	4611      	mov	r1, r2
 8005938:	4618      	mov	r0, r3
 800593a:	f001 feac 	bl	8007696 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 800593e:	f000 bc4f 	b.w	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005942:	2303      	movs	r3, #3
 8005944:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8005948:	f000 fca0 	bl	800628c <_Z22OD_ProtocolVersion_getv>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005954:	4611      	mov	r1, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f001 feb2 	bl	80076c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 800595c:	f000 bc40 	b.w	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005960:	2303      	movs	r3, #3
 8005962:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_StackVersion>(OD_StackVersion_get());
 8005966:	f000 fcad 	bl	80062c4 <_Z19OD_StackVersion_getv>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005972:	4611      	mov	r1, r2
 8005974:	4618      	mov	r0, r3
 8005976:	f001 feb8 	bl	80076ea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 800597a:	f000 bc31 	b.w	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800597e:	2303      	movs	r3, #3
 8005980:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_DbcVersion>(OD_DbcVersion_get());
 8005984:	f000 fcba 	bl	80062fc <_Z17OD_DbcVersion_getv>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005990:	4611      	mov	r1, r2
 8005992:	4618      	mov	r0, r3
 8005994:	f001 febe 	bl	8007714 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 8005998:	f000 bc22 	b.w	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_HeartbeatInterval>();
 800599c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059a0:	4618      	mov	r0, r3
 80059a2:	f002 fb81 	bl	80080a8 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 80059a6:	4603      	mov	r3, r0
 80059a8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 80059ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fcdb 	bl	800636c <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80059bc:	f000 fcba 	bl	8006334 <_Z24OD_HeartbeatInterval_getv>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059c8:	4611      	mov	r1, r2
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 feb7 	bl	800773e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 80059d0:	f000 bc06 	b.w	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_SendOdOnBootup>();
 80059d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059d8:	4618      	mov	r0, r3
 80059da:	f002 fb77 	bl	80080cc <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals25SensorF_OD_SendOdOnBootupEEENT_8dataTypeEv>
 80059de:	4603      	mov	r3, r0
 80059e0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 80059e4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fcf7 	bl	80063dc <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 80059f4:	f000 fcd6 	bl	80063a4 <_Z21OD_SendOdOnBootup_getv>
 80059f8:	4603      	mov	r3, r0
 80059fa:	461a      	mov	r2, r3
 80059fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a00:	4611      	mov	r1, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 feb0 	bl	8007768 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 8005a08:	e3ea      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_OdEntrySendInterval>();
 8005a0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f002 fb6e 	bl	80080f0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8005a1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fd14 	bl	800644c <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8005a2a:	f000 fcf3 	bl	8006414 <_Z26OD_OdEntrySendInterval_getv>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	461a      	mov	r2, r3
 8005a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a36:	4611      	mov	r1, r2
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 feaa 	bl	8007792 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 8005a3e:	e3cf      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CpuUsage>(OD_CpuUsage_get());
 8005a46:	f000 fd1d 	bl	8006484 <_Z15OD_CpuUsage_getv>
 8005a4a:	eef0 7a40 	vmov.f32	s15, s0
 8005a4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a52:	eeb0 0a67 	vmov.f32	s0, s15
 8005a56:	4618      	mov	r0, r3
 8005a58:	f001 feb0 	bl	80077bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 8005a5c:	e3c0      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_MemFree>(OD_MemFree_get());
 8005a64:	f000 fd48 	bl	80064f8 <_Z14OD_MemFree_getv>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f001 feba 	bl	80077ea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 8005a76:	e3b3      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BoardTemp>(OD_BoardTemp_get());
 8005a7e:	f000 fd73 	bl	8006568 <_Z16OD_BoardTemp_getv>
 8005a82:	eef0 7a40 	vmov.f32	s15, s0
 8005a86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 febf 	bl	8007812 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 8005a94:	e3a4      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_InputVoltage>(OD_InputVoltage_get());
 8005a9c:	f000 fd9e 	bl	80065dc <_Z19OD_InputVoltage_getv>
 8005aa0:	eef0 7a40 	vmov.f32	s15, s0
 8005aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fec7 	bl	8007840 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 8005ab2:	e395      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_runtime>(OD_runtime_get());
 8005aba:	f000 fdc9 	bl	8006650 <_Z14OD_runtime_getv>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f001 fed1 	bl	800786e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>
            break;
 8005acc:	e388      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SdcIn>(OD_SdcIn_get());
 8005ad4:	f000 fdd8 	bl	8006688 <_Z12OD_SdcIn_getv>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	461a      	mov	r2, r3
 8005adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f001 fed7 	bl	8007896 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>
            break;
 8005ae8:	e37a      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SdcOut>(OD_SdcOut_get());
 8005af0:	f000 fde6 	bl	80066c0 <_Z13OD_SdcOut_getv>
 8005af4:	4603      	mov	r3, r0
 8005af6:	461a      	mov	r2, r3
 8005af8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005afc:	4611      	mov	r1, r2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f001 fede 	bl	80078c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8005b04:	e36c      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID1>(OD_ChipUID1_get());
 8005b0c:	f000 fdf4 	bl	80066f8 <_Z15OD_ChipUID1_getv>
 8005b10:	4602      	mov	r2, r0
 8005b12:	460b      	mov	r3, r1
 8005b14:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005b18:	4608      	mov	r0, r1
 8005b1a:	f001 fee6 	bl	80078ea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8005b1e:	e35f      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID2>(OD_ChipUID2_get());
 8005b26:	f000 fe07 	bl	8006738 <_Z15OD_ChipUID2_getv>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005b32:	4608      	mov	r0, r1
 8005b34:	f001 fef2 	bl	800791c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 8005b38:	e352      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BuildDate>(OD_BuildDate_get());
 8005b40:	f000 fe1a 	bl	8006778 <_Z16OD_BuildDate_getv>
 8005b44:	4602      	mov	r2, r0
 8005b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b4a:	4611      	mov	r1, r2
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f001 fefe 	bl	800794e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8005b52:	e345      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BuildTime>(OD_BuildTime_get());
 8005b5a:	f000 fe29 	bl	80067b0 <_Z16OD_BuildTime_getv>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b64:	4611      	mov	r1, r2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 ff05 	bl	8007976 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 8005b6c:	e338      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8005b74:	f000 fe38 	bl	80067e8 <_Z20OD_CAN1_TxErrCnt_getv>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	461a      	mov	r2, r3
 8005b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b80:	4611      	mov	r1, r2
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 ff0b 	bl	800799e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 8005b88:	e32a      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8005b90:	f000 fe46 	bl	8006820 <_Z20OD_CAN1_RxErrCnt_getv>
 8005b94:	4603      	mov	r3, r0
 8005b96:	461a      	mov	r2, r3
 8005b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f001 ff12 	bl	80079c8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 8005ba4:	e31c      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ba6:	2303      	movs	r3, #3
 8005ba8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8005bac:	f000 fe54 	bl	8006858 <_Z25OD_CAN1_lastErrorCode_getv>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f001 ff1a 	bl	80079f2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005bbe:	e30f      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN1_autoErrorReset>();
 8005bc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f002 faa5 	bl	8008114 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 8005bd0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fe77 	bl	80068c8 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8005be0:	f000 fe56 	bl	8006890 <_Z26OD_CAN1_autoErrorReset_getv>
 8005be4:	4603      	mov	r3, r0
 8005be6:	461a      	mov	r2, r3
 8005be8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bec:	4611      	mov	r1, r2
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 ff13 	bl	8007a1a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8005bf4:	e2f4      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN1_Baudrate>();
 8005bf6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f002 fa9c 	bl	8008138 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8005c06:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c0a:	2b7c      	cmp	r3, #124	; 0x7c
 8005c0c:	d904      	bls.n	8005c18 <_Z22handleSDORequestUploadRK9RxMessage+0x6b8>
 8005c0e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c16:	d903      	bls.n	8005c20 <_Z22handleSDORequestUploadRK9RxMessage+0x6c0>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005c18:	2305      	movs	r3, #5
 8005c1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005c1e:	e007      	b.n	8005c30 <_Z22handleSDORequestUploadRK9RxMessage+0x6d0>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8005c20:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fe87 	bl	8006938 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8005c30:	f000 fe66 	bl	8006900 <_Z20OD_CAN1_Baudrate_getv>
 8005c34:	4603      	mov	r3, r0
 8005c36:	461a      	mov	r2, r3
 8005c38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c3c:	4611      	mov	r1, r2
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 ff00 	bl	8007a44 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8005c44:	e2cc      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Status>(OD_CAN1_Status_get());
 8005c4c:	f000 fe90 	bl	8006970 <_Z18OD_CAN1_Status_getv>
 8005c50:	4603      	mov	r3, r0
 8005c52:	461a      	mov	r2, r3
 8005c54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 ff07 	bl	8007a6e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 8005c60:	e2be      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8005c68:	f000 fe9e 	bl	80069a8 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c72:	4611      	mov	r1, r2
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 ff0f 	bl	8007a98 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005c7a:	e2b1      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8005c82:	f000 fead 	bl	80069e0 <_Z23OD_CAN1_ErrorStatus_getv>
 8005c86:	4603      	mov	r3, r0
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 ff15 	bl	8007ac0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8005c96:	e2a3      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8005c9e:	f000 febb 	bl	8006a18 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ca8:	4611      	mov	r1, r2
 8005caa:	4618      	mov	r0, r3
 8005cac:	f001 ff1d 	bl	8007aea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005cb0:	e296      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8005cb8:	f000 feca 	bl	8006a50 <_Z20OD_CAN2_TxErrCnt_getv>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f001 ff23 	bl	8007b12 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 8005ccc:	e288      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8005cd4:	f000 fed8 	bl	8006a88 <_Z20OD_CAN2_RxErrCnt_getv>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f001 ff2a 	bl	8007b3c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 8005ce8:	e27a      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8005cf0:	f000 fee6 	bl	8006ac0 <_Z25OD_CAN2_lastErrorCode_getv>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 ff32 	bl	8007b66 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005d02:	e26d      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN2_autoErrorReset>();
 8005d04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f002 fa27 	bl	800815c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8005d14:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 ff09 	bl	8006b30 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8005d24:	f000 fee8 	bl	8006af8 <_Z26OD_CAN2_autoErrorReset_getv>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d30:	4611      	mov	r1, r2
 8005d32:	4618      	mov	r0, r3
 8005d34:	f001 ff2b 	bl	8007b8e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8005d38:	e252      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN2_Baudrate>();
 8005d3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f002 fa1e 	bl	8008180 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 8005d4a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005d4e:	2b7c      	cmp	r3, #124	; 0x7c
 8005d50:	d904      	bls.n	8005d5c <_Z22handleSDORequestUploadRK9RxMessage+0x7fc>
 8005d52:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005d56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d5a:	d903      	bls.n	8005d64 <_Z22handleSDORequestUploadRK9RxMessage+0x804>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005d5c:	2305      	movs	r3, #5
 8005d5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005d62:	e007      	b.n	8005d74 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 8005d64:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 ff19 	bl	8006ba0 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8005d74:	f000 fef8 	bl	8006b68 <_Z20OD_CAN2_Baudrate_getv>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d80:	4611      	mov	r1, r2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 ff18 	bl	8007bb8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 8005d88:	e22a      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Status>(OD_CAN2_Status_get());
 8005d90:	f000 ff22 	bl	8006bd8 <_Z18OD_CAN2_Status_getv>
 8005d94:	4603      	mov	r3, r0
 8005d96:	461a      	mov	r2, r3
 8005d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 ff1f 	bl	8007be2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 8005da4:	e21c      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8005dac:	f000 ff30 	bl	8006c10 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8005db0:	4602      	mov	r2, r0
 8005db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005db6:	4611      	mov	r1, r2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f001 ff27 	bl	8007c0c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005dbe:	e20f      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8005dc6:	f000 ff3f 	bl	8006c48 <_Z23OD_CAN2_ErrorStatus_getv>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	461a      	mov	r2, r3
 8005dce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dd2:	4611      	mov	r1, r2
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f001 ff2d 	bl	8007c34 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8005dda:	e201      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8005de2:	f000 ff4d 	bl	8006c80 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8005de6:	4602      	mov	r2, r0
 8005de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f001 ff35 	bl	8007c5e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005df4:	e1f4      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x800: {   // OD_samplingInterval
            float value = msgSdoReq.get<can::signals::SensorF_OD_samplingInterval>();
 8005df6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f002 f9d2 	bl	80081a4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals27SensorF_OD_samplingIntervalEEENT_8dataTypeEv>
 8005e00:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
if (value < 0.01f || value > 100.0f) {
 8005e04:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005e08:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 80061a4 <_Z22handleSDORequestUploadRK9RxMessage+0xc44>
 8005e0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e14:	d408      	bmi.n	8005e28 <_Z22handleSDORequestUploadRK9RxMessage+0x8c8>
 8005e16:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005e1a:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 80061a8 <_Z22handleSDORequestUploadRK9RxMessage+0xc48>
 8005e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e26:	dd03      	ble.n	8005e30 <_Z22handleSDORequestUploadRK9RxMessage+0x8d0>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005e28:	2305      	movs	r3, #5
 8005e2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005e2e:	e006      	b.n	8005e3e <_Z22handleSDORequestUploadRK9RxMessage+0x8de>
            }
            else {
                OD_samplingInterval_set(value);
 8005e30:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8005e34:	f000 ff5e 	bl	8006cf4 <_Z23OD_samplingInterval_setf>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_samplingInterval>(OD_samplingInterval_get());
 8005e3e:	f000 ff3b 	bl	8006cb8 <_Z23OD_samplingInterval_getv>
 8005e42:	eef0 7a40 	vmov.f32	s15, s0
 8005e46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e4a:	eeb0 0a67 	vmov.f32	s0, s15
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f001 ff19 	bl	8007c86 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>
            break;
 8005e54:	e1c4      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x900: {   // OD_TelemetryCommands
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_TelemetryCommands>();
 8005e56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f002 f9b6 	bl	80081cc <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_TelemetryCommandsEEENT_8dataTypeEv>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                OD_TelemetryCommands_set(value);
 8005e66:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 ff7a 	bl	8006d64 <_Z24OD_TelemetryCommands_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_TelemetryCommands>(OD_TelemetryCommands_get());
 8005e76:	f000 ff59 	bl	8006d2c <_Z24OD_TelemetryCommands_getv>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e82:	4611      	mov	r1, r2
 8005e84:	4618      	mov	r0, r3
 8005e86:	f001 ff15 	bl	8007cb4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>
            break;
 8005e8a:	e1a9      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x901: {   // OD_StateMachineInterval
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_StateMachineInterval>();
 8005e8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e90:	4618      	mov	r0, r3
 8005e92:	f002 f9ad 	bl	80081f0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineIntervalEEENT_8dataTypeEv>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
if (value < 5 || value > 100) {
 8005e9c:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d903      	bls.n	8005eac <_Z22handleSDORequestUploadRK9RxMessage+0x94c>
 8005ea4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005ea8:	2b64      	cmp	r3, #100	; 0x64
 8005eaa:	d903      	bls.n	8005eb4 <_Z22handleSDORequestUploadRK9RxMessage+0x954>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005eac:	2305      	movs	r3, #5
 8005eae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005eb2:	e007      	b.n	8005ec4 <_Z22handleSDORequestUploadRK9RxMessage+0x964>
            }
            else {
                OD_StateMachineInterval_set(value);
 8005eb4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 ff8b 	bl	8006dd4 <_Z27OD_StateMachineInterval_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineInterval>(OD_StateMachineInterval_get());
 8005ec4:	f000 ff6a 	bl	8006d9c <_Z27OD_StateMachineInterval_getv>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ed0:	4611      	mov	r1, r2
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f001 ff03 	bl	8007cde <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>
            break;
 8005ed8:	e182      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x902: {   // OD_StateMachineActivate
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_StateMachineActivate>();
 8005eda:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f002 f998 	bl	8008214 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineActivateEEENT_8dataTypeEv>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                OD_StateMachineActivate_set(value);
 8005eea:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 ffa8 	bl	8006e44 <_Z27OD_StateMachineActivate_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineActivate>(OD_StateMachineActivate_get());
 8005efa:	f000 ff87 	bl	8006e0c <_Z27OD_StateMachineActivate_getv>
 8005efe:	4603      	mov	r3, r0
 8005f00:	461a      	mov	r2, r3
 8005f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f06:	4611      	mov	r1, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f001 fefd 	bl	8007d08 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>
            break;
 8005f0e:	e167      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x903: {   // OD_HVBatteryMode
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_HVBatteryMode>();
 8005f10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f14:	4618      	mov	r0, r3
 8005f16:	f002 f98f 	bl	8008238 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_HVBatteryModeEEENT_8dataTypeEv>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                OD_HVBatteryMode_set(value);
 8005f20:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 ffc5 	bl	8006eb4 <_Z20OD_HVBatteryMode_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_HVBatteryMode>(OD_HVBatteryMode_get());
 8005f30:	f000 ffa4 	bl	8006e7c <_Z20OD_HVBatteryMode_getv>
 8005f34:	4603      	mov	r3, r0
 8005f36:	461a      	mov	r2, r3
 8005f38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f001 fef7 	bl	8007d32 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>
            break;
 8005f44:	e14c      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x904: {   // OD_EncoderWheelDiameter
            float value = msgSdoReq.get<can::signals::SensorF_OD_EncoderWheelDiameter>();
 8005f46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f002 f986 	bl	800825c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderWheelDiameterEEENT_8dataTypeEv>
 8005f50:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
if (value < 1.0f || value > 300.0f) {
 8005f54:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005f58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f64:	d408      	bmi.n	8005f78 <_Z22handleSDORequestUploadRK9RxMessage+0xa18>
 8005f66:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005f6a:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80061ac <_Z22handleSDORequestUploadRK9RxMessage+0xc4c>
 8005f6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f76:	dd03      	ble.n	8005f80 <_Z22handleSDORequestUploadRK9RxMessage+0xa20>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005f78:	2305      	movs	r3, #5
 8005f7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005f7e:	e006      	b.n	8005f8e <_Z22handleSDORequestUploadRK9RxMessage+0xa2e>
            }
            else {
                OD_EncoderWheelDiameter_set(value);
 8005f80:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8005f84:	f000 ffd0 	bl	8006f28 <_Z27OD_EncoderWheelDiameter_setf>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_EncoderWheelDiameter>(OD_EncoderWheelDiameter_get());
 8005f8e:	f000 ffad 	bl	8006eec <_Z27OD_EncoderWheelDiameter_getv>
 8005f92:	eef0 7a40 	vmov.f32	s15, s0
 8005f96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f001 fedc 	bl	8007d5c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>
            break;
 8005fa4:	e11c      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x905: {   // OD_EncoderResetPosition
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_EncoderResetPosition>();
 8005fa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005faa:	4618      	mov	r0, r3
 8005fac:	f002 f96a 	bl	8008284 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderResetPositionEEENT_8dataTypeEv>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
                OD_EncoderResetPosition_set(value);
 8005fb6:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 ffd0 	bl	8006f60 <_Z27OD_EncoderResetPosition_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x905);
 8005fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fca:	f640 1105 	movw	r1, #2309	; 0x905
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 fedb 	bl	8007d8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005fd4:	e104      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x910: {   // OD_SetReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_SetReset>();
 8005fd6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f002 f964 	bl	80082a8 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals19SensorF_OD_SetResetEEENT_8dataTypeEv>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                OD_SetReset_set(value);
 8005fe6:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 ffd4 	bl	8006f98 <_Z15OD_SetReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x910);
 8005ff6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ffa:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8005ffe:	4618      	mov	r0, r3
 8006000:	f001 fec3 	bl	8007d8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8006004:	e0ec      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA20: {   // OD_IMU_number
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006006:	2303      	movs	r3, #3
 8006008:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_number>(OD_IMU_number_get());
 800600c:	f000 ffe0 	bl	8006fd0 <_Z17OD_IMU_number_getv>
 8006010:	4603      	mov	r3, r0
 8006012:	461a      	mov	r2, r3
 8006014:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006018:	4611      	mov	r1, r2
 800601a:	4618      	mov	r0, r3
 800601c:	f001 feca 	bl	8007db4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>
            break;
 8006020:	e0de      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA25: {   // OD_IMU1_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006022:	2303      	movs	r3, #3
 8006024:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8006028:	f000 ffee 	bl	8007008 <_Z23OD_IMU1_Temperature_getv>
 800602c:	eef0 7a40 	vmov.f32	s15, s0
 8006030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006034:	eeb0 0a67 	vmov.f32	s0, s15
 8006038:	4618      	mov	r0, r3
 800603a:	f001 fed0 	bl	8007dde <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            break;
 800603e:	e0cf      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA26: {   // OD_IMU2_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006040:	2303      	movs	r3, #3
 8006042:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8006046:	f000 fffd 	bl	8007044 <_Z23OD_IMU2_Temperature_getv>
 800604a:	eef0 7a40 	vmov.f32	s15, s0
 800604e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006052:	eeb0 0a67 	vmov.f32	s0, s15
 8006056:	4618      	mov	r0, r3
 8006058:	f001 fed8 	bl	8007e0c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            break;
 800605c:	e0c0      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA27: {   // OD_IMU3_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800605e:	2303      	movs	r3, #3
 8006060:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 8006064:	f001 f80c 	bl	8007080 <_Z23OD_IMU3_Temperature_getv>
 8006068:	eef0 7a40 	vmov.f32	s15, s0
 800606c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006070:	eeb0 0a67 	vmov.f32	s0, s15
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fee0 	bl	8007e3a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            break;
 800607a:	e0b1      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA28: {   // OD_IMU_AccelX
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800607c:	2303      	movs	r3, #3
 800607e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelX>(OD_IMU_AccelX_get());
 8006082:	f001 f81b 	bl	80070bc <_Z17OD_IMU_AccelX_getv>
 8006086:	eef0 7a40 	vmov.f32	s15, s0
 800608a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800608e:	eeb0 0a67 	vmov.f32	s0, s15
 8006092:	4618      	mov	r0, r3
 8006094:	f001 fee8 	bl	8007e68 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>
            break;
 8006098:	e0a2      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA29: {   // OD_IMU_AccelY
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800609a:	2303      	movs	r3, #3
 800609c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelY>(OD_IMU_AccelY_get());
 80060a0:	f001 f846 	bl	8007130 <_Z17OD_IMU_AccelY_getv>
 80060a4:	eef0 7a40 	vmov.f32	s15, s0
 80060a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ac:	eeb0 0a67 	vmov.f32	s0, s15
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fef0 	bl	8007e96 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>
            break;
 80060b6:	e093      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA30: {   // OD_IMU_AccelZ
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelZ>(OD_IMU_AccelZ_get());
 80060be:	f001 f871 	bl	80071a4 <_Z17OD_IMU_AccelZ_getv>
 80060c2:	eef0 7a40 	vmov.f32	s15, s0
 80060c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ca:	eeb0 0a67 	vmov.f32	s0, s15
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fef8 	bl	8007ec4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>
            break;
 80060d4:	e084      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA31: {   // OD_IMU_GyroX
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroX>(OD_IMU_GyroX_get());
 80060dc:	f001 f89c 	bl	8007218 <_Z16OD_IMU_GyroX_getv>
 80060e0:	eef0 7a40 	vmov.f32	s15, s0
 80060e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060e8:	eeb0 0a67 	vmov.f32	s0, s15
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 ff00 	bl	8007ef2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>
            break;
 80060f2:	e075      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA32: {   // OD_IMU_GyroY
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroY>(OD_IMU_GyroY_get());
 80060fa:	f001 f8c7 	bl	800728c <_Z16OD_IMU_GyroY_getv>
 80060fe:	eef0 7a40 	vmov.f32	s15, s0
 8006102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006106:	eeb0 0a67 	vmov.f32	s0, s15
 800610a:	4618      	mov	r0, r3
 800610c:	f001 ff08 	bl	8007f20 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>
            break;
 8006110:	e066      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA33: {   // OD_IMU_GyroZ
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006112:	2303      	movs	r3, #3
 8006114:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroZ>(OD_IMU_GyroZ_get());
 8006118:	f001 f8f2 	bl	8007300 <_Z16OD_IMU_GyroZ_getv>
 800611c:	eef0 7a40 	vmov.f32	s15, s0
 8006120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006124:	eeb0 0a67 	vmov.f32	s0, s15
 8006128:	4618      	mov	r0, r3
 800612a:	f001 ff10 	bl	8007f4e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>
            break;
 800612e:	e057      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xB00: {   // OD_CoolingPressure
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006130:	2303      	movs	r3, #3
 8006132:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CoolingPressure>(OD_CoolingPressure_get());
 8006136:	f001 f91d 	bl	8007374 <_Z22OD_CoolingPressure_getv>
 800613a:	eef0 7a40 	vmov.f32	s15, s0
 800613e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006142:	eeb0 0a67 	vmov.f32	s0, s15
 8006146:	4618      	mov	r0, r3
 8006148:	f001 ff18 	bl	8007f7c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>
            break;
 800614c:	e048      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xC00: {   // OD_FiducialRightCounter
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800614e:	2303      	movs	r3, #3
 8006150:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_FiducialRightCounter>(OD_FiducialRightCounter_get());
 8006154:	f001 f948 	bl	80073e8 <_Z27OD_FiducialRightCounter_getv>
 8006158:	4603      	mov	r3, r0
 800615a:	461a      	mov	r2, r3
 800615c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006160:	4611      	mov	r1, r2
 8006162:	4618      	mov	r0, r3
 8006164:	f001 ff21 	bl	8007faa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>
            break;
 8006168:	e03a      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xC01: {   // OD_FiducialLeftCounter
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800616a:	2303      	movs	r3, #3
 800616c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_FiducialLeftCounter>(OD_FiducialLeftCounter_get());
 8006170:	f001 f972 	bl	8007458 <_Z26OD_FiducialLeftCounter_getv>
 8006174:	4603      	mov	r3, r0
 8006176:	461a      	mov	r2, r3
 8006178:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800617c:	4611      	mov	r1, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f001 ff28 	bl	8007fd4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>
            break;
 8006184:	e02c      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xD00: {   // OD_Position
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006186:	2303      	movs	r3, #3
 8006188:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_Position>(OD_Position_get());
 800618c:	f001 f99c 	bl	80074c8 <_Z15OD_Position_getv>
 8006190:	eef0 7a40 	vmov.f32	s15, s0
 8006194:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006198:	eeb0 0a67 	vmov.f32	s0, s15
 800619c:	4618      	mov	r0, r3
 800619e:	f001 ff2e 	bl	8007ffe <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>
            break;
 80061a2:	e01d      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
 80061a4:	3c23d70a 	.word	0x3c23d70a
 80061a8:	42c80000 	.word	0x42c80000
 80061ac:	43960000 	.word	0x43960000
        }
        case 0xD01: {   // OD_Velocity
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_Velocity>(OD_Velocity_get());
 80061b6:	f001 f9c1 	bl	800753c <_Z15OD_Velocity_getv>
 80061ba:	eef0 7a40 	vmov.f32	s15, s0
 80061be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061c2:	eeb0 0a67 	vmov.f32	s0, s15
 80061c6:	4618      	mov	r0, r3
 80061c8:	f001 ff30 	bl	800802c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>
            break;
 80061cc:	e008      	b.n	80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(sdoId);
 80061ce:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80061d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061d6:	4611      	mov	r1, r2
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 fdd6 	bl	8007d8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 80061de:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SensorF_SDO_RespCode>(respCode);
 80061e0:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 80061e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061e8:	4611      	mov	r1, r2
 80061ea:	4618      	mov	r0, r3
 80061ec:	f001 ff35 	bl	800805a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 80061f0:	f107 0308 	add.w	r3, r7, #8
 80061f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80061f8:	2200      	movs	r2, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fa fffa 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8006200:	4b05      	ldr	r3, [pc, #20]	; (8006218 <_Z22handleSDORequestUploadRK9RxMessage+0xcb8>)
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	f107 0108 	add.w	r1, r7, #8
 8006208:	2300      	movs	r3, #0
 800620a:	2200      	movs	r2, #0
 800620c:	f010 fa0c 	bl	8016628 <osMessageQueuePut>
}
 8006210:	bf00      	nop
 8006212:	3780      	adds	r7, #128	; 0x80
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}
 8006218:	200007bc 	.word	0x200007bc

0800621c <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 8006222:	4b0a      	ldr	r3, [pc, #40]	; (800624c <_Z13OD_NodeID_getv+0x30>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f04f 31ff 	mov.w	r1, #4294967295
 800622a:	4618      	mov	r0, r3
 800622c:	f00f ffc1 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_NodeID;
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <_Z13OD_NodeID_getv+0x34>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8006236:	4b05      	ldr	r3, [pc, #20]	; (800624c <_Z13OD_NodeID_getv+0x30>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4618      	mov	r0, r3
 800623c:	f010 f804 	bl	8016248 <osMutexRelease>
    return value;
 8006240:	79fb      	ldrb	r3, [r7, #7]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000868 	.word	0x20000868
 8006250:	200007c5 	.word	0x200007c5

08006254 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8006254:	b580      	push	{r7, lr}
 8006256:	b082      	sub	sp, #8
 8006258:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <_Z17OD_NodeStatus_getv+0x30>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f04f 31ff 	mov.w	r1, #4294967295
 8006262:	4618      	mov	r0, r3
 8006264:	f00f ffa5 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 8006268:	4b07      	ldr	r3, [pc, #28]	; (8006288 <_Z17OD_NodeStatus_getv+0x34>)
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 800626e:	4b05      	ldr	r3, [pc, #20]	; (8006284 <_Z17OD_NodeStatus_getv+0x30>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f00f ffe8 	bl	8016248 <osMutexRelease>
    return value;
 8006278:	79fb      	ldrb	r3, [r7, #7]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3708      	adds	r7, #8
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	2000086c 	.word	0x2000086c
 8006288:	200007c6 	.word	0x200007c6

0800628c <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8006292:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <_Z22OD_ProtocolVersion_getv+0x30>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f04f 31ff 	mov.w	r1, #4294967295
 800629a:	4618      	mov	r0, r3
 800629c:	f00f ff89 	bl	80161b2 <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <_Z22OD_ProtocolVersion_getv+0x34>)
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <_Z22OD_ProtocolVersion_getv+0x30>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f00f ffcc 	bl	8016248 <osMutexRelease>
    return value;
 80062b0:	88fb      	ldrh	r3, [r7, #6]
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3708      	adds	r7, #8
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000870 	.word	0x20000870
 80062c0:	20000000 	.word	0x20000000

080062c4 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 80062ca:	4b0a      	ldr	r3, [pc, #40]	; (80062f4 <_Z19OD_StackVersion_getv+0x30>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f04f 31ff 	mov.w	r1, #4294967295
 80062d2:	4618      	mov	r0, r3
 80062d4:	f00f ff6d 	bl	80161b2 <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 80062d8:	4b07      	ldr	r3, [pc, #28]	; (80062f8 <_Z19OD_StackVersion_getv+0x34>)
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 80062de:	4b05      	ldr	r3, [pc, #20]	; (80062f4 <_Z19OD_StackVersion_getv+0x30>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f00f ffb0 	bl	8016248 <osMutexRelease>
    return value;
 80062e8:	88fb      	ldrh	r3, [r7, #6]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3708      	adds	r7, #8
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
 80062f2:	bf00      	nop
 80062f4:	20000874 	.word	0x20000874
 80062f8:	200007c8 	.word	0x200007c8

080062fc <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 8006302:	4b0a      	ldr	r3, [pc, #40]	; (800632c <_Z17OD_DbcVersion_getv+0x30>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f04f 31ff 	mov.w	r1, #4294967295
 800630a:	4618      	mov	r0, r3
 800630c:	f00f ff51 	bl	80161b2 <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8006310:	4b07      	ldr	r3, [pc, #28]	; (8006330 <_Z17OD_DbcVersion_getv+0x34>)
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 8006316:	4b05      	ldr	r3, [pc, #20]	; (800632c <_Z17OD_DbcVersion_getv+0x30>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f00f ff94 	bl	8016248 <osMutexRelease>
    return value;
 8006320:	88fb      	ldrh	r3, [r7, #6]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3708      	adds	r7, #8
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20000878 	.word	0x20000878
 8006330:	200007ca 	.word	0x200007ca

08006334 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 800633a:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <_Z24OD_HeartbeatInterval_getv+0x30>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f04f 31ff 	mov.w	r1, #4294967295
 8006342:	4618      	mov	r0, r3
 8006344:	f00f ff35 	bl	80161b2 <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8006348:	4b07      	ldr	r3, [pc, #28]	; (8006368 <_Z24OD_HeartbeatInterval_getv+0x34>)
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 800634e:	4b05      	ldr	r3, [pc, #20]	; (8006364 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f00f ff78 	bl	8016248 <osMutexRelease>
    return value;
 8006358:	88fb      	ldrh	r3, [r7, #6]
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	2000087c 	.word	0x2000087c
 8006368:	20000002 	.word	0x20000002

0800636c <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8006376:	4b09      	ldr	r3, [pc, #36]	; (800639c <_Z24OD_HeartbeatInterval_sett+0x30>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f04f 31ff 	mov.w	r1, #4294967295
 800637e:	4618      	mov	r0, r3
 8006380:	f00f ff17 	bl	80161b2 <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8006384:	4a06      	ldr	r2, [pc, #24]	; (80063a0 <_Z24OD_HeartbeatInterval_sett+0x34>)
 8006386:	88fb      	ldrh	r3, [r7, #6]
 8006388:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 800638a:	4b04      	ldr	r3, [pc, #16]	; (800639c <_Z24OD_HeartbeatInterval_sett+0x30>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f00f ff5a 	bl	8016248 <osMutexRelease>
}
 8006394:	bf00      	nop
 8006396:	3708      	adds	r7, #8
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	2000087c 	.word	0x2000087c
 80063a0:	20000002 	.word	0x20000002

080063a4 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 80063aa:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <_Z21OD_SendOdOnBootup_getv+0x30>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f04f 31ff 	mov.w	r1, #4294967295
 80063b2:	4618      	mov	r0, r3
 80063b4:	f00f fefd 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 80063b8:	4b07      	ldr	r3, [pc, #28]	; (80063d8 <_Z21OD_SendOdOnBootup_getv+0x34>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 80063be:	4b05      	ldr	r3, [pc, #20]	; (80063d4 <_Z21OD_SendOdOnBootup_getv+0x30>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f00f ff40 	bl	8016248 <osMutexRelease>
    return value;
 80063c8:	79fb      	ldrb	r3, [r7, #7]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000880 	.word	0x20000880
 80063d8:	200007cc 	.word	0x200007cc

080063dc <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 80063e6:	4b09      	ldr	r3, [pc, #36]	; (800640c <_Z21OD_SendOdOnBootup_seth+0x30>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f04f 31ff 	mov.w	r1, #4294967295
 80063ee:	4618      	mov	r0, r3
 80063f0:	f00f fedf 	bl	80161b2 <osMutexAcquire>
    OD_SendOdOnBootup = value;
 80063f4:	4a06      	ldr	r2, [pc, #24]	; (8006410 <_Z21OD_SendOdOnBootup_seth+0x34>)
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 80063fa:	4b04      	ldr	r3, [pc, #16]	; (800640c <_Z21OD_SendOdOnBootup_seth+0x30>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f00f ff22 	bl	8016248 <osMutexRelease>
}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20000880 	.word	0x20000880
 8006410:	200007cc 	.word	0x200007cc

08006414 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8006414:	b580      	push	{r7, lr}
 8006416:	b082      	sub	sp, #8
 8006418:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 800641a:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f04f 31ff 	mov.w	r1, #4294967295
 8006422:	4618      	mov	r0, r3
 8006424:	f00f fec5 	bl	80161b2 <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8006428:	4b07      	ldr	r3, [pc, #28]	; (8006448 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 800642a:	881b      	ldrh	r3, [r3, #0]
 800642c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 800642e:	4b05      	ldr	r3, [pc, #20]	; (8006444 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4618      	mov	r0, r3
 8006434:	f00f ff08 	bl	8016248 <osMutexRelease>
    return value;
 8006438:	88fb      	ldrh	r3, [r7, #6]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	20000884 	.word	0x20000884
 8006448:	20000004 	.word	0x20000004

0800644c <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	4603      	mov	r3, r0
 8006454:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f04f 31ff 	mov.w	r1, #4294967295
 800645e:	4618      	mov	r0, r3
 8006460:	f00f fea7 	bl	80161b2 <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8006464:	4a06      	ldr	r2, [pc, #24]	; (8006480 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 800646a:	4b04      	ldr	r3, [pc, #16]	; (800647c <_Z26OD_OdEntrySendInterval_sett+0x30>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f00f feea 	bl	8016248 <osMutexRelease>
}
 8006474:	bf00      	nop
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20000884 	.word	0x20000884
 8006480:	20000004 	.word	0x20000004

08006484 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 800648a:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <_Z15OD_CpuUsage_getv+0x34>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f04f 31ff 	mov.w	r1, #4294967295
 8006492:	4618      	mov	r0, r3
 8006494:	f00f fe8d 	bl	80161b2 <osMutexAcquire>
    float value = OD_CpuUsage;
 8006498:	4b08      	ldr	r3, [pc, #32]	; (80064bc <_Z15OD_CpuUsage_getv+0x38>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 800649e:	4b06      	ldr	r3, [pc, #24]	; (80064b8 <_Z15OD_CpuUsage_getv+0x34>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f00f fed0 	bl	8016248 <osMutexRelease>
    return value;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	ee07 3a90 	vmov	s15, r3
}
 80064ae:	eeb0 0a67 	vmov.f32	s0, s15
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20000888 	.word	0x20000888
 80064bc:	200007d0 	.word	0x200007d0

080064c0 <_Z15OD_CpuUsage_setf>:
#endif
#ifndef OD_CpuUsage_SET_OVERWRITE
void WEAK_SYMBOL OD_CpuUsage_set(const float value) {
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <_Z15OD_CpuUsage_setf+0x30>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f04f 31ff 	mov.w	r1, #4294967295
 80064d2:	4618      	mov	r0, r3
 80064d4:	f00f fe6d 	bl	80161b2 <osMutexAcquire>
    OD_CpuUsage = value;
 80064d8:	4a06      	ldr	r2, [pc, #24]	; (80064f4 <_Z15OD_CpuUsage_setf+0x34>)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CpuUsage);
 80064de:	4b04      	ldr	r3, [pc, #16]	; (80064f0 <_Z15OD_CpuUsage_setf+0x30>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f00f feb0 	bl	8016248 <osMutexRelease>
}
 80064e8:	bf00      	nop
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20000888 	.word	0x20000888
 80064f4:	200007d0 	.word	0x200007d0

080064f8 <_Z14OD_MemFree_getv>:
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 80064fe:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <_Z14OD_MemFree_getv+0x30>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f04f 31ff 	mov.w	r1, #4294967295
 8006506:	4618      	mov	r0, r3
 8006508:	f00f fe53 	bl	80161b2 <osMutexAcquire>
    uint32_t value = OD_MemFree;
 800650c:	4b07      	ldr	r3, [pc, #28]	; (800652c <_Z14OD_MemFree_getv+0x34>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8006512:	4b05      	ldr	r3, [pc, #20]	; (8006528 <_Z14OD_MemFree_getv+0x30>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f00f fe96 	bl	8016248 <osMutexRelease>
    return value;
 800651c:	687b      	ldr	r3, [r7, #4]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	2000088c 	.word	0x2000088c
 800652c:	200007d4 	.word	0x200007d4

08006530 <_Z14OD_MemFree_setm>:
#endif
#ifndef OD_MemFree_SET_OVERWRITE
void WEAK_SYMBOL OD_MemFree_set(const uint32_t value) {
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8006538:	4b09      	ldr	r3, [pc, #36]	; (8006560 <_Z14OD_MemFree_setm+0x30>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f04f 31ff 	mov.w	r1, #4294967295
 8006540:	4618      	mov	r0, r3
 8006542:	f00f fe36 	bl	80161b2 <osMutexAcquire>
    OD_MemFree = value;
 8006546:	4a07      	ldr	r2, [pc, #28]	; (8006564 <_Z14OD_MemFree_setm+0x34>)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_MemFree);
 800654c:	4b04      	ldr	r3, [pc, #16]	; (8006560 <_Z14OD_MemFree_setm+0x30>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f00f fe79 	bl	8016248 <osMutexRelease>
}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	2000088c 	.word	0x2000088c
 8006564:	200007d4 	.word	0x200007d4

08006568 <_Z16OD_BoardTemp_getv>:
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 800656e:	4b0b      	ldr	r3, [pc, #44]	; (800659c <_Z16OD_BoardTemp_getv+0x34>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f04f 31ff 	mov.w	r1, #4294967295
 8006576:	4618      	mov	r0, r3
 8006578:	f00f fe1b 	bl	80161b2 <osMutexAcquire>
    float value = OD_BoardTemp;
 800657c:	4b08      	ldr	r3, [pc, #32]	; (80065a0 <_Z16OD_BoardTemp_getv+0x38>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 8006582:	4b06      	ldr	r3, [pc, #24]	; (800659c <_Z16OD_BoardTemp_getv+0x34>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f00f fe5e 	bl	8016248 <osMutexRelease>
    return value;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	ee07 3a90 	vmov	s15, r3
}
 8006592:	eeb0 0a67 	vmov.f32	s0, s15
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	20000890 	.word	0x20000890
 80065a0:	200007d8 	.word	0x200007d8

080065a4 <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 80065ae:	4b09      	ldr	r3, [pc, #36]	; (80065d4 <_Z16OD_BoardTemp_setf+0x30>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f04f 31ff 	mov.w	r1, #4294967295
 80065b6:	4618      	mov	r0, r3
 80065b8:	f00f fdfb 	bl	80161b2 <osMutexAcquire>
    OD_BoardTemp = value;
 80065bc:	4a06      	ldr	r2, [pc, #24]	; (80065d8 <_Z16OD_BoardTemp_setf+0x34>)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 80065c2:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <_Z16OD_BoardTemp_setf+0x30>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f00f fe3e 	bl	8016248 <osMutexRelease>
}
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	20000890 	.word	0x20000890
 80065d8:	200007d8 	.word	0x200007d8

080065dc <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 80065e2:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <_Z19OD_InputVoltage_getv+0x34>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f04f 31ff 	mov.w	r1, #4294967295
 80065ea:	4618      	mov	r0, r3
 80065ec:	f00f fde1 	bl	80161b2 <osMutexAcquire>
    float value = OD_InputVoltage;
 80065f0:	4b08      	ldr	r3, [pc, #32]	; (8006614 <_Z19OD_InputVoltage_getv+0x38>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 80065f6:	4b06      	ldr	r3, [pc, #24]	; (8006610 <_Z19OD_InputVoltage_getv+0x34>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f00f fe24 	bl	8016248 <osMutexRelease>
    return value;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	ee07 3a90 	vmov	s15, r3
}
 8006606:	eeb0 0a67 	vmov.f32	s0, s15
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000894 	.word	0x20000894
 8006614:	200007dc 	.word	0x200007dc

08006618 <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <_Z19OD_InputVoltage_setf+0x30>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f04f 31ff 	mov.w	r1, #4294967295
 800662a:	4618      	mov	r0, r3
 800662c:	f00f fdc1 	bl	80161b2 <osMutexAcquire>
    OD_InputVoltage = value;
 8006630:	4a06      	ldr	r2, [pc, #24]	; (800664c <_Z19OD_InputVoltage_setf+0x34>)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 8006636:	4b04      	ldr	r3, [pc, #16]	; (8006648 <_Z19OD_InputVoltage_setf+0x30>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4618      	mov	r0, r3
 800663c:	f00f fe04 	bl	8016248 <osMutexRelease>
}
 8006640:	bf00      	nop
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	20000894 	.word	0x20000894
 800664c:	200007dc 	.word	0x200007dc

08006650 <_Z14OD_runtime_getv>:
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8006656:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <_Z14OD_runtime_getv+0x30>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f04f 31ff 	mov.w	r1, #4294967295
 800665e:	4618      	mov	r0, r3
 8006660:	f00f fda7 	bl	80161b2 <osMutexAcquire>
    uint32_t value = OD_runtime;
 8006664:	4b07      	ldr	r3, [pc, #28]	; (8006684 <_Z14OD_runtime_getv+0x34>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 800666a:	4b05      	ldr	r3, [pc, #20]	; (8006680 <_Z14OD_runtime_getv+0x30>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4618      	mov	r0, r3
 8006670:	f00f fdea 	bl	8016248 <osMutexRelease>
    return value;
 8006674:	687b      	ldr	r3, [r7, #4]
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	20000898 	.word	0x20000898
 8006684:	200007e0 	.word	0x200007e0

08006688 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <_Z12OD_SdcIn_getv+0x30>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f04f 31ff 	mov.w	r1, #4294967295
 8006696:	4618      	mov	r0, r3
 8006698:	f00f fd8b 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 800669c:	4b07      	ldr	r3, [pc, #28]	; (80066bc <_Z12OD_SdcIn_getv+0x34>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 80066a2:	4b05      	ldr	r3, [pc, #20]	; (80066b8 <_Z12OD_SdcIn_getv+0x30>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f00f fdce 	bl	8016248 <osMutexRelease>
    return value;
 80066ac:	79fb      	ldrb	r3, [r7, #7]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3708      	adds	r7, #8
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	2000089c 	.word	0x2000089c
 80066bc:	200007e4 	.word	0x200007e4

080066c0 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 80066c6:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <_Z13OD_SdcOut_getv+0x30>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f04f 31ff 	mov.w	r1, #4294967295
 80066ce:	4618      	mov	r0, r3
 80066d0:	f00f fd6f 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 80066d4:	4b07      	ldr	r3, [pc, #28]	; (80066f4 <_Z13OD_SdcOut_getv+0x34>)
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 80066da:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <_Z13OD_SdcOut_getv+0x30>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4618      	mov	r0, r3
 80066e0:	f00f fdb2 	bl	8016248 <osMutexRelease>
    return value;
 80066e4:	79fb      	ldrb	r3, [r7, #7]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3708      	adds	r7, #8
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	200008a0 	.word	0x200008a0
 80066f4:	200007e5 	.word	0x200007e5

080066f8 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <_Z15OD_ChipUID1_getv+0x38>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f04f 31ff 	mov.w	r1, #4294967295
 8006706:	4618      	mov	r0, r3
 8006708:	f00f fd53 	bl	80161b2 <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 800670c:	4b09      	ldr	r3, [pc, #36]	; (8006734 <_Z15OD_ChipUID1_getv+0x3c>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8006716:	4b06      	ldr	r3, [pc, #24]	; (8006730 <_Z15OD_ChipUID1_getv+0x38>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f00f fd94 	bl	8016248 <osMutexRelease>
    return value;
 8006720:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	200008a4 	.word	0x200008a4
 8006734:	200007e8 	.word	0x200007e8

08006738 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 800673e:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <_Z15OD_ChipUID2_getv+0x38>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f04f 31ff 	mov.w	r1, #4294967295
 8006746:	4618      	mov	r0, r3
 8006748:	f00f fd33 	bl	80161b2 <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 800674c:	4b09      	ldr	r3, [pc, #36]	; (8006774 <_Z15OD_ChipUID2_getv+0x3c>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8006756:	4b06      	ldr	r3, [pc, #24]	; (8006770 <_Z15OD_ChipUID2_getv+0x38>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f00f fd74 	bl	8016248 <osMutexRelease>
    return value;
 8006760:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006764:	4610      	mov	r0, r2
 8006766:	4619      	mov	r1, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	200008a8 	.word	0x200008a8
 8006774:	200007f0 	.word	0x200007f0

08006778 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 800677e:	4b0a      	ldr	r3, [pc, #40]	; (80067a8 <_Z16OD_BuildDate_getv+0x30>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f04f 31ff 	mov.w	r1, #4294967295
 8006786:	4618      	mov	r0, r3
 8006788:	f00f fd13 	bl	80161b2 <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 800678c:	4b07      	ldr	r3, [pc, #28]	; (80067ac <_Z16OD_BuildDate_getv+0x34>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8006792:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <_Z16OD_BuildDate_getv+0x30>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f00f fd56 	bl	8016248 <osMutexRelease>
    return value;
 800679c:	687b      	ldr	r3, [r7, #4]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3708      	adds	r7, #8
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	200008ac 	.word	0x200008ac
 80067ac:	200007f8 	.word	0x200007f8

080067b0 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 80067b6:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <_Z16OD_BuildTime_getv+0x30>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f04f 31ff 	mov.w	r1, #4294967295
 80067be:	4618      	mov	r0, r3
 80067c0:	f00f fcf7 	bl	80161b2 <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 80067c4:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <_Z16OD_BuildTime_getv+0x34>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 80067ca:	4b05      	ldr	r3, [pc, #20]	; (80067e0 <_Z16OD_BuildTime_getv+0x30>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f00f fd3a 	bl	8016248 <osMutexRelease>
    return value;
 80067d4:	687b      	ldr	r3, [r7, #4]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	200008b0 	.word	0x200008b0
 80067e4:	200007fc 	.word	0x200007fc

080067e8 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 80067ee:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f04f 31ff 	mov.w	r1, #4294967295
 80067f6:	4618      	mov	r0, r3
 80067f8:	f00f fcdb 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 80067fc:	4b07      	ldr	r3, [pc, #28]	; (800681c <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8006802:	4b05      	ldr	r3, [pc, #20]	; (8006818 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f00f fd1e 	bl	8016248 <osMutexRelease>
    return value;
 800680c:	79fb      	ldrb	r3, [r7, #7]
}
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	200008b4 	.word	0x200008b4
 800681c:	20000800 	.word	0x20000800

08006820 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8006826:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f04f 31ff 	mov.w	r1, #4294967295
 800682e:	4618      	mov	r0, r3
 8006830:	f00f fcbf 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8006834:	4b07      	ldr	r3, [pc, #28]	; (8006854 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4618      	mov	r0, r3
 8006840:	f00f fd02 	bl	8016248 <osMutexRelease>
    return value;
 8006844:	79fb      	ldrb	r3, [r7, #7]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	200008b8 	.word	0x200008b8
 8006854:	20000801 	.word	0x20000801

08006858 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 800685e:	4b0a      	ldr	r3, [pc, #40]	; (8006888 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f04f 31ff 	mov.w	r1, #4294967295
 8006866:	4618      	mov	r0, r3
 8006868:	f00f fca3 	bl	80161b2 <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 800686c:	4b07      	ldr	r3, [pc, #28]	; (800688c <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 8006872:	4b05      	ldr	r3, [pc, #20]	; (8006888 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4618      	mov	r0, r3
 8006878:	f00f fce6 	bl	8016248 <osMutexRelease>
    return value;
 800687c:	687b      	ldr	r3, [r7, #4]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	200008bc 	.word	0x200008bc
 800688c:	20000804 	.word	0x20000804

08006890 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8006896:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f04f 31ff 	mov.w	r1, #4294967295
 800689e:	4618      	mov	r0, r3
 80068a0:	f00f fc87 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 80068a4:	4b07      	ldr	r3, [pc, #28]	; (80068c4 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f00f fcca 	bl	8016248 <osMutexRelease>
    return value;
 80068b4:	79fb      	ldrb	r3, [r7, #7]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	200008c0 	.word	0x200008c0
 80068c4:	20000006 	.word	0x20000006

080068c8 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 80068d2:	4b09      	ldr	r3, [pc, #36]	; (80068f8 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f04f 31ff 	mov.w	r1, #4294967295
 80068da:	4618      	mov	r0, r3
 80068dc:	f00f fc69 	bl	80161b2 <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 80068e0:	4a06      	ldr	r2, [pc, #24]	; (80068fc <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80068e6:	4b04      	ldr	r3, [pc, #16]	; (80068f8 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f00f fcac 	bl	8016248 <osMutexRelease>
}
 80068f0:	bf00      	nop
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	200008c0 	.word	0x200008c0
 80068fc:	20000006 	.word	0x20000006

08006900 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8006906:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f04f 31ff 	mov.w	r1, #4294967295
 800690e:	4618      	mov	r0, r3
 8006910:	f00f fc4f 	bl	80161b2 <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8006914:	4b07      	ldr	r3, [pc, #28]	; (8006934 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8006916:	881b      	ldrh	r3, [r3, #0]
 8006918:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 800691a:	4b05      	ldr	r3, [pc, #20]	; (8006930 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4618      	mov	r0, r3
 8006920:	f00f fc92 	bl	8016248 <osMutexRelease>
    return value;
 8006924:	88fb      	ldrh	r3, [r7, #6]
}
 8006926:	4618      	mov	r0, r3
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	200008c4 	.word	0x200008c4
 8006934:	20000008 	.word	0x20000008

08006938 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	4603      	mov	r3, r0
 8006940:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8006942:	4b09      	ldr	r3, [pc, #36]	; (8006968 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f04f 31ff 	mov.w	r1, #4294967295
 800694a:	4618      	mov	r0, r3
 800694c:	f00f fc31 	bl	80161b2 <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8006950:	4a06      	ldr	r2, [pc, #24]	; (800696c <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8006956:	4b04      	ldr	r3, [pc, #16]	; (8006968 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f00f fc74 	bl	8016248 <osMutexRelease>
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	200008c4 	.word	0x200008c4
 800696c:	20000008 	.word	0x20000008

08006970 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 8006976:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <_Z18OD_CAN1_Status_getv+0x30>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f04f 31ff 	mov.w	r1, #4294967295
 800697e:	4618      	mov	r0, r3
 8006980:	f00f fc17 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8006984:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <_Z18OD_CAN1_Status_getv+0x34>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 800698a:	4b05      	ldr	r3, [pc, #20]	; (80069a0 <_Z18OD_CAN1_Status_getv+0x30>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f00f fc5a 	bl	8016248 <osMutexRelease>
    return value;
 8006994:	79fb      	ldrb	r3, [r7, #7]
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	200008c8 	.word	0x200008c8
 80069a4:	20000808 	.word	0x20000808

080069a8 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 80069ae:	4b0a      	ldr	r3, [pc, #40]	; (80069d8 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f04f 31ff 	mov.w	r1, #4294967295
 80069b6:	4618      	mov	r0, r3
 80069b8:	f00f fbfb 	bl	80161b2 <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 80069bc:	4b07      	ldr	r3, [pc, #28]	; (80069dc <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 80069c2:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4618      	mov	r0, r3
 80069c8:	f00f fc3e 	bl	8016248 <osMutexRelease>
    return value;
 80069cc:	687b      	ldr	r3, [r7, #4]
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3708      	adds	r7, #8
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	200008cc 	.word	0x200008cc
 80069dc:	2000080c 	.word	0x2000080c

080069e0 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 80069e6:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f04f 31ff 	mov.w	r1, #4294967295
 80069ee:	4618      	mov	r0, r3
 80069f0:	f00f fbdf 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 80069f4:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4618      	mov	r0, r3
 8006a00:	f00f fc22 	bl	8016248 <osMutexRelease>
    return value;
 8006a04:	79fb      	ldrb	r3, [r7, #7]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3708      	adds	r7, #8
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200008d0 	.word	0x200008d0
 8006a14:	20000810 	.word	0x20000810

08006a18 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f04f 31ff 	mov.w	r1, #4294967295
 8006a26:	4618      	mov	r0, r3
 8006a28:	f00f fbc3 	bl	80161b2 <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 8006a2c:	4b07      	ldr	r3, [pc, #28]	; (8006a4c <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8006a32:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f00f fc06 	bl	8016248 <osMutexRelease>
    return value;
 8006a3c:	687b      	ldr	r3, [r7, #4]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3708      	adds	r7, #8
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	200008d4 	.word	0x200008d4
 8006a4c:	20000814 	.word	0x20000814

08006a50 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8006a56:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f00f fba7 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8006a64:	4b07      	ldr	r3, [pc, #28]	; (8006a84 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f00f fbea 	bl	8016248 <osMutexRelease>
    return value;
 8006a74:	79fb      	ldrb	r3, [r7, #7]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200008d8 	.word	0x200008d8
 8006a84:	20000818 	.word	0x20000818

08006a88 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f04f 31ff 	mov.w	r1, #4294967295
 8006a96:	4618      	mov	r0, r3
 8006a98:	f00f fb8b 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 8006a9c:	4b07      	ldr	r3, [pc, #28]	; (8006abc <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 8006aa2:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f00f fbce 	bl	8016248 <osMutexRelease>
    return value;
 8006aac:	79fb      	ldrb	r3, [r7, #7]
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	200008dc 	.word	0x200008dc
 8006abc:	20000819 	.word	0x20000819

08006ac0 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b082      	sub	sp, #8
 8006ac4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f04f 31ff 	mov.w	r1, #4294967295
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f00f fb6f 	bl	80161b2 <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8006ad4:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 8006ada:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f00f fbb2 	bl	8016248 <osMutexRelease>
    return value;
 8006ae4:	687b      	ldr	r3, [r7, #4]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	200008e0 	.word	0x200008e0
 8006af4:	2000081c 	.word	0x2000081c

08006af8 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8006afe:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f04f 31ff 	mov.w	r1, #4294967295
 8006b06:	4618      	mov	r0, r3
 8006b08:	f00f fb53 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 8006b0c:	4b07      	ldr	r3, [pc, #28]	; (8006b2c <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f00f fb96 	bl	8016248 <osMutexRelease>
    return value;
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	200008e4 	.word	0x200008e4
 8006b2c:	2000000a 	.word	0x2000000a

08006b30 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	4603      	mov	r3, r0
 8006b38:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8006b3a:	4b09      	ldr	r3, [pc, #36]	; (8006b60 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f04f 31ff 	mov.w	r1, #4294967295
 8006b42:	4618      	mov	r0, r3
 8006b44:	f00f fb35 	bl	80161b2 <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 8006b48:	4a06      	ldr	r2, [pc, #24]	; (8006b64 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 8006b4a:	79fb      	ldrb	r3, [r7, #7]
 8006b4c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8006b4e:	4b04      	ldr	r3, [pc, #16]	; (8006b60 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f00f fb78 	bl	8016248 <osMutexRelease>
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	200008e4 	.word	0x200008e4
 8006b64:	2000000a 	.word	0x2000000a

08006b68 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8006b6e:	4b0a      	ldr	r3, [pc, #40]	; (8006b98 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f04f 31ff 	mov.w	r1, #4294967295
 8006b76:	4618      	mov	r0, r3
 8006b78:	f00f fb1b 	bl	80161b2 <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8006b7c:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <_Z20OD_CAN2_Baudrate_getv+0x34>)
 8006b7e:	881b      	ldrh	r3, [r3, #0]
 8006b80:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8006b82:	4b05      	ldr	r3, [pc, #20]	; (8006b98 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f00f fb5e 	bl	8016248 <osMutexRelease>
    return value;
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	200008e8 	.word	0x200008e8
 8006b9c:	2000000c 	.word	0x2000000c

08006ba0 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8006baa:	4b09      	ldr	r3, [pc, #36]	; (8006bd0 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f04f 31ff 	mov.w	r1, #4294967295
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f00f fafd 	bl	80161b2 <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 8006bb8:	4a06      	ldr	r2, [pc, #24]	; (8006bd4 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 8006bba:	88fb      	ldrh	r3, [r7, #6]
 8006bbc:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8006bbe:	4b04      	ldr	r3, [pc, #16]	; (8006bd0 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f00f fb40 	bl	8016248 <osMutexRelease>
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	200008e8 	.word	0x200008e8
 8006bd4:	2000000c 	.word	0x2000000c

08006bd8 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 8006bde:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <_Z18OD_CAN2_Status_getv+0x30>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f04f 31ff 	mov.w	r1, #4294967295
 8006be6:	4618      	mov	r0, r3
 8006be8:	f00f fae3 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8006bec:	4b07      	ldr	r3, [pc, #28]	; (8006c0c <_Z18OD_CAN2_Status_getv+0x34>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8006bf2:	4b05      	ldr	r3, [pc, #20]	; (8006c08 <_Z18OD_CAN2_Status_getv+0x30>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f00f fb26 	bl	8016248 <osMutexRelease>
    return value;
 8006bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3708      	adds	r7, #8
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	200008ec 	.word	0x200008ec
 8006c0c:	20000820 	.word	0x20000820

08006c10 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 8006c16:	4b0a      	ldr	r3, [pc, #40]	; (8006c40 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f00f fac7 	bl	80161b2 <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8006c24:	4b07      	ldr	r3, [pc, #28]	; (8006c44 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 8006c2a:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f00f fb0a 	bl	8016248 <osMutexRelease>
    return value;
 8006c34:	687b      	ldr	r3, [r7, #4]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3708      	adds	r7, #8
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	200008f0 	.word	0x200008f0
 8006c44:	20000824 	.word	0x20000824

08006c48 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 8006c4e:	4b0a      	ldr	r3, [pc, #40]	; (8006c78 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f04f 31ff 	mov.w	r1, #4294967295
 8006c56:	4618      	mov	r0, r3
 8006c58:	f00f faab 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 8006c5c:	4b07      	ldr	r3, [pc, #28]	; (8006c7c <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 8006c62:	4b05      	ldr	r3, [pc, #20]	; (8006c78 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f00f faee 	bl	8016248 <osMutexRelease>
    return value;
 8006c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	200008f4 	.word	0x200008f4
 8006c7c:	20000828 	.word	0x20000828

08006c80 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 8006c86:	4b0a      	ldr	r3, [pc, #40]	; (8006cb0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f00f fa8f 	bl	80161b2 <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 8006c94:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 8006c9a:	4b05      	ldr	r3, [pc, #20]	; (8006cb0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f00f fad2 	bl	8016248 <osMutexRelease>
    return value;
 8006ca4:	687b      	ldr	r3, [r7, #4]
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	200008f8 	.word	0x200008f8
 8006cb4:	2000082c 	.word	0x2000082c

08006cb8 <_Z23OD_samplingInterval_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_samplingInterval_GET_OVERWRITE
float WEAK_SYMBOL OD_samplingInterval_get() {
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_samplingInterval, portMAX_DELAY);
 8006cbe:	4b0b      	ldr	r3, [pc, #44]	; (8006cec <_Z23OD_samplingInterval_getv+0x34>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f04f 31ff 	mov.w	r1, #4294967295
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f00f fa73 	bl	80161b2 <osMutexAcquire>
    float value = OD_samplingInterval;
 8006ccc:	4b08      	ldr	r3, [pc, #32]	; (8006cf0 <_Z23OD_samplingInterval_getv+0x38>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_samplingInterval);
 8006cd2:	4b06      	ldr	r3, [pc, #24]	; (8006cec <_Z23OD_samplingInterval_getv+0x34>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f00f fab6 	bl	8016248 <osMutexRelease>
    return value;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	ee07 3a90 	vmov	s15, r3
}
 8006ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8006ce6:	3708      	adds	r7, #8
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	200008fc 	.word	0x200008fc
 8006cf0:	20000010 	.word	0x20000010

08006cf4 <_Z23OD_samplingInterval_setf>:
#endif
#ifndef OD_samplingInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_samplingInterval_set(const float value) {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_samplingInterval, portMAX_DELAY);
 8006cfe:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <_Z23OD_samplingInterval_setf+0x30>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f04f 31ff 	mov.w	r1, #4294967295
 8006d06:	4618      	mov	r0, r3
 8006d08:	f00f fa53 	bl	80161b2 <osMutexAcquire>
    OD_samplingInterval = value;
 8006d0c:	4a06      	ldr	r2, [pc, #24]	; (8006d28 <_Z23OD_samplingInterval_setf+0x34>)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_samplingInterval);
 8006d12:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <_Z23OD_samplingInterval_setf+0x30>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f00f fa96 	bl	8016248 <osMutexRelease>
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	200008fc 	.word	0x200008fc
 8006d28:	20000010 	.word	0x20000010

08006d2c <_Z24OD_TelemetryCommands_getv>:
#endif

#ifndef OD_TelemetryCommands_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_TelemetryCommands_get() {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_TelemetryCommands, portMAX_DELAY);
 8006d32:	4b0a      	ldr	r3, [pc, #40]	; (8006d5c <_Z24OD_TelemetryCommands_getv+0x30>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f04f 31ff 	mov.w	r1, #4294967295
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f00f fa39 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_TelemetryCommands;
 8006d40:	4b07      	ldr	r3, [pc, #28]	; (8006d60 <_Z24OD_TelemetryCommands_getv+0x34>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_TelemetryCommands);
 8006d46:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <_Z24OD_TelemetryCommands_getv+0x30>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f00f fa7c 	bl	8016248 <osMutexRelease>
    return value;
 8006d50:	79fb      	ldrb	r3, [r7, #7]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000900 	.word	0x20000900
 8006d60:	20000830 	.word	0x20000830

08006d64 <_Z24OD_TelemetryCommands_seth>:
#endif
#ifndef OD_TelemetryCommands_SET_OVERWRITE
void WEAK_SYMBOL OD_TelemetryCommands_set(const uint8_t value) {
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_TelemetryCommands, portMAX_DELAY);
 8006d6e:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <_Z24OD_TelemetryCommands_seth+0x30>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f04f 31ff 	mov.w	r1, #4294967295
 8006d76:	4618      	mov	r0, r3
 8006d78:	f00f fa1b 	bl	80161b2 <osMutexAcquire>
    OD_TelemetryCommands = value;
 8006d7c:	4a06      	ldr	r2, [pc, #24]	; (8006d98 <_Z24OD_TelemetryCommands_seth+0x34>)
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_TelemetryCommands);
 8006d82:	4b04      	ldr	r3, [pc, #16]	; (8006d94 <_Z24OD_TelemetryCommands_seth+0x30>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f00f fa5e 	bl	8016248 <osMutexRelease>
}
 8006d8c:	bf00      	nop
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}
 8006d94:	20000900 	.word	0x20000900
 8006d98:	20000830 	.word	0x20000830

08006d9c <_Z27OD_StateMachineInterval_getv>:
#endif

#ifndef OD_StateMachineInterval_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_StateMachineInterval_get() {
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StateMachineInterval, portMAX_DELAY);
 8006da2:	4b0a      	ldr	r3, [pc, #40]	; (8006dcc <_Z27OD_StateMachineInterval_getv+0x30>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f04f 31ff 	mov.w	r1, #4294967295
 8006daa:	4618      	mov	r0, r3
 8006dac:	f00f fa01 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_StateMachineInterval;
 8006db0:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <_Z27OD_StateMachineInterval_getv+0x34>)
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_StateMachineInterval);
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <_Z27OD_StateMachineInterval_getv+0x30>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f00f fa44 	bl	8016248 <osMutexRelease>
    return value;
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
}
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000904 	.word	0x20000904
 8006dd0:	20000014 	.word	0x20000014

08006dd4 <_Z27OD_StateMachineInterval_seth>:
#endif
#ifndef OD_StateMachineInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_StateMachineInterval_set(const uint8_t value) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	4603      	mov	r3, r0
 8006ddc:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_StateMachineInterval, portMAX_DELAY);
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <_Z27OD_StateMachineInterval_seth+0x30>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f04f 31ff 	mov.w	r1, #4294967295
 8006de6:	4618      	mov	r0, r3
 8006de8:	f00f f9e3 	bl	80161b2 <osMutexAcquire>
    OD_StateMachineInterval = value;
 8006dec:	4a06      	ldr	r2, [pc, #24]	; (8006e08 <_Z27OD_StateMachineInterval_seth+0x34>)
 8006dee:	79fb      	ldrb	r3, [r7, #7]
 8006df0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_StateMachineInterval);
 8006df2:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <_Z27OD_StateMachineInterval_seth+0x30>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f00f fa26 	bl	8016248 <osMutexRelease>
}
 8006dfc:	bf00      	nop
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	20000904 	.word	0x20000904
 8006e08:	20000014 	.word	0x20000014

08006e0c <_Z27OD_StateMachineActivate_getv>:
#endif

#ifndef OD_StateMachineActivate_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_StateMachineActivate_get() {
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StateMachineActivate, portMAX_DELAY);
 8006e12:	4b0a      	ldr	r3, [pc, #40]	; (8006e3c <_Z27OD_StateMachineActivate_getv+0x30>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f04f 31ff 	mov.w	r1, #4294967295
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f00f f9c9 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_StateMachineActivate;
 8006e20:	4b07      	ldr	r3, [pc, #28]	; (8006e40 <_Z27OD_StateMachineActivate_getv+0x34>)
 8006e22:	781b      	ldrb	r3, [r3, #0]
 8006e24:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_StateMachineActivate);
 8006e26:	4b05      	ldr	r3, [pc, #20]	; (8006e3c <_Z27OD_StateMachineActivate_getv+0x30>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f00f fa0c 	bl	8016248 <osMutexRelease>
    return value;
 8006e30:	79fb      	ldrb	r3, [r7, #7]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000908 	.word	0x20000908
 8006e40:	20000831 	.word	0x20000831

08006e44 <_Z27OD_StateMachineActivate_seth>:
#endif
#ifndef OD_StateMachineActivate_SET_OVERWRITE
void WEAK_SYMBOL OD_StateMachineActivate_set(const uint8_t value) {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_StateMachineActivate, portMAX_DELAY);
 8006e4e:	4b09      	ldr	r3, [pc, #36]	; (8006e74 <_Z27OD_StateMachineActivate_seth+0x30>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f04f 31ff 	mov.w	r1, #4294967295
 8006e56:	4618      	mov	r0, r3
 8006e58:	f00f f9ab 	bl	80161b2 <osMutexAcquire>
    OD_StateMachineActivate = value;
 8006e5c:	4a06      	ldr	r2, [pc, #24]	; (8006e78 <_Z27OD_StateMachineActivate_seth+0x34>)
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_StateMachineActivate);
 8006e62:	4b04      	ldr	r3, [pc, #16]	; (8006e74 <_Z27OD_StateMachineActivate_seth+0x30>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f00f f9ee 	bl	8016248 <osMutexRelease>
}
 8006e6c:	bf00      	nop
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	20000908 	.word	0x20000908
 8006e78:	20000831 	.word	0x20000831

08006e7c <_Z20OD_HVBatteryMode_getv>:
#endif

#ifndef OD_HVBatteryMode_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_HVBatteryMode_get() {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HVBatteryMode, portMAX_DELAY);
 8006e82:	4b0a      	ldr	r3, [pc, #40]	; (8006eac <_Z20OD_HVBatteryMode_getv+0x30>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f04f 31ff 	mov.w	r1, #4294967295
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f00f f991 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_HVBatteryMode;
 8006e90:	4b07      	ldr	r3, [pc, #28]	; (8006eb0 <_Z20OD_HVBatteryMode_getv+0x34>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_HVBatteryMode);
 8006e96:	4b05      	ldr	r3, [pc, #20]	; (8006eac <_Z20OD_HVBatteryMode_getv+0x30>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f00f f9d4 	bl	8016248 <osMutexRelease>
    return value;
 8006ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	2000090c 	.word	0x2000090c
 8006eb0:	20000832 	.word	0x20000832

08006eb4 <_Z20OD_HVBatteryMode_seth>:
#endif
#ifndef OD_HVBatteryMode_SET_OVERWRITE
void WEAK_SYMBOL OD_HVBatteryMode_set(const uint8_t value) {
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_HVBatteryMode, portMAX_DELAY);
 8006ebe:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <_Z20OD_HVBatteryMode_seth+0x30>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f00f f973 	bl	80161b2 <osMutexAcquire>
    OD_HVBatteryMode = value;
 8006ecc:	4a06      	ldr	r2, [pc, #24]	; (8006ee8 <_Z20OD_HVBatteryMode_seth+0x34>)
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_HVBatteryMode);
 8006ed2:	4b04      	ldr	r3, [pc, #16]	; (8006ee4 <_Z20OD_HVBatteryMode_seth+0x30>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f00f f9b6 	bl	8016248 <osMutexRelease>
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	2000090c 	.word	0x2000090c
 8006ee8:	20000832 	.word	0x20000832

08006eec <_Z27OD_EncoderWheelDiameter_getv>:
#endif

#ifndef OD_EncoderWheelDiameter_GET_OVERWRITE
float WEAK_SYMBOL OD_EncoderWheelDiameter_get() {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_EncoderWheelDiameter, portMAX_DELAY);
 8006ef2:	4b0b      	ldr	r3, [pc, #44]	; (8006f20 <_Z27OD_EncoderWheelDiameter_getv+0x34>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f04f 31ff 	mov.w	r1, #4294967295
 8006efa:	4618      	mov	r0, r3
 8006efc:	f00f f959 	bl	80161b2 <osMutexAcquire>
    float value = OD_EncoderWheelDiameter;
 8006f00:	4b08      	ldr	r3, [pc, #32]	; (8006f24 <_Z27OD_EncoderWheelDiameter_getv+0x38>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_EncoderWheelDiameter);
 8006f06:	4b06      	ldr	r3, [pc, #24]	; (8006f20 <_Z27OD_EncoderWheelDiameter_getv+0x34>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f00f f99c 	bl	8016248 <osMutexRelease>
    return value;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	ee07 3a90 	vmov	s15, r3
}
 8006f16:	eeb0 0a67 	vmov.f32	s0, s15
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000910 	.word	0x20000910
 8006f24:	20000018 	.word	0x20000018

08006f28 <_Z27OD_EncoderWheelDiameter_setf>:
#endif
#ifndef OD_EncoderWheelDiameter_SET_OVERWRITE
void WEAK_SYMBOL OD_EncoderWheelDiameter_set(const float value) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_EncoderWheelDiameter, portMAX_DELAY);
 8006f32:	4b09      	ldr	r3, [pc, #36]	; (8006f58 <_Z27OD_EncoderWheelDiameter_setf+0x30>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f04f 31ff 	mov.w	r1, #4294967295
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f00f f939 	bl	80161b2 <osMutexAcquire>
    OD_EncoderWheelDiameter = value;
 8006f40:	4a06      	ldr	r2, [pc, #24]	; (8006f5c <_Z27OD_EncoderWheelDiameter_setf+0x34>)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_EncoderWheelDiameter);
 8006f46:	4b04      	ldr	r3, [pc, #16]	; (8006f58 <_Z27OD_EncoderWheelDiameter_setf+0x30>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f00f f97c 	bl	8016248 <osMutexRelease>
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	20000910 	.word	0x20000910
 8006f5c:	20000018 	.word	0x20000018

08006f60 <_Z27OD_EncoderResetPosition_seth>:
    osMutexRelease(mutex_OD_EncoderResetPosition);
    return value;
}
#endif
#ifndef OD_EncoderResetPosition_SET_OVERWRITE
void WEAK_SYMBOL OD_EncoderResetPosition_set(const uint8_t value) {
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_EncoderResetPosition, portMAX_DELAY);
 8006f6a:	4b09      	ldr	r3, [pc, #36]	; (8006f90 <_Z27OD_EncoderResetPosition_seth+0x30>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f72:	4618      	mov	r0, r3
 8006f74:	f00f f91d 	bl	80161b2 <osMutexAcquire>
    OD_EncoderResetPosition = value;
 8006f78:	4a06      	ldr	r2, [pc, #24]	; (8006f94 <_Z27OD_EncoderResetPosition_seth+0x34>)
 8006f7a:	79fb      	ldrb	r3, [r7, #7]
 8006f7c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_EncoderResetPosition);
 8006f7e:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <_Z27OD_EncoderResetPosition_seth+0x30>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f00f f960 	bl	8016248 <osMutexRelease>
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	20000914 	.word	0x20000914
 8006f94:	20000833 	.word	0x20000833

08006f98 <_Z15OD_SetReset_seth>:
    osMutexRelease(mutex_OD_SetReset);
    return value;
}
#endif
#ifndef OD_SetReset_SET_OVERWRITE
void WEAK_SYMBOL OD_SetReset_set(const uint8_t value) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SetReset, portMAX_DELAY);
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <_Z15OD_SetReset_seth+0x30>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f04f 31ff 	mov.w	r1, #4294967295
 8006faa:	4618      	mov	r0, r3
 8006fac:	f00f f901 	bl	80161b2 <osMutexAcquire>
    OD_SetReset = value;
 8006fb0:	4a06      	ldr	r2, [pc, #24]	; (8006fcc <_Z15OD_SetReset_seth+0x34>)
 8006fb2:	79fb      	ldrb	r3, [r7, #7]
 8006fb4:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SetReset);
 8006fb6:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <_Z15OD_SetReset_seth+0x30>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f00f f944 	bl	8016248 <osMutexRelease>
}
 8006fc0:	bf00      	nop
 8006fc2:	3708      	adds	r7, #8
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	20000918 	.word	0x20000918
 8006fcc:	20000834 	.word	0x20000834

08006fd0 <_Z17OD_IMU_number_getv>:
#endif

#ifndef OD_IMU_number_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_IMU_number_get() {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_number, portMAX_DELAY);
 8006fd6:	4b0a      	ldr	r3, [pc, #40]	; (8007000 <_Z17OD_IMU_number_getv+0x30>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f04f 31ff 	mov.w	r1, #4294967295
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f00f f8e7 	bl	80161b2 <osMutexAcquire>
    uint8_t value = OD_IMU_number;
 8006fe4:	4b07      	ldr	r3, [pc, #28]	; (8007004 <_Z17OD_IMU_number_getv+0x34>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_IMU_number);
 8006fea:	4b05      	ldr	r3, [pc, #20]	; (8007000 <_Z17OD_IMU_number_getv+0x30>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f00f f92a 	bl	8016248 <osMutexRelease>
    return value;
 8006ff4:	79fb      	ldrb	r3, [r7, #7]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3708      	adds	r7, #8
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	2000091c 	.word	0x2000091c
 8007004:	20000835 	.word	0x20000835

08007008 <_Z23OD_IMU1_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU_number);
}
#endif

#ifndef OD_IMU1_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU1_Temperature_get() {
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU1_Temperature, portMAX_DELAY);
 800700e:	4b0b      	ldr	r3, [pc, #44]	; (800703c <_Z23OD_IMU1_Temperature_getv+0x34>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f04f 31ff 	mov.w	r1, #4294967295
 8007016:	4618      	mov	r0, r3
 8007018:	f00f f8cb 	bl	80161b2 <osMutexAcquire>
    float value = OD_IMU1_Temperature;
 800701c:	4b08      	ldr	r3, [pc, #32]	; (8007040 <_Z23OD_IMU1_Temperature_getv+0x38>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU1_Temperature);
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <_Z23OD_IMU1_Temperature_getv+0x34>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f00f f90e 	bl	8016248 <osMutexRelease>
    return value;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	ee07 3a90 	vmov	s15, r3
}
 8007032:	eeb0 0a67 	vmov.f32	s0, s15
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	20000920 	.word	0x20000920
 8007040:	20000838 	.word	0x20000838

08007044 <_Z23OD_IMU2_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU1_Temperature);
}
#endif

#ifndef OD_IMU2_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU2_Temperature_get() {
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU2_Temperature, portMAX_DELAY);
 800704a:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <_Z23OD_IMU2_Temperature_getv+0x34>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f04f 31ff 	mov.w	r1, #4294967295
 8007052:	4618      	mov	r0, r3
 8007054:	f00f f8ad 	bl	80161b2 <osMutexAcquire>
    float value = OD_IMU2_Temperature;
 8007058:	4b08      	ldr	r3, [pc, #32]	; (800707c <_Z23OD_IMU2_Temperature_getv+0x38>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU2_Temperature);
 800705e:	4b06      	ldr	r3, [pc, #24]	; (8007078 <_Z23OD_IMU2_Temperature_getv+0x34>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f00f f8f0 	bl	8016248 <osMutexRelease>
    return value;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	ee07 3a90 	vmov	s15, r3
}
 800706e:	eeb0 0a67 	vmov.f32	s0, s15
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000924 	.word	0x20000924
 800707c:	2000083c 	.word	0x2000083c

08007080 <_Z23OD_IMU3_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU2_Temperature);
}
#endif

#ifndef OD_IMU3_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU3_Temperature_get() {
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU3_Temperature, portMAX_DELAY);
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <_Z23OD_IMU3_Temperature_getv+0x34>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f04f 31ff 	mov.w	r1, #4294967295
 800708e:	4618      	mov	r0, r3
 8007090:	f00f f88f 	bl	80161b2 <osMutexAcquire>
    float value = OD_IMU3_Temperature;
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <_Z23OD_IMU3_Temperature_getv+0x38>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU3_Temperature);
 800709a:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <_Z23OD_IMU3_Temperature_getv+0x34>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f00f f8d2 	bl	8016248 <osMutexRelease>
    return value;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	ee07 3a90 	vmov	s15, r3
}
 80070aa:	eeb0 0a67 	vmov.f32	s0, s15
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000928 	.word	0x20000928
 80070b8:	20000840 	.word	0x20000840

080070bc <_Z17OD_IMU_AccelX_getv>:
    osMutexRelease(mutex_OD_IMU3_Temperature);
}
#endif

#ifndef OD_IMU_AccelX_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelX_get() {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelX, portMAX_DELAY);
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <_Z17OD_IMU_AccelX_getv+0x34>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f04f 31ff 	mov.w	r1, #4294967295
 80070ca:	4618      	mov	r0, r3
 80070cc:	f00f f871 	bl	80161b2 <osMutexAcquire>
    float value = OD_IMU_AccelX;
 80070d0:	4b08      	ldr	r3, [pc, #32]	; (80070f4 <_Z17OD_IMU_AccelX_getv+0x38>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelX);
 80070d6:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <_Z17OD_IMU_AccelX_getv+0x34>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f00f f8b4 	bl	8016248 <osMutexRelease>
    return value;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	ee07 3a90 	vmov	s15, r3
}
 80070e6:	eeb0 0a67 	vmov.f32	s0, s15
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	2000092c 	.word	0x2000092c
 80070f4:	20000844 	.word	0x20000844

080070f8 <_Z17OD_IMU_AccelX_setf>:
#endif
#ifndef OD_IMU_AccelX_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_AccelX_set(const float value) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_AccelX, portMAX_DELAY);
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <_Z17OD_IMU_AccelX_setf+0x30>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f04f 31ff 	mov.w	r1, #4294967295
 800710a:	4618      	mov	r0, r3
 800710c:	f00f f851 	bl	80161b2 <osMutexAcquire>
    OD_IMU_AccelX = value;
 8007110:	4a06      	ldr	r2, [pc, #24]	; (800712c <_Z17OD_IMU_AccelX_setf+0x34>)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_AccelX);
 8007116:	4b04      	ldr	r3, [pc, #16]	; (8007128 <_Z17OD_IMU_AccelX_setf+0x30>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f00f f894 	bl	8016248 <osMutexRelease>
}
 8007120:	bf00      	nop
 8007122:	3708      	adds	r7, #8
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	2000092c 	.word	0x2000092c
 800712c:	20000844 	.word	0x20000844

08007130 <_Z17OD_IMU_AccelY_getv>:
#endif

#ifndef OD_IMU_AccelY_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelY_get() {
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelY, portMAX_DELAY);
 8007136:	4b0b      	ldr	r3, [pc, #44]	; (8007164 <_Z17OD_IMU_AccelY_getv+0x34>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f04f 31ff 	mov.w	r1, #4294967295
 800713e:	4618      	mov	r0, r3
 8007140:	f00f f837 	bl	80161b2 <osMutexAcquire>
    float value = OD_IMU_AccelY;
 8007144:	4b08      	ldr	r3, [pc, #32]	; (8007168 <_Z17OD_IMU_AccelY_getv+0x38>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelY);
 800714a:	4b06      	ldr	r3, [pc, #24]	; (8007164 <_Z17OD_IMU_AccelY_getv+0x34>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4618      	mov	r0, r3
 8007150:	f00f f87a 	bl	8016248 <osMutexRelease>
    return value;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	ee07 3a90 	vmov	s15, r3
}
 800715a:	eeb0 0a67 	vmov.f32	s0, s15
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20000930 	.word	0x20000930
 8007168:	20000848 	.word	0x20000848

0800716c <_Z17OD_IMU_AccelY_setf>:
#endif
#ifndef OD_IMU_AccelY_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_AccelY_set(const float value) {
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_AccelY, portMAX_DELAY);
 8007176:	4b09      	ldr	r3, [pc, #36]	; (800719c <_Z17OD_IMU_AccelY_setf+0x30>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f04f 31ff 	mov.w	r1, #4294967295
 800717e:	4618      	mov	r0, r3
 8007180:	f00f f817 	bl	80161b2 <osMutexAcquire>
    OD_IMU_AccelY = value;
 8007184:	4a06      	ldr	r2, [pc, #24]	; (80071a0 <_Z17OD_IMU_AccelY_setf+0x34>)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_AccelY);
 800718a:	4b04      	ldr	r3, [pc, #16]	; (800719c <_Z17OD_IMU_AccelY_setf+0x30>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4618      	mov	r0, r3
 8007190:	f00f f85a 	bl	8016248 <osMutexRelease>
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	20000930 	.word	0x20000930
 80071a0:	20000848 	.word	0x20000848

080071a4 <_Z17OD_IMU_AccelZ_getv>:
#endif

#ifndef OD_IMU_AccelZ_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelZ_get() {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelZ, portMAX_DELAY);
 80071aa:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <_Z17OD_IMU_AccelZ_getv+0x34>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f04f 31ff 	mov.w	r1, #4294967295
 80071b2:	4618      	mov	r0, r3
 80071b4:	f00e fffd 	bl	80161b2 <osMutexAcquire>
    float value = OD_IMU_AccelZ;
 80071b8:	4b08      	ldr	r3, [pc, #32]	; (80071dc <_Z17OD_IMU_AccelZ_getv+0x38>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelZ);
 80071be:	4b06      	ldr	r3, [pc, #24]	; (80071d8 <_Z17OD_IMU_AccelZ_getv+0x34>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4618      	mov	r0, r3
 80071c4:	f00f f840 	bl	8016248 <osMutexRelease>
    return value;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	ee07 3a90 	vmov	s15, r3
}
 80071ce:	eeb0 0a67 	vmov.f32	s0, s15
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	20000934 	.word	0x20000934
 80071dc:	2000084c 	.word	0x2000084c

080071e0 <_Z17OD_IMU_AccelZ_setf>:
#endif
#ifndef OD_IMU_AccelZ_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_AccelZ_set(const float value) {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_AccelZ, portMAX_DELAY);
 80071ea:	4b09      	ldr	r3, [pc, #36]	; (8007210 <_Z17OD_IMU_AccelZ_setf+0x30>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f04f 31ff 	mov.w	r1, #4294967295
 80071f2:	4618      	mov	r0, r3
 80071f4:	f00e ffdd 	bl	80161b2 <osMutexAcquire>
    OD_IMU_AccelZ = value;
 80071f8:	4a06      	ldr	r2, [pc, #24]	; (8007214 <_Z17OD_IMU_AccelZ_setf+0x34>)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_AccelZ);
 80071fe:	4b04      	ldr	r3, [pc, #16]	; (8007210 <_Z17OD_IMU_AccelZ_setf+0x30>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4618      	mov	r0, r3
 8007204:	f00f f820 	bl	8016248 <osMutexRelease>
}
 8007208:	bf00      	nop
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000934 	.word	0x20000934
 8007214:	2000084c 	.word	0x2000084c

08007218 <_Z16OD_IMU_GyroX_getv>:
#endif

#ifndef OD_IMU_GyroX_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroX_get() {
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroX, portMAX_DELAY);
 800721e:	4b0b      	ldr	r3, [pc, #44]	; (800724c <_Z16OD_IMU_GyroX_getv+0x34>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f04f 31ff 	mov.w	r1, #4294967295
 8007226:	4618      	mov	r0, r3
 8007228:	f00e ffc3 	bl	80161b2 <osMutexAcquire>
    float value = OD_IMU_GyroX;
 800722c:	4b08      	ldr	r3, [pc, #32]	; (8007250 <_Z16OD_IMU_GyroX_getv+0x38>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroX);
 8007232:	4b06      	ldr	r3, [pc, #24]	; (800724c <_Z16OD_IMU_GyroX_getv+0x34>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f00f f806 	bl	8016248 <osMutexRelease>
    return value;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	ee07 3a90 	vmov	s15, r3
}
 8007242:	eeb0 0a67 	vmov.f32	s0, s15
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	20000938 	.word	0x20000938
 8007250:	20000850 	.word	0x20000850

08007254 <_Z16OD_IMU_GyroX_setf>:
#endif
#ifndef OD_IMU_GyroX_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_GyroX_set(const float value) {
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_GyroX, portMAX_DELAY);
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <_Z16OD_IMU_GyroX_setf+0x30>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f04f 31ff 	mov.w	r1, #4294967295
 8007266:	4618      	mov	r0, r3
 8007268:	f00e ffa3 	bl	80161b2 <osMutexAcquire>
    OD_IMU_GyroX = value;
 800726c:	4a06      	ldr	r2, [pc, #24]	; (8007288 <_Z16OD_IMU_GyroX_setf+0x34>)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_GyroX);
 8007272:	4b04      	ldr	r3, [pc, #16]	; (8007284 <_Z16OD_IMU_GyroX_setf+0x30>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4618      	mov	r0, r3
 8007278:	f00e ffe6 	bl	8016248 <osMutexRelease>
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	20000938 	.word	0x20000938
 8007288:	20000850 	.word	0x20000850

0800728c <_Z16OD_IMU_GyroY_getv>:
#endif

#ifndef OD_IMU_GyroY_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroY_get() {
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroY, portMAX_DELAY);
 8007292:	4b0b      	ldr	r3, [pc, #44]	; (80072c0 <_Z16OD_IMU_GyroY_getv+0x34>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f04f 31ff 	mov.w	r1, #4294967295
 800729a:	4618      	mov	r0, r3
 800729c:	f00e ff89 	bl	80161b2 <osMutexAcquire>
    float value = OD_IMU_GyroY;
 80072a0:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <_Z16OD_IMU_GyroY_getv+0x38>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroY);
 80072a6:	4b06      	ldr	r3, [pc, #24]	; (80072c0 <_Z16OD_IMU_GyroY_getv+0x34>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4618      	mov	r0, r3
 80072ac:	f00e ffcc 	bl	8016248 <osMutexRelease>
    return value;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	ee07 3a90 	vmov	s15, r3
}
 80072b6:	eeb0 0a67 	vmov.f32	s0, s15
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	2000093c 	.word	0x2000093c
 80072c4:	20000854 	.word	0x20000854

080072c8 <_Z16OD_IMU_GyroY_setf>:
#endif
#ifndef OD_IMU_GyroY_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_GyroY_set(const float value) {
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_GyroY, portMAX_DELAY);
 80072d2:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <_Z16OD_IMU_GyroY_setf+0x30>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f04f 31ff 	mov.w	r1, #4294967295
 80072da:	4618      	mov	r0, r3
 80072dc:	f00e ff69 	bl	80161b2 <osMutexAcquire>
    OD_IMU_GyroY = value;
 80072e0:	4a06      	ldr	r2, [pc, #24]	; (80072fc <_Z16OD_IMU_GyroY_setf+0x34>)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_GyroY);
 80072e6:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <_Z16OD_IMU_GyroY_setf+0x30>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4618      	mov	r0, r3
 80072ec:	f00e ffac 	bl	8016248 <osMutexRelease>
}
 80072f0:	bf00      	nop
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	2000093c 	.word	0x2000093c
 80072fc:	20000854 	.word	0x20000854

08007300 <_Z16OD_IMU_GyroZ_getv>:
#endif

#ifndef OD_IMU_GyroZ_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroZ_get() {
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroZ, portMAX_DELAY);
 8007306:	4b0b      	ldr	r3, [pc, #44]	; (8007334 <_Z16OD_IMU_GyroZ_getv+0x34>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f04f 31ff 	mov.w	r1, #4294967295
 800730e:	4618      	mov	r0, r3
 8007310:	f00e ff4f 	bl	80161b2 <osMutexAcquire>
    float value = OD_IMU_GyroZ;
 8007314:	4b08      	ldr	r3, [pc, #32]	; (8007338 <_Z16OD_IMU_GyroZ_getv+0x38>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroZ);
 800731a:	4b06      	ldr	r3, [pc, #24]	; (8007334 <_Z16OD_IMU_GyroZ_getv+0x34>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4618      	mov	r0, r3
 8007320:	f00e ff92 	bl	8016248 <osMutexRelease>
    return value;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	ee07 3a90 	vmov	s15, r3
}
 800732a:	eeb0 0a67 	vmov.f32	s0, s15
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000940 	.word	0x20000940
 8007338:	20000858 	.word	0x20000858

0800733c <_Z16OD_IMU_GyroZ_setf>:
#endif
#ifndef OD_IMU_GyroZ_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_GyroZ_set(const float value) {
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_GyroZ, portMAX_DELAY);
 8007346:	4b09      	ldr	r3, [pc, #36]	; (800736c <_Z16OD_IMU_GyroZ_setf+0x30>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f04f 31ff 	mov.w	r1, #4294967295
 800734e:	4618      	mov	r0, r3
 8007350:	f00e ff2f 	bl	80161b2 <osMutexAcquire>
    OD_IMU_GyroZ = value;
 8007354:	4a06      	ldr	r2, [pc, #24]	; (8007370 <_Z16OD_IMU_GyroZ_setf+0x34>)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_GyroZ);
 800735a:	4b04      	ldr	r3, [pc, #16]	; (800736c <_Z16OD_IMU_GyroZ_setf+0x30>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4618      	mov	r0, r3
 8007360:	f00e ff72 	bl	8016248 <osMutexRelease>
}
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000940 	.word	0x20000940
 8007370:	20000858 	.word	0x20000858

08007374 <_Z22OD_CoolingPressure_getv>:
#endif

#ifndef OD_CoolingPressure_GET_OVERWRITE
float WEAK_SYMBOL OD_CoolingPressure_get() {
 8007374:	b580      	push	{r7, lr}
 8007376:	b082      	sub	sp, #8
 8007378:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CoolingPressure, portMAX_DELAY);
 800737a:	4b0b      	ldr	r3, [pc, #44]	; (80073a8 <_Z22OD_CoolingPressure_getv+0x34>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f04f 31ff 	mov.w	r1, #4294967295
 8007382:	4618      	mov	r0, r3
 8007384:	f00e ff15 	bl	80161b2 <osMutexAcquire>
    float value = OD_CoolingPressure;
 8007388:	4b08      	ldr	r3, [pc, #32]	; (80073ac <_Z22OD_CoolingPressure_getv+0x38>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CoolingPressure);
 800738e:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <_Z22OD_CoolingPressure_getv+0x34>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f00e ff58 	bl	8016248 <osMutexRelease>
    return value;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	ee07 3a90 	vmov	s15, r3
}
 800739e:	eeb0 0a67 	vmov.f32	s0, s15
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000944 	.word	0x20000944
 80073ac:	2000001c 	.word	0x2000001c

080073b0 <_Z22OD_CoolingPressure_setf>:
#endif
#ifndef OD_CoolingPressure_SET_OVERWRITE
void WEAK_SYMBOL OD_CoolingPressure_set(const float value) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CoolingPressure, portMAX_DELAY);
 80073ba:	4b09      	ldr	r3, [pc, #36]	; (80073e0 <_Z22OD_CoolingPressure_setf+0x30>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f04f 31ff 	mov.w	r1, #4294967295
 80073c2:	4618      	mov	r0, r3
 80073c4:	f00e fef5 	bl	80161b2 <osMutexAcquire>
    OD_CoolingPressure = value;
 80073c8:	4a06      	ldr	r2, [pc, #24]	; (80073e4 <_Z22OD_CoolingPressure_setf+0x34>)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CoolingPressure);
 80073ce:	4b04      	ldr	r3, [pc, #16]	; (80073e0 <_Z22OD_CoolingPressure_setf+0x30>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4618      	mov	r0, r3
 80073d4:	f00e ff38 	bl	8016248 <osMutexRelease>
}
 80073d8:	bf00      	nop
 80073da:	3708      	adds	r7, #8
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}
 80073e0:	20000944 	.word	0x20000944
 80073e4:	2000001c 	.word	0x2000001c

080073e8 <_Z27OD_FiducialRightCounter_getv>:
#endif

#ifndef OD_FiducialRightCounter_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_FiducialRightCounter_get() {
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_FiducialRightCounter, portMAX_DELAY);
 80073ee:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <_Z27OD_FiducialRightCounter_getv+0x30>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f04f 31ff 	mov.w	r1, #4294967295
 80073f6:	4618      	mov	r0, r3
 80073f8:	f00e fedb 	bl	80161b2 <osMutexAcquire>
    uint16_t value = OD_FiducialRightCounter;
 80073fc:	4b07      	ldr	r3, [pc, #28]	; (800741c <_Z27OD_FiducialRightCounter_getv+0x34>)
 80073fe:	881b      	ldrh	r3, [r3, #0]
 8007400:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_FiducialRightCounter);
 8007402:	4b05      	ldr	r3, [pc, #20]	; (8007418 <_Z27OD_FiducialRightCounter_getv+0x30>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4618      	mov	r0, r3
 8007408:	f00e ff1e 	bl	8016248 <osMutexRelease>
    return value;
 800740c:	88fb      	ldrh	r3, [r7, #6]
}
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000948 	.word	0x20000948
 800741c:	2000085c 	.word	0x2000085c

08007420 <_Z27OD_FiducialRightCounter_sett>:
#endif
#ifndef OD_FiducialRightCounter_SET_OVERWRITE
void WEAK_SYMBOL OD_FiducialRightCounter_set(const uint16_t value) {
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_FiducialRightCounter, portMAX_DELAY);
 800742a:	4b09      	ldr	r3, [pc, #36]	; (8007450 <_Z27OD_FiducialRightCounter_sett+0x30>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f04f 31ff 	mov.w	r1, #4294967295
 8007432:	4618      	mov	r0, r3
 8007434:	f00e febd 	bl	80161b2 <osMutexAcquire>
    OD_FiducialRightCounter = value;
 8007438:	4a06      	ldr	r2, [pc, #24]	; (8007454 <_Z27OD_FiducialRightCounter_sett+0x34>)
 800743a:	88fb      	ldrh	r3, [r7, #6]
 800743c:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_FiducialRightCounter);
 800743e:	4b04      	ldr	r3, [pc, #16]	; (8007450 <_Z27OD_FiducialRightCounter_sett+0x30>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f00e ff00 	bl	8016248 <osMutexRelease>
}
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	20000948 	.word	0x20000948
 8007454:	2000085c 	.word	0x2000085c

08007458 <_Z26OD_FiducialLeftCounter_getv>:
#endif

#ifndef OD_FiducialLeftCounter_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_FiducialLeftCounter_get() {
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_FiducialLeftCounter, portMAX_DELAY);
 800745e:	4b0a      	ldr	r3, [pc, #40]	; (8007488 <_Z26OD_FiducialLeftCounter_getv+0x30>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f04f 31ff 	mov.w	r1, #4294967295
 8007466:	4618      	mov	r0, r3
 8007468:	f00e fea3 	bl	80161b2 <osMutexAcquire>
    uint16_t value = OD_FiducialLeftCounter;
 800746c:	4b07      	ldr	r3, [pc, #28]	; (800748c <_Z26OD_FiducialLeftCounter_getv+0x34>)
 800746e:	881b      	ldrh	r3, [r3, #0]
 8007470:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_FiducialLeftCounter);
 8007472:	4b05      	ldr	r3, [pc, #20]	; (8007488 <_Z26OD_FiducialLeftCounter_getv+0x30>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4618      	mov	r0, r3
 8007478:	f00e fee6 	bl	8016248 <osMutexRelease>
    return value;
 800747c:	88fb      	ldrh	r3, [r7, #6]
}
 800747e:	4618      	mov	r0, r3
 8007480:	3708      	adds	r7, #8
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	2000094c 	.word	0x2000094c
 800748c:	2000085e 	.word	0x2000085e

08007490 <_Z26OD_FiducialLeftCounter_sett>:
#endif
#ifndef OD_FiducialLeftCounter_SET_OVERWRITE
void WEAK_SYMBOL OD_FiducialLeftCounter_set(const uint16_t value) {
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_FiducialLeftCounter, portMAX_DELAY);
 800749a:	4b09      	ldr	r3, [pc, #36]	; (80074c0 <_Z26OD_FiducialLeftCounter_sett+0x30>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f04f 31ff 	mov.w	r1, #4294967295
 80074a2:	4618      	mov	r0, r3
 80074a4:	f00e fe85 	bl	80161b2 <osMutexAcquire>
    OD_FiducialLeftCounter = value;
 80074a8:	4a06      	ldr	r2, [pc, #24]	; (80074c4 <_Z26OD_FiducialLeftCounter_sett+0x34>)
 80074aa:	88fb      	ldrh	r3, [r7, #6]
 80074ac:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_FiducialLeftCounter);
 80074ae:	4b04      	ldr	r3, [pc, #16]	; (80074c0 <_Z26OD_FiducialLeftCounter_sett+0x30>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f00e fec8 	bl	8016248 <osMutexRelease>
}
 80074b8:	bf00      	nop
 80074ba:	3708      	adds	r7, #8
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	2000094c 	.word	0x2000094c
 80074c4:	2000085e 	.word	0x2000085e

080074c8 <_Z15OD_Position_getv>:
#endif

#ifndef OD_Position_GET_OVERWRITE
float WEAK_SYMBOL OD_Position_get() {
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_Position, portMAX_DELAY);
 80074ce:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <_Z15OD_Position_getv+0x34>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f04f 31ff 	mov.w	r1, #4294967295
 80074d6:	4618      	mov	r0, r3
 80074d8:	f00e fe6b 	bl	80161b2 <osMutexAcquire>
    float value = OD_Position;
 80074dc:	4b08      	ldr	r3, [pc, #32]	; (8007500 <_Z15OD_Position_getv+0x38>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_Position);
 80074e2:	4b06      	ldr	r3, [pc, #24]	; (80074fc <_Z15OD_Position_getv+0x34>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f00e feae 	bl	8016248 <osMutexRelease>
    return value;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	ee07 3a90 	vmov	s15, r3
}
 80074f2:	eeb0 0a67 	vmov.f32	s0, s15
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20000950 	.word	0x20000950
 8007500:	20000860 	.word	0x20000860

08007504 <_Z15OD_Position_setf>:
#endif
#ifndef OD_Position_SET_OVERWRITE
void WEAK_SYMBOL OD_Position_set(const float value) {
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_Position, portMAX_DELAY);
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <_Z15OD_Position_setf+0x30>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f04f 31ff 	mov.w	r1, #4294967295
 8007516:	4618      	mov	r0, r3
 8007518:	f00e fe4b 	bl	80161b2 <osMutexAcquire>
    OD_Position = value;
 800751c:	4a06      	ldr	r2, [pc, #24]	; (8007538 <_Z15OD_Position_setf+0x34>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_Position);
 8007522:	4b04      	ldr	r3, [pc, #16]	; (8007534 <_Z15OD_Position_setf+0x30>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f00e fe8e 	bl	8016248 <osMutexRelease>
}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	20000950 	.word	0x20000950
 8007538:	20000860 	.word	0x20000860

0800753c <_Z15OD_Velocity_getv>:
#endif

#ifndef OD_Velocity_GET_OVERWRITE
float WEAK_SYMBOL OD_Velocity_get() {
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_Velocity, portMAX_DELAY);
 8007542:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <_Z15OD_Velocity_getv+0x34>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f04f 31ff 	mov.w	r1, #4294967295
 800754a:	4618      	mov	r0, r3
 800754c:	f00e fe31 	bl	80161b2 <osMutexAcquire>
    float value = OD_Velocity;
 8007550:	4b08      	ldr	r3, [pc, #32]	; (8007574 <_Z15OD_Velocity_getv+0x38>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_Velocity);
 8007556:	4b06      	ldr	r3, [pc, #24]	; (8007570 <_Z15OD_Velocity_getv+0x34>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f00e fe74 	bl	8016248 <osMutexRelease>
    return value;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	ee07 3a90 	vmov	s15, r3
}
 8007566:	eeb0 0a67 	vmov.f32	s0, s15
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20000954 	.word	0x20000954
 8007574:	20000864 	.word	0x20000864

08007578 <_Z15OD_Velocity_setf>:
#endif
#ifndef OD_Velocity_SET_OVERWRITE
void WEAK_SYMBOL OD_Velocity_set(const float value) {
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_Velocity, portMAX_DELAY);
 8007582:	4b09      	ldr	r3, [pc, #36]	; (80075a8 <_Z15OD_Velocity_setf+0x30>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f04f 31ff 	mov.w	r1, #4294967295
 800758a:	4618      	mov	r0, r3
 800758c:	f00e fe11 	bl	80161b2 <osMutexAcquire>
    OD_Velocity = value;
 8007590:	4a06      	ldr	r2, [pc, #24]	; (80075ac <_Z15OD_Velocity_setf+0x34>)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_Velocity);
 8007596:	4b04      	ldr	r3, [pc, #16]	; (80075a8 <_Z15OD_Velocity_setf+0x30>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4618      	mov	r0, r3
 800759c:	f00e fe54 	bl	8016248 <osMutexRelease>
}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	20000954 	.word	0x20000954
 80075ac:	20000864 	.word	0x20000864

080075b0 <_Z17sendOdEntriesTaskPv>:
    0xD00,    0xD01 
};
constexpr uint16_t NUMBER_OF_READABLE_SDO_IDS = 58;
extern RNG_HandleTypeDef hrng;

void sendOdEntriesTask(void *pvParameters) {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b086      	sub	sp, #24
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
    // Delay for random amount so that not all nodes send exactly at the same time
    uint32_t randomDelayMs;
    HAL_RNG_GenerateRandomNumber(&hrng, &randomDelayMs);
 80075b8:	f107 030c 	add.w	r3, r7, #12
 80075bc:	4619      	mov	r1, r3
 80075be:	481f      	ldr	r0, [pc, #124]	; (800763c <_Z17sendOdEntriesTaskPv+0x8c>)
 80075c0:	f00a fd76 	bl	80120b0 <HAL_RNG_GenerateRandomNumber>
    randomDelayMs = randomDelayMs & 0xFF;   // Use only lower byte, so delay will be 255ms at maximum
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	60fb      	str	r3, [r7, #12]
    osDelay(pdMS_TO_TICKS(randomDelayMs));
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80075d0:	fb02 f303 	mul.w	r3, r2, r3
 80075d4:	4a1a      	ldr	r2, [pc, #104]	; (8007640 <_Z17sendOdEntriesTaskPv+0x90>)
 80075d6:	fba2 2303 	umull	r2, r3, r2, r3
 80075da:	099b      	lsrs	r3, r3, #6
 80075dc:	4618      	mov	r0, r3
 80075de:	f00e fd47 	bl	8016070 <osDelay>

    uint16_t currentSdoListPos = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	82fb      	strh	r3, [r7, #22]

    while(1) {
        uint16_t delayInterval = OD_OdEntrySendInterval_get();
 80075e6:	f7fe ff15 	bl	8006414 <_Z26OD_OdEntrySendInterval_getv>
 80075ea:	4603      	mov	r3, r0
 80075ec:	82bb      	strh	r3, [r7, #20]
        if(delayInterval >= 5) {    // Periodically sending of all readable OD entries is enabled
 80075ee:	8abb      	ldrh	r3, [r7, #20]
 80075f0:	2b04      	cmp	r3, #4
 80075f2:	d91d      	bls.n	8007630 <_Z17sendOdEntriesTaskPv+0x80>
            uint16_t sdoId = READABLE_SDO_IDS[currentSdoListPos];
 80075f4:	8afb      	ldrh	r3, [r7, #22]
 80075f6:	4a13      	ldr	r2, [pc, #76]	; (8007644 <_Z17sendOdEntriesTaskPv+0x94>)
 80075f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075fc:	827b      	strh	r3, [r7, #18]

            currentSdoListPos++;
 80075fe:	8afb      	ldrh	r3, [r7, #22]
 8007600:	3301      	adds	r3, #1
 8007602:	82fb      	strh	r3, [r7, #22]
            if (currentSdoListPos >= NUMBER_OF_READABLE_SDO_IDS) {
 8007604:	8afb      	ldrh	r3, [r7, #22]
 8007606:	2b39      	cmp	r3, #57	; 0x39
 8007608:	d901      	bls.n	800760e <_Z17sendOdEntriesTaskPv+0x5e>
                currentSdoListPos = 0;
 800760a:	2300      	movs	r3, #0
 800760c:	82fb      	strh	r3, [r7, #22]
            }

            handleSDORequestDownloadBySDOID(sdoId);
 800760e:	8a7b      	ldrh	r3, [r7, #18]
 8007610:	4618      	mov	r0, r3
 8007612:	f7fd fa47 	bl	8004aa4 <_Z31handleSDORequestDownloadBySDOIDt>

            osDelay(pdMS_TO_TICKS(delayInterval));
 8007616:	8abb      	ldrh	r3, [r7, #20]
 8007618:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800761c:	fb02 f303 	mul.w	r3, r2, r3
 8007620:	4a07      	ldr	r2, [pc, #28]	; (8007640 <_Z17sendOdEntriesTaskPv+0x90>)
 8007622:	fba2 2303 	umull	r2, r3, r2, r3
 8007626:	099b      	lsrs	r3, r3, #6
 8007628:	4618      	mov	r0, r3
 800762a:	f00e fd21 	bl	8016070 <osDelay>
 800762e:	e7da      	b.n	80075e6 <_Z17sendOdEntriesTaskPv+0x36>

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
 8007630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007634:	f00e fd1c 	bl	8016070 <osDelay>
        }
    }
 8007638:	e7d5      	b.n	80075e6 <_Z17sendOdEntriesTaskPv+0x36>
 800763a:	bf00      	nop
 800763c:	200011c0 	.word	0x200011c0
 8007640:	10624dd3 	.word	0x10624dd3
 8007644:	0801da0c 	.word	0x0801da0c

08007648 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007648:	b580      	push	{r7, lr}
 800764a:	b082      	sub	sp, #8
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f103 0208 	add.w	r2, r3, #8
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3310      	adds	r3, #16
 800765a:	4619      	mov	r1, r3
 800765c:	4610      	mov	r0, r2
 800765e:	f7fb f820 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8007662:	4603      	mov	r3, r0
        }
 8007664:	4618      	mov	r0, r3
 8007666:	3708      	adds	r7, #8
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800766c:	b580      	push	{r7, lr}
 800766e:	b082      	sub	sp, #8
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	460b      	mov	r3, r1
 8007676:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f103 0008 	add.w	r0, r3, #8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f103 0110 	add.w	r1, r3, #16
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	1d1a      	adds	r2, r3, #4
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	f7fd f983 	bl	8004994 <_ZN3can7signals17SensorF_OD_NodeID3setERyS2_Rhh>
        }
 800768e:	bf00      	nop
 8007690:	3708      	adds	r7, #8
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f103 0008 	add.w	r0, r3, #8
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f103 0110 	add.w	r1, r3, #16
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	1d1a      	adds	r2, r3, #4
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	f7fd f93b 	bl	800492e <_ZN3can7signals21SensorF_OD_NodeStatus3setERyS2_Rhh>
        }
 80076b8:	bf00      	nop
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f103 0008 	add.w	r0, r3, #8
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f103 0110 	add.w	r1, r3, #16
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	1d1a      	adds	r2, r3, #4
 80076dc:	887b      	ldrh	r3, [r7, #2]
 80076de:	f7fd f8f8 	bl	80048d2 <_ZN3can7signals26SensorF_OD_ProtocolVersion3setERyS2_Rht>
        }
 80076e2:	bf00      	nop
 80076e4:	3708      	adds	r7, #8
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	460b      	mov	r3, r1
 80076f4:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f103 0008 	add.w	r0, r3, #8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f103 0110 	add.w	r1, r3, #16
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	1d1a      	adds	r2, r3, #4
 8007706:	887b      	ldrh	r3, [r7, #2]
 8007708:	f7fd f8b5 	bl	8004876 <_ZN3can7signals23SensorF_OD_StackVersion3setERyS2_Rht>
        }
 800770c:	bf00      	nop
 800770e:	3708      	adds	r7, #8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	460b      	mov	r3, r1
 800771e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f103 0008 	add.w	r0, r3, #8
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f103 0110 	add.w	r1, r3, #16
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	1d1a      	adds	r2, r3, #4
 8007730:	887b      	ldrh	r3, [r7, #2]
 8007732:	f7fd f872 	bl	800481a <_ZN3can7signals21SensorF_OD_DbcVersion3setERyS2_Rht>
        }
 8007736:	bf00      	nop
 8007738:	3708      	adds	r7, #8
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800773e:	b580      	push	{r7, lr}
 8007740:	b082      	sub	sp, #8
 8007742:	af00      	add	r7, sp, #0
 8007744:	6078      	str	r0, [r7, #4]
 8007746:	460b      	mov	r3, r1
 8007748:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f103 0008 	add.w	r0, r3, #8
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f103 0110 	add.w	r1, r3, #16
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	1d1a      	adds	r2, r3, #4
 800775a:	887b      	ldrh	r3, [r7, #2]
 800775c:	f7fd f80b 	bl	8004776 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3setERyS2_Rht>
        }
 8007760:	bf00      	nop
 8007762:	3708      	adds	r7, #8
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f103 0008 	add.w	r0, r3, #8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f103 0110 	add.w	r1, r3, #16
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	1d1a      	adds	r2, r3, #4
 8007784:	78fb      	ldrb	r3, [r7, #3]
 8007786:	f7fc ff9f 	bl	80046c8 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 800778a:	bf00      	nop
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}

08007792 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007792:	b580      	push	{r7, lr}
 8007794:	b082      	sub	sp, #8
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	460b      	mov	r3, r1
 800779c:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f103 0008 	add.w	r0, r3, #8
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f103 0110 	add.w	r1, r3, #16
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	1d1a      	adds	r2, r3, #4
 80077ae:	887b      	ldrh	r3, [r7, #2]
 80077b0:	f7fc ff38 	bl	8004624 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f103 0008 	add.w	r0, r3, #8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f103 0110 	add.w	r1, r3, #16
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3304      	adds	r3, #4
 80077d8:	ed97 0a00 	vldr	s0, [r7]
 80077dc:	461a      	mov	r2, r3
 80077de:	f7fc fec3 	bl	8004568 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf>
        }
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f103 0008 	add.w	r0, r3, #8
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f103 0110 	add.w	r1, r3, #16
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	1d1a      	adds	r2, r3, #4
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	f7fc fe77 	bl	80044f8 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm>
        }
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007812:	b580      	push	{r7, lr}
 8007814:	b082      	sub	sp, #8
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f103 0008 	add.w	r0, r3, #8
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f103 0110 	add.w	r1, r3, #16
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	3304      	adds	r3, #4
 800782e:	ed97 0a00 	vldr	s0, [r7]
 8007832:	461a      	mov	r2, r3
 8007834:	f7fc fdfe 	bl	8004434 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf>
        }
 8007838:	bf00      	nop
 800783a:	3708      	adds	r7, #8
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007840:	b580      	push	{r7, lr}
 8007842:	b082      	sub	sp, #8
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f103 0008 	add.w	r0, r3, #8
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f103 0110 	add.w	r1, r3, #16
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	3304      	adds	r3, #4
 800785c:	ed97 0a00 	vldr	s0, [r7]
 8007860:	461a      	mov	r2, r3
 8007862:	f7fc fd8d 	bl	8004380 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf>
        }
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
 8007876:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f103 0008 	add.w	r0, r3, #8
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f103 0110 	add.w	r1, r3, #16
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	1d1a      	adds	r2, r3, #4
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	f7fc fd3f 	bl	800430c <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm>
        }
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007896:	b580      	push	{r7, lr}
 8007898:	b082      	sub	sp, #8
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	460b      	mov	r3, r1
 80078a0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f103 0008 	add.w	r0, r3, #8
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f103 0110 	add.w	r1, r3, #16
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	1d1a      	adds	r2, r3, #4
 80078b2:	78fb      	ldrb	r3, [r7, #3]
 80078b4:	f7fc fcf6 	bl	80042a4 <_ZN3can7signals16SensorF_OD_SdcIn3setERyS2_Rhh>
        }
 80078b8:	bf00      	nop
 80078ba:	3708      	adds	r7, #8
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}

080078c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	460b      	mov	r3, r1
 80078ca:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f103 0008 	add.w	r0, r3, #8
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f103 0110 	add.w	r1, r3, #16
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	1d1a      	adds	r2, r3, #4
 80078dc:	78fb      	ldrb	r3, [r7, #3]
 80078de:	f7fc fcad 	bl	800423c <_ZN3can7signals17SensorF_OD_SdcOut3setERyS2_Rhh>
        }
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80078ea:	b590      	push	{r4, r7, lr}
 80078ec:	b087      	sub	sp, #28
 80078ee:	af02      	add	r7, sp, #8
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f103 0008 	add.w	r0, r3, #8
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f103 0110 	add.w	r1, r3, #16
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	1d1c      	adds	r4, r3, #4
 8007906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800790a:	e9cd 2300 	strd	r2, r3, [sp]
 800790e:	4622      	mov	r2, r4
 8007910:	f7fc fc5b 	bl	80041ca <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy>
        }
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	bd90      	pop	{r4, r7, pc}

0800791c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800791c:	b590      	push	{r4, r7, lr}
 800791e:	b087      	sub	sp, #28
 8007920:	af02      	add	r7, sp, #8
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f103 0008 	add.w	r0, r3, #8
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f103 0110 	add.w	r1, r3, #16
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	1d1c      	adds	r4, r3, #4
 8007938:	e9d7 2300 	ldrd	r2, r3, [r7]
 800793c:	e9cd 2300 	strd	r2, r3, [sp]
 8007940:	4622      	mov	r2, r4
 8007942:	f7fc fc09 	bl	8004158 <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy>
        }
 8007946:	bf00      	nop
 8007948:	3714      	adds	r7, #20
 800794a:	46bd      	mov	sp, r7
 800794c:	bd90      	pop	{r4, r7, pc}

0800794e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800794e:	b580      	push	{r7, lr}
 8007950:	b082      	sub	sp, #8
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f103 0008 	add.w	r0, r3, #8
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f103 0110 	add.w	r1, r3, #16
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	1d1a      	adds	r2, r3, #4
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	f7fc fbbd 	bl	80040e8 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm>
        }
 800796e:	bf00      	nop
 8007970:	3708      	adds	r7, #8
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007976:	b580      	push	{r7, lr}
 8007978:	b082      	sub	sp, #8
 800797a:	af00      	add	r7, sp, #0
 800797c:	6078      	str	r0, [r7, #4]
 800797e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	f103 0008 	add.w	r0, r3, #8
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f103 0110 	add.w	r1, r3, #16
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	1d1a      	adds	r2, r3, #4
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	f7fc fb6f 	bl	8004074 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm>
        }
 8007996:	bf00      	nop
 8007998:	3708      	adds	r7, #8
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}

0800799e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800799e:	b580      	push	{r7, lr}
 80079a0:	b082      	sub	sp, #8
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f103 0008 	add.w	r0, r3, #8
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f103 0110 	add.w	r1, r3, #16
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	1d1a      	adds	r2, r3, #4
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	f7fc fb26 	bl	800400c <_ZN3can7signals24SensorF_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 80079c0:	bf00      	nop
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f103 0008 	add.w	r0, r3, #8
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f103 0110 	add.w	r1, r3, #16
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	1d1a      	adds	r2, r3, #4
 80079e4:	78fb      	ldrb	r3, [r7, #3]
 80079e6:	f7fc fadd 	bl	8003fa4 <_ZN3can7signals24SensorF_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 80079ea:	bf00      	nop
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f103 0008 	add.w	r0, r3, #8
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f103 0110 	add.w	r1, r3, #16
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	1d1a      	adds	r2, r3, #4
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	f7fc fa91 	bl	8003f34 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 8007a12:	bf00      	nop
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
 8007a22:	460b      	mov	r3, r1
 8007a24:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f103 0008 	add.w	r0, r3, #8
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f103 0110 	add.w	r1, r3, #16
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	1d1a      	adds	r2, r3, #4
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	f7fc fa20 	bl	8003e7c <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f103 0008 	add.w	r0, r3, #8
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f103 0110 	add.w	r1, r3, #16
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	1d1a      	adds	r2, r3, #4
 8007a60:	887b      	ldrh	r3, [r7, #2]
 8007a62:	f7fc f9a9 	bl	8003db8 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 8007a66:	bf00      	nop
 8007a68:	3708      	adds	r7, #8
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b082      	sub	sp, #8
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f103 0008 	add.w	r0, r3, #8
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f103 0110 	add.w	r1, r3, #16
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	1d1a      	adds	r2, r3, #4
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	f7fc f960 	bl	8003d50 <_ZN3can7signals22SensorF_OD_CAN1_Status3setERyS2_Rhh>
        }
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f103 0008 	add.w	r0, r3, #8
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f103 0110 	add.w	r1, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	1d1a      	adds	r2, r3, #4
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	f7fc f912 	bl	8003cdc <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8007ab8:	bf00      	nop
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f103 0008 	add.w	r0, r3, #8
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f103 0110 	add.w	r1, r3, #16
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	1d1a      	adds	r2, r3, #4
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	f7fc f8c9 	bl	8003c74 <_ZN3can7signals27SensorF_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8007ae2:	bf00      	nop
 8007ae4:	3708      	adds	r7, #8
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}

08007aea <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b082      	sub	sp, #8
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
 8007af2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f103 0008 	add.w	r0, r3, #8
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f103 0110 	add.w	r1, r3, #16
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	1d1a      	adds	r2, r3, #4
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	f7fc f87b 	bl	8003c00 <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8007b0a:	bf00      	nop
 8007b0c:	3708      	adds	r7, #8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b12:	b580      	push	{r7, lr}
 8007b14:	b082      	sub	sp, #8
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f103 0008 	add.w	r0, r3, #8
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f103 0110 	add.w	r1, r3, #16
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	1d1a      	adds	r2, r3, #4
 8007b2e:	78fb      	ldrb	r3, [r7, #3]
 8007b30:	f7fc f832 	bl	8003b98 <_ZN3can7signals24SensorF_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8007b34:	bf00      	nop
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}

08007b3c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f103 0008 	add.w	r0, r3, #8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f103 0110 	add.w	r1, r3, #16
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	1d1a      	adds	r2, r3, #4
 8007b58:	78fb      	ldrb	r3, [r7, #3]
 8007b5a:	f7fb ffe9 	bl	8003b30 <_ZN3can7signals24SensorF_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8007b5e:	bf00      	nop
 8007b60:	3708      	adds	r7, #8
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}

08007b66 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b082      	sub	sp, #8
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f103 0008 	add.w	r0, r3, #8
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f103 0110 	add.w	r1, r3, #16
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	1d1a      	adds	r2, r3, #4
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	f7fb ff9d 	bl	8003ac0 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f103 0008 	add.w	r0, r3, #8
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f103 0110 	add.w	r1, r3, #16
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	1d1a      	adds	r2, r3, #4
 8007baa:	78fb      	ldrb	r3, [r7, #3]
 8007bac:	f7fb ff2c 	bl	8003a08 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8007bb0:	bf00      	nop
 8007bb2:	3708      	adds	r7, #8
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b082      	sub	sp, #8
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f103 0008 	add.w	r0, r3, #8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f103 0110 	add.w	r1, r3, #16
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	1d1a      	adds	r2, r3, #4
 8007bd4:	887b      	ldrh	r3, [r7, #2]
 8007bd6:	f7fb feb5 	bl	8003944 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8007bda:	bf00      	nop
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f103 0008 	add.w	r0, r3, #8
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f103 0110 	add.w	r1, r3, #16
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	1d1a      	adds	r2, r3, #4
 8007bfe:	78fb      	ldrb	r3, [r7, #3]
 8007c00:	f7fb fe6c 	bl	80038dc <_ZN3can7signals22SensorF_OD_CAN2_Status3setERyS2_Rhh>
        }
 8007c04:	bf00      	nop
 8007c06:	3708      	adds	r7, #8
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f103 0008 	add.w	r0, r3, #8
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f103 0110 	add.w	r1, r3, #16
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	1d1a      	adds	r2, r3, #4
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	f7fb fe1e 	bl	8003868 <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f103 0008 	add.w	r0, r3, #8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f103 0110 	add.w	r1, r3, #16
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	1d1a      	adds	r2, r3, #4
 8007c50:	78fb      	ldrb	r3, [r7, #3]
 8007c52:	f7fb fdd5 	bl	8003800 <_ZN3can7signals27SensorF_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 8007c56:	bf00      	nop
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f103 0008 	add.w	r0, r3, #8
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f103 0110 	add.w	r1, r3, #16
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	1d1a      	adds	r2, r3, #4
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f7fb fd87 	bl	800378c <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8007c7e:	bf00      	nop
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}

08007c86 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b082      	sub	sp, #8
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f103 0008 	add.w	r0, r3, #8
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f103 0110 	add.w	r1, r3, #16
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	ed97 0a00 	vldr	s0, [r7]
 8007ca6:	461a      	mov	r2, r3
 8007ca8:	f7fb fce2 	bl	8003670 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf>
        }
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f103 0008 	add.w	r0, r3, #8
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f103 0110 	add.w	r1, r3, #16
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	1d1a      	adds	r2, r3, #4
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	f7fb fc74 	bl	80035be <_ZN3can7signals28SensorF_OD_TelemetryCommands3setERyS2_Rhh>
        }
 8007cd6:	bf00      	nop
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f103 0008 	add.w	r0, r3, #8
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f103 0110 	add.w	r1, r3, #16
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	1d1a      	adds	r2, r3, #4
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	f7fb fbfa 	bl	80034f4 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh>
        }
 8007d00:	bf00      	nop
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f103 0008 	add.w	r0, r3, #8
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f103 0110 	add.w	r1, r3, #16
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	1d1a      	adds	r2, r3, #4
 8007d24:	78fb      	ldrb	r3, [r7, #3]
 8007d26:	f7fb fb8a 	bl	800343e <_ZN3can7signals31SensorF_OD_StateMachineActivate3setERyS2_Rhh>
        }
 8007d2a:	bf00      	nop
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b082      	sub	sp, #8
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f103 0008 	add.w	r0, r3, #8
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f103 0110 	add.w	r1, r3, #16
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	1d1a      	adds	r2, r3, #4
 8007d4e:	78fb      	ldrb	r3, [r7, #3]
 8007d50:	f7fb fb1a 	bl	8003388 <_ZN3can7signals24SensorF_OD_HVBatteryMode3setERyS2_Rhh>
        }
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f103 0008 	add.w	r0, r3, #8
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f103 0110 	add.w	r1, r3, #16
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3304      	adds	r3, #4
 8007d78:	ed97 0a00 	vldr	s0, [r7]
 8007d7c:	461a      	mov	r2, r3
 8007d7e:	f7fb fa75 	bl	800326c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf>
        }
 8007d82:	bf00      	nop
 8007d84:	3708      	adds	r7, #8
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b082      	sub	sp, #8
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	460b      	mov	r3, r1
 8007d94:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f103 0008 	add.w	r0, r3, #8
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f103 0110 	add.w	r1, r3, #16
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	1d1a      	adds	r2, r3, #4
 8007da6:	887b      	ldrh	r3, [r7, #2]
 8007da8:	f7fa fc53 	bl	8002652 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
        }
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f103 0008 	add.w	r0, r3, #8
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f103 0110 	add.w	r1, r3, #16
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	1d1a      	adds	r2, r3, #4
 8007dd0:	78fb      	ldrb	r3, [r7, #3]
 8007dd2:	f7fb f9ef 	bl	80031b4 <_ZN3can7signals21SensorF_OD_IMU_number3setERyS2_Rhh>
        }
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f103 0008 	add.w	r0, r3, #8
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f103 0110 	add.w	r1, r3, #16
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	ed97 0a00 	vldr	s0, [r7]
 8007dfe:	461a      	mov	r2, r3
 8007e00:	f7fb f972 	bl	80030e8 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf>
        }
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f103 0008 	add.w	r0, r3, #8
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f103 0110 	add.w	r1, r3, #16
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3304      	adds	r3, #4
 8007e28:	ed97 0a00 	vldr	s0, [r7]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f7fb f8f5 	bl	800301c <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf>
        }
 8007e32:	bf00      	nop
 8007e34:	3708      	adds	r7, #8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b082      	sub	sp, #8
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
 8007e42:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f103 0008 	add.w	r0, r3, #8
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f103 0110 	add.w	r1, r3, #16
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3304      	adds	r3, #4
 8007e56:	ed97 0a00 	vldr	s0, [r7]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f7fb f878 	bl	8002f50 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf>
        }
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f103 0008 	add.w	r0, r3, #8
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f103 0110 	add.w	r1, r3, #16
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	3304      	adds	r3, #4
 8007e84:	ed97 0a00 	vldr	s0, [r7]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	f7fa fffb 	bl	8002e84 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf>
        }
 8007e8e:	bf00      	nop
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b082      	sub	sp, #8
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f103 0008 	add.w	r0, r3, #8
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f103 0110 	add.w	r1, r3, #16
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	ed97 0a00 	vldr	s0, [r7]
 8007eb6:	461a      	mov	r2, r3
 8007eb8:	f7fa ff7e 	bl	8002db8 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf>
        }
 8007ebc:	bf00      	nop
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b082      	sub	sp, #8
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f103 0008 	add.w	r0, r3, #8
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	f103 0110 	add.w	r1, r3, #16
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	ed97 0a00 	vldr	s0, [r7]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f7fa ff01 	bl	8002cec <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf>
        }
 8007eea:	bf00      	nop
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b082      	sub	sp, #8
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f103 0008 	add.w	r0, r3, #8
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f103 0110 	add.w	r1, r3, #16
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	ed97 0a00 	vldr	s0, [r7]
 8007f12:	461a      	mov	r2, r3
 8007f14:	f7fa fe84 	bl	8002c20 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf>
        }
 8007f18:	bf00      	nop
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b082      	sub	sp, #8
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f103 0008 	add.w	r0, r3, #8
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f103 0110 	add.w	r1, r3, #16
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	ed97 0a00 	vldr	s0, [r7]
 8007f40:	461a      	mov	r2, r3
 8007f42:	f7fa fe07 	bl	8002b54 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf>
        }
 8007f46:	bf00      	nop
 8007f48:	3708      	adds	r7, #8
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b082      	sub	sp, #8
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f103 0008 	add.w	r0, r3, #8
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f103 0110 	add.w	r1, r3, #16
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	ed97 0a00 	vldr	s0, [r7]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7fa fd8a 	bl	8002a88 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf>
        }
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f103 0008 	add.w	r0, r3, #8
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f103 0110 	add.w	r1, r3, #16
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	3304      	adds	r3, #4
 8007f98:	ed97 0a00 	vldr	s0, [r7]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	f7fa fd0d 	bl	80029bc <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf>
        }
 8007fa2:	bf00      	nop
 8007fa4:	3708      	adds	r7, #8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f103 0008 	add.w	r0, r3, #8
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f103 0110 	add.w	r1, r3, #16
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	1d1a      	adds	r2, r3, #4
 8007fc6:	887b      	ldrh	r3, [r7, #2]
 8007fc8:	f7fa fcc9 	bl	800295e <_ZN3can7signals31SensorF_OD_FiducialRightCounter3setERyS2_Rht>
        }
 8007fcc:	bf00      	nop
 8007fce:	3708      	adds	r7, #8
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b082      	sub	sp, #8
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f103 0008 	add.w	r0, r3, #8
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f103 0110 	add.w	r1, r3, #16
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	1d1a      	adds	r2, r3, #4
 8007ff0:	887b      	ldrh	r3, [r7, #2]
 8007ff2:	f7fa fc85 	bl	8002900 <_ZN3can7signals30SensorF_OD_FiducialLeftCounter3setERyS2_Rht>
        }
 8007ff6:	bf00      	nop
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f103 0008 	add.w	r0, r3, #8
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f103 0110 	add.w	r1, r3, #16
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	3304      	adds	r3, #4
 800801a:	ed97 0a00 	vldr	s0, [r7]
 800801e:	461a      	mov	r2, r3
 8008020:	f7fa fc08 	bl	8002834 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf>
        }
 8008024:	bf00      	nop
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f103 0008 	add.w	r0, r3, #8
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f103 0110 	add.w	r1, r3, #16
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3304      	adds	r3, #4
 8008048:	ed97 0a00 	vldr	s0, [r7]
 800804c:	461a      	mov	r2, r3
 800804e:	f7fa fb8b 	bl	8002768 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf>
        }
 8008052:	bf00      	nop
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f103 0008 	add.w	r0, r3, #8
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f103 0110 	add.w	r1, r3, #16
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	1d1a      	adds	r2, r3, #4
 8008076:	78fb      	ldrb	r3, [r7, #3]
 8008078:	f7fa fb26 	bl	80026c8 <_ZN3can7signals20SensorF_SDO_RespCode3setERyS2_Rhh>
        }
 800807c:	bf00      	nop
 800807e:	3708      	adds	r7, #8
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f103 0208 	add.w	r2, r3, #8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	3310      	adds	r3, #16
 8008096:	4619      	mov	r1, r3
 8008098:	4610      	mov	r0, r2
 800809a:	f7fa fb02 	bl	80026a2 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800809e:	4603      	mov	r3, r0
        }
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b082      	sub	sp, #8
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f103 0208 	add.w	r2, r3, #8
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	3310      	adds	r3, #16
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f7fc fb88 	bl	80047d2 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_>
 80080c2:	4603      	mov	r3, r0
        }
 80080c4:	4618      	mov	r0, r3
 80080c6:	3708      	adds	r7, #8
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals25SensorF_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b082      	sub	sp, #8
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f103 0208 	add.w	r2, r3, #8
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	3310      	adds	r3, #16
 80080de:	4619      	mov	r1, r3
 80080e0:	4610      	mov	r0, r2
 80080e2:	f7fc fb24 	bl	800472e <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_>
 80080e6:	4603      	mov	r3, r0
        }
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f103 0208 	add.w	r2, r3, #8
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	3310      	adds	r3, #16
 8008102:	4619      	mov	r1, r3
 8008104:	4610      	mov	r0, r2
 8008106:	f7fc fabb 	bl	8004680 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_>
 800810a:	4603      	mov	r3, r0
        }
 800810c:	4618      	mov	r0, r3
 800810e:	3708      	adds	r7, #8
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f103 0208 	add.w	r2, r3, #8
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3310      	adds	r3, #16
 8008126:	4619      	mov	r1, r3
 8008128:	4610      	mov	r0, r2
 800812a:	f7fb fedb 	bl	8003ee4 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_>
 800812e:	4603      	mov	r3, r0
        }
 8008130:	4618      	mov	r0, r3
 8008132:	3708      	adds	r7, #8
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f103 0208 	add.w	r2, r3, #8
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	3310      	adds	r3, #16
 800814a:	4619      	mov	r1, r3
 800814c:	4610      	mov	r0, r2
 800814e:	f7fb fe6e 	bl	8003e2e <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_>
 8008152:	4603      	mov	r3, r0
        }
 8008154:	4618      	mov	r0, r3
 8008156:	3708      	adds	r7, #8
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800815c:	b580      	push	{r7, lr}
 800815e:	b082      	sub	sp, #8
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f103 0208 	add.w	r2, r3, #8
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	3310      	adds	r3, #16
 800816e:	4619      	mov	r1, r3
 8008170:	4610      	mov	r0, r2
 8008172:	f7fb fc7d 	bl	8003a70 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_>
 8008176:	4603      	mov	r3, r0
        }
 8008178:	4618      	mov	r0, r3
 800817a:	3708      	adds	r7, #8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f103 0208 	add.w	r2, r3, #8
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	3310      	adds	r3, #16
 8008192:	4619      	mov	r1, r3
 8008194:	4610      	mov	r0, r2
 8008196:	f7fb fc10 	bl	80039ba <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_>
 800819a:	4603      	mov	r3, r0
        }
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals27SensorF_OD_samplingIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f103 0208 	add.w	r2, r3, #8
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	3310      	adds	r3, #16
 80081b6:	4619      	mov	r1, r3
 80081b8:	4610      	mov	r0, r2
 80081ba:	f7fb fab7 	bl	800372c <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_>
 80081be:	eef0 7a40 	vmov.f32	s15, s0
        }
 80081c2:	eeb0 0a67 	vmov.f32	s0, s15
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_TelemetryCommandsEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b082      	sub	sp, #8
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f103 0208 	add.w	r2, r3, #8
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3310      	adds	r3, #16
 80081de:	4619      	mov	r1, r3
 80081e0:	4610      	mov	r0, r2
 80081e2:	f7fb fa20 	bl	8003626 <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_>
 80081e6:	4603      	mov	r3, r0
        }
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f103 0208 	add.w	r2, r3, #8
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3310      	adds	r3, #16
 8008202:	4619      	mov	r1, r3
 8008204:	4610      	mov	r0, r2
 8008206:	f7fb f9b3 	bl	8003570 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_>
 800820a:	4603      	mov	r3, r0
        }
 800820c:	4618      	mov	r0, r3
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineActivateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f103 0208 	add.w	r2, r3, #8
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	3310      	adds	r3, #16
 8008226:	4619      	mov	r1, r3
 8008228:	4610      	mov	r0, r2
 800822a:	f7fb f93c 	bl	80034a6 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_>
 800822e:	4603      	mov	r3, r0
        }
 8008230:	4618      	mov	r0, r3
 8008232:	3708      	adds	r7, #8
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_HVBatteryModeEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f103 0208 	add.w	r2, r3, #8
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	3310      	adds	r3, #16
 800824a:	4619      	mov	r1, r3
 800824c:	4610      	mov	r0, r2
 800824e:	f7fb f8cf 	bl	80033f0 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_>
 8008252:	4603      	mov	r3, r0
        }
 8008254:	4618      	mov	r0, r3
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderWheelDiameterEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f103 0208 	add.w	r2, r3, #8
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	3310      	adds	r3, #16
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7fb f857 	bl	8003324 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_>
 8008276:	eef0 7a40 	vmov.f32	s15, s0
        }
 800827a:	eeb0 0a67 	vmov.f32	s0, s15
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderResetPositionEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f103 0208 	add.w	r2, r3, #8
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	3310      	adds	r3, #16
 8008296:	4619      	mov	r1, r3
 8008298:	4610      	mov	r0, r2
 800829a:	f7fa ffbf 	bl	800321c <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_>
 800829e:	4603      	mov	r3, r0
        }
 80082a0:	4618      	mov	r0, r3
 80082a2:	3708      	adds	r7, #8
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals19SensorF_OD_SetResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b082      	sub	sp, #8
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f103 0208 	add.w	r2, r3, #8
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	3310      	adds	r3, #16
 80082ba:	4619      	mov	r1, r3
 80082bc:	4610      	mov	r0, r2
 80082be:	f7fa fa2d 	bl	800271c <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_>
 80082c2:	4603      	mov	r3, r0
        }
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <_Z41__static_initialization_and_destruction_0ii>:
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
 80082d4:	6039      	str	r1, [r7, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	f040 816e 	bne.w	80085ba <_Z41__static_initialization_and_destruction_0ii+0x2ee>
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082e4:	4293      	cmp	r3, r2
 80082e6:	f040 8168 	bne.w	80085ba <_Z41__static_initialization_and_destruction_0ii+0x2ee>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 80082ea:	2000      	movs	r0, #0
 80082ec:	f00d fedb 	bl	80160a6 <osMutexNew>
 80082f0:	4603      	mov	r3, r0
 80082f2:	4ab4      	ldr	r2, [pc, #720]	; (80085c4 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80082f4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 80082f6:	2000      	movs	r0, #0
 80082f8:	f00d fed5 	bl	80160a6 <osMutexNew>
 80082fc:	4603      	mov	r3, r0
 80082fe:	4ab2      	ldr	r2, [pc, #712]	; (80085c8 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8008300:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 8008302:	2000      	movs	r0, #0
 8008304:	f00d fecf 	bl	80160a6 <osMutexNew>
 8008308:	4603      	mov	r3, r0
 800830a:	4ab0      	ldr	r2, [pc, #704]	; (80085cc <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800830c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 800830e:	2000      	movs	r0, #0
 8008310:	f00d fec9 	bl	80160a6 <osMutexNew>
 8008314:	4603      	mov	r3, r0
 8008316:	4aae      	ldr	r2, [pc, #696]	; (80085d0 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008318:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 800831a:	2000      	movs	r0, #0
 800831c:	f00d fec3 	bl	80160a6 <osMutexNew>
 8008320:	4603      	mov	r3, r0
 8008322:	4aac      	ldr	r2, [pc, #688]	; (80085d4 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8008324:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 8008326:	2000      	movs	r0, #0
 8008328:	f00d febd 	bl	80160a6 <osMutexNew>
 800832c:	4603      	mov	r3, r0
 800832e:	4aaa      	ldr	r2, [pc, #680]	; (80085d8 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8008330:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 8008332:	2000      	movs	r0, #0
 8008334:	f00d feb7 	bl	80160a6 <osMutexNew>
 8008338:	4603      	mov	r3, r0
 800833a:	4aa8      	ldr	r2, [pc, #672]	; (80085dc <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800833c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 800833e:	2000      	movs	r0, #0
 8008340:	f00d feb1 	bl	80160a6 <osMutexNew>
 8008344:	4603      	mov	r3, r0
 8008346:	4aa6      	ldr	r2, [pc, #664]	; (80085e0 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8008348:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 800834a:	2000      	movs	r0, #0
 800834c:	f00d feab 	bl	80160a6 <osMutexNew>
 8008350:	4603      	mov	r3, r0
 8008352:	4aa4      	ldr	r2, [pc, #656]	; (80085e4 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008354:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 8008356:	2000      	movs	r0, #0
 8008358:	f00d fea5 	bl	80160a6 <osMutexNew>
 800835c:	4603      	mov	r3, r0
 800835e:	4aa2      	ldr	r2, [pc, #648]	; (80085e8 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8008360:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 8008362:	2000      	movs	r0, #0
 8008364:	f00d fe9f 	bl	80160a6 <osMutexNew>
 8008368:	4603      	mov	r3, r0
 800836a:	4aa0      	ldr	r2, [pc, #640]	; (80085ec <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800836c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 800836e:	2000      	movs	r0, #0
 8008370:	f00d fe99 	bl	80160a6 <osMutexNew>
 8008374:	4603      	mov	r3, r0
 8008376:	4a9e      	ldr	r2, [pc, #632]	; (80085f0 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8008378:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 800837a:	2000      	movs	r0, #0
 800837c:	f00d fe93 	bl	80160a6 <osMutexNew>
 8008380:	4603      	mov	r3, r0
 8008382:	4a9c      	ldr	r2, [pc, #624]	; (80085f4 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8008384:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 8008386:	2000      	movs	r0, #0
 8008388:	f00d fe8d 	bl	80160a6 <osMutexNew>
 800838c:	4603      	mov	r3, r0
 800838e:	4a9a      	ldr	r2, [pc, #616]	; (80085f8 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8008390:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8008392:	2000      	movs	r0, #0
 8008394:	f00d fe87 	bl	80160a6 <osMutexNew>
 8008398:	4603      	mov	r3, r0
 800839a:	4a98      	ldr	r2, [pc, #608]	; (80085fc <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800839c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 800839e:	2000      	movs	r0, #0
 80083a0:	f00d fe81 	bl	80160a6 <osMutexNew>
 80083a4:	4603      	mov	r3, r0
 80083a6:	4a96      	ldr	r2, [pc, #600]	; (8008600 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80083a8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 80083aa:	2000      	movs	r0, #0
 80083ac:	f00d fe7b 	bl	80160a6 <osMutexNew>
 80083b0:	4603      	mov	r3, r0
 80083b2:	4a94      	ldr	r2, [pc, #592]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80083b4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 80083b6:	2000      	movs	r0, #0
 80083b8:	f00d fe75 	bl	80160a6 <osMutexNew>
 80083bc:	4603      	mov	r3, r0
 80083be:	4a92      	ldr	r2, [pc, #584]	; (8008608 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80083c0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 80083c2:	2000      	movs	r0, #0
 80083c4:	f00d fe6f 	bl	80160a6 <osMutexNew>
 80083c8:	4603      	mov	r3, r0
 80083ca:	4a90      	ldr	r2, [pc, #576]	; (800860c <_Z41__static_initialization_and_destruction_0ii+0x340>)
 80083cc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 80083ce:	2000      	movs	r0, #0
 80083d0:	f00d fe69 	bl	80160a6 <osMutexNew>
 80083d4:	4603      	mov	r3, r0
 80083d6:	4a8e      	ldr	r2, [pc, #568]	; (8008610 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80083d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 80083da:	2000      	movs	r0, #0
 80083dc:	f00d fe63 	bl	80160a6 <osMutexNew>
 80083e0:	4603      	mov	r3, r0
 80083e2:	4a8c      	ldr	r2, [pc, #560]	; (8008614 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80083e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 80083e6:	2000      	movs	r0, #0
 80083e8:	f00d fe5d 	bl	80160a6 <osMutexNew>
 80083ec:	4603      	mov	r3, r0
 80083ee:	4a8a      	ldr	r2, [pc, #552]	; (8008618 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 80083f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 80083f2:	2000      	movs	r0, #0
 80083f4:	f00d fe57 	bl	80160a6 <osMutexNew>
 80083f8:	4603      	mov	r3, r0
 80083fa:	4a88      	ldr	r2, [pc, #544]	; (800861c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80083fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 80083fe:	2000      	movs	r0, #0
 8008400:	f00d fe51 	bl	80160a6 <osMutexNew>
 8008404:	4603      	mov	r3, r0
 8008406:	4a86      	ldr	r2, [pc, #536]	; (8008620 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8008408:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 800840a:	2000      	movs	r0, #0
 800840c:	f00d fe4b 	bl	80160a6 <osMutexNew>
 8008410:	4603      	mov	r3, r0
 8008412:	4a84      	ldr	r2, [pc, #528]	; (8008624 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8008414:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 8008416:	2000      	movs	r0, #0
 8008418:	f00d fe45 	bl	80160a6 <osMutexNew>
 800841c:	4603      	mov	r3, r0
 800841e:	4a82      	ldr	r2, [pc, #520]	; (8008628 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008420:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 8008422:	2000      	movs	r0, #0
 8008424:	f00d fe3f 	bl	80160a6 <osMutexNew>
 8008428:	4603      	mov	r3, r0
 800842a:	4a80      	ldr	r2, [pc, #512]	; (800862c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800842c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 800842e:	2000      	movs	r0, #0
 8008430:	f00d fe39 	bl	80160a6 <osMutexNew>
 8008434:	4603      	mov	r3, r0
 8008436:	4a7e      	ldr	r2, [pc, #504]	; (8008630 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8008438:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 800843a:	2000      	movs	r0, #0
 800843c:	f00d fe33 	bl	80160a6 <osMutexNew>
 8008440:	4603      	mov	r3, r0
 8008442:	4a7c      	ldr	r2, [pc, #496]	; (8008634 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8008444:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 8008446:	2000      	movs	r0, #0
 8008448:	f00d fe2d 	bl	80160a6 <osMutexNew>
 800844c:	4603      	mov	r3, r0
 800844e:	4a7a      	ldr	r2, [pc, #488]	; (8008638 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8008450:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8008452:	2000      	movs	r0, #0
 8008454:	f00d fe27 	bl	80160a6 <osMutexNew>
 8008458:	4603      	mov	r3, r0
 800845a:	4a78      	ldr	r2, [pc, #480]	; (800863c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800845c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 800845e:	2000      	movs	r0, #0
 8008460:	f00d fe21 	bl	80160a6 <osMutexNew>
 8008464:	4603      	mov	r3, r0
 8008466:	4a76      	ldr	r2, [pc, #472]	; (8008640 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8008468:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 800846a:	2000      	movs	r0, #0
 800846c:	f00d fe1b 	bl	80160a6 <osMutexNew>
 8008470:	4603      	mov	r3, r0
 8008472:	4a74      	ldr	r2, [pc, #464]	; (8008644 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8008474:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8008476:	2000      	movs	r0, #0
 8008478:	f00d fe15 	bl	80160a6 <osMutexNew>
 800847c:	4603      	mov	r3, r0
 800847e:	4a72      	ldr	r2, [pc, #456]	; (8008648 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8008480:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8008482:	2000      	movs	r0, #0
 8008484:	f00d fe0f 	bl	80160a6 <osMutexNew>
 8008488:	4603      	mov	r3, r0
 800848a:	4a70      	ldr	r2, [pc, #448]	; (800864c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800848c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 800848e:	2000      	movs	r0, #0
 8008490:	f00d fe09 	bl	80160a6 <osMutexNew>
 8008494:	4603      	mov	r3, r0
 8008496:	4a6e      	ldr	r2, [pc, #440]	; (8008650 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8008498:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 800849a:	2000      	movs	r0, #0
 800849c:	f00d fe03 	bl	80160a6 <osMutexNew>
 80084a0:	4603      	mov	r3, r0
 80084a2:	4a6c      	ldr	r2, [pc, #432]	; (8008654 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80084a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_samplingInterval         = osMutexNew(NULL);
 80084a6:	2000      	movs	r0, #0
 80084a8:	f00d fdfd 	bl	80160a6 <osMutexNew>
 80084ac:	4603      	mov	r3, r0
 80084ae:	4a6a      	ldr	r2, [pc, #424]	; (8008658 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80084b0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_TelemetryCommands        = osMutexNew(NULL);
 80084b2:	2000      	movs	r0, #0
 80084b4:	f00d fdf7 	bl	80160a6 <osMutexNew>
 80084b8:	4603      	mov	r3, r0
 80084ba:	4a68      	ldr	r2, [pc, #416]	; (800865c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80084bc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineInterval     = osMutexNew(NULL);
 80084be:	2000      	movs	r0, #0
 80084c0:	f00d fdf1 	bl	80160a6 <osMutexNew>
 80084c4:	4603      	mov	r3, r0
 80084c6:	4a66      	ldr	r2, [pc, #408]	; (8008660 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80084c8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineActivate     = osMutexNew(NULL);
 80084ca:	2000      	movs	r0, #0
 80084cc:	f00d fdeb 	bl	80160a6 <osMutexNew>
 80084d0:	4603      	mov	r3, r0
 80084d2:	4a64      	ldr	r2, [pc, #400]	; (8008664 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80084d4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HVBatteryMode            = osMutexNew(NULL);
 80084d6:	2000      	movs	r0, #0
 80084d8:	f00d fde5 	bl	80160a6 <osMutexNew>
 80084dc:	4603      	mov	r3, r0
 80084de:	4a62      	ldr	r2, [pc, #392]	; (8008668 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80084e0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderWheelDiameter     = osMutexNew(NULL);
 80084e2:	2000      	movs	r0, #0
 80084e4:	f00d fddf 	bl	80160a6 <osMutexNew>
 80084e8:	4603      	mov	r3, r0
 80084ea:	4a60      	ldr	r2, [pc, #384]	; (800866c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80084ec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderResetPosition     = osMutexNew(NULL);
 80084ee:	2000      	movs	r0, #0
 80084f0:	f00d fdd9 	bl	80160a6 <osMutexNew>
 80084f4:	4603      	mov	r3, r0
 80084f6:	4a5e      	ldr	r2, [pc, #376]	; (8008670 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80084f8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SetReset                 = osMutexNew(NULL);
 80084fa:	2000      	movs	r0, #0
 80084fc:	f00d fdd3 	bl	80160a6 <osMutexNew>
 8008500:	4603      	mov	r3, r0
 8008502:	4a5c      	ldr	r2, [pc, #368]	; (8008674 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008504:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_number               = osMutexNew(NULL);
 8008506:	2000      	movs	r0, #0
 8008508:	f00d fdcd 	bl	80160a6 <osMutexNew>
 800850c:	4603      	mov	r3, r0
 800850e:	4a5a      	ldr	r2, [pc, #360]	; (8008678 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8008510:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU1_Temperature         = osMutexNew(NULL);
 8008512:	2000      	movs	r0, #0
 8008514:	f00d fdc7 	bl	80160a6 <osMutexNew>
 8008518:	4603      	mov	r3, r0
 800851a:	4a58      	ldr	r2, [pc, #352]	; (800867c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800851c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU2_Temperature         = osMutexNew(NULL);
 800851e:	2000      	movs	r0, #0
 8008520:	f00d fdc1 	bl	80160a6 <osMutexNew>
 8008524:	4603      	mov	r3, r0
 8008526:	4a56      	ldr	r2, [pc, #344]	; (8008680 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008528:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU3_Temperature         = osMutexNew(NULL);
 800852a:	2000      	movs	r0, #0
 800852c:	f00d fdbb 	bl	80160a6 <osMutexNew>
 8008530:	4603      	mov	r3, r0
 8008532:	4a54      	ldr	r2, [pc, #336]	; (8008684 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8008534:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelX               = osMutexNew(NULL);
 8008536:	2000      	movs	r0, #0
 8008538:	f00d fdb5 	bl	80160a6 <osMutexNew>
 800853c:	4603      	mov	r3, r0
 800853e:	4a52      	ldr	r2, [pc, #328]	; (8008688 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008540:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelY               = osMutexNew(NULL);
 8008542:	2000      	movs	r0, #0
 8008544:	f00d fdaf 	bl	80160a6 <osMutexNew>
 8008548:	4603      	mov	r3, r0
 800854a:	4a50      	ldr	r2, [pc, #320]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800854c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelZ               = osMutexNew(NULL);
 800854e:	2000      	movs	r0, #0
 8008550:	f00d fda9 	bl	80160a6 <osMutexNew>
 8008554:	4603      	mov	r3, r0
 8008556:	4a4e      	ldr	r2, [pc, #312]	; (8008690 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8008558:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroX                = osMutexNew(NULL);
 800855a:	2000      	movs	r0, #0
 800855c:	f00d fda3 	bl	80160a6 <osMutexNew>
 8008560:	4603      	mov	r3, r0
 8008562:	4a4c      	ldr	r2, [pc, #304]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8008564:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroY                = osMutexNew(NULL);
 8008566:	2000      	movs	r0, #0
 8008568:	f00d fd9d 	bl	80160a6 <osMutexNew>
 800856c:	4603      	mov	r3, r0
 800856e:	4a4a      	ldr	r2, [pc, #296]	; (8008698 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8008570:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroZ                = osMutexNew(NULL);
 8008572:	2000      	movs	r0, #0
 8008574:	f00d fd97 	bl	80160a6 <osMutexNew>
 8008578:	4603      	mov	r3, r0
 800857a:	4a48      	ldr	r2, [pc, #288]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800857c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CoolingPressure          = osMutexNew(NULL);
 800857e:	2000      	movs	r0, #0
 8008580:	f00d fd91 	bl	80160a6 <osMutexNew>
 8008584:	4603      	mov	r3, r0
 8008586:	4a46      	ldr	r2, [pc, #280]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8008588:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_FiducialRightCounter     = osMutexNew(NULL);
 800858a:	2000      	movs	r0, #0
 800858c:	f00d fd8b 	bl	80160a6 <osMutexNew>
 8008590:	4603      	mov	r3, r0
 8008592:	4a44      	ldr	r2, [pc, #272]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8008594:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_FiducialLeftCounter      = osMutexNew(NULL);
 8008596:	2000      	movs	r0, #0
 8008598:	f00d fd85 	bl	80160a6 <osMutexNew>
 800859c:	4603      	mov	r3, r0
 800859e:	4a42      	ldr	r2, [pc, #264]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 80085a0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Position                 = osMutexNew(NULL);
 80085a2:	2000      	movs	r0, #0
 80085a4:	f00d fd7f 	bl	80160a6 <osMutexNew>
 80085a8:	4603      	mov	r3, r0
 80085aa:	4a40      	ldr	r2, [pc, #256]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80085ac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Velocity                 = osMutexNew(NULL);
 80085ae:	2000      	movs	r0, #0
 80085b0:	f00d fd79 	bl	80160a6 <osMutexNew>
 80085b4:	4603      	mov	r3, r0
 80085b6:	4a3e      	ldr	r2, [pc, #248]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80085b8:	6013      	str	r3, [r2, #0]
 80085ba:	bf00      	nop
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}
 80085c2:	bf00      	nop
 80085c4:	20000868 	.word	0x20000868
 80085c8:	2000086c 	.word	0x2000086c
 80085cc:	20000870 	.word	0x20000870
 80085d0:	20000874 	.word	0x20000874
 80085d4:	20000878 	.word	0x20000878
 80085d8:	2000087c 	.word	0x2000087c
 80085dc:	20000880 	.word	0x20000880
 80085e0:	20000884 	.word	0x20000884
 80085e4:	20000888 	.word	0x20000888
 80085e8:	2000088c 	.word	0x2000088c
 80085ec:	20000890 	.word	0x20000890
 80085f0:	20000894 	.word	0x20000894
 80085f4:	20000898 	.word	0x20000898
 80085f8:	2000089c 	.word	0x2000089c
 80085fc:	200008a0 	.word	0x200008a0
 8008600:	200008a4 	.word	0x200008a4
 8008604:	200008a8 	.word	0x200008a8
 8008608:	200008ac 	.word	0x200008ac
 800860c:	200008b0 	.word	0x200008b0
 8008610:	200008b4 	.word	0x200008b4
 8008614:	200008b8 	.word	0x200008b8
 8008618:	200008bc 	.word	0x200008bc
 800861c:	200008c0 	.word	0x200008c0
 8008620:	200008c4 	.word	0x200008c4
 8008624:	200008c8 	.word	0x200008c8
 8008628:	200008cc 	.word	0x200008cc
 800862c:	200008d0 	.word	0x200008d0
 8008630:	200008d4 	.word	0x200008d4
 8008634:	200008d8 	.word	0x200008d8
 8008638:	200008dc 	.word	0x200008dc
 800863c:	200008e0 	.word	0x200008e0
 8008640:	200008e4 	.word	0x200008e4
 8008644:	200008e8 	.word	0x200008e8
 8008648:	200008ec 	.word	0x200008ec
 800864c:	200008f0 	.word	0x200008f0
 8008650:	200008f4 	.word	0x200008f4
 8008654:	200008f8 	.word	0x200008f8
 8008658:	200008fc 	.word	0x200008fc
 800865c:	20000900 	.word	0x20000900
 8008660:	20000904 	.word	0x20000904
 8008664:	20000908 	.word	0x20000908
 8008668:	2000090c 	.word	0x2000090c
 800866c:	20000910 	.word	0x20000910
 8008670:	20000914 	.word	0x20000914
 8008674:	20000918 	.word	0x20000918
 8008678:	2000091c 	.word	0x2000091c
 800867c:	20000920 	.word	0x20000920
 8008680:	20000924 	.word	0x20000924
 8008684:	20000928 	.word	0x20000928
 8008688:	2000092c 	.word	0x2000092c
 800868c:	20000930 	.word	0x20000930
 8008690:	20000934 	.word	0x20000934
 8008694:	20000938 	.word	0x20000938
 8008698:	2000093c 	.word	0x2000093c
 800869c:	20000940 	.word	0x20000940
 80086a0:	20000944 	.word	0x20000944
 80086a4:	20000948 	.word	0x20000948
 80086a8:	2000094c 	.word	0x2000094c
 80086ac:	20000950 	.word	0x20000950
 80086b0:	20000954 	.word	0x20000954

080086b4 <_GLOBAL__sub_I_OD_NodeID>:
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80086bc:	2001      	movs	r0, #1
 80086be:	f7ff fe05 	bl	80082cc <_Z41__static_initialization_and_destruction_0ii>
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	6039      	str	r1, [r7, #0]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4618      	mov	r0, r3
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80086f2:	b480      	push	{r7}
 80086f4:	b083      	sub	sp, #12
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	4618      	mov	r0, r3
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4618      	mov	r0, r3
 8008714:	f7f8 fe9a 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 8008722:	b5b0      	push	{r4, r5, r7, lr}
 8008724:	b082      	sub	sp, #8
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	240f      	movs	r4, #15
 800872e:	461d      	mov	r5, r3
 8008730:	2c00      	cmp	r4, #0
 8008732:	db05      	blt.n	8008740 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 8008734:	4628      	mov	r0, r5
 8008736:	f000 fa83 	bl	8008c40 <_ZNSt8functionIFvtEEC1Ev>
 800873a:	3510      	adds	r5, #16
 800873c:	3c01      	subs	r4, #1
 800873e:	e7f7      	b.n	8008730 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4618      	mov	r0, r3
 800874c:	3708      	adds	r7, #8
 800874e:	46bd      	mov	sp, r7
 8008750:	bdb0      	pop	{r4, r5, r7, pc}

08008752 <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 8008752:	b590      	push	{r4, r7, lr}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d00a      	beq.n	8008776 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	429c      	cmp	r4, r3
 800876a:	d004      	beq.n	8008776 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 800876c:	3c10      	subs	r4, #16
 800876e:	4620      	mov	r0, r4
 8008770:	f7ff ffca 	bl	8008708 <_ZNSt8functionIFvtEED1Ev>
 8008774:	e7f7      	b.n	8008766 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4618      	mov	r0, r3
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	bd90      	pop	{r4, r7, pc}

08008780 <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
 8008784:	4801      	ldr	r0, [pc, #4]	; (800878c <__tcf_0+0xc>)
 8008786:	f7ff ffe4 	bl	8008752 <_ZN23GPIOExtiCallbackHandlerD1Ev>
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20000958 	.word	0x20000958

08008790 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 8008790:	b580      	push	{r7, lr}
 8008792:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 8008794:	4b12      	ldr	r3, [pc, #72]	; (80087e0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	f3bf 8f5b 	dmb	ish
 800879c:	b2db      	uxtb	r3, r3
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bf0c      	ite	eq
 80087a6:	2301      	moveq	r3, #1
 80087a8:	2300      	movne	r3, #0
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d013      	beq.n	80087d8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 80087b0:	480b      	ldr	r0, [pc, #44]	; (80087e0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 80087b2:	f011 fecf 	bl	801a554 <__cxa_guard_acquire>
 80087b6:	4603      	mov	r3, r0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	bf14      	ite	ne
 80087bc:	2301      	movne	r3, #1
 80087be:	2300      	moveq	r3, #0
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d008      	beq.n	80087d8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 80087c6:	4807      	ldr	r0, [pc, #28]	; (80087e4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 80087c8:	f7ff ffab 	bl	8008722 <_ZN23GPIOExtiCallbackHandlerC1Ev>
 80087cc:	4806      	ldr	r0, [pc, #24]	; (80087e8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 80087ce:	f012 f922 	bl	801aa16 <atexit>
 80087d2:	4803      	ldr	r0, [pc, #12]	; (80087e0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 80087d4:	f011 feca 	bl	801a56c <__cxa_guard_release>
		return instance;
 80087d8:	4b02      	ldr	r3, [pc, #8]	; (80087e4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 80087da:	4618      	mov	r0, r3
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	20000a5c 	.word	0x20000a5c
 80087e4:	20000958 	.word	0x20000958
 80087e8:	08008781 	.word	0x08008781

080087ec <_ZN23GPIOExtiCallbackHandler16registerCallbackESt8functionIFvtEE>:
	unsigned int registerCallback(std::function<void(uint16_t)> isr) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b084      	sub	sp, #16
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80087fc:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008804:	1c59      	adds	r1, r3, #1
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 800880c:	011b      	lsls	r3, r3, #4
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	4413      	add	r3, r2
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	4618      	mov	r0, r3
 8008816:	f000 fa20 	bl	8008c5a <_ZNSt8functionIFvtEEaSERKS1_>
		return id;
 800881a:	68fb      	ldr	r3, [r7, #12]
	}
 800881c:	4618      	mov	r0, r3
 800881e:	3710      	adds	r7, #16
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <_ZNSt8functionIFvbEED1Ev>:
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	4618      	mov	r0, r3
 8008830:	f7f8 fe0c 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt>:
class GPIOExtiController {
public:
	explicit GPIOExtiController(GPIO_TypeDef *port, uint16_t pin) :
			m_port(port), m_pin(pin) {
		m_extiIsrId = GPIOExtiCallbackHandler::getInstance().registerCallback(
				[&](uint16_t pin) {
 800883e:	b580      	push	{r7, lr}
 8008840:	b084      	sub	sp, #16
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
 8008846:	460b      	mov	r3, r1
 8008848:	807b      	strh	r3, [r7, #2]
					if (m_extiCallback != nullptr && m_pin == pin) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	330c      	adds	r3, #12
 8008850:	2100      	movs	r1, #0
 8008852:	4618      	mov	r0, r3
 8008854:	f000 fa2a 	bl	8008cac <_ZStneIvJbEEbRKSt8functionIFT_DpT0_EEDn>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d007      	beq.n	800886e <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x30>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	889b      	ldrh	r3, [r3, #4]
 8008864:	887a      	ldrh	r2, [r7, #2]
 8008866:	429a      	cmp	r2, r3
 8008868:	d101      	bne.n	800886e <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x30>
 800886a:	2301      	movs	r3, #1
 800886c:	e000      	b.n	8008870 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x32>
 800886e:	2300      	movs	r3, #0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d019      	beq.n	80088a8 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x6a>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
						GPIO_PinState state = HAL_GPIO_ReadPin(m_port, m_pin);
 8008878:	681a      	ldr	r2, [r3, #0]
					if (m_extiCallback != nullptr && m_pin == pin) {
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
						GPIO_PinState state = HAL_GPIO_ReadPin(m_port, m_pin);
 800887e:	889b      	ldrh	r3, [r3, #4]
 8008880:	4619      	mov	r1, r3
 8008882:	4610      	mov	r0, r2
 8008884:	f008 fd94 	bl	80113b0 <HAL_GPIO_ReadPin>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]
					if (m_extiCallback != nullptr && m_pin == pin) {
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
						m_extiCallback(state == GPIO_PIN_SET);
 8008890:	f103 020c 	add.w	r2, r3, #12
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	2b01      	cmp	r3, #1
 8008898:	bf0c      	ite	eq
 800889a:	2301      	moveq	r3, #1
 800889c:	2300      	movne	r3, #0
 800889e:	b2db      	uxtb	r3, r3
 80088a0:	4619      	mov	r1, r3
 80088a2:	4610      	mov	r0, r2
 80088a4:	f000 fa0f 	bl	8008cc6 <_ZNKSt8functionIFvbEEclEb>
					}
				});
 80088a8:	bf00      	nop
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>:
	explicit GPIOExtiController(GPIO_TypeDef *port, uint16_t pin) :
 80088b0:	b590      	push	{r4, r7, lr}
 80088b2:	b089      	sub	sp, #36	; 0x24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4613      	mov	r3, r2
 80088bc:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	88fa      	ldrh	r2, [r7, #6]
 80088c8:	809a      	strh	r2, [r3, #4]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	330c      	adds	r3, #12
 80088ce:	2100      	movs	r1, #0
 80088d0:	4618      	mov	r0, r3
 80088d2:	f000 f9dd 	bl	8008c90 <_ZNSt8functionIFvbEEC1EDn>
		m_extiIsrId = GPIOExtiCallbackHandler::getInstance().registerCallback(
 80088d6:	f7ff ff5b 	bl	8008790 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 80088da:	4604      	mov	r4, r0
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	f107 0310 	add.w	r3, r7, #16
 80088e2:	4611      	mov	r1, r2
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 fa0d 	bl	8008d04 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_>
 80088ea:	f107 0310 	add.w	r3, r7, #16
 80088ee:	4619      	mov	r1, r3
 80088f0:	4620      	mov	r0, r4
 80088f2:	f7ff ff7b 	bl	80087ec <_ZN23GPIOExtiCallbackHandler16registerCallbackESt8functionIFvtEE>
 80088f6:	4602      	mov	r2, r0
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	609a      	str	r2, [r3, #8]
 80088fc:	f107 0310 	add.w	r3, r7, #16
 8008900:	4618      	mov	r0, r3
 8008902:	f7ff ff01 	bl	8008708 <_ZNSt8functionIFvtEED1Ev>
	}
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4618      	mov	r0, r3
 800890a:	3724      	adds	r7, #36	; 0x24
 800890c:	46bd      	mov	sp, r7
 800890e:	bd90      	pop	{r4, r7, pc}

08008910 <_ZN18GPIOExtiController15setExtiCallbackESt8functionIFvbEE>:
	~GPIOExtiController() {
		GPIOExtiCallbackHandler::getInstance().unregisterCallback(m_extiIsrId);
	}
	void setExtiCallback(std::function<void(bool)> extiCallback) {
 8008910:	b580      	push	{r7, lr}
 8008912:	b082      	sub	sp, #8
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
		m_extiCallback = extiCallback;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	330c      	adds	r3, #12
 800891e:	6839      	ldr	r1, [r7, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fa19 	bl	8008d58 <_ZNSt8functionIFvbEEaSERKS1_>
	}
 8008926:	bf00      	nop
 8008928:	3708      	adds	r7, #8
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>:
 800892e:	b580      	push	{r7, lr}
 8008930:	b082      	sub	sp, #8
 8008932:	af00      	add	r7, sp, #0
 8008934:	6078      	str	r0, [r7, #4]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4618      	mov	r0, r3
 800893a:	f7f8 fd87 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4618      	mov	r0, r3
 8008942:	3708      	adds	r7, #8
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>:
			m_listeners[i](htim);
		}
	}

private:
	TimPeriodElapsedCallbackHandler() = default;
 8008948:	b5b0      	push	{r4, r5, r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	240f      	movs	r4, #15
 8008954:	461d      	mov	r5, r3
 8008956:	2c00      	cmp	r4, #0
 8008958:	db05      	blt.n	8008966 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0x1e>
 800895a:	4628      	mov	r0, r5
 800895c:	f000 fa17 	bl	8008d8e <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>
 8008960:	3510      	adds	r5, #16
 8008962:	3c01      	subs	r4, #1
 8008964:	e7f7      	b.n	8008956 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0xe>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bdb0      	pop	{r4, r5, r7, pc}

08008978 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>:
class TimPeriodElapsedCallbackHandler {
 8008978:	b590      	push	{r4, r7, lr}
 800897a:	b083      	sub	sp, #12
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d00a      	beq.n	800899c <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	429c      	cmp	r4, r3
 8008990:	d004      	beq.n	800899c <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8008992:	3c10      	subs	r4, #16
 8008994:	4620      	mov	r0, r4
 8008996:	f7ff ffca 	bl	800892e <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
 800899a:	e7f7      	b.n	800898c <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x14>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd90      	pop	{r4, r7, pc}
	...

080089a8 <__tcf_1>:
		static TimPeriodElapsedCallbackHandler instance;
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	4801      	ldr	r0, [pc, #4]	; (80089b4 <__tcf_1+0xc>)
 80089ae:	f7ff ffe3 	bl	8008978 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20000a60 	.word	0x20000a60

080089b8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>:
	static TimPeriodElapsedCallbackHandler& getInstance() {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
		static TimPeriodElapsedCallbackHandler instance;
 80089bc:	4b12      	ldr	r3, [pc, #72]	; (8008a08 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	f3bf 8f5b 	dmb	ish
 80089c4:	b2db      	uxtb	r3, r3
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	bf0c      	ite	eq
 80089ce:	2301      	moveq	r3, #1
 80089d0:	2300      	movne	r3, #0
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d013      	beq.n	8008a00 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 80089d8:	480b      	ldr	r0, [pc, #44]	; (8008a08 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 80089da:	f011 fdbb 	bl	801a554 <__cxa_guard_acquire>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	bf14      	ite	ne
 80089e4:	2301      	movne	r3, #1
 80089e6:	2300      	moveq	r3, #0
 80089e8:	b2db      	uxtb	r3, r3
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d008      	beq.n	8008a00 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 80089ee:	4807      	ldr	r0, [pc, #28]	; (8008a0c <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
 80089f0:	f7ff ffaa 	bl	8008948 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>
 80089f4:	4806      	ldr	r0, [pc, #24]	; (8008a10 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x58>)
 80089f6:	f012 f80e 	bl	801aa16 <atexit>
 80089fa:	4803      	ldr	r0, [pc, #12]	; (8008a08 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 80089fc:	f011 fdb6 	bl	801a56c <__cxa_guard_release>
		return instance;
 8008a00:	4b02      	ldr	r3, [pc, #8]	; (8008a0c <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
	}
 8008a02:	4618      	mov	r0, r3
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	20000b64 	.word	0x20000b64
 8008a0c:	20000a60 	.word	0x20000a60
 8008a10:	080089a9 	.word	0x080089a9

08008a14 <_ZN31TimPeriodElapsedCallbackHandler16registerCallbackESt8functionIFvP17TIM_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(TIM_HandleTypeDef*)> isr) {
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008a24:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008a2c:	1c59      	adds	r1, r3, #1
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8008a34:	011b      	lsls	r3, r3, #4
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	4413      	add	r3, r2
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f000 f9b3 	bl	8008da8 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEaSERKS3_>
		return id;
 8008a42:	68fb      	ldr	r3, [r7, #12]
	}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_>:

class Timer {
public:
	explicit Timer(TIM_HandleTypeDef *htim) :
			m_htim(htim) {
		m_cpltIsr = TimPeriodElapsedCallbackHandler::getInstance().registerCallback([&](TIM_HandleTypeDef* htim){
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
			if(m_htim == htim){
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	683a      	ldr	r2, [r7, #0]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d104      	bne.n	8008a6c <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_+0x20>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
				m_overflow++;
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	3201      	adds	r2, #1
 8008a6a:	605a      	str	r2, [r3, #4]
			}
		});
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <_ZN5TimerC1EP17TIM_HandleTypeDef>:
	explicit Timer(TIM_HandleTypeDef *htim) :
 8008a78:	b590      	push	{r4, r7, lr}
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
			m_htim(htim) {
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	605a      	str	r2, [r3, #4]
		m_cpltIsr = TimPeriodElapsedCallbackHandler::getInstance().registerCallback([&](TIM_HandleTypeDef* htim){
 8008a8e:	f7ff ff93 	bl	80089b8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 8008a92:	4604      	mov	r4, r0
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	f107 0308 	add.w	r3, r7, #8
 8008a9a:	4611      	mov	r1, r2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f000 f99f 	bl	8008de0 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_>
 8008aa2:	f107 0308 	add.w	r3, r7, #8
 8008aa6:	4619      	mov	r1, r3
 8008aa8:	4620      	mov	r0, r4
 8008aaa:	f7ff ffb3 	bl	8008a14 <_ZN31TimPeriodElapsedCallbackHandler16registerCallbackESt8functionIFvP17TIM_HandleTypeDefEE>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	609a      	str	r2, [r3, #8]
 8008ab4:	f107 0308 	add.w	r3, r7, #8
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7ff ff38 	bl	800892e <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
	}
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	371c      	adds	r7, #28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd90      	pop	{r4, r7, pc}

08008ac8 <_ZN5Timer5startEv>:

	void start() {
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
		reset();
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f000 f809 	bl	8008ae8 <_ZN5Timer5resetEv>
		HAL_TIM_Base_Start_IT(m_htim);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f00a f936 	bl	8012d4c <HAL_TIM_Base_Start_IT>
	}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <_ZN5Timer5resetEv>:

	void stop() {
		HAL_TIM_Base_Stop_IT(m_htim);
	}

	void reset() {
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
		m_overflow = 0;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2200      	movs	r2, #0
 8008af4:	605a      	str	r2, [r3, #4]
		__HAL_TIM_SET_COUNTER(m_htim, 0);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2200      	movs	r2, #0
 8008afe:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <_ZN5Timer3getEv>:

	[[nodiscard]] inline uint16_t get() {
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
		return __HAL_TIM_GET_COUNTER(m_htim);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1c:	b29b      	uxth	r3, r3
	}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <_ZN5Timer8overflowEv>:
	[[nodiscard]] inline unsigned int overflow(){
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
		return m_overflow;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	685b      	ldr	r3, [r3, #4]
	}
 8008b36:	4618      	mov	r0, r3
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <_ZZN14FiducialSensorC4E14FiducialConfigENKUlbE_clEb>:

FiducialSensor::FiducialSensor(FiducialConfig config) :
		m_exti(config.m_gpio.m_port, config.m_gpio.m_pin), m_count(0), m_timer(config.m_htim), m_deltaTime(
				0), m_distanceBetweenInterrupts(
				config.m_distanceBetweenInterrupts) {
	m_exti.setExtiCallback([&](bool v) {
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	70fb      	strb	r3, [r7, #3]
		this->extiCallback(v);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	78fa      	ldrb	r2, [r7, #3]
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 f844 	bl	8008be4 <_ZN14FiducialSensor12extiCallbackEb>
	});
 8008b5c:	bf00      	nop
 8008b5e:	3708      	adds	r7, #8
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <_ZN14FiducialSensorC1E14FiducialConfig>:
FiducialSensor::FiducialSensor(FiducialConfig config) :
 8008b64:	b084      	sub	sp, #16
 8008b66:	b590      	push	{r4, r7, lr}
 8008b68:	b087      	sub	sp, #28
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8008b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
				config.m_distanceBetweenInterrupts) {
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b7a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7ff fe97 	bl	80088b0 <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	61da      	str	r2, [r3, #28]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	3320      	adds	r3, #32
 8008b8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b8e:	4611      	mov	r1, r2
 8008b90:	4618      	mov	r0, r3
 8008b92:	f7ff ff71 	bl	8008a78 <_ZN5TimerC1EP17TIM_HandleTypeDef>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8008b9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	631a      	str	r2, [r3, #48]	; 0x30
	m_exti.setExtiCallback([&](bool v) {
 8008ba2:	687c      	ldr	r4, [r7, #4]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	f107 0308 	add.w	r3, r7, #8
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 f941 	bl	8008e34 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_>
 8008bb2:	f107 0308 	add.w	r3, r7, #8
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f7ff fea9 	bl	8008910 <_ZN18GPIOExtiController15setExtiCallbackESt8functionIFvbEE>
 8008bbe:	f107 0308 	add.w	r3, r7, #8
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff fe2e 	bl	8008824 <_ZNSt8functionIFvbEED1Ev>
	m_timer.start();
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	3320      	adds	r3, #32
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff ff7b 	bl	8008ac8 <_ZN5Timer5startEv>
}
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	371c      	adds	r7, #28
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008bde:	b004      	add	sp, #16
 8008be0:	4770      	bx	lr
	...

08008be4 <_ZN14FiducialSensor12extiCallbackEb>:

float FiducialSensor::estimateVelocityMPS() {
	return m_distanceBetweenInterrupts / (float) m_deltaTime;
}

void FiducialSensor::extiCallback(bool v) {
 8008be4:	b590      	push	{r4, r7, lr}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
	m_deltaTime = (m_timer.get() + m_timer.overflow() * 0xFFFF) / 10;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3320      	adds	r3, #32
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7ff ff89 	bl	8008b0c <_ZN5Timer3getEv>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	461c      	mov	r4, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	3320      	adds	r3, #32
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7ff ff91 	bl	8008b2a <_ZN5Timer8overflowEv>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	041b      	lsls	r3, r3, #16
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	4423      	add	r3, r4
 8008c12:	4a0a      	ldr	r2, [pc, #40]	; (8008c3c <_ZN14FiducialSensor12extiCallbackEb+0x58>)
 8008c14:	fba2 2303 	umull	r2, r3, r2, r3
 8008c18:	08da      	lsrs	r2, r3, #3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	62da      	str	r2, [r3, #44]	; 0x2c
	m_timer.reset();
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	3320      	adds	r3, #32
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7ff ff60 	bl	8008ae8 <_ZN5Timer5resetEv>
	m_count++;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	69db      	ldr	r3, [r3, #28]
 8008c2c:	1c5a      	adds	r2, r3, #1
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	61da      	str	r2, [r3, #28]
}
 8008c32:	bf00      	nop
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd90      	pop	{r4, r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	cccccccd 	.word	0xcccccccd

08008c40 <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7f8 fbf0 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4618      	mov	r0, r3
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <_ZNSt8functionIFvtEEaSERKS1_>:
      operator=(const function& __x)
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b086      	sub	sp, #24
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8008c64:	f107 0308 	add.w	r3, r7, #8
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f000 f90c 	bl	8008e88 <_ZNSt8functionIFvtEEC1ERKS1_>
 8008c70:	f107 0308 	add.w	r3, r7, #8
 8008c74:	6879      	ldr	r1, [r7, #4]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f000 f928 	bl	8008ecc <_ZNSt8functionIFvtEE4swapERS1_>
 8008c7c:	f107 0308 	add.w	r3, r7, #8
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7ff fd41 	bl	8008708 <_ZNSt8functionIFvtEED1Ev>
	return *this;
 8008c86:	687b      	ldr	r3, [r7, #4]
      }
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <_ZNSt8functionIFvbEEC1EDn>:
      function(nullptr_t) noexcept
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7f8 fbc7 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3708      	adds	r7, #8
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <_ZStneIvJbEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f955 	bl	8008f66 <_ZNKSt8functionIFvbEEcvbEv>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <_ZNKSt8functionIFvbEEclEb>:
    function<_Res(_ArgTypes...)>::
 8008cc6:	b5b0      	push	{r4, r5, r7, lr}
 8008cc8:	b082      	sub	sp, #8
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	460b      	mov	r3, r1
 8008cd0:	70fb      	strb	r3, [r7, #3]
      if (_M_empty())
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7f8 fbcc 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d001      	beq.n	8008ce4 <_ZNKSt8functionIFvbEEclEb+0x1e>
	__throw_bad_function_call();
 8008ce0:	f011 fc49 	bl	801a576 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68dc      	ldr	r4, [r3, #12]
 8008ce8:	687d      	ldr	r5, [r7, #4]
 8008cea:	1cfb      	adds	r3, r7, #3
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 f94a 	bl	8008f86 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	47a0      	blx	r4
 8008cfa:	bf00      	nop
    }
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008d04 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8008d04:	b590      	push	{r4, r7, lr}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7f8 fb8d 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8008d16:	463b      	mov	r3, r7
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 f93f 	bl	8008f9c <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E21_M_not_empty_functionIS4_EEbRKT_>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00f      	beq.n	8008d44 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8008d24:	687c      	ldr	r4, [r7, #4]
 8008d26:	463b      	mov	r3, r7
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 f942 	bl	8008fb2 <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	4619      	mov	r1, r3
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 f948 	bl	8008fc8 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a05      	ldr	r2, [pc, #20]	; (8008d50 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x4c>)
 8008d3c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	4a04      	ldr	r2, [pc, #16]	; (8008d54 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x50>)
 8008d42:	609a      	str	r2, [r3, #8]
      }
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd90      	pop	{r4, r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	08008fed 	.word	0x08008fed
 8008d54:	08009017 	.word	0x08009017

08008d58 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8008d62:	f107 0308 	add.w	r3, r7, #8
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 f973 	bl	8009054 <_ZNSt8functionIFvbEEC1ERKS1_>
 8008d6e:	f107 0308 	add.w	r3, r7, #8
 8008d72:	6879      	ldr	r1, [r7, #4]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 f8d5 	bl	8008f24 <_ZNSt8functionIFvbEE4swapERS1_>
 8008d7a:	f107 0308 	add.w	r3, r7, #8
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff fd50 	bl	8008824 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 8008d84:	687b      	ldr	r3, [r7, #4]
      }
 8008d86:	4618      	mov	r0, r3
 8008d88:	3718      	adds	r7, #24
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>:
      function() noexcept
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b082      	sub	sp, #8
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7f8 fb49 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4618      	mov	r0, r3
 8008da2:	3708      	adds	r7, #8
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b086      	sub	sp, #24
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8008db2:	f107 0308 	add.w	r3, r7, #8
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	4618      	mov	r0, r3
 8008dba:	f000 f96d 	bl	8009098 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_>
 8008dbe:	f107 0308 	add.w	r3, r7, #8
 8008dc2:	6879      	ldr	r1, [r7, #4]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f000 f989 	bl	80090dc <_ZNSt8functionIFvP17TIM_HandleTypeDefEE4swapERS3_>
 8008dca:	f107 0308 	add.w	r3, r7, #8
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff fdad 	bl	800892e <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
	return *this;
 8008dd4:	687b      	ldr	r3, [r7, #4]
      }
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8008de0:	b590      	push	{r4, r7, lr}
 8008de2:	b083      	sub	sp, #12
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7f8 fb1f 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8008df2:	463b      	mov	r3, r7
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 f99d 	bl	8009134 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E21_M_not_empty_functionIS4_EEbRKT_>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00f      	beq.n	8008e20 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8008e00:	687c      	ldr	r4, [r7, #4]
 8008e02:	463b      	mov	r3, r7
 8008e04:	4618      	mov	r0, r3
 8008e06:	f000 f9a0 	bl	800914a <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 f9a6 	bl	8009160 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a05      	ldr	r2, [pc, #20]	; (8008e2c <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x4c>)
 8008e18:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a04      	ldr	r2, [pc, #16]	; (8008e30 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x50>)
 8008e1e:	609a      	str	r2, [r3, #8]
      }
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4618      	mov	r0, r3
 8008e24:	370c      	adds	r7, #12
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd90      	pop	{r4, r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	08009185 	.word	0x08009185
 8008e30:	080091af 	.word	0x080091af

08008e34 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7f8 faf5 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8008e46:	463b      	mov	r3, r7
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f000 f9cf 	bl	80091ec <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E21_M_not_empty_functionIS3_EEbRKT_>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00f      	beq.n	8008e74 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8008e54:	687c      	ldr	r4, [r7, #4]
 8008e56:	463b      	mov	r3, r7
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 f9d2 	bl	8009202 <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	4619      	mov	r1, r3
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 f9d8 	bl	8009218 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a05      	ldr	r2, [pc, #20]	; (8008e80 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x4c>)
 8008e6c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a04      	ldr	r2, [pc, #16]	; (8008e84 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x50>)
 8008e72:	609a      	str	r2, [r3, #8]
      }
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd90      	pop	{r4, r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	0800923d 	.word	0x0800923d
 8008e84:	08009267 	.word	0x08009267

08008e88 <_ZNSt8functionIFvtEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7f8 facb 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8008e9a:	6838      	ldr	r0, [r7, #0]
 8008e9c:	f000 fa02 	bl	80092a4 <_ZNKSt8functionIFvtEEcvbEv>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00d      	beq.n	8008ec2 <_ZNSt8functionIFvtEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	6839      	ldr	r1, [r7, #0]
 8008eae:	2202      	movs	r2, #2
 8008eb0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	609a      	str	r2, [r3, #8]
    }
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <_ZNSt8functionIFvtEE4swapERS1_>:
      void swap(function& __x) noexcept
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	683a      	ldr	r2, [r7, #0]
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7f8 fc84 	bl	80017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	f103 0208 	add.w	r2, r3, #8
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	3308      	adds	r3, #8
 8008eec:	4619      	mov	r1, r3
 8008eee:	4610      	mov	r0, r2
 8008ef0:	f7f8 fcad 	bl	800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f103 020c 	add.w	r2, r3, #12
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	330c      	adds	r3, #12
 8008efe:	4619      	mov	r1, r3
 8008f00:	4610      	mov	r0, r2
 8008f02:	f000 f9ea 	bl	80092da <_ZSt4swapIPFvRKSt9_Any_dataOtEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008f0e:	b480      	push	{r7}
 8008f10:	b083      	sub	sp, #12
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	4618      	mov	r0, r3
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f8 fc58 	bl	80017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f103 0208 	add.w	r2, r3, #8
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	3308      	adds	r3, #8
 8008f44:	4619      	mov	r1, r3
 8008f46:	4610      	mov	r0, r2
 8008f48:	f7f8 fc81 	bl	800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f103 020c 	add.w	r2, r3, #12
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	330c      	adds	r3, #12
 8008f56:	4619      	mov	r1, r3
 8008f58:	4610      	mov	r0, r2
 8008f5a:	f000 f9e8 	bl	800932e <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b082      	sub	sp, #8
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f8 fa7e 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f083 0301 	eor.w	r3, r3, #1
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3708      	adds	r7, #8
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008f86:	b480      	push	{r7}
 8008f88:	b083      	sub	sp, #12
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8008f9c:	b480      	push	{r7}
 8008f9e:	b083      	sub	sp, #12
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
	  { return true; }
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	370c      	adds	r7, #12
 8008faa:	46bd      	mov	sp, r7
 8008fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb0:	4770      	bx	lr

08008fb2 <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8008fb2:	b480      	push	{r7}
 8008fb4:	b083      	sub	sp, #12
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8008fc8:	b590      	push	{r4, r7, lr}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8008fd2:	6838      	ldr	r0, [r7, #0]
 8008fd4:	f7ff ffed 	bl	8008fb2 <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	4622      	mov	r2, r4
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f9c4 	bl	800936c <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd90      	pop	{r4, r7, pc}

08008fec <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E9_M_invokeERKSt9_Any_dataOt>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8008fec:	b590      	push	{r4, r7, lr}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f9d1 	bl	800939e <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 8008ffc:	4604      	mov	r4, r0
 8008ffe:	6838      	ldr	r0, [r7, #0]
 8009000:	f7ff ff85 	bl	8008f0e <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8009004:	4603      	mov	r3, r0
 8009006:	4619      	mov	r1, r3
 8009008:	4620      	mov	r0, r4
 800900a:	f000 f9d9 	bl	80093c0 <_ZSt10__invoke_rIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800900e:	bf00      	nop
      }
 8009010:	370c      	adds	r7, #12
 8009012:	46bd      	mov	sp, r7
 8009014:	bd90      	pop	{r4, r7, pc}

08009016 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8009016:	b590      	push	{r4, r7, lr}
 8009018:	b085      	sub	sp, #20
 800901a:	af00      	add	r7, sp, #0
 800901c:	60f8      	str	r0, [r7, #12]
 800901e:	60b9      	str	r1, [r7, #8]
 8009020:	4613      	mov	r3, r2
 8009022:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d109      	bne.n	800903e <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 f9de 	bl	80093ec <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
 8009030:	4604      	mov	r4, r0
 8009032:	68b8      	ldr	r0, [r7, #8]
 8009034:	f000 f9b3 	bl	800939e <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 8009038:	4603      	mov	r3, r0
 800903a:	6023      	str	r3, [r4, #0]
	    break;
 800903c:	e005      	b.n	800904a <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	461a      	mov	r2, r3
 8009042:	68b9      	ldr	r1, [r7, #8]
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 f9dd 	bl	8009404 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800904a:	2300      	movs	r3, #0
      }
 800904c:	4618      	mov	r0, r3
 800904e:	3714      	adds	r7, #20
 8009050:	46bd      	mov	sp, r7
 8009052:	bd90      	pop	{r4, r7, pc}

08009054 <_ZNSt8functionIFvbEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4618      	mov	r0, r3
 8009062:	f7f8 f9e5 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8009066:	6838      	ldr	r0, [r7, #0]
 8009068:	f7ff ff7d 	bl	8008f66 <_ZNKSt8functionIFvbEEcvbEv>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00d      	beq.n	800908e <_ZNSt8functionIFvbEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	2202      	movs	r2, #2
 800907c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	689a      	ldr	r2, [r3, #8]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	609a      	str	r2, [r3, #8]
    }
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4618      	mov	r0, r3
 8009092:	3708      	adds	r7, #8
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8009098:	b580      	push	{r7, lr}
 800909a:	b082      	sub	sp, #8
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f7f8 f9c3 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80090aa:	6838      	ldr	r0, [r7, #0]
 80090ac:	f000 f9d5 	bl	800945a <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEcvbEv>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00d      	beq.n	80090d2 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	2202      	movs	r2, #2
 80090c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	689a      	ldr	r2, [r3, #8]
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	609a      	str	r2, [r3, #8]
    }
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4618      	mov	r0, r3
 80090d6:	3708      	adds	r7, #8
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <_ZNSt8functionIFvP17TIM_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	4611      	mov	r1, r2
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7f8 fb7c 	bl	80017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f103 0208 	add.w	r2, r3, #8
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	3308      	adds	r3, #8
 80090fc:	4619      	mov	r1, r3
 80090fe:	4610      	mov	r0, r2
 8009100:	f7f8 fba5 	bl	800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f103 020c 	add.w	r2, r3, #12
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	330c      	adds	r3, #12
 800910e:	4619      	mov	r1, r3
 8009110:	4610      	mov	r0, r2
 8009112:	f000 f9bd 	bl	8009490 <_ZSt4swapIPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8009116:	bf00      	nop
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800911e:	b480      	push	{r7}
 8009120:	b083      	sub	sp, #12
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4618      	mov	r0, r3
 800912a:	370c      	adds	r7, #12
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr

08009134 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8009134:	b480      	push	{r7}
 8009136:	b083      	sub	sp, #12
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
	  { return true; }
 800913c:	2301      	movs	r3, #1
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800914a:	b480      	push	{r7}
 800914c:	b083      	sub	sp, #12
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4618      	mov	r0, r3
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8009160:	b590      	push	{r4, r7, lr}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800916a:	6838      	ldr	r0, [r7, #0]
 800916c:	f7ff ffed 	bl	800914a <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 8009170:	4603      	mov	r3, r0
 8009172:	4622      	mov	r2, r4
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f9a9 	bl	80094ce <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	bd90      	pop	{r4, r7, pc}

08009184 <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8009184:	b590      	push	{r4, r7, lr}
 8009186:	b083      	sub	sp, #12
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800918e:	6878      	ldr	r0, [r7, #4]
 8009190:	f000 f9b6 	bl	8009500 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 8009194:	4604      	mov	r4, r0
 8009196:	6838      	ldr	r0, [r7, #0]
 8009198:	f7ff ffc1 	bl	800911e <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800919c:	4603      	mov	r3, r0
 800919e:	4619      	mov	r1, r3
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 f9be 	bl	8009522 <_ZSt10__invoke_rIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 80091a6:	bf00      	nop
      }
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd90      	pop	{r4, r7, pc}

080091ae <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80091ae:	b590      	push	{r4, r7, lr}
 80091b0:	b085      	sub	sp, #20
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	60f8      	str	r0, [r7, #12]
 80091b6:	60b9      	str	r1, [r7, #8]
 80091b8:	4613      	mov	r3, r2
 80091ba:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	2b01      	cmp	r3, #1
 80091c0:	d109      	bne.n	80091d6 <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f9c3 	bl	800954e <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
 80091c8:	4604      	mov	r4, r0
 80091ca:	68b8      	ldr	r0, [r7, #8]
 80091cc:	f000 f998 	bl	8009500 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 80091d0:	4603      	mov	r3, r0
 80091d2:	6023      	str	r3, [r4, #0]
	    break;
 80091d4:	e005      	b.n	80091e2 <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	461a      	mov	r2, r3
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f000 f9c2 	bl	8009566 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 80091e2:	2300      	movs	r3, #0
      }
 80091e4:	4618      	mov	r0, r3
 80091e6:	3714      	adds	r7, #20
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd90      	pop	{r4, r7, pc}

080091ec <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
	  { return true; }
 80091f4:	2301      	movs	r3, #1
 80091f6:	4618      	mov	r0, r3
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8009218:	b590      	push	{r4, r7, lr}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8009222:	6838      	ldr	r0, [r7, #0]
 8009224:	f7ff ffed 	bl	8009202 <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8009228:	4603      	mov	r3, r0
 800922a:	4622      	mov	r2, r4
 800922c:	4619      	mov	r1, r3
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f9c4 	bl	80095bc <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	bd90      	pop	{r4, r7, pc}

0800923c <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800923c:	b590      	push	{r4, r7, lr}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f000 f9d1 	bl	80095ee <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 800924c:	4604      	mov	r4, r0
 800924e:	6838      	ldr	r0, [r7, #0]
 8009250:	f7ff fe99 	bl	8008f86 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8009254:	4603      	mov	r3, r0
 8009256:	4619      	mov	r1, r3
 8009258:	4620      	mov	r0, r4
 800925a:	f000 f9d9 	bl	8009610 <_ZSt10__invoke_rIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>
				     std::forward<_ArgTypes>(__args)...);
 800925e:	bf00      	nop
      }
 8009260:	370c      	adds	r7, #12
 8009262:	46bd      	mov	sp, r7
 8009264:	bd90      	pop	{r4, r7, pc}

08009266 <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8009266:	b590      	push	{r4, r7, lr}
 8009268:	b085      	sub	sp, #20
 800926a:	af00      	add	r7, sp, #0
 800926c:	60f8      	str	r0, [r7, #12]
 800926e:	60b9      	str	r1, [r7, #8]
 8009270:	4613      	mov	r3, r2
 8009272:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d109      	bne.n	800928e <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f000 f9de 	bl	800963c <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
 8009280:	4604      	mov	r4, r0
 8009282:	68b8      	ldr	r0, [r7, #8]
 8009284:	f000 f9b3 	bl	80095ee <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8009288:	4603      	mov	r3, r0
 800928a:	6023      	str	r3, [r4, #0]
	    break;
 800928c:	e005      	b.n	800929a <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	461a      	mov	r2, r3
 8009292:	68b9      	ldr	r1, [r7, #8]
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f000 f9dd 	bl	8009654 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 800929a:	2300      	movs	r3, #0
      }
 800929c:	4618      	mov	r0, r3
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd90      	pop	{r4, r7, pc}

080092a4 <_ZNKSt8functionIFvtEEcvbEv>:
      explicit operator bool() const noexcept
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7f8 f8df 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80092b4:	4603      	mov	r3, r0
 80092b6:	f083 0301 	eor.w	r3, r3, #1
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <_ZSt4swapIPFvRKSt9_Any_dataOtEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 80092da:	b580      	push	{r7, lr}
 80092dc:	b084      	sub	sp, #16
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f7ff ffed 	bl	80092c4 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 80092ea:	4603      	mov	r3, r0
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80092f0:	6838      	ldr	r0, [r7, #0]
 80092f2:	f7ff ffe7 	bl	80092c4 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 80092f6:	4603      	mov	r3, r0
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80092fe:	f107 030c 	add.w	r3, r7, #12
 8009302:	4618      	mov	r0, r3
 8009304:	f7ff ffde 	bl	80092c4 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 8009308:	4603      	mov	r3, r0
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	601a      	str	r2, [r3, #0]
    }
 8009310:	bf00      	nop
 8009312:	3710      	adds	r7, #16
 8009314:	46bd      	mov	sp, r7
 8009316:	bd80      	pop	{r7, pc}

08009318 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800932e:	b580      	push	{r7, lr}
 8009330:	b084      	sub	sp, #16
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff ffed 	bl	8009318 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800933e:	4603      	mov	r3, r0
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009344:	6838      	ldr	r0, [r7, #0]
 8009346:	f7ff ffe7 	bl	8009318 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800934a:	4603      	mov	r3, r0
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8009352:	f107 030c 	add.w	r3, r7, #12
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff ffde 	bl	8009318 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800935c:	4603      	mov	r3, r0
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	601a      	str	r2, [r3, #0]
    }
 8009364:	bf00      	nop
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800936c:	b590      	push	{r4, r7, lr}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8009378:	68b8      	ldr	r0, [r7, #8]
 800937a:	f7ff fe1a 	bl	8008fb2 <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 800937e:	4604      	mov	r4, r0
 8009380:	68f8      	ldr	r0, [r7, #12]
 8009382:	f7ff f9ab 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 8009386:	4603      	mov	r3, r0
 8009388:	4619      	mov	r1, r3
 800938a:	2004      	movs	r0, #4
 800938c:	f7ff f99a 	bl	80086c4 <_ZnwjPv>
 8009390:	4602      	mov	r2, r0
 8009392:	6823      	ldr	r3, [r4, #0]
 8009394:	6013      	str	r3, [r2, #0]
 8009396:	bf00      	nop
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	bd90      	pop	{r4, r7, pc}

0800939e <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800939e:	b580      	push	{r7, lr}
 80093a0:	b084      	sub	sp, #16
 80093a2:	af00      	add	r7, sp, #0
 80093a4:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f97f 	bl	80096aa <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>
 80093ac:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f000 f987 	bl	80096c2 <_ZSt11__addressofIKZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EPT_RS5_>
 80093b4:	4603      	mov	r3, r0
 80093b6:	bf00      	nop
	}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <_ZSt10__invoke_rIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80093c0:	b5b0      	push	{r4, r5, r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f984 	bl	80096d8 <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>
 80093d0:	4604      	mov	r4, r0
 80093d2:	6838      	ldr	r0, [r7, #0]
 80093d4:	f7ff fd9b 	bl	8008f0e <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80093d8:	4603      	mov	r3, r0
 80093da:	461a      	mov	r2, r3
 80093dc:	4621      	mov	r1, r4
 80093de:	4628      	mov	r0, r5
 80093e0:	f000 f985 	bl	80096ee <_ZSt13__invoke_implIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 80093e4:	bf00      	nop
 80093e6:	3708      	adds	r7, #8
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bdb0      	pop	{r4, r5, r7, pc}

080093ec <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>:
      _M_access()
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7ff f971 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 80093fa:	4603      	mov	r3, r0
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8009404:	b5b0      	push	{r4, r5, r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	4613      	mov	r3, r2
 8009410:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	2b03      	cmp	r3, #3
 8009416:	d016      	beq.n	8009446 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8009418:	2b03      	cmp	r3, #3
 800941a:	dc19      	bgt.n	8009450 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800941c:	2b01      	cmp	r3, #1
 800941e:	d002      	beq.n	8009426 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8009420:	2b02      	cmp	r3, #2
 8009422:	d00a      	beq.n	800943a <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8009424:	e014      	b.n	8009450 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f7ff ffe0 	bl	80093ec <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
 800942c:	4604      	mov	r4, r0
 800942e:	68b8      	ldr	r0, [r7, #8]
 8009430:	f7ff ffb5 	bl	800939e <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 8009434:	4603      	mov	r3, r0
 8009436:	6023      	str	r3, [r4, #0]
	      break;
 8009438:	e00a      	b.n	8009450 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800943a:	462a      	mov	r2, r5
 800943c:	68b9      	ldr	r1, [r7, #8]
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f000 f96c 	bl	800971c <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8009444:	e004      	b.n	8009450 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8009446:	4621      	mov	r1, r4
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 f980 	bl	800974e <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800944e:	bf00      	nop
	  return false;
 8009450:	2300      	movs	r3, #0
	}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bdb0      	pop	{r4, r5, r7, pc}

0800945a <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4618      	mov	r0, r3
 8009466:	f7f8 f804 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 800946a:	4603      	mov	r3, r0
 800946c:	f083 0301 	eor.w	r3, r3, #1
 8009470:	b2db      	uxtb	r3, r3
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <_ZSt4swapIPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f7ff ffed 	bl	800947a <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80094a0:	4603      	mov	r3, r0
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80094a6:	6838      	ldr	r0, [r7, #0]
 80094a8:	f7ff ffe7 	bl	800947a <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80094ac:	4603      	mov	r3, r0
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80094b4:	f107 030c 	add.w	r3, r7, #12
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7ff ffde 	bl	800947a <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80094be:	4603      	mov	r3, r0
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	601a      	str	r2, [r3, #0]
    }
 80094c6:	bf00      	nop
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80094ce:	b590      	push	{r4, r7, lr}
 80094d0:	b085      	sub	sp, #20
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80094da:	68b8      	ldr	r0, [r7, #8]
 80094dc:	f7ff fe35 	bl	800914a <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 80094e0:	4604      	mov	r4, r0
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f7ff f8fa 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 80094e8:	4603      	mov	r3, r0
 80094ea:	4619      	mov	r1, r3
 80094ec:	2004      	movs	r0, #4
 80094ee:	f7ff f8e9 	bl	80086c4 <_ZnwjPv>
 80094f2:	4602      	mov	r2, r0
 80094f4:	6823      	ldr	r3, [r4, #0]
 80094f6:	6013      	str	r3, [r2, #0]
 80094f8:	bf00      	nop
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd90      	pop	{r4, r7, pc}

08009500 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f92c 	bl	8009766 <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>
 800950e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8009510:	68f8      	ldr	r0, [r7, #12]
 8009512:	f000 f934 	bl	800977e <_ZSt11__addressofIKZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EPT_RS5_>
 8009516:	4603      	mov	r3, r0
 8009518:	bf00      	nop
	}
 800951a:	4618      	mov	r0, r3
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <_ZSt10__invoke_rIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8009522:	b5b0      	push	{r4, r5, r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f000 f931 	bl	8009794 <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 8009532:	4604      	mov	r4, r0
 8009534:	6838      	ldr	r0, [r7, #0]
 8009536:	f7ff fdf2 	bl	800911e <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800953a:	4603      	mov	r3, r0
 800953c:	461a      	mov	r2, r3
 800953e:	4621      	mov	r1, r4
 8009540:	4628      	mov	r0, r5
 8009542:	f000 f932 	bl	80097aa <_ZSt13__invoke_implIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bdb0      	pop	{r4, r5, r7, pc}

0800954e <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>:
      _M_access()
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f7ff f8c0 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800955c:	4603      	mov	r3, r0
 800955e:	4618      	mov	r0, r3
 8009560:	3708      	adds	r7, #8
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}

08009566 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8009566:	b5b0      	push	{r4, r5, r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	60f8      	str	r0, [r7, #12]
 800956e:	60b9      	str	r1, [r7, #8]
 8009570:	4613      	mov	r3, r2
 8009572:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	2b03      	cmp	r3, #3
 8009578:	d016      	beq.n	80095a8 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800957a:	2b03      	cmp	r3, #3
 800957c:	dc19      	bgt.n	80095b2 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800957e:	2b01      	cmp	r3, #1
 8009580:	d002      	beq.n	8009588 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8009582:	2b02      	cmp	r3, #2
 8009584:	d00a      	beq.n	800959c <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8009586:	e014      	b.n	80095b2 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8009588:	68f8      	ldr	r0, [r7, #12]
 800958a:	f7ff ffe0 	bl	800954e <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
 800958e:	4604      	mov	r4, r0
 8009590:	68b8      	ldr	r0, [r7, #8]
 8009592:	f7ff ffb5 	bl	8009500 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 8009596:	4603      	mov	r3, r0
 8009598:	6023      	str	r3, [r4, #0]
	      break;
 800959a:	e00a      	b.n	80095b2 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800959c:	462a      	mov	r2, r5
 800959e:	68b9      	ldr	r1, [r7, #8]
 80095a0:	68f8      	ldr	r0, [r7, #12]
 80095a2:	f000 f919 	bl	80097d8 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 80095a6:	e004      	b.n	80095b2 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80095a8:	4621      	mov	r1, r4
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	f000 f92d 	bl	800980a <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80095b0:	bf00      	nop
	  return false;
 80095b2:	2300      	movs	r3, #0
	}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bdb0      	pop	{r4, r5, r7, pc}

080095bc <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80095bc:	b590      	push	{r4, r7, lr}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80095c8:	68b8      	ldr	r0, [r7, #8]
 80095ca:	f7ff fe1a 	bl	8009202 <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 80095ce:	4604      	mov	r4, r0
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7ff f883 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 80095d6:	4603      	mov	r3, r0
 80095d8:	4619      	mov	r1, r3
 80095da:	2004      	movs	r0, #4
 80095dc:	f7ff f872 	bl	80086c4 <_ZnwjPv>
 80095e0:	4602      	mov	r2, r0
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	6013      	str	r3, [r2, #0]
 80095e6:	bf00      	nop
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd90      	pop	{r4, r7, pc}

080095ee <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 f913 	bl	8009822 <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>
 80095fc:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80095fe:	68f8      	ldr	r0, [r7, #12]
 8009600:	f000 f91b 	bl	800983a <_ZSt11__addressofIKZN14FiducialSensorC4E14FiducialConfigEUlbE_EPT_RS4_>
 8009604:	4603      	mov	r3, r0
 8009606:	bf00      	nop
	}
 8009608:	4618      	mov	r0, r3
 800960a:	3710      	adds	r7, #16
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <_ZSt10__invoke_rIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8009610:	b5b0      	push	{r4, r5, r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f918 	bl	8009850 <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8009620:	4604      	mov	r4, r0
 8009622:	6838      	ldr	r0, [r7, #0]
 8009624:	f7ff fcaf 	bl	8008f86 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8009628:	4603      	mov	r3, r0
 800962a:	461a      	mov	r2, r3
 800962c:	4621      	mov	r1, r4
 800962e:	4628      	mov	r0, r5
 8009630:	f000 f919 	bl	8009866 <_ZSt13__invoke_implIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
    }
 8009634:	bf00      	nop
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bdb0      	pop	{r4, r5, r7, pc}

0800963c <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>:
      _M_access()
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f7ff f849 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800964a:	4603      	mov	r3, r0
 800964c:	4618      	mov	r0, r3
 800964e:	3708      	adds	r7, #8
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8009654:	b5b0      	push	{r4, r5, r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	4613      	mov	r3, r2
 8009660:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8009662:	79fb      	ldrb	r3, [r7, #7]
 8009664:	2b03      	cmp	r3, #3
 8009666:	d016      	beq.n	8009696 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8009668:	2b03      	cmp	r3, #3
 800966a:	dc19      	bgt.n	80096a0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 800966c:	2b01      	cmp	r3, #1
 800966e:	d002      	beq.n	8009676 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8009670:	2b02      	cmp	r3, #2
 8009672:	d00a      	beq.n	800968a <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8009674:	e014      	b.n	80096a0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f7ff ffe0 	bl	800963c <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
 800967c:	4604      	mov	r4, r0
 800967e:	68b8      	ldr	r0, [r7, #8]
 8009680:	f7ff ffb5 	bl	80095ee <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8009684:	4603      	mov	r3, r0
 8009686:	6023      	str	r3, [r4, #0]
	      break;
 8009688:	e00a      	b.n	80096a0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800968a:	462a      	mov	r2, r5
 800968c:	68b9      	ldr	r1, [r7, #8]
 800968e:	68f8      	ldr	r0, [r7, #12]
 8009690:	f000 f900 	bl	8009894 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8009694:	e004      	b.n	80096a0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8009696:	4621      	mov	r1, r4
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 f914 	bl	80098c6 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800969e:	bf00      	nop
	  return false;
 80096a0:	2300      	movs	r3, #0
	}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bdb0      	pop	{r4, r5, r7, pc}

080096aa <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>:
      _M_access() const
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff f81d 	bl	80086f2 <_ZNKSt9_Any_data9_M_accessEv>
 80096b8:	4603      	mov	r3, r0
 80096ba:	4618      	mov	r0, r3
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}

080096c2 <_ZSt11__addressofIKZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80096c2:	b480      	push	{r7}
 80096c4:	b083      	sub	sp, #12
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	4618      	mov	r0, r3
 80096ce:	370c      	adds	r7, #12
 80096d0:	46bd      	mov	sp, r7
 80096d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d6:	4770      	bx	lr

080096d8 <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <_ZSt13__invoke_implIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80096ee:	b590      	push	{r4, r7, lr}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	7338      	strb	r0, [r7, #12]
 80096f6:	60b9      	str	r1, [r7, #8]
 80096f8:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80096fa:	68b8      	ldr	r0, [r7, #8]
 80096fc:	f7ff ffec 	bl	80096d8 <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8009700:	4604      	mov	r4, r0
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f7ff fc03 	bl	8008f0e <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8009708:	4603      	mov	r3, r0
 800970a:	881b      	ldrh	r3, [r3, #0]
 800970c:	4619      	mov	r1, r3
 800970e:	4620      	mov	r0, r4
 8009710:	f7ff f895 	bl	800883e <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt>
 8009714:	bf00      	nop
 8009716:	3714      	adds	r7, #20
 8009718:	46bd      	mov	sp, r7
 800971a:	bd90      	pop	{r4, r7, pc}

0800971c <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800971c:	b590      	push	{r4, r7, lr}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8009728:	68b8      	ldr	r0, [r7, #8]
 800972a:	f7ff ffbe 	bl	80096aa <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>
 800972e:	4604      	mov	r4, r0
 8009730:	68f8      	ldr	r0, [r7, #12]
 8009732:	f7fe ffd3 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 8009736:	4603      	mov	r3, r0
 8009738:	4619      	mov	r1, r3
 800973a:	2004      	movs	r0, #4
 800973c:	f7fe ffc2 	bl	80086c4 <_ZnwjPv>
 8009740:	4602      	mov	r2, r0
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	6013      	str	r3, [r2, #0]
	}
 8009746:	bf00      	nop
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	bd90      	pop	{r4, r7, pc}

0800974e <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800974e:	b580      	push	{r7, lr}
 8009750:	b082      	sub	sp, #8
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f000 f8c0 	bl	80098de <_ZNSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
	}
 800975e:	bf00      	nop
 8009760:	3708      	adds	r7, #8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>:
      _M_access() const
 8009766:	b580      	push	{r7, lr}
 8009768:	b082      	sub	sp, #8
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7fe ffbf 	bl	80086f2 <_ZNKSt9_Any_data9_M_accessEv>
 8009774:	4603      	mov	r3, r0
 8009776:	4618      	mov	r0, r3
 8009778:	3708      	adds	r7, #8
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}

0800977e <_ZSt11__addressofIKZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800977e:	b480      	push	{r7}
 8009780:	b083      	sub	sp, #12
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4618      	mov	r0, r3
 800978a:	370c      	adds	r7, #12
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4618      	mov	r0, r3
 80097a0:	370c      	adds	r7, #12
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <_ZSt13__invoke_implIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80097aa:	b590      	push	{r4, r7, lr}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	7338      	strb	r0, [r7, #12]
 80097b2:	60b9      	str	r1, [r7, #8]
 80097b4:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80097b6:	68b8      	ldr	r0, [r7, #8]
 80097b8:	f7ff ffec 	bl	8009794 <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 80097bc:	4604      	mov	r4, r0
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7ff fcad 	bl	800911e <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80097c4:	4603      	mov	r3, r0
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4619      	mov	r1, r3
 80097ca:	4620      	mov	r0, r4
 80097cc:	f7ff f93e 	bl	8008a4c <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_>
 80097d0:	bf00      	nop
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd90      	pop	{r4, r7, pc}

080097d8 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80097d8:	b590      	push	{r4, r7, lr}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	60b9      	str	r1, [r7, #8]
 80097e2:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80097e4:	68b8      	ldr	r0, [r7, #8]
 80097e6:	f7ff ffbe 	bl	8009766 <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>
 80097ea:	4604      	mov	r4, r0
 80097ec:	68f8      	ldr	r0, [r7, #12]
 80097ee:	f7fe ff75 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 80097f2:	4603      	mov	r3, r0
 80097f4:	4619      	mov	r1, r3
 80097f6:	2004      	movs	r0, #4
 80097f8:	f7fe ff64 	bl	80086c4 <_ZnwjPv>
 80097fc:	4602      	mov	r2, r0
 80097fe:	6823      	ldr	r3, [r4, #0]
 8009800:	6013      	str	r3, [r2, #0]
	}
 8009802:	bf00      	nop
 8009804:	3714      	adds	r7, #20
 8009806:	46bd      	mov	sp, r7
 8009808:	bd90      	pop	{r4, r7, pc}

0800980a <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800980a:	b580      	push	{r7, lr}
 800980c:	b082      	sub	sp, #8
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f000 f86e 	bl	80098f6 <_ZNSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
	}
 800981a:	bf00      	nop
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>:
      _M_access() const
 8009822:	b580      	push	{r7, lr}
 8009824:	b082      	sub	sp, #8
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	f7fe ff61 	bl	80086f2 <_ZNKSt9_Any_data9_M_accessEv>
 8009830:	4603      	mov	r3, r0
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <_ZSt11__addressofIKZN14FiducialSensorC4E14FiducialConfigEUlbE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4618      	mov	r0, r3
 8009846:	370c      	adds	r7, #12
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <_ZSt13__invoke_implIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8009866:	b590      	push	{r4, r7, lr}
 8009868:	b085      	sub	sp, #20
 800986a:	af00      	add	r7, sp, #0
 800986c:	7338      	strb	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8009872:	68b8      	ldr	r0, [r7, #8]
 8009874:	f7ff ffec 	bl	8009850 <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 8009878:	4604      	mov	r4, r0
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f7ff fb83 	bl	8008f86 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8009880:	4603      	mov	r3, r0
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	4619      	mov	r1, r3
 8009886:	4620      	mov	r0, r4
 8009888:	f7ff f95b 	bl	8008b42 <_ZZN14FiducialSensorC4E14FiducialConfigENKUlbE_clEb>
 800988c:	bf00      	nop
 800988e:	3714      	adds	r7, #20
 8009890:	46bd      	mov	sp, r7
 8009892:	bd90      	pop	{r4, r7, pc}

08009894 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8009894:	b590      	push	{r4, r7, lr}
 8009896:	b085      	sub	sp, #20
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80098a0:	68b8      	ldr	r0, [r7, #8]
 80098a2:	f7ff ffbe 	bl	8009822 <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>
 80098a6:	4604      	mov	r4, r0
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f7fe ff17 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 80098ae:	4603      	mov	r3, r0
 80098b0:	4619      	mov	r1, r3
 80098b2:	2004      	movs	r0, #4
 80098b4:	f7fe ff06 	bl	80086c4 <_ZnwjPv>
 80098b8:	4602      	mov	r2, r0
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	6013      	str	r3, [r2, #0]
	}
 80098be:	bf00      	nop
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd90      	pop	{r4, r7, pc}

080098c6 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80098c6:	b580      	push	{r7, lr}
 80098c8:	b082      	sub	sp, #8
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 f81c 	bl	800990e <_ZNSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
	}
 80098d6:	bf00      	nop
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <_ZNSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>:
      _M_access()
 80098de:	b580      	push	{r7, lr}
 80098e0:	b082      	sub	sp, #8
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7fe fef8 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 80098ec:	4603      	mov	r3, r0
 80098ee:	4618      	mov	r0, r3
 80098f0:	3708      	adds	r7, #8
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <_ZNSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>:
      _M_access()
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b082      	sub	sp, #8
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f7fe feec 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 8009904:	4603      	mov	r3, r0
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <_ZNSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>:
      _M_access()
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f7fe fee0 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800991c:	4603      	mov	r3, r0
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

#include <ICM20602.hpp>
#include "FreeRTOS.h"
#include "cmsis_os2.h"

ICM20602::ICM20602(const config_t& cfg, SPI_HandleTypeDef* hspi, GPIO_TypeDef* csPort, uint16_t csPin) : m_cfg{cfg}, m_hspi{hspi}, m_csPort{csPort}, m_csPin{csPin} {
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	607a      	str	r2, [r7, #4]
 8009934:	603b      	str	r3, [r7, #0]
 8009936:	4a2c      	ldr	r2, [pc, #176]	; (80099e8 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0xc0>)
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	68ba      	ldr	r2, [r7, #8]
 8009940:	3304      	adds	r3, #4
 8009942:	6810      	ldr	r0, [r2, #0]
 8009944:	6018      	str	r0, [r3, #0]
 8009946:	7912      	ldrb	r2, [r2, #4]
 8009948:	711a      	strb	r2, [r3, #4]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	60da      	str	r2, [r3, #12]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	611a      	str	r2, [r3, #16]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	8b3a      	ldrh	r2, [r7, #24]
 800995a:	829a      	strh	r2, [r3, #20]
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	759a      	strb	r2, [r3, #22]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	f04f 0200 	mov.w	r2, #0
 8009968:	629a      	str	r2, [r3, #40]	; 0x28
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f04f 0200 	mov.w	r2, #0
 8009970:	62da      	str	r2, [r3, #44]	; 0x2c
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	631a      	str	r2, [r3, #48]	; 0x30
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f04f 0200 	mov.w	r2, #0
 8009980:	635a      	str	r2, [r3, #52]	; 0x34
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f04f 0200 	mov.w	r2, #0
 8009988:	639a      	str	r2, [r3, #56]	; 0x38
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	63da      	str	r2, [r3, #60]	; 0x3c
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	f04f 0200 	mov.w	r2, #0
 8009998:	641a      	str	r2, [r3, #64]	; 0x40
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	645a      	str	r2, [r3, #68]	; 0x44
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	f04f 0200 	mov.w	r2, #0
 80099a8:	649a      	str	r2, [r3, #72]	; 0x48
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	f04f 0200 	mov.w	r2, #0
 80099b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f04f 0200 	mov.w	r2, #0
 80099b8:	651a      	str	r2, [r3, #80]	; 0x50
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f04f 0200 	mov.w	r2, #0
 80099c0:	655a      	str	r2, [r3, #84]	; 0x54
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f04f 0200 	mov.w	r2, #0
 80099c8:	659a      	str	r2, [r3, #88]	; 0x58
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f04f 0200 	mov.w	r2, #0
 80099d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f04f 0200 	mov.w	r2, #0
 80099d8:	661a      	str	r2, [r3, #96]	; 0x60

}
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	0801da88 	.word	0x0801da88

080099ec <_ZN8ICM20602D1Ev>:

ICM20602::~ICM20602() {
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	4a04      	ldr	r2, [pc, #16]	; (8009a08 <_ZN8ICM20602D1Ev+0x1c>)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	601a      	str	r2, [r3, #0]

}
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4618      	mov	r0, r3
 80099fe:	370c      	adds	r7, #12
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	0801da88 	.word	0x0801da88

08009a0c <_ZN8ICM20602D0Ev>:
ICM20602::~ICM20602() {
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
}
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f7ff ffe9 	bl	80099ec <_ZN8ICM20602D1Ev>
 8009a1a:	2164      	movs	r1, #100	; 0x64
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f010 fd95 	bl	801a54c <_ZdlPvj>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4618      	mov	r0, r3
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <_ZN8ICM206028csEnableEv>:

inline void ICM20602::csEnable() {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_csPort, m_csPin, GPIO_PIN_RESET);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6918      	ldr	r0, [r3, #16]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	8a9b      	ldrh	r3, [r3, #20]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	4619      	mov	r1, r3
 8009a40:	f007 fcce 	bl	80113e0 <HAL_GPIO_WritePin>
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <_ZN8ICM206029csDisableEv>:
inline void ICM20602::csDisable() {
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_csPort, m_csPin, GPIO_PIN_SET);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6918      	ldr	r0, [r3, #16]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	8a9b      	ldrh	r3, [r3, #20]
 8009a5c:	2201      	movs	r2, #1
 8009a5e:	4619      	mov	r1, r3
 8009a60:	f007 fcbe 	bl	80113e0 <HAL_GPIO_WritePin>
}
 8009a64:	bf00      	nop
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <_ZN8ICM206028writeRegEhh>:

void ICM20602::writeReg(uint8_t reg, uint8_t val) {
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	460b      	mov	r3, r1
 8009a76:	70fb      	strb	r3, [r7, #3]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	70bb      	strb	r3, [r7, #2]
	csEnable();
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	f7ff ffd5 	bl	8009a2c <_ZN8ICM206028csEnableEv>
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68d8      	ldr	r0, [r3, #12]
 8009a86:	1cf9      	adds	r1, r7, #3
 8009a88:	230a      	movs	r3, #10
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f008 fbef 	bl	801226e <HAL_SPI_Transmit>
	HAL_SPI_Transmit(m_hspi, &val, 1, 10);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68d8      	ldr	r0, [r3, #12]
 8009a94:	1cb9      	adds	r1, r7, #2
 8009a96:	230a      	movs	r3, #10
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f008 fbe8 	bl	801226e <HAL_SPI_Transmit>
	csDisable();
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f7ff ffd4 	bl	8009a4c <_ZN8ICM206029csDisableEv>
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <_ZN8ICM206027readRegEh>:

uint8_t ICM20602::readReg(uint8_t reg) {
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	70fb      	strb	r3, [r7, #3]
	reg |= 128;		// Set read bit
 8009ab8:	78fb      	ldrb	r3, [r7, #3]
 8009aba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009abe:	b2db      	uxtb	r3, r3
 8009ac0:	70fb      	strb	r3, [r7, #3]
	uint8_t val = 0;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	73fb      	strb	r3, [r7, #15]
	csEnable();
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7ff ffb0 	bl	8009a2c <_ZN8ICM206028csEnableEv>
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68d8      	ldr	r0, [r3, #12]
 8009ad0:	1cf9      	adds	r1, r7, #3
 8009ad2:	230a      	movs	r3, #10
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f008 fbca 	bl	801226e <HAL_SPI_Transmit>
	HAL_SPI_Receive(m_hspi, &val, 1, 10);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	68d8      	ldr	r0, [r3, #12]
 8009ade:	f107 010f 	add.w	r1, r7, #15
 8009ae2:	230a      	movs	r3, #10
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f008 fcfe 	bl	80124e6 <HAL_SPI_Receive>
	csDisable();
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f7ff ffae 	bl	8009a4c <_ZN8ICM206029csDisableEv>
	return val;
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <_ZN8ICM206025startEv>:

bool ICM20602::start() {
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]

	writeReg(REG_I2C_IF, 0x40);
 8009b04:	2240      	movs	r2, #64	; 0x40
 8009b06:	2170      	movs	r1, #112	; 0x70
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7ff ffaf 	bl	8009a6c <_ZN8ICM206028writeRegEhh>

	// Reset device and wait
	writeReg(REG_PWR_MGMT_1, 0x80);
 8009b0e:	2280      	movs	r2, #128	; 0x80
 8009b10:	216b      	movs	r1, #107	; 0x6b
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff ffaa 	bl	8009a6c <_ZN8ICM206028writeRegEhh>
	osDelay(pdMS_TO_TICKS(10));
 8009b18:	200a      	movs	r0, #10
 8009b1a:	f00c faa9 	bl	8016070 <osDelay>

	// Check if connection is working by reading the WHO_AM_I register
	uint8_t whoAmI = readReg(REG_WHO_AM_I);
 8009b1e:	2175      	movs	r1, #117	; 0x75
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7ff ffc3 	bl	8009aac <_ZN8ICM206027readRegEh>
 8009b26:	4603      	mov	r3, r0
 8009b28:	73fb      	strb	r3, [r7, #15]
	if(whoAmI != 0x12) {
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
 8009b2c:	2b12      	cmp	r3, #18
 8009b2e:	d001      	beq.n	8009b34 <_ZN8ICM206025startEv+0x38>
		return false;
 8009b30:	2300      	movs	r3, #0
 8009b32:	e0ce      	b.n	8009cd2 <_ZN8ICM206025startEv+0x1d6>
	}

	// Set internal clock to PLL
	writeReg(REG_PWR_MGMT_1, 0x01);
 8009b34:	2201      	movs	r2, #1
 8009b36:	216b      	movs	r1, #107	; 0x6b
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f7ff ff97 	bl	8009a6c <_ZN8ICM206028writeRegEhh>

	// Accel and gyro standby
	writeReg(REG_PWR_MGMT_2, 0x3F);
 8009b3e:	223f      	movs	r2, #63	; 0x3f
 8009b40:	216c      	movs	r1, #108	; 0x6c
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff ff92 	bl	8009a6c <_ZN8ICM206028writeRegEhh>

	// Disable FIFO
	writeReg(REG_USER_CTRL, 0x00);
 8009b48:	2200      	movs	r2, #0
 8009b4a:	216a      	movs	r1, #106	; 0x6a
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ff8d 	bl	8009a6c <_ZN8ICM206028writeRegEhh>

	// Disable I2C interface
	writeReg(REG_I2C_IF, 0x40);
 8009b52:	2240      	movs	r2, #64	; 0x40
 8009b54:	2170      	movs	r1, #112	; 0x70
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7ff ff88 	bl	8009a6c <_ZN8ICM206028writeRegEhh>

	// Enable and config acceleration
	if(m_cfg.accelDlpf == ACCEL_DLPF_BYPASS_1046_HZ) {
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	791b      	ldrb	r3, [r3, #4]
 8009b60:	2b08      	cmp	r3, #8
 8009b62:	d105      	bne.n	8009b70 <_ZN8ICM206025startEv+0x74>
		writeReg(REG_ACCEL_CONFIG_2, (1 << 3));
 8009b64:	2208      	movs	r2, #8
 8009b66:	211d      	movs	r1, #29
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f7ff ff7f 	bl	8009a6c <_ZN8ICM206028writeRegEhh>
 8009b6e:	e006      	b.n	8009b7e <_ZN8ICM206025startEv+0x82>
	} else {
		writeReg(REG_ACCEL_CONFIG_2, m_cfg.accelDlpf);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	791b      	ldrb	r3, [r3, #4]
 8009b74:	461a      	mov	r2, r3
 8009b76:	211d      	movs	r1, #29
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7ff ff77 	bl	8009a6c <_ZN8ICM206028writeRegEhh>
	}
	writeReg(REG_ACCEL_CONFIG, m_cfg.accelFs << 3);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	795b      	ldrb	r3, [r3, #5]
 8009b82:	00db      	lsls	r3, r3, #3
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	461a      	mov	r2, r3
 8009b88:	211c      	movs	r1, #28
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f7ff ff6e 	bl	8009a6c <_ZN8ICM206028writeRegEhh>
	if(m_cfg.accelFs == ACCEL_FS_2G) {
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	795b      	ldrb	r3, [r3, #5]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <_ZN8ICM206025startEv+0xa6>
		m_accelSensitivity = 16384.0f;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8009b9e:	629a      	str	r2, [r3, #40]	; 0x28
 8009ba0:	e01c      	b.n	8009bdc <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_4G) {
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	795b      	ldrb	r3, [r3, #5]
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d104      	bne.n	8009bb4 <_ZN8ICM206025startEv+0xb8>
		m_accelSensitivity = 8192.0f;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8009bb0:	629a      	str	r2, [r3, #40]	; 0x28
 8009bb2:	e013      	b.n	8009bdc <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_8G) {
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	795b      	ldrb	r3, [r3, #5]
 8009bb8:	2b02      	cmp	r3, #2
 8009bba:	d104      	bne.n	8009bc6 <_ZN8ICM206025startEv+0xca>
		m_accelSensitivity = 4096.0f;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8009bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8009bc4:	e00a      	b.n	8009bdc <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_16G) {
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	795b      	ldrb	r3, [r3, #5]
 8009bca:	2b03      	cmp	r3, #3
 8009bcc:	d104      	bne.n	8009bd8 <_ZN8ICM206025startEv+0xdc>
		m_accelSensitivity = 2048.0f;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8009bd4:	629a      	str	r2, [r3, #40]	; 0x28
 8009bd6:	e001      	b.n	8009bdc <_ZN8ICM206025startEv+0xe0>
	} else {
		return false;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e07a      	b.n	8009cd2 <_ZN8ICM206025startEv+0x1d6>
	}

	// Enable and config gyro
	if(m_cfg.gyroDlpf == GYRO_DLPF_BYPASS_3281_HZ) {
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	799b      	ldrb	r3, [r3, #6]
 8009be0:	2b08      	cmp	r3, #8
 8009be2:	d112      	bne.n	8009c0a <_ZN8ICM206025startEv+0x10e>
		// Bypass dpf and set dps
		writeReg(REG_CONFIG, 0x00);
 8009be4:	2200      	movs	r2, #0
 8009be6:	211a      	movs	r1, #26
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7ff ff3f 	bl	8009a6c <_ZN8ICM206028writeRegEhh>

		// See table page 37 of datasheet
		writeReg(REG_GYRO_CONFIG, (m_cfg.gyroDps << 3) | 0x02);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	79db      	ldrb	r3, [r3, #7]
 8009bf2:	00db      	lsls	r3, r3, #3
 8009bf4:	b25b      	sxtb	r3, r3
 8009bf6:	f043 0302 	orr.w	r3, r3, #2
 8009bfa:	b25b      	sxtb	r3, r3
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	461a      	mov	r2, r3
 8009c00:	211b      	movs	r1, #27
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff ff32 	bl	8009a6c <_ZN8ICM206028writeRegEhh>
 8009c08:	e026      	b.n	8009c58 <_ZN8ICM206025startEv+0x15c>
	} else if(m_cfg.gyroDlpf == GYRO_DLPF_BYPASS_8173_HZ) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	799b      	ldrb	r3, [r3, #6]
 8009c0e:	2b09      	cmp	r3, #9
 8009c10:	d112      	bne.n	8009c38 <_ZN8ICM206025startEv+0x13c>
		// Bypass dpf and set dps
		writeReg(REG_CONFIG, 0x00);
 8009c12:	2200      	movs	r2, #0
 8009c14:	211a      	movs	r1, #26
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7ff ff28 	bl	8009a6c <_ZN8ICM206028writeRegEhh>

		// See table page 37 of datasheet
		writeReg(REG_GYRO_CONFIG, (m_cfg.gyroDps << 3) | 0x01);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	79db      	ldrb	r3, [r3, #7]
 8009c20:	00db      	lsls	r3, r3, #3
 8009c22:	b25b      	sxtb	r3, r3
 8009c24:	f043 0301 	orr.w	r3, r3, #1
 8009c28:	b25b      	sxtb	r3, r3
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	211b      	movs	r1, #27
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f7ff ff1b 	bl	8009a6c <_ZN8ICM206028writeRegEhh>
 8009c36:	e00f      	b.n	8009c58 <_ZN8ICM206025startEv+0x15c>
	} else {
		// Configure dpf and dps
		writeReg(REG_CONFIG, m_cfg.gyroDlpf);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	799b      	ldrb	r3, [r3, #6]
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	211a      	movs	r1, #26
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f7ff ff13 	bl	8009a6c <_ZN8ICM206028writeRegEhh>

		writeReg(REG_GYRO_CONFIG, m_cfg.gyroDps << 3);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	79db      	ldrb	r3, [r3, #7]
 8009c4a:	00db      	lsls	r3, r3, #3
 8009c4c:	b2db      	uxtb	r3, r3
 8009c4e:	461a      	mov	r2, r3
 8009c50:	211b      	movs	r1, #27
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff ff0a 	bl	8009a6c <_ZN8ICM206028writeRegEhh>
	}
	if(m_cfg.gyroDps == GYRO_RANGE_250_DPS) {
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	79db      	ldrb	r3, [r3, #7]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d103      	bne.n	8009c68 <_ZN8ICM206025startEv+0x16c>
		m_gyroSensitivity = 131.0f;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a1e      	ldr	r2, [pc, #120]	; (8009cdc <_ZN8ICM206025startEv+0x1e0>)
 8009c64:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c66:	e019      	b.n	8009c9c <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_500_DPS) {
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	79db      	ldrb	r3, [r3, #7]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d103      	bne.n	8009c78 <_ZN8ICM206025startEv+0x17c>
		m_gyroSensitivity = 65.5f;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a1b      	ldr	r2, [pc, #108]	; (8009ce0 <_ZN8ICM206025startEv+0x1e4>)
 8009c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c76:	e011      	b.n	8009c9c <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_1000_DPS) {
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	79db      	ldrb	r3, [r3, #7]
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d103      	bne.n	8009c88 <_ZN8ICM206025startEv+0x18c>
		m_gyroSensitivity = 32.8f;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a18      	ldr	r2, [pc, #96]	; (8009ce4 <_ZN8ICM206025startEv+0x1e8>)
 8009c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c86:	e009      	b.n	8009c9c <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_2000_DPS) {
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	79db      	ldrb	r3, [r3, #7]
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d103      	bne.n	8009c98 <_ZN8ICM206025startEv+0x19c>
		m_gyroSensitivity = 16.4f;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a15      	ldr	r2, [pc, #84]	; (8009ce8 <_ZN8ICM206025startEv+0x1ec>)
 8009c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c96:	e001      	b.n	8009c9c <_ZN8ICM206025startEv+0x1a0>
	} else {
		return false;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	e01a      	b.n	8009cd2 <_ZN8ICM206025startEv+0x1d6>
	}

	// We will not enable the FIFO

	// Configure sample rate divider
	writeReg(REG_SMPLRT_DIV, m_cfg.sampleRateDiv);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	7a1b      	ldrb	r3, [r3, #8]
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	2119      	movs	r1, #25
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f7ff fee1 	bl	8009a6c <_ZN8ICM206028writeRegEhh>

	// Enable both Accel and Gyro
	writeReg(REG_PWR_MGMT_2, 0x00);
 8009caa:	2200      	movs	r2, #0
 8009cac:	216c      	movs	r1, #108	; 0x6c
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7ff fedc 	bl	8009a6c <_ZN8ICM206028writeRegEhh>

	// Verify that connection is still working
	whoAmI = readReg(REG_WHO_AM_I);
 8009cb4:	2175      	movs	r1, #117	; 0x75
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7ff fef8 	bl	8009aac <_ZN8ICM206027readRegEh>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]
	if(whoAmI != 0x12) {
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	2b12      	cmp	r3, #18
 8009cc4:	d001      	beq.n	8009cca <_ZN8ICM206025startEv+0x1ce>
		return false;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	e003      	b.n	8009cd2 <_ZN8ICM206025startEv+0x1d6>
	}

	m_initDone = true;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2201      	movs	r2, #1
 8009cce:	759a      	strb	r2, [r3, #22]
	return true;
 8009cd0:	2301      	movs	r3, #1
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	43030000 	.word	0x43030000
 8009ce0:	42830000 	.word	0x42830000
 8009ce4:	42033333 	.word	0x42033333
 8009ce8:	41833333 	.word	0x41833333

08009cec <_ZN8ICM206024readEv>:


bool ICM20602::read() {
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
	if(!m_initDone) {
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	7d9b      	ldrb	r3, [r3, #22]
 8009cf8:	f083 0301 	eor.w	r3, r3, #1
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <_ZN8ICM206024readEv+0x1a>
		return false;
 8009d02:	2300      	movs	r3, #0
 8009d04:	e0dc      	b.n	8009ec0 <_ZN8ICM206024readEv+0x1d4>
	}

	// Read seven 16-bit data values, so 14 bytes: ACCEL_X ACCEL_Y ACCEL_Z TEMP GYRO_X GYRO_Y GYRO_Z
	csEnable();
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff fe90 	bl	8009a2c <_ZN8ICM206028csEnableEv>
	uint8_t reg = REG_ACCEL_XOUT_H | 128;
 8009d0c:	23bb      	movs	r3, #187	; 0xbb
 8009d0e:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68d8      	ldr	r0, [r3, #12]
 8009d14:	f107 0109 	add.w	r1, r7, #9
 8009d18:	230a      	movs	r3, #10
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f008 faa7 	bl	801226e <HAL_SPI_Transmit>
	HAL_SPI_Receive(m_hspi, m_data, 14, 10);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68d8      	ldr	r0, [r3, #12]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f103 0117 	add.w	r1, r3, #23
 8009d2a:	230a      	movs	r3, #10
 8009d2c:	220e      	movs	r2, #14
 8009d2e:	f008 fbda 	bl	80124e6 <HAL_SPI_Receive>
	csDisable();
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff fe8a 	bl	8009a4c <_ZN8ICM206029csDisableEv>

	// Get acceleration
	int16_t accelXRaw = (m_data[0] << 8) + m_data[1];
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	7ddb      	ldrb	r3, [r3, #23]
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	021b      	lsls	r3, r3, #8
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	7e1b      	ldrb	r3, [r3, #24]
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	4413      	add	r3, r2
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	82fb      	strh	r3, [r7, #22]
	int16_t accelYRaw = (m_data[2] << 8) + m_data[3];
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	7e5b      	ldrb	r3, [r3, #25]
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	021b      	lsls	r3, r3, #8
 8009d56:	b29a      	uxth	r2, r3
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	7e9b      	ldrb	r3, [r3, #26]
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	4413      	add	r3, r2
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	82bb      	strh	r3, [r7, #20]
	int16_t accelZRaw = (m_data[4] << 8) + m_data[5];
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	7edb      	ldrb	r3, [r3, #27]
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	021b      	lsls	r3, r3, #8
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	7f1b      	ldrb	r3, [r3, #28]
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	4413      	add	r3, r2
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	827b      	strh	r3, [r7, #18]
	m_accelX = accelXRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 8009d7a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8009d8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d90:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009ec8 <_ZN8ICM206024readEv+0x1dc>
 8009d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	m_accelY = accelYRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 8009d9e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009da2:	ee07 3a90 	vmov	s15, r3
 8009da6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8009db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009db4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8009ec8 <_ZN8ICM206024readEv+0x1dc>
 8009db8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	m_accelZ = accelZRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 8009dc2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009dc6:	ee07 3a90 	vmov	s15, r3
 8009dca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8009dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dd8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8009ec8 <_ZN8ICM206024readEv+0x1dc>
 8009ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	// Internal temperature sensor
	int16_t temperatureRaw = (m_data[6] << 8) + m_data[7];
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	7f5b      	ldrb	r3, [r3, #29]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	021b      	lsls	r3, r3, #8
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	7f9b      	ldrb	r3, [r3, #30]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	4413      	add	r3, r2
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	823b      	strh	r3, [r7, #16]
	m_temperature = temperatureRaw / 326.8f + 25.0f;
 8009dfc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009e00:	ee07 3a90 	vmov	s15, r3
 8009e04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e08:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009ecc <_ZN8ICM206024readEv+0x1e0>
 8009e0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009e10:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8009e14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	// Get gyroscope
	int16_t gyroXRaw = (m_data[8] << 8) + m_data[9];
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	7fdb      	ldrb	r3, [r3, #31]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	021b      	lsls	r3, r3, #8
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	4413      	add	r3, r2
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	81fb      	strh	r3, [r7, #14]
	int16_t gyroYRaw = (m_data[10] << 8) + m_data[11];
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	021b      	lsls	r3, r3, #8
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	4413      	add	r3, r2
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	81bb      	strh	r3, [r7, #12]
	int16_t gyroZRaw = (m_data[12] << 8) + m_data[13];
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	021b      	lsls	r3, r3, #8
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	4413      	add	r3, r2
 8009e66:	b29b      	uxth	r3, r3
 8009e68:	817b      	strh	r3, [r7, #10]
	m_gyroX = gyroXRaw / m_gyroSensitivity;
 8009e6a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009e6e:	ee07 3a90 	vmov	s15, r3
 8009e72:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009e7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	m_gyroY = gyroYRaw / m_gyroSensitivity;
 8009e86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009e8a:	ee07 3a90 	vmov	s15, r3
 8009e8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009e98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	m_gyroZ = gyroZRaw / m_gyroSensitivity;
 8009ea2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009ea6:	ee07 3a90 	vmov	s15, r3
 8009eaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	return true;
 8009ebe:	2301      	movs	r3, #1
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3718      	adds	r7, #24
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	411cf5c3 	.word	0x411cf5c3
 8009ecc:	43a36666 	.word	0x43a36666

08009ed0 <_ZN8ICM206029getAccelXEv>:

	/**
	 * Get acceleration in X direction of the IMU in m/s^2.
	 * @return Acceleration in X direction of the IMU in m/s^2.
	 */
	inline float getAccelX() { return m_accelX - m_accelXOffset; }
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8009eec:	370c      	adds	r7, #12
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <_ZN8ICM206029getAccelYEv>:

	/**
	 * Get acceleration in Y direction of the IMU in m/s^2.
	 * @return Acceleration in Y direction of the IMU in m/s^2.
	 */
	inline float getAccelY() { return m_accelY - m_accelYOffset; }
 8009ef6:	b480      	push	{r7}
 8009ef8:	b083      	sub	sp, #12
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009f0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <_ZN8ICM206029getAccelZEv>:

	/**
	 * Get acceleration in Z direction of the IMU in m/s^2.
	 * @return Acceleration in Z direction of the IMU in m/s^2.
	 */
	inline float getAccelZ() { return m_accelZ - m_accelZOffset; }
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009f30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f34:	eeb0 0a67 	vmov.f32	s0, s15
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <_ZN8ICM2060214getTemperatureEv>:

	/**
	 * Get the internal temperature of the IMU in °C.
	 * @return Internal temperature in °C.
	 */
	inline float getTemperature() { return m_temperature; }
 8009f42:	b480      	push	{r7}
 8009f44:	b083      	sub	sp, #12
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f4e:	ee07 3a90 	vmov	s15, r3
 8009f52:	eeb0 0a67 	vmov.f32	s0, s15
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <_ZN8ICM206028getGyroXEv>:

	/**
	 * Get rotation around X axis of the IMU in °/s.
	 * @return Rotation around X axis in °/s.
	 */
	inline float getGyroX() { return m_gyroX - m_gyroXOffset; }
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009f74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f78:	eeb0 0a67 	vmov.f32	s0, s15
 8009f7c:	370c      	adds	r7, #12
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr

08009f86 <_ZN8ICM206028getGyroYEv>:

	/**
	 * Get rotation around Y axis of the IMU in °/s.
	 * @return Rotation around Y axis in °/s.
	 */
	inline float getGyroY() { return m_gyroY - m_gyroYOffset; }
 8009f86:	b480      	push	{r7}
 8009f88:	b083      	sub	sp, #12
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8009f9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f9e:	eeb0 0a67 	vmov.f32	s0, s15
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <_ZN8ICM206028getGyroZEv>:

	/**
	 * Get rotation around Z axis of the IMU in °/s.
	 * @return Rotation around Z axis in °/s.
	 */
	inline float getGyroZ() { return m_gyroZ - m_gyroZOffset; }
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8009fc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8009fc8:	370c      	adds	r7, #12
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd0:	4770      	bx	lr
	...

08009fd4 <_ZN9ImuMasterC1Ev>:
#include "cmsis_os2.h"
#include "canzero.hpp"
#include "estdio.hpp"


ImuMaster::ImuMaster() {
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af02      	add	r7, sp, #8
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	4a33      	ldr	r2, [pc, #204]	; (800a0ac <_ZN9ImuMasterC1Ev+0xd8>)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a32      	ldr	r2, [pc, #200]	; (800a0b0 <_ZN9ImuMasterC1Ev+0xdc>)
 8009fe6:	3304      	adds	r3, #4
 8009fe8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fec:	6018      	str	r0, [r3, #0]
 8009fee:	3304      	adds	r3, #4
 8009ff0:	7019      	strb	r1, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f103 000c 	add.w	r0, r3, #12
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	1d19      	adds	r1, r3, #4
 8009ffc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	4b2c      	ldr	r3, [pc, #176]	; (800a0b4 <_ZN9ImuMasterC1Ev+0xe0>)
 800a004:	4a2c      	ldr	r2, [pc, #176]	; (800a0b8 <_ZN9ImuMasterC1Ev+0xe4>)
 800a006:	f7ff fc8f 	bl	8009928 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	1d19      	adds	r1, r3, #4
 800a014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	4b26      	ldr	r3, [pc, #152]	; (800a0b4 <_ZN9ImuMasterC1Ev+0xe0>)
 800a01c:	4a26      	ldr	r2, [pc, #152]	; (800a0b8 <_ZN9ImuMasterC1Ev+0xe4>)
 800a01e:	f7ff fc83 	bl	8009928 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	1d19      	adds	r1, r3, #4
 800a02c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a030:	9300      	str	r3, [sp, #0]
 800a032:	4b20      	ldr	r3, [pc, #128]	; (800a0b4 <_ZN9ImuMasterC1Ev+0xe0>)
 800a034:	4a20      	ldr	r2, [pc, #128]	; (800a0b8 <_ZN9ImuMasterC1Ev+0xe4>)
 800a036:	f7ff fc77 	bl	8009928 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f04f 0200 	mov.w	r2, #0
 800a040:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f04f 0200 	mov.w	r2, #0
 800a04a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f04f 0200 	mov.w	r2, #0
 800a054:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f04f 0200 	mov.w	r2, #0
 800a05e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f04f 0200 	mov.w	r2, #0
 800a068:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f04f 0200 	mov.w	r2, #0
 800a072:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f04f 0200 	mov.w	r2, #0
 800a07c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	// TODO Auto-generated constructor stub

}
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3708      	adds	r7, #8
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	0801da98 	.word	0x0801da98
 800a0b0:	0801d864 	.word	0x0801d864
 800a0b4:	40020400 	.word	0x40020400
 800a0b8:	200011d0 	.word	0x200011d0

0800a0bc <_ZN9ImuMasterD1Ev>:

ImuMaster::~ImuMaster() {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	4a0b      	ldr	r2, [pc, #44]	; (800a0f4 <_ZN9ImuMasterD1Ev+0x38>)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	33d4      	adds	r3, #212	; 0xd4
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff fc8c 	bl	80099ec <_ZN8ICM20602D1Ev>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3370      	adds	r3, #112	; 0x70
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7ff fc87 	bl	80099ec <_ZN8ICM20602D1Ev>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	330c      	adds	r3, #12
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7ff fc82 	bl	80099ec <_ZN8ICM20602D1Ev>
	// TODO Auto-generated destructor stub
}
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3708      	adds	r7, #8
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	0801da98 	.word	0x0801da98

0800a0f8 <_ZN9ImuMasterD0Ev>:
ImuMaster::~ImuMaster() {
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
}
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f7ff ffdb 	bl	800a0bc <_ZN9ImuMasterD1Ev>
 800a106:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f010 fa1e 	bl	801a54c <_ZdlPvj>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4618      	mov	r0, r3
 800a114:	3708      	adds	r7, #8
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}
	...

0800a11c <_ZN9ImuMaster5startEv>:

bool ImuMaster::start() {
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
	// Init all CS
	HAL_GPIO_WritePin(CS_IMU1_GPIO_Port, CS_IMU1_Pin, GPIO_PIN_SET);
 800a124:	2201      	movs	r2, #1
 800a126:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a12a:	4839      	ldr	r0, [pc, #228]	; (800a210 <_ZN9ImuMaster5startEv+0xf4>)
 800a12c:	f007 f958 	bl	80113e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_IMU2_GPIO_Port, CS_IMU2_Pin, GPIO_PIN_SET);
 800a130:	2201      	movs	r2, #1
 800a132:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a136:	4836      	ldr	r0, [pc, #216]	; (800a210 <_ZN9ImuMaster5startEv+0xf4>)
 800a138:	f007 f952 	bl	80113e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_IMU3_GPIO_Port, CS_IMU3_Pin, GPIO_PIN_SET);
 800a13c:	2201      	movs	r2, #1
 800a13e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a142:	4833      	ldr	r0, [pc, #204]	; (800a210 <_ZN9ImuMaster5startEv+0xf4>)
 800a144:	f007 f94c 	bl	80113e0 <HAL_GPIO_WritePin>

	// Wait until IMUs should be ready after powerup
	osDelay(pdMS_TO_TICKS(10));
 800a148:	200a      	movs	r0, #10
 800a14a:	f00b ff91 	bl	8016070 <osDelay>

	// Now init all three IMUs
	m_imu1Ok = m_imu1.start();
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	330c      	adds	r3, #12
 800a152:	4618      	mov	r0, r3
 800a154:	f7ff fcd2 	bl	8009afc <_ZN8ICM206025startEv>
 800a158:	4603      	mov	r3, r0
 800a15a:	461a      	mov	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	m_imu2Ok = m_imu2.start();
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	3370      	adds	r3, #112	; 0x70
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff fcc8 	bl	8009afc <_ZN8ICM206025startEv>
 800a16c:	4603      	mov	r3, r0
 800a16e:	461a      	mov	r2, r3
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	m_imu3Ok = m_imu3.start();
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	33d4      	adds	r3, #212	; 0xd4
 800a17a:	4618      	mov	r0, r3
 800a17c:	f7ff fcbe 	bl	8009afc <_ZN8ICM206025startEv>
 800a180:	4603      	mov	r3, r0
 800a182:	461a      	mov	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

	// Get the number of IMUs
	if(m_imu1Ok) {
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a190:	2b00      	cmp	r3, #0
 800a192:	d006      	beq.n	800a1a2 <_ZN9ImuMaster5startEv+0x86>
		m_numOfImusOnline++;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	if(m_imu2Ok) {
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d006      	beq.n	800a1ba <_ZN9ImuMaster5startEv+0x9e>
		m_numOfImusOnline++;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	if(m_imu3Ok) {
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d006      	beq.n	800a1d2 <_ZN9ImuMaster5startEv+0xb6>
		m_numOfImusOnline++;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a1ca:	1c5a      	adds	r2, r3, #1
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	OD_IMU_number = m_numOfImusOnline;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	4b0e      	ldr	r3, [pc, #56]	; (800a214 <_ZN9ImuMaster5startEv+0xf8>)
 800a1dc:	701a      	strb	r2, [r3, #0]

	// The internal filters of the IMU need some time to swing in
	osDelay(pdMS_TO_TICKS(100));
 800a1de:	2064      	movs	r0, #100	; 0x64
 800a1e0:	f00b ff46 	bl	8016070 <osDelay>

	return m_imu1Ok & m_imu2Ok & m_imu3Ok;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a1f2:	4013      	ands	r3, r2
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	f892 2156 	ldrb.w	r2, [r2, #342]	; 0x156
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	bf14      	ite	ne
 800a200:	2301      	movne	r3, #1
 800a202:	2300      	moveq	r3, #0
 800a204:	b2db      	uxtb	r3, r3
}
 800a206:	4618      	mov	r0, r3
 800a208:	3708      	adds	r7, #8
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	40020400 	.word	0x40020400
 800a214:	20000835 	.word	0x20000835

0800a218 <_ZN9ImuMaster8syncReadEv>:
	m_imu1.resetValues();
	m_imu2.resetValues();
	m_imu3.resetValues();
}

bool ImuMaster::syncRead() {
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
	if(m_numOfImusOnline == 0) {
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a226:	2b00      	cmp	r3, #0
 800a228:	d101      	bne.n	800a22e <_ZN9ImuMaster8syncReadEv+0x16>
		return false;
 800a22a:	2300      	movs	r3, #0
 800a22c:	e20a      	b.n	800a644 <_ZN9ImuMaster8syncReadEv+0x42c>
	}

	// Reset internal variables
	m_accelX = 0;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f04f 0200 	mov.w	r2, #0
 800a234:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	m_accelY = 0;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f04f 0200 	mov.w	r2, #0
 800a23e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	m_accelZ = 0;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f04f 0200 	mov.w	r2, #0
 800a248:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	m_temperature = 0;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f04f 0200 	mov.w	r2, #0
 800a252:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	m_gyroX = 0;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f04f 0200 	mov.w	r2, #0
 800a25c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	m_gyroY = 0;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f04f 0200 	mov.w	r2, #0
 800a266:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	m_gyroZ = 0;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f04f 0200 	mov.w	r2, #0
 800a270:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	// Read data from all IMUs that are online
	if(m_imu1Ok) {
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d077      	beq.n	800a36e <_ZN9ImuMaster8syncReadEv+0x156>
		m_imu1.read();
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	330c      	adds	r3, #12
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff fd32 	bl	8009cec <_ZN8ICM206024readEv>

		OD_IMU1_Temperature = m_imu1.getTemperature();
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	330c      	adds	r3, #12
 800a28c:	4618      	mov	r0, r3
 800a28e:	f7ff fe58 	bl	8009f42 <_ZN8ICM2060214getTemperatureEv>
 800a292:	eef0 7a40 	vmov.f32	s15, s0
 800a296:	4bb3      	ldr	r3, [pc, #716]	; (800a564 <_ZN9ImuMaster8syncReadEv+0x34c>)
 800a298:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu1.getAccelX();
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	330c      	adds	r3, #12
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff fe15 	bl	8009ed0 <_ZN8ICM206029getAccelXEv>
 800a2a6:	eeb0 7a40 	vmov.f32	s14, s0
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800a2b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu1.getAccelY();
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	330c      	adds	r3, #12
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff fe19 	bl	8009ef6 <_ZN8ICM206029getAccelYEv>
 800a2c4:	eeb0 7a40 	vmov.f32	s14, s0
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800a2ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu1.getAccelZ();
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	330c      	adds	r3, #12
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7ff fe1d 	bl	8009f1c <_ZN8ICM206029getAccelZEv>
 800a2e2:	eeb0 7a40 	vmov.f32	s14, s0
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800a2ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu1.getTemperature();
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	330c      	adds	r3, #12
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7ff fe21 	bl	8009f42 <_ZN8ICM2060214getTemperatureEv>
 800a300:	eeb0 7a40 	vmov.f32	s14, s0
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800a30a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu1.getGyroX();
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	330c      	adds	r3, #12
 800a318:	4618      	mov	r0, r3
 800a31a:	f7ff fe21 	bl	8009f60 <_ZN8ICM206028getGyroXEv>
 800a31e:	eeb0 7a40 	vmov.f32	s14, s0
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800a328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu1.getGyroY();
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	330c      	adds	r3, #12
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff fe25 	bl	8009f86 <_ZN8ICM206028getGyroYEv>
 800a33c:	eeb0 7a40 	vmov.f32	s14, s0
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800a346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu1.getGyroZ();
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	330c      	adds	r3, #12
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff fe29 	bl	8009fac <_ZN8ICM206028getGyroZEv>
 800a35a:	eeb0 7a40 	vmov.f32	s14, s0
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800a364:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	}

	if(m_imu2Ok) {
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a374:	2b00      	cmp	r3, #0
 800a376:	d077      	beq.n	800a468 <_ZN9ImuMaster8syncReadEv+0x250>
		m_imu2.read();
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3370      	adds	r3, #112	; 0x70
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7ff fcb5 	bl	8009cec <_ZN8ICM206024readEv>

		OD_IMU2_Temperature = m_imu2.getTemperature();
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3370      	adds	r3, #112	; 0x70
 800a386:	4618      	mov	r0, r3
 800a388:	f7ff fddb 	bl	8009f42 <_ZN8ICM2060214getTemperatureEv>
 800a38c:	eef0 7a40 	vmov.f32	s15, s0
 800a390:	4b75      	ldr	r3, [pc, #468]	; (800a568 <_ZN9ImuMaster8syncReadEv+0x350>)
 800a392:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu2.getAccelX();
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3370      	adds	r3, #112	; 0x70
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7ff fd98 	bl	8009ed0 <_ZN8ICM206029getAccelXEv>
 800a3a0:	eeb0 7a40 	vmov.f32	s14, s0
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800a3aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu2.getAccelY();
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	3370      	adds	r3, #112	; 0x70
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff fd9c 	bl	8009ef6 <_ZN8ICM206029getAccelYEv>
 800a3be:	eeb0 7a40 	vmov.f32	s14, s0
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800a3c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu2.getAccelZ();
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3370      	adds	r3, #112	; 0x70
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff fda0 	bl	8009f1c <_ZN8ICM206029getAccelZEv>
 800a3dc:	eeb0 7a40 	vmov.f32	s14, s0
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800a3e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu2.getTemperature();
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3370      	adds	r3, #112	; 0x70
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff fda4 	bl	8009f42 <_ZN8ICM2060214getTemperatureEv>
 800a3fa:	eeb0 7a40 	vmov.f32	s14, s0
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800a404:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu2.getGyroX();
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3370      	adds	r3, #112	; 0x70
 800a412:	4618      	mov	r0, r3
 800a414:	f7ff fda4 	bl	8009f60 <_ZN8ICM206028getGyroXEv>
 800a418:	eeb0 7a40 	vmov.f32	s14, s0
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800a422:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu2.getGyroY();
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	3370      	adds	r3, #112	; 0x70
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fda8 	bl	8009f86 <_ZN8ICM206028getGyroYEv>
 800a436:	eeb0 7a40 	vmov.f32	s14, s0
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800a440:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu2.getGyroZ();
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3370      	adds	r3, #112	; 0x70
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff fdac 	bl	8009fac <_ZN8ICM206028getGyroZEv>
 800a454:	eeb0 7a40 	vmov.f32	s14, s0
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800a45e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	}

	if(m_imu3Ok) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d07e      	beq.n	800a570 <_ZN9ImuMaster8syncReadEv+0x358>
		m_imu3.read();
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	33d4      	adds	r3, #212	; 0xd4
 800a476:	4618      	mov	r0, r3
 800a478:	f7ff fc38 	bl	8009cec <_ZN8ICM206024readEv>

		OD_IMU3_Temperature = m_imu3.getTemperature();
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	33d4      	adds	r3, #212	; 0xd4
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fd5e 	bl	8009f42 <_ZN8ICM2060214getTemperatureEv>
 800a486:	eef0 7a40 	vmov.f32	s15, s0
 800a48a:	4b38      	ldr	r3, [pc, #224]	; (800a56c <_ZN9ImuMaster8syncReadEv+0x354>)
 800a48c:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu3.getAccelX();
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	33d4      	adds	r3, #212	; 0xd4
 800a494:	4618      	mov	r0, r3
 800a496:	f7ff fd1b 	bl	8009ed0 <_ZN8ICM206029getAccelXEv>
 800a49a:	eeb0 7a40 	vmov.f32	s14, s0
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800a4a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu3.getAccelY();
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	33d4      	adds	r3, #212	; 0xd4
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff fd1f 	bl	8009ef6 <_ZN8ICM206029getAccelYEv>
 800a4b8:	eeb0 7a40 	vmov.f32	s14, s0
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800a4c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu3.getAccelZ();
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	33d4      	adds	r3, #212	; 0xd4
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff fd23 	bl	8009f1c <_ZN8ICM206029getAccelZEv>
 800a4d6:	eeb0 7a40 	vmov.f32	s14, s0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800a4e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu3.getTemperature();
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	33d4      	adds	r3, #212	; 0xd4
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff fd27 	bl	8009f42 <_ZN8ICM2060214getTemperatureEv>
 800a4f4:	eeb0 7a40 	vmov.f32	s14, s0
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800a4fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu3.getGyroX();
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	33d4      	adds	r3, #212	; 0xd4
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff fd27 	bl	8009f60 <_ZN8ICM206028getGyroXEv>
 800a512:	eeb0 7a40 	vmov.f32	s14, s0
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800a51c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu3.getGyroY();
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	33d4      	adds	r3, #212	; 0xd4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff fd2b 	bl	8009f86 <_ZN8ICM206028getGyroYEv>
 800a530:	eeb0 7a40 	vmov.f32	s14, s0
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800a53a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu3.getGyroZ();
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	33d4      	adds	r3, #212	; 0xd4
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff fd2f 	bl	8009fac <_ZN8ICM206028getGyroZEv>
 800a54e:	eeb0 7a40 	vmov.f32	s14, s0
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800a558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
 800a562:	e005      	b.n	800a570 <_ZN9ImuMaster8syncReadEv+0x358>
 800a564:	20000838 	.word	0x20000838
 800a568:	2000083c 	.word	0x2000083c
 800a56c:	20000840 	.word	0x20000840
	}

	// Divide data by number of IMUs that are online
	m_accelX /= m_numOfImusOnline;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	edd3 6a4e 	vldr	s13, [r3, #312]	; 0x138
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a57c:	ee07 3a90 	vmov	s15, r3
 800a580:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a584:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
	m_accelY /= m_numOfImusOnline;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	edd3 6a4f 	vldr	s13, [r3, #316]	; 0x13c
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
	m_accelZ /= m_numOfImusOnline;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a5b8:	ee07 3a90 	vmov	s15, r3
 800a5bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
	m_temperature /= m_numOfImusOnline;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	edd3 6a51 	vldr	s13, [r3, #324]	; 0x144
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
	m_gyroX /= m_numOfImusOnline;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	edd3 6a52 	vldr	s13, [r3, #328]	; 0x148
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
	m_gyroY /= m_numOfImusOnline;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	edd3 6a53 	vldr	s13, [r3, #332]	; 0x14c
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a61a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
	m_gyroZ /= m_numOfImusOnline;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a630:	ee07 3a90 	vmov	s15, r3
 800a634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150

	return true;
 800a642:	2301      	movs	r3, #1
}
 800a644:	4618      	mov	r0, r3
 800a646:	3708      	adds	r7, #8
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b082      	sub	sp, #8
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
	switch (module) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d003      	beq.n	800a662 <_ZL17AdcModuleToHandle9AdcModule+0x16>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d002      	beq.n	800a666 <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 800a660:	e003      	b.n	800a66a <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 800a662:	4b05      	ldr	r3, [pc, #20]	; (800a678 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 800a664:	e004      	b.n	800a670 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 800a666:	4b05      	ldr	r3, [pc, #20]	; (800a67c <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 800a668:	e002      	b.n	800a670 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 800a66a:	f003 fe9f 	bl	800e3ac <Error_Handler>
		return nullptr;
 800a66e:	2300      	movs	r3, #0
	}
}
 800a670:	4618      	mov	r0, r3
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}
 800a678:	20000ce8 	.word	0x20000ce8
 800a67c:	20000d30 	.word	0x20000d30

0800a680 <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 800a680:	b480      	push	{r7}
 800a682:	b083      	sub	sp, #12
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]

	}
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4618      	mov	r0, r3
 800a68c:	370c      	adds	r7, #12
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr

0800a696 <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 800a696:	b480      	push	{r7}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
		return m_value;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	881b      	ldrh	r3, [r3, #0]
	}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	370c      	adds	r7, #12
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ac:	4770      	bx	lr

0800a6ae <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 800a6ae:	b480      	push	{r7}
 800a6b0:	b083      	sub	sp, #12
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	807b      	strh	r3, [r7, #2]
		m_value = value;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	887a      	ldrh	r2, [r7, #2]
 800a6be:	801a      	strh	r2, [r3, #0]
	}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b082      	sub	sp, #8
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f7f6 feb8 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 800a6e6:	b5b0      	push	{r4, r5, r7, lr}
 800a6e8:	b082      	sub	sp, #8
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	240f      	movs	r4, #15
 800a6f2:	461d      	mov	r5, r3
 800a6f4:	2c00      	cmp	r4, #0
 800a6f6:	db05      	blt.n	800a704 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 800a6f8:	4628      	mov	r0, r5
 800a6fa:	f000 fa0f 	bl	800ab1c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800a6fe:	3510      	adds	r5, #16
 800a700:	3c01      	subs	r4, #1
 800a702:	e7f7      	b.n	800a6f4 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bdb0      	pop	{r4, r5, r7, pc}

0800a716 <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 800a716:	b590      	push	{r4, r7, lr}
 800a718:	b083      	sub	sp, #12
 800a71a:	af00      	add	r7, sp, #0
 800a71c:	6078      	str	r0, [r7, #4]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d00a      	beq.n	800a73a <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	429c      	cmp	r4, r3
 800a72e:	d004      	beq.n	800a73a <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 800a730:	3c10      	subs	r4, #16
 800a732:	4620      	mov	r0, r4
 800a734:	f7ff ffca 	bl	800a6cc <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 800a738:	e7f7      	b.n	800a72a <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	bd90      	pop	{r4, r7, pc}

0800a744 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 800a744:	b580      	push	{r7, lr}
 800a746:	af00      	add	r7, sp, #0
 800a748:	4801      	ldr	r0, [pc, #4]	; (800a750 <__tcf_0+0xc>)
 800a74a:	f7ff ffe4 	bl	800a716 <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	20000b68 	.word	0x20000b68

0800a754 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 800a758:	4b12      	ldr	r3, [pc, #72]	; (800a7a4 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	f3bf 8f5b 	dmb	ish
 800a760:	b2db      	uxtb	r3, r3
 800a762:	f003 0301 	and.w	r3, r3, #1
 800a766:	2b00      	cmp	r3, #0
 800a768:	bf0c      	ite	eq
 800a76a:	2301      	moveq	r3, #1
 800a76c:	2300      	movne	r3, #0
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	2b00      	cmp	r3, #0
 800a772:	d013      	beq.n	800a79c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 800a774:	480b      	ldr	r0, [pc, #44]	; (800a7a4 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800a776:	f00f feed 	bl	801a554 <__cxa_guard_acquire>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	bf14      	ite	ne
 800a780:	2301      	movne	r3, #1
 800a782:	2300      	moveq	r3, #0
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b00      	cmp	r3, #0
 800a788:	d008      	beq.n	800a79c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 800a78a:	4807      	ldr	r0, [pc, #28]	; (800a7a8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 800a78c:	f7ff ffab 	bl	800a6e6 <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 800a790:	4806      	ldr	r0, [pc, #24]	; (800a7ac <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 800a792:	f010 f940 	bl	801aa16 <atexit>
 800a796:	4803      	ldr	r0, [pc, #12]	; (800a7a4 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800a798:	f00f fee8 	bl	801a56c <__cxa_guard_release>
		return instance;
 800a79c:	4b02      	ldr	r3, [pc, #8]	; (800a7a8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	20000c6c 	.word	0x20000c6c
 800a7a8:	20000b68 	.word	0x20000b68
 800a7ac:	0800a745 	.word	0x0800a745

0800a7b0 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a7c0:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a7c8:	1c59      	adds	r1, r3, #1
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 800a7d0:	011b      	lsls	r3, r3, #4
 800a7d2:	687a      	ldr	r2, [r7, #4]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 f9ac 	bl	800ab36 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 800a7de:	68fb      	ldr	r3, [r7, #12]
	}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3710      	adds	r7, #16
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	011b      	lsls	r3, r3, #4
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	18d0      	adds	r0, r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a800:	011b      	lsls	r3, r3, #4
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	4413      	add	r3, r2
 800a806:	4619      	mov	r1, r3
 800a808:	f000 f995 	bl	800ab36 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a812:	011b      	lsls	r3, r3, #4
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	4413      	add	r3, r2
 800a818:	2100      	movs	r1, #0
 800a81a:	4618      	mov	r0, r3
 800a81c:	f000 f9a6 	bl	800ab6c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a826:	1e5a      	subs	r2, r3, #1
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 800a82e:	bf00      	nop
 800a830:	3708      	adds	r7, #8
 800a832:	46bd      	mov	sp, r7
 800a834:	bd80      	pop	{r7, pc}

0800a836 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 800a836:	b580      	push	{r7, lr}
 800a838:	b082      	sub	sp, #8
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	683a      	ldr	r2, [r7, #0]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d104      	bne.n	800a856 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f90a 	bl	800aa6a <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 800a856:	bf00      	nop
 800a858:	3708      	adds	r7, #8
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
	...

0800a860 <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 800a860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a862:	b087      	sub	sp, #28
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 800a86a:	6838      	ldr	r0, [r7, #0]
 800a86c:	f7ff feee 	bl	800a64c <_ZL17AdcModuleToHandle9AdcModule>
 800a870:	4602      	mov	r2, r0
					)) {
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	69da      	ldr	r2, [r3, #28]
					)) {
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	685c      	ldr	r4, [r3, #4]
 800a884:	4b2f      	ldr	r3, [pc, #188]	; (800a944 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 800a886:	429c      	cmp	r4, r3
 800a888:	d801      	bhi.n	800a88e <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 800a88a:	0063      	lsls	r3, r4, #1
 800a88c:	e001      	b.n	800a892 <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 800a88e:	f04f 33ff 	mov.w	r3, #4294967295
 800a892:	4618      	mov	r0, r3
 800a894:	f00f fe6d 	bl	801a572 <_Znaj>
 800a898:	4603      	mov	r3, r0
 800a89a:	461e      	mov	r6, r3
 800a89c:	4635      	mov	r5, r6
 800a89e:	1e63      	subs	r3, r4, #1
 800a8a0:	461c      	mov	r4, r3
 800a8a2:	2c00      	cmp	r4, #0
 800a8a4:	db05      	blt.n	800a8b2 <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	f7ff feea 	bl	800a680 <_ZN10AdcChannelC1Ev>
 800a8ac:	3502      	adds	r5, #2
 800a8ae:	3c01      	subs	r4, #1
 800a8b0:	e7f7      	b.n	800a8a2 <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	4a22      	ldr	r2, [pc, #136]	; (800a944 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d801      	bhi.n	800a8c4 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	e001      	b.n	800a8c8 <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 800a8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f00f fe52 	bl	801a572 <_Znaj>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	461a      	mov	r2, r3
					)) {
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	60da      	str	r2, [r3, #12]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 800a8dc:	f7ff ff3a 	bl	800a754 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	f107 0308 	add.w	r3, r7, #8
 800a8e8:	4611      	mov	r1, r2
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f000 f958 	bl	800aba0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 800a8f0:	f107 0308 	add.w	r3, r7, #8
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f7ff ff5a 	bl	800a7b0 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 800a8fc:	4602      	mov	r2, r0
					)) {
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 800a902:	f107 0308 	add.w	r3, r7, #8
 800a906:	4618      	mov	r0, r3
 800a908:	f7ff fee0 	bl	800a6cc <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 800a90c:	2200      	movs	r2, #0
 800a90e:	2100      	movs	r1, #0
 800a910:	2001      	movs	r0, #1
 800a912:	f00b fcd6 	bl	80162c2 <osSemaphoreNew>
 800a916:	4602      	mov	r2, r0
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2201      	movs	r2, #1
 800a920:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6818      	ldr	r0, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800a92e:	461a      	mov	r2, r3
 800a930:	f004 fcde 	bl	800f2f0 <HAL_ADC_Start_DMA>
		update();
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 f854 	bl	800a9e2 <_ZN19AdcModuleController6updateEv>
	}
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4618      	mov	r0, r3
 800a93e:	371c      	adds	r7, #28
 800a940:	46bd      	mov	sp, r7
 800a942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a944:	3ffffffc 	.word	0x3ffffffc

0800a948 <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 800a948:	b580      	push	{r7, lr}
 800a94a:	b082      	sub	sp, #8
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 800a950:	f7ff ff00 	bl	800a754 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800a954:	4602      	mov	r2, r0
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	4619      	mov	r1, r3
 800a95c:	4610      	mov	r0, r2
 800a95e:	f7ff ff43 	bl	800a7e8 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	695b      	ldr	r3, [r3, #20]
 800a966:	4618      	mov	r0, r3
 800a968:	f00b fdca 	bl	8016500 <osSemaphoreGetCount>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	bf14      	ite	ne
 800a972:	2301      	movne	r3, #1
 800a974:	2300      	moveq	r3, #0
 800a976:	b2db      	uxtb	r3, r3
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d006      	beq.n	800a98a <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	695b      	ldr	r3, [r3, #20]
 800a980:	f04f 31ff 	mov.w	r1, #4294967295
 800a984:	4618      	mov	r0, r3
 800a986:	f00b fd25 	bl	80163d4 <osSemaphoreAcquire>
		}
		delete[] m_channels;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	689b      	ldr	r3, [r3, #8]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d004      	beq.n	800a99c <_ZN19AdcModuleControllerD1Ev+0x54>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	4618      	mov	r0, r3
 800a998:	f00f fdda 	bl	801a550 <_ZdaPv>
		delete[] m_buffer;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d004      	beq.n	800a9ae <_ZN19AdcModuleControllerD1Ev+0x66>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f00f fdd1 	bl	801a550 <_ZdaPv>
	}
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3708      	adds	r7, #8
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	683a      	ldr	r2, [r7, #0]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d301      	bcc.n	800a9d0 <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 800a9cc:	f003 fcee 	bl	800e3ac <Error_Handler>
		}
		return m_channels + rank;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	689a      	ldr	r2, [r3, #8]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	005b      	lsls	r3, r3, #1
 800a9d8:	4413      	add	r3, r2
	}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3708      	adds	r7, #8
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}

0800a9e2 <_ZN19AdcModuleController6updateEv>:

	void update() {
 800a9e2:	b580      	push	{r7, lr}
 800a9e4:	b084      	sub	sp, #16
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	f04f 31ff 	mov.w	r1, #4294967295
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f00b fcee 	bl	80163d4 <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	60fb      	str	r3, [r7, #12]
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d211      	bcs.n	800aa2a <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689a      	ldr	r2, [r3, #8]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	18d0      	adds	r0, r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	68da      	ldr	r2, [r3, #12]
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	005b      	lsls	r3, r3, #1
 800aa18:	4413      	add	r3, r2
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	f7ff fe46 	bl	800a6ae <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	3301      	adds	r3, #1
 800aa26:	60fb      	str	r3, [r7, #12]
 800aa28:	e7e8      	b.n	800a9fc <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2201      	movs	r2, #1
 800aa2e:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6818      	ldr	r0, [r3, #0]
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f004 fc57 	bl	800f2f0 <HAL_ADC_Start_DMA>
	}
 800aa42:	bf00      	nop
 800aa44:	3710      	adds	r7, #16
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}

0800aa4a <_ZN19AdcModuleController10weakUpdateEv>:

	void weakUpdate() {
 800aa4a:	b580      	push	{r7, lr}
 800aa4c:	b082      	sub	sp, #8
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	7c1b      	ldrb	r3, [r3, #16]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d103      	bne.n	800aa62 <_ZN19AdcModuleController10weakUpdateEv+0x18>
			return;
		else
			update();
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f7ff ffc1 	bl	800a9e2 <_ZN19AdcModuleController6updateEv>
 800aa60:	e000      	b.n	800aa64 <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 800aa62:	bf00      	nop
	}
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b082      	sub	sp, #8
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f00b fcfb 	bl	8016478 <osSemaphoreRelease>
	}
 800aa82:	bf00      	nop
 800aa84:	3708      	adds	r7, #8
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
	switch(module){
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d004      	beq.n	800aaa8 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 800aa9e:	e007      	b.n	800aab0 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 800aaa0:	f000 f8b0 	bl	800ac04 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	e008      	b.n	800aaba <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 800aaa8:	f000 f8e2 	bl	800ac70 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 800aaac:	4603      	mov	r3, r0
 800aaae:	e004      	b.n	800aaba <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 800aab0:	f003 fc7c 	bl	800e3ac <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 800aab4:	f000 f8a6 	bl	800ac04 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 800aab8:	4603      	mov	r3, r0
	}
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3708      	adds	r7, #8
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}

0800aac2 <_ZN20AdcChannelControllerC1E9AdcModulej>:



class AdcChannelController {
public:
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b084      	sub	sp, #16
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	60f8      	str	r0, [r7, #12]
 800aaca:	60b9      	str	r1, [r7, #8]
 800aacc:	607a      	str	r2, [r7, #4]
			m_module(_getChannelAdcModuleControllerRuntime(module)),
 800aace:	68b8      	ldr	r0, [r7, #8]
 800aad0:	f7ff ffdb 	bl	800aa8a <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 800aad4:	4602      	mov	r2, r0
			m_channel(m_module.getChannelByRank(rank)) {
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	601a      	str	r2, [r3, #0]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	6879      	ldr	r1, [r7, #4]
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7ff ff69 	bl	800a9b8 <_ZN19AdcModuleController16getChannelByRankEj>
 800aae6:	4602      	mov	r2, r0
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	605a      	str	r2, [r3, #4]
	}
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}

0800aaf6 <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 800aaf6:	b580      	push	{r7, lr}
 800aaf8:	b082      	sub	sp, #8
 800aafa:	af00      	add	r7, sp, #0
 800aafc:	6078      	str	r0, [r7, #4]
		m_module.weakUpdate();
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f7ff ffa1 	bl	800aa4a <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7ff fdc2 	bl	800a696 <_ZN10AdcChannel3getEv>
 800ab12:	4603      	mov	r3, r0
	}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3708      	adds	r7, #8
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7f6 fc82 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3708      	adds	r7, #8
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 800ab36:	b580      	push	{r7, lr}
 800ab38:	b086      	sub	sp, #24
 800ab3a:	af00      	add	r7, sp, #0
 800ab3c:	6078      	str	r0, [r7, #4]
 800ab3e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800ab40:	f107 0308 	add.w	r3, r7, #8
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 f8c0 	bl	800accc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 800ab4c:	f107 0308 	add.w	r3, r7, #8
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	4618      	mov	r0, r3
 800ab54:	f000 f8dc 	bl	800ad10 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 800ab58:	f107 0308 	add.w	r3, r7, #8
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7ff fdb5 	bl	800a6cc <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 800ab62:	687b      	ldr	r3, [r7, #4]
      }
 800ab64:	4618      	mov	r0, r3
 800ab66:	3718      	adds	r7, #24
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b082      	sub	sp, #8
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00b      	beq.n	800ab96 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	689b      	ldr	r3, [r3, #8]
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	2203      	movs	r2, #3
 800ab88:	4798      	blx	r3
	    _M_manager = nullptr;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2200      	movs	r2, #0
 800ab94:	60da      	str	r2, [r3, #12]
	return *this;
 800ab96:	687b      	ldr	r3, [r7, #4]
      }
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}

0800aba0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800aba0:	b590      	push	{r4, r7, lr}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4618      	mov	r0, r3
 800abae:	f7f6 fc3f 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800abb2:	463b      	mov	r3, r7
 800abb4:	4618      	mov	r0, r3
 800abb6:	f000 f8d7 	bl	800ad68 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 800abba:	4603      	mov	r3, r0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d00f      	beq.n	800abe0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800abc0:	687c      	ldr	r4, [r7, #4]
 800abc2:	463b      	mov	r3, r7
 800abc4:	4618      	mov	r0, r3
 800abc6:	f000 f8da 	bl	800ad7e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 800abca:	4603      	mov	r3, r0
 800abcc:	4619      	mov	r1, r3
 800abce:	4620      	mov	r0, r4
 800abd0:	f000 f8e0 	bl	800ad94 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a05      	ldr	r2, [pc, #20]	; (800abec <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 800abd8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a04      	ldr	r2, [pc, #16]	; (800abf0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 800abde:	609a      	str	r2, [r3, #8]
      }
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	4618      	mov	r0, r3
 800abe4:	370c      	adds	r7, #12
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bd90      	pop	{r4, r7, pc}
 800abea:	bf00      	nop
 800abec:	0800adb9 	.word	0x0800adb9
 800abf0:	0800ade3 	.word	0x0800ade3

0800abf4 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 800abf4:	b580      	push	{r7, lr}
 800abf6:	af00      	add	r7, sp, #0
 800abf8:	4801      	ldr	r0, [pc, #4]	; (800ac00 <__tcf_1+0xc>)
 800abfa:	f7ff fea5 	bl	800a948 <_ZN19AdcModuleControllerD1Ev>
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	20000c70 	.word	0x20000c70

0800ac04 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800ac04:	b580      	push	{r7, lr}
 800ac06:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 800ac08:	4b12      	ldr	r3, [pc, #72]	; (800ac54 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	f3bf 8f5b 	dmb	ish
 800ac10:	b2db      	uxtb	r3, r3
 800ac12:	f003 0301 	and.w	r3, r3, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	bf0c      	ite	eq
 800ac1a:	2301      	moveq	r3, #1
 800ac1c:	2300      	movne	r3, #0
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d014      	beq.n	800ac4e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 800ac24:	480b      	ldr	r0, [pc, #44]	; (800ac54 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800ac26:	f00f fc95 	bl	801a554 <__cxa_guard_acquire>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	bf14      	ite	ne
 800ac30:	2301      	movne	r3, #1
 800ac32:	2300      	moveq	r3, #0
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d009      	beq.n	800ac4e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 800ac3a:	2100      	movs	r1, #0
 800ac3c:	4806      	ldr	r0, [pc, #24]	; (800ac58 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 800ac3e:	f7ff fe0f 	bl	800a860 <_ZN19AdcModuleControllerC1E9AdcModule>
 800ac42:	4806      	ldr	r0, [pc, #24]	; (800ac5c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 800ac44:	f00f fee7 	bl	801aa16 <atexit>
 800ac48:	4802      	ldr	r0, [pc, #8]	; (800ac54 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800ac4a:	f00f fc8f 	bl	801a56c <__cxa_guard_release>
	return instance;
 800ac4e:	4b02      	ldr	r3, [pc, #8]	; (800ac58 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	bd80      	pop	{r7, pc}
 800ac54:	20000c8c 	.word	0x20000c8c
 800ac58:	20000c70 	.word	0x20000c70
 800ac5c:	0800abf5 	.word	0x0800abf5

0800ac60 <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 800ac60:	b580      	push	{r7, lr}
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	4801      	ldr	r0, [pc, #4]	; (800ac6c <__tcf_2+0xc>)
 800ac66:	f7ff fe6f 	bl	800a948 <_ZN19AdcModuleControllerD1Ev>
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	20000c90 	.word	0x20000c90

0800ac70 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800ac70:	b580      	push	{r7, lr}
 800ac72:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 800ac74:	4b12      	ldr	r3, [pc, #72]	; (800acc0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	f3bf 8f5b 	dmb	ish
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	bf0c      	ite	eq
 800ac86:	2301      	moveq	r3, #1
 800ac88:	2300      	movne	r3, #0
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d014      	beq.n	800acba <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800ac90:	480b      	ldr	r0, [pc, #44]	; (800acc0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800ac92:	f00f fc5f 	bl	801a554 <__cxa_guard_acquire>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	bf14      	ite	ne
 800ac9c:	2301      	movne	r3, #1
 800ac9e:	2300      	moveq	r3, #0
 800aca0:	b2db      	uxtb	r3, r3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d009      	beq.n	800acba <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800aca6:	2101      	movs	r1, #1
 800aca8:	4806      	ldr	r0, [pc, #24]	; (800acc4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 800acaa:	f7ff fdd9 	bl	800a860 <_ZN19AdcModuleControllerC1E9AdcModule>
 800acae:	4806      	ldr	r0, [pc, #24]	; (800acc8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 800acb0:	f00f feb1 	bl	801aa16 <atexit>
 800acb4:	4802      	ldr	r0, [pc, #8]	; (800acc0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800acb6:	f00f fc59 	bl	801a56c <__cxa_guard_release>
	return instance;
 800acba:	4b02      	ldr	r3, [pc, #8]	; (800acc4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	bd80      	pop	{r7, pc}
 800acc0:	20000cac 	.word	0x20000cac
 800acc4:	20000c90 	.word	0x20000c90
 800acc8:	0800ac61 	.word	0x0800ac61

0800accc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 800accc:	b580      	push	{r7, lr}
 800acce:	b082      	sub	sp, #8
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4618      	mov	r0, r3
 800acda:	f7f6 fba9 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800acde:	6838      	ldr	r0, [r7, #0]
 800ace0:	f000 f89e 	bl	800ae20 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d00d      	beq.n	800ad06 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	689b      	ldr	r3, [r3, #8]
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	2202      	movs	r2, #2
 800acf4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	68da      	ldr	r2, [r3, #12]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	689a      	ldr	r2, [r3, #8]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	609a      	str	r2, [r3, #8]
    }
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
 800ad18:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	4611      	mov	r1, r2
 800ad20:	4618      	mov	r0, r3
 800ad22:	f7f6 fd62 	bl	80017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f103 0208 	add.w	r2, r3, #8
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	3308      	adds	r3, #8
 800ad30:	4619      	mov	r1, r3
 800ad32:	4610      	mov	r0, r2
 800ad34:	f7f6 fd8b 	bl	800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	f103 020c 	add.w	r2, r3, #12
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	330c      	adds	r3, #12
 800ad42:	4619      	mov	r1, r3
 800ad44:	4610      	mov	r0, r2
 800ad46:	f000 f886 	bl	800ae56 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800ad4a:	bf00      	nop
 800ad4c:	3708      	adds	r7, #8
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ad52:	b480      	push	{r7}
 800ad54:	b083      	sub	sp, #12
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
	  { return true; }
 800ad70:	2301      	movs	r3, #1
 800ad72:	4618      	mov	r0, r3
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	4618      	mov	r0, r3
 800ad8a:	370c      	adds	r7, #12
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad92:	4770      	bx	lr

0800ad94 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800ad94:	b590      	push	{r4, r7, lr}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800ad9e:	6838      	ldr	r0, [r7, #0]
 800ada0:	f7ff ffed 	bl	800ad7e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 800ada4:	4603      	mov	r3, r0
 800ada6:	4622      	mov	r2, r4
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f872 	bl	800ae94 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 800adb0:	bf00      	nop
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd90      	pop	{r4, r7, pc}

0800adb8 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800adb8:	b590      	push	{r4, r7, lr}
 800adba:	b083      	sub	sp, #12
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f87f 	bl	800aec6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 800adc8:	4604      	mov	r4, r0
 800adca:	6838      	ldr	r0, [r7, #0]
 800adcc:	f7ff ffc1 	bl	800ad52 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800add0:	4603      	mov	r3, r0
 800add2:	4619      	mov	r1, r3
 800add4:	4620      	mov	r0, r4
 800add6:	f000 f887 	bl	800aee8 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 800adda:	bf00      	nop
      }
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd90      	pop	{r4, r7, pc}

0800ade2 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800ade2:	b590      	push	{r4, r7, lr}
 800ade4:	b085      	sub	sp, #20
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	60f8      	str	r0, [r7, #12]
 800adea:	60b9      	str	r1, [r7, #8]
 800adec:	4613      	mov	r3, r2
 800adee:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800adf0:	79fb      	ldrb	r3, [r7, #7]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d109      	bne.n	800ae0a <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	f000 f88c 	bl	800af14 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 800adfc:	4604      	mov	r4, r0
 800adfe:	68b8      	ldr	r0, [r7, #8]
 800ae00:	f000 f861 	bl	800aec6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 800ae04:	4603      	mov	r3, r0
 800ae06:	6023      	str	r3, [r4, #0]
	    break;
 800ae08:	e005      	b.n	800ae16 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800ae0a:	79fb      	ldrb	r3, [r7, #7]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	68b9      	ldr	r1, [r7, #8]
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 f88b 	bl	800af2c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 800ae16:	2300      	movs	r3, #0
      }
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd90      	pop	{r4, r7, pc}

0800ae20 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	f7f6 fb21 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 800ae30:	4603      	mov	r3, r0
 800ae32:	f083 0301 	eor.w	r3, r3, #1
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3708      	adds	r7, #8
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	370c      	adds	r7, #12
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae54:	4770      	bx	lr

0800ae56 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b084      	sub	sp, #16
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff ffed 	bl	800ae40 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800ae66:	4603      	mov	r3, r0
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800ae6c:	6838      	ldr	r0, [r7, #0]
 800ae6e:	f7ff ffe7 	bl	800ae40 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800ae72:	4603      	mov	r3, r0
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800ae7a:	f107 030c 	add.w	r3, r7, #12
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7ff ffde 	bl	800ae40 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800ae84:	4603      	mov	r3, r0
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	601a      	str	r2, [r3, #0]
    }
 800ae8c:	bf00      	nop
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800ae94:	b590      	push	{r4, r7, lr}
 800ae96:	b085      	sub	sp, #20
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800aea0:	68b8      	ldr	r0, [r7, #8]
 800aea2:	f7ff ff6c 	bl	800ad7e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 800aea6:	4604      	mov	r4, r0
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f7fd fc17 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	2004      	movs	r0, #4
 800aeb4:	f7fd fc06 	bl	80086c4 <_ZnwjPv>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	6823      	ldr	r3, [r4, #0]
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	bf00      	nop
 800aec0:	3714      	adds	r7, #20
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd90      	pop	{r4, r7, pc}

0800aec6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b084      	sub	sp, #16
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f857 	bl	800af82 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 800aed4:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800aed6:	68f8      	ldr	r0, [r7, #12]
 800aed8:	f000 f85f 	bl	800af9a <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 800aedc:	4603      	mov	r3, r0
 800aede:	bf00      	nop
	}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3710      	adds	r7, #16
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800aee8:	b5b0      	push	{r4, r5, r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f000 f85c 	bl	800afb0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 800aef8:	4604      	mov	r4, r0
 800aefa:	6838      	ldr	r0, [r7, #0]
 800aefc:	f7ff ff29 	bl	800ad52 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800af00:	4603      	mov	r3, r0
 800af02:	461a      	mov	r2, r3
 800af04:	4621      	mov	r1, r4
 800af06:	4628      	mov	r0, r5
 800af08:	f000 f85d 	bl	800afc6 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800af0c:	bf00      	nop
 800af0e:	3708      	adds	r7, #8
 800af10:	46bd      	mov	sp, r7
 800af12:	bdb0      	pop	{r4, r5, r7, pc}

0800af14 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7fd fbdd 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800af22:	4603      	mov	r3, r0
 800af24:	4618      	mov	r0, r3
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800af2c:	b5b0      	push	{r4, r5, r7, lr}
 800af2e:	b084      	sub	sp, #16
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	4613      	mov	r3, r2
 800af38:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	2b03      	cmp	r3, #3
 800af3e:	d016      	beq.n	800af6e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 800af40:	2b03      	cmp	r3, #3
 800af42:	dc19      	bgt.n	800af78 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 800af44:	2b01      	cmp	r3, #1
 800af46:	d002      	beq.n	800af4e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d00a      	beq.n	800af62 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 800af4c:	e014      	b.n	800af78 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800af4e:	68f8      	ldr	r0, [r7, #12]
 800af50:	f7ff ffe0 	bl	800af14 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 800af54:	4604      	mov	r4, r0
 800af56:	68b8      	ldr	r0, [r7, #8]
 800af58:	f7ff ffb5 	bl	800aec6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 800af5c:	4603      	mov	r3, r0
 800af5e:	6023      	str	r3, [r4, #0]
	      break;
 800af60:	e00a      	b.n	800af78 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800af62:	462a      	mov	r2, r5
 800af64:	68b9      	ldr	r1, [r7, #8]
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 f844 	bl	800aff4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 800af6c:	e004      	b.n	800af78 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800af6e:	4621      	mov	r1, r4
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f000 f858 	bl	800b026 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800af76:	bf00      	nop
	  return false;
 800af78:	2300      	movs	r3, #0
	}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bdb0      	pop	{r4, r5, r7, pc}

0800af82 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7fd fbb1 	bl	80086f2 <_ZNKSt9_Any_data9_M_accessEv>
 800af90:	4603      	mov	r3, r0
 800af92:	4618      	mov	r0, r3
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	4618      	mov	r0, r3
 800afa6:	370c      	adds	r7, #12
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4618      	mov	r0, r3
 800afbc:	370c      	adds	r7, #12
 800afbe:	46bd      	mov	sp, r7
 800afc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc4:	4770      	bx	lr

0800afc6 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800afc6:	b590      	push	{r4, r7, lr}
 800afc8:	b085      	sub	sp, #20
 800afca:	af00      	add	r7, sp, #0
 800afcc:	7338      	strb	r0, [r7, #12]
 800afce:	60b9      	str	r1, [r7, #8]
 800afd0:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800afd2:	68b8      	ldr	r0, [r7, #8]
 800afd4:	f7ff ffec 	bl	800afb0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 800afd8:	4604      	mov	r4, r0
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f7ff feb9 	bl	800ad52 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800afe0:	4603      	mov	r3, r0
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4619      	mov	r1, r3
 800afe6:	4620      	mov	r0, r4
 800afe8:	f7ff fc25 	bl	800a836 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 800afec:	bf00      	nop
 800afee:	3714      	adds	r7, #20
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd90      	pop	{r4, r7, pc}

0800aff4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800aff4:	b590      	push	{r4, r7, lr}
 800aff6:	b085      	sub	sp, #20
 800aff8:	af00      	add	r7, sp, #0
 800affa:	60f8      	str	r0, [r7, #12]
 800affc:	60b9      	str	r1, [r7, #8]
 800affe:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800b000:	68b8      	ldr	r0, [r7, #8]
 800b002:	f7ff ffbe 	bl	800af82 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 800b006:	4604      	mov	r4, r0
 800b008:	68f8      	ldr	r0, [r7, #12]
 800b00a:	f7fd fb67 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800b00e:	4603      	mov	r3, r0
 800b010:	4619      	mov	r1, r3
 800b012:	2004      	movs	r0, #4
 800b014:	f7fd fb56 	bl	80086c4 <_ZnwjPv>
 800b018:	4602      	mov	r2, r0
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	6013      	str	r3, [r2, #0]
	}
 800b01e:	bf00      	nop
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	bd90      	pop	{r4, r7, pc}

0800b026 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800b026:	b580      	push	{r7, lr}
 800b028:	b082      	sub	sp, #8
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	6078      	str	r0, [r7, #4]
 800b02e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f804 	bl	800b03e <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 800b036:	bf00      	nop
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7fd fb48 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800b04c:	4603      	mov	r3, r0
 800b04e:	4618      	mov	r0, r3
 800b050:	3708      	adds	r7, #8
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <_ZN7cooling6updateEv>:
	osMutexRelease(s_modeMutex);
}

bool toggle = true;

void update(){
 800b058:	b580      	push	{r7, lr}
 800b05a:	af00      	add	r7, sp, #0
	osMutexAcquire(s_modeMutex, osWaitForever);
 800b05c:	4b1f      	ldr	r3, [pc, #124]	; (800b0dc <_ZN7cooling6updateEv+0x84>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f04f 31ff 	mov.w	r1, #4294967295
 800b064:	4618      	mov	r0, r3
 800b066:	f00b f8a4 	bl	80161b2 <osMutexAcquire>
	s_mode = s_nextMode;
 800b06a:	4b1d      	ldr	r3, [pc, #116]	; (800b0e0 <_ZN7cooling6updateEv+0x88>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a1d      	ldr	r2, [pc, #116]	; (800b0e4 <_ZN7cooling6updateEv+0x8c>)
 800b070:	6013      	str	r3, [r2, #0]
	osMutexRelease(s_modeMutex);
 800b072:	4b1a      	ldr	r3, [pc, #104]	; (800b0dc <_ZN7cooling6updateEv+0x84>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	4618      	mov	r0, r3
 800b078:	f00b f8e6 	bl	8016248 <osMutexRelease>

	switch(s_mode){
 800b07c:	4b19      	ldr	r3, [pc, #100]	; (800b0e4 <_ZN7cooling6updateEv+0x8c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2b02      	cmp	r3, #2
 800b082:	d023      	beq.n	800b0cc <_ZN7cooling6updateEv+0x74>
 800b084:	2b02      	cmp	r3, #2
 800b086:	dc27      	bgt.n	800b0d8 <_ZN7cooling6updateEv+0x80>
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <_ZN7cooling6updateEv+0x3a>
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d006      	beq.n	800b09e <_ZN7cooling6updateEv+0x46>
	case MODE::OFF:
		pdu::disableChannel(COOLING_PUMP_CHANNEL);
		break;
	}

}
 800b090:	e022      	b.n	800b0d8 <_ZN7cooling6updateEv+0x80>
		pdu::enableChannel(COOLING_PUMP_CHANNEL);
 800b092:	4b15      	ldr	r3, [pc, #84]	; (800b0e8 <_ZN7cooling6updateEv+0x90>)
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	4618      	mov	r0, r3
 800b098:	f001 fb90 	bl	800c7bc <_ZN3pdu13enableChannelENS_9HpChannelE>
		break;
 800b09c:	e01c      	b.n	800b0d8 <_ZN7cooling6updateEv+0x80>
		if(toggle){
 800b09e:	4b13      	ldr	r3, [pc, #76]	; (800b0ec <_ZN7cooling6updateEv+0x94>)
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d005      	beq.n	800b0b2 <_ZN7cooling6updateEv+0x5a>
			pdu::enableChannel(COOLING_PUMP_CHANNEL);
 800b0a6:	4b10      	ldr	r3, [pc, #64]	; (800b0e8 <_ZN7cooling6updateEv+0x90>)
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f001 fb86 	bl	800c7bc <_ZN3pdu13enableChannelENS_9HpChannelE>
 800b0b0:	e004      	b.n	800b0bc <_ZN7cooling6updateEv+0x64>
			pdu::disableChannel(COOLING_PUMP_CHANNEL);
 800b0b2:	4b0d      	ldr	r3, [pc, #52]	; (800b0e8 <_ZN7cooling6updateEv+0x90>)
 800b0b4:	881b      	ldrh	r3, [r3, #0]
 800b0b6:	4618      	mov	r0, r3
 800b0b8:	f001 fb92 	bl	800c7e0 <_ZN3pdu14disableChannelENS_9HpChannelE>
		toggle = !toggle;
 800b0bc:	4b0b      	ldr	r3, [pc, #44]	; (800b0ec <_ZN7cooling6updateEv+0x94>)
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	f083 0301 	eor.w	r3, r3, #1
 800b0c4:	b2da      	uxtb	r2, r3
 800b0c6:	4b09      	ldr	r3, [pc, #36]	; (800b0ec <_ZN7cooling6updateEv+0x94>)
 800b0c8:	701a      	strb	r2, [r3, #0]
		break;
 800b0ca:	e005      	b.n	800b0d8 <_ZN7cooling6updateEv+0x80>
		pdu::disableChannel(COOLING_PUMP_CHANNEL);
 800b0cc:	4b06      	ldr	r3, [pc, #24]	; (800b0e8 <_ZN7cooling6updateEv+0x90>)
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f001 fb85 	bl	800c7e0 <_ZN3pdu14disableChannelENS_9HpChannelE>
		break;
 800b0d6:	bf00      	nop
}
 800b0d8:	bf00      	nop
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	20000cb4 	.word	0x20000cb4
 800b0e0:	20000020 	.word	0x20000020
 800b0e4:	20000cb0 	.word	0x20000cb0
 800b0e8:	20000cb8 	.word	0x20000cb8
 800b0ec:	20000024 	.word	0x20000024

0800b0f0 <_Z41__static_initialization_and_destruction_0ii>:

}
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d10a      	bne.n	800b116 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b106:	4293      	cmp	r3, r2
 800b108:	d105      	bne.n	800b116 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t s_modeMutex = osMutexNew(NULL);
 800b10a:	2000      	movs	r0, #0
 800b10c:	f00a ffcb 	bl	80160a6 <osMutexNew>
 800b110:	4603      	mov	r3, r0
 800b112:	4a03      	ldr	r2, [pc, #12]	; (800b120 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800b114:	6013      	str	r3, [r2, #0]
}
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20000cb4 	.word	0x20000cb4

0800b124 <_GLOBAL__sub_I__ZN7cooling20COOLING_PUMP_CHANNELE>:
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
 800b128:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b12c:	2001      	movs	r0, #1
 800b12e:	f7ff ffdf 	bl	800b0f0 <_Z41__static_initialization_and_destruction_0ii>
 800b132:	bd80      	pop	{r7, pc}

0800b134 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b144:	f04f 0200 	mov.w	r2, #0
 800b148:	f04f 0300 	mov.w	r3, #0
 800b14c:	0c02      	lsrs	r2, r0, #16
 800b14e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b152:	0c0b      	lsrs	r3, r1, #16
 800b154:	4613      	mov	r3, r2
 800b156:	81fb      	strh	r3, [r7, #14]
                return value * (0.036f);
 800b158:	89fb      	ldrh	r3, [r7, #14]
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b162:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b178 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_+0x44>
 800b166:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800b16a:	eeb0 0a67 	vmov.f32	s0, s15
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	3d1374bc 	.word	0x3d1374bc
 800b17c:	00000000 	.word	0x00000000

0800b180 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_>:
            constexpr static inline double get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
                uint32_t value = static_cast<uint32_t>((intel & 0xFFFFFFFF00000000ull) >> 32);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b190:	f04f 0200 	mov.w	r2, #0
 800b194:	f04f 0300 	mov.w	r3, #0
 800b198:	000a      	movs	r2, r1
 800b19a:	2300      	movs	r3, #0
 800b19c:	4613      	mov	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
                return value * (0.001);
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7f5 f9af 	bl	8000504 <__aeabi_ui2d>
 800b1a6:	a308      	add	r3, pc, #32	; (adr r3, 800b1c8 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_+0x48>)
 800b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ac:	f7f5 fa24 	bl	80005f8 <__aeabi_dmul>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	ec43 2b17 	vmov	d7, r2, r3
            }
 800b1b8:	eeb0 0a47 	vmov.f32	s0, s14
 800b1bc:	eef0 0a67 	vmov.f32	s1, s15
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b1cc:	3f50624d 	.word	0x3f50624d

0800b1d0 <_ZN14PressureSensorC1E9AdcModulet>:
#include "AdcChannelController.hpp"

class PressureSensor {
public:

	explicit PressureSensor(AdcModule module, uint16_t rank) : m_adcChannel(module, rank){
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	80fb      	strh	r3, [r7, #6]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	88fa      	ldrh	r2, [r7, #6]
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff fc6c 	bl	800aac2 <_ZN20AdcChannelControllerC1E9AdcModulej>

	}
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <_ZN14PressureSensor3getEv>:

	float get(){
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_adcChannel.get();
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7ff fc79 	bl	800aaf6 <_ZN20AdcChannelController3getEv>
 800b204:	4603      	mov	r3, r0
 800b206:	817b      	strh	r3, [r7, #10]
		float pressure = c1 * avalue + c2;
 800b208:	897b      	ldrh	r3, [r7, #10]
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b212:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800b264 <_ZN14PressureSensor3getEv+0x70>
 800b216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b21a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b21e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b222:	edc7 7a03 	vstr	s15, [r7, #12]
		if(pressure < messageLowerLimit){
 800b226:	edd7 7a03 	vldr	s15, [r7, #12]
 800b22a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800b268 <_ZN14PressureSensor3getEv+0x74>
 800b22e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b236:	d501      	bpl.n	800b23c <_ZN14PressureSensor3getEv+0x48>
			pressure = messageLowerLimit;
 800b238:	4b0c      	ldr	r3, [pc, #48]	; (800b26c <_ZN14PressureSensor3getEv+0x78>)
 800b23a:	60fb      	str	r3, [r7, #12]
		}
		if(pressure > messageUpperLimit){
 800b23c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b240:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800b270 <_ZN14PressureSensor3getEv+0x7c>
 800b244:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24c:	dd01      	ble.n	800b252 <_ZN14PressureSensor3getEv+0x5e>
			pressure = messageUpperLimit;
 800b24e:	4b09      	ldr	r3, [pc, #36]	; (800b274 <_ZN14PressureSensor3getEv+0x80>)
 800b250:	60fb      	str	r3, [r7, #12]
		}
		return pressure;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	ee07 3a90 	vmov	s15, r3
	}
 800b258:	eeb0 0a67 	vmov.f32	s0, s15
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	3bb00b01 	.word	0x3bb00b01
 800b268:	bff33333 	.word	0xbff33333
 800b26c:	bff33333 	.word	0xbff33333
 800b270:	418f3333 	.word	0x418f3333
 800b274:	418f3333 	.word	0x418f3333

0800b278 <_ZN9ImuMaster9getAccelXEv>:

	/**
	 * Get acceleration in X direction of the pod in m/s^2.
	 * @return Acceleration in X direction of the pod in m/s^2.
	 */
	inline float getAccelX() { return m_accelZ; }
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eeb0 0a67 	vmov.f32	s0, s15
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <_ZN9ImuMaster9getAccelYEv>:

	/**
	 * Get acceleration in Y direction of the pod in m/s^2.
	 * @return Acceleration in Y direction of the pod in m/s^2.
	 */
	inline float getAccelY() { return -m_accelY; }
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800b2a6:	eef1 7a67 	vneg.f32	s15, s15
 800b2aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <_ZN9ImuMaster9getAccelZEv>:

	/**
	 * Get acceleration in Z direction of the pod in m/s^2.
	 * @return Acceleration in Z direction of the pod in m/s^2.
	 */
	inline float getAccelZ() { return -m_accelX; }
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800b2c6:	eef1 7a67 	vneg.f32	s15, s15
 800b2ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <_ZN9ImuMaster8getGyroXEv>:

	/**
	 * Get rotation around X axis of the pod in °/s.
	 * @return Rotation around X axis in °/s.
	 */
	inline float getGyroX() { return m_gyroX; }
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b2e6:	ee07 3a90 	vmov	s15, r3
 800b2ea:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <_ZN9ImuMaster8getGyroYEv>:

	/**
	 * Get rotation around Y axis of the pod in °/s.
	 * @return Rotation around Y axis in °/s.
	 */
	inline float getGyroY() { return m_gyroZ; }
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eeb0 0a67 	vmov.f32	s0, s15
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <_ZN9ImuMaster8getGyroZEv>:

	/**
	 * Get rotation around Z axis of the pod in °/s.
	 * @return Rotation around Z axis in °/s.
	 */
	inline float getGyroZ() { return -m_gyroY; }
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800b326:	eef1 7a67 	vneg.f32	s15, s15
 800b32a:	eeb0 0a67 	vmov.f32	s0, s15
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <_ZN14FiducialSensor8getCountEv>:

	[[nodiscard]] float estimatedPosition(){
		return (m_count * m_distanceBetweenInterrupts) / 1000.0;
	}

	[[nodiscard]] inline unsigned int getCount() {
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
		return m_count;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	69db      	ldr	r3, [r3, #28]
	}
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <_ZZN17KistlerControllerC4EvENKUlR9RxMessageE_clES1_>:
#include "canzero.hpp"

class KistlerController {
public:
	explicit KistlerController(){
		m_receiverId = can::registerMessageReceiver<can::messages::OpticalSensor_TX_MainData>([this](RxMessage& msg){
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
			this->callback(msg);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f000 f876 	bl	800b452 <_ZN17KistlerController8callbackER9RxMessage>
		});
 800b366:	bf00      	nop
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
	...

0800b370 <_ZN17KistlerControllerC1Ev>:
	explicit KistlerController(){
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a0f      	ldr	r2, [pc, #60]	; (800b3b8 <_ZN17KistlerControllerC1Ev+0x48>)
 800b37c:	605a      	str	r2, [r3, #4]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a0d      	ldr	r2, [pc, #52]	; (800b3b8 <_ZN17KistlerControllerC1Ev+0x48>)
 800b382:	609a      	str	r2, [r3, #8]
		m_receiverId = can::registerMessageReceiver<can::messages::OpticalSensor_TX_MainData>([this](RxMessage& msg){
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	f107 0308 	add.w	r3, r7, #8
 800b38a:	4611      	mov	r1, r2
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 f945 	bl	800b61c <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_>
 800b392:	f107 0308 	add.w	r3, r7, #8
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f96a 	bl	800b670 <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE>
 800b39c:	4602      	mov	r2, r0
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	f107 0308 	add.w	r3, r7, #8
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f6 f874 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	c2c80000 	.word	0xc2c80000

0800b3bc <_ZN17KistlerController11getVelocityEv>:
	KistlerController(KistlerController&) = delete;
	KistlerController(KistlerController&&) = delete;
	KistlerController& operator=(KistlerController&) = delete;
	KistlerController& operator=(KistlerController&&) = delete;

	[[nodiscard]] inline float getVelocity(){
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
		return m_velocity;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	ee07 3a90 	vmov	s15, r3
	}
 800b3cc:	eeb0 0a67 	vmov.f32	s0, s15
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <_ZN17KistlerController11getPositionEv>:

	[[nodiscard]] inline float getPosition(){
 800b3da:	b480      	push	{r7}
 800b3dc:	b083      	sub	sp, #12
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
		return m_position;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	ee07 3a90 	vmov	s15, r3
	}
 800b3ea:	eeb0 0a67 	vmov.f32	s0, s15
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af02      	add	r7, sp, #8
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	2301      	movs	r3, #1
 800b40c:	2208      	movs	r2, #8
 800b40e:	4907      	ldr	r1, [pc, #28]	; (800b42c <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x34>)
 800b410:	f7f6 ffed 	bl	80023ee <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.ExtId != MESSAGE_T::id) {
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	685b      	ldr	r3, [r3, #4]
            if(MESSAGE_T::isExtendedId) {
 800b418:	4a04      	ldr	r2, [pc, #16]	; (800b42c <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x34>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d000      	beq.n	800b420 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
                    while(1);
 800b41e:	e7fe      	b.n	800b41e <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x26>
        };
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	1ffffffa 	.word	0x1ffffffa

0800b430 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	331c      	adds	r3, #28
 800b440:	461a      	mov	r2, r3
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff ffd8 	bl	800b3f8 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <_ZN17KistlerController8callbackER9RxMessage>:

private:

	void callback(RxMessage& raw){
 800b452:	b580      	push	{r7, lr}
 800b454:	b088      	sub	sp, #32
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::OpticalSensor_TX_MainData> msg {raw};
 800b45c:	f107 0308 	add.w	r3, r7, #8
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff ffe4 	bl	800b430 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK9RxMessage>
		m_velocity = msg.get<can::signals::OpticalSensor_TX_Vel>();
 800b468:	f107 0308 	add.w	r3, r7, #8
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 f91f 	bl	800b6b0 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals20OpticalSensor_TX_VelEEENT_8dataTypeEv>
 800b472:	eef0 7a40 	vmov.f32	s15, s0
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	edc3 7a01 	vstr	s15, [r3, #4]
		m_position = msg.get<can::signals::OpticalSensor_TX_Distance>();
 800b47c:	f107 0308 	add.w	r3, r7, #8
 800b480:	4618      	mov	r0, r3
 800b482:	f000 f929 	bl	800b6d8 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals25OpticalSensor_TX_DistanceEEENT_8dataTypeEv>
 800b486:	ec53 2b10 	vmov	r2, r3, d0
 800b48a:	4610      	mov	r0, r2
 800b48c:	4619      	mov	r1, r3
 800b48e:	f7f5 fbab 	bl	8000be8 <__aeabi_d2f>
 800b492:	4602      	mov	r2, r0
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	609a      	str	r2, [r3, #8]
	}
 800b498:	bf00      	nop
 800b49a:	3720      	adds	r7, #32
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <main_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void main_entry(void *argv) {
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b0fe      	sub	sp, #504	; 0x1f8
 800b4a4:	af02      	add	r7, sp, #8
 800b4a6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800b4aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800b4ae:	6018      	str	r0, [r3, #0]
	pdu::init();
 800b4b0:	f001 fb9e 	bl	800cbf0 <_ZN3pdu4initEv>
	//TODO initalize peripherals.
	ImuMaster imuMaster;
 800b4b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fe fd8b 	bl	8009fd4 <_ZN9ImuMasterC1Ev>

	PressureSensor pressureSensor(ADC_MODULE2, 3);
 800b4be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b4c2:	2203      	movs	r2, #3
 800b4c4:	2101      	movs	r1, #1
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7ff fe82 	bl	800b1d0 <_ZN14PressureSensorC1E9AdcModulet>

	FiducialSensor fiducialRight = FiducialSensor(
			g_peripherals.m_fiducialRightConfig);
 800b4cc:	4b52      	ldr	r3, [pc, #328]	; (800b618 <main_entry+0x178>)
 800b4ce:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800b4d2:	68da      	ldr	r2, [r3, #12]
 800b4d4:	9200      	str	r2, [sp, #0]
 800b4d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4d8:	f7fd fb44 	bl	8008b64 <_ZN14FiducialSensorC1E14FiducialConfig>
	FiducialSensor fiducialLeft = FiducialSensor(
			g_peripherals.m_fiducialLeftConfig);
 800b4dc:	4b4e      	ldr	r3, [pc, #312]	; (800b618 <main_entry+0x178>)
 800b4de:	f107 0014 	add.w	r0, r7, #20
 800b4e2:	69da      	ldr	r2, [r3, #28]
 800b4e4:	9200      	str	r2, [sp, #0]
 800b4e6:	3310      	adds	r3, #16
 800b4e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4ea:	f7fd fb3b 	bl	8008b64 <_ZN14FiducialSensorC1E14FiducialConfig>
	KistlerController kistlerController;
 800b4ee:	f107 0308 	add.w	r3, r7, #8
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7ff ff3c 	bl	800b370 <_ZN17KistlerControllerC1Ev>

	imuMaster.start();
 800b4f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fe fe0d 	bl	800a11c <_ZN9ImuMaster5startEv>

	while (true) {
		//TODO read sensor data.
		imuMaster.syncRead();
 800b502:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b506:	4618      	mov	r0, r3
 800b508:	f7fe fe86 	bl	800a218 <_ZN9ImuMaster8syncReadEv>
		OD_IMU_AccelX_set(imuMaster.getAccelX());
 800b50c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b510:	4618      	mov	r0, r3
 800b512:	f7ff feb1 	bl	800b278 <_ZN9ImuMaster9getAccelXEv>
 800b516:	eef0 7a40 	vmov.f32	s15, s0
 800b51a:	eeb0 0a67 	vmov.f32	s0, s15
 800b51e:	f7fb fdeb 	bl	80070f8 <_Z17OD_IMU_AccelX_setf>
		OD_IMU_AccelY_set(imuMaster.getAccelY());
 800b522:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b526:	4618      	mov	r0, r3
 800b528:	f7ff feb6 	bl	800b298 <_ZN9ImuMaster9getAccelYEv>
 800b52c:	eef0 7a40 	vmov.f32	s15, s0
 800b530:	eeb0 0a67 	vmov.f32	s0, s15
 800b534:	f7fb fe1a 	bl	800716c <_Z17OD_IMU_AccelY_setf>
		OD_IMU_AccelZ_set(imuMaster.getAccelZ());
 800b538:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff febb 	bl	800b2b8 <_ZN9ImuMaster9getAccelZEv>
 800b542:	eef0 7a40 	vmov.f32	s15, s0
 800b546:	eeb0 0a67 	vmov.f32	s0, s15
 800b54a:	f7fb fe49 	bl	80071e0 <_Z17OD_IMU_AccelZ_setf>

		OD_IMU_GyroX_set(imuMaster.getGyroX());
 800b54e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff fec0 	bl	800b2d8 <_ZN9ImuMaster8getGyroXEv>
 800b558:	eef0 7a40 	vmov.f32	s15, s0
 800b55c:	eeb0 0a67 	vmov.f32	s0, s15
 800b560:	f7fb fe78 	bl	8007254 <_Z16OD_IMU_GyroX_setf>
		OD_IMU_GyroY_set(imuMaster.getGyroY());
 800b564:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b568:	4618      	mov	r0, r3
 800b56a:	f7ff fec5 	bl	800b2f8 <_ZN9ImuMaster8getGyroYEv>
 800b56e:	eef0 7a40 	vmov.f32	s15, s0
 800b572:	eeb0 0a67 	vmov.f32	s0, s15
 800b576:	f7fb fea7 	bl	80072c8 <_Z16OD_IMU_GyroY_setf>
		OD_IMU_GyroZ_set(imuMaster.getGyroZ());
 800b57a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff feca 	bl	800b318 <_ZN9ImuMaster8getGyroZEv>
 800b584:	eef0 7a40 	vmov.f32	s15, s0
 800b588:	eeb0 0a67 	vmov.f32	s0, s15
 800b58c:	f7fb fed6 	bl	800733c <_Z16OD_IMU_GyroZ_setf>

		OD_CoolingPressure_set(pressureSensor.get());
 800b590:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff fe2d 	bl	800b1f4 <_ZN14PressureSensor3getEv>
 800b59a:	eef0 7a40 	vmov.f32	s15, s0
 800b59e:	eeb0 0a67 	vmov.f32	s0, s15
 800b5a2:	f7fb ff05 	bl	80073b0 <_Z22OD_CoolingPressure_setf>

		unsigned int fiducialLeftCounter = fiducialLeft.getCount();
 800b5a6:	f107 0314 	add.w	r3, r7, #20
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff fec4 	bl	800b338 <_ZN14FiducialSensor8getCountEv>
 800b5b0:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
		OD_FiducialLeftCounter_set((uint16_t)fiducialLeftCounter);
 800b5b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fb ff68 	bl	8007490 <_Z26OD_FiducialLeftCounter_sett>

		unsigned int fiducialRightCounter = fiducialRight.getCount();
 800b5c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7ff feb7 	bl	800b338 <_ZN14FiducialSensor8getCountEv>
 800b5ca:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
		OD_FiducialRightCounter_set((uint16_t)fiducialRightCounter);
 800b5ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fb ff23 	bl	8007420 <_Z27OD_FiducialRightCounter_sett>

		float kistlerVel = kistlerController.getVelocity();
 800b5da:	f107 0308 	add.w	r3, r7, #8
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7ff feec 	bl	800b3bc <_ZN17KistlerController11getVelocityEv>
 800b5e4:	ed87 0a79 	vstr	s0, [r7, #484]	; 0x1e4
		float kistlerPos = kistlerController.getPosition();
 800b5e8:	f107 0308 	add.w	r3, r7, #8
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff fef4 	bl	800b3da <_ZN17KistlerController11getPositionEv>
 800b5f2:	ed87 0a78 	vstr	s0, [r7, #480]	; 0x1e0

		OD_Position_set(kistlerPos);
 800b5f6:	ed97 0a78 	vldr	s0, [r7, #480]	; 0x1e0
 800b5fa:	f7fb ff83 	bl	8007504 <_Z15OD_Position_setf>
		OD_Velocity_set(kistlerVel);
 800b5fe:	ed97 0a79 	vldr	s0, [r7, #484]	; 0x1e4
 800b602:	f7fb ffb9 	bl	8007578 <_Z15OD_Velocity_setf>


		cooling::update();
 800b606:	f7ff fd27 	bl	800b058 <_ZN7cooling6updateEv>
		pdu::update();
 800b60a:	f001 fb6d 	bl	800cce8 <_ZN3pdu6updateEv>
		// ======= POSITION-ESTIMATION ======
		osDelay(pdMS_TO_TICKS(1000));
 800b60e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b612:	f00a fd2d 	bl	8016070 <osDelay>

	}
 800b616:	e774      	b.n	800b502 <main_entry+0x62>
 800b618:	0801daa0 	.word	0x0801daa0

0800b61c <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4618      	mov	r0, r3
 800b62a:	f7f5 ff01 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800b62e:	463b      	mov	r3, r7
 800b630:	4618      	mov	r0, r3
 800b632:	f000 f869 	bl	800b708 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00f      	beq.n	800b65c <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800b63c:	687c      	ldr	r4, [r7, #4]
 800b63e:	463b      	mov	r3, r7
 800b640:	4618      	mov	r0, r3
 800b642:	f000 f86c 	bl	800b71e <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800b646:	4603      	mov	r3, r0
 800b648:	4619      	mov	r1, r3
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 f872 	bl	800b734 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a05      	ldr	r2, [pc, #20]	; (800b668 <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x4c>)
 800b654:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a04      	ldr	r2, [pc, #16]	; (800b66c <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x50>)
 800b65a:	609a      	str	r2, [r3, #8]
      }
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4618      	mov	r0, r3
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	bd90      	pop	{r4, r7, pc}
 800b666:	bf00      	nop
 800b668:	0800b759 	.word	0x0800b759
 800b66c:	0800b783 	.word	0x0800b783

0800b670 <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE>:
}

namespace can {

template<typename MESSAGE>
inline unsigned int registerMessageReceiver(
 800b670:	b590      	push	{r4, r7, lr}
 800b672:	b087      	sub	sp, #28
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
		std::function<void(RxMessage&)> receiver) {
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800b678:	f107 0308 	add.w	r3, r7, #8
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	4618      	mov	r0, r3
 800b680:	f7f6 f813 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800b684:	f107 0308 	add.w	r3, r7, #8
 800b688:	2201      	movs	r2, #1
 800b68a:	4908      	ldr	r1, [pc, #32]	; (800b6ac <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE+0x3c>)
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7f5 ff45 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800b692:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800b694:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800b696:	f107 0308 	add.w	r3, r7, #8
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7f5 fefa 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800b6a0:	4623      	mov	r3, r4
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	371c      	adds	r7, #28
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd90      	pop	{r4, r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	1ffffffa 	.word	0x1ffffffa

0800b6b0 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals20OpticalSensor_TX_VelEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f103 0208 	add.w	r2, r3, #8
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3310      	adds	r3, #16
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f7ff fd35 	bl	800b134 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_>
 800b6ca:	eef0 7a40 	vmov.f32	s15, s0
        }
 800b6ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals25OpticalSensor_TX_DistanceEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f103 0208 	add.w	r2, r3, #8
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3310      	adds	r3, #16
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	f7ff fd47 	bl	800b180 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_>
 800b6f2:	eeb0 7a40 	vmov.f32	s14, s0
 800b6f6:	eef0 7a60 	vmov.f32	s15, s1
        }
 800b6fa:	eeb0 0a47 	vmov.f32	s0, s14
 800b6fe:	eef0 0a67 	vmov.f32	s1, s15
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	  { return true; }
 800b710:	2301      	movs	r3, #1
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4618      	mov	r0, r3
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800b734:	b590      	push	{r4, r7, lr}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800b73e:	6838      	ldr	r0, [r7, #0]
 800b740:	f7ff ffed 	bl	800b71e <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800b744:	4603      	mov	r3, r0
 800b746:	4622      	mov	r2, r4
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f838 	bl	800b7c0 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	bd90      	pop	{r4, r7, pc}

0800b758 <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800b758:	b590      	push	{r4, r7, lr}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f845 	bl	800b7f2 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800b768:	4604      	mov	r4, r0
 800b76a:	6838      	ldr	r0, [r7, #0]
 800b76c:	f7f6 f827 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800b770:	4603      	mov	r3, r0
 800b772:	4619      	mov	r1, r3
 800b774:	4620      	mov	r0, r4
 800b776:	f000 f84d 	bl	800b814 <_ZSt10__invoke_rIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800b77a:	bf00      	nop
      }
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd90      	pop	{r4, r7, pc}

0800b782 <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800b782:	b590      	push	{r4, r7, lr}
 800b784:	b085      	sub	sp, #20
 800b786:	af00      	add	r7, sp, #0
 800b788:	60f8      	str	r0, [r7, #12]
 800b78a:	60b9      	str	r1, [r7, #8]
 800b78c:	4613      	mov	r3, r2
 800b78e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d109      	bne.n	800b7aa <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 f852 	bl	800b840 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
 800b79c:	4604      	mov	r4, r0
 800b79e:	68b8      	ldr	r0, [r7, #8]
 800b7a0:	f000 f827 	bl	800b7f2 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	6023      	str	r3, [r4, #0]
	    break;
 800b7a8:	e005      	b.n	800b7b6 <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800b7aa:	79fb      	ldrb	r3, [r7, #7]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	68b9      	ldr	r1, [r7, #8]
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f000 f851 	bl	800b858 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800b7b6:	2300      	movs	r3, #0
      }
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd90      	pop	{r4, r7, pc}

0800b7c0 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800b7c0:	b590      	push	{r4, r7, lr}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800b7cc:	68b8      	ldr	r0, [r7, #8]
 800b7ce:	f7ff ffa6 	bl	800b71e <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f7fc ff81 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	4619      	mov	r1, r3
 800b7de:	2004      	movs	r0, #4
 800b7e0:	f7fc ff70 	bl	80086c4 <_ZnwjPv>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	6013      	str	r3, [r2, #0]
 800b7ea:	bf00      	nop
 800b7ec:	3714      	adds	r7, #20
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd90      	pop	{r4, r7, pc}

0800b7f2 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f857 	bl	800b8ae <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>
 800b800:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f000 f85f 	bl	800b8c6 <_ZSt11__addressofIKZN17KistlerControllerC4EvEUlR9RxMessageE_EPT_RS5_>
 800b808:	4603      	mov	r3, r0
 800b80a:	bf00      	nop
	}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <_ZSt10__invoke_rIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800b814:	b5b0      	push	{r4, r5, r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f85c 	bl	800b8dc <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800b824:	4604      	mov	r4, r0
 800b826:	6838      	ldr	r0, [r7, #0]
 800b828:	f7f5 ffc9 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800b82c:	4603      	mov	r3, r0
 800b82e:	461a      	mov	r2, r3
 800b830:	4621      	mov	r1, r4
 800b832:	4628      	mov	r0, r5
 800b834:	f000 f85d 	bl	800b8f2 <_ZSt13__invoke_implIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bdb0      	pop	{r4, r5, r7, pc}

0800b840 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7fc ff47 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800b84e:	4603      	mov	r3, r0
 800b850:	4618      	mov	r0, r3
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800b858:	b5b0      	push	{r4, r5, r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	4613      	mov	r3, r2
 800b864:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800b866:	79fb      	ldrb	r3, [r7, #7]
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d016      	beq.n	800b89a <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	dc19      	bgt.n	800b8a4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800b870:	2b01      	cmp	r3, #1
 800b872:	d002      	beq.n	800b87a <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800b874:	2b02      	cmp	r3, #2
 800b876:	d00a      	beq.n	800b88e <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800b878:	e014      	b.n	800b8a4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7ff ffe0 	bl	800b840 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
 800b880:	4604      	mov	r4, r0
 800b882:	68b8      	ldr	r0, [r7, #8]
 800b884:	f7ff ffb5 	bl	800b7f2 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800b888:	4603      	mov	r3, r0
 800b88a:	6023      	str	r3, [r4, #0]
	      break;
 800b88c:	e00a      	b.n	800b8a4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800b88e:	462a      	mov	r2, r5
 800b890:	68b9      	ldr	r1, [r7, #8]
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f000 f843 	bl	800b91e <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800b898:	e004      	b.n	800b8a4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800b89a:	4621      	mov	r1, r4
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 f857 	bl	800b950 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800b8a2:	bf00      	nop
	  return false;
 800b8a4:	2300      	movs	r3, #0
	}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bdb0      	pop	{r4, r5, r7, pc}

0800b8ae <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7fc ff1b 	bl	80086f2 <_ZNKSt9_Any_data9_M_accessEv>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <_ZSt11__addressofIKZN17KistlerControllerC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	370c      	adds	r7, #12
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <_ZSt13__invoke_implIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800b8f2:	b590      	push	{r4, r7, lr}
 800b8f4:	b085      	sub	sp, #20
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	7338      	strb	r0, [r7, #12]
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800b8fe:	68b8      	ldr	r0, [r7, #8]
 800b900:	f7ff ffec 	bl	800b8dc <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800b904:	4604      	mov	r4, r0
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f7f5 ff59 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800b90c:	4603      	mov	r3, r0
 800b90e:	4619      	mov	r1, r3
 800b910:	4620      	mov	r0, r4
 800b912:	f7ff fd1d 	bl	800b350 <_ZZN17KistlerControllerC4EvENKUlR9RxMessageE_clES1_>
 800b916:	bf00      	nop
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd90      	pop	{r4, r7, pc}

0800b91e <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800b91e:	b590      	push	{r4, r7, lr}
 800b920:	b085      	sub	sp, #20
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800b92a:	68b8      	ldr	r0, [r7, #8]
 800b92c:	f7ff ffbf 	bl	800b8ae <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>
 800b930:	4604      	mov	r4, r0
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f7fc fed2 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800b938:	4603      	mov	r3, r0
 800b93a:	4619      	mov	r1, r3
 800b93c:	2004      	movs	r0, #4
 800b93e:	f7fc fec1 	bl	80086c4 <_ZnwjPv>
 800b942:	4602      	mov	r2, r0
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	6013      	str	r3, [r2, #0]
	}
 800b948:	bf00      	nop
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd90      	pop	{r4, r7, pc}

0800b950 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f804 	bl	800b968 <_ZNSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
	}
 800b960:	bf00      	nop
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <_ZNSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7fc feb3 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800b976:	4603      	mov	r3, r0
 800b978:	4618      	mov	r0, r3
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>:
#include <cmath>
#include "canzero.hpp"

class OnBoardSensors {
public:
	explicit OnBoardSensors(OnBoardTemperaturConfig config) :
 800b980:	b084      	sub	sp, #16
 800b982:	b5b0      	push	{r4, r5, r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	f107 001c 	add.w	r0, r7, #28
 800b98e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			m_internalNTC(config.m_internalNTCConfig.m_adc.m_module,
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
					config.m_externalNTCConfig.m_adc.m_module,
					config.m_externalNTCConfig.m_adc.m_rank),
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
					m_config(config) {
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	69f9      	ldr	r1, [r7, #28]
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
 800b996:	8c3a      	ldrh	r2, [r7, #32]
					m_config(config) {
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff f892 	bl	800aac2 <_ZN20AdcChannelControllerC1E9AdcModulej>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
					config.m_externalNTCConfig.m_adc.m_rank),
 800b9a4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
					m_config(config) {
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff f88b 	bl	800aac2 <_ZN20AdcChannelControllerC1E9AdcModulej>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	3310      	adds	r3, #16
 800b9b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
 800b9b2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
					m_config(config) {
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff f883 	bl	800aac2 <_ZN20AdcChannelControllerC1E9AdcModulej>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f103 0418 	add.w	r4, r3, #24
 800b9c2:	f107 051c 	add.w	r5, r7, #28
 800b9c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b9d6:	e884 0003 	stmia.w	r4, {r0, r1}
	}
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b9e6:	b004      	add	sp, #16
 800b9e8:	4770      	bx	lr
	...

0800b9ec <_ZN14OnBoardSensors22getInternalTemperaturCEv>:

	float getInternalTemperaturC(){
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_internalNTC.get();
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff f87d 	bl	800aaf6 <_ZN20AdcChannelController3getEv>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	81fb      	strh	r3, [r7, #14]
		float internalTemp = (3.3f * (float) avalue/4095.0f - 0.76f) / 0.0025f + 25.0f;
 800ba00:	89fb      	ldrh	r3, [r7, #14]
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba0a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800ba48 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x5c>
 800ba0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ba12:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800ba4c <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x60>
 800ba16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800ba50 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x64>
 800ba1e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ba22:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800ba54 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x68>
 800ba26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba2a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800ba2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba32:	edc7 7a02 	vstr	s15, [r7, #8]
		return internalTemp;
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	ee07 3a90 	vmov	s15, r3
	}
 800ba3c:	eeb0 0a67 	vmov.f32	s0, s15
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	40533333 	.word	0x40533333
 800ba4c:	457ff000 	.word	0x457ff000
 800ba50:	3f428f5c 	.word	0x3f428f5c
 800ba54:	3b23d70a 	.word	0x3b23d70a

0800ba58 <_ZN14OnBoardSensors22getExternalTemperaturCEv>:

	float getExternalTemperaturC(){
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_externalNTC.get();
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3308      	adds	r3, #8
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff f846 	bl	800aaf6 <_ZN20AdcChannelController3getEv>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	81fb      	strh	r3, [r7, #14]
		float ntcTemperature = 1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * log(1.0f / (4095.0f / (float) avalue - 1.0f) )) - 273.15f;
 800ba6e:	89fb      	ldrh	r3, [r7, #14]
 800ba70:	ee07 3a90 	vmov	s15, r3
 800ba74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba78:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bb20 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc8>
 800ba7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ba90:	ee16 0a90 	vmov	r0, s13
 800ba94:	f7f4 fd58 	bl	8000548 <__aeabi_f2d>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	ec43 2b10 	vmov	d0, r2, r3
 800baa0:	f00e fdae 	bl	801a600 <log>
 800baa4:	ec51 0b10 	vmov	r0, r1, d0
 800baa8:	a317      	add	r3, pc, #92	; (adr r3, 800bb08 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb0>)
 800baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baae:	f7f4 fda3 	bl	80005f8 <__aeabi_dmul>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	4610      	mov	r0, r2
 800bab8:	4619      	mov	r1, r3
 800baba:	a315      	add	r3, pc, #84	; (adr r3, 800bb10 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb8>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	f7f4 fbe4 	bl	800028c <__adddf3>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	f04f 0000 	mov.w	r0, #0
 800bacc:	4915      	ldr	r1, [pc, #84]	; (800bb24 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xcc>)
 800bace:	f7f4 febd 	bl	800084c <__aeabi_ddiv>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4610      	mov	r0, r2
 800bad8:	4619      	mov	r1, r3
 800bada:	a30f      	add	r3, pc, #60	; (adr r3, 800bb18 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc0>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fbd2 	bl	8000288 <__aeabi_dsub>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4610      	mov	r0, r2
 800baea:	4619      	mov	r1, r3
 800baec:	f7f5 f87c 	bl	8000be8 <__aeabi_d2f>
 800baf0:	4603      	mov	r3, r0
 800baf2:	60bb      	str	r3, [r7, #8]
		return ntcTemperature;
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	ee07 3a90 	vmov	s15, r3
	}
 800bafa:	eeb0 0a67 	vmov.f32	s0, s15
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	f3af 8000 	nop.w
 800bb08:	60000000 	.word	0x60000000
 800bb0c:	3f3363ac 	.word	0x3f3363ac
 800bb10:	e0000000 	.word	0xe0000000
 800bb14:	3f6b79e1 	.word	0x3f6b79e1
 800bb18:	60000000 	.word	0x60000000
 800bb1c:	40711266 	.word	0x40711266
 800bb20:	457ff000 	.word	0x457ff000
 800bb24:	3ff00000 	.word	0x3ff00000

0800bb28 <_ZN14OnBoardSensors21getAverageTemperaturCEv>:

	float getAverageTemperaturC(){
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	ed2d 8b02 	vpush	{d8}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
		float average = (getExternalTemperaturC() + getInternalTemperaturC() ) / 2.0;
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff ff8f 	bl	800ba58 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 800bb3a:	eeb0 8a40 	vmov.f32	s16, s0
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7ff ff54 	bl	800b9ec <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 800bb44:	eef0 7a40 	vmov.f32	s15, s0
 800bb48:	ee78 7a27 	vadd.f32	s15, s16, s15
 800bb4c:	ee17 0a90 	vmov	r0, s15
 800bb50:	f7f4 fcfa 	bl	8000548 <__aeabi_f2d>
 800bb54:	f04f 0200 	mov.w	r2, #0
 800bb58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb5c:	f7f4 fe76 	bl	800084c <__aeabi_ddiv>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4610      	mov	r0, r2
 800bb66:	4619      	mov	r1, r3
 800bb68:	f7f5 f83e 	bl	8000be8 <__aeabi_d2f>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	60fb      	str	r3, [r7, #12]
		return average;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	ee07 3a90 	vmov	s15, r3
	}
 800bb76:	eeb0 0a67 	vmov.f32	s0, s15
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	ecbd 8b02 	vpop	{d8}
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <_ZN14OnBoardSensors15getInputVoltageEv>:

	float getInputVoltage() {
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_inputVoltage.get();
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	3310      	adds	r3, #16
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe ffb0 	bl	800aaf6 <_ZN20AdcChannelController3getEv>
 800bb96:	4603      	mov	r3, r0
 800bb98:	81fb      	strh	r3, [r7, #14]
		float inputVoltage = (float)avalue/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 800bb9a:	89fb      	ldrh	r3, [r7, #14]
 800bb9c:	ee07 3a90 	vmov	s15, r3
 800bba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bba4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800bbd8 <_ZN14OnBoardSensors15getInputVoltageEv+0x54>
 800bba8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bbac:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800bbdc <_ZN14OnBoardSensors15getInputVoltageEv+0x58>
 800bbb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bbb4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800bbe0 <_ZN14OnBoardSensors15getInputVoltageEv+0x5c>
 800bbb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bbbc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800bbe4 <_ZN14OnBoardSensors15getInputVoltageEv+0x60>
 800bbc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbc4:	edc7 7a02 	vstr	s15, [r7, #8]
		return inputVoltage;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	ee07 3a90 	vmov	s15, r3
	}
 800bbce:	eeb0 0a67 	vmov.f32	s0, s15
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	457ff000 	.word	0x457ff000
 800bbdc:	40533333 	.word	0x40533333
 800bbe0:	3dda09cc 	.word	0x3dda09cc
 800bbe4:	3f19999a 	.word	0x3f19999a

0800bbe8 <_ZN14OnBoardSensors9updateODsEv>:

	void updateODs(){
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
		float temp = getAverageTemperaturC();
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff ff99 	bl	800bb28 <_ZN14OnBoardSensors21getAverageTemperaturCEv>
 800bbf6:	ed87 0a03 	vstr	s0, [r7, #12]
		float vBat = getInputVoltage();
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7ff ffc2 	bl	800bb84 <_ZN14OnBoardSensors15getInputVoltageEv>
 800bc00:	ed87 0a02 	vstr	s0, [r7, #8]
		OD_BoardTemp_set(temp);
 800bc04:	ed97 0a03 	vldr	s0, [r7, #12]
 800bc08:	f7fa fccc 	bl	80065a4 <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(vBat);
 800bc0c:	ed97 0a02 	vldr	s0, [r7, #8]
 800bc10:	f7fa fd02 	bl	8006618 <_Z19OD_InputVoltage_setf>
	}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <_ZL18estimateFreeMemoryv>:
#include "canzero.hpp"
#include "FreeRTOS.h"
#include "cmsis_os.h"
#include "task.h"

static inline size_t estimateFreeMemory() {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	af00      	add	r7, sp, #0
	return xPortGetFreeHeapSize();
 800bc20:	f00e fbcc 	bl	801a3bc <xPortGetFreeHeapSize>
 800bc24:	4603      	mov	r3, r0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	bd80      	pop	{r7, pc}
	...

0800bc2c <_ZL16estimateCPUusagev>:


static inline float estimateCPUusage() {
 800bc2c:	b480      	push	{r7}
 800bc2e:	af00      	add	r7, sp, #0
	}
	g_oldIdleTick = xTaskGetIdleRunTimeCounter();
	g_oldTotalTick = portGET_RUN_TIME_COUNTER_VALUE();
	return cpuUsage;
	*/
	return 80.0;
 800bc30:	4b04      	ldr	r3, [pc, #16]	; (800bc44 <_ZL16estimateCPUusagev+0x18>)
 800bc32:	ee07 3a90 	vmov	s15, r3
}
 800bc36:	eeb0 0a67 	vmov.f32	s0, s15
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	42a00000 	.word	0x42a00000

0800bc48 <microcontroller_info_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void microcontroller_info_entry(void *argv) {
 800bc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc4a:	b0a7      	sub	sp, #156	; 0x9c
 800bc4c:	af0c      	add	r7, sp, #48	; 0x30
 800bc4e:	6078      	str	r0, [r7, #4]
	OnBoardSensors onBoardSensors(g_peripherals.m_onBoardTemperaturConfig);
 800bc50:	4e19      	ldr	r6, [pc, #100]	; (800bcb8 <microcontroller_info_entry+0x70>)
 800bc52:	f107 0c0c 	add.w	ip, r7, #12
 800bc56:	466d      	mov	r5, sp
 800bc58:	f106 0464 	add.w	r4, r6, #100	; 0x64
 800bc5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc64:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bc68:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800bc6c:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800bc70:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc72:	4660      	mov	r0, ip
 800bc74:	f7ff fe84 	bl	800b980 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>
	unsigned int frameCounter;
	while (true) {
		onBoardSensors.updateODs();
 800bc78:	f107 030c 	add.w	r3, r7, #12
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff ffb3 	bl	800bbe8 <_ZN14OnBoardSensors9updateODsEv>
		if (frameCounter > 20) {
 800bc82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc84:	2b14      	cmp	r3, #20
 800bc86:	d90f      	bls.n	800bca8 <microcontroller_info_entry+0x60>
			float cpuUsage = estimateCPUusage();
 800bc88:	f7ff ffd0 	bl	800bc2c <_ZL16estimateCPUusagev>
 800bc8c:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
			OD_CpuUsage_set(cpuUsage);
 800bc90:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800bc94:	f7fa fc14 	bl	80064c0 <_Z15OD_CpuUsage_setf>
			size_t freeMemory = estimateFreeMemory();
 800bc98:	f7ff ffc0 	bl	800bc1c <_ZL18estimateFreeMemoryv>
 800bc9c:	65f8      	str	r0, [r7, #92]	; 0x5c
			OD_MemFree_set(freeMemory);
 800bc9e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bca0:	f7fa fc46 	bl	8006530 <_Z14OD_MemFree_setm>
			frameCounter = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	667b      	str	r3, [r7, #100]	; 0x64
		}
		frameCounter++;
 800bca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcaa:	3301      	adds	r3, #1
 800bcac:	667b      	str	r3, [r7, #100]	; 0x64
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
 800bcae:	2032      	movs	r0, #50	; 0x32
 800bcb0:	f00a f9de 	bl	8016070 <osDelay>
	}
 800bcb4:	e7e0      	b.n	800bc78 <microcontroller_info_entry+0x30>
 800bcb6:	bf00      	nop
 800bcb8:	0801db38 	.word	0x0801db38

0800bcbc <_ZN3can7signals14PDU_TX_Enabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1ull));
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bccc:	f000 0201 	and.w	r2, r0, #1
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bf14      	ite	ne
 800bcd8:	2301      	movne	r3, #1
 800bcda:	2300      	moveq	r3, #0
 800bcdc:	73fb      	strb	r3, [r7, #15]
                return value;
 800bcde:	7bfb      	ldrb	r3, [r7, #15]
            }
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <_ZN3can7signals18PDU_TX_PEHWEnabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcfc:	f000 0204 	and.w	r2, r0, #4
 800bd00:	2300      	movs	r3, #0
 800bd02:	4313      	orrs	r3, r2
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	bf14      	ite	ne
 800bd08:	2301      	movne	r3, #1
 800bd0a:	2300      	moveq	r3, #0
 800bd0c:	73fb      	strb	r3, [r7, #15]
                return value;
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
            }
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <_ZN3can7signals13PDU_RX_Enable3setERyS2_Rhb>:
        class PDU_RX_Enable {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800bd1c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800bd20:	b087      	sub	sp, #28
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	60f8      	str	r0, [r7, #12]
 800bd26:	60b9      	str	r1, [r7, #8]
 800bd28:	607a      	str	r2, [r7, #4]
 800bd2a:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800bd2c:	78fb      	ldrb	r3, [r7, #3]
 800bd2e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	7df9      	ldrb	r1, [r7, #23]
 800bd38:	2900      	cmp	r1, #0
 800bd3a:	bf14      	ite	ne
 800bd3c:	2101      	movne	r1, #1
 800bd3e:	2100      	moveq	r1, #0
 800bd40:	b2c9      	uxtb	r1, r1
 800bd42:	b2c9      	uxtb	r1, r1
 800bd44:	2000      	movs	r0, #0
 800bd46:	460c      	mov	r4, r1
 800bd48:	4605      	mov	r5, r0
 800bd4a:	ea42 0804 	orr.w	r8, r2, r4
 800bd4e:	ea43 0905 	orr.w	r9, r3, r5
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800bd58:	bf00      	nop
 800bd5a:	371c      	adds	r7, #28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800bd62:	4770      	bx	lr

0800bd64 <_ZN3can7signals17PDU_RX_PEHWEnable3setERyS2_Rhb>:
        class PDU_RX_PEHWEnable {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800bd64:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bd68:	b087      	sub	sp, #28
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	60f8      	str	r0, [r7, #12]
 800bd6e:	60b9      	str	r1, [r7, #8]
 800bd70:	607a      	str	r2, [r7, #4]
 800bd72:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800bd74:	78fb      	ldrb	r3, [r7, #3]
 800bd76:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd7e:	7dfb      	ldrb	r3, [r7, #23]
 800bd80:	2200      	movs	r2, #0
 800bd82:	4698      	mov	r8, r3
 800bd84:	4691      	mov	r9, r2
 800bd86:	f04f 0200 	mov.w	r2, #0
 800bd8a:	f04f 0300 	mov.w	r3, #0
 800bd8e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800bd92:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800bd96:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800bd9a:	f002 0404 	and.w	r4, r2, #4
 800bd9e:	2500      	movs	r5, #0
 800bda0:	ea40 0a04 	orr.w	sl, r0, r4
 800bda4:	ea41 0b05 	orr.w	fp, r1, r5
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800bdae:	bf00      	nop
 800bdb0:	371c      	adds	r7, #28
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bdb8:	4770      	bx	lr
	...

0800bdbc <_ZN3can7signals17PDU_HPCh1_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800bdbc:	b480      	push	{r7}
 800bdbe:	b085      	sub	sp, #20
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdcc:	b293      	uxth	r3, r2
 800bdce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bdd2:	81fb      	strh	r3, [r7, #14]
                return value * (0.004f);
 800bdd4:	89fb      	ldrh	r3, [r7, #14]
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bdde:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800bdf4 <_ZN3can7signals17PDU_HPCh1_Current3getERKyS3_+0x38>
 800bde2:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800bde6:	eeb0 0a67 	vmov.f32	s0, s15
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr
 800bdf4:	3b83126f 	.word	0x3b83126f

0800bdf8 <_ZN3can7signals17PDU_HPCh2_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFF0000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF0000ull) >> 16);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be08:	f04f 0200 	mov.w	r2, #0
 800be0c:	f04f 0300 	mov.w	r3, #0
 800be10:	0c02      	lsrs	r2, r0, #16
 800be12:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800be16:	0c0b      	lsrs	r3, r1, #16
 800be18:	b293      	uxth	r3, r2
 800be1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be1e:	81fb      	strh	r3, [r7, #14]
                return value * (0.004f);
 800be20:	89fb      	ldrh	r3, [r7, #14]
 800be22:	ee07 3a90 	vmov	s15, r3
 800be26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be2a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800be40 <_ZN3can7signals17PDU_HPCh2_Current3getERKyS3_+0x48>
 800be2e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800be32:	eeb0 0a67 	vmov.f32	s0, s15
 800be36:	3714      	adds	r7, #20
 800be38:	46bd      	mov	sp, r7
 800be3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3e:	4770      	bx	lr
 800be40:	3b83126f 	.word	0x3b83126f

0800be44 <_ZN3can7signals17PDU_HPCh3_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
                intel |= (static_cast<uint64_t>(rawValue) << 32) & 0xFFF00000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF00000000ull) >> 32);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be54:	f04f 0200 	mov.w	r2, #0
 800be58:	f04f 0300 	mov.w	r3, #0
 800be5c:	000a      	movs	r2, r1
 800be5e:	2300      	movs	r3, #0
 800be60:	b293      	uxth	r3, r2
 800be62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800be66:	81fb      	strh	r3, [r7, #14]
                return value * (0.004f);
 800be68:	89fb      	ldrh	r3, [r7, #14]
 800be6a:	ee07 3a90 	vmov	s15, r3
 800be6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be72:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800be88 <_ZN3can7signals17PDU_HPCh3_Current3getERKyS3_+0x44>
 800be76:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800be7a:	eeb0 0a67 	vmov.f32	s0, s15
 800be7e:	3714      	adds	r7, #20
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr
 800be88:	3b83126f 	.word	0x3b83126f

0800be8c <_ZN3can7signals17PDU_HPCh4_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000000000ull) >> 48);
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be9c:	f04f 0200 	mov.w	r2, #0
 800bea0:	f04f 0300 	mov.w	r3, #0
 800bea4:	0c0a      	lsrs	r2, r1, #16
 800bea6:	2300      	movs	r3, #0
 800bea8:	b293      	uxth	r3, r2
 800beaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800beae:	81fb      	strh	r3, [r7, #14]
                return value * (0.004f);
 800beb0:	89fb      	ldrh	r3, [r7, #14]
 800beb2:	ee07 3a90 	vmov	s15, r3
 800beb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800beba:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800bed0 <_ZN3can7signals17PDU_HPCh4_Current3getERKyS3_+0x44>
 800bebe:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800bec2:	eeb0 0a67 	vmov.f32	s0, s15
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	3b83126f 	.word	0x3b83126f

0800bed4 <_ZN3can7signals19PDU_LPCh1_Dutycycle3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x25A };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800bed4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bed8:	b088      	sub	sp, #32
 800beda:	af00      	add	r7, sp, #0
 800bedc:	6178      	str	r0, [r7, #20]
 800bede:	6139      	str	r1, [r7, #16]
 800bee0:	60fa      	str	r2, [r7, #12]
 800bee2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800bee6:	edd7 7a02 	vldr	s15, [r7, #8]
 800beea:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800bf5c <_ZN3can7signals19PDU_LPCh1_Dutycycle3setERyS2_Rhf+0x88>
 800beee:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef6:	dd01      	ble.n	800befc <_ZN3can7signals19PDU_LPCh1_Dutycycle3setERyS2_Rhf+0x28>
                    value = max;
 800bef8:	4b19      	ldr	r3, [pc, #100]	; (800bf60 <_ZN3can7signals19PDU_LPCh1_Dutycycle3setERyS2_Rhf+0x8c>)
 800befa:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800befc:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf08:	d502      	bpl.n	800bf10 <_ZN3can7signals19PDU_LPCh1_Dutycycle3setERyS2_Rhf+0x3c>
                    value = min;
 800bf0a:	f04f 0300 	mov.w	r3, #0
 800bf0e:	60bb      	str	r3, [r7, #8]
                }
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800bf10:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf14:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bf18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bf1c:	eeb0 0a47 	vmov.f32	s0, s14
 800bf20:	f7f6 fa55 	bl	80023ce <_ZSt5roundf>
 800bf24:	eef0 7a40 	vmov.f32	s15, s0
 800bf28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf2c:	edc7 7a01 	vstr	s15, [r7, #4]
 800bf30:	793b      	ldrb	r3, [r7, #4]
 800bf32:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFull;
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3a:	7ff9      	ldrb	r1, [r7, #31]
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	460c      	mov	r4, r1
 800bf40:	4605      	mov	r5, r0
 800bf42:	ea42 0804 	orr.w	r8, r2, r4
 800bf46:	ea43 0905 	orr.w	r9, r3, r5
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800bf50:	bf00      	nop
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bf5a:	bf00      	nop
 800bf5c:	42c80000 	.word	0x42c80000
 800bf60:	42c80000 	.word	0x42c80000

0800bf64 <_ZN3can7signals20PDU_LPCh10_Dutycycle3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x25A };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800bf64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bf68:	b088      	sub	sp, #32
 800bf6a:	af00      	add	r7, sp, #0
 800bf6c:	6178      	str	r0, [r7, #20]
 800bf6e:	6139      	str	r1, [r7, #16]
 800bf70:	60fa      	str	r2, [r7, #12]
 800bf72:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800bf76:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf7a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800c004 <_ZN3can7signals20PDU_LPCh10_Dutycycle3setERyS2_Rhf+0xa0>
 800bf7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bf82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf86:	dd01      	ble.n	800bf8c <_ZN3can7signals20PDU_LPCh10_Dutycycle3setERyS2_Rhf+0x28>
                    value = max;
 800bf88:	4b1f      	ldr	r3, [pc, #124]	; (800c008 <_ZN3can7signals20PDU_LPCh10_Dutycycle3setERyS2_Rhf+0xa4>)
 800bf8a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800bf8c:	edd7 7a02 	vldr	s15, [r7, #8]
 800bf90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bf94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf98:	d502      	bpl.n	800bfa0 <_ZN3can7signals20PDU_LPCh10_Dutycycle3setERyS2_Rhf+0x3c>
                    value = min;
 800bf9a:	f04f 0300 	mov.w	r3, #0
 800bf9e:	60bb      	str	r3, [r7, #8]
                }
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800bfa0:	edd7 7a02 	vldr	s15, [r7, #8]
 800bfa4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bfa8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bfac:	eeb0 0a47 	vmov.f32	s0, s14
 800bfb0:	f7f6 fa0d 	bl	80023ce <_ZSt5roundf>
 800bfb4:	eef0 7a40 	vmov.f32	s15, s0
 800bfb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bfbc:	edc7 7a01 	vstr	s15, [r7, #4]
 800bfc0:	793b      	ldrb	r3, [r7, #4]
 800bfc2:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 8) & 0xFF00ull;
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bfca:	7ffb      	ldrb	r3, [r7, #31]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	4698      	mov	r8, r3
 800bfd0:	4691      	mov	r9, r2
 800bfd2:	f04f 0200 	mov.w	r2, #0
 800bfd6:	f04f 0300 	mov.w	r3, #0
 800bfda:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800bfde:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800bfe2:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800bfe6:	b294      	uxth	r4, r2
 800bfe8:	2500      	movs	r5, #0
 800bfea:	ea40 0a04 	orr.w	sl, r0, r4
 800bfee:	ea41 0b05 	orr.w	fp, r1, r5
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800bff8:	bf00      	nop
 800bffa:	3720      	adds	r7, #32
 800bffc:	46bd      	mov	sp, r7
 800bffe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c002:	bf00      	nop
 800c004:	42c80000 	.word	0x42c80000
 800c008:	42c80000 	.word	0x42c80000

0800c00c <_ZN3can7signals19PDU_LPCh2_Dutycycle3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x25A };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800c00c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c010:	b088      	sub	sp, #32
 800c012:	af00      	add	r7, sp, #0
 800c014:	6178      	str	r0, [r7, #20]
 800c016:	6139      	str	r1, [r7, #16]
 800c018:	60fa      	str	r2, [r7, #12]
 800c01a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800c01e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c022:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800c0ac <_ZN3can7signals19PDU_LPCh2_Dutycycle3setERyS2_Rhf+0xa0>
 800c026:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c02e:	dd01      	ble.n	800c034 <_ZN3can7signals19PDU_LPCh2_Dutycycle3setERyS2_Rhf+0x28>
                    value = max;
 800c030:	4b1f      	ldr	r3, [pc, #124]	; (800c0b0 <_ZN3can7signals19PDU_LPCh2_Dutycycle3setERyS2_Rhf+0xa4>)
 800c032:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800c034:	edd7 7a02 	vldr	s15, [r7, #8]
 800c038:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c040:	d502      	bpl.n	800c048 <_ZN3can7signals19PDU_LPCh2_Dutycycle3setERyS2_Rhf+0x3c>
                    value = min;
 800c042:	f04f 0300 	mov.w	r3, #0
 800c046:	60bb      	str	r3, [r7, #8]
                }
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800c048:	edd7 7a02 	vldr	s15, [r7, #8]
 800c04c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c050:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c054:	eeb0 0a47 	vmov.f32	s0, s14
 800c058:	f7f6 f9b9 	bl	80023ce <_ZSt5roundf>
 800c05c:	eef0 7a40 	vmov.f32	s15, s0
 800c060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c064:	edc7 7a01 	vstr	s15, [r7, #4]
 800c068:	793b      	ldrb	r3, [r7, #4]
 800c06a:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c072:	7ffb      	ldrb	r3, [r7, #31]
 800c074:	2200      	movs	r2, #0
 800c076:	4698      	mov	r8, r3
 800c078:	4691      	mov	r9, r2
 800c07a:	f04f 0200 	mov.w	r2, #0
 800c07e:	f04f 0300 	mov.w	r3, #0
 800c082:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800c086:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800c08a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800c08e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800c092:	2500      	movs	r5, #0
 800c094:	ea40 0a04 	orr.w	sl, r0, r4
 800c098:	ea41 0b05 	orr.w	fp, r1, r5
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800c0a2:	bf00      	nop
 800c0a4:	3720      	adds	r7, #32
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c0ac:	42c80000 	.word	0x42c80000
 800c0b0:	42c80000 	.word	0x42c80000

0800c0b4 <_ZN3can7signals19PDU_LPCh3_Dutycycle3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x25A };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800c0b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0b8:	b08a      	sub	sp, #40	; 0x28
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	61f8      	str	r0, [r7, #28]
 800c0be:	61b9      	str	r1, [r7, #24]
 800c0c0:	617a      	str	r2, [r7, #20]
 800c0c2:	ed87 0a04 	vstr	s0, [r7, #16]
                if (value > max) {
 800c0c6:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0ca:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800c150 <_ZN3can7signals19PDU_LPCh3_Dutycycle3setERyS2_Rhf+0x9c>
 800c0ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0d6:	dd01      	ble.n	800c0dc <_ZN3can7signals19PDU_LPCh3_Dutycycle3setERyS2_Rhf+0x28>
                    value = max;
 800c0d8:	4b1e      	ldr	r3, [pc, #120]	; (800c154 <_ZN3can7signals19PDU_LPCh3_Dutycycle3setERyS2_Rhf+0xa0>)
 800c0da:	613b      	str	r3, [r7, #16]
                }
                if (value < min) {
 800c0dc:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e8:	d502      	bpl.n	800c0f0 <_ZN3can7signals19PDU_LPCh3_Dutycycle3setERyS2_Rhf+0x3c>
                    value = min;
 800c0ea:	f04f 0300 	mov.w	r3, #0
 800c0ee:	613b      	str	r3, [r7, #16]
                }
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800c0f0:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0f4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c0f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c0fc:	eeb0 0a47 	vmov.f32	s0, s14
 800c100:	f7f6 f965 	bl	80023ce <_ZSt5roundf>
 800c104:	eef0 7a40 	vmov.f32	s15, s0
 800c108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10c:	edc7 7a01 	vstr	s15, [r7, #4]
 800c110:	793b      	ldrb	r3, [r7, #4]
 800c112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFF000000ull;
 800c116:	69fb      	ldr	r3, [r7, #28]
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800c120:	2000      	movs	r0, #0
 800c122:	4688      	mov	r8, r1
 800c124:	4681      	mov	r9, r0
 800c126:	ea4f 2118 	mov.w	r1, r8, lsr #8
 800c12a:	60f9      	str	r1, [r7, #12]
 800c12c:	ea4f 6108 	mov.w	r1, r8, lsl #24
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	68bc      	ldr	r4, [r7, #8]
 800c134:	2500      	movs	r5, #0
 800c136:	ea42 0a04 	orr.w	sl, r2, r4
 800c13a:	ea43 0b05 	orr.w	fp, r3, r5
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800c144:	bf00      	nop
 800c146:	3728      	adds	r7, #40	; 0x28
 800c148:	46bd      	mov	sp, r7
 800c14a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c14e:	bf00      	nop
 800c150:	42c80000 	.word	0x42c80000
 800c154:	42c80000 	.word	0x42c80000

0800c158 <_ZN3can7signals19PDU_LPCh8_Dutycycle3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x25A };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800c158:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c15c:	b088      	sub	sp, #32
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6178      	str	r0, [r7, #20]
 800c162:	6139      	str	r1, [r7, #16]
 800c164:	60fa      	str	r2, [r7, #12]
 800c166:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800c16a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c16e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800c1f0 <_ZN3can7signals19PDU_LPCh8_Dutycycle3setERyS2_Rhf+0x98>
 800c172:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c17a:	dd01      	ble.n	800c180 <_ZN3can7signals19PDU_LPCh8_Dutycycle3setERyS2_Rhf+0x28>
                    value = max;
 800c17c:	4b1d      	ldr	r3, [pc, #116]	; (800c1f4 <_ZN3can7signals19PDU_LPCh8_Dutycycle3setERyS2_Rhf+0x9c>)
 800c17e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800c180:	edd7 7a02 	vldr	s15, [r7, #8]
 800c184:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c18c:	d502      	bpl.n	800c194 <_ZN3can7signals19PDU_LPCh8_Dutycycle3setERyS2_Rhf+0x3c>
                    value = min;
 800c18e:	f04f 0300 	mov.w	r3, #0
 800c192:	60bb      	str	r3, [r7, #8]
                }
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800c194:	edd7 7a02 	vldr	s15, [r7, #8]
 800c198:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c19c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c1a0:	eeb0 0a47 	vmov.f32	s0, s14
 800c1a4:	f7f6 f913 	bl	80023ce <_ZSt5roundf>
 800c1a8:	eef0 7a40 	vmov.f32	s15, s0
 800c1ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1b0:	edc7 7a01 	vstr	s15, [r7, #4]
 800c1b4:	793b      	ldrb	r3, [r7, #4]
 800c1b6:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 32) & 0xFF00000000ull;
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c1be:	7ffb      	ldrb	r3, [r7, #31]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	469a      	mov	sl, r3
 800c1c4:	4693      	mov	fp, r2
 800c1c6:	f04f 0200 	mov.w	r2, #0
 800c1ca:	f04f 0300 	mov.w	r3, #0
 800c1ce:	4653      	mov	r3, sl
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	2400      	movs	r4, #0
 800c1d4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800c1d8:	ea40 0804 	orr.w	r8, r0, r4
 800c1dc:	ea41 0905 	orr.w	r9, r1, r5
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800c1e6:	bf00      	nop
 800c1e8:	3720      	adds	r7, #32
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1f0:	42c80000 	.word	0x42c80000
 800c1f4:	42c80000 	.word	0x42c80000

0800c1f8 <_ZN3can7signals19PDU_LPCh9_Dutycycle3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x25A };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800c1f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c1fc:	b088      	sub	sp, #32
 800c1fe:	af00      	add	r7, sp, #0
 800c200:	6178      	str	r0, [r7, #20]
 800c202:	6139      	str	r1, [r7, #16]
 800c204:	60fa      	str	r2, [r7, #12]
 800c206:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800c20a:	edd7 7a02 	vldr	s15, [r7, #8]
 800c20e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800c294 <_ZN3can7signals19PDU_LPCh9_Dutycycle3setERyS2_Rhf+0x9c>
 800c212:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c21a:	dd01      	ble.n	800c220 <_ZN3can7signals19PDU_LPCh9_Dutycycle3setERyS2_Rhf+0x28>
                    value = max;
 800c21c:	4b1e      	ldr	r3, [pc, #120]	; (800c298 <_ZN3can7signals19PDU_LPCh9_Dutycycle3setERyS2_Rhf+0xa0>)
 800c21e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800c220:	edd7 7a02 	vldr	s15, [r7, #8]
 800c224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22c:	d502      	bpl.n	800c234 <_ZN3can7signals19PDU_LPCh9_Dutycycle3setERyS2_Rhf+0x3c>
                    value = min;
 800c22e:	f04f 0300 	mov.w	r3, #0
 800c232:	60bb      	str	r3, [r7, #8]
                }
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800c234:	edd7 7a02 	vldr	s15, [r7, #8]
 800c238:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c23c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c240:	eeb0 0a47 	vmov.f32	s0, s14
 800c244:	f7f6 f8c3 	bl	80023ce <_ZSt5roundf>
 800c248:	eef0 7a40 	vmov.f32	s15, s0
 800c24c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c250:	edc7 7a01 	vstr	s15, [r7, #4]
 800c254:	793b      	ldrb	r3, [r7, #4]
 800c256:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 40) & 0xFF0000000000ull;
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c25e:	7ffb      	ldrb	r3, [r7, #31]
 800c260:	2200      	movs	r2, #0
 800c262:	469a      	mov	sl, r3
 800c264:	4693      	mov	fp, r2
 800c266:	f04f 0200 	mov.w	r2, #0
 800c26a:	f04f 0300 	mov.w	r3, #0
 800c26e:	ea4f 230a 	mov.w	r3, sl, lsl #8
 800c272:	2200      	movs	r2, #0
 800c274:	2400      	movs	r4, #0
 800c276:	f403 457f 	and.w	r5, r3, #65280	; 0xff00
 800c27a:	ea40 0804 	orr.w	r8, r0, r4
 800c27e:	ea41 0905 	orr.w	r9, r1, r5
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800c288:	bf00      	nop
 800c28a:	3720      	adds	r7, #32
 800c28c:	46bd      	mov	sp, r7
 800c28e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c292:	bf00      	nop
 800c294:	42c80000 	.word	0x42c80000
 800c298:	42c80000 	.word	0x42c80000

0800c29c <_ZN3can7signals19PDU_HPCh1_Dutycycle3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x2DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800c29c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c2a0:	b088      	sub	sp, #32
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6178      	str	r0, [r7, #20]
 800c2a6:	6139      	str	r1, [r7, #16]
 800c2a8:	60fa      	str	r2, [r7, #12]
 800c2aa:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800c2ae:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2b2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800c324 <_ZN3can7signals19PDU_HPCh1_Dutycycle3setERyS2_Rhf+0x88>
 800c2b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2be:	dd01      	ble.n	800c2c4 <_ZN3can7signals19PDU_HPCh1_Dutycycle3setERyS2_Rhf+0x28>
                    value = max;
 800c2c0:	4b19      	ldr	r3, [pc, #100]	; (800c328 <_ZN3can7signals19PDU_HPCh1_Dutycycle3setERyS2_Rhf+0x8c>)
 800c2c2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800c2c4:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c2cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2d0:	d502      	bpl.n	800c2d8 <_ZN3can7signals19PDU_HPCh1_Dutycycle3setERyS2_Rhf+0x3c>
                    value = min;
 800c2d2:	f04f 0300 	mov.w	r3, #0
 800c2d6:	60bb      	str	r3, [r7, #8]
                }
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800c2d8:	edd7 7a02 	vldr	s15, [r7, #8]
 800c2dc:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c2e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c2e4:	eeb0 0a47 	vmov.f32	s0, s14
 800c2e8:	f7f6 f871 	bl	80023ce <_ZSt5roundf>
 800c2ec:	eef0 7a40 	vmov.f32	s15, s0
 800c2f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2f4:	edc7 7a01 	vstr	s15, [r7, #4]
 800c2f8:	793b      	ldrb	r3, [r7, #4]
 800c2fa:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFull;
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c302:	7ff9      	ldrb	r1, [r7, #31]
 800c304:	2000      	movs	r0, #0
 800c306:	460c      	mov	r4, r1
 800c308:	4605      	mov	r5, r0
 800c30a:	ea42 0804 	orr.w	r8, r2, r4
 800c30e:	ea43 0905 	orr.w	r9, r3, r5
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800c318:	bf00      	nop
 800c31a:	3720      	adds	r7, #32
 800c31c:	46bd      	mov	sp, r7
 800c31e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c322:	bf00      	nop
 800c324:	42c80000 	.word	0x42c80000
 800c328:	42c80000 	.word	0x42c80000

0800c32c <_ZN3can7signals19PDU_HPCh2_Dutycycle3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x2DA };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800c32c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c330:	b088      	sub	sp, #32
 800c332:	af00      	add	r7, sp, #0
 800c334:	6178      	str	r0, [r7, #20]
 800c336:	6139      	str	r1, [r7, #16]
 800c338:	60fa      	str	r2, [r7, #12]
 800c33a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800c33e:	edd7 7a02 	vldr	s15, [r7, #8]
 800c342:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800c3cc <_ZN3can7signals19PDU_HPCh2_Dutycycle3setERyS2_Rhf+0xa0>
 800c346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34e:	dd01      	ble.n	800c354 <_ZN3can7signals19PDU_HPCh2_Dutycycle3setERyS2_Rhf+0x28>
                    value = max;
 800c350:	4b1f      	ldr	r3, [pc, #124]	; (800c3d0 <_ZN3can7signals19PDU_HPCh2_Dutycycle3setERyS2_Rhf+0xa4>)
 800c352:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800c354:	edd7 7a02 	vldr	s15, [r7, #8]
 800c358:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c360:	d502      	bpl.n	800c368 <_ZN3can7signals19PDU_HPCh2_Dutycycle3setERyS2_Rhf+0x3c>
                    value = min;
 800c362:	f04f 0300 	mov.w	r3, #0
 800c366:	60bb      	str	r3, [r7, #8]
                }
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800c368:	edd7 7a02 	vldr	s15, [r7, #8]
 800c36c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800c370:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c374:	eeb0 0a47 	vmov.f32	s0, s14
 800c378:	f7f6 f829 	bl	80023ce <_ZSt5roundf>
 800c37c:	eef0 7a40 	vmov.f32	s15, s0
 800c380:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c384:	edc7 7a01 	vstr	s15, [r7, #4]
 800c388:	793b      	ldrb	r3, [r7, #4]
 800c38a:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 8) & 0xFF00ull;
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c392:	7ffb      	ldrb	r3, [r7, #31]
 800c394:	2200      	movs	r2, #0
 800c396:	4698      	mov	r8, r3
 800c398:	4691      	mov	r9, r2
 800c39a:	f04f 0200 	mov.w	r2, #0
 800c39e:	f04f 0300 	mov.w	r3, #0
 800c3a2:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800c3a6:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800c3aa:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800c3ae:	b294      	uxth	r4, r2
 800c3b0:	2500      	movs	r5, #0
 800c3b2:	ea40 0a04 	orr.w	sl, r0, r4
 800c3b6:	ea41 0b05 	orr.w	fp, r1, r5
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800c3c0:	bf00      	nop
 800c3c2:	3720      	adds	r7, #32
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3ca:	bf00      	nop
 800c3cc:	42c80000 	.word	0x42c80000
 800c3d0:	42c80000 	.word	0x42c80000

0800c3d4 <_ZN3can7signals17PDU_LPCh1_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c3d4:	b480      	push	{r7}
 800c3d6:	b085      	sub	sp, #20
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e4:	b293      	uxth	r3, r2
 800c3e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3ea:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800c3ec:	89fb      	ldrh	r3, [r7, #14]
 800c3ee:	ee07 3a90 	vmov	s15, r3
 800c3f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3f6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c40c <_ZN3can7signals17PDU_LPCh1_Current3getERKyS3_+0x38>
 800c3fa:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800c3fe:	eeb0 0a67 	vmov.f32	s0, s15
 800c402:	3714      	adds	r7, #20
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	3b03126f 	.word	0x3b03126f

0800c410 <_ZN3can7signals17PDU_LPCh2_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xFFF000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000ull) >> 12);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c420:	f04f 0200 	mov.w	r2, #0
 800c424:	f04f 0300 	mov.w	r3, #0
 800c428:	0b02      	lsrs	r2, r0, #12
 800c42a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c42e:	0b0b      	lsrs	r3, r1, #12
 800c430:	b293      	uxth	r3, r2
 800c432:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c436:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800c438:	89fb      	ldrh	r3, [r7, #14]
 800c43a:	ee07 3a90 	vmov	s15, r3
 800c43e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c442:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c458 <_ZN3can7signals17PDU_LPCh2_Current3getERKyS3_+0x48>
 800c446:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800c44a:	eeb0 0a67 	vmov.f32	s0, s15
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c456:	4770      	bx	lr
 800c458:	3b03126f 	.word	0x3b03126f

0800c45c <_ZN3can7signals17PDU_LPCh3_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFFF000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c45c:	b480      	push	{r7}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000ull) >> 24);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c46c:	f04f 0200 	mov.w	r2, #0
 800c470:	f04f 0300 	mov.w	r3, #0
 800c474:	0e02      	lsrs	r2, r0, #24
 800c476:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c47a:	0e0b      	lsrs	r3, r1, #24
 800c47c:	b293      	uxth	r3, r2
 800c47e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c482:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800c484:	89fb      	ldrh	r3, [r7, #14]
 800c486:	ee07 3a90 	vmov	s15, r3
 800c48a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c48e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c4a4 <_ZN3can7signals17PDU_LPCh3_Current3getERKyS3_+0x48>
 800c492:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800c496:	eeb0 0a67 	vmov.f32	s0, s15
 800c49a:	3714      	adds	r7, #20
 800c49c:	46bd      	mov	sp, r7
 800c49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a2:	4770      	bx	lr
 800c4a4:	3b03126f 	.word	0x3b03126f

0800c4a8 <_ZN3can7signals17PDU_LPCh4_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 36) & 0xFFF000000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c4a8:	b480      	push	{r7}
 800c4aa:	b085      	sub	sp, #20
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
 800c4b0:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000000ull) >> 36);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c4b8:	f04f 0200 	mov.w	r2, #0
 800c4bc:	f04f 0300 	mov.w	r3, #0
 800c4c0:	090a      	lsrs	r2, r1, #4
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	b293      	uxth	r3, r2
 800c4c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4ca:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800c4cc:	89fb      	ldrh	r3, [r7, #14]
 800c4ce:	ee07 3a90 	vmov	s15, r3
 800c4d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c4d6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c4ec <_ZN3can7signals17PDU_LPCh4_Current3getERKyS3_+0x44>
 800c4da:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800c4de:	eeb0 0a67 	vmov.f32	s0, s15
 800c4e2:	3714      	adds	r7, #20
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr
 800c4ec:	3b03126f 	.word	0x3b03126f

0800c4f0 <_ZN3can7signals17PDU_LPCh5_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c4f0:	b480      	push	{r7}
 800c4f2:	b085      	sub	sp, #20
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
 800c4f8:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000000000ull) >> 48);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c500:	f04f 0200 	mov.w	r2, #0
 800c504:	f04f 0300 	mov.w	r3, #0
 800c508:	0c0a      	lsrs	r2, r1, #16
 800c50a:	2300      	movs	r3, #0
 800c50c:	b293      	uxth	r3, r2
 800c50e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c512:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800c514:	89fb      	ldrh	r3, [r7, #14]
 800c516:	ee07 3a90 	vmov	s15, r3
 800c51a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c51e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c534 <_ZN3can7signals17PDU_LPCh5_Current3getERKyS3_+0x44>
 800c522:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800c526:	eeb0 0a67 	vmov.f32	s0, s15
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c532:	4770      	bx	lr
 800c534:	3b03126f 	.word	0x3b03126f

0800c538 <_ZN3can7signals18PDU_LPCh10_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c548:	b293      	uxth	r3, r2
 800c54a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c54e:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800c550:	89fb      	ldrh	r3, [r7, #14]
 800c552:	ee07 3a90 	vmov	s15, r3
 800c556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c55a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c570 <_ZN3can7signals18PDU_LPCh10_Current3getERKyS3_+0x38>
 800c55e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800c562:	eeb0 0a67 	vmov.f32	s0, s15
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	3b03126f 	.word	0x3b03126f

0800c574 <_ZN3can7signals17PDU_LPCh6_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xFFF000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c574:	b480      	push	{r7}
 800c576:	b085      	sub	sp, #20
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
 800c57c:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000ull) >> 12);
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c584:	f04f 0200 	mov.w	r2, #0
 800c588:	f04f 0300 	mov.w	r3, #0
 800c58c:	0b02      	lsrs	r2, r0, #12
 800c58e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800c592:	0b0b      	lsrs	r3, r1, #12
 800c594:	b293      	uxth	r3, r2
 800c596:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c59a:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800c59c:	89fb      	ldrh	r3, [r7, #14]
 800c59e:	ee07 3a90 	vmov	s15, r3
 800c5a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5a6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c5bc <_ZN3can7signals17PDU_LPCh6_Current3getERKyS3_+0x48>
 800c5aa:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800c5ae:	eeb0 0a67 	vmov.f32	s0, s15
 800c5b2:	3714      	adds	r7, #20
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr
 800c5bc:	3b03126f 	.word	0x3b03126f

0800c5c0 <_ZN3can7signals17PDU_LPCh7_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFFF000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c5c0:	b480      	push	{r7}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000ull) >> 24);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c5d0:	f04f 0200 	mov.w	r2, #0
 800c5d4:	f04f 0300 	mov.w	r3, #0
 800c5d8:	0e02      	lsrs	r2, r0, #24
 800c5da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800c5de:	0e0b      	lsrs	r3, r1, #24
 800c5e0:	b293      	uxth	r3, r2
 800c5e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c5e6:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800c5e8:	89fb      	ldrh	r3, [r7, #14]
 800c5ea:	ee07 3a90 	vmov	s15, r3
 800c5ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5f2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c608 <_ZN3can7signals17PDU_LPCh7_Current3getERKyS3_+0x48>
 800c5f6:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800c5fa:	eeb0 0a67 	vmov.f32	s0, s15
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	3b03126f 	.word	0x3b03126f

0800c60c <_ZN3can7signals17PDU_LPCh8_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 36) & 0xFFF000000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
 800c614:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000000ull) >> 36);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c61c:	f04f 0200 	mov.w	r2, #0
 800c620:	f04f 0300 	mov.w	r3, #0
 800c624:	090a      	lsrs	r2, r1, #4
 800c626:	2300      	movs	r3, #0
 800c628:	b293      	uxth	r3, r2
 800c62a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c62e:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800c630:	89fb      	ldrh	r3, [r7, #14]
 800c632:	ee07 3a90 	vmov	s15, r3
 800c636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c63a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c650 <_ZN3can7signals17PDU_LPCh8_Current3getERKyS3_+0x44>
 800c63e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800c642:	eeb0 0a67 	vmov.f32	s0, s15
 800c646:	3714      	adds	r7, #20
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr
 800c650:	3b03126f 	.word	0x3b03126f

0800c654 <_ZN3can7signals17PDU_LPCh9_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800c654:	b480      	push	{r7}
 800c656:	b085      	sub	sp, #20
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
 800c65c:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000000000ull) >> 48);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c664:	f04f 0200 	mov.w	r2, #0
 800c668:	f04f 0300 	mov.w	r3, #0
 800c66c:	0c0a      	lsrs	r2, r1, #16
 800c66e:	2300      	movs	r3, #0
 800c670:	b293      	uxth	r3, r2
 800c672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c676:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800c678:	89fb      	ldrh	r3, [r7, #14]
 800c67a:	ee07 3a90 	vmov	s15, r3
 800c67e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c682:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800c698 <_ZN3can7signals17PDU_LPCh9_Current3getERKyS3_+0x44>
 800c686:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800c68a:	eeb0 0a67 	vmov.f32	s0, s15
 800c68e:	3714      	adds	r7, #20
 800c690:	46bd      	mov	sp, r7
 800c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c696:	4770      	bx	lr
 800c698:	3b03126f 	.word	0x3b03126f

0800c69c <_ZNK3pdu9PduStatuseqERKS0_>:

struct PduStatus {
	bool m_enabled;
	bool m_pehwEnabled;

	bool operator==(const PduStatus& other)const  {
 800c69c:	b480      	push	{r7}
 800c69e:	b083      	sub	sp, #12
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
		return m_enabled == other.m_enabled
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	781a      	ldrb	r2, [r3, #0]
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	781b      	ldrb	r3, [r3, #0]
				&& m_pehwEnabled == other.m_pehwEnabled;
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d107      	bne.n	800c6c2 <_ZNK3pdu9PduStatuseqERKS0_+0x26>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	785a      	ldrb	r2, [r3, #1]
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	785b      	ldrb	r3, [r3, #1]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d101      	bne.n	800c6c2 <_ZNK3pdu9PduStatuseqERKS0_+0x26>
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e000      	b.n	800c6c4 <_ZNK3pdu9PduStatuseqERKS0_+0x28>
 800c6c2:	2300      	movs	r3, #0
	}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	370c      	adds	r7, #12
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ce:	4770      	bx	lr

0800c6d0 <_ZNK3pdu9PduStatusneERKS0_>:
	bool operator!=(const PduStatus& other)const  {
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
		return not (*this == other);
 800c6da:	6839      	ldr	r1, [r7, #0]
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f7ff ffdd 	bl	800c69c <_ZNK3pdu9PduStatuseqERKS0_>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	f083 0301 	eor.w	r3, r3, #1
 800c6e8:	b2db      	uxtb	r3, r3
	}
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	3708      	adds	r7, #8
 800c6ee:	46bd      	mov	sp, r7
 800c6f0:	bd80      	pop	{r7, pc}

0800c6f2 <_ZNK3pdu15LpChannelConfigeqERKS0_>:
struct LpChannelConfig {
	static constexpr size_t NUMBER_OF_CHANNELS = 10;
	bool m_status[NUMBER_OF_CHANNELS];


	bool operator==(const LpChannelConfig& other) const {
 800c6f2:	b480      	push	{r7}
 800c6f4:	b085      	sub	sp, #20
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
 800c6fa:	6039      	str	r1, [r7, #0]
		for(size_t i=0;i<NUMBER_OF_CHANNELS;i++){
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2b09      	cmp	r3, #9
 800c704:	d80f      	bhi.n	800c726 <_ZNK3pdu15LpChannelConfigeqERKS0_+0x34>
			if(m_status[i] != other.m_status[i])return false;
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	4413      	add	r3, r2
 800c70c:	781a      	ldrb	r2, [r3, #0]
 800c70e:	6839      	ldr	r1, [r7, #0]
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	440b      	add	r3, r1
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	429a      	cmp	r2, r3
 800c718:	d001      	beq.n	800c71e <_ZNK3pdu15LpChannelConfigeqERKS0_+0x2c>
 800c71a:	2300      	movs	r3, #0
 800c71c:	e004      	b.n	800c728 <_ZNK3pdu15LpChannelConfigeqERKS0_+0x36>
		for(size_t i=0;i<NUMBER_OF_CHANNELS;i++){
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	3301      	adds	r3, #1
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	e7ec      	b.n	800c700 <_ZNK3pdu15LpChannelConfigeqERKS0_+0xe>
		}
		return true;
 800c726:	2301      	movs	r3, #1
	}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <_ZNK3pdu15LpChannelConfigneERKS0_>:

	bool operator!=(const LpChannelConfig& other) const {
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
 800c73c:	6039      	str	r1, [r7, #0]
		return not (*this == other);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7ff ffd6 	bl	800c6f2 <_ZNK3pdu15LpChannelConfigeqERKS0_>
 800c746:	4603      	mov	r3, r0
 800c748:	f083 0301 	eor.w	r3, r3, #1
 800c74c:	b2db      	uxtb	r3, r3
	}
 800c74e:	4618      	mov	r0, r3
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <_ZNK3pdu15HpChannelConfigeqERKS0_>:

struct HpChannelConfig {
	static constexpr size_t NUMBER_OF_CHANNELS = 4;
	bool m_status[NUMBER_OF_CHANNELS];

	bool operator==(const HpChannelConfig& other)const{
 800c756:	b480      	push	{r7}
 800c758:	b085      	sub	sp, #20
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	6039      	str	r1, [r7, #0]
		for(size_t i=0;i<NUMBER_OF_CHANNELS;i++){
 800c760:	2300      	movs	r3, #0
 800c762:	60fb      	str	r3, [r7, #12]
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	2b03      	cmp	r3, #3
 800c768:	d80f      	bhi.n	800c78a <_ZNK3pdu15HpChannelConfigeqERKS0_+0x34>
			if(m_status[i] != other.m_status[i])return false;
 800c76a:	687a      	ldr	r2, [r7, #4]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	4413      	add	r3, r2
 800c770:	781a      	ldrb	r2, [r3, #0]
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	440b      	add	r3, r1
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	429a      	cmp	r2, r3
 800c77c:	d001      	beq.n	800c782 <_ZNK3pdu15HpChannelConfigeqERKS0_+0x2c>
 800c77e:	2300      	movs	r3, #0
 800c780:	e004      	b.n	800c78c <_ZNK3pdu15HpChannelConfigeqERKS0_+0x36>
		for(size_t i=0;i<NUMBER_OF_CHANNELS;i++){
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3301      	adds	r3, #1
 800c786:	60fb      	str	r3, [r7, #12]
 800c788:	e7ec      	b.n	800c764 <_ZNK3pdu15HpChannelConfigeqERKS0_+0xe>
		}
		return false;
 800c78a:	2300      	movs	r3, #0
	}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3714      	adds	r7, #20
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <_ZNK3pdu15HpChannelConfigneERKS0_>:
	bool operator!=(const HpChannelConfig& other)const{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
 800c7a0:	6039      	str	r1, [r7, #0]
		return not (*this == other);
 800c7a2:	6839      	ldr	r1, [r7, #0]
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff ffd6 	bl	800c756 <_ZNK3pdu15HpChannelConfigeqERKS0_>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	f083 0301 	eor.w	r3, r3, #1
 800c7b0:	b2db      	uxtb	r3, r3
	}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
	...

0800c7bc <_ZN3pdu13enableChannelENS_9HpChannelE>:
static HpChannelConfig s_hpChannelConfig = {
		.m_status = {false, false, false, false}
};
static HpChannelConfig s_confirmed_hpChannelConfig;

void enableChannel(HpChannel channel){
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	80fb      	strh	r3, [r7, #6]
	s_hpChannelConfig.m_status[static_cast<uint16_t>(channel)] = true;
 800c7c6:	88fb      	ldrh	r3, [r7, #6]
 800c7c8:	4a04      	ldr	r2, [pc, #16]	; (800c7dc <_ZN3pdu13enableChannelENS_9HpChannelE+0x20>)
 800c7ca:	2101      	movs	r1, #1
 800c7cc:	54d1      	strb	r1, [r2, r3]
}
 800c7ce:	bf00      	nop
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	20000cd8 	.word	0x20000cd8

0800c7e0 <_ZN3pdu14disableChannelENS_9HpChannelE>:

void disableChannel(HpChannel channel){
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	80fb      	strh	r3, [r7, #6]
	s_hpChannelConfig.m_status[static_cast<uint16_t>(channel)] = false;
 800c7ea:	88fb      	ldrh	r3, [r7, #6]
 800c7ec:	4a04      	ldr	r2, [pc, #16]	; (800c800 <_ZN3pdu14disableChannelENS_9HpChannelE+0x20>)
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	54d1      	strb	r1, [r2, r3]
}
 800c7f2:	bf00      	nop
 800c7f4:	370c      	adds	r7, #12
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	20000cd8 	.word	0x20000cd8

0800c804 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af02      	add	r7, sp, #8
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
 800c810:	68f8      	ldr	r0, [r7, #12]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	2300      	movs	r3, #0
 800c818:	2201      	movs	r2, #1
 800c81a:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c81e:	f7f5 fde6 	bl	80023ee <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800c822:	68bb      	ldr	r3, [r7, #8]
 800c824:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800c826:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 800c82a:	d000      	beq.n	800c82e <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
                    while(1);
 800c82c:	e7fe      	b.n	800c82c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
        };
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}

0800c838 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800c838:	b580      	push	{r7, lr}
 800c83a:	b082      	sub	sp, #8
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
 800c840:	6039      	str	r1, [r7, #0]
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	683b      	ldr	r3, [r7, #0]
 800c846:	331c      	adds	r3, #28
 800c848:	461a      	mov	r2, r3
 800c84a:	6878      	ldr	r0, [r7, #4]
 800c84c:	f7ff ffda 	bl	800c804 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
	...

0800c85c <_ZN3pdu15receiveTxStatusER9RxMessage>:
		}
	}
}


void receiveTxStatus(RxMessage& raw) {
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
	can::Message<can::messages::PDU_TX_Status> msg {raw};
 800c864:	f107 0308 	add.w	r3, r7, #8
 800c868:	6879      	ldr	r1, [r7, #4]
 800c86a:	4618      	mov	r0, r3
 800c86c:	f7ff ffe4 	bl	800c838 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK9RxMessage>
	s_confirmed_status.m_enabled = msg.get<can::signals::PDU_TX_Enabled>() == 1;
 800c870:	f107 0308 	add.w	r3, r7, #8
 800c874:	4618      	mov	r0, r3
 800c876:	f000 fb11 	bl	800ce9c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals14PDU_TX_EnabledEEENT_8dataTypeEv>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b01      	cmp	r3, #1
 800c87e:	bf0c      	ite	eq
 800c880:	2301      	moveq	r3, #1
 800c882:	2300      	movne	r3, #0
 800c884:	b2da      	uxtb	r2, r3
 800c886:	4b07      	ldr	r3, [pc, #28]	; (800c8a4 <_ZN3pdu15receiveTxStatusER9RxMessage+0x48>)
 800c888:	701a      	strb	r2, [r3, #0]
	s_confirmed_status.m_pehwEnabled = msg.get<can::signals::PDU_TX_PEHWEnabled>();
 800c88a:	f107 0308 	add.w	r3, r7, #8
 800c88e:	4618      	mov	r0, r3
 800c890:	f000 fb16 	bl	800cec0 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals18PDU_TX_PEHWEnabledEEENT_8dataTypeEv>
 800c894:	4603      	mov	r3, r0
 800c896:	461a      	mov	r2, r3
 800c898:	4b02      	ldr	r3, [pc, #8]	; (800c8a4 <_ZN3pdu15receiveTxStatusER9RxMessage+0x48>)
 800c89a:	705a      	strb	r2, [r3, #1]
}
 800c89c:	bf00      	nop
 800c89e:	3720      	adds	r7, #32
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}
 800c8a4:	20000cbc 	.word	0x20000cbc

0800c8a8 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b086      	sub	sp, #24
 800c8ac:	af02      	add	r7, sp, #8
 800c8ae:	60f8      	str	r0, [r7, #12]
 800c8b0:	60b9      	str	r1, [r7, #8]
 800c8b2:	607a      	str	r2, [r7, #4]
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	9300      	str	r3, [sp, #0]
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	2208      	movs	r2, #8
 800c8be:	f240 211a 	movw	r1, #538	; 0x21a
 800c8c2:	f7f5 fd94 	bl	80023ee <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800c8ca:	f240 221a 	movw	r2, #538	; 0x21a
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d000      	beq.n	800c8d4 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800c8d2:	e7fe      	b.n	800c8d2 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3710      	adds	r7, #16
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b082      	sub	sp, #8
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	331c      	adds	r3, #28
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f7ff ffd9 	bl	800c8a8 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	3708      	adds	r7, #8
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd80      	pop	{r7, pc}

0800c900 <_ZN3pdu18receiveHpDutycycleER9RxMessage>:

void receiveHpDutycycle(RxMessage& raw){
 800c900:	b580      	push	{r7, lr}
 800c902:	b088      	sub	sp, #32
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
	can::Message<can::messages::PDU_TX_HP_Current> msg {raw};
 800c908:	f107 0308 	add.w	r3, r7, #8
 800c90c:	6879      	ldr	r1, [r7, #4]
 800c90e:	4618      	mov	r0, r3
 800c910:	f7ff ffe5 	bl	800c8de <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK9RxMessage>
	s_confirmed_hpChannelConfig.m_status[0] = msg.get<can::signals::PDU_HPCh1_Current>() != 0;
 800c914:	f107 0308 	add.w	r3, r7, #8
 800c918:	4618      	mov	r0, r3
 800c91a:	f000 fae3 	bl	800cee4 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh1_CurrentEEENT_8dataTypeEv>
 800c91e:	eef0 7a40 	vmov.f32	s15, s0
 800c922:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c92a:	bf14      	ite	ne
 800c92c:	2301      	movne	r3, #1
 800c92e:	2300      	moveq	r3, #0
 800c930:	b2da      	uxtb	r2, r3
 800c932:	4b1c      	ldr	r3, [pc, #112]	; (800c9a4 <_ZN3pdu18receiveHpDutycycleER9RxMessage+0xa4>)
 800c934:	701a      	strb	r2, [r3, #0]
	s_confirmed_hpChannelConfig.m_status[1] = msg.get<can::signals::PDU_HPCh2_Current>() != 0;
 800c936:	f107 0308 	add.w	r3, r7, #8
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 fae6 	bl	800cf0c <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh2_CurrentEEENT_8dataTypeEv>
 800c940:	eef0 7a40 	vmov.f32	s15, s0
 800c944:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c94c:	bf14      	ite	ne
 800c94e:	2301      	movne	r3, #1
 800c950:	2300      	moveq	r3, #0
 800c952:	b2da      	uxtb	r2, r3
 800c954:	4b13      	ldr	r3, [pc, #76]	; (800c9a4 <_ZN3pdu18receiveHpDutycycleER9RxMessage+0xa4>)
 800c956:	705a      	strb	r2, [r3, #1]
	s_confirmed_hpChannelConfig.m_status[2] = msg.get<can::signals::PDU_HPCh3_Current>() != 0;
 800c958:	f107 0308 	add.w	r3, r7, #8
 800c95c:	4618      	mov	r0, r3
 800c95e:	f000 fae9 	bl	800cf34 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh3_CurrentEEENT_8dataTypeEv>
 800c962:	eef0 7a40 	vmov.f32	s15, s0
 800c966:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c96e:	bf14      	ite	ne
 800c970:	2301      	movne	r3, #1
 800c972:	2300      	moveq	r3, #0
 800c974:	b2da      	uxtb	r2, r3
 800c976:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <_ZN3pdu18receiveHpDutycycleER9RxMessage+0xa4>)
 800c978:	709a      	strb	r2, [r3, #2]
	s_confirmed_hpChannelConfig.m_status[3] = msg.get<can::signals::PDU_HPCh4_Current>() != 0;
 800c97a:	f107 0308 	add.w	r3, r7, #8
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 faec 	bl	800cf5c <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh4_CurrentEEENT_8dataTypeEv>
 800c984:	eef0 7a40 	vmov.f32	s15, s0
 800c988:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c990:	bf14      	ite	ne
 800c992:	2301      	movne	r3, #1
 800c994:	2300      	moveq	r3, #0
 800c996:	b2da      	uxtb	r2, r3
 800c998:	4b02      	ldr	r3, [pc, #8]	; (800c9a4 <_ZN3pdu18receiveHpDutycycleER9RxMessage+0xa4>)
 800c99a:	70da      	strb	r2, [r3, #3]
}
 800c99c:	bf00      	nop
 800c99e:	3720      	adds	r7, #32
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	20000cdc 	.word	0x20000cdc

0800c9a8 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af02      	add	r7, sp, #8
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	68f8      	ldr	r0, [r7, #12]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	2208      	movs	r2, #8
 800c9be:	f240 511a 	movw	r1, #1306	; 0x51a
 800c9c2:	f7f5 fd14 	bl	80023ee <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800c9ca:	f240 521a 	movw	r2, #1306	; 0x51a
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d000      	beq.n	800c9d4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800c9d2:	e7fe      	b.n	800c9d2 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b082      	sub	sp, #8
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
 800c9e6:	6039      	str	r1, [r7, #0]
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	331c      	adds	r3, #28
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f7ff ffd9 	bl	800c9a8 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK19CAN_RxHeaderTypeDefPKh>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3708      	adds	r7, #8
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage>:

void receiveLp1to5Dutycycle(RxMessage& raw){
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b088      	sub	sp, #32
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
	can::Message<can::messages::PDU_TX_LP_Current1> msg {raw};
 800ca08:	f107 0308 	add.w	r3, r7, #8
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4618      	mov	r0, r3
 800ca10:	f7ff ffe5 	bl	800c9de <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK9RxMessage>
	s_confirmed_lpChannelConfig.m_status[0] = msg.get<can::signals::PDU_LPCh1_Current>() != 0;
 800ca14:	f107 0308 	add.w	r3, r7, #8
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f000 fab3 	bl	800cf84 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh1_CurrentEEENT_8dataTypeEv>
 800ca1e:	eef0 7a40 	vmov.f32	s15, s0
 800ca22:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ca26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca2a:	bf14      	ite	ne
 800ca2c:	2301      	movne	r3, #1
 800ca2e:	2300      	moveq	r3, #0
 800ca30:	b2da      	uxtb	r2, r3
 800ca32:	4b25      	ldr	r3, [pc, #148]	; (800cac8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0xc8>)
 800ca34:	701a      	strb	r2, [r3, #0]
	s_confirmed_lpChannelConfig.m_status[1] = msg.get<can::signals::PDU_LPCh2_Current>() != 0;
 800ca36:	f107 0308 	add.w	r3, r7, #8
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 fab6 	bl	800cfac <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh2_CurrentEEENT_8dataTypeEv>
 800ca40:	eef0 7a40 	vmov.f32	s15, s0
 800ca44:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ca48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca4c:	bf14      	ite	ne
 800ca4e:	2301      	movne	r3, #1
 800ca50:	2300      	moveq	r3, #0
 800ca52:	b2da      	uxtb	r2, r3
 800ca54:	4b1c      	ldr	r3, [pc, #112]	; (800cac8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0xc8>)
 800ca56:	705a      	strb	r2, [r3, #1]
	s_confirmed_lpChannelConfig.m_status[2] = msg.get<can::signals::PDU_LPCh3_Current>() != 0;
 800ca58:	f107 0308 	add.w	r3, r7, #8
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f000 fab9 	bl	800cfd4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh3_CurrentEEENT_8dataTypeEv>
 800ca62:	eef0 7a40 	vmov.f32	s15, s0
 800ca66:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ca6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca6e:	bf14      	ite	ne
 800ca70:	2301      	movne	r3, #1
 800ca72:	2300      	moveq	r3, #0
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	4b14      	ldr	r3, [pc, #80]	; (800cac8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0xc8>)
 800ca78:	709a      	strb	r2, [r3, #2]
	s_confirmed_lpChannelConfig.m_status[3] = msg.get<can::signals::PDU_LPCh4_Current>() != 0;
 800ca7a:	f107 0308 	add.w	r3, r7, #8
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 fabc 	bl	800cffc <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh4_CurrentEEENT_8dataTypeEv>
 800ca84:	eef0 7a40 	vmov.f32	s15, s0
 800ca88:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ca8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca90:	bf14      	ite	ne
 800ca92:	2301      	movne	r3, #1
 800ca94:	2300      	moveq	r3, #0
 800ca96:	b2da      	uxtb	r2, r3
 800ca98:	4b0b      	ldr	r3, [pc, #44]	; (800cac8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0xc8>)
 800ca9a:	70da      	strb	r2, [r3, #3]
	s_confirmed_lpChannelConfig.m_status[4] = msg.get<can::signals::PDU_LPCh5_Current>() != 0;
 800ca9c:	f107 0308 	add.w	r3, r7, #8
 800caa0:	4618      	mov	r0, r3
 800caa2:	f000 fabf 	bl	800d024 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh5_CurrentEEENT_8dataTypeEv>
 800caa6:	eef0 7a40 	vmov.f32	s15, s0
 800caaa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800caae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab2:	bf14      	ite	ne
 800cab4:	2301      	movne	r3, #1
 800cab6:	2300      	moveq	r3, #0
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	4b03      	ldr	r3, [pc, #12]	; (800cac8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0xc8>)
 800cabc:	711a      	strb	r2, [r3, #4]
}
 800cabe:	bf00      	nop
 800cac0:	3720      	adds	r7, #32
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	20000ccc 	.word	0x20000ccc

0800cacc <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af02      	add	r7, sp, #8
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
 800cad8:	68f8      	ldr	r0, [r7, #12]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	2300      	movs	r3, #0
 800cae0:	2208      	movs	r2, #8
 800cae2:	f240 515a 	movw	r1, #1370	; 0x55a
 800cae6:	f7f5 fc82 	bl	80023ee <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800caee:	f240 525a 	movw	r2, #1370	; 0x55a
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d000      	beq.n	800caf8 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800caf6:	e7fe      	b.n	800caf6 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}

0800cb02 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800cb02:	b580      	push	{r7, lr}
 800cb04:	b082      	sub	sp, #8
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
 800cb0a:	6039      	str	r1, [r7, #0]
 800cb0c:	6839      	ldr	r1, [r7, #0]
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	331c      	adds	r3, #28
 800cb12:	461a      	mov	r2, r3
 800cb14:	6878      	ldr	r0, [r7, #4]
 800cb16:	f7ff ffd9 	bl	800cacc <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK19CAN_RxHeaderTypeDefPKh>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3708      	adds	r7, #8
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage>:

void receiveLp6to10Dutycycle(RxMessage& raw){
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b088      	sub	sp, #32
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
	can::Message<can::messages::PDU_TX_LP_Current2> msg {raw};
 800cb2c:	f107 0308 	add.w	r3, r7, #8
 800cb30:	6879      	ldr	r1, [r7, #4]
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7ff ffe5 	bl	800cb02 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK9RxMessage>
	s_confirmed_lpChannelConfig.m_status[5] = msg.get<can::signals::PDU_LPCh6_Current>() != 0;
 800cb38:	f107 0308 	add.w	r3, r7, #8
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	f000 fa85 	bl	800d04c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh6_CurrentEEENT_8dataTypeEv>
 800cb42:	eef0 7a40 	vmov.f32	s15, s0
 800cb46:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4e:	bf14      	ite	ne
 800cb50:	2301      	movne	r3, #1
 800cb52:	2300      	moveq	r3, #0
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	4b25      	ldr	r3, [pc, #148]	; (800cbec <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0xc8>)
 800cb58:	715a      	strb	r2, [r3, #5]
	s_confirmed_lpChannelConfig.m_status[6] = msg.get<can::signals::PDU_LPCh7_Current>() != 0;
 800cb5a:	f107 0308 	add.w	r3, r7, #8
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f000 fa88 	bl	800d074 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh7_CurrentEEENT_8dataTypeEv>
 800cb64:	eef0 7a40 	vmov.f32	s15, s0
 800cb68:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb70:	bf14      	ite	ne
 800cb72:	2301      	movne	r3, #1
 800cb74:	2300      	moveq	r3, #0
 800cb76:	b2da      	uxtb	r2, r3
 800cb78:	4b1c      	ldr	r3, [pc, #112]	; (800cbec <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0xc8>)
 800cb7a:	719a      	strb	r2, [r3, #6]
	s_confirmed_lpChannelConfig.m_status[7] = msg.get<can::signals::PDU_LPCh8_Current>() != 0;
 800cb7c:	f107 0308 	add.w	r3, r7, #8
 800cb80:	4618      	mov	r0, r3
 800cb82:	f000 fa8b 	bl	800d09c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh8_CurrentEEENT_8dataTypeEv>
 800cb86:	eef0 7a40 	vmov.f32	s15, s0
 800cb8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb92:	bf14      	ite	ne
 800cb94:	2301      	movne	r3, #1
 800cb96:	2300      	moveq	r3, #0
 800cb98:	b2da      	uxtb	r2, r3
 800cb9a:	4b14      	ldr	r3, [pc, #80]	; (800cbec <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0xc8>)
 800cb9c:	71da      	strb	r2, [r3, #7]
	s_confirmed_lpChannelConfig.m_status[8] = msg.get<can::signals::PDU_LPCh9_Current>() != 0;
 800cb9e:	f107 0308 	add.w	r3, r7, #8
 800cba2:	4618      	mov	r0, r3
 800cba4:	f000 fa8e 	bl	800d0c4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh9_CurrentEEENT_8dataTypeEv>
 800cba8:	eef0 7a40 	vmov.f32	s15, s0
 800cbac:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cbb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb4:	bf14      	ite	ne
 800cbb6:	2301      	movne	r3, #1
 800cbb8:	2300      	moveq	r3, #0
 800cbba:	b2da      	uxtb	r2, r3
 800cbbc:	4b0b      	ldr	r3, [pc, #44]	; (800cbec <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0xc8>)
 800cbbe:	721a      	strb	r2, [r3, #8]
	s_confirmed_lpChannelConfig.m_status[9] = msg.get<can::signals::PDU_LPCh10_Current>() != 0;
 800cbc0:	f107 0308 	add.w	r3, r7, #8
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 fa91 	bl	800d0ec <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals18PDU_LPCh10_CurrentEEENT_8dataTypeEv>
 800cbca:	eef0 7a40 	vmov.f32	s15, s0
 800cbce:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd6:	bf14      	ite	ne
 800cbd8:	2301      	movne	r3, #1
 800cbda:	2300      	moveq	r3, #0
 800cbdc:	b2da      	uxtb	r2, r3
 800cbde:	4b03      	ldr	r3, [pc, #12]	; (800cbec <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0xc8>)
 800cbe0:	725a      	strb	r2, [r3, #9]

}
 800cbe2:	bf00      	nop
 800cbe4:	3720      	adds	r7, #32
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}
 800cbea:	bf00      	nop
 800cbec:	20000ccc 	.word	0x20000ccc

0800cbf0 <_ZN3pdu4initEv>:

void init(){
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b090      	sub	sp, #64	; 0x40
 800cbf4:	af00      	add	r7, sp, #0
	can::registerMessageReceiver<can::messages::PDU_TX_Status>(receiveTxStatus);
 800cbf6:	463b      	mov	r3, r7
 800cbf8:	491f      	ldr	r1, [pc, #124]	; (800cc78 <_ZN3pdu4initEv+0x88>)
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 fa8a 	bl	800d114 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>
 800cc00:	463b      	mov	r3, r7
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 fab0 	bl	800d168 <_ZN3can23registerMessageReceiverINS_8messages13PDU_TX_StatusEEEjSt8functionIFvR9RxMessageEE>
 800cc08:	463b      	mov	r3, r7
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7f4 fc42 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	can::registerMessageReceiver<can::messages::PDU_TX_HP_Current>(receiveHpDutycycle);
 800cc10:	f107 0310 	add.w	r3, r7, #16
 800cc14:	4919      	ldr	r1, [pc, #100]	; (800cc7c <_ZN3pdu4initEv+0x8c>)
 800cc16:	4618      	mov	r0, r3
 800cc18:	f000 fa7c 	bl	800d114 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>
 800cc1c:	f107 0310 	add.w	r3, r7, #16
 800cc20:	4618      	mov	r0, r3
 800cc22:	f000 fabf 	bl	800d1a4 <_ZN3can23registerMessageReceiverINS_8messages17PDU_TX_HP_CurrentEEEjSt8functionIFvR9RxMessageEE>
 800cc26:	f107 0310 	add.w	r3, r7, #16
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f7f4 fc32 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	can::registerMessageReceiver<can::messages::PDU_TX_LP_Current1>(receiveLp1to5Dutycycle);
 800cc30:	f107 0320 	add.w	r3, r7, #32
 800cc34:	4912      	ldr	r1, [pc, #72]	; (800cc80 <_ZN3pdu4initEv+0x90>)
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 fa6c 	bl	800d114 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>
 800cc3c:	f107 0320 	add.w	r3, r7, #32
 800cc40:	4618      	mov	r0, r3
 800cc42:	f000 facd 	bl	800d1e0 <_ZN3can23registerMessageReceiverINS_8messages18PDU_TX_LP_Current1EEEjSt8functionIFvR9RxMessageEE>
 800cc46:	f107 0320 	add.w	r3, r7, #32
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7f4 fc22 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	can::registerMessageReceiver<can::messages::PDU_TX_LP_Current2>(receiveLp6to10Dutycycle);
 800cc50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc54:	490b      	ldr	r1, [pc, #44]	; (800cc84 <_ZN3pdu4initEv+0x94>)
 800cc56:	4618      	mov	r0, r3
 800cc58:	f000 fa5c 	bl	800d114 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>
 800cc5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc60:	4618      	mov	r0, r3
 800cc62:	f000 fadb 	bl	800d21c <_ZN3can23registerMessageReceiverINS_8messages18PDU_TX_LP_Current2EEEjSt8functionIFvR9RxMessageEE>
 800cc66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	f7f4 fc12 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>

}
 800cc70:	bf00      	nop
 800cc72:	3740      	adds	r7, #64	; 0x40
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}
 800cc78:	0800c85d 	.word	0x0800c85d
 800cc7c:	0800c901 	.word	0x0800c901
 800cc80:	0800ca01 	.word	0x0800ca01
 800cc84:	0800cb25 	.word	0x0800cb25

0800cc88 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	2300      	movs	r3, #0
 800cc94:	2201      	movs	r2, #1
 800cc96:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800cc9a:	f7f4 f977 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	4618      	mov	r0, r3
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}

0800cca8 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEEC1Ev>:
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
 800ccb0:	6878      	ldr	r0, [r7, #4]
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	2206      	movs	r2, #6
 800ccb6:	f240 215a 	movw	r1, #602	; 0x25a
 800ccba:	f7f4 f967 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEEC1Ev>:
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b082      	sub	sp, #8
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	2206      	movs	r2, #6
 800ccd6:	f240 21da 	movw	r1, #730	; 0x2da
 800ccda:	f7f4 f957 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <_ZN3pdu6updateEv>:


void update(){
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b092      	sub	sp, #72	; 0x48
 800ccec:	af00      	add	r7, sp, #0
	if(s_status != s_confirmed_status){
 800ccee:	4963      	ldr	r1, [pc, #396]	; (800ce7c <_ZN3pdu6updateEv+0x194>)
 800ccf0:	4863      	ldr	r0, [pc, #396]	; (800ce80 <_ZN3pdu6updateEv+0x198>)
 800ccf2:	f7ff fced 	bl	800c6d0 <_ZNK3pdu9PduStatusneERKS0_>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d01a      	beq.n	800cd32 <_ZN3pdu6updateEv+0x4a>
		can::Message<can::messages::PDU_RX_Control> controlMsg;
 800ccfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7ff ffc1 	bl	800cc88 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1Ev>
		controlMsg.set<can::signals::PDU_RX_Enable>(s_status.m_enabled);
 800cd06:	4b5e      	ldr	r3, [pc, #376]	; (800ce80 <_ZN3pdu6updateEv+0x198>)
 800cd08:	781a      	ldrb	r2, [r3, #0]
 800cd0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd0e:	4611      	mov	r1, r2
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 faa1 	bl	800d258 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals13PDU_RX_EnableEEEvNT_8dataTypeE>
		//controlMsg.set<can::signals::PDU_RX_ErrorReset>(s_confirmed_status.m_error);
		controlMsg.set<can::signals::PDU_RX_PEHWEnable>(s_status.m_pehwEnabled);
 800cd16:	4b5a      	ldr	r3, [pc, #360]	; (800ce80 <_ZN3pdu6updateEv+0x198>)
 800cd18:	785a      	ldrb	r2, [r3, #1]
 800cd1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd1e:	4611      	mov	r1, r2
 800cd20:	4618      	mov	r0, r3
 800cd22:	f000 faae 	bl	800d282 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_PEHWEnableEEEvNT_8dataTypeE>
		controlMsg.send();
 800cd26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f7f4 fa77 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
	if(s_lpChannelConfig != s_confirmed_lpChannelConfig){
 800cd32:	4954      	ldr	r1, [pc, #336]	; (800ce84 <_ZN3pdu6updateEv+0x19c>)
 800cd34:	4854      	ldr	r0, [pc, #336]	; (800ce88 <_ZN3pdu6updateEv+0x1a0>)
 800cd36:	f7ff fcfd 	bl	800c734 <_ZNK3pdu15LpChannelConfigneERKS0_>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d06a      	beq.n	800ce16 <_ZN3pdu6updateEv+0x12e>
		can::Message<can::messages::PDU_RX_LP_Dutycycle> lpMsg;
 800cd40:	f107 0318 	add.w	r3, r7, #24
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7ff ffaf 	bl	800cca8 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEEC1Ev>
		lpMsg.set<can::signals::PDU_LPCh1_Dutycycle>(s_lpChannelConfig.m_status[0] ? 100.0 : 0.0);
 800cd4a:	4b4f      	ldr	r3, [pc, #316]	; (800ce88 <_ZN3pdu6updateEv+0x1a0>)
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d002      	beq.n	800cd58 <_ZN3pdu6updateEv+0x70>
 800cd52:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800ce8c <_ZN3pdu6updateEv+0x1a4>
 800cd56:	e001      	b.n	800cd5c <_ZN3pdu6updateEv+0x74>
 800cd58:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800ce90 <_ZN3pdu6updateEv+0x1a8>
 800cd5c:	f107 0318 	add.w	r3, r7, #24
 800cd60:	eeb0 0a67 	vmov.f32	s0, s15
 800cd64:	4618      	mov	r0, r3
 800cd66:	f000 faa1 	bl	800d2ac <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals19PDU_LPCh1_DutycycleEEEvNT_8dataTypeE>
		lpMsg.set<can::signals::PDU_LPCh2_Dutycycle>(s_lpChannelConfig.m_status[1] ? 100.0 : 0.0);
 800cd6a:	4b47      	ldr	r3, [pc, #284]	; (800ce88 <_ZN3pdu6updateEv+0x1a0>)
 800cd6c:	785b      	ldrb	r3, [r3, #1]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d002      	beq.n	800cd78 <_ZN3pdu6updateEv+0x90>
 800cd72:	eddf 7a46 	vldr	s15, [pc, #280]	; 800ce8c <_ZN3pdu6updateEv+0x1a4>
 800cd76:	e001      	b.n	800cd7c <_ZN3pdu6updateEv+0x94>
 800cd78:	eddf 7a45 	vldr	s15, [pc, #276]	; 800ce90 <_ZN3pdu6updateEv+0x1a8>
 800cd7c:	f107 0318 	add.w	r3, r7, #24
 800cd80:	eeb0 0a67 	vmov.f32	s0, s15
 800cd84:	4618      	mov	r0, r3
 800cd86:	f000 faa8 	bl	800d2da <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals19PDU_LPCh2_DutycycleEEEvNT_8dataTypeE>
		lpMsg.set<can::signals::PDU_LPCh3_Dutycycle>(s_lpChannelConfig.m_status[2] ? 100.0 : 0.0);
 800cd8a:	4b3f      	ldr	r3, [pc, #252]	; (800ce88 <_ZN3pdu6updateEv+0x1a0>)
 800cd8c:	789b      	ldrb	r3, [r3, #2]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <_ZN3pdu6updateEv+0xb0>
 800cd92:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800ce8c <_ZN3pdu6updateEv+0x1a4>
 800cd96:	e001      	b.n	800cd9c <_ZN3pdu6updateEv+0xb4>
 800cd98:	eddf 7a3d 	vldr	s15, [pc, #244]	; 800ce90 <_ZN3pdu6updateEv+0x1a8>
 800cd9c:	f107 0318 	add.w	r3, r7, #24
 800cda0:	eeb0 0a67 	vmov.f32	s0, s15
 800cda4:	4618      	mov	r0, r3
 800cda6:	f000 faaf 	bl	800d308 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals19PDU_LPCh3_DutycycleEEEvNT_8dataTypeE>
		lpMsg.set<can::signals::PDU_LPCh8_Dutycycle>(s_lpChannelConfig.m_status[7] ? 100.0 : 0.0);
 800cdaa:	4b37      	ldr	r3, [pc, #220]	; (800ce88 <_ZN3pdu6updateEv+0x1a0>)
 800cdac:	79db      	ldrb	r3, [r3, #7]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d002      	beq.n	800cdb8 <_ZN3pdu6updateEv+0xd0>
 800cdb2:	eddf 7a36 	vldr	s15, [pc, #216]	; 800ce8c <_ZN3pdu6updateEv+0x1a4>
 800cdb6:	e001      	b.n	800cdbc <_ZN3pdu6updateEv+0xd4>
 800cdb8:	eddf 7a35 	vldr	s15, [pc, #212]	; 800ce90 <_ZN3pdu6updateEv+0x1a8>
 800cdbc:	f107 0318 	add.w	r3, r7, #24
 800cdc0:	eeb0 0a67 	vmov.f32	s0, s15
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f000 fab6 	bl	800d336 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals19PDU_LPCh8_DutycycleEEEvNT_8dataTypeE>
		lpMsg.set<can::signals::PDU_LPCh9_Dutycycle>(s_lpChannelConfig.m_status[8] ? 100.0 : 0.0);
 800cdca:	4b2f      	ldr	r3, [pc, #188]	; (800ce88 <_ZN3pdu6updateEv+0x1a0>)
 800cdcc:	7a1b      	ldrb	r3, [r3, #8]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <_ZN3pdu6updateEv+0xf0>
 800cdd2:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800ce8c <_ZN3pdu6updateEv+0x1a4>
 800cdd6:	e001      	b.n	800cddc <_ZN3pdu6updateEv+0xf4>
 800cdd8:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800ce90 <_ZN3pdu6updateEv+0x1a8>
 800cddc:	f107 0318 	add.w	r3, r7, #24
 800cde0:	eeb0 0a67 	vmov.f32	s0, s15
 800cde4:	4618      	mov	r0, r3
 800cde6:	f000 fabd 	bl	800d364 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals19PDU_LPCh9_DutycycleEEEvNT_8dataTypeE>
		lpMsg.set<can::signals::PDU_LPCh10_Dutycycle>(s_lpChannelConfig.m_status[9] ? 100.0 : 0.0);
 800cdea:	4b27      	ldr	r3, [pc, #156]	; (800ce88 <_ZN3pdu6updateEv+0x1a0>)
 800cdec:	7a5b      	ldrb	r3, [r3, #9]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d002      	beq.n	800cdf8 <_ZN3pdu6updateEv+0x110>
 800cdf2:	eddf 7a26 	vldr	s15, [pc, #152]	; 800ce8c <_ZN3pdu6updateEv+0x1a4>
 800cdf6:	e001      	b.n	800cdfc <_ZN3pdu6updateEv+0x114>
 800cdf8:	eddf 7a25 	vldr	s15, [pc, #148]	; 800ce90 <_ZN3pdu6updateEv+0x1a8>
 800cdfc:	f107 0318 	add.w	r3, r7, #24
 800ce00:	eeb0 0a67 	vmov.f32	s0, s15
 800ce04:	4618      	mov	r0, r3
 800ce06:	f000 fac4 	bl	800d392 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals20PDU_LPCh10_DutycycleEEEvNT_8dataTypeE>
		lpMsg.send();
 800ce0a:	f107 0318 	add.w	r3, r7, #24
 800ce0e:	2100      	movs	r1, #0
 800ce10:	4618      	mov	r0, r3
 800ce12:	f7f4 fa05 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
		//update lp channel config.
		//can::message<can::messages::PDU_LP_Duty> lpDutyMsg;
		//TODO ...
	}

	if(s_hpChannelConfig != s_confirmed_hpChannelConfig){
 800ce16:	491f      	ldr	r1, [pc, #124]	; (800ce94 <_ZN3pdu6updateEv+0x1ac>)
 800ce18:	481f      	ldr	r0, [pc, #124]	; (800ce98 <_ZN3pdu6updateEv+0x1b0>)
 800ce1a:	f7ff fcbd 	bl	800c798 <_ZNK3pdu15HpChannelConfigneERKS0_>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d026      	beq.n	800ce72 <_ZN3pdu6updateEv+0x18a>
		can::Message<can::messages::PDU_RX_HP_D_Dutycycle> hpMsg;
 800ce24:	463b      	mov	r3, r7
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff ff4e 	bl	800ccc8 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEEC1Ev>
		hpMsg.set<can::signals::PDU_HPCh1_Dutycycle>(s_hpChannelConfig.m_status[0] ? 100.0 : 0.0);
 800ce2c:	4b1a      	ldr	r3, [pc, #104]	; (800ce98 <_ZN3pdu6updateEv+0x1b0>)
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d002      	beq.n	800ce3a <_ZN3pdu6updateEv+0x152>
 800ce34:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ce8c <_ZN3pdu6updateEv+0x1a4>
 800ce38:	e001      	b.n	800ce3e <_ZN3pdu6updateEv+0x156>
 800ce3a:	eddf 7a15 	vldr	s15, [pc, #84]	; 800ce90 <_ZN3pdu6updateEv+0x1a8>
 800ce3e:	463b      	mov	r3, r7
 800ce40:	eeb0 0a67 	vmov.f32	s0, s15
 800ce44:	4618      	mov	r0, r3
 800ce46:	f000 fabb 	bl	800d3c0 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3setINS_7signals19PDU_HPCh1_DutycycleEEEvNT_8dataTypeE>
		hpMsg.set<can::signals::PDU_HPCh2_Dutycycle>(s_hpChannelConfig.m_status[1] ? 100.0 : 0.0);
 800ce4a:	4b13      	ldr	r3, [pc, #76]	; (800ce98 <_ZN3pdu6updateEv+0x1b0>)
 800ce4c:	785b      	ldrb	r3, [r3, #1]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d002      	beq.n	800ce58 <_ZN3pdu6updateEv+0x170>
 800ce52:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ce8c <_ZN3pdu6updateEv+0x1a4>
 800ce56:	e001      	b.n	800ce5c <_ZN3pdu6updateEv+0x174>
 800ce58:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800ce90 <_ZN3pdu6updateEv+0x1a8>
 800ce5c:	463b      	mov	r3, r7
 800ce5e:	eeb0 0a67 	vmov.f32	s0, s15
 800ce62:	4618      	mov	r0, r3
 800ce64:	f000 fac3 	bl	800d3ee <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3setINS_7signals19PDU_HPCh2_DutycycleEEEvNT_8dataTypeE>
		// update hp channel config.
		hpMsg.send();
 800ce68:	463b      	mov	r3, r7
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	4618      	mov	r0, r3
 800ce6e:	f7f4 f9d7 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
}
 800ce72:	bf00      	nop
 800ce74:	3748      	adds	r7, #72	; 0x48
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	bf00      	nop
 800ce7c:	20000cbc 	.word	0x20000cbc
 800ce80:	20000028 	.word	0x20000028
 800ce84:	20000ccc 	.word	0x20000ccc
 800ce88:	20000cc0 	.word	0x20000cc0
 800ce8c:	42c80000 	.word	0x42c80000
 800ce90:	00000000 	.word	0x00000000
 800ce94:	20000cdc 	.word	0x20000cdc
 800ce98:	20000cd8 	.word	0x20000cd8

0800ce9c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals14PDU_TX_EnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800ce9c:	b580      	push	{r7, lr}
 800ce9e:	b082      	sub	sp, #8
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f103 0208 	add.w	r2, r3, #8
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	3310      	adds	r3, #16
 800ceae:	4619      	mov	r1, r3
 800ceb0:	4610      	mov	r0, r2
 800ceb2:	f7fe ff03 	bl	800bcbc <_ZN3can7signals14PDU_TX_Enabled3getERKyS3_>
 800ceb6:	4603      	mov	r3, r0
        }
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals18PDU_TX_PEHWEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f103 0208 	add.w	r2, r3, #8
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	3310      	adds	r3, #16
 800ced2:	4619      	mov	r1, r3
 800ced4:	4610      	mov	r0, r2
 800ced6:	f7fe ff09 	bl	800bcec <_ZN3can7signals18PDU_TX_PEHWEnabled3getERKyS3_>
 800ceda:	4603      	mov	r3, r0
        }
 800cedc:	4618      	mov	r0, r3
 800cede:	3708      	adds	r7, #8
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh1_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f103 0208 	add.w	r2, r3, #8
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3310      	adds	r3, #16
 800cef6:	4619      	mov	r1, r3
 800cef8:	4610      	mov	r0, r2
 800cefa:	f7fe ff5f 	bl	800bdbc <_ZN3can7signals17PDU_HPCh1_Current3getERKyS3_>
 800cefe:	eef0 7a40 	vmov.f32	s15, s0
        }
 800cf02:	eeb0 0a67 	vmov.f32	s0, s15
 800cf06:	3708      	adds	r7, #8
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh2_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b082      	sub	sp, #8
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f103 0208 	add.w	r2, r3, #8
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	3310      	adds	r3, #16
 800cf1e:	4619      	mov	r1, r3
 800cf20:	4610      	mov	r0, r2
 800cf22:	f7fe ff69 	bl	800bdf8 <_ZN3can7signals17PDU_HPCh2_Current3getERKyS3_>
 800cf26:	eef0 7a40 	vmov.f32	s15, s0
        }
 800cf2a:	eeb0 0a67 	vmov.f32	s0, s15
 800cf2e:	3708      	adds	r7, #8
 800cf30:	46bd      	mov	sp, r7
 800cf32:	bd80      	pop	{r7, pc}

0800cf34 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh3_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b082      	sub	sp, #8
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f103 0208 	add.w	r2, r3, #8
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	3310      	adds	r3, #16
 800cf46:	4619      	mov	r1, r3
 800cf48:	4610      	mov	r0, r2
 800cf4a:	f7fe ff7b 	bl	800be44 <_ZN3can7signals17PDU_HPCh3_Current3getERKyS3_>
 800cf4e:	eef0 7a40 	vmov.f32	s15, s0
        }
 800cf52:	eeb0 0a67 	vmov.f32	s0, s15
 800cf56:	3708      	adds	r7, #8
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh4_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b082      	sub	sp, #8
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f103 0208 	add.w	r2, r3, #8
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	3310      	adds	r3, #16
 800cf6e:	4619      	mov	r1, r3
 800cf70:	4610      	mov	r0, r2
 800cf72:	f7fe ff8b 	bl	800be8c <_ZN3can7signals17PDU_HPCh4_Current3getERKyS3_>
 800cf76:	eef0 7a40 	vmov.f32	s15, s0
        }
 800cf7a:	eeb0 0a67 	vmov.f32	s0, s15
 800cf7e:	3708      	adds	r7, #8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh1_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b082      	sub	sp, #8
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f103 0208 	add.w	r2, r3, #8
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	3310      	adds	r3, #16
 800cf96:	4619      	mov	r1, r3
 800cf98:	4610      	mov	r0, r2
 800cf9a:	f7ff fa1b 	bl	800c3d4 <_ZN3can7signals17PDU_LPCh1_Current3getERKyS3_>
 800cf9e:	eef0 7a40 	vmov.f32	s15, s0
        }
 800cfa2:	eeb0 0a67 	vmov.f32	s0, s15
 800cfa6:	3708      	adds	r7, #8
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}

0800cfac <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh2_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f103 0208 	add.w	r2, r3, #8
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	3310      	adds	r3, #16
 800cfbe:	4619      	mov	r1, r3
 800cfc0:	4610      	mov	r0, r2
 800cfc2:	f7ff fa25 	bl	800c410 <_ZN3can7signals17PDU_LPCh2_Current3getERKyS3_>
 800cfc6:	eef0 7a40 	vmov.f32	s15, s0
        }
 800cfca:	eeb0 0a67 	vmov.f32	s0, s15
 800cfce:	3708      	adds	r7, #8
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}

0800cfd4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh3_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b082      	sub	sp, #8
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f103 0208 	add.w	r2, r3, #8
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	3310      	adds	r3, #16
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	4610      	mov	r0, r2
 800cfea:	f7ff fa37 	bl	800c45c <_ZN3can7signals17PDU_LPCh3_Current3getERKyS3_>
 800cfee:	eef0 7a40 	vmov.f32	s15, s0
        }
 800cff2:	eeb0 0a67 	vmov.f32	s0, s15
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}

0800cffc <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh4_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f103 0208 	add.w	r2, r3, #8
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	3310      	adds	r3, #16
 800d00e:	4619      	mov	r1, r3
 800d010:	4610      	mov	r0, r2
 800d012:	f7ff fa49 	bl	800c4a8 <_ZN3can7signals17PDU_LPCh4_Current3getERKyS3_>
 800d016:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d01a:	eeb0 0a67 	vmov.f32	s0, s15
 800d01e:	3708      	adds	r7, #8
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}

0800d024 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh5_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d024:	b580      	push	{r7, lr}
 800d026:	b082      	sub	sp, #8
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f103 0208 	add.w	r2, r3, #8
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	3310      	adds	r3, #16
 800d036:	4619      	mov	r1, r3
 800d038:	4610      	mov	r0, r2
 800d03a:	f7ff fa59 	bl	800c4f0 <_ZN3can7signals17PDU_LPCh5_Current3getERKyS3_>
 800d03e:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d042:	eeb0 0a67 	vmov.f32	s0, s15
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh6_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f103 0208 	add.w	r2, r3, #8
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	3310      	adds	r3, #16
 800d05e:	4619      	mov	r1, r3
 800d060:	4610      	mov	r0, r2
 800d062:	f7ff fa87 	bl	800c574 <_ZN3can7signals17PDU_LPCh6_Current3getERKyS3_>
 800d066:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d06a:	eeb0 0a67 	vmov.f32	s0, s15
 800d06e:	3708      	adds	r7, #8
 800d070:	46bd      	mov	sp, r7
 800d072:	bd80      	pop	{r7, pc}

0800d074 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh7_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f103 0208 	add.w	r2, r3, #8
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	3310      	adds	r3, #16
 800d086:	4619      	mov	r1, r3
 800d088:	4610      	mov	r0, r2
 800d08a:	f7ff fa99 	bl	800c5c0 <_ZN3can7signals17PDU_LPCh7_Current3getERKyS3_>
 800d08e:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d092:	eeb0 0a67 	vmov.f32	s0, s15
 800d096:	3708      	adds	r7, #8
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh8_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b082      	sub	sp, #8
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f103 0208 	add.w	r2, r3, #8
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	3310      	adds	r3, #16
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	4610      	mov	r0, r2
 800d0b2:	f7ff faab 	bl	800c60c <_ZN3can7signals17PDU_LPCh8_Current3getERKyS3_>
 800d0b6:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d0ba:	eeb0 0a67 	vmov.f32	s0, s15
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh9_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b082      	sub	sp, #8
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f103 0208 	add.w	r2, r3, #8
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	3310      	adds	r3, #16
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	4610      	mov	r0, r2
 800d0da:	f7ff fabb 	bl	800c654 <_ZN3can7signals17PDU_LPCh9_Current3getERKyS3_>
 800d0de:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d0e2:	eeb0 0a67 	vmov.f32	s0, s15
 800d0e6:	3708      	adds	r7, #8
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals18PDU_LPCh10_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b082      	sub	sp, #8
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f103 0208 	add.w	r2, r3, #8
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	3310      	adds	r3, #16
 800d0fe:	4619      	mov	r1, r3
 800d100:	4610      	mov	r0, r2
 800d102:	f7ff fa19 	bl	800c538 <_ZN3can7signals18PDU_LPCh10_Current3getERKyS3_>
 800d106:	eef0 7a40 	vmov.f32	s15, s0
        }
 800d10a:	eeb0 0a67 	vmov.f32	s0, s15
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800d114:	b590      	push	{r4, r7, lr}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
 800d11c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	4618      	mov	r0, r3
 800d122:	f7f4 f985 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	4618      	mov	r0, r3
 800d12a:	f000 f977 	bl	800d41c <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE21_M_not_empty_functionIS3_EEbPT_>
 800d12e:	4603      	mov	r3, r0
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00f      	beq.n	800d154 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800d134:	687c      	ldr	r4, [r7, #4]
 800d136:	463b      	mov	r3, r7
 800d138:	4618      	mov	r0, r3
 800d13a:	f000 f97f 	bl	800d43c <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 800d13e:	4603      	mov	r3, r0
 800d140:	4619      	mov	r1, r3
 800d142:	4620      	mov	r0, r4
 800d144:	f000 f985 	bl	800d452 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	4a05      	ldr	r2, [pc, #20]	; (800d160 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x4c>)
 800d14c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	4a04      	ldr	r2, [pc, #16]	; (800d164 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x50>)
 800d152:	609a      	str	r2, [r3, #8]
      }
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	4618      	mov	r0, r3
 800d158:	370c      	adds	r7, #12
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd90      	pop	{r4, r7, pc}
 800d15e:	bf00      	nop
 800d160:	0800d477 	.word	0x0800d477
 800d164:	0800d4a1 	.word	0x0800d4a1

0800d168 <_ZN3can23registerMessageReceiverINS_8messages13PDU_TX_StatusEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800d168:	b590      	push	{r4, r7, lr}
 800d16a:	b087      	sub	sp, #28
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d170:	f107 0308 	add.w	r3, r7, #8
 800d174:	6879      	ldr	r1, [r7, #4]
 800d176:	4618      	mov	r0, r3
 800d178:	f7f4 fa97 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800d17c:	f107 0308 	add.w	r3, r7, #8
 800d180:	2200      	movs	r2, #0
 800d182:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800d186:	4618      	mov	r0, r3
 800d188:	f7f4 f9c8 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800d18c:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800d18e:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d190:	f107 0308 	add.w	r3, r7, #8
 800d194:	4618      	mov	r0, r3
 800d196:	f7f4 f97d 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800d19a:	4623      	mov	r3, r4
}
 800d19c:	4618      	mov	r0, r3
 800d19e:	371c      	adds	r7, #28
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd90      	pop	{r4, r7, pc}

0800d1a4 <_ZN3can23registerMessageReceiverINS_8messages17PDU_TX_HP_CurrentEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800d1a4:	b590      	push	{r4, r7, lr}
 800d1a6:	b087      	sub	sp, #28
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d1ac:	f107 0308 	add.w	r3, r7, #8
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f7f4 fa79 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800d1b8:	f107 0308 	add.w	r3, r7, #8
 800d1bc:	2200      	movs	r2, #0
 800d1be:	f240 211a 	movw	r1, #538	; 0x21a
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	f7f4 f9aa 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800d1c8:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800d1ca:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d1cc:	f107 0308 	add.w	r3, r7, #8
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	f7f4 f95f 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800d1d6:	4623      	mov	r3, r4
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	371c      	adds	r7, #28
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd90      	pop	{r4, r7, pc}

0800d1e0 <_ZN3can23registerMessageReceiverINS_8messages18PDU_TX_LP_Current1EEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800d1e0:	b590      	push	{r4, r7, lr}
 800d1e2:	b087      	sub	sp, #28
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d1e8:	f107 0308 	add.w	r3, r7, #8
 800d1ec:	6879      	ldr	r1, [r7, #4]
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7f4 fa5b 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800d1f4:	f107 0308 	add.w	r3, r7, #8
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	f240 511a 	movw	r1, #1306	; 0x51a
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7f4 f98c 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800d204:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800d206:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d208:	f107 0308 	add.w	r3, r7, #8
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7f4 f941 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800d212:	4623      	mov	r3, r4
}
 800d214:	4618      	mov	r0, r3
 800d216:	371c      	adds	r7, #28
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd90      	pop	{r4, r7, pc}

0800d21c <_ZN3can23registerMessageReceiverINS_8messages18PDU_TX_LP_Current2EEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800d21c:	b590      	push	{r4, r7, lr}
 800d21e:	b087      	sub	sp, #28
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d224:	f107 0308 	add.w	r3, r7, #8
 800d228:	6879      	ldr	r1, [r7, #4]
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7f4 fa3d 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800d230:	f107 0308 	add.w	r3, r7, #8
 800d234:	2200      	movs	r2, #0
 800d236:	f240 515a 	movw	r1, #1370	; 0x55a
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7f4 f96e 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800d240:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800d242:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800d244:	f107 0308 	add.w	r3, r7, #8
 800d248:	4618      	mov	r0, r3
 800d24a:	f7f4 f923 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800d24e:	4623      	mov	r3, r4
}
 800d250:	4618      	mov	r0, r3
 800d252:	371c      	adds	r7, #28
 800d254:	46bd      	mov	sp, r7
 800d256:	bd90      	pop	{r4, r7, pc}

0800d258 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals13PDU_RX_EnableEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	460b      	mov	r3, r1
 800d262:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f103 0008 	add.w	r0, r3, #8
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f103 0110 	add.w	r1, r3, #16
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	1d1a      	adds	r2, r3, #4
 800d274:	78fb      	ldrb	r3, [r7, #3]
 800d276:	f7fe fd51 	bl	800bd1c <_ZN3can7signals13PDU_RX_Enable3setERyS2_Rhb>
        }
 800d27a:	bf00      	nop
 800d27c:	3708      	adds	r7, #8
 800d27e:	46bd      	mov	sp, r7
 800d280:	bd80      	pop	{r7, pc}

0800d282 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_PEHWEnableEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d282:	b580      	push	{r7, lr}
 800d284:	b082      	sub	sp, #8
 800d286:	af00      	add	r7, sp, #0
 800d288:	6078      	str	r0, [r7, #4]
 800d28a:	460b      	mov	r3, r1
 800d28c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f103 0008 	add.w	r0, r3, #8
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f103 0110 	add.w	r1, r3, #16
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	1d1a      	adds	r2, r3, #4
 800d29e:	78fb      	ldrb	r3, [r7, #3]
 800d2a0:	f7fe fd60 	bl	800bd64 <_ZN3can7signals17PDU_RX_PEHWEnable3setERyS2_Rhb>
        }
 800d2a4:	bf00      	nop
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals19PDU_LPCh1_DutycycleEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f103 0008 	add.w	r0, r3, #8
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f103 0110 	add.w	r1, r3, #16
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	3304      	adds	r3, #4
 800d2c8:	ed97 0a00 	vldr	s0, [r7]
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	f7fe fe01 	bl	800bed4 <_ZN3can7signals19PDU_LPCh1_Dutycycle3setERyS2_Rhf>
        }
 800d2d2:	bf00      	nop
 800d2d4:	3708      	adds	r7, #8
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals19PDU_LPCh2_DutycycleEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b082      	sub	sp, #8
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	6078      	str	r0, [r7, #4]
 800d2e2:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f103 0008 	add.w	r0, r3, #8
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f103 0110 	add.w	r1, r3, #16
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	ed97 0a00 	vldr	s0, [r7]
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	f7fe fe86 	bl	800c00c <_ZN3can7signals19PDU_LPCh2_Dutycycle3setERyS2_Rhf>
        }
 800d300:	bf00      	nop
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals19PDU_LPCh3_DutycycleEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f103 0008 	add.w	r0, r3, #8
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f103 0110 	add.w	r1, r3, #16
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	3304      	adds	r3, #4
 800d324:	ed97 0a00 	vldr	s0, [r7]
 800d328:	461a      	mov	r2, r3
 800d32a:	f7fe fec3 	bl	800c0b4 <_ZN3can7signals19PDU_LPCh3_Dutycycle3setERyS2_Rhf>
        }
 800d32e:	bf00      	nop
 800d330:	3708      	adds	r7, #8
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}

0800d336 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals19PDU_LPCh8_DutycycleEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d336:	b580      	push	{r7, lr}
 800d338:	b082      	sub	sp, #8
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
 800d33e:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f103 0008 	add.w	r0, r3, #8
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f103 0110 	add.w	r1, r3, #16
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	3304      	adds	r3, #4
 800d352:	ed97 0a00 	vldr	s0, [r7]
 800d356:	461a      	mov	r2, r3
 800d358:	f7fe fefe 	bl	800c158 <_ZN3can7signals19PDU_LPCh8_Dutycycle3setERyS2_Rhf>
        }
 800d35c:	bf00      	nop
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals19PDU_LPCh9_DutycycleEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
 800d36c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f103 0008 	add.w	r0, r3, #8
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f103 0110 	add.w	r1, r3, #16
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	3304      	adds	r3, #4
 800d380:	ed97 0a00 	vldr	s0, [r7]
 800d384:	461a      	mov	r2, r3
 800d386:	f7fe ff37 	bl	800c1f8 <_ZN3can7signals19PDU_LPCh9_Dutycycle3setERyS2_Rhf>
        }
 800d38a:	bf00      	nop
 800d38c:	3708      	adds	r7, #8
 800d38e:	46bd      	mov	sp, r7
 800d390:	bd80      	pop	{r7, pc}

0800d392 <_ZN3can7MessageINS_8messages19PDU_RX_LP_DutycycleEE3setINS_7signals20PDU_LPCh10_DutycycleEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d392:	b580      	push	{r7, lr}
 800d394:	b082      	sub	sp, #8
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
 800d39a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	f103 0008 	add.w	r0, r3, #8
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f103 0110 	add.w	r1, r3, #16
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	ed97 0a00 	vldr	s0, [r7]
 800d3b2:	461a      	mov	r2, r3
 800d3b4:	f7fe fdd6 	bl	800bf64 <_ZN3can7signals20PDU_LPCh10_Dutycycle3setERyS2_Rhf>
        }
 800d3b8:	bf00      	nop
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}

0800d3c0 <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3setINS_7signals19PDU_HPCh1_DutycycleEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b082      	sub	sp, #8
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f103 0008 	add.w	r0, r3, #8
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f103 0110 	add.w	r1, r3, #16
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	3304      	adds	r3, #4
 800d3dc:	ed97 0a00 	vldr	s0, [r7]
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	f7fe ff5b 	bl	800c29c <_ZN3can7signals19PDU_HPCh1_Dutycycle3setERyS2_Rhf>
        }
 800d3e6:	bf00      	nop
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <_ZN3can7MessageINS_8messages21PDU_RX_HP_D_DutycycleEE3setINS_7signals19PDU_HPCh2_DutycycleEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b082      	sub	sp, #8
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
 800d3f6:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f103 0008 	add.w	r0, r3, #8
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f103 0110 	add.w	r1, r3, #16
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	3304      	adds	r3, #4
 800d40a:	ed97 0a00 	vldr	s0, [r7]
 800d40e:	461a      	mov	r2, r3
 800d410:	f7fe ff8c 	bl	800c32c <_ZN3can7signals19PDU_HPCh2_Dutycycle3setERyS2_Rhf>
        }
 800d414:	bf00      	nop
 800d416:	3708      	adds	r7, #8
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	2b00      	cmp	r3, #0
 800d428:	bf14      	ite	ne
 800d42a:	2301      	movne	r3, #1
 800d42c:	2300      	moveq	r3, #0
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	4618      	mov	r0, r3
 800d432:	370c      	adds	r7, #12
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800d43c:	b480      	push	{r7}
 800d43e:	b083      	sub	sp, #12
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	4618      	mov	r0, r3
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800d452:	b590      	push	{r4, r7, lr}
 800d454:	b083      	sub	sp, #12
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
 800d45a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800d45c:	6838      	ldr	r0, [r7, #0]
 800d45e:	f7ff ffed 	bl	800d43c <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 800d462:	4603      	mov	r3, r0
 800d464:	4622      	mov	r2, r4
 800d466:	4619      	mov	r1, r3
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 f838 	bl	800d4de <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800d46e:	bf00      	nop
 800d470:	370c      	adds	r7, #12
 800d472:	46bd      	mov	sp, r7
 800d474:	bd90      	pop	{r4, r7, pc}

0800d476 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800d476:	b590      	push	{r4, r7, lr}
 800d478:	b083      	sub	sp, #12
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	6078      	str	r0, [r7, #4]
 800d47e:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f845 	bl	800d510 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 800d486:	4604      	mov	r4, r0
 800d488:	6838      	ldr	r0, [r7, #0]
 800d48a:	f7f4 f998 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800d48e:	4603      	mov	r3, r0
 800d490:	4619      	mov	r1, r3
 800d492:	4620      	mov	r0, r4
 800d494:	f000 f84d 	bl	800d532 <_ZSt10__invoke_rIvRPFvR9RxMessageEJS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800d498:	bf00      	nop
      }
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd90      	pop	{r4, r7, pc}

0800d4a0 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800d4a0:	b590      	push	{r4, r7, lr}
 800d4a2:	b085      	sub	sp, #20
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	60f8      	str	r0, [r7, #12]
 800d4a8:	60b9      	str	r1, [r7, #8]
 800d4aa:	4613      	mov	r3, r2
 800d4ac:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800d4ae:	79fb      	ldrb	r3, [r7, #7]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d109      	bne.n	800d4c8 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	f000 f852 	bl	800d55e <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>
 800d4ba:	4604      	mov	r4, r0
 800d4bc:	68b8      	ldr	r0, [r7, #8]
 800d4be:	f000 f827 	bl	800d510 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	6023      	str	r3, [r4, #0]
	    break;
 800d4c6:	e005      	b.n	800d4d4 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800d4c8:	79fb      	ldrb	r3, [r7, #7]
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	68b9      	ldr	r1, [r7, #8]
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	f000 f851 	bl	800d576 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800d4d4:	2300      	movs	r3, #0
      }
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	3714      	adds	r7, #20
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	bd90      	pop	{r4, r7, pc}

0800d4de <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800d4de:	b590      	push	{r4, r7, lr}
 800d4e0:	b085      	sub	sp, #20
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	60f8      	str	r0, [r7, #12]
 800d4e6:	60b9      	str	r1, [r7, #8]
 800d4e8:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800d4ea:	68b8      	ldr	r0, [r7, #8]
 800d4ec:	f7ff ffa6 	bl	800d43c <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	681c      	ldr	r4, [r3, #0]
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f7fb f8f1 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	2004      	movs	r0, #4
 800d500:	f7fb f8e0 	bl	80086c4 <_ZnwjPv>
 800d504:	4603      	mov	r3, r0
 800d506:	601c      	str	r4, [r3, #0]
 800d508:	bf00      	nop
 800d50a:	3714      	adds	r7, #20
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd90      	pop	{r4, r7, pc}

0800d510 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f857 	bl	800d5cc <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>
 800d51e:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	f000 f85f 	bl	800d5e4 <_ZSt11__addressofIKPFvR9RxMessageEEPT_RS5_>
 800d526:	4603      	mov	r3, r0
 800d528:	bf00      	nop
	}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <_ZSt10__invoke_rIvRPFvR9RxMessageEJS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800d532:	b5b0      	push	{r4, r5, r7, lr}
 800d534:	b082      	sub	sp, #8
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f000 f85c 	bl	800d5fa <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d542:	4604      	mov	r4, r0
 800d544:	6838      	ldr	r0, [r7, #0]
 800d546:	f7f4 f93a 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800d54a:	4603      	mov	r3, r0
 800d54c:	461a      	mov	r2, r3
 800d54e:	4621      	mov	r1, r4
 800d550:	4628      	mov	r0, r5
 800d552:	f000 f85d 	bl	800d610 <_ZSt13__invoke_implIvRPFvR9RxMessageEJS1_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800d556:	bf00      	nop
 800d558:	3708      	adds	r7, #8
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bdb0      	pop	{r4, r5, r7, pc}

0800d55e <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>:
      _M_access()
 800d55e:	b580      	push	{r7, lr}
 800d560:	b082      	sub	sp, #8
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f7fb f8b8 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800d56c:	4603      	mov	r3, r0
 800d56e:	4618      	mov	r0, r3
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800d576:	b5b0      	push	{r4, r5, r7, lr}
 800d578:	b084      	sub	sp, #16
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	60f8      	str	r0, [r7, #12]
 800d57e:	60b9      	str	r1, [r7, #8]
 800d580:	4613      	mov	r3, r2
 800d582:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800d584:	79fb      	ldrb	r3, [r7, #7]
 800d586:	2b03      	cmp	r3, #3
 800d588:	d016      	beq.n	800d5b8 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800d58a:	2b03      	cmp	r3, #3
 800d58c:	dc19      	bgt.n	800d5c2 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800d58e:	2b01      	cmp	r3, #1
 800d590:	d002      	beq.n	800d598 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800d592:	2b02      	cmp	r3, #2
 800d594:	d00a      	beq.n	800d5ac <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800d596:	e014      	b.n	800d5c2 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f7ff ffe0 	bl	800d55e <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>
 800d59e:	4604      	mov	r4, r0
 800d5a0:	68b8      	ldr	r0, [r7, #8]
 800d5a2:	f7ff ffb5 	bl	800d510 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	6023      	str	r3, [r4, #0]
	      break;
 800d5aa:	e00a      	b.n	800d5c2 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800d5ac:	462a      	mov	r2, r5
 800d5ae:	68b9      	ldr	r1, [r7, #8]
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f000 f842 	bl	800d63a <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800d5b6:	e004      	b.n	800d5c2 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800d5b8:	4621      	mov	r1, r4
 800d5ba:	68f8      	ldr	r0, [r7, #12]
 800d5bc:	f000 f856 	bl	800d66c <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800d5c0:	bf00      	nop
	  return false;
 800d5c2:	2300      	movs	r3, #0
	}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3710      	adds	r7, #16
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bdb0      	pop	{r4, r5, r7, pc}

0800d5cc <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>:
      _M_access() const
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b082      	sub	sp, #8
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f7fb f88c 	bl	80086f2 <_ZNKSt9_Any_data9_M_accessEv>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	4618      	mov	r0, r3
 800d5de:	3708      	adds	r7, #8
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <_ZSt11__addressofIKPFvR9RxMessageEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d5fa:	b480      	push	{r7}
 800d5fc:	b083      	sub	sp, #12
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4618      	mov	r0, r3
 800d606:	370c      	adds	r7, #12
 800d608:	46bd      	mov	sp, r7
 800d60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60e:	4770      	bx	lr

0800d610 <_ZSt13__invoke_implIvRPFvR9RxMessageEJS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800d610:	b590      	push	{r4, r7, lr}
 800d612:	b085      	sub	sp, #20
 800d614:	af00      	add	r7, sp, #0
 800d616:	7338      	strb	r0, [r7, #12]
 800d618:	60b9      	str	r1, [r7, #8]
 800d61a:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800d61c:	68b8      	ldr	r0, [r7, #8]
 800d61e:	f7ff ffec 	bl	800d5fa <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>
 800d622:	4603      	mov	r3, r0
 800d624:	681c      	ldr	r4, [r3, #0]
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7f4 f8c9 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800d62c:	4603      	mov	r3, r0
 800d62e:	4618      	mov	r0, r3
 800d630:	47a0      	blx	r4
 800d632:	bf00      	nop
 800d634:	3714      	adds	r7, #20
 800d636:	46bd      	mov	sp, r7
 800d638:	bd90      	pop	{r4, r7, pc}

0800d63a <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800d63a:	b590      	push	{r4, r7, lr}
 800d63c:	b085      	sub	sp, #20
 800d63e:	af00      	add	r7, sp, #0
 800d640:	60f8      	str	r0, [r7, #12]
 800d642:	60b9      	str	r1, [r7, #8]
 800d644:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800d646:	68b8      	ldr	r0, [r7, #8]
 800d648:	f7ff ffc0 	bl	800d5cc <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>
 800d64c:	4603      	mov	r3, r0
 800d64e:	681c      	ldr	r4, [r3, #0]
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7fb f843 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800d656:	4603      	mov	r3, r0
 800d658:	4619      	mov	r1, r3
 800d65a:	2004      	movs	r0, #4
 800d65c:	f7fb f832 	bl	80086c4 <_ZnwjPv>
 800d660:	4603      	mov	r3, r0
 800d662:	601c      	str	r4, [r3, #0]
	}
 800d664:	bf00      	nop
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd90      	pop	{r4, r7, pc}

0800d66c <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
 800d674:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f804 	bl	800d684 <_ZNSt9_Any_data9_M_accessIPFvR9RxMessageEEERT_v>
	}
 800d67c:	bf00      	nop
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}

0800d684 <_ZNSt9_Any_data9_M_accessIPFvR9RxMessageEEERT_v>:
      _M_access()
 800d684:	b580      	push	{r7, lr}
 800d686:	b082      	sub	sp, #8
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f7fb f825 	bl	80086dc <_ZNSt9_Any_data9_M_accessEv>
 800d692:	4603      	mov	r3, r0
 800d694:	4618      	mov	r0, r3
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <_ZN3fms8setStateEh>:
PodState s_state;
PodState s_lastState;
PodState s_nextState;
osMutexId_t s_stateMutex = osMutexNew(NULL);

void setState(PodState state){
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b082      	sub	sp, #8
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(s_stateMutex, portMAX_DELAY);
 800d6a6:	4b09      	ldr	r3, [pc, #36]	; (800d6cc <_ZN3fms8setStateEh+0x30>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f04f 31ff 	mov.w	r1, #4294967295
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f008 fd7f 	bl	80161b2 <osMutexAcquire>
	s_nextState = state;
 800d6b4:	4a06      	ldr	r2, [pc, #24]	; (800d6d0 <_ZN3fms8setStateEh+0x34>)
 800d6b6:	79fb      	ldrb	r3, [r7, #7]
 800d6b8:	7013      	strb	r3, [r2, #0]
    osMutexRelease(s_stateMutex);
 800d6ba:	4b04      	ldr	r3, [pc, #16]	; (800d6cc <_ZN3fms8setStateEh+0x30>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f008 fdc2 	bl	8016248 <osMutexRelease>
}
 800d6c4:	bf00      	nop
 800d6c6:	3708      	adds	r7, #8
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	20000ce4 	.word	0x20000ce4
 800d6d0:	20000ce0 	.word	0x20000ce0

0800d6d4 <_Z41__static_initialization_and_destruction_0ii>:
		stateMsg.set<can::signals::SensorF_TX_PodState_Last>(s_lastState);
		stateMsg.send();
	}
}

}
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b082      	sub	sp, #8
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	2b01      	cmp	r3, #1
 800d6e2:	d10a      	bne.n	800d6fa <_Z41__static_initialization_and_destruction_0ii+0x26>
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d105      	bne.n	800d6fa <_Z41__static_initialization_and_destruction_0ii+0x26>
osMutexId_t s_stateMutex = osMutexNew(NULL);
 800d6ee:	2000      	movs	r0, #0
 800d6f0:	f008 fcd9 	bl	80160a6 <osMutexNew>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	4a03      	ldr	r2, [pc, #12]	; (800d704 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800d6f8:	6013      	str	r3, [r2, #0]
}
 800d6fa:	bf00      	nop
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
 800d702:	bf00      	nop
 800d704:	20000ce4 	.word	0x20000ce4

0800d708 <_GLOBAL__sub_I__ZN3fms7s_stateE>:
 800d708:	b580      	push	{r7, lr}
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d710:	2001      	movs	r0, #1
 800d712:	f7ff ffdf 	bl	800d6d4 <_Z41__static_initialization_and_destruction_0ii>
 800d716:	bd80      	pop	{r7, pc}

0800d718 <state_maschine_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void state_maschine_entry(void *argv) {
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
	fms::setState(fms::STATE::POD_IDLE);
 800d720:	2001      	movs	r0, #1
 800d722:	f7ff ffbb 	bl	800d69c <_ZN3fms8setStateEh>
	while(true){
		osDelay(osWaitForever);
 800d726:	f04f 30ff 	mov.w	r0, #4294967295
 800d72a:	f008 fca1 	bl	8016070 <osDelay>
 800d72e:	e7fa      	b.n	800d726 <state_maschine_entry+0xe>

0800d730 <MX_ADC1_Init>:
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	463b      	mov	r3, r7
 800d738:	2200      	movs	r2, #0
 800d73a:	601a      	str	r2, [r3, #0]
 800d73c:	605a      	str	r2, [r3, #4]
 800d73e:	609a      	str	r2, [r3, #8]
 800d740:	60da      	str	r2, [r3, #12]
 800d742:	4b36      	ldr	r3, [pc, #216]	; (800d81c <MX_ADC1_Init+0xec>)
 800d744:	4a36      	ldr	r2, [pc, #216]	; (800d820 <MX_ADC1_Init+0xf0>)
 800d746:	601a      	str	r2, [r3, #0]
 800d748:	4b34      	ldr	r3, [pc, #208]	; (800d81c <MX_ADC1_Init+0xec>)
 800d74a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d74e:	605a      	str	r2, [r3, #4]
 800d750:	4b32      	ldr	r3, [pc, #200]	; (800d81c <MX_ADC1_Init+0xec>)
 800d752:	2200      	movs	r2, #0
 800d754:	609a      	str	r2, [r3, #8]
 800d756:	4b31      	ldr	r3, [pc, #196]	; (800d81c <MX_ADC1_Init+0xec>)
 800d758:	2201      	movs	r2, #1
 800d75a:	611a      	str	r2, [r3, #16]
 800d75c:	4b2f      	ldr	r3, [pc, #188]	; (800d81c <MX_ADC1_Init+0xec>)
 800d75e:	2200      	movs	r2, #0
 800d760:	761a      	strb	r2, [r3, #24]
 800d762:	4b2e      	ldr	r3, [pc, #184]	; (800d81c <MX_ADC1_Init+0xec>)
 800d764:	2200      	movs	r2, #0
 800d766:	f883 2020 	strb.w	r2, [r3, #32]
 800d76a:	4b2c      	ldr	r3, [pc, #176]	; (800d81c <MX_ADC1_Init+0xec>)
 800d76c:	2200      	movs	r2, #0
 800d76e:	62da      	str	r2, [r3, #44]	; 0x2c
 800d770:	4b2a      	ldr	r3, [pc, #168]	; (800d81c <MX_ADC1_Init+0xec>)
 800d772:	4a2c      	ldr	r2, [pc, #176]	; (800d824 <MX_ADC1_Init+0xf4>)
 800d774:	629a      	str	r2, [r3, #40]	; 0x28
 800d776:	4b29      	ldr	r3, [pc, #164]	; (800d81c <MX_ADC1_Init+0xec>)
 800d778:	2200      	movs	r2, #0
 800d77a:	60da      	str	r2, [r3, #12]
 800d77c:	4b27      	ldr	r3, [pc, #156]	; (800d81c <MX_ADC1_Init+0xec>)
 800d77e:	2204      	movs	r2, #4
 800d780:	61da      	str	r2, [r3, #28]
 800d782:	4b26      	ldr	r3, [pc, #152]	; (800d81c <MX_ADC1_Init+0xec>)
 800d784:	2200      	movs	r2, #0
 800d786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d78a:	4b24      	ldr	r3, [pc, #144]	; (800d81c <MX_ADC1_Init+0xec>)
 800d78c:	2200      	movs	r2, #0
 800d78e:	615a      	str	r2, [r3, #20]
 800d790:	4822      	ldr	r0, [pc, #136]	; (800d81c <MX_ADC1_Init+0xec>)
 800d792:	f001 fd69 	bl	800f268 <HAL_ADC_Init>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d001      	beq.n	800d7a0 <MX_ADC1_Init+0x70>
 800d79c:	f000 fe06 	bl	800e3ac <Error_Handler>
 800d7a0:	230a      	movs	r3, #10
 800d7a2:	603b      	str	r3, [r7, #0]
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	607b      	str	r3, [r7, #4]
 800d7a8:	2305      	movs	r3, #5
 800d7aa:	60bb      	str	r3, [r7, #8]
 800d7ac:	463b      	mov	r3, r7
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	481a      	ldr	r0, [pc, #104]	; (800d81c <MX_ADC1_Init+0xec>)
 800d7b2:	f001 feb7 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d001      	beq.n	800d7c0 <MX_ADC1_Init+0x90>
 800d7bc:	f000 fdf6 	bl	800e3ac <Error_Handler>
 800d7c0:	230c      	movs	r3, #12
 800d7c2:	603b      	str	r3, [r7, #0]
 800d7c4:	2302      	movs	r3, #2
 800d7c6:	607b      	str	r3, [r7, #4]
 800d7c8:	463b      	mov	r3, r7
 800d7ca:	4619      	mov	r1, r3
 800d7cc:	4813      	ldr	r0, [pc, #76]	; (800d81c <MX_ADC1_Init+0xec>)
 800d7ce:	f001 fea9 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d001      	beq.n	800d7dc <MX_ADC1_Init+0xac>
 800d7d8:	f000 fde8 	bl	800e3ac <Error_Handler>
 800d7dc:	2310      	movs	r3, #16
 800d7de:	603b      	str	r3, [r7, #0]
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	607b      	str	r3, [r7, #4]
 800d7e4:	463b      	mov	r3, r7
 800d7e6:	4619      	mov	r1, r3
 800d7e8:	480c      	ldr	r0, [pc, #48]	; (800d81c <MX_ADC1_Init+0xec>)
 800d7ea:	f001 fe9b 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d001      	beq.n	800d7f8 <MX_ADC1_Init+0xc8>
 800d7f4:	f000 fdda 	bl	800e3ac <Error_Handler>
 800d7f8:	2311      	movs	r3, #17
 800d7fa:	603b      	str	r3, [r7, #0]
 800d7fc:	2304      	movs	r3, #4
 800d7fe:	607b      	str	r3, [r7, #4]
 800d800:	463b      	mov	r3, r7
 800d802:	4619      	mov	r1, r3
 800d804:	4805      	ldr	r0, [pc, #20]	; (800d81c <MX_ADC1_Init+0xec>)
 800d806:	f001 fe8d 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <MX_ADC1_Init+0xe4>
 800d810:	f000 fdcc 	bl	800e3ac <Error_Handler>
 800d814:	bf00      	nop
 800d816:	3710      	adds	r7, #16
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}
 800d81c:	20000ce8 	.word	0x20000ce8
 800d820:	40012000 	.word	0x40012000
 800d824:	0f000001 	.word	0x0f000001

0800d828 <MX_ADC2_Init>:
 800d828:	b580      	push	{r7, lr}
 800d82a:	b084      	sub	sp, #16
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	463b      	mov	r3, r7
 800d830:	2200      	movs	r2, #0
 800d832:	601a      	str	r2, [r3, #0]
 800d834:	605a      	str	r2, [r3, #4]
 800d836:	609a      	str	r2, [r3, #8]
 800d838:	60da      	str	r2, [r3, #12]
 800d83a:	4b52      	ldr	r3, [pc, #328]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d83c:	4a52      	ldr	r2, [pc, #328]	; (800d988 <MX_ADC2_Init+0x160>)
 800d83e:	601a      	str	r2, [r3, #0]
 800d840:	4b50      	ldr	r3, [pc, #320]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d842:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800d846:	605a      	str	r2, [r3, #4]
 800d848:	4b4e      	ldr	r3, [pc, #312]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d84a:	2200      	movs	r2, #0
 800d84c:	609a      	str	r2, [r3, #8]
 800d84e:	4b4d      	ldr	r3, [pc, #308]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d850:	2201      	movs	r2, #1
 800d852:	611a      	str	r2, [r3, #16]
 800d854:	4b4b      	ldr	r3, [pc, #300]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d856:	2200      	movs	r2, #0
 800d858:	761a      	strb	r2, [r3, #24]
 800d85a:	4b4a      	ldr	r3, [pc, #296]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d85c:	2200      	movs	r2, #0
 800d85e:	f883 2020 	strb.w	r2, [r3, #32]
 800d862:	4b48      	ldr	r3, [pc, #288]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d864:	2200      	movs	r2, #0
 800d866:	62da      	str	r2, [r3, #44]	; 0x2c
 800d868:	4b46      	ldr	r3, [pc, #280]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d86a:	4a48      	ldr	r2, [pc, #288]	; (800d98c <MX_ADC2_Init+0x164>)
 800d86c:	629a      	str	r2, [r3, #40]	; 0x28
 800d86e:	4b45      	ldr	r3, [pc, #276]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d870:	2200      	movs	r2, #0
 800d872:	60da      	str	r2, [r3, #12]
 800d874:	4b43      	ldr	r3, [pc, #268]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d876:	2208      	movs	r2, #8
 800d878:	61da      	str	r2, [r3, #28]
 800d87a:	4b42      	ldr	r3, [pc, #264]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800d882:	4b40      	ldr	r3, [pc, #256]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d884:	2200      	movs	r2, #0
 800d886:	615a      	str	r2, [r3, #20]
 800d888:	483e      	ldr	r0, [pc, #248]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d88a:	f001 fced 	bl	800f268 <HAL_ADC_Init>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d001      	beq.n	800d898 <MX_ADC2_Init+0x70>
 800d894:	f000 fd8a 	bl	800e3ac <Error_Handler>
 800d898:	230f      	movs	r3, #15
 800d89a:	603b      	str	r3, [r7, #0]
 800d89c:	2301      	movs	r3, #1
 800d89e:	607b      	str	r3, [r7, #4]
 800d8a0:	2304      	movs	r3, #4
 800d8a2:	60bb      	str	r3, [r7, #8]
 800d8a4:	463b      	mov	r3, r7
 800d8a6:	4619      	mov	r1, r3
 800d8a8:	4836      	ldr	r0, [pc, #216]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d8aa:	f001 fe3b 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d001      	beq.n	800d8b8 <MX_ADC2_Init+0x90>
 800d8b4:	f000 fd7a 	bl	800e3ac <Error_Handler>
 800d8b8:	230e      	movs	r3, #14
 800d8ba:	603b      	str	r3, [r7, #0]
 800d8bc:	2302      	movs	r3, #2
 800d8be:	607b      	str	r3, [r7, #4]
 800d8c0:	463b      	mov	r3, r7
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	482f      	ldr	r0, [pc, #188]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d8c6:	f001 fe2d 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d001      	beq.n	800d8d4 <MX_ADC2_Init+0xac>
 800d8d0:	f000 fd6c 	bl	800e3ac <Error_Handler>
 800d8d4:	2303      	movs	r3, #3
 800d8d6:	603b      	str	r3, [r7, #0]
 800d8d8:	2303      	movs	r3, #3
 800d8da:	607b      	str	r3, [r7, #4]
 800d8dc:	463b      	mov	r3, r7
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4828      	ldr	r0, [pc, #160]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d8e2:	f001 fe1f 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d001      	beq.n	800d8f0 <MX_ADC2_Init+0xc8>
 800d8ec:	f000 fd5e 	bl	800e3ac <Error_Handler>
 800d8f0:	2302      	movs	r3, #2
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	2304      	movs	r3, #4
 800d8f6:	607b      	str	r3, [r7, #4]
 800d8f8:	463b      	mov	r3, r7
 800d8fa:	4619      	mov	r1, r3
 800d8fc:	4821      	ldr	r0, [pc, #132]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d8fe:	f001 fe11 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d001      	beq.n	800d90c <MX_ADC2_Init+0xe4>
 800d908:	f000 fd50 	bl	800e3ac <Error_Handler>
 800d90c:	2304      	movs	r3, #4
 800d90e:	603b      	str	r3, [r7, #0]
 800d910:	2305      	movs	r3, #5
 800d912:	607b      	str	r3, [r7, #4]
 800d914:	463b      	mov	r3, r7
 800d916:	4619      	mov	r1, r3
 800d918:	481a      	ldr	r0, [pc, #104]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d91a:	f001 fe03 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d91e:	4603      	mov	r3, r0
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <MX_ADC2_Init+0x100>
 800d924:	f000 fd42 	bl	800e3ac <Error_Handler>
 800d928:	2305      	movs	r3, #5
 800d92a:	603b      	str	r3, [r7, #0]
 800d92c:	2306      	movs	r3, #6
 800d92e:	607b      	str	r3, [r7, #4]
 800d930:	463b      	mov	r3, r7
 800d932:	4619      	mov	r1, r3
 800d934:	4813      	ldr	r0, [pc, #76]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d936:	f001 fdf5 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d93a:	4603      	mov	r3, r0
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d001      	beq.n	800d944 <MX_ADC2_Init+0x11c>
 800d940:	f000 fd34 	bl	800e3ac <Error_Handler>
 800d944:	2306      	movs	r3, #6
 800d946:	603b      	str	r3, [r7, #0]
 800d948:	2307      	movs	r3, #7
 800d94a:	607b      	str	r3, [r7, #4]
 800d94c:	463b      	mov	r3, r7
 800d94e:	4619      	mov	r1, r3
 800d950:	480c      	ldr	r0, [pc, #48]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d952:	f001 fde7 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d956:	4603      	mov	r3, r0
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d001      	beq.n	800d960 <MX_ADC2_Init+0x138>
 800d95c:	f000 fd26 	bl	800e3ac <Error_Handler>
 800d960:	2307      	movs	r3, #7
 800d962:	603b      	str	r3, [r7, #0]
 800d964:	2308      	movs	r3, #8
 800d966:	607b      	str	r3, [r7, #4]
 800d968:	463b      	mov	r3, r7
 800d96a:	4619      	mov	r1, r3
 800d96c:	4805      	ldr	r0, [pc, #20]	; (800d984 <MX_ADC2_Init+0x15c>)
 800d96e:	f001 fdd9 	bl	800f524 <HAL_ADC_ConfigChannel>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d001      	beq.n	800d97c <MX_ADC2_Init+0x154>
 800d978:	f000 fd18 	bl	800e3ac <Error_Handler>
 800d97c:	bf00      	nop
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	20000d30 	.word	0x20000d30
 800d988:	40012100 	.word	0x40012100
 800d98c:	0f000001 	.word	0x0f000001

0800d990 <HAL_ADC_MspInit>:
 800d990:	b580      	push	{r7, lr}
 800d992:	b08c      	sub	sp, #48	; 0x30
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	f107 031c 	add.w	r3, r7, #28
 800d99c:	2200      	movs	r2, #0
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	605a      	str	r2, [r3, #4]
 800d9a2:	609a      	str	r2, [r3, #8]
 800d9a4:	60da      	str	r2, [r3, #12]
 800d9a6:	611a      	str	r2, [r3, #16]
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a6b      	ldr	r2, [pc, #428]	; (800db5c <HAL_ADC_MspInit+0x1cc>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d157      	bne.n	800da62 <HAL_ADC_MspInit+0xd2>
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	61bb      	str	r3, [r7, #24]
 800d9b6:	4b6a      	ldr	r3, [pc, #424]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800d9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ba:	4a69      	ldr	r2, [pc, #420]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800d9bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9c0:	6453      	str	r3, [r2, #68]	; 0x44
 800d9c2:	4b67      	ldr	r3, [pc, #412]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800d9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9ca:	61bb      	str	r3, [r7, #24]
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	617b      	str	r3, [r7, #20]
 800d9d2:	4b63      	ldr	r3, [pc, #396]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800d9d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9d6:	4a62      	ldr	r2, [pc, #392]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800d9d8:	f043 0304 	orr.w	r3, r3, #4
 800d9dc:	6313      	str	r3, [r2, #48]	; 0x30
 800d9de:	4b60      	ldr	r3, [pc, #384]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800d9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9e2:	f003 0304 	and.w	r3, r3, #4
 800d9e6:	617b      	str	r3, [r7, #20]
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	2305      	movs	r3, #5
 800d9ec:	61fb      	str	r3, [r7, #28]
 800d9ee:	2303      	movs	r3, #3
 800d9f0:	623b      	str	r3, [r7, #32]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	627b      	str	r3, [r7, #36]	; 0x24
 800d9f6:	f107 031c 	add.w	r3, r7, #28
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	4859      	ldr	r0, [pc, #356]	; (800db64 <HAL_ADC_MspInit+0x1d4>)
 800d9fe:	f003 fb3b 	bl	8011078 <HAL_GPIO_Init>
 800da02:	4b59      	ldr	r3, [pc, #356]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da04:	4a59      	ldr	r2, [pc, #356]	; (800db6c <HAL_ADC_MspInit+0x1dc>)
 800da06:	601a      	str	r2, [r3, #0]
 800da08:	4b57      	ldr	r3, [pc, #348]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da0a:	2200      	movs	r2, #0
 800da0c:	605a      	str	r2, [r3, #4]
 800da0e:	4b56      	ldr	r3, [pc, #344]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da10:	2200      	movs	r2, #0
 800da12:	609a      	str	r2, [r3, #8]
 800da14:	4b54      	ldr	r3, [pc, #336]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da16:	2200      	movs	r2, #0
 800da18:	60da      	str	r2, [r3, #12]
 800da1a:	4b53      	ldr	r3, [pc, #332]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800da20:	611a      	str	r2, [r3, #16]
 800da22:	4b51      	ldr	r3, [pc, #324]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800da28:	615a      	str	r2, [r3, #20]
 800da2a:	4b4f      	ldr	r3, [pc, #316]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da2c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800da30:	619a      	str	r2, [r3, #24]
 800da32:	4b4d      	ldr	r3, [pc, #308]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da34:	2200      	movs	r2, #0
 800da36:	61da      	str	r2, [r3, #28]
 800da38:	4b4b      	ldr	r3, [pc, #300]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	621a      	str	r2, [r3, #32]
 800da3e:	4b4a      	ldr	r3, [pc, #296]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da40:	2200      	movs	r2, #0
 800da42:	625a      	str	r2, [r3, #36]	; 0x24
 800da44:	4848      	ldr	r0, [pc, #288]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da46:	f002 ffa7 	bl	8010998 <HAL_DMA_Init>
 800da4a:	4603      	mov	r3, r0
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d001      	beq.n	800da54 <HAL_ADC_MspInit+0xc4>
 800da50:	f000 fcac 	bl	800e3ac <Error_Handler>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	4a44      	ldr	r2, [pc, #272]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da58:	639a      	str	r2, [r3, #56]	; 0x38
 800da5a:	4a43      	ldr	r2, [pc, #268]	; (800db68 <HAL_ADC_MspInit+0x1d8>)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6393      	str	r3, [r2, #56]	; 0x38
 800da60:	e077      	b.n	800db52 <HAL_ADC_MspInit+0x1c2>
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a42      	ldr	r2, [pc, #264]	; (800db70 <HAL_ADC_MspInit+0x1e0>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d172      	bne.n	800db52 <HAL_ADC_MspInit+0x1c2>
 800da6c:	2300      	movs	r3, #0
 800da6e:	613b      	str	r3, [r7, #16]
 800da70:	4b3b      	ldr	r3, [pc, #236]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800da72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da74:	4a3a      	ldr	r2, [pc, #232]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800da76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800da7a:	6453      	str	r3, [r2, #68]	; 0x44
 800da7c:	4b38      	ldr	r3, [pc, #224]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800da7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da84:	613b      	str	r3, [r7, #16]
 800da86:	693b      	ldr	r3, [r7, #16]
 800da88:	2300      	movs	r3, #0
 800da8a:	60fb      	str	r3, [r7, #12]
 800da8c:	4b34      	ldr	r3, [pc, #208]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800da8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da90:	4a33      	ldr	r2, [pc, #204]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800da92:	f043 0304 	orr.w	r3, r3, #4
 800da96:	6313      	str	r3, [r2, #48]	; 0x30
 800da98:	4b31      	ldr	r3, [pc, #196]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800da9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da9c:	f003 0304 	and.w	r3, r3, #4
 800daa0:	60fb      	str	r3, [r7, #12]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	2300      	movs	r3, #0
 800daa6:	60bb      	str	r3, [r7, #8]
 800daa8:	4b2d      	ldr	r3, [pc, #180]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800daaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daac:	4a2c      	ldr	r2, [pc, #176]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800daae:	f043 0301 	orr.w	r3, r3, #1
 800dab2:	6313      	str	r3, [r2, #48]	; 0x30
 800dab4:	4b2a      	ldr	r3, [pc, #168]	; (800db60 <HAL_ADC_MspInit+0x1d0>)
 800dab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dab8:	f003 0301 	and.w	r3, r3, #1
 800dabc:	60bb      	str	r3, [r7, #8]
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	2335      	movs	r3, #53	; 0x35
 800dac2:	61fb      	str	r3, [r7, #28]
 800dac4:	2303      	movs	r3, #3
 800dac6:	623b      	str	r3, [r7, #32]
 800dac8:	2300      	movs	r3, #0
 800daca:	627b      	str	r3, [r7, #36]	; 0x24
 800dacc:	f107 031c 	add.w	r3, r7, #28
 800dad0:	4619      	mov	r1, r3
 800dad2:	4824      	ldr	r0, [pc, #144]	; (800db64 <HAL_ADC_MspInit+0x1d4>)
 800dad4:	f003 fad0 	bl	8011078 <HAL_GPIO_Init>
 800dad8:	23fc      	movs	r3, #252	; 0xfc
 800dada:	61fb      	str	r3, [r7, #28]
 800dadc:	2303      	movs	r3, #3
 800dade:	623b      	str	r3, [r7, #32]
 800dae0:	2300      	movs	r3, #0
 800dae2:	627b      	str	r3, [r7, #36]	; 0x24
 800dae4:	f107 031c 	add.w	r3, r7, #28
 800dae8:	4619      	mov	r1, r3
 800daea:	4822      	ldr	r0, [pc, #136]	; (800db74 <HAL_ADC_MspInit+0x1e4>)
 800daec:	f003 fac4 	bl	8011078 <HAL_GPIO_Init>
 800daf0:	4b21      	ldr	r3, [pc, #132]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800daf2:	4a22      	ldr	r2, [pc, #136]	; (800db7c <HAL_ADC_MspInit+0x1ec>)
 800daf4:	601a      	str	r2, [r3, #0]
 800daf6:	4b20      	ldr	r3, [pc, #128]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800daf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800dafc:	605a      	str	r2, [r3, #4]
 800dafe:	4b1e      	ldr	r3, [pc, #120]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db00:	2200      	movs	r2, #0
 800db02:	609a      	str	r2, [r3, #8]
 800db04:	4b1c      	ldr	r3, [pc, #112]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db06:	2200      	movs	r2, #0
 800db08:	60da      	str	r2, [r3, #12]
 800db0a:	4b1b      	ldr	r3, [pc, #108]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db10:	611a      	str	r2, [r3, #16]
 800db12:	4b19      	ldr	r3, [pc, #100]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800db18:	615a      	str	r2, [r3, #20]
 800db1a:	4b17      	ldr	r3, [pc, #92]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800db20:	619a      	str	r2, [r3, #24]
 800db22:	4b15      	ldr	r3, [pc, #84]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db24:	2200      	movs	r2, #0
 800db26:	61da      	str	r2, [r3, #28]
 800db28:	4b13      	ldr	r3, [pc, #76]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800db2e:	621a      	str	r2, [r3, #32]
 800db30:	4b11      	ldr	r3, [pc, #68]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db32:	2200      	movs	r2, #0
 800db34:	625a      	str	r2, [r3, #36]	; 0x24
 800db36:	4810      	ldr	r0, [pc, #64]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db38:	f002 ff2e 	bl	8010998 <HAL_DMA_Init>
 800db3c:	4603      	mov	r3, r0
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d001      	beq.n	800db46 <HAL_ADC_MspInit+0x1b6>
 800db42:	f000 fc33 	bl	800e3ac <Error_Handler>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	4a0b      	ldr	r2, [pc, #44]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db4a:	639a      	str	r2, [r3, #56]	; 0x38
 800db4c:	4a0a      	ldr	r2, [pc, #40]	; (800db78 <HAL_ADC_MspInit+0x1e8>)
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6393      	str	r3, [r2, #56]	; 0x38
 800db52:	bf00      	nop
 800db54:	3730      	adds	r7, #48	; 0x30
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	40012000 	.word	0x40012000
 800db60:	40023800 	.word	0x40023800
 800db64:	40020800 	.word	0x40020800
 800db68:	20000d78 	.word	0x20000d78
 800db6c:	40026410 	.word	0x40026410
 800db70:	40012100 	.word	0x40012100
 800db74:	40020000 	.word	0x40020000
 800db78:	20000dd8 	.word	0x20000dd8
 800db7c:	40026440 	.word	0x40026440

0800db80 <MX_CAN1_Init>:
 800db80:	b580      	push	{r7, lr}
 800db82:	af00      	add	r7, sp, #0
 800db84:	4b17      	ldr	r3, [pc, #92]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800db86:	4a18      	ldr	r2, [pc, #96]	; (800dbe8 <MX_CAN1_Init+0x68>)
 800db88:	601a      	str	r2, [r3, #0]
 800db8a:	4b16      	ldr	r3, [pc, #88]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800db8c:	2203      	movs	r2, #3
 800db8e:	605a      	str	r2, [r3, #4]
 800db90:	4b14      	ldr	r3, [pc, #80]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800db92:	2200      	movs	r2, #0
 800db94:	609a      	str	r2, [r3, #8]
 800db96:	4b13      	ldr	r3, [pc, #76]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800db98:	2200      	movs	r2, #0
 800db9a:	60da      	str	r2, [r3, #12]
 800db9c:	4b11      	ldr	r3, [pc, #68]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800db9e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800dba2:	611a      	str	r2, [r3, #16]
 800dba4:	4b0f      	ldr	r3, [pc, #60]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800dba6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dbaa:	615a      	str	r2, [r3, #20]
 800dbac:	4b0d      	ldr	r3, [pc, #52]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	761a      	strb	r2, [r3, #24]
 800dbb2:	4b0c      	ldr	r3, [pc, #48]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	765a      	strb	r2, [r3, #25]
 800dbb8:	4b0a      	ldr	r3, [pc, #40]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800dbba:	2200      	movs	r2, #0
 800dbbc:	769a      	strb	r2, [r3, #26]
 800dbbe:	4b09      	ldr	r3, [pc, #36]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	76da      	strb	r2, [r3, #27]
 800dbc4:	4b07      	ldr	r3, [pc, #28]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800dbc6:	2200      	movs	r2, #0
 800dbc8:	771a      	strb	r2, [r3, #28]
 800dbca:	4b06      	ldr	r3, [pc, #24]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800dbcc:	2200      	movs	r2, #0
 800dbce:	775a      	strb	r2, [r3, #29]
 800dbd0:	4804      	ldr	r0, [pc, #16]	; (800dbe4 <MX_CAN1_Init+0x64>)
 800dbd2:	f001 ff47 	bl	800fa64 <HAL_CAN_Init>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <MX_CAN1_Init+0x60>
 800dbdc:	f000 fbe6 	bl	800e3ac <Error_Handler>
 800dbe0:	bf00      	nop
 800dbe2:	bd80      	pop	{r7, pc}
 800dbe4:	20000e38 	.word	0x20000e38
 800dbe8:	40006400 	.word	0x40006400

0800dbec <MX_CAN2_Init>:
 800dbec:	b580      	push	{r7, lr}
 800dbee:	af00      	add	r7, sp, #0
 800dbf0:	4b17      	ldr	r3, [pc, #92]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dbf2:	4a18      	ldr	r2, [pc, #96]	; (800dc54 <MX_CAN2_Init+0x68>)
 800dbf4:	601a      	str	r2, [r3, #0]
 800dbf6:	4b16      	ldr	r3, [pc, #88]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dbf8:	2203      	movs	r2, #3
 800dbfa:	605a      	str	r2, [r3, #4]
 800dbfc:	4b14      	ldr	r3, [pc, #80]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dbfe:	2200      	movs	r2, #0
 800dc00:	609a      	str	r2, [r3, #8]
 800dc02:	4b13      	ldr	r3, [pc, #76]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dc04:	2200      	movs	r2, #0
 800dc06:	60da      	str	r2, [r3, #12]
 800dc08:	4b11      	ldr	r3, [pc, #68]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dc0a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800dc0e:	611a      	str	r2, [r3, #16]
 800dc10:	4b0f      	ldr	r3, [pc, #60]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dc12:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dc16:	615a      	str	r2, [r3, #20]
 800dc18:	4b0d      	ldr	r3, [pc, #52]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	761a      	strb	r2, [r3, #24]
 800dc1e:	4b0c      	ldr	r3, [pc, #48]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dc20:	2201      	movs	r2, #1
 800dc22:	765a      	strb	r2, [r3, #25]
 800dc24:	4b0a      	ldr	r3, [pc, #40]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	769a      	strb	r2, [r3, #26]
 800dc2a:	4b09      	ldr	r3, [pc, #36]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	76da      	strb	r2, [r3, #27]
 800dc30:	4b07      	ldr	r3, [pc, #28]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dc32:	2200      	movs	r2, #0
 800dc34:	771a      	strb	r2, [r3, #28]
 800dc36:	4b06      	ldr	r3, [pc, #24]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	775a      	strb	r2, [r3, #29]
 800dc3c:	4804      	ldr	r0, [pc, #16]	; (800dc50 <MX_CAN2_Init+0x64>)
 800dc3e:	f001 ff11 	bl	800fa64 <HAL_CAN_Init>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d001      	beq.n	800dc4c <MX_CAN2_Init+0x60>
 800dc48:	f000 fbb0 	bl	800e3ac <Error_Handler>
 800dc4c:	bf00      	nop
 800dc4e:	bd80      	pop	{r7, pc}
 800dc50:	20000e60 	.word	0x20000e60
 800dc54:	40006800 	.word	0x40006800

0800dc58 <HAL_CAN_MspInit>:
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b08c      	sub	sp, #48	; 0x30
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	f107 031c 	add.w	r3, r7, #28
 800dc64:	2200      	movs	r2, #0
 800dc66:	601a      	str	r2, [r3, #0]
 800dc68:	605a      	str	r2, [r3, #4]
 800dc6a:	609a      	str	r2, [r3, #8]
 800dc6c:	60da      	str	r2, [r3, #12]
 800dc6e:	611a      	str	r2, [r3, #16]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	4a5a      	ldr	r2, [pc, #360]	; (800dde0 <HAL_CAN_MspInit+0x188>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d14d      	bne.n	800dd16 <HAL_CAN_MspInit+0xbe>
 800dc7a:	4b5a      	ldr	r3, [pc, #360]	; (800dde4 <HAL_CAN_MspInit+0x18c>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	3301      	adds	r3, #1
 800dc80:	4a58      	ldr	r2, [pc, #352]	; (800dde4 <HAL_CAN_MspInit+0x18c>)
 800dc82:	6013      	str	r3, [r2, #0]
 800dc84:	4b57      	ldr	r3, [pc, #348]	; (800dde4 <HAL_CAN_MspInit+0x18c>)
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d10d      	bne.n	800dca8 <HAL_CAN_MspInit+0x50>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	61bb      	str	r3, [r7, #24]
 800dc90:	4b55      	ldr	r3, [pc, #340]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dc92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc94:	4a54      	ldr	r2, [pc, #336]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dc96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dc9a:	6413      	str	r3, [r2, #64]	; 0x40
 800dc9c:	4b52      	ldr	r3, [pc, #328]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dc9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dca4:	61bb      	str	r3, [r7, #24]
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	2300      	movs	r3, #0
 800dcaa:	617b      	str	r3, [r7, #20]
 800dcac:	4b4e      	ldr	r3, [pc, #312]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dcae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcb0:	4a4d      	ldr	r2, [pc, #308]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dcb2:	f043 0308 	orr.w	r3, r3, #8
 800dcb6:	6313      	str	r3, [r2, #48]	; 0x30
 800dcb8:	4b4b      	ldr	r3, [pc, #300]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dcba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dcbc:	f003 0308 	and.w	r3, r3, #8
 800dcc0:	617b      	str	r3, [r7, #20]
 800dcc2:	697b      	ldr	r3, [r7, #20]
 800dcc4:	2303      	movs	r3, #3
 800dcc6:	61fb      	str	r3, [r7, #28]
 800dcc8:	2302      	movs	r3, #2
 800dcca:	623b      	str	r3, [r7, #32]
 800dccc:	2300      	movs	r3, #0
 800dcce:	627b      	str	r3, [r7, #36]	; 0x24
 800dcd0:	2303      	movs	r3, #3
 800dcd2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dcd4:	2309      	movs	r3, #9
 800dcd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dcd8:	f107 031c 	add.w	r3, r7, #28
 800dcdc:	4619      	mov	r1, r3
 800dcde:	4843      	ldr	r0, [pc, #268]	; (800ddec <HAL_CAN_MspInit+0x194>)
 800dce0:	f003 f9ca 	bl	8011078 <HAL_GPIO_Init>
 800dce4:	2200      	movs	r2, #0
 800dce6:	2105      	movs	r1, #5
 800dce8:	2013      	movs	r0, #19
 800dcea:	f002 fe0f 	bl	801090c <HAL_NVIC_SetPriority>
 800dcee:	2013      	movs	r0, #19
 800dcf0:	f002 fe28 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	2105      	movs	r1, #5
 800dcf8:	2014      	movs	r0, #20
 800dcfa:	f002 fe07 	bl	801090c <HAL_NVIC_SetPriority>
 800dcfe:	2014      	movs	r0, #20
 800dd00:	f002 fe20 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800dd04:	2200      	movs	r2, #0
 800dd06:	2105      	movs	r1, #5
 800dd08:	2015      	movs	r0, #21
 800dd0a:	f002 fdff 	bl	801090c <HAL_NVIC_SetPriority>
 800dd0e:	2015      	movs	r0, #21
 800dd10:	f002 fe18 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800dd14:	e05f      	b.n	800ddd6 <HAL_CAN_MspInit+0x17e>
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	4a35      	ldr	r2, [pc, #212]	; (800ddf0 <HAL_CAN_MspInit+0x198>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d15a      	bne.n	800ddd6 <HAL_CAN_MspInit+0x17e>
 800dd20:	2300      	movs	r3, #0
 800dd22:	613b      	str	r3, [r7, #16]
 800dd24:	4b30      	ldr	r3, [pc, #192]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dd26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd28:	4a2f      	ldr	r2, [pc, #188]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dd2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dd2e:	6413      	str	r3, [r2, #64]	; 0x40
 800dd30:	4b2d      	ldr	r3, [pc, #180]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dd32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800dd38:	613b      	str	r3, [r7, #16]
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	4b29      	ldr	r3, [pc, #164]	; (800dde4 <HAL_CAN_MspInit+0x18c>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	3301      	adds	r3, #1
 800dd42:	4a28      	ldr	r2, [pc, #160]	; (800dde4 <HAL_CAN_MspInit+0x18c>)
 800dd44:	6013      	str	r3, [r2, #0]
 800dd46:	4b27      	ldr	r3, [pc, #156]	; (800dde4 <HAL_CAN_MspInit+0x18c>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	d10d      	bne.n	800dd6a <HAL_CAN_MspInit+0x112>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	60fb      	str	r3, [r7, #12]
 800dd52:	4b25      	ldr	r3, [pc, #148]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dd54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd56:	4a24      	ldr	r2, [pc, #144]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dd58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800dd5c:	6413      	str	r3, [r2, #64]	; 0x40
 800dd5e:	4b22      	ldr	r3, [pc, #136]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dd60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dd66:	60fb      	str	r3, [r7, #12]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	60bb      	str	r3, [r7, #8]
 800dd6e:	4b1e      	ldr	r3, [pc, #120]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dd70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd72:	4a1d      	ldr	r2, [pc, #116]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dd74:	f043 0302 	orr.w	r3, r3, #2
 800dd78:	6313      	str	r3, [r2, #48]	; 0x30
 800dd7a:	4b1b      	ldr	r3, [pc, #108]	; (800dde8 <HAL_CAN_MspInit+0x190>)
 800dd7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd7e:	f003 0302 	and.w	r3, r3, #2
 800dd82:	60bb      	str	r3, [r7, #8]
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	2360      	movs	r3, #96	; 0x60
 800dd88:	61fb      	str	r3, [r7, #28]
 800dd8a:	2302      	movs	r3, #2
 800dd8c:	623b      	str	r3, [r7, #32]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	627b      	str	r3, [r7, #36]	; 0x24
 800dd92:	2303      	movs	r3, #3
 800dd94:	62bb      	str	r3, [r7, #40]	; 0x28
 800dd96:	2309      	movs	r3, #9
 800dd98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd9a:	f107 031c 	add.w	r3, r7, #28
 800dd9e:	4619      	mov	r1, r3
 800dda0:	4814      	ldr	r0, [pc, #80]	; (800ddf4 <HAL_CAN_MspInit+0x19c>)
 800dda2:	f003 f969 	bl	8011078 <HAL_GPIO_Init>
 800dda6:	2200      	movs	r2, #0
 800dda8:	2105      	movs	r1, #5
 800ddaa:	203f      	movs	r0, #63	; 0x3f
 800ddac:	f002 fdae 	bl	801090c <HAL_NVIC_SetPriority>
 800ddb0:	203f      	movs	r0, #63	; 0x3f
 800ddb2:	f002 fdc7 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	2105      	movs	r1, #5
 800ddba:	2040      	movs	r0, #64	; 0x40
 800ddbc:	f002 fda6 	bl	801090c <HAL_NVIC_SetPriority>
 800ddc0:	2040      	movs	r0, #64	; 0x40
 800ddc2:	f002 fdbf 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	2105      	movs	r1, #5
 800ddca:	2041      	movs	r0, #65	; 0x41
 800ddcc:	f002 fd9e 	bl	801090c <HAL_NVIC_SetPriority>
 800ddd0:	2041      	movs	r0, #65	; 0x41
 800ddd2:	f002 fdb7 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800ddd6:	bf00      	nop
 800ddd8:	3730      	adds	r7, #48	; 0x30
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	40006400 	.word	0x40006400
 800dde4:	20000e88 	.word	0x20000e88
 800dde8:	40023800 	.word	0x40023800
 800ddec:	40020c00 	.word	0x40020c00
 800ddf0:	40006800 	.word	0x40006800
 800ddf4:	40020400 	.word	0x40020400

0800ddf8 <MX_CRC_Init>:
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	4b06      	ldr	r3, [pc, #24]	; (800de18 <MX_CRC_Init+0x20>)
 800ddfe:	4a07      	ldr	r2, [pc, #28]	; (800de1c <MX_CRC_Init+0x24>)
 800de00:	601a      	str	r2, [r3, #0]
 800de02:	4805      	ldr	r0, [pc, #20]	; (800de18 <MX_CRC_Init+0x20>)
 800de04:	f002 fdac 	bl	8010960 <HAL_CRC_Init>
 800de08:	4603      	mov	r3, r0
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d001      	beq.n	800de12 <MX_CRC_Init+0x1a>
 800de0e:	f000 facd 	bl	800e3ac <Error_Handler>
 800de12:	bf00      	nop
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	20000e8c 	.word	0x20000e8c
 800de1c:	40023000 	.word	0x40023000

0800de20 <HAL_CRC_MspInit>:
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	4a0b      	ldr	r2, [pc, #44]	; (800de5c <HAL_CRC_MspInit+0x3c>)
 800de2e:	4293      	cmp	r3, r2
 800de30:	d10d      	bne.n	800de4e <HAL_CRC_MspInit+0x2e>
 800de32:	2300      	movs	r3, #0
 800de34:	60fb      	str	r3, [r7, #12]
 800de36:	4b0a      	ldr	r3, [pc, #40]	; (800de60 <HAL_CRC_MspInit+0x40>)
 800de38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3a:	4a09      	ldr	r2, [pc, #36]	; (800de60 <HAL_CRC_MspInit+0x40>)
 800de3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800de40:	6313      	str	r3, [r2, #48]	; 0x30
 800de42:	4b07      	ldr	r3, [pc, #28]	; (800de60 <HAL_CRC_MspInit+0x40>)
 800de44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800de4a:	60fb      	str	r3, [r7, #12]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	bf00      	nop
 800de50:	3714      	adds	r7, #20
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr
 800de5a:	bf00      	nop
 800de5c:	40023000 	.word	0x40023000
 800de60:	40023800 	.word	0x40023800

0800de64 <MX_DMA_Init>:
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	2300      	movs	r3, #0
 800de6c:	607b      	str	r3, [r7, #4]
 800de6e:	4b18      	ldr	r3, [pc, #96]	; (800ded0 <MX_DMA_Init+0x6c>)
 800de70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de72:	4a17      	ldr	r2, [pc, #92]	; (800ded0 <MX_DMA_Init+0x6c>)
 800de74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800de78:	6313      	str	r3, [r2, #48]	; 0x30
 800de7a:	4b15      	ldr	r3, [pc, #84]	; (800ded0 <MX_DMA_Init+0x6c>)
 800de7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800de82:	607b      	str	r3, [r7, #4]
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	2200      	movs	r2, #0
 800de88:	2105      	movs	r1, #5
 800de8a:	2038      	movs	r0, #56	; 0x38
 800de8c:	f002 fd3e 	bl	801090c <HAL_NVIC_SetPriority>
 800de90:	2038      	movs	r0, #56	; 0x38
 800de92:	f002 fd57 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800de96:	2200      	movs	r2, #0
 800de98:	2105      	movs	r1, #5
 800de9a:	203a      	movs	r0, #58	; 0x3a
 800de9c:	f002 fd36 	bl	801090c <HAL_NVIC_SetPriority>
 800dea0:	203a      	movs	r0, #58	; 0x3a
 800dea2:	f002 fd4f 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800dea6:	2200      	movs	r2, #0
 800dea8:	2105      	movs	r1, #5
 800deaa:	2044      	movs	r0, #68	; 0x44
 800deac:	f002 fd2e 	bl	801090c <HAL_NVIC_SetPriority>
 800deb0:	2044      	movs	r0, #68	; 0x44
 800deb2:	f002 fd47 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800deb6:	2200      	movs	r2, #0
 800deb8:	2105      	movs	r1, #5
 800deba:	2046      	movs	r0, #70	; 0x46
 800debc:	f002 fd26 	bl	801090c <HAL_NVIC_SetPriority>
 800dec0:	2046      	movs	r0, #70	; 0x46
 800dec2:	f002 fd3f 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800dec6:	bf00      	nop
 800dec8:	3708      	adds	r7, #8
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	40023800 	.word	0x40023800

0800ded4 <configureTimerForRunTimeStats>:
 800ded4:	b480      	push	{r7}
 800ded6:	af00      	add	r7, sp, #0
 800ded8:	bf00      	nop
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr

0800dee2 <getRunTimeCounterValue>:
 800dee2:	b480      	push	{r7}
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	2300      	movs	r3, #0
 800dee8:	4618      	mov	r0, r3
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr

0800def2 <vApplicationStackOverflowHook>:
 800def2:	b480      	push	{r7}
 800def4:	b083      	sub	sp, #12
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	6039      	str	r1, [r7, #0]
 800defc:	bf00      	nop
 800defe:	370c      	adds	r7, #12
 800df00:	46bd      	mov	sp, r7
 800df02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df06:	4770      	bx	lr

0800df08 <vApplicationMallocFailedHook>:
 800df08:	b480      	push	{r7}
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	bf00      	nop
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr
	...

0800df18 <MX_FREERTOS_Init>:
 800df18:	b580      	push	{r7, lr}
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	4a18      	ldr	r2, [pc, #96]	; (800df80 <MX_FREERTOS_Init+0x68>)
 800df1e:	2101      	movs	r1, #1
 800df20:	2010      	movs	r0, #16
 800df22:	f008 fb0d 	bl	8016540 <osMessageQueueNew>
 800df26:	4603      	mov	r3, r0
 800df28:	4a16      	ldr	r2, [pc, #88]	; (800df84 <MX_FREERTOS_Init+0x6c>)
 800df2a:	6013      	str	r3, [r2, #0]
 800df2c:	4a16      	ldr	r2, [pc, #88]	; (800df88 <MX_FREERTOS_Init+0x70>)
 800df2e:	2100      	movs	r1, #0
 800df30:	4816      	ldr	r0, [pc, #88]	; (800df8c <MX_FREERTOS_Init+0x74>)
 800df32:	f008 f80b 	bl	8015f4c <osThreadNew>
 800df36:	4603      	mov	r3, r0
 800df38:	4a15      	ldr	r2, [pc, #84]	; (800df90 <MX_FREERTOS_Init+0x78>)
 800df3a:	6013      	str	r3, [r2, #0]
 800df3c:	4a15      	ldr	r2, [pc, #84]	; (800df94 <MX_FREERTOS_Init+0x7c>)
 800df3e:	2100      	movs	r1, #0
 800df40:	4815      	ldr	r0, [pc, #84]	; (800df98 <MX_FREERTOS_Init+0x80>)
 800df42:	f008 f803 	bl	8015f4c <osThreadNew>
 800df46:	4603      	mov	r3, r0
 800df48:	4a14      	ldr	r2, [pc, #80]	; (800df9c <MX_FREERTOS_Init+0x84>)
 800df4a:	6013      	str	r3, [r2, #0]
 800df4c:	4a14      	ldr	r2, [pc, #80]	; (800dfa0 <MX_FREERTOS_Init+0x88>)
 800df4e:	2100      	movs	r1, #0
 800df50:	4814      	ldr	r0, [pc, #80]	; (800dfa4 <MX_FREERTOS_Init+0x8c>)
 800df52:	f007 fffb 	bl	8015f4c <osThreadNew>
 800df56:	4603      	mov	r3, r0
 800df58:	4a13      	ldr	r2, [pc, #76]	; (800dfa8 <MX_FREERTOS_Init+0x90>)
 800df5a:	6013      	str	r3, [r2, #0]
 800df5c:	4a13      	ldr	r2, [pc, #76]	; (800dfac <MX_FREERTOS_Init+0x94>)
 800df5e:	2100      	movs	r1, #0
 800df60:	4813      	ldr	r0, [pc, #76]	; (800dfb0 <MX_FREERTOS_Init+0x98>)
 800df62:	f007 fff3 	bl	8015f4c <osThreadNew>
 800df66:	4603      	mov	r3, r0
 800df68:	4a12      	ldr	r2, [pc, #72]	; (800dfb4 <MX_FREERTOS_Init+0x9c>)
 800df6a:	6013      	str	r3, [r2, #0]
 800df6c:	4a12      	ldr	r2, [pc, #72]	; (800dfb8 <MX_FREERTOS_Init+0xa0>)
 800df6e:	2100      	movs	r1, #0
 800df70:	4812      	ldr	r0, [pc, #72]	; (800dfbc <MX_FREERTOS_Init+0xa4>)
 800df72:	f007 ffeb 	bl	8015f4c <osThreadNew>
 800df76:	4603      	mov	r3, r0
 800df78:	4a11      	ldr	r2, [pc, #68]	; (800dfc0 <MX_FREERTOS_Init+0xa8>)
 800df7a:	6013      	str	r3, [r2, #0]
 800df7c:	bf00      	nop
 800df7e:	bd80      	pop	{r7, pc}
 800df80:	0801dc84 	.word	0x0801dc84
 800df84:	20001168 	.word	0x20001168
 800df88:	0801dbd0 	.word	0x0801dbd0
 800df8c:	0800dfc5 	.word	0x0800dfc5
 800df90:	20000e94 	.word	0x20000e94
 800df94:	0801dbf4 	.word	0x0801dbf4
 800df98:	08002225 	.word	0x08002225
 800df9c:	20001158 	.word	0x20001158
 800dfa0:	0801dc18 	.word	0x0801dc18
 800dfa4:	0800d719 	.word	0x0800d719
 800dfa8:	2000115c 	.word	0x2000115c
 800dfac:	0801dc3c 	.word	0x0801dc3c
 800dfb0:	0800b4a1 	.word	0x0800b4a1
 800dfb4:	20001160 	.word	0x20001160
 800dfb8:	0801dc60 	.word	0x0801dc60
 800dfbc:	0800bc49 	.word	0x0800bc49
 800dfc0:	20001164 	.word	0x20001164

0800dfc4 <StartDefaultTask>:
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	2001      	movs	r0, #1
 800dfce:	f008 f84f 	bl	8016070 <osDelay>
 800dfd2:	e7fb      	b.n	800dfcc <StartDefaultTask+0x8>

0800dfd4 <MX_GPIO_Init>:
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b08a      	sub	sp, #40	; 0x28
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	f107 0314 	add.w	r3, r7, #20
 800dfde:	2200      	movs	r2, #0
 800dfe0:	601a      	str	r2, [r3, #0]
 800dfe2:	605a      	str	r2, [r3, #4]
 800dfe4:	609a      	str	r2, [r3, #8]
 800dfe6:	60da      	str	r2, [r3, #12]
 800dfe8:	611a      	str	r2, [r3, #16]
 800dfea:	2300      	movs	r3, #0
 800dfec:	613b      	str	r3, [r7, #16]
 800dfee:	4b58      	ldr	r3, [pc, #352]	; (800e150 <MX_GPIO_Init+0x17c>)
 800dff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff2:	4a57      	ldr	r2, [pc, #348]	; (800e150 <MX_GPIO_Init+0x17c>)
 800dff4:	f043 0304 	orr.w	r3, r3, #4
 800dff8:	6313      	str	r3, [r2, #48]	; 0x30
 800dffa:	4b55      	ldr	r3, [pc, #340]	; (800e150 <MX_GPIO_Init+0x17c>)
 800dffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dffe:	f003 0304 	and.w	r3, r3, #4
 800e002:	613b      	str	r3, [r7, #16]
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	2300      	movs	r3, #0
 800e008:	60fb      	str	r3, [r7, #12]
 800e00a:	4b51      	ldr	r3, [pc, #324]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e00e:	4a50      	ldr	r2, [pc, #320]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e014:	6313      	str	r3, [r2, #48]	; 0x30
 800e016:	4b4e      	ldr	r3, [pc, #312]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e01e:	60fb      	str	r3, [r7, #12]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2300      	movs	r3, #0
 800e024:	60bb      	str	r3, [r7, #8]
 800e026:	4b4a      	ldr	r3, [pc, #296]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e02a:	4a49      	ldr	r2, [pc, #292]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e02c:	f043 0301 	orr.w	r3, r3, #1
 800e030:	6313      	str	r3, [r2, #48]	; 0x30
 800e032:	4b47      	ldr	r3, [pc, #284]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e036:	f003 0301 	and.w	r3, r3, #1
 800e03a:	60bb      	str	r3, [r7, #8]
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2300      	movs	r3, #0
 800e040:	607b      	str	r3, [r7, #4]
 800e042:	4b43      	ldr	r3, [pc, #268]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e046:	4a42      	ldr	r2, [pc, #264]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e048:	f043 0302 	orr.w	r3, r3, #2
 800e04c:	6313      	str	r3, [r2, #48]	; 0x30
 800e04e:	4b40      	ldr	r3, [pc, #256]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e052:	f003 0302 	and.w	r3, r3, #2
 800e056:	607b      	str	r3, [r7, #4]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2300      	movs	r3, #0
 800e05c:	603b      	str	r3, [r7, #0]
 800e05e:	4b3c      	ldr	r3, [pc, #240]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e062:	4a3b      	ldr	r2, [pc, #236]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e064:	f043 0308 	orr.w	r3, r3, #8
 800e068:	6313      	str	r3, [r2, #48]	; 0x30
 800e06a:	4b39      	ldr	r3, [pc, #228]	; (800e150 <MX_GPIO_Init+0x17c>)
 800e06c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e06e:	f003 0308 	and.w	r3, r3, #8
 800e072:	603b      	str	r3, [r7, #0]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	2200      	movs	r2, #0
 800e078:	f641 4102 	movw	r1, #7170	; 0x1c02
 800e07c:	4835      	ldr	r0, [pc, #212]	; (800e154 <MX_GPIO_Init+0x180>)
 800e07e:	f003 f9af 	bl	80113e0 <HAL_GPIO_WritePin>
 800e082:	2201      	movs	r2, #1
 800e084:	2180      	movs	r1, #128	; 0x80
 800e086:	4833      	ldr	r0, [pc, #204]	; (800e154 <MX_GPIO_Init+0x180>)
 800e088:	f003 f9aa 	bl	80113e0 <HAL_GPIO_WritePin>
 800e08c:	2305      	movs	r3, #5
 800e08e:	617b      	str	r3, [r7, #20]
 800e090:	2303      	movs	r3, #3
 800e092:	61bb      	str	r3, [r7, #24]
 800e094:	2300      	movs	r3, #0
 800e096:	61fb      	str	r3, [r7, #28]
 800e098:	f107 0314 	add.w	r3, r7, #20
 800e09c:	4619      	mov	r1, r3
 800e09e:	482e      	ldr	r0, [pc, #184]	; (800e158 <MX_GPIO_Init+0x184>)
 800e0a0:	f002 ffea 	bl	8011078 <HAL_GPIO_Init>
 800e0a4:	230a      	movs	r3, #10
 800e0a6:	617b      	str	r3, [r7, #20]
 800e0a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800e0ac:	61bb      	str	r3, [r7, #24]
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	61fb      	str	r3, [r7, #28]
 800e0b2:	f107 0314 	add.w	r3, r7, #20
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	4827      	ldr	r0, [pc, #156]	; (800e158 <MX_GPIO_Init+0x184>)
 800e0ba:	f002 ffdd 	bl	8011078 <HAL_GPIO_Init>
 800e0be:	f641 4302 	movw	r3, #7170	; 0x1c02
 800e0c2:	617b      	str	r3, [r7, #20]
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	61bb      	str	r3, [r7, #24]
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	61fb      	str	r3, [r7, #28]
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	623b      	str	r3, [r7, #32]
 800e0d0:	f107 0314 	add.w	r3, r7, #20
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	481f      	ldr	r0, [pc, #124]	; (800e154 <MX_GPIO_Init+0x180>)
 800e0d8:	f002 ffce 	bl	8011078 <HAL_GPIO_Init>
 800e0dc:	2318      	movs	r3, #24
 800e0de:	617b      	str	r3, [r7, #20]
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	61bb      	str	r3, [r7, #24]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	61fb      	str	r3, [r7, #28]
 800e0e8:	f107 0314 	add.w	r3, r7, #20
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	481b      	ldr	r0, [pc, #108]	; (800e15c <MX_GPIO_Init+0x188>)
 800e0f0:	f002 ffc2 	bl	8011078 <HAL_GPIO_Init>
 800e0f4:	2310      	movs	r3, #16
 800e0f6:	617b      	str	r3, [r7, #20]
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	61bb      	str	r3, [r7, #24]
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	61fb      	str	r3, [r7, #28]
 800e100:	f107 0314 	add.w	r3, r7, #20
 800e104:	4619      	mov	r1, r3
 800e106:	4813      	ldr	r0, [pc, #76]	; (800e154 <MX_GPIO_Init+0x180>)
 800e108:	f002 ffb6 	bl	8011078 <HAL_GPIO_Init>
 800e10c:	2380      	movs	r3, #128	; 0x80
 800e10e:	617b      	str	r3, [r7, #20]
 800e110:	2301      	movs	r3, #1
 800e112:	61bb      	str	r3, [r7, #24]
 800e114:	2302      	movs	r3, #2
 800e116:	61fb      	str	r3, [r7, #28]
 800e118:	2300      	movs	r3, #0
 800e11a:	623b      	str	r3, [r7, #32]
 800e11c:	f107 0314 	add.w	r3, r7, #20
 800e120:	4619      	mov	r1, r3
 800e122:	480c      	ldr	r0, [pc, #48]	; (800e154 <MX_GPIO_Init+0x180>)
 800e124:	f002 ffa8 	bl	8011078 <HAL_GPIO_Init>
 800e128:	2200      	movs	r2, #0
 800e12a:	2105      	movs	r1, #5
 800e12c:	2007      	movs	r0, #7
 800e12e:	f002 fbed 	bl	801090c <HAL_NVIC_SetPriority>
 800e132:	2007      	movs	r0, #7
 800e134:	f002 fc06 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800e138:	2200      	movs	r2, #0
 800e13a:	2105      	movs	r1, #5
 800e13c:	2009      	movs	r0, #9
 800e13e:	f002 fbe5 	bl	801090c <HAL_NVIC_SetPriority>
 800e142:	2009      	movs	r0, #9
 800e144:	f002 fbfe 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800e148:	bf00      	nop
 800e14a:	3728      	adds	r7, #40	; 0x28
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}
 800e150:	40023800 	.word	0x40023800
 800e154:	40020400 	.word	0x40020400
 800e158:	40020800 	.word	0x40020800
 800e15c:	40020c00 	.word	0x40020c00

0800e160 <MX_I2C1_Init>:
 800e160:	b580      	push	{r7, lr}
 800e162:	af00      	add	r7, sp, #0
 800e164:	4b12      	ldr	r3, [pc, #72]	; (800e1b0 <MX_I2C1_Init+0x50>)
 800e166:	4a13      	ldr	r2, [pc, #76]	; (800e1b4 <MX_I2C1_Init+0x54>)
 800e168:	601a      	str	r2, [r3, #0]
 800e16a:	4b11      	ldr	r3, [pc, #68]	; (800e1b0 <MX_I2C1_Init+0x50>)
 800e16c:	4a12      	ldr	r2, [pc, #72]	; (800e1b8 <MX_I2C1_Init+0x58>)
 800e16e:	605a      	str	r2, [r3, #4]
 800e170:	4b0f      	ldr	r3, [pc, #60]	; (800e1b0 <MX_I2C1_Init+0x50>)
 800e172:	2200      	movs	r2, #0
 800e174:	609a      	str	r2, [r3, #8]
 800e176:	4b0e      	ldr	r3, [pc, #56]	; (800e1b0 <MX_I2C1_Init+0x50>)
 800e178:	2200      	movs	r2, #0
 800e17a:	60da      	str	r2, [r3, #12]
 800e17c:	4b0c      	ldr	r3, [pc, #48]	; (800e1b0 <MX_I2C1_Init+0x50>)
 800e17e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800e182:	611a      	str	r2, [r3, #16]
 800e184:	4b0a      	ldr	r3, [pc, #40]	; (800e1b0 <MX_I2C1_Init+0x50>)
 800e186:	2200      	movs	r2, #0
 800e188:	615a      	str	r2, [r3, #20]
 800e18a:	4b09      	ldr	r3, [pc, #36]	; (800e1b0 <MX_I2C1_Init+0x50>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	619a      	str	r2, [r3, #24]
 800e190:	4b07      	ldr	r3, [pc, #28]	; (800e1b0 <MX_I2C1_Init+0x50>)
 800e192:	2200      	movs	r2, #0
 800e194:	61da      	str	r2, [r3, #28]
 800e196:	4b06      	ldr	r3, [pc, #24]	; (800e1b0 <MX_I2C1_Init+0x50>)
 800e198:	2200      	movs	r2, #0
 800e19a:	621a      	str	r2, [r3, #32]
 800e19c:	4804      	ldr	r0, [pc, #16]	; (800e1b0 <MX_I2C1_Init+0x50>)
 800e19e:	f003 f951 	bl	8011444 <HAL_I2C_Init>
 800e1a2:	4603      	mov	r3, r0
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d001      	beq.n	800e1ac <MX_I2C1_Init+0x4c>
 800e1a8:	f000 f900 	bl	800e3ac <Error_Handler>
 800e1ac:	bf00      	nop
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	2000116c 	.word	0x2000116c
 800e1b4:	40005400 	.word	0x40005400
 800e1b8:	000186a0 	.word	0x000186a0

0800e1bc <HAL_I2C_MspInit>:
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08a      	sub	sp, #40	; 0x28
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	f107 0314 	add.w	r3, r7, #20
 800e1c8:	2200      	movs	r2, #0
 800e1ca:	601a      	str	r2, [r3, #0]
 800e1cc:	605a      	str	r2, [r3, #4]
 800e1ce:	609a      	str	r2, [r3, #8]
 800e1d0:	60da      	str	r2, [r3, #12]
 800e1d2:	611a      	str	r2, [r3, #16]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	4a19      	ldr	r2, [pc, #100]	; (800e240 <HAL_I2C_MspInit+0x84>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d12c      	bne.n	800e238 <HAL_I2C_MspInit+0x7c>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	613b      	str	r3, [r7, #16]
 800e1e2:	4b18      	ldr	r3, [pc, #96]	; (800e244 <HAL_I2C_MspInit+0x88>)
 800e1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e6:	4a17      	ldr	r2, [pc, #92]	; (800e244 <HAL_I2C_MspInit+0x88>)
 800e1e8:	f043 0302 	orr.w	r3, r3, #2
 800e1ec:	6313      	str	r3, [r2, #48]	; 0x30
 800e1ee:	4b15      	ldr	r3, [pc, #84]	; (800e244 <HAL_I2C_MspInit+0x88>)
 800e1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1f2:	f003 0302 	and.w	r3, r3, #2
 800e1f6:	613b      	str	r3, [r7, #16]
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e1fe:	617b      	str	r3, [r7, #20]
 800e200:	2312      	movs	r3, #18
 800e202:	61bb      	str	r3, [r7, #24]
 800e204:	2301      	movs	r3, #1
 800e206:	61fb      	str	r3, [r7, #28]
 800e208:	2303      	movs	r3, #3
 800e20a:	623b      	str	r3, [r7, #32]
 800e20c:	2304      	movs	r3, #4
 800e20e:	627b      	str	r3, [r7, #36]	; 0x24
 800e210:	f107 0314 	add.w	r3, r7, #20
 800e214:	4619      	mov	r1, r3
 800e216:	480c      	ldr	r0, [pc, #48]	; (800e248 <HAL_I2C_MspInit+0x8c>)
 800e218:	f002 ff2e 	bl	8011078 <HAL_GPIO_Init>
 800e21c:	2300      	movs	r3, #0
 800e21e:	60fb      	str	r3, [r7, #12]
 800e220:	4b08      	ldr	r3, [pc, #32]	; (800e244 <HAL_I2C_MspInit+0x88>)
 800e222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e224:	4a07      	ldr	r2, [pc, #28]	; (800e244 <HAL_I2C_MspInit+0x88>)
 800e226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e22a:	6413      	str	r3, [r2, #64]	; 0x40
 800e22c:	4b05      	ldr	r3, [pc, #20]	; (800e244 <HAL_I2C_MspInit+0x88>)
 800e22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e234:	60fb      	str	r3, [r7, #12]
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	bf00      	nop
 800e23a:	3728      	adds	r7, #40	; 0x28
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	40005400 	.word	0x40005400
 800e244:	40023800 	.word	0x40023800
 800e248:	40020400 	.word	0x40020400

0800e24c <main>:
 800e24c:	b580      	push	{r7, lr}
 800e24e:	af00      	add	r7, sp, #0
 800e250:	f000 ffc8 	bl	800f1e4 <HAL_Init>
 800e254:	f000 f82c 	bl	800e2b0 <SystemClock_Config>
 800e258:	f7ff febc 	bl	800dfd4 <MX_GPIO_Init>
 800e25c:	f7ff fe02 	bl	800de64 <MX_DMA_Init>
 800e260:	f7ff fa66 	bl	800d730 <MX_ADC1_Init>
 800e264:	f7ff fc8c 	bl	800db80 <MX_CAN1_Init>
 800e268:	f7ff fcc0 	bl	800dbec <MX_CAN2_Init>
 800e26c:	f7ff fdc4 	bl	800ddf8 <MX_CRC_Init>
 800e270:	f000 f8a2 	bl	800e3b8 <MX_RNG_Init>
 800e274:	f000 fe7e 	bl	800ef74 <MX_USART2_UART_Init>
 800e278:	f000 fc0c 	bl	800ea94 <MX_TIM4_Init>
 800e27c:	f7ff fad4 	bl	800d828 <MX_ADC2_Init>
 800e280:	f7ff ff6e 	bl	800e160 <MX_I2C1_Init>
 800e284:	f000 f8ce 	bl	800e424 <MX_SPI2_Init>
 800e288:	f000 fc90 	bl	800ebac <MX_TIM5_Init>
 800e28c:	f000 fe48 	bl	800ef20 <MX_USART1_UART_Init>
 800e290:	f000 fd1a 	bl	800ecc8 <MX_TIM14_Init>
 800e294:	f000 fb62 	bl	800e95c <MX_TIM2_Init>
 800e298:	f000 fcdc 	bl	800ec54 <MX_TIM9_Init>
 800e29c:	f000 fbac 	bl	800e9f8 <MX_TIM3_Init>
 800e2a0:	f007 fe0a 	bl	8015eb8 <osKernelInitialize>
 800e2a4:	f7ff fe38 	bl	800df18 <MX_FREERTOS_Init>
 800e2a8:	f007 fe2a 	bl	8015f00 <osKernelStart>
 800e2ac:	e7fe      	b.n	800e2ac <main+0x60>
	...

0800e2b0 <SystemClock_Config>:
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b094      	sub	sp, #80	; 0x50
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	f107 0320 	add.w	r3, r7, #32
 800e2ba:	2230      	movs	r2, #48	; 0x30
 800e2bc:	2100      	movs	r1, #0
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f00c fcf2 	bl	801aca8 <memset>
 800e2c4:	f107 030c 	add.w	r3, r7, #12
 800e2c8:	2200      	movs	r2, #0
 800e2ca:	601a      	str	r2, [r3, #0]
 800e2cc:	605a      	str	r2, [r3, #4]
 800e2ce:	609a      	str	r2, [r3, #8]
 800e2d0:	60da      	str	r2, [r3, #12]
 800e2d2:	611a      	str	r2, [r3, #16]
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	60bb      	str	r3, [r7, #8]
 800e2d8:	4b28      	ldr	r3, [pc, #160]	; (800e37c <SystemClock_Config+0xcc>)
 800e2da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2dc:	4a27      	ldr	r2, [pc, #156]	; (800e37c <SystemClock_Config+0xcc>)
 800e2de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e2e2:	6413      	str	r3, [r2, #64]	; 0x40
 800e2e4:	4b25      	ldr	r3, [pc, #148]	; (800e37c <SystemClock_Config+0xcc>)
 800e2e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e2ec:	60bb      	str	r3, [r7, #8]
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	607b      	str	r3, [r7, #4]
 800e2f4:	4b22      	ldr	r3, [pc, #136]	; (800e380 <SystemClock_Config+0xd0>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	4a21      	ldr	r2, [pc, #132]	; (800e380 <SystemClock_Config+0xd0>)
 800e2fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2fe:	6013      	str	r3, [r2, #0]
 800e300:	4b1f      	ldr	r3, [pc, #124]	; (800e380 <SystemClock_Config+0xd0>)
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e308:	607b      	str	r3, [r7, #4]
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2301      	movs	r3, #1
 800e30e:	623b      	str	r3, [r7, #32]
 800e310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800e314:	627b      	str	r3, [r7, #36]	; 0x24
 800e316:	2302      	movs	r3, #2
 800e318:	63bb      	str	r3, [r7, #56]	; 0x38
 800e31a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e31e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e320:	2308      	movs	r3, #8
 800e322:	643b      	str	r3, [r7, #64]	; 0x40
 800e324:	23a8      	movs	r3, #168	; 0xa8
 800e326:	647b      	str	r3, [r7, #68]	; 0x44
 800e328:	2302      	movs	r3, #2
 800e32a:	64bb      	str	r3, [r7, #72]	; 0x48
 800e32c:	2307      	movs	r3, #7
 800e32e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e330:	f107 0320 	add.w	r3, r7, #32
 800e334:	4618      	mov	r0, r3
 800e336:	f003 f9c9 	bl	80116cc <HAL_RCC_OscConfig>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <SystemClock_Config+0x94>
 800e340:	f000 f834 	bl	800e3ac <Error_Handler>
 800e344:	230f      	movs	r3, #15
 800e346:	60fb      	str	r3, [r7, #12]
 800e348:	2302      	movs	r3, #2
 800e34a:	613b      	str	r3, [r7, #16]
 800e34c:	2300      	movs	r3, #0
 800e34e:	617b      	str	r3, [r7, #20]
 800e350:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800e354:	61bb      	str	r3, [r7, #24]
 800e356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e35a:	61fb      	str	r3, [r7, #28]
 800e35c:	f107 030c 	add.w	r3, r7, #12
 800e360:	2105      	movs	r1, #5
 800e362:	4618      	mov	r0, r3
 800e364:	f003 fc2a 	bl	8011bbc <HAL_RCC_ClockConfig>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d001      	beq.n	800e372 <SystemClock_Config+0xc2>
 800e36e:	f000 f81d 	bl	800e3ac <Error_Handler>
 800e372:	bf00      	nop
 800e374:	3750      	adds	r7, #80	; 0x50
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}
 800e37a:	bf00      	nop
 800e37c:	40023800 	.word	0x40023800
 800e380:	40007000 	.word	0x40007000

0800e384 <HAL_TIM_PeriodElapsedCallback>:
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	4a05      	ldr	r2, [pc, #20]	; (800e3a8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d101      	bne.n	800e39a <HAL_TIM_PeriodElapsedCallback+0x16>
 800e396:	f000 ff47 	bl	800f228 <HAL_IncTick>
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f006 f881 	bl	80144a2 <PeriodElapsedCallback>
 800e3a0:	bf00      	nop
 800e3a2:	3708      	adds	r7, #8
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	40010000 	.word	0x40010000

0800e3ac <Error_Handler>:
 800e3ac:	b480      	push	{r7}
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	b672      	cpsid	i
 800e3b2:	bf00      	nop
 800e3b4:	e7fe      	b.n	800e3b4 <Error_Handler+0x8>
	...

0800e3b8 <MX_RNG_Init>:
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	4b06      	ldr	r3, [pc, #24]	; (800e3d8 <MX_RNG_Init+0x20>)
 800e3be:	4a07      	ldr	r2, [pc, #28]	; (800e3dc <MX_RNG_Init+0x24>)
 800e3c0:	601a      	str	r2, [r3, #0]
 800e3c2:	4805      	ldr	r0, [pc, #20]	; (800e3d8 <MX_RNG_Init+0x20>)
 800e3c4:	f003 fe4a 	bl	801205c <HAL_RNG_Init>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d001      	beq.n	800e3d2 <MX_RNG_Init+0x1a>
 800e3ce:	f7ff ffed 	bl	800e3ac <Error_Handler>
 800e3d2:	bf00      	nop
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	200011c0 	.word	0x200011c0
 800e3dc:	50060800 	.word	0x50060800

0800e3e0 <HAL_RNG_MspInit>:
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a0b      	ldr	r2, [pc, #44]	; (800e41c <HAL_RNG_MspInit+0x3c>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d10d      	bne.n	800e40e <HAL_RNG_MspInit+0x2e>
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	60fb      	str	r3, [r7, #12]
 800e3f6:	4b0a      	ldr	r3, [pc, #40]	; (800e420 <HAL_RNG_MspInit+0x40>)
 800e3f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3fa:	4a09      	ldr	r2, [pc, #36]	; (800e420 <HAL_RNG_MspInit+0x40>)
 800e3fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e400:	6353      	str	r3, [r2, #52]	; 0x34
 800e402:	4b07      	ldr	r3, [pc, #28]	; (800e420 <HAL_RNG_MspInit+0x40>)
 800e404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e40a:	60fb      	str	r3, [r7, #12]
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	bf00      	nop
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	50060800 	.word	0x50060800
 800e420:	40023800 	.word	0x40023800

0800e424 <MX_SPI2_Init>:
 800e424:	b580      	push	{r7, lr}
 800e426:	af00      	add	r7, sp, #0
 800e428:	4b17      	ldr	r3, [pc, #92]	; (800e488 <MX_SPI2_Init+0x64>)
 800e42a:	4a18      	ldr	r2, [pc, #96]	; (800e48c <MX_SPI2_Init+0x68>)
 800e42c:	601a      	str	r2, [r3, #0]
 800e42e:	4b16      	ldr	r3, [pc, #88]	; (800e488 <MX_SPI2_Init+0x64>)
 800e430:	f44f 7282 	mov.w	r2, #260	; 0x104
 800e434:	605a      	str	r2, [r3, #4]
 800e436:	4b14      	ldr	r3, [pc, #80]	; (800e488 <MX_SPI2_Init+0x64>)
 800e438:	2200      	movs	r2, #0
 800e43a:	609a      	str	r2, [r3, #8]
 800e43c:	4b12      	ldr	r3, [pc, #72]	; (800e488 <MX_SPI2_Init+0x64>)
 800e43e:	2200      	movs	r2, #0
 800e440:	60da      	str	r2, [r3, #12]
 800e442:	4b11      	ldr	r3, [pc, #68]	; (800e488 <MX_SPI2_Init+0x64>)
 800e444:	2200      	movs	r2, #0
 800e446:	611a      	str	r2, [r3, #16]
 800e448:	4b0f      	ldr	r3, [pc, #60]	; (800e488 <MX_SPI2_Init+0x64>)
 800e44a:	2200      	movs	r2, #0
 800e44c:	615a      	str	r2, [r3, #20]
 800e44e:	4b0e      	ldr	r3, [pc, #56]	; (800e488 <MX_SPI2_Init+0x64>)
 800e450:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e454:	619a      	str	r2, [r3, #24]
 800e456:	4b0c      	ldr	r3, [pc, #48]	; (800e488 <MX_SPI2_Init+0x64>)
 800e458:	2200      	movs	r2, #0
 800e45a:	61da      	str	r2, [r3, #28]
 800e45c:	4b0a      	ldr	r3, [pc, #40]	; (800e488 <MX_SPI2_Init+0x64>)
 800e45e:	2200      	movs	r2, #0
 800e460:	621a      	str	r2, [r3, #32]
 800e462:	4b09      	ldr	r3, [pc, #36]	; (800e488 <MX_SPI2_Init+0x64>)
 800e464:	2200      	movs	r2, #0
 800e466:	625a      	str	r2, [r3, #36]	; 0x24
 800e468:	4b07      	ldr	r3, [pc, #28]	; (800e488 <MX_SPI2_Init+0x64>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	629a      	str	r2, [r3, #40]	; 0x28
 800e46e:	4b06      	ldr	r3, [pc, #24]	; (800e488 <MX_SPI2_Init+0x64>)
 800e470:	220a      	movs	r2, #10
 800e472:	62da      	str	r2, [r3, #44]	; 0x2c
 800e474:	4804      	ldr	r0, [pc, #16]	; (800e488 <MX_SPI2_Init+0x64>)
 800e476:	f003 fe71 	bl	801215c <HAL_SPI_Init>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <MX_SPI2_Init+0x60>
 800e480:	f7ff ff94 	bl	800e3ac <Error_Handler>
 800e484:	bf00      	nop
 800e486:	bd80      	pop	{r7, pc}
 800e488:	200011d0 	.word	0x200011d0
 800e48c:	40003800 	.word	0x40003800

0800e490 <HAL_SPI_MspInit>:
 800e490:	b580      	push	{r7, lr}
 800e492:	b08a      	sub	sp, #40	; 0x28
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	f107 0314 	add.w	r3, r7, #20
 800e49c:	2200      	movs	r2, #0
 800e49e:	601a      	str	r2, [r3, #0]
 800e4a0:	605a      	str	r2, [r3, #4]
 800e4a2:	609a      	str	r2, [r3, #8]
 800e4a4:	60da      	str	r2, [r3, #12]
 800e4a6:	611a      	str	r2, [r3, #16]
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a19      	ldr	r2, [pc, #100]	; (800e514 <HAL_SPI_MspInit+0x84>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d12c      	bne.n	800e50c <HAL_SPI_MspInit+0x7c>
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	613b      	str	r3, [r7, #16]
 800e4b6:	4b18      	ldr	r3, [pc, #96]	; (800e518 <HAL_SPI_MspInit+0x88>)
 800e4b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4ba:	4a17      	ldr	r2, [pc, #92]	; (800e518 <HAL_SPI_MspInit+0x88>)
 800e4bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e4c0:	6413      	str	r3, [r2, #64]	; 0x40
 800e4c2:	4b15      	ldr	r3, [pc, #84]	; (800e518 <HAL_SPI_MspInit+0x88>)
 800e4c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e4ca:	613b      	str	r3, [r7, #16]
 800e4cc:	693b      	ldr	r3, [r7, #16]
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	60fb      	str	r3, [r7, #12]
 800e4d2:	4b11      	ldr	r3, [pc, #68]	; (800e518 <HAL_SPI_MspInit+0x88>)
 800e4d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d6:	4a10      	ldr	r2, [pc, #64]	; (800e518 <HAL_SPI_MspInit+0x88>)
 800e4d8:	f043 0302 	orr.w	r3, r3, #2
 800e4dc:	6313      	str	r3, [r2, #48]	; 0x30
 800e4de:	4b0e      	ldr	r3, [pc, #56]	; (800e518 <HAL_SPI_MspInit+0x88>)
 800e4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e2:	f003 0302 	and.w	r3, r3, #2
 800e4e6:	60fb      	str	r3, [r7, #12]
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800e4ee:	617b      	str	r3, [r7, #20]
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	61bb      	str	r3, [r7, #24]
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	61fb      	str	r3, [r7, #28]
 800e4f8:	2303      	movs	r3, #3
 800e4fa:	623b      	str	r3, [r7, #32]
 800e4fc:	2305      	movs	r3, #5
 800e4fe:	627b      	str	r3, [r7, #36]	; 0x24
 800e500:	f107 0314 	add.w	r3, r7, #20
 800e504:	4619      	mov	r1, r3
 800e506:	4805      	ldr	r0, [pc, #20]	; (800e51c <HAL_SPI_MspInit+0x8c>)
 800e508:	f002 fdb6 	bl	8011078 <HAL_GPIO_Init>
 800e50c:	bf00      	nop
 800e50e:	3728      	adds	r7, #40	; 0x28
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	40003800 	.word	0x40003800
 800e518:	40023800 	.word	0x40023800
 800e51c:	40020400 	.word	0x40020400

0800e520 <HAL_MspInit>:
 800e520:	b580      	push	{r7, lr}
 800e522:	b082      	sub	sp, #8
 800e524:	af00      	add	r7, sp, #0
 800e526:	2300      	movs	r3, #0
 800e528:	607b      	str	r3, [r7, #4]
 800e52a:	4b12      	ldr	r3, [pc, #72]	; (800e574 <HAL_MspInit+0x54>)
 800e52c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e52e:	4a11      	ldr	r2, [pc, #68]	; (800e574 <HAL_MspInit+0x54>)
 800e530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e534:	6453      	str	r3, [r2, #68]	; 0x44
 800e536:	4b0f      	ldr	r3, [pc, #60]	; (800e574 <HAL_MspInit+0x54>)
 800e538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e53a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e53e:	607b      	str	r3, [r7, #4]
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2300      	movs	r3, #0
 800e544:	603b      	str	r3, [r7, #0]
 800e546:	4b0b      	ldr	r3, [pc, #44]	; (800e574 <HAL_MspInit+0x54>)
 800e548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e54a:	4a0a      	ldr	r2, [pc, #40]	; (800e574 <HAL_MspInit+0x54>)
 800e54c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e550:	6413      	str	r3, [r2, #64]	; 0x40
 800e552:	4b08      	ldr	r3, [pc, #32]	; (800e574 <HAL_MspInit+0x54>)
 800e554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e55a:	603b      	str	r3, [r7, #0]
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	2200      	movs	r2, #0
 800e560:	210f      	movs	r1, #15
 800e562:	f06f 0001 	mvn.w	r0, #1
 800e566:	f002 f9d1 	bl	801090c <HAL_NVIC_SetPriority>
 800e56a:	bf00      	nop
 800e56c:	3708      	adds	r7, #8
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	40023800 	.word	0x40023800

0800e578 <HAL_InitTick>:
 800e578:	b580      	push	{r7, lr}
 800e57a:	b08c      	sub	sp, #48	; 0x30
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
 800e580:	2300      	movs	r3, #0
 800e582:	62bb      	str	r3, [r7, #40]	; 0x28
 800e584:	2300      	movs	r3, #0
 800e586:	627b      	str	r3, [r7, #36]	; 0x24
 800e588:	2300      	movs	r3, #0
 800e58a:	60bb      	str	r3, [r7, #8]
 800e58c:	4b2f      	ldr	r3, [pc, #188]	; (800e64c <HAL_InitTick+0xd4>)
 800e58e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e590:	4a2e      	ldr	r2, [pc, #184]	; (800e64c <HAL_InitTick+0xd4>)
 800e592:	f043 0301 	orr.w	r3, r3, #1
 800e596:	6453      	str	r3, [r2, #68]	; 0x44
 800e598:	4b2c      	ldr	r3, [pc, #176]	; (800e64c <HAL_InitTick+0xd4>)
 800e59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e59c:	f003 0301 	and.w	r3, r3, #1
 800e5a0:	60bb      	str	r3, [r7, #8]
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	f107 020c 	add.w	r2, r7, #12
 800e5a8:	f107 0310 	add.w	r3, r7, #16
 800e5ac:	4611      	mov	r1, r2
 800e5ae:	4618      	mov	r0, r3
 800e5b0:	f003 fd22 	bl	8011ff8 <HAL_RCC_GetClockConfig>
 800e5b4:	f003 fd0c 	bl	8011fd0 <HAL_RCC_GetPCLK2Freq>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	005b      	lsls	r3, r3, #1
 800e5bc:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c0:	4a23      	ldr	r2, [pc, #140]	; (800e650 <HAL_InitTick+0xd8>)
 800e5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5c6:	0c9b      	lsrs	r3, r3, #18
 800e5c8:	3b01      	subs	r3, #1
 800e5ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e5cc:	4b21      	ldr	r3, [pc, #132]	; (800e654 <HAL_InitTick+0xdc>)
 800e5ce:	4a22      	ldr	r2, [pc, #136]	; (800e658 <HAL_InitTick+0xe0>)
 800e5d0:	601a      	str	r2, [r3, #0]
 800e5d2:	4b20      	ldr	r3, [pc, #128]	; (800e654 <HAL_InitTick+0xdc>)
 800e5d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 800e5d8:	60da      	str	r2, [r3, #12]
 800e5da:	4a1e      	ldr	r2, [pc, #120]	; (800e654 <HAL_InitTick+0xdc>)
 800e5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5de:	6053      	str	r3, [r2, #4]
 800e5e0:	4b1c      	ldr	r3, [pc, #112]	; (800e654 <HAL_InitTick+0xdc>)
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	611a      	str	r2, [r3, #16]
 800e5e6:	4b1b      	ldr	r3, [pc, #108]	; (800e654 <HAL_InitTick+0xdc>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	609a      	str	r2, [r3, #8]
 800e5ec:	4b19      	ldr	r3, [pc, #100]	; (800e654 <HAL_InitTick+0xdc>)
 800e5ee:	2200      	movs	r2, #0
 800e5f0:	619a      	str	r2, [r3, #24]
 800e5f2:	4818      	ldr	r0, [pc, #96]	; (800e654 <HAL_InitTick+0xdc>)
 800e5f4:	f004 fb5a 	bl	8012cac <HAL_TIM_Base_Init>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e5fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e602:	2b00      	cmp	r3, #0
 800e604:	d11b      	bne.n	800e63e <HAL_InitTick+0xc6>
 800e606:	4813      	ldr	r0, [pc, #76]	; (800e654 <HAL_InitTick+0xdc>)
 800e608:	f004 fba0 	bl	8012d4c <HAL_TIM_Base_Start_IT>
 800e60c:	4603      	mov	r3, r0
 800e60e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e612:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e616:	2b00      	cmp	r3, #0
 800e618:	d111      	bne.n	800e63e <HAL_InitTick+0xc6>
 800e61a:	2019      	movs	r0, #25
 800e61c:	f002 f992 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b0f      	cmp	r3, #15
 800e624:	d808      	bhi.n	800e638 <HAL_InitTick+0xc0>
 800e626:	2200      	movs	r2, #0
 800e628:	6879      	ldr	r1, [r7, #4]
 800e62a:	2019      	movs	r0, #25
 800e62c:	f002 f96e 	bl	801090c <HAL_NVIC_SetPriority>
 800e630:	4a0a      	ldr	r2, [pc, #40]	; (800e65c <HAL_InitTick+0xe4>)
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6013      	str	r3, [r2, #0]
 800e636:	e002      	b.n	800e63e <HAL_InitTick+0xc6>
 800e638:	2301      	movs	r3, #1
 800e63a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e63e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e642:	4618      	mov	r0, r3
 800e644:	3730      	adds	r7, #48	; 0x30
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
 800e64a:	bf00      	nop
 800e64c:	40023800 	.word	0x40023800
 800e650:	431bde83 	.word	0x431bde83
 800e654:	20001228 	.word	0x20001228
 800e658:	40010000 	.word	0x40010000
 800e65c:	20000030 	.word	0x20000030

0800e660 <NMI_Handler>:
 800e660:	b480      	push	{r7}
 800e662:	af00      	add	r7, sp, #0
 800e664:	e7fe      	b.n	800e664 <NMI_Handler+0x4>

0800e666 <HardFault_Handler>:
 800e666:	b480      	push	{r7}
 800e668:	af00      	add	r7, sp, #0
 800e66a:	e7fe      	b.n	800e66a <HardFault_Handler+0x4>

0800e66c <MemManage_Handler>:
 800e66c:	b480      	push	{r7}
 800e66e:	af00      	add	r7, sp, #0
 800e670:	e7fe      	b.n	800e670 <MemManage_Handler+0x4>

0800e672 <BusFault_Handler>:
 800e672:	b480      	push	{r7}
 800e674:	af00      	add	r7, sp, #0
 800e676:	e7fe      	b.n	800e676 <BusFault_Handler+0x4>

0800e678 <UsageFault_Handler>:
 800e678:	b480      	push	{r7}
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	e7fe      	b.n	800e67c <UsageFault_Handler+0x4>

0800e67e <DebugMon_Handler>:
 800e67e:	b480      	push	{r7}
 800e680:	af00      	add	r7, sp, #0
 800e682:	bf00      	nop
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr

0800e68c <EXTI1_IRQHandler>:
 800e68c:	b580      	push	{r7, lr}
 800e68e:	af00      	add	r7, sp, #0
 800e690:	2002      	movs	r0, #2
 800e692:	f002 febf 	bl	8011414 <HAL_GPIO_EXTI_IRQHandler>
 800e696:	bf00      	nop
 800e698:	bd80      	pop	{r7, pc}

0800e69a <EXTI3_IRQHandler>:
 800e69a:	b580      	push	{r7, lr}
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	2008      	movs	r0, #8
 800e6a0:	f002 feb8 	bl	8011414 <HAL_GPIO_EXTI_IRQHandler>
 800e6a4:	bf00      	nop
 800e6a6:	bd80      	pop	{r7, pc}

0800e6a8 <CAN1_TX_IRQHandler>:
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	af00      	add	r7, sp, #0
 800e6ac:	4802      	ldr	r0, [pc, #8]	; (800e6b8 <CAN1_TX_IRQHandler+0x10>)
 800e6ae:	f001 fe41 	bl	8010334 <HAL_CAN_IRQHandler>
 800e6b2:	bf00      	nop
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20000e38 	.word	0x20000e38

0800e6bc <CAN1_RX0_IRQHandler>:
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	4802      	ldr	r0, [pc, #8]	; (800e6cc <CAN1_RX0_IRQHandler+0x10>)
 800e6c2:	f001 fe37 	bl	8010334 <HAL_CAN_IRQHandler>
 800e6c6:	bf00      	nop
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20000e38 	.word	0x20000e38

0800e6d0 <CAN1_RX1_IRQHandler>:
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	4802      	ldr	r0, [pc, #8]	; (800e6e0 <CAN1_RX1_IRQHandler+0x10>)
 800e6d6:	f001 fe2d 	bl	8010334 <HAL_CAN_IRQHandler>
 800e6da:	bf00      	nop
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	20000e38 	.word	0x20000e38

0800e6e4 <TIM1_BRK_TIM9_IRQHandler>:
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	4802      	ldr	r0, [pc, #8]	; (800e6f4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800e6ea:	f004 fc9e 	bl	801302a <HAL_TIM_IRQHandler>
 800e6ee:	bf00      	nop
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	20001394 	.word	0x20001394

0800e6f8 <TIM1_UP_TIM10_IRQHandler>:
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	af00      	add	r7, sp, #0
 800e6fc:	4802      	ldr	r0, [pc, #8]	; (800e708 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800e6fe:	f004 fc94 	bl	801302a <HAL_TIM_IRQHandler>
 800e702:	bf00      	nop
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20001228 	.word	0x20001228

0800e70c <TIM3_IRQHandler>:
 800e70c:	b580      	push	{r7, lr}
 800e70e:	af00      	add	r7, sp, #0
 800e710:	4802      	ldr	r0, [pc, #8]	; (800e71c <TIM3_IRQHandler+0x10>)
 800e712:	f004 fc8a 	bl	801302a <HAL_TIM_IRQHandler>
 800e716:	bf00      	nop
 800e718:	bd80      	pop	{r7, pc}
 800e71a:	bf00      	nop
 800e71c:	200012bc 	.word	0x200012bc

0800e720 <DMA2_Stream0_IRQHandler>:
 800e720:	b580      	push	{r7, lr}
 800e722:	af00      	add	r7, sp, #0
 800e724:	4802      	ldr	r0, [pc, #8]	; (800e730 <DMA2_Stream0_IRQHandler+0x10>)
 800e726:	f002 fa3d 	bl	8010ba4 <HAL_DMA_IRQHandler>
 800e72a:	bf00      	nop
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop
 800e730:	20000d78 	.word	0x20000d78

0800e734 <DMA2_Stream2_IRQHandler>:
 800e734:	b580      	push	{r7, lr}
 800e736:	af00      	add	r7, sp, #0
 800e738:	4802      	ldr	r0, [pc, #8]	; (800e744 <DMA2_Stream2_IRQHandler+0x10>)
 800e73a:	f002 fa33 	bl	8010ba4 <HAL_DMA_IRQHandler>
 800e73e:	bf00      	nop
 800e740:	bd80      	pop	{r7, pc}
 800e742:	bf00      	nop
 800e744:	20000dd8 	.word	0x20000dd8

0800e748 <CAN2_TX_IRQHandler>:
 800e748:	b580      	push	{r7, lr}
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	4802      	ldr	r0, [pc, #8]	; (800e758 <CAN2_TX_IRQHandler+0x10>)
 800e74e:	f001 fdf1 	bl	8010334 <HAL_CAN_IRQHandler>
 800e752:	bf00      	nop
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	20000e60 	.word	0x20000e60

0800e75c <CAN2_RX0_IRQHandler>:
 800e75c:	b580      	push	{r7, lr}
 800e75e:	af00      	add	r7, sp, #0
 800e760:	4802      	ldr	r0, [pc, #8]	; (800e76c <CAN2_RX0_IRQHandler+0x10>)
 800e762:	f001 fde7 	bl	8010334 <HAL_CAN_IRQHandler>
 800e766:	bf00      	nop
 800e768:	bd80      	pop	{r7, pc}
 800e76a:	bf00      	nop
 800e76c:	20000e60 	.word	0x20000e60

0800e770 <CAN2_RX1_IRQHandler>:
 800e770:	b580      	push	{r7, lr}
 800e772:	af00      	add	r7, sp, #0
 800e774:	4802      	ldr	r0, [pc, #8]	; (800e780 <CAN2_RX1_IRQHandler+0x10>)
 800e776:	f001 fddd 	bl	8010334 <HAL_CAN_IRQHandler>
 800e77a:	bf00      	nop
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	20000e60 	.word	0x20000e60

0800e784 <DMA2_Stream5_IRQHandler>:
 800e784:	b580      	push	{r7, lr}
 800e786:	af00      	add	r7, sp, #0
 800e788:	4802      	ldr	r0, [pc, #8]	; (800e794 <DMA2_Stream5_IRQHandler+0x10>)
 800e78a:	f002 fa0b 	bl	8010ba4 <HAL_DMA_IRQHandler>
 800e78e:	bf00      	nop
 800e790:	bd80      	pop	{r7, pc}
 800e792:	bf00      	nop
 800e794:	2000150c 	.word	0x2000150c

0800e798 <DMA2_Stream7_IRQHandler>:
 800e798:	b580      	push	{r7, lr}
 800e79a:	af00      	add	r7, sp, #0
 800e79c:	4802      	ldr	r0, [pc, #8]	; (800e7a8 <DMA2_Stream7_IRQHandler+0x10>)
 800e79e:	f002 fa01 	bl	8010ba4 <HAL_DMA_IRQHandler>
 800e7a2:	bf00      	nop
 800e7a4:	bd80      	pop	{r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	200014ac 	.word	0x200014ac

0800e7ac <_getpid>:
 800e7ac:	b480      	push	{r7}
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <_kill>:
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b082      	sub	sp, #8
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
 800e7c4:	6039      	str	r1, [r7, #0]
 800e7c6:	f00c f92d 	bl	801aa24 <__errno>
 800e7ca:	4603      	mov	r3, r0
 800e7cc:	2216      	movs	r2, #22
 800e7ce:	601a      	str	r2, [r3, #0]
 800e7d0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <_exit>:
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
 800e7e4:	f04f 31ff 	mov.w	r1, #4294967295
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f7ff ffe7 	bl	800e7bc <_kill>
 800e7ee:	e7fe      	b.n	800e7ee <_exit+0x12>

0800e7f0 <_read>:
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b086      	sub	sp, #24
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	617b      	str	r3, [r7, #20]
 800e800:	e00a      	b.n	800e818 <_read+0x28>
 800e802:	f3af 8000 	nop.w
 800e806:	4601      	mov	r1, r0
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	1c5a      	adds	r2, r3, #1
 800e80c:	60ba      	str	r2, [r7, #8]
 800e80e:	b2ca      	uxtb	r2, r1
 800e810:	701a      	strb	r2, [r3, #0]
 800e812:	697b      	ldr	r3, [r7, #20]
 800e814:	3301      	adds	r3, #1
 800e816:	617b      	str	r3, [r7, #20]
 800e818:	697a      	ldr	r2, [r7, #20]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	dbf0      	blt.n	800e802 <_read+0x12>
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	4618      	mov	r0, r3
 800e824:	3718      	adds	r7, #24
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}

0800e82a <_write>:
 800e82a:	b580      	push	{r7, lr}
 800e82c:	b086      	sub	sp, #24
 800e82e:	af00      	add	r7, sp, #0
 800e830:	60f8      	str	r0, [r7, #12]
 800e832:	60b9      	str	r1, [r7, #8]
 800e834:	607a      	str	r2, [r7, #4]
 800e836:	2300      	movs	r3, #0
 800e838:	617b      	str	r3, [r7, #20]
 800e83a:	e009      	b.n	800e850 <_write+0x26>
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	60ba      	str	r2, [r7, #8]
 800e842:	781b      	ldrb	r3, [r3, #0]
 800e844:	4618      	mov	r0, r3
 800e846:	f3af 8000 	nop.w
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	3301      	adds	r3, #1
 800e84e:	617b      	str	r3, [r7, #20]
 800e850:	697a      	ldr	r2, [r7, #20]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	429a      	cmp	r2, r3
 800e856:	dbf1      	blt.n	800e83c <_write+0x12>
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	4618      	mov	r0, r3
 800e85c:	3718      	adds	r7, #24
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}

0800e862 <_close>:
 800e862:	b480      	push	{r7}
 800e864:	b083      	sub	sp, #12
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	f04f 33ff 	mov.w	r3, #4294967295
 800e86e:	4618      	mov	r0, r3
 800e870:	370c      	adds	r7, #12
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr

0800e87a <_fstat>:
 800e87a:	b480      	push	{r7}
 800e87c:	b083      	sub	sp, #12
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
 800e882:	6039      	str	r1, [r7, #0]
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e88a:	605a      	str	r2, [r3, #4]
 800e88c:	2300      	movs	r3, #0
 800e88e:	4618      	mov	r0, r3
 800e890:	370c      	adds	r7, #12
 800e892:	46bd      	mov	sp, r7
 800e894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e898:	4770      	bx	lr

0800e89a <_isatty>:
 800e89a:	b480      	push	{r7}
 800e89c:	b083      	sub	sp, #12
 800e89e:	af00      	add	r7, sp, #0
 800e8a0:	6078      	str	r0, [r7, #4]
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	370c      	adds	r7, #12
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <_lseek>:
 800e8b0:	b480      	push	{r7}
 800e8b2:	b085      	sub	sp, #20
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
 800e8bc:	2300      	movs	r3, #0
 800e8be:	4618      	mov	r0, r3
 800e8c0:	3714      	adds	r7, #20
 800e8c2:	46bd      	mov	sp, r7
 800e8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c8:	4770      	bx	lr
	...

0800e8cc <_sbrk>:
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b086      	sub	sp, #24
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	4a14      	ldr	r2, [pc, #80]	; (800e928 <_sbrk+0x5c>)
 800e8d6:	4b15      	ldr	r3, [pc, #84]	; (800e92c <_sbrk+0x60>)
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	617b      	str	r3, [r7, #20]
 800e8dc:	697b      	ldr	r3, [r7, #20]
 800e8de:	613b      	str	r3, [r7, #16]
 800e8e0:	4b13      	ldr	r3, [pc, #76]	; (800e930 <_sbrk+0x64>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d102      	bne.n	800e8ee <_sbrk+0x22>
 800e8e8:	4b11      	ldr	r3, [pc, #68]	; (800e930 <_sbrk+0x64>)
 800e8ea:	4a12      	ldr	r2, [pc, #72]	; (800e934 <_sbrk+0x68>)
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	4b10      	ldr	r3, [pc, #64]	; (800e930 <_sbrk+0x64>)
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	4413      	add	r3, r2
 800e8f6:	693a      	ldr	r2, [r7, #16]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d207      	bcs.n	800e90c <_sbrk+0x40>
 800e8fc:	f00c f892 	bl	801aa24 <__errno>
 800e900:	4603      	mov	r3, r0
 800e902:	220c      	movs	r2, #12
 800e904:	601a      	str	r2, [r3, #0]
 800e906:	f04f 33ff 	mov.w	r3, #4294967295
 800e90a:	e009      	b.n	800e920 <_sbrk+0x54>
 800e90c:	4b08      	ldr	r3, [pc, #32]	; (800e930 <_sbrk+0x64>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	60fb      	str	r3, [r7, #12]
 800e912:	4b07      	ldr	r3, [pc, #28]	; (800e930 <_sbrk+0x64>)
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	4413      	add	r3, r2
 800e91a:	4a05      	ldr	r2, [pc, #20]	; (800e930 <_sbrk+0x64>)
 800e91c:	6013      	str	r3, [r2, #0]
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	4618      	mov	r0, r3
 800e922:	3718      	adds	r7, #24
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	20020000 	.word	0x20020000
 800e92c:	00000800 	.word	0x00000800
 800e930:	20001270 	.word	0x20001270
 800e934:	2000a540 	.word	0x2000a540

0800e938 <SystemInit>:
 800e938:	b480      	push	{r7}
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	4b06      	ldr	r3, [pc, #24]	; (800e958 <SystemInit+0x20>)
 800e93e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e942:	4a05      	ldr	r2, [pc, #20]	; (800e958 <SystemInit+0x20>)
 800e944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800e94c:	bf00      	nop
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr
 800e956:	bf00      	nop
 800e958:	e000ed00 	.word	0xe000ed00

0800e95c <MX_TIM2_Init>:
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	f107 0308 	add.w	r3, r7, #8
 800e966:	2200      	movs	r2, #0
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	605a      	str	r2, [r3, #4]
 800e96c:	609a      	str	r2, [r3, #8]
 800e96e:	60da      	str	r2, [r3, #12]
 800e970:	463b      	mov	r3, r7
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]
 800e976:	605a      	str	r2, [r3, #4]
 800e978:	4b1e      	ldr	r3, [pc, #120]	; (800e9f4 <MX_TIM2_Init+0x98>)
 800e97a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800e97e:	601a      	str	r2, [r3, #0]
 800e980:	4b1c      	ldr	r3, [pc, #112]	; (800e9f4 <MX_TIM2_Init+0x98>)
 800e982:	f240 3247 	movw	r2, #839	; 0x347
 800e986:	605a      	str	r2, [r3, #4]
 800e988:	4b1a      	ldr	r3, [pc, #104]	; (800e9f4 <MX_TIM2_Init+0x98>)
 800e98a:	2200      	movs	r2, #0
 800e98c:	609a      	str	r2, [r3, #8]
 800e98e:	4b19      	ldr	r3, [pc, #100]	; (800e9f4 <MX_TIM2_Init+0x98>)
 800e990:	f04f 32ff 	mov.w	r2, #4294967295
 800e994:	60da      	str	r2, [r3, #12]
 800e996:	4b17      	ldr	r3, [pc, #92]	; (800e9f4 <MX_TIM2_Init+0x98>)
 800e998:	2200      	movs	r2, #0
 800e99a:	611a      	str	r2, [r3, #16]
 800e99c:	4b15      	ldr	r3, [pc, #84]	; (800e9f4 <MX_TIM2_Init+0x98>)
 800e99e:	2200      	movs	r2, #0
 800e9a0:	619a      	str	r2, [r3, #24]
 800e9a2:	4814      	ldr	r0, [pc, #80]	; (800e9f4 <MX_TIM2_Init+0x98>)
 800e9a4:	f004 f982 	bl	8012cac <HAL_TIM_Base_Init>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d001      	beq.n	800e9b2 <MX_TIM2_Init+0x56>
 800e9ae:	f7ff fcfd 	bl	800e3ac <Error_Handler>
 800e9b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e9b6:	60bb      	str	r3, [r7, #8]
 800e9b8:	f107 0308 	add.w	r3, r7, #8
 800e9bc:	4619      	mov	r1, r3
 800e9be:	480d      	ldr	r0, [pc, #52]	; (800e9f4 <MX_TIM2_Init+0x98>)
 800e9c0:	f004 fcfe 	bl	80133c0 <HAL_TIM_ConfigClockSource>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d001      	beq.n	800e9ce <MX_TIM2_Init+0x72>
 800e9ca:	f7ff fcef 	bl	800e3ac <Error_Handler>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	603b      	str	r3, [r7, #0]
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	607b      	str	r3, [r7, #4]
 800e9d6:	463b      	mov	r3, r7
 800e9d8:	4619      	mov	r1, r3
 800e9da:	4806      	ldr	r0, [pc, #24]	; (800e9f4 <MX_TIM2_Init+0x98>)
 800e9dc:	f005 f8ca 	bl	8013b74 <HAL_TIMEx_MasterConfigSynchronization>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <MX_TIM2_Init+0x8e>
 800e9e6:	f7ff fce1 	bl	800e3ac <Error_Handler>
 800e9ea:	bf00      	nop
 800e9ec:	3718      	adds	r7, #24
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20001274 	.word	0x20001274

0800e9f8 <MX_TIM3_Init>:
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b086      	sub	sp, #24
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	f107 0308 	add.w	r3, r7, #8
 800ea02:	2200      	movs	r2, #0
 800ea04:	601a      	str	r2, [r3, #0]
 800ea06:	605a      	str	r2, [r3, #4]
 800ea08:	609a      	str	r2, [r3, #8]
 800ea0a:	60da      	str	r2, [r3, #12]
 800ea0c:	463b      	mov	r3, r7
 800ea0e:	2200      	movs	r2, #0
 800ea10:	601a      	str	r2, [r3, #0]
 800ea12:	605a      	str	r2, [r3, #4]
 800ea14:	4b1d      	ldr	r3, [pc, #116]	; (800ea8c <MX_TIM3_Init+0x94>)
 800ea16:	4a1e      	ldr	r2, [pc, #120]	; (800ea90 <MX_TIM3_Init+0x98>)
 800ea18:	601a      	str	r2, [r3, #0]
 800ea1a:	4b1c      	ldr	r3, [pc, #112]	; (800ea8c <MX_TIM3_Init+0x94>)
 800ea1c:	f244 129f 	movw	r2, #16799	; 0x419f
 800ea20:	605a      	str	r2, [r3, #4]
 800ea22:	4b1a      	ldr	r3, [pc, #104]	; (800ea8c <MX_TIM3_Init+0x94>)
 800ea24:	2200      	movs	r2, #0
 800ea26:	609a      	str	r2, [r3, #8]
 800ea28:	4b18      	ldr	r3, [pc, #96]	; (800ea8c <MX_TIM3_Init+0x94>)
 800ea2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea2e:	60da      	str	r2, [r3, #12]
 800ea30:	4b16      	ldr	r3, [pc, #88]	; (800ea8c <MX_TIM3_Init+0x94>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	611a      	str	r2, [r3, #16]
 800ea36:	4b15      	ldr	r3, [pc, #84]	; (800ea8c <MX_TIM3_Init+0x94>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	619a      	str	r2, [r3, #24]
 800ea3c:	4813      	ldr	r0, [pc, #76]	; (800ea8c <MX_TIM3_Init+0x94>)
 800ea3e:	f004 f935 	bl	8012cac <HAL_TIM_Base_Init>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d001      	beq.n	800ea4c <MX_TIM3_Init+0x54>
 800ea48:	f7ff fcb0 	bl	800e3ac <Error_Handler>
 800ea4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ea50:	60bb      	str	r3, [r7, #8]
 800ea52:	f107 0308 	add.w	r3, r7, #8
 800ea56:	4619      	mov	r1, r3
 800ea58:	480c      	ldr	r0, [pc, #48]	; (800ea8c <MX_TIM3_Init+0x94>)
 800ea5a:	f004 fcb1 	bl	80133c0 <HAL_TIM_ConfigClockSource>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d001      	beq.n	800ea68 <MX_TIM3_Init+0x70>
 800ea64:	f7ff fca2 	bl	800e3ac <Error_Handler>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	603b      	str	r3, [r7, #0]
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	607b      	str	r3, [r7, #4]
 800ea70:	463b      	mov	r3, r7
 800ea72:	4619      	mov	r1, r3
 800ea74:	4805      	ldr	r0, [pc, #20]	; (800ea8c <MX_TIM3_Init+0x94>)
 800ea76:	f005 f87d 	bl	8013b74 <HAL_TIMEx_MasterConfigSynchronization>
 800ea7a:	4603      	mov	r3, r0
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d001      	beq.n	800ea84 <MX_TIM3_Init+0x8c>
 800ea80:	f7ff fc94 	bl	800e3ac <Error_Handler>
 800ea84:	bf00      	nop
 800ea86:	3718      	adds	r7, #24
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}
 800ea8c:	200012bc 	.word	0x200012bc
 800ea90:	40000400 	.word	0x40000400

0800ea94 <MX_TIM4_Init>:
 800ea94:	b580      	push	{r7, lr}
 800ea96:	b08e      	sub	sp, #56	; 0x38
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ea9e:	2200      	movs	r2, #0
 800eaa0:	601a      	str	r2, [r3, #0]
 800eaa2:	605a      	str	r2, [r3, #4]
 800eaa4:	609a      	str	r2, [r3, #8]
 800eaa6:	60da      	str	r2, [r3, #12]
 800eaa8:	f107 0320 	add.w	r3, r7, #32
 800eaac:	2200      	movs	r2, #0
 800eaae:	601a      	str	r2, [r3, #0]
 800eab0:	605a      	str	r2, [r3, #4]
 800eab2:	1d3b      	adds	r3, r7, #4
 800eab4:	2200      	movs	r2, #0
 800eab6:	601a      	str	r2, [r3, #0]
 800eab8:	605a      	str	r2, [r3, #4]
 800eaba:	609a      	str	r2, [r3, #8]
 800eabc:	60da      	str	r2, [r3, #12]
 800eabe:	611a      	str	r2, [r3, #16]
 800eac0:	615a      	str	r2, [r3, #20]
 800eac2:	619a      	str	r2, [r3, #24]
 800eac4:	4b37      	ldr	r3, [pc, #220]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eac6:	4a38      	ldr	r2, [pc, #224]	; (800eba8 <MX_TIM4_Init+0x114>)
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	4b36      	ldr	r3, [pc, #216]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eacc:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800ead0:	605a      	str	r2, [r3, #4]
 800ead2:	4b34      	ldr	r3, [pc, #208]	; (800eba4 <MX_TIM4_Init+0x110>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	609a      	str	r2, [r3, #8]
 800ead8:	4b32      	ldr	r3, [pc, #200]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eada:	22fe      	movs	r2, #254	; 0xfe
 800eadc:	60da      	str	r2, [r3, #12]
 800eade:	4b31      	ldr	r3, [pc, #196]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eae0:	2200      	movs	r2, #0
 800eae2:	611a      	str	r2, [r3, #16]
 800eae4:	4b2f      	ldr	r3, [pc, #188]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eae6:	2200      	movs	r2, #0
 800eae8:	619a      	str	r2, [r3, #24]
 800eaea:	482e      	ldr	r0, [pc, #184]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eaec:	f004 f8de 	bl	8012cac <HAL_TIM_Base_Init>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d001      	beq.n	800eafa <MX_TIM4_Init+0x66>
 800eaf6:	f7ff fc59 	bl	800e3ac <Error_Handler>
 800eafa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eafe:	62bb      	str	r3, [r7, #40]	; 0x28
 800eb00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800eb04:	4619      	mov	r1, r3
 800eb06:	4827      	ldr	r0, [pc, #156]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eb08:	f004 fc5a 	bl	80133c0 <HAL_TIM_ConfigClockSource>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d001      	beq.n	800eb16 <MX_TIM4_Init+0x82>
 800eb12:	f7ff fc4b 	bl	800e3ac <Error_Handler>
 800eb16:	4823      	ldr	r0, [pc, #140]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eb18:	f004 f988 	bl	8012e2c <HAL_TIM_PWM_Init>
 800eb1c:	4603      	mov	r3, r0
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d001      	beq.n	800eb26 <MX_TIM4_Init+0x92>
 800eb22:	f7ff fc43 	bl	800e3ac <Error_Handler>
 800eb26:	2300      	movs	r3, #0
 800eb28:	623b      	str	r3, [r7, #32]
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	627b      	str	r3, [r7, #36]	; 0x24
 800eb2e:	f107 0320 	add.w	r3, r7, #32
 800eb32:	4619      	mov	r1, r3
 800eb34:	481b      	ldr	r0, [pc, #108]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eb36:	f005 f81d 	bl	8013b74 <HAL_TIMEx_MasterConfigSynchronization>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d001      	beq.n	800eb44 <MX_TIM4_Init+0xb0>
 800eb40:	f7ff fc34 	bl	800e3ac <Error_Handler>
 800eb44:	2360      	movs	r3, #96	; 0x60
 800eb46:	607b      	str	r3, [r7, #4]
 800eb48:	2300      	movs	r3, #0
 800eb4a:	60bb      	str	r3, [r7, #8]
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	60fb      	str	r3, [r7, #12]
 800eb50:	2300      	movs	r3, #0
 800eb52:	617b      	str	r3, [r7, #20]
 800eb54:	1d3b      	adds	r3, r7, #4
 800eb56:	2200      	movs	r2, #0
 800eb58:	4619      	mov	r1, r3
 800eb5a:	4812      	ldr	r0, [pc, #72]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eb5c:	f004 fb6e 	bl	801323c <HAL_TIM_PWM_ConfigChannel>
 800eb60:	4603      	mov	r3, r0
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d001      	beq.n	800eb6a <MX_TIM4_Init+0xd6>
 800eb66:	f7ff fc21 	bl	800e3ac <Error_Handler>
 800eb6a:	1d3b      	adds	r3, r7, #4
 800eb6c:	2204      	movs	r2, #4
 800eb6e:	4619      	mov	r1, r3
 800eb70:	480c      	ldr	r0, [pc, #48]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eb72:	f004 fb63 	bl	801323c <HAL_TIM_PWM_ConfigChannel>
 800eb76:	4603      	mov	r3, r0
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d001      	beq.n	800eb80 <MX_TIM4_Init+0xec>
 800eb7c:	f7ff fc16 	bl	800e3ac <Error_Handler>
 800eb80:	1d3b      	adds	r3, r7, #4
 800eb82:	2208      	movs	r2, #8
 800eb84:	4619      	mov	r1, r3
 800eb86:	4807      	ldr	r0, [pc, #28]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eb88:	f004 fb58 	bl	801323c <HAL_TIM_PWM_ConfigChannel>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d001      	beq.n	800eb96 <MX_TIM4_Init+0x102>
 800eb92:	f7ff fc0b 	bl	800e3ac <Error_Handler>
 800eb96:	4803      	ldr	r0, [pc, #12]	; (800eba4 <MX_TIM4_Init+0x110>)
 800eb98:	f000 f988 	bl	800eeac <HAL_TIM_MspPostInit>
 800eb9c:	bf00      	nop
 800eb9e:	3738      	adds	r7, #56	; 0x38
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	20001304 	.word	0x20001304
 800eba8:	40000800 	.word	0x40000800

0800ebac <MX_TIM5_Init>:
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b08c      	sub	sp, #48	; 0x30
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	f107 030c 	add.w	r3, r7, #12
 800ebb6:	2224      	movs	r2, #36	; 0x24
 800ebb8:	2100      	movs	r1, #0
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f00c f874 	bl	801aca8 <memset>
 800ebc0:	1d3b      	adds	r3, r7, #4
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	601a      	str	r2, [r3, #0]
 800ebc6:	605a      	str	r2, [r3, #4]
 800ebc8:	4b20      	ldr	r3, [pc, #128]	; (800ec4c <MX_TIM5_Init+0xa0>)
 800ebca:	4a21      	ldr	r2, [pc, #132]	; (800ec50 <MX_TIM5_Init+0xa4>)
 800ebcc:	601a      	str	r2, [r3, #0]
 800ebce:	4b1f      	ldr	r3, [pc, #124]	; (800ec4c <MX_TIM5_Init+0xa0>)
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	605a      	str	r2, [r3, #4]
 800ebd4:	4b1d      	ldr	r3, [pc, #116]	; (800ec4c <MX_TIM5_Init+0xa0>)
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	609a      	str	r2, [r3, #8]
 800ebda:	4b1c      	ldr	r3, [pc, #112]	; (800ec4c <MX_TIM5_Init+0xa0>)
 800ebdc:	f04f 32ff 	mov.w	r2, #4294967295
 800ebe0:	60da      	str	r2, [r3, #12]
 800ebe2:	4b1a      	ldr	r3, [pc, #104]	; (800ec4c <MX_TIM5_Init+0xa0>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	611a      	str	r2, [r3, #16]
 800ebe8:	4b18      	ldr	r3, [pc, #96]	; (800ec4c <MX_TIM5_Init+0xa0>)
 800ebea:	2200      	movs	r2, #0
 800ebec:	619a      	str	r2, [r3, #24]
 800ebee:	2301      	movs	r3, #1
 800ebf0:	60fb      	str	r3, [r7, #12]
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	613b      	str	r3, [r7, #16]
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	617b      	str	r3, [r7, #20]
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	61bb      	str	r3, [r7, #24]
 800ebfe:	2300      	movs	r3, #0
 800ec00:	61fb      	str	r3, [r7, #28]
 800ec02:	2300      	movs	r3, #0
 800ec04:	623b      	str	r3, [r7, #32]
 800ec06:	2301      	movs	r3, #1
 800ec08:	627b      	str	r3, [r7, #36]	; 0x24
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec0e:	2300      	movs	r3, #0
 800ec10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec12:	f107 030c 	add.w	r3, r7, #12
 800ec16:	4619      	mov	r1, r3
 800ec18:	480c      	ldr	r0, [pc, #48]	; (800ec4c <MX_TIM5_Init+0xa0>)
 800ec1a:	f004 f960 	bl	8012ede <HAL_TIM_Encoder_Init>
 800ec1e:	4603      	mov	r3, r0
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d001      	beq.n	800ec28 <MX_TIM5_Init+0x7c>
 800ec24:	f7ff fbc2 	bl	800e3ac <Error_Handler>
 800ec28:	2300      	movs	r3, #0
 800ec2a:	607b      	str	r3, [r7, #4]
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	60bb      	str	r3, [r7, #8]
 800ec30:	1d3b      	adds	r3, r7, #4
 800ec32:	4619      	mov	r1, r3
 800ec34:	4805      	ldr	r0, [pc, #20]	; (800ec4c <MX_TIM5_Init+0xa0>)
 800ec36:	f004 ff9d 	bl	8013b74 <HAL_TIMEx_MasterConfigSynchronization>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d001      	beq.n	800ec44 <MX_TIM5_Init+0x98>
 800ec40:	f7ff fbb4 	bl	800e3ac <Error_Handler>
 800ec44:	bf00      	nop
 800ec46:	3730      	adds	r7, #48	; 0x30
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	2000134c 	.word	0x2000134c
 800ec50:	40000c00 	.word	0x40000c00

0800ec54 <MX_TIM9_Init>:
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	463b      	mov	r3, r7
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	601a      	str	r2, [r3, #0]
 800ec60:	605a      	str	r2, [r3, #4]
 800ec62:	609a      	str	r2, [r3, #8]
 800ec64:	60da      	str	r2, [r3, #12]
 800ec66:	4b16      	ldr	r3, [pc, #88]	; (800ecc0 <MX_TIM9_Init+0x6c>)
 800ec68:	4a16      	ldr	r2, [pc, #88]	; (800ecc4 <MX_TIM9_Init+0x70>)
 800ec6a:	601a      	str	r2, [r3, #0]
 800ec6c:	4b14      	ldr	r3, [pc, #80]	; (800ecc0 <MX_TIM9_Init+0x6c>)
 800ec6e:	f244 129f 	movw	r2, #16799	; 0x419f
 800ec72:	605a      	str	r2, [r3, #4]
 800ec74:	4b12      	ldr	r3, [pc, #72]	; (800ecc0 <MX_TIM9_Init+0x6c>)
 800ec76:	2200      	movs	r2, #0
 800ec78:	609a      	str	r2, [r3, #8]
 800ec7a:	4b11      	ldr	r3, [pc, #68]	; (800ecc0 <MX_TIM9_Init+0x6c>)
 800ec7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec80:	60da      	str	r2, [r3, #12]
 800ec82:	4b0f      	ldr	r3, [pc, #60]	; (800ecc0 <MX_TIM9_Init+0x6c>)
 800ec84:	2200      	movs	r2, #0
 800ec86:	611a      	str	r2, [r3, #16]
 800ec88:	4b0d      	ldr	r3, [pc, #52]	; (800ecc0 <MX_TIM9_Init+0x6c>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	619a      	str	r2, [r3, #24]
 800ec8e:	480c      	ldr	r0, [pc, #48]	; (800ecc0 <MX_TIM9_Init+0x6c>)
 800ec90:	f004 f80c 	bl	8012cac <HAL_TIM_Base_Init>
 800ec94:	4603      	mov	r3, r0
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d001      	beq.n	800ec9e <MX_TIM9_Init+0x4a>
 800ec9a:	f7ff fb87 	bl	800e3ac <Error_Handler>
 800ec9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eca2:	603b      	str	r3, [r7, #0]
 800eca4:	463b      	mov	r3, r7
 800eca6:	4619      	mov	r1, r3
 800eca8:	4805      	ldr	r0, [pc, #20]	; (800ecc0 <MX_TIM9_Init+0x6c>)
 800ecaa:	f004 fb89 	bl	80133c0 <HAL_TIM_ConfigClockSource>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d001      	beq.n	800ecb8 <MX_TIM9_Init+0x64>
 800ecb4:	f7ff fb7a 	bl	800e3ac <Error_Handler>
 800ecb8:	bf00      	nop
 800ecba:	3710      	adds	r7, #16
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	20001394 	.word	0x20001394
 800ecc4:	40014000 	.word	0x40014000

0800ecc8 <MX_TIM14_Init>:
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	4b0e      	ldr	r3, [pc, #56]	; (800ed08 <MX_TIM14_Init+0x40>)
 800ecce:	4a0f      	ldr	r2, [pc, #60]	; (800ed0c <MX_TIM14_Init+0x44>)
 800ecd0:	601a      	str	r2, [r3, #0]
 800ecd2:	4b0d      	ldr	r3, [pc, #52]	; (800ed08 <MX_TIM14_Init+0x40>)
 800ecd4:	f240 3247 	movw	r2, #839	; 0x347
 800ecd8:	605a      	str	r2, [r3, #4]
 800ecda:	4b0b      	ldr	r3, [pc, #44]	; (800ed08 <MX_TIM14_Init+0x40>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	609a      	str	r2, [r3, #8]
 800ece0:	4b09      	ldr	r3, [pc, #36]	; (800ed08 <MX_TIM14_Init+0x40>)
 800ece2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ece6:	60da      	str	r2, [r3, #12]
 800ece8:	4b07      	ldr	r3, [pc, #28]	; (800ed08 <MX_TIM14_Init+0x40>)
 800ecea:	2200      	movs	r2, #0
 800ecec:	611a      	str	r2, [r3, #16]
 800ecee:	4b06      	ldr	r3, [pc, #24]	; (800ed08 <MX_TIM14_Init+0x40>)
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	619a      	str	r2, [r3, #24]
 800ecf4:	4804      	ldr	r0, [pc, #16]	; (800ed08 <MX_TIM14_Init+0x40>)
 800ecf6:	f003 ffd9 	bl	8012cac <HAL_TIM_Base_Init>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d001      	beq.n	800ed04 <MX_TIM14_Init+0x3c>
 800ed00:	f7ff fb54 	bl	800e3ac <Error_Handler>
 800ed04:	bf00      	nop
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	200013dc 	.word	0x200013dc
 800ed0c:	40002000 	.word	0x40002000

0800ed10 <HAL_TIM_Base_MspInit>:
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b088      	sub	sp, #32
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed20:	d10e      	bne.n	800ed40 <HAL_TIM_Base_MspInit+0x30>
 800ed22:	2300      	movs	r3, #0
 800ed24:	61fb      	str	r3, [r7, #28]
 800ed26:	4b38      	ldr	r3, [pc, #224]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800ed28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed2a:	4a37      	ldr	r2, [pc, #220]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800ed2c:	f043 0301 	orr.w	r3, r3, #1
 800ed30:	6413      	str	r3, [r2, #64]	; 0x40
 800ed32:	4b35      	ldr	r3, [pc, #212]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800ed34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed36:	f003 0301 	and.w	r3, r3, #1
 800ed3a:	61fb      	str	r3, [r7, #28]
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	e05e      	b.n	800edfe <HAL_TIM_Base_MspInit+0xee>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	4a31      	ldr	r2, [pc, #196]	; (800ee0c <HAL_TIM_Base_MspInit+0xfc>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d116      	bne.n	800ed78 <HAL_TIM_Base_MspInit+0x68>
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	61bb      	str	r3, [r7, #24]
 800ed4e:	4b2e      	ldr	r3, [pc, #184]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800ed50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed52:	4a2d      	ldr	r2, [pc, #180]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800ed54:	f043 0302 	orr.w	r3, r3, #2
 800ed58:	6413      	str	r3, [r2, #64]	; 0x40
 800ed5a:	4b2b      	ldr	r3, [pc, #172]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800ed5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed5e:	f003 0302 	and.w	r3, r3, #2
 800ed62:	61bb      	str	r3, [r7, #24]
 800ed64:	69bb      	ldr	r3, [r7, #24]
 800ed66:	2200      	movs	r2, #0
 800ed68:	2105      	movs	r1, #5
 800ed6a:	201d      	movs	r0, #29
 800ed6c:	f001 fdce 	bl	801090c <HAL_NVIC_SetPriority>
 800ed70:	201d      	movs	r0, #29
 800ed72:	f001 fde7 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800ed76:	e042      	b.n	800edfe <HAL_TIM_Base_MspInit+0xee>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	4a24      	ldr	r2, [pc, #144]	; (800ee10 <HAL_TIM_Base_MspInit+0x100>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d10e      	bne.n	800eda0 <HAL_TIM_Base_MspInit+0x90>
 800ed82:	2300      	movs	r3, #0
 800ed84:	617b      	str	r3, [r7, #20]
 800ed86:	4b20      	ldr	r3, [pc, #128]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800ed88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed8a:	4a1f      	ldr	r2, [pc, #124]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800ed8c:	f043 0304 	orr.w	r3, r3, #4
 800ed90:	6413      	str	r3, [r2, #64]	; 0x40
 800ed92:	4b1d      	ldr	r3, [pc, #116]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800ed94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed96:	f003 0304 	and.w	r3, r3, #4
 800ed9a:	617b      	str	r3, [r7, #20]
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	e02e      	b.n	800edfe <HAL_TIM_Base_MspInit+0xee>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a1b      	ldr	r2, [pc, #108]	; (800ee14 <HAL_TIM_Base_MspInit+0x104>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d116      	bne.n	800edd8 <HAL_TIM_Base_MspInit+0xc8>
 800edaa:	2300      	movs	r3, #0
 800edac:	613b      	str	r3, [r7, #16]
 800edae:	4b16      	ldr	r3, [pc, #88]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800edb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edb2:	4a15      	ldr	r2, [pc, #84]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800edb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800edb8:	6453      	str	r3, [r2, #68]	; 0x44
 800edba:	4b13      	ldr	r3, [pc, #76]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800edbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800edc2:	613b      	str	r3, [r7, #16]
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	2200      	movs	r2, #0
 800edc8:	2105      	movs	r1, #5
 800edca:	2018      	movs	r0, #24
 800edcc:	f001 fd9e 	bl	801090c <HAL_NVIC_SetPriority>
 800edd0:	2018      	movs	r0, #24
 800edd2:	f001 fdb7 	bl	8010944 <HAL_NVIC_EnableIRQ>
 800edd6:	e012      	b.n	800edfe <HAL_TIM_Base_MspInit+0xee>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	4a0e      	ldr	r2, [pc, #56]	; (800ee18 <HAL_TIM_Base_MspInit+0x108>)
 800edde:	4293      	cmp	r3, r2
 800ede0:	d10d      	bne.n	800edfe <HAL_TIM_Base_MspInit+0xee>
 800ede2:	2300      	movs	r3, #0
 800ede4:	60fb      	str	r3, [r7, #12]
 800ede6:	4b08      	ldr	r3, [pc, #32]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800ede8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edea:	4a07      	ldr	r2, [pc, #28]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800edec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800edf0:	6413      	str	r3, [r2, #64]	; 0x40
 800edf2:	4b05      	ldr	r3, [pc, #20]	; (800ee08 <HAL_TIM_Base_MspInit+0xf8>)
 800edf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800edfa:	60fb      	str	r3, [r7, #12]
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	bf00      	nop
 800ee00:	3720      	adds	r7, #32
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}
 800ee06:	bf00      	nop
 800ee08:	40023800 	.word	0x40023800
 800ee0c:	40000400 	.word	0x40000400
 800ee10:	40000800 	.word	0x40000800
 800ee14:	40014000 	.word	0x40014000
 800ee18:	40002000 	.word	0x40002000

0800ee1c <HAL_TIM_Encoder_MspInit>:
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b08a      	sub	sp, #40	; 0x28
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
 800ee24:	f107 0314 	add.w	r3, r7, #20
 800ee28:	2200      	movs	r2, #0
 800ee2a:	601a      	str	r2, [r3, #0]
 800ee2c:	605a      	str	r2, [r3, #4]
 800ee2e:	609a      	str	r2, [r3, #8]
 800ee30:	60da      	str	r2, [r3, #12]
 800ee32:	611a      	str	r2, [r3, #16]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4a19      	ldr	r2, [pc, #100]	; (800eea0 <HAL_TIM_Encoder_MspInit+0x84>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d12b      	bne.n	800ee96 <HAL_TIM_Encoder_MspInit+0x7a>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	613b      	str	r3, [r7, #16]
 800ee42:	4b18      	ldr	r3, [pc, #96]	; (800eea4 <HAL_TIM_Encoder_MspInit+0x88>)
 800ee44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee46:	4a17      	ldr	r2, [pc, #92]	; (800eea4 <HAL_TIM_Encoder_MspInit+0x88>)
 800ee48:	f043 0308 	orr.w	r3, r3, #8
 800ee4c:	6413      	str	r3, [r2, #64]	; 0x40
 800ee4e:	4b15      	ldr	r3, [pc, #84]	; (800eea4 <HAL_TIM_Encoder_MspInit+0x88>)
 800ee50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee52:	f003 0308 	and.w	r3, r3, #8
 800ee56:	613b      	str	r3, [r7, #16]
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	60fb      	str	r3, [r7, #12]
 800ee5e:	4b11      	ldr	r3, [pc, #68]	; (800eea4 <HAL_TIM_Encoder_MspInit+0x88>)
 800ee60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee62:	4a10      	ldr	r2, [pc, #64]	; (800eea4 <HAL_TIM_Encoder_MspInit+0x88>)
 800ee64:	f043 0301 	orr.w	r3, r3, #1
 800ee68:	6313      	str	r3, [r2, #48]	; 0x30
 800ee6a:	4b0e      	ldr	r3, [pc, #56]	; (800eea4 <HAL_TIM_Encoder_MspInit+0x88>)
 800ee6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee6e:	f003 0301 	and.w	r3, r3, #1
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2303      	movs	r3, #3
 800ee78:	617b      	str	r3, [r7, #20]
 800ee7a:	2302      	movs	r3, #2
 800ee7c:	61bb      	str	r3, [r7, #24]
 800ee7e:	2300      	movs	r3, #0
 800ee80:	61fb      	str	r3, [r7, #28]
 800ee82:	2300      	movs	r3, #0
 800ee84:	623b      	str	r3, [r7, #32]
 800ee86:	2302      	movs	r3, #2
 800ee88:	627b      	str	r3, [r7, #36]	; 0x24
 800ee8a:	f107 0314 	add.w	r3, r7, #20
 800ee8e:	4619      	mov	r1, r3
 800ee90:	4805      	ldr	r0, [pc, #20]	; (800eea8 <HAL_TIM_Encoder_MspInit+0x8c>)
 800ee92:	f002 f8f1 	bl	8011078 <HAL_GPIO_Init>
 800ee96:	bf00      	nop
 800ee98:	3728      	adds	r7, #40	; 0x28
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	bd80      	pop	{r7, pc}
 800ee9e:	bf00      	nop
 800eea0:	40000c00 	.word	0x40000c00
 800eea4:	40023800 	.word	0x40023800
 800eea8:	40020000 	.word	0x40020000

0800eeac <HAL_TIM_MspPostInit>:
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b088      	sub	sp, #32
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
 800eeb4:	f107 030c 	add.w	r3, r7, #12
 800eeb8:	2200      	movs	r2, #0
 800eeba:	601a      	str	r2, [r3, #0]
 800eebc:	605a      	str	r2, [r3, #4]
 800eebe:	609a      	str	r2, [r3, #8]
 800eec0:	60da      	str	r2, [r3, #12]
 800eec2:	611a      	str	r2, [r3, #16]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a12      	ldr	r2, [pc, #72]	; (800ef14 <HAL_TIM_MspPostInit+0x68>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d11e      	bne.n	800ef0c <HAL_TIM_MspPostInit+0x60>
 800eece:	2300      	movs	r3, #0
 800eed0:	60bb      	str	r3, [r7, #8]
 800eed2:	4b11      	ldr	r3, [pc, #68]	; (800ef18 <HAL_TIM_MspPostInit+0x6c>)
 800eed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eed6:	4a10      	ldr	r2, [pc, #64]	; (800ef18 <HAL_TIM_MspPostInit+0x6c>)
 800eed8:	f043 0308 	orr.w	r3, r3, #8
 800eedc:	6313      	str	r3, [r2, #48]	; 0x30
 800eede:	4b0e      	ldr	r3, [pc, #56]	; (800ef18 <HAL_TIM_MspPostInit+0x6c>)
 800eee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee2:	f003 0308 	and.w	r3, r3, #8
 800eee6:	60bb      	str	r3, [r7, #8]
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800eeee:	60fb      	str	r3, [r7, #12]
 800eef0:	2302      	movs	r3, #2
 800eef2:	613b      	str	r3, [r7, #16]
 800eef4:	2300      	movs	r3, #0
 800eef6:	617b      	str	r3, [r7, #20]
 800eef8:	2300      	movs	r3, #0
 800eefa:	61bb      	str	r3, [r7, #24]
 800eefc:	2302      	movs	r3, #2
 800eefe:	61fb      	str	r3, [r7, #28]
 800ef00:	f107 030c 	add.w	r3, r7, #12
 800ef04:	4619      	mov	r1, r3
 800ef06:	4805      	ldr	r0, [pc, #20]	; (800ef1c <HAL_TIM_MspPostInit+0x70>)
 800ef08:	f002 f8b6 	bl	8011078 <HAL_GPIO_Init>
 800ef0c:	bf00      	nop
 800ef0e:	3720      	adds	r7, #32
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	40000800 	.word	0x40000800
 800ef18:	40023800 	.word	0x40023800
 800ef1c:	40020c00 	.word	0x40020c00

0800ef20 <MX_USART1_UART_Init>:
 800ef20:	b580      	push	{r7, lr}
 800ef22:	af00      	add	r7, sp, #0
 800ef24:	4b11      	ldr	r3, [pc, #68]	; (800ef6c <MX_USART1_UART_Init+0x4c>)
 800ef26:	4a12      	ldr	r2, [pc, #72]	; (800ef70 <MX_USART1_UART_Init+0x50>)
 800ef28:	601a      	str	r2, [r3, #0]
 800ef2a:	4b10      	ldr	r3, [pc, #64]	; (800ef6c <MX_USART1_UART_Init+0x4c>)
 800ef2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ef30:	605a      	str	r2, [r3, #4]
 800ef32:	4b0e      	ldr	r3, [pc, #56]	; (800ef6c <MX_USART1_UART_Init+0x4c>)
 800ef34:	2200      	movs	r2, #0
 800ef36:	609a      	str	r2, [r3, #8]
 800ef38:	4b0c      	ldr	r3, [pc, #48]	; (800ef6c <MX_USART1_UART_Init+0x4c>)
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	60da      	str	r2, [r3, #12]
 800ef3e:	4b0b      	ldr	r3, [pc, #44]	; (800ef6c <MX_USART1_UART_Init+0x4c>)
 800ef40:	2200      	movs	r2, #0
 800ef42:	611a      	str	r2, [r3, #16]
 800ef44:	4b09      	ldr	r3, [pc, #36]	; (800ef6c <MX_USART1_UART_Init+0x4c>)
 800ef46:	220c      	movs	r2, #12
 800ef48:	615a      	str	r2, [r3, #20]
 800ef4a:	4b08      	ldr	r3, [pc, #32]	; (800ef6c <MX_USART1_UART_Init+0x4c>)
 800ef4c:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ef50:	619a      	str	r2, [r3, #24]
 800ef52:	4b06      	ldr	r3, [pc, #24]	; (800ef6c <MX_USART1_UART_Init+0x4c>)
 800ef54:	2200      	movs	r2, #0
 800ef56:	61da      	str	r2, [r3, #28]
 800ef58:	4804      	ldr	r0, [pc, #16]	; (800ef6c <MX_USART1_UART_Init+0x4c>)
 800ef5a:	f004 fe9b 	bl	8013c94 <HAL_UART_Init>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d001      	beq.n	800ef68 <MX_USART1_UART_Init+0x48>
 800ef64:	f7ff fa22 	bl	800e3ac <Error_Handler>
 800ef68:	bf00      	nop
 800ef6a:	bd80      	pop	{r7, pc}
 800ef6c:	20001424 	.word	0x20001424
 800ef70:	40011000 	.word	0x40011000

0800ef74 <MX_USART2_UART_Init>:
 800ef74:	b580      	push	{r7, lr}
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	4b11      	ldr	r3, [pc, #68]	; (800efc0 <MX_USART2_UART_Init+0x4c>)
 800ef7a:	4a12      	ldr	r2, [pc, #72]	; (800efc4 <MX_USART2_UART_Init+0x50>)
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	4b10      	ldr	r3, [pc, #64]	; (800efc0 <MX_USART2_UART_Init+0x4c>)
 800ef80:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800ef84:	605a      	str	r2, [r3, #4]
 800ef86:	4b0e      	ldr	r3, [pc, #56]	; (800efc0 <MX_USART2_UART_Init+0x4c>)
 800ef88:	2200      	movs	r2, #0
 800ef8a:	609a      	str	r2, [r3, #8]
 800ef8c:	4b0c      	ldr	r3, [pc, #48]	; (800efc0 <MX_USART2_UART_Init+0x4c>)
 800ef8e:	2200      	movs	r2, #0
 800ef90:	60da      	str	r2, [r3, #12]
 800ef92:	4b0b      	ldr	r3, [pc, #44]	; (800efc0 <MX_USART2_UART_Init+0x4c>)
 800ef94:	2200      	movs	r2, #0
 800ef96:	611a      	str	r2, [r3, #16]
 800ef98:	4b09      	ldr	r3, [pc, #36]	; (800efc0 <MX_USART2_UART_Init+0x4c>)
 800ef9a:	220c      	movs	r2, #12
 800ef9c:	615a      	str	r2, [r3, #20]
 800ef9e:	4b08      	ldr	r3, [pc, #32]	; (800efc0 <MX_USART2_UART_Init+0x4c>)
 800efa0:	2200      	movs	r2, #0
 800efa2:	619a      	str	r2, [r3, #24]
 800efa4:	4b06      	ldr	r3, [pc, #24]	; (800efc0 <MX_USART2_UART_Init+0x4c>)
 800efa6:	2200      	movs	r2, #0
 800efa8:	61da      	str	r2, [r3, #28]
 800efaa:	4805      	ldr	r0, [pc, #20]	; (800efc0 <MX_USART2_UART_Init+0x4c>)
 800efac:	f004 fe72 	bl	8013c94 <HAL_UART_Init>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d001      	beq.n	800efba <MX_USART2_UART_Init+0x46>
 800efb6:	f7ff f9f9 	bl	800e3ac <Error_Handler>
 800efba:	bf00      	nop
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	20001468 	.word	0x20001468
 800efc4:	40004400 	.word	0x40004400

0800efc8 <HAL_UART_MspInit>:
 800efc8:	b580      	push	{r7, lr}
 800efca:	b08c      	sub	sp, #48	; 0x30
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	f107 031c 	add.w	r3, r7, #28
 800efd4:	2200      	movs	r2, #0
 800efd6:	601a      	str	r2, [r3, #0]
 800efd8:	605a      	str	r2, [r3, #4]
 800efda:	609a      	str	r2, [r3, #8]
 800efdc:	60da      	str	r2, [r3, #12]
 800efde:	611a      	str	r2, [r3, #16]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a61      	ldr	r2, [pc, #388]	; (800f16c <HAL_UART_MspInit+0x1a4>)
 800efe6:	4293      	cmp	r3, r2
 800efe8:	f040 808a 	bne.w	800f100 <HAL_UART_MspInit+0x138>
 800efec:	2300      	movs	r3, #0
 800efee:	61bb      	str	r3, [r7, #24]
 800eff0:	4b5f      	ldr	r3, [pc, #380]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800eff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eff4:	4a5e      	ldr	r2, [pc, #376]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800eff6:	f043 0310 	orr.w	r3, r3, #16
 800effa:	6453      	str	r3, [r2, #68]	; 0x44
 800effc:	4b5c      	ldr	r3, [pc, #368]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800effe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f000:	f003 0310 	and.w	r3, r3, #16
 800f004:	61bb      	str	r3, [r7, #24]
 800f006:	69bb      	ldr	r3, [r7, #24]
 800f008:	2300      	movs	r3, #0
 800f00a:	617b      	str	r3, [r7, #20]
 800f00c:	4b58      	ldr	r3, [pc, #352]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800f00e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f010:	4a57      	ldr	r2, [pc, #348]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800f012:	f043 0301 	orr.w	r3, r3, #1
 800f016:	6313      	str	r3, [r2, #48]	; 0x30
 800f018:	4b55      	ldr	r3, [pc, #340]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800f01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f01c:	f003 0301 	and.w	r3, r3, #1
 800f020:	617b      	str	r3, [r7, #20]
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800f028:	61fb      	str	r3, [r7, #28]
 800f02a:	2302      	movs	r3, #2
 800f02c:	623b      	str	r3, [r7, #32]
 800f02e:	2300      	movs	r3, #0
 800f030:	627b      	str	r3, [r7, #36]	; 0x24
 800f032:	2303      	movs	r3, #3
 800f034:	62bb      	str	r3, [r7, #40]	; 0x28
 800f036:	2307      	movs	r3, #7
 800f038:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f03a:	f107 031c 	add.w	r3, r7, #28
 800f03e:	4619      	mov	r1, r3
 800f040:	484c      	ldr	r0, [pc, #304]	; (800f174 <HAL_UART_MspInit+0x1ac>)
 800f042:	f002 f819 	bl	8011078 <HAL_GPIO_Init>
 800f046:	4b4c      	ldr	r3, [pc, #304]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f048:	4a4c      	ldr	r2, [pc, #304]	; (800f17c <HAL_UART_MspInit+0x1b4>)
 800f04a:	601a      	str	r2, [r3, #0]
 800f04c:	4b4a      	ldr	r3, [pc, #296]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f04e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f052:	605a      	str	r2, [r3, #4]
 800f054:	4b48      	ldr	r3, [pc, #288]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f056:	2240      	movs	r2, #64	; 0x40
 800f058:	609a      	str	r2, [r3, #8]
 800f05a:	4b47      	ldr	r3, [pc, #284]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f05c:	2200      	movs	r2, #0
 800f05e:	60da      	str	r2, [r3, #12]
 800f060:	4b45      	ldr	r3, [pc, #276]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f066:	611a      	str	r2, [r3, #16]
 800f068:	4b43      	ldr	r3, [pc, #268]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f06a:	2200      	movs	r2, #0
 800f06c:	615a      	str	r2, [r3, #20]
 800f06e:	4b42      	ldr	r3, [pc, #264]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f070:	2200      	movs	r2, #0
 800f072:	619a      	str	r2, [r3, #24]
 800f074:	4b40      	ldr	r3, [pc, #256]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f076:	2200      	movs	r2, #0
 800f078:	61da      	str	r2, [r3, #28]
 800f07a:	4b3f      	ldr	r3, [pc, #252]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f07c:	2200      	movs	r2, #0
 800f07e:	621a      	str	r2, [r3, #32]
 800f080:	4b3d      	ldr	r3, [pc, #244]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f082:	2200      	movs	r2, #0
 800f084:	625a      	str	r2, [r3, #36]	; 0x24
 800f086:	483c      	ldr	r0, [pc, #240]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f088:	f001 fc86 	bl	8010998 <HAL_DMA_Init>
 800f08c:	4603      	mov	r3, r0
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d001      	beq.n	800f096 <HAL_UART_MspInit+0xce>
 800f092:	f7ff f98b 	bl	800e3ac <Error_Handler>
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	4a37      	ldr	r2, [pc, #220]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f09a:	635a      	str	r2, [r3, #52]	; 0x34
 800f09c:	4a36      	ldr	r2, [pc, #216]	; (800f178 <HAL_UART_MspInit+0x1b0>)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6393      	str	r3, [r2, #56]	; 0x38
 800f0a2:	4b37      	ldr	r3, [pc, #220]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0a4:	4a37      	ldr	r2, [pc, #220]	; (800f184 <HAL_UART_MspInit+0x1bc>)
 800f0a6:	601a      	str	r2, [r3, #0]
 800f0a8:	4b35      	ldr	r3, [pc, #212]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800f0ae:	605a      	str	r2, [r3, #4]
 800f0b0:	4b33      	ldr	r3, [pc, #204]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	609a      	str	r2, [r3, #8]
 800f0b6:	4b32      	ldr	r3, [pc, #200]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	60da      	str	r2, [r3, #12]
 800f0bc:	4b30      	ldr	r3, [pc, #192]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f0c2:	611a      	str	r2, [r3, #16]
 800f0c4:	4b2e      	ldr	r3, [pc, #184]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	615a      	str	r2, [r3, #20]
 800f0ca:	4b2d      	ldr	r3, [pc, #180]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	619a      	str	r2, [r3, #24]
 800f0d0:	4b2b      	ldr	r3, [pc, #172]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	61da      	str	r2, [r3, #28]
 800f0d6:	4b2a      	ldr	r3, [pc, #168]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0d8:	2200      	movs	r2, #0
 800f0da:	621a      	str	r2, [r3, #32]
 800f0dc:	4b28      	ldr	r3, [pc, #160]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0de:	2200      	movs	r2, #0
 800f0e0:	625a      	str	r2, [r3, #36]	; 0x24
 800f0e2:	4827      	ldr	r0, [pc, #156]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0e4:	f001 fc58 	bl	8010998 <HAL_DMA_Init>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d001      	beq.n	800f0f2 <HAL_UART_MspInit+0x12a>
 800f0ee:	f7ff f95d 	bl	800e3ac <Error_Handler>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	4a22      	ldr	r2, [pc, #136]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0f6:	639a      	str	r2, [r3, #56]	; 0x38
 800f0f8:	4a21      	ldr	r2, [pc, #132]	; (800f180 <HAL_UART_MspInit+0x1b8>)
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	6393      	str	r3, [r2, #56]	; 0x38
 800f0fe:	e030      	b.n	800f162 <HAL_UART_MspInit+0x19a>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a20      	ldr	r2, [pc, #128]	; (800f188 <HAL_UART_MspInit+0x1c0>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d12b      	bne.n	800f162 <HAL_UART_MspInit+0x19a>
 800f10a:	2300      	movs	r3, #0
 800f10c:	613b      	str	r3, [r7, #16]
 800f10e:	4b18      	ldr	r3, [pc, #96]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800f110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f112:	4a17      	ldr	r2, [pc, #92]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800f114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f118:	6413      	str	r3, [r2, #64]	; 0x40
 800f11a:	4b15      	ldr	r3, [pc, #84]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800f11c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f11e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f122:	613b      	str	r3, [r7, #16]
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	2300      	movs	r3, #0
 800f128:	60fb      	str	r3, [r7, #12]
 800f12a:	4b11      	ldr	r3, [pc, #68]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800f12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f12e:	4a10      	ldr	r2, [pc, #64]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800f130:	f043 0308 	orr.w	r3, r3, #8
 800f134:	6313      	str	r3, [r2, #48]	; 0x30
 800f136:	4b0e      	ldr	r3, [pc, #56]	; (800f170 <HAL_UART_MspInit+0x1a8>)
 800f138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f13a:	f003 0308 	and.w	r3, r3, #8
 800f13e:	60fb      	str	r3, [r7, #12]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	2360      	movs	r3, #96	; 0x60
 800f144:	61fb      	str	r3, [r7, #28]
 800f146:	2302      	movs	r3, #2
 800f148:	623b      	str	r3, [r7, #32]
 800f14a:	2300      	movs	r3, #0
 800f14c:	627b      	str	r3, [r7, #36]	; 0x24
 800f14e:	2303      	movs	r3, #3
 800f150:	62bb      	str	r3, [r7, #40]	; 0x28
 800f152:	2307      	movs	r3, #7
 800f154:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f156:	f107 031c 	add.w	r3, r7, #28
 800f15a:	4619      	mov	r1, r3
 800f15c:	480b      	ldr	r0, [pc, #44]	; (800f18c <HAL_UART_MspInit+0x1c4>)
 800f15e:	f001 ff8b 	bl	8011078 <HAL_GPIO_Init>
 800f162:	bf00      	nop
 800f164:	3730      	adds	r7, #48	; 0x30
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	40011000 	.word	0x40011000
 800f170:	40023800 	.word	0x40023800
 800f174:	40020000 	.word	0x40020000
 800f178:	200014ac 	.word	0x200014ac
 800f17c:	400264b8 	.word	0x400264b8
 800f180:	2000150c 	.word	0x2000150c
 800f184:	40026488 	.word	0x40026488
 800f188:	40004400 	.word	0x40004400
 800f18c:	40020c00 	.word	0x40020c00

0800f190 <Reset_Handler>:
 800f190:	f8df d034 	ldr.w	sp, [pc, #52]	; 800f1c8 <LoopFillZerobss+0x12>
 800f194:	480d      	ldr	r0, [pc, #52]	; (800f1cc <LoopFillZerobss+0x16>)
 800f196:	490e      	ldr	r1, [pc, #56]	; (800f1d0 <LoopFillZerobss+0x1a>)
 800f198:	4a0e      	ldr	r2, [pc, #56]	; (800f1d4 <LoopFillZerobss+0x1e>)
 800f19a:	2300      	movs	r3, #0
 800f19c:	e002      	b.n	800f1a4 <LoopCopyDataInit>

0800f19e <CopyDataInit>:
 800f19e:	58d4      	ldr	r4, [r2, r3]
 800f1a0:	50c4      	str	r4, [r0, r3]
 800f1a2:	3304      	adds	r3, #4

0800f1a4 <LoopCopyDataInit>:
 800f1a4:	18c4      	adds	r4, r0, r3
 800f1a6:	428c      	cmp	r4, r1
 800f1a8:	d3f9      	bcc.n	800f19e <CopyDataInit>
 800f1aa:	4a0b      	ldr	r2, [pc, #44]	; (800f1d8 <LoopFillZerobss+0x22>)
 800f1ac:	4c0b      	ldr	r4, [pc, #44]	; (800f1dc <LoopFillZerobss+0x26>)
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	e001      	b.n	800f1b6 <LoopFillZerobss>

0800f1b2 <FillZerobss>:
 800f1b2:	6013      	str	r3, [r2, #0]
 800f1b4:	3204      	adds	r2, #4

0800f1b6 <LoopFillZerobss>:
 800f1b6:	42a2      	cmp	r2, r4
 800f1b8:	d3fb      	bcc.n	800f1b2 <FillZerobss>
 800f1ba:	f7ff fbbd 	bl	800e938 <SystemInit>
 800f1be:	f00b fd2d 	bl	801ac1c <__libc_init_array>
 800f1c2:	f7ff f843 	bl	800e24c <main>
 800f1c6:	4770      	bx	lr
 800f1c8:	20020000 	.word	0x20020000
 800f1cc:	20000000 	.word	0x20000000
 800f1d0:	20000210 	.word	0x20000210
 800f1d4:	0801e124 	.word	0x0801e124
 800f1d8:	20000210 	.word	0x20000210
 800f1dc:	2000a53c 	.word	0x2000a53c

0800f1e0 <ADC_IRQHandler>:
 800f1e0:	e7fe      	b.n	800f1e0 <ADC_IRQHandler>
	...

0800f1e4 <HAL_Init>:
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	af00      	add	r7, sp, #0
 800f1e8:	4b0e      	ldr	r3, [pc, #56]	; (800f224 <HAL_Init+0x40>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	4a0d      	ldr	r2, [pc, #52]	; (800f224 <HAL_Init+0x40>)
 800f1ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f1f2:	6013      	str	r3, [r2, #0]
 800f1f4:	4b0b      	ldr	r3, [pc, #44]	; (800f224 <HAL_Init+0x40>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4a0a      	ldr	r2, [pc, #40]	; (800f224 <HAL_Init+0x40>)
 800f1fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f1fe:	6013      	str	r3, [r2, #0]
 800f200:	4b08      	ldr	r3, [pc, #32]	; (800f224 <HAL_Init+0x40>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4a07      	ldr	r2, [pc, #28]	; (800f224 <HAL_Init+0x40>)
 800f206:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f20a:	6013      	str	r3, [r2, #0]
 800f20c:	2003      	movs	r0, #3
 800f20e:	f001 fb72 	bl	80108f6 <HAL_NVIC_SetPriorityGrouping>
 800f212:	2005      	movs	r0, #5
 800f214:	f7ff f9b0 	bl	800e578 <HAL_InitTick>
 800f218:	f7ff f982 	bl	800e520 <HAL_MspInit>
 800f21c:	2300      	movs	r3, #0
 800f21e:	4618      	mov	r0, r3
 800f220:	bd80      	pop	{r7, pc}
 800f222:	bf00      	nop
 800f224:	40023c00 	.word	0x40023c00

0800f228 <HAL_IncTick>:
 800f228:	b480      	push	{r7}
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	4b06      	ldr	r3, [pc, #24]	; (800f248 <HAL_IncTick+0x20>)
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	461a      	mov	r2, r3
 800f232:	4b06      	ldr	r3, [pc, #24]	; (800f24c <HAL_IncTick+0x24>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	4413      	add	r3, r2
 800f238:	4a04      	ldr	r2, [pc, #16]	; (800f24c <HAL_IncTick+0x24>)
 800f23a:	6013      	str	r3, [r2, #0]
 800f23c:	bf00      	nop
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop
 800f248:	20000034 	.word	0x20000034
 800f24c:	2000156c 	.word	0x2000156c

0800f250 <HAL_GetTick>:
 800f250:	b480      	push	{r7}
 800f252:	af00      	add	r7, sp, #0
 800f254:	4b03      	ldr	r3, [pc, #12]	; (800f264 <HAL_GetTick+0x14>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4618      	mov	r0, r3
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr
 800f262:	bf00      	nop
 800f264:	2000156c 	.word	0x2000156c

0800f268 <HAL_ADC_Init>:
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	2300      	movs	r3, #0
 800f272:	73fb      	strb	r3, [r7, #15]
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d101      	bne.n	800f27e <HAL_ADC_Init+0x16>
 800f27a:	2301      	movs	r3, #1
 800f27c:	e033      	b.n	800f2e6 <HAL_ADC_Init+0x7e>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f282:	2b00      	cmp	r3, #0
 800f284:	d109      	bne.n	800f29a <HAL_ADC_Init+0x32>
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f7fe fb82 	bl	800d990 <HAL_ADC_MspInit>
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2200      	movs	r2, #0
 800f290:	645a      	str	r2, [r3, #68]	; 0x44
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2200      	movs	r2, #0
 800f296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f29e:	f003 0310 	and.w	r3, r3, #16
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d118      	bne.n	800f2d8 <HAL_ADC_Init+0x70>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800f2ae:	f023 0302 	bic.w	r3, r3, #2
 800f2b2:	f043 0202 	orr.w	r2, r3, #2
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	641a      	str	r2, [r3, #64]	; 0x40
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f000 fa54 	bl	800f768 <ADC_Init>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	645a      	str	r2, [r3, #68]	; 0x44
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2ca:	f023 0303 	bic.w	r3, r3, #3
 800f2ce:	f043 0201 	orr.w	r2, r3, #1
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	641a      	str	r2, [r3, #64]	; 0x40
 800f2d6:	e001      	b.n	800f2dc <HAL_ADC_Init+0x74>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	73fb      	strb	r3, [r7, #15]
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f2e4:	7bfb      	ldrb	r3, [r7, #15]
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3710      	adds	r7, #16
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
	...

0800f2f0 <HAL_ADC_Start_DMA>:
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b086      	sub	sp, #24
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	607a      	str	r2, [r7, #4]
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	613b      	str	r3, [r7, #16]
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f306:	2b01      	cmp	r3, #1
 800f308:	d101      	bne.n	800f30e <HAL_ADC_Start_DMA+0x1e>
 800f30a:	2302      	movs	r3, #2
 800f30c:	e0e9      	b.n	800f4e2 <HAL_ADC_Start_DMA+0x1f2>
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2201      	movs	r2, #1
 800f312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	f003 0301 	and.w	r3, r3, #1
 800f320:	2b01      	cmp	r3, #1
 800f322:	d018      	beq.n	800f356 <HAL_ADC_Start_DMA+0x66>
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	689a      	ldr	r2, [r3, #8]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	681b      	ldr	r3, [r3, #0]
 800f32e:	f042 0201 	orr.w	r2, r2, #1
 800f332:	609a      	str	r2, [r3, #8]
 800f334:	4b6d      	ldr	r3, [pc, #436]	; (800f4ec <HAL_ADC_Start_DMA+0x1fc>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	4a6d      	ldr	r2, [pc, #436]	; (800f4f0 <HAL_ADC_Start_DMA+0x200>)
 800f33a:	fba2 2303 	umull	r2, r3, r2, r3
 800f33e:	0c9a      	lsrs	r2, r3, #18
 800f340:	4613      	mov	r3, r2
 800f342:	005b      	lsls	r3, r3, #1
 800f344:	4413      	add	r3, r2
 800f346:	613b      	str	r3, [r7, #16]
 800f348:	e002      	b.n	800f350 <HAL_ADC_Start_DMA+0x60>
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	3b01      	subs	r3, #1
 800f34e:	613b      	str	r3, [r7, #16]
 800f350:	693b      	ldr	r3, [r7, #16]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d1f9      	bne.n	800f34a <HAL_ADC_Start_DMA+0x5a>
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	689b      	ldr	r3, [r3, #8]
 800f35c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f360:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f364:	d107      	bne.n	800f376 <HAL_ADC_Start_DMA+0x86>
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	689a      	ldr	r2, [r3, #8]
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f374:	609a      	str	r2, [r3, #8]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	689b      	ldr	r3, [r3, #8]
 800f37c:	f003 0301 	and.w	r3, r3, #1
 800f380:	2b01      	cmp	r3, #1
 800f382:	f040 80a1 	bne.w	800f4c8 <HAL_ADC_Start_DMA+0x1d8>
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f38a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800f38e:	f023 0301 	bic.w	r3, r3, #1
 800f392:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	641a      	str	r2, [r3, #64]	; 0x40
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	685b      	ldr	r3, [r3, #4]
 800f3a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d007      	beq.n	800f3b8 <HAL_ADC_Start_DMA+0xc8>
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800f3b0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	641a      	str	r2, [r3, #64]	; 0x40
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f3c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f3c4:	d106      	bne.n	800f3d4 <HAL_ADC_Start_DMA+0xe4>
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3ca:	f023 0206 	bic.w	r2, r3, #6
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	645a      	str	r2, [r3, #68]	; 0x44
 800f3d2:	e002      	b.n	800f3da <HAL_ADC_Start_DMA+0xea>
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	645a      	str	r2, [r3, #68]	; 0x44
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f3e2:	4b44      	ldr	r3, [pc, #272]	; (800f4f4 <HAL_ADC_Start_DMA+0x204>)
 800f3e4:	617b      	str	r3, [r7, #20]
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3ea:	4a43      	ldr	r2, [pc, #268]	; (800f4f8 <HAL_ADC_Start_DMA+0x208>)
 800f3ec:	63da      	str	r2, [r3, #60]	; 0x3c
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3f2:	4a42      	ldr	r2, [pc, #264]	; (800f4fc <HAL_ADC_Start_DMA+0x20c>)
 800f3f4:	641a      	str	r2, [r3, #64]	; 0x40
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3fa:	4a41      	ldr	r2, [pc, #260]	; (800f500 <HAL_ADC_Start_DMA+0x210>)
 800f3fc:	64da      	str	r2, [r3, #76]	; 0x4c
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800f406:	601a      	str	r2, [r3, #0]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	685a      	ldr	r2, [r3, #4]
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800f416:	605a      	str	r2, [r3, #4]
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	689a      	ldr	r2, [r3, #8]
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f426:	609a      	str	r2, [r3, #8]
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	334c      	adds	r3, #76	; 0x4c
 800f432:	4619      	mov	r1, r3
 800f434:	68ba      	ldr	r2, [r7, #8]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f001 fb5c 	bl	8010af4 <HAL_DMA_Start_IT>
 800f43c:	697b      	ldr	r3, [r7, #20]
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	f003 031f 	and.w	r3, r3, #31
 800f444:	2b00      	cmp	r3, #0
 800f446:	d12a      	bne.n	800f49e <HAL_ADC_Start_DMA+0x1ae>
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a2d      	ldr	r2, [pc, #180]	; (800f504 <HAL_ADC_Start_DMA+0x214>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d015      	beq.n	800f47e <HAL_ADC_Start_DMA+0x18e>
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	4a2c      	ldr	r2, [pc, #176]	; (800f508 <HAL_ADC_Start_DMA+0x218>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d105      	bne.n	800f468 <HAL_ADC_Start_DMA+0x178>
 800f45c:	4b25      	ldr	r3, [pc, #148]	; (800f4f4 <HAL_ADC_Start_DMA+0x204>)
 800f45e:	685b      	ldr	r3, [r3, #4]
 800f460:	f003 031f 	and.w	r3, r3, #31
 800f464:	2b00      	cmp	r3, #0
 800f466:	d00a      	beq.n	800f47e <HAL_ADC_Start_DMA+0x18e>
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	4a27      	ldr	r2, [pc, #156]	; (800f50c <HAL_ADC_Start_DMA+0x21c>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	d136      	bne.n	800f4e0 <HAL_ADC_Start_DMA+0x1f0>
 800f472:	4b20      	ldr	r3, [pc, #128]	; (800f4f4 <HAL_ADC_Start_DMA+0x204>)
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	f003 0310 	and.w	r3, r3, #16
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d130      	bne.n	800f4e0 <HAL_ADC_Start_DMA+0x1f0>
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	689b      	ldr	r3, [r3, #8]
 800f484:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d129      	bne.n	800f4e0 <HAL_ADC_Start_DMA+0x1f0>
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	689a      	ldr	r2, [r3, #8]
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f49a:	609a      	str	r2, [r3, #8]
 800f49c:	e020      	b.n	800f4e0 <HAL_ADC_Start_DMA+0x1f0>
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	4a18      	ldr	r2, [pc, #96]	; (800f504 <HAL_ADC_Start_DMA+0x214>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d11b      	bne.n	800f4e0 <HAL_ADC_Start_DMA+0x1f0>
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	689b      	ldr	r3, [r3, #8]
 800f4ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d114      	bne.n	800f4e0 <HAL_ADC_Start_DMA+0x1f0>
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	689a      	ldr	r2, [r3, #8]
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800f4c4:	609a      	str	r2, [r3, #8]
 800f4c6:	e00b      	b.n	800f4e0 <HAL_ADC_Start_DMA+0x1f0>
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4cc:	f043 0210 	orr.w	r2, r3, #16
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	641a      	str	r2, [r3, #64]	; 0x40
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f4d8:	f043 0201 	orr.w	r2, r3, #1
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	645a      	str	r2, [r3, #68]	; 0x44
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3718      	adds	r7, #24
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}
 800f4ea:	bf00      	nop
 800f4ec:	2000002c 	.word	0x2000002c
 800f4f0:	431bde83 	.word	0x431bde83
 800f4f4:	40012300 	.word	0x40012300
 800f4f8:	0800f961 	.word	0x0800f961
 800f4fc:	0800fa1b 	.word	0x0800fa1b
 800f500:	0800fa37 	.word	0x0800fa37
 800f504:	40012000 	.word	0x40012000
 800f508:	40012100 	.word	0x40012100
 800f50c:	40012200 	.word	0x40012200

0800f510 <HAL_ADC_ErrorCallback>:
 800f510:	b480      	push	{r7}
 800f512:	b083      	sub	sp, #12
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	bf00      	nop
 800f51a:	370c      	adds	r7, #12
 800f51c:	46bd      	mov	sp, r7
 800f51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f522:	4770      	bx	lr

0800f524 <HAL_ADC_ConfigChannel>:
 800f524:	b480      	push	{r7}
 800f526:	b085      	sub	sp, #20
 800f528:	af00      	add	r7, sp, #0
 800f52a:	6078      	str	r0, [r7, #4]
 800f52c:	6039      	str	r1, [r7, #0]
 800f52e:	2300      	movs	r3, #0
 800f530:	60bb      	str	r3, [r7, #8]
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d101      	bne.n	800f540 <HAL_ADC_ConfigChannel+0x1c>
 800f53c:	2302      	movs	r3, #2
 800f53e:	e105      	b.n	800f74c <HAL_ADC_ConfigChannel+0x228>
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	2201      	movs	r2, #1
 800f544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	2b09      	cmp	r3, #9
 800f54e:	d925      	bls.n	800f59c <HAL_ADC_ConfigChannel+0x78>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	68d9      	ldr	r1, [r3, #12]
 800f556:	683b      	ldr	r3, [r7, #0]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	461a      	mov	r2, r3
 800f55e:	4613      	mov	r3, r2
 800f560:	005b      	lsls	r3, r3, #1
 800f562:	4413      	add	r3, r2
 800f564:	3b1e      	subs	r3, #30
 800f566:	2207      	movs	r2, #7
 800f568:	fa02 f303 	lsl.w	r3, r2, r3
 800f56c:	43da      	mvns	r2, r3
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	400a      	ands	r2, r1
 800f574:	60da      	str	r2, [r3, #12]
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68d9      	ldr	r1, [r3, #12]
 800f57c:	683b      	ldr	r3, [r7, #0]
 800f57e:	689a      	ldr	r2, [r3, #8]
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	b29b      	uxth	r3, r3
 800f586:	4618      	mov	r0, r3
 800f588:	4603      	mov	r3, r0
 800f58a:	005b      	lsls	r3, r3, #1
 800f58c:	4403      	add	r3, r0
 800f58e:	3b1e      	subs	r3, #30
 800f590:	409a      	lsls	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	430a      	orrs	r2, r1
 800f598:	60da      	str	r2, [r3, #12]
 800f59a:	e022      	b.n	800f5e2 <HAL_ADC_ConfigChannel+0xbe>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	6919      	ldr	r1, [r3, #16]
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	461a      	mov	r2, r3
 800f5aa:	4613      	mov	r3, r2
 800f5ac:	005b      	lsls	r3, r3, #1
 800f5ae:	4413      	add	r3, r2
 800f5b0:	2207      	movs	r2, #7
 800f5b2:	fa02 f303 	lsl.w	r3, r2, r3
 800f5b6:	43da      	mvns	r2, r3
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	400a      	ands	r2, r1
 800f5be:	611a      	str	r2, [r3, #16]
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	6919      	ldr	r1, [r3, #16]
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	689a      	ldr	r2, [r3, #8]
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	005b      	lsls	r3, r3, #1
 800f5d6:	4403      	add	r3, r0
 800f5d8:	409a      	lsls	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	430a      	orrs	r2, r1
 800f5e0:	611a      	str	r2, [r3, #16]
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	685b      	ldr	r3, [r3, #4]
 800f5e6:	2b06      	cmp	r3, #6
 800f5e8:	d824      	bhi.n	800f634 <HAL_ADC_ConfigChannel+0x110>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	685a      	ldr	r2, [r3, #4]
 800f5f4:	4613      	mov	r3, r2
 800f5f6:	009b      	lsls	r3, r3, #2
 800f5f8:	4413      	add	r3, r2
 800f5fa:	3b05      	subs	r3, #5
 800f5fc:	221f      	movs	r2, #31
 800f5fe:	fa02 f303 	lsl.w	r3, r2, r3
 800f602:	43da      	mvns	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	400a      	ands	r2, r1
 800f60a:	635a      	str	r2, [r3, #52]	; 0x34
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	b29b      	uxth	r3, r3
 800f618:	4618      	mov	r0, r3
 800f61a:	683b      	ldr	r3, [r7, #0]
 800f61c:	685a      	ldr	r2, [r3, #4]
 800f61e:	4613      	mov	r3, r2
 800f620:	009b      	lsls	r3, r3, #2
 800f622:	4413      	add	r3, r2
 800f624:	3b05      	subs	r3, #5
 800f626:	fa00 f203 	lsl.w	r2, r0, r3
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	430a      	orrs	r2, r1
 800f630:	635a      	str	r2, [r3, #52]	; 0x34
 800f632:	e04c      	b.n	800f6ce <HAL_ADC_ConfigChannel+0x1aa>
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	2b0c      	cmp	r3, #12
 800f63a:	d824      	bhi.n	800f686 <HAL_ADC_ConfigChannel+0x162>
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	685a      	ldr	r2, [r3, #4]
 800f646:	4613      	mov	r3, r2
 800f648:	009b      	lsls	r3, r3, #2
 800f64a:	4413      	add	r3, r2
 800f64c:	3b23      	subs	r3, #35	; 0x23
 800f64e:	221f      	movs	r2, #31
 800f650:	fa02 f303 	lsl.w	r3, r2, r3
 800f654:	43da      	mvns	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	400a      	ands	r2, r1
 800f65c:	631a      	str	r2, [r3, #48]	; 0x30
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681b      	ldr	r3, [r3, #0]
 800f662:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f664:	683b      	ldr	r3, [r7, #0]
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	b29b      	uxth	r3, r3
 800f66a:	4618      	mov	r0, r3
 800f66c:	683b      	ldr	r3, [r7, #0]
 800f66e:	685a      	ldr	r2, [r3, #4]
 800f670:	4613      	mov	r3, r2
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	4413      	add	r3, r2
 800f676:	3b23      	subs	r3, #35	; 0x23
 800f678:	fa00 f203 	lsl.w	r2, r0, r3
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	430a      	orrs	r2, r1
 800f682:	631a      	str	r2, [r3, #48]	; 0x30
 800f684:	e023      	b.n	800f6ce <HAL_ADC_ConfigChannel+0x1aa>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	685a      	ldr	r2, [r3, #4]
 800f690:	4613      	mov	r3, r2
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	4413      	add	r3, r2
 800f696:	3b41      	subs	r3, #65	; 0x41
 800f698:	221f      	movs	r2, #31
 800f69a:	fa02 f303 	lsl.w	r3, r2, r3
 800f69e:	43da      	mvns	r2, r3
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	400a      	ands	r2, r1
 800f6a6:	62da      	str	r2, [r3, #44]	; 0x2c
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f6ae:	683b      	ldr	r3, [r7, #0]
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	685a      	ldr	r2, [r3, #4]
 800f6ba:	4613      	mov	r3, r2
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	4413      	add	r3, r2
 800f6c0:	3b41      	subs	r3, #65	; 0x41
 800f6c2:	fa00 f203 	lsl.w	r2, r0, r3
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	430a      	orrs	r2, r1
 800f6cc:	62da      	str	r2, [r3, #44]	; 0x2c
 800f6ce:	4b22      	ldr	r3, [pc, #136]	; (800f758 <HAL_ADC_ConfigChannel+0x234>)
 800f6d0:	60fb      	str	r3, [r7, #12]
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	4a21      	ldr	r2, [pc, #132]	; (800f75c <HAL_ADC_ConfigChannel+0x238>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d109      	bne.n	800f6f0 <HAL_ADC_ConfigChannel+0x1cc>
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	2b12      	cmp	r3, #18
 800f6e2:	d105      	bne.n	800f6f0 <HAL_ADC_ConfigChannel+0x1cc>
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	605a      	str	r2, [r3, #4]
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a19      	ldr	r2, [pc, #100]	; (800f75c <HAL_ADC_ConfigChannel+0x238>)
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d123      	bne.n	800f742 <HAL_ADC_ConfigChannel+0x21e>
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	2b10      	cmp	r3, #16
 800f700:	d003      	beq.n	800f70a <HAL_ADC_ConfigChannel+0x1e6>
 800f702:	683b      	ldr	r3, [r7, #0]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b11      	cmp	r3, #17
 800f708:	d11b      	bne.n	800f742 <HAL_ADC_ConfigChannel+0x21e>
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	685b      	ldr	r3, [r3, #4]
 800f70e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	605a      	str	r2, [r3, #4]
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	2b10      	cmp	r3, #16
 800f71c:	d111      	bne.n	800f742 <HAL_ADC_ConfigChannel+0x21e>
 800f71e:	4b10      	ldr	r3, [pc, #64]	; (800f760 <HAL_ADC_ConfigChannel+0x23c>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a10      	ldr	r2, [pc, #64]	; (800f764 <HAL_ADC_ConfigChannel+0x240>)
 800f724:	fba2 2303 	umull	r2, r3, r2, r3
 800f728:	0c9a      	lsrs	r2, r3, #18
 800f72a:	4613      	mov	r3, r2
 800f72c:	009b      	lsls	r3, r3, #2
 800f72e:	4413      	add	r3, r2
 800f730:	005b      	lsls	r3, r3, #1
 800f732:	60bb      	str	r3, [r7, #8]
 800f734:	e002      	b.n	800f73c <HAL_ADC_ConfigChannel+0x218>
 800f736:	68bb      	ldr	r3, [r7, #8]
 800f738:	3b01      	subs	r3, #1
 800f73a:	60bb      	str	r3, [r7, #8]
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d1f9      	bne.n	800f736 <HAL_ADC_ConfigChannel+0x212>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2200      	movs	r2, #0
 800f746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f74a:	2300      	movs	r3, #0
 800f74c:	4618      	mov	r0, r3
 800f74e:	3714      	adds	r7, #20
 800f750:	46bd      	mov	sp, r7
 800f752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f756:	4770      	bx	lr
 800f758:	40012300 	.word	0x40012300
 800f75c:	40012000 	.word	0x40012000
 800f760:	2000002c 	.word	0x2000002c
 800f764:	431bde83 	.word	0x431bde83

0800f768 <ADC_Init>:
 800f768:	b480      	push	{r7}
 800f76a:	b085      	sub	sp, #20
 800f76c:	af00      	add	r7, sp, #0
 800f76e:	6078      	str	r0, [r7, #4]
 800f770:	4b79      	ldr	r3, [pc, #484]	; (800f958 <ADC_Init+0x1f0>)
 800f772:	60fb      	str	r3, [r7, #12]
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	605a      	str	r2, [r3, #4]
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	685a      	ldr	r2, [r3, #4]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	431a      	orrs	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	605a      	str	r2, [r3, #4]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	685a      	ldr	r2, [r3, #4]
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f79c:	605a      	str	r2, [r3, #4]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	6859      	ldr	r1, [r3, #4]
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	691b      	ldr	r3, [r3, #16]
 800f7a8:	021a      	lsls	r2, r3, #8
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	430a      	orrs	r2, r1
 800f7b0:	605a      	str	r2, [r3, #4]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	685a      	ldr	r2, [r3, #4]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800f7c0:	605a      	str	r2, [r3, #4]
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	6859      	ldr	r1, [r3, #4]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	689a      	ldr	r2, [r3, #8]
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	430a      	orrs	r2, r1
 800f7d2:	605a      	str	r2, [r3, #4]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	689a      	ldr	r2, [r3, #8]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f7e2:	609a      	str	r2, [r3, #8]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	6899      	ldr	r1, [r3, #8]
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	68da      	ldr	r2, [r3, #12]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	430a      	orrs	r2, r1
 800f7f4:	609a      	str	r2, [r3, #8]
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7fa:	4a58      	ldr	r2, [pc, #352]	; (800f95c <ADC_Init+0x1f4>)
 800f7fc:	4293      	cmp	r3, r2
 800f7fe:	d022      	beq.n	800f846 <ADC_Init+0xde>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	689a      	ldr	r2, [r3, #8]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f80e:	609a      	str	r2, [r3, #8]
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	6899      	ldr	r1, [r3, #8]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	430a      	orrs	r2, r1
 800f820:	609a      	str	r2, [r3, #8]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	689a      	ldr	r2, [r3, #8]
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f830:	609a      	str	r2, [r3, #8]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	6899      	ldr	r1, [r3, #8]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	430a      	orrs	r2, r1
 800f842:	609a      	str	r2, [r3, #8]
 800f844:	e00f      	b.n	800f866 <ADC_Init+0xfe>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	689a      	ldr	r2, [r3, #8]
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800f854:	609a      	str	r2, [r3, #8]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	689a      	ldr	r2, [r3, #8]
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800f864:	609a      	str	r2, [r3, #8]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	689a      	ldr	r2, [r3, #8]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f022 0202 	bic.w	r2, r2, #2
 800f874:	609a      	str	r2, [r3, #8]
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	6899      	ldr	r1, [r3, #8]
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	7e1b      	ldrb	r3, [r3, #24]
 800f880:	005a      	lsls	r2, r3, #1
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	430a      	orrs	r2, r1
 800f888:	609a      	str	r2, [r3, #8]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d01b      	beq.n	800f8cc <ADC_Init+0x164>
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	685a      	ldr	r2, [r3, #4]
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f8a2:	605a      	str	r2, [r3, #4]
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	685a      	ldr	r2, [r3, #4]
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800f8b2:	605a      	str	r2, [r3, #4]
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	6859      	ldr	r1, [r3, #4]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8be:	3b01      	subs	r3, #1
 800f8c0:	035a      	lsls	r2, r3, #13
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	430a      	orrs	r2, r1
 800f8c8:	605a      	str	r2, [r3, #4]
 800f8ca:	e007      	b.n	800f8dc <ADC_Init+0x174>
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	685a      	ldr	r2, [r3, #4]
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f8da:	605a      	str	r2, [r3, #4]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800f8ea:	62da      	str	r2, [r3, #44]	; 0x2c
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	69db      	ldr	r3, [r3, #28]
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	051a      	lsls	r2, r3, #20
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	430a      	orrs	r2, r1
 800f900:	62da      	str	r2, [r3, #44]	; 0x2c
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	689a      	ldr	r2, [r3, #8]
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800f910:	609a      	str	r2, [r3, #8]
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	6899      	ldr	r1, [r3, #8]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f91e:	025a      	lsls	r2, r3, #9
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	430a      	orrs	r2, r1
 800f926:	609a      	str	r2, [r3, #8]
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	689a      	ldr	r2, [r3, #8]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f936:	609a      	str	r2, [r3, #8]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	6899      	ldr	r1, [r3, #8]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	695b      	ldr	r3, [r3, #20]
 800f942:	029a      	lsls	r2, r3, #10
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	681b      	ldr	r3, [r3, #0]
 800f948:	430a      	orrs	r2, r1
 800f94a:	609a      	str	r2, [r3, #8]
 800f94c:	bf00      	nop
 800f94e:	3714      	adds	r7, #20
 800f950:	46bd      	mov	sp, r7
 800f952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f956:	4770      	bx	lr
 800f958:	40012300 	.word	0x40012300
 800f95c:	0f000001 	.word	0x0f000001

0800f960 <ADC_DMAConvCplt>:
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f96c:	60fb      	str	r3, [r7, #12]
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f972:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f976:	2b00      	cmp	r3, #0
 800f978:	d13c      	bne.n	800f9f4 <ADC_DMAConvCplt+0x94>
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f97e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	641a      	str	r2, [r3, #64]	; 0x40
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800f990:	2b00      	cmp	r3, #0
 800f992:	d12b      	bne.n	800f9ec <ADC_DMAConvCplt+0x8c>
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	7e1b      	ldrb	r3, [r3, #24]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d127      	bne.n	800f9ec <ADC_DMAConvCplt+0x8c>
 800f99c:	68fb      	ldr	r3, [r7, #12]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d006      	beq.n	800f9b8 <ADC_DMAConvCplt+0x58>
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	689b      	ldr	r3, [r3, #8]
 800f9b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d119      	bne.n	800f9ec <ADC_DMAConvCplt+0x8c>
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	685a      	ldr	r2, [r3, #4]
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	f022 0220 	bic.w	r2, r2, #32
 800f9c6:	605a      	str	r2, [r3, #4]
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	641a      	str	r2, [r3, #64]	; 0x40
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d105      	bne.n	800f9ec <ADC_DMAConvCplt+0x8c>
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9e4:	f043 0201 	orr.w	r2, r3, #1
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	641a      	str	r2, [r3, #64]	; 0x40
 800f9ec:	68f8      	ldr	r0, [r7, #12]
 800f9ee:	f004 fc30 	bl	8014252 <HAL_ADC_ConvCpltCallback>
 800f9f2:	e00e      	b.n	800fa12 <ADC_DMAConvCplt+0xb2>
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9f8:	f003 0310 	and.w	r3, r3, #16
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d003      	beq.n	800fa08 <ADC_DMAConvCplt+0xa8>
 800fa00:	68f8      	ldr	r0, [r7, #12]
 800fa02:	f7ff fd85 	bl	800f510 <HAL_ADC_ErrorCallback>
 800fa06:	e004      	b.n	800fa12 <ADC_DMAConvCplt+0xb2>
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	4798      	blx	r3
 800fa12:	bf00      	nop
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}

0800fa1a <ADC_DMAHalfConvCplt>:
 800fa1a:	b580      	push	{r7, lr}
 800fa1c:	b084      	sub	sp, #16
 800fa1e:	af00      	add	r7, sp, #0
 800fa20:	6078      	str	r0, [r7, #4]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa26:	60fb      	str	r3, [r7, #12]
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f004 fcc0 	bl	80143ae <HAL_ADC_ConvHalfCpltCallback>
 800fa2e:	bf00      	nop
 800fa30:	3710      	adds	r7, #16
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <ADC_DMAError>:
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b084      	sub	sp, #16
 800fa3a:	af00      	add	r7, sp, #0
 800fa3c:	6078      	str	r0, [r7, #4]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa42:	60fb      	str	r3, [r7, #12]
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2240      	movs	r2, #64	; 0x40
 800fa48:	641a      	str	r2, [r3, #64]	; 0x40
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fa4e:	f043 0204 	orr.w	r2, r3, #4
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	645a      	str	r2, [r3, #68]	; 0x44
 800fa56:	68f8      	ldr	r0, [r7, #12]
 800fa58:	f7ff fd5a 	bl	800f510 <HAL_ADC_ErrorCallback>
 800fa5c:	bf00      	nop
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <HAL_CAN_Init>:
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d101      	bne.n	800fa76 <HAL_CAN_Init+0x12>
 800fa72:	2301      	movs	r3, #1
 800fa74:	e0ed      	b.n	800fc52 <HAL_CAN_Init+0x1ee>
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fa7c:	b2db      	uxtb	r3, r3
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d102      	bne.n	800fa88 <HAL_CAN_Init+0x24>
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f7fe f8e8 	bl	800dc58 <HAL_CAN_MspInit>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	681a      	ldr	r2, [r3, #0]
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	f042 0201 	orr.w	r2, r2, #1
 800fa96:	601a      	str	r2, [r3, #0]
 800fa98:	f7ff fbda 	bl	800f250 <HAL_GetTick>
 800fa9c:	60f8      	str	r0, [r7, #12]
 800fa9e:	e012      	b.n	800fac6 <HAL_CAN_Init+0x62>
 800faa0:	f7ff fbd6 	bl	800f250 <HAL_GetTick>
 800faa4:	4602      	mov	r2, r0
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	1ad3      	subs	r3, r2, r3
 800faaa:	2b0a      	cmp	r3, #10
 800faac:	d90b      	bls.n	800fac6 <HAL_CAN_Init+0x62>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	625a      	str	r2, [r3, #36]	; 0x24
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2205      	movs	r2, #5
 800fabe:	f883 2020 	strb.w	r2, [r3, #32]
 800fac2:	2301      	movs	r3, #1
 800fac4:	e0c5      	b.n	800fc52 <HAL_CAN_Init+0x1ee>
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	685b      	ldr	r3, [r3, #4]
 800facc:	f003 0301 	and.w	r3, r3, #1
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d0e5      	beq.n	800faa0 <HAL_CAN_Init+0x3c>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	f022 0202 	bic.w	r2, r2, #2
 800fae2:	601a      	str	r2, [r3, #0]
 800fae4:	f7ff fbb4 	bl	800f250 <HAL_GetTick>
 800fae8:	60f8      	str	r0, [r7, #12]
 800faea:	e012      	b.n	800fb12 <HAL_CAN_Init+0xae>
 800faec:	f7ff fbb0 	bl	800f250 <HAL_GetTick>
 800faf0:	4602      	mov	r2, r0
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	1ad3      	subs	r3, r2, r3
 800faf6:	2b0a      	cmp	r3, #10
 800faf8:	d90b      	bls.n	800fb12 <HAL_CAN_Init+0xae>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fafe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	625a      	str	r2, [r3, #36]	; 0x24
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2205      	movs	r2, #5
 800fb0a:	f883 2020 	strb.w	r2, [r3, #32]
 800fb0e:	2301      	movs	r3, #1
 800fb10:	e09f      	b.n	800fc52 <HAL_CAN_Init+0x1ee>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	f003 0302 	and.w	r3, r3, #2
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d1e5      	bne.n	800faec <HAL_CAN_Init+0x88>
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	7e1b      	ldrb	r3, [r3, #24]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d108      	bne.n	800fb3a <HAL_CAN_Init+0xd6>
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fb36:	601a      	str	r2, [r3, #0]
 800fb38:	e007      	b.n	800fb4a <HAL_CAN_Init+0xe6>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fb48:	601a      	str	r2, [r3, #0]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	7e5b      	ldrb	r3, [r3, #25]
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d108      	bne.n	800fb64 <HAL_CAN_Init+0x100>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fb60:	601a      	str	r2, [r3, #0]
 800fb62:	e007      	b.n	800fb74 <HAL_CAN_Init+0x110>
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	681a      	ldr	r2, [r3, #0]
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fb72:	601a      	str	r2, [r3, #0]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	7e9b      	ldrb	r3, [r3, #26]
 800fb78:	2b01      	cmp	r3, #1
 800fb7a:	d108      	bne.n	800fb8e <HAL_CAN_Init+0x12a>
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f042 0220 	orr.w	r2, r2, #32
 800fb8a:	601a      	str	r2, [r3, #0]
 800fb8c:	e007      	b.n	800fb9e <HAL_CAN_Init+0x13a>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	681a      	ldr	r2, [r3, #0]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f022 0220 	bic.w	r2, r2, #32
 800fb9c:	601a      	str	r2, [r3, #0]
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	7edb      	ldrb	r3, [r3, #27]
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d108      	bne.n	800fbb8 <HAL_CAN_Init+0x154>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	f022 0210 	bic.w	r2, r2, #16
 800fbb4:	601a      	str	r2, [r3, #0]
 800fbb6:	e007      	b.n	800fbc8 <HAL_CAN_Init+0x164>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f042 0210 	orr.w	r2, r2, #16
 800fbc6:	601a      	str	r2, [r3, #0]
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	7f1b      	ldrb	r3, [r3, #28]
 800fbcc:	2b01      	cmp	r3, #1
 800fbce:	d108      	bne.n	800fbe2 <HAL_CAN_Init+0x17e>
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f042 0208 	orr.w	r2, r2, #8
 800fbde:	601a      	str	r2, [r3, #0]
 800fbe0:	e007      	b.n	800fbf2 <HAL_CAN_Init+0x18e>
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	f022 0208 	bic.w	r2, r2, #8
 800fbf0:	601a      	str	r2, [r3, #0]
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	7f5b      	ldrb	r3, [r3, #29]
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d108      	bne.n	800fc0c <HAL_CAN_Init+0x1a8>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	681a      	ldr	r2, [r3, #0]
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	f042 0204 	orr.w	r2, r2, #4
 800fc08:	601a      	str	r2, [r3, #0]
 800fc0a:	e007      	b.n	800fc1c <HAL_CAN_Init+0x1b8>
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	f022 0204 	bic.w	r2, r2, #4
 800fc1a:	601a      	str	r2, [r3, #0]
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	689a      	ldr	r2, [r3, #8]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	431a      	orrs	r2, r3
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	691b      	ldr	r3, [r3, #16]
 800fc2a:	431a      	orrs	r2, r3
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	695b      	ldr	r3, [r3, #20]
 800fc30:	ea42 0103 	orr.w	r1, r2, r3
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	685b      	ldr	r3, [r3, #4]
 800fc38:	1e5a      	subs	r2, r3, #1
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	430a      	orrs	r2, r1
 800fc40:	61da      	str	r2, [r3, #28]
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	2200      	movs	r2, #0
 800fc46:	625a      	str	r2, [r3, #36]	; 0x24
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2201      	movs	r2, #1
 800fc4c:	f883 2020 	strb.w	r2, [r3, #32]
 800fc50:	2300      	movs	r3, #0
 800fc52:	4618      	mov	r0, r3
 800fc54:	3710      	adds	r7, #16
 800fc56:	46bd      	mov	sp, r7
 800fc58:	bd80      	pop	{r7, pc}
	...

0800fc5c <HAL_CAN_ConfigFilter>:
 800fc5c:	b480      	push	{r7}
 800fc5e:	b087      	sub	sp, #28
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	6039      	str	r1, [r7, #0]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	617b      	str	r3, [r7, #20]
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fc72:	74fb      	strb	r3, [r7, #19]
 800fc74:	7cfb      	ldrb	r3, [r7, #19]
 800fc76:	2b01      	cmp	r3, #1
 800fc78:	d003      	beq.n	800fc82 <HAL_CAN_ConfigFilter+0x26>
 800fc7a:	7cfb      	ldrb	r3, [r7, #19]
 800fc7c:	2b02      	cmp	r3, #2
 800fc7e:	f040 80be 	bne.w	800fdfe <HAL_CAN_ConfigFilter+0x1a2>
 800fc82:	4b65      	ldr	r3, [pc, #404]	; (800fe18 <HAL_CAN_ConfigFilter+0x1bc>)
 800fc84:	617b      	str	r3, [r7, #20]
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fc8c:	f043 0201 	orr.w	r2, r3, #1
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800fc96:	697b      	ldr	r3, [r7, #20]
 800fc98:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fc9c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcb0:	021b      	lsls	r3, r3, #8
 800fcb2:	431a      	orrs	r2, r3
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	695b      	ldr	r3, [r3, #20]
 800fcbe:	f003 031f 	and.w	r3, r3, #31
 800fcc2:	2201      	movs	r2, #1
 800fcc4:	fa02 f303 	lsl.w	r3, r2, r3
 800fcc8:	60fb      	str	r3, [r7, #12]
 800fcca:	697b      	ldr	r3, [r7, #20]
 800fccc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	43db      	mvns	r3, r3
 800fcd4:	401a      	ands	r2, r3
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	69db      	ldr	r3, [r3, #28]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d123      	bne.n	800fd2c <HAL_CAN_ConfigFilter+0xd0>
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	43db      	mvns	r3, r3
 800fcee:	401a      	ands	r2, r3
 800fcf0:	697b      	ldr	r3, [r7, #20]
 800fcf2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	68db      	ldr	r3, [r3, #12]
 800fcfa:	0419      	lsls	r1, r3, #16
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	685b      	ldr	r3, [r3, #4]
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	683a      	ldr	r2, [r7, #0]
 800fd04:	6952      	ldr	r2, [r2, #20]
 800fd06:	4319      	orrs	r1, r3
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	3248      	adds	r2, #72	; 0x48
 800fd0c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	689b      	ldr	r3, [r3, #8]
 800fd14:	0419      	lsls	r1, r3, #16
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	b29a      	uxth	r2, r3
 800fd1c:	683b      	ldr	r3, [r7, #0]
 800fd1e:	695b      	ldr	r3, [r3, #20]
 800fd20:	430a      	orrs	r2, r1
 800fd22:	6979      	ldr	r1, [r7, #20]
 800fd24:	3348      	adds	r3, #72	; 0x48
 800fd26:	00db      	lsls	r3, r3, #3
 800fd28:	440b      	add	r3, r1
 800fd2a:	605a      	str	r2, [r3, #4]
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	69db      	ldr	r3, [r3, #28]
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d122      	bne.n	800fd7a <HAL_CAN_ConfigFilter+0x11e>
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	431a      	orrs	r2, r3
 800fd3e:	697b      	ldr	r3, [r7, #20]
 800fd40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	0419      	lsls	r1, r3, #16
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	685b      	ldr	r3, [r3, #4]
 800fd4e:	b29b      	uxth	r3, r3
 800fd50:	683a      	ldr	r2, [r7, #0]
 800fd52:	6952      	ldr	r2, [r2, #20]
 800fd54:	4319      	orrs	r1, r3
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	3248      	adds	r2, #72	; 0x48
 800fd5a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	689b      	ldr	r3, [r3, #8]
 800fd62:	0419      	lsls	r1, r3, #16
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	68db      	ldr	r3, [r3, #12]
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	695b      	ldr	r3, [r3, #20]
 800fd6e:	430a      	orrs	r2, r1
 800fd70:	6979      	ldr	r1, [r7, #20]
 800fd72:	3348      	adds	r3, #72	; 0x48
 800fd74:	00db      	lsls	r3, r3, #3
 800fd76:	440b      	add	r3, r1
 800fd78:	605a      	str	r2, [r3, #4]
 800fd7a:	683b      	ldr	r3, [r7, #0]
 800fd7c:	699b      	ldr	r3, [r3, #24]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d109      	bne.n	800fd96 <HAL_CAN_ConfigFilter+0x13a>
 800fd82:	697b      	ldr	r3, [r7, #20]
 800fd84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	43db      	mvns	r3, r3
 800fd8c:	401a      	ands	r2, r3
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800fd94:	e007      	b.n	800fda6 <HAL_CAN_ConfigFilter+0x14a>
 800fd96:	697b      	ldr	r3, [r7, #20]
 800fd98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	431a      	orrs	r2, r3
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	691b      	ldr	r3, [r3, #16]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d109      	bne.n	800fdc2 <HAL_CAN_ConfigFilter+0x166>
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	43db      	mvns	r3, r3
 800fdb8:	401a      	ands	r2, r3
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800fdc0:	e007      	b.n	800fdd2 <HAL_CAN_ConfigFilter+0x176>
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	431a      	orrs	r2, r3
 800fdcc:	697b      	ldr	r3, [r7, #20]
 800fdce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	6a1b      	ldr	r3, [r3, #32]
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	d107      	bne.n	800fdea <HAL_CAN_ConfigFilter+0x18e>
 800fdda:	697b      	ldr	r3, [r7, #20]
 800fddc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	431a      	orrs	r2, r3
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800fdf0:	f023 0201 	bic.w	r2, r3, #1
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	e006      	b.n	800fe0c <HAL_CAN_ConfigFilter+0x1b0>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	625a      	str	r2, [r3, #36]	; 0x24
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	371c      	adds	r7, #28
 800fe10:	46bd      	mov	sp, r7
 800fe12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe16:	4770      	bx	lr
 800fe18:	40006400 	.word	0x40006400

0800fe1c <HAL_CAN_Start>:
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b084      	sub	sp, #16
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	f893 3020 	ldrb.w	r3, [r3, #32]
 800fe2a:	b2db      	uxtb	r3, r3
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d12e      	bne.n	800fe8e <HAL_CAN_Start+0x72>
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2202      	movs	r2, #2
 800fe34:	f883 2020 	strb.w	r2, [r3, #32]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	681a      	ldr	r2, [r3, #0]
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	f022 0201 	bic.w	r2, r2, #1
 800fe46:	601a      	str	r2, [r3, #0]
 800fe48:	f7ff fa02 	bl	800f250 <HAL_GetTick>
 800fe4c:	60f8      	str	r0, [r7, #12]
 800fe4e:	e012      	b.n	800fe76 <HAL_CAN_Start+0x5a>
 800fe50:	f7ff f9fe 	bl	800f250 <HAL_GetTick>
 800fe54:	4602      	mov	r2, r0
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	1ad3      	subs	r3, r2, r3
 800fe5a:	2b0a      	cmp	r3, #10
 800fe5c:	d90b      	bls.n	800fe76 <HAL_CAN_Start+0x5a>
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	625a      	str	r2, [r3, #36]	; 0x24
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2205      	movs	r2, #5
 800fe6e:	f883 2020 	strb.w	r2, [r3, #32]
 800fe72:	2301      	movs	r3, #1
 800fe74:	e012      	b.n	800fe9c <HAL_CAN_Start+0x80>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	f003 0301 	and.w	r3, r3, #1
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d1e5      	bne.n	800fe50 <HAL_CAN_Start+0x34>
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	2200      	movs	r2, #0
 800fe88:	625a      	str	r2, [r3, #36]	; 0x24
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	e006      	b.n	800fe9c <HAL_CAN_Start+0x80>
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	625a      	str	r2, [r3, #36]	; 0x24
 800fe9a:	2301      	movs	r3, #1
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <HAL_CAN_AddTxMessage>:
 800fea4:	b480      	push	{r7}
 800fea6:	b089      	sub	sp, #36	; 0x24
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	60f8      	str	r0, [r7, #12]
 800feac:	60b9      	str	r1, [r7, #8]
 800feae:	607a      	str	r2, [r7, #4]
 800feb0:	603b      	str	r3, [r7, #0]
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800feb8:	77fb      	strb	r3, [r7, #31]
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	689b      	ldr	r3, [r3, #8]
 800fec0:	61bb      	str	r3, [r7, #24]
 800fec2:	7ffb      	ldrb	r3, [r7, #31]
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d003      	beq.n	800fed0 <HAL_CAN_AddTxMessage+0x2c>
 800fec8:	7ffb      	ldrb	r3, [r7, #31]
 800feca:	2b02      	cmp	r3, #2
 800fecc:	f040 80b8 	bne.w	8010040 <HAL_CAN_AddTxMessage+0x19c>
 800fed0:	69bb      	ldr	r3, [r7, #24]
 800fed2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d10a      	bne.n	800fef0 <HAL_CAN_AddTxMessage+0x4c>
 800feda:	69bb      	ldr	r3, [r7, #24]
 800fedc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d105      	bne.n	800fef0 <HAL_CAN_AddTxMessage+0x4c>
 800fee4:	69bb      	ldr	r3, [r7, #24]
 800fee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800feea:	2b00      	cmp	r3, #0
 800feec:	f000 80a0 	beq.w	8010030 <HAL_CAN_AddTxMessage+0x18c>
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	0e1b      	lsrs	r3, r3, #24
 800fef4:	f003 0303 	and.w	r3, r3, #3
 800fef8:	617b      	str	r3, [r7, #20]
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d907      	bls.n	800ff10 <HAL_CAN_AddTxMessage+0x6c>
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	625a      	str	r2, [r3, #36]	; 0x24
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	e09e      	b.n	801004e <HAL_CAN_AddTxMessage+0x1aa>
 800ff10:	2201      	movs	r2, #1
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	409a      	lsls	r2, r3
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	601a      	str	r2, [r3, #0]
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d10d      	bne.n	800ff3e <HAL_CAN_AddTxMessage+0x9a>
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	055a      	lsls	r2, r3, #21
 800ff28:	68bb      	ldr	r3, [r7, #8]
 800ff2a:	68db      	ldr	r3, [r3, #12]
 800ff2c:	68f9      	ldr	r1, [r7, #12]
 800ff2e:	6809      	ldr	r1, [r1, #0]
 800ff30:	431a      	orrs	r2, r3
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	3318      	adds	r3, #24
 800ff36:	011b      	lsls	r3, r3, #4
 800ff38:	440b      	add	r3, r1
 800ff3a:	601a      	str	r2, [r3, #0]
 800ff3c:	e00f      	b.n	800ff5e <HAL_CAN_AddTxMessage+0xba>
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	685b      	ldr	r3, [r3, #4]
 800ff42:	00da      	lsls	r2, r3, #3
 800ff44:	68bb      	ldr	r3, [r7, #8]
 800ff46:	689b      	ldr	r3, [r3, #8]
 800ff48:	431a      	orrs	r2, r3
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	68f9      	ldr	r1, [r7, #12]
 800ff50:	6809      	ldr	r1, [r1, #0]
 800ff52:	431a      	orrs	r2, r3
 800ff54:	697b      	ldr	r3, [r7, #20]
 800ff56:	3318      	adds	r3, #24
 800ff58:	011b      	lsls	r3, r3, #4
 800ff5a:	440b      	add	r3, r1
 800ff5c:	601a      	str	r2, [r3, #0]
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	6819      	ldr	r1, [r3, #0]
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	691a      	ldr	r2, [r3, #16]
 800ff66:	697b      	ldr	r3, [r7, #20]
 800ff68:	3318      	adds	r3, #24
 800ff6a:	011b      	lsls	r3, r3, #4
 800ff6c:	440b      	add	r3, r1
 800ff6e:	3304      	adds	r3, #4
 800ff70:	601a      	str	r2, [r3, #0]
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	7d1b      	ldrb	r3, [r3, #20]
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d111      	bne.n	800ff9e <HAL_CAN_AddTxMessage+0xfa>
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	681a      	ldr	r2, [r3, #0]
 800ff7e:	697b      	ldr	r3, [r7, #20]
 800ff80:	3318      	adds	r3, #24
 800ff82:	011b      	lsls	r3, r3, #4
 800ff84:	4413      	add	r3, r2
 800ff86:	3304      	adds	r3, #4
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	68fa      	ldr	r2, [r7, #12]
 800ff8c:	6811      	ldr	r1, [r2, #0]
 800ff8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	3318      	adds	r3, #24
 800ff96:	011b      	lsls	r3, r3, #4
 800ff98:	440b      	add	r3, r1
 800ff9a:	3304      	adds	r3, #4
 800ff9c:	601a      	str	r2, [r3, #0]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	3307      	adds	r3, #7
 800ffa2:	781b      	ldrb	r3, [r3, #0]
 800ffa4:	061a      	lsls	r2, r3, #24
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	3306      	adds	r3, #6
 800ffaa:	781b      	ldrb	r3, [r3, #0]
 800ffac:	041b      	lsls	r3, r3, #16
 800ffae:	431a      	orrs	r2, r3
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	3305      	adds	r3, #5
 800ffb4:	781b      	ldrb	r3, [r3, #0]
 800ffb6:	021b      	lsls	r3, r3, #8
 800ffb8:	4313      	orrs	r3, r2
 800ffba:	687a      	ldr	r2, [r7, #4]
 800ffbc:	3204      	adds	r2, #4
 800ffbe:	7812      	ldrb	r2, [r2, #0]
 800ffc0:	4610      	mov	r0, r2
 800ffc2:	68fa      	ldr	r2, [r7, #12]
 800ffc4:	6811      	ldr	r1, [r2, #0]
 800ffc6:	ea43 0200 	orr.w	r2, r3, r0
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	011b      	lsls	r3, r3, #4
 800ffce:	440b      	add	r3, r1
 800ffd0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800ffd4:	601a      	str	r2, [r3, #0]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	3303      	adds	r3, #3
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	061a      	lsls	r2, r3, #24
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	3302      	adds	r3, #2
 800ffe2:	781b      	ldrb	r3, [r3, #0]
 800ffe4:	041b      	lsls	r3, r3, #16
 800ffe6:	431a      	orrs	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	3301      	adds	r3, #1
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	021b      	lsls	r3, r3, #8
 800fff0:	4313      	orrs	r3, r2
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	7812      	ldrb	r2, [r2, #0]
 800fff6:	4610      	mov	r0, r2
 800fff8:	68fa      	ldr	r2, [r7, #12]
 800fffa:	6811      	ldr	r1, [r2, #0]
 800fffc:	ea43 0200 	orr.w	r2, r3, r0
 8010000:	697b      	ldr	r3, [r7, #20]
 8010002:	011b      	lsls	r3, r3, #4
 8010004:	440b      	add	r3, r1
 8010006:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 801000a:	601a      	str	r2, [r3, #0]
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	697b      	ldr	r3, [r7, #20]
 8010012:	3318      	adds	r3, #24
 8010014:	011b      	lsls	r3, r3, #4
 8010016:	4413      	add	r3, r2
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	6811      	ldr	r1, [r2, #0]
 801001e:	f043 0201 	orr.w	r2, r3, #1
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	3318      	adds	r3, #24
 8010026:	011b      	lsls	r3, r3, #4
 8010028:	440b      	add	r3, r1
 801002a:	601a      	str	r2, [r3, #0]
 801002c:	2300      	movs	r3, #0
 801002e:	e00e      	b.n	801004e <HAL_CAN_AddTxMessage+0x1aa>
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010034:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	625a      	str	r2, [r3, #36]	; 0x24
 801003c:	2301      	movs	r3, #1
 801003e:	e006      	b.n	801004e <HAL_CAN_AddTxMessage+0x1aa>
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010044:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	625a      	str	r2, [r3, #36]	; 0x24
 801004c:	2301      	movs	r3, #1
 801004e:	4618      	mov	r0, r3
 8010050:	3724      	adds	r7, #36	; 0x24
 8010052:	46bd      	mov	sp, r7
 8010054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010058:	4770      	bx	lr

0801005a <HAL_CAN_GetTxMailboxesFreeLevel>:
 801005a:	b480      	push	{r7}
 801005c:	b085      	sub	sp, #20
 801005e:	af00      	add	r7, sp, #0
 8010060:	6078      	str	r0, [r7, #4]
 8010062:	2300      	movs	r3, #0
 8010064:	60fb      	str	r3, [r7, #12]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f893 3020 	ldrb.w	r3, [r3, #32]
 801006c:	72fb      	strb	r3, [r7, #11]
 801006e:	7afb      	ldrb	r3, [r7, #11]
 8010070:	2b01      	cmp	r3, #1
 8010072:	d002      	beq.n	801007a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8010074:	7afb      	ldrb	r3, [r7, #11]
 8010076:	2b02      	cmp	r3, #2
 8010078:	d11d      	bne.n	80100b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010084:	2b00      	cmp	r3, #0
 8010086:	d002      	beq.n	801008e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	3301      	adds	r3, #1
 801008c:	60fb      	str	r3, [r7, #12]
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	689b      	ldr	r3, [r3, #8]
 8010094:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010098:	2b00      	cmp	r3, #0
 801009a:	d002      	beq.n	80100a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	3301      	adds	r3, #1
 80100a0:	60fb      	str	r3, [r7, #12]
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	689b      	ldr	r3, [r3, #8]
 80100a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d002      	beq.n	80100b6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	3301      	adds	r3, #1
 80100b4:	60fb      	str	r3, [r7, #12]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	4618      	mov	r0, r3
 80100ba:	3714      	adds	r7, #20
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr

080100c4 <HAL_CAN_GetRxMessage>:
 80100c4:	b480      	push	{r7}
 80100c6:	b087      	sub	sp, #28
 80100c8:	af00      	add	r7, sp, #0
 80100ca:	60f8      	str	r0, [r7, #12]
 80100cc:	60b9      	str	r1, [r7, #8]
 80100ce:	607a      	str	r2, [r7, #4]
 80100d0:	603b      	str	r3, [r7, #0]
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80100d8:	75fb      	strb	r3, [r7, #23]
 80100da:	7dfb      	ldrb	r3, [r7, #23]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d003      	beq.n	80100e8 <HAL_CAN_GetRxMessage+0x24>
 80100e0:	7dfb      	ldrb	r3, [r7, #23]
 80100e2:	2b02      	cmp	r3, #2
 80100e4:	f040 80f3 	bne.w	80102ce <HAL_CAN_GetRxMessage+0x20a>
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d10e      	bne.n	801010c <HAL_CAN_GetRxMessage+0x48>
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	68db      	ldr	r3, [r3, #12]
 80100f4:	f003 0303 	and.w	r3, r3, #3
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d116      	bne.n	801012a <HAL_CAN_GetRxMessage+0x66>
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010100:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	625a      	str	r2, [r3, #36]	; 0x24
 8010108:	2301      	movs	r3, #1
 801010a:	e0e7      	b.n	80102dc <HAL_CAN_GetRxMessage+0x218>
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	691b      	ldr	r3, [r3, #16]
 8010112:	f003 0303 	and.w	r3, r3, #3
 8010116:	2b00      	cmp	r3, #0
 8010118:	d107      	bne.n	801012a <HAL_CAN_GetRxMessage+0x66>
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801011e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	625a      	str	r2, [r3, #36]	; 0x24
 8010126:	2301      	movs	r3, #1
 8010128:	e0d8      	b.n	80102dc <HAL_CAN_GetRxMessage+0x218>
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	331b      	adds	r3, #27
 8010132:	011b      	lsls	r3, r3, #4
 8010134:	4413      	add	r3, r2
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f003 0204 	and.w	r2, r3, #4
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	609a      	str	r2, [r3, #8]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	689b      	ldr	r3, [r3, #8]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d10c      	bne.n	8010162 <HAL_CAN_GetRxMessage+0x9e>
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	331b      	adds	r3, #27
 8010150:	011b      	lsls	r3, r3, #4
 8010152:	4413      	add	r3, r2
 8010154:	681b      	ldr	r3, [r3, #0]
 8010156:	0d5b      	lsrs	r3, r3, #21
 8010158:	f3c3 020a 	ubfx	r2, r3, #0, #11
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	601a      	str	r2, [r3, #0]
 8010160:	e00b      	b.n	801017a <HAL_CAN_GetRxMessage+0xb6>
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	681a      	ldr	r2, [r3, #0]
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	331b      	adds	r3, #27
 801016a:	011b      	lsls	r3, r3, #4
 801016c:	4413      	add	r3, r2
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	08db      	lsrs	r3, r3, #3
 8010172:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	605a      	str	r2, [r3, #4]
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681a      	ldr	r2, [r3, #0]
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	331b      	adds	r3, #27
 8010182:	011b      	lsls	r3, r3, #4
 8010184:	4413      	add	r3, r2
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f003 0202 	and.w	r2, r3, #2
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	60da      	str	r2, [r3, #12]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	681a      	ldr	r2, [r3, #0]
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	331b      	adds	r3, #27
 8010198:	011b      	lsls	r3, r3, #4
 801019a:	4413      	add	r3, r2
 801019c:	3304      	adds	r3, #4
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f003 020f 	and.w	r2, r3, #15
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	611a      	str	r2, [r3, #16]
 80101a8:	68fb      	ldr	r3, [r7, #12]
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	331b      	adds	r3, #27
 80101b0:	011b      	lsls	r3, r3, #4
 80101b2:	4413      	add	r3, r2
 80101b4:	3304      	adds	r3, #4
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	0a1b      	lsrs	r3, r3, #8
 80101ba:	b2da      	uxtb	r2, r3
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	619a      	str	r2, [r3, #24]
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	331b      	adds	r3, #27
 80101c8:	011b      	lsls	r3, r3, #4
 80101ca:	4413      	add	r3, r2
 80101cc:	3304      	adds	r3, #4
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	0c1b      	lsrs	r3, r3, #16
 80101d2:	b29a      	uxth	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	615a      	str	r2, [r3, #20]
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	681a      	ldr	r2, [r3, #0]
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	011b      	lsls	r3, r3, #4
 80101e0:	4413      	add	r3, r2
 80101e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	b2da      	uxtb	r2, r3
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	701a      	strb	r2, [r3, #0]
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	011b      	lsls	r3, r3, #4
 80101f6:	4413      	add	r3, r2
 80101f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	0a1a      	lsrs	r2, r3, #8
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	3301      	adds	r3, #1
 8010204:	b2d2      	uxtb	r2, r2
 8010206:	701a      	strb	r2, [r3, #0]
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681a      	ldr	r2, [r3, #0]
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	011b      	lsls	r3, r3, #4
 8010210:	4413      	add	r3, r2
 8010212:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	0c1a      	lsrs	r2, r3, #16
 801021a:	683b      	ldr	r3, [r7, #0]
 801021c:	3302      	adds	r3, #2
 801021e:	b2d2      	uxtb	r2, r2
 8010220:	701a      	strb	r2, [r3, #0]
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	011b      	lsls	r3, r3, #4
 801022a:	4413      	add	r3, r2
 801022c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	0e1a      	lsrs	r2, r3, #24
 8010234:	683b      	ldr	r3, [r7, #0]
 8010236:	3303      	adds	r3, #3
 8010238:	b2d2      	uxtb	r2, r2
 801023a:	701a      	strb	r2, [r3, #0]
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	011b      	lsls	r3, r3, #4
 8010244:	4413      	add	r3, r2
 8010246:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801024a:	681a      	ldr	r2, [r3, #0]
 801024c:	683b      	ldr	r3, [r7, #0]
 801024e:	3304      	adds	r3, #4
 8010250:	b2d2      	uxtb	r2, r2
 8010252:	701a      	strb	r2, [r3, #0]
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	011b      	lsls	r3, r3, #4
 801025c:	4413      	add	r3, r2
 801025e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010262:	681b      	ldr	r3, [r3, #0]
 8010264:	0a1a      	lsrs	r2, r3, #8
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	3305      	adds	r3, #5
 801026a:	b2d2      	uxtb	r2, r2
 801026c:	701a      	strb	r2, [r3, #0]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	681a      	ldr	r2, [r3, #0]
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	011b      	lsls	r3, r3, #4
 8010276:	4413      	add	r3, r2
 8010278:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	0c1a      	lsrs	r2, r3, #16
 8010280:	683b      	ldr	r3, [r7, #0]
 8010282:	3306      	adds	r3, #6
 8010284:	b2d2      	uxtb	r2, r2
 8010286:	701a      	strb	r2, [r3, #0]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681a      	ldr	r2, [r3, #0]
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	011b      	lsls	r3, r3, #4
 8010290:	4413      	add	r3, r2
 8010292:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	0e1a      	lsrs	r2, r3, #24
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	3307      	adds	r3, #7
 801029e:	b2d2      	uxtb	r2, r2
 80102a0:	701a      	strb	r2, [r3, #0]
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d108      	bne.n	80102ba <HAL_CAN_GetRxMessage+0x1f6>
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	68da      	ldr	r2, [r3, #12]
 80102ae:	68fb      	ldr	r3, [r7, #12]
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	f042 0220 	orr.w	r2, r2, #32
 80102b6:	60da      	str	r2, [r3, #12]
 80102b8:	e007      	b.n	80102ca <HAL_CAN_GetRxMessage+0x206>
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	691a      	ldr	r2, [r3, #16]
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	f042 0220 	orr.w	r2, r2, #32
 80102c8:	611a      	str	r2, [r3, #16]
 80102ca:	2300      	movs	r3, #0
 80102cc:	e006      	b.n	80102dc <HAL_CAN_GetRxMessage+0x218>
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80102d6:	68fb      	ldr	r3, [r7, #12]
 80102d8:	625a      	str	r2, [r3, #36]	; 0x24
 80102da:	2301      	movs	r3, #1
 80102dc:	4618      	mov	r0, r3
 80102de:	371c      	adds	r7, #28
 80102e0:	46bd      	mov	sp, r7
 80102e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e6:	4770      	bx	lr

080102e8 <HAL_CAN_ActivateNotification>:
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
 80102f0:	6039      	str	r1, [r7, #0]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80102f8:	73fb      	strb	r3, [r7, #15]
 80102fa:	7bfb      	ldrb	r3, [r7, #15]
 80102fc:	2b01      	cmp	r3, #1
 80102fe:	d002      	beq.n	8010306 <HAL_CAN_ActivateNotification+0x1e>
 8010300:	7bfb      	ldrb	r3, [r7, #15]
 8010302:	2b02      	cmp	r3, #2
 8010304:	d109      	bne.n	801031a <HAL_CAN_ActivateNotification+0x32>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	6959      	ldr	r1, [r3, #20]
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	683a      	ldr	r2, [r7, #0]
 8010312:	430a      	orrs	r2, r1
 8010314:	615a      	str	r2, [r3, #20]
 8010316:	2300      	movs	r3, #0
 8010318:	e006      	b.n	8010328 <HAL_CAN_ActivateNotification+0x40>
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801031e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	625a      	str	r2, [r3, #36]	; 0x24
 8010326:	2301      	movs	r3, #1
 8010328:	4618      	mov	r0, r3
 801032a:	3714      	adds	r7, #20
 801032c:	46bd      	mov	sp, r7
 801032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010332:	4770      	bx	lr

08010334 <HAL_CAN_IRQHandler>:
 8010334:	b580      	push	{r7, lr}
 8010336:	b08a      	sub	sp, #40	; 0x28
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	2300      	movs	r3, #0
 801033e:	627b      	str	r3, [r7, #36]	; 0x24
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	695b      	ldr	r3, [r3, #20]
 8010346:	623b      	str	r3, [r7, #32]
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	61fb      	str	r3, [r7, #28]
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	689b      	ldr	r3, [r3, #8]
 8010356:	61bb      	str	r3, [r7, #24]
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	68db      	ldr	r3, [r3, #12]
 801035e:	617b      	str	r3, [r7, #20]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	691b      	ldr	r3, [r3, #16]
 8010366:	613b      	str	r3, [r7, #16]
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	699b      	ldr	r3, [r3, #24]
 801036e:	60fb      	str	r3, [r7, #12]
 8010370:	6a3b      	ldr	r3, [r7, #32]
 8010372:	f003 0301 	and.w	r3, r3, #1
 8010376:	2b00      	cmp	r3, #0
 8010378:	d07c      	beq.n	8010474 <HAL_CAN_IRQHandler+0x140>
 801037a:	69bb      	ldr	r3, [r7, #24]
 801037c:	f003 0301 	and.w	r3, r3, #1
 8010380:	2b00      	cmp	r3, #0
 8010382:	d023      	beq.n	80103cc <HAL_CAN_IRQHandler+0x98>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	2201      	movs	r2, #1
 801038a:	609a      	str	r2, [r3, #8]
 801038c:	69bb      	ldr	r3, [r7, #24]
 801038e:	f003 0302 	and.w	r3, r3, #2
 8010392:	2b00      	cmp	r3, #0
 8010394:	d003      	beq.n	801039e <HAL_CAN_IRQHandler+0x6a>
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7f1 fc72 	bl	8001c80 <HAL_CAN_TxMailbox0CompleteCallback>
 801039c:	e016      	b.n	80103cc <HAL_CAN_IRQHandler+0x98>
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	f003 0304 	and.w	r3, r3, #4
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d004      	beq.n	80103b2 <HAL_CAN_IRQHandler+0x7e>
 80103a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80103ae:	627b      	str	r3, [r7, #36]	; 0x24
 80103b0:	e00c      	b.n	80103cc <HAL_CAN_IRQHandler+0x98>
 80103b2:	69bb      	ldr	r3, [r7, #24]
 80103b4:	f003 0308 	and.w	r3, r3, #8
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d004      	beq.n	80103c6 <HAL_CAN_IRQHandler+0x92>
 80103bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80103c2:	627b      	str	r3, [r7, #36]	; 0x24
 80103c4:	e002      	b.n	80103cc <HAL_CAN_IRQHandler+0x98>
 80103c6:	6878      	ldr	r0, [r7, #4]
 80103c8:	f000 f97f 	bl	80106ca <HAL_CAN_TxMailbox0AbortCallback>
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d024      	beq.n	8010420 <HAL_CAN_IRQHandler+0xec>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103de:	609a      	str	r2, [r3, #8]
 80103e0:	69bb      	ldr	r3, [r7, #24]
 80103e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d003      	beq.n	80103f2 <HAL_CAN_IRQHandler+0xbe>
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f000 f959 	bl	80106a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80103f0:	e016      	b.n	8010420 <HAL_CAN_IRQHandler+0xec>
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d004      	beq.n	8010406 <HAL_CAN_IRQHandler+0xd2>
 80103fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010402:	627b      	str	r3, [r7, #36]	; 0x24
 8010404:	e00c      	b.n	8010420 <HAL_CAN_IRQHandler+0xec>
 8010406:	69bb      	ldr	r3, [r7, #24]
 8010408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801040c:	2b00      	cmp	r3, #0
 801040e:	d004      	beq.n	801041a <HAL_CAN_IRQHandler+0xe6>
 8010410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010416:	627b      	str	r3, [r7, #36]	; 0x24
 8010418:	e002      	b.n	8010420 <HAL_CAN_IRQHandler+0xec>
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f000 f95f 	bl	80106de <HAL_CAN_TxMailbox1AbortCallback>
 8010420:	69bb      	ldr	r3, [r7, #24]
 8010422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010426:	2b00      	cmp	r3, #0
 8010428:	d024      	beq.n	8010474 <HAL_CAN_IRQHandler+0x140>
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010432:	609a      	str	r2, [r3, #8]
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801043a:	2b00      	cmp	r3, #0
 801043c:	d003      	beq.n	8010446 <HAL_CAN_IRQHandler+0x112>
 801043e:	6878      	ldr	r0, [r7, #4]
 8010440:	f000 f939 	bl	80106b6 <HAL_CAN_TxMailbox2CompleteCallback>
 8010444:	e016      	b.n	8010474 <HAL_CAN_IRQHandler+0x140>
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801044c:	2b00      	cmp	r3, #0
 801044e:	d004      	beq.n	801045a <HAL_CAN_IRQHandler+0x126>
 8010450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010456:	627b      	str	r3, [r7, #36]	; 0x24
 8010458:	e00c      	b.n	8010474 <HAL_CAN_IRQHandler+0x140>
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010460:	2b00      	cmp	r3, #0
 8010462:	d004      	beq.n	801046e <HAL_CAN_IRQHandler+0x13a>
 8010464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801046a:	627b      	str	r3, [r7, #36]	; 0x24
 801046c:	e002      	b.n	8010474 <HAL_CAN_IRQHandler+0x140>
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f000 f93f 	bl	80106f2 <HAL_CAN_TxMailbox2AbortCallback>
 8010474:	6a3b      	ldr	r3, [r7, #32]
 8010476:	f003 0308 	and.w	r3, r3, #8
 801047a:	2b00      	cmp	r3, #0
 801047c:	d00c      	beq.n	8010498 <HAL_CAN_IRQHandler+0x164>
 801047e:	697b      	ldr	r3, [r7, #20]
 8010480:	f003 0310 	and.w	r3, r3, #16
 8010484:	2b00      	cmp	r3, #0
 8010486:	d007      	beq.n	8010498 <HAL_CAN_IRQHandler+0x164>
 8010488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801048a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801048e:	627b      	str	r3, [r7, #36]	; 0x24
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	2210      	movs	r2, #16
 8010496:	60da      	str	r2, [r3, #12]
 8010498:	6a3b      	ldr	r3, [r7, #32]
 801049a:	f003 0304 	and.w	r3, r3, #4
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00b      	beq.n	80104ba <HAL_CAN_IRQHandler+0x186>
 80104a2:	697b      	ldr	r3, [r7, #20]
 80104a4:	f003 0308 	and.w	r3, r3, #8
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d006      	beq.n	80104ba <HAL_CAN_IRQHandler+0x186>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	2208      	movs	r2, #8
 80104b2:	60da      	str	r2, [r3, #12]
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f000 f926 	bl	8010706 <HAL_CAN_RxFifo0FullCallback>
 80104ba:	6a3b      	ldr	r3, [r7, #32]
 80104bc:	f003 0302 	and.w	r3, r3, #2
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d009      	beq.n	80104d8 <HAL_CAN_IRQHandler+0x1a4>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	68db      	ldr	r3, [r3, #12]
 80104ca:	f003 0303 	and.w	r3, r3, #3
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d002      	beq.n	80104d8 <HAL_CAN_IRQHandler+0x1a4>
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f7f1 fb3c 	bl	8001b50 <HAL_CAN_RxFifo0MsgPendingCallback>
 80104d8:	6a3b      	ldr	r3, [r7, #32]
 80104da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d00c      	beq.n	80104fc <HAL_CAN_IRQHandler+0x1c8>
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	f003 0310 	and.w	r3, r3, #16
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d007      	beq.n	80104fc <HAL_CAN_IRQHandler+0x1c8>
 80104ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80104f2:	627b      	str	r3, [r7, #36]	; 0x24
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	2210      	movs	r2, #16
 80104fa:	611a      	str	r2, [r3, #16]
 80104fc:	6a3b      	ldr	r3, [r7, #32]
 80104fe:	f003 0320 	and.w	r3, r3, #32
 8010502:	2b00      	cmp	r3, #0
 8010504:	d00b      	beq.n	801051e <HAL_CAN_IRQHandler+0x1ea>
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	f003 0308 	and.w	r3, r3, #8
 801050c:	2b00      	cmp	r3, #0
 801050e:	d006      	beq.n	801051e <HAL_CAN_IRQHandler+0x1ea>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2208      	movs	r2, #8
 8010516:	611a      	str	r2, [r3, #16]
 8010518:	6878      	ldr	r0, [r7, #4]
 801051a:	f000 f8fe 	bl	801071a <HAL_CAN_RxFifo1FullCallback>
 801051e:	6a3b      	ldr	r3, [r7, #32]
 8010520:	f003 0310 	and.w	r3, r3, #16
 8010524:	2b00      	cmp	r3, #0
 8010526:	d009      	beq.n	801053c <HAL_CAN_IRQHandler+0x208>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	691b      	ldr	r3, [r3, #16]
 801052e:	f003 0303 	and.w	r3, r3, #3
 8010532:	2b00      	cmp	r3, #0
 8010534:	d002      	beq.n	801053c <HAL_CAN_IRQHandler+0x208>
 8010536:	6878      	ldr	r0, [r7, #4]
 8010538:	f7f1 fb44 	bl	8001bc4 <HAL_CAN_RxFifo1MsgPendingCallback>
 801053c:	6a3b      	ldr	r3, [r7, #32]
 801053e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010542:	2b00      	cmp	r3, #0
 8010544:	d00b      	beq.n	801055e <HAL_CAN_IRQHandler+0x22a>
 8010546:	69fb      	ldr	r3, [r7, #28]
 8010548:	f003 0310 	and.w	r3, r3, #16
 801054c:	2b00      	cmp	r3, #0
 801054e:	d006      	beq.n	801055e <HAL_CAN_IRQHandler+0x22a>
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	681b      	ldr	r3, [r3, #0]
 8010554:	2210      	movs	r2, #16
 8010556:	605a      	str	r2, [r3, #4]
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f000 f8e8 	bl	801072e <HAL_CAN_SleepCallback>
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010564:	2b00      	cmp	r3, #0
 8010566:	d00b      	beq.n	8010580 <HAL_CAN_IRQHandler+0x24c>
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	f003 0308 	and.w	r3, r3, #8
 801056e:	2b00      	cmp	r3, #0
 8010570:	d006      	beq.n	8010580 <HAL_CAN_IRQHandler+0x24c>
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	2208      	movs	r2, #8
 8010578:	605a      	str	r2, [r3, #4]
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 f8e1 	bl	8010742 <HAL_CAN_WakeUpFromRxMsgCallback>
 8010580:	6a3b      	ldr	r3, [r7, #32]
 8010582:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010586:	2b00      	cmp	r3, #0
 8010588:	d07b      	beq.n	8010682 <HAL_CAN_IRQHandler+0x34e>
 801058a:	69fb      	ldr	r3, [r7, #28]
 801058c:	f003 0304 	and.w	r3, r3, #4
 8010590:	2b00      	cmp	r3, #0
 8010592:	d072      	beq.n	801067a <HAL_CAN_IRQHandler+0x346>
 8010594:	6a3b      	ldr	r3, [r7, #32]
 8010596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801059a:	2b00      	cmp	r3, #0
 801059c:	d008      	beq.n	80105b0 <HAL_CAN_IRQHandler+0x27c>
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f003 0301 	and.w	r3, r3, #1
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d003      	beq.n	80105b0 <HAL_CAN_IRQHandler+0x27c>
 80105a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105aa:	f043 0301 	orr.w	r3, r3, #1
 80105ae:	627b      	str	r3, [r7, #36]	; 0x24
 80105b0:	6a3b      	ldr	r3, [r7, #32]
 80105b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d008      	beq.n	80105cc <HAL_CAN_IRQHandler+0x298>
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	f003 0302 	and.w	r3, r3, #2
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d003      	beq.n	80105cc <HAL_CAN_IRQHandler+0x298>
 80105c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c6:	f043 0302 	orr.w	r3, r3, #2
 80105ca:	627b      	str	r3, [r7, #36]	; 0x24
 80105cc:	6a3b      	ldr	r3, [r7, #32]
 80105ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d008      	beq.n	80105e8 <HAL_CAN_IRQHandler+0x2b4>
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	f003 0304 	and.w	r3, r3, #4
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d003      	beq.n	80105e8 <HAL_CAN_IRQHandler+0x2b4>
 80105e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105e2:	f043 0304 	orr.w	r3, r3, #4
 80105e6:	627b      	str	r3, [r7, #36]	; 0x24
 80105e8:	6a3b      	ldr	r3, [r7, #32]
 80105ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d043      	beq.n	801067a <HAL_CAN_IRQHandler+0x346>
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d03e      	beq.n	801067a <HAL_CAN_IRQHandler+0x346>
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010602:	2b60      	cmp	r3, #96	; 0x60
 8010604:	d02b      	beq.n	801065e <HAL_CAN_IRQHandler+0x32a>
 8010606:	2b60      	cmp	r3, #96	; 0x60
 8010608:	d82e      	bhi.n	8010668 <HAL_CAN_IRQHandler+0x334>
 801060a:	2b50      	cmp	r3, #80	; 0x50
 801060c:	d022      	beq.n	8010654 <HAL_CAN_IRQHandler+0x320>
 801060e:	2b50      	cmp	r3, #80	; 0x50
 8010610:	d82a      	bhi.n	8010668 <HAL_CAN_IRQHandler+0x334>
 8010612:	2b40      	cmp	r3, #64	; 0x40
 8010614:	d019      	beq.n	801064a <HAL_CAN_IRQHandler+0x316>
 8010616:	2b40      	cmp	r3, #64	; 0x40
 8010618:	d826      	bhi.n	8010668 <HAL_CAN_IRQHandler+0x334>
 801061a:	2b30      	cmp	r3, #48	; 0x30
 801061c:	d010      	beq.n	8010640 <HAL_CAN_IRQHandler+0x30c>
 801061e:	2b30      	cmp	r3, #48	; 0x30
 8010620:	d822      	bhi.n	8010668 <HAL_CAN_IRQHandler+0x334>
 8010622:	2b10      	cmp	r3, #16
 8010624:	d002      	beq.n	801062c <HAL_CAN_IRQHandler+0x2f8>
 8010626:	2b20      	cmp	r3, #32
 8010628:	d005      	beq.n	8010636 <HAL_CAN_IRQHandler+0x302>
 801062a:	e01d      	b.n	8010668 <HAL_CAN_IRQHandler+0x334>
 801062c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801062e:	f043 0308 	orr.w	r3, r3, #8
 8010632:	627b      	str	r3, [r7, #36]	; 0x24
 8010634:	e019      	b.n	801066a <HAL_CAN_IRQHandler+0x336>
 8010636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010638:	f043 0310 	orr.w	r3, r3, #16
 801063c:	627b      	str	r3, [r7, #36]	; 0x24
 801063e:	e014      	b.n	801066a <HAL_CAN_IRQHandler+0x336>
 8010640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010642:	f043 0320 	orr.w	r3, r3, #32
 8010646:	627b      	str	r3, [r7, #36]	; 0x24
 8010648:	e00f      	b.n	801066a <HAL_CAN_IRQHandler+0x336>
 801064a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010650:	627b      	str	r3, [r7, #36]	; 0x24
 8010652:	e00a      	b.n	801066a <HAL_CAN_IRQHandler+0x336>
 8010654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801065a:	627b      	str	r3, [r7, #36]	; 0x24
 801065c:	e005      	b.n	801066a <HAL_CAN_IRQHandler+0x336>
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010664:	627b      	str	r3, [r7, #36]	; 0x24
 8010666:	e000      	b.n	801066a <HAL_CAN_IRQHandler+0x336>
 8010668:	bf00      	nop
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	699a      	ldr	r2, [r3, #24]
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8010678:	619a      	str	r2, [r3, #24]
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	2204      	movs	r2, #4
 8010680:	605a      	str	r2, [r3, #4]
 8010682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010684:	2b00      	cmp	r3, #0
 8010686:	d008      	beq.n	801069a <HAL_CAN_IRQHandler+0x366>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801068c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068e:	431a      	orrs	r2, r3
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	625a      	str	r2, [r3, #36]	; 0x24
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f7f1 facf 	bl	8001c38 <HAL_CAN_ErrorCallback>
 801069a:	bf00      	nop
 801069c:	3728      	adds	r7, #40	; 0x28
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <HAL_CAN_TxMailbox1CompleteCallback>:
 80106a2:	b480      	push	{r7}
 80106a4:	b083      	sub	sp, #12
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
 80106aa:	bf00      	nop
 80106ac:	370c      	adds	r7, #12
 80106ae:	46bd      	mov	sp, r7
 80106b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106b4:	4770      	bx	lr

080106b6 <HAL_CAN_TxMailbox2CompleteCallback>:
 80106b6:	b480      	push	{r7}
 80106b8:	b083      	sub	sp, #12
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	bf00      	nop
 80106c0:	370c      	adds	r7, #12
 80106c2:	46bd      	mov	sp, r7
 80106c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c8:	4770      	bx	lr

080106ca <HAL_CAN_TxMailbox0AbortCallback>:
 80106ca:	b480      	push	{r7}
 80106cc:	b083      	sub	sp, #12
 80106ce:	af00      	add	r7, sp, #0
 80106d0:	6078      	str	r0, [r7, #4]
 80106d2:	bf00      	nop
 80106d4:	370c      	adds	r7, #12
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr

080106de <HAL_CAN_TxMailbox1AbortCallback>:
 80106de:	b480      	push	{r7}
 80106e0:	b083      	sub	sp, #12
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	bf00      	nop
 80106e8:	370c      	adds	r7, #12
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr

080106f2 <HAL_CAN_TxMailbox2AbortCallback>:
 80106f2:	b480      	push	{r7}
 80106f4:	b083      	sub	sp, #12
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
 80106fa:	bf00      	nop
 80106fc:	370c      	adds	r7, #12
 80106fe:	46bd      	mov	sp, r7
 8010700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010704:	4770      	bx	lr

08010706 <HAL_CAN_RxFifo0FullCallback>:
 8010706:	b480      	push	{r7}
 8010708:	b083      	sub	sp, #12
 801070a:	af00      	add	r7, sp, #0
 801070c:	6078      	str	r0, [r7, #4]
 801070e:	bf00      	nop
 8010710:	370c      	adds	r7, #12
 8010712:	46bd      	mov	sp, r7
 8010714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010718:	4770      	bx	lr

0801071a <HAL_CAN_RxFifo1FullCallback>:
 801071a:	b480      	push	{r7}
 801071c:	b083      	sub	sp, #12
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
 8010722:	bf00      	nop
 8010724:	370c      	adds	r7, #12
 8010726:	46bd      	mov	sp, r7
 8010728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072c:	4770      	bx	lr

0801072e <HAL_CAN_SleepCallback>:
 801072e:	b480      	push	{r7}
 8010730:	b083      	sub	sp, #12
 8010732:	af00      	add	r7, sp, #0
 8010734:	6078      	str	r0, [r7, #4]
 8010736:	bf00      	nop
 8010738:	370c      	adds	r7, #12
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr

08010742 <HAL_CAN_WakeUpFromRxMsgCallback>:
 8010742:	b480      	push	{r7}
 8010744:	b083      	sub	sp, #12
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
 801074a:	bf00      	nop
 801074c:	370c      	adds	r7, #12
 801074e:	46bd      	mov	sp, r7
 8010750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010754:	4770      	bx	lr

08010756 <HAL_CAN_ResetError>:
 8010756:	b480      	push	{r7}
 8010758:	b085      	sub	sp, #20
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
 801075e:	2300      	movs	r3, #0
 8010760:	73fb      	strb	r3, [r7, #15]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010768:	73bb      	strb	r3, [r7, #14]
 801076a:	7bbb      	ldrb	r3, [r7, #14]
 801076c:	2b01      	cmp	r3, #1
 801076e:	d002      	beq.n	8010776 <HAL_CAN_ResetError+0x20>
 8010770:	7bbb      	ldrb	r3, [r7, #14]
 8010772:	2b02      	cmp	r3, #2
 8010774:	d103      	bne.n	801077e <HAL_CAN_ResetError+0x28>
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2200      	movs	r2, #0
 801077a:	625a      	str	r2, [r3, #36]	; 0x24
 801077c:	e007      	b.n	801078e <HAL_CAN_ResetError+0x38>
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010782:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	625a      	str	r2, [r3, #36]	; 0x24
 801078a:	2301      	movs	r3, #1
 801078c:	73fb      	strb	r3, [r7, #15]
 801078e:	7bfb      	ldrb	r3, [r7, #15]
 8010790:	4618      	mov	r0, r3
 8010792:	3714      	adds	r7, #20
 8010794:	46bd      	mov	sp, r7
 8010796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801079a:	4770      	bx	lr

0801079c <__NVIC_SetPriorityGrouping>:
 801079c:	b480      	push	{r7}
 801079e:	b085      	sub	sp, #20
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	f003 0307 	and.w	r3, r3, #7
 80107aa:	60fb      	str	r3, [r7, #12]
 80107ac:	4b0c      	ldr	r3, [pc, #48]	; (80107e0 <__NVIC_SetPriorityGrouping+0x44>)
 80107ae:	68db      	ldr	r3, [r3, #12]
 80107b0:	60bb      	str	r3, [r7, #8]
 80107b2:	68ba      	ldr	r2, [r7, #8]
 80107b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80107b8:	4013      	ands	r3, r2
 80107ba:	60bb      	str	r3, [r7, #8]
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	021a      	lsls	r2, r3, #8
 80107c0:	68bb      	ldr	r3, [r7, #8]
 80107c2:	4313      	orrs	r3, r2
 80107c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80107c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80107cc:	60bb      	str	r3, [r7, #8]
 80107ce:	4a04      	ldr	r2, [pc, #16]	; (80107e0 <__NVIC_SetPriorityGrouping+0x44>)
 80107d0:	68bb      	ldr	r3, [r7, #8]
 80107d2:	60d3      	str	r3, [r2, #12]
 80107d4:	bf00      	nop
 80107d6:	3714      	adds	r7, #20
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	e000ed00 	.word	0xe000ed00

080107e4 <__NVIC_GetPriorityGrouping>:
 80107e4:	b480      	push	{r7}
 80107e6:	af00      	add	r7, sp, #0
 80107e8:	4b04      	ldr	r3, [pc, #16]	; (80107fc <__NVIC_GetPriorityGrouping+0x18>)
 80107ea:	68db      	ldr	r3, [r3, #12]
 80107ec:	0a1b      	lsrs	r3, r3, #8
 80107ee:	f003 0307 	and.w	r3, r3, #7
 80107f2:	4618      	mov	r0, r3
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr
 80107fc:	e000ed00 	.word	0xe000ed00

08010800 <__NVIC_EnableIRQ>:
 8010800:	b480      	push	{r7}
 8010802:	b083      	sub	sp, #12
 8010804:	af00      	add	r7, sp, #0
 8010806:	4603      	mov	r3, r0
 8010808:	71fb      	strb	r3, [r7, #7]
 801080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801080e:	2b00      	cmp	r3, #0
 8010810:	db0b      	blt.n	801082a <__NVIC_EnableIRQ+0x2a>
 8010812:	79fb      	ldrb	r3, [r7, #7]
 8010814:	f003 021f 	and.w	r2, r3, #31
 8010818:	4907      	ldr	r1, [pc, #28]	; (8010838 <__NVIC_EnableIRQ+0x38>)
 801081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801081e:	095b      	lsrs	r3, r3, #5
 8010820:	2001      	movs	r0, #1
 8010822:	fa00 f202 	lsl.w	r2, r0, r2
 8010826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801082a:	bf00      	nop
 801082c:	370c      	adds	r7, #12
 801082e:	46bd      	mov	sp, r7
 8010830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010834:	4770      	bx	lr
 8010836:	bf00      	nop
 8010838:	e000e100 	.word	0xe000e100

0801083c <__NVIC_SetPriority>:
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	4603      	mov	r3, r0
 8010844:	6039      	str	r1, [r7, #0]
 8010846:	71fb      	strb	r3, [r7, #7]
 8010848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801084c:	2b00      	cmp	r3, #0
 801084e:	db0a      	blt.n	8010866 <__NVIC_SetPriority+0x2a>
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	b2da      	uxtb	r2, r3
 8010854:	490c      	ldr	r1, [pc, #48]	; (8010888 <__NVIC_SetPriority+0x4c>)
 8010856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801085a:	0112      	lsls	r2, r2, #4
 801085c:	b2d2      	uxtb	r2, r2
 801085e:	440b      	add	r3, r1
 8010860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8010864:	e00a      	b.n	801087c <__NVIC_SetPriority+0x40>
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	b2da      	uxtb	r2, r3
 801086a:	4908      	ldr	r1, [pc, #32]	; (801088c <__NVIC_SetPriority+0x50>)
 801086c:	79fb      	ldrb	r3, [r7, #7]
 801086e:	f003 030f 	and.w	r3, r3, #15
 8010872:	3b04      	subs	r3, #4
 8010874:	0112      	lsls	r2, r2, #4
 8010876:	b2d2      	uxtb	r2, r2
 8010878:	440b      	add	r3, r1
 801087a:	761a      	strb	r2, [r3, #24]
 801087c:	bf00      	nop
 801087e:	370c      	adds	r7, #12
 8010880:	46bd      	mov	sp, r7
 8010882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010886:	4770      	bx	lr
 8010888:	e000e100 	.word	0xe000e100
 801088c:	e000ed00 	.word	0xe000ed00

08010890 <NVIC_EncodePriority>:
 8010890:	b480      	push	{r7}
 8010892:	b089      	sub	sp, #36	; 0x24
 8010894:	af00      	add	r7, sp, #0
 8010896:	60f8      	str	r0, [r7, #12]
 8010898:	60b9      	str	r1, [r7, #8]
 801089a:	607a      	str	r2, [r7, #4]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	f003 0307 	and.w	r3, r3, #7
 80108a2:	61fb      	str	r3, [r7, #28]
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	f1c3 0307 	rsb	r3, r3, #7
 80108aa:	2b04      	cmp	r3, #4
 80108ac:	bf28      	it	cs
 80108ae:	2304      	movcs	r3, #4
 80108b0:	61bb      	str	r3, [r7, #24]
 80108b2:	69fb      	ldr	r3, [r7, #28]
 80108b4:	3304      	adds	r3, #4
 80108b6:	2b06      	cmp	r3, #6
 80108b8:	d902      	bls.n	80108c0 <NVIC_EncodePriority+0x30>
 80108ba:	69fb      	ldr	r3, [r7, #28]
 80108bc:	3b03      	subs	r3, #3
 80108be:	e000      	b.n	80108c2 <NVIC_EncodePriority+0x32>
 80108c0:	2300      	movs	r3, #0
 80108c2:	617b      	str	r3, [r7, #20]
 80108c4:	f04f 32ff 	mov.w	r2, #4294967295
 80108c8:	69bb      	ldr	r3, [r7, #24]
 80108ca:	fa02 f303 	lsl.w	r3, r2, r3
 80108ce:	43da      	mvns	r2, r3
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	401a      	ands	r2, r3
 80108d4:	697b      	ldr	r3, [r7, #20]
 80108d6:	409a      	lsls	r2, r3
 80108d8:	f04f 31ff 	mov.w	r1, #4294967295
 80108dc:	697b      	ldr	r3, [r7, #20]
 80108de:	fa01 f303 	lsl.w	r3, r1, r3
 80108e2:	43d9      	mvns	r1, r3
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	400b      	ands	r3, r1
 80108e8:	4313      	orrs	r3, r2
 80108ea:	4618      	mov	r0, r3
 80108ec:	3724      	adds	r7, #36	; 0x24
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr

080108f6 <HAL_NVIC_SetPriorityGrouping>:
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b082      	sub	sp, #8
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	6878      	ldr	r0, [r7, #4]
 8010900:	f7ff ff4c 	bl	801079c <__NVIC_SetPriorityGrouping>
 8010904:	bf00      	nop
 8010906:	3708      	adds	r7, #8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}

0801090c <HAL_NVIC_SetPriority>:
 801090c:	b580      	push	{r7, lr}
 801090e:	b086      	sub	sp, #24
 8010910:	af00      	add	r7, sp, #0
 8010912:	4603      	mov	r3, r0
 8010914:	60b9      	str	r1, [r7, #8]
 8010916:	607a      	str	r2, [r7, #4]
 8010918:	73fb      	strb	r3, [r7, #15]
 801091a:	2300      	movs	r3, #0
 801091c:	617b      	str	r3, [r7, #20]
 801091e:	f7ff ff61 	bl	80107e4 <__NVIC_GetPriorityGrouping>
 8010922:	6178      	str	r0, [r7, #20]
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	68b9      	ldr	r1, [r7, #8]
 8010928:	6978      	ldr	r0, [r7, #20]
 801092a:	f7ff ffb1 	bl	8010890 <NVIC_EncodePriority>
 801092e:	4602      	mov	r2, r0
 8010930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010934:	4611      	mov	r1, r2
 8010936:	4618      	mov	r0, r3
 8010938:	f7ff ff80 	bl	801083c <__NVIC_SetPriority>
 801093c:	bf00      	nop
 801093e:	3718      	adds	r7, #24
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}

08010944 <HAL_NVIC_EnableIRQ>:
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	4603      	mov	r3, r0
 801094c:	71fb      	strb	r3, [r7, #7]
 801094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010952:	4618      	mov	r0, r3
 8010954:	f7ff ff54 	bl	8010800 <__NVIC_EnableIRQ>
 8010958:	bf00      	nop
 801095a:	3708      	adds	r7, #8
 801095c:	46bd      	mov	sp, r7
 801095e:	bd80      	pop	{r7, pc}

08010960 <HAL_CRC_Init>:
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d101      	bne.n	8010972 <HAL_CRC_Init+0x12>
 801096e:	2301      	movs	r3, #1
 8010970:	e00e      	b.n	8010990 <HAL_CRC_Init+0x30>
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	795b      	ldrb	r3, [r3, #5]
 8010976:	b2db      	uxtb	r3, r3
 8010978:	2b00      	cmp	r3, #0
 801097a:	d105      	bne.n	8010988 <HAL_CRC_Init+0x28>
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	711a      	strb	r2, [r3, #4]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f7fd fa4c 	bl	800de20 <HAL_CRC_MspInit>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2201      	movs	r2, #1
 801098c:	715a      	strb	r2, [r3, #5]
 801098e:	2300      	movs	r3, #0
 8010990:	4618      	mov	r0, r3
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <HAL_DMA_Init>:
 8010998:	b580      	push	{r7, lr}
 801099a:	b086      	sub	sp, #24
 801099c:	af00      	add	r7, sp, #0
 801099e:	6078      	str	r0, [r7, #4]
 80109a0:	2300      	movs	r3, #0
 80109a2:	617b      	str	r3, [r7, #20]
 80109a4:	f7fe fc54 	bl	800f250 <HAL_GetTick>
 80109a8:	6138      	str	r0, [r7, #16]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d101      	bne.n	80109b4 <HAL_DMA_Init+0x1c>
 80109b0:	2301      	movs	r3, #1
 80109b2:	e099      	b.n	8010ae8 <HAL_DMA_Init+0x150>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2202      	movs	r2, #2
 80109b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2200      	movs	r2, #0
 80109c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	681a      	ldr	r2, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f022 0201 	bic.w	r2, r2, #1
 80109d2:	601a      	str	r2, [r3, #0]
 80109d4:	e00f      	b.n	80109f6 <HAL_DMA_Init+0x5e>
 80109d6:	f7fe fc3b 	bl	800f250 <HAL_GetTick>
 80109da:	4602      	mov	r2, r0
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	1ad3      	subs	r3, r2, r3
 80109e0:	2b05      	cmp	r3, #5
 80109e2:	d908      	bls.n	80109f6 <HAL_DMA_Init+0x5e>
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2220      	movs	r2, #32
 80109e8:	655a      	str	r2, [r3, #84]	; 0x54
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2203      	movs	r2, #3
 80109ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80109f2:	2303      	movs	r3, #3
 80109f4:	e078      	b.n	8010ae8 <HAL_DMA_Init+0x150>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f003 0301 	and.w	r3, r3, #1
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d1e8      	bne.n	80109d6 <HAL_DMA_Init+0x3e>
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	617b      	str	r3, [r7, #20]
 8010a0c:	697a      	ldr	r2, [r7, #20]
 8010a0e:	4b38      	ldr	r3, [pc, #224]	; (8010af0 <HAL_DMA_Init+0x158>)
 8010a10:	4013      	ands	r3, r2
 8010a12:	617b      	str	r3, [r7, #20]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	685a      	ldr	r2, [r3, #4]
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	431a      	orrs	r2, r3
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	68db      	ldr	r3, [r3, #12]
 8010a22:	431a      	orrs	r2, r3
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	691b      	ldr	r3, [r3, #16]
 8010a28:	431a      	orrs	r2, r3
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	695b      	ldr	r3, [r3, #20]
 8010a2e:	431a      	orrs	r2, r3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	699b      	ldr	r3, [r3, #24]
 8010a34:	431a      	orrs	r2, r3
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	69db      	ldr	r3, [r3, #28]
 8010a3a:	431a      	orrs	r2, r3
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a1b      	ldr	r3, [r3, #32]
 8010a40:	4313      	orrs	r3, r2
 8010a42:	697a      	ldr	r2, [r7, #20]
 8010a44:	4313      	orrs	r3, r2
 8010a46:	617b      	str	r3, [r7, #20]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a4c:	2b04      	cmp	r3, #4
 8010a4e:	d107      	bne.n	8010a60 <HAL_DMA_Init+0xc8>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a58:	4313      	orrs	r3, r2
 8010a5a:	697a      	ldr	r2, [r7, #20]
 8010a5c:	4313      	orrs	r3, r2
 8010a5e:	617b      	str	r3, [r7, #20]
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	697a      	ldr	r2, [r7, #20]
 8010a66:	601a      	str	r2, [r3, #0]
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	695b      	ldr	r3, [r3, #20]
 8010a6e:	617b      	str	r3, [r7, #20]
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	f023 0307 	bic.w	r3, r3, #7
 8010a76:	617b      	str	r3, [r7, #20]
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a7c:	697a      	ldr	r2, [r7, #20]
 8010a7e:	4313      	orrs	r3, r2
 8010a80:	617b      	str	r3, [r7, #20]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a86:	2b04      	cmp	r3, #4
 8010a88:	d117      	bne.n	8010aba <HAL_DMA_Init+0x122>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a8e:	697a      	ldr	r2, [r7, #20]
 8010a90:	4313      	orrs	r3, r2
 8010a92:	617b      	str	r3, [r7, #20]
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d00e      	beq.n	8010aba <HAL_DMA_Init+0x122>
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f000 fa6f 	bl	8010f80 <DMA_CheckFifoParam>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d008      	beq.n	8010aba <HAL_DMA_Init+0x122>
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	2240      	movs	r2, #64	; 0x40
 8010aac:	655a      	str	r2, [r3, #84]	; 0x54
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	2201      	movs	r2, #1
 8010ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8010ab6:	2301      	movs	r3, #1
 8010ab8:	e016      	b.n	8010ae8 <HAL_DMA_Init+0x150>
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	697a      	ldr	r2, [r7, #20]
 8010ac0:	615a      	str	r2, [r3, #20]
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 fa26 	bl	8010f14 <DMA_CalcBaseAndBitshift>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	60fb      	str	r3, [r7, #12]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ad0:	223f      	movs	r2, #63	; 0x3f
 8010ad2:	409a      	lsls	r2, r3
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	609a      	str	r2, [r3, #8]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2200      	movs	r2, #0
 8010adc:	655a      	str	r2, [r3, #84]	; 0x54
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	2201      	movs	r2, #1
 8010ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	4618      	mov	r0, r3
 8010aea:	3718      	adds	r7, #24
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	f010803f 	.word	0xf010803f

08010af4 <HAL_DMA_Start_IT>:
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b086      	sub	sp, #24
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	60f8      	str	r0, [r7, #12]
 8010afc:	60b9      	str	r1, [r7, #8]
 8010afe:	607a      	str	r2, [r7, #4]
 8010b00:	603b      	str	r3, [r7, #0]
 8010b02:	2300      	movs	r3, #0
 8010b04:	75fb      	strb	r3, [r7, #23]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b0a:	613b      	str	r3, [r7, #16]
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010b12:	2b01      	cmp	r3, #1
 8010b14:	d101      	bne.n	8010b1a <HAL_DMA_Start_IT+0x26>
 8010b16:	2302      	movs	r3, #2
 8010b18:	e040      	b.n	8010b9c <HAL_DMA_Start_IT+0xa8>
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	2201      	movs	r2, #1
 8010b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010b28:	b2db      	uxtb	r3, r3
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d12f      	bne.n	8010b8e <HAL_DMA_Start_IT+0x9a>
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	2202      	movs	r2, #2
 8010b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2200      	movs	r2, #0
 8010b3a:	655a      	str	r2, [r3, #84]	; 0x54
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	687a      	ldr	r2, [r7, #4]
 8010b40:	68b9      	ldr	r1, [r7, #8]
 8010b42:	68f8      	ldr	r0, [r7, #12]
 8010b44:	f000 f9b8 	bl	8010eb8 <DMA_SetConfig>
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b4c:	223f      	movs	r2, #63	; 0x3f
 8010b4e:	409a      	lsls	r2, r3
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	609a      	str	r2, [r3, #8]
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	681a      	ldr	r2, [r3, #0]
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f042 0216 	orr.w	r2, r2, #22
 8010b62:	601a      	str	r2, [r3, #0]
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d007      	beq.n	8010b7c <HAL_DMA_Start_IT+0x88>
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	f042 0208 	orr.w	r2, r2, #8
 8010b7a:	601a      	str	r2, [r3, #0]
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	681a      	ldr	r2, [r3, #0]
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	f042 0201 	orr.w	r2, r2, #1
 8010b8a:	601a      	str	r2, [r3, #0]
 8010b8c:	e005      	b.n	8010b9a <HAL_DMA_Start_IT+0xa6>
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2200      	movs	r2, #0
 8010b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8010b96:	2302      	movs	r3, #2
 8010b98:	75fb      	strb	r3, [r7, #23]
 8010b9a:	7dfb      	ldrb	r3, [r7, #23]
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3718      	adds	r7, #24
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <HAL_DMA_IRQHandler>:
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b086      	sub	sp, #24
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	2300      	movs	r3, #0
 8010bae:	60bb      	str	r3, [r7, #8]
 8010bb0:	4b8e      	ldr	r3, [pc, #568]	; (8010dec <HAL_DMA_IRQHandler+0x248>)
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4a8e      	ldr	r2, [pc, #568]	; (8010df0 <HAL_DMA_IRQHandler+0x24c>)
 8010bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8010bba:	0a9b      	lsrs	r3, r3, #10
 8010bbc:	617b      	str	r3, [r7, #20]
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010bc2:	613b      	str	r3, [r7, #16]
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	60fb      	str	r3, [r7, #12]
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010bce:	2208      	movs	r2, #8
 8010bd0:	409a      	lsls	r2, r3
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	4013      	ands	r3, r2
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d01a      	beq.n	8010c10 <HAL_DMA_IRQHandler+0x6c>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	f003 0304 	and.w	r3, r3, #4
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d013      	beq.n	8010c10 <HAL_DMA_IRQHandler+0x6c>
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	f022 0204 	bic.w	r2, r2, #4
 8010bf6:	601a      	str	r2, [r3, #0]
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010bfc:	2208      	movs	r2, #8
 8010bfe:	409a      	lsls	r2, r3
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	609a      	str	r2, [r3, #8]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c08:	f043 0201 	orr.w	r2, r3, #1
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	655a      	str	r2, [r3, #84]	; 0x54
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c14:	2201      	movs	r2, #1
 8010c16:	409a      	lsls	r2, r3
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	4013      	ands	r3, r2
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d012      	beq.n	8010c46 <HAL_DMA_IRQHandler+0xa2>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	695b      	ldr	r3, [r3, #20]
 8010c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d00b      	beq.n	8010c46 <HAL_DMA_IRQHandler+0xa2>
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c32:	2201      	movs	r2, #1
 8010c34:	409a      	lsls	r2, r3
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	609a      	str	r2, [r3, #8]
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c3e:	f043 0202 	orr.w	r2, r3, #2
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	655a      	str	r2, [r3, #84]	; 0x54
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c4a:	2204      	movs	r2, #4
 8010c4c:	409a      	lsls	r2, r3
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	4013      	ands	r3, r2
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d012      	beq.n	8010c7c <HAL_DMA_IRQHandler+0xd8>
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	f003 0302 	and.w	r3, r3, #2
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d00b      	beq.n	8010c7c <HAL_DMA_IRQHandler+0xd8>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c68:	2204      	movs	r2, #4
 8010c6a:	409a      	lsls	r2, r3
 8010c6c:	693b      	ldr	r3, [r7, #16]
 8010c6e:	609a      	str	r2, [r3, #8]
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c74:	f043 0204 	orr.w	r2, r3, #4
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	655a      	str	r2, [r3, #84]	; 0x54
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c80:	2210      	movs	r2, #16
 8010c82:	409a      	lsls	r2, r3
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	4013      	ands	r3, r2
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d043      	beq.n	8010d14 <HAL_DMA_IRQHandler+0x170>
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	f003 0308 	and.w	r3, r3, #8
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d03c      	beq.n	8010d14 <HAL_DMA_IRQHandler+0x170>
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c9e:	2210      	movs	r2, #16
 8010ca0:	409a      	lsls	r2, r3
 8010ca2:	693b      	ldr	r3, [r7, #16]
 8010ca4:	609a      	str	r2, [r3, #8]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d018      	beq.n	8010ce6 <HAL_DMA_IRQHandler+0x142>
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	681b      	ldr	r3, [r3, #0]
 8010cba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d108      	bne.n	8010cd4 <HAL_DMA_IRQHandler+0x130>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d024      	beq.n	8010d14 <HAL_DMA_IRQHandler+0x170>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010cce:	6878      	ldr	r0, [r7, #4]
 8010cd0:	4798      	blx	r3
 8010cd2:	e01f      	b.n	8010d14 <HAL_DMA_IRQHandler+0x170>
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d01b      	beq.n	8010d14 <HAL_DMA_IRQHandler+0x170>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010ce0:	6878      	ldr	r0, [r7, #4]
 8010ce2:	4798      	blx	r3
 8010ce4:	e016      	b.n	8010d14 <HAL_DMA_IRQHandler+0x170>
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d107      	bne.n	8010d04 <HAL_DMA_IRQHandler+0x160>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	681a      	ldr	r2, [r3, #0]
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f022 0208 	bic.w	r2, r2, #8
 8010d02:	601a      	str	r2, [r3, #0]
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d003      	beq.n	8010d14 <HAL_DMA_IRQHandler+0x170>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	4798      	blx	r3
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d18:	2220      	movs	r2, #32
 8010d1a:	409a      	lsls	r2, r3
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	4013      	ands	r3, r2
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	f000 808f 	beq.w	8010e44 <HAL_DMA_IRQHandler+0x2a0>
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	f003 0310 	and.w	r3, r3, #16
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	f000 8087 	beq.w	8010e44 <HAL_DMA_IRQHandler+0x2a0>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d3a:	2220      	movs	r2, #32
 8010d3c:	409a      	lsls	r2, r3
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	609a      	str	r2, [r3, #8]
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	2b05      	cmp	r3, #5
 8010d4c:	d136      	bne.n	8010dbc <HAL_DMA_IRQHandler+0x218>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	f022 0216 	bic.w	r2, r2, #22
 8010d5c:	601a      	str	r2, [r3, #0]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	695a      	ldr	r2, [r3, #20]
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010d6c:	615a      	str	r2, [r3, #20]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d103      	bne.n	8010d7e <HAL_DMA_IRQHandler+0x1da>
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d007      	beq.n	8010d8e <HAL_DMA_IRQHandler+0x1ea>
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	681a      	ldr	r2, [r3, #0]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	f022 0208 	bic.w	r2, r2, #8
 8010d8c:	601a      	str	r2, [r3, #0]
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d92:	223f      	movs	r2, #63	; 0x3f
 8010d94:	409a      	lsls	r2, r3
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	609a      	str	r2, [r3, #8]
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2200      	movs	r2, #0
 8010da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d07e      	beq.n	8010eb0 <HAL_DMA_IRQHandler+0x30c>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	4798      	blx	r3
 8010dba:	e079      	b.n	8010eb0 <HAL_DMA_IRQHandler+0x30c>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d01d      	beq.n	8010e06 <HAL_DMA_IRQHandler+0x262>
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d10d      	bne.n	8010df4 <HAL_DMA_IRQHandler+0x250>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d031      	beq.n	8010e44 <HAL_DMA_IRQHandler+0x2a0>
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	4798      	blx	r3
 8010de8:	e02c      	b.n	8010e44 <HAL_DMA_IRQHandler+0x2a0>
 8010dea:	bf00      	nop
 8010dec:	2000002c 	.word	0x2000002c
 8010df0:	1b4e81b5 	.word	0x1b4e81b5
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d023      	beq.n	8010e44 <HAL_DMA_IRQHandler+0x2a0>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	4798      	blx	r3
 8010e04:	e01e      	b.n	8010e44 <HAL_DMA_IRQHandler+0x2a0>
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d10f      	bne.n	8010e34 <HAL_DMA_IRQHandler+0x290>
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	681a      	ldr	r2, [r3, #0]
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f022 0210 	bic.w	r2, r2, #16
 8010e22:	601a      	str	r2, [r3, #0]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2201      	movs	r2, #1
 8010e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d003      	beq.n	8010e44 <HAL_DMA_IRQHandler+0x2a0>
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e40:	6878      	ldr	r0, [r7, #4]
 8010e42:	4798      	blx	r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d032      	beq.n	8010eb2 <HAL_DMA_IRQHandler+0x30e>
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e50:	f003 0301 	and.w	r3, r3, #1
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d022      	beq.n	8010e9e <HAL_DMA_IRQHandler+0x2fa>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2205      	movs	r2, #5
 8010e5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	f022 0201 	bic.w	r2, r2, #1
 8010e6e:	601a      	str	r2, [r3, #0]
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	3301      	adds	r3, #1
 8010e74:	60bb      	str	r3, [r7, #8]
 8010e76:	697a      	ldr	r2, [r7, #20]
 8010e78:	429a      	cmp	r2, r3
 8010e7a:	d307      	bcc.n	8010e8c <HAL_DMA_IRQHandler+0x2e8>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	f003 0301 	and.w	r3, r3, #1
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d1f2      	bne.n	8010e70 <HAL_DMA_IRQHandler+0x2cc>
 8010e8a:	e000      	b.n	8010e8e <HAL_DMA_IRQHandler+0x2ea>
 8010e8c:	bf00      	nop
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	2201      	movs	r2, #1
 8010e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	2200      	movs	r2, #0
 8010e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d005      	beq.n	8010eb2 <HAL_DMA_IRQHandler+0x30e>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010eaa:	6878      	ldr	r0, [r7, #4]
 8010eac:	4798      	blx	r3
 8010eae:	e000      	b.n	8010eb2 <HAL_DMA_IRQHandler+0x30e>
 8010eb0:	bf00      	nop
 8010eb2:	3718      	adds	r7, #24
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <DMA_SetConfig>:
 8010eb8:	b480      	push	{r7}
 8010eba:	b085      	sub	sp, #20
 8010ebc:	af00      	add	r7, sp, #0
 8010ebe:	60f8      	str	r0, [r7, #12]
 8010ec0:	60b9      	str	r1, [r7, #8]
 8010ec2:	607a      	str	r2, [r7, #4]
 8010ec4:	603b      	str	r3, [r7, #0]
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	681a      	ldr	r2, [r3, #0]
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010ed4:	601a      	str	r2, [r3, #0]
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	683a      	ldr	r2, [r7, #0]
 8010edc:	605a      	str	r2, [r3, #4]
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	689b      	ldr	r3, [r3, #8]
 8010ee2:	2b40      	cmp	r3, #64	; 0x40
 8010ee4:	d108      	bne.n	8010ef8 <DMA_SetConfig+0x40>
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	609a      	str	r2, [r3, #8]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	68ba      	ldr	r2, [r7, #8]
 8010ef4:	60da      	str	r2, [r3, #12]
 8010ef6:	e007      	b.n	8010f08 <DMA_SetConfig+0x50>
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	68ba      	ldr	r2, [r7, #8]
 8010efe:	609a      	str	r2, [r3, #8]
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	60da      	str	r2, [r3, #12]
 8010f08:	bf00      	nop
 8010f0a:	3714      	adds	r7, #20
 8010f0c:	46bd      	mov	sp, r7
 8010f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f12:	4770      	bx	lr

08010f14 <DMA_CalcBaseAndBitshift>:
 8010f14:	b480      	push	{r7}
 8010f16:	b085      	sub	sp, #20
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	6078      	str	r0, [r7, #4]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	b2db      	uxtb	r3, r3
 8010f22:	3b10      	subs	r3, #16
 8010f24:	4a14      	ldr	r2, [pc, #80]	; (8010f78 <DMA_CalcBaseAndBitshift+0x64>)
 8010f26:	fba2 2303 	umull	r2, r3, r2, r3
 8010f2a:	091b      	lsrs	r3, r3, #4
 8010f2c:	60fb      	str	r3, [r7, #12]
 8010f2e:	4a13      	ldr	r2, [pc, #76]	; (8010f7c <DMA_CalcBaseAndBitshift+0x68>)
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	4413      	add	r3, r2
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	461a      	mov	r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2b03      	cmp	r3, #3
 8010f40:	d909      	bls.n	8010f56 <DMA_CalcBaseAndBitshift+0x42>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010f4a:	f023 0303 	bic.w	r3, r3, #3
 8010f4e:	1d1a      	adds	r2, r3, #4
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	659a      	str	r2, [r3, #88]	; 0x58
 8010f54:	e007      	b.n	8010f66 <DMA_CalcBaseAndBitshift+0x52>
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010f5e:	f023 0303 	bic.w	r3, r3, #3
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	6593      	str	r3, [r2, #88]	; 0x58
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3714      	adds	r7, #20
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop
 8010f78:	aaaaaaab 	.word	0xaaaaaaab
 8010f7c:	0801dcb4 	.word	0x0801dcb4

08010f80 <DMA_CheckFifoParam>:
 8010f80:	b480      	push	{r7}
 8010f82:	b085      	sub	sp, #20
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
 8010f88:	2300      	movs	r3, #0
 8010f8a:	73fb      	strb	r3, [r7, #15]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f90:	60bb      	str	r3, [r7, #8]
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	699b      	ldr	r3, [r3, #24]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d11f      	bne.n	8010fda <DMA_CheckFifoParam+0x5a>
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	2b03      	cmp	r3, #3
 8010f9e:	d856      	bhi.n	801104e <DMA_CheckFifoParam+0xce>
 8010fa0:	a201      	add	r2, pc, #4	; (adr r2, 8010fa8 <DMA_CheckFifoParam+0x28>)
 8010fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fa6:	bf00      	nop
 8010fa8:	08010fb9 	.word	0x08010fb9
 8010fac:	08010fcb 	.word	0x08010fcb
 8010fb0:	08010fb9 	.word	0x08010fb9
 8010fb4:	0801104f 	.word	0x0801104f
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d046      	beq.n	8011052 <DMA_CheckFifoParam+0xd2>
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	73fb      	strb	r3, [r7, #15]
 8010fc8:	e043      	b.n	8011052 <DMA_CheckFifoParam+0xd2>
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8010fd2:	d140      	bne.n	8011056 <DMA_CheckFifoParam+0xd6>
 8010fd4:	2301      	movs	r3, #1
 8010fd6:	73fb      	strb	r3, [r7, #15]
 8010fd8:	e03d      	b.n	8011056 <DMA_CheckFifoParam+0xd6>
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	699b      	ldr	r3, [r3, #24]
 8010fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010fe2:	d121      	bne.n	8011028 <DMA_CheckFifoParam+0xa8>
 8010fe4:	68bb      	ldr	r3, [r7, #8]
 8010fe6:	2b03      	cmp	r3, #3
 8010fe8:	d837      	bhi.n	801105a <DMA_CheckFifoParam+0xda>
 8010fea:	a201      	add	r2, pc, #4	; (adr r2, 8010ff0 <DMA_CheckFifoParam+0x70>)
 8010fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ff0:	08011001 	.word	0x08011001
 8010ff4:	08011007 	.word	0x08011007
 8010ff8:	08011001 	.word	0x08011001
 8010ffc:	08011019 	.word	0x08011019
 8011000:	2301      	movs	r3, #1
 8011002:	73fb      	strb	r3, [r7, #15]
 8011004:	e030      	b.n	8011068 <DMA_CheckFifoParam+0xe8>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801100e:	2b00      	cmp	r3, #0
 8011010:	d025      	beq.n	801105e <DMA_CheckFifoParam+0xde>
 8011012:	2301      	movs	r3, #1
 8011014:	73fb      	strb	r3, [r7, #15]
 8011016:	e022      	b.n	801105e <DMA_CheckFifoParam+0xde>
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801101c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8011020:	d11f      	bne.n	8011062 <DMA_CheckFifoParam+0xe2>
 8011022:	2301      	movs	r3, #1
 8011024:	73fb      	strb	r3, [r7, #15]
 8011026:	e01c      	b.n	8011062 <DMA_CheckFifoParam+0xe2>
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	2b02      	cmp	r3, #2
 801102c:	d903      	bls.n	8011036 <DMA_CheckFifoParam+0xb6>
 801102e:	68bb      	ldr	r3, [r7, #8]
 8011030:	2b03      	cmp	r3, #3
 8011032:	d003      	beq.n	801103c <DMA_CheckFifoParam+0xbc>
 8011034:	e018      	b.n	8011068 <DMA_CheckFifoParam+0xe8>
 8011036:	2301      	movs	r3, #1
 8011038:	73fb      	strb	r3, [r7, #15]
 801103a:	e015      	b.n	8011068 <DMA_CheckFifoParam+0xe8>
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011044:	2b00      	cmp	r3, #0
 8011046:	d00e      	beq.n	8011066 <DMA_CheckFifoParam+0xe6>
 8011048:	2301      	movs	r3, #1
 801104a:	73fb      	strb	r3, [r7, #15]
 801104c:	e00b      	b.n	8011066 <DMA_CheckFifoParam+0xe6>
 801104e:	bf00      	nop
 8011050:	e00a      	b.n	8011068 <DMA_CheckFifoParam+0xe8>
 8011052:	bf00      	nop
 8011054:	e008      	b.n	8011068 <DMA_CheckFifoParam+0xe8>
 8011056:	bf00      	nop
 8011058:	e006      	b.n	8011068 <DMA_CheckFifoParam+0xe8>
 801105a:	bf00      	nop
 801105c:	e004      	b.n	8011068 <DMA_CheckFifoParam+0xe8>
 801105e:	bf00      	nop
 8011060:	e002      	b.n	8011068 <DMA_CheckFifoParam+0xe8>
 8011062:	bf00      	nop
 8011064:	e000      	b.n	8011068 <DMA_CheckFifoParam+0xe8>
 8011066:	bf00      	nop
 8011068:	7bfb      	ldrb	r3, [r7, #15]
 801106a:	4618      	mov	r0, r3
 801106c:	3714      	adds	r7, #20
 801106e:	46bd      	mov	sp, r7
 8011070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011074:	4770      	bx	lr
 8011076:	bf00      	nop

08011078 <HAL_GPIO_Init>:
 8011078:	b480      	push	{r7}
 801107a:	b089      	sub	sp, #36	; 0x24
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
 8011082:	2300      	movs	r3, #0
 8011084:	617b      	str	r3, [r7, #20]
 8011086:	2300      	movs	r3, #0
 8011088:	613b      	str	r3, [r7, #16]
 801108a:	2300      	movs	r3, #0
 801108c:	61bb      	str	r3, [r7, #24]
 801108e:	2300      	movs	r3, #0
 8011090:	61fb      	str	r3, [r7, #28]
 8011092:	e16b      	b.n	801136c <HAL_GPIO_Init+0x2f4>
 8011094:	2201      	movs	r2, #1
 8011096:	69fb      	ldr	r3, [r7, #28]
 8011098:	fa02 f303 	lsl.w	r3, r2, r3
 801109c:	617b      	str	r3, [r7, #20]
 801109e:	683b      	ldr	r3, [r7, #0]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	697a      	ldr	r2, [r7, #20]
 80110a4:	4013      	ands	r3, r2
 80110a6:	613b      	str	r3, [r7, #16]
 80110a8:	693a      	ldr	r2, [r7, #16]
 80110aa:	697b      	ldr	r3, [r7, #20]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	f040 815a 	bne.w	8011366 <HAL_GPIO_Init+0x2ee>
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	f003 0303 	and.w	r3, r3, #3
 80110ba:	2b01      	cmp	r3, #1
 80110bc:	d005      	beq.n	80110ca <HAL_GPIO_Init+0x52>
 80110be:	683b      	ldr	r3, [r7, #0]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	f003 0303 	and.w	r3, r3, #3
 80110c6:	2b02      	cmp	r3, #2
 80110c8:	d130      	bne.n	801112c <HAL_GPIO_Init+0xb4>
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	689b      	ldr	r3, [r3, #8]
 80110ce:	61bb      	str	r3, [r7, #24]
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	005b      	lsls	r3, r3, #1
 80110d4:	2203      	movs	r2, #3
 80110d6:	fa02 f303 	lsl.w	r3, r2, r3
 80110da:	43db      	mvns	r3, r3
 80110dc:	69ba      	ldr	r2, [r7, #24]
 80110de:	4013      	ands	r3, r2
 80110e0:	61bb      	str	r3, [r7, #24]
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	68da      	ldr	r2, [r3, #12]
 80110e6:	69fb      	ldr	r3, [r7, #28]
 80110e8:	005b      	lsls	r3, r3, #1
 80110ea:	fa02 f303 	lsl.w	r3, r2, r3
 80110ee:	69ba      	ldr	r2, [r7, #24]
 80110f0:	4313      	orrs	r3, r2
 80110f2:	61bb      	str	r3, [r7, #24]
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	69ba      	ldr	r2, [r7, #24]
 80110f8:	609a      	str	r2, [r3, #8]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	685b      	ldr	r3, [r3, #4]
 80110fe:	61bb      	str	r3, [r7, #24]
 8011100:	2201      	movs	r2, #1
 8011102:	69fb      	ldr	r3, [r7, #28]
 8011104:	fa02 f303 	lsl.w	r3, r2, r3
 8011108:	43db      	mvns	r3, r3
 801110a:	69ba      	ldr	r2, [r7, #24]
 801110c:	4013      	ands	r3, r2
 801110e:	61bb      	str	r3, [r7, #24]
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	091b      	lsrs	r3, r3, #4
 8011116:	f003 0201 	and.w	r2, r3, #1
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	fa02 f303 	lsl.w	r3, r2, r3
 8011120:	69ba      	ldr	r2, [r7, #24]
 8011122:	4313      	orrs	r3, r2
 8011124:	61bb      	str	r3, [r7, #24]
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	69ba      	ldr	r2, [r7, #24]
 801112a:	605a      	str	r2, [r3, #4]
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	685b      	ldr	r3, [r3, #4]
 8011130:	f003 0303 	and.w	r3, r3, #3
 8011134:	2b03      	cmp	r3, #3
 8011136:	d017      	beq.n	8011168 <HAL_GPIO_Init+0xf0>
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	61bb      	str	r3, [r7, #24]
 801113e:	69fb      	ldr	r3, [r7, #28]
 8011140:	005b      	lsls	r3, r3, #1
 8011142:	2203      	movs	r2, #3
 8011144:	fa02 f303 	lsl.w	r3, r2, r3
 8011148:	43db      	mvns	r3, r3
 801114a:	69ba      	ldr	r2, [r7, #24]
 801114c:	4013      	ands	r3, r2
 801114e:	61bb      	str	r3, [r7, #24]
 8011150:	683b      	ldr	r3, [r7, #0]
 8011152:	689a      	ldr	r2, [r3, #8]
 8011154:	69fb      	ldr	r3, [r7, #28]
 8011156:	005b      	lsls	r3, r3, #1
 8011158:	fa02 f303 	lsl.w	r3, r2, r3
 801115c:	69ba      	ldr	r2, [r7, #24]
 801115e:	4313      	orrs	r3, r2
 8011160:	61bb      	str	r3, [r7, #24]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	69ba      	ldr	r2, [r7, #24]
 8011166:	60da      	str	r2, [r3, #12]
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	685b      	ldr	r3, [r3, #4]
 801116c:	f003 0303 	and.w	r3, r3, #3
 8011170:	2b02      	cmp	r3, #2
 8011172:	d123      	bne.n	80111bc <HAL_GPIO_Init+0x144>
 8011174:	69fb      	ldr	r3, [r7, #28]
 8011176:	08da      	lsrs	r2, r3, #3
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	3208      	adds	r2, #8
 801117c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011180:	61bb      	str	r3, [r7, #24]
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	f003 0307 	and.w	r3, r3, #7
 8011188:	009b      	lsls	r3, r3, #2
 801118a:	220f      	movs	r2, #15
 801118c:	fa02 f303 	lsl.w	r3, r2, r3
 8011190:	43db      	mvns	r3, r3
 8011192:	69ba      	ldr	r2, [r7, #24]
 8011194:	4013      	ands	r3, r2
 8011196:	61bb      	str	r3, [r7, #24]
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	691a      	ldr	r2, [r3, #16]
 801119c:	69fb      	ldr	r3, [r7, #28]
 801119e:	f003 0307 	and.w	r3, r3, #7
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	fa02 f303 	lsl.w	r3, r2, r3
 80111a8:	69ba      	ldr	r2, [r7, #24]
 80111aa:	4313      	orrs	r3, r2
 80111ac:	61bb      	str	r3, [r7, #24]
 80111ae:	69fb      	ldr	r3, [r7, #28]
 80111b0:	08da      	lsrs	r2, r3, #3
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	3208      	adds	r2, #8
 80111b6:	69b9      	ldr	r1, [r7, #24]
 80111b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	61bb      	str	r3, [r7, #24]
 80111c2:	69fb      	ldr	r3, [r7, #28]
 80111c4:	005b      	lsls	r3, r3, #1
 80111c6:	2203      	movs	r2, #3
 80111c8:	fa02 f303 	lsl.w	r3, r2, r3
 80111cc:	43db      	mvns	r3, r3
 80111ce:	69ba      	ldr	r2, [r7, #24]
 80111d0:	4013      	ands	r3, r2
 80111d2:	61bb      	str	r3, [r7, #24]
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	685b      	ldr	r3, [r3, #4]
 80111d8:	f003 0203 	and.w	r2, r3, #3
 80111dc:	69fb      	ldr	r3, [r7, #28]
 80111de:	005b      	lsls	r3, r3, #1
 80111e0:	fa02 f303 	lsl.w	r3, r2, r3
 80111e4:	69ba      	ldr	r2, [r7, #24]
 80111e6:	4313      	orrs	r3, r2
 80111e8:	61bb      	str	r3, [r7, #24]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	69ba      	ldr	r2, [r7, #24]
 80111ee:	601a      	str	r2, [r3, #0]
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	685b      	ldr	r3, [r3, #4]
 80111f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	f000 80b4 	beq.w	8011366 <HAL_GPIO_Init+0x2ee>
 80111fe:	2300      	movs	r3, #0
 8011200:	60fb      	str	r3, [r7, #12]
 8011202:	4b60      	ldr	r3, [pc, #384]	; (8011384 <HAL_GPIO_Init+0x30c>)
 8011204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011206:	4a5f      	ldr	r2, [pc, #380]	; (8011384 <HAL_GPIO_Init+0x30c>)
 8011208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801120c:	6453      	str	r3, [r2, #68]	; 0x44
 801120e:	4b5d      	ldr	r3, [pc, #372]	; (8011384 <HAL_GPIO_Init+0x30c>)
 8011210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011216:	60fb      	str	r3, [r7, #12]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	4a5b      	ldr	r2, [pc, #364]	; (8011388 <HAL_GPIO_Init+0x310>)
 801121c:	69fb      	ldr	r3, [r7, #28]
 801121e:	089b      	lsrs	r3, r3, #2
 8011220:	3302      	adds	r3, #2
 8011222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011226:	61bb      	str	r3, [r7, #24]
 8011228:	69fb      	ldr	r3, [r7, #28]
 801122a:	f003 0303 	and.w	r3, r3, #3
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	220f      	movs	r2, #15
 8011232:	fa02 f303 	lsl.w	r3, r2, r3
 8011236:	43db      	mvns	r3, r3
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	4013      	ands	r3, r2
 801123c:	61bb      	str	r3, [r7, #24]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	4a52      	ldr	r2, [pc, #328]	; (801138c <HAL_GPIO_Init+0x314>)
 8011242:	4293      	cmp	r3, r2
 8011244:	d02b      	beq.n	801129e <HAL_GPIO_Init+0x226>
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	4a51      	ldr	r2, [pc, #324]	; (8011390 <HAL_GPIO_Init+0x318>)
 801124a:	4293      	cmp	r3, r2
 801124c:	d025      	beq.n	801129a <HAL_GPIO_Init+0x222>
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	4a50      	ldr	r2, [pc, #320]	; (8011394 <HAL_GPIO_Init+0x31c>)
 8011252:	4293      	cmp	r3, r2
 8011254:	d01f      	beq.n	8011296 <HAL_GPIO_Init+0x21e>
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	4a4f      	ldr	r2, [pc, #316]	; (8011398 <HAL_GPIO_Init+0x320>)
 801125a:	4293      	cmp	r3, r2
 801125c:	d019      	beq.n	8011292 <HAL_GPIO_Init+0x21a>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	4a4e      	ldr	r2, [pc, #312]	; (801139c <HAL_GPIO_Init+0x324>)
 8011262:	4293      	cmp	r3, r2
 8011264:	d013      	beq.n	801128e <HAL_GPIO_Init+0x216>
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	4a4d      	ldr	r2, [pc, #308]	; (80113a0 <HAL_GPIO_Init+0x328>)
 801126a:	4293      	cmp	r3, r2
 801126c:	d00d      	beq.n	801128a <HAL_GPIO_Init+0x212>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	4a4c      	ldr	r2, [pc, #304]	; (80113a4 <HAL_GPIO_Init+0x32c>)
 8011272:	4293      	cmp	r3, r2
 8011274:	d007      	beq.n	8011286 <HAL_GPIO_Init+0x20e>
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	4a4b      	ldr	r2, [pc, #300]	; (80113a8 <HAL_GPIO_Init+0x330>)
 801127a:	4293      	cmp	r3, r2
 801127c:	d101      	bne.n	8011282 <HAL_GPIO_Init+0x20a>
 801127e:	2307      	movs	r3, #7
 8011280:	e00e      	b.n	80112a0 <HAL_GPIO_Init+0x228>
 8011282:	2308      	movs	r3, #8
 8011284:	e00c      	b.n	80112a0 <HAL_GPIO_Init+0x228>
 8011286:	2306      	movs	r3, #6
 8011288:	e00a      	b.n	80112a0 <HAL_GPIO_Init+0x228>
 801128a:	2305      	movs	r3, #5
 801128c:	e008      	b.n	80112a0 <HAL_GPIO_Init+0x228>
 801128e:	2304      	movs	r3, #4
 8011290:	e006      	b.n	80112a0 <HAL_GPIO_Init+0x228>
 8011292:	2303      	movs	r3, #3
 8011294:	e004      	b.n	80112a0 <HAL_GPIO_Init+0x228>
 8011296:	2302      	movs	r3, #2
 8011298:	e002      	b.n	80112a0 <HAL_GPIO_Init+0x228>
 801129a:	2301      	movs	r3, #1
 801129c:	e000      	b.n	80112a0 <HAL_GPIO_Init+0x228>
 801129e:	2300      	movs	r3, #0
 80112a0:	69fa      	ldr	r2, [r7, #28]
 80112a2:	f002 0203 	and.w	r2, r2, #3
 80112a6:	0092      	lsls	r2, r2, #2
 80112a8:	4093      	lsls	r3, r2
 80112aa:	69ba      	ldr	r2, [r7, #24]
 80112ac:	4313      	orrs	r3, r2
 80112ae:	61bb      	str	r3, [r7, #24]
 80112b0:	4935      	ldr	r1, [pc, #212]	; (8011388 <HAL_GPIO_Init+0x310>)
 80112b2:	69fb      	ldr	r3, [r7, #28]
 80112b4:	089b      	lsrs	r3, r3, #2
 80112b6:	3302      	adds	r3, #2
 80112b8:	69ba      	ldr	r2, [r7, #24]
 80112ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80112be:	4b3b      	ldr	r3, [pc, #236]	; (80113ac <HAL_GPIO_Init+0x334>)
 80112c0:	689b      	ldr	r3, [r3, #8]
 80112c2:	61bb      	str	r3, [r7, #24]
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	43db      	mvns	r3, r3
 80112c8:	69ba      	ldr	r2, [r7, #24]
 80112ca:	4013      	ands	r3, r2
 80112cc:	61bb      	str	r3, [r7, #24]
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	685b      	ldr	r3, [r3, #4]
 80112d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d003      	beq.n	80112e2 <HAL_GPIO_Init+0x26a>
 80112da:	69ba      	ldr	r2, [r7, #24]
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	4313      	orrs	r3, r2
 80112e0:	61bb      	str	r3, [r7, #24]
 80112e2:	4a32      	ldr	r2, [pc, #200]	; (80113ac <HAL_GPIO_Init+0x334>)
 80112e4:	69bb      	ldr	r3, [r7, #24]
 80112e6:	6093      	str	r3, [r2, #8]
 80112e8:	4b30      	ldr	r3, [pc, #192]	; (80113ac <HAL_GPIO_Init+0x334>)
 80112ea:	68db      	ldr	r3, [r3, #12]
 80112ec:	61bb      	str	r3, [r7, #24]
 80112ee:	693b      	ldr	r3, [r7, #16]
 80112f0:	43db      	mvns	r3, r3
 80112f2:	69ba      	ldr	r2, [r7, #24]
 80112f4:	4013      	ands	r3, r2
 80112f6:	61bb      	str	r3, [r7, #24]
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	685b      	ldr	r3, [r3, #4]
 80112fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011300:	2b00      	cmp	r3, #0
 8011302:	d003      	beq.n	801130c <HAL_GPIO_Init+0x294>
 8011304:	69ba      	ldr	r2, [r7, #24]
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	4313      	orrs	r3, r2
 801130a:	61bb      	str	r3, [r7, #24]
 801130c:	4a27      	ldr	r2, [pc, #156]	; (80113ac <HAL_GPIO_Init+0x334>)
 801130e:	69bb      	ldr	r3, [r7, #24]
 8011310:	60d3      	str	r3, [r2, #12]
 8011312:	4b26      	ldr	r3, [pc, #152]	; (80113ac <HAL_GPIO_Init+0x334>)
 8011314:	685b      	ldr	r3, [r3, #4]
 8011316:	61bb      	str	r3, [r7, #24]
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	43db      	mvns	r3, r3
 801131c:	69ba      	ldr	r2, [r7, #24]
 801131e:	4013      	ands	r3, r2
 8011320:	61bb      	str	r3, [r7, #24]
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	685b      	ldr	r3, [r3, #4]
 8011326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801132a:	2b00      	cmp	r3, #0
 801132c:	d003      	beq.n	8011336 <HAL_GPIO_Init+0x2be>
 801132e:	69ba      	ldr	r2, [r7, #24]
 8011330:	693b      	ldr	r3, [r7, #16]
 8011332:	4313      	orrs	r3, r2
 8011334:	61bb      	str	r3, [r7, #24]
 8011336:	4a1d      	ldr	r2, [pc, #116]	; (80113ac <HAL_GPIO_Init+0x334>)
 8011338:	69bb      	ldr	r3, [r7, #24]
 801133a:	6053      	str	r3, [r2, #4]
 801133c:	4b1b      	ldr	r3, [pc, #108]	; (80113ac <HAL_GPIO_Init+0x334>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	61bb      	str	r3, [r7, #24]
 8011342:	693b      	ldr	r3, [r7, #16]
 8011344:	43db      	mvns	r3, r3
 8011346:	69ba      	ldr	r2, [r7, #24]
 8011348:	4013      	ands	r3, r2
 801134a:	61bb      	str	r3, [r7, #24]
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011354:	2b00      	cmp	r3, #0
 8011356:	d003      	beq.n	8011360 <HAL_GPIO_Init+0x2e8>
 8011358:	69ba      	ldr	r2, [r7, #24]
 801135a:	693b      	ldr	r3, [r7, #16]
 801135c:	4313      	orrs	r3, r2
 801135e:	61bb      	str	r3, [r7, #24]
 8011360:	4a12      	ldr	r2, [pc, #72]	; (80113ac <HAL_GPIO_Init+0x334>)
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	6013      	str	r3, [r2, #0]
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	3301      	adds	r3, #1
 801136a:	61fb      	str	r3, [r7, #28]
 801136c:	69fb      	ldr	r3, [r7, #28]
 801136e:	2b0f      	cmp	r3, #15
 8011370:	f67f ae90 	bls.w	8011094 <HAL_GPIO_Init+0x1c>
 8011374:	bf00      	nop
 8011376:	bf00      	nop
 8011378:	3724      	adds	r7, #36	; 0x24
 801137a:	46bd      	mov	sp, r7
 801137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011380:	4770      	bx	lr
 8011382:	bf00      	nop
 8011384:	40023800 	.word	0x40023800
 8011388:	40013800 	.word	0x40013800
 801138c:	40020000 	.word	0x40020000
 8011390:	40020400 	.word	0x40020400
 8011394:	40020800 	.word	0x40020800
 8011398:	40020c00 	.word	0x40020c00
 801139c:	40021000 	.word	0x40021000
 80113a0:	40021400 	.word	0x40021400
 80113a4:	40021800 	.word	0x40021800
 80113a8:	40021c00 	.word	0x40021c00
 80113ac:	40013c00 	.word	0x40013c00

080113b0 <HAL_GPIO_ReadPin>:
 80113b0:	b480      	push	{r7}
 80113b2:	b085      	sub	sp, #20
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	460b      	mov	r3, r1
 80113ba:	807b      	strh	r3, [r7, #2]
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	691a      	ldr	r2, [r3, #16]
 80113c0:	887b      	ldrh	r3, [r7, #2]
 80113c2:	4013      	ands	r3, r2
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d002      	beq.n	80113ce <HAL_GPIO_ReadPin+0x1e>
 80113c8:	2301      	movs	r3, #1
 80113ca:	73fb      	strb	r3, [r7, #15]
 80113cc:	e001      	b.n	80113d2 <HAL_GPIO_ReadPin+0x22>
 80113ce:	2300      	movs	r3, #0
 80113d0:	73fb      	strb	r3, [r7, #15]
 80113d2:	7bfb      	ldrb	r3, [r7, #15]
 80113d4:	4618      	mov	r0, r3
 80113d6:	3714      	adds	r7, #20
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr

080113e0 <HAL_GPIO_WritePin>:
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	460b      	mov	r3, r1
 80113ea:	807b      	strh	r3, [r7, #2]
 80113ec:	4613      	mov	r3, r2
 80113ee:	707b      	strb	r3, [r7, #1]
 80113f0:	787b      	ldrb	r3, [r7, #1]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d003      	beq.n	80113fe <HAL_GPIO_WritePin+0x1e>
 80113f6:	887a      	ldrh	r2, [r7, #2]
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	619a      	str	r2, [r3, #24]
 80113fc:	e003      	b.n	8011406 <HAL_GPIO_WritePin+0x26>
 80113fe:	887b      	ldrh	r3, [r7, #2]
 8011400:	041a      	lsls	r2, r3, #16
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	619a      	str	r2, [r3, #24]
 8011406:	bf00      	nop
 8011408:	370c      	adds	r7, #12
 801140a:	46bd      	mov	sp, r7
 801140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011410:	4770      	bx	lr
	...

08011414 <HAL_GPIO_EXTI_IRQHandler>:
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	4603      	mov	r3, r0
 801141c:	80fb      	strh	r3, [r7, #6]
 801141e:	4b08      	ldr	r3, [pc, #32]	; (8011440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8011420:	695a      	ldr	r2, [r3, #20]
 8011422:	88fb      	ldrh	r3, [r7, #6]
 8011424:	4013      	ands	r3, r2
 8011426:	2b00      	cmp	r3, #0
 8011428:	d006      	beq.n	8011438 <HAL_GPIO_EXTI_IRQHandler+0x24>
 801142a:	4a05      	ldr	r2, [pc, #20]	; (8011440 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801142c:	88fb      	ldrh	r3, [r7, #6]
 801142e:	6153      	str	r3, [r2, #20]
 8011430:	88fb      	ldrh	r3, [r7, #6]
 8011432:	4618      	mov	r0, r3
 8011434:	f002 ffe9 	bl	801440a <HAL_GPIO_EXTI_Callback>
 8011438:	bf00      	nop
 801143a:	3708      	adds	r7, #8
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}
 8011440:	40013c00 	.word	0x40013c00

08011444 <HAL_I2C_Init>:
 8011444:	b580      	push	{r7, lr}
 8011446:	b084      	sub	sp, #16
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <HAL_I2C_Init+0x12>
 8011452:	2301      	movs	r3, #1
 8011454:	e12b      	b.n	80116ae <HAL_I2C_Init+0x26a>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801145c:	b2db      	uxtb	r3, r3
 801145e:	2b00      	cmp	r3, #0
 8011460:	d106      	bne.n	8011470 <HAL_I2C_Init+0x2c>
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2200      	movs	r2, #0
 8011466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f7fc fea6 	bl	800e1bc <HAL_I2C_MspInit>
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2224      	movs	r2, #36	; 0x24
 8011474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	f022 0201 	bic.w	r2, r2, #1
 8011486:	601a      	str	r2, [r3, #0]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	681a      	ldr	r2, [r3, #0]
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011496:	601a      	str	r2, [r3, #0]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	681a      	ldr	r2, [r3, #0]
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80114a6:	601a      	str	r2, [r3, #0]
 80114a8:	f000 fd7e 	bl	8011fa8 <HAL_RCC_GetPCLK1Freq>
 80114ac:	60f8      	str	r0, [r7, #12]
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	685b      	ldr	r3, [r3, #4]
 80114b2:	4a81      	ldr	r2, [pc, #516]	; (80116b8 <HAL_I2C_Init+0x274>)
 80114b4:	4293      	cmp	r3, r2
 80114b6:	d807      	bhi.n	80114c8 <HAL_I2C_Init+0x84>
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	4a80      	ldr	r2, [pc, #512]	; (80116bc <HAL_I2C_Init+0x278>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	bf94      	ite	ls
 80114c0:	2301      	movls	r3, #1
 80114c2:	2300      	movhi	r3, #0
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	e006      	b.n	80114d6 <HAL_I2C_Init+0x92>
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	4a7d      	ldr	r2, [pc, #500]	; (80116c0 <HAL_I2C_Init+0x27c>)
 80114cc:	4293      	cmp	r3, r2
 80114ce:	bf94      	ite	ls
 80114d0:	2301      	movls	r3, #1
 80114d2:	2300      	movhi	r3, #0
 80114d4:	b2db      	uxtb	r3, r3
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d001      	beq.n	80114de <HAL_I2C_Init+0x9a>
 80114da:	2301      	movs	r3, #1
 80114dc:	e0e7      	b.n	80116ae <HAL_I2C_Init+0x26a>
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	4a78      	ldr	r2, [pc, #480]	; (80116c4 <HAL_I2C_Init+0x280>)
 80114e2:	fba2 2303 	umull	r2, r3, r2, r3
 80114e6:	0c9b      	lsrs	r3, r3, #18
 80114e8:	60bb      	str	r3, [r7, #8]
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	68ba      	ldr	r2, [r7, #8]
 80114fa:	430a      	orrs	r2, r1
 80114fc:	605a      	str	r2, [r3, #4]
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	6a1b      	ldr	r3, [r3, #32]
 8011504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	685b      	ldr	r3, [r3, #4]
 801150c:	4a6a      	ldr	r2, [pc, #424]	; (80116b8 <HAL_I2C_Init+0x274>)
 801150e:	4293      	cmp	r3, r2
 8011510:	d802      	bhi.n	8011518 <HAL_I2C_Init+0xd4>
 8011512:	68bb      	ldr	r3, [r7, #8]
 8011514:	3301      	adds	r3, #1
 8011516:	e009      	b.n	801152c <HAL_I2C_Init+0xe8>
 8011518:	68bb      	ldr	r3, [r7, #8]
 801151a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801151e:	fb02 f303 	mul.w	r3, r2, r3
 8011522:	4a69      	ldr	r2, [pc, #420]	; (80116c8 <HAL_I2C_Init+0x284>)
 8011524:	fba2 2303 	umull	r2, r3, r2, r3
 8011528:	099b      	lsrs	r3, r3, #6
 801152a:	3301      	adds	r3, #1
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	6812      	ldr	r2, [r2, #0]
 8011530:	430b      	orrs	r3, r1
 8011532:	6213      	str	r3, [r2, #32]
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	69db      	ldr	r3, [r3, #28]
 801153a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 801153e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	685b      	ldr	r3, [r3, #4]
 8011546:	495c      	ldr	r1, [pc, #368]	; (80116b8 <HAL_I2C_Init+0x274>)
 8011548:	428b      	cmp	r3, r1
 801154a:	d819      	bhi.n	8011580 <HAL_I2C_Init+0x13c>
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	1e59      	subs	r1, r3, #1
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	005b      	lsls	r3, r3, #1
 8011556:	fbb1 f3f3 	udiv	r3, r1, r3
 801155a:	1c59      	adds	r1, r3, #1
 801155c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8011560:	400b      	ands	r3, r1
 8011562:	2b00      	cmp	r3, #0
 8011564:	d00a      	beq.n	801157c <HAL_I2C_Init+0x138>
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	1e59      	subs	r1, r3, #1
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	005b      	lsls	r3, r3, #1
 8011570:	fbb1 f3f3 	udiv	r3, r1, r3
 8011574:	3301      	adds	r3, #1
 8011576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801157a:	e051      	b.n	8011620 <HAL_I2C_Init+0x1dc>
 801157c:	2304      	movs	r3, #4
 801157e:	e04f      	b.n	8011620 <HAL_I2C_Init+0x1dc>
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	689b      	ldr	r3, [r3, #8]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d111      	bne.n	80115ac <HAL_I2C_Init+0x168>
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	1e58      	subs	r0, r3, #1
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6859      	ldr	r1, [r3, #4]
 8011590:	460b      	mov	r3, r1
 8011592:	005b      	lsls	r3, r3, #1
 8011594:	440b      	add	r3, r1
 8011596:	fbb0 f3f3 	udiv	r3, r0, r3
 801159a:	3301      	adds	r3, #1
 801159c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	bf0c      	ite	eq
 80115a4:	2301      	moveq	r3, #1
 80115a6:	2300      	movne	r3, #0
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	e012      	b.n	80115d2 <HAL_I2C_Init+0x18e>
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	1e58      	subs	r0, r3, #1
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6859      	ldr	r1, [r3, #4]
 80115b4:	460b      	mov	r3, r1
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	440b      	add	r3, r1
 80115ba:	0099      	lsls	r1, r3, #2
 80115bc:	440b      	add	r3, r1
 80115be:	fbb0 f3f3 	udiv	r3, r0, r3
 80115c2:	3301      	adds	r3, #1
 80115c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	bf0c      	ite	eq
 80115cc:	2301      	moveq	r3, #1
 80115ce:	2300      	movne	r3, #0
 80115d0:	b2db      	uxtb	r3, r3
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d001      	beq.n	80115da <HAL_I2C_Init+0x196>
 80115d6:	2301      	movs	r3, #1
 80115d8:	e022      	b.n	8011620 <HAL_I2C_Init+0x1dc>
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d10e      	bne.n	8011600 <HAL_I2C_Init+0x1bc>
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	1e58      	subs	r0, r3, #1
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6859      	ldr	r1, [r3, #4]
 80115ea:	460b      	mov	r3, r1
 80115ec:	005b      	lsls	r3, r3, #1
 80115ee:	440b      	add	r3, r1
 80115f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80115f4:	3301      	adds	r3, #1
 80115f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80115fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80115fe:	e00f      	b.n	8011620 <HAL_I2C_Init+0x1dc>
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	1e58      	subs	r0, r3, #1
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6859      	ldr	r1, [r3, #4]
 8011608:	460b      	mov	r3, r1
 801160a:	009b      	lsls	r3, r3, #2
 801160c:	440b      	add	r3, r1
 801160e:	0099      	lsls	r1, r3, #2
 8011610:	440b      	add	r3, r1
 8011612:	fbb0 f3f3 	udiv	r3, r0, r3
 8011616:	3301      	adds	r3, #1
 8011618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801161c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011620:	6879      	ldr	r1, [r7, #4]
 8011622:	6809      	ldr	r1, [r1, #0]
 8011624:	4313      	orrs	r3, r2
 8011626:	61cb      	str	r3, [r1, #28]
 8011628:	687b      	ldr	r3, [r7, #4]
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	69da      	ldr	r2, [r3, #28]
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	6a1b      	ldr	r3, [r3, #32]
 801163a:	431a      	orrs	r2, r3
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	430a      	orrs	r2, r1
 8011642:	601a      	str	r2, [r3, #0]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	689b      	ldr	r3, [r3, #8]
 801164a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 801164e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8011652:	687a      	ldr	r2, [r7, #4]
 8011654:	6911      	ldr	r1, [r2, #16]
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	68d2      	ldr	r2, [r2, #12]
 801165a:	4311      	orrs	r1, r2
 801165c:	687a      	ldr	r2, [r7, #4]
 801165e:	6812      	ldr	r2, [r2, #0]
 8011660:	430b      	orrs	r3, r1
 8011662:	6093      	str	r3, [r2, #8]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	695a      	ldr	r2, [r3, #20]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	699b      	ldr	r3, [r3, #24]
 8011676:	431a      	orrs	r2, r3
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	430a      	orrs	r2, r1
 801167e:	60da      	str	r2, [r3, #12]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	681a      	ldr	r2, [r3, #0]
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	f042 0201 	orr.w	r2, r2, #1
 801168e:	601a      	str	r2, [r3, #0]
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2200      	movs	r2, #0
 8011694:	641a      	str	r2, [r3, #64]	; 0x40
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	2220      	movs	r2, #32
 801169a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2200      	movs	r2, #0
 80116a2:	631a      	str	r2, [r3, #48]	; 0x30
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	2200      	movs	r2, #0
 80116a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80116ac:	2300      	movs	r3, #0
 80116ae:	4618      	mov	r0, r3
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}
 80116b6:	bf00      	nop
 80116b8:	000186a0 	.word	0x000186a0
 80116bc:	001e847f 	.word	0x001e847f
 80116c0:	003d08ff 	.word	0x003d08ff
 80116c4:	431bde83 	.word	0x431bde83
 80116c8:	10624dd3 	.word	0x10624dd3

080116cc <HAL_RCC_OscConfig>:
 80116cc:	b580      	push	{r7, lr}
 80116ce:	b086      	sub	sp, #24
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	6078      	str	r0, [r7, #4]
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d101      	bne.n	80116de <HAL_RCC_OscConfig+0x12>
 80116da:	2301      	movs	r3, #1
 80116dc:	e267      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	f003 0301 	and.w	r3, r3, #1
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d075      	beq.n	80117d6 <HAL_RCC_OscConfig+0x10a>
 80116ea:	4b88      	ldr	r3, [pc, #544]	; (801190c <HAL_RCC_OscConfig+0x240>)
 80116ec:	689b      	ldr	r3, [r3, #8]
 80116ee:	f003 030c 	and.w	r3, r3, #12
 80116f2:	2b04      	cmp	r3, #4
 80116f4:	d00c      	beq.n	8011710 <HAL_RCC_OscConfig+0x44>
 80116f6:	4b85      	ldr	r3, [pc, #532]	; (801190c <HAL_RCC_OscConfig+0x240>)
 80116f8:	689b      	ldr	r3, [r3, #8]
 80116fa:	f003 030c 	and.w	r3, r3, #12
 80116fe:	2b08      	cmp	r3, #8
 8011700:	d112      	bne.n	8011728 <HAL_RCC_OscConfig+0x5c>
 8011702:	4b82      	ldr	r3, [pc, #520]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801170a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801170e:	d10b      	bne.n	8011728 <HAL_RCC_OscConfig+0x5c>
 8011710:	4b7e      	ldr	r3, [pc, #504]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011718:	2b00      	cmp	r3, #0
 801171a:	d05b      	beq.n	80117d4 <HAL_RCC_OscConfig+0x108>
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d157      	bne.n	80117d4 <HAL_RCC_OscConfig+0x108>
 8011724:	2301      	movs	r3, #1
 8011726:	e242      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	685b      	ldr	r3, [r3, #4]
 801172c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011730:	d106      	bne.n	8011740 <HAL_RCC_OscConfig+0x74>
 8011732:	4b76      	ldr	r3, [pc, #472]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	4a75      	ldr	r2, [pc, #468]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801173c:	6013      	str	r3, [r2, #0]
 801173e:	e01d      	b.n	801177c <HAL_RCC_OscConfig+0xb0>
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011748:	d10c      	bne.n	8011764 <HAL_RCC_OscConfig+0x98>
 801174a:	4b70      	ldr	r3, [pc, #448]	; (801190c <HAL_RCC_OscConfig+0x240>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	4a6f      	ldr	r2, [pc, #444]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8011754:	6013      	str	r3, [r2, #0]
 8011756:	4b6d      	ldr	r3, [pc, #436]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	4a6c      	ldr	r2, [pc, #432]	; (801190c <HAL_RCC_OscConfig+0x240>)
 801175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011760:	6013      	str	r3, [r2, #0]
 8011762:	e00b      	b.n	801177c <HAL_RCC_OscConfig+0xb0>
 8011764:	4b69      	ldr	r3, [pc, #420]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	4a68      	ldr	r2, [pc, #416]	; (801190c <HAL_RCC_OscConfig+0x240>)
 801176a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801176e:	6013      	str	r3, [r2, #0]
 8011770:	4b66      	ldr	r3, [pc, #408]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	4a65      	ldr	r2, [pc, #404]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011776:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801177a:	6013      	str	r3, [r2, #0]
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d013      	beq.n	80117ac <HAL_RCC_OscConfig+0xe0>
 8011784:	f7fd fd64 	bl	800f250 <HAL_GetTick>
 8011788:	6138      	str	r0, [r7, #16]
 801178a:	e008      	b.n	801179e <HAL_RCC_OscConfig+0xd2>
 801178c:	f7fd fd60 	bl	800f250 <HAL_GetTick>
 8011790:	4602      	mov	r2, r0
 8011792:	693b      	ldr	r3, [r7, #16]
 8011794:	1ad3      	subs	r3, r2, r3
 8011796:	2b64      	cmp	r3, #100	; 0x64
 8011798:	d901      	bls.n	801179e <HAL_RCC_OscConfig+0xd2>
 801179a:	2303      	movs	r3, #3
 801179c:	e207      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 801179e:	4b5b      	ldr	r3, [pc, #364]	; (801190c <HAL_RCC_OscConfig+0x240>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d0f0      	beq.n	801178c <HAL_RCC_OscConfig+0xc0>
 80117aa:	e014      	b.n	80117d6 <HAL_RCC_OscConfig+0x10a>
 80117ac:	f7fd fd50 	bl	800f250 <HAL_GetTick>
 80117b0:	6138      	str	r0, [r7, #16]
 80117b2:	e008      	b.n	80117c6 <HAL_RCC_OscConfig+0xfa>
 80117b4:	f7fd fd4c 	bl	800f250 <HAL_GetTick>
 80117b8:	4602      	mov	r2, r0
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	1ad3      	subs	r3, r2, r3
 80117be:	2b64      	cmp	r3, #100	; 0x64
 80117c0:	d901      	bls.n	80117c6 <HAL_RCC_OscConfig+0xfa>
 80117c2:	2303      	movs	r3, #3
 80117c4:	e1f3      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 80117c6:	4b51      	ldr	r3, [pc, #324]	; (801190c <HAL_RCC_OscConfig+0x240>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d1f0      	bne.n	80117b4 <HAL_RCC_OscConfig+0xe8>
 80117d2:	e000      	b.n	80117d6 <HAL_RCC_OscConfig+0x10a>
 80117d4:	bf00      	nop
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	f003 0302 	and.w	r3, r3, #2
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d063      	beq.n	80118aa <HAL_RCC_OscConfig+0x1de>
 80117e2:	4b4a      	ldr	r3, [pc, #296]	; (801190c <HAL_RCC_OscConfig+0x240>)
 80117e4:	689b      	ldr	r3, [r3, #8]
 80117e6:	f003 030c 	and.w	r3, r3, #12
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d00b      	beq.n	8011806 <HAL_RCC_OscConfig+0x13a>
 80117ee:	4b47      	ldr	r3, [pc, #284]	; (801190c <HAL_RCC_OscConfig+0x240>)
 80117f0:	689b      	ldr	r3, [r3, #8]
 80117f2:	f003 030c 	and.w	r3, r3, #12
 80117f6:	2b08      	cmp	r3, #8
 80117f8:	d11c      	bne.n	8011834 <HAL_RCC_OscConfig+0x168>
 80117fa:	4b44      	ldr	r3, [pc, #272]	; (801190c <HAL_RCC_OscConfig+0x240>)
 80117fc:	685b      	ldr	r3, [r3, #4]
 80117fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011802:	2b00      	cmp	r3, #0
 8011804:	d116      	bne.n	8011834 <HAL_RCC_OscConfig+0x168>
 8011806:	4b41      	ldr	r3, [pc, #260]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	f003 0302 	and.w	r3, r3, #2
 801180e:	2b00      	cmp	r3, #0
 8011810:	d005      	beq.n	801181e <HAL_RCC_OscConfig+0x152>
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	68db      	ldr	r3, [r3, #12]
 8011816:	2b01      	cmp	r3, #1
 8011818:	d001      	beq.n	801181e <HAL_RCC_OscConfig+0x152>
 801181a:	2301      	movs	r3, #1
 801181c:	e1c7      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 801181e:	4b3b      	ldr	r3, [pc, #236]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	691b      	ldr	r3, [r3, #16]
 801182a:	00db      	lsls	r3, r3, #3
 801182c:	4937      	ldr	r1, [pc, #220]	; (801190c <HAL_RCC_OscConfig+0x240>)
 801182e:	4313      	orrs	r3, r2
 8011830:	600b      	str	r3, [r1, #0]
 8011832:	e03a      	b.n	80118aa <HAL_RCC_OscConfig+0x1de>
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d020      	beq.n	801187e <HAL_RCC_OscConfig+0x1b2>
 801183c:	4b34      	ldr	r3, [pc, #208]	; (8011910 <HAL_RCC_OscConfig+0x244>)
 801183e:	2201      	movs	r2, #1
 8011840:	601a      	str	r2, [r3, #0]
 8011842:	f7fd fd05 	bl	800f250 <HAL_GetTick>
 8011846:	6138      	str	r0, [r7, #16]
 8011848:	e008      	b.n	801185c <HAL_RCC_OscConfig+0x190>
 801184a:	f7fd fd01 	bl	800f250 <HAL_GetTick>
 801184e:	4602      	mov	r2, r0
 8011850:	693b      	ldr	r3, [r7, #16]
 8011852:	1ad3      	subs	r3, r2, r3
 8011854:	2b02      	cmp	r3, #2
 8011856:	d901      	bls.n	801185c <HAL_RCC_OscConfig+0x190>
 8011858:	2303      	movs	r3, #3
 801185a:	e1a8      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 801185c:	4b2b      	ldr	r3, [pc, #172]	; (801190c <HAL_RCC_OscConfig+0x240>)
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	f003 0302 	and.w	r3, r3, #2
 8011864:	2b00      	cmp	r3, #0
 8011866:	d0f0      	beq.n	801184a <HAL_RCC_OscConfig+0x17e>
 8011868:	4b28      	ldr	r3, [pc, #160]	; (801190c <HAL_RCC_OscConfig+0x240>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	691b      	ldr	r3, [r3, #16]
 8011874:	00db      	lsls	r3, r3, #3
 8011876:	4925      	ldr	r1, [pc, #148]	; (801190c <HAL_RCC_OscConfig+0x240>)
 8011878:	4313      	orrs	r3, r2
 801187a:	600b      	str	r3, [r1, #0]
 801187c:	e015      	b.n	80118aa <HAL_RCC_OscConfig+0x1de>
 801187e:	4b24      	ldr	r3, [pc, #144]	; (8011910 <HAL_RCC_OscConfig+0x244>)
 8011880:	2200      	movs	r2, #0
 8011882:	601a      	str	r2, [r3, #0]
 8011884:	f7fd fce4 	bl	800f250 <HAL_GetTick>
 8011888:	6138      	str	r0, [r7, #16]
 801188a:	e008      	b.n	801189e <HAL_RCC_OscConfig+0x1d2>
 801188c:	f7fd fce0 	bl	800f250 <HAL_GetTick>
 8011890:	4602      	mov	r2, r0
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	1ad3      	subs	r3, r2, r3
 8011896:	2b02      	cmp	r3, #2
 8011898:	d901      	bls.n	801189e <HAL_RCC_OscConfig+0x1d2>
 801189a:	2303      	movs	r3, #3
 801189c:	e187      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 801189e:	4b1b      	ldr	r3, [pc, #108]	; (801190c <HAL_RCC_OscConfig+0x240>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	f003 0302 	and.w	r3, r3, #2
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1f0      	bne.n	801188c <HAL_RCC_OscConfig+0x1c0>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	f003 0308 	and.w	r3, r3, #8
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d036      	beq.n	8011924 <HAL_RCC_OscConfig+0x258>
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	695b      	ldr	r3, [r3, #20]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d016      	beq.n	80118ec <HAL_RCC_OscConfig+0x220>
 80118be:	4b15      	ldr	r3, [pc, #84]	; (8011914 <HAL_RCC_OscConfig+0x248>)
 80118c0:	2201      	movs	r2, #1
 80118c2:	601a      	str	r2, [r3, #0]
 80118c4:	f7fd fcc4 	bl	800f250 <HAL_GetTick>
 80118c8:	6138      	str	r0, [r7, #16]
 80118ca:	e008      	b.n	80118de <HAL_RCC_OscConfig+0x212>
 80118cc:	f7fd fcc0 	bl	800f250 <HAL_GetTick>
 80118d0:	4602      	mov	r2, r0
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	d901      	bls.n	80118de <HAL_RCC_OscConfig+0x212>
 80118da:	2303      	movs	r3, #3
 80118dc:	e167      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 80118de:	4b0b      	ldr	r3, [pc, #44]	; (801190c <HAL_RCC_OscConfig+0x240>)
 80118e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118e2:	f003 0302 	and.w	r3, r3, #2
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d0f0      	beq.n	80118cc <HAL_RCC_OscConfig+0x200>
 80118ea:	e01b      	b.n	8011924 <HAL_RCC_OscConfig+0x258>
 80118ec:	4b09      	ldr	r3, [pc, #36]	; (8011914 <HAL_RCC_OscConfig+0x248>)
 80118ee:	2200      	movs	r2, #0
 80118f0:	601a      	str	r2, [r3, #0]
 80118f2:	f7fd fcad 	bl	800f250 <HAL_GetTick>
 80118f6:	6138      	str	r0, [r7, #16]
 80118f8:	e00e      	b.n	8011918 <HAL_RCC_OscConfig+0x24c>
 80118fa:	f7fd fca9 	bl	800f250 <HAL_GetTick>
 80118fe:	4602      	mov	r2, r0
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	1ad3      	subs	r3, r2, r3
 8011904:	2b02      	cmp	r3, #2
 8011906:	d907      	bls.n	8011918 <HAL_RCC_OscConfig+0x24c>
 8011908:	2303      	movs	r3, #3
 801190a:	e150      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 801190c:	40023800 	.word	0x40023800
 8011910:	42470000 	.word	0x42470000
 8011914:	42470e80 	.word	0x42470e80
 8011918:	4b88      	ldr	r3, [pc, #544]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 801191a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801191c:	f003 0302 	and.w	r3, r3, #2
 8011920:	2b00      	cmp	r3, #0
 8011922:	d1ea      	bne.n	80118fa <HAL_RCC_OscConfig+0x22e>
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f003 0304 	and.w	r3, r3, #4
 801192c:	2b00      	cmp	r3, #0
 801192e:	f000 8097 	beq.w	8011a60 <HAL_RCC_OscConfig+0x394>
 8011932:	2300      	movs	r3, #0
 8011934:	75fb      	strb	r3, [r7, #23]
 8011936:	4b81      	ldr	r3, [pc, #516]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801193e:	2b00      	cmp	r3, #0
 8011940:	d10f      	bne.n	8011962 <HAL_RCC_OscConfig+0x296>
 8011942:	2300      	movs	r3, #0
 8011944:	60bb      	str	r3, [r7, #8]
 8011946:	4b7d      	ldr	r3, [pc, #500]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801194a:	4a7c      	ldr	r2, [pc, #496]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 801194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011950:	6413      	str	r3, [r2, #64]	; 0x40
 8011952:	4b7a      	ldr	r3, [pc, #488]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801195a:	60bb      	str	r3, [r7, #8]
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	2301      	movs	r3, #1
 8011960:	75fb      	strb	r3, [r7, #23]
 8011962:	4b77      	ldr	r3, [pc, #476]	; (8011b40 <HAL_RCC_OscConfig+0x474>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801196a:	2b00      	cmp	r3, #0
 801196c:	d118      	bne.n	80119a0 <HAL_RCC_OscConfig+0x2d4>
 801196e:	4b74      	ldr	r3, [pc, #464]	; (8011b40 <HAL_RCC_OscConfig+0x474>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	4a73      	ldr	r2, [pc, #460]	; (8011b40 <HAL_RCC_OscConfig+0x474>)
 8011974:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011978:	6013      	str	r3, [r2, #0]
 801197a:	f7fd fc69 	bl	800f250 <HAL_GetTick>
 801197e:	6138      	str	r0, [r7, #16]
 8011980:	e008      	b.n	8011994 <HAL_RCC_OscConfig+0x2c8>
 8011982:	f7fd fc65 	bl	800f250 <HAL_GetTick>
 8011986:	4602      	mov	r2, r0
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	1ad3      	subs	r3, r2, r3
 801198c:	2b02      	cmp	r3, #2
 801198e:	d901      	bls.n	8011994 <HAL_RCC_OscConfig+0x2c8>
 8011990:	2303      	movs	r3, #3
 8011992:	e10c      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 8011994:	4b6a      	ldr	r3, [pc, #424]	; (8011b40 <HAL_RCC_OscConfig+0x474>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801199c:	2b00      	cmp	r3, #0
 801199e:	d0f0      	beq.n	8011982 <HAL_RCC_OscConfig+0x2b6>
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	689b      	ldr	r3, [r3, #8]
 80119a4:	2b01      	cmp	r3, #1
 80119a6:	d106      	bne.n	80119b6 <HAL_RCC_OscConfig+0x2ea>
 80119a8:	4b64      	ldr	r3, [pc, #400]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 80119aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ac:	4a63      	ldr	r2, [pc, #396]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 80119ae:	f043 0301 	orr.w	r3, r3, #1
 80119b2:	6713      	str	r3, [r2, #112]	; 0x70
 80119b4:	e01c      	b.n	80119f0 <HAL_RCC_OscConfig+0x324>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	689b      	ldr	r3, [r3, #8]
 80119ba:	2b05      	cmp	r3, #5
 80119bc:	d10c      	bne.n	80119d8 <HAL_RCC_OscConfig+0x30c>
 80119be:	4b5f      	ldr	r3, [pc, #380]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 80119c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119c2:	4a5e      	ldr	r2, [pc, #376]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 80119c4:	f043 0304 	orr.w	r3, r3, #4
 80119c8:	6713      	str	r3, [r2, #112]	; 0x70
 80119ca:	4b5c      	ldr	r3, [pc, #368]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 80119cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ce:	4a5b      	ldr	r2, [pc, #364]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 80119d0:	f043 0301 	orr.w	r3, r3, #1
 80119d4:	6713      	str	r3, [r2, #112]	; 0x70
 80119d6:	e00b      	b.n	80119f0 <HAL_RCC_OscConfig+0x324>
 80119d8:	4b58      	ldr	r3, [pc, #352]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 80119da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119dc:	4a57      	ldr	r2, [pc, #348]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 80119de:	f023 0301 	bic.w	r3, r3, #1
 80119e2:	6713      	str	r3, [r2, #112]	; 0x70
 80119e4:	4b55      	ldr	r3, [pc, #340]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 80119e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119e8:	4a54      	ldr	r2, [pc, #336]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 80119ea:	f023 0304 	bic.w	r3, r3, #4
 80119ee:	6713      	str	r3, [r2, #112]	; 0x70
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	689b      	ldr	r3, [r3, #8]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d015      	beq.n	8011a24 <HAL_RCC_OscConfig+0x358>
 80119f8:	f7fd fc2a 	bl	800f250 <HAL_GetTick>
 80119fc:	6138      	str	r0, [r7, #16]
 80119fe:	e00a      	b.n	8011a16 <HAL_RCC_OscConfig+0x34a>
 8011a00:	f7fd fc26 	bl	800f250 <HAL_GetTick>
 8011a04:	4602      	mov	r2, r0
 8011a06:	693b      	ldr	r3, [r7, #16]
 8011a08:	1ad3      	subs	r3, r2, r3
 8011a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a0e:	4293      	cmp	r3, r2
 8011a10:	d901      	bls.n	8011a16 <HAL_RCC_OscConfig+0x34a>
 8011a12:	2303      	movs	r3, #3
 8011a14:	e0cb      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 8011a16:	4b49      	ldr	r3, [pc, #292]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a1a:	f003 0302 	and.w	r3, r3, #2
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d0ee      	beq.n	8011a00 <HAL_RCC_OscConfig+0x334>
 8011a22:	e014      	b.n	8011a4e <HAL_RCC_OscConfig+0x382>
 8011a24:	f7fd fc14 	bl	800f250 <HAL_GetTick>
 8011a28:	6138      	str	r0, [r7, #16]
 8011a2a:	e00a      	b.n	8011a42 <HAL_RCC_OscConfig+0x376>
 8011a2c:	f7fd fc10 	bl	800f250 <HAL_GetTick>
 8011a30:	4602      	mov	r2, r0
 8011a32:	693b      	ldr	r3, [r7, #16]
 8011a34:	1ad3      	subs	r3, r2, r3
 8011a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a3a:	4293      	cmp	r3, r2
 8011a3c:	d901      	bls.n	8011a42 <HAL_RCC_OscConfig+0x376>
 8011a3e:	2303      	movs	r3, #3
 8011a40:	e0b5      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 8011a42:	4b3e      	ldr	r3, [pc, #248]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a46:	f003 0302 	and.w	r3, r3, #2
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d1ee      	bne.n	8011a2c <HAL_RCC_OscConfig+0x360>
 8011a4e:	7dfb      	ldrb	r3, [r7, #23]
 8011a50:	2b01      	cmp	r3, #1
 8011a52:	d105      	bne.n	8011a60 <HAL_RCC_OscConfig+0x394>
 8011a54:	4b39      	ldr	r3, [pc, #228]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a58:	4a38      	ldr	r2, [pc, #224]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8011a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	699b      	ldr	r3, [r3, #24]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	f000 80a1 	beq.w	8011bac <HAL_RCC_OscConfig+0x4e0>
 8011a6a:	4b34      	ldr	r3, [pc, #208]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011a6c:	689b      	ldr	r3, [r3, #8]
 8011a6e:	f003 030c 	and.w	r3, r3, #12
 8011a72:	2b08      	cmp	r3, #8
 8011a74:	d05c      	beq.n	8011b30 <HAL_RCC_OscConfig+0x464>
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	699b      	ldr	r3, [r3, #24]
 8011a7a:	2b02      	cmp	r3, #2
 8011a7c:	d141      	bne.n	8011b02 <HAL_RCC_OscConfig+0x436>
 8011a7e:	4b31      	ldr	r3, [pc, #196]	; (8011b44 <HAL_RCC_OscConfig+0x478>)
 8011a80:	2200      	movs	r2, #0
 8011a82:	601a      	str	r2, [r3, #0]
 8011a84:	f7fd fbe4 	bl	800f250 <HAL_GetTick>
 8011a88:	6138      	str	r0, [r7, #16]
 8011a8a:	e008      	b.n	8011a9e <HAL_RCC_OscConfig+0x3d2>
 8011a8c:	f7fd fbe0 	bl	800f250 <HAL_GetTick>
 8011a90:	4602      	mov	r2, r0
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	1ad3      	subs	r3, r2, r3
 8011a96:	2b02      	cmp	r3, #2
 8011a98:	d901      	bls.n	8011a9e <HAL_RCC_OscConfig+0x3d2>
 8011a9a:	2303      	movs	r3, #3
 8011a9c:	e087      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 8011a9e:	4b27      	ldr	r3, [pc, #156]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d1f0      	bne.n	8011a8c <HAL_RCC_OscConfig+0x3c0>
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	69da      	ldr	r2, [r3, #28]
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6a1b      	ldr	r3, [r3, #32]
 8011ab2:	431a      	orrs	r2, r3
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab8:	019b      	lsls	r3, r3, #6
 8011aba:	431a      	orrs	r2, r3
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ac0:	085b      	lsrs	r3, r3, #1
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	041b      	lsls	r3, r3, #16
 8011ac6:	431a      	orrs	r2, r3
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011acc:	061b      	lsls	r3, r3, #24
 8011ace:	491b      	ldr	r1, [pc, #108]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011ad0:	4313      	orrs	r3, r2
 8011ad2:	604b      	str	r3, [r1, #4]
 8011ad4:	4b1b      	ldr	r3, [pc, #108]	; (8011b44 <HAL_RCC_OscConfig+0x478>)
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	601a      	str	r2, [r3, #0]
 8011ada:	f7fd fbb9 	bl	800f250 <HAL_GetTick>
 8011ade:	6138      	str	r0, [r7, #16]
 8011ae0:	e008      	b.n	8011af4 <HAL_RCC_OscConfig+0x428>
 8011ae2:	f7fd fbb5 	bl	800f250 <HAL_GetTick>
 8011ae6:	4602      	mov	r2, r0
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	1ad3      	subs	r3, r2, r3
 8011aec:	2b02      	cmp	r3, #2
 8011aee:	d901      	bls.n	8011af4 <HAL_RCC_OscConfig+0x428>
 8011af0:	2303      	movs	r3, #3
 8011af2:	e05c      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 8011af4:	4b11      	ldr	r3, [pc, #68]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011af6:	681b      	ldr	r3, [r3, #0]
 8011af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d0f0      	beq.n	8011ae2 <HAL_RCC_OscConfig+0x416>
 8011b00:	e054      	b.n	8011bac <HAL_RCC_OscConfig+0x4e0>
 8011b02:	4b10      	ldr	r3, [pc, #64]	; (8011b44 <HAL_RCC_OscConfig+0x478>)
 8011b04:	2200      	movs	r2, #0
 8011b06:	601a      	str	r2, [r3, #0]
 8011b08:	f7fd fba2 	bl	800f250 <HAL_GetTick>
 8011b0c:	6138      	str	r0, [r7, #16]
 8011b0e:	e008      	b.n	8011b22 <HAL_RCC_OscConfig+0x456>
 8011b10:	f7fd fb9e 	bl	800f250 <HAL_GetTick>
 8011b14:	4602      	mov	r2, r0
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	1ad3      	subs	r3, r2, r3
 8011b1a:	2b02      	cmp	r3, #2
 8011b1c:	d901      	bls.n	8011b22 <HAL_RCC_OscConfig+0x456>
 8011b1e:	2303      	movs	r3, #3
 8011b20:	e045      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 8011b22:	4b06      	ldr	r3, [pc, #24]	; (8011b3c <HAL_RCC_OscConfig+0x470>)
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d1f0      	bne.n	8011b10 <HAL_RCC_OscConfig+0x444>
 8011b2e:	e03d      	b.n	8011bac <HAL_RCC_OscConfig+0x4e0>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	699b      	ldr	r3, [r3, #24]
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d107      	bne.n	8011b48 <HAL_RCC_OscConfig+0x47c>
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e038      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 8011b3c:	40023800 	.word	0x40023800
 8011b40:	40007000 	.word	0x40007000
 8011b44:	42470060 	.word	0x42470060
 8011b48:	4b1b      	ldr	r3, [pc, #108]	; (8011bb8 <HAL_RCC_OscConfig+0x4ec>)
 8011b4a:	685b      	ldr	r3, [r3, #4]
 8011b4c:	60fb      	str	r3, [r7, #12]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	699b      	ldr	r3, [r3, #24]
 8011b52:	2b01      	cmp	r3, #1
 8011b54:	d028      	beq.n	8011ba8 <HAL_RCC_OscConfig+0x4dc>
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	69db      	ldr	r3, [r3, #28]
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d121      	bne.n	8011ba8 <HAL_RCC_OscConfig+0x4dc>
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6a1b      	ldr	r3, [r3, #32]
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d11a      	bne.n	8011ba8 <HAL_RCC_OscConfig+0x4dc>
 8011b72:	68fa      	ldr	r2, [r7, #12]
 8011b74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8011b78:	4013      	ands	r3, r2
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8011b7e:	0192      	lsls	r2, r2, #6
 8011b80:	4293      	cmp	r3, r2
 8011b82:	d111      	bne.n	8011ba8 <HAL_RCC_OscConfig+0x4dc>
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b8e:	085b      	lsrs	r3, r3, #1
 8011b90:	3b01      	subs	r3, #1
 8011b92:	041b      	lsls	r3, r3, #16
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d107      	bne.n	8011ba8 <HAL_RCC_OscConfig+0x4dc>
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ba2:	061b      	lsls	r3, r3, #24
 8011ba4:	429a      	cmp	r2, r3
 8011ba6:	d001      	beq.n	8011bac <HAL_RCC_OscConfig+0x4e0>
 8011ba8:	2301      	movs	r3, #1
 8011baa:	e000      	b.n	8011bae <HAL_RCC_OscConfig+0x4e2>
 8011bac:	2300      	movs	r3, #0
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3718      	adds	r7, #24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	40023800 	.word	0x40023800

08011bbc <HAL_RCC_ClockConfig>:
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	6078      	str	r0, [r7, #4]
 8011bc4:	6039      	str	r1, [r7, #0]
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d101      	bne.n	8011bd0 <HAL_RCC_ClockConfig+0x14>
 8011bcc:	2301      	movs	r3, #1
 8011bce:	e0cc      	b.n	8011d6a <HAL_RCC_ClockConfig+0x1ae>
 8011bd0:	4b68      	ldr	r3, [pc, #416]	; (8011d74 <HAL_RCC_ClockConfig+0x1b8>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	f003 0307 	and.w	r3, r3, #7
 8011bd8:	683a      	ldr	r2, [r7, #0]
 8011bda:	429a      	cmp	r2, r3
 8011bdc:	d90c      	bls.n	8011bf8 <HAL_RCC_ClockConfig+0x3c>
 8011bde:	4b65      	ldr	r3, [pc, #404]	; (8011d74 <HAL_RCC_ClockConfig+0x1b8>)
 8011be0:	683a      	ldr	r2, [r7, #0]
 8011be2:	b2d2      	uxtb	r2, r2
 8011be4:	701a      	strb	r2, [r3, #0]
 8011be6:	4b63      	ldr	r3, [pc, #396]	; (8011d74 <HAL_RCC_ClockConfig+0x1b8>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	f003 0307 	and.w	r3, r3, #7
 8011bee:	683a      	ldr	r2, [r7, #0]
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d001      	beq.n	8011bf8 <HAL_RCC_ClockConfig+0x3c>
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	e0b8      	b.n	8011d6a <HAL_RCC_ClockConfig+0x1ae>
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	f003 0302 	and.w	r3, r3, #2
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d020      	beq.n	8011c46 <HAL_RCC_ClockConfig+0x8a>
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	f003 0304 	and.w	r3, r3, #4
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d005      	beq.n	8011c1c <HAL_RCC_ClockConfig+0x60>
 8011c10:	4b59      	ldr	r3, [pc, #356]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011c12:	689b      	ldr	r3, [r3, #8]
 8011c14:	4a58      	ldr	r2, [pc, #352]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8011c1a:	6093      	str	r3, [r2, #8]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f003 0308 	and.w	r3, r3, #8
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d005      	beq.n	8011c34 <HAL_RCC_ClockConfig+0x78>
 8011c28:	4b53      	ldr	r3, [pc, #332]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011c2a:	689b      	ldr	r3, [r3, #8]
 8011c2c:	4a52      	ldr	r2, [pc, #328]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8011c32:	6093      	str	r3, [r2, #8]
 8011c34:	4b50      	ldr	r3, [pc, #320]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011c36:	689b      	ldr	r3, [r3, #8]
 8011c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	689b      	ldr	r3, [r3, #8]
 8011c40:	494d      	ldr	r1, [pc, #308]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011c42:	4313      	orrs	r3, r2
 8011c44:	608b      	str	r3, [r1, #8]
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	f003 0301 	and.w	r3, r3, #1
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d044      	beq.n	8011cdc <HAL_RCC_ClockConfig+0x120>
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	685b      	ldr	r3, [r3, #4]
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d107      	bne.n	8011c6a <HAL_RCC_ClockConfig+0xae>
 8011c5a:	4b47      	ldr	r3, [pc, #284]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d119      	bne.n	8011c9a <HAL_RCC_ClockConfig+0xde>
 8011c66:	2301      	movs	r3, #1
 8011c68:	e07f      	b.n	8011d6a <HAL_RCC_ClockConfig+0x1ae>
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	2b02      	cmp	r3, #2
 8011c70:	d003      	beq.n	8011c7a <HAL_RCC_ClockConfig+0xbe>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	2b03      	cmp	r3, #3
 8011c78:	d107      	bne.n	8011c8a <HAL_RCC_ClockConfig+0xce>
 8011c7a:	4b3f      	ldr	r3, [pc, #252]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d109      	bne.n	8011c9a <HAL_RCC_ClockConfig+0xde>
 8011c86:	2301      	movs	r3, #1
 8011c88:	e06f      	b.n	8011d6a <HAL_RCC_ClockConfig+0x1ae>
 8011c8a:	4b3b      	ldr	r3, [pc, #236]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	f003 0302 	and.w	r3, r3, #2
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d101      	bne.n	8011c9a <HAL_RCC_ClockConfig+0xde>
 8011c96:	2301      	movs	r3, #1
 8011c98:	e067      	b.n	8011d6a <HAL_RCC_ClockConfig+0x1ae>
 8011c9a:	4b37      	ldr	r3, [pc, #220]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011c9c:	689b      	ldr	r3, [r3, #8]
 8011c9e:	f023 0203 	bic.w	r2, r3, #3
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	685b      	ldr	r3, [r3, #4]
 8011ca6:	4934      	ldr	r1, [pc, #208]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	608b      	str	r3, [r1, #8]
 8011cac:	f7fd fad0 	bl	800f250 <HAL_GetTick>
 8011cb0:	60f8      	str	r0, [r7, #12]
 8011cb2:	e00a      	b.n	8011cca <HAL_RCC_ClockConfig+0x10e>
 8011cb4:	f7fd facc 	bl	800f250 <HAL_GetTick>
 8011cb8:	4602      	mov	r2, r0
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	1ad3      	subs	r3, r2, r3
 8011cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8011cc2:	4293      	cmp	r3, r2
 8011cc4:	d901      	bls.n	8011cca <HAL_RCC_ClockConfig+0x10e>
 8011cc6:	2303      	movs	r3, #3
 8011cc8:	e04f      	b.n	8011d6a <HAL_RCC_ClockConfig+0x1ae>
 8011cca:	4b2b      	ldr	r3, [pc, #172]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011ccc:	689b      	ldr	r3, [r3, #8]
 8011cce:	f003 020c 	and.w	r2, r3, #12
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	685b      	ldr	r3, [r3, #4]
 8011cd6:	009b      	lsls	r3, r3, #2
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d1eb      	bne.n	8011cb4 <HAL_RCC_ClockConfig+0xf8>
 8011cdc:	4b25      	ldr	r3, [pc, #148]	; (8011d74 <HAL_RCC_ClockConfig+0x1b8>)
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	f003 0307 	and.w	r3, r3, #7
 8011ce4:	683a      	ldr	r2, [r7, #0]
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d20c      	bcs.n	8011d04 <HAL_RCC_ClockConfig+0x148>
 8011cea:	4b22      	ldr	r3, [pc, #136]	; (8011d74 <HAL_RCC_ClockConfig+0x1b8>)
 8011cec:	683a      	ldr	r2, [r7, #0]
 8011cee:	b2d2      	uxtb	r2, r2
 8011cf0:	701a      	strb	r2, [r3, #0]
 8011cf2:	4b20      	ldr	r3, [pc, #128]	; (8011d74 <HAL_RCC_ClockConfig+0x1b8>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	f003 0307 	and.w	r3, r3, #7
 8011cfa:	683a      	ldr	r2, [r7, #0]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d001      	beq.n	8011d04 <HAL_RCC_ClockConfig+0x148>
 8011d00:	2301      	movs	r3, #1
 8011d02:	e032      	b.n	8011d6a <HAL_RCC_ClockConfig+0x1ae>
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f003 0304 	and.w	r3, r3, #4
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d008      	beq.n	8011d22 <HAL_RCC_ClockConfig+0x166>
 8011d10:	4b19      	ldr	r3, [pc, #100]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011d12:	689b      	ldr	r3, [r3, #8]
 8011d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	68db      	ldr	r3, [r3, #12]
 8011d1c:	4916      	ldr	r1, [pc, #88]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011d1e:	4313      	orrs	r3, r2
 8011d20:	608b      	str	r3, [r1, #8]
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f003 0308 	and.w	r3, r3, #8
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d009      	beq.n	8011d42 <HAL_RCC_ClockConfig+0x186>
 8011d2e:	4b12      	ldr	r3, [pc, #72]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011d30:	689b      	ldr	r3, [r3, #8]
 8011d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	691b      	ldr	r3, [r3, #16]
 8011d3a:	00db      	lsls	r3, r3, #3
 8011d3c:	490e      	ldr	r1, [pc, #56]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011d3e:	4313      	orrs	r3, r2
 8011d40:	608b      	str	r3, [r1, #8]
 8011d42:	f000 f821 	bl	8011d88 <HAL_RCC_GetSysClockFreq>
 8011d46:	4602      	mov	r2, r0
 8011d48:	4b0b      	ldr	r3, [pc, #44]	; (8011d78 <HAL_RCC_ClockConfig+0x1bc>)
 8011d4a:	689b      	ldr	r3, [r3, #8]
 8011d4c:	091b      	lsrs	r3, r3, #4
 8011d4e:	f003 030f 	and.w	r3, r3, #15
 8011d52:	490a      	ldr	r1, [pc, #40]	; (8011d7c <HAL_RCC_ClockConfig+0x1c0>)
 8011d54:	5ccb      	ldrb	r3, [r1, r3]
 8011d56:	fa22 f303 	lsr.w	r3, r2, r3
 8011d5a:	4a09      	ldr	r2, [pc, #36]	; (8011d80 <HAL_RCC_ClockConfig+0x1c4>)
 8011d5c:	6013      	str	r3, [r2, #0]
 8011d5e:	4b09      	ldr	r3, [pc, #36]	; (8011d84 <HAL_RCC_ClockConfig+0x1c8>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fc fc08 	bl	800e578 <HAL_InitTick>
 8011d68:	2300      	movs	r3, #0
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3710      	adds	r7, #16
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	40023c00 	.word	0x40023c00
 8011d78:	40023800 	.word	0x40023800
 8011d7c:	0801dc9c 	.word	0x0801dc9c
 8011d80:	2000002c 	.word	0x2000002c
 8011d84:	20000030 	.word	0x20000030

08011d88 <HAL_RCC_GetSysClockFreq>:
 8011d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011d8c:	b094      	sub	sp, #80	; 0x50
 8011d8e:	af00      	add	r7, sp, #0
 8011d90:	2300      	movs	r3, #0
 8011d92:	647b      	str	r3, [r7, #68]	; 0x44
 8011d94:	2300      	movs	r3, #0
 8011d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011d98:	2300      	movs	r3, #0
 8011d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011da0:	4b79      	ldr	r3, [pc, #484]	; (8011f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8011da2:	689b      	ldr	r3, [r3, #8]
 8011da4:	f003 030c 	and.w	r3, r3, #12
 8011da8:	2b08      	cmp	r3, #8
 8011daa:	d00d      	beq.n	8011dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8011dac:	2b08      	cmp	r3, #8
 8011dae:	f200 80e1 	bhi.w	8011f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d002      	beq.n	8011dbc <HAL_RCC_GetSysClockFreq+0x34>
 8011db6:	2b04      	cmp	r3, #4
 8011db8:	d003      	beq.n	8011dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8011dba:	e0db      	b.n	8011f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8011dbc:	4b73      	ldr	r3, [pc, #460]	; (8011f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8011dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8011dc0:	e0db      	b.n	8011f7a <HAL_RCC_GetSysClockFreq+0x1f2>
 8011dc2:	4b72      	ldr	r3, [pc, #456]	; (8011f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8011dc4:	64bb      	str	r3, [r7, #72]	; 0x48
 8011dc6:	e0d8      	b.n	8011f7a <HAL_RCC_GetSysClockFreq+0x1f2>
 8011dc8:	4b6f      	ldr	r3, [pc, #444]	; (8011f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011dd0:	647b      	str	r3, [r7, #68]	; 0x44
 8011dd2:	4b6d      	ldr	r3, [pc, #436]	; (8011f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8011dd4:	685b      	ldr	r3, [r3, #4]
 8011dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d063      	beq.n	8011ea6 <HAL_RCC_GetSysClockFreq+0x11e>
 8011dde:	4b6a      	ldr	r3, [pc, #424]	; (8011f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8011de0:	685b      	ldr	r3, [r3, #4]
 8011de2:	099b      	lsrs	r3, r3, #6
 8011de4:	2200      	movs	r2, #0
 8011de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8011de8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8011dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011df0:	633b      	str	r3, [r7, #48]	; 0x30
 8011df2:	2300      	movs	r3, #0
 8011df4:	637b      	str	r3, [r7, #52]	; 0x34
 8011df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8011dfa:	4622      	mov	r2, r4
 8011dfc:	462b      	mov	r3, r5
 8011dfe:	f04f 0000 	mov.w	r0, #0
 8011e02:	f04f 0100 	mov.w	r1, #0
 8011e06:	0159      	lsls	r1, r3, #5
 8011e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011e0c:	0150      	lsls	r0, r2, #5
 8011e0e:	4602      	mov	r2, r0
 8011e10:	460b      	mov	r3, r1
 8011e12:	4621      	mov	r1, r4
 8011e14:	1a51      	subs	r1, r2, r1
 8011e16:	6139      	str	r1, [r7, #16]
 8011e18:	4629      	mov	r1, r5
 8011e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8011e1e:	617b      	str	r3, [r7, #20]
 8011e20:	f04f 0200 	mov.w	r2, #0
 8011e24:	f04f 0300 	mov.w	r3, #0
 8011e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8011e2c:	4659      	mov	r1, fp
 8011e2e:	018b      	lsls	r3, r1, #6
 8011e30:	4651      	mov	r1, sl
 8011e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8011e36:	4651      	mov	r1, sl
 8011e38:	018a      	lsls	r2, r1, #6
 8011e3a:	4651      	mov	r1, sl
 8011e3c:	ebb2 0801 	subs.w	r8, r2, r1
 8011e40:	4659      	mov	r1, fp
 8011e42:	eb63 0901 	sbc.w	r9, r3, r1
 8011e46:	f04f 0200 	mov.w	r2, #0
 8011e4a:	f04f 0300 	mov.w	r3, #0
 8011e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8011e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8011e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8011e5a:	4690      	mov	r8, r2
 8011e5c:	4699      	mov	r9, r3
 8011e5e:	4623      	mov	r3, r4
 8011e60:	eb18 0303 	adds.w	r3, r8, r3
 8011e64:	60bb      	str	r3, [r7, #8]
 8011e66:	462b      	mov	r3, r5
 8011e68:	eb49 0303 	adc.w	r3, r9, r3
 8011e6c:	60fb      	str	r3, [r7, #12]
 8011e6e:	f04f 0200 	mov.w	r2, #0
 8011e72:	f04f 0300 	mov.w	r3, #0
 8011e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8011e7a:	4629      	mov	r1, r5
 8011e7c:	028b      	lsls	r3, r1, #10
 8011e7e:	4621      	mov	r1, r4
 8011e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011e84:	4621      	mov	r1, r4
 8011e86:	028a      	lsls	r2, r1, #10
 8011e88:	4610      	mov	r0, r2
 8011e8a:	4619      	mov	r1, r3
 8011e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011e8e:	2200      	movs	r2, #0
 8011e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8011e98:	f7ee fef6 	bl	8000c88 <__aeabi_uldivmod>
 8011e9c:	4602      	mov	r2, r0
 8011e9e:	460b      	mov	r3, r1
 8011ea0:	4613      	mov	r3, r2
 8011ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ea4:	e058      	b.n	8011f58 <HAL_RCC_GetSysClockFreq+0x1d0>
 8011ea6:	4b38      	ldr	r3, [pc, #224]	; (8011f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8011ea8:	685b      	ldr	r3, [r3, #4]
 8011eaa:	099b      	lsrs	r3, r3, #6
 8011eac:	2200      	movs	r2, #0
 8011eae:	4618      	mov	r0, r3
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8011eb6:	623b      	str	r3, [r7, #32]
 8011eb8:	2300      	movs	r3, #0
 8011eba:	627b      	str	r3, [r7, #36]	; 0x24
 8011ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011ec0:	4642      	mov	r2, r8
 8011ec2:	464b      	mov	r3, r9
 8011ec4:	f04f 0000 	mov.w	r0, #0
 8011ec8:	f04f 0100 	mov.w	r1, #0
 8011ecc:	0159      	lsls	r1, r3, #5
 8011ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011ed2:	0150      	lsls	r0, r2, #5
 8011ed4:	4602      	mov	r2, r0
 8011ed6:	460b      	mov	r3, r1
 8011ed8:	4641      	mov	r1, r8
 8011eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8011ede:	4649      	mov	r1, r9
 8011ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8011ee4:	f04f 0200 	mov.w	r2, #0
 8011ee8:	f04f 0300 	mov.w	r3, #0
 8011eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8011ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8011ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8011ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8011efc:	eb63 050b 	sbc.w	r5, r3, fp
 8011f00:	f04f 0200 	mov.w	r2, #0
 8011f04:	f04f 0300 	mov.w	r3, #0
 8011f08:	00eb      	lsls	r3, r5, #3
 8011f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8011f0e:	00e2      	lsls	r2, r4, #3
 8011f10:	4614      	mov	r4, r2
 8011f12:	461d      	mov	r5, r3
 8011f14:	4643      	mov	r3, r8
 8011f16:	18e3      	adds	r3, r4, r3
 8011f18:	603b      	str	r3, [r7, #0]
 8011f1a:	464b      	mov	r3, r9
 8011f1c:	eb45 0303 	adc.w	r3, r5, r3
 8011f20:	607b      	str	r3, [r7, #4]
 8011f22:	f04f 0200 	mov.w	r2, #0
 8011f26:	f04f 0300 	mov.w	r3, #0
 8011f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011f2e:	4629      	mov	r1, r5
 8011f30:	028b      	lsls	r3, r1, #10
 8011f32:	4621      	mov	r1, r4
 8011f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8011f38:	4621      	mov	r1, r4
 8011f3a:	028a      	lsls	r2, r1, #10
 8011f3c:	4610      	mov	r0, r2
 8011f3e:	4619      	mov	r1, r3
 8011f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f42:	2200      	movs	r2, #0
 8011f44:	61bb      	str	r3, [r7, #24]
 8011f46:	61fa      	str	r2, [r7, #28]
 8011f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011f4c:	f7ee fe9c 	bl	8000c88 <__aeabi_uldivmod>
 8011f50:	4602      	mov	r2, r0
 8011f52:	460b      	mov	r3, r1
 8011f54:	4613      	mov	r3, r2
 8011f56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011f58:	4b0b      	ldr	r3, [pc, #44]	; (8011f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8011f5a:	685b      	ldr	r3, [r3, #4]
 8011f5c:	0c1b      	lsrs	r3, r3, #16
 8011f5e:	f003 0303 	and.w	r3, r3, #3
 8011f62:	3301      	adds	r3, #1
 8011f64:	005b      	lsls	r3, r3, #1
 8011f66:	643b      	str	r3, [r7, #64]	; 0x40
 8011f68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f70:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f72:	e002      	b.n	8011f7a <HAL_RCC_GetSysClockFreq+0x1f2>
 8011f74:	4b05      	ldr	r3, [pc, #20]	; (8011f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8011f76:	64bb      	str	r3, [r7, #72]	; 0x48
 8011f78:	bf00      	nop
 8011f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	3750      	adds	r7, #80	; 0x50
 8011f80:	46bd      	mov	sp, r7
 8011f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011f86:	bf00      	nop
 8011f88:	40023800 	.word	0x40023800
 8011f8c:	00f42400 	.word	0x00f42400

08011f90 <HAL_RCC_GetHCLKFreq>:
 8011f90:	b480      	push	{r7}
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	4b03      	ldr	r3, [pc, #12]	; (8011fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr
 8011fa2:	bf00      	nop
 8011fa4:	2000002c 	.word	0x2000002c

08011fa8 <HAL_RCC_GetPCLK1Freq>:
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	f7ff fff0 	bl	8011f90 <HAL_RCC_GetHCLKFreq>
 8011fb0:	4602      	mov	r2, r0
 8011fb2:	4b05      	ldr	r3, [pc, #20]	; (8011fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8011fb4:	689b      	ldr	r3, [r3, #8]
 8011fb6:	0a9b      	lsrs	r3, r3, #10
 8011fb8:	f003 0307 	and.w	r3, r3, #7
 8011fbc:	4903      	ldr	r1, [pc, #12]	; (8011fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8011fbe:	5ccb      	ldrb	r3, [r1, r3]
 8011fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	bd80      	pop	{r7, pc}
 8011fc8:	40023800 	.word	0x40023800
 8011fcc:	0801dcac 	.word	0x0801dcac

08011fd0 <HAL_RCC_GetPCLK2Freq>:
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	f7ff ffdc 	bl	8011f90 <HAL_RCC_GetHCLKFreq>
 8011fd8:	4602      	mov	r2, r0
 8011fda:	4b05      	ldr	r3, [pc, #20]	; (8011ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8011fdc:	689b      	ldr	r3, [r3, #8]
 8011fde:	0b5b      	lsrs	r3, r3, #13
 8011fe0:	f003 0307 	and.w	r3, r3, #7
 8011fe4:	4903      	ldr	r1, [pc, #12]	; (8011ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011fe6:	5ccb      	ldrb	r3, [r1, r3]
 8011fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8011fec:	4618      	mov	r0, r3
 8011fee:	bd80      	pop	{r7, pc}
 8011ff0:	40023800 	.word	0x40023800
 8011ff4:	0801dcac 	.word	0x0801dcac

08011ff8 <HAL_RCC_GetClockConfig>:
 8011ff8:	b480      	push	{r7}
 8011ffa:	b083      	sub	sp, #12
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	6039      	str	r1, [r7, #0]
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	220f      	movs	r2, #15
 8012006:	601a      	str	r2, [r3, #0]
 8012008:	4b12      	ldr	r3, [pc, #72]	; (8012054 <HAL_RCC_GetClockConfig+0x5c>)
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	f003 0203 	and.w	r2, r3, #3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	605a      	str	r2, [r3, #4]
 8012014:	4b0f      	ldr	r3, [pc, #60]	; (8012054 <HAL_RCC_GetClockConfig+0x5c>)
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	609a      	str	r2, [r3, #8]
 8012020:	4b0c      	ldr	r3, [pc, #48]	; (8012054 <HAL_RCC_GetClockConfig+0x5c>)
 8012022:	689b      	ldr	r3, [r3, #8]
 8012024:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	60da      	str	r2, [r3, #12]
 801202c:	4b09      	ldr	r3, [pc, #36]	; (8012054 <HAL_RCC_GetClockConfig+0x5c>)
 801202e:	689b      	ldr	r3, [r3, #8]
 8012030:	08db      	lsrs	r3, r3, #3
 8012032:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	611a      	str	r2, [r3, #16]
 801203a:	4b07      	ldr	r3, [pc, #28]	; (8012058 <HAL_RCC_GetClockConfig+0x60>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	f003 0207 	and.w	r2, r3, #7
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	601a      	str	r2, [r3, #0]
 8012046:	bf00      	nop
 8012048:	370c      	adds	r7, #12
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr
 8012052:	bf00      	nop
 8012054:	40023800 	.word	0x40023800
 8012058:	40023c00 	.word	0x40023c00

0801205c <HAL_RNG_Init>:
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	2b00      	cmp	r3, #0
 8012068:	d101      	bne.n	801206e <HAL_RNG_Init+0x12>
 801206a:	2301      	movs	r3, #1
 801206c:	e01c      	b.n	80120a8 <HAL_RNG_Init+0x4c>
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	795b      	ldrb	r3, [r3, #5]
 8012072:	b2db      	uxtb	r3, r3
 8012074:	2b00      	cmp	r3, #0
 8012076:	d105      	bne.n	8012084 <HAL_RNG_Init+0x28>
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	711a      	strb	r2, [r3, #4]
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f7fc f9ae 	bl	800e3e0 <HAL_RNG_MspInit>
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2202      	movs	r2, #2
 8012088:	715a      	strb	r2, [r3, #5]
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	f042 0204 	orr.w	r2, r2, #4
 8012098:	601a      	str	r2, [r3, #0]
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2201      	movs	r2, #1
 801209e:	715a      	strb	r2, [r3, #5]
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2200      	movs	r2, #0
 80120a4:	609a      	str	r2, [r3, #8]
 80120a6:	2300      	movs	r3, #0
 80120a8:	4618      	mov	r0, r3
 80120aa:	3708      	adds	r7, #8
 80120ac:	46bd      	mov	sp, r7
 80120ae:	bd80      	pop	{r7, pc}

080120b0 <HAL_RNG_GenerateRandomNumber>:
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b084      	sub	sp, #16
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	6039      	str	r1, [r7, #0]
 80120ba:	2300      	movs	r3, #0
 80120bc:	73fb      	strb	r3, [r7, #15]
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	791b      	ldrb	r3, [r3, #4]
 80120c2:	2b01      	cmp	r3, #1
 80120c4:	d101      	bne.n	80120ca <HAL_RNG_GenerateRandomNumber+0x1a>
 80120c6:	2302      	movs	r3, #2
 80120c8:	e044      	b.n	8012154 <HAL_RNG_GenerateRandomNumber+0xa4>
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	2201      	movs	r2, #1
 80120ce:	711a      	strb	r2, [r3, #4]
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	795b      	ldrb	r3, [r3, #5]
 80120d4:	b2db      	uxtb	r3, r3
 80120d6:	2b01      	cmp	r3, #1
 80120d8:	d133      	bne.n	8012142 <HAL_RNG_GenerateRandomNumber+0x92>
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	2202      	movs	r2, #2
 80120de:	715a      	strb	r2, [r3, #5]
 80120e0:	f7fd f8b6 	bl	800f250 <HAL_GetTick>
 80120e4:	60b8      	str	r0, [r7, #8]
 80120e6:	e018      	b.n	801211a <HAL_RNG_GenerateRandomNumber+0x6a>
 80120e8:	f7fd f8b2 	bl	800f250 <HAL_GetTick>
 80120ec:	4602      	mov	r2, r0
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	1ad3      	subs	r3, r2, r3
 80120f2:	2b02      	cmp	r3, #2
 80120f4:	d911      	bls.n	801211a <HAL_RNG_GenerateRandomNumber+0x6a>
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	685b      	ldr	r3, [r3, #4]
 80120fc:	f003 0301 	and.w	r3, r3, #1
 8012100:	2b01      	cmp	r3, #1
 8012102:	d00a      	beq.n	801211a <HAL_RNG_GenerateRandomNumber+0x6a>
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2201      	movs	r2, #1
 8012108:	715a      	strb	r2, [r3, #5]
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2202      	movs	r2, #2
 801210e:	609a      	str	r2, [r3, #8]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2200      	movs	r2, #0
 8012114:	711a      	strb	r2, [r3, #4]
 8012116:	2301      	movs	r3, #1
 8012118:	e01c      	b.n	8012154 <HAL_RNG_GenerateRandomNumber+0xa4>
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	681b      	ldr	r3, [r3, #0]
 801211e:	685b      	ldr	r3, [r3, #4]
 8012120:	f003 0301 	and.w	r3, r3, #1
 8012124:	2b01      	cmp	r3, #1
 8012126:	d1df      	bne.n	80120e8 <HAL_RNG_GenerateRandomNumber+0x38>
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	689a      	ldr	r2, [r3, #8]
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	60da      	str	r2, [r3, #12]
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	68da      	ldr	r2, [r3, #12]
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	601a      	str	r2, [r3, #0]
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2201      	movs	r2, #1
 801213e:	715a      	strb	r2, [r3, #5]
 8012140:	e004      	b.n	801214c <HAL_RNG_GenerateRandomNumber+0x9c>
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2204      	movs	r2, #4
 8012146:	609a      	str	r2, [r3, #8]
 8012148:	2301      	movs	r3, #1
 801214a:	73fb      	strb	r3, [r7, #15]
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2200      	movs	r2, #0
 8012150:	711a      	strb	r2, [r3, #4]
 8012152:	7bfb      	ldrb	r3, [r7, #15]
 8012154:	4618      	mov	r0, r3
 8012156:	3710      	adds	r7, #16
 8012158:	46bd      	mov	sp, r7
 801215a:	bd80      	pop	{r7, pc}

0801215c <HAL_SPI_Init>:
 801215c:	b580      	push	{r7, lr}
 801215e:	b082      	sub	sp, #8
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d101      	bne.n	801216e <HAL_SPI_Init+0x12>
 801216a:	2301      	movs	r3, #1
 801216c:	e07b      	b.n	8012266 <HAL_SPI_Init+0x10a>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012172:	2b00      	cmp	r3, #0
 8012174:	d108      	bne.n	8012188 <HAL_SPI_Init+0x2c>
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	685b      	ldr	r3, [r3, #4]
 801217a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801217e:	d009      	beq.n	8012194 <HAL_SPI_Init+0x38>
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2200      	movs	r2, #0
 8012184:	61da      	str	r2, [r3, #28]
 8012186:	e005      	b.n	8012194 <HAL_SPI_Init+0x38>
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2200      	movs	r2, #0
 801218c:	611a      	str	r2, [r3, #16]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	2200      	movs	r2, #0
 8012192:	615a      	str	r2, [r3, #20]
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	2200      	movs	r2, #0
 8012198:	629a      	str	r2, [r3, #40]	; 0x28
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d106      	bne.n	80121b4 <HAL_SPI_Init+0x58>
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2200      	movs	r2, #0
 80121aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f7fc f96e 	bl	800e490 <HAL_SPI_MspInit>
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2202      	movs	r2, #2
 80121b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	681b      	ldr	r3, [r3, #0]
 80121c0:	681a      	ldr	r2, [r3, #0]
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80121ca:	601a      	str	r2, [r3, #0]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	689b      	ldr	r3, [r3, #8]
 80121d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80121dc:	431a      	orrs	r2, r3
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	68db      	ldr	r3, [r3, #12]
 80121e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121e6:	431a      	orrs	r2, r3
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	691b      	ldr	r3, [r3, #16]
 80121ec:	f003 0302 	and.w	r3, r3, #2
 80121f0:	431a      	orrs	r2, r3
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	695b      	ldr	r3, [r3, #20]
 80121f6:	f003 0301 	and.w	r3, r3, #1
 80121fa:	431a      	orrs	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	699b      	ldr	r3, [r3, #24]
 8012200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012204:	431a      	orrs	r2, r3
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	69db      	ldr	r3, [r3, #28]
 801220a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801220e:	431a      	orrs	r2, r3
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6a1b      	ldr	r3, [r3, #32]
 8012214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012218:	ea42 0103 	orr.w	r1, r2, r3
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012220:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	430a      	orrs	r2, r1
 801222a:	601a      	str	r2, [r3, #0]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	699b      	ldr	r3, [r3, #24]
 8012230:	0c1b      	lsrs	r3, r3, #16
 8012232:	f003 0104 	and.w	r1, r3, #4
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801223a:	f003 0210 	and.w	r2, r3, #16
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	430a      	orrs	r2, r1
 8012244:	605a      	str	r2, [r3, #4]
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	69da      	ldr	r2, [r3, #28]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012254:	61da      	str	r2, [r3, #28]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	655a      	str	r2, [r3, #84]	; 0x54
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	2201      	movs	r2, #1
 8012260:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8012264:	2300      	movs	r3, #0
 8012266:	4618      	mov	r0, r3
 8012268:	3708      	adds	r7, #8
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}

0801226e <HAL_SPI_Transmit>:
 801226e:	b580      	push	{r7, lr}
 8012270:	b088      	sub	sp, #32
 8012272:	af00      	add	r7, sp, #0
 8012274:	60f8      	str	r0, [r7, #12]
 8012276:	60b9      	str	r1, [r7, #8]
 8012278:	603b      	str	r3, [r7, #0]
 801227a:	4613      	mov	r3, r2
 801227c:	80fb      	strh	r3, [r7, #6]
 801227e:	2300      	movs	r3, #0
 8012280:	77fb      	strb	r3, [r7, #31]
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012288:	2b01      	cmp	r3, #1
 801228a:	d101      	bne.n	8012290 <HAL_SPI_Transmit+0x22>
 801228c:	2302      	movs	r3, #2
 801228e:	e126      	b.n	80124de <HAL_SPI_Transmit+0x270>
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	2201      	movs	r2, #1
 8012294:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8012298:	f7fc ffda 	bl	800f250 <HAL_GetTick>
 801229c:	61b8      	str	r0, [r7, #24]
 801229e:	88fb      	ldrh	r3, [r7, #6]
 80122a0:	82fb      	strh	r3, [r7, #22]
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80122a8:	b2db      	uxtb	r3, r3
 80122aa:	2b01      	cmp	r3, #1
 80122ac:	d002      	beq.n	80122b4 <HAL_SPI_Transmit+0x46>
 80122ae:	2302      	movs	r3, #2
 80122b0:	77fb      	strb	r3, [r7, #31]
 80122b2:	e10b      	b.n	80124cc <HAL_SPI_Transmit+0x25e>
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d002      	beq.n	80122c0 <HAL_SPI_Transmit+0x52>
 80122ba:	88fb      	ldrh	r3, [r7, #6]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d102      	bne.n	80122c6 <HAL_SPI_Transmit+0x58>
 80122c0:	2301      	movs	r3, #1
 80122c2:	77fb      	strb	r3, [r7, #31]
 80122c4:	e102      	b.n	80124cc <HAL_SPI_Transmit+0x25e>
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2203      	movs	r2, #3
 80122ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2200      	movs	r2, #0
 80122d2:	655a      	str	r2, [r3, #84]	; 0x54
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	68ba      	ldr	r2, [r7, #8]
 80122d8:	631a      	str	r2, [r3, #48]	; 0x30
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	88fa      	ldrh	r2, [r7, #6]
 80122de:	869a      	strh	r2, [r3, #52]	; 0x34
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	88fa      	ldrh	r2, [r7, #6]
 80122e4:	86da      	strh	r2, [r3, #54]	; 0x36
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	2200      	movs	r2, #0
 80122ea:	639a      	str	r2, [r3, #56]	; 0x38
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2200      	movs	r2, #0
 80122f0:	879a      	strh	r2, [r3, #60]	; 0x3c
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	2200      	movs	r2, #0
 80122f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	2200      	movs	r2, #0
 80122fc:	645a      	str	r2, [r3, #68]	; 0x44
 80122fe:	68fb      	ldr	r3, [r7, #12]
 8012300:	2200      	movs	r2, #0
 8012302:	641a      	str	r2, [r3, #64]	; 0x40
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	689b      	ldr	r3, [r3, #8]
 8012308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801230c:	d10f      	bne.n	801232e <HAL_SPI_Transmit+0xc0>
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801231c:	601a      	str	r2, [r3, #0]
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	681a      	ldr	r2, [r3, #0]
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801232c:	601a      	str	r2, [r3, #0]
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012338:	2b40      	cmp	r3, #64	; 0x40
 801233a:	d007      	beq.n	801234c <HAL_SPI_Transmit+0xde>
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	681a      	ldr	r2, [r3, #0]
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801234a:	601a      	str	r2, [r3, #0]
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	68db      	ldr	r3, [r3, #12]
 8012350:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012354:	d14b      	bne.n	80123ee <HAL_SPI_Transmit+0x180>
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	685b      	ldr	r3, [r3, #4]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d002      	beq.n	8012364 <HAL_SPI_Transmit+0xf6>
 801235e:	8afb      	ldrh	r3, [r7, #22]
 8012360:	2b01      	cmp	r3, #1
 8012362:	d13e      	bne.n	80123e2 <HAL_SPI_Transmit+0x174>
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012368:	881a      	ldrh	r2, [r3, #0]
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	60da      	str	r2, [r3, #12]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012374:	1c9a      	adds	r2, r3, #2
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	631a      	str	r2, [r3, #48]	; 0x30
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801237e:	b29b      	uxth	r3, r3
 8012380:	3b01      	subs	r3, #1
 8012382:	b29a      	uxth	r2, r3
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	86da      	strh	r2, [r3, #54]	; 0x36
 8012388:	e02b      	b.n	80123e2 <HAL_SPI_Transmit+0x174>
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	689b      	ldr	r3, [r3, #8]
 8012390:	f003 0302 	and.w	r3, r3, #2
 8012394:	2b02      	cmp	r3, #2
 8012396:	d112      	bne.n	80123be <HAL_SPI_Transmit+0x150>
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801239c:	881a      	ldrh	r2, [r3, #0]
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	60da      	str	r2, [r3, #12]
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123a8:	1c9a      	adds	r2, r3, #2
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	631a      	str	r2, [r3, #48]	; 0x30
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80123b2:	b29b      	uxth	r3, r3
 80123b4:	3b01      	subs	r3, #1
 80123b6:	b29a      	uxth	r2, r3
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80123bc:	e011      	b.n	80123e2 <HAL_SPI_Transmit+0x174>
 80123be:	f7fc ff47 	bl	800f250 <HAL_GetTick>
 80123c2:	4602      	mov	r2, r0
 80123c4:	69bb      	ldr	r3, [r7, #24]
 80123c6:	1ad3      	subs	r3, r2, r3
 80123c8:	683a      	ldr	r2, [r7, #0]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d803      	bhi.n	80123d6 <HAL_SPI_Transmit+0x168>
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123d4:	d102      	bne.n	80123dc <HAL_SPI_Transmit+0x16e>
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d102      	bne.n	80123e2 <HAL_SPI_Transmit+0x174>
 80123dc:	2303      	movs	r3, #3
 80123de:	77fb      	strb	r3, [r7, #31]
 80123e0:	e074      	b.n	80124cc <HAL_SPI_Transmit+0x25e>
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80123e6:	b29b      	uxth	r3, r3
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d1ce      	bne.n	801238a <HAL_SPI_Transmit+0x11c>
 80123ec:	e04c      	b.n	8012488 <HAL_SPI_Transmit+0x21a>
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	685b      	ldr	r3, [r3, #4]
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d002      	beq.n	80123fc <HAL_SPI_Transmit+0x18e>
 80123f6:	8afb      	ldrh	r3, [r7, #22]
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d140      	bne.n	801247e <HAL_SPI_Transmit+0x210>
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	330c      	adds	r3, #12
 8012406:	7812      	ldrb	r2, [r2, #0]
 8012408:	701a      	strb	r2, [r3, #0]
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801240e:	1c5a      	adds	r2, r3, #1
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	631a      	str	r2, [r3, #48]	; 0x30
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012418:	b29b      	uxth	r3, r3
 801241a:	3b01      	subs	r3, #1
 801241c:	b29a      	uxth	r2, r3
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	86da      	strh	r2, [r3, #54]	; 0x36
 8012422:	e02c      	b.n	801247e <HAL_SPI_Transmit+0x210>
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	689b      	ldr	r3, [r3, #8]
 801242a:	f003 0302 	and.w	r3, r3, #2
 801242e:	2b02      	cmp	r3, #2
 8012430:	d113      	bne.n	801245a <HAL_SPI_Transmit+0x1ec>
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	330c      	adds	r3, #12
 801243c:	7812      	ldrb	r2, [r2, #0]
 801243e:	701a      	strb	r2, [r3, #0]
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012444:	1c5a      	adds	r2, r3, #1
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	631a      	str	r2, [r3, #48]	; 0x30
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801244e:	b29b      	uxth	r3, r3
 8012450:	3b01      	subs	r3, #1
 8012452:	b29a      	uxth	r2, r3
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	86da      	strh	r2, [r3, #54]	; 0x36
 8012458:	e011      	b.n	801247e <HAL_SPI_Transmit+0x210>
 801245a:	f7fc fef9 	bl	800f250 <HAL_GetTick>
 801245e:	4602      	mov	r2, r0
 8012460:	69bb      	ldr	r3, [r7, #24]
 8012462:	1ad3      	subs	r3, r2, r3
 8012464:	683a      	ldr	r2, [r7, #0]
 8012466:	429a      	cmp	r2, r3
 8012468:	d803      	bhi.n	8012472 <HAL_SPI_Transmit+0x204>
 801246a:	683b      	ldr	r3, [r7, #0]
 801246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012470:	d102      	bne.n	8012478 <HAL_SPI_Transmit+0x20a>
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d102      	bne.n	801247e <HAL_SPI_Transmit+0x210>
 8012478:	2303      	movs	r3, #3
 801247a:	77fb      	strb	r3, [r7, #31]
 801247c:	e026      	b.n	80124cc <HAL_SPI_Transmit+0x25e>
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012482:	b29b      	uxth	r3, r3
 8012484:	2b00      	cmp	r3, #0
 8012486:	d1cd      	bne.n	8012424 <HAL_SPI_Transmit+0x1b6>
 8012488:	69ba      	ldr	r2, [r7, #24]
 801248a:	6839      	ldr	r1, [r7, #0]
 801248c:	68f8      	ldr	r0, [r7, #12]
 801248e:	f000 fbcb 	bl	8012c28 <SPI_EndRxTxTransaction>
 8012492:	4603      	mov	r3, r0
 8012494:	2b00      	cmp	r3, #0
 8012496:	d002      	beq.n	801249e <HAL_SPI_Transmit+0x230>
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	2220      	movs	r2, #32
 801249c:	655a      	str	r2, [r3, #84]	; 0x54
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	689b      	ldr	r3, [r3, #8]
 80124a2:	2b00      	cmp	r3, #0
 80124a4:	d10a      	bne.n	80124bc <HAL_SPI_Transmit+0x24e>
 80124a6:	2300      	movs	r3, #0
 80124a8:	613b      	str	r3, [r7, #16]
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	68db      	ldr	r3, [r3, #12]
 80124b0:	613b      	str	r3, [r7, #16]
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	689b      	ldr	r3, [r3, #8]
 80124b8:	613b      	str	r3, [r7, #16]
 80124ba:	693b      	ldr	r3, [r7, #16]
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d002      	beq.n	80124ca <HAL_SPI_Transmit+0x25c>
 80124c4:	2301      	movs	r3, #1
 80124c6:	77fb      	strb	r3, [r7, #31]
 80124c8:	e000      	b.n	80124cc <HAL_SPI_Transmit+0x25e>
 80124ca:	bf00      	nop
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	2201      	movs	r2, #1
 80124d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	2200      	movs	r2, #0
 80124d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80124dc:	7ffb      	ldrb	r3, [r7, #31]
 80124de:	4618      	mov	r0, r3
 80124e0:	3720      	adds	r7, #32
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}

080124e6 <HAL_SPI_Receive>:
 80124e6:	b580      	push	{r7, lr}
 80124e8:	b088      	sub	sp, #32
 80124ea:	af02      	add	r7, sp, #8
 80124ec:	60f8      	str	r0, [r7, #12]
 80124ee:	60b9      	str	r1, [r7, #8]
 80124f0:	603b      	str	r3, [r7, #0]
 80124f2:	4613      	mov	r3, r2
 80124f4:	80fb      	strh	r3, [r7, #6]
 80124f6:	2300      	movs	r3, #0
 80124f8:	75fb      	strb	r3, [r7, #23]
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	685b      	ldr	r3, [r3, #4]
 80124fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012502:	d112      	bne.n	801252a <HAL_SPI_Receive+0x44>
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	689b      	ldr	r3, [r3, #8]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d10e      	bne.n	801252a <HAL_SPI_Receive+0x44>
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	2204      	movs	r2, #4
 8012510:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8012514:	88fa      	ldrh	r2, [r7, #6]
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	9300      	str	r3, [sp, #0]
 801251a:	4613      	mov	r3, r2
 801251c:	68ba      	ldr	r2, [r7, #8]
 801251e:	68b9      	ldr	r1, [r7, #8]
 8012520:	68f8      	ldr	r0, [r7, #12]
 8012522:	f000 f8f1 	bl	8012708 <HAL_SPI_TransmitReceive>
 8012526:	4603      	mov	r3, r0
 8012528:	e0ea      	b.n	8012700 <HAL_SPI_Receive+0x21a>
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012530:	2b01      	cmp	r3, #1
 8012532:	d101      	bne.n	8012538 <HAL_SPI_Receive+0x52>
 8012534:	2302      	movs	r3, #2
 8012536:	e0e3      	b.n	8012700 <HAL_SPI_Receive+0x21a>
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	2201      	movs	r2, #1
 801253c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8012540:	f7fc fe86 	bl	800f250 <HAL_GetTick>
 8012544:	6138      	str	r0, [r7, #16]
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801254c:	b2db      	uxtb	r3, r3
 801254e:	2b01      	cmp	r3, #1
 8012550:	d002      	beq.n	8012558 <HAL_SPI_Receive+0x72>
 8012552:	2302      	movs	r3, #2
 8012554:	75fb      	strb	r3, [r7, #23]
 8012556:	e0ca      	b.n	80126ee <HAL_SPI_Receive+0x208>
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d002      	beq.n	8012564 <HAL_SPI_Receive+0x7e>
 801255e:	88fb      	ldrh	r3, [r7, #6]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d102      	bne.n	801256a <HAL_SPI_Receive+0x84>
 8012564:	2301      	movs	r3, #1
 8012566:	75fb      	strb	r3, [r7, #23]
 8012568:	e0c1      	b.n	80126ee <HAL_SPI_Receive+0x208>
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	2204      	movs	r2, #4
 801256e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2200      	movs	r2, #0
 8012576:	655a      	str	r2, [r3, #84]	; 0x54
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	68ba      	ldr	r2, [r7, #8]
 801257c:	639a      	str	r2, [r3, #56]	; 0x38
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	88fa      	ldrh	r2, [r7, #6]
 8012582:	879a      	strh	r2, [r3, #60]	; 0x3c
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	88fa      	ldrh	r2, [r7, #6]
 8012588:	87da      	strh	r2, [r3, #62]	; 0x3e
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	2200      	movs	r2, #0
 801258e:	631a      	str	r2, [r3, #48]	; 0x30
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2200      	movs	r2, #0
 8012594:	869a      	strh	r2, [r3, #52]	; 0x34
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	2200      	movs	r2, #0
 801259a:	86da      	strh	r2, [r3, #54]	; 0x36
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	2200      	movs	r2, #0
 80125a0:	641a      	str	r2, [r3, #64]	; 0x40
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	2200      	movs	r2, #0
 80125a6:	645a      	str	r2, [r3, #68]	; 0x44
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	689b      	ldr	r3, [r3, #8]
 80125ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80125b0:	d10f      	bne.n	80125d2 <HAL_SPI_Receive+0xec>
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	681a      	ldr	r2, [r3, #0]
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80125c0:	601a      	str	r2, [r3, #0]
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	681a      	ldr	r2, [r3, #0]
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80125d0:	601a      	str	r2, [r3, #0]
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125dc:	2b40      	cmp	r3, #64	; 0x40
 80125de:	d007      	beq.n	80125f0 <HAL_SPI_Receive+0x10a>
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	681a      	ldr	r2, [r3, #0]
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80125ee:	601a      	str	r2, [r3, #0]
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d162      	bne.n	80126be <HAL_SPI_Receive+0x1d8>
 80125f8:	e02e      	b.n	8012658 <HAL_SPI_Receive+0x172>
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	689b      	ldr	r3, [r3, #8]
 8012600:	f003 0301 	and.w	r3, r3, #1
 8012604:	2b01      	cmp	r3, #1
 8012606:	d115      	bne.n	8012634 <HAL_SPI_Receive+0x14e>
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	f103 020c 	add.w	r2, r3, #12
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012614:	7812      	ldrb	r2, [r2, #0]
 8012616:	b2d2      	uxtb	r2, r2
 8012618:	701a      	strb	r2, [r3, #0]
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801261e:	1c5a      	adds	r2, r3, #1
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	639a      	str	r2, [r3, #56]	; 0x38
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012628:	b29b      	uxth	r3, r3
 801262a:	3b01      	subs	r3, #1
 801262c:	b29a      	uxth	r2, r3
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012632:	e011      	b.n	8012658 <HAL_SPI_Receive+0x172>
 8012634:	f7fc fe0c 	bl	800f250 <HAL_GetTick>
 8012638:	4602      	mov	r2, r0
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	1ad3      	subs	r3, r2, r3
 801263e:	683a      	ldr	r2, [r7, #0]
 8012640:	429a      	cmp	r2, r3
 8012642:	d803      	bhi.n	801264c <HAL_SPI_Receive+0x166>
 8012644:	683b      	ldr	r3, [r7, #0]
 8012646:	f1b3 3fff 	cmp.w	r3, #4294967295
 801264a:	d102      	bne.n	8012652 <HAL_SPI_Receive+0x16c>
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d102      	bne.n	8012658 <HAL_SPI_Receive+0x172>
 8012652:	2303      	movs	r3, #3
 8012654:	75fb      	strb	r3, [r7, #23]
 8012656:	e04a      	b.n	80126ee <HAL_SPI_Receive+0x208>
 8012658:	68fb      	ldr	r3, [r7, #12]
 801265a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801265c:	b29b      	uxth	r3, r3
 801265e:	2b00      	cmp	r3, #0
 8012660:	d1cb      	bne.n	80125fa <HAL_SPI_Receive+0x114>
 8012662:	e031      	b.n	80126c8 <HAL_SPI_Receive+0x1e2>
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	689b      	ldr	r3, [r3, #8]
 801266a:	f003 0301 	and.w	r3, r3, #1
 801266e:	2b01      	cmp	r3, #1
 8012670:	d113      	bne.n	801269a <HAL_SPI_Receive+0x1b4>
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	68da      	ldr	r2, [r3, #12]
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801267c:	b292      	uxth	r2, r2
 801267e:	801a      	strh	r2, [r3, #0]
 8012680:	68fb      	ldr	r3, [r7, #12]
 8012682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012684:	1c9a      	adds	r2, r3, #2
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	639a      	str	r2, [r3, #56]	; 0x38
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801268e:	b29b      	uxth	r3, r3
 8012690:	3b01      	subs	r3, #1
 8012692:	b29a      	uxth	r2, r3
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	87da      	strh	r2, [r3, #62]	; 0x3e
 8012698:	e011      	b.n	80126be <HAL_SPI_Receive+0x1d8>
 801269a:	f7fc fdd9 	bl	800f250 <HAL_GetTick>
 801269e:	4602      	mov	r2, r0
 80126a0:	693b      	ldr	r3, [r7, #16]
 80126a2:	1ad3      	subs	r3, r2, r3
 80126a4:	683a      	ldr	r2, [r7, #0]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d803      	bhi.n	80126b2 <HAL_SPI_Receive+0x1cc>
 80126aa:	683b      	ldr	r3, [r7, #0]
 80126ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126b0:	d102      	bne.n	80126b8 <HAL_SPI_Receive+0x1d2>
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d102      	bne.n	80126be <HAL_SPI_Receive+0x1d8>
 80126b8:	2303      	movs	r3, #3
 80126ba:	75fb      	strb	r3, [r7, #23]
 80126bc:	e017      	b.n	80126ee <HAL_SPI_Receive+0x208>
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d1cd      	bne.n	8012664 <HAL_SPI_Receive+0x17e>
 80126c8:	693a      	ldr	r2, [r7, #16]
 80126ca:	6839      	ldr	r1, [r7, #0]
 80126cc:	68f8      	ldr	r0, [r7, #12]
 80126ce:	f000 fa45 	bl	8012b5c <SPI_EndRxTransaction>
 80126d2:	4603      	mov	r3, r0
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d002      	beq.n	80126de <HAL_SPI_Receive+0x1f8>
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	2220      	movs	r2, #32
 80126dc:	655a      	str	r2, [r3, #84]	; 0x54
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d002      	beq.n	80126ec <HAL_SPI_Receive+0x206>
 80126e6:	2301      	movs	r3, #1
 80126e8:	75fb      	strb	r3, [r7, #23]
 80126ea:	e000      	b.n	80126ee <HAL_SPI_Receive+0x208>
 80126ec:	bf00      	nop
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2201      	movs	r2, #1
 80126f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	2200      	movs	r2, #0
 80126fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80126fe:	7dfb      	ldrb	r3, [r7, #23]
 8012700:	4618      	mov	r0, r3
 8012702:	3718      	adds	r7, #24
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <HAL_SPI_TransmitReceive>:
 8012708:	b580      	push	{r7, lr}
 801270a:	b08c      	sub	sp, #48	; 0x30
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	607a      	str	r2, [r7, #4]
 8012714:	807b      	strh	r3, [r7, #2]
 8012716:	2301      	movs	r3, #1
 8012718:	62fb      	str	r3, [r7, #44]	; 0x2c
 801271a:	2300      	movs	r3, #0
 801271c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012726:	2b01      	cmp	r3, #1
 8012728:	d101      	bne.n	801272e <HAL_SPI_TransmitReceive+0x26>
 801272a:	2302      	movs	r3, #2
 801272c:	e18a      	b.n	8012a44 <HAL_SPI_TransmitReceive+0x33c>
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2201      	movs	r2, #1
 8012732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8012736:	f7fc fd8b 	bl	800f250 <HAL_GetTick>
 801273a:	6278      	str	r0, [r7, #36]	; 0x24
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	61fb      	str	r3, [r7, #28]
 801274c:	887b      	ldrh	r3, [r7, #2]
 801274e:	837b      	strh	r3, [r7, #26]
 8012750:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012754:	2b01      	cmp	r3, #1
 8012756:	d00f      	beq.n	8012778 <HAL_SPI_TransmitReceive+0x70>
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801275e:	d107      	bne.n	8012770 <HAL_SPI_TransmitReceive+0x68>
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	689b      	ldr	r3, [r3, #8]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d103      	bne.n	8012770 <HAL_SPI_TransmitReceive+0x68>
 8012768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801276c:	2b04      	cmp	r3, #4
 801276e:	d003      	beq.n	8012778 <HAL_SPI_TransmitReceive+0x70>
 8012770:	2302      	movs	r3, #2
 8012772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012776:	e15b      	b.n	8012a30 <HAL_SPI_TransmitReceive+0x328>
 8012778:	68bb      	ldr	r3, [r7, #8]
 801277a:	2b00      	cmp	r3, #0
 801277c:	d005      	beq.n	801278a <HAL_SPI_TransmitReceive+0x82>
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d002      	beq.n	801278a <HAL_SPI_TransmitReceive+0x82>
 8012784:	887b      	ldrh	r3, [r7, #2]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d103      	bne.n	8012792 <HAL_SPI_TransmitReceive+0x8a>
 801278a:	2301      	movs	r3, #1
 801278c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012790:	e14e      	b.n	8012a30 <HAL_SPI_TransmitReceive+0x328>
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012798:	b2db      	uxtb	r3, r3
 801279a:	2b04      	cmp	r3, #4
 801279c:	d003      	beq.n	80127a6 <HAL_SPI_TransmitReceive+0x9e>
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	2205      	movs	r2, #5
 80127a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2200      	movs	r2, #0
 80127aa:	655a      	str	r2, [r3, #84]	; 0x54
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	639a      	str	r2, [r3, #56]	; 0x38
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	887a      	ldrh	r2, [r7, #2]
 80127b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	887a      	ldrh	r2, [r7, #2]
 80127bc:	879a      	strh	r2, [r3, #60]	; 0x3c
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	68ba      	ldr	r2, [r7, #8]
 80127c2:	631a      	str	r2, [r3, #48]	; 0x30
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	887a      	ldrh	r2, [r7, #2]
 80127c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	887a      	ldrh	r2, [r7, #2]
 80127ce:	869a      	strh	r2, [r3, #52]	; 0x34
 80127d0:	68fb      	ldr	r3, [r7, #12]
 80127d2:	2200      	movs	r2, #0
 80127d4:	641a      	str	r2, [r3, #64]	; 0x40
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	2200      	movs	r2, #0
 80127da:	645a      	str	r2, [r3, #68]	; 0x44
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	681b      	ldr	r3, [r3, #0]
 80127e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127e6:	2b40      	cmp	r3, #64	; 0x40
 80127e8:	d007      	beq.n	80127fa <HAL_SPI_TransmitReceive+0xf2>
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	681a      	ldr	r2, [r3, #0]
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80127f8:	601a      	str	r2, [r3, #0]
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012802:	d178      	bne.n	80128f6 <HAL_SPI_TransmitReceive+0x1ee>
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d002      	beq.n	8012812 <HAL_SPI_TransmitReceive+0x10a>
 801280c:	8b7b      	ldrh	r3, [r7, #26]
 801280e:	2b01      	cmp	r3, #1
 8012810:	d166      	bne.n	80128e0 <HAL_SPI_TransmitReceive+0x1d8>
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012816:	881a      	ldrh	r2, [r3, #0]
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	60da      	str	r2, [r3, #12]
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012822:	1c9a      	adds	r2, r3, #2
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	631a      	str	r2, [r3, #48]	; 0x30
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801282c:	b29b      	uxth	r3, r3
 801282e:	3b01      	subs	r3, #1
 8012830:	b29a      	uxth	r2, r3
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	86da      	strh	r2, [r3, #54]	; 0x36
 8012836:	e053      	b.n	80128e0 <HAL_SPI_TransmitReceive+0x1d8>
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	689b      	ldr	r3, [r3, #8]
 801283e:	f003 0302 	and.w	r3, r3, #2
 8012842:	2b02      	cmp	r3, #2
 8012844:	d11b      	bne.n	801287e <HAL_SPI_TransmitReceive+0x176>
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801284a:	b29b      	uxth	r3, r3
 801284c:	2b00      	cmp	r3, #0
 801284e:	d016      	beq.n	801287e <HAL_SPI_TransmitReceive+0x176>
 8012850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012852:	2b01      	cmp	r3, #1
 8012854:	d113      	bne.n	801287e <HAL_SPI_TransmitReceive+0x176>
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801285a:	881a      	ldrh	r2, [r3, #0]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	60da      	str	r2, [r3, #12]
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012866:	1c9a      	adds	r2, r3, #2
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	631a      	str	r2, [r3, #48]	; 0x30
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012870:	b29b      	uxth	r3, r3
 8012872:	3b01      	subs	r3, #1
 8012874:	b29a      	uxth	r2, r3
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	86da      	strh	r2, [r3, #54]	; 0x36
 801287a:	2300      	movs	r3, #0
 801287c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801287e:	68fb      	ldr	r3, [r7, #12]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	689b      	ldr	r3, [r3, #8]
 8012884:	f003 0301 	and.w	r3, r3, #1
 8012888:	2b01      	cmp	r3, #1
 801288a:	d119      	bne.n	80128c0 <HAL_SPI_TransmitReceive+0x1b8>
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012890:	b29b      	uxth	r3, r3
 8012892:	2b00      	cmp	r3, #0
 8012894:	d014      	beq.n	80128c0 <HAL_SPI_TransmitReceive+0x1b8>
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	68da      	ldr	r2, [r3, #12]
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128a0:	b292      	uxth	r2, r2
 80128a2:	801a      	strh	r2, [r3, #0]
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128a8:	1c9a      	adds	r2, r3, #2
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	639a      	str	r2, [r3, #56]	; 0x38
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	3b01      	subs	r3, #1
 80128b6:	b29a      	uxth	r2, r3
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80128bc:	2301      	movs	r3, #1
 80128be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80128c0:	f7fc fcc6 	bl	800f250 <HAL_GetTick>
 80128c4:	4602      	mov	r2, r0
 80128c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c8:	1ad3      	subs	r3, r2, r3
 80128ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80128cc:	429a      	cmp	r2, r3
 80128ce:	d807      	bhi.n	80128e0 <HAL_SPI_TransmitReceive+0x1d8>
 80128d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128d6:	d003      	beq.n	80128e0 <HAL_SPI_TransmitReceive+0x1d8>
 80128d8:	2303      	movs	r3, #3
 80128da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80128de:	e0a7      	b.n	8012a30 <HAL_SPI_TransmitReceive+0x328>
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80128e4:	b29b      	uxth	r3, r3
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d1a6      	bne.n	8012838 <HAL_SPI_TransmitReceive+0x130>
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d1a1      	bne.n	8012838 <HAL_SPI_TransmitReceive+0x130>
 80128f4:	e07c      	b.n	80129f0 <HAL_SPI_TransmitReceive+0x2e8>
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d002      	beq.n	8012904 <HAL_SPI_TransmitReceive+0x1fc>
 80128fe:	8b7b      	ldrh	r3, [r7, #26]
 8012900:	2b01      	cmp	r3, #1
 8012902:	d16b      	bne.n	80129dc <HAL_SPI_TransmitReceive+0x2d4>
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	330c      	adds	r3, #12
 801290e:	7812      	ldrb	r2, [r2, #0]
 8012910:	701a      	strb	r2, [r3, #0]
 8012912:	68fb      	ldr	r3, [r7, #12]
 8012914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012916:	1c5a      	adds	r2, r3, #1
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	631a      	str	r2, [r3, #48]	; 0x30
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012920:	b29b      	uxth	r3, r3
 8012922:	3b01      	subs	r3, #1
 8012924:	b29a      	uxth	r2, r3
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	86da      	strh	r2, [r3, #54]	; 0x36
 801292a:	e057      	b.n	80129dc <HAL_SPI_TransmitReceive+0x2d4>
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	689b      	ldr	r3, [r3, #8]
 8012932:	f003 0302 	and.w	r3, r3, #2
 8012936:	2b02      	cmp	r3, #2
 8012938:	d11c      	bne.n	8012974 <HAL_SPI_TransmitReceive+0x26c>
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801293e:	b29b      	uxth	r3, r3
 8012940:	2b00      	cmp	r3, #0
 8012942:	d017      	beq.n	8012974 <HAL_SPI_TransmitReceive+0x26c>
 8012944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012946:	2b01      	cmp	r3, #1
 8012948:	d114      	bne.n	8012974 <HAL_SPI_TransmitReceive+0x26c>
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	330c      	adds	r3, #12
 8012954:	7812      	ldrb	r2, [r2, #0]
 8012956:	701a      	strb	r2, [r3, #0]
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801295c:	1c5a      	adds	r2, r3, #1
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	631a      	str	r2, [r3, #48]	; 0x30
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012966:	b29b      	uxth	r3, r3
 8012968:	3b01      	subs	r3, #1
 801296a:	b29a      	uxth	r2, r3
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	86da      	strh	r2, [r3, #54]	; 0x36
 8012970:	2300      	movs	r3, #0
 8012972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	689b      	ldr	r3, [r3, #8]
 801297a:	f003 0301 	and.w	r3, r3, #1
 801297e:	2b01      	cmp	r3, #1
 8012980:	d119      	bne.n	80129b6 <HAL_SPI_TransmitReceive+0x2ae>
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012986:	b29b      	uxth	r3, r3
 8012988:	2b00      	cmp	r3, #0
 801298a:	d014      	beq.n	80129b6 <HAL_SPI_TransmitReceive+0x2ae>
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	68da      	ldr	r2, [r3, #12]
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012996:	b2d2      	uxtb	r2, r2
 8012998:	701a      	strb	r2, [r3, #0]
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801299e:	1c5a      	adds	r2, r3, #1
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	639a      	str	r2, [r3, #56]	; 0x38
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	3b01      	subs	r3, #1
 80129ac:	b29a      	uxth	r2, r3
 80129ae:	68fb      	ldr	r3, [r7, #12]
 80129b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80129b2:	2301      	movs	r3, #1
 80129b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80129b6:	f7fc fc4b 	bl	800f250 <HAL_GetTick>
 80129ba:	4602      	mov	r2, r0
 80129bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129be:	1ad3      	subs	r3, r2, r3
 80129c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129c2:	429a      	cmp	r2, r3
 80129c4:	d803      	bhi.n	80129ce <HAL_SPI_TransmitReceive+0x2c6>
 80129c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129cc:	d102      	bne.n	80129d4 <HAL_SPI_TransmitReceive+0x2cc>
 80129ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d103      	bne.n	80129dc <HAL_SPI_TransmitReceive+0x2d4>
 80129d4:	2303      	movs	r3, #3
 80129d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80129da:	e029      	b.n	8012a30 <HAL_SPI_TransmitReceive+0x328>
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d1a2      	bne.n	801292c <HAL_SPI_TransmitReceive+0x224>
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d19d      	bne.n	801292c <HAL_SPI_TransmitReceive+0x224>
 80129f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80129f4:	68f8      	ldr	r0, [r7, #12]
 80129f6:	f000 f917 	bl	8012c28 <SPI_EndRxTxTransaction>
 80129fa:	4603      	mov	r3, r0
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d006      	beq.n	8012a0e <HAL_SPI_TransmitReceive+0x306>
 8012a00:	2301      	movs	r3, #1
 8012a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	2220      	movs	r2, #32
 8012a0a:	655a      	str	r2, [r3, #84]	; 0x54
 8012a0c:	e010      	b.n	8012a30 <HAL_SPI_TransmitReceive+0x328>
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	689b      	ldr	r3, [r3, #8]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d10b      	bne.n	8012a2e <HAL_SPI_TransmitReceive+0x326>
 8012a16:	2300      	movs	r3, #0
 8012a18:	617b      	str	r3, [r7, #20]
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	68db      	ldr	r3, [r3, #12]
 8012a20:	617b      	str	r3, [r7, #20]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	689b      	ldr	r3, [r3, #8]
 8012a28:	617b      	str	r3, [r7, #20]
 8012a2a:	697b      	ldr	r3, [r7, #20]
 8012a2c:	e000      	b.n	8012a30 <HAL_SPI_TransmitReceive+0x328>
 8012a2e:	bf00      	nop
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	2201      	movs	r2, #1
 8012a34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8012a38:	68fb      	ldr	r3, [r7, #12]
 8012a3a:	2200      	movs	r2, #0
 8012a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8012a40:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012a44:	4618      	mov	r0, r3
 8012a46:	3730      	adds	r7, #48	; 0x30
 8012a48:	46bd      	mov	sp, r7
 8012a4a:	bd80      	pop	{r7, pc}

08012a4c <SPI_WaitFlagStateUntilTimeout>:
 8012a4c:	b580      	push	{r7, lr}
 8012a4e:	b088      	sub	sp, #32
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	60f8      	str	r0, [r7, #12]
 8012a54:	60b9      	str	r1, [r7, #8]
 8012a56:	603b      	str	r3, [r7, #0]
 8012a58:	4613      	mov	r3, r2
 8012a5a:	71fb      	strb	r3, [r7, #7]
 8012a5c:	f7fc fbf8 	bl	800f250 <HAL_GetTick>
 8012a60:	4602      	mov	r2, r0
 8012a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a64:	1a9b      	subs	r3, r3, r2
 8012a66:	683a      	ldr	r2, [r7, #0]
 8012a68:	4413      	add	r3, r2
 8012a6a:	61fb      	str	r3, [r7, #28]
 8012a6c:	f7fc fbf0 	bl	800f250 <HAL_GetTick>
 8012a70:	61b8      	str	r0, [r7, #24]
 8012a72:	4b39      	ldr	r3, [pc, #228]	; (8012b58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	015b      	lsls	r3, r3, #5
 8012a78:	0d1b      	lsrs	r3, r3, #20
 8012a7a:	69fa      	ldr	r2, [r7, #28]
 8012a7c:	fb02 f303 	mul.w	r3, r2, r3
 8012a80:	617b      	str	r3, [r7, #20]
 8012a82:	e054      	b.n	8012b2e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a8a:	d050      	beq.n	8012b2e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8012a8c:	f7fc fbe0 	bl	800f250 <HAL_GetTick>
 8012a90:	4602      	mov	r2, r0
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	1ad3      	subs	r3, r2, r3
 8012a96:	69fa      	ldr	r2, [r7, #28]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d902      	bls.n	8012aa2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8012a9c:	69fb      	ldr	r3, [r7, #28]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d13d      	bne.n	8012b1e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	685a      	ldr	r2, [r3, #4]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012ab0:	605a      	str	r2, [r3, #4]
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	685b      	ldr	r3, [r3, #4]
 8012ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012aba:	d111      	bne.n	8012ae0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	689b      	ldr	r3, [r3, #8]
 8012ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012ac4:	d004      	beq.n	8012ad0 <SPI_WaitFlagStateUntilTimeout+0x84>
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	689b      	ldr	r3, [r3, #8]
 8012aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ace:	d107      	bne.n	8012ae0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	681a      	ldr	r2, [r3, #0]
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012ade:	601a      	str	r2, [r3, #0]
 8012ae0:	68fb      	ldr	r3, [r7, #12]
 8012ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012ae8:	d10f      	bne.n	8012b0a <SPI_WaitFlagStateUntilTimeout+0xbe>
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	681a      	ldr	r2, [r3, #0]
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012af8:	601a      	str	r2, [r3, #0]
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	681a      	ldr	r2, [r3, #0]
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012b08:	601a      	str	r2, [r3, #0]
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2201      	movs	r2, #1
 8012b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	2200      	movs	r2, #0
 8012b16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8012b1a:	2303      	movs	r3, #3
 8012b1c:	e017      	b.n	8012b4e <SPI_WaitFlagStateUntilTimeout+0x102>
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d101      	bne.n	8012b28 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8012b24:	2300      	movs	r3, #0
 8012b26:	61fb      	str	r3, [r7, #28]
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	3b01      	subs	r3, #1
 8012b2c:	617b      	str	r3, [r7, #20]
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	689a      	ldr	r2, [r3, #8]
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	4013      	ands	r3, r2
 8012b38:	68ba      	ldr	r2, [r7, #8]
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	bf0c      	ite	eq
 8012b3e:	2301      	moveq	r3, #1
 8012b40:	2300      	movne	r3, #0
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	461a      	mov	r2, r3
 8012b46:	79fb      	ldrb	r3, [r7, #7]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d19b      	bne.n	8012a84 <SPI_WaitFlagStateUntilTimeout+0x38>
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3720      	adds	r7, #32
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	2000002c 	.word	0x2000002c

08012b5c <SPI_EndRxTransaction>:
 8012b5c:	b580      	push	{r7, lr}
 8012b5e:	b086      	sub	sp, #24
 8012b60:	af02      	add	r7, sp, #8
 8012b62:	60f8      	str	r0, [r7, #12]
 8012b64:	60b9      	str	r1, [r7, #8]
 8012b66:	607a      	str	r2, [r7, #4]
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	685b      	ldr	r3, [r3, #4]
 8012b6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012b70:	d111      	bne.n	8012b96 <SPI_EndRxTransaction+0x3a>
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	689b      	ldr	r3, [r3, #8]
 8012b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012b7a:	d004      	beq.n	8012b86 <SPI_EndRxTransaction+0x2a>
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	689b      	ldr	r3, [r3, #8]
 8012b80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b84:	d107      	bne.n	8012b96 <SPI_EndRxTransaction+0x3a>
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012b94:	601a      	str	r2, [r3, #0]
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	685b      	ldr	r3, [r3, #4]
 8012b9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012b9e:	d12a      	bne.n	8012bf6 <SPI_EndRxTransaction+0x9a>
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	689b      	ldr	r3, [r3, #8]
 8012ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012ba8:	d012      	beq.n	8012bd0 <SPI_EndRxTransaction+0x74>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	9300      	str	r3, [sp, #0]
 8012bae:	68bb      	ldr	r3, [r7, #8]
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	2180      	movs	r1, #128	; 0x80
 8012bb4:	68f8      	ldr	r0, [r7, #12]
 8012bb6:	f7ff ff49 	bl	8012a4c <SPI_WaitFlagStateUntilTimeout>
 8012bba:	4603      	mov	r3, r0
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d02d      	beq.n	8012c1c <SPI_EndRxTransaction+0xc0>
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bc4:	f043 0220 	orr.w	r2, r3, #32
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	655a      	str	r2, [r3, #84]	; 0x54
 8012bcc:	2303      	movs	r3, #3
 8012bce:	e026      	b.n	8012c1e <SPI_EndRxTransaction+0xc2>
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	9300      	str	r3, [sp, #0]
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	2101      	movs	r1, #1
 8012bda:	68f8      	ldr	r0, [r7, #12]
 8012bdc:	f7ff ff36 	bl	8012a4c <SPI_WaitFlagStateUntilTimeout>
 8012be0:	4603      	mov	r3, r0
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d01a      	beq.n	8012c1c <SPI_EndRxTransaction+0xc0>
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012bea:	f043 0220 	orr.w	r2, r3, #32
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	655a      	str	r2, [r3, #84]	; 0x54
 8012bf2:	2303      	movs	r3, #3
 8012bf4:	e013      	b.n	8012c1e <SPI_EndRxTransaction+0xc2>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	9300      	str	r3, [sp, #0]
 8012bfa:	68bb      	ldr	r3, [r7, #8]
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	2101      	movs	r1, #1
 8012c00:	68f8      	ldr	r0, [r7, #12]
 8012c02:	f7ff ff23 	bl	8012a4c <SPI_WaitFlagStateUntilTimeout>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d007      	beq.n	8012c1c <SPI_EndRxTransaction+0xc0>
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c10:	f043 0220 	orr.w	r2, r3, #32
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	655a      	str	r2, [r3, #84]	; 0x54
 8012c18:	2303      	movs	r3, #3
 8012c1a:	e000      	b.n	8012c1e <SPI_EndRxTransaction+0xc2>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3710      	adds	r7, #16
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
	...

08012c28 <SPI_EndRxTxTransaction>:
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b088      	sub	sp, #32
 8012c2c:	af02      	add	r7, sp, #8
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	607a      	str	r2, [r7, #4]
 8012c34:	4b1b      	ldr	r3, [pc, #108]	; (8012ca4 <SPI_EndRxTxTransaction+0x7c>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4a1b      	ldr	r2, [pc, #108]	; (8012ca8 <SPI_EndRxTxTransaction+0x80>)
 8012c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8012c3e:	0d5b      	lsrs	r3, r3, #21
 8012c40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012c44:	fb02 f303 	mul.w	r3, r2, r3
 8012c48:	617b      	str	r3, [r7, #20]
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	685b      	ldr	r3, [r3, #4]
 8012c4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012c52:	d112      	bne.n	8012c7a <SPI_EndRxTxTransaction+0x52>
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	9300      	str	r3, [sp, #0]
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	2180      	movs	r1, #128	; 0x80
 8012c5e:	68f8      	ldr	r0, [r7, #12]
 8012c60:	f7ff fef4 	bl	8012a4c <SPI_WaitFlagStateUntilTimeout>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d016      	beq.n	8012c98 <SPI_EndRxTxTransaction+0x70>
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c6e:	f043 0220 	orr.w	r2, r3, #32
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	655a      	str	r2, [r3, #84]	; 0x54
 8012c76:	2303      	movs	r3, #3
 8012c78:	e00f      	b.n	8012c9a <SPI_EndRxTxTransaction+0x72>
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d00a      	beq.n	8012c96 <SPI_EndRxTxTransaction+0x6e>
 8012c80:	697b      	ldr	r3, [r7, #20]
 8012c82:	3b01      	subs	r3, #1
 8012c84:	617b      	str	r3, [r7, #20]
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	689b      	ldr	r3, [r3, #8]
 8012c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c90:	2b80      	cmp	r3, #128	; 0x80
 8012c92:	d0f2      	beq.n	8012c7a <SPI_EndRxTxTransaction+0x52>
 8012c94:	e000      	b.n	8012c98 <SPI_EndRxTxTransaction+0x70>
 8012c96:	bf00      	nop
 8012c98:	2300      	movs	r3, #0
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	3718      	adds	r7, #24
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd80      	pop	{r7, pc}
 8012ca2:	bf00      	nop
 8012ca4:	2000002c 	.word	0x2000002c
 8012ca8:	165e9f81 	.word	0x165e9f81

08012cac <HAL_TIM_Base_Init>:
 8012cac:	b580      	push	{r7, lr}
 8012cae:	b082      	sub	sp, #8
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d101      	bne.n	8012cbe <HAL_TIM_Base_Init+0x12>
 8012cba:	2301      	movs	r3, #1
 8012cbc:	e041      	b.n	8012d42 <HAL_TIM_Base_Init+0x96>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d106      	bne.n	8012cd8 <HAL_TIM_Base_Init+0x2c>
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8012cd2:	6878      	ldr	r0, [r7, #4]
 8012cd4:	f7fc f81c 	bl	800ed10 <HAL_TIM_Base_MspInit>
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2202      	movs	r2, #2
 8012cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	3304      	adds	r3, #4
 8012ce8:	4619      	mov	r1, r3
 8012cea:	4610      	mov	r0, r2
 8012cec:	f000 fc58 	bl	80135a0 <TIM_Base_SetConfig>
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	2201      	movs	r2, #1
 8012cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	2201      	movs	r2, #1
 8012cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2201      	movs	r2, #1
 8012d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2201      	movs	r2, #1
 8012d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	2201      	movs	r2, #1
 8012d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2201      	movs	r2, #1
 8012d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2201      	movs	r2, #1
 8012d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2201      	movs	r2, #1
 8012d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	2201      	movs	r2, #1
 8012d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	2201      	movs	r2, #1
 8012d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012d40:	2300      	movs	r3, #0
 8012d42:	4618      	mov	r0, r3
 8012d44:	3708      	adds	r7, #8
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}
	...

08012d4c <HAL_TIM_Base_Start_IT>:
 8012d4c:	b480      	push	{r7}
 8012d4e:	b085      	sub	sp, #20
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012d5a:	b2db      	uxtb	r3, r3
 8012d5c:	2b01      	cmp	r3, #1
 8012d5e:	d001      	beq.n	8012d64 <HAL_TIM_Base_Start_IT+0x18>
 8012d60:	2301      	movs	r3, #1
 8012d62:	e04e      	b.n	8012e02 <HAL_TIM_Base_Start_IT+0xb6>
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	2202      	movs	r2, #2
 8012d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	68da      	ldr	r2, [r3, #12]
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	f042 0201 	orr.w	r2, r2, #1
 8012d7a:	60da      	str	r2, [r3, #12]
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	4a23      	ldr	r2, [pc, #140]	; (8012e10 <HAL_TIM_Base_Start_IT+0xc4>)
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d022      	beq.n	8012dcc <HAL_TIM_Base_Start_IT+0x80>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d8e:	d01d      	beq.n	8012dcc <HAL_TIM_Base_Start_IT+0x80>
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4a1f      	ldr	r2, [pc, #124]	; (8012e14 <HAL_TIM_Base_Start_IT+0xc8>)
 8012d96:	4293      	cmp	r3, r2
 8012d98:	d018      	beq.n	8012dcc <HAL_TIM_Base_Start_IT+0x80>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	4a1e      	ldr	r2, [pc, #120]	; (8012e18 <HAL_TIM_Base_Start_IT+0xcc>)
 8012da0:	4293      	cmp	r3, r2
 8012da2:	d013      	beq.n	8012dcc <HAL_TIM_Base_Start_IT+0x80>
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	4a1c      	ldr	r2, [pc, #112]	; (8012e1c <HAL_TIM_Base_Start_IT+0xd0>)
 8012daa:	4293      	cmp	r3, r2
 8012dac:	d00e      	beq.n	8012dcc <HAL_TIM_Base_Start_IT+0x80>
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	4a1b      	ldr	r2, [pc, #108]	; (8012e20 <HAL_TIM_Base_Start_IT+0xd4>)
 8012db4:	4293      	cmp	r3, r2
 8012db6:	d009      	beq.n	8012dcc <HAL_TIM_Base_Start_IT+0x80>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	4a19      	ldr	r2, [pc, #100]	; (8012e24 <HAL_TIM_Base_Start_IT+0xd8>)
 8012dbe:	4293      	cmp	r3, r2
 8012dc0:	d004      	beq.n	8012dcc <HAL_TIM_Base_Start_IT+0x80>
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	4a18      	ldr	r2, [pc, #96]	; (8012e28 <HAL_TIM_Base_Start_IT+0xdc>)
 8012dc8:	4293      	cmp	r3, r2
 8012dca:	d111      	bne.n	8012df0 <HAL_TIM_Base_Start_IT+0xa4>
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	689b      	ldr	r3, [r3, #8]
 8012dd2:	f003 0307 	and.w	r3, r3, #7
 8012dd6:	60fb      	str	r3, [r7, #12]
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	2b06      	cmp	r3, #6
 8012ddc:	d010      	beq.n	8012e00 <HAL_TIM_Base_Start_IT+0xb4>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	681a      	ldr	r2, [r3, #0]
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	f042 0201 	orr.w	r2, r2, #1
 8012dec:	601a      	str	r2, [r3, #0]
 8012dee:	e007      	b.n	8012e00 <HAL_TIM_Base_Start_IT+0xb4>
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	681a      	ldr	r2, [r3, #0]
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f042 0201 	orr.w	r2, r2, #1
 8012dfe:	601a      	str	r2, [r3, #0]
 8012e00:	2300      	movs	r3, #0
 8012e02:	4618      	mov	r0, r3
 8012e04:	3714      	adds	r7, #20
 8012e06:	46bd      	mov	sp, r7
 8012e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e0c:	4770      	bx	lr
 8012e0e:	bf00      	nop
 8012e10:	40010000 	.word	0x40010000
 8012e14:	40000400 	.word	0x40000400
 8012e18:	40000800 	.word	0x40000800
 8012e1c:	40000c00 	.word	0x40000c00
 8012e20:	40010400 	.word	0x40010400
 8012e24:	40014000 	.word	0x40014000
 8012e28:	40001800 	.word	0x40001800

08012e2c <HAL_TIM_PWM_Init>:
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
 8012e32:	6078      	str	r0, [r7, #4]
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d101      	bne.n	8012e3e <HAL_TIM_PWM_Init+0x12>
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	e041      	b.n	8012ec2 <HAL_TIM_PWM_Init+0x96>
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d106      	bne.n	8012e58 <HAL_TIM_PWM_Init+0x2c>
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2200      	movs	r2, #0
 8012e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f000 f839 	bl	8012eca <HAL_TIM_PWM_MspInit>
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	2202      	movs	r2, #2
 8012e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	681a      	ldr	r2, [r3, #0]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	3304      	adds	r3, #4
 8012e68:	4619      	mov	r1, r3
 8012e6a:	4610      	mov	r0, r2
 8012e6c:	f000 fb98 	bl	80135a0 <TIM_Base_SetConfig>
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2201      	movs	r2, #1
 8012e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2201      	movs	r2, #1
 8012e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2201      	movs	r2, #1
 8012e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	2201      	movs	r2, #1
 8012e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2201      	movs	r2, #1
 8012e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2201      	movs	r2, #1
 8012e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	2201      	movs	r2, #1
 8012ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	2201      	movs	r2, #1
 8012eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	2201      	movs	r2, #1
 8012eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	2201      	movs	r2, #1
 8012ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012ec0:	2300      	movs	r3, #0
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3708      	adds	r7, #8
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}

08012eca <HAL_TIM_PWM_MspInit>:
 8012eca:	b480      	push	{r7}
 8012ecc:	b083      	sub	sp, #12
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]
 8012ed2:	bf00      	nop
 8012ed4:	370c      	adds	r7, #12
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012edc:	4770      	bx	lr

08012ede <HAL_TIM_Encoder_Init>:
 8012ede:	b580      	push	{r7, lr}
 8012ee0:	b086      	sub	sp, #24
 8012ee2:	af00      	add	r7, sp, #0
 8012ee4:	6078      	str	r0, [r7, #4]
 8012ee6:	6039      	str	r1, [r7, #0]
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d101      	bne.n	8012ef2 <HAL_TIM_Encoder_Init+0x14>
 8012eee:	2301      	movs	r3, #1
 8012ef0:	e097      	b.n	8013022 <HAL_TIM_Encoder_Init+0x144>
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d106      	bne.n	8012f0c <HAL_TIM_Encoder_Init+0x2e>
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	2200      	movs	r2, #0
 8012f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f7fb ff88 	bl	800ee1c <HAL_TIM_Encoder_MspInit>
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	2202      	movs	r2, #2
 8012f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	689b      	ldr	r3, [r3, #8]
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	6812      	ldr	r2, [r2, #0]
 8012f1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012f22:	f023 0307 	bic.w	r3, r3, #7
 8012f26:	6093      	str	r3, [r2, #8]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681a      	ldr	r2, [r3, #0]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	3304      	adds	r3, #4
 8012f30:	4619      	mov	r1, r3
 8012f32:	4610      	mov	r0, r2
 8012f34:	f000 fb34 	bl	80135a0 <TIM_Base_SetConfig>
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	689b      	ldr	r3, [r3, #8]
 8012f3e:	617b      	str	r3, [r7, #20]
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	699b      	ldr	r3, [r3, #24]
 8012f46:	613b      	str	r3, [r7, #16]
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	6a1b      	ldr	r3, [r3, #32]
 8012f4e:	60fb      	str	r3, [r7, #12]
 8012f50:	683b      	ldr	r3, [r7, #0]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	697a      	ldr	r2, [r7, #20]
 8012f56:	4313      	orrs	r3, r2
 8012f58:	617b      	str	r3, [r7, #20]
 8012f5a:	693b      	ldr	r3, [r7, #16]
 8012f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012f60:	f023 0303 	bic.w	r3, r3, #3
 8012f64:	613b      	str	r3, [r7, #16]
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	689a      	ldr	r2, [r3, #8]
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	699b      	ldr	r3, [r3, #24]
 8012f6e:	021b      	lsls	r3, r3, #8
 8012f70:	4313      	orrs	r3, r2
 8012f72:	693a      	ldr	r2, [r7, #16]
 8012f74:	4313      	orrs	r3, r2
 8012f76:	613b      	str	r3, [r7, #16]
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8012f7e:	f023 030c 	bic.w	r3, r3, #12
 8012f82:	613b      	str	r3, [r7, #16]
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012f8e:	613b      	str	r3, [r7, #16]
 8012f90:	683b      	ldr	r3, [r7, #0]
 8012f92:	68da      	ldr	r2, [r3, #12]
 8012f94:	683b      	ldr	r3, [r7, #0]
 8012f96:	69db      	ldr	r3, [r3, #28]
 8012f98:	021b      	lsls	r3, r3, #8
 8012f9a:	4313      	orrs	r3, r2
 8012f9c:	693a      	ldr	r2, [r7, #16]
 8012f9e:	4313      	orrs	r3, r2
 8012fa0:	613b      	str	r3, [r7, #16]
 8012fa2:	683b      	ldr	r3, [r7, #0]
 8012fa4:	691b      	ldr	r3, [r3, #16]
 8012fa6:	011a      	lsls	r2, r3, #4
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	6a1b      	ldr	r3, [r3, #32]
 8012fac:	031b      	lsls	r3, r3, #12
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	693a      	ldr	r2, [r7, #16]
 8012fb2:	4313      	orrs	r3, r2
 8012fb4:	613b      	str	r3, [r7, #16]
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8012fbc:	60fb      	str	r3, [r7, #12]
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8012fc4:	60fb      	str	r3, [r7, #12]
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	685a      	ldr	r2, [r3, #4]
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	695b      	ldr	r3, [r3, #20]
 8012fce:	011b      	lsls	r3, r3, #4
 8012fd0:	4313      	orrs	r3, r2
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	4313      	orrs	r3, r2
 8012fd6:	60fb      	str	r3, [r7, #12]
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	697a      	ldr	r2, [r7, #20]
 8012fde:	609a      	str	r2, [r3, #8]
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	693a      	ldr	r2, [r7, #16]
 8012fe6:	619a      	str	r2, [r3, #24]
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	68fa      	ldr	r2, [r7, #12]
 8012fee:	621a      	str	r2, [r3, #32]
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	2201      	movs	r2, #1
 8012ff4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	2201      	movs	r2, #1
 8012ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	2201      	movs	r2, #1
 8013004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2201      	movs	r2, #1
 801300c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2201      	movs	r2, #1
 8013014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	2201      	movs	r2, #1
 801301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8013020:	2300      	movs	r3, #0
 8013022:	4618      	mov	r0, r3
 8013024:	3718      	adds	r7, #24
 8013026:	46bd      	mov	sp, r7
 8013028:	bd80      	pop	{r7, pc}

0801302a <HAL_TIM_IRQHandler>:
 801302a:	b580      	push	{r7, lr}
 801302c:	b082      	sub	sp, #8
 801302e:	af00      	add	r7, sp, #0
 8013030:	6078      	str	r0, [r7, #4]
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	691b      	ldr	r3, [r3, #16]
 8013038:	f003 0302 	and.w	r3, r3, #2
 801303c:	2b02      	cmp	r3, #2
 801303e:	d122      	bne.n	8013086 <HAL_TIM_IRQHandler+0x5c>
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	68db      	ldr	r3, [r3, #12]
 8013046:	f003 0302 	and.w	r3, r3, #2
 801304a:	2b02      	cmp	r3, #2
 801304c:	d11b      	bne.n	8013086 <HAL_TIM_IRQHandler+0x5c>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	f06f 0202 	mvn.w	r2, #2
 8013056:	611a      	str	r2, [r3, #16]
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	2201      	movs	r2, #1
 801305c:	771a      	strb	r2, [r3, #28]
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	699b      	ldr	r3, [r3, #24]
 8013064:	f003 0303 	and.w	r3, r3, #3
 8013068:	2b00      	cmp	r3, #0
 801306a:	d003      	beq.n	8013074 <HAL_TIM_IRQHandler+0x4a>
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f000 fa78 	bl	8013562 <HAL_TIM_IC_CaptureCallback>
 8013072:	e005      	b.n	8013080 <HAL_TIM_IRQHandler+0x56>
 8013074:	6878      	ldr	r0, [r7, #4]
 8013076:	f000 fa6a 	bl	801354e <HAL_TIM_OC_DelayElapsedCallback>
 801307a:	6878      	ldr	r0, [r7, #4]
 801307c:	f000 fa7b 	bl	8013576 <HAL_TIM_PWM_PulseFinishedCallback>
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2200      	movs	r2, #0
 8013084:	771a      	strb	r2, [r3, #28]
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	691b      	ldr	r3, [r3, #16]
 801308c:	f003 0304 	and.w	r3, r3, #4
 8013090:	2b04      	cmp	r3, #4
 8013092:	d122      	bne.n	80130da <HAL_TIM_IRQHandler+0xb0>
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	68db      	ldr	r3, [r3, #12]
 801309a:	f003 0304 	and.w	r3, r3, #4
 801309e:	2b04      	cmp	r3, #4
 80130a0:	d11b      	bne.n	80130da <HAL_TIM_IRQHandler+0xb0>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	f06f 0204 	mvn.w	r2, #4
 80130aa:	611a      	str	r2, [r3, #16]
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	2202      	movs	r2, #2
 80130b0:	771a      	strb	r2, [r3, #28]
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	699b      	ldr	r3, [r3, #24]
 80130b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d003      	beq.n	80130c8 <HAL_TIM_IRQHandler+0x9e>
 80130c0:	6878      	ldr	r0, [r7, #4]
 80130c2:	f000 fa4e 	bl	8013562 <HAL_TIM_IC_CaptureCallback>
 80130c6:	e005      	b.n	80130d4 <HAL_TIM_IRQHandler+0xaa>
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f000 fa40 	bl	801354e <HAL_TIM_OC_DelayElapsedCallback>
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f000 fa51 	bl	8013576 <HAL_TIM_PWM_PulseFinishedCallback>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	771a      	strb	r2, [r3, #28]
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	691b      	ldr	r3, [r3, #16]
 80130e0:	f003 0308 	and.w	r3, r3, #8
 80130e4:	2b08      	cmp	r3, #8
 80130e6:	d122      	bne.n	801312e <HAL_TIM_IRQHandler+0x104>
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	68db      	ldr	r3, [r3, #12]
 80130ee:	f003 0308 	and.w	r3, r3, #8
 80130f2:	2b08      	cmp	r3, #8
 80130f4:	d11b      	bne.n	801312e <HAL_TIM_IRQHandler+0x104>
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	f06f 0208 	mvn.w	r2, #8
 80130fe:	611a      	str	r2, [r3, #16]
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2204      	movs	r2, #4
 8013104:	771a      	strb	r2, [r3, #28]
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	69db      	ldr	r3, [r3, #28]
 801310c:	f003 0303 	and.w	r3, r3, #3
 8013110:	2b00      	cmp	r3, #0
 8013112:	d003      	beq.n	801311c <HAL_TIM_IRQHandler+0xf2>
 8013114:	6878      	ldr	r0, [r7, #4]
 8013116:	f000 fa24 	bl	8013562 <HAL_TIM_IC_CaptureCallback>
 801311a:	e005      	b.n	8013128 <HAL_TIM_IRQHandler+0xfe>
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f000 fa16 	bl	801354e <HAL_TIM_OC_DelayElapsedCallback>
 8013122:	6878      	ldr	r0, [r7, #4]
 8013124:	f000 fa27 	bl	8013576 <HAL_TIM_PWM_PulseFinishedCallback>
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	2200      	movs	r2, #0
 801312c:	771a      	strb	r2, [r3, #28]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	691b      	ldr	r3, [r3, #16]
 8013134:	f003 0310 	and.w	r3, r3, #16
 8013138:	2b10      	cmp	r3, #16
 801313a:	d122      	bne.n	8013182 <HAL_TIM_IRQHandler+0x158>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	68db      	ldr	r3, [r3, #12]
 8013142:	f003 0310 	and.w	r3, r3, #16
 8013146:	2b10      	cmp	r3, #16
 8013148:	d11b      	bne.n	8013182 <HAL_TIM_IRQHandler+0x158>
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	f06f 0210 	mvn.w	r2, #16
 8013152:	611a      	str	r2, [r3, #16]
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2208      	movs	r2, #8
 8013158:	771a      	strb	r2, [r3, #28]
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	69db      	ldr	r3, [r3, #28]
 8013160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8013164:	2b00      	cmp	r3, #0
 8013166:	d003      	beq.n	8013170 <HAL_TIM_IRQHandler+0x146>
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f000 f9fa 	bl	8013562 <HAL_TIM_IC_CaptureCallback>
 801316e:	e005      	b.n	801317c <HAL_TIM_IRQHandler+0x152>
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f000 f9ec 	bl	801354e <HAL_TIM_OC_DelayElapsedCallback>
 8013176:	6878      	ldr	r0, [r7, #4]
 8013178:	f000 f9fd 	bl	8013576 <HAL_TIM_PWM_PulseFinishedCallback>
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2200      	movs	r2, #0
 8013180:	771a      	strb	r2, [r3, #28]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	691b      	ldr	r3, [r3, #16]
 8013188:	f003 0301 	and.w	r3, r3, #1
 801318c:	2b01      	cmp	r3, #1
 801318e:	d10e      	bne.n	80131ae <HAL_TIM_IRQHandler+0x184>
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	68db      	ldr	r3, [r3, #12]
 8013196:	f003 0301 	and.w	r3, r3, #1
 801319a:	2b01      	cmp	r3, #1
 801319c:	d107      	bne.n	80131ae <HAL_TIM_IRQHandler+0x184>
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	f06f 0201 	mvn.w	r2, #1
 80131a6:	611a      	str	r2, [r3, #16]
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f7fb f8eb 	bl	800e384 <HAL_TIM_PeriodElapsedCallback>
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	691b      	ldr	r3, [r3, #16]
 80131b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131b8:	2b80      	cmp	r3, #128	; 0x80
 80131ba:	d10e      	bne.n	80131da <HAL_TIM_IRQHandler+0x1b0>
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	68db      	ldr	r3, [r3, #12]
 80131c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131c6:	2b80      	cmp	r3, #128	; 0x80
 80131c8:	d107      	bne.n	80131da <HAL_TIM_IRQHandler+0x1b0>
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80131d2:	611a      	str	r2, [r3, #16]
 80131d4:	6878      	ldr	r0, [r7, #4]
 80131d6:	f000 fd53 	bl	8013c80 <HAL_TIMEx_BreakCallback>
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	691b      	ldr	r3, [r3, #16]
 80131e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131e4:	2b40      	cmp	r3, #64	; 0x40
 80131e6:	d10e      	bne.n	8013206 <HAL_TIM_IRQHandler+0x1dc>
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	68db      	ldr	r3, [r3, #12]
 80131ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131f2:	2b40      	cmp	r3, #64	; 0x40
 80131f4:	d107      	bne.n	8013206 <HAL_TIM_IRQHandler+0x1dc>
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80131fe:	611a      	str	r2, [r3, #16]
 8013200:	6878      	ldr	r0, [r7, #4]
 8013202:	f000 f9c2 	bl	801358a <HAL_TIM_TriggerCallback>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	691b      	ldr	r3, [r3, #16]
 801320c:	f003 0320 	and.w	r3, r3, #32
 8013210:	2b20      	cmp	r3, #32
 8013212:	d10e      	bne.n	8013232 <HAL_TIM_IRQHandler+0x208>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	68db      	ldr	r3, [r3, #12]
 801321a:	f003 0320 	and.w	r3, r3, #32
 801321e:	2b20      	cmp	r3, #32
 8013220:	d107      	bne.n	8013232 <HAL_TIM_IRQHandler+0x208>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	f06f 0220 	mvn.w	r2, #32
 801322a:	611a      	str	r2, [r3, #16]
 801322c:	6878      	ldr	r0, [r7, #4]
 801322e:	f000 fd1d 	bl	8013c6c <HAL_TIMEx_CommutCallback>
 8013232:	bf00      	nop
 8013234:	3708      	adds	r7, #8
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
	...

0801323c <HAL_TIM_PWM_ConfigChannel>:
 801323c:	b580      	push	{r7, lr}
 801323e:	b086      	sub	sp, #24
 8013240:	af00      	add	r7, sp, #0
 8013242:	60f8      	str	r0, [r7, #12]
 8013244:	60b9      	str	r1, [r7, #8]
 8013246:	607a      	str	r2, [r7, #4]
 8013248:	2300      	movs	r3, #0
 801324a:	75fb      	strb	r3, [r7, #23]
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013252:	2b01      	cmp	r3, #1
 8013254:	d101      	bne.n	801325a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8013256:	2302      	movs	r3, #2
 8013258:	e0ae      	b.n	80133b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	2201      	movs	r2, #1
 801325e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2b0c      	cmp	r3, #12
 8013266:	f200 809f 	bhi.w	80133a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 801326a:	a201      	add	r2, pc, #4	; (adr r2, 8013270 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013270:	080132a5 	.word	0x080132a5
 8013274:	080133a9 	.word	0x080133a9
 8013278:	080133a9 	.word	0x080133a9
 801327c:	080133a9 	.word	0x080133a9
 8013280:	080132e5 	.word	0x080132e5
 8013284:	080133a9 	.word	0x080133a9
 8013288:	080133a9 	.word	0x080133a9
 801328c:	080133a9 	.word	0x080133a9
 8013290:	08013327 	.word	0x08013327
 8013294:	080133a9 	.word	0x080133a9
 8013298:	080133a9 	.word	0x080133a9
 801329c:	080133a9 	.word	0x080133a9
 80132a0:	08013367 	.word	0x08013367
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	68b9      	ldr	r1, [r7, #8]
 80132aa:	4618      	mov	r0, r3
 80132ac:	f000 fa18 	bl	80136e0 <TIM_OC1_SetConfig>
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	681b      	ldr	r3, [r3, #0]
 80132b4:	699a      	ldr	r2, [r3, #24]
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	f042 0208 	orr.w	r2, r2, #8
 80132be:	619a      	str	r2, [r3, #24]
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	699a      	ldr	r2, [r3, #24]
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	f022 0204 	bic.w	r2, r2, #4
 80132ce:	619a      	str	r2, [r3, #24]
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	6999      	ldr	r1, [r3, #24]
 80132d6:	68bb      	ldr	r3, [r7, #8]
 80132d8:	691a      	ldr	r2, [r3, #16]
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	430a      	orrs	r2, r1
 80132e0:	619a      	str	r2, [r3, #24]
 80132e2:	e064      	b.n	80133ae <HAL_TIM_PWM_ConfigChannel+0x172>
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	68b9      	ldr	r1, [r7, #8]
 80132ea:	4618      	mov	r0, r3
 80132ec:	f000 fa68 	bl	80137c0 <TIM_OC2_SetConfig>
 80132f0:	68fb      	ldr	r3, [r7, #12]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	699a      	ldr	r2, [r3, #24]
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	681b      	ldr	r3, [r3, #0]
 80132fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80132fe:	619a      	str	r2, [r3, #24]
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	699a      	ldr	r2, [r3, #24]
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801330e:	619a      	str	r2, [r3, #24]
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	6999      	ldr	r1, [r3, #24]
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	691b      	ldr	r3, [r3, #16]
 801331a:	021a      	lsls	r2, r3, #8
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	430a      	orrs	r2, r1
 8013322:	619a      	str	r2, [r3, #24]
 8013324:	e043      	b.n	80133ae <HAL_TIM_PWM_ConfigChannel+0x172>
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	68b9      	ldr	r1, [r7, #8]
 801332c:	4618      	mov	r0, r3
 801332e:	f000 fabd 	bl	80138ac <TIM_OC3_SetConfig>
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	69da      	ldr	r2, [r3, #28]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	f042 0208 	orr.w	r2, r2, #8
 8013340:	61da      	str	r2, [r3, #28]
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	69da      	ldr	r2, [r3, #28]
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	f022 0204 	bic.w	r2, r2, #4
 8013350:	61da      	str	r2, [r3, #28]
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	69d9      	ldr	r1, [r3, #28]
 8013358:	68bb      	ldr	r3, [r7, #8]
 801335a:	691a      	ldr	r2, [r3, #16]
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	430a      	orrs	r2, r1
 8013362:	61da      	str	r2, [r3, #28]
 8013364:	e023      	b.n	80133ae <HAL_TIM_PWM_ConfigChannel+0x172>
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	681b      	ldr	r3, [r3, #0]
 801336a:	68b9      	ldr	r1, [r7, #8]
 801336c:	4618      	mov	r0, r3
 801336e:	f000 fb11 	bl	8013994 <TIM_OC4_SetConfig>
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	69da      	ldr	r2, [r3, #28]
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013380:	61da      	str	r2, [r3, #28]
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	69da      	ldr	r2, [r3, #28]
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8013390:	61da      	str	r2, [r3, #28]
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	69d9      	ldr	r1, [r3, #28]
 8013398:	68bb      	ldr	r3, [r7, #8]
 801339a:	691b      	ldr	r3, [r3, #16]
 801339c:	021a      	lsls	r2, r3, #8
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	430a      	orrs	r2, r1
 80133a4:	61da      	str	r2, [r3, #28]
 80133a6:	e002      	b.n	80133ae <HAL_TIM_PWM_ConfigChannel+0x172>
 80133a8:	2301      	movs	r3, #1
 80133aa:	75fb      	strb	r3, [r7, #23]
 80133ac:	bf00      	nop
 80133ae:	68fb      	ldr	r3, [r7, #12]
 80133b0:	2200      	movs	r2, #0
 80133b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80133b6:	7dfb      	ldrb	r3, [r7, #23]
 80133b8:	4618      	mov	r0, r3
 80133ba:	3718      	adds	r7, #24
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}

080133c0 <HAL_TIM_ConfigClockSource>:
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b084      	sub	sp, #16
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
 80133ca:	2300      	movs	r3, #0
 80133cc:	73fb      	strb	r3, [r7, #15]
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80133d4:	2b01      	cmp	r3, #1
 80133d6:	d101      	bne.n	80133dc <HAL_TIM_ConfigClockSource+0x1c>
 80133d8:	2302      	movs	r3, #2
 80133da:	e0b4      	b.n	8013546 <HAL_TIM_ConfigClockSource+0x186>
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2201      	movs	r2, #1
 80133e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2202      	movs	r2, #2
 80133e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	689b      	ldr	r3, [r3, #8]
 80133f2:	60bb      	str	r3, [r7, #8]
 80133f4:	68bb      	ldr	r3, [r7, #8]
 80133f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80133fa:	60bb      	str	r3, [r7, #8]
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013402:	60bb      	str	r3, [r7, #8]
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	681b      	ldr	r3, [r3, #0]
 8013408:	68ba      	ldr	r2, [r7, #8]
 801340a:	609a      	str	r2, [r3, #8]
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013414:	d03e      	beq.n	8013494 <HAL_TIM_ConfigClockSource+0xd4>
 8013416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801341a:	f200 8087 	bhi.w	801352c <HAL_TIM_ConfigClockSource+0x16c>
 801341e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013422:	f000 8086 	beq.w	8013532 <HAL_TIM_ConfigClockSource+0x172>
 8013426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801342a:	d87f      	bhi.n	801352c <HAL_TIM_ConfigClockSource+0x16c>
 801342c:	2b70      	cmp	r3, #112	; 0x70
 801342e:	d01a      	beq.n	8013466 <HAL_TIM_ConfigClockSource+0xa6>
 8013430:	2b70      	cmp	r3, #112	; 0x70
 8013432:	d87b      	bhi.n	801352c <HAL_TIM_ConfigClockSource+0x16c>
 8013434:	2b60      	cmp	r3, #96	; 0x60
 8013436:	d050      	beq.n	80134da <HAL_TIM_ConfigClockSource+0x11a>
 8013438:	2b60      	cmp	r3, #96	; 0x60
 801343a:	d877      	bhi.n	801352c <HAL_TIM_ConfigClockSource+0x16c>
 801343c:	2b50      	cmp	r3, #80	; 0x50
 801343e:	d03c      	beq.n	80134ba <HAL_TIM_ConfigClockSource+0xfa>
 8013440:	2b50      	cmp	r3, #80	; 0x50
 8013442:	d873      	bhi.n	801352c <HAL_TIM_ConfigClockSource+0x16c>
 8013444:	2b40      	cmp	r3, #64	; 0x40
 8013446:	d058      	beq.n	80134fa <HAL_TIM_ConfigClockSource+0x13a>
 8013448:	2b40      	cmp	r3, #64	; 0x40
 801344a:	d86f      	bhi.n	801352c <HAL_TIM_ConfigClockSource+0x16c>
 801344c:	2b30      	cmp	r3, #48	; 0x30
 801344e:	d064      	beq.n	801351a <HAL_TIM_ConfigClockSource+0x15a>
 8013450:	2b30      	cmp	r3, #48	; 0x30
 8013452:	d86b      	bhi.n	801352c <HAL_TIM_ConfigClockSource+0x16c>
 8013454:	2b20      	cmp	r3, #32
 8013456:	d060      	beq.n	801351a <HAL_TIM_ConfigClockSource+0x15a>
 8013458:	2b20      	cmp	r3, #32
 801345a:	d867      	bhi.n	801352c <HAL_TIM_ConfigClockSource+0x16c>
 801345c:	2b00      	cmp	r3, #0
 801345e:	d05c      	beq.n	801351a <HAL_TIM_ConfigClockSource+0x15a>
 8013460:	2b10      	cmp	r3, #16
 8013462:	d05a      	beq.n	801351a <HAL_TIM_ConfigClockSource+0x15a>
 8013464:	e062      	b.n	801352c <HAL_TIM_ConfigClockSource+0x16c>
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6818      	ldr	r0, [r3, #0]
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	6899      	ldr	r1, [r3, #8]
 801346e:	683b      	ldr	r3, [r7, #0]
 8013470:	685a      	ldr	r2, [r3, #4]
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	68db      	ldr	r3, [r3, #12]
 8013476:	f000 fb5d 	bl	8013b34 <TIM_ETR_SetConfig>
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	689b      	ldr	r3, [r3, #8]
 8013480:	60bb      	str	r3, [r7, #8]
 8013482:	68bb      	ldr	r3, [r7, #8]
 8013484:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8013488:	60bb      	str	r3, [r7, #8]
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	68ba      	ldr	r2, [r7, #8]
 8013490:	609a      	str	r2, [r3, #8]
 8013492:	e04f      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x174>
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6818      	ldr	r0, [r3, #0]
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	6899      	ldr	r1, [r3, #8]
 801349c:	683b      	ldr	r3, [r7, #0]
 801349e:	685a      	ldr	r2, [r3, #4]
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	f000 fb46 	bl	8013b34 <TIM_ETR_SetConfig>
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	689a      	ldr	r2, [r3, #8]
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80134b6:	609a      	str	r2, [r3, #8]
 80134b8:	e03c      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x174>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	6818      	ldr	r0, [r3, #0]
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	6859      	ldr	r1, [r3, #4]
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	68db      	ldr	r3, [r3, #12]
 80134c6:	461a      	mov	r2, r3
 80134c8:	f000 faba 	bl	8013a40 <TIM_TI1_ConfigInputStage>
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	2150      	movs	r1, #80	; 0x50
 80134d2:	4618      	mov	r0, r3
 80134d4:	f000 fb13 	bl	8013afe <TIM_ITRx_SetConfig>
 80134d8:	e02c      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x174>
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	6818      	ldr	r0, [r3, #0]
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	6859      	ldr	r1, [r3, #4]
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	68db      	ldr	r3, [r3, #12]
 80134e6:	461a      	mov	r2, r3
 80134e8:	f000 fad9 	bl	8013a9e <TIM_TI2_ConfigInputStage>
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	681b      	ldr	r3, [r3, #0]
 80134f0:	2160      	movs	r1, #96	; 0x60
 80134f2:	4618      	mov	r0, r3
 80134f4:	f000 fb03 	bl	8013afe <TIM_ITRx_SetConfig>
 80134f8:	e01c      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x174>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6818      	ldr	r0, [r3, #0]
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	6859      	ldr	r1, [r3, #4]
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	68db      	ldr	r3, [r3, #12]
 8013506:	461a      	mov	r2, r3
 8013508:	f000 fa9a 	bl	8013a40 <TIM_TI1_ConfigInputStage>
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2140      	movs	r1, #64	; 0x40
 8013512:	4618      	mov	r0, r3
 8013514:	f000 faf3 	bl	8013afe <TIM_ITRx_SetConfig>
 8013518:	e00c      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x174>
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681a      	ldr	r2, [r3, #0]
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	4619      	mov	r1, r3
 8013524:	4610      	mov	r0, r2
 8013526:	f000 faea 	bl	8013afe <TIM_ITRx_SetConfig>
 801352a:	e003      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x174>
 801352c:	2301      	movs	r3, #1
 801352e:	73fb      	strb	r3, [r7, #15]
 8013530:	e000      	b.n	8013534 <HAL_TIM_ConfigClockSource+0x174>
 8013532:	bf00      	nop
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2201      	movs	r2, #1
 8013538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	2200      	movs	r2, #0
 8013540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8013544:	7bfb      	ldrb	r3, [r7, #15]
 8013546:	4618      	mov	r0, r3
 8013548:	3710      	adds	r7, #16
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}

0801354e <HAL_TIM_OC_DelayElapsedCallback>:
 801354e:	b480      	push	{r7}
 8013550:	b083      	sub	sp, #12
 8013552:	af00      	add	r7, sp, #0
 8013554:	6078      	str	r0, [r7, #4]
 8013556:	bf00      	nop
 8013558:	370c      	adds	r7, #12
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr

08013562 <HAL_TIM_IC_CaptureCallback>:
 8013562:	b480      	push	{r7}
 8013564:	b083      	sub	sp, #12
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
 801356a:	bf00      	nop
 801356c:	370c      	adds	r7, #12
 801356e:	46bd      	mov	sp, r7
 8013570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013574:	4770      	bx	lr

08013576 <HAL_TIM_PWM_PulseFinishedCallback>:
 8013576:	b480      	push	{r7}
 8013578:	b083      	sub	sp, #12
 801357a:	af00      	add	r7, sp, #0
 801357c:	6078      	str	r0, [r7, #4]
 801357e:	bf00      	nop
 8013580:	370c      	adds	r7, #12
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr

0801358a <HAL_TIM_TriggerCallback>:
 801358a:	b480      	push	{r7}
 801358c:	b083      	sub	sp, #12
 801358e:	af00      	add	r7, sp, #0
 8013590:	6078      	str	r0, [r7, #4]
 8013592:	bf00      	nop
 8013594:	370c      	adds	r7, #12
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr
	...

080135a0 <TIM_Base_SetConfig>:
 80135a0:	b480      	push	{r7}
 80135a2:	b085      	sub	sp, #20
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	6078      	str	r0, [r7, #4]
 80135a8:	6039      	str	r1, [r7, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	60fb      	str	r3, [r7, #12]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	4a40      	ldr	r2, [pc, #256]	; (80136b4 <TIM_Base_SetConfig+0x114>)
 80135b4:	4293      	cmp	r3, r2
 80135b6:	d013      	beq.n	80135e0 <TIM_Base_SetConfig+0x40>
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80135be:	d00f      	beq.n	80135e0 <TIM_Base_SetConfig+0x40>
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	4a3d      	ldr	r2, [pc, #244]	; (80136b8 <TIM_Base_SetConfig+0x118>)
 80135c4:	4293      	cmp	r3, r2
 80135c6:	d00b      	beq.n	80135e0 <TIM_Base_SetConfig+0x40>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	4a3c      	ldr	r2, [pc, #240]	; (80136bc <TIM_Base_SetConfig+0x11c>)
 80135cc:	4293      	cmp	r3, r2
 80135ce:	d007      	beq.n	80135e0 <TIM_Base_SetConfig+0x40>
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	4a3b      	ldr	r2, [pc, #236]	; (80136c0 <TIM_Base_SetConfig+0x120>)
 80135d4:	4293      	cmp	r3, r2
 80135d6:	d003      	beq.n	80135e0 <TIM_Base_SetConfig+0x40>
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	4a3a      	ldr	r2, [pc, #232]	; (80136c4 <TIM_Base_SetConfig+0x124>)
 80135dc:	4293      	cmp	r3, r2
 80135de:	d108      	bne.n	80135f2 <TIM_Base_SetConfig+0x52>
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80135e6:	60fb      	str	r3, [r7, #12]
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	685b      	ldr	r3, [r3, #4]
 80135ec:	68fa      	ldr	r2, [r7, #12]
 80135ee:	4313      	orrs	r3, r2
 80135f0:	60fb      	str	r3, [r7, #12]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	4a2f      	ldr	r2, [pc, #188]	; (80136b4 <TIM_Base_SetConfig+0x114>)
 80135f6:	4293      	cmp	r3, r2
 80135f8:	d02b      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013600:	d027      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	4a2c      	ldr	r2, [pc, #176]	; (80136b8 <TIM_Base_SetConfig+0x118>)
 8013606:	4293      	cmp	r3, r2
 8013608:	d023      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 801360a:	687b      	ldr	r3, [r7, #4]
 801360c:	4a2b      	ldr	r2, [pc, #172]	; (80136bc <TIM_Base_SetConfig+0x11c>)
 801360e:	4293      	cmp	r3, r2
 8013610:	d01f      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	4a2a      	ldr	r2, [pc, #168]	; (80136c0 <TIM_Base_SetConfig+0x120>)
 8013616:	4293      	cmp	r3, r2
 8013618:	d01b      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	4a29      	ldr	r2, [pc, #164]	; (80136c4 <TIM_Base_SetConfig+0x124>)
 801361e:	4293      	cmp	r3, r2
 8013620:	d017      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	4a28      	ldr	r2, [pc, #160]	; (80136c8 <TIM_Base_SetConfig+0x128>)
 8013626:	4293      	cmp	r3, r2
 8013628:	d013      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	4a27      	ldr	r2, [pc, #156]	; (80136cc <TIM_Base_SetConfig+0x12c>)
 801362e:	4293      	cmp	r3, r2
 8013630:	d00f      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	4a26      	ldr	r2, [pc, #152]	; (80136d0 <TIM_Base_SetConfig+0x130>)
 8013636:	4293      	cmp	r3, r2
 8013638:	d00b      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	4a25      	ldr	r2, [pc, #148]	; (80136d4 <TIM_Base_SetConfig+0x134>)
 801363e:	4293      	cmp	r3, r2
 8013640:	d007      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	4a24      	ldr	r2, [pc, #144]	; (80136d8 <TIM_Base_SetConfig+0x138>)
 8013646:	4293      	cmp	r3, r2
 8013648:	d003      	beq.n	8013652 <TIM_Base_SetConfig+0xb2>
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	4a23      	ldr	r2, [pc, #140]	; (80136dc <TIM_Base_SetConfig+0x13c>)
 801364e:	4293      	cmp	r3, r2
 8013650:	d108      	bne.n	8013664 <TIM_Base_SetConfig+0xc4>
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8013658:	60fb      	str	r3, [r7, #12]
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	68db      	ldr	r3, [r3, #12]
 801365e:	68fa      	ldr	r2, [r7, #12]
 8013660:	4313      	orrs	r3, r2
 8013662:	60fb      	str	r3, [r7, #12]
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	695b      	ldr	r3, [r3, #20]
 801366e:	4313      	orrs	r3, r2
 8013670:	60fb      	str	r3, [r7, #12]
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	68fa      	ldr	r2, [r7, #12]
 8013676:	601a      	str	r2, [r3, #0]
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	689a      	ldr	r2, [r3, #8]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	629a      	str	r2, [r3, #40]	; 0x28
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	4a0a      	ldr	r2, [pc, #40]	; (80136b4 <TIM_Base_SetConfig+0x114>)
 801368c:	4293      	cmp	r3, r2
 801368e:	d003      	beq.n	8013698 <TIM_Base_SetConfig+0xf8>
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	4a0c      	ldr	r2, [pc, #48]	; (80136c4 <TIM_Base_SetConfig+0x124>)
 8013694:	4293      	cmp	r3, r2
 8013696:	d103      	bne.n	80136a0 <TIM_Base_SetConfig+0x100>
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	691a      	ldr	r2, [r3, #16]
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	631a      	str	r2, [r3, #48]	; 0x30
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	2201      	movs	r2, #1
 80136a4:	615a      	str	r2, [r3, #20]
 80136a6:	bf00      	nop
 80136a8:	3714      	adds	r7, #20
 80136aa:	46bd      	mov	sp, r7
 80136ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b0:	4770      	bx	lr
 80136b2:	bf00      	nop
 80136b4:	40010000 	.word	0x40010000
 80136b8:	40000400 	.word	0x40000400
 80136bc:	40000800 	.word	0x40000800
 80136c0:	40000c00 	.word	0x40000c00
 80136c4:	40010400 	.word	0x40010400
 80136c8:	40014000 	.word	0x40014000
 80136cc:	40014400 	.word	0x40014400
 80136d0:	40014800 	.word	0x40014800
 80136d4:	40001800 	.word	0x40001800
 80136d8:	40001c00 	.word	0x40001c00
 80136dc:	40002000 	.word	0x40002000

080136e0 <TIM_OC1_SetConfig>:
 80136e0:	b480      	push	{r7}
 80136e2:	b087      	sub	sp, #28
 80136e4:	af00      	add	r7, sp, #0
 80136e6:	6078      	str	r0, [r7, #4]
 80136e8:	6039      	str	r1, [r7, #0]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6a1b      	ldr	r3, [r3, #32]
 80136ee:	f023 0201 	bic.w	r2, r3, #1
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	621a      	str	r2, [r3, #32]
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	6a1b      	ldr	r3, [r3, #32]
 80136fa:	617b      	str	r3, [r7, #20]
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	685b      	ldr	r3, [r3, #4]
 8013700:	613b      	str	r3, [r7, #16]
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	699b      	ldr	r3, [r3, #24]
 8013706:	60fb      	str	r3, [r7, #12]
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801370e:	60fb      	str	r3, [r7, #12]
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	f023 0303 	bic.w	r3, r3, #3
 8013716:	60fb      	str	r3, [r7, #12]
 8013718:	683b      	ldr	r3, [r7, #0]
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	68fa      	ldr	r2, [r7, #12]
 801371e:	4313      	orrs	r3, r2
 8013720:	60fb      	str	r3, [r7, #12]
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	f023 0302 	bic.w	r3, r3, #2
 8013728:	617b      	str	r3, [r7, #20]
 801372a:	683b      	ldr	r3, [r7, #0]
 801372c:	689b      	ldr	r3, [r3, #8]
 801372e:	697a      	ldr	r2, [r7, #20]
 8013730:	4313      	orrs	r3, r2
 8013732:	617b      	str	r3, [r7, #20]
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	4a20      	ldr	r2, [pc, #128]	; (80137b8 <TIM_OC1_SetConfig+0xd8>)
 8013738:	4293      	cmp	r3, r2
 801373a:	d003      	beq.n	8013744 <TIM_OC1_SetConfig+0x64>
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	4a1f      	ldr	r2, [pc, #124]	; (80137bc <TIM_OC1_SetConfig+0xdc>)
 8013740:	4293      	cmp	r3, r2
 8013742:	d10c      	bne.n	801375e <TIM_OC1_SetConfig+0x7e>
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	f023 0308 	bic.w	r3, r3, #8
 801374a:	617b      	str	r3, [r7, #20]
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	68db      	ldr	r3, [r3, #12]
 8013750:	697a      	ldr	r2, [r7, #20]
 8013752:	4313      	orrs	r3, r2
 8013754:	617b      	str	r3, [r7, #20]
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	f023 0304 	bic.w	r3, r3, #4
 801375c:	617b      	str	r3, [r7, #20]
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	4a15      	ldr	r2, [pc, #84]	; (80137b8 <TIM_OC1_SetConfig+0xd8>)
 8013762:	4293      	cmp	r3, r2
 8013764:	d003      	beq.n	801376e <TIM_OC1_SetConfig+0x8e>
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	4a14      	ldr	r2, [pc, #80]	; (80137bc <TIM_OC1_SetConfig+0xdc>)
 801376a:	4293      	cmp	r3, r2
 801376c:	d111      	bne.n	8013792 <TIM_OC1_SetConfig+0xb2>
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013774:	613b      	str	r3, [r7, #16]
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801377c:	613b      	str	r3, [r7, #16]
 801377e:	683b      	ldr	r3, [r7, #0]
 8013780:	695b      	ldr	r3, [r3, #20]
 8013782:	693a      	ldr	r2, [r7, #16]
 8013784:	4313      	orrs	r3, r2
 8013786:	613b      	str	r3, [r7, #16]
 8013788:	683b      	ldr	r3, [r7, #0]
 801378a:	699b      	ldr	r3, [r3, #24]
 801378c:	693a      	ldr	r2, [r7, #16]
 801378e:	4313      	orrs	r3, r2
 8013790:	613b      	str	r3, [r7, #16]
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	693a      	ldr	r2, [r7, #16]
 8013796:	605a      	str	r2, [r3, #4]
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	68fa      	ldr	r2, [r7, #12]
 801379c:	619a      	str	r2, [r3, #24]
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	685a      	ldr	r2, [r3, #4]
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	635a      	str	r2, [r3, #52]	; 0x34
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	697a      	ldr	r2, [r7, #20]
 80137aa:	621a      	str	r2, [r3, #32]
 80137ac:	bf00      	nop
 80137ae:	371c      	adds	r7, #28
 80137b0:	46bd      	mov	sp, r7
 80137b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b6:	4770      	bx	lr
 80137b8:	40010000 	.word	0x40010000
 80137bc:	40010400 	.word	0x40010400

080137c0 <TIM_OC2_SetConfig>:
 80137c0:	b480      	push	{r7}
 80137c2:	b087      	sub	sp, #28
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
 80137c8:	6039      	str	r1, [r7, #0]
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	6a1b      	ldr	r3, [r3, #32]
 80137ce:	f023 0210 	bic.w	r2, r3, #16
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	621a      	str	r2, [r3, #32]
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6a1b      	ldr	r3, [r3, #32]
 80137da:	617b      	str	r3, [r7, #20]
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	685b      	ldr	r3, [r3, #4]
 80137e0:	613b      	str	r3, [r7, #16]
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	699b      	ldr	r3, [r3, #24]
 80137e6:	60fb      	str	r3, [r7, #12]
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80137ee:	60fb      	str	r3, [r7, #12]
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80137f6:	60fb      	str	r3, [r7, #12]
 80137f8:	683b      	ldr	r3, [r7, #0]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	021b      	lsls	r3, r3, #8
 80137fe:	68fa      	ldr	r2, [r7, #12]
 8013800:	4313      	orrs	r3, r2
 8013802:	60fb      	str	r3, [r7, #12]
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	f023 0320 	bic.w	r3, r3, #32
 801380a:	617b      	str	r3, [r7, #20]
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	689b      	ldr	r3, [r3, #8]
 8013810:	011b      	lsls	r3, r3, #4
 8013812:	697a      	ldr	r2, [r7, #20]
 8013814:	4313      	orrs	r3, r2
 8013816:	617b      	str	r3, [r7, #20]
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	4a22      	ldr	r2, [pc, #136]	; (80138a4 <TIM_OC2_SetConfig+0xe4>)
 801381c:	4293      	cmp	r3, r2
 801381e:	d003      	beq.n	8013828 <TIM_OC2_SetConfig+0x68>
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	4a21      	ldr	r2, [pc, #132]	; (80138a8 <TIM_OC2_SetConfig+0xe8>)
 8013824:	4293      	cmp	r3, r2
 8013826:	d10d      	bne.n	8013844 <TIM_OC2_SetConfig+0x84>
 8013828:	697b      	ldr	r3, [r7, #20]
 801382a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801382e:	617b      	str	r3, [r7, #20]
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	68db      	ldr	r3, [r3, #12]
 8013834:	011b      	lsls	r3, r3, #4
 8013836:	697a      	ldr	r2, [r7, #20]
 8013838:	4313      	orrs	r3, r2
 801383a:	617b      	str	r3, [r7, #20]
 801383c:	697b      	ldr	r3, [r7, #20]
 801383e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013842:	617b      	str	r3, [r7, #20]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	4a17      	ldr	r2, [pc, #92]	; (80138a4 <TIM_OC2_SetConfig+0xe4>)
 8013848:	4293      	cmp	r3, r2
 801384a:	d003      	beq.n	8013854 <TIM_OC2_SetConfig+0x94>
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	4a16      	ldr	r2, [pc, #88]	; (80138a8 <TIM_OC2_SetConfig+0xe8>)
 8013850:	4293      	cmp	r3, r2
 8013852:	d113      	bne.n	801387c <TIM_OC2_SetConfig+0xbc>
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801385a:	613b      	str	r3, [r7, #16]
 801385c:	693b      	ldr	r3, [r7, #16]
 801385e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013862:	613b      	str	r3, [r7, #16]
 8013864:	683b      	ldr	r3, [r7, #0]
 8013866:	695b      	ldr	r3, [r3, #20]
 8013868:	009b      	lsls	r3, r3, #2
 801386a:	693a      	ldr	r2, [r7, #16]
 801386c:	4313      	orrs	r3, r2
 801386e:	613b      	str	r3, [r7, #16]
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	699b      	ldr	r3, [r3, #24]
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	693a      	ldr	r2, [r7, #16]
 8013878:	4313      	orrs	r3, r2
 801387a:	613b      	str	r3, [r7, #16]
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	693a      	ldr	r2, [r7, #16]
 8013880:	605a      	str	r2, [r3, #4]
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	68fa      	ldr	r2, [r7, #12]
 8013886:	619a      	str	r2, [r3, #24]
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	685a      	ldr	r2, [r3, #4]
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	639a      	str	r2, [r3, #56]	; 0x38
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	697a      	ldr	r2, [r7, #20]
 8013894:	621a      	str	r2, [r3, #32]
 8013896:	bf00      	nop
 8013898:	371c      	adds	r7, #28
 801389a:	46bd      	mov	sp, r7
 801389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a0:	4770      	bx	lr
 80138a2:	bf00      	nop
 80138a4:	40010000 	.word	0x40010000
 80138a8:	40010400 	.word	0x40010400

080138ac <TIM_OC3_SetConfig>:
 80138ac:	b480      	push	{r7}
 80138ae:	b087      	sub	sp, #28
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6039      	str	r1, [r7, #0]
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	6a1b      	ldr	r3, [r3, #32]
 80138ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	621a      	str	r2, [r3, #32]
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	6a1b      	ldr	r3, [r3, #32]
 80138c6:	617b      	str	r3, [r7, #20]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	613b      	str	r3, [r7, #16]
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	69db      	ldr	r3, [r3, #28]
 80138d2:	60fb      	str	r3, [r7, #12]
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80138da:	60fb      	str	r3, [r7, #12]
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	f023 0303 	bic.w	r3, r3, #3
 80138e2:	60fb      	str	r3, [r7, #12]
 80138e4:	683b      	ldr	r3, [r7, #0]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	68fa      	ldr	r2, [r7, #12]
 80138ea:	4313      	orrs	r3, r2
 80138ec:	60fb      	str	r3, [r7, #12]
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80138f4:	617b      	str	r3, [r7, #20]
 80138f6:	683b      	ldr	r3, [r7, #0]
 80138f8:	689b      	ldr	r3, [r3, #8]
 80138fa:	021b      	lsls	r3, r3, #8
 80138fc:	697a      	ldr	r2, [r7, #20]
 80138fe:	4313      	orrs	r3, r2
 8013900:	617b      	str	r3, [r7, #20]
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	4a21      	ldr	r2, [pc, #132]	; (801398c <TIM_OC3_SetConfig+0xe0>)
 8013906:	4293      	cmp	r3, r2
 8013908:	d003      	beq.n	8013912 <TIM_OC3_SetConfig+0x66>
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	4a20      	ldr	r2, [pc, #128]	; (8013990 <TIM_OC3_SetConfig+0xe4>)
 801390e:	4293      	cmp	r3, r2
 8013910:	d10d      	bne.n	801392e <TIM_OC3_SetConfig+0x82>
 8013912:	697b      	ldr	r3, [r7, #20]
 8013914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013918:	617b      	str	r3, [r7, #20]
 801391a:	683b      	ldr	r3, [r7, #0]
 801391c:	68db      	ldr	r3, [r3, #12]
 801391e:	021b      	lsls	r3, r3, #8
 8013920:	697a      	ldr	r2, [r7, #20]
 8013922:	4313      	orrs	r3, r2
 8013924:	617b      	str	r3, [r7, #20]
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801392c:	617b      	str	r3, [r7, #20]
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	4a16      	ldr	r2, [pc, #88]	; (801398c <TIM_OC3_SetConfig+0xe0>)
 8013932:	4293      	cmp	r3, r2
 8013934:	d003      	beq.n	801393e <TIM_OC3_SetConfig+0x92>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	4a15      	ldr	r2, [pc, #84]	; (8013990 <TIM_OC3_SetConfig+0xe4>)
 801393a:	4293      	cmp	r3, r2
 801393c:	d113      	bne.n	8013966 <TIM_OC3_SetConfig+0xba>
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013944:	613b      	str	r3, [r7, #16]
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801394c:	613b      	str	r3, [r7, #16]
 801394e:	683b      	ldr	r3, [r7, #0]
 8013950:	695b      	ldr	r3, [r3, #20]
 8013952:	011b      	lsls	r3, r3, #4
 8013954:	693a      	ldr	r2, [r7, #16]
 8013956:	4313      	orrs	r3, r2
 8013958:	613b      	str	r3, [r7, #16]
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	699b      	ldr	r3, [r3, #24]
 801395e:	011b      	lsls	r3, r3, #4
 8013960:	693a      	ldr	r2, [r7, #16]
 8013962:	4313      	orrs	r3, r2
 8013964:	613b      	str	r3, [r7, #16]
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	693a      	ldr	r2, [r7, #16]
 801396a:	605a      	str	r2, [r3, #4]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	68fa      	ldr	r2, [r7, #12]
 8013970:	61da      	str	r2, [r3, #28]
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	685a      	ldr	r2, [r3, #4]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	63da      	str	r2, [r3, #60]	; 0x3c
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	697a      	ldr	r2, [r7, #20]
 801397e:	621a      	str	r2, [r3, #32]
 8013980:	bf00      	nop
 8013982:	371c      	adds	r7, #28
 8013984:	46bd      	mov	sp, r7
 8013986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398a:	4770      	bx	lr
 801398c:	40010000 	.word	0x40010000
 8013990:	40010400 	.word	0x40010400

08013994 <TIM_OC4_SetConfig>:
 8013994:	b480      	push	{r7}
 8013996:	b087      	sub	sp, #28
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6a1b      	ldr	r3, [r3, #32]
 80139a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	621a      	str	r2, [r3, #32]
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6a1b      	ldr	r3, [r3, #32]
 80139ae:	613b      	str	r3, [r7, #16]
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	685b      	ldr	r3, [r3, #4]
 80139b4:	617b      	str	r3, [r7, #20]
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	69db      	ldr	r3, [r3, #28]
 80139ba:	60fb      	str	r3, [r7, #12]
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80139c2:	60fb      	str	r3, [r7, #12]
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80139ca:	60fb      	str	r3, [r7, #12]
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	021b      	lsls	r3, r3, #8
 80139d2:	68fa      	ldr	r2, [r7, #12]
 80139d4:	4313      	orrs	r3, r2
 80139d6:	60fb      	str	r3, [r7, #12]
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80139de:	613b      	str	r3, [r7, #16]
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	689b      	ldr	r3, [r3, #8]
 80139e4:	031b      	lsls	r3, r3, #12
 80139e6:	693a      	ldr	r2, [r7, #16]
 80139e8:	4313      	orrs	r3, r2
 80139ea:	613b      	str	r3, [r7, #16]
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	4a12      	ldr	r2, [pc, #72]	; (8013a38 <TIM_OC4_SetConfig+0xa4>)
 80139f0:	4293      	cmp	r3, r2
 80139f2:	d003      	beq.n	80139fc <TIM_OC4_SetConfig+0x68>
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	4a11      	ldr	r2, [pc, #68]	; (8013a3c <TIM_OC4_SetConfig+0xa8>)
 80139f8:	4293      	cmp	r3, r2
 80139fa:	d109      	bne.n	8013a10 <TIM_OC4_SetConfig+0x7c>
 80139fc:	697b      	ldr	r3, [r7, #20]
 80139fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013a02:	617b      	str	r3, [r7, #20]
 8013a04:	683b      	ldr	r3, [r7, #0]
 8013a06:	695b      	ldr	r3, [r3, #20]
 8013a08:	019b      	lsls	r3, r3, #6
 8013a0a:	697a      	ldr	r2, [r7, #20]
 8013a0c:	4313      	orrs	r3, r2
 8013a0e:	617b      	str	r3, [r7, #20]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	697a      	ldr	r2, [r7, #20]
 8013a14:	605a      	str	r2, [r3, #4]
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	68fa      	ldr	r2, [r7, #12]
 8013a1a:	61da      	str	r2, [r3, #28]
 8013a1c:	683b      	ldr	r3, [r7, #0]
 8013a1e:	685a      	ldr	r2, [r3, #4]
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	641a      	str	r2, [r3, #64]	; 0x40
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	693a      	ldr	r2, [r7, #16]
 8013a28:	621a      	str	r2, [r3, #32]
 8013a2a:	bf00      	nop
 8013a2c:	371c      	adds	r7, #28
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr
 8013a36:	bf00      	nop
 8013a38:	40010000 	.word	0x40010000
 8013a3c:	40010400 	.word	0x40010400

08013a40 <TIM_TI1_ConfigInputStage>:
 8013a40:	b480      	push	{r7}
 8013a42:	b087      	sub	sp, #28
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	60f8      	str	r0, [r7, #12]
 8013a48:	60b9      	str	r1, [r7, #8]
 8013a4a:	607a      	str	r2, [r7, #4]
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	6a1b      	ldr	r3, [r3, #32]
 8013a50:	617b      	str	r3, [r7, #20]
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	6a1b      	ldr	r3, [r3, #32]
 8013a56:	f023 0201 	bic.w	r2, r3, #1
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	621a      	str	r2, [r3, #32]
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	699b      	ldr	r3, [r3, #24]
 8013a62:	613b      	str	r3, [r7, #16]
 8013a64:	693b      	ldr	r3, [r7, #16]
 8013a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8013a6a:	613b      	str	r3, [r7, #16]
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	011b      	lsls	r3, r3, #4
 8013a70:	693a      	ldr	r2, [r7, #16]
 8013a72:	4313      	orrs	r3, r2
 8013a74:	613b      	str	r3, [r7, #16]
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	f023 030a 	bic.w	r3, r3, #10
 8013a7c:	617b      	str	r3, [r7, #20]
 8013a7e:	697a      	ldr	r2, [r7, #20]
 8013a80:	68bb      	ldr	r3, [r7, #8]
 8013a82:	4313      	orrs	r3, r2
 8013a84:	617b      	str	r3, [r7, #20]
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	693a      	ldr	r2, [r7, #16]
 8013a8a:	619a      	str	r2, [r3, #24]
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	697a      	ldr	r2, [r7, #20]
 8013a90:	621a      	str	r2, [r3, #32]
 8013a92:	bf00      	nop
 8013a94:	371c      	adds	r7, #28
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr

08013a9e <TIM_TI2_ConfigInputStage>:
 8013a9e:	b480      	push	{r7}
 8013aa0:	b087      	sub	sp, #28
 8013aa2:	af00      	add	r7, sp, #0
 8013aa4:	60f8      	str	r0, [r7, #12]
 8013aa6:	60b9      	str	r1, [r7, #8]
 8013aa8:	607a      	str	r2, [r7, #4]
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	6a1b      	ldr	r3, [r3, #32]
 8013aae:	f023 0210 	bic.w	r2, r3, #16
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	621a      	str	r2, [r3, #32]
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	699b      	ldr	r3, [r3, #24]
 8013aba:	617b      	str	r3, [r7, #20]
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	6a1b      	ldr	r3, [r3, #32]
 8013ac0:	613b      	str	r3, [r7, #16]
 8013ac2:	697b      	ldr	r3, [r7, #20]
 8013ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8013ac8:	617b      	str	r3, [r7, #20]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	031b      	lsls	r3, r3, #12
 8013ace:	697a      	ldr	r2, [r7, #20]
 8013ad0:	4313      	orrs	r3, r2
 8013ad2:	617b      	str	r3, [r7, #20]
 8013ad4:	693b      	ldr	r3, [r7, #16]
 8013ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8013ada:	613b      	str	r3, [r7, #16]
 8013adc:	68bb      	ldr	r3, [r7, #8]
 8013ade:	011b      	lsls	r3, r3, #4
 8013ae0:	693a      	ldr	r2, [r7, #16]
 8013ae2:	4313      	orrs	r3, r2
 8013ae4:	613b      	str	r3, [r7, #16]
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	697a      	ldr	r2, [r7, #20]
 8013aea:	619a      	str	r2, [r3, #24]
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	693a      	ldr	r2, [r7, #16]
 8013af0:	621a      	str	r2, [r3, #32]
 8013af2:	bf00      	nop
 8013af4:	371c      	adds	r7, #28
 8013af6:	46bd      	mov	sp, r7
 8013af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013afc:	4770      	bx	lr

08013afe <TIM_ITRx_SetConfig>:
 8013afe:	b480      	push	{r7}
 8013b00:	b085      	sub	sp, #20
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
 8013b06:	6039      	str	r1, [r7, #0]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	689b      	ldr	r3, [r3, #8]
 8013b0c:	60fb      	str	r3, [r7, #12]
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013b14:	60fb      	str	r3, [r7, #12]
 8013b16:	683a      	ldr	r2, [r7, #0]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	4313      	orrs	r3, r2
 8013b1c:	f043 0307 	orr.w	r3, r3, #7
 8013b20:	60fb      	str	r3, [r7, #12]
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	68fa      	ldr	r2, [r7, #12]
 8013b26:	609a      	str	r2, [r3, #8]
 8013b28:	bf00      	nop
 8013b2a:	3714      	adds	r7, #20
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b32:	4770      	bx	lr

08013b34 <TIM_ETR_SetConfig>:
 8013b34:	b480      	push	{r7}
 8013b36:	b087      	sub	sp, #28
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	60f8      	str	r0, [r7, #12]
 8013b3c:	60b9      	str	r1, [r7, #8]
 8013b3e:	607a      	str	r2, [r7, #4]
 8013b40:	603b      	str	r3, [r7, #0]
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	689b      	ldr	r3, [r3, #8]
 8013b46:	617b      	str	r3, [r7, #20]
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8013b4e:	617b      	str	r3, [r7, #20]
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	021a      	lsls	r2, r3, #8
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	431a      	orrs	r2, r3
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	4313      	orrs	r3, r2
 8013b5c:	697a      	ldr	r2, [r7, #20]
 8013b5e:	4313      	orrs	r3, r2
 8013b60:	617b      	str	r3, [r7, #20]
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	697a      	ldr	r2, [r7, #20]
 8013b66:	609a      	str	r2, [r3, #8]
 8013b68:	bf00      	nop
 8013b6a:	371c      	adds	r7, #28
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b72:	4770      	bx	lr

08013b74 <HAL_TIMEx_MasterConfigSynchronization>:
 8013b74:	b480      	push	{r7}
 8013b76:	b085      	sub	sp, #20
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
 8013b7c:	6039      	str	r1, [r7, #0]
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013b84:	2b01      	cmp	r3, #1
 8013b86:	d101      	bne.n	8013b8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8013b88:	2302      	movs	r3, #2
 8013b8a:	e05a      	b.n	8013c42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	2201      	movs	r2, #1
 8013b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2202      	movs	r2, #2
 8013b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	685b      	ldr	r3, [r3, #4]
 8013ba2:	60fb      	str	r3, [r7, #12]
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	689b      	ldr	r3, [r3, #8]
 8013baa:	60bb      	str	r3, [r7, #8]
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013bb2:	60fb      	str	r3, [r7, #12]
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	68fa      	ldr	r2, [r7, #12]
 8013bba:	4313      	orrs	r3, r2
 8013bbc:	60fb      	str	r3, [r7, #12]
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	68fa      	ldr	r2, [r7, #12]
 8013bc4:	605a      	str	r2, [r3, #4]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	4a21      	ldr	r2, [pc, #132]	; (8013c50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	d022      	beq.n	8013c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013bd8:	d01d      	beq.n	8013c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	4a1d      	ldr	r2, [pc, #116]	; (8013c54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8013be0:	4293      	cmp	r3, r2
 8013be2:	d018      	beq.n	8013c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	4a1b      	ldr	r2, [pc, #108]	; (8013c58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8013bea:	4293      	cmp	r3, r2
 8013bec:	d013      	beq.n	8013c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	4a1a      	ldr	r2, [pc, #104]	; (8013c5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d00e      	beq.n	8013c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	4a18      	ldr	r2, [pc, #96]	; (8013c60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8013bfe:	4293      	cmp	r3, r2
 8013c00:	d009      	beq.n	8013c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	4a17      	ldr	r2, [pc, #92]	; (8013c64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d004      	beq.n	8013c16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	4a15      	ldr	r2, [pc, #84]	; (8013c68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8013c12:	4293      	cmp	r3, r2
 8013c14:	d10c      	bne.n	8013c30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8013c16:	68bb      	ldr	r3, [r7, #8]
 8013c18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013c1c:	60bb      	str	r3, [r7, #8]
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	685b      	ldr	r3, [r3, #4]
 8013c22:	68ba      	ldr	r2, [r7, #8]
 8013c24:	4313      	orrs	r3, r2
 8013c26:	60bb      	str	r3, [r7, #8]
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	68ba      	ldr	r2, [r7, #8]
 8013c2e:	609a      	str	r2, [r3, #8]
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	2201      	movs	r2, #1
 8013c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8013c40:	2300      	movs	r3, #0
 8013c42:	4618      	mov	r0, r3
 8013c44:	3714      	adds	r7, #20
 8013c46:	46bd      	mov	sp, r7
 8013c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c4c:	4770      	bx	lr
 8013c4e:	bf00      	nop
 8013c50:	40010000 	.word	0x40010000
 8013c54:	40000400 	.word	0x40000400
 8013c58:	40000800 	.word	0x40000800
 8013c5c:	40000c00 	.word	0x40000c00
 8013c60:	40010400 	.word	0x40010400
 8013c64:	40014000 	.word	0x40014000
 8013c68:	40001800 	.word	0x40001800

08013c6c <HAL_TIMEx_CommutCallback>:
 8013c6c:	b480      	push	{r7}
 8013c6e:	b083      	sub	sp, #12
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
 8013c74:	bf00      	nop
 8013c76:	370c      	adds	r7, #12
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c7e:	4770      	bx	lr

08013c80 <HAL_TIMEx_BreakCallback>:
 8013c80:	b480      	push	{r7}
 8013c82:	b083      	sub	sp, #12
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	bf00      	nop
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr

08013c94 <HAL_UART_Init>:
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b082      	sub	sp, #8
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d101      	bne.n	8013ca6 <HAL_UART_Init+0x12>
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	e03f      	b.n	8013d26 <HAL_UART_Init+0x92>
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013cac:	b2db      	uxtb	r3, r3
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d106      	bne.n	8013cc0 <HAL_UART_Init+0x2c>
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8013cba:	6878      	ldr	r0, [r7, #4]
 8013cbc:	f7fb f984 	bl	800efc8 <HAL_UART_MspInit>
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	2224      	movs	r2, #36	; 0x24
 8013cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	68da      	ldr	r2, [r3, #12]
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8013cd6:	60da      	str	r2, [r3, #12]
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f000 f829 	bl	8013d30 <UART_SetConfig>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	691a      	ldr	r2, [r3, #16]
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013cec:	611a      	str	r2, [r3, #16]
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	695a      	ldr	r2, [r3, #20]
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013cfc:	615a      	str	r2, [r3, #20]
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	681b      	ldr	r3, [r3, #0]
 8013d02:	68da      	ldr	r2, [r3, #12]
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8013d0c:	60da      	str	r2, [r3, #12]
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2200      	movs	r2, #0
 8013d12:	641a      	str	r2, [r3, #64]	; 0x40
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	2220      	movs	r2, #32
 8013d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	2220      	movs	r2, #32
 8013d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013d24:	2300      	movs	r3, #0
 8013d26:	4618      	mov	r0, r3
 8013d28:	3708      	adds	r7, #8
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	bd80      	pop	{r7, pc}
	...

08013d30 <UART_SetConfig>:
 8013d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013d34:	b0c0      	sub	sp, #256	; 0x100
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8013d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	691b      	ldr	r3, [r3, #16]
 8013d44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8013d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d4c:	68d9      	ldr	r1, [r3, #12]
 8013d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d52:	681a      	ldr	r2, [r3, #0]
 8013d54:	ea40 0301 	orr.w	r3, r0, r1
 8013d58:	6113      	str	r3, [r2, #16]
 8013d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d5e:	689a      	ldr	r2, [r3, #8]
 8013d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d64:	691b      	ldr	r3, [r3, #16]
 8013d66:	431a      	orrs	r2, r3
 8013d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d6c:	695b      	ldr	r3, [r3, #20]
 8013d6e:	431a      	orrs	r2, r3
 8013d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d74:	69db      	ldr	r3, [r3, #28]
 8013d76:	4313      	orrs	r3, r2
 8013d78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	68db      	ldr	r3, [r3, #12]
 8013d84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8013d88:	f021 010c 	bic.w	r1, r1, #12
 8013d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d90:	681a      	ldr	r2, [r3, #0]
 8013d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013d96:	430b      	orrs	r3, r1
 8013d98:	60d3      	str	r3, [r2, #12]
 8013d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	695b      	ldr	r3, [r3, #20]
 8013da2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8013da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013daa:	6999      	ldr	r1, [r3, #24]
 8013dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013db0:	681a      	ldr	r2, [r3, #0]
 8013db2:	ea40 0301 	orr.w	r3, r0, r1
 8013db6:	6153      	str	r3, [r2, #20]
 8013db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	4b8f      	ldr	r3, [pc, #572]	; (8013ffc <UART_SetConfig+0x2cc>)
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d005      	beq.n	8013dd0 <UART_SetConfig+0xa0>
 8013dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013dc8:	681a      	ldr	r2, [r3, #0]
 8013dca:	4b8d      	ldr	r3, [pc, #564]	; (8014000 <UART_SetConfig+0x2d0>)
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d104      	bne.n	8013dda <UART_SetConfig+0xaa>
 8013dd0:	f7fe f8fe 	bl	8011fd0 <HAL_RCC_GetPCLK2Freq>
 8013dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8013dd8:	e003      	b.n	8013de2 <UART_SetConfig+0xb2>
 8013dda:	f7fe f8e5 	bl	8011fa8 <HAL_RCC_GetPCLK1Freq>
 8013dde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8013de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013de6:	69db      	ldr	r3, [r3, #28]
 8013de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8013dec:	f040 810c 	bne.w	8014008 <UART_SetConfig+0x2d8>
 8013df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013df4:	2200      	movs	r2, #0
 8013df6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8013dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8013dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8013e02:	4622      	mov	r2, r4
 8013e04:	462b      	mov	r3, r5
 8013e06:	1891      	adds	r1, r2, r2
 8013e08:	65b9      	str	r1, [r7, #88]	; 0x58
 8013e0a:	415b      	adcs	r3, r3
 8013e0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8013e12:	4621      	mov	r1, r4
 8013e14:	eb12 0801 	adds.w	r8, r2, r1
 8013e18:	4629      	mov	r1, r5
 8013e1a:	eb43 0901 	adc.w	r9, r3, r1
 8013e1e:	f04f 0200 	mov.w	r2, #0
 8013e22:	f04f 0300 	mov.w	r3, #0
 8013e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8013e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8013e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8013e32:	4690      	mov	r8, r2
 8013e34:	4699      	mov	r9, r3
 8013e36:	4623      	mov	r3, r4
 8013e38:	eb18 0303 	adds.w	r3, r8, r3
 8013e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8013e40:	462b      	mov	r3, r5
 8013e42:	eb49 0303 	adc.w	r3, r9, r3
 8013e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8013e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013e4e:	685b      	ldr	r3, [r3, #4]
 8013e50:	2200      	movs	r2, #0
 8013e52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8013e56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8013e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8013e5e:	460b      	mov	r3, r1
 8013e60:	18db      	adds	r3, r3, r3
 8013e62:	653b      	str	r3, [r7, #80]	; 0x50
 8013e64:	4613      	mov	r3, r2
 8013e66:	eb42 0303 	adc.w	r3, r2, r3
 8013e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8013e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8013e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8013e74:	f7ec ff08 	bl	8000c88 <__aeabi_uldivmod>
 8013e78:	4602      	mov	r2, r0
 8013e7a:	460b      	mov	r3, r1
 8013e7c:	4b61      	ldr	r3, [pc, #388]	; (8014004 <UART_SetConfig+0x2d4>)
 8013e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8013e82:	095b      	lsrs	r3, r3, #5
 8013e84:	011c      	lsls	r4, r3, #4
 8013e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8013e90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8013e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8013e98:	4642      	mov	r2, r8
 8013e9a:	464b      	mov	r3, r9
 8013e9c:	1891      	adds	r1, r2, r2
 8013e9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8013ea0:	415b      	adcs	r3, r3
 8013ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8013ea8:	4641      	mov	r1, r8
 8013eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8013eae:	4649      	mov	r1, r9
 8013eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8013eb4:	f04f 0200 	mov.w	r2, #0
 8013eb8:	f04f 0300 	mov.w	r3, #0
 8013ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8013ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8013ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8013ec8:	4692      	mov	sl, r2
 8013eca:	469b      	mov	fp, r3
 8013ecc:	4643      	mov	r3, r8
 8013ece:	eb1a 0303 	adds.w	r3, sl, r3
 8013ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013ed6:	464b      	mov	r3, r9
 8013ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8013edc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	2200      	movs	r2, #0
 8013ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8013eec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8013ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8013ef4:	460b      	mov	r3, r1
 8013ef6:	18db      	adds	r3, r3, r3
 8013ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8013efa:	4613      	mov	r3, r2
 8013efc:	eb42 0303 	adc.w	r3, r2, r3
 8013f00:	647b      	str	r3, [r7, #68]	; 0x44
 8013f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8013f0a:	f7ec febd 	bl	8000c88 <__aeabi_uldivmod>
 8013f0e:	4602      	mov	r2, r0
 8013f10:	460b      	mov	r3, r1
 8013f12:	4611      	mov	r1, r2
 8013f14:	4b3b      	ldr	r3, [pc, #236]	; (8014004 <UART_SetConfig+0x2d4>)
 8013f16:	fba3 2301 	umull	r2, r3, r3, r1
 8013f1a:	095b      	lsrs	r3, r3, #5
 8013f1c:	2264      	movs	r2, #100	; 0x64
 8013f1e:	fb02 f303 	mul.w	r3, r2, r3
 8013f22:	1acb      	subs	r3, r1, r3
 8013f24:	00db      	lsls	r3, r3, #3
 8013f26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8013f2a:	4b36      	ldr	r3, [pc, #216]	; (8014004 <UART_SetConfig+0x2d4>)
 8013f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8013f30:	095b      	lsrs	r3, r3, #5
 8013f32:	005b      	lsls	r3, r3, #1
 8013f34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8013f38:	441c      	add	r4, r3
 8013f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013f3e:	2200      	movs	r2, #0
 8013f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8013f44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8013f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8013f4c:	4642      	mov	r2, r8
 8013f4e:	464b      	mov	r3, r9
 8013f50:	1891      	adds	r1, r2, r2
 8013f52:	63b9      	str	r1, [r7, #56]	; 0x38
 8013f54:	415b      	adcs	r3, r3
 8013f56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8013f5c:	4641      	mov	r1, r8
 8013f5e:	1851      	adds	r1, r2, r1
 8013f60:	6339      	str	r1, [r7, #48]	; 0x30
 8013f62:	4649      	mov	r1, r9
 8013f64:	414b      	adcs	r3, r1
 8013f66:	637b      	str	r3, [r7, #52]	; 0x34
 8013f68:	f04f 0200 	mov.w	r2, #0
 8013f6c:	f04f 0300 	mov.w	r3, #0
 8013f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8013f74:	4659      	mov	r1, fp
 8013f76:	00cb      	lsls	r3, r1, #3
 8013f78:	4651      	mov	r1, sl
 8013f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013f7e:	4651      	mov	r1, sl
 8013f80:	00ca      	lsls	r2, r1, #3
 8013f82:	4610      	mov	r0, r2
 8013f84:	4619      	mov	r1, r3
 8013f86:	4603      	mov	r3, r0
 8013f88:	4642      	mov	r2, r8
 8013f8a:	189b      	adds	r3, r3, r2
 8013f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013f90:	464b      	mov	r3, r9
 8013f92:	460a      	mov	r2, r1
 8013f94:	eb42 0303 	adc.w	r3, r2, r3
 8013f98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8013f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013fa0:	685b      	ldr	r3, [r3, #4]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8013fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8013fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8013fb0:	460b      	mov	r3, r1
 8013fb2:	18db      	adds	r3, r3, r3
 8013fb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	eb42 0303 	adc.w	r3, r2, r3
 8013fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8013fc6:	f7ec fe5f 	bl	8000c88 <__aeabi_uldivmod>
 8013fca:	4602      	mov	r2, r0
 8013fcc:	460b      	mov	r3, r1
 8013fce:	4b0d      	ldr	r3, [pc, #52]	; (8014004 <UART_SetConfig+0x2d4>)
 8013fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8013fd4:	095b      	lsrs	r3, r3, #5
 8013fd6:	2164      	movs	r1, #100	; 0x64
 8013fd8:	fb01 f303 	mul.w	r3, r1, r3
 8013fdc:	1ad3      	subs	r3, r2, r3
 8013fde:	00db      	lsls	r3, r3, #3
 8013fe0:	3332      	adds	r3, #50	; 0x32
 8013fe2:	4a08      	ldr	r2, [pc, #32]	; (8014004 <UART_SetConfig+0x2d4>)
 8013fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8013fe8:	095b      	lsrs	r3, r3, #5
 8013fea:	f003 0207 	and.w	r2, r3, #7
 8013fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	4422      	add	r2, r4
 8013ff6:	609a      	str	r2, [r3, #8]
 8013ff8:	e105      	b.n	8014206 <UART_SetConfig+0x4d6>
 8013ffa:	bf00      	nop
 8013ffc:	40011000 	.word	0x40011000
 8014000:	40011400 	.word	0x40011400
 8014004:	51eb851f 	.word	0x51eb851f
 8014008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801400c:	2200      	movs	r2, #0
 801400e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8014012:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8014016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 801401a:	4642      	mov	r2, r8
 801401c:	464b      	mov	r3, r9
 801401e:	1891      	adds	r1, r2, r2
 8014020:	6239      	str	r1, [r7, #32]
 8014022:	415b      	adcs	r3, r3
 8014024:	627b      	str	r3, [r7, #36]	; 0x24
 8014026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801402a:	4641      	mov	r1, r8
 801402c:	1854      	adds	r4, r2, r1
 801402e:	4649      	mov	r1, r9
 8014030:	eb43 0501 	adc.w	r5, r3, r1
 8014034:	f04f 0200 	mov.w	r2, #0
 8014038:	f04f 0300 	mov.w	r3, #0
 801403c:	00eb      	lsls	r3, r5, #3
 801403e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8014042:	00e2      	lsls	r2, r4, #3
 8014044:	4614      	mov	r4, r2
 8014046:	461d      	mov	r5, r3
 8014048:	4643      	mov	r3, r8
 801404a:	18e3      	adds	r3, r4, r3
 801404c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8014050:	464b      	mov	r3, r9
 8014052:	eb45 0303 	adc.w	r3, r5, r3
 8014056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801405e:	685b      	ldr	r3, [r3, #4]
 8014060:	2200      	movs	r2, #0
 8014062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801406a:	f04f 0200 	mov.w	r2, #0
 801406e:	f04f 0300 	mov.w	r3, #0
 8014072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8014076:	4629      	mov	r1, r5
 8014078:	008b      	lsls	r3, r1, #2
 801407a:	4621      	mov	r1, r4
 801407c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8014080:	4621      	mov	r1, r4
 8014082:	008a      	lsls	r2, r1, #2
 8014084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8014088:	f7ec fdfe 	bl	8000c88 <__aeabi_uldivmod>
 801408c:	4602      	mov	r2, r0
 801408e:	460b      	mov	r3, r1
 8014090:	4b60      	ldr	r3, [pc, #384]	; (8014214 <UART_SetConfig+0x4e4>)
 8014092:	fba3 2302 	umull	r2, r3, r3, r2
 8014096:	095b      	lsrs	r3, r3, #5
 8014098:	011c      	lsls	r4, r3, #4
 801409a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801409e:	2200      	movs	r2, #0
 80140a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80140a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80140a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80140ac:	4642      	mov	r2, r8
 80140ae:	464b      	mov	r3, r9
 80140b0:	1891      	adds	r1, r2, r2
 80140b2:	61b9      	str	r1, [r7, #24]
 80140b4:	415b      	adcs	r3, r3
 80140b6:	61fb      	str	r3, [r7, #28]
 80140b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80140bc:	4641      	mov	r1, r8
 80140be:	1851      	adds	r1, r2, r1
 80140c0:	6139      	str	r1, [r7, #16]
 80140c2:	4649      	mov	r1, r9
 80140c4:	414b      	adcs	r3, r1
 80140c6:	617b      	str	r3, [r7, #20]
 80140c8:	f04f 0200 	mov.w	r2, #0
 80140cc:	f04f 0300 	mov.w	r3, #0
 80140d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80140d4:	4659      	mov	r1, fp
 80140d6:	00cb      	lsls	r3, r1, #3
 80140d8:	4651      	mov	r1, sl
 80140da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80140de:	4651      	mov	r1, sl
 80140e0:	00ca      	lsls	r2, r1, #3
 80140e2:	4610      	mov	r0, r2
 80140e4:	4619      	mov	r1, r3
 80140e6:	4603      	mov	r3, r0
 80140e8:	4642      	mov	r2, r8
 80140ea:	189b      	adds	r3, r3, r2
 80140ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80140f0:	464b      	mov	r3, r9
 80140f2:	460a      	mov	r2, r1
 80140f4:	eb42 0303 	adc.w	r3, r2, r3
 80140f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80140fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014100:	685b      	ldr	r3, [r3, #4]
 8014102:	2200      	movs	r2, #0
 8014104:	67bb      	str	r3, [r7, #120]	; 0x78
 8014106:	67fa      	str	r2, [r7, #124]	; 0x7c
 8014108:	f04f 0200 	mov.w	r2, #0
 801410c:	f04f 0300 	mov.w	r3, #0
 8014110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8014114:	4649      	mov	r1, r9
 8014116:	008b      	lsls	r3, r1, #2
 8014118:	4641      	mov	r1, r8
 801411a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801411e:	4641      	mov	r1, r8
 8014120:	008a      	lsls	r2, r1, #2
 8014122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8014126:	f7ec fdaf 	bl	8000c88 <__aeabi_uldivmod>
 801412a:	4602      	mov	r2, r0
 801412c:	460b      	mov	r3, r1
 801412e:	4b39      	ldr	r3, [pc, #228]	; (8014214 <UART_SetConfig+0x4e4>)
 8014130:	fba3 1302 	umull	r1, r3, r3, r2
 8014134:	095b      	lsrs	r3, r3, #5
 8014136:	2164      	movs	r1, #100	; 0x64
 8014138:	fb01 f303 	mul.w	r3, r1, r3
 801413c:	1ad3      	subs	r3, r2, r3
 801413e:	011b      	lsls	r3, r3, #4
 8014140:	3332      	adds	r3, #50	; 0x32
 8014142:	4a34      	ldr	r2, [pc, #208]	; (8014214 <UART_SetConfig+0x4e4>)
 8014144:	fba2 2303 	umull	r2, r3, r2, r3
 8014148:	095b      	lsrs	r3, r3, #5
 801414a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801414e:	441c      	add	r4, r3
 8014150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014154:	2200      	movs	r2, #0
 8014156:	673b      	str	r3, [r7, #112]	; 0x70
 8014158:	677a      	str	r2, [r7, #116]	; 0x74
 801415a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801415e:	4642      	mov	r2, r8
 8014160:	464b      	mov	r3, r9
 8014162:	1891      	adds	r1, r2, r2
 8014164:	60b9      	str	r1, [r7, #8]
 8014166:	415b      	adcs	r3, r3
 8014168:	60fb      	str	r3, [r7, #12]
 801416a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801416e:	4641      	mov	r1, r8
 8014170:	1851      	adds	r1, r2, r1
 8014172:	6039      	str	r1, [r7, #0]
 8014174:	4649      	mov	r1, r9
 8014176:	414b      	adcs	r3, r1
 8014178:	607b      	str	r3, [r7, #4]
 801417a:	f04f 0200 	mov.w	r2, #0
 801417e:	f04f 0300 	mov.w	r3, #0
 8014182:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8014186:	4659      	mov	r1, fp
 8014188:	00cb      	lsls	r3, r1, #3
 801418a:	4651      	mov	r1, sl
 801418c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8014190:	4651      	mov	r1, sl
 8014192:	00ca      	lsls	r2, r1, #3
 8014194:	4610      	mov	r0, r2
 8014196:	4619      	mov	r1, r3
 8014198:	4603      	mov	r3, r0
 801419a:	4642      	mov	r2, r8
 801419c:	189b      	adds	r3, r3, r2
 801419e:	66bb      	str	r3, [r7, #104]	; 0x68
 80141a0:	464b      	mov	r3, r9
 80141a2:	460a      	mov	r2, r1
 80141a4:	eb42 0303 	adc.w	r3, r2, r3
 80141a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80141aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80141ae:	685b      	ldr	r3, [r3, #4]
 80141b0:	2200      	movs	r2, #0
 80141b2:	663b      	str	r3, [r7, #96]	; 0x60
 80141b4:	667a      	str	r2, [r7, #100]	; 0x64
 80141b6:	f04f 0200 	mov.w	r2, #0
 80141ba:	f04f 0300 	mov.w	r3, #0
 80141be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80141c2:	4649      	mov	r1, r9
 80141c4:	008b      	lsls	r3, r1, #2
 80141c6:	4641      	mov	r1, r8
 80141c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80141cc:	4641      	mov	r1, r8
 80141ce:	008a      	lsls	r2, r1, #2
 80141d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80141d4:	f7ec fd58 	bl	8000c88 <__aeabi_uldivmod>
 80141d8:	4602      	mov	r2, r0
 80141da:	460b      	mov	r3, r1
 80141dc:	4b0d      	ldr	r3, [pc, #52]	; (8014214 <UART_SetConfig+0x4e4>)
 80141de:	fba3 1302 	umull	r1, r3, r3, r2
 80141e2:	095b      	lsrs	r3, r3, #5
 80141e4:	2164      	movs	r1, #100	; 0x64
 80141e6:	fb01 f303 	mul.w	r3, r1, r3
 80141ea:	1ad3      	subs	r3, r2, r3
 80141ec:	011b      	lsls	r3, r3, #4
 80141ee:	3332      	adds	r3, #50	; 0x32
 80141f0:	4a08      	ldr	r2, [pc, #32]	; (8014214 <UART_SetConfig+0x4e4>)
 80141f2:	fba2 2303 	umull	r2, r3, r2, r3
 80141f6:	095b      	lsrs	r3, r3, #5
 80141f8:	f003 020f 	and.w	r2, r3, #15
 80141fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	4422      	add	r2, r4
 8014204:	609a      	str	r2, [r3, #8]
 8014206:	bf00      	nop
 8014208:	f507 7780 	add.w	r7, r7, #256	; 0x100
 801420c:	46bd      	mov	sp, r7
 801420e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8014212:	bf00      	nop
 8014214:	51eb851f 	.word	0x51eb851f

08014218 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8014222:	2300      	movs	r3, #0
 8014224:	60fb      	str	r3, [r7, #12]
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801422c:	68fa      	ldr	r2, [r7, #12]
 801422e:	429a      	cmp	r2, r3
 8014230:	d20b      	bcs.n	801424a <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 8014232:	68fb      	ldr	r3, [r7, #12]
 8014234:	011b      	lsls	r3, r3, #4
 8014236:	687a      	ldr	r2, [r7, #4]
 8014238:	4413      	add	r3, r2
 801423a:	6839      	ldr	r1, [r7, #0]
 801423c:	4618      	mov	r0, r3
 801423e:	f000 f817 	bl	8014270 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	3301      	adds	r3, #1
 8014246:	60fb      	str	r3, [r7, #12]
 8014248:	e7ed      	b.n	8014226 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 801424a:	bf00      	nop
 801424c:	3710      	adds	r7, #16
 801424e:	46bd      	mov	sp, r7
 8014250:	bd80      	pop	{r7, pc}

08014252 <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8014252:	b580      	push	{r7, lr}
 8014254:	b082      	sub	sp, #8
 8014256:	af00      	add	r7, sp, #0
 8014258:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 801425a:	f7f6 fa7b 	bl	800a754 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 801425e:	4603      	mov	r3, r0
 8014260:	6879      	ldr	r1, [r7, #4]
 8014262:	4618      	mov	r0, r3
 8014264:	f7ff ffd8 	bl	8014218 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 8014268:	bf00      	nop
 801426a:	3708      	adds	r7, #8
 801426c:	46bd      	mov	sp, r7
 801426e:	bd80      	pop	{r7, pc}

08014270 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 8014270:	b5b0      	push	{r4, r5, r7, lr}
 8014272:	b082      	sub	sp, #8
 8014274:	af00      	add	r7, sp, #0
 8014276:	6078      	str	r0, [r7, #4]
 8014278:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	4618      	mov	r0, r3
 801427e:	f7ed f8f8 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8014282:	4603      	mov	r3, r0
 8014284:	2b00      	cmp	r3, #0
 8014286:	d001      	beq.n	801428c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 8014288:	f006 f975 	bl	801a576 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	68dc      	ldr	r4, [r3, #12]
 8014290:	687d      	ldr	r5, [r7, #4]
 8014292:	463b      	mov	r3, r7
 8014294:	4618      	mov	r0, r3
 8014296:	f7f6 fd5c 	bl	800ad52 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 801429a:	4603      	mov	r3, r0
 801429c:	4619      	mov	r1, r3
 801429e:	4628      	mov	r0, r5
 80142a0:	47a0      	blx	r4
 80142a2:	bf00      	nop
    }
 80142a4:	3708      	adds	r7, #8
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bdb0      	pop	{r4, r5, r7, pc}

080142aa <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 80142aa:	b5b0      	push	{r4, r5, r7, lr}
 80142ac:	b082      	sub	sp, #8
 80142ae:	af00      	add	r7, sp, #0
 80142b0:	6078      	str	r0, [r7, #4]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	240f      	movs	r4, #15
 80142b6:	461d      	mov	r5, r3
 80142b8:	2c00      	cmp	r4, #0
 80142ba:	db05      	blt.n	80142c8 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 80142bc:	4628      	mov	r0, r5
 80142be:	f7f6 fc2d 	bl	800ab1c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 80142c2:	3510      	adds	r5, #16
 80142c4:	3c01      	subs	r4, #1
 80142c6:	e7f7      	b.n	80142b8 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2200      	movs	r2, #0
 80142cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	4618      	mov	r0, r3
 80142d4:	3708      	adds	r7, #8
 80142d6:	46bd      	mov	sp, r7
 80142d8:	bdb0      	pop	{r4, r5, r7, pc}

080142da <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 80142da:	b590      	push	{r4, r7, lr}
 80142dc:	b083      	sub	sp, #12
 80142de:	af00      	add	r7, sp, #0
 80142e0:	6078      	str	r0, [r7, #4]
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d00a      	beq.n	80142fe <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	429c      	cmp	r4, r3
 80142f2:	d004      	beq.n	80142fe <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 80142f4:	3c10      	subs	r4, #16
 80142f6:	4620      	mov	r0, r4
 80142f8:	f7f6 f9e8 	bl	800a6cc <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 80142fc:	e7f7      	b.n	80142ee <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	4618      	mov	r0, r3
 8014302:	370c      	adds	r7, #12
 8014304:	46bd      	mov	sp, r7
 8014306:	bd90      	pop	{r4, r7, pc}

08014308 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 8014308:	b580      	push	{r7, lr}
 801430a:	af00      	add	r7, sp, #0
 801430c:	4801      	ldr	r0, [pc, #4]	; (8014314 <__tcf_0+0xc>)
 801430e:	f7ff ffe4 	bl	80142da <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 8014312:	bd80      	pop	{r7, pc}
 8014314:	20001570 	.word	0x20001570

08014318 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 8014318:	b580      	push	{r7, lr}
 801431a:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 801431c:	4b12      	ldr	r3, [pc, #72]	; (8014368 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	f3bf 8f5b 	dmb	ish
 8014324:	b2db      	uxtb	r3, r3
 8014326:	f003 0301 	and.w	r3, r3, #1
 801432a:	2b00      	cmp	r3, #0
 801432c:	bf0c      	ite	eq
 801432e:	2301      	moveq	r3, #1
 8014330:	2300      	movne	r3, #0
 8014332:	b2db      	uxtb	r3, r3
 8014334:	2b00      	cmp	r3, #0
 8014336:	d013      	beq.n	8014360 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 8014338:	480b      	ldr	r0, [pc, #44]	; (8014368 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 801433a:	f006 f90b 	bl	801a554 <__cxa_guard_acquire>
 801433e:	4603      	mov	r3, r0
 8014340:	2b00      	cmp	r3, #0
 8014342:	bf14      	ite	ne
 8014344:	2301      	movne	r3, #1
 8014346:	2300      	moveq	r3, #0
 8014348:	b2db      	uxtb	r3, r3
 801434a:	2b00      	cmp	r3, #0
 801434c:	d008      	beq.n	8014360 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 801434e:	4807      	ldr	r0, [pc, #28]	; (801436c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 8014350:	f7ff ffab 	bl	80142aa <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 8014354:	4806      	ldr	r0, [pc, #24]	; (8014370 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 8014356:	f006 fb5e 	bl	801aa16 <atexit>
 801435a:	4803      	ldr	r0, [pc, #12]	; (8014368 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 801435c:	f006 f906 	bl	801a56c <__cxa_guard_release>
		return instance;
 8014360:	4b02      	ldr	r3, [pc, #8]	; (801436c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8014362:	4618      	mov	r0, r3
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	20001674 	.word	0x20001674
 801436c:	20001570 	.word	0x20001570
 8014370:	08014309 	.word	0x08014309

08014374 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 8014374:	b580      	push	{r7, lr}
 8014376:	b084      	sub	sp, #16
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
 801437c:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 801437e:	2300      	movs	r3, #0
 8014380:	60fb      	str	r3, [r7, #12]
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8014388:	68fa      	ldr	r2, [r7, #12]
 801438a:	429a      	cmp	r2, r3
 801438c:	d20b      	bcs.n	80143a6 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	011b      	lsls	r3, r3, #4
 8014392:	687a      	ldr	r2, [r7, #4]
 8014394:	4413      	add	r3, r2
 8014396:	6839      	ldr	r1, [r7, #0]
 8014398:	4618      	mov	r0, r3
 801439a:	f7ff ff69 	bl	8014270 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	3301      	adds	r3, #1
 80143a2:	60fb      	str	r3, [r7, #12]
 80143a4:	e7ed      	b.n	8014382 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 80143a6:	bf00      	nop
 80143a8:	3710      	adds	r7, #16
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}

080143ae <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80143ae:	b580      	push	{r7, lr}
 80143b0:	b082      	sub	sp, #8
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 80143b6:	f7ff ffaf 	bl	8014318 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 80143ba:	4603      	mov	r3, r0
 80143bc:	6879      	ldr	r1, [r7, #4]
 80143be:	4618      	mov	r0, r3
 80143c0:	f7ff ffd8 	bl	8014374 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 80143c4:	bf00      	nop
 80143c6:	3708      	adds	r7, #8
 80143c8:	46bd      	mov	sp, r7
 80143ca:	bd80      	pop	{r7, pc}

080143cc <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 80143cc:	b580      	push	{r7, lr}
 80143ce:	b084      	sub	sp, #16
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	460b      	mov	r3, r1
 80143d6:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 80143d8:	2300      	movs	r3, #0
 80143da:	60fb      	str	r3, [r7, #12]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80143e2:	68fa      	ldr	r2, [r7, #12]
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d20c      	bcs.n	8014402 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	011b      	lsls	r3, r3, #4
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	4413      	add	r3, r2
 80143f0:	887a      	ldrh	r2, [r7, #2]
 80143f2:	4611      	mov	r1, r2
 80143f4:	4618      	mov	r0, r3
 80143f6:	f000 f819 	bl	801442c <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	3301      	adds	r3, #1
 80143fe:	60fb      	str	r3, [r7, #12]
 8014400:	e7ec      	b.n	80143dc <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 8014402:	bf00      	nop
 8014404:	3710      	adds	r7, #16
 8014406:	46bd      	mov	sp, r7
 8014408:	bd80      	pop	{r7, pc}

0801440a <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 801440a:	b580      	push	{r7, lr}
 801440c:	b082      	sub	sp, #8
 801440e:	af00      	add	r7, sp, #0
 8014410:	4603      	mov	r3, r0
 8014412:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 8014414:	f7f4 f9bc 	bl	8008790 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 8014418:	4602      	mov	r2, r0
 801441a:	88fb      	ldrh	r3, [r7, #6]
 801441c:	4619      	mov	r1, r3
 801441e:	4610      	mov	r0, r2
 8014420:	f7ff ffd4 	bl	80143cc <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 8014424:	bf00      	nop
 8014426:	3708      	adds	r7, #8
 8014428:	46bd      	mov	sp, r7
 801442a:	bd80      	pop	{r7, pc}

0801442c <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 801442c:	b5b0      	push	{r4, r5, r7, lr}
 801442e:	b082      	sub	sp, #8
 8014430:	af00      	add	r7, sp, #0
 8014432:	6078      	str	r0, [r7, #4]
 8014434:	460b      	mov	r3, r1
 8014436:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	4618      	mov	r0, r3
 801443c:	f7ed f819 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8014440:	4603      	mov	r3, r0
 8014442:	2b00      	cmp	r3, #0
 8014444:	d001      	beq.n	801444a <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 8014446:	f006 f896 	bl	801a576 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	68dc      	ldr	r4, [r3, #12]
 801444e:	687d      	ldr	r5, [r7, #4]
 8014450:	1cbb      	adds	r3, r7, #2
 8014452:	4618      	mov	r0, r3
 8014454:	f7f4 fd5b 	bl	8008f0e <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8014458:	4603      	mov	r3, r0
 801445a:	4619      	mov	r1, r3
 801445c:	4628      	mov	r0, r5
 801445e:	47a0      	blx	r4
 8014460:	bf00      	nop
    }
 8014462:	3708      	adds	r7, #8
 8014464:	46bd      	mov	sp, r7
 8014466:	bdb0      	pop	{r4, r5, r7, pc}

08014468 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>:
	void notify(TIM_HandleTypeDef *htim) {
 8014468:	b580      	push	{r7, lr}
 801446a:	b084      	sub	sp, #16
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
 8014470:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8014472:	2300      	movs	r3, #0
 8014474:	60fb      	str	r3, [r7, #12]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801447c:	68fa      	ldr	r2, [r7, #12]
 801447e:	429a      	cmp	r2, r3
 8014480:	d20b      	bcs.n	801449a <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0x32>
			m_listeners[i](htim);
 8014482:	68fb      	ldr	r3, [r7, #12]
 8014484:	011b      	lsls	r3, r3, #4
 8014486:	687a      	ldr	r2, [r7, #4]
 8014488:	4413      	add	r3, r2
 801448a:	6839      	ldr	r1, [r7, #0]
 801448c:	4618      	mov	r0, r3
 801448e:	f000 f817 	bl	80144c0 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	3301      	adds	r3, #1
 8014496:	60fb      	str	r3, [r7, #12]
 8014498:	e7ed      	b.n	8014476 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0xe>
	}
 801449a:	bf00      	nop
 801449c:	3710      	adds	r7, #16
 801449e:	46bd      	mov	sp, r7
 80144a0:	bd80      	pop	{r7, pc}

080144a2 <PeriodElapsedCallback>:

#ifdef __cplusplus
extern "C" {
#endif

void PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80144a2:	b580      	push	{r7, lr}
 80144a4:	b082      	sub	sp, #8
 80144a6:	af00      	add	r7, sp, #0
 80144a8:	6078      	str	r0, [r7, #4]
	TimPeriodElapsedCallbackHandler::getInstance().notify(htim);
 80144aa:	f7f4 fa85 	bl	80089b8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 80144ae:	4603      	mov	r3, r0
 80144b0:	6879      	ldr	r1, [r7, #4]
 80144b2:	4618      	mov	r0, r3
 80144b4:	f7ff ffd8 	bl	8014468 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>
}
 80144b8:	bf00      	nop
 80144ba:	3708      	adds	r7, #8
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 80144c0:	b5b0      	push	{r4, r5, r7, lr}
 80144c2:	b082      	sub	sp, #8
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	4618      	mov	r0, r3
 80144ce:	f7ec ffd0 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80144d2:	4603      	mov	r3, r0
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d001      	beq.n	80144dc <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 80144d8:	f006 f84d 	bl	801a576 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	68dc      	ldr	r4, [r3, #12]
 80144e0:	687d      	ldr	r5, [r7, #4]
 80144e2:	463b      	mov	r3, r7
 80144e4:	4618      	mov	r0, r3
 80144e6:	f7f4 fe1a 	bl	800911e <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80144ea:	4603      	mov	r3, r0
 80144ec:	4619      	mov	r1, r3
 80144ee:	4628      	mov	r0, r5
 80144f0:	47a0      	blx	r4
 80144f2:	bf00      	nop
    }
 80144f4:	3708      	adds	r7, #8
 80144f6:	46bd      	mov	sp, r7
 80144f8:	bdb0      	pop	{r4, r5, r7, pc}

080144fa <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80144fa:	b480      	push	{r7}
 80144fc:	b085      	sub	sp, #20
 80144fe:	af00      	add	r7, sp, #0
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	607a      	str	r2, [r7, #4]
 8014504:	603b      	str	r3, [r7, #0]
 8014506:	4603      	mov	r3, r0
 8014508:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 801450a:	bf00      	nop
 801450c:	3714      	adds	r7, #20
 801450e:	46bd      	mov	sp, r7
 8014510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014514:	4770      	bx	lr

08014516 <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 8014516:	b580      	push	{r7, lr}
 8014518:	b084      	sub	sp, #16
 801451a:	af00      	add	r7, sp, #0
 801451c:	60b9      	str	r1, [r7, #8]
 801451e:	607a      	str	r2, [r7, #4]
 8014520:	603b      	str	r3, [r7, #0]
 8014522:	4603      	mov	r3, r0
 8014524:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8014526:	7bfb      	ldrb	r3, [r7, #15]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d003      	beq.n	8014534 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 801452c:	7bfb      	ldrb	r3, [r7, #15]
 801452e:	4618      	mov	r0, r3
 8014530:	f001 fc71 	bl	8015e16 <_putchar>
  }
}
 8014534:	bf00      	nop
 8014536:	3710      	adds	r7, #16
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}

0801453c <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 801453c:	b480      	push	{r7}
 801453e:	b085      	sub	sp, #20
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	60fb      	str	r3, [r7, #12]
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	781b      	ldrb	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d006      	beq.n	8014560 <_ZL10_strnlen_sPKcj+0x24>
 8014552:	683b      	ldr	r3, [r7, #0]
 8014554:	1e5a      	subs	r2, r3, #1
 8014556:	603a      	str	r2, [r7, #0]
 8014558:	2b00      	cmp	r3, #0
 801455a:	d001      	beq.n	8014560 <_ZL10_strnlen_sPKcj+0x24>
 801455c:	2301      	movs	r3, #1
 801455e:	e000      	b.n	8014562 <_ZL10_strnlen_sPKcj+0x26>
 8014560:	2300      	movs	r3, #0
 8014562:	2b00      	cmp	r3, #0
 8014564:	d003      	beq.n	801456e <_ZL10_strnlen_sPKcj+0x32>
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	3301      	adds	r3, #1
 801456a:	60fb      	str	r3, [r7, #12]
 801456c:	e7ed      	b.n	801454a <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 801456e:	68fa      	ldr	r2, [r7, #12]
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	1ad3      	subs	r3, r2, r3
}
 8014574:	4618      	mov	r0, r3
 8014576:	3714      	adds	r7, #20
 8014578:	46bd      	mov	sp, r7
 801457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457e:	4770      	bx	lr

08014580 <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8014580:	b480      	push	{r7}
 8014582:	b083      	sub	sp, #12
 8014584:	af00      	add	r7, sp, #0
 8014586:	4603      	mov	r3, r0
 8014588:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 801458a:	79fb      	ldrb	r3, [r7, #7]
 801458c:	2b2f      	cmp	r3, #47	; 0x2f
 801458e:	d904      	bls.n	801459a <_ZL9_is_digitc+0x1a>
 8014590:	79fb      	ldrb	r3, [r7, #7]
 8014592:	2b39      	cmp	r3, #57	; 0x39
 8014594:	d801      	bhi.n	801459a <_ZL9_is_digitc+0x1a>
 8014596:	2301      	movs	r3, #1
 8014598:	e000      	b.n	801459c <_ZL9_is_digitc+0x1c>
 801459a:	2300      	movs	r3, #0
}
 801459c:	4618      	mov	r0, r3
 801459e:	370c      	adds	r7, #12
 80145a0:	46bd      	mov	sp, r7
 80145a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a6:	4770      	bx	lr

080145a8 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b084      	sub	sp, #16
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80145b0:	2300      	movs	r3, #0
 80145b2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	4618      	mov	r0, r3
 80145bc:	f7ff ffe0 	bl	8014580 <_ZL9_is_digitc>
 80145c0:	4603      	mov	r3, r0
 80145c2:	2b00      	cmp	r3, #0
 80145c4:	d00f      	beq.n	80145e6 <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80145c6:	68fa      	ldr	r2, [r7, #12]
 80145c8:	4613      	mov	r3, r2
 80145ca:	009b      	lsls	r3, r3, #2
 80145cc:	4413      	add	r3, r2
 80145ce:	005b      	lsls	r3, r3, #1
 80145d0:	4618      	mov	r0, r3
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	1c59      	adds	r1, r3, #1
 80145d8:	687a      	ldr	r2, [r7, #4]
 80145da:	6011      	str	r1, [r2, #0]
 80145dc:	781b      	ldrb	r3, [r3, #0]
 80145de:	4403      	add	r3, r0
 80145e0:	3b30      	subs	r3, #48	; 0x30
 80145e2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80145e4:	e7e6      	b.n	80145b4 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 80145e6:	68fb      	ldr	r3, [r7, #12]
}
 80145e8:	4618      	mov	r0, r3
 80145ea:	3710      	adds	r7, #16
 80145ec:	46bd      	mov	sp, r7
 80145ee:	bd80      	pop	{r7, pc}

080145f0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 80145f0:	b590      	push	{r4, r7, lr}
 80145f2:	b087      	sub	sp, #28
 80145f4:	af00      	add	r7, sp, #0
 80145f6:	60f8      	str	r0, [r7, #12]
 80145f8:	60b9      	str	r1, [r7, #8]
 80145fa:	607a      	str	r2, [r7, #4]
 80145fc:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8014602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014604:	f003 0302 	and.w	r3, r3, #2
 8014608:	2b00      	cmp	r3, #0
 801460a:	d116      	bne.n	801463a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 801460c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801460e:	f003 0301 	and.w	r3, r3, #1
 8014612:	2b00      	cmp	r3, #0
 8014614:	d111      	bne.n	801463a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 8014616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014618:	617b      	str	r3, [r7, #20]
 801461a:	697a      	ldr	r2, [r7, #20]
 801461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801461e:	429a      	cmp	r2, r3
 8014620:	d20b      	bcs.n	801463a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 8014622:	687a      	ldr	r2, [r7, #4]
 8014624:	1c53      	adds	r3, r2, #1
 8014626:	607b      	str	r3, [r7, #4]
 8014628:	68fc      	ldr	r4, [r7, #12]
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	68b9      	ldr	r1, [r7, #8]
 801462e:	2020      	movs	r0, #32
 8014630:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8014632:	697b      	ldr	r3, [r7, #20]
 8014634:	3301      	adds	r3, #1
 8014636:	617b      	str	r3, [r7, #20]
 8014638:	e7ef      	b.n	801461a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 801463a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801463c:	2b00      	cmp	r3, #0
 801463e:	d00e      	beq.n	801465e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 8014640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014642:	3b01      	subs	r3, #1
 8014644:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801464a:	4413      	add	r3, r2
 801464c:	7818      	ldrb	r0, [r3, #0]
 801464e:	687a      	ldr	r2, [r7, #4]
 8014650:	1c53      	adds	r3, r2, #1
 8014652:	607b      	str	r3, [r7, #4]
 8014654:	68fc      	ldr	r4, [r7, #12]
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	68b9      	ldr	r1, [r7, #8]
 801465a:	47a0      	blx	r4
  while (len) {
 801465c:	e7ed      	b.n	801463a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 801465e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014660:	f003 0302 	and.w	r3, r3, #2
 8014664:	2b00      	cmp	r3, #0
 8014666:	d00e      	beq.n	8014686 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 8014668:	687a      	ldr	r2, [r7, #4]
 801466a:	693b      	ldr	r3, [r7, #16]
 801466c:	1ad3      	subs	r3, r2, r3
 801466e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014670:	429a      	cmp	r2, r3
 8014672:	d908      	bls.n	8014686 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 8014674:	687a      	ldr	r2, [r7, #4]
 8014676:	1c53      	adds	r3, r2, #1
 8014678:	607b      	str	r3, [r7, #4]
 801467a:	68fc      	ldr	r4, [r7, #12]
 801467c:	683b      	ldr	r3, [r7, #0]
 801467e:	68b9      	ldr	r1, [r7, #8]
 8014680:	2020      	movs	r0, #32
 8014682:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8014684:	e7f0      	b.n	8014668 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 8014686:	687b      	ldr	r3, [r7, #4]
}
 8014688:	4618      	mov	r0, r3
 801468a:	371c      	adds	r7, #28
 801468c:	46bd      	mov	sp, r7
 801468e:	bd90      	pop	{r4, r7, pc}

08014690 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b088      	sub	sp, #32
 8014694:	af04      	add	r7, sp, #16
 8014696:	60f8      	str	r0, [r7, #12]
 8014698:	60b9      	str	r1, [r7, #8]
 801469a:	607a      	str	r2, [r7, #4]
 801469c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 801469e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146a0:	f003 0302 	and.w	r3, r3, #2
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d136      	bne.n	8014716 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80146a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d010      	beq.n	80146d0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 80146ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146b0:	f003 0301 	and.w	r3, r3, #1
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d00b      	beq.n	80146d0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 80146b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d104      	bne.n	80146ca <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 80146c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c2:	f003 030c 	and.w	r3, r3, #12
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d002      	beq.n	80146d0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 80146ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146cc:	3b01      	subs	r3, #1
 80146ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80146d0:	69fa      	ldr	r2, [r7, #28]
 80146d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d4:	429a      	cmp	r2, r3
 80146d6:	d20a      	bcs.n	80146ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 80146d8:	69fb      	ldr	r3, [r7, #28]
 80146da:	2b1f      	cmp	r3, #31
 80146dc:	d807      	bhi.n	80146ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 80146de:	69fb      	ldr	r3, [r7, #28]
 80146e0:	1c5a      	adds	r2, r3, #1
 80146e2:	61fa      	str	r2, [r7, #28]
 80146e4:	69ba      	ldr	r2, [r7, #24]
 80146e6:	4413      	add	r3, r2
 80146e8:	2230      	movs	r2, #48	; 0x30
 80146ea:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80146ec:	e7f0      	b.n	80146d0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80146ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146f0:	f003 0301 	and.w	r3, r3, #1
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d00e      	beq.n	8014716 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 80146f8:	69fa      	ldr	r2, [r7, #28]
 80146fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146fc:	429a      	cmp	r2, r3
 80146fe:	d20a      	bcs.n	8014716 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	2b1f      	cmp	r3, #31
 8014704:	d807      	bhi.n	8014716 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 8014706:	69fb      	ldr	r3, [r7, #28]
 8014708:	1c5a      	adds	r2, r3, #1
 801470a:	61fa      	str	r2, [r7, #28]
 801470c:	69ba      	ldr	r2, [r7, #24]
 801470e:	4413      	add	r3, r2
 8014710:	2230      	movs	r2, #48	; 0x30
 8014712:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014714:	e7eb      	b.n	80146ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8014716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014718:	f003 0310 	and.w	r3, r3, #16
 801471c:	2b00      	cmp	r3, #0
 801471e:	d058      	beq.n	80147d2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8014720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014726:	2b00      	cmp	r3, #0
 8014728:	d116      	bne.n	8014758 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 801472a:	69fb      	ldr	r3, [r7, #28]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d013      	beq.n	8014758 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8014730:	69fa      	ldr	r2, [r7, #28]
 8014732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014734:	429a      	cmp	r2, r3
 8014736:	d003      	beq.n	8014740 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 8014738:	69fa      	ldr	r2, [r7, #28]
 801473a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801473c:	429a      	cmp	r2, r3
 801473e:	d10b      	bne.n	8014758 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 8014740:	69fb      	ldr	r3, [r7, #28]
 8014742:	3b01      	subs	r3, #1
 8014744:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8014746:	69fb      	ldr	r3, [r7, #28]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d005      	beq.n	8014758 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 801474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801474e:	2b10      	cmp	r3, #16
 8014750:	d102      	bne.n	8014758 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 8014752:	69fb      	ldr	r3, [r7, #28]
 8014754:	3b01      	subs	r3, #1
 8014756:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8014758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801475a:	2b10      	cmp	r3, #16
 801475c:	d10f      	bne.n	801477e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 801475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014760:	f003 0320 	and.w	r3, r3, #32
 8014764:	2b00      	cmp	r3, #0
 8014766:	d10a      	bne.n	801477e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 8014768:	69fb      	ldr	r3, [r7, #28]
 801476a:	2b1f      	cmp	r3, #31
 801476c:	d807      	bhi.n	801477e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 801476e:	69fb      	ldr	r3, [r7, #28]
 8014770:	1c5a      	adds	r2, r3, #1
 8014772:	61fa      	str	r2, [r7, #28]
 8014774:	69ba      	ldr	r2, [r7, #24]
 8014776:	4413      	add	r3, r2
 8014778:	2278      	movs	r2, #120	; 0x78
 801477a:	701a      	strb	r2, [r3, #0]
 801477c:	e01f      	b.n	80147be <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 801477e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014780:	2b10      	cmp	r3, #16
 8014782:	d10f      	bne.n	80147a4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8014784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014786:	f003 0320 	and.w	r3, r3, #32
 801478a:	2b00      	cmp	r3, #0
 801478c:	d00a      	beq.n	80147a4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 801478e:	69fb      	ldr	r3, [r7, #28]
 8014790:	2b1f      	cmp	r3, #31
 8014792:	d807      	bhi.n	80147a4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 8014794:	69fb      	ldr	r3, [r7, #28]
 8014796:	1c5a      	adds	r2, r3, #1
 8014798:	61fa      	str	r2, [r7, #28]
 801479a:	69ba      	ldr	r2, [r7, #24]
 801479c:	4413      	add	r3, r2
 801479e:	2258      	movs	r2, #88	; 0x58
 80147a0:	701a      	strb	r2, [r3, #0]
 80147a2:	e00c      	b.n	80147be <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80147a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147a6:	2b02      	cmp	r3, #2
 80147a8:	d109      	bne.n	80147be <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 80147aa:	69fb      	ldr	r3, [r7, #28]
 80147ac:	2b1f      	cmp	r3, #31
 80147ae:	d806      	bhi.n	80147be <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 80147b0:	69fb      	ldr	r3, [r7, #28]
 80147b2:	1c5a      	adds	r2, r3, #1
 80147b4:	61fa      	str	r2, [r7, #28]
 80147b6:	69ba      	ldr	r2, [r7, #24]
 80147b8:	4413      	add	r3, r2
 80147ba:	2262      	movs	r2, #98	; 0x62
 80147bc:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80147be:	69fb      	ldr	r3, [r7, #28]
 80147c0:	2b1f      	cmp	r3, #31
 80147c2:	d806      	bhi.n	80147d2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 80147c4:	69fb      	ldr	r3, [r7, #28]
 80147c6:	1c5a      	adds	r2, r3, #1
 80147c8:	61fa      	str	r2, [r7, #28]
 80147ca:	69ba      	ldr	r2, [r7, #24]
 80147cc:	4413      	add	r3, r2
 80147ce:	2230      	movs	r2, #48	; 0x30
 80147d0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80147d2:	69fb      	ldr	r3, [r7, #28]
 80147d4:	2b1f      	cmp	r3, #31
 80147d6:	d824      	bhi.n	8014822 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 80147d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d007      	beq.n	80147f0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 80147e0:	69fb      	ldr	r3, [r7, #28]
 80147e2:	1c5a      	adds	r2, r3, #1
 80147e4:	61fa      	str	r2, [r7, #28]
 80147e6:	69ba      	ldr	r2, [r7, #24]
 80147e8:	4413      	add	r3, r2
 80147ea:	222d      	movs	r2, #45	; 0x2d
 80147ec:	701a      	strb	r2, [r3, #0]
 80147ee:	e018      	b.n	8014822 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 80147f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147f2:	f003 0304 	and.w	r3, r3, #4
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d007      	beq.n	801480a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80147fa:	69fb      	ldr	r3, [r7, #28]
 80147fc:	1c5a      	adds	r2, r3, #1
 80147fe:	61fa      	str	r2, [r7, #28]
 8014800:	69ba      	ldr	r2, [r7, #24]
 8014802:	4413      	add	r3, r2
 8014804:	222b      	movs	r2, #43	; 0x2b
 8014806:	701a      	strb	r2, [r3, #0]
 8014808:	e00b      	b.n	8014822 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 801480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801480c:	f003 0308 	and.w	r3, r3, #8
 8014810:	2b00      	cmp	r3, #0
 8014812:	d006      	beq.n	8014822 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 8014814:	69fb      	ldr	r3, [r7, #28]
 8014816:	1c5a      	adds	r2, r3, #1
 8014818:	61fa      	str	r2, [r7, #28]
 801481a:	69ba      	ldr	r2, [r7, #24]
 801481c:	4413      	add	r3, r2
 801481e:	2220      	movs	r2, #32
 8014820:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8014822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014824:	9303      	str	r3, [sp, #12]
 8014826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014828:	9302      	str	r3, [sp, #8]
 801482a:	69fb      	ldr	r3, [r7, #28]
 801482c:	9301      	str	r3, [sp, #4]
 801482e:	69bb      	ldr	r3, [r7, #24]
 8014830:	9300      	str	r3, [sp, #0]
 8014832:	683b      	ldr	r3, [r7, #0]
 8014834:	687a      	ldr	r2, [r7, #4]
 8014836:	68b9      	ldr	r1, [r7, #8]
 8014838:	68f8      	ldr	r0, [r7, #12]
 801483a:	f7ff fed9 	bl	80145f0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 801483e:	4603      	mov	r3, r0
}
 8014840:	4618      	mov	r0, r3
 8014842:	3710      	adds	r7, #16
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}

08014848 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b096      	sub	sp, #88	; 0x58
 801484c:	af08      	add	r7, sp, #32
 801484e:	60f8      	str	r0, [r7, #12]
 8014850:	60b9      	str	r1, [r7, #8]
 8014852:	607a      	str	r2, [r7, #4]
 8014854:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8014856:	2300      	movs	r3, #0
 8014858:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 801485a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801485c:	2b00      	cmp	r3, #0
 801485e:	d103      	bne.n	8014868 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 8014860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014862:	f023 0310 	bic.w	r3, r3, #16
 8014866:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8014868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801486a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801486e:	2b00      	cmp	r3, #0
 8014870:	d002      	beq.n	8014878 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 8014872:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014874:	2b00      	cmp	r3, #0
 8014876:	d033      	beq.n	80148e0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 8014878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801487a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801487c:	fbb3 f2f2 	udiv	r2, r3, r2
 8014880:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014882:	fb01 f202 	mul.w	r2, r1, r2
 8014886:	1a9b      	subs	r3, r3, r2
 8014888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801488c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014890:	2b09      	cmp	r3, #9
 8014892:	d804      	bhi.n	801489e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 8014894:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014898:	3330      	adds	r3, #48	; 0x30
 801489a:	b2da      	uxtb	r2, r3
 801489c:	e00d      	b.n	80148ba <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 801489e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148a0:	f003 0320 	and.w	r3, r3, #32
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d001      	beq.n	80148ac <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 80148a8:	2241      	movs	r2, #65	; 0x41
 80148aa:	e000      	b.n	80148ae <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 80148ac:	2261      	movs	r2, #97	; 0x61
 80148ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80148b2:	4413      	add	r3, r2
 80148b4:	b2db      	uxtb	r3, r3
 80148b6:	3b0a      	subs	r3, #10
 80148b8:	b2da      	uxtb	r2, r3
 80148ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148bc:	1c59      	adds	r1, r3, #1
 80148be:	6379      	str	r1, [r7, #52]	; 0x34
 80148c0:	3338      	adds	r3, #56	; 0x38
 80148c2:	443b      	add	r3, r7
 80148c4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 80148c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80148ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80148d0:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80148d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d003      	beq.n	80148e0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 80148d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148da:	2b1f      	cmp	r3, #31
 80148dc:	d800      	bhi.n	80148e0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 80148de:	e7cb      	b.n	8014878 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80148e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148e2:	9306      	str	r3, [sp, #24]
 80148e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148e6:	9305      	str	r3, [sp, #20]
 80148e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80148ea:	9304      	str	r3, [sp, #16]
 80148ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80148ee:	9303      	str	r3, [sp, #12]
 80148f0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80148f4:	9302      	str	r3, [sp, #8]
 80148f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148f8:	9301      	str	r3, [sp, #4]
 80148fa:	f107 0310 	add.w	r3, r7, #16
 80148fe:	9300      	str	r3, [sp, #0]
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	687a      	ldr	r2, [r7, #4]
 8014904:	68b9      	ldr	r1, [r7, #8]
 8014906:	68f8      	ldr	r0, [r7, #12]
 8014908:	f7ff fec2 	bl	8014690 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 801490c:	4603      	mov	r3, r0
}
 801490e:	4618      	mov	r0, r3
 8014910:	3738      	adds	r7, #56	; 0x38
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}

08014916 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014916:	b580      	push	{r7, lr}
 8014918:	b096      	sub	sp, #88	; 0x58
 801491a:	af08      	add	r7, sp, #32
 801491c:	60f8      	str	r0, [r7, #12]
 801491e:	60b9      	str	r1, [r7, #8]
 8014920:	607a      	str	r2, [r7, #4]
 8014922:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8014924:	2300      	movs	r3, #0
 8014926:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8014928:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801492c:	4313      	orrs	r3, r2
 801492e:	d103      	bne.n	8014938 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 8014930:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014932:	f023 0310 	bic.w	r3, r3, #16
 8014936:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8014938:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801493a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801493e:	2b00      	cmp	r3, #0
 8014940:	d003      	beq.n	801494a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 8014942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014946:	4313      	orrs	r3, r2
 8014948:	d038      	beq.n	80149bc <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 801494a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801494e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8014952:	f7ec f999 	bl	8000c88 <__aeabi_uldivmod>
 8014956:	4613      	mov	r3, r2
 8014958:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 801495c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014960:	2b09      	cmp	r3, #9
 8014962:	d804      	bhi.n	801496e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 8014964:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014968:	3330      	adds	r3, #48	; 0x30
 801496a:	b2da      	uxtb	r2, r3
 801496c:	e00d      	b.n	801498a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 801496e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014970:	f003 0320 	and.w	r3, r3, #32
 8014974:	2b00      	cmp	r3, #0
 8014976:	d001      	beq.n	801497c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 8014978:	2241      	movs	r2, #65	; 0x41
 801497a:	e000      	b.n	801497e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 801497c:	2261      	movs	r2, #97	; 0x61
 801497e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8014982:	4413      	add	r3, r2
 8014984:	b2db      	uxtb	r3, r3
 8014986:	3b0a      	subs	r3, #10
 8014988:	b2da      	uxtb	r2, r3
 801498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801498c:	1c59      	adds	r1, r3, #1
 801498e:	6379      	str	r1, [r7, #52]	; 0x34
 8014990:	3338      	adds	r3, #56	; 0x38
 8014992:	443b      	add	r3, r7
 8014994:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8014998:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 801499c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80149a0:	f7ec f972 	bl	8000c88 <__aeabi_uldivmod>
 80149a4:	4602      	mov	r2, r0
 80149a6:	460b      	mov	r3, r1
 80149a8:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80149ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80149b0:	4313      	orrs	r3, r2
 80149b2:	d003      	beq.n	80149bc <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 80149b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149b6:	2b1f      	cmp	r3, #31
 80149b8:	d800      	bhi.n	80149bc <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 80149ba:	e7c6      	b.n	801494a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80149bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80149be:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80149c0:	9206      	str	r2, [sp, #24]
 80149c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80149c4:	9205      	str	r2, [sp, #20]
 80149c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80149c8:	9204      	str	r2, [sp, #16]
 80149ca:	9303      	str	r3, [sp, #12]
 80149cc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80149d0:	9302      	str	r3, [sp, #8]
 80149d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149d4:	9301      	str	r3, [sp, #4]
 80149d6:	f107 0310 	add.w	r3, r7, #16
 80149da:	9300      	str	r3, [sp, #0]
 80149dc:	683b      	ldr	r3, [r7, #0]
 80149de:	687a      	ldr	r2, [r7, #4]
 80149e0:	68b9      	ldr	r1, [r7, #8]
 80149e2:	68f8      	ldr	r0, [r7, #12]
 80149e4:	f7ff fe54 	bl	8014690 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 80149e8:	4603      	mov	r3, r0
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3738      	adds	r7, #56	; 0x38
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	0000      	movs	r0, r0
 80149f4:	0000      	movs	r0, r0
	...

080149f8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80149f8:	b590      	push	{r4, r7, lr}
 80149fa:	b09d      	sub	sp, #116	; 0x74
 80149fc:	af04      	add	r7, sp, #16
 80149fe:	6178      	str	r0, [r7, #20]
 8014a00:	6139      	str	r1, [r7, #16]
 8014a02:	60fa      	str	r2, [r7, #12]
 8014a04:	60bb      	str	r3, [r7, #8]
 8014a06:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8014a0e:	f04f 0200 	mov.w	r2, #0
 8014a12:	f04f 0300 	mov.w	r3, #0
 8014a16:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8014a1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014a22:	f7ec f851 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a26:	4603      	mov	r3, r0
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d10f      	bne.n	8014a4c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8014a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014a2e:	9303      	str	r3, [sp, #12]
 8014a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a32:	9302      	str	r3, [sp, #8]
 8014a34:	2303      	movs	r3, #3
 8014a36:	9301      	str	r3, [sp, #4]
 8014a38:	4ba7      	ldr	r3, [pc, #668]	; (8014cd8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 8014a3a:	9300      	str	r3, [sp, #0]
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	68fa      	ldr	r2, [r7, #12]
 8014a40:	6939      	ldr	r1, [r7, #16]
 8014a42:	6978      	ldr	r0, [r7, #20]
 8014a44:	f7ff fdd4 	bl	80145f0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	e230      	b.n	8014eae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 8014a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8014a50:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8014a54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014a58:	f7ec f840 	bl	8000adc <__aeabi_dcmplt>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d00f      	beq.n	8014a82 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8014a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014a64:	9303      	str	r3, [sp, #12]
 8014a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014a68:	9302      	str	r3, [sp, #8]
 8014a6a:	2304      	movs	r3, #4
 8014a6c:	9301      	str	r3, [sp, #4]
 8014a6e:	4b9b      	ldr	r3, [pc, #620]	; (8014cdc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 8014a70:	9300      	str	r3, [sp, #0]
 8014a72:	68bb      	ldr	r3, [r7, #8]
 8014a74:	68fa      	ldr	r2, [r7, #12]
 8014a76:	6939      	ldr	r1, [r7, #16]
 8014a78:	6978      	ldr	r0, [r7, #20]
 8014a7a:	f7ff fdb9 	bl	80145f0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	e215      	b.n	8014eae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 8014a82:	f04f 32ff 	mov.w	r2, #4294967295
 8014a86:	4b96      	ldr	r3, [pc, #600]	; (8014ce0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 8014a88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014a8c:	f7ec f844 	bl	8000b18 <__aeabi_dcmpgt>
 8014a90:	4603      	mov	r3, r0
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d01d      	beq.n	8014ad2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8014a96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014a98:	f003 0304 	and.w	r3, r3, #4
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d001      	beq.n	8014aa4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 8014aa0:	4b90      	ldr	r3, [pc, #576]	; (8014ce4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 8014aa2:	e000      	b.n	8014aa6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 8014aa4:	4b90      	ldr	r3, [pc, #576]	; (8014ce8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 8014aa6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014aa8:	f002 0204 	and.w	r2, r2, #4
 8014aac:	2a00      	cmp	r2, #0
 8014aae:	d001      	beq.n	8014ab4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 8014ab0:	2204      	movs	r2, #4
 8014ab2:	e000      	b.n	8014ab6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 8014ab4:	2203      	movs	r2, #3
 8014ab6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8014ab8:	9103      	str	r1, [sp, #12]
 8014aba:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8014abc:	9102      	str	r1, [sp, #8]
 8014abe:	9201      	str	r2, [sp, #4]
 8014ac0:	9300      	str	r3, [sp, #0]
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	68fa      	ldr	r2, [r7, #12]
 8014ac6:	6939      	ldr	r1, [r7, #16]
 8014ac8:	6978      	ldr	r0, [r7, #20]
 8014aca:	f7ff fd91 	bl	80145f0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	e1ed      	b.n	8014eae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8014ad2:	a37d      	add	r3, pc, #500	; (adr r3, 8014cc8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 8014ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ad8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014adc:	f7ec f81c 	bl	8000b18 <__aeabi_dcmpgt>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d109      	bne.n	8014afa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 8014ae6:	a37a      	add	r3, pc, #488	; (adr r3, 8014cd0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 8014ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014af0:	f7eb fff4 	bl	8000adc <__aeabi_dcmplt>
 8014af4:	4603      	mov	r3, r0
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d00f      	beq.n	8014b1a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8014afa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014afc:	9302      	str	r3, [sp, #8]
 8014afe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014b00:	9301      	str	r3, [sp, #4]
 8014b02:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014b04:	9300      	str	r3, [sp, #0]
 8014b06:	ed97 0b00 	vldr	d0, [r7]
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	68fa      	ldr	r2, [r7, #12]
 8014b0e:	6939      	ldr	r1, [r7, #16]
 8014b10:	6978      	ldr	r0, [r7, #20]
 8014b12:	f000 f9d5 	bl	8014ec0 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8014b16:	4603      	mov	r3, r0
 8014b18:	e1c9      	b.n	8014eae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8014b1a:	2300      	movs	r3, #0
 8014b1c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8014b20:	f04f 0200 	mov.w	r2, #0
 8014b24:	f04f 0300 	mov.w	r3, #0
 8014b28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014b2c:	f7eb ffd6 	bl	8000adc <__aeabi_dcmplt>
 8014b30:	4603      	mov	r3, r0
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d00e      	beq.n	8014b54 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 8014b36:	2301      	movs	r3, #1
 8014b38:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8014b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014b40:	f04f 0000 	mov.w	r0, #0
 8014b44:	f04f 0100 	mov.w	r1, #0
 8014b48:	f7eb fb9e 	bl	8000288 <__aeabi_dsub>
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	460b      	mov	r3, r1
 8014b50:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8014b54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d101      	bne.n	8014b62 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8014b5e:	2306      	movs	r3, #6
 8014b60:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8014b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014b64:	2b1f      	cmp	r3, #31
 8014b66:	d80e      	bhi.n	8014b86 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 8014b68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014b6a:	2b09      	cmp	r3, #9
 8014b6c:	d90b      	bls.n	8014b86 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 8014b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014b70:	1c5a      	adds	r2, r3, #1
 8014b72:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014b74:	3360      	adds	r3, #96	; 0x60
 8014b76:	443b      	add	r3, r7
 8014b78:	2230      	movs	r2, #48	; 0x30
 8014b7a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8014b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014b80:	3b01      	subs	r3, #1
 8014b82:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8014b84:	e7ed      	b.n	8014b62 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 8014b86:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014b8a:	f7eb ffe5 	bl	8000b58 <__aeabi_d2iz>
 8014b8e:	4603      	mov	r3, r0
 8014b90:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8014b92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014b94:	f7eb fcc6 	bl	8000524 <__aeabi_i2d>
 8014b98:	4602      	mov	r2, r0
 8014b9a:	460b      	mov	r3, r1
 8014b9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014ba0:	f7eb fb72 	bl	8000288 <__aeabi_dsub>
 8014ba4:	4602      	mov	r2, r0
 8014ba6:	460b      	mov	r3, r1
 8014ba8:	4610      	mov	r0, r2
 8014baa:	4619      	mov	r1, r3
 8014bac:	4a4f      	ldr	r2, [pc, #316]	; (8014cec <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 8014bae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014bb0:	00db      	lsls	r3, r3, #3
 8014bb2:	4413      	add	r3, r2
 8014bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb8:	f7eb fd1e 	bl	80005f8 <__aeabi_dmul>
 8014bbc:	4602      	mov	r2, r0
 8014bbe:	460b      	mov	r3, r1
 8014bc0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8014bc4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8014bc8:	f7eb ffee 	bl	8000ba8 <__aeabi_d2uiz>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8014bd0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014bd2:	f7eb fc97 	bl	8000504 <__aeabi_ui2d>
 8014bd6:	4602      	mov	r2, r0
 8014bd8:	460b      	mov	r3, r1
 8014bda:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8014bde:	f7eb fb53 	bl	8000288 <__aeabi_dsub>
 8014be2:	4602      	mov	r2, r0
 8014be4:	460b      	mov	r3, r1
 8014be6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8014bea:	f04f 0200 	mov.w	r2, #0
 8014bee:	4b40      	ldr	r3, [pc, #256]	; (8014cf0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8014bf0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8014bf4:	f7eb ff90 	bl	8000b18 <__aeabi_dcmpgt>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d016      	beq.n	8014c2c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 8014bfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c00:	3301      	adds	r3, #1
 8014c02:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8014c04:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8014c06:	f7eb fc7d 	bl	8000504 <__aeabi_ui2d>
 8014c0a:	4a38      	ldr	r2, [pc, #224]	; (8014cec <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 8014c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c0e:	00db      	lsls	r3, r3, #3
 8014c10:	4413      	add	r3, r2
 8014c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c16:	f7eb ff75 	bl	8000b04 <__aeabi_dcmpge>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d01a      	beq.n	8014c56 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 8014c20:	2300      	movs	r3, #0
 8014c22:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8014c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c26:	3301      	adds	r3, #1
 8014c28:	657b      	str	r3, [r7, #84]	; 0x54
 8014c2a:	e014      	b.n	8014c56 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 8014c2c:	f04f 0200 	mov.w	r2, #0
 8014c30:	4b2f      	ldr	r3, [pc, #188]	; (8014cf0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8014c32:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8014c36:	f7eb ff51 	bl	8000adc <__aeabi_dcmplt>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d10a      	bne.n	8014c56 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8014c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d004      	beq.n	8014c50 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 8014c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c48:	f003 0301 	and.w	r3, r3, #1
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d002      	beq.n	8014c56 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8014c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c52:	3301      	adds	r3, #1
 8014c54:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8014c56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d14b      	bne.n	8014cf4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 8014c5c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8014c5e:	f7eb fc61 	bl	8000524 <__aeabi_i2d>
 8014c62:	4602      	mov	r2, r0
 8014c64:	460b      	mov	r3, r1
 8014c66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8014c6a:	f7eb fb0d 	bl	8000288 <__aeabi_dsub>
 8014c6e:	4602      	mov	r2, r0
 8014c70:	460b      	mov	r3, r1
 8014c72:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8014c76:	2301      	movs	r3, #1
 8014c78:	461c      	mov	r4, r3
 8014c7a:	f04f 0200 	mov.w	r2, #0
 8014c7e:	4b1c      	ldr	r3, [pc, #112]	; (8014cf0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8014c80:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8014c84:	f7eb ff2a 	bl	8000adc <__aeabi_dcmplt>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d101      	bne.n	8014c92 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 8014c8e:	2300      	movs	r3, #0
 8014c90:	461c      	mov	r4, r3
 8014c92:	b2e3      	uxtb	r3, r4
 8014c94:	f083 0301 	eor.w	r3, r3, #1
 8014c98:	b2db      	uxtb	r3, r3
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d109      	bne.n	8014cb2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 8014c9e:	f04f 0200 	mov.w	r2, #0
 8014ca2:	4b13      	ldr	r3, [pc, #76]	; (8014cf0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8014ca4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8014ca8:	f7eb ff36 	bl	8000b18 <__aeabi_dcmpgt>
 8014cac:	4603      	mov	r3, r0
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d06d      	beq.n	8014d8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8014cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cb4:	f003 0301 	and.w	r3, r3, #1
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d068      	beq.n	8014d8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8014cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	657b      	str	r3, [r7, #84]	; 0x54
 8014cc2:	e064      	b.n	8014d8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8014cc4:	f3af 8000 	nop.w
 8014cc8:	00000000 	.word	0x00000000
 8014ccc:	41cdcd65 	.word	0x41cdcd65
 8014cd0:	00000000 	.word	0x00000000
 8014cd4:	c1cdcd65 	.word	0xc1cdcd65
 8014cd8:	0801d8a4 	.word	0x0801d8a4
 8014cdc:	0801d8a8 	.word	0x0801d8a8
 8014ce0:	7fefffff 	.word	0x7fefffff
 8014ce4:	0801d8b0 	.word	0x0801d8b0
 8014ce8:	0801d8b8 	.word	0x0801d8b8
 8014cec:	0801dcc0 	.word	0x0801dcc0
 8014cf0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8014cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014cf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014cfa:	2b1f      	cmp	r3, #31
 8014cfc:	d826      	bhi.n	8014d4c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 8014cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d00:	3b01      	subs	r3, #1
 8014d02:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8014d04:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014d06:	4b6c      	ldr	r3, [pc, #432]	; (8014eb8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8014d08:	fba3 2301 	umull	r2, r3, r3, r1
 8014d0c:	08da      	lsrs	r2, r3, #3
 8014d0e:	4613      	mov	r3, r2
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	4413      	add	r3, r2
 8014d14:	005b      	lsls	r3, r3, #1
 8014d16:	1aca      	subs	r2, r1, r3
 8014d18:	b2d2      	uxtb	r2, r2
 8014d1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d1c:	1c59      	adds	r1, r3, #1
 8014d1e:	65f9      	str	r1, [r7, #92]	; 0x5c
 8014d20:	3230      	adds	r2, #48	; 0x30
 8014d22:	b2d2      	uxtb	r2, r2
 8014d24:	3360      	adds	r3, #96	; 0x60
 8014d26:	443b      	add	r3, r7
 8014d28:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8014d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d2e:	4a62      	ldr	r2, [pc, #392]	; (8014eb8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8014d30:	fba2 2303 	umull	r2, r3, r2, r3
 8014d34:	08db      	lsrs	r3, r3, #3
 8014d36:	653b      	str	r3, [r7, #80]	; 0x50
 8014d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	bf0c      	ite	eq
 8014d3e:	2301      	moveq	r3, #1
 8014d40:	2300      	movne	r3, #0
 8014d42:	b2db      	uxtb	r3, r3
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d100      	bne.n	8014d4a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014d48:	e7d6      	b.n	8014cf8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 8014d4a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8014d4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d4e:	2b1f      	cmp	r3, #31
 8014d50:	d806      	bhi.n	8014d60 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8014d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d54:	1e5a      	subs	r2, r3, #1
 8014d56:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d001      	beq.n	8014d60 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	e000      	b.n	8014d62 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 8014d60:	2300      	movs	r3, #0
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d008      	beq.n	8014d78 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 8014d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d68:	1c5a      	adds	r2, r3, #1
 8014d6a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014d6c:	3360      	adds	r3, #96	; 0x60
 8014d6e:	443b      	add	r3, r7
 8014d70:	2230      	movs	r2, #48	; 0x30
 8014d72:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8014d76:	e7e9      	b.n	8014d4c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014d78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d7a:	2b1f      	cmp	r3, #31
 8014d7c:	d807      	bhi.n	8014d8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 8014d7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d80:	1c5a      	adds	r2, r3, #1
 8014d82:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014d84:	3360      	adds	r3, #96	; 0x60
 8014d86:	443b      	add	r3, r7
 8014d88:	222e      	movs	r2, #46	; 0x2e
 8014d8a:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d90:	2b1f      	cmp	r3, #31
 8014d92:	d827      	bhi.n	8014de4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 8014d94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014d96:	4b49      	ldr	r3, [pc, #292]	; (8014ebc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8014d98:	fb83 1302 	smull	r1, r3, r3, r2
 8014d9c:	1099      	asrs	r1, r3, #2
 8014d9e:	17d3      	asrs	r3, r2, #31
 8014da0:	1ac9      	subs	r1, r1, r3
 8014da2:	460b      	mov	r3, r1
 8014da4:	009b      	lsls	r3, r3, #2
 8014da6:	440b      	add	r3, r1
 8014da8:	005b      	lsls	r3, r3, #1
 8014daa:	1ad1      	subs	r1, r2, r3
 8014dac:	b2ca      	uxtb	r2, r1
 8014dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014db0:	1c59      	adds	r1, r3, #1
 8014db2:	65f9      	str	r1, [r7, #92]	; 0x5c
 8014db4:	3230      	adds	r2, #48	; 0x30
 8014db6:	b2d2      	uxtb	r2, r2
 8014db8:	3360      	adds	r3, #96	; 0x60
 8014dba:	443b      	add	r3, r7
 8014dbc:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8014dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dc2:	4a3e      	ldr	r2, [pc, #248]	; (8014ebc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8014dc4:	fb82 1203 	smull	r1, r2, r2, r3
 8014dc8:	1092      	asrs	r2, r2, #2
 8014dca:	17db      	asrs	r3, r3, #31
 8014dcc:	1ad3      	subs	r3, r2, r3
 8014dce:	657b      	str	r3, [r7, #84]	; 0x54
 8014dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	bf0c      	ite	eq
 8014dd6:	2301      	moveq	r3, #1
 8014dd8:	2300      	movne	r3, #0
 8014dda:	b2db      	uxtb	r3, r3
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d100      	bne.n	8014de2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014de0:	e7d5      	b.n	8014d8e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 8014de2:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8014de4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014de6:	f003 0302 	and.w	r3, r3, #2
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d123      	bne.n	8014e36 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 8014dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014df0:	f003 0301 	and.w	r3, r3, #1
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d01e      	beq.n	8014e36 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8014df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d00b      	beq.n	8014e16 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 8014dfe:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d104      	bne.n	8014e10 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 8014e06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014e08:	f003 030c 	and.w	r3, r3, #12
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d002      	beq.n	8014e16 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 8014e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014e12:	3b01      	subs	r3, #1
 8014e14:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8014e16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014e18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d20b      	bcs.n	8014e36 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 8014e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e20:	2b1f      	cmp	r3, #31
 8014e22:	d808      	bhi.n	8014e36 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 8014e24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e26:	1c5a      	adds	r2, r3, #1
 8014e28:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014e2a:	3360      	adds	r3, #96	; 0x60
 8014e2c:	443b      	add	r3, r7
 8014e2e:	2230      	movs	r2, #48	; 0x30
 8014e30:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8014e34:	e7ef      	b.n	8014e16 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8014e36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e38:	2b1f      	cmp	r3, #31
 8014e3a:	d827      	bhi.n	8014e8c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 8014e3c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d008      	beq.n	8014e56 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 8014e44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e46:	1c5a      	adds	r2, r3, #1
 8014e48:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014e4a:	3360      	adds	r3, #96	; 0x60
 8014e4c:	443b      	add	r3, r7
 8014e4e:	222d      	movs	r2, #45	; 0x2d
 8014e50:	f803 2c48 	strb.w	r2, [r3, #-72]
 8014e54:	e01a      	b.n	8014e8c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 8014e56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014e58:	f003 0304 	and.w	r3, r3, #4
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d008      	beq.n	8014e72 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8014e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e62:	1c5a      	adds	r2, r3, #1
 8014e64:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014e66:	3360      	adds	r3, #96	; 0x60
 8014e68:	443b      	add	r3, r7
 8014e6a:	222b      	movs	r2, #43	; 0x2b
 8014e6c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8014e70:	e00c      	b.n	8014e8c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 8014e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014e74:	f003 0308 	and.w	r3, r3, #8
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d007      	beq.n	8014e8c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 8014e7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e7e:	1c5a      	adds	r2, r3, #1
 8014e80:	65fa      	str	r2, [r7, #92]	; 0x5c
 8014e82:	3360      	adds	r3, #96	; 0x60
 8014e84:	443b      	add	r3, r7
 8014e86:	2220      	movs	r2, #32
 8014e88:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8014e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014e8e:	9303      	str	r3, [sp, #12]
 8014e90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014e92:	9302      	str	r3, [sp, #8]
 8014e94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e96:	9301      	str	r3, [sp, #4]
 8014e98:	f107 0318 	add.w	r3, r7, #24
 8014e9c:	9300      	str	r3, [sp, #0]
 8014e9e:	68bb      	ldr	r3, [r7, #8]
 8014ea0:	68fa      	ldr	r2, [r7, #12]
 8014ea2:	6939      	ldr	r1, [r7, #16]
 8014ea4:	6978      	ldr	r0, [r7, #20]
 8014ea6:	f7ff fba3 	bl	80145f0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8014eaa:	4603      	mov	r3, r0
 8014eac:	bf00      	nop
}
 8014eae:	4618      	mov	r0, r3
 8014eb0:	3764      	adds	r7, #100	; 0x64
 8014eb2:	46bd      	mov	sp, r7
 8014eb4:	bd90      	pop	{r4, r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	cccccccd 	.word	0xcccccccd
 8014ebc:	66666667 	.word	0x66666667

08014ec0 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8014ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ec4:	b09f      	sub	sp, #124	; 0x7c
 8014ec6:	af06      	add	r7, sp, #24
 8014ec8:	6278      	str	r0, [r7, #36]	; 0x24
 8014eca:	6239      	str	r1, [r7, #32]
 8014ecc:	61fa      	str	r2, [r7, #28]
 8014ece:	61bb      	str	r3, [r7, #24]
 8014ed0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8014ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014ed8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014edc:	f7eb fdf4 	bl	8000ac8 <__aeabi_dcmpeq>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d014      	beq.n	8014f10 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 8014ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8014eea:	4bc1      	ldr	r3, [pc, #772]	; (80151f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 8014eec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014ef0:	f7eb fe12 	bl	8000b18 <__aeabi_dcmpgt>
 8014ef4:	4603      	mov	r3, r0
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d10a      	bne.n	8014f10 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 8014efa:	f04f 32ff 	mov.w	r2, #4294967295
 8014efe:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8014f02:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014f06:	f7eb fde9 	bl	8000adc <__aeabi_dcmplt>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d012      	beq.n	8014f36 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8014f10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014f14:	9302      	str	r3, [sp, #8]
 8014f16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014f1a:	9301      	str	r3, [sp, #4]
 8014f1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014f20:	9300      	str	r3, [sp, #0]
 8014f22:	ed97 0b04 	vldr	d0, [r7, #16]
 8014f26:	69bb      	ldr	r3, [r7, #24]
 8014f28:	69fa      	ldr	r2, [r7, #28]
 8014f2a:	6a39      	ldr	r1, [r7, #32]
 8014f2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014f2e:	f7ff fd63 	bl	80149f8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8014f32:	4603      	mov	r3, r0
 8014f34:	e23f      	b.n	80153b6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8014f36:	2301      	movs	r3, #1
 8014f38:	461e      	mov	r6, r3
 8014f3a:	f04f 0200 	mov.w	r2, #0
 8014f3e:	f04f 0300 	mov.w	r3, #0
 8014f42:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014f46:	f7eb fdc9 	bl	8000adc <__aeabi_dcmplt>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d101      	bne.n	8014f54 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 8014f50:	2300      	movs	r3, #0
 8014f52:	461e      	mov	r6, r3
 8014f54:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8014f58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d009      	beq.n	8014f74 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	603b      	str	r3, [r7, #0]
 8014f64:	697b      	ldr	r3, [r7, #20]
 8014f66:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8014f6a:	607b      	str	r3, [r7, #4]
 8014f6c:	ed97 7b00 	vldr	d7, [r7]
 8014f70:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8014f74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d102      	bne.n	8014f86 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8014f80:	2306      	movs	r3, #6
 8014f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8014f86:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8014f8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8014f8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8014f92:	f04f 0200 	mov.w	r2, #0
 8014f96:	f04f 0300 	mov.w	r3, #0
 8014f9a:	0d0a      	lsrs	r2, r1, #20
 8014f9c:	2300      	movs	r3, #0
 8014f9e:	4613      	mov	r3, r2
 8014fa0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014fa4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8014faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014fae:	4690      	mov	r8, r2
 8014fb0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8014fb4:	4644      	mov	r4, r8
 8014fb6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8014fba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014fbe:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8014fc2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014fc4:	f7eb faae 	bl	8000524 <__aeabi_i2d>
 8014fc8:	a37d      	add	r3, pc, #500	; (adr r3, 80151c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 8014fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fce:	f7eb fb13 	bl	80005f8 <__aeabi_dmul>
 8014fd2:	4602      	mov	r2, r0
 8014fd4:	460b      	mov	r3, r1
 8014fd6:	4610      	mov	r0, r2
 8014fd8:	4619      	mov	r1, r3
 8014fda:	a37b      	add	r3, pc, #492	; (adr r3, 80151c8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 8014fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014fe0:	f7eb f954 	bl	800028c <__adddf3>
 8014fe4:	4602      	mov	r2, r0
 8014fe6:	460b      	mov	r3, r1
 8014fe8:	4614      	mov	r4, r2
 8014fea:	461d      	mov	r5, r3
 8014fec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8014ff0:	f04f 0200 	mov.w	r2, #0
 8014ff4:	4b7f      	ldr	r3, [pc, #508]	; (80151f4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 8014ff6:	f7eb f947 	bl	8000288 <__aeabi_dsub>
 8014ffa:	4602      	mov	r2, r0
 8014ffc:	460b      	mov	r3, r1
 8014ffe:	4610      	mov	r0, r2
 8015000:	4619      	mov	r1, r3
 8015002:	a373      	add	r3, pc, #460	; (adr r3, 80151d0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 8015004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015008:	f7eb faf6 	bl	80005f8 <__aeabi_dmul>
 801500c:	4602      	mov	r2, r0
 801500e:	460b      	mov	r3, r1
 8015010:	4620      	mov	r0, r4
 8015012:	4629      	mov	r1, r5
 8015014:	f7eb f93a 	bl	800028c <__adddf3>
 8015018:	4602      	mov	r2, r0
 801501a:	460b      	mov	r3, r1
 801501c:	4610      	mov	r0, r2
 801501e:	4619      	mov	r1, r3
 8015020:	f7eb fd9a 	bl	8000b58 <__aeabi_d2iz>
 8015024:	4603      	mov	r3, r0
 8015026:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8015028:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801502a:	f7eb fa7b 	bl	8000524 <__aeabi_i2d>
 801502e:	a36a      	add	r3, pc, #424	; (adr r3, 80151d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 8015030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015034:	f7eb fae0 	bl	80005f8 <__aeabi_dmul>
 8015038:	4602      	mov	r2, r0
 801503a:	460b      	mov	r3, r1
 801503c:	4610      	mov	r0, r2
 801503e:	4619      	mov	r1, r3
 8015040:	f04f 0200 	mov.w	r2, #0
 8015044:	4b6c      	ldr	r3, [pc, #432]	; (80151f8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 8015046:	f7eb f921 	bl	800028c <__adddf3>
 801504a:	4602      	mov	r2, r0
 801504c:	460b      	mov	r3, r1
 801504e:	4610      	mov	r0, r2
 8015050:	4619      	mov	r1, r3
 8015052:	f7eb fd81 	bl	8000b58 <__aeabi_d2iz>
 8015056:	4603      	mov	r3, r0
 8015058:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 801505a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801505c:	f7eb fa62 	bl	8000524 <__aeabi_i2d>
 8015060:	a35f      	add	r3, pc, #380	; (adr r3, 80151e0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 8015062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015066:	f7eb fac7 	bl	80005f8 <__aeabi_dmul>
 801506a:	4602      	mov	r2, r0
 801506c:	460b      	mov	r3, r1
 801506e:	4614      	mov	r4, r2
 8015070:	461d      	mov	r5, r3
 8015072:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015074:	f7eb fa56 	bl	8000524 <__aeabi_i2d>
 8015078:	a35b      	add	r3, pc, #364	; (adr r3, 80151e8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 801507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801507e:	f7eb fabb 	bl	80005f8 <__aeabi_dmul>
 8015082:	4602      	mov	r2, r0
 8015084:	460b      	mov	r3, r1
 8015086:	4620      	mov	r0, r4
 8015088:	4629      	mov	r1, r5
 801508a:	f7eb f8fd 	bl	8000288 <__aeabi_dsub>
 801508e:	4602      	mov	r2, r0
 8015090:	460b      	mov	r3, r1
 8015092:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8015096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801509a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801509e:	f7eb faab 	bl	80005f8 <__aeabi_dmul>
 80150a2:	4602      	mov	r2, r0
 80150a4:	460b      	mov	r3, r1
 80150a6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80150aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150ac:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80150b0:	17da      	asrs	r2, r3, #31
 80150b2:	469a      	mov	sl, r3
 80150b4:	4693      	mov	fp, r2
 80150b6:	f04f 0200 	mov.w	r2, #0
 80150ba:	f04f 0300 	mov.w	r3, #0
 80150be:	ea4f 530a 	mov.w	r3, sl, lsl #20
 80150c2:	2200      	movs	r2, #0
 80150c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80150c8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80150cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80150d0:	4602      	mov	r2, r0
 80150d2:	460b      	mov	r3, r1
 80150d4:	f7eb f8da 	bl	800028c <__adddf3>
 80150d8:	4602      	mov	r2, r0
 80150da:	460b      	mov	r3, r1
 80150dc:	4690      	mov	r8, r2
 80150de:	4699      	mov	r9, r3
 80150e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80150e4:	f04f 0000 	mov.w	r0, #0
 80150e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80150ec:	f7eb f8cc 	bl	8000288 <__aeabi_dsub>
 80150f0:	4602      	mov	r2, r0
 80150f2:	460b      	mov	r3, r1
 80150f4:	4692      	mov	sl, r2
 80150f6:	469b      	mov	fp, r3
 80150f8:	f04f 0200 	mov.w	r2, #0
 80150fc:	4b3f      	ldr	r3, [pc, #252]	; (80151fc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 80150fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8015102:	f7eb fba3 	bl	800084c <__aeabi_ddiv>
 8015106:	4602      	mov	r2, r0
 8015108:	460b      	mov	r3, r1
 801510a:	4610      	mov	r0, r2
 801510c:	4619      	mov	r1, r3
 801510e:	f04f 0200 	mov.w	r2, #0
 8015112:	4b3b      	ldr	r3, [pc, #236]	; (8015200 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 8015114:	f7eb f8ba 	bl	800028c <__adddf3>
 8015118:	4602      	mov	r2, r0
 801511a:	460b      	mov	r3, r1
 801511c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8015120:	f7eb fb94 	bl	800084c <__aeabi_ddiv>
 8015124:	4602      	mov	r2, r0
 8015126:	460b      	mov	r3, r1
 8015128:	4610      	mov	r0, r2
 801512a:	4619      	mov	r1, r3
 801512c:	f04f 0200 	mov.w	r2, #0
 8015130:	4b34      	ldr	r3, [pc, #208]	; (8015204 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 8015132:	f7eb f8ab 	bl	800028c <__adddf3>
 8015136:	4602      	mov	r2, r0
 8015138:	460b      	mov	r3, r1
 801513a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 801513e:	f7eb fb85 	bl	800084c <__aeabi_ddiv>
 8015142:	4602      	mov	r2, r0
 8015144:	460b      	mov	r3, r1
 8015146:	4650      	mov	r0, sl
 8015148:	4659      	mov	r1, fp
 801514a:	f7eb f89f 	bl	800028c <__adddf3>
 801514e:	4602      	mov	r2, r0
 8015150:	460b      	mov	r3, r1
 8015152:	4640      	mov	r0, r8
 8015154:	4649      	mov	r1, r9
 8015156:	f7eb fb79 	bl	800084c <__aeabi_ddiv>
 801515a:	4602      	mov	r2, r0
 801515c:	460b      	mov	r3, r1
 801515e:	4610      	mov	r0, r2
 8015160:	4619      	mov	r1, r3
 8015162:	f04f 0200 	mov.w	r2, #0
 8015166:	4b28      	ldr	r3, [pc, #160]	; (8015208 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 8015168:	f7eb f890 	bl	800028c <__adddf3>
 801516c:	4602      	mov	r2, r0
 801516e:	460b      	mov	r3, r1
 8015170:	4620      	mov	r0, r4
 8015172:	4629      	mov	r1, r5
 8015174:	f7eb fa40 	bl	80005f8 <__aeabi_dmul>
 8015178:	4602      	mov	r2, r0
 801517a:	460b      	mov	r3, r1
 801517c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8015180:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8015184:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015188:	f7eb fca8 	bl	8000adc <__aeabi_dcmplt>
 801518c:	4603      	mov	r3, r0
 801518e:	2b00      	cmp	r3, #0
 8015190:	d00d      	beq.n	80151ae <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 8015192:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015194:	3b01      	subs	r3, #1
 8015196:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8015198:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801519c:	f04f 0200 	mov.w	r2, #0
 80151a0:	4b17      	ldr	r3, [pc, #92]	; (8015200 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 80151a2:	f7eb fb53 	bl	800084c <__aeabi_ddiv>
 80151a6:	4602      	mov	r2, r0
 80151a8:	460b      	mov	r3, r1
 80151aa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80151ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151b0:	2b63      	cmp	r3, #99	; 0x63
 80151b2:	dc2b      	bgt.n	801520c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 80151b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80151b6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80151ba:	db27      	blt.n	801520c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 80151bc:	2304      	movs	r3, #4
 80151be:	e026      	b.n	801520e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 80151c0:	509f79fb 	.word	0x509f79fb
 80151c4:	3fd34413 	.word	0x3fd34413
 80151c8:	8b60c8b3 	.word	0x8b60c8b3
 80151cc:	3fc68a28 	.word	0x3fc68a28
 80151d0:	636f4361 	.word	0x636f4361
 80151d4:	3fd287a7 	.word	0x3fd287a7
 80151d8:	0979a371 	.word	0x0979a371
 80151dc:	400a934f 	.word	0x400a934f
 80151e0:	bbb55516 	.word	0xbbb55516
 80151e4:	40026bb1 	.word	0x40026bb1
 80151e8:	fefa39ef 	.word	0xfefa39ef
 80151ec:	3fe62e42 	.word	0x3fe62e42
 80151f0:	7fefffff 	.word	0x7fefffff
 80151f4:	3ff80000 	.word	0x3ff80000
 80151f8:	3fe00000 	.word	0x3fe00000
 80151fc:	402c0000 	.word	0x402c0000
 8015200:	40240000 	.word	0x40240000
 8015204:	40180000 	.word	0x40180000
 8015208:	3ff00000 	.word	0x3ff00000
 801520c:	2305      	movs	r3, #5
 801520e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8015210:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015218:	2b00      	cmp	r3, #0
 801521a:	d03d      	beq.n	8015298 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 801521c:	a368      	add	r3, pc, #416	; (adr r3, 80153c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 801521e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015222:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8015226:	f7eb fc6d 	bl	8000b04 <__aeabi_dcmpge>
 801522a:	4603      	mov	r3, r0
 801522c:	2b00      	cmp	r3, #0
 801522e:	d024      	beq.n	801527a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 8015230:	a365      	add	r3, pc, #404	; (adr r3, 80153c8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 8015232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015236:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801523a:	f7eb fc4f 	bl	8000adc <__aeabi_dcmplt>
 801523e:	4603      	mov	r3, r0
 8015240:	2b00      	cmp	r3, #0
 8015242:	d01a      	beq.n	801527a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 8015244:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015248:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801524a:	429a      	cmp	r2, r3
 801524c:	da07      	bge.n	801525e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 801524e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015254:	1ad3      	subs	r3, r2, r3
 8015256:	3b01      	subs	r3, #1
 8015258:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801525c:	e002      	b.n	8015264 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 801525e:	2300      	movs	r3, #0
 8015260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8015264:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015268:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801526c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8015270:	2300      	movs	r3, #0
 8015272:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8015274:	2300      	movs	r3, #0
 8015276:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015278:	e00e      	b.n	8015298 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 801527a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801527e:	2b00      	cmp	r3, #0
 8015280:	d00a      	beq.n	8015298 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 8015282:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801528a:	2b00      	cmp	r3, #0
 801528c:	d004      	beq.n	8015298 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 801528e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015292:	3b01      	subs	r3, #1
 8015294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8015298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801529c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 801529e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80152a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80152a4:	429a      	cmp	r2, r3
 80152a6:	d904      	bls.n	80152b2 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 80152a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80152aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80152ac:	1ad3      	subs	r3, r2, r3
 80152ae:	657b      	str	r3, [r7, #84]	; 0x54
 80152b0:	e001      	b.n	80152b6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 80152b2:	2300      	movs	r3, #0
 80152b4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 80152b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80152ba:	f003 0302 	and.w	r3, r3, #2
 80152be:	2b00      	cmp	r3, #0
 80152c0:	d004      	beq.n	80152cc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 80152c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d001      	beq.n	80152cc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 80152c8:	2300      	movs	r3, #0
 80152ca:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 80152cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d009      	beq.n	80152e6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 80152d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80152d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80152da:	f7eb fab7 	bl	800084c <__aeabi_ddiv>
 80152de:	4602      	mov	r2, r0
 80152e0:	460b      	mov	r3, r1
 80152e2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 80152e6:	69fb      	ldr	r3, [r7, #28]
 80152e8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80152ea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d006      	beq.n	8015300 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	60bb      	str	r3, [r7, #8]
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80152fc:	60fb      	str	r3, [r7, #12]
 80152fe:	e003      	b.n	8015308 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 8015300:	ed97 7b04 	vldr	d7, [r7, #16]
 8015304:	ed87 7b02 	vstr	d7, [r7, #8]
 8015308:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801530c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015310:	9302      	str	r3, [sp, #8]
 8015312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015314:	9301      	str	r3, [sp, #4]
 8015316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801531a:	9300      	str	r3, [sp, #0]
 801531c:	ed97 0b02 	vldr	d0, [r7, #8]
 8015320:	69bb      	ldr	r3, [r7, #24]
 8015322:	69fa      	ldr	r2, [r7, #28]
 8015324:	6a39      	ldr	r1, [r7, #32]
 8015326:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015328:	f7ff fb66 	bl	80149f8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 801532c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 801532e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015330:	2b00      	cmp	r3, #0
 8015332:	d03f      	beq.n	80153b4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8015334:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8015338:	f003 0320 	and.w	r3, r3, #32
 801533c:	2b00      	cmp	r3, #0
 801533e:	d001      	beq.n	8015344 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 8015340:	2045      	movs	r0, #69	; 0x45
 8015342:	e000      	b.n	8015346 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 8015344:	2065      	movs	r0, #101	; 0x65
 8015346:	69fa      	ldr	r2, [r7, #28]
 8015348:	1c53      	adds	r3, r2, #1
 801534a:	61fb      	str	r3, [r7, #28]
 801534c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801534e:	69bb      	ldr	r3, [r7, #24]
 8015350:	6a39      	ldr	r1, [r7, #32]
 8015352:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8015354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015356:	2b00      	cmp	r3, #0
 8015358:	bfb8      	it	lt
 801535a:	425b      	neglt	r3, r3
 801535c:	4618      	mov	r0, r3
 801535e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015360:	0fdb      	lsrs	r3, r3, #31
 8015362:	b2db      	uxtb	r3, r3
 8015364:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015366:	3a01      	subs	r2, #1
 8015368:	2105      	movs	r1, #5
 801536a:	9105      	str	r1, [sp, #20]
 801536c:	9204      	str	r2, [sp, #16]
 801536e:	2200      	movs	r2, #0
 8015370:	9203      	str	r2, [sp, #12]
 8015372:	220a      	movs	r2, #10
 8015374:	9202      	str	r2, [sp, #8]
 8015376:	9301      	str	r3, [sp, #4]
 8015378:	9000      	str	r0, [sp, #0]
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	69fa      	ldr	r2, [r7, #28]
 801537e:	6a39      	ldr	r1, [r7, #32]
 8015380:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015382:	f7ff fa61 	bl	8014848 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8015386:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8015388:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801538c:	f003 0302 	and.w	r3, r3, #2
 8015390:	2b00      	cmp	r3, #0
 8015392:	d00f      	beq.n	80153b4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8015394:	69fa      	ldr	r2, [r7, #28]
 8015396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015398:	1ad3      	subs	r3, r2, r3
 801539a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801539e:	429a      	cmp	r2, r3
 80153a0:	d908      	bls.n	80153b4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 80153a2:	69fa      	ldr	r2, [r7, #28]
 80153a4:	1c53      	adds	r3, r2, #1
 80153a6:	61fb      	str	r3, [r7, #28]
 80153a8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80153aa:	69bb      	ldr	r3, [r7, #24]
 80153ac:	6a39      	ldr	r1, [r7, #32]
 80153ae:	2020      	movs	r0, #32
 80153b0:	47a0      	blx	r4
 80153b2:	e7ef      	b.n	8015394 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 80153b4:	69fb      	ldr	r3, [r7, #28]
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3764      	adds	r7, #100	; 0x64
 80153ba:	46bd      	mov	sp, r7
 80153bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153c0:	eb1c432d 	.word	0xeb1c432d
 80153c4:	3f1a36e2 	.word	0x3f1a36e2
 80153c8:	00000000 	.word	0x00000000
 80153cc:	412e8480 	.word	0x412e8480

080153d0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80153d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153d4:	b0a1      	sub	sp, #132	; 0x84
 80153d6:	af0a      	add	r7, sp, #40	; 0x28
 80153d8:	60f8      	str	r0, [r7, #12]
 80153da:	60b9      	str	r1, [r7, #8]
 80153dc:	607a      	str	r2, [r7, #4]
 80153de:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80153e0:	2300      	movs	r3, #0
 80153e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 80153e4:	68bb      	ldr	r3, [r7, #8]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d101      	bne.n	80153ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 80153ea:	4ba5      	ldr	r3, [pc, #660]	; (8015680 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 80153ec:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	781b      	ldrb	r3, [r3, #0]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	f000 84ae 	beq.w	8015d54 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80153f8:	683b      	ldr	r3, [r7, #0]
 80153fa:	781b      	ldrb	r3, [r3, #0]
 80153fc:	2b25      	cmp	r3, #37	; 0x25
 80153fe:	d00d      	beq.n	801541c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 8015400:	683b      	ldr	r3, [r7, #0]
 8015402:	7818      	ldrb	r0, [r3, #0]
 8015404:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015406:	1c53      	adds	r3, r2, #1
 8015408:	647b      	str	r3, [r7, #68]	; 0x44
 801540a:	68fe      	ldr	r6, [r7, #12]
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	68b9      	ldr	r1, [r7, #8]
 8015410:	47b0      	blx	r6
      format++;
 8015412:	683b      	ldr	r3, [r7, #0]
 8015414:	3301      	adds	r3, #1
 8015416:	603b      	str	r3, [r7, #0]
      continue;
 8015418:	f000 bc9a 	b.w	8015d50 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 801541c:	683b      	ldr	r3, [r7, #0]
 801541e:	3301      	adds	r3, #1
 8015420:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 8015422:	2300      	movs	r3, #0
 8015424:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8015426:	683b      	ldr	r3, [r7, #0]
 8015428:	781b      	ldrb	r3, [r3, #0]
 801542a:	3b20      	subs	r3, #32
 801542c:	2b10      	cmp	r3, #16
 801542e:	d857      	bhi.n	80154e0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 8015430:	a201      	add	r2, pc, #4	; (adr r2, 8015438 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 8015432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015436:	bf00      	nop
 8015438:	080154b9 	.word	0x080154b9
 801543c:	080154e1 	.word	0x080154e1
 8015440:	080154e1 	.word	0x080154e1
 8015444:	080154cd 	.word	0x080154cd
 8015448:	080154e1 	.word	0x080154e1
 801544c:	080154e1 	.word	0x080154e1
 8015450:	080154e1 	.word	0x080154e1
 8015454:	080154e1 	.word	0x080154e1
 8015458:	080154e1 	.word	0x080154e1
 801545c:	080154e1 	.word	0x080154e1
 8015460:	080154e1 	.word	0x080154e1
 8015464:	080154a5 	.word	0x080154a5
 8015468:	080154e1 	.word	0x080154e1
 801546c:	08015491 	.word	0x08015491
 8015470:	080154e1 	.word	0x080154e1
 8015474:	080154e1 	.word	0x080154e1
 8015478:	0801547d 	.word	0x0801547d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 801547c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801547e:	f043 0301 	orr.w	r3, r3, #1
 8015482:	657b      	str	r3, [r7, #84]	; 0x54
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	3301      	adds	r3, #1
 8015488:	603b      	str	r3, [r7, #0]
 801548a:	2301      	movs	r3, #1
 801548c:	64bb      	str	r3, [r7, #72]	; 0x48
 801548e:	e02a      	b.n	80154e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8015490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015492:	f043 0302 	orr.w	r3, r3, #2
 8015496:	657b      	str	r3, [r7, #84]	; 0x54
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	3301      	adds	r3, #1
 801549c:	603b      	str	r3, [r7, #0]
 801549e:	2301      	movs	r3, #1
 80154a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80154a2:	e020      	b.n	80154e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80154a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154a6:	f043 0304 	orr.w	r3, r3, #4
 80154aa:	657b      	str	r3, [r7, #84]	; 0x54
 80154ac:	683b      	ldr	r3, [r7, #0]
 80154ae:	3301      	adds	r3, #1
 80154b0:	603b      	str	r3, [r7, #0]
 80154b2:	2301      	movs	r3, #1
 80154b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80154b6:	e016      	b.n	80154e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80154b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154ba:	f043 0308 	orr.w	r3, r3, #8
 80154be:	657b      	str	r3, [r7, #84]	; 0x54
 80154c0:	683b      	ldr	r3, [r7, #0]
 80154c2:	3301      	adds	r3, #1
 80154c4:	603b      	str	r3, [r7, #0]
 80154c6:	2301      	movs	r3, #1
 80154c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80154ca:	e00c      	b.n	80154e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80154cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154ce:	f043 0310 	orr.w	r3, r3, #16
 80154d2:	657b      	str	r3, [r7, #84]	; 0x54
 80154d4:	683b      	ldr	r3, [r7, #0]
 80154d6:	3301      	adds	r3, #1
 80154d8:	603b      	str	r3, [r7, #0]
 80154da:	2301      	movs	r3, #1
 80154dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80154de:	e002      	b.n	80154e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 80154e0:	2300      	movs	r3, #0
 80154e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80154e4:	bf00      	nop
      }
    } while (n);
 80154e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d000      	beq.n	80154ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 80154ec:	e79b      	b.n	8015426 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 80154ee:	2300      	movs	r3, #0
 80154f0:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 80154f2:	683b      	ldr	r3, [r7, #0]
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	4618      	mov	r0, r3
 80154f8:	f7ff f842 	bl	8014580 <_ZL9_is_digitc>
 80154fc:	4603      	mov	r3, r0
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d005      	beq.n	801550e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 8015502:	463b      	mov	r3, r7
 8015504:	4618      	mov	r0, r3
 8015506:	f7ff f84f 	bl	80145a8 <_ZL5_atoiPPKc>
 801550a:	6538      	str	r0, [r7, #80]	; 0x50
 801550c:	e01a      	b.n	8015544 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 801550e:	683b      	ldr	r3, [r7, #0]
 8015510:	781b      	ldrb	r3, [r3, #0]
 8015512:	2b2a      	cmp	r3, #42	; 0x2a
 8015514:	d116      	bne.n	8015544 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 8015516:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801551a:	1d1a      	adds	r2, r3, #4
 801551c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8015524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015526:	2b00      	cmp	r3, #0
 8015528:	da07      	bge.n	801553a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 801552a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801552c:	f043 0302 	orr.w	r3, r3, #2
 8015530:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8015532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015534:	425b      	negs	r3, r3
 8015536:	653b      	str	r3, [r7, #80]	; 0x50
 8015538:	e001      	b.n	801553e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 801553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801553c:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	3301      	adds	r3, #1
 8015542:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8015544:	2300      	movs	r3, #0
 8015546:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8015548:	683b      	ldr	r3, [r7, #0]
 801554a:	781b      	ldrb	r3, [r3, #0]
 801554c:	2b2e      	cmp	r3, #46	; 0x2e
 801554e:	d126      	bne.n	801559e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 8015550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015556:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8015558:	683b      	ldr	r3, [r7, #0]
 801555a:	3301      	adds	r3, #1
 801555c:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 801555e:	683b      	ldr	r3, [r7, #0]
 8015560:	781b      	ldrb	r3, [r3, #0]
 8015562:	4618      	mov	r0, r3
 8015564:	f7ff f80c 	bl	8014580 <_ZL9_is_digitc>
 8015568:	4603      	mov	r3, r0
 801556a:	2b00      	cmp	r3, #0
 801556c:	d005      	beq.n	801557a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 801556e:	463b      	mov	r3, r7
 8015570:	4618      	mov	r0, r3
 8015572:	f7ff f819 	bl	80145a8 <_ZL5_atoiPPKc>
 8015576:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015578:	e011      	b.n	801559e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 801557a:	683b      	ldr	r3, [r7, #0]
 801557c:	781b      	ldrb	r3, [r3, #0]
 801557e:	2b2a      	cmp	r3, #42	; 0x2a
 8015580:	d10d      	bne.n	801559e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 8015582:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015586:	1d1a      	adds	r2, r3, #4
 8015588:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8015590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015592:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015596:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8015598:	683b      	ldr	r3, [r7, #0]
 801559a:	3301      	adds	r3, #1
 801559c:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 801559e:	683b      	ldr	r3, [r7, #0]
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	3b68      	subs	r3, #104	; 0x68
 80155a4:	2b12      	cmp	r3, #18
 80155a6:	d867      	bhi.n	8015678 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 80155a8:	a201      	add	r2, pc, #4	; (adr r2, 80155b0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 80155aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ae:	bf00      	nop
 80155b0:	08015623 	.word	0x08015623
 80155b4:	08015679 	.word	0x08015679
 80155b8:	08015659 	.word	0x08015659
 80155bc:	08015679 	.word	0x08015679
 80155c0:	080155fd 	.word	0x080155fd
 80155c4:	08015679 	.word	0x08015679
 80155c8:	08015679 	.word	0x08015679
 80155cc:	08015679 	.word	0x08015679
 80155d0:	08015679 	.word	0x08015679
 80155d4:	08015679 	.word	0x08015679
 80155d8:	08015679 	.word	0x08015679
 80155dc:	08015679 	.word	0x08015679
 80155e0:	08015649 	.word	0x08015649
 80155e4:	08015679 	.word	0x08015679
 80155e8:	08015679 	.word	0x08015679
 80155ec:	08015679 	.word	0x08015679
 80155f0:	08015679 	.word	0x08015679
 80155f4:	08015679 	.word	0x08015679
 80155f8:	08015669 	.word	0x08015669
      case 'l' :
        flags |= FLAGS_LONG;
 80155fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015602:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8015604:	683b      	ldr	r3, [r7, #0]
 8015606:	3301      	adds	r3, #1
 8015608:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 801560a:	683b      	ldr	r3, [r7, #0]
 801560c:	781b      	ldrb	r3, [r3, #0]
 801560e:	2b6c      	cmp	r3, #108	; 0x6c
 8015610:	d134      	bne.n	801567c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 8015612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015614:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015618:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 801561a:	683b      	ldr	r3, [r7, #0]
 801561c:	3301      	adds	r3, #1
 801561e:	603b      	str	r3, [r7, #0]
        }
        break;
 8015620:	e02c      	b.n	801567c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 8015622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015628:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 801562a:	683b      	ldr	r3, [r7, #0]
 801562c:	3301      	adds	r3, #1
 801562e:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	2b68      	cmp	r3, #104	; 0x68
 8015636:	d125      	bne.n	8015684 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 8015638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801563a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801563e:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8015640:	683b      	ldr	r3, [r7, #0]
 8015642:	3301      	adds	r3, #1
 8015644:	603b      	str	r3, [r7, #0]
        }
        break;
 8015646:	e01d      	b.n	8015684 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8015648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801564a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801564e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	3301      	adds	r3, #1
 8015654:	603b      	str	r3, [r7, #0]
        break;
 8015656:	e016      	b.n	8015686 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8015658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801565a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801565e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	3301      	adds	r3, #1
 8015664:	603b      	str	r3, [r7, #0]
        break;
 8015666:	e00e      	b.n	8015686 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8015668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801566a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801566e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	3301      	adds	r3, #1
 8015674:	603b      	str	r3, [r7, #0]
        break;
 8015676:	e006      	b.n	8015686 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 8015678:	bf00      	nop
 801567a:	e004      	b.n	8015686 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 801567c:	bf00      	nop
 801567e:	e002      	b.n	8015686 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 8015680:	080144fb 	.word	0x080144fb
        break;
 8015684:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	781b      	ldrb	r3, [r3, #0]
 801568a:	3b25      	subs	r3, #37	; 0x25
 801568c:	2b53      	cmp	r3, #83	; 0x53
 801568e:	f200 8352 	bhi.w	8015d36 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 8015692:	a201      	add	r2, pc, #4	; (adr r2, 8015698 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 8015694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015698:	08015d1f 	.word	0x08015d1f
 801569c:	08015d37 	.word	0x08015d37
 80156a0:	08015d37 	.word	0x08015d37
 80156a4:	08015d37 	.word	0x08015d37
 80156a8:	08015d37 	.word	0x08015d37
 80156ac:	08015d37 	.word	0x08015d37
 80156b0:	08015d37 	.word	0x08015d37
 80156b4:	08015d37 	.word	0x08015d37
 80156b8:	08015d37 	.word	0x08015d37
 80156bc:	08015d37 	.word	0x08015d37
 80156c0:	08015d37 	.word	0x08015d37
 80156c4:	08015d37 	.word	0x08015d37
 80156c8:	08015d37 	.word	0x08015d37
 80156cc:	08015d37 	.word	0x08015d37
 80156d0:	08015d37 	.word	0x08015d37
 80156d4:	08015d37 	.word	0x08015d37
 80156d8:	08015d37 	.word	0x08015d37
 80156dc:	08015d37 	.word	0x08015d37
 80156e0:	08015d37 	.word	0x08015d37
 80156e4:	08015d37 	.word	0x08015d37
 80156e8:	08015d37 	.word	0x08015d37
 80156ec:	08015d37 	.word	0x08015d37
 80156f0:	08015d37 	.word	0x08015d37
 80156f4:	08015d37 	.word	0x08015d37
 80156f8:	08015d37 	.word	0x08015d37
 80156fc:	08015d37 	.word	0x08015d37
 8015700:	08015d37 	.word	0x08015d37
 8015704:	08015d37 	.word	0x08015d37
 8015708:	08015d37 	.word	0x08015d37
 801570c:	08015d37 	.word	0x08015d37
 8015710:	08015d37 	.word	0x08015d37
 8015714:	08015d37 	.word	0x08015d37
 8015718:	08015aed 	.word	0x08015aed
 801571c:	08015a9d 	.word	0x08015a9d
 8015720:	08015aed 	.word	0x08015aed
 8015724:	08015d37 	.word	0x08015d37
 8015728:	08015d37 	.word	0x08015d37
 801572c:	08015d37 	.word	0x08015d37
 8015730:	08015d37 	.word	0x08015d37
 8015734:	08015d37 	.word	0x08015d37
 8015738:	08015d37 	.word	0x08015d37
 801573c:	08015d37 	.word	0x08015d37
 8015740:	08015d37 	.word	0x08015d37
 8015744:	08015d37 	.word	0x08015d37
 8015748:	08015d37 	.word	0x08015d37
 801574c:	08015d37 	.word	0x08015d37
 8015750:	08015d37 	.word	0x08015d37
 8015754:	08015d37 	.word	0x08015d37
 8015758:	08015d37 	.word	0x08015d37
 801575c:	08015d37 	.word	0x08015d37
 8015760:	08015d37 	.word	0x08015d37
 8015764:	080157e9 	.word	0x080157e9
 8015768:	08015d37 	.word	0x08015d37
 801576c:	08015d37 	.word	0x08015d37
 8015770:	08015d37 	.word	0x08015d37
 8015774:	08015d37 	.word	0x08015d37
 8015778:	08015d37 	.word	0x08015d37
 801577c:	08015d37 	.word	0x08015d37
 8015780:	08015d37 	.word	0x08015d37
 8015784:	08015d37 	.word	0x08015d37
 8015788:	08015d37 	.word	0x08015d37
 801578c:	080157e9 	.word	0x080157e9
 8015790:	08015b5d 	.word	0x08015b5d
 8015794:	080157e9 	.word	0x080157e9
 8015798:	08015aed 	.word	0x08015aed
 801579c:	08015a9d 	.word	0x08015a9d
 80157a0:	08015aed 	.word	0x08015aed
 80157a4:	08015d37 	.word	0x08015d37
 80157a8:	080157e9 	.word	0x080157e9
 80157ac:	08015d37 	.word	0x08015d37
 80157b0:	08015d37 	.word	0x08015d37
 80157b4:	08015d37 	.word	0x08015d37
 80157b8:	08015d37 	.word	0x08015d37
 80157bc:	08015d37 	.word	0x08015d37
 80157c0:	080157e9 	.word	0x080157e9
 80157c4:	08015cd3 	.word	0x08015cd3
 80157c8:	08015d37 	.word	0x08015d37
 80157cc:	08015d37 	.word	0x08015d37
 80157d0:	08015be9 	.word	0x08015be9
 80157d4:	08015d37 	.word	0x08015d37
 80157d8:	080157e9 	.word	0x080157e9
 80157dc:	08015d37 	.word	0x08015d37
 80157e0:	08015d37 	.word	0x08015d37
 80157e4:	080157e9 	.word	0x080157e9
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 80157e8:	683b      	ldr	r3, [r7, #0]
 80157ea:	781b      	ldrb	r3, [r3, #0]
 80157ec:	2b78      	cmp	r3, #120	; 0x78
 80157ee:	d003      	beq.n	80157f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	2b58      	cmp	r3, #88	; 0x58
 80157f6:	d102      	bne.n	80157fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 80157f8:	2310      	movs	r3, #16
 80157fa:	643b      	str	r3, [r7, #64]	; 0x40
 80157fc:	e013      	b.n	8015826 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 80157fe:	683b      	ldr	r3, [r7, #0]
 8015800:	781b      	ldrb	r3, [r3, #0]
 8015802:	2b6f      	cmp	r3, #111	; 0x6f
 8015804:	d102      	bne.n	801580c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 8015806:	2308      	movs	r3, #8
 8015808:	643b      	str	r3, [r7, #64]	; 0x40
 801580a:	e00c      	b.n	8015826 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 801580c:	683b      	ldr	r3, [r7, #0]
 801580e:	781b      	ldrb	r3, [r3, #0]
 8015810:	2b62      	cmp	r3, #98	; 0x62
 8015812:	d102      	bne.n	801581a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 8015814:	2302      	movs	r3, #2
 8015816:	643b      	str	r3, [r7, #64]	; 0x40
 8015818:	e005      	b.n	8015826 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 801581a:	230a      	movs	r3, #10
 801581c:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 801581e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015820:	f023 0310 	bic.w	r3, r3, #16
 8015824:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8015826:	683b      	ldr	r3, [r7, #0]
 8015828:	781b      	ldrb	r3, [r3, #0]
 801582a:	2b58      	cmp	r3, #88	; 0x58
 801582c:	d103      	bne.n	8015836 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 801582e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015830:	f043 0320 	orr.w	r3, r3, #32
 8015834:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8015836:	683b      	ldr	r3, [r7, #0]
 8015838:	781b      	ldrb	r3, [r3, #0]
 801583a:	2b69      	cmp	r3, #105	; 0x69
 801583c:	d007      	beq.n	801584e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	781b      	ldrb	r3, [r3, #0]
 8015842:	2b64      	cmp	r3, #100	; 0x64
 8015844:	d003      	beq.n	801584e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8015846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015848:	f023 030c 	bic.w	r3, r3, #12
 801584c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 801584e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015854:	2b00      	cmp	r3, #0
 8015856:	d003      	beq.n	8015860 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 8015858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801585a:	f023 0301 	bic.w	r3, r3, #1
 801585e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8015860:	683b      	ldr	r3, [r7, #0]
 8015862:	781b      	ldrb	r3, [r3, #0]
 8015864:	2b69      	cmp	r3, #105	; 0x69
 8015866:	d004      	beq.n	8015872 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	2b64      	cmp	r3, #100	; 0x64
 801586e:	f040 8097 	bne.w	80159a0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8015872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015874:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015878:	2b00      	cmp	r3, #0
 801587a:	d030      	beq.n	80158de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 801587c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015880:	3307      	adds	r3, #7
 8015882:	f023 0307 	bic.w	r3, r3, #7
 8015886:	f103 0208 	add.w	r2, r3, #8
 801588a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801588e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015892:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8015896:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801589a:	2b00      	cmp	r3, #0
 801589c:	da05      	bge.n	80158aa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 801589e:	2100      	movs	r1, #0
 80158a0:	4254      	negs	r4, r2
 80158a2:	eb61 0503 	sbc.w	r5, r1, r3
 80158a6:	4622      	mov	r2, r4
 80158a8:	462b      	mov	r3, r5
 80158aa:	6979      	ldr	r1, [r7, #20]
 80158ac:	0fc9      	lsrs	r1, r1, #31
 80158ae:	b2c9      	uxtb	r1, r1
 80158b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80158b2:	2600      	movs	r6, #0
 80158b4:	4680      	mov	r8, r0
 80158b6:	46b1      	mov	r9, r6
 80158b8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80158ba:	9008      	str	r0, [sp, #32]
 80158bc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80158be:	9007      	str	r0, [sp, #28]
 80158c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80158c2:	9006      	str	r0, [sp, #24]
 80158c4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80158c8:	9102      	str	r1, [sp, #8]
 80158ca:	e9cd 2300 	strd	r2, r3, [sp]
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80158d2:	68b9      	ldr	r1, [r7, #8]
 80158d4:	68f8      	ldr	r0, [r7, #12]
 80158d6:	f7ff f81e 	bl	8014916 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 80158da:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 80158dc:	e0da      	b.n	8015a94 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 80158de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80158e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d020      	beq.n	801592a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 80158e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80158ec:	1d1a      	adds	r2, r3, #4
 80158ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80158f6:	69fb      	ldr	r3, [r7, #28]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	bfb8      	it	lt
 80158fc:	425b      	neglt	r3, r3
 80158fe:	4619      	mov	r1, r3
 8015900:	69fb      	ldr	r3, [r7, #28]
 8015902:	0fdb      	lsrs	r3, r3, #31
 8015904:	b2db      	uxtb	r3, r3
 8015906:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015908:	9205      	str	r2, [sp, #20]
 801590a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801590c:	9204      	str	r2, [sp, #16]
 801590e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015910:	9203      	str	r2, [sp, #12]
 8015912:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015914:	9202      	str	r2, [sp, #8]
 8015916:	9301      	str	r3, [sp, #4]
 8015918:	9100      	str	r1, [sp, #0]
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801591e:	68b9      	ldr	r1, [r7, #8]
 8015920:	68f8      	ldr	r0, [r7, #12]
 8015922:	f7fe ff91 	bl	8014848 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8015926:	6478      	str	r0, [r7, #68]	; 0x44
          }
 8015928:	e0b4      	b.n	8015a94 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 801592a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801592c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015930:	2b00      	cmp	r3, #0
 8015932:	d007      	beq.n	8015944 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 8015934:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015938:	1d1a      	adds	r2, r3, #4
 801593a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	b2db      	uxtb	r3, r3
 8015942:	e012      	b.n	801596a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 8015944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801594a:	2b00      	cmp	r3, #0
 801594c:	d007      	beq.n	801595e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 801594e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015952:	1d1a      	adds	r2, r3, #4
 8015954:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	b21b      	sxth	r3, r3
 801595c:	e005      	b.n	801596a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 801595e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015962:	1d1a      	adds	r2, r3, #4
 8015964:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 801596c:	6a3b      	ldr	r3, [r7, #32]
 801596e:	2b00      	cmp	r3, #0
 8015970:	bfb8      	it	lt
 8015972:	425b      	neglt	r3, r3
 8015974:	4619      	mov	r1, r3
 8015976:	6a3b      	ldr	r3, [r7, #32]
 8015978:	0fdb      	lsrs	r3, r3, #31
 801597a:	b2db      	uxtb	r3, r3
 801597c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801597e:	9205      	str	r2, [sp, #20]
 8015980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015982:	9204      	str	r2, [sp, #16]
 8015984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015986:	9203      	str	r2, [sp, #12]
 8015988:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801598a:	9202      	str	r2, [sp, #8]
 801598c:	9301      	str	r3, [sp, #4]
 801598e:	9100      	str	r1, [sp, #0]
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015994:	68b9      	ldr	r1, [r7, #8]
 8015996:	68f8      	ldr	r0, [r7, #12]
 8015998:	f7fe ff56 	bl	8014848 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 801599c:	6478      	str	r0, [r7, #68]	; 0x44
          }
 801599e:	e079      	b.n	8015a94 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 80159a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d022      	beq.n	80159f0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 80159aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80159ae:	3307      	adds	r3, #7
 80159b0:	f023 0307 	bic.w	r3, r3, #7
 80159b4:	f103 0208 	add.w	r2, r3, #8
 80159b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80159bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80159c2:	2000      	movs	r0, #0
 80159c4:	468a      	mov	sl, r1
 80159c6:	4683      	mov	fp, r0
 80159c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80159ca:	9108      	str	r1, [sp, #32]
 80159cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80159ce:	9107      	str	r1, [sp, #28]
 80159d0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80159d2:	9106      	str	r1, [sp, #24]
 80159d4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80159d8:	2100      	movs	r1, #0
 80159da:	9102      	str	r1, [sp, #8]
 80159dc:	e9cd 2300 	strd	r2, r3, [sp]
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80159e4:	68b9      	ldr	r1, [r7, #8]
 80159e6:	68f8      	ldr	r0, [r7, #12]
 80159e8:	f7fe ff95 	bl	8014916 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 80159ec:	6478      	str	r0, [r7, #68]	; 0x44
 80159ee:	e051      	b.n	8015a94 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 80159f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80159f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d018      	beq.n	8015a2c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80159fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80159fe:	1d1a      	adds	r2, r3, #4
 8015a00:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015a08:	9205      	str	r2, [sp, #20]
 8015a0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a0c:	9204      	str	r2, [sp, #16]
 8015a0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015a10:	9203      	str	r2, [sp, #12]
 8015a12:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015a14:	9202      	str	r2, [sp, #8]
 8015a16:	2200      	movs	r2, #0
 8015a18:	9201      	str	r2, [sp, #4]
 8015a1a:	9300      	str	r3, [sp, #0]
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015a20:	68b9      	ldr	r1, [r7, #8]
 8015a22:	68f8      	ldr	r0, [r7, #12]
 8015a24:	f7fe ff10 	bl	8014848 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8015a28:	6478      	str	r0, [r7, #68]	; 0x44
 8015a2a:	e033      	b.n	8015a94 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8015a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d007      	beq.n	8015a46 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 8015a36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015a3a:	1d1a      	adds	r2, r3, #4
 8015a3c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	b2db      	uxtb	r3, r3
 8015a44:	e012      	b.n	8015a6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 8015a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d007      	beq.n	8015a60 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 8015a50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015a54:	1d1a      	adds	r2, r3, #4
 8015a56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	e005      	b.n	8015a6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 8015a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015a64:	1d1a      	adds	r2, r3, #4
 8015a66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8015a6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a70:	9305      	str	r3, [sp, #20]
 8015a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a74:	9304      	str	r3, [sp, #16]
 8015a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a78:	9303      	str	r3, [sp, #12]
 8015a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015a7c:	9302      	str	r3, [sp, #8]
 8015a7e:	2300      	movs	r3, #0
 8015a80:	9301      	str	r3, [sp, #4]
 8015a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a84:	9300      	str	r3, [sp, #0]
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015a8a:	68b9      	ldr	r1, [r7, #8]
 8015a8c:	68f8      	ldr	r0, [r7, #12]
 8015a8e:	f7fe fedb 	bl	8014848 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8015a92:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8015a94:	683b      	ldr	r3, [r7, #0]
 8015a96:	3301      	adds	r3, #1
 8015a98:	603b      	str	r3, [r7, #0]
        break;
 8015a9a:	e159      	b.n	8015d50 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8015a9c:	683b      	ldr	r3, [r7, #0]
 8015a9e:	781b      	ldrb	r3, [r3, #0]
 8015aa0:	2b46      	cmp	r3, #70	; 0x46
 8015aa2:	d103      	bne.n	8015aac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 8015aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015aa6:	f043 0320 	orr.w	r3, r3, #32
 8015aaa:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8015aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015ab0:	3307      	adds	r3, #7
 8015ab2:	f023 0307 	bic.w	r3, r3, #7
 8015ab6:	f103 0208 	add.w	r2, r3, #8
 8015aba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015abe:	ed93 7b00 	vldr	d7, [r3]
 8015ac2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ac4:	9302      	str	r3, [sp, #8]
 8015ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ac8:	9301      	str	r3, [sp, #4]
 8015aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015acc:	9300      	str	r3, [sp, #0]
 8015ace:	eeb0 0a47 	vmov.f32	s0, s14
 8015ad2:	eef0 0a67 	vmov.f32	s1, s15
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015ada:	68b9      	ldr	r1, [r7, #8]
 8015adc:	68f8      	ldr	r0, [r7, #12]
 8015ade:	f7fe ff8b 	bl	80149f8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8015ae2:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8015ae4:	683b      	ldr	r3, [r7, #0]
 8015ae6:	3301      	adds	r3, #1
 8015ae8:	603b      	str	r3, [r7, #0]
        break;
 8015aea:	e131      	b.n	8015d50 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	781b      	ldrb	r3, [r3, #0]
 8015af0:	2b67      	cmp	r3, #103	; 0x67
 8015af2:	d003      	beq.n	8015afc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	781b      	ldrb	r3, [r3, #0]
 8015af8:	2b47      	cmp	r3, #71	; 0x47
 8015afa:	d103      	bne.n	8015b04 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 8015afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015afe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015b02:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	2b45      	cmp	r3, #69	; 0x45
 8015b0a:	d003      	beq.n	8015b14 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 8015b0c:	683b      	ldr	r3, [r7, #0]
 8015b0e:	781b      	ldrb	r3, [r3, #0]
 8015b10:	2b47      	cmp	r3, #71	; 0x47
 8015b12:	d103      	bne.n	8015b1c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 8015b14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b16:	f043 0320 	orr.w	r3, r3, #32
 8015b1a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8015b1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015b20:	3307      	adds	r3, #7
 8015b22:	f023 0307 	bic.w	r3, r3, #7
 8015b26:	f103 0208 	add.w	r2, r3, #8
 8015b2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015b2e:	ed93 7b00 	vldr	d7, [r3]
 8015b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b34:	9302      	str	r3, [sp, #8]
 8015b36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b38:	9301      	str	r3, [sp, #4]
 8015b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b3c:	9300      	str	r3, [sp, #0]
 8015b3e:	eeb0 0a47 	vmov.f32	s0, s14
 8015b42:	eef0 0a67 	vmov.f32	s1, s15
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b4a:	68b9      	ldr	r1, [r7, #8]
 8015b4c:	68f8      	ldr	r0, [r7, #12]
 8015b4e:	f7ff f9b7 	bl	8014ec0 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8015b52:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8015b54:	683b      	ldr	r3, [r7, #0]
 8015b56:	3301      	adds	r3, #1
 8015b58:	603b      	str	r3, [r7, #0]
        break;
 8015b5a:	e0f9      	b.n	8015d50 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8015b5c:	2301      	movs	r3, #1
 8015b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8015b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b62:	f003 0302 	and.w	r3, r3, #2
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d113      	bne.n	8015b92 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 8015b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b6c:	1c5a      	adds	r2, r3, #1
 8015b6e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8015b70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015b72:	429a      	cmp	r2, r3
 8015b74:	bf8c      	ite	hi
 8015b76:	2301      	movhi	r3, #1
 8015b78:	2300      	movls	r3, #0
 8015b7a:	b2db      	uxtb	r3, r3
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d008      	beq.n	8015b92 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 8015b80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b82:	1c53      	adds	r3, r2, #1
 8015b84:	647b      	str	r3, [r7, #68]	; 0x44
 8015b86:	68fe      	ldr	r6, [r7, #12]
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	68b9      	ldr	r1, [r7, #8]
 8015b8c:	2020      	movs	r0, #32
 8015b8e:	47b0      	blx	r6
          while (l++ < width) {
 8015b90:	e7eb      	b.n	8015b6a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8015b92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015b96:	1d1a      	adds	r2, r3, #4
 8015b98:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	b2d8      	uxtb	r0, r3
 8015ba0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015ba2:	1c53      	adds	r3, r2, #1
 8015ba4:	647b      	str	r3, [r7, #68]	; 0x44
 8015ba6:	68fe      	ldr	r6, [r7, #12]
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	68b9      	ldr	r1, [r7, #8]
 8015bac:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 8015bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015bb0:	f003 0302 	and.w	r3, r3, #2
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d013      	beq.n	8015be0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 8015bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015bba:	1c5a      	adds	r2, r3, #1
 8015bbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8015bbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	bf8c      	ite	hi
 8015bc4:	2301      	movhi	r3, #1
 8015bc6:	2300      	movls	r3, #0
 8015bc8:	b2db      	uxtb	r3, r3
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d008      	beq.n	8015be0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 8015bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015bd0:	1c53      	adds	r3, r2, #1
 8015bd2:	647b      	str	r3, [r7, #68]	; 0x44
 8015bd4:	68fe      	ldr	r6, [r7, #12]
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	68b9      	ldr	r1, [r7, #8]
 8015bda:	2020      	movs	r0, #32
 8015bdc:	47b0      	blx	r6
          while (l++ < width) {
 8015bde:	e7eb      	b.n	8015bb8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 8015be0:	683b      	ldr	r3, [r7, #0]
 8015be2:	3301      	adds	r3, #1
 8015be4:	603b      	str	r3, [r7, #0]
        break;
 8015be6:	e0b3      	b.n	8015d50 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8015be8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015bec:	1d1a      	adds	r2, r3, #4
 8015bee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8015bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d001      	beq.n	8015c00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 8015bfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015bfe:	e001      	b.n	8015c04 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 8015c00:	f04f 33ff 	mov.w	r3, #4294967295
 8015c04:	4619      	mov	r1, r3
 8015c06:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015c08:	f7fe fc98 	bl	801453c <_ZL10_strnlen_sPKcj>
 8015c0c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8015c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d007      	beq.n	8015c28 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 8015c18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	d201      	bcs.n	8015c24 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 8015c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c22:	e000      	b.n	8015c26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 8015c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c26:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8015c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c2a:	f003 0302 	and.w	r3, r3, #2
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d113      	bne.n	8015c5a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 8015c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015c34:	1c5a      	adds	r2, r3, #1
 8015c36:	637a      	str	r2, [r7, #52]	; 0x34
 8015c38:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015c3a:	429a      	cmp	r2, r3
 8015c3c:	bf8c      	ite	hi
 8015c3e:	2301      	movhi	r3, #1
 8015c40:	2300      	movls	r3, #0
 8015c42:	b2db      	uxtb	r3, r3
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d008      	beq.n	8015c5a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 8015c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c4a:	1c53      	adds	r3, r2, #1
 8015c4c:	647b      	str	r3, [r7, #68]	; 0x44
 8015c4e:	68fe      	ldr	r6, [r7, #12]
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	68b9      	ldr	r1, [r7, #8]
 8015c54:	2020      	movs	r0, #32
 8015c56:	47b0      	blx	r6
          while (l++ < width) {
 8015c58:	e7eb      	b.n	8015c32 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8015c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c5c:	781b      	ldrb	r3, [r3, #0]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d00b      	beq.n	8015c7a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8015c62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d004      	beq.n	8015c76 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 8015c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015c6e:	1e5a      	subs	r2, r3, #1
 8015c70:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d001      	beq.n	8015c7a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8015c76:	2301      	movs	r3, #1
 8015c78:	e000      	b.n	8015c7c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 8015c7a:	2300      	movs	r3, #0
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d00b      	beq.n	8015c98 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 8015c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015c82:	1c5a      	adds	r2, r3, #1
 8015c84:	63ba      	str	r2, [r7, #56]	; 0x38
 8015c86:	7818      	ldrb	r0, [r3, #0]
 8015c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015c8a:	1c53      	adds	r3, r2, #1
 8015c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8015c8e:	68fe      	ldr	r6, [r7, #12]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	68b9      	ldr	r1, [r7, #8]
 8015c94:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8015c96:	e7e0      	b.n	8015c5a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8015c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015c9a:	f003 0302 	and.w	r3, r3, #2
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d013      	beq.n	8015cca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 8015ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ca4:	1c5a      	adds	r2, r3, #1
 8015ca6:	637a      	str	r2, [r7, #52]	; 0x34
 8015ca8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015caa:	429a      	cmp	r2, r3
 8015cac:	bf8c      	ite	hi
 8015cae:	2301      	movhi	r3, #1
 8015cb0:	2300      	movls	r3, #0
 8015cb2:	b2db      	uxtb	r3, r3
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d008      	beq.n	8015cca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 8015cb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015cba:	1c53      	adds	r3, r2, #1
 8015cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8015cbe:	68fe      	ldr	r6, [r7, #12]
 8015cc0:	687b      	ldr	r3, [r7, #4]
 8015cc2:	68b9      	ldr	r1, [r7, #8]
 8015cc4:	2020      	movs	r0, #32
 8015cc6:	47b0      	blx	r6
          while (l++ < width) {
 8015cc8:	e7eb      	b.n	8015ca2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 8015cca:	683b      	ldr	r3, [r7, #0]
 8015ccc:	3301      	adds	r3, #1
 8015cce:	603b      	str	r3, [r7, #0]
        break;
 8015cd0:	e03e      	b.n	8015d50 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8015cd2:	2308      	movs	r3, #8
 8015cd4:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8015cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015cd8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8015cdc:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8015cde:	2300      	movs	r3, #0
 8015ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8015ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8015ce8:	1d1a      	adds	r2, r3, #4
 8015cea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	461a      	mov	r2, r3
 8015cf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015cf4:	9305      	str	r3, [sp, #20]
 8015cf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015cf8:	9304      	str	r3, [sp, #16]
 8015cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015cfc:	9303      	str	r3, [sp, #12]
 8015cfe:	2310      	movs	r3, #16
 8015d00:	9302      	str	r3, [sp, #8]
 8015d02:	2300      	movs	r3, #0
 8015d04:	9301      	str	r3, [sp, #4]
 8015d06:	9200      	str	r2, [sp, #0]
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d0c:	68b9      	ldr	r1, [r7, #8]
 8015d0e:	68f8      	ldr	r0, [r7, #12]
 8015d10:	f7fe fd9a 	bl	8014848 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8015d14:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8015d16:	683b      	ldr	r3, [r7, #0]
 8015d18:	3301      	adds	r3, #1
 8015d1a:	603b      	str	r3, [r7, #0]
        break;
 8015d1c:	e018      	b.n	8015d50 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8015d1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d20:	1c53      	adds	r3, r2, #1
 8015d22:	647b      	str	r3, [r7, #68]	; 0x44
 8015d24:	68fe      	ldr	r6, [r7, #12]
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	68b9      	ldr	r1, [r7, #8]
 8015d2a:	2025      	movs	r0, #37	; 0x25
 8015d2c:	47b0      	blx	r6
        format++;
 8015d2e:	683b      	ldr	r3, [r7, #0]
 8015d30:	3301      	adds	r3, #1
 8015d32:	603b      	str	r3, [r7, #0]
        break;
 8015d34:	e00c      	b.n	8015d50 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 8015d36:	683b      	ldr	r3, [r7, #0]
 8015d38:	7818      	ldrb	r0, [r3, #0]
 8015d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d3c:	1c53      	adds	r3, r2, #1
 8015d3e:	647b      	str	r3, [r7, #68]	; 0x44
 8015d40:	68fe      	ldr	r6, [r7, #12]
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	68b9      	ldr	r1, [r7, #8]
 8015d46:	47b0      	blx	r6
        format++;
 8015d48:	683b      	ldr	r3, [r7, #0]
 8015d4a:	3301      	adds	r3, #1
 8015d4c:	603b      	str	r3, [r7, #0]
        break;
 8015d4e:	bf00      	nop
  while (*format)
 8015d50:	f7ff bb4d 	b.w	80153ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8015d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d302      	bcc.n	8015d62 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	1e5a      	subs	r2, r3, #1
 8015d60:	e000      	b.n	8015d64 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 8015d62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015d64:	68fc      	ldr	r4, [r7, #12]
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	68b9      	ldr	r1, [r7, #8]
 8015d6a:	2000      	movs	r0, #0
 8015d6c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8015d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8015d70:	4618      	mov	r0, r3
 8015d72:	375c      	adds	r7, #92	; 0x5c
 8015d74:	46bd      	mov	sp, r7
 8015d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d7a:	bf00      	nop

08015d7c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8015d7c:	b40f      	push	{r0, r1, r2, r3}
 8015d7e:	b580      	push	{r7, lr}
 8015d80:	b086      	sub	sp, #24
 8015d82:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8015d84:	f107 031c 	add.w	r3, r7, #28
 8015d88:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8015d8a:	1d39      	adds	r1, r7, #4
 8015d8c:	68bb      	ldr	r3, [r7, #8]
 8015d8e:	9300      	str	r3, [sp, #0]
 8015d90:	69bb      	ldr	r3, [r7, #24]
 8015d92:	f04f 32ff 	mov.w	r2, #4294967295
 8015d96:	4806      	ldr	r0, [pc, #24]	; (8015db0 <printf_+0x34>)
 8015d98:	f7ff fb1a 	bl	80153d0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 8015d9c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
}
 8015da0:	4618      	mov	r0, r3
 8015da2:	3710      	adds	r7, #16
 8015da4:	46bd      	mov	sp, r7
 8015da6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8015daa:	b004      	add	sp, #16
 8015dac:	4770      	bx	lr
 8015dae:	bf00      	nop
 8015db0:	08014517 	.word	0x08014517

08015db4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8015db4:	b480      	push	{r7}
 8015db6:	b083      	sub	sp, #12
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8015dbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8015dc0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8015dc4:	f003 0301 	and.w	r3, r3, #1
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d009      	beq.n	8015de0 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8015dcc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8015dd0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8015dd4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d001      	beq.n	8015de0 <ITM_SendChar+0x2c>
 8015ddc:	2301      	movs	r3, #1
 8015dde:	e000      	b.n	8015de2 <ITM_SendChar+0x2e>
 8015de0:	2300      	movs	r3, #0
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d010      	beq.n	8015e08 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8015de6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	bf0c      	ite	eq
 8015df0:	2301      	moveq	r3, #1
 8015df2:	2300      	movne	r3, #0
 8015df4:	b2db      	uxtb	r3, r3
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d001      	beq.n	8015dfe <ITM_SendChar+0x4a>
    {
      __NOP();
 8015dfa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8015dfc:	e7f3      	b.n	8015de6 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8015dfe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8015e02:	687a      	ldr	r2, [r7, #4]
 8015e04:	b2d2      	uxtb	r2, r2
 8015e06:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8015e08:	687b      	ldr	r3, [r7, #4]
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	370c      	adds	r7, #12
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e14:	4770      	bx	lr

08015e16 <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 8015e16:	b580      	push	{r7, lr}
 8015e18:	b082      	sub	sp, #8
 8015e1a:	af00      	add	r7, sp, #0
 8015e1c:	4603      	mov	r3, r0
 8015e1e:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 8015e20:	79fb      	ldrb	r3, [r7, #7]
 8015e22:	4618      	mov	r0, r3
 8015e24:	f7ff ffc6 	bl	8015db4 <ITM_SendChar>
}
 8015e28:	bf00      	nop
 8015e2a:	3708      	adds	r7, #8
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}

08015e30 <__NVIC_SetPriority>:
 8015e30:	b480      	push	{r7}
 8015e32:	b083      	sub	sp, #12
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	4603      	mov	r3, r0
 8015e38:	6039      	str	r1, [r7, #0]
 8015e3a:	71fb      	strb	r3, [r7, #7]
 8015e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	db0a      	blt.n	8015e5a <__NVIC_SetPriority+0x2a>
 8015e44:	683b      	ldr	r3, [r7, #0]
 8015e46:	b2da      	uxtb	r2, r3
 8015e48:	490c      	ldr	r1, [pc, #48]	; (8015e7c <__NVIC_SetPriority+0x4c>)
 8015e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e4e:	0112      	lsls	r2, r2, #4
 8015e50:	b2d2      	uxtb	r2, r2
 8015e52:	440b      	add	r3, r1
 8015e54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8015e58:	e00a      	b.n	8015e70 <__NVIC_SetPriority+0x40>
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	b2da      	uxtb	r2, r3
 8015e5e:	4908      	ldr	r1, [pc, #32]	; (8015e80 <__NVIC_SetPriority+0x50>)
 8015e60:	79fb      	ldrb	r3, [r7, #7]
 8015e62:	f003 030f 	and.w	r3, r3, #15
 8015e66:	3b04      	subs	r3, #4
 8015e68:	0112      	lsls	r2, r2, #4
 8015e6a:	b2d2      	uxtb	r2, r2
 8015e6c:	440b      	add	r3, r1
 8015e6e:	761a      	strb	r2, [r3, #24]
 8015e70:	bf00      	nop
 8015e72:	370c      	adds	r7, #12
 8015e74:	46bd      	mov	sp, r7
 8015e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e7a:	4770      	bx	lr
 8015e7c:	e000e100 	.word	0xe000e100
 8015e80:	e000ed00 	.word	0xe000ed00

08015e84 <SysTick_Handler>:
 8015e84:	b580      	push	{r7, lr}
 8015e86:	af00      	add	r7, sp, #0
 8015e88:	4b05      	ldr	r3, [pc, #20]	; (8015ea0 <SysTick_Handler+0x1c>)
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	f003 f8a8 	bl	8018fe0 <xTaskGetSchedulerState>
 8015e90:	4603      	mov	r3, r0
 8015e92:	2b01      	cmp	r3, #1
 8015e94:	d001      	beq.n	8015e9a <SysTick_Handler+0x16>
 8015e96:	f004 f8cf 	bl	801a038 <xPortSysTickHandler>
 8015e9a:	bf00      	nop
 8015e9c:	bd80      	pop	{r7, pc}
 8015e9e:	bf00      	nop
 8015ea0:	e000e010 	.word	0xe000e010

08015ea4 <SVC_Setup>:
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	af00      	add	r7, sp, #0
 8015ea8:	2100      	movs	r1, #0
 8015eaa:	f06f 0004 	mvn.w	r0, #4
 8015eae:	f7ff ffbf 	bl	8015e30 <__NVIC_SetPriority>
 8015eb2:	bf00      	nop
 8015eb4:	bd80      	pop	{r7, pc}
	...

08015eb8 <osKernelInitialize>:
 8015eb8:	b480      	push	{r7}
 8015eba:	b083      	sub	sp, #12
 8015ebc:	af00      	add	r7, sp, #0
 8015ebe:	f3ef 8305 	mrs	r3, IPSR
 8015ec2:	603b      	str	r3, [r7, #0]
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d003      	beq.n	8015ed2 <osKernelInitialize+0x1a>
 8015eca:	f06f 0305 	mvn.w	r3, #5
 8015ece:	607b      	str	r3, [r7, #4]
 8015ed0:	e00c      	b.n	8015eec <osKernelInitialize+0x34>
 8015ed2:	4b0a      	ldr	r3, [pc, #40]	; (8015efc <osKernelInitialize+0x44>)
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d105      	bne.n	8015ee6 <osKernelInitialize+0x2e>
 8015eda:	4b08      	ldr	r3, [pc, #32]	; (8015efc <osKernelInitialize+0x44>)
 8015edc:	2201      	movs	r2, #1
 8015ede:	601a      	str	r2, [r3, #0]
 8015ee0:	2300      	movs	r3, #0
 8015ee2:	607b      	str	r3, [r7, #4]
 8015ee4:	e002      	b.n	8015eec <osKernelInitialize+0x34>
 8015ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8015eea:	607b      	str	r3, [r7, #4]
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	4618      	mov	r0, r3
 8015ef0:	370c      	adds	r7, #12
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef8:	4770      	bx	lr
 8015efa:	bf00      	nop
 8015efc:	20001678 	.word	0x20001678

08015f00 <osKernelStart>:
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b082      	sub	sp, #8
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	f3ef 8305 	mrs	r3, IPSR
 8015f0a:	603b      	str	r3, [r7, #0]
 8015f0c:	683b      	ldr	r3, [r7, #0]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d003      	beq.n	8015f1a <osKernelStart+0x1a>
 8015f12:	f06f 0305 	mvn.w	r3, #5
 8015f16:	607b      	str	r3, [r7, #4]
 8015f18:	e010      	b.n	8015f3c <osKernelStart+0x3c>
 8015f1a:	4b0b      	ldr	r3, [pc, #44]	; (8015f48 <osKernelStart+0x48>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	2b01      	cmp	r3, #1
 8015f20:	d109      	bne.n	8015f36 <osKernelStart+0x36>
 8015f22:	f7ff ffbf 	bl	8015ea4 <SVC_Setup>
 8015f26:	4b08      	ldr	r3, [pc, #32]	; (8015f48 <osKernelStart+0x48>)
 8015f28:	2202      	movs	r2, #2
 8015f2a:	601a      	str	r2, [r3, #0]
 8015f2c:	f002 fb98 	bl	8018660 <vTaskStartScheduler>
 8015f30:	2300      	movs	r3, #0
 8015f32:	607b      	str	r3, [r7, #4]
 8015f34:	e002      	b.n	8015f3c <osKernelStart+0x3c>
 8015f36:	f04f 33ff 	mov.w	r3, #4294967295
 8015f3a:	607b      	str	r3, [r7, #4]
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	4618      	mov	r0, r3
 8015f40:	3708      	adds	r7, #8
 8015f42:	46bd      	mov	sp, r7
 8015f44:	bd80      	pop	{r7, pc}
 8015f46:	bf00      	nop
 8015f48:	20001678 	.word	0x20001678

08015f4c <osThreadNew>:
 8015f4c:	b580      	push	{r7, lr}
 8015f4e:	b08e      	sub	sp, #56	; 0x38
 8015f50:	af04      	add	r7, sp, #16
 8015f52:	60f8      	str	r0, [r7, #12]
 8015f54:	60b9      	str	r1, [r7, #8]
 8015f56:	607a      	str	r2, [r7, #4]
 8015f58:	2300      	movs	r3, #0
 8015f5a:	613b      	str	r3, [r7, #16]
 8015f5c:	f3ef 8305 	mrs	r3, IPSR
 8015f60:	617b      	str	r3, [r7, #20]
 8015f62:	697b      	ldr	r3, [r7, #20]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d17e      	bne.n	8016066 <osThreadNew+0x11a>
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d07b      	beq.n	8016066 <osThreadNew+0x11a>
 8015f6e:	2380      	movs	r3, #128	; 0x80
 8015f70:	623b      	str	r3, [r7, #32]
 8015f72:	2318      	movs	r3, #24
 8015f74:	61fb      	str	r3, [r7, #28]
 8015f76:	2300      	movs	r3, #0
 8015f78:	627b      	str	r3, [r7, #36]	; 0x24
 8015f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f7e:	61bb      	str	r3, [r7, #24]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d045      	beq.n	8016012 <osThreadNew+0xc6>
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	d002      	beq.n	8015f94 <osThreadNew+0x48>
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	627b      	str	r3, [r7, #36]	; 0x24
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	699b      	ldr	r3, [r3, #24]
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d002      	beq.n	8015fa2 <osThreadNew+0x56>
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	699b      	ldr	r3, [r3, #24]
 8015fa0:	61fb      	str	r3, [r7, #28]
 8015fa2:	69fb      	ldr	r3, [r7, #28]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d008      	beq.n	8015fba <osThreadNew+0x6e>
 8015fa8:	69fb      	ldr	r3, [r7, #28]
 8015faa:	2b38      	cmp	r3, #56	; 0x38
 8015fac:	d805      	bhi.n	8015fba <osThreadNew+0x6e>
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	f003 0301 	and.w	r3, r3, #1
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	d001      	beq.n	8015fbe <osThreadNew+0x72>
 8015fba:	2300      	movs	r3, #0
 8015fbc:	e054      	b.n	8016068 <osThreadNew+0x11c>
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	695b      	ldr	r3, [r3, #20]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d003      	beq.n	8015fce <osThreadNew+0x82>
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	695b      	ldr	r3, [r3, #20]
 8015fca:	089b      	lsrs	r3, r3, #2
 8015fcc:	623b      	str	r3, [r7, #32]
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	689b      	ldr	r3, [r3, #8]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d00e      	beq.n	8015ff4 <osThreadNew+0xa8>
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	68db      	ldr	r3, [r3, #12]
 8015fda:	2bbf      	cmp	r3, #191	; 0xbf
 8015fdc:	d90a      	bls.n	8015ff4 <osThreadNew+0xa8>
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	691b      	ldr	r3, [r3, #16]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d006      	beq.n	8015ff4 <osThreadNew+0xa8>
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	695b      	ldr	r3, [r3, #20]
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d002      	beq.n	8015ff4 <osThreadNew+0xa8>
 8015fee:	2301      	movs	r3, #1
 8015ff0:	61bb      	str	r3, [r7, #24]
 8015ff2:	e010      	b.n	8016016 <osThreadNew+0xca>
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	689b      	ldr	r3, [r3, #8]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d10c      	bne.n	8016016 <osThreadNew+0xca>
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	68db      	ldr	r3, [r3, #12]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d108      	bne.n	8016016 <osThreadNew+0xca>
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	691b      	ldr	r3, [r3, #16]
 8016008:	2b00      	cmp	r3, #0
 801600a:	d104      	bne.n	8016016 <osThreadNew+0xca>
 801600c:	2300      	movs	r3, #0
 801600e:	61bb      	str	r3, [r7, #24]
 8016010:	e001      	b.n	8016016 <osThreadNew+0xca>
 8016012:	2300      	movs	r3, #0
 8016014:	61bb      	str	r3, [r7, #24]
 8016016:	69bb      	ldr	r3, [r7, #24]
 8016018:	2b01      	cmp	r3, #1
 801601a:	d110      	bne.n	801603e <osThreadNew+0xf2>
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	691b      	ldr	r3, [r3, #16]
 8016020:	687a      	ldr	r2, [r7, #4]
 8016022:	6892      	ldr	r2, [r2, #8]
 8016024:	9202      	str	r2, [sp, #8]
 8016026:	9301      	str	r3, [sp, #4]
 8016028:	69fb      	ldr	r3, [r7, #28]
 801602a:	9300      	str	r3, [sp, #0]
 801602c:	68bb      	ldr	r3, [r7, #8]
 801602e:	6a3a      	ldr	r2, [r7, #32]
 8016030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016032:	68f8      	ldr	r0, [r7, #12]
 8016034:	f002 f924 	bl	8018280 <xTaskCreateStatic>
 8016038:	4603      	mov	r3, r0
 801603a:	613b      	str	r3, [r7, #16]
 801603c:	e013      	b.n	8016066 <osThreadNew+0x11a>
 801603e:	69bb      	ldr	r3, [r7, #24]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d110      	bne.n	8016066 <osThreadNew+0x11a>
 8016044:	6a3b      	ldr	r3, [r7, #32]
 8016046:	b29a      	uxth	r2, r3
 8016048:	f107 0310 	add.w	r3, r7, #16
 801604c:	9301      	str	r3, [sp, #4]
 801604e:	69fb      	ldr	r3, [r7, #28]
 8016050:	9300      	str	r3, [sp, #0]
 8016052:	68bb      	ldr	r3, [r7, #8]
 8016054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016056:	68f8      	ldr	r0, [r7, #12]
 8016058:	f002 f96f 	bl	801833a <xTaskCreate>
 801605c:	4603      	mov	r3, r0
 801605e:	2b01      	cmp	r3, #1
 8016060:	d001      	beq.n	8016066 <osThreadNew+0x11a>
 8016062:	2300      	movs	r3, #0
 8016064:	613b      	str	r3, [r7, #16]
 8016066:	693b      	ldr	r3, [r7, #16]
 8016068:	4618      	mov	r0, r3
 801606a:	3728      	adds	r7, #40	; 0x28
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}

08016070 <osDelay>:
 8016070:	b580      	push	{r7, lr}
 8016072:	b084      	sub	sp, #16
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
 8016078:	f3ef 8305 	mrs	r3, IPSR
 801607c:	60bb      	str	r3, [r7, #8]
 801607e:	68bb      	ldr	r3, [r7, #8]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d003      	beq.n	801608c <osDelay+0x1c>
 8016084:	f06f 0305 	mvn.w	r3, #5
 8016088:	60fb      	str	r3, [r7, #12]
 801608a:	e007      	b.n	801609c <osDelay+0x2c>
 801608c:	2300      	movs	r3, #0
 801608e:	60fb      	str	r3, [r7, #12]
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d002      	beq.n	801609c <osDelay+0x2c>
 8016096:	6878      	ldr	r0, [r7, #4]
 8016098:	f002 faae 	bl	80185f8 <vTaskDelay>
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	4618      	mov	r0, r3
 80160a0:	3710      	adds	r7, #16
 80160a2:	46bd      	mov	sp, r7
 80160a4:	bd80      	pop	{r7, pc}

080160a6 <osMutexNew>:
 80160a6:	b580      	push	{r7, lr}
 80160a8:	b088      	sub	sp, #32
 80160aa:	af00      	add	r7, sp, #0
 80160ac:	6078      	str	r0, [r7, #4]
 80160ae:	2300      	movs	r3, #0
 80160b0:	61fb      	str	r3, [r7, #28]
 80160b2:	f3ef 8305 	mrs	r3, IPSR
 80160b6:	60bb      	str	r3, [r7, #8]
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d174      	bne.n	80161a8 <osMutexNew+0x102>
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d003      	beq.n	80160cc <osMutexNew+0x26>
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	685b      	ldr	r3, [r3, #4]
 80160c8:	61bb      	str	r3, [r7, #24]
 80160ca:	e001      	b.n	80160d0 <osMutexNew+0x2a>
 80160cc:	2300      	movs	r3, #0
 80160ce:	61bb      	str	r3, [r7, #24]
 80160d0:	69bb      	ldr	r3, [r7, #24]
 80160d2:	f003 0301 	and.w	r3, r3, #1
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d002      	beq.n	80160e0 <osMutexNew+0x3a>
 80160da:	2301      	movs	r3, #1
 80160dc:	617b      	str	r3, [r7, #20]
 80160de:	e001      	b.n	80160e4 <osMutexNew+0x3e>
 80160e0:	2300      	movs	r3, #0
 80160e2:	617b      	str	r3, [r7, #20]
 80160e4:	69bb      	ldr	r3, [r7, #24]
 80160e6:	f003 0308 	and.w	r3, r3, #8
 80160ea:	2b00      	cmp	r3, #0
 80160ec:	d15c      	bne.n	80161a8 <osMutexNew+0x102>
 80160ee:	f04f 33ff 	mov.w	r3, #4294967295
 80160f2:	613b      	str	r3, [r7, #16]
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d015      	beq.n	8016126 <osMutexNew+0x80>
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	689b      	ldr	r3, [r3, #8]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d006      	beq.n	8016110 <osMutexNew+0x6a>
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	68db      	ldr	r3, [r3, #12]
 8016106:	2b4f      	cmp	r3, #79	; 0x4f
 8016108:	d902      	bls.n	8016110 <osMutexNew+0x6a>
 801610a:	2301      	movs	r3, #1
 801610c:	613b      	str	r3, [r7, #16]
 801610e:	e00c      	b.n	801612a <osMutexNew+0x84>
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	689b      	ldr	r3, [r3, #8]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d108      	bne.n	801612a <osMutexNew+0x84>
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	68db      	ldr	r3, [r3, #12]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d104      	bne.n	801612a <osMutexNew+0x84>
 8016120:	2300      	movs	r3, #0
 8016122:	613b      	str	r3, [r7, #16]
 8016124:	e001      	b.n	801612a <osMutexNew+0x84>
 8016126:	2300      	movs	r3, #0
 8016128:	613b      	str	r3, [r7, #16]
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	2b01      	cmp	r3, #1
 801612e:	d112      	bne.n	8016156 <osMutexNew+0xb0>
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d007      	beq.n	8016146 <osMutexNew+0xa0>
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	689b      	ldr	r3, [r3, #8]
 801613a:	4619      	mov	r1, r3
 801613c:	2004      	movs	r0, #4
 801613e:	f000 fd88 	bl	8016c52 <xQueueCreateMutexStatic>
 8016142:	61f8      	str	r0, [r7, #28]
 8016144:	e016      	b.n	8016174 <osMutexNew+0xce>
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	689b      	ldr	r3, [r3, #8]
 801614a:	4619      	mov	r1, r3
 801614c:	2001      	movs	r0, #1
 801614e:	f000 fd80 	bl	8016c52 <xQueueCreateMutexStatic>
 8016152:	61f8      	str	r0, [r7, #28]
 8016154:	e00e      	b.n	8016174 <osMutexNew+0xce>
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d10b      	bne.n	8016174 <osMutexNew+0xce>
 801615c:	697b      	ldr	r3, [r7, #20]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d004      	beq.n	801616c <osMutexNew+0xc6>
 8016162:	2004      	movs	r0, #4
 8016164:	f000 fd5d 	bl	8016c22 <xQueueCreateMutex>
 8016168:	61f8      	str	r0, [r7, #28]
 801616a:	e003      	b.n	8016174 <osMutexNew+0xce>
 801616c:	2001      	movs	r0, #1
 801616e:	f000 fd58 	bl	8016c22 <xQueueCreateMutex>
 8016172:	61f8      	str	r0, [r7, #28]
 8016174:	69fb      	ldr	r3, [r7, #28]
 8016176:	2b00      	cmp	r3, #0
 8016178:	d00c      	beq.n	8016194 <osMutexNew+0xee>
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	2b00      	cmp	r3, #0
 801617e:	d003      	beq.n	8016188 <osMutexNew+0xe2>
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	60fb      	str	r3, [r7, #12]
 8016186:	e001      	b.n	801618c <osMutexNew+0xe6>
 8016188:	2300      	movs	r3, #0
 801618a:	60fb      	str	r3, [r7, #12]
 801618c:	68f9      	ldr	r1, [r7, #12]
 801618e:	69f8      	ldr	r0, [r7, #28]
 8016190:	f001 fc68 	bl	8017a64 <vQueueAddToRegistry>
 8016194:	69fb      	ldr	r3, [r7, #28]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d006      	beq.n	80161a8 <osMutexNew+0x102>
 801619a:	697b      	ldr	r3, [r7, #20]
 801619c:	2b00      	cmp	r3, #0
 801619e:	d003      	beq.n	80161a8 <osMutexNew+0x102>
 80161a0:	69fb      	ldr	r3, [r7, #28]
 80161a2:	f043 0301 	orr.w	r3, r3, #1
 80161a6:	61fb      	str	r3, [r7, #28]
 80161a8:	69fb      	ldr	r3, [r7, #28]
 80161aa:	4618      	mov	r0, r3
 80161ac:	3720      	adds	r7, #32
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}

080161b2 <osMutexAcquire>:
 80161b2:	b580      	push	{r7, lr}
 80161b4:	b086      	sub	sp, #24
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
 80161ba:	6039      	str	r1, [r7, #0]
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	f023 0301 	bic.w	r3, r3, #1
 80161c2:	613b      	str	r3, [r7, #16]
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f003 0301 	and.w	r3, r3, #1
 80161ca:	60fb      	str	r3, [r7, #12]
 80161cc:	2300      	movs	r3, #0
 80161ce:	617b      	str	r3, [r7, #20]
 80161d0:	f3ef 8305 	mrs	r3, IPSR
 80161d4:	60bb      	str	r3, [r7, #8]
 80161d6:	68bb      	ldr	r3, [r7, #8]
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d003      	beq.n	80161e4 <osMutexAcquire+0x32>
 80161dc:	f06f 0305 	mvn.w	r3, #5
 80161e0:	617b      	str	r3, [r7, #20]
 80161e2:	e02c      	b.n	801623e <osMutexAcquire+0x8c>
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d103      	bne.n	80161f2 <osMutexAcquire+0x40>
 80161ea:	f06f 0303 	mvn.w	r3, #3
 80161ee:	617b      	str	r3, [r7, #20]
 80161f0:	e025      	b.n	801623e <osMutexAcquire+0x8c>
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d011      	beq.n	801621c <osMutexAcquire+0x6a>
 80161f8:	6839      	ldr	r1, [r7, #0]
 80161fa:	6938      	ldr	r0, [r7, #16]
 80161fc:	f000 fd78 	bl	8016cf0 <xQueueTakeMutexRecursive>
 8016200:	4603      	mov	r3, r0
 8016202:	2b01      	cmp	r3, #1
 8016204:	d01b      	beq.n	801623e <osMutexAcquire+0x8c>
 8016206:	683b      	ldr	r3, [r7, #0]
 8016208:	2b00      	cmp	r3, #0
 801620a:	d003      	beq.n	8016214 <osMutexAcquire+0x62>
 801620c:	f06f 0301 	mvn.w	r3, #1
 8016210:	617b      	str	r3, [r7, #20]
 8016212:	e014      	b.n	801623e <osMutexAcquire+0x8c>
 8016214:	f06f 0302 	mvn.w	r3, #2
 8016218:	617b      	str	r3, [r7, #20]
 801621a:	e010      	b.n	801623e <osMutexAcquire+0x8c>
 801621c:	6839      	ldr	r1, [r7, #0]
 801621e:	6938      	ldr	r0, [r7, #16]
 8016220:	f001 f90c 	bl	801743c <xQueueSemaphoreTake>
 8016224:	4603      	mov	r3, r0
 8016226:	2b01      	cmp	r3, #1
 8016228:	d009      	beq.n	801623e <osMutexAcquire+0x8c>
 801622a:	683b      	ldr	r3, [r7, #0]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d003      	beq.n	8016238 <osMutexAcquire+0x86>
 8016230:	f06f 0301 	mvn.w	r3, #1
 8016234:	617b      	str	r3, [r7, #20]
 8016236:	e002      	b.n	801623e <osMutexAcquire+0x8c>
 8016238:	f06f 0302 	mvn.w	r3, #2
 801623c:	617b      	str	r3, [r7, #20]
 801623e:	697b      	ldr	r3, [r7, #20]
 8016240:	4618      	mov	r0, r3
 8016242:	3718      	adds	r7, #24
 8016244:	46bd      	mov	sp, r7
 8016246:	bd80      	pop	{r7, pc}

08016248 <osMutexRelease>:
 8016248:	b580      	push	{r7, lr}
 801624a:	b086      	sub	sp, #24
 801624c:	af00      	add	r7, sp, #0
 801624e:	6078      	str	r0, [r7, #4]
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	f023 0301 	bic.w	r3, r3, #1
 8016256:	613b      	str	r3, [r7, #16]
 8016258:	687b      	ldr	r3, [r7, #4]
 801625a:	f003 0301 	and.w	r3, r3, #1
 801625e:	60fb      	str	r3, [r7, #12]
 8016260:	2300      	movs	r3, #0
 8016262:	617b      	str	r3, [r7, #20]
 8016264:	f3ef 8305 	mrs	r3, IPSR
 8016268:	60bb      	str	r3, [r7, #8]
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d003      	beq.n	8016278 <osMutexRelease+0x30>
 8016270:	f06f 0305 	mvn.w	r3, #5
 8016274:	617b      	str	r3, [r7, #20]
 8016276:	e01f      	b.n	80162b8 <osMutexRelease+0x70>
 8016278:	693b      	ldr	r3, [r7, #16]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d103      	bne.n	8016286 <osMutexRelease+0x3e>
 801627e:	f06f 0303 	mvn.w	r3, #3
 8016282:	617b      	str	r3, [r7, #20]
 8016284:	e018      	b.n	80162b8 <osMutexRelease+0x70>
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d009      	beq.n	80162a0 <osMutexRelease+0x58>
 801628c:	6938      	ldr	r0, [r7, #16]
 801628e:	f000 fcfb 	bl	8016c88 <xQueueGiveMutexRecursive>
 8016292:	4603      	mov	r3, r0
 8016294:	2b01      	cmp	r3, #1
 8016296:	d00f      	beq.n	80162b8 <osMutexRelease+0x70>
 8016298:	f06f 0302 	mvn.w	r3, #2
 801629c:	617b      	str	r3, [r7, #20]
 801629e:	e00b      	b.n	80162b8 <osMutexRelease+0x70>
 80162a0:	2300      	movs	r3, #0
 80162a2:	2200      	movs	r2, #0
 80162a4:	2100      	movs	r1, #0
 80162a6:	6938      	ldr	r0, [r7, #16]
 80162a8:	f000 fdc2 	bl	8016e30 <xQueueGenericSend>
 80162ac:	4603      	mov	r3, r0
 80162ae:	2b01      	cmp	r3, #1
 80162b0:	d002      	beq.n	80162b8 <osMutexRelease+0x70>
 80162b2:	f06f 0302 	mvn.w	r3, #2
 80162b6:	617b      	str	r3, [r7, #20]
 80162b8:	697b      	ldr	r3, [r7, #20]
 80162ba:	4618      	mov	r0, r3
 80162bc:	3718      	adds	r7, #24
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}

080162c2 <osSemaphoreNew>:
 80162c2:	b580      	push	{r7, lr}
 80162c4:	b08a      	sub	sp, #40	; 0x28
 80162c6:	af02      	add	r7, sp, #8
 80162c8:	60f8      	str	r0, [r7, #12]
 80162ca:	60b9      	str	r1, [r7, #8]
 80162cc:	607a      	str	r2, [r7, #4]
 80162ce:	2300      	movs	r3, #0
 80162d0:	61fb      	str	r3, [r7, #28]
 80162d2:	f3ef 8305 	mrs	r3, IPSR
 80162d6:	613b      	str	r3, [r7, #16]
 80162d8:	693b      	ldr	r3, [r7, #16]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d175      	bne.n	80163ca <osSemaphoreNew+0x108>
 80162de:	68fb      	ldr	r3, [r7, #12]
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d072      	beq.n	80163ca <osSemaphoreNew+0x108>
 80162e4:	68ba      	ldr	r2, [r7, #8]
 80162e6:	68fb      	ldr	r3, [r7, #12]
 80162e8:	429a      	cmp	r2, r3
 80162ea:	d86e      	bhi.n	80163ca <osSemaphoreNew+0x108>
 80162ec:	f04f 33ff 	mov.w	r3, #4294967295
 80162f0:	61bb      	str	r3, [r7, #24]
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d015      	beq.n	8016324 <osSemaphoreNew+0x62>
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	689b      	ldr	r3, [r3, #8]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d006      	beq.n	801630e <osSemaphoreNew+0x4c>
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	68db      	ldr	r3, [r3, #12]
 8016304:	2b4f      	cmp	r3, #79	; 0x4f
 8016306:	d902      	bls.n	801630e <osSemaphoreNew+0x4c>
 8016308:	2301      	movs	r3, #1
 801630a:	61bb      	str	r3, [r7, #24]
 801630c:	e00c      	b.n	8016328 <osSemaphoreNew+0x66>
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	689b      	ldr	r3, [r3, #8]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d108      	bne.n	8016328 <osSemaphoreNew+0x66>
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	68db      	ldr	r3, [r3, #12]
 801631a:	2b00      	cmp	r3, #0
 801631c:	d104      	bne.n	8016328 <osSemaphoreNew+0x66>
 801631e:	2300      	movs	r3, #0
 8016320:	61bb      	str	r3, [r7, #24]
 8016322:	e001      	b.n	8016328 <osSemaphoreNew+0x66>
 8016324:	2300      	movs	r3, #0
 8016326:	61bb      	str	r3, [r7, #24]
 8016328:	69bb      	ldr	r3, [r7, #24]
 801632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801632e:	d04c      	beq.n	80163ca <osSemaphoreNew+0x108>
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	2b01      	cmp	r3, #1
 8016334:	d128      	bne.n	8016388 <osSemaphoreNew+0xc6>
 8016336:	69bb      	ldr	r3, [r7, #24]
 8016338:	2b01      	cmp	r3, #1
 801633a:	d10a      	bne.n	8016352 <osSemaphoreNew+0x90>
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	689b      	ldr	r3, [r3, #8]
 8016340:	2203      	movs	r2, #3
 8016342:	9200      	str	r2, [sp, #0]
 8016344:	2200      	movs	r2, #0
 8016346:	2100      	movs	r1, #0
 8016348:	2001      	movs	r0, #1
 801634a:	f000 fb7b 	bl	8016a44 <xQueueGenericCreateStatic>
 801634e:	61f8      	str	r0, [r7, #28]
 8016350:	e005      	b.n	801635e <osSemaphoreNew+0x9c>
 8016352:	2203      	movs	r2, #3
 8016354:	2100      	movs	r1, #0
 8016356:	2001      	movs	r0, #1
 8016358:	f000 fbec 	bl	8016b34 <xQueueGenericCreate>
 801635c:	61f8      	str	r0, [r7, #28]
 801635e:	69fb      	ldr	r3, [r7, #28]
 8016360:	2b00      	cmp	r3, #0
 8016362:	d022      	beq.n	80163aa <osSemaphoreNew+0xe8>
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d01f      	beq.n	80163aa <osSemaphoreNew+0xe8>
 801636a:	2300      	movs	r3, #0
 801636c:	2200      	movs	r2, #0
 801636e:	2100      	movs	r1, #0
 8016370:	69f8      	ldr	r0, [r7, #28]
 8016372:	f000 fd5d 	bl	8016e30 <xQueueGenericSend>
 8016376:	4603      	mov	r3, r0
 8016378:	2b01      	cmp	r3, #1
 801637a:	d016      	beq.n	80163aa <osSemaphoreNew+0xe8>
 801637c:	69f8      	ldr	r0, [r7, #28]
 801637e:	f001 fa25 	bl	80177cc <vQueueDelete>
 8016382:	2300      	movs	r3, #0
 8016384:	61fb      	str	r3, [r7, #28]
 8016386:	e010      	b.n	80163aa <osSemaphoreNew+0xe8>
 8016388:	69bb      	ldr	r3, [r7, #24]
 801638a:	2b01      	cmp	r3, #1
 801638c:	d108      	bne.n	80163a0 <osSemaphoreNew+0xde>
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	689b      	ldr	r3, [r3, #8]
 8016392:	461a      	mov	r2, r3
 8016394:	68b9      	ldr	r1, [r7, #8]
 8016396:	68f8      	ldr	r0, [r7, #12]
 8016398:	f000 fce0 	bl	8016d5c <xQueueCreateCountingSemaphoreStatic>
 801639c:	61f8      	str	r0, [r7, #28]
 801639e:	e004      	b.n	80163aa <osSemaphoreNew+0xe8>
 80163a0:	68b9      	ldr	r1, [r7, #8]
 80163a2:	68f8      	ldr	r0, [r7, #12]
 80163a4:	f000 fd11 	bl	8016dca <xQueueCreateCountingSemaphore>
 80163a8:	61f8      	str	r0, [r7, #28]
 80163aa:	69fb      	ldr	r3, [r7, #28]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d00c      	beq.n	80163ca <osSemaphoreNew+0x108>
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d003      	beq.n	80163be <osSemaphoreNew+0xfc>
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	617b      	str	r3, [r7, #20]
 80163bc:	e001      	b.n	80163c2 <osSemaphoreNew+0x100>
 80163be:	2300      	movs	r3, #0
 80163c0:	617b      	str	r3, [r7, #20]
 80163c2:	6979      	ldr	r1, [r7, #20]
 80163c4:	69f8      	ldr	r0, [r7, #28]
 80163c6:	f001 fb4d 	bl	8017a64 <vQueueAddToRegistry>
 80163ca:	69fb      	ldr	r3, [r7, #28]
 80163cc:	4618      	mov	r0, r3
 80163ce:	3720      	adds	r7, #32
 80163d0:	46bd      	mov	sp, r7
 80163d2:	bd80      	pop	{r7, pc}

080163d4 <osSemaphoreAcquire>:
 80163d4:	b580      	push	{r7, lr}
 80163d6:	b086      	sub	sp, #24
 80163d8:	af00      	add	r7, sp, #0
 80163da:	6078      	str	r0, [r7, #4]
 80163dc:	6039      	str	r1, [r7, #0]
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	613b      	str	r3, [r7, #16]
 80163e2:	2300      	movs	r3, #0
 80163e4:	617b      	str	r3, [r7, #20]
 80163e6:	693b      	ldr	r3, [r7, #16]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d103      	bne.n	80163f4 <osSemaphoreAcquire+0x20>
 80163ec:	f06f 0303 	mvn.w	r3, #3
 80163f0:	617b      	str	r3, [r7, #20]
 80163f2:	e039      	b.n	8016468 <osSemaphoreAcquire+0x94>
 80163f4:	f3ef 8305 	mrs	r3, IPSR
 80163f8:	60fb      	str	r3, [r7, #12]
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d022      	beq.n	8016446 <osSemaphoreAcquire+0x72>
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d003      	beq.n	801640e <osSemaphoreAcquire+0x3a>
 8016406:	f06f 0303 	mvn.w	r3, #3
 801640a:	617b      	str	r3, [r7, #20]
 801640c:	e02c      	b.n	8016468 <osSemaphoreAcquire+0x94>
 801640e:	2300      	movs	r3, #0
 8016410:	60bb      	str	r3, [r7, #8]
 8016412:	f107 0308 	add.w	r3, r7, #8
 8016416:	461a      	mov	r2, r3
 8016418:	2100      	movs	r1, #0
 801641a:	6938      	ldr	r0, [r7, #16]
 801641c:	f001 f91a 	bl	8017654 <xQueueReceiveFromISR>
 8016420:	4603      	mov	r3, r0
 8016422:	2b01      	cmp	r3, #1
 8016424:	d003      	beq.n	801642e <osSemaphoreAcquire+0x5a>
 8016426:	f06f 0302 	mvn.w	r3, #2
 801642a:	617b      	str	r3, [r7, #20]
 801642c:	e01c      	b.n	8016468 <osSemaphoreAcquire+0x94>
 801642e:	68bb      	ldr	r3, [r7, #8]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d019      	beq.n	8016468 <osSemaphoreAcquire+0x94>
 8016434:	4b0f      	ldr	r3, [pc, #60]	; (8016474 <osSemaphoreAcquire+0xa0>)
 8016436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801643a:	601a      	str	r2, [r3, #0]
 801643c:	f3bf 8f4f 	dsb	sy
 8016440:	f3bf 8f6f 	isb	sy
 8016444:	e010      	b.n	8016468 <osSemaphoreAcquire+0x94>
 8016446:	6839      	ldr	r1, [r7, #0]
 8016448:	6938      	ldr	r0, [r7, #16]
 801644a:	f000 fff7 	bl	801743c <xQueueSemaphoreTake>
 801644e:	4603      	mov	r3, r0
 8016450:	2b01      	cmp	r3, #1
 8016452:	d009      	beq.n	8016468 <osSemaphoreAcquire+0x94>
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	2b00      	cmp	r3, #0
 8016458:	d003      	beq.n	8016462 <osSemaphoreAcquire+0x8e>
 801645a:	f06f 0301 	mvn.w	r3, #1
 801645e:	617b      	str	r3, [r7, #20]
 8016460:	e002      	b.n	8016468 <osSemaphoreAcquire+0x94>
 8016462:	f06f 0302 	mvn.w	r3, #2
 8016466:	617b      	str	r3, [r7, #20]
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	4618      	mov	r0, r3
 801646c:	3718      	adds	r7, #24
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}
 8016472:	bf00      	nop
 8016474:	e000ed04 	.word	0xe000ed04

08016478 <osSemaphoreRelease>:
 8016478:	b580      	push	{r7, lr}
 801647a:	b086      	sub	sp, #24
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	613b      	str	r3, [r7, #16]
 8016484:	2300      	movs	r3, #0
 8016486:	617b      	str	r3, [r7, #20]
 8016488:	693b      	ldr	r3, [r7, #16]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d103      	bne.n	8016496 <osSemaphoreRelease+0x1e>
 801648e:	f06f 0303 	mvn.w	r3, #3
 8016492:	617b      	str	r3, [r7, #20]
 8016494:	e02c      	b.n	80164f0 <osSemaphoreRelease+0x78>
 8016496:	f3ef 8305 	mrs	r3, IPSR
 801649a:	60fb      	str	r3, [r7, #12]
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d01a      	beq.n	80164d8 <osSemaphoreRelease+0x60>
 80164a2:	2300      	movs	r3, #0
 80164a4:	60bb      	str	r3, [r7, #8]
 80164a6:	f107 0308 	add.w	r3, r7, #8
 80164aa:	4619      	mov	r1, r3
 80164ac:	6938      	ldr	r0, [r7, #16]
 80164ae:	f000 fe58 	bl	8017162 <xQueueGiveFromISR>
 80164b2:	4603      	mov	r3, r0
 80164b4:	2b01      	cmp	r3, #1
 80164b6:	d003      	beq.n	80164c0 <osSemaphoreRelease+0x48>
 80164b8:	f06f 0302 	mvn.w	r3, #2
 80164bc:	617b      	str	r3, [r7, #20]
 80164be:	e017      	b.n	80164f0 <osSemaphoreRelease+0x78>
 80164c0:	68bb      	ldr	r3, [r7, #8]
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d014      	beq.n	80164f0 <osSemaphoreRelease+0x78>
 80164c6:	4b0d      	ldr	r3, [pc, #52]	; (80164fc <osSemaphoreRelease+0x84>)
 80164c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164cc:	601a      	str	r2, [r3, #0]
 80164ce:	f3bf 8f4f 	dsb	sy
 80164d2:	f3bf 8f6f 	isb	sy
 80164d6:	e00b      	b.n	80164f0 <osSemaphoreRelease+0x78>
 80164d8:	2300      	movs	r3, #0
 80164da:	2200      	movs	r2, #0
 80164dc:	2100      	movs	r1, #0
 80164de:	6938      	ldr	r0, [r7, #16]
 80164e0:	f000 fca6 	bl	8016e30 <xQueueGenericSend>
 80164e4:	4603      	mov	r3, r0
 80164e6:	2b01      	cmp	r3, #1
 80164e8:	d002      	beq.n	80164f0 <osSemaphoreRelease+0x78>
 80164ea:	f06f 0302 	mvn.w	r3, #2
 80164ee:	617b      	str	r3, [r7, #20]
 80164f0:	697b      	ldr	r3, [r7, #20]
 80164f2:	4618      	mov	r0, r3
 80164f4:	3718      	adds	r7, #24
 80164f6:	46bd      	mov	sp, r7
 80164f8:	bd80      	pop	{r7, pc}
 80164fa:	bf00      	nop
 80164fc:	e000ed04 	.word	0xe000ed04

08016500 <osSemaphoreGetCount>:
 8016500:	b580      	push	{r7, lr}
 8016502:	b086      	sub	sp, #24
 8016504:	af00      	add	r7, sp, #0
 8016506:	6078      	str	r0, [r7, #4]
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	613b      	str	r3, [r7, #16]
 801650c:	693b      	ldr	r3, [r7, #16]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d102      	bne.n	8016518 <osSemaphoreGetCount+0x18>
 8016512:	2300      	movs	r3, #0
 8016514:	617b      	str	r3, [r7, #20]
 8016516:	e00e      	b.n	8016536 <osSemaphoreGetCount+0x36>
 8016518:	f3ef 8305 	mrs	r3, IPSR
 801651c:	60fb      	str	r3, [r7, #12]
 801651e:	68fb      	ldr	r3, [r7, #12]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d004      	beq.n	801652e <osSemaphoreGetCount+0x2e>
 8016524:	6938      	ldr	r0, [r7, #16]
 8016526:	f001 f933 	bl	8017790 <uxQueueMessagesWaitingFromISR>
 801652a:	6178      	str	r0, [r7, #20]
 801652c:	e003      	b.n	8016536 <osSemaphoreGetCount+0x36>
 801652e:	6938      	ldr	r0, [r7, #16]
 8016530:	f001 f910 	bl	8017754 <uxQueueMessagesWaiting>
 8016534:	6178      	str	r0, [r7, #20]
 8016536:	697b      	ldr	r3, [r7, #20]
 8016538:	4618      	mov	r0, r3
 801653a:	3718      	adds	r7, #24
 801653c:	46bd      	mov	sp, r7
 801653e:	bd80      	pop	{r7, pc}

08016540 <osMessageQueueNew>:
 8016540:	b580      	push	{r7, lr}
 8016542:	b08a      	sub	sp, #40	; 0x28
 8016544:	af02      	add	r7, sp, #8
 8016546:	60f8      	str	r0, [r7, #12]
 8016548:	60b9      	str	r1, [r7, #8]
 801654a:	607a      	str	r2, [r7, #4]
 801654c:	2300      	movs	r3, #0
 801654e:	61fb      	str	r3, [r7, #28]
 8016550:	f3ef 8305 	mrs	r3, IPSR
 8016554:	613b      	str	r3, [r7, #16]
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d15f      	bne.n	801661c <osMessageQueueNew+0xdc>
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d05c      	beq.n	801661c <osMessageQueueNew+0xdc>
 8016562:	68bb      	ldr	r3, [r7, #8]
 8016564:	2b00      	cmp	r3, #0
 8016566:	d059      	beq.n	801661c <osMessageQueueNew+0xdc>
 8016568:	f04f 33ff 	mov.w	r3, #4294967295
 801656c:	61bb      	str	r3, [r7, #24]
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d029      	beq.n	80165c8 <osMessageQueueNew+0x88>
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	689b      	ldr	r3, [r3, #8]
 8016578:	2b00      	cmp	r3, #0
 801657a:	d012      	beq.n	80165a2 <osMessageQueueNew+0x62>
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	68db      	ldr	r3, [r3, #12]
 8016580:	2b4f      	cmp	r3, #79	; 0x4f
 8016582:	d90e      	bls.n	80165a2 <osMessageQueueNew+0x62>
 8016584:	687b      	ldr	r3, [r7, #4]
 8016586:	691b      	ldr	r3, [r3, #16]
 8016588:	2b00      	cmp	r3, #0
 801658a:	d00a      	beq.n	80165a2 <osMessageQueueNew+0x62>
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	695a      	ldr	r2, [r3, #20]
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	68b9      	ldr	r1, [r7, #8]
 8016594:	fb01 f303 	mul.w	r3, r1, r3
 8016598:	429a      	cmp	r2, r3
 801659a:	d302      	bcc.n	80165a2 <osMessageQueueNew+0x62>
 801659c:	2301      	movs	r3, #1
 801659e:	61bb      	str	r3, [r7, #24]
 80165a0:	e014      	b.n	80165cc <osMessageQueueNew+0x8c>
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	689b      	ldr	r3, [r3, #8]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d110      	bne.n	80165cc <osMessageQueueNew+0x8c>
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d10c      	bne.n	80165cc <osMessageQueueNew+0x8c>
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	691b      	ldr	r3, [r3, #16]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d108      	bne.n	80165cc <osMessageQueueNew+0x8c>
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	695b      	ldr	r3, [r3, #20]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d104      	bne.n	80165cc <osMessageQueueNew+0x8c>
 80165c2:	2300      	movs	r3, #0
 80165c4:	61bb      	str	r3, [r7, #24]
 80165c6:	e001      	b.n	80165cc <osMessageQueueNew+0x8c>
 80165c8:	2300      	movs	r3, #0
 80165ca:	61bb      	str	r3, [r7, #24]
 80165cc:	69bb      	ldr	r3, [r7, #24]
 80165ce:	2b01      	cmp	r3, #1
 80165d0:	d10b      	bne.n	80165ea <osMessageQueueNew+0xaa>
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	691a      	ldr	r2, [r3, #16]
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	689b      	ldr	r3, [r3, #8]
 80165da:	2100      	movs	r1, #0
 80165dc:	9100      	str	r1, [sp, #0]
 80165de:	68b9      	ldr	r1, [r7, #8]
 80165e0:	68f8      	ldr	r0, [r7, #12]
 80165e2:	f000 fa2f 	bl	8016a44 <xQueueGenericCreateStatic>
 80165e6:	61f8      	str	r0, [r7, #28]
 80165e8:	e008      	b.n	80165fc <osMessageQueueNew+0xbc>
 80165ea:	69bb      	ldr	r3, [r7, #24]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d105      	bne.n	80165fc <osMessageQueueNew+0xbc>
 80165f0:	2200      	movs	r2, #0
 80165f2:	68b9      	ldr	r1, [r7, #8]
 80165f4:	68f8      	ldr	r0, [r7, #12]
 80165f6:	f000 fa9d 	bl	8016b34 <xQueueGenericCreate>
 80165fa:	61f8      	str	r0, [r7, #28]
 80165fc:	69fb      	ldr	r3, [r7, #28]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d00c      	beq.n	801661c <osMessageQueueNew+0xdc>
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d003      	beq.n	8016610 <osMessageQueueNew+0xd0>
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	617b      	str	r3, [r7, #20]
 801660e:	e001      	b.n	8016614 <osMessageQueueNew+0xd4>
 8016610:	2300      	movs	r3, #0
 8016612:	617b      	str	r3, [r7, #20]
 8016614:	6979      	ldr	r1, [r7, #20]
 8016616:	69f8      	ldr	r0, [r7, #28]
 8016618:	f001 fa24 	bl	8017a64 <vQueueAddToRegistry>
 801661c:	69fb      	ldr	r3, [r7, #28]
 801661e:	4618      	mov	r0, r3
 8016620:	3720      	adds	r7, #32
 8016622:	46bd      	mov	sp, r7
 8016624:	bd80      	pop	{r7, pc}
	...

08016628 <osMessageQueuePut>:
 8016628:	b580      	push	{r7, lr}
 801662a:	b088      	sub	sp, #32
 801662c:	af00      	add	r7, sp, #0
 801662e:	60f8      	str	r0, [r7, #12]
 8016630:	60b9      	str	r1, [r7, #8]
 8016632:	603b      	str	r3, [r7, #0]
 8016634:	4613      	mov	r3, r2
 8016636:	71fb      	strb	r3, [r7, #7]
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	61bb      	str	r3, [r7, #24]
 801663c:	2300      	movs	r3, #0
 801663e:	61fb      	str	r3, [r7, #28]
 8016640:	f3ef 8305 	mrs	r3, IPSR
 8016644:	617b      	str	r3, [r7, #20]
 8016646:	697b      	ldr	r3, [r7, #20]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d028      	beq.n	801669e <osMessageQueuePut+0x76>
 801664c:	69bb      	ldr	r3, [r7, #24]
 801664e:	2b00      	cmp	r3, #0
 8016650:	d005      	beq.n	801665e <osMessageQueuePut+0x36>
 8016652:	68bb      	ldr	r3, [r7, #8]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d002      	beq.n	801665e <osMessageQueuePut+0x36>
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d003      	beq.n	8016666 <osMessageQueuePut+0x3e>
 801665e:	f06f 0303 	mvn.w	r3, #3
 8016662:	61fb      	str	r3, [r7, #28]
 8016664:	e038      	b.n	80166d8 <osMessageQueuePut+0xb0>
 8016666:	2300      	movs	r3, #0
 8016668:	613b      	str	r3, [r7, #16]
 801666a:	f107 0210 	add.w	r2, r7, #16
 801666e:	2300      	movs	r3, #0
 8016670:	68b9      	ldr	r1, [r7, #8]
 8016672:	69b8      	ldr	r0, [r7, #24]
 8016674:	f000 fcda 	bl	801702c <xQueueGenericSendFromISR>
 8016678:	4603      	mov	r3, r0
 801667a:	2b01      	cmp	r3, #1
 801667c:	d003      	beq.n	8016686 <osMessageQueuePut+0x5e>
 801667e:	f06f 0302 	mvn.w	r3, #2
 8016682:	61fb      	str	r3, [r7, #28]
 8016684:	e028      	b.n	80166d8 <osMessageQueuePut+0xb0>
 8016686:	693b      	ldr	r3, [r7, #16]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d025      	beq.n	80166d8 <osMessageQueuePut+0xb0>
 801668c:	4b15      	ldr	r3, [pc, #84]	; (80166e4 <osMessageQueuePut+0xbc>)
 801668e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016692:	601a      	str	r2, [r3, #0]
 8016694:	f3bf 8f4f 	dsb	sy
 8016698:	f3bf 8f6f 	isb	sy
 801669c:	e01c      	b.n	80166d8 <osMessageQueuePut+0xb0>
 801669e:	69bb      	ldr	r3, [r7, #24]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d002      	beq.n	80166aa <osMessageQueuePut+0x82>
 80166a4:	68bb      	ldr	r3, [r7, #8]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d103      	bne.n	80166b2 <osMessageQueuePut+0x8a>
 80166aa:	f06f 0303 	mvn.w	r3, #3
 80166ae:	61fb      	str	r3, [r7, #28]
 80166b0:	e012      	b.n	80166d8 <osMessageQueuePut+0xb0>
 80166b2:	2300      	movs	r3, #0
 80166b4:	683a      	ldr	r2, [r7, #0]
 80166b6:	68b9      	ldr	r1, [r7, #8]
 80166b8:	69b8      	ldr	r0, [r7, #24]
 80166ba:	f000 fbb9 	bl	8016e30 <xQueueGenericSend>
 80166be:	4603      	mov	r3, r0
 80166c0:	2b01      	cmp	r3, #1
 80166c2:	d009      	beq.n	80166d8 <osMessageQueuePut+0xb0>
 80166c4:	683b      	ldr	r3, [r7, #0]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d003      	beq.n	80166d2 <osMessageQueuePut+0xaa>
 80166ca:	f06f 0301 	mvn.w	r3, #1
 80166ce:	61fb      	str	r3, [r7, #28]
 80166d0:	e002      	b.n	80166d8 <osMessageQueuePut+0xb0>
 80166d2:	f06f 0302 	mvn.w	r3, #2
 80166d6:	61fb      	str	r3, [r7, #28]
 80166d8:	69fb      	ldr	r3, [r7, #28]
 80166da:	4618      	mov	r0, r3
 80166dc:	3720      	adds	r7, #32
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}
 80166e2:	bf00      	nop
 80166e4:	e000ed04 	.word	0xe000ed04

080166e8 <osMessageQueueGet>:
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b088      	sub	sp, #32
 80166ec:	af00      	add	r7, sp, #0
 80166ee:	60f8      	str	r0, [r7, #12]
 80166f0:	60b9      	str	r1, [r7, #8]
 80166f2:	607a      	str	r2, [r7, #4]
 80166f4:	603b      	str	r3, [r7, #0]
 80166f6:	68fb      	ldr	r3, [r7, #12]
 80166f8:	61bb      	str	r3, [r7, #24]
 80166fa:	2300      	movs	r3, #0
 80166fc:	61fb      	str	r3, [r7, #28]
 80166fe:	f3ef 8305 	mrs	r3, IPSR
 8016702:	617b      	str	r3, [r7, #20]
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	2b00      	cmp	r3, #0
 8016708:	d028      	beq.n	801675c <osMessageQueueGet+0x74>
 801670a:	69bb      	ldr	r3, [r7, #24]
 801670c:	2b00      	cmp	r3, #0
 801670e:	d005      	beq.n	801671c <osMessageQueueGet+0x34>
 8016710:	68bb      	ldr	r3, [r7, #8]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d002      	beq.n	801671c <osMessageQueueGet+0x34>
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	2b00      	cmp	r3, #0
 801671a:	d003      	beq.n	8016724 <osMessageQueueGet+0x3c>
 801671c:	f06f 0303 	mvn.w	r3, #3
 8016720:	61fb      	str	r3, [r7, #28]
 8016722:	e037      	b.n	8016794 <osMessageQueueGet+0xac>
 8016724:	2300      	movs	r3, #0
 8016726:	613b      	str	r3, [r7, #16]
 8016728:	f107 0310 	add.w	r3, r7, #16
 801672c:	461a      	mov	r2, r3
 801672e:	68b9      	ldr	r1, [r7, #8]
 8016730:	69b8      	ldr	r0, [r7, #24]
 8016732:	f000 ff8f 	bl	8017654 <xQueueReceiveFromISR>
 8016736:	4603      	mov	r3, r0
 8016738:	2b01      	cmp	r3, #1
 801673a:	d003      	beq.n	8016744 <osMessageQueueGet+0x5c>
 801673c:	f06f 0302 	mvn.w	r3, #2
 8016740:	61fb      	str	r3, [r7, #28]
 8016742:	e027      	b.n	8016794 <osMessageQueueGet+0xac>
 8016744:	693b      	ldr	r3, [r7, #16]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d024      	beq.n	8016794 <osMessageQueueGet+0xac>
 801674a:	4b15      	ldr	r3, [pc, #84]	; (80167a0 <osMessageQueueGet+0xb8>)
 801674c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016750:	601a      	str	r2, [r3, #0]
 8016752:	f3bf 8f4f 	dsb	sy
 8016756:	f3bf 8f6f 	isb	sy
 801675a:	e01b      	b.n	8016794 <osMessageQueueGet+0xac>
 801675c:	69bb      	ldr	r3, [r7, #24]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d002      	beq.n	8016768 <osMessageQueueGet+0x80>
 8016762:	68bb      	ldr	r3, [r7, #8]
 8016764:	2b00      	cmp	r3, #0
 8016766:	d103      	bne.n	8016770 <osMessageQueueGet+0x88>
 8016768:	f06f 0303 	mvn.w	r3, #3
 801676c:	61fb      	str	r3, [r7, #28]
 801676e:	e011      	b.n	8016794 <osMessageQueueGet+0xac>
 8016770:	683a      	ldr	r2, [r7, #0]
 8016772:	68b9      	ldr	r1, [r7, #8]
 8016774:	69b8      	ldr	r0, [r7, #24]
 8016776:	f000 fd81 	bl	801727c <xQueueReceive>
 801677a:	4603      	mov	r3, r0
 801677c:	2b01      	cmp	r3, #1
 801677e:	d009      	beq.n	8016794 <osMessageQueueGet+0xac>
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d003      	beq.n	801678e <osMessageQueueGet+0xa6>
 8016786:	f06f 0301 	mvn.w	r3, #1
 801678a:	61fb      	str	r3, [r7, #28]
 801678c:	e002      	b.n	8016794 <osMessageQueueGet+0xac>
 801678e:	f06f 0302 	mvn.w	r3, #2
 8016792:	61fb      	str	r3, [r7, #28]
 8016794:	69fb      	ldr	r3, [r7, #28]
 8016796:	4618      	mov	r0, r3
 8016798:	3720      	adds	r7, #32
 801679a:	46bd      	mov	sp, r7
 801679c:	bd80      	pop	{r7, pc}
 801679e:	bf00      	nop
 80167a0:	e000ed04 	.word	0xe000ed04

080167a4 <vApplicationGetIdleTaskMemory>:
 80167a4:	b480      	push	{r7}
 80167a6:	b085      	sub	sp, #20
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	60f8      	str	r0, [r7, #12]
 80167ac:	60b9      	str	r1, [r7, #8]
 80167ae:	607a      	str	r2, [r7, #4]
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	4a07      	ldr	r2, [pc, #28]	; (80167d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80167b4:	601a      	str	r2, [r3, #0]
 80167b6:	68bb      	ldr	r3, [r7, #8]
 80167b8:	4a06      	ldr	r2, [pc, #24]	; (80167d4 <vApplicationGetIdleTaskMemory+0x30>)
 80167ba:	601a      	str	r2, [r3, #0]
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2280      	movs	r2, #128	; 0x80
 80167c0:	601a      	str	r2, [r3, #0]
 80167c2:	bf00      	nop
 80167c4:	3714      	adds	r7, #20
 80167c6:	46bd      	mov	sp, r7
 80167c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167cc:	4770      	bx	lr
 80167ce:	bf00      	nop
 80167d0:	2000167c 	.word	0x2000167c
 80167d4:	2000173c 	.word	0x2000173c

080167d8 <vApplicationGetTimerTaskMemory>:
 80167d8:	b480      	push	{r7}
 80167da:	b085      	sub	sp, #20
 80167dc:	af00      	add	r7, sp, #0
 80167de:	60f8      	str	r0, [r7, #12]
 80167e0:	60b9      	str	r1, [r7, #8]
 80167e2:	607a      	str	r2, [r7, #4]
 80167e4:	68fb      	ldr	r3, [r7, #12]
 80167e6:	4a07      	ldr	r2, [pc, #28]	; (8016804 <vApplicationGetTimerTaskMemory+0x2c>)
 80167e8:	601a      	str	r2, [r3, #0]
 80167ea:	68bb      	ldr	r3, [r7, #8]
 80167ec:	4a06      	ldr	r2, [pc, #24]	; (8016808 <vApplicationGetTimerTaskMemory+0x30>)
 80167ee:	601a      	str	r2, [r3, #0]
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80167f6:	601a      	str	r2, [r3, #0]
 80167f8:	bf00      	nop
 80167fa:	3714      	adds	r7, #20
 80167fc:	46bd      	mov	sp, r7
 80167fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016802:	4770      	bx	lr
 8016804:	2000193c 	.word	0x2000193c
 8016808:	200019fc 	.word	0x200019fc

0801680c <vListInitialise>:
 801680c:	b480      	push	{r7}
 801680e:	b083      	sub	sp, #12
 8016810:	af00      	add	r7, sp, #0
 8016812:	6078      	str	r0, [r7, #4]
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	f103 0208 	add.w	r2, r3, #8
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	605a      	str	r2, [r3, #4]
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	f04f 32ff 	mov.w	r2, #4294967295
 8016824:	609a      	str	r2, [r3, #8]
 8016826:	687b      	ldr	r3, [r7, #4]
 8016828:	f103 0208 	add.w	r2, r3, #8
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	60da      	str	r2, [r3, #12]
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	f103 0208 	add.w	r2, r3, #8
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	611a      	str	r2, [r3, #16]
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2200      	movs	r2, #0
 801683e:	601a      	str	r2, [r3, #0]
 8016840:	bf00      	nop
 8016842:	370c      	adds	r7, #12
 8016844:	46bd      	mov	sp, r7
 8016846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801684a:	4770      	bx	lr

0801684c <vListInitialiseItem>:
 801684c:	b480      	push	{r7}
 801684e:	b083      	sub	sp, #12
 8016850:	af00      	add	r7, sp, #0
 8016852:	6078      	str	r0, [r7, #4]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	2200      	movs	r2, #0
 8016858:	611a      	str	r2, [r3, #16]
 801685a:	bf00      	nop
 801685c:	370c      	adds	r7, #12
 801685e:	46bd      	mov	sp, r7
 8016860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016864:	4770      	bx	lr

08016866 <vListInsertEnd>:
 8016866:	b480      	push	{r7}
 8016868:	b085      	sub	sp, #20
 801686a:	af00      	add	r7, sp, #0
 801686c:	6078      	str	r0, [r7, #4]
 801686e:	6039      	str	r1, [r7, #0]
 8016870:	687b      	ldr	r3, [r7, #4]
 8016872:	685b      	ldr	r3, [r3, #4]
 8016874:	60fb      	str	r3, [r7, #12]
 8016876:	683b      	ldr	r3, [r7, #0]
 8016878:	68fa      	ldr	r2, [r7, #12]
 801687a:	605a      	str	r2, [r3, #4]
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	689a      	ldr	r2, [r3, #8]
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	609a      	str	r2, [r3, #8]
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	689b      	ldr	r3, [r3, #8]
 8016888:	683a      	ldr	r2, [r7, #0]
 801688a:	605a      	str	r2, [r3, #4]
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	683a      	ldr	r2, [r7, #0]
 8016890:	609a      	str	r2, [r3, #8]
 8016892:	683b      	ldr	r3, [r7, #0]
 8016894:	687a      	ldr	r2, [r7, #4]
 8016896:	611a      	str	r2, [r3, #16]
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	1c5a      	adds	r2, r3, #1
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	601a      	str	r2, [r3, #0]
 80168a2:	bf00      	nop
 80168a4:	3714      	adds	r7, #20
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr

080168ae <vListInsert>:
 80168ae:	b480      	push	{r7}
 80168b0:	b085      	sub	sp, #20
 80168b2:	af00      	add	r7, sp, #0
 80168b4:	6078      	str	r0, [r7, #4]
 80168b6:	6039      	str	r1, [r7, #0]
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	60bb      	str	r3, [r7, #8]
 80168be:	68bb      	ldr	r3, [r7, #8]
 80168c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168c4:	d103      	bne.n	80168ce <vListInsert+0x20>
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	691b      	ldr	r3, [r3, #16]
 80168ca:	60fb      	str	r3, [r7, #12]
 80168cc:	e00c      	b.n	80168e8 <vListInsert+0x3a>
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	3308      	adds	r3, #8
 80168d2:	60fb      	str	r3, [r7, #12]
 80168d4:	e002      	b.n	80168dc <vListInsert+0x2e>
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	685b      	ldr	r3, [r3, #4]
 80168da:	60fb      	str	r3, [r7, #12]
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	685b      	ldr	r3, [r3, #4]
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	68ba      	ldr	r2, [r7, #8]
 80168e4:	429a      	cmp	r2, r3
 80168e6:	d2f6      	bcs.n	80168d6 <vListInsert+0x28>
 80168e8:	68fb      	ldr	r3, [r7, #12]
 80168ea:	685a      	ldr	r2, [r3, #4]
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	605a      	str	r2, [r3, #4]
 80168f0:	683b      	ldr	r3, [r7, #0]
 80168f2:	685b      	ldr	r3, [r3, #4]
 80168f4:	683a      	ldr	r2, [r7, #0]
 80168f6:	609a      	str	r2, [r3, #8]
 80168f8:	683b      	ldr	r3, [r7, #0]
 80168fa:	68fa      	ldr	r2, [r7, #12]
 80168fc:	609a      	str	r2, [r3, #8]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	683a      	ldr	r2, [r7, #0]
 8016902:	605a      	str	r2, [r3, #4]
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	687a      	ldr	r2, [r7, #4]
 8016908:	611a      	str	r2, [r3, #16]
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	1c5a      	adds	r2, r3, #1
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	601a      	str	r2, [r3, #0]
 8016914:	bf00      	nop
 8016916:	3714      	adds	r7, #20
 8016918:	46bd      	mov	sp, r7
 801691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801691e:	4770      	bx	lr

08016920 <uxListRemove>:
 8016920:	b480      	push	{r7}
 8016922:	b085      	sub	sp, #20
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	691b      	ldr	r3, [r3, #16]
 801692c:	60fb      	str	r3, [r7, #12]
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	685b      	ldr	r3, [r3, #4]
 8016932:	687a      	ldr	r2, [r7, #4]
 8016934:	6892      	ldr	r2, [r2, #8]
 8016936:	609a      	str	r2, [r3, #8]
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	689b      	ldr	r3, [r3, #8]
 801693c:	687a      	ldr	r2, [r7, #4]
 801693e:	6852      	ldr	r2, [r2, #4]
 8016940:	605a      	str	r2, [r3, #4]
 8016942:	68fb      	ldr	r3, [r7, #12]
 8016944:	685b      	ldr	r3, [r3, #4]
 8016946:	687a      	ldr	r2, [r7, #4]
 8016948:	429a      	cmp	r2, r3
 801694a:	d103      	bne.n	8016954 <uxListRemove+0x34>
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	689a      	ldr	r2, [r3, #8]
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	605a      	str	r2, [r3, #4]
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2200      	movs	r2, #0
 8016958:	611a      	str	r2, [r3, #16]
 801695a:	68fb      	ldr	r3, [r7, #12]
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	1e5a      	subs	r2, r3, #1
 8016960:	68fb      	ldr	r3, [r7, #12]
 8016962:	601a      	str	r2, [r3, #0]
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	681b      	ldr	r3, [r3, #0]
 8016968:	4618      	mov	r0, r3
 801696a:	3714      	adds	r7, #20
 801696c:	46bd      	mov	sp, r7
 801696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016972:	4770      	bx	lr

08016974 <xQueueGenericReset>:
 8016974:	b580      	push	{r7, lr}
 8016976:	b084      	sub	sp, #16
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
 801697c:	6039      	str	r1, [r7, #0]
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	60fb      	str	r3, [r7, #12]
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d10a      	bne.n	801699e <xQueueGenericReset+0x2a>
 8016988:	f04f 0350 	mov.w	r3, #80	; 0x50
 801698c:	f383 8811 	msr	BASEPRI, r3
 8016990:	f3bf 8f6f 	isb	sy
 8016994:	f3bf 8f4f 	dsb	sy
 8016998:	60bb      	str	r3, [r7, #8]
 801699a:	bf00      	nop
 801699c:	e7fe      	b.n	801699c <xQueueGenericReset+0x28>
 801699e:	f003 fab9 	bl	8019f14 <vPortEnterCritical>
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	681a      	ldr	r2, [r3, #0]
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169aa:	68f9      	ldr	r1, [r7, #12]
 80169ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80169ae:	fb01 f303 	mul.w	r3, r1, r3
 80169b2:	441a      	add	r2, r3
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	609a      	str	r2, [r3, #8]
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	2200      	movs	r2, #0
 80169bc:	639a      	str	r2, [r3, #56]	; 0x38
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	681a      	ldr	r2, [r3, #0]
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	605a      	str	r2, [r3, #4]
 80169c6:	68fb      	ldr	r3, [r7, #12]
 80169c8:	681a      	ldr	r2, [r3, #0]
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169ce:	3b01      	subs	r3, #1
 80169d0:	68f9      	ldr	r1, [r7, #12]
 80169d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80169d4:	fb01 f303 	mul.w	r3, r1, r3
 80169d8:	441a      	add	r2, r3
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	60da      	str	r2, [r3, #12]
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	22ff      	movs	r2, #255	; 0xff
 80169e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	22ff      	movs	r2, #255	; 0xff
 80169ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80169ee:	683b      	ldr	r3, [r7, #0]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d114      	bne.n	8016a1e <xQueueGenericReset+0xaa>
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	691b      	ldr	r3, [r3, #16]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d01a      	beq.n	8016a32 <xQueueGenericReset+0xbe>
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	3310      	adds	r3, #16
 8016a00:	4618      	mov	r0, r3
 8016a02:	f002 f8f5 	bl	8018bf0 <xTaskRemoveFromEventList>
 8016a06:	4603      	mov	r3, r0
 8016a08:	2b00      	cmp	r3, #0
 8016a0a:	d012      	beq.n	8016a32 <xQueueGenericReset+0xbe>
 8016a0c:	4b0c      	ldr	r3, [pc, #48]	; (8016a40 <xQueueGenericReset+0xcc>)
 8016a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016a12:	601a      	str	r2, [r3, #0]
 8016a14:	f3bf 8f4f 	dsb	sy
 8016a18:	f3bf 8f6f 	isb	sy
 8016a1c:	e009      	b.n	8016a32 <xQueueGenericReset+0xbe>
 8016a1e:	68fb      	ldr	r3, [r7, #12]
 8016a20:	3310      	adds	r3, #16
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7ff fef2 	bl	801680c <vListInitialise>
 8016a28:	68fb      	ldr	r3, [r7, #12]
 8016a2a:	3324      	adds	r3, #36	; 0x24
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	f7ff feed 	bl	801680c <vListInitialise>
 8016a32:	f003 fa9f 	bl	8019f74 <vPortExitCritical>
 8016a36:	2301      	movs	r3, #1
 8016a38:	4618      	mov	r0, r3
 8016a3a:	3710      	adds	r7, #16
 8016a3c:	46bd      	mov	sp, r7
 8016a3e:	bd80      	pop	{r7, pc}
 8016a40:	e000ed04 	.word	0xe000ed04

08016a44 <xQueueGenericCreateStatic>:
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b08e      	sub	sp, #56	; 0x38
 8016a48:	af02      	add	r7, sp, #8
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	60b9      	str	r1, [r7, #8]
 8016a4e:	607a      	str	r2, [r7, #4]
 8016a50:	603b      	str	r3, [r7, #0]
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d10a      	bne.n	8016a6e <xQueueGenericCreateStatic+0x2a>
 8016a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a5c:	f383 8811 	msr	BASEPRI, r3
 8016a60:	f3bf 8f6f 	isb	sy
 8016a64:	f3bf 8f4f 	dsb	sy
 8016a68:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a6a:	bf00      	nop
 8016a6c:	e7fe      	b.n	8016a6c <xQueueGenericCreateStatic+0x28>
 8016a6e:	683b      	ldr	r3, [r7, #0]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d10a      	bne.n	8016a8a <xQueueGenericCreateStatic+0x46>
 8016a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a78:	f383 8811 	msr	BASEPRI, r3
 8016a7c:	f3bf 8f6f 	isb	sy
 8016a80:	f3bf 8f4f 	dsb	sy
 8016a84:	627b      	str	r3, [r7, #36]	; 0x24
 8016a86:	bf00      	nop
 8016a88:	e7fe      	b.n	8016a88 <xQueueGenericCreateStatic+0x44>
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d002      	beq.n	8016a96 <xQueueGenericCreateStatic+0x52>
 8016a90:	68bb      	ldr	r3, [r7, #8]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d001      	beq.n	8016a9a <xQueueGenericCreateStatic+0x56>
 8016a96:	2301      	movs	r3, #1
 8016a98:	e000      	b.n	8016a9c <xQueueGenericCreateStatic+0x58>
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d10a      	bne.n	8016ab6 <xQueueGenericCreateStatic+0x72>
 8016aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa4:	f383 8811 	msr	BASEPRI, r3
 8016aa8:	f3bf 8f6f 	isb	sy
 8016aac:	f3bf 8f4f 	dsb	sy
 8016ab0:	623b      	str	r3, [r7, #32]
 8016ab2:	bf00      	nop
 8016ab4:	e7fe      	b.n	8016ab4 <xQueueGenericCreateStatic+0x70>
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d102      	bne.n	8016ac2 <xQueueGenericCreateStatic+0x7e>
 8016abc:	68bb      	ldr	r3, [r7, #8]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d101      	bne.n	8016ac6 <xQueueGenericCreateStatic+0x82>
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	e000      	b.n	8016ac8 <xQueueGenericCreateStatic+0x84>
 8016ac6:	2300      	movs	r3, #0
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d10a      	bne.n	8016ae2 <xQueueGenericCreateStatic+0x9e>
 8016acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ad0:	f383 8811 	msr	BASEPRI, r3
 8016ad4:	f3bf 8f6f 	isb	sy
 8016ad8:	f3bf 8f4f 	dsb	sy
 8016adc:	61fb      	str	r3, [r7, #28]
 8016ade:	bf00      	nop
 8016ae0:	e7fe      	b.n	8016ae0 <xQueueGenericCreateStatic+0x9c>
 8016ae2:	2350      	movs	r3, #80	; 0x50
 8016ae4:	617b      	str	r3, [r7, #20]
 8016ae6:	697b      	ldr	r3, [r7, #20]
 8016ae8:	2b50      	cmp	r3, #80	; 0x50
 8016aea:	d00a      	beq.n	8016b02 <xQueueGenericCreateStatic+0xbe>
 8016aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016af0:	f383 8811 	msr	BASEPRI, r3
 8016af4:	f3bf 8f6f 	isb	sy
 8016af8:	f3bf 8f4f 	dsb	sy
 8016afc:	61bb      	str	r3, [r7, #24]
 8016afe:	bf00      	nop
 8016b00:	e7fe      	b.n	8016b00 <xQueueGenericCreateStatic+0xbc>
 8016b02:	697b      	ldr	r3, [r7, #20]
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d00d      	beq.n	8016b2a <xQueueGenericCreateStatic+0xe6>
 8016b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b10:	2201      	movs	r2, #1
 8016b12:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8016b16:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b1c:	9300      	str	r3, [sp, #0]
 8016b1e:	4613      	mov	r3, r2
 8016b20:	687a      	ldr	r2, [r7, #4]
 8016b22:	68b9      	ldr	r1, [r7, #8]
 8016b24:	68f8      	ldr	r0, [r7, #12]
 8016b26:	f000 f83f 	bl	8016ba8 <prvInitialiseNewQueue>
 8016b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	3730      	adds	r7, #48	; 0x30
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd80      	pop	{r7, pc}

08016b34 <xQueueGenericCreate>:
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b08a      	sub	sp, #40	; 0x28
 8016b38:	af02      	add	r7, sp, #8
 8016b3a:	60f8      	str	r0, [r7, #12]
 8016b3c:	60b9      	str	r1, [r7, #8]
 8016b3e:	4613      	mov	r3, r2
 8016b40:	71fb      	strb	r3, [r7, #7]
 8016b42:	68fb      	ldr	r3, [r7, #12]
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d10a      	bne.n	8016b5e <xQueueGenericCreate+0x2a>
 8016b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b4c:	f383 8811 	msr	BASEPRI, r3
 8016b50:	f3bf 8f6f 	isb	sy
 8016b54:	f3bf 8f4f 	dsb	sy
 8016b58:	613b      	str	r3, [r7, #16]
 8016b5a:	bf00      	nop
 8016b5c:	e7fe      	b.n	8016b5c <xQueueGenericCreate+0x28>
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	68ba      	ldr	r2, [r7, #8]
 8016b62:	fb02 f303 	mul.w	r3, r2, r3
 8016b66:	61fb      	str	r3, [r7, #28]
 8016b68:	69fb      	ldr	r3, [r7, #28]
 8016b6a:	3350      	adds	r3, #80	; 0x50
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	f003 faf3 	bl	801a158 <pvPortMalloc>
 8016b72:	61b8      	str	r0, [r7, #24]
 8016b74:	69bb      	ldr	r3, [r7, #24]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d011      	beq.n	8016b9e <xQueueGenericCreate+0x6a>
 8016b7a:	69bb      	ldr	r3, [r7, #24]
 8016b7c:	617b      	str	r3, [r7, #20]
 8016b7e:	697b      	ldr	r3, [r7, #20]
 8016b80:	3350      	adds	r3, #80	; 0x50
 8016b82:	617b      	str	r3, [r7, #20]
 8016b84:	69bb      	ldr	r3, [r7, #24]
 8016b86:	2200      	movs	r2, #0
 8016b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8016b8c:	79fa      	ldrb	r2, [r7, #7]
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	9300      	str	r3, [sp, #0]
 8016b92:	4613      	mov	r3, r2
 8016b94:	697a      	ldr	r2, [r7, #20]
 8016b96:	68b9      	ldr	r1, [r7, #8]
 8016b98:	68f8      	ldr	r0, [r7, #12]
 8016b9a:	f000 f805 	bl	8016ba8 <prvInitialiseNewQueue>
 8016b9e:	69bb      	ldr	r3, [r7, #24]
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	3720      	adds	r7, #32
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}

08016ba8 <prvInitialiseNewQueue>:
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b084      	sub	sp, #16
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	60f8      	str	r0, [r7, #12]
 8016bb0:	60b9      	str	r1, [r7, #8]
 8016bb2:	607a      	str	r2, [r7, #4]
 8016bb4:	70fb      	strb	r3, [r7, #3]
 8016bb6:	68bb      	ldr	r3, [r7, #8]
 8016bb8:	2b00      	cmp	r3, #0
 8016bba:	d103      	bne.n	8016bc4 <prvInitialiseNewQueue+0x1c>
 8016bbc:	69bb      	ldr	r3, [r7, #24]
 8016bbe:	69ba      	ldr	r2, [r7, #24]
 8016bc0:	601a      	str	r2, [r3, #0]
 8016bc2:	e002      	b.n	8016bca <prvInitialiseNewQueue+0x22>
 8016bc4:	69bb      	ldr	r3, [r7, #24]
 8016bc6:	687a      	ldr	r2, [r7, #4]
 8016bc8:	601a      	str	r2, [r3, #0]
 8016bca:	69bb      	ldr	r3, [r7, #24]
 8016bcc:	68fa      	ldr	r2, [r7, #12]
 8016bce:	63da      	str	r2, [r3, #60]	; 0x3c
 8016bd0:	69bb      	ldr	r3, [r7, #24]
 8016bd2:	68ba      	ldr	r2, [r7, #8]
 8016bd4:	641a      	str	r2, [r3, #64]	; 0x40
 8016bd6:	2101      	movs	r1, #1
 8016bd8:	69b8      	ldr	r0, [r7, #24]
 8016bda:	f7ff fecb 	bl	8016974 <xQueueGenericReset>
 8016bde:	69bb      	ldr	r3, [r7, #24]
 8016be0:	78fa      	ldrb	r2, [r7, #3]
 8016be2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8016be6:	bf00      	nop
 8016be8:	3710      	adds	r7, #16
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}

08016bee <prvInitialiseMutex>:
 8016bee:	b580      	push	{r7, lr}
 8016bf0:	b082      	sub	sp, #8
 8016bf2:	af00      	add	r7, sp, #0
 8016bf4:	6078      	str	r0, [r7, #4]
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	2b00      	cmp	r3, #0
 8016bfa:	d00e      	beq.n	8016c1a <prvInitialiseMutex+0x2c>
 8016bfc:	687b      	ldr	r3, [r7, #4]
 8016bfe:	2200      	movs	r2, #0
 8016c00:	609a      	str	r2, [r3, #8]
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	2200      	movs	r2, #0
 8016c06:	601a      	str	r2, [r3, #0]
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	2200      	movs	r2, #0
 8016c0c:	60da      	str	r2, [r3, #12]
 8016c0e:	2300      	movs	r3, #0
 8016c10:	2200      	movs	r2, #0
 8016c12:	2100      	movs	r1, #0
 8016c14:	6878      	ldr	r0, [r7, #4]
 8016c16:	f000 f90b 	bl	8016e30 <xQueueGenericSend>
 8016c1a:	bf00      	nop
 8016c1c:	3708      	adds	r7, #8
 8016c1e:	46bd      	mov	sp, r7
 8016c20:	bd80      	pop	{r7, pc}

08016c22 <xQueueCreateMutex>:
 8016c22:	b580      	push	{r7, lr}
 8016c24:	b086      	sub	sp, #24
 8016c26:	af00      	add	r7, sp, #0
 8016c28:	4603      	mov	r3, r0
 8016c2a:	71fb      	strb	r3, [r7, #7]
 8016c2c:	2301      	movs	r3, #1
 8016c2e:	617b      	str	r3, [r7, #20]
 8016c30:	2300      	movs	r3, #0
 8016c32:	613b      	str	r3, [r7, #16]
 8016c34:	79fb      	ldrb	r3, [r7, #7]
 8016c36:	461a      	mov	r2, r3
 8016c38:	6939      	ldr	r1, [r7, #16]
 8016c3a:	6978      	ldr	r0, [r7, #20]
 8016c3c:	f7ff ff7a 	bl	8016b34 <xQueueGenericCreate>
 8016c40:	60f8      	str	r0, [r7, #12]
 8016c42:	68f8      	ldr	r0, [r7, #12]
 8016c44:	f7ff ffd3 	bl	8016bee <prvInitialiseMutex>
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	3718      	adds	r7, #24
 8016c4e:	46bd      	mov	sp, r7
 8016c50:	bd80      	pop	{r7, pc}

08016c52 <xQueueCreateMutexStatic>:
 8016c52:	b580      	push	{r7, lr}
 8016c54:	b088      	sub	sp, #32
 8016c56:	af02      	add	r7, sp, #8
 8016c58:	4603      	mov	r3, r0
 8016c5a:	6039      	str	r1, [r7, #0]
 8016c5c:	71fb      	strb	r3, [r7, #7]
 8016c5e:	2301      	movs	r3, #1
 8016c60:	617b      	str	r3, [r7, #20]
 8016c62:	2300      	movs	r3, #0
 8016c64:	613b      	str	r3, [r7, #16]
 8016c66:	79fb      	ldrb	r3, [r7, #7]
 8016c68:	9300      	str	r3, [sp, #0]
 8016c6a:	683b      	ldr	r3, [r7, #0]
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	6939      	ldr	r1, [r7, #16]
 8016c70:	6978      	ldr	r0, [r7, #20]
 8016c72:	f7ff fee7 	bl	8016a44 <xQueueGenericCreateStatic>
 8016c76:	60f8      	str	r0, [r7, #12]
 8016c78:	68f8      	ldr	r0, [r7, #12]
 8016c7a:	f7ff ffb8 	bl	8016bee <prvInitialiseMutex>
 8016c7e:	68fb      	ldr	r3, [r7, #12]
 8016c80:	4618      	mov	r0, r3
 8016c82:	3718      	adds	r7, #24
 8016c84:	46bd      	mov	sp, r7
 8016c86:	bd80      	pop	{r7, pc}

08016c88 <xQueueGiveMutexRecursive>:
 8016c88:	b590      	push	{r4, r7, lr}
 8016c8a:	b087      	sub	sp, #28
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	613b      	str	r3, [r7, #16]
 8016c94:	693b      	ldr	r3, [r7, #16]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d10a      	bne.n	8016cb0 <xQueueGiveMutexRecursive+0x28>
 8016c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c9e:	f383 8811 	msr	BASEPRI, r3
 8016ca2:	f3bf 8f6f 	isb	sy
 8016ca6:	f3bf 8f4f 	dsb	sy
 8016caa:	60fb      	str	r3, [r7, #12]
 8016cac:	bf00      	nop
 8016cae:	e7fe      	b.n	8016cae <xQueueGiveMutexRecursive+0x26>
 8016cb0:	693b      	ldr	r3, [r7, #16]
 8016cb2:	689c      	ldr	r4, [r3, #8]
 8016cb4:	f002 f984 	bl	8018fc0 <xTaskGetCurrentTaskHandle>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	429c      	cmp	r4, r3
 8016cbc:	d111      	bne.n	8016ce2 <xQueueGiveMutexRecursive+0x5a>
 8016cbe:	693b      	ldr	r3, [r7, #16]
 8016cc0:	68db      	ldr	r3, [r3, #12]
 8016cc2:	1e5a      	subs	r2, r3, #1
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	60da      	str	r2, [r3, #12]
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	68db      	ldr	r3, [r3, #12]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d105      	bne.n	8016cdc <xQueueGiveMutexRecursive+0x54>
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	2100      	movs	r1, #0
 8016cd6:	6938      	ldr	r0, [r7, #16]
 8016cd8:	f000 f8aa 	bl	8016e30 <xQueueGenericSend>
 8016cdc:	2301      	movs	r3, #1
 8016cde:	617b      	str	r3, [r7, #20]
 8016ce0:	e001      	b.n	8016ce6 <xQueueGiveMutexRecursive+0x5e>
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	617b      	str	r3, [r7, #20]
 8016ce6:	697b      	ldr	r3, [r7, #20]
 8016ce8:	4618      	mov	r0, r3
 8016cea:	371c      	adds	r7, #28
 8016cec:	46bd      	mov	sp, r7
 8016cee:	bd90      	pop	{r4, r7, pc}

08016cf0 <xQueueTakeMutexRecursive>:
 8016cf0:	b590      	push	{r4, r7, lr}
 8016cf2:	b087      	sub	sp, #28
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
 8016cf8:	6039      	str	r1, [r7, #0]
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	613b      	str	r3, [r7, #16]
 8016cfe:	693b      	ldr	r3, [r7, #16]
 8016d00:	2b00      	cmp	r3, #0
 8016d02:	d10a      	bne.n	8016d1a <xQueueTakeMutexRecursive+0x2a>
 8016d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d08:	f383 8811 	msr	BASEPRI, r3
 8016d0c:	f3bf 8f6f 	isb	sy
 8016d10:	f3bf 8f4f 	dsb	sy
 8016d14:	60fb      	str	r3, [r7, #12]
 8016d16:	bf00      	nop
 8016d18:	e7fe      	b.n	8016d18 <xQueueTakeMutexRecursive+0x28>
 8016d1a:	693b      	ldr	r3, [r7, #16]
 8016d1c:	689c      	ldr	r4, [r3, #8]
 8016d1e:	f002 f94f 	bl	8018fc0 <xTaskGetCurrentTaskHandle>
 8016d22:	4603      	mov	r3, r0
 8016d24:	429c      	cmp	r4, r3
 8016d26:	d107      	bne.n	8016d38 <xQueueTakeMutexRecursive+0x48>
 8016d28:	693b      	ldr	r3, [r7, #16]
 8016d2a:	68db      	ldr	r3, [r3, #12]
 8016d2c:	1c5a      	adds	r2, r3, #1
 8016d2e:	693b      	ldr	r3, [r7, #16]
 8016d30:	60da      	str	r2, [r3, #12]
 8016d32:	2301      	movs	r3, #1
 8016d34:	617b      	str	r3, [r7, #20]
 8016d36:	e00c      	b.n	8016d52 <xQueueTakeMutexRecursive+0x62>
 8016d38:	6839      	ldr	r1, [r7, #0]
 8016d3a:	6938      	ldr	r0, [r7, #16]
 8016d3c:	f000 fb7e 	bl	801743c <xQueueSemaphoreTake>
 8016d40:	6178      	str	r0, [r7, #20]
 8016d42:	697b      	ldr	r3, [r7, #20]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d004      	beq.n	8016d52 <xQueueTakeMutexRecursive+0x62>
 8016d48:	693b      	ldr	r3, [r7, #16]
 8016d4a:	68db      	ldr	r3, [r3, #12]
 8016d4c:	1c5a      	adds	r2, r3, #1
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	60da      	str	r2, [r3, #12]
 8016d52:	697b      	ldr	r3, [r7, #20]
 8016d54:	4618      	mov	r0, r3
 8016d56:	371c      	adds	r7, #28
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bd90      	pop	{r4, r7, pc}

08016d5c <xQueueCreateCountingSemaphoreStatic>:
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b08a      	sub	sp, #40	; 0x28
 8016d60:	af02      	add	r7, sp, #8
 8016d62:	60f8      	str	r0, [r7, #12]
 8016d64:	60b9      	str	r1, [r7, #8]
 8016d66:	607a      	str	r2, [r7, #4]
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d10a      	bne.n	8016d84 <xQueueCreateCountingSemaphoreStatic+0x28>
 8016d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d72:	f383 8811 	msr	BASEPRI, r3
 8016d76:	f3bf 8f6f 	isb	sy
 8016d7a:	f3bf 8f4f 	dsb	sy
 8016d7e:	61bb      	str	r3, [r7, #24]
 8016d80:	bf00      	nop
 8016d82:	e7fe      	b.n	8016d82 <xQueueCreateCountingSemaphoreStatic+0x26>
 8016d84:	68ba      	ldr	r2, [r7, #8]
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	d90a      	bls.n	8016da2 <xQueueCreateCountingSemaphoreStatic+0x46>
 8016d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d90:	f383 8811 	msr	BASEPRI, r3
 8016d94:	f3bf 8f6f 	isb	sy
 8016d98:	f3bf 8f4f 	dsb	sy
 8016d9c:	617b      	str	r3, [r7, #20]
 8016d9e:	bf00      	nop
 8016da0:	e7fe      	b.n	8016da0 <xQueueCreateCountingSemaphoreStatic+0x44>
 8016da2:	2302      	movs	r3, #2
 8016da4:	9300      	str	r3, [sp, #0]
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2200      	movs	r2, #0
 8016daa:	2100      	movs	r1, #0
 8016dac:	68f8      	ldr	r0, [r7, #12]
 8016dae:	f7ff fe49 	bl	8016a44 <xQueueGenericCreateStatic>
 8016db2:	61f8      	str	r0, [r7, #28]
 8016db4:	69fb      	ldr	r3, [r7, #28]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d002      	beq.n	8016dc0 <xQueueCreateCountingSemaphoreStatic+0x64>
 8016dba:	69fb      	ldr	r3, [r7, #28]
 8016dbc:	68ba      	ldr	r2, [r7, #8]
 8016dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8016dc0:	69fb      	ldr	r3, [r7, #28]
 8016dc2:	4618      	mov	r0, r3
 8016dc4:	3720      	adds	r7, #32
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}

08016dca <xQueueCreateCountingSemaphore>:
 8016dca:	b580      	push	{r7, lr}
 8016dcc:	b086      	sub	sp, #24
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	6078      	str	r0, [r7, #4]
 8016dd2:	6039      	str	r1, [r7, #0]
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d10a      	bne.n	8016df0 <xQueueCreateCountingSemaphore+0x26>
 8016dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dde:	f383 8811 	msr	BASEPRI, r3
 8016de2:	f3bf 8f6f 	isb	sy
 8016de6:	f3bf 8f4f 	dsb	sy
 8016dea:	613b      	str	r3, [r7, #16]
 8016dec:	bf00      	nop
 8016dee:	e7fe      	b.n	8016dee <xQueueCreateCountingSemaphore+0x24>
 8016df0:	683a      	ldr	r2, [r7, #0]
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	429a      	cmp	r2, r3
 8016df6:	d90a      	bls.n	8016e0e <xQueueCreateCountingSemaphore+0x44>
 8016df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dfc:	f383 8811 	msr	BASEPRI, r3
 8016e00:	f3bf 8f6f 	isb	sy
 8016e04:	f3bf 8f4f 	dsb	sy
 8016e08:	60fb      	str	r3, [r7, #12]
 8016e0a:	bf00      	nop
 8016e0c:	e7fe      	b.n	8016e0c <xQueueCreateCountingSemaphore+0x42>
 8016e0e:	2202      	movs	r2, #2
 8016e10:	2100      	movs	r1, #0
 8016e12:	6878      	ldr	r0, [r7, #4]
 8016e14:	f7ff fe8e 	bl	8016b34 <xQueueGenericCreate>
 8016e18:	6178      	str	r0, [r7, #20]
 8016e1a:	697b      	ldr	r3, [r7, #20]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d002      	beq.n	8016e26 <xQueueCreateCountingSemaphore+0x5c>
 8016e20:	697b      	ldr	r3, [r7, #20]
 8016e22:	683a      	ldr	r2, [r7, #0]
 8016e24:	639a      	str	r2, [r3, #56]	; 0x38
 8016e26:	697b      	ldr	r3, [r7, #20]
 8016e28:	4618      	mov	r0, r3
 8016e2a:	3718      	adds	r7, #24
 8016e2c:	46bd      	mov	sp, r7
 8016e2e:	bd80      	pop	{r7, pc}

08016e30 <xQueueGenericSend>:
 8016e30:	b580      	push	{r7, lr}
 8016e32:	b08e      	sub	sp, #56	; 0x38
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	60f8      	str	r0, [r7, #12]
 8016e38:	60b9      	str	r1, [r7, #8]
 8016e3a:	607a      	str	r2, [r7, #4]
 8016e3c:	603b      	str	r3, [r7, #0]
 8016e3e:	2300      	movs	r3, #0
 8016e40:	637b      	str	r3, [r7, #52]	; 0x34
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	633b      	str	r3, [r7, #48]	; 0x30
 8016e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d10a      	bne.n	8016e62 <xQueueGenericSend+0x32>
 8016e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e50:	f383 8811 	msr	BASEPRI, r3
 8016e54:	f3bf 8f6f 	isb	sy
 8016e58:	f3bf 8f4f 	dsb	sy
 8016e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8016e5e:	bf00      	nop
 8016e60:	e7fe      	b.n	8016e60 <xQueueGenericSend+0x30>
 8016e62:	68bb      	ldr	r3, [r7, #8]
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d103      	bne.n	8016e70 <xQueueGenericSend+0x40>
 8016e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d101      	bne.n	8016e74 <xQueueGenericSend+0x44>
 8016e70:	2301      	movs	r3, #1
 8016e72:	e000      	b.n	8016e76 <xQueueGenericSend+0x46>
 8016e74:	2300      	movs	r3, #0
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d10a      	bne.n	8016e90 <xQueueGenericSend+0x60>
 8016e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e7e:	f383 8811 	msr	BASEPRI, r3
 8016e82:	f3bf 8f6f 	isb	sy
 8016e86:	f3bf 8f4f 	dsb	sy
 8016e8a:	627b      	str	r3, [r7, #36]	; 0x24
 8016e8c:	bf00      	nop
 8016e8e:	e7fe      	b.n	8016e8e <xQueueGenericSend+0x5e>
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	2b02      	cmp	r3, #2
 8016e94:	d103      	bne.n	8016e9e <xQueueGenericSend+0x6e>
 8016e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e9a:	2b01      	cmp	r3, #1
 8016e9c:	d101      	bne.n	8016ea2 <xQueueGenericSend+0x72>
 8016e9e:	2301      	movs	r3, #1
 8016ea0:	e000      	b.n	8016ea4 <xQueueGenericSend+0x74>
 8016ea2:	2300      	movs	r3, #0
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d10a      	bne.n	8016ebe <xQueueGenericSend+0x8e>
 8016ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eac:	f383 8811 	msr	BASEPRI, r3
 8016eb0:	f3bf 8f6f 	isb	sy
 8016eb4:	f3bf 8f4f 	dsb	sy
 8016eb8:	623b      	str	r3, [r7, #32]
 8016eba:	bf00      	nop
 8016ebc:	e7fe      	b.n	8016ebc <xQueueGenericSend+0x8c>
 8016ebe:	f002 f88f 	bl	8018fe0 <xTaskGetSchedulerState>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d102      	bne.n	8016ece <xQueueGenericSend+0x9e>
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d101      	bne.n	8016ed2 <xQueueGenericSend+0xa2>
 8016ece:	2301      	movs	r3, #1
 8016ed0:	e000      	b.n	8016ed4 <xQueueGenericSend+0xa4>
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	d10a      	bne.n	8016eee <xQueueGenericSend+0xbe>
 8016ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016edc:	f383 8811 	msr	BASEPRI, r3
 8016ee0:	f3bf 8f6f 	isb	sy
 8016ee4:	f3bf 8f4f 	dsb	sy
 8016ee8:	61fb      	str	r3, [r7, #28]
 8016eea:	bf00      	nop
 8016eec:	e7fe      	b.n	8016eec <xQueueGenericSend+0xbc>
 8016eee:	f003 f811 	bl	8019f14 <vPortEnterCritical>
 8016ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016efa:	429a      	cmp	r2, r3
 8016efc:	d302      	bcc.n	8016f04 <xQueueGenericSend+0xd4>
 8016efe:	683b      	ldr	r3, [r7, #0]
 8016f00:	2b02      	cmp	r3, #2
 8016f02:	d129      	bne.n	8016f58 <xQueueGenericSend+0x128>
 8016f04:	683a      	ldr	r2, [r7, #0]
 8016f06:	68b9      	ldr	r1, [r7, #8]
 8016f08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f0a:	f000 fc9a 	bl	8017842 <prvCopyDataToQueue>
 8016f0e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d010      	beq.n	8016f3a <xQueueGenericSend+0x10a>
 8016f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f1a:	3324      	adds	r3, #36	; 0x24
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f001 fe67 	bl	8018bf0 <xTaskRemoveFromEventList>
 8016f22:	4603      	mov	r3, r0
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d013      	beq.n	8016f50 <xQueueGenericSend+0x120>
 8016f28:	4b3f      	ldr	r3, [pc, #252]	; (8017028 <xQueueGenericSend+0x1f8>)
 8016f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f2e:	601a      	str	r2, [r3, #0]
 8016f30:	f3bf 8f4f 	dsb	sy
 8016f34:	f3bf 8f6f 	isb	sy
 8016f38:	e00a      	b.n	8016f50 <xQueueGenericSend+0x120>
 8016f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d007      	beq.n	8016f50 <xQueueGenericSend+0x120>
 8016f40:	4b39      	ldr	r3, [pc, #228]	; (8017028 <xQueueGenericSend+0x1f8>)
 8016f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f46:	601a      	str	r2, [r3, #0]
 8016f48:	f3bf 8f4f 	dsb	sy
 8016f4c:	f3bf 8f6f 	isb	sy
 8016f50:	f003 f810 	bl	8019f74 <vPortExitCritical>
 8016f54:	2301      	movs	r3, #1
 8016f56:	e063      	b.n	8017020 <xQueueGenericSend+0x1f0>
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d103      	bne.n	8016f66 <xQueueGenericSend+0x136>
 8016f5e:	f003 f809 	bl	8019f74 <vPortExitCritical>
 8016f62:	2300      	movs	r3, #0
 8016f64:	e05c      	b.n	8017020 <xQueueGenericSend+0x1f0>
 8016f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f68:	2b00      	cmp	r3, #0
 8016f6a:	d106      	bne.n	8016f7a <xQueueGenericSend+0x14a>
 8016f6c:	f107 0314 	add.w	r3, r7, #20
 8016f70:	4618      	mov	r0, r3
 8016f72:	f001 fec7 	bl	8018d04 <vTaskInternalSetTimeOutState>
 8016f76:	2301      	movs	r3, #1
 8016f78:	637b      	str	r3, [r7, #52]	; 0x34
 8016f7a:	f002 fffb 	bl	8019f74 <vPortExitCritical>
 8016f7e:	f001 fbe1 	bl	8018744 <vTaskSuspendAll>
 8016f82:	f002 ffc7 	bl	8019f14 <vPortEnterCritical>
 8016f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f8c:	b25b      	sxtb	r3, r3
 8016f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f92:	d103      	bne.n	8016f9c <xQueueGenericSend+0x16c>
 8016f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f96:	2200      	movs	r2, #0
 8016f98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016fa2:	b25b      	sxtb	r3, r3
 8016fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fa8:	d103      	bne.n	8016fb2 <xQueueGenericSend+0x182>
 8016faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fac:	2200      	movs	r2, #0
 8016fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016fb2:	f002 ffdf 	bl	8019f74 <vPortExitCritical>
 8016fb6:	1d3a      	adds	r2, r7, #4
 8016fb8:	f107 0314 	add.w	r3, r7, #20
 8016fbc:	4611      	mov	r1, r2
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f001 feb6 	bl	8018d30 <xTaskCheckForTimeOut>
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d124      	bne.n	8017014 <xQueueGenericSend+0x1e4>
 8016fca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fcc:	f000 fd31 	bl	8017a32 <prvIsQueueFull>
 8016fd0:	4603      	mov	r3, r0
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d018      	beq.n	8017008 <xQueueGenericSend+0x1d8>
 8016fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd8:	3310      	adds	r3, #16
 8016fda:	687a      	ldr	r2, [r7, #4]
 8016fdc:	4611      	mov	r1, r2
 8016fde:	4618      	mov	r0, r3
 8016fe0:	f001 fdb6 	bl	8018b50 <vTaskPlaceOnEventList>
 8016fe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fe6:	f000 fcbc 	bl	8017962 <prvUnlockQueue>
 8016fea:	f001 fbb9 	bl	8018760 <xTaskResumeAll>
 8016fee:	4603      	mov	r3, r0
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	f47f af7c 	bne.w	8016eee <xQueueGenericSend+0xbe>
 8016ff6:	4b0c      	ldr	r3, [pc, #48]	; (8017028 <xQueueGenericSend+0x1f8>)
 8016ff8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ffc:	601a      	str	r2, [r3, #0]
 8016ffe:	f3bf 8f4f 	dsb	sy
 8017002:	f3bf 8f6f 	isb	sy
 8017006:	e772      	b.n	8016eee <xQueueGenericSend+0xbe>
 8017008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801700a:	f000 fcaa 	bl	8017962 <prvUnlockQueue>
 801700e:	f001 fba7 	bl	8018760 <xTaskResumeAll>
 8017012:	e76c      	b.n	8016eee <xQueueGenericSend+0xbe>
 8017014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017016:	f000 fca4 	bl	8017962 <prvUnlockQueue>
 801701a:	f001 fba1 	bl	8018760 <xTaskResumeAll>
 801701e:	2300      	movs	r3, #0
 8017020:	4618      	mov	r0, r3
 8017022:	3738      	adds	r7, #56	; 0x38
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}
 8017028:	e000ed04 	.word	0xe000ed04

0801702c <xQueueGenericSendFromISR>:
 801702c:	b580      	push	{r7, lr}
 801702e:	b090      	sub	sp, #64	; 0x40
 8017030:	af00      	add	r7, sp, #0
 8017032:	60f8      	str	r0, [r7, #12]
 8017034:	60b9      	str	r1, [r7, #8]
 8017036:	607a      	str	r2, [r7, #4]
 8017038:	603b      	str	r3, [r7, #0]
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	63bb      	str	r3, [r7, #56]	; 0x38
 801703e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017040:	2b00      	cmp	r3, #0
 8017042:	d10a      	bne.n	801705a <xQueueGenericSendFromISR+0x2e>
 8017044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017048:	f383 8811 	msr	BASEPRI, r3
 801704c:	f3bf 8f6f 	isb	sy
 8017050:	f3bf 8f4f 	dsb	sy
 8017054:	62bb      	str	r3, [r7, #40]	; 0x28
 8017056:	bf00      	nop
 8017058:	e7fe      	b.n	8017058 <xQueueGenericSendFromISR+0x2c>
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d103      	bne.n	8017068 <xQueueGenericSendFromISR+0x3c>
 8017060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017064:	2b00      	cmp	r3, #0
 8017066:	d101      	bne.n	801706c <xQueueGenericSendFromISR+0x40>
 8017068:	2301      	movs	r3, #1
 801706a:	e000      	b.n	801706e <xQueueGenericSendFromISR+0x42>
 801706c:	2300      	movs	r3, #0
 801706e:	2b00      	cmp	r3, #0
 8017070:	d10a      	bne.n	8017088 <xQueueGenericSendFromISR+0x5c>
 8017072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017076:	f383 8811 	msr	BASEPRI, r3
 801707a:	f3bf 8f6f 	isb	sy
 801707e:	f3bf 8f4f 	dsb	sy
 8017082:	627b      	str	r3, [r7, #36]	; 0x24
 8017084:	bf00      	nop
 8017086:	e7fe      	b.n	8017086 <xQueueGenericSendFromISR+0x5a>
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	2b02      	cmp	r3, #2
 801708c:	d103      	bne.n	8017096 <xQueueGenericSendFromISR+0x6a>
 801708e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017092:	2b01      	cmp	r3, #1
 8017094:	d101      	bne.n	801709a <xQueueGenericSendFromISR+0x6e>
 8017096:	2301      	movs	r3, #1
 8017098:	e000      	b.n	801709c <xQueueGenericSendFromISR+0x70>
 801709a:	2300      	movs	r3, #0
 801709c:	2b00      	cmp	r3, #0
 801709e:	d10a      	bne.n	80170b6 <xQueueGenericSendFromISR+0x8a>
 80170a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170a4:	f383 8811 	msr	BASEPRI, r3
 80170a8:	f3bf 8f6f 	isb	sy
 80170ac:	f3bf 8f4f 	dsb	sy
 80170b0:	623b      	str	r3, [r7, #32]
 80170b2:	bf00      	nop
 80170b4:	e7fe      	b.n	80170b4 <xQueueGenericSendFromISR+0x88>
 80170b6:	f003 f80f 	bl	801a0d8 <vPortValidateInterruptPriority>
 80170ba:	f3ef 8211 	mrs	r2, BASEPRI
 80170be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170c2:	f383 8811 	msr	BASEPRI, r3
 80170c6:	f3bf 8f6f 	isb	sy
 80170ca:	f3bf 8f4f 	dsb	sy
 80170ce:	61fa      	str	r2, [r7, #28]
 80170d0:	61bb      	str	r3, [r7, #24]
 80170d2:	69fb      	ldr	r3, [r7, #28]
 80170d4:	637b      	str	r3, [r7, #52]	; 0x34
 80170d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80170da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170de:	429a      	cmp	r2, r3
 80170e0:	d302      	bcc.n	80170e8 <xQueueGenericSendFromISR+0xbc>
 80170e2:	683b      	ldr	r3, [r7, #0]
 80170e4:	2b02      	cmp	r3, #2
 80170e6:	d12f      	bne.n	8017148 <xQueueGenericSendFromISR+0x11c>
 80170e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80170ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80170f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80170f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80170f8:	683a      	ldr	r2, [r7, #0]
 80170fa:	68b9      	ldr	r1, [r7, #8]
 80170fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80170fe:	f000 fba0 	bl	8017842 <prvCopyDataToQueue>
 8017102:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8017106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801710a:	d112      	bne.n	8017132 <xQueueGenericSendFromISR+0x106>
 801710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017110:	2b00      	cmp	r3, #0
 8017112:	d016      	beq.n	8017142 <xQueueGenericSendFromISR+0x116>
 8017114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017116:	3324      	adds	r3, #36	; 0x24
 8017118:	4618      	mov	r0, r3
 801711a:	f001 fd69 	bl	8018bf0 <xTaskRemoveFromEventList>
 801711e:	4603      	mov	r3, r0
 8017120:	2b00      	cmp	r3, #0
 8017122:	d00e      	beq.n	8017142 <xQueueGenericSendFromISR+0x116>
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d00b      	beq.n	8017142 <xQueueGenericSendFromISR+0x116>
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	2201      	movs	r2, #1
 801712e:	601a      	str	r2, [r3, #0]
 8017130:	e007      	b.n	8017142 <xQueueGenericSendFromISR+0x116>
 8017132:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8017136:	3301      	adds	r3, #1
 8017138:	b2db      	uxtb	r3, r3
 801713a:	b25a      	sxtb	r2, r3
 801713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801713e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017142:	2301      	movs	r3, #1
 8017144:	63fb      	str	r3, [r7, #60]	; 0x3c
 8017146:	e001      	b.n	801714c <xQueueGenericSendFromISR+0x120>
 8017148:	2300      	movs	r3, #0
 801714a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801714c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801714e:	617b      	str	r3, [r7, #20]
 8017150:	697b      	ldr	r3, [r7, #20]
 8017152:	f383 8811 	msr	BASEPRI, r3
 8017156:	bf00      	nop
 8017158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801715a:	4618      	mov	r0, r3
 801715c:	3740      	adds	r7, #64	; 0x40
 801715e:	46bd      	mov	sp, r7
 8017160:	bd80      	pop	{r7, pc}

08017162 <xQueueGiveFromISR>:
 8017162:	b580      	push	{r7, lr}
 8017164:	b08e      	sub	sp, #56	; 0x38
 8017166:	af00      	add	r7, sp, #0
 8017168:	6078      	str	r0, [r7, #4]
 801716a:	6039      	str	r1, [r7, #0]
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	633b      	str	r3, [r7, #48]	; 0x30
 8017170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017172:	2b00      	cmp	r3, #0
 8017174:	d10a      	bne.n	801718c <xQueueGiveFromISR+0x2a>
 8017176:	f04f 0350 	mov.w	r3, #80	; 0x50
 801717a:	f383 8811 	msr	BASEPRI, r3
 801717e:	f3bf 8f6f 	isb	sy
 8017182:	f3bf 8f4f 	dsb	sy
 8017186:	623b      	str	r3, [r7, #32]
 8017188:	bf00      	nop
 801718a:	e7fe      	b.n	801718a <xQueueGiveFromISR+0x28>
 801718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017190:	2b00      	cmp	r3, #0
 8017192:	d00a      	beq.n	80171aa <xQueueGiveFromISR+0x48>
 8017194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017198:	f383 8811 	msr	BASEPRI, r3
 801719c:	f3bf 8f6f 	isb	sy
 80171a0:	f3bf 8f4f 	dsb	sy
 80171a4:	61fb      	str	r3, [r7, #28]
 80171a6:	bf00      	nop
 80171a8:	e7fe      	b.n	80171a8 <xQueueGiveFromISR+0x46>
 80171aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ac:	681b      	ldr	r3, [r3, #0]
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d103      	bne.n	80171ba <xQueueGiveFromISR+0x58>
 80171b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b4:	689b      	ldr	r3, [r3, #8]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d101      	bne.n	80171be <xQueueGiveFromISR+0x5c>
 80171ba:	2301      	movs	r3, #1
 80171bc:	e000      	b.n	80171c0 <xQueueGiveFromISR+0x5e>
 80171be:	2300      	movs	r3, #0
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d10a      	bne.n	80171da <xQueueGiveFromISR+0x78>
 80171c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171c8:	f383 8811 	msr	BASEPRI, r3
 80171cc:	f3bf 8f6f 	isb	sy
 80171d0:	f3bf 8f4f 	dsb	sy
 80171d4:	61bb      	str	r3, [r7, #24]
 80171d6:	bf00      	nop
 80171d8:	e7fe      	b.n	80171d8 <xQueueGiveFromISR+0x76>
 80171da:	f002 ff7d 	bl	801a0d8 <vPortValidateInterruptPriority>
 80171de:	f3ef 8211 	mrs	r2, BASEPRI
 80171e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171e6:	f383 8811 	msr	BASEPRI, r3
 80171ea:	f3bf 8f6f 	isb	sy
 80171ee:	f3bf 8f4f 	dsb	sy
 80171f2:	617a      	str	r2, [r7, #20]
 80171f4:	613b      	str	r3, [r7, #16]
 80171f6:	697b      	ldr	r3, [r7, #20]
 80171f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80171fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8017200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017206:	429a      	cmp	r2, r3
 8017208:	d22b      	bcs.n	8017262 <xQueueGiveFromISR+0x100>
 801720a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801720c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017216:	1c5a      	adds	r2, r3, #1
 8017218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801721a:	639a      	str	r2, [r3, #56]	; 0x38
 801721c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017224:	d112      	bne.n	801724c <xQueueGiveFromISR+0xea>
 8017226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801722a:	2b00      	cmp	r3, #0
 801722c:	d016      	beq.n	801725c <xQueueGiveFromISR+0xfa>
 801722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017230:	3324      	adds	r3, #36	; 0x24
 8017232:	4618      	mov	r0, r3
 8017234:	f001 fcdc 	bl	8018bf0 <xTaskRemoveFromEventList>
 8017238:	4603      	mov	r3, r0
 801723a:	2b00      	cmp	r3, #0
 801723c:	d00e      	beq.n	801725c <xQueueGiveFromISR+0xfa>
 801723e:	683b      	ldr	r3, [r7, #0]
 8017240:	2b00      	cmp	r3, #0
 8017242:	d00b      	beq.n	801725c <xQueueGiveFromISR+0xfa>
 8017244:	683b      	ldr	r3, [r7, #0]
 8017246:	2201      	movs	r2, #1
 8017248:	601a      	str	r2, [r3, #0]
 801724a:	e007      	b.n	801725c <xQueueGiveFromISR+0xfa>
 801724c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017250:	3301      	adds	r3, #1
 8017252:	b2db      	uxtb	r3, r3
 8017254:	b25a      	sxtb	r2, r3
 8017256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801725c:	2301      	movs	r3, #1
 801725e:	637b      	str	r3, [r7, #52]	; 0x34
 8017260:	e001      	b.n	8017266 <xQueueGiveFromISR+0x104>
 8017262:	2300      	movs	r3, #0
 8017264:	637b      	str	r3, [r7, #52]	; 0x34
 8017266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017268:	60fb      	str	r3, [r7, #12]
 801726a:	68fb      	ldr	r3, [r7, #12]
 801726c:	f383 8811 	msr	BASEPRI, r3
 8017270:	bf00      	nop
 8017272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017274:	4618      	mov	r0, r3
 8017276:	3738      	adds	r7, #56	; 0x38
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}

0801727c <xQueueReceive>:
 801727c:	b580      	push	{r7, lr}
 801727e:	b08c      	sub	sp, #48	; 0x30
 8017280:	af00      	add	r7, sp, #0
 8017282:	60f8      	str	r0, [r7, #12]
 8017284:	60b9      	str	r1, [r7, #8]
 8017286:	607a      	str	r2, [r7, #4]
 8017288:	2300      	movs	r3, #0
 801728a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801728c:	68fb      	ldr	r3, [r7, #12]
 801728e:	62bb      	str	r3, [r7, #40]	; 0x28
 8017290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017292:	2b00      	cmp	r3, #0
 8017294:	d10a      	bne.n	80172ac <xQueueReceive+0x30>
 8017296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801729a:	f383 8811 	msr	BASEPRI, r3
 801729e:	f3bf 8f6f 	isb	sy
 80172a2:	f3bf 8f4f 	dsb	sy
 80172a6:	623b      	str	r3, [r7, #32]
 80172a8:	bf00      	nop
 80172aa:	e7fe      	b.n	80172aa <xQueueReceive+0x2e>
 80172ac:	68bb      	ldr	r3, [r7, #8]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d103      	bne.n	80172ba <xQueueReceive+0x3e>
 80172b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d101      	bne.n	80172be <xQueueReceive+0x42>
 80172ba:	2301      	movs	r3, #1
 80172bc:	e000      	b.n	80172c0 <xQueueReceive+0x44>
 80172be:	2300      	movs	r3, #0
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d10a      	bne.n	80172da <xQueueReceive+0x5e>
 80172c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172c8:	f383 8811 	msr	BASEPRI, r3
 80172cc:	f3bf 8f6f 	isb	sy
 80172d0:	f3bf 8f4f 	dsb	sy
 80172d4:	61fb      	str	r3, [r7, #28]
 80172d6:	bf00      	nop
 80172d8:	e7fe      	b.n	80172d8 <xQueueReceive+0x5c>
 80172da:	f001 fe81 	bl	8018fe0 <xTaskGetSchedulerState>
 80172de:	4603      	mov	r3, r0
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d102      	bne.n	80172ea <xQueueReceive+0x6e>
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d101      	bne.n	80172ee <xQueueReceive+0x72>
 80172ea:	2301      	movs	r3, #1
 80172ec:	e000      	b.n	80172f0 <xQueueReceive+0x74>
 80172ee:	2300      	movs	r3, #0
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	d10a      	bne.n	801730a <xQueueReceive+0x8e>
 80172f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172f8:	f383 8811 	msr	BASEPRI, r3
 80172fc:	f3bf 8f6f 	isb	sy
 8017300:	f3bf 8f4f 	dsb	sy
 8017304:	61bb      	str	r3, [r7, #24]
 8017306:	bf00      	nop
 8017308:	e7fe      	b.n	8017308 <xQueueReceive+0x8c>
 801730a:	f002 fe03 	bl	8019f14 <vPortEnterCritical>
 801730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017312:	627b      	str	r3, [r7, #36]	; 0x24
 8017314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017316:	2b00      	cmp	r3, #0
 8017318:	d01f      	beq.n	801735a <xQueueReceive+0xde>
 801731a:	68b9      	ldr	r1, [r7, #8]
 801731c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801731e:	f000 fafa 	bl	8017916 <prvCopyDataFromQueue>
 8017322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017324:	1e5a      	subs	r2, r3, #1
 8017326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017328:	639a      	str	r2, [r3, #56]	; 0x38
 801732a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801732c:	691b      	ldr	r3, [r3, #16]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d00f      	beq.n	8017352 <xQueueReceive+0xd6>
 8017332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017334:	3310      	adds	r3, #16
 8017336:	4618      	mov	r0, r3
 8017338:	f001 fc5a 	bl	8018bf0 <xTaskRemoveFromEventList>
 801733c:	4603      	mov	r3, r0
 801733e:	2b00      	cmp	r3, #0
 8017340:	d007      	beq.n	8017352 <xQueueReceive+0xd6>
 8017342:	4b3d      	ldr	r3, [pc, #244]	; (8017438 <xQueueReceive+0x1bc>)
 8017344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017348:	601a      	str	r2, [r3, #0]
 801734a:	f3bf 8f4f 	dsb	sy
 801734e:	f3bf 8f6f 	isb	sy
 8017352:	f002 fe0f 	bl	8019f74 <vPortExitCritical>
 8017356:	2301      	movs	r3, #1
 8017358:	e069      	b.n	801742e <xQueueReceive+0x1b2>
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d103      	bne.n	8017368 <xQueueReceive+0xec>
 8017360:	f002 fe08 	bl	8019f74 <vPortExitCritical>
 8017364:	2300      	movs	r3, #0
 8017366:	e062      	b.n	801742e <xQueueReceive+0x1b2>
 8017368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801736a:	2b00      	cmp	r3, #0
 801736c:	d106      	bne.n	801737c <xQueueReceive+0x100>
 801736e:	f107 0310 	add.w	r3, r7, #16
 8017372:	4618      	mov	r0, r3
 8017374:	f001 fcc6 	bl	8018d04 <vTaskInternalSetTimeOutState>
 8017378:	2301      	movs	r3, #1
 801737a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801737c:	f002 fdfa 	bl	8019f74 <vPortExitCritical>
 8017380:	f001 f9e0 	bl	8018744 <vTaskSuspendAll>
 8017384:	f002 fdc6 	bl	8019f14 <vPortEnterCritical>
 8017388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801738a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801738e:	b25b      	sxtb	r3, r3
 8017390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017394:	d103      	bne.n	801739e <xQueueReceive+0x122>
 8017396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017398:	2200      	movs	r2, #0
 801739a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801739e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80173a4:	b25b      	sxtb	r3, r3
 80173a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173aa:	d103      	bne.n	80173b4 <xQueueReceive+0x138>
 80173ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ae:	2200      	movs	r2, #0
 80173b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80173b4:	f002 fdde 	bl	8019f74 <vPortExitCritical>
 80173b8:	1d3a      	adds	r2, r7, #4
 80173ba:	f107 0310 	add.w	r3, r7, #16
 80173be:	4611      	mov	r1, r2
 80173c0:	4618      	mov	r0, r3
 80173c2:	f001 fcb5 	bl	8018d30 <xTaskCheckForTimeOut>
 80173c6:	4603      	mov	r3, r0
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	d123      	bne.n	8017414 <xQueueReceive+0x198>
 80173cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173ce:	f000 fb1a 	bl	8017a06 <prvIsQueueEmpty>
 80173d2:	4603      	mov	r3, r0
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d017      	beq.n	8017408 <xQueueReceive+0x18c>
 80173d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173da:	3324      	adds	r3, #36	; 0x24
 80173dc:	687a      	ldr	r2, [r7, #4]
 80173de:	4611      	mov	r1, r2
 80173e0:	4618      	mov	r0, r3
 80173e2:	f001 fbb5 	bl	8018b50 <vTaskPlaceOnEventList>
 80173e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173e8:	f000 fabb 	bl	8017962 <prvUnlockQueue>
 80173ec:	f001 f9b8 	bl	8018760 <xTaskResumeAll>
 80173f0:	4603      	mov	r3, r0
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d189      	bne.n	801730a <xQueueReceive+0x8e>
 80173f6:	4b10      	ldr	r3, [pc, #64]	; (8017438 <xQueueReceive+0x1bc>)
 80173f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173fc:	601a      	str	r2, [r3, #0]
 80173fe:	f3bf 8f4f 	dsb	sy
 8017402:	f3bf 8f6f 	isb	sy
 8017406:	e780      	b.n	801730a <xQueueReceive+0x8e>
 8017408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801740a:	f000 faaa 	bl	8017962 <prvUnlockQueue>
 801740e:	f001 f9a7 	bl	8018760 <xTaskResumeAll>
 8017412:	e77a      	b.n	801730a <xQueueReceive+0x8e>
 8017414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017416:	f000 faa4 	bl	8017962 <prvUnlockQueue>
 801741a:	f001 f9a1 	bl	8018760 <xTaskResumeAll>
 801741e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017420:	f000 faf1 	bl	8017a06 <prvIsQueueEmpty>
 8017424:	4603      	mov	r3, r0
 8017426:	2b00      	cmp	r3, #0
 8017428:	f43f af6f 	beq.w	801730a <xQueueReceive+0x8e>
 801742c:	2300      	movs	r3, #0
 801742e:	4618      	mov	r0, r3
 8017430:	3730      	adds	r7, #48	; 0x30
 8017432:	46bd      	mov	sp, r7
 8017434:	bd80      	pop	{r7, pc}
 8017436:	bf00      	nop
 8017438:	e000ed04 	.word	0xe000ed04

0801743c <xQueueSemaphoreTake>:
 801743c:	b580      	push	{r7, lr}
 801743e:	b08e      	sub	sp, #56	; 0x38
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
 8017444:	6039      	str	r1, [r7, #0]
 8017446:	2300      	movs	r3, #0
 8017448:	637b      	str	r3, [r7, #52]	; 0x34
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801744e:	2300      	movs	r3, #0
 8017450:	633b      	str	r3, [r7, #48]	; 0x30
 8017452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017454:	2b00      	cmp	r3, #0
 8017456:	d10a      	bne.n	801746e <xQueueSemaphoreTake+0x32>
 8017458:	f04f 0350 	mov.w	r3, #80	; 0x50
 801745c:	f383 8811 	msr	BASEPRI, r3
 8017460:	f3bf 8f6f 	isb	sy
 8017464:	f3bf 8f4f 	dsb	sy
 8017468:	623b      	str	r3, [r7, #32]
 801746a:	bf00      	nop
 801746c:	e7fe      	b.n	801746c <xQueueSemaphoreTake+0x30>
 801746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017472:	2b00      	cmp	r3, #0
 8017474:	d00a      	beq.n	801748c <xQueueSemaphoreTake+0x50>
 8017476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801747a:	f383 8811 	msr	BASEPRI, r3
 801747e:	f3bf 8f6f 	isb	sy
 8017482:	f3bf 8f4f 	dsb	sy
 8017486:	61fb      	str	r3, [r7, #28]
 8017488:	bf00      	nop
 801748a:	e7fe      	b.n	801748a <xQueueSemaphoreTake+0x4e>
 801748c:	f001 fda8 	bl	8018fe0 <xTaskGetSchedulerState>
 8017490:	4603      	mov	r3, r0
 8017492:	2b00      	cmp	r3, #0
 8017494:	d102      	bne.n	801749c <xQueueSemaphoreTake+0x60>
 8017496:	683b      	ldr	r3, [r7, #0]
 8017498:	2b00      	cmp	r3, #0
 801749a:	d101      	bne.n	80174a0 <xQueueSemaphoreTake+0x64>
 801749c:	2301      	movs	r3, #1
 801749e:	e000      	b.n	80174a2 <xQueueSemaphoreTake+0x66>
 80174a0:	2300      	movs	r3, #0
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d10a      	bne.n	80174bc <xQueueSemaphoreTake+0x80>
 80174a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174aa:	f383 8811 	msr	BASEPRI, r3
 80174ae:	f3bf 8f6f 	isb	sy
 80174b2:	f3bf 8f4f 	dsb	sy
 80174b6:	61bb      	str	r3, [r7, #24]
 80174b8:	bf00      	nop
 80174ba:	e7fe      	b.n	80174ba <xQueueSemaphoreTake+0x7e>
 80174bc:	f002 fd2a 	bl	8019f14 <vPortEnterCritical>
 80174c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80174c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c8:	2b00      	cmp	r3, #0
 80174ca:	d024      	beq.n	8017516 <xQueueSemaphoreTake+0xda>
 80174cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ce:	1e5a      	subs	r2, r3, #1
 80174d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d2:	639a      	str	r2, [r3, #56]	; 0x38
 80174d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d6:	681b      	ldr	r3, [r3, #0]
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d104      	bne.n	80174e6 <xQueueSemaphoreTake+0xaa>
 80174dc:	f001 fef6 	bl	80192cc <pvTaskIncrementMutexHeldCount>
 80174e0:	4602      	mov	r2, r0
 80174e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e4:	609a      	str	r2, [r3, #8]
 80174e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e8:	691b      	ldr	r3, [r3, #16]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d00f      	beq.n	801750e <xQueueSemaphoreTake+0xd2>
 80174ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f0:	3310      	adds	r3, #16
 80174f2:	4618      	mov	r0, r3
 80174f4:	f001 fb7c 	bl	8018bf0 <xTaskRemoveFromEventList>
 80174f8:	4603      	mov	r3, r0
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d007      	beq.n	801750e <xQueueSemaphoreTake+0xd2>
 80174fe:	4b54      	ldr	r3, [pc, #336]	; (8017650 <xQueueSemaphoreTake+0x214>)
 8017500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017504:	601a      	str	r2, [r3, #0]
 8017506:	f3bf 8f4f 	dsb	sy
 801750a:	f3bf 8f6f 	isb	sy
 801750e:	f002 fd31 	bl	8019f74 <vPortExitCritical>
 8017512:	2301      	movs	r3, #1
 8017514:	e097      	b.n	8017646 <xQueueSemaphoreTake+0x20a>
 8017516:	683b      	ldr	r3, [r7, #0]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d111      	bne.n	8017540 <xQueueSemaphoreTake+0x104>
 801751c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801751e:	2b00      	cmp	r3, #0
 8017520:	d00a      	beq.n	8017538 <xQueueSemaphoreTake+0xfc>
 8017522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017526:	f383 8811 	msr	BASEPRI, r3
 801752a:	f3bf 8f6f 	isb	sy
 801752e:	f3bf 8f4f 	dsb	sy
 8017532:	617b      	str	r3, [r7, #20]
 8017534:	bf00      	nop
 8017536:	e7fe      	b.n	8017536 <xQueueSemaphoreTake+0xfa>
 8017538:	f002 fd1c 	bl	8019f74 <vPortExitCritical>
 801753c:	2300      	movs	r3, #0
 801753e:	e082      	b.n	8017646 <xQueueSemaphoreTake+0x20a>
 8017540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017542:	2b00      	cmp	r3, #0
 8017544:	d106      	bne.n	8017554 <xQueueSemaphoreTake+0x118>
 8017546:	f107 030c 	add.w	r3, r7, #12
 801754a:	4618      	mov	r0, r3
 801754c:	f001 fbda 	bl	8018d04 <vTaskInternalSetTimeOutState>
 8017550:	2301      	movs	r3, #1
 8017552:	637b      	str	r3, [r7, #52]	; 0x34
 8017554:	f002 fd0e 	bl	8019f74 <vPortExitCritical>
 8017558:	f001 f8f4 	bl	8018744 <vTaskSuspendAll>
 801755c:	f002 fcda 	bl	8019f14 <vPortEnterCritical>
 8017560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017566:	b25b      	sxtb	r3, r3
 8017568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801756c:	d103      	bne.n	8017576 <xQueueSemaphoreTake+0x13a>
 801756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017570:	2200      	movs	r2, #0
 8017572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801757c:	b25b      	sxtb	r3, r3
 801757e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017582:	d103      	bne.n	801758c <xQueueSemaphoreTake+0x150>
 8017584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017586:	2200      	movs	r2, #0
 8017588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801758c:	f002 fcf2 	bl	8019f74 <vPortExitCritical>
 8017590:	463a      	mov	r2, r7
 8017592:	f107 030c 	add.w	r3, r7, #12
 8017596:	4611      	mov	r1, r2
 8017598:	4618      	mov	r0, r3
 801759a:	f001 fbc9 	bl	8018d30 <xTaskCheckForTimeOut>
 801759e:	4603      	mov	r3, r0
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d132      	bne.n	801760a <xQueueSemaphoreTake+0x1ce>
 80175a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175a6:	f000 fa2e 	bl	8017a06 <prvIsQueueEmpty>
 80175aa:	4603      	mov	r3, r0
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d026      	beq.n	80175fe <xQueueSemaphoreTake+0x1c2>
 80175b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d109      	bne.n	80175cc <xQueueSemaphoreTake+0x190>
 80175b8:	f002 fcac 	bl	8019f14 <vPortEnterCritical>
 80175bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175be:	689b      	ldr	r3, [r3, #8]
 80175c0:	4618      	mov	r0, r3
 80175c2:	f001 fd2b 	bl	801901c <xTaskPriorityInherit>
 80175c6:	6338      	str	r0, [r7, #48]	; 0x30
 80175c8:	f002 fcd4 	bl	8019f74 <vPortExitCritical>
 80175cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ce:	3324      	adds	r3, #36	; 0x24
 80175d0:	683a      	ldr	r2, [r7, #0]
 80175d2:	4611      	mov	r1, r2
 80175d4:	4618      	mov	r0, r3
 80175d6:	f001 fabb 	bl	8018b50 <vTaskPlaceOnEventList>
 80175da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175dc:	f000 f9c1 	bl	8017962 <prvUnlockQueue>
 80175e0:	f001 f8be 	bl	8018760 <xTaskResumeAll>
 80175e4:	4603      	mov	r3, r0
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	f47f af68 	bne.w	80174bc <xQueueSemaphoreTake+0x80>
 80175ec:	4b18      	ldr	r3, [pc, #96]	; (8017650 <xQueueSemaphoreTake+0x214>)
 80175ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175f2:	601a      	str	r2, [r3, #0]
 80175f4:	f3bf 8f4f 	dsb	sy
 80175f8:	f3bf 8f6f 	isb	sy
 80175fc:	e75e      	b.n	80174bc <xQueueSemaphoreTake+0x80>
 80175fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017600:	f000 f9af 	bl	8017962 <prvUnlockQueue>
 8017604:	f001 f8ac 	bl	8018760 <xTaskResumeAll>
 8017608:	e758      	b.n	80174bc <xQueueSemaphoreTake+0x80>
 801760a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801760c:	f000 f9a9 	bl	8017962 <prvUnlockQueue>
 8017610:	f001 f8a6 	bl	8018760 <xTaskResumeAll>
 8017614:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017616:	f000 f9f6 	bl	8017a06 <prvIsQueueEmpty>
 801761a:	4603      	mov	r3, r0
 801761c:	2b00      	cmp	r3, #0
 801761e:	f43f af4d 	beq.w	80174bc <xQueueSemaphoreTake+0x80>
 8017622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017624:	2b00      	cmp	r3, #0
 8017626:	d00d      	beq.n	8017644 <xQueueSemaphoreTake+0x208>
 8017628:	f002 fc74 	bl	8019f14 <vPortEnterCritical>
 801762c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801762e:	f000 f8f0 	bl	8017812 <prvGetDisinheritPriorityAfterTimeout>
 8017632:	6278      	str	r0, [r7, #36]	; 0x24
 8017634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017636:	689b      	ldr	r3, [r3, #8]
 8017638:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801763a:	4618      	mov	r0, r3
 801763c:	f001 fdc4 	bl	80191c8 <vTaskPriorityDisinheritAfterTimeout>
 8017640:	f002 fc98 	bl	8019f74 <vPortExitCritical>
 8017644:	2300      	movs	r3, #0
 8017646:	4618      	mov	r0, r3
 8017648:	3738      	adds	r7, #56	; 0x38
 801764a:	46bd      	mov	sp, r7
 801764c:	bd80      	pop	{r7, pc}
 801764e:	bf00      	nop
 8017650:	e000ed04 	.word	0xe000ed04

08017654 <xQueueReceiveFromISR>:
 8017654:	b580      	push	{r7, lr}
 8017656:	b08e      	sub	sp, #56	; 0x38
 8017658:	af00      	add	r7, sp, #0
 801765a:	60f8      	str	r0, [r7, #12]
 801765c:	60b9      	str	r1, [r7, #8]
 801765e:	607a      	str	r2, [r7, #4]
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	633b      	str	r3, [r7, #48]	; 0x30
 8017664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017666:	2b00      	cmp	r3, #0
 8017668:	d10a      	bne.n	8017680 <xQueueReceiveFromISR+0x2c>
 801766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801766e:	f383 8811 	msr	BASEPRI, r3
 8017672:	f3bf 8f6f 	isb	sy
 8017676:	f3bf 8f4f 	dsb	sy
 801767a:	623b      	str	r3, [r7, #32]
 801767c:	bf00      	nop
 801767e:	e7fe      	b.n	801767e <xQueueReceiveFromISR+0x2a>
 8017680:	68bb      	ldr	r3, [r7, #8]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d103      	bne.n	801768e <xQueueReceiveFromISR+0x3a>
 8017686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801768a:	2b00      	cmp	r3, #0
 801768c:	d101      	bne.n	8017692 <xQueueReceiveFromISR+0x3e>
 801768e:	2301      	movs	r3, #1
 8017690:	e000      	b.n	8017694 <xQueueReceiveFromISR+0x40>
 8017692:	2300      	movs	r3, #0
 8017694:	2b00      	cmp	r3, #0
 8017696:	d10a      	bne.n	80176ae <xQueueReceiveFromISR+0x5a>
 8017698:	f04f 0350 	mov.w	r3, #80	; 0x50
 801769c:	f383 8811 	msr	BASEPRI, r3
 80176a0:	f3bf 8f6f 	isb	sy
 80176a4:	f3bf 8f4f 	dsb	sy
 80176a8:	61fb      	str	r3, [r7, #28]
 80176aa:	bf00      	nop
 80176ac:	e7fe      	b.n	80176ac <xQueueReceiveFromISR+0x58>
 80176ae:	f002 fd13 	bl	801a0d8 <vPortValidateInterruptPriority>
 80176b2:	f3ef 8211 	mrs	r2, BASEPRI
 80176b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176ba:	f383 8811 	msr	BASEPRI, r3
 80176be:	f3bf 8f6f 	isb	sy
 80176c2:	f3bf 8f4f 	dsb	sy
 80176c6:	61ba      	str	r2, [r7, #24]
 80176c8:	617b      	str	r3, [r7, #20]
 80176ca:	69bb      	ldr	r3, [r7, #24]
 80176cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80176ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80176d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d02f      	beq.n	801773a <xQueueReceiveFromISR+0xe6>
 80176da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80176e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80176e4:	68b9      	ldr	r1, [r7, #8]
 80176e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80176e8:	f000 f915 	bl	8017916 <prvCopyDataFromQueue>
 80176ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176ee:	1e5a      	subs	r2, r3, #1
 80176f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f2:	639a      	str	r2, [r3, #56]	; 0x38
 80176f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80176f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176fc:	d112      	bne.n	8017724 <xQueueReceiveFromISR+0xd0>
 80176fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017700:	691b      	ldr	r3, [r3, #16]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d016      	beq.n	8017734 <xQueueReceiveFromISR+0xe0>
 8017706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017708:	3310      	adds	r3, #16
 801770a:	4618      	mov	r0, r3
 801770c:	f001 fa70 	bl	8018bf0 <xTaskRemoveFromEventList>
 8017710:	4603      	mov	r3, r0
 8017712:	2b00      	cmp	r3, #0
 8017714:	d00e      	beq.n	8017734 <xQueueReceiveFromISR+0xe0>
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	2b00      	cmp	r3, #0
 801771a:	d00b      	beq.n	8017734 <xQueueReceiveFromISR+0xe0>
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	2201      	movs	r2, #1
 8017720:	601a      	str	r2, [r3, #0]
 8017722:	e007      	b.n	8017734 <xQueueReceiveFromISR+0xe0>
 8017724:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017728:	3301      	adds	r3, #1
 801772a:	b2db      	uxtb	r3, r3
 801772c:	b25a      	sxtb	r2, r3
 801772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017734:	2301      	movs	r3, #1
 8017736:	637b      	str	r3, [r7, #52]	; 0x34
 8017738:	e001      	b.n	801773e <xQueueReceiveFromISR+0xea>
 801773a:	2300      	movs	r3, #0
 801773c:	637b      	str	r3, [r7, #52]	; 0x34
 801773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017740:	613b      	str	r3, [r7, #16]
 8017742:	693b      	ldr	r3, [r7, #16]
 8017744:	f383 8811 	msr	BASEPRI, r3
 8017748:	bf00      	nop
 801774a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801774c:	4618      	mov	r0, r3
 801774e:	3738      	adds	r7, #56	; 0x38
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}

08017754 <uxQueueMessagesWaiting>:
 8017754:	b580      	push	{r7, lr}
 8017756:	b084      	sub	sp, #16
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	2b00      	cmp	r3, #0
 8017760:	d10a      	bne.n	8017778 <uxQueueMessagesWaiting+0x24>
 8017762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017766:	f383 8811 	msr	BASEPRI, r3
 801776a:	f3bf 8f6f 	isb	sy
 801776e:	f3bf 8f4f 	dsb	sy
 8017772:	60bb      	str	r3, [r7, #8]
 8017774:	bf00      	nop
 8017776:	e7fe      	b.n	8017776 <uxQueueMessagesWaiting+0x22>
 8017778:	f002 fbcc 	bl	8019f14 <vPortEnterCritical>
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017780:	60fb      	str	r3, [r7, #12]
 8017782:	f002 fbf7 	bl	8019f74 <vPortExitCritical>
 8017786:	68fb      	ldr	r3, [r7, #12]
 8017788:	4618      	mov	r0, r3
 801778a:	3710      	adds	r7, #16
 801778c:	46bd      	mov	sp, r7
 801778e:	bd80      	pop	{r7, pc}

08017790 <uxQueueMessagesWaitingFromISR>:
 8017790:	b480      	push	{r7}
 8017792:	b087      	sub	sp, #28
 8017794:	af00      	add	r7, sp, #0
 8017796:	6078      	str	r0, [r7, #4]
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	617b      	str	r3, [r7, #20]
 801779c:	697b      	ldr	r3, [r7, #20]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d10a      	bne.n	80177b8 <uxQueueMessagesWaitingFromISR+0x28>
 80177a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177a6:	f383 8811 	msr	BASEPRI, r3
 80177aa:	f3bf 8f6f 	isb	sy
 80177ae:	f3bf 8f4f 	dsb	sy
 80177b2:	60fb      	str	r3, [r7, #12]
 80177b4:	bf00      	nop
 80177b6:	e7fe      	b.n	80177b6 <uxQueueMessagesWaitingFromISR+0x26>
 80177b8:	697b      	ldr	r3, [r7, #20]
 80177ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177bc:	613b      	str	r3, [r7, #16]
 80177be:	693b      	ldr	r3, [r7, #16]
 80177c0:	4618      	mov	r0, r3
 80177c2:	371c      	adds	r7, #28
 80177c4:	46bd      	mov	sp, r7
 80177c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ca:	4770      	bx	lr

080177cc <vQueueDelete>:
 80177cc:	b580      	push	{r7, lr}
 80177ce:	b084      	sub	sp, #16
 80177d0:	af00      	add	r7, sp, #0
 80177d2:	6078      	str	r0, [r7, #4]
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	60fb      	str	r3, [r7, #12]
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d10a      	bne.n	80177f4 <vQueueDelete+0x28>
 80177de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80177e2:	f383 8811 	msr	BASEPRI, r3
 80177e6:	f3bf 8f6f 	isb	sy
 80177ea:	f3bf 8f4f 	dsb	sy
 80177ee:	60bb      	str	r3, [r7, #8]
 80177f0:	bf00      	nop
 80177f2:	e7fe      	b.n	80177f2 <vQueueDelete+0x26>
 80177f4:	68f8      	ldr	r0, [r7, #12]
 80177f6:	f000 f95f 	bl	8017ab8 <vQueueUnregisterQueue>
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8017800:	2b00      	cmp	r3, #0
 8017802:	d102      	bne.n	801780a <vQueueDelete+0x3e>
 8017804:	68f8      	ldr	r0, [r7, #12]
 8017806:	f002 fd77 	bl	801a2f8 <vPortFree>
 801780a:	bf00      	nop
 801780c:	3710      	adds	r7, #16
 801780e:	46bd      	mov	sp, r7
 8017810:	bd80      	pop	{r7, pc}

08017812 <prvGetDisinheritPriorityAfterTimeout>:
 8017812:	b480      	push	{r7}
 8017814:	b085      	sub	sp, #20
 8017816:	af00      	add	r7, sp, #0
 8017818:	6078      	str	r0, [r7, #4]
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801781e:	2b00      	cmp	r3, #0
 8017820:	d006      	beq.n	8017830 <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801782c:	60fb      	str	r3, [r7, #12]
 801782e:	e001      	b.n	8017834 <prvGetDisinheritPriorityAfterTimeout+0x22>
 8017830:	2300      	movs	r3, #0
 8017832:	60fb      	str	r3, [r7, #12]
 8017834:	68fb      	ldr	r3, [r7, #12]
 8017836:	4618      	mov	r0, r3
 8017838:	3714      	adds	r7, #20
 801783a:	46bd      	mov	sp, r7
 801783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017840:	4770      	bx	lr

08017842 <prvCopyDataToQueue>:
 8017842:	b580      	push	{r7, lr}
 8017844:	b086      	sub	sp, #24
 8017846:	af00      	add	r7, sp, #0
 8017848:	60f8      	str	r0, [r7, #12]
 801784a:	60b9      	str	r1, [r7, #8]
 801784c:	607a      	str	r2, [r7, #4]
 801784e:	2300      	movs	r3, #0
 8017850:	617b      	str	r3, [r7, #20]
 8017852:	68fb      	ldr	r3, [r7, #12]
 8017854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017856:	613b      	str	r3, [r7, #16]
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801785c:	2b00      	cmp	r3, #0
 801785e:	d10d      	bne.n	801787c <prvCopyDataToQueue+0x3a>
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	681b      	ldr	r3, [r3, #0]
 8017864:	2b00      	cmp	r3, #0
 8017866:	d14d      	bne.n	8017904 <prvCopyDataToQueue+0xc2>
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	689b      	ldr	r3, [r3, #8]
 801786c:	4618      	mov	r0, r3
 801786e:	f001 fc3d 	bl	80190ec <xTaskPriorityDisinherit>
 8017872:	6178      	str	r0, [r7, #20]
 8017874:	68fb      	ldr	r3, [r7, #12]
 8017876:	2200      	movs	r2, #0
 8017878:	609a      	str	r2, [r3, #8]
 801787a:	e043      	b.n	8017904 <prvCopyDataToQueue+0xc2>
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	2b00      	cmp	r3, #0
 8017880:	d119      	bne.n	80178b6 <prvCopyDataToQueue+0x74>
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	6858      	ldr	r0, [r3, #4]
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801788a:	461a      	mov	r2, r3
 801788c:	68b9      	ldr	r1, [r7, #8]
 801788e:	f003 f9fd 	bl	801ac8c <memcpy>
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	685a      	ldr	r2, [r3, #4]
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801789a:	441a      	add	r2, r3
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	605a      	str	r2, [r3, #4]
 80178a0:	68fb      	ldr	r3, [r7, #12]
 80178a2:	685a      	ldr	r2, [r3, #4]
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	689b      	ldr	r3, [r3, #8]
 80178a8:	429a      	cmp	r2, r3
 80178aa:	d32b      	bcc.n	8017904 <prvCopyDataToQueue+0xc2>
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	681a      	ldr	r2, [r3, #0]
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	605a      	str	r2, [r3, #4]
 80178b4:	e026      	b.n	8017904 <prvCopyDataToQueue+0xc2>
 80178b6:	68fb      	ldr	r3, [r7, #12]
 80178b8:	68d8      	ldr	r0, [r3, #12]
 80178ba:	68fb      	ldr	r3, [r7, #12]
 80178bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178be:	461a      	mov	r2, r3
 80178c0:	68b9      	ldr	r1, [r7, #8]
 80178c2:	f003 f9e3 	bl	801ac8c <memcpy>
 80178c6:	68fb      	ldr	r3, [r7, #12]
 80178c8:	68da      	ldr	r2, [r3, #12]
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178ce:	425b      	negs	r3, r3
 80178d0:	441a      	add	r2, r3
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	60da      	str	r2, [r3, #12]
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	68da      	ldr	r2, [r3, #12]
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d207      	bcs.n	80178f2 <prvCopyDataToQueue+0xb0>
 80178e2:	68fb      	ldr	r3, [r7, #12]
 80178e4:	689a      	ldr	r2, [r3, #8]
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178ea:	425b      	negs	r3, r3
 80178ec:	441a      	add	r2, r3
 80178ee:	68fb      	ldr	r3, [r7, #12]
 80178f0:	60da      	str	r2, [r3, #12]
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	2b02      	cmp	r3, #2
 80178f6:	d105      	bne.n	8017904 <prvCopyDataToQueue+0xc2>
 80178f8:	693b      	ldr	r3, [r7, #16]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d002      	beq.n	8017904 <prvCopyDataToQueue+0xc2>
 80178fe:	693b      	ldr	r3, [r7, #16]
 8017900:	3b01      	subs	r3, #1
 8017902:	613b      	str	r3, [r7, #16]
 8017904:	693b      	ldr	r3, [r7, #16]
 8017906:	1c5a      	adds	r2, r3, #1
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	639a      	str	r2, [r3, #56]	; 0x38
 801790c:	697b      	ldr	r3, [r7, #20]
 801790e:	4618      	mov	r0, r3
 8017910:	3718      	adds	r7, #24
 8017912:	46bd      	mov	sp, r7
 8017914:	bd80      	pop	{r7, pc}

08017916 <prvCopyDataFromQueue>:
 8017916:	b580      	push	{r7, lr}
 8017918:	b082      	sub	sp, #8
 801791a:	af00      	add	r7, sp, #0
 801791c:	6078      	str	r0, [r7, #4]
 801791e:	6039      	str	r1, [r7, #0]
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017924:	2b00      	cmp	r3, #0
 8017926:	d018      	beq.n	801795a <prvCopyDataFromQueue+0x44>
 8017928:	687b      	ldr	r3, [r7, #4]
 801792a:	68da      	ldr	r2, [r3, #12]
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017930:	441a      	add	r2, r3
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	60da      	str	r2, [r3, #12]
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	68da      	ldr	r2, [r3, #12]
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	689b      	ldr	r3, [r3, #8]
 801793e:	429a      	cmp	r2, r3
 8017940:	d303      	bcc.n	801794a <prvCopyDataFromQueue+0x34>
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	681a      	ldr	r2, [r3, #0]
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	60da      	str	r2, [r3, #12]
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	68d9      	ldr	r1, [r3, #12]
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017952:	461a      	mov	r2, r3
 8017954:	6838      	ldr	r0, [r7, #0]
 8017956:	f003 f999 	bl	801ac8c <memcpy>
 801795a:	bf00      	nop
 801795c:	3708      	adds	r7, #8
 801795e:	46bd      	mov	sp, r7
 8017960:	bd80      	pop	{r7, pc}

08017962 <prvUnlockQueue>:
 8017962:	b580      	push	{r7, lr}
 8017964:	b084      	sub	sp, #16
 8017966:	af00      	add	r7, sp, #0
 8017968:	6078      	str	r0, [r7, #4]
 801796a:	f002 fad3 	bl	8019f14 <vPortEnterCritical>
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017974:	73fb      	strb	r3, [r7, #15]
 8017976:	e011      	b.n	801799c <prvUnlockQueue+0x3a>
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801797c:	2b00      	cmp	r3, #0
 801797e:	d012      	beq.n	80179a6 <prvUnlockQueue+0x44>
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	3324      	adds	r3, #36	; 0x24
 8017984:	4618      	mov	r0, r3
 8017986:	f001 f933 	bl	8018bf0 <xTaskRemoveFromEventList>
 801798a:	4603      	mov	r3, r0
 801798c:	2b00      	cmp	r3, #0
 801798e:	d001      	beq.n	8017994 <prvUnlockQueue+0x32>
 8017990:	f001 fa30 	bl	8018df4 <vTaskMissedYield>
 8017994:	7bfb      	ldrb	r3, [r7, #15]
 8017996:	3b01      	subs	r3, #1
 8017998:	b2db      	uxtb	r3, r3
 801799a:	73fb      	strb	r3, [r7, #15]
 801799c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	dce9      	bgt.n	8017978 <prvUnlockQueue+0x16>
 80179a4:	e000      	b.n	80179a8 <prvUnlockQueue+0x46>
 80179a6:	bf00      	nop
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	22ff      	movs	r2, #255	; 0xff
 80179ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80179b0:	f002 fae0 	bl	8019f74 <vPortExitCritical>
 80179b4:	f002 faae 	bl	8019f14 <vPortEnterCritical>
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80179be:	73bb      	strb	r3, [r7, #14]
 80179c0:	e011      	b.n	80179e6 <prvUnlockQueue+0x84>
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	691b      	ldr	r3, [r3, #16]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d012      	beq.n	80179f0 <prvUnlockQueue+0x8e>
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	3310      	adds	r3, #16
 80179ce:	4618      	mov	r0, r3
 80179d0:	f001 f90e 	bl	8018bf0 <xTaskRemoveFromEventList>
 80179d4:	4603      	mov	r3, r0
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d001      	beq.n	80179de <prvUnlockQueue+0x7c>
 80179da:	f001 fa0b 	bl	8018df4 <vTaskMissedYield>
 80179de:	7bbb      	ldrb	r3, [r7, #14]
 80179e0:	3b01      	subs	r3, #1
 80179e2:	b2db      	uxtb	r3, r3
 80179e4:	73bb      	strb	r3, [r7, #14]
 80179e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	dce9      	bgt.n	80179c2 <prvUnlockQueue+0x60>
 80179ee:	e000      	b.n	80179f2 <prvUnlockQueue+0x90>
 80179f0:	bf00      	nop
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	22ff      	movs	r2, #255	; 0xff
 80179f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80179fa:	f002 fabb 	bl	8019f74 <vPortExitCritical>
 80179fe:	bf00      	nop
 8017a00:	3710      	adds	r7, #16
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}

08017a06 <prvIsQueueEmpty>:
 8017a06:	b580      	push	{r7, lr}
 8017a08:	b084      	sub	sp, #16
 8017a0a:	af00      	add	r7, sp, #0
 8017a0c:	6078      	str	r0, [r7, #4]
 8017a0e:	f002 fa81 	bl	8019f14 <vPortEnterCritical>
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d102      	bne.n	8017a20 <prvIsQueueEmpty+0x1a>
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	60fb      	str	r3, [r7, #12]
 8017a1e:	e001      	b.n	8017a24 <prvIsQueueEmpty+0x1e>
 8017a20:	2300      	movs	r3, #0
 8017a22:	60fb      	str	r3, [r7, #12]
 8017a24:	f002 faa6 	bl	8019f74 <vPortExitCritical>
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	3710      	adds	r7, #16
 8017a2e:	46bd      	mov	sp, r7
 8017a30:	bd80      	pop	{r7, pc}

08017a32 <prvIsQueueFull>:
 8017a32:	b580      	push	{r7, lr}
 8017a34:	b084      	sub	sp, #16
 8017a36:	af00      	add	r7, sp, #0
 8017a38:	6078      	str	r0, [r7, #4]
 8017a3a:	f002 fa6b 	bl	8019f14 <vPortEnterCritical>
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017a46:	429a      	cmp	r2, r3
 8017a48:	d102      	bne.n	8017a50 <prvIsQueueFull+0x1e>
 8017a4a:	2301      	movs	r3, #1
 8017a4c:	60fb      	str	r3, [r7, #12]
 8017a4e:	e001      	b.n	8017a54 <prvIsQueueFull+0x22>
 8017a50:	2300      	movs	r3, #0
 8017a52:	60fb      	str	r3, [r7, #12]
 8017a54:	f002 fa8e 	bl	8019f74 <vPortExitCritical>
 8017a58:	68fb      	ldr	r3, [r7, #12]
 8017a5a:	4618      	mov	r0, r3
 8017a5c:	3710      	adds	r7, #16
 8017a5e:	46bd      	mov	sp, r7
 8017a60:	bd80      	pop	{r7, pc}
	...

08017a64 <vQueueAddToRegistry>:
 8017a64:	b480      	push	{r7}
 8017a66:	b085      	sub	sp, #20
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	6039      	str	r1, [r7, #0]
 8017a6e:	2300      	movs	r3, #0
 8017a70:	60fb      	str	r3, [r7, #12]
 8017a72:	e014      	b.n	8017a9e <vQueueAddToRegistry+0x3a>
 8017a74:	4a0f      	ldr	r2, [pc, #60]	; (8017ab4 <vQueueAddToRegistry+0x50>)
 8017a76:	68fb      	ldr	r3, [r7, #12]
 8017a78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d10b      	bne.n	8017a98 <vQueueAddToRegistry+0x34>
 8017a80:	490c      	ldr	r1, [pc, #48]	; (8017ab4 <vQueueAddToRegistry+0x50>)
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	683a      	ldr	r2, [r7, #0]
 8017a86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8017a8a:	4a0a      	ldr	r2, [pc, #40]	; (8017ab4 <vQueueAddToRegistry+0x50>)
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	00db      	lsls	r3, r3, #3
 8017a90:	4413      	add	r3, r2
 8017a92:	687a      	ldr	r2, [r7, #4]
 8017a94:	605a      	str	r2, [r3, #4]
 8017a96:	e006      	b.n	8017aa6 <vQueueAddToRegistry+0x42>
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	3301      	adds	r3, #1
 8017a9c:	60fb      	str	r3, [r7, #12]
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	2b07      	cmp	r3, #7
 8017aa2:	d9e7      	bls.n	8017a74 <vQueueAddToRegistry+0x10>
 8017aa4:	bf00      	nop
 8017aa6:	bf00      	nop
 8017aa8:	3714      	adds	r7, #20
 8017aaa:	46bd      	mov	sp, r7
 8017aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab0:	4770      	bx	lr
 8017ab2:	bf00      	nop
 8017ab4:	20001dfc 	.word	0x20001dfc

08017ab8 <vQueueUnregisterQueue>:
 8017ab8:	b480      	push	{r7}
 8017aba:	b085      	sub	sp, #20
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	6078      	str	r0, [r7, #4]
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	60fb      	str	r3, [r7, #12]
 8017ac4:	e016      	b.n	8017af4 <vQueueUnregisterQueue+0x3c>
 8017ac6:	4a10      	ldr	r2, [pc, #64]	; (8017b08 <vQueueUnregisterQueue+0x50>)
 8017ac8:	68fb      	ldr	r3, [r7, #12]
 8017aca:	00db      	lsls	r3, r3, #3
 8017acc:	4413      	add	r3, r2
 8017ace:	685b      	ldr	r3, [r3, #4]
 8017ad0:	687a      	ldr	r2, [r7, #4]
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d10b      	bne.n	8017aee <vQueueUnregisterQueue+0x36>
 8017ad6:	4a0c      	ldr	r2, [pc, #48]	; (8017b08 <vQueueUnregisterQueue+0x50>)
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	2100      	movs	r1, #0
 8017adc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8017ae0:	4a09      	ldr	r2, [pc, #36]	; (8017b08 <vQueueUnregisterQueue+0x50>)
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	00db      	lsls	r3, r3, #3
 8017ae6:	4413      	add	r3, r2
 8017ae8:	2200      	movs	r2, #0
 8017aea:	605a      	str	r2, [r3, #4]
 8017aec:	e006      	b.n	8017afc <vQueueUnregisterQueue+0x44>
 8017aee:	68fb      	ldr	r3, [r7, #12]
 8017af0:	3301      	adds	r3, #1
 8017af2:	60fb      	str	r3, [r7, #12]
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	2b07      	cmp	r3, #7
 8017af8:	d9e5      	bls.n	8017ac6 <vQueueUnregisterQueue+0xe>
 8017afa:	bf00      	nop
 8017afc:	bf00      	nop
 8017afe:	3714      	adds	r7, #20
 8017b00:	46bd      	mov	sp, r7
 8017b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b06:	4770      	bx	lr
 8017b08:	20001dfc 	.word	0x20001dfc

08017b0c <vQueueWaitForMessageRestricted>:
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b086      	sub	sp, #24
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	60f8      	str	r0, [r7, #12]
 8017b14:	60b9      	str	r1, [r7, #8]
 8017b16:	607a      	str	r2, [r7, #4]
 8017b18:	68fb      	ldr	r3, [r7, #12]
 8017b1a:	617b      	str	r3, [r7, #20]
 8017b1c:	f002 f9fa 	bl	8019f14 <vPortEnterCritical>
 8017b20:	697b      	ldr	r3, [r7, #20]
 8017b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017b26:	b25b      	sxtb	r3, r3
 8017b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b2c:	d103      	bne.n	8017b36 <vQueueWaitForMessageRestricted+0x2a>
 8017b2e:	697b      	ldr	r3, [r7, #20]
 8017b30:	2200      	movs	r2, #0
 8017b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017b36:	697b      	ldr	r3, [r7, #20]
 8017b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017b3c:	b25b      	sxtb	r3, r3
 8017b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b42:	d103      	bne.n	8017b4c <vQueueWaitForMessageRestricted+0x40>
 8017b44:	697b      	ldr	r3, [r7, #20]
 8017b46:	2200      	movs	r2, #0
 8017b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017b4c:	f002 fa12 	bl	8019f74 <vPortExitCritical>
 8017b50:	697b      	ldr	r3, [r7, #20]
 8017b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b54:	2b00      	cmp	r3, #0
 8017b56:	d106      	bne.n	8017b66 <vQueueWaitForMessageRestricted+0x5a>
 8017b58:	697b      	ldr	r3, [r7, #20]
 8017b5a:	3324      	adds	r3, #36	; 0x24
 8017b5c:	687a      	ldr	r2, [r7, #4]
 8017b5e:	68b9      	ldr	r1, [r7, #8]
 8017b60:	4618      	mov	r0, r3
 8017b62:	f001 f819 	bl	8018b98 <vTaskPlaceOnEventListRestricted>
 8017b66:	6978      	ldr	r0, [r7, #20]
 8017b68:	f7ff fefb 	bl	8017962 <prvUnlockQueue>
 8017b6c:	bf00      	nop
 8017b6e:	3718      	adds	r7, #24
 8017b70:	46bd      	mov	sp, r7
 8017b72:	bd80      	pop	{r7, pc}

08017b74 <xStreamBufferGenericCreate>:
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b08c      	sub	sp, #48	; 0x30
 8017b78:	af02      	add	r7, sp, #8
 8017b7a:	60f8      	str	r0, [r7, #12]
 8017b7c:	60b9      	str	r1, [r7, #8]
 8017b7e:	607a      	str	r2, [r7, #4]
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	2b01      	cmp	r3, #1
 8017b84:	d110      	bne.n	8017ba8 <xStreamBufferGenericCreate+0x34>
 8017b86:	2301      	movs	r3, #1
 8017b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017b8c:	68fb      	ldr	r3, [r7, #12]
 8017b8e:	2b04      	cmp	r3, #4
 8017b90:	d81b      	bhi.n	8017bca <xStreamBufferGenericCreate+0x56>
 8017b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b96:	f383 8811 	msr	BASEPRI, r3
 8017b9a:	f3bf 8f6f 	isb	sy
 8017b9e:	f3bf 8f4f 	dsb	sy
 8017ba2:	61fb      	str	r3, [r7, #28]
 8017ba4:	bf00      	nop
 8017ba6:	e7fe      	b.n	8017ba6 <xStreamBufferGenericCreate+0x32>
 8017ba8:	2300      	movs	r3, #0
 8017baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017bae:	68fb      	ldr	r3, [r7, #12]
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d10a      	bne.n	8017bca <xStreamBufferGenericCreate+0x56>
 8017bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bb8:	f383 8811 	msr	BASEPRI, r3
 8017bbc:	f3bf 8f6f 	isb	sy
 8017bc0:	f3bf 8f4f 	dsb	sy
 8017bc4:	61bb      	str	r3, [r7, #24]
 8017bc6:	bf00      	nop
 8017bc8:	e7fe      	b.n	8017bc8 <xStreamBufferGenericCreate+0x54>
 8017bca:	68ba      	ldr	r2, [r7, #8]
 8017bcc:	68fb      	ldr	r3, [r7, #12]
 8017bce:	429a      	cmp	r2, r3
 8017bd0:	d90a      	bls.n	8017be8 <xStreamBufferGenericCreate+0x74>
 8017bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017bd6:	f383 8811 	msr	BASEPRI, r3
 8017bda:	f3bf 8f6f 	isb	sy
 8017bde:	f3bf 8f4f 	dsb	sy
 8017be2:	617b      	str	r3, [r7, #20]
 8017be4:	bf00      	nop
 8017be6:	e7fe      	b.n	8017be6 <xStreamBufferGenericCreate+0x72>
 8017be8:	68bb      	ldr	r3, [r7, #8]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d101      	bne.n	8017bf2 <xStreamBufferGenericCreate+0x7e>
 8017bee:	2301      	movs	r3, #1
 8017bf0:	60bb      	str	r3, [r7, #8]
 8017bf2:	68fb      	ldr	r3, [r7, #12]
 8017bf4:	3301      	adds	r3, #1
 8017bf6:	60fb      	str	r3, [r7, #12]
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	3324      	adds	r3, #36	; 0x24
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f002 faab 	bl	801a158 <pvPortMalloc>
 8017c02:	6238      	str	r0, [r7, #32]
 8017c04:	6a3b      	ldr	r3, [r7, #32]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d00a      	beq.n	8017c20 <xStreamBufferGenericCreate+0xac>
 8017c0a:	6a3b      	ldr	r3, [r7, #32]
 8017c0c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8017c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017c14:	9300      	str	r3, [sp, #0]
 8017c16:	68bb      	ldr	r3, [r7, #8]
 8017c18:	68fa      	ldr	r2, [r7, #12]
 8017c1a:	6a38      	ldr	r0, [r7, #32]
 8017c1c:	f000 fafd 	bl	801821a <prvInitialiseNewStreamBuffer>
 8017c20:	6a3b      	ldr	r3, [r7, #32]
 8017c22:	4618      	mov	r0, r3
 8017c24:	3728      	adds	r7, #40	; 0x28
 8017c26:	46bd      	mov	sp, r7
 8017c28:	bd80      	pop	{r7, pc}

08017c2a <xStreamBufferSpacesAvailable>:
 8017c2a:	b480      	push	{r7}
 8017c2c:	b087      	sub	sp, #28
 8017c2e:	af00      	add	r7, sp, #0
 8017c30:	6078      	str	r0, [r7, #4]
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	613b      	str	r3, [r7, #16]
 8017c36:	693b      	ldr	r3, [r7, #16]
 8017c38:	2b00      	cmp	r3, #0
 8017c3a:	d10a      	bne.n	8017c52 <xStreamBufferSpacesAvailable+0x28>
 8017c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c40:	f383 8811 	msr	BASEPRI, r3
 8017c44:	f3bf 8f6f 	isb	sy
 8017c48:	f3bf 8f4f 	dsb	sy
 8017c4c:	60fb      	str	r3, [r7, #12]
 8017c4e:	bf00      	nop
 8017c50:	e7fe      	b.n	8017c50 <xStreamBufferSpacesAvailable+0x26>
 8017c52:	693b      	ldr	r3, [r7, #16]
 8017c54:	689a      	ldr	r2, [r3, #8]
 8017c56:	693b      	ldr	r3, [r7, #16]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	4413      	add	r3, r2
 8017c5c:	617b      	str	r3, [r7, #20]
 8017c5e:	693b      	ldr	r3, [r7, #16]
 8017c60:	685b      	ldr	r3, [r3, #4]
 8017c62:	697a      	ldr	r2, [r7, #20]
 8017c64:	1ad3      	subs	r3, r2, r3
 8017c66:	617b      	str	r3, [r7, #20]
 8017c68:	697b      	ldr	r3, [r7, #20]
 8017c6a:	3b01      	subs	r3, #1
 8017c6c:	617b      	str	r3, [r7, #20]
 8017c6e:	693b      	ldr	r3, [r7, #16]
 8017c70:	689b      	ldr	r3, [r3, #8]
 8017c72:	697a      	ldr	r2, [r7, #20]
 8017c74:	429a      	cmp	r2, r3
 8017c76:	d304      	bcc.n	8017c82 <xStreamBufferSpacesAvailable+0x58>
 8017c78:	693b      	ldr	r3, [r7, #16]
 8017c7a:	689b      	ldr	r3, [r3, #8]
 8017c7c:	697a      	ldr	r2, [r7, #20]
 8017c7e:	1ad3      	subs	r3, r2, r3
 8017c80:	617b      	str	r3, [r7, #20]
 8017c82:	697b      	ldr	r3, [r7, #20]
 8017c84:	4618      	mov	r0, r3
 8017c86:	371c      	adds	r7, #28
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c8e:	4770      	bx	lr

08017c90 <xStreamBufferSend>:
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b090      	sub	sp, #64	; 0x40
 8017c94:	af02      	add	r7, sp, #8
 8017c96:	60f8      	str	r0, [r7, #12]
 8017c98:	60b9      	str	r1, [r7, #8]
 8017c9a:	607a      	str	r2, [r7, #4]
 8017c9c:	603b      	str	r3, [r7, #0]
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8017caa:	68bb      	ldr	r3, [r7, #8]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d10a      	bne.n	8017cc6 <xStreamBufferSend+0x36>
 8017cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cb4:	f383 8811 	msr	BASEPRI, r3
 8017cb8:	f3bf 8f6f 	isb	sy
 8017cbc:	f3bf 8f4f 	dsb	sy
 8017cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8017cc2:	bf00      	nop
 8017cc4:	e7fe      	b.n	8017cc4 <xStreamBufferSend+0x34>
 8017cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d10a      	bne.n	8017ce2 <xStreamBufferSend+0x52>
 8017ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cd0:	f383 8811 	msr	BASEPRI, r3
 8017cd4:	f3bf 8f6f 	isb	sy
 8017cd8:	f3bf 8f4f 	dsb	sy
 8017cdc:	623b      	str	r3, [r7, #32]
 8017cde:	bf00      	nop
 8017ce0:	e7fe      	b.n	8017ce0 <xStreamBufferSend+0x50>
 8017ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ce4:	7f1b      	ldrb	r3, [r3, #28]
 8017ce6:	f003 0301 	and.w	r3, r3, #1
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	d011      	beq.n	8017d12 <xStreamBufferSend+0x82>
 8017cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf0:	3304      	adds	r3, #4
 8017cf2:	633b      	str	r3, [r7, #48]	; 0x30
 8017cf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	429a      	cmp	r2, r3
 8017cfa:	d80a      	bhi.n	8017d12 <xStreamBufferSend+0x82>
 8017cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d00:	f383 8811 	msr	BASEPRI, r3
 8017d04:	f3bf 8f6f 	isb	sy
 8017d08:	f3bf 8f4f 	dsb	sy
 8017d0c:	61fb      	str	r3, [r7, #28]
 8017d0e:	bf00      	nop
 8017d10:	e7fe      	b.n	8017d10 <xStreamBufferSend+0x80>
 8017d12:	683b      	ldr	r3, [r7, #0]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d03e      	beq.n	8017d96 <xStreamBufferSend+0x106>
 8017d18:	f107 0310 	add.w	r3, r7, #16
 8017d1c:	4618      	mov	r0, r3
 8017d1e:	f000 ffcb 	bl	8018cb8 <vTaskSetTimeOutState>
 8017d22:	f002 f8f7 	bl	8019f14 <vPortEnterCritical>
 8017d26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017d28:	f7ff ff7f 	bl	8017c2a <xStreamBufferSpacesAvailable>
 8017d2c:	6378      	str	r0, [r7, #52]	; 0x34
 8017d2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d32:	429a      	cmp	r2, r3
 8017d34:	d217      	bcs.n	8017d66 <xStreamBufferSend+0xd6>
 8017d36:	2000      	movs	r0, #0
 8017d38:	f001 fbfa 	bl	8019530 <xTaskNotifyStateClear>
 8017d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d3e:	695b      	ldr	r3, [r3, #20]
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d00a      	beq.n	8017d5a <xStreamBufferSend+0xca>
 8017d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d48:	f383 8811 	msr	BASEPRI, r3
 8017d4c:	f3bf 8f6f 	isb	sy
 8017d50:	f3bf 8f4f 	dsb	sy
 8017d54:	61bb      	str	r3, [r7, #24]
 8017d56:	bf00      	nop
 8017d58:	e7fe      	b.n	8017d58 <xStreamBufferSend+0xc8>
 8017d5a:	f001 f931 	bl	8018fc0 <xTaskGetCurrentTaskHandle>
 8017d5e:	4602      	mov	r2, r0
 8017d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d62:	615a      	str	r2, [r3, #20]
 8017d64:	e002      	b.n	8017d6c <xStreamBufferSend+0xdc>
 8017d66:	f002 f905 	bl	8019f74 <vPortExitCritical>
 8017d6a:	e014      	b.n	8017d96 <xStreamBufferSend+0x106>
 8017d6c:	f002 f902 	bl	8019f74 <vPortExitCritical>
 8017d70:	683b      	ldr	r3, [r7, #0]
 8017d72:	2200      	movs	r2, #0
 8017d74:	2100      	movs	r1, #0
 8017d76:	2000      	movs	r0, #0
 8017d78:	f001 fabc 	bl	80192f4 <xTaskNotifyWait>
 8017d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d7e:	2200      	movs	r2, #0
 8017d80:	615a      	str	r2, [r3, #20]
 8017d82:	463a      	mov	r2, r7
 8017d84:	f107 0310 	add.w	r3, r7, #16
 8017d88:	4611      	mov	r1, r2
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	f000 ffd0 	bl	8018d30 <xTaskCheckForTimeOut>
 8017d90:	4603      	mov	r3, r0
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d0c5      	beq.n	8017d22 <xStreamBufferSend+0x92>
 8017d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d103      	bne.n	8017da4 <xStreamBufferSend+0x114>
 8017d9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017d9e:	f7ff ff44 	bl	8017c2a <xStreamBufferSpacesAvailable>
 8017da2:	6378      	str	r0, [r7, #52]	; 0x34
 8017da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da6:	9300      	str	r3, [sp, #0]
 8017da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017daa:	687a      	ldr	r2, [r7, #4]
 8017dac:	68b9      	ldr	r1, [r7, #8]
 8017dae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017db0:	f000 f823 	bl	8017dfa <prvWriteMessageToBuffer>
 8017db4:	62b8      	str	r0, [r7, #40]	; 0x28
 8017db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d019      	beq.n	8017df0 <xStreamBufferSend+0x160>
 8017dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017dbe:	f000 fa0c 	bl	80181da <prvBytesInBuffer>
 8017dc2:	4602      	mov	r2, r0
 8017dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dc6:	68db      	ldr	r3, [r3, #12]
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d311      	bcc.n	8017df0 <xStreamBufferSend+0x160>
 8017dcc:	f000 fcba 	bl	8018744 <vTaskSuspendAll>
 8017dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dd2:	691b      	ldr	r3, [r3, #16]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d009      	beq.n	8017dec <xStreamBufferSend+0x15c>
 8017dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017dda:	6918      	ldr	r0, [r3, #16]
 8017ddc:	2300      	movs	r3, #0
 8017dde:	2200      	movs	r2, #0
 8017de0:	2100      	movs	r1, #0
 8017de2:	f001 fae7 	bl	80193b4 <xTaskGenericNotify>
 8017de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017de8:	2200      	movs	r2, #0
 8017dea:	611a      	str	r2, [r3, #16]
 8017dec:	f000 fcb8 	bl	8018760 <xTaskResumeAll>
 8017df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017df2:	4618      	mov	r0, r3
 8017df4:	3738      	adds	r7, #56	; 0x38
 8017df6:	46bd      	mov	sp, r7
 8017df8:	bd80      	pop	{r7, pc}

08017dfa <prvWriteMessageToBuffer>:
 8017dfa:	b580      	push	{r7, lr}
 8017dfc:	b086      	sub	sp, #24
 8017dfe:	af00      	add	r7, sp, #0
 8017e00:	60f8      	str	r0, [r7, #12]
 8017e02:	60b9      	str	r1, [r7, #8]
 8017e04:	607a      	str	r2, [r7, #4]
 8017e06:	603b      	str	r3, [r7, #0]
 8017e08:	683b      	ldr	r3, [r7, #0]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d102      	bne.n	8017e14 <prvWriteMessageToBuffer+0x1a>
 8017e0e:	2300      	movs	r3, #0
 8017e10:	617b      	str	r3, [r7, #20]
 8017e12:	e01d      	b.n	8017e50 <prvWriteMessageToBuffer+0x56>
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	7f1b      	ldrb	r3, [r3, #28]
 8017e18:	f003 0301 	and.w	r3, r3, #1
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d108      	bne.n	8017e32 <prvWriteMessageToBuffer+0x38>
 8017e20:	2301      	movs	r3, #1
 8017e22:	617b      	str	r3, [r7, #20]
 8017e24:	687a      	ldr	r2, [r7, #4]
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	4293      	cmp	r3, r2
 8017e2a:	bf28      	it	cs
 8017e2c:	4613      	movcs	r3, r2
 8017e2e:	607b      	str	r3, [r7, #4]
 8017e30:	e00e      	b.n	8017e50 <prvWriteMessageToBuffer+0x56>
 8017e32:	683a      	ldr	r2, [r7, #0]
 8017e34:	6a3b      	ldr	r3, [r7, #32]
 8017e36:	429a      	cmp	r2, r3
 8017e38:	d308      	bcc.n	8017e4c <prvWriteMessageToBuffer+0x52>
 8017e3a:	2301      	movs	r3, #1
 8017e3c:	617b      	str	r3, [r7, #20]
 8017e3e:	1d3b      	adds	r3, r7, #4
 8017e40:	2204      	movs	r2, #4
 8017e42:	4619      	mov	r1, r3
 8017e44:	68f8      	ldr	r0, [r7, #12]
 8017e46:	f000 f8dc 	bl	8018002 <prvWriteBytesToBuffer>
 8017e4a:	e001      	b.n	8017e50 <prvWriteMessageToBuffer+0x56>
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	617b      	str	r3, [r7, #20]
 8017e50:	697b      	ldr	r3, [r7, #20]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d007      	beq.n	8017e66 <prvWriteMessageToBuffer+0x6c>
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	461a      	mov	r2, r3
 8017e5a:	68b9      	ldr	r1, [r7, #8]
 8017e5c:	68f8      	ldr	r0, [r7, #12]
 8017e5e:	f000 f8d0 	bl	8018002 <prvWriteBytesToBuffer>
 8017e62:	6138      	str	r0, [r7, #16]
 8017e64:	e001      	b.n	8017e6a <prvWriteMessageToBuffer+0x70>
 8017e66:	2300      	movs	r3, #0
 8017e68:	613b      	str	r3, [r7, #16]
 8017e6a:	693b      	ldr	r3, [r7, #16]
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	3718      	adds	r7, #24
 8017e70:	46bd      	mov	sp, r7
 8017e72:	bd80      	pop	{r7, pc}

08017e74 <xStreamBufferReceive>:
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b08e      	sub	sp, #56	; 0x38
 8017e78:	af02      	add	r7, sp, #8
 8017e7a:	60f8      	str	r0, [r7, #12]
 8017e7c:	60b9      	str	r1, [r7, #8]
 8017e7e:	607a      	str	r2, [r7, #4]
 8017e80:	603b      	str	r3, [r7, #0]
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	623b      	str	r3, [r7, #32]
 8017e86:	2300      	movs	r3, #0
 8017e88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017e8a:	68bb      	ldr	r3, [r7, #8]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d10a      	bne.n	8017ea6 <xStreamBufferReceive+0x32>
 8017e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e94:	f383 8811 	msr	BASEPRI, r3
 8017e98:	f3bf 8f6f 	isb	sy
 8017e9c:	f3bf 8f4f 	dsb	sy
 8017ea0:	61fb      	str	r3, [r7, #28]
 8017ea2:	bf00      	nop
 8017ea4:	e7fe      	b.n	8017ea4 <xStreamBufferReceive+0x30>
 8017ea6:	6a3b      	ldr	r3, [r7, #32]
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d10a      	bne.n	8017ec2 <xStreamBufferReceive+0x4e>
 8017eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eb0:	f383 8811 	msr	BASEPRI, r3
 8017eb4:	f3bf 8f6f 	isb	sy
 8017eb8:	f3bf 8f4f 	dsb	sy
 8017ebc:	61bb      	str	r3, [r7, #24]
 8017ebe:	bf00      	nop
 8017ec0:	e7fe      	b.n	8017ec0 <xStreamBufferReceive+0x4c>
 8017ec2:	6a3b      	ldr	r3, [r7, #32]
 8017ec4:	7f1b      	ldrb	r3, [r3, #28]
 8017ec6:	f003 0301 	and.w	r3, r3, #1
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d002      	beq.n	8017ed4 <xStreamBufferReceive+0x60>
 8017ece:	2304      	movs	r3, #4
 8017ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8017ed2:	e001      	b.n	8017ed8 <xStreamBufferReceive+0x64>
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d034      	beq.n	8017f48 <xStreamBufferReceive+0xd4>
 8017ede:	f002 f819 	bl	8019f14 <vPortEnterCritical>
 8017ee2:	6a38      	ldr	r0, [r7, #32]
 8017ee4:	f000 f979 	bl	80181da <prvBytesInBuffer>
 8017ee8:	62b8      	str	r0, [r7, #40]	; 0x28
 8017eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eee:	429a      	cmp	r2, r3
 8017ef0:	d816      	bhi.n	8017f20 <xStreamBufferReceive+0xac>
 8017ef2:	2000      	movs	r0, #0
 8017ef4:	f001 fb1c 	bl	8019530 <xTaskNotifyStateClear>
 8017ef8:	6a3b      	ldr	r3, [r7, #32]
 8017efa:	691b      	ldr	r3, [r3, #16]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d00a      	beq.n	8017f16 <xStreamBufferReceive+0xa2>
 8017f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f04:	f383 8811 	msr	BASEPRI, r3
 8017f08:	f3bf 8f6f 	isb	sy
 8017f0c:	f3bf 8f4f 	dsb	sy
 8017f10:	617b      	str	r3, [r7, #20]
 8017f12:	bf00      	nop
 8017f14:	e7fe      	b.n	8017f14 <xStreamBufferReceive+0xa0>
 8017f16:	f001 f853 	bl	8018fc0 <xTaskGetCurrentTaskHandle>
 8017f1a:	4602      	mov	r2, r0
 8017f1c:	6a3b      	ldr	r3, [r7, #32]
 8017f1e:	611a      	str	r2, [r3, #16]
 8017f20:	f002 f828 	bl	8019f74 <vPortExitCritical>
 8017f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f28:	429a      	cmp	r2, r3
 8017f2a:	d811      	bhi.n	8017f50 <xStreamBufferReceive+0xdc>
 8017f2c:	683b      	ldr	r3, [r7, #0]
 8017f2e:	2200      	movs	r2, #0
 8017f30:	2100      	movs	r1, #0
 8017f32:	2000      	movs	r0, #0
 8017f34:	f001 f9de 	bl	80192f4 <xTaskNotifyWait>
 8017f38:	6a3b      	ldr	r3, [r7, #32]
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	611a      	str	r2, [r3, #16]
 8017f3e:	6a38      	ldr	r0, [r7, #32]
 8017f40:	f000 f94b 	bl	80181da <prvBytesInBuffer>
 8017f44:	62b8      	str	r0, [r7, #40]	; 0x28
 8017f46:	e003      	b.n	8017f50 <xStreamBufferReceive+0xdc>
 8017f48:	6a38      	ldr	r0, [r7, #32]
 8017f4a:	f000 f946 	bl	80181da <prvBytesInBuffer>
 8017f4e:	62b8      	str	r0, [r7, #40]	; 0x28
 8017f50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d91d      	bls.n	8017f94 <xStreamBufferReceive+0x120>
 8017f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f5a:	9300      	str	r3, [sp, #0]
 8017f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f5e:	687a      	ldr	r2, [r7, #4]
 8017f60:	68b9      	ldr	r1, [r7, #8]
 8017f62:	6a38      	ldr	r0, [r7, #32]
 8017f64:	f000 f81b 	bl	8017f9e <prvReadMessageFromBuffer>
 8017f68:	62f8      	str	r0, [r7, #44]	; 0x2c
 8017f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d011      	beq.n	8017f94 <xStreamBufferReceive+0x120>
 8017f70:	f000 fbe8 	bl	8018744 <vTaskSuspendAll>
 8017f74:	6a3b      	ldr	r3, [r7, #32]
 8017f76:	695b      	ldr	r3, [r3, #20]
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d009      	beq.n	8017f90 <xStreamBufferReceive+0x11c>
 8017f7c:	6a3b      	ldr	r3, [r7, #32]
 8017f7e:	6958      	ldr	r0, [r3, #20]
 8017f80:	2300      	movs	r3, #0
 8017f82:	2200      	movs	r2, #0
 8017f84:	2100      	movs	r1, #0
 8017f86:	f001 fa15 	bl	80193b4 <xTaskGenericNotify>
 8017f8a:	6a3b      	ldr	r3, [r7, #32]
 8017f8c:	2200      	movs	r2, #0
 8017f8e:	615a      	str	r2, [r3, #20]
 8017f90:	f000 fbe6 	bl	8018760 <xTaskResumeAll>
 8017f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017f96:	4618      	mov	r0, r3
 8017f98:	3730      	adds	r7, #48	; 0x30
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}

08017f9e <prvReadMessageFromBuffer>:
 8017f9e:	b580      	push	{r7, lr}
 8017fa0:	b088      	sub	sp, #32
 8017fa2:	af00      	add	r7, sp, #0
 8017fa4:	60f8      	str	r0, [r7, #12]
 8017fa6:	60b9      	str	r1, [r7, #8]
 8017fa8:	607a      	str	r2, [r7, #4]
 8017faa:	603b      	str	r3, [r7, #0]
 8017fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d019      	beq.n	8017fe6 <prvReadMessageFromBuffer+0x48>
 8017fb2:	68fb      	ldr	r3, [r7, #12]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	61bb      	str	r3, [r7, #24]
 8017fb8:	f107 0110 	add.w	r1, r7, #16
 8017fbc:	683b      	ldr	r3, [r7, #0]
 8017fbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017fc0:	68f8      	ldr	r0, [r7, #12]
 8017fc2:	f000 f890 	bl	80180e6 <prvReadBytesFromBuffer>
 8017fc6:	693b      	ldr	r3, [r7, #16]
 8017fc8:	61fb      	str	r3, [r7, #28]
 8017fca:	683a      	ldr	r2, [r7, #0]
 8017fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017fce:	1ad3      	subs	r3, r2, r3
 8017fd0:	603b      	str	r3, [r7, #0]
 8017fd2:	69fa      	ldr	r2, [r7, #28]
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d907      	bls.n	8017fea <prvReadMessageFromBuffer+0x4c>
 8017fda:	68fb      	ldr	r3, [r7, #12]
 8017fdc:	69ba      	ldr	r2, [r7, #24]
 8017fde:	601a      	str	r2, [r3, #0]
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	61fb      	str	r3, [r7, #28]
 8017fe4:	e001      	b.n	8017fea <prvReadMessageFromBuffer+0x4c>
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	61fb      	str	r3, [r7, #28]
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	69fa      	ldr	r2, [r7, #28]
 8017fee:	68b9      	ldr	r1, [r7, #8]
 8017ff0:	68f8      	ldr	r0, [r7, #12]
 8017ff2:	f000 f878 	bl	80180e6 <prvReadBytesFromBuffer>
 8017ff6:	6178      	str	r0, [r7, #20]
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	3720      	adds	r7, #32
 8017ffe:	46bd      	mov	sp, r7
 8018000:	bd80      	pop	{r7, pc}

08018002 <prvWriteBytesToBuffer>:
 8018002:	b580      	push	{r7, lr}
 8018004:	b08a      	sub	sp, #40	; 0x28
 8018006:	af00      	add	r7, sp, #0
 8018008:	60f8      	str	r0, [r7, #12]
 801800a:	60b9      	str	r1, [r7, #8]
 801800c:	607a      	str	r2, [r7, #4]
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	2b00      	cmp	r3, #0
 8018012:	d10a      	bne.n	801802a <prvWriteBytesToBuffer+0x28>
 8018014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018018:	f383 8811 	msr	BASEPRI, r3
 801801c:	f3bf 8f6f 	isb	sy
 8018020:	f3bf 8f4f 	dsb	sy
 8018024:	61fb      	str	r3, [r7, #28]
 8018026:	bf00      	nop
 8018028:	e7fe      	b.n	8018028 <prvWriteBytesToBuffer+0x26>
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	685b      	ldr	r3, [r3, #4]
 801802e:	627b      	str	r3, [r7, #36]	; 0x24
 8018030:	68fb      	ldr	r3, [r7, #12]
 8018032:	689a      	ldr	r2, [r3, #8]
 8018034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018036:	1ad3      	subs	r3, r2, r3
 8018038:	687a      	ldr	r2, [r7, #4]
 801803a:	4293      	cmp	r3, r2
 801803c:	bf28      	it	cs
 801803e:	4613      	movcs	r3, r2
 8018040:	623b      	str	r3, [r7, #32]
 8018042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018044:	6a3b      	ldr	r3, [r7, #32]
 8018046:	441a      	add	r2, r3
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	689b      	ldr	r3, [r3, #8]
 801804c:	429a      	cmp	r2, r3
 801804e:	d90a      	bls.n	8018066 <prvWriteBytesToBuffer+0x64>
 8018050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018054:	f383 8811 	msr	BASEPRI, r3
 8018058:	f3bf 8f6f 	isb	sy
 801805c:	f3bf 8f4f 	dsb	sy
 8018060:	61bb      	str	r3, [r7, #24]
 8018062:	bf00      	nop
 8018064:	e7fe      	b.n	8018064 <prvWriteBytesToBuffer+0x62>
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	699a      	ldr	r2, [r3, #24]
 801806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806c:	4413      	add	r3, r2
 801806e:	6a3a      	ldr	r2, [r7, #32]
 8018070:	68b9      	ldr	r1, [r7, #8]
 8018072:	4618      	mov	r0, r3
 8018074:	f002 fe0a 	bl	801ac8c <memcpy>
 8018078:	687a      	ldr	r2, [r7, #4]
 801807a:	6a3b      	ldr	r3, [r7, #32]
 801807c:	429a      	cmp	r2, r3
 801807e:	d91c      	bls.n	80180ba <prvWriteBytesToBuffer+0xb8>
 8018080:	687a      	ldr	r2, [r7, #4]
 8018082:	6a3b      	ldr	r3, [r7, #32]
 8018084:	1ad2      	subs	r2, r2, r3
 8018086:	68fb      	ldr	r3, [r7, #12]
 8018088:	689b      	ldr	r3, [r3, #8]
 801808a:	429a      	cmp	r2, r3
 801808c:	d90a      	bls.n	80180a4 <prvWriteBytesToBuffer+0xa2>
 801808e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018092:	f383 8811 	msr	BASEPRI, r3
 8018096:	f3bf 8f6f 	isb	sy
 801809a:	f3bf 8f4f 	dsb	sy
 801809e:	617b      	str	r3, [r7, #20]
 80180a0:	bf00      	nop
 80180a2:	e7fe      	b.n	80180a2 <prvWriteBytesToBuffer+0xa0>
 80180a4:	68fb      	ldr	r3, [r7, #12]
 80180a6:	6998      	ldr	r0, [r3, #24]
 80180a8:	68ba      	ldr	r2, [r7, #8]
 80180aa:	6a3b      	ldr	r3, [r7, #32]
 80180ac:	18d1      	adds	r1, r2, r3
 80180ae:	687a      	ldr	r2, [r7, #4]
 80180b0:	6a3b      	ldr	r3, [r7, #32]
 80180b2:	1ad3      	subs	r3, r2, r3
 80180b4:	461a      	mov	r2, r3
 80180b6:	f002 fde9 	bl	801ac8c <memcpy>
 80180ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	4413      	add	r3, r2
 80180c0:	627b      	str	r3, [r7, #36]	; 0x24
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	689b      	ldr	r3, [r3, #8]
 80180c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180c8:	429a      	cmp	r2, r3
 80180ca:	d304      	bcc.n	80180d6 <prvWriteBytesToBuffer+0xd4>
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	689b      	ldr	r3, [r3, #8]
 80180d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180d2:	1ad3      	subs	r3, r2, r3
 80180d4:	627b      	str	r3, [r7, #36]	; 0x24
 80180d6:	68fb      	ldr	r3, [r7, #12]
 80180d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180da:	605a      	str	r2, [r3, #4]
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	4618      	mov	r0, r3
 80180e0:	3728      	adds	r7, #40	; 0x28
 80180e2:	46bd      	mov	sp, r7
 80180e4:	bd80      	pop	{r7, pc}

080180e6 <prvReadBytesFromBuffer>:
 80180e6:	b580      	push	{r7, lr}
 80180e8:	b08a      	sub	sp, #40	; 0x28
 80180ea:	af00      	add	r7, sp, #0
 80180ec:	60f8      	str	r0, [r7, #12]
 80180ee:	60b9      	str	r1, [r7, #8]
 80180f0:	607a      	str	r2, [r7, #4]
 80180f2:	603b      	str	r3, [r7, #0]
 80180f4:	687a      	ldr	r2, [r7, #4]
 80180f6:	683b      	ldr	r3, [r7, #0]
 80180f8:	4293      	cmp	r3, r2
 80180fa:	bf28      	it	cs
 80180fc:	4613      	movcs	r3, r2
 80180fe:	623b      	str	r3, [r7, #32]
 8018100:	6a3b      	ldr	r3, [r7, #32]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d064      	beq.n	80181d0 <prvReadBytesFromBuffer+0xea>
 8018106:	68fb      	ldr	r3, [r7, #12]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	627b      	str	r3, [r7, #36]	; 0x24
 801810c:	68fb      	ldr	r3, [r7, #12]
 801810e:	689a      	ldr	r2, [r3, #8]
 8018110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018112:	1ad3      	subs	r3, r2, r3
 8018114:	6a3a      	ldr	r2, [r7, #32]
 8018116:	4293      	cmp	r3, r2
 8018118:	bf28      	it	cs
 801811a:	4613      	movcs	r3, r2
 801811c:	61fb      	str	r3, [r7, #28]
 801811e:	69fa      	ldr	r2, [r7, #28]
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	429a      	cmp	r2, r3
 8018124:	d90a      	bls.n	801813c <prvReadBytesFromBuffer+0x56>
 8018126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801812a:	f383 8811 	msr	BASEPRI, r3
 801812e:	f3bf 8f6f 	isb	sy
 8018132:	f3bf 8f4f 	dsb	sy
 8018136:	61bb      	str	r3, [r7, #24]
 8018138:	bf00      	nop
 801813a:	e7fe      	b.n	801813a <prvReadBytesFromBuffer+0x54>
 801813c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801813e:	69fb      	ldr	r3, [r7, #28]
 8018140:	441a      	add	r2, r3
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	689b      	ldr	r3, [r3, #8]
 8018146:	429a      	cmp	r2, r3
 8018148:	d90a      	bls.n	8018160 <prvReadBytesFromBuffer+0x7a>
 801814a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801814e:	f383 8811 	msr	BASEPRI, r3
 8018152:	f3bf 8f6f 	isb	sy
 8018156:	f3bf 8f4f 	dsb	sy
 801815a:	617b      	str	r3, [r7, #20]
 801815c:	bf00      	nop
 801815e:	e7fe      	b.n	801815e <prvReadBytesFromBuffer+0x78>
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	699a      	ldr	r2, [r3, #24]
 8018164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018166:	4413      	add	r3, r2
 8018168:	69fa      	ldr	r2, [r7, #28]
 801816a:	4619      	mov	r1, r3
 801816c:	68b8      	ldr	r0, [r7, #8]
 801816e:	f002 fd8d 	bl	801ac8c <memcpy>
 8018172:	6a3a      	ldr	r2, [r7, #32]
 8018174:	69fb      	ldr	r3, [r7, #28]
 8018176:	429a      	cmp	r2, r3
 8018178:	d919      	bls.n	80181ae <prvReadBytesFromBuffer+0xc8>
 801817a:	6a3a      	ldr	r2, [r7, #32]
 801817c:	687b      	ldr	r3, [r7, #4]
 801817e:	429a      	cmp	r2, r3
 8018180:	d90a      	bls.n	8018198 <prvReadBytesFromBuffer+0xb2>
 8018182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018186:	f383 8811 	msr	BASEPRI, r3
 801818a:	f3bf 8f6f 	isb	sy
 801818e:	f3bf 8f4f 	dsb	sy
 8018192:	613b      	str	r3, [r7, #16]
 8018194:	bf00      	nop
 8018196:	e7fe      	b.n	8018196 <prvReadBytesFromBuffer+0xb0>
 8018198:	68ba      	ldr	r2, [r7, #8]
 801819a:	69fb      	ldr	r3, [r7, #28]
 801819c:	18d0      	adds	r0, r2, r3
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	6999      	ldr	r1, [r3, #24]
 80181a2:	6a3a      	ldr	r2, [r7, #32]
 80181a4:	69fb      	ldr	r3, [r7, #28]
 80181a6:	1ad3      	subs	r3, r2, r3
 80181a8:	461a      	mov	r2, r3
 80181aa:	f002 fd6f 	bl	801ac8c <memcpy>
 80181ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181b0:	6a3b      	ldr	r3, [r7, #32]
 80181b2:	4413      	add	r3, r2
 80181b4:	627b      	str	r3, [r7, #36]	; 0x24
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	689b      	ldr	r3, [r3, #8]
 80181ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181bc:	429a      	cmp	r2, r3
 80181be:	d304      	bcc.n	80181ca <prvReadBytesFromBuffer+0xe4>
 80181c0:	68fb      	ldr	r3, [r7, #12]
 80181c2:	689b      	ldr	r3, [r3, #8]
 80181c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181c6:	1ad3      	subs	r3, r2, r3
 80181c8:	627b      	str	r3, [r7, #36]	; 0x24
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80181ce:	601a      	str	r2, [r3, #0]
 80181d0:	6a3b      	ldr	r3, [r7, #32]
 80181d2:	4618      	mov	r0, r3
 80181d4:	3728      	adds	r7, #40	; 0x28
 80181d6:	46bd      	mov	sp, r7
 80181d8:	bd80      	pop	{r7, pc}

080181da <prvBytesInBuffer>:
 80181da:	b480      	push	{r7}
 80181dc:	b085      	sub	sp, #20
 80181de:	af00      	add	r7, sp, #0
 80181e0:	6078      	str	r0, [r7, #4]
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	689a      	ldr	r2, [r3, #8]
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	685b      	ldr	r3, [r3, #4]
 80181ea:	4413      	add	r3, r2
 80181ec:	60fb      	str	r3, [r7, #12]
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	68fa      	ldr	r2, [r7, #12]
 80181f4:	1ad3      	subs	r3, r2, r3
 80181f6:	60fb      	str	r3, [r7, #12]
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	689b      	ldr	r3, [r3, #8]
 80181fc:	68fa      	ldr	r2, [r7, #12]
 80181fe:	429a      	cmp	r2, r3
 8018200:	d304      	bcc.n	801820c <prvBytesInBuffer+0x32>
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	689b      	ldr	r3, [r3, #8]
 8018206:	68fa      	ldr	r2, [r7, #12]
 8018208:	1ad3      	subs	r3, r2, r3
 801820a:	60fb      	str	r3, [r7, #12]
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	4618      	mov	r0, r3
 8018210:	3714      	adds	r7, #20
 8018212:	46bd      	mov	sp, r7
 8018214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018218:	4770      	bx	lr

0801821a <prvInitialiseNewStreamBuffer>:
 801821a:	b580      	push	{r7, lr}
 801821c:	b086      	sub	sp, #24
 801821e:	af00      	add	r7, sp, #0
 8018220:	60f8      	str	r0, [r7, #12]
 8018222:	60b9      	str	r1, [r7, #8]
 8018224:	607a      	str	r2, [r7, #4]
 8018226:	603b      	str	r3, [r7, #0]
 8018228:	2355      	movs	r3, #85	; 0x55
 801822a:	617b      	str	r3, [r7, #20]
 801822c:	687a      	ldr	r2, [r7, #4]
 801822e:	6979      	ldr	r1, [r7, #20]
 8018230:	68b8      	ldr	r0, [r7, #8]
 8018232:	f002 fd39 	bl	801aca8 <memset>
 8018236:	4602      	mov	r2, r0
 8018238:	68bb      	ldr	r3, [r7, #8]
 801823a:	4293      	cmp	r3, r2
 801823c:	d00a      	beq.n	8018254 <prvInitialiseNewStreamBuffer+0x3a>
 801823e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018242:	f383 8811 	msr	BASEPRI, r3
 8018246:	f3bf 8f6f 	isb	sy
 801824a:	f3bf 8f4f 	dsb	sy
 801824e:	613b      	str	r3, [r7, #16]
 8018250:	bf00      	nop
 8018252:	e7fe      	b.n	8018252 <prvInitialiseNewStreamBuffer+0x38>
 8018254:	2224      	movs	r2, #36	; 0x24
 8018256:	2100      	movs	r1, #0
 8018258:	68f8      	ldr	r0, [r7, #12]
 801825a:	f002 fd25 	bl	801aca8 <memset>
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	68ba      	ldr	r2, [r7, #8]
 8018262:	619a      	str	r2, [r3, #24]
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	687a      	ldr	r2, [r7, #4]
 8018268:	609a      	str	r2, [r3, #8]
 801826a:	68fb      	ldr	r3, [r7, #12]
 801826c:	683a      	ldr	r2, [r7, #0]
 801826e:	60da      	str	r2, [r3, #12]
 8018270:	68fb      	ldr	r3, [r7, #12]
 8018272:	f897 2020 	ldrb.w	r2, [r7, #32]
 8018276:	771a      	strb	r2, [r3, #28]
 8018278:	bf00      	nop
 801827a:	3718      	adds	r7, #24
 801827c:	46bd      	mov	sp, r7
 801827e:	bd80      	pop	{r7, pc}

08018280 <xTaskCreateStatic>:
 8018280:	b580      	push	{r7, lr}
 8018282:	b08e      	sub	sp, #56	; 0x38
 8018284:	af04      	add	r7, sp, #16
 8018286:	60f8      	str	r0, [r7, #12]
 8018288:	60b9      	str	r1, [r7, #8]
 801828a:	607a      	str	r2, [r7, #4]
 801828c:	603b      	str	r3, [r7, #0]
 801828e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018290:	2b00      	cmp	r3, #0
 8018292:	d10a      	bne.n	80182aa <xTaskCreateStatic+0x2a>
 8018294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018298:	f383 8811 	msr	BASEPRI, r3
 801829c:	f3bf 8f6f 	isb	sy
 80182a0:	f3bf 8f4f 	dsb	sy
 80182a4:	623b      	str	r3, [r7, #32]
 80182a6:	bf00      	nop
 80182a8:	e7fe      	b.n	80182a8 <xTaskCreateStatic+0x28>
 80182aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d10a      	bne.n	80182c6 <xTaskCreateStatic+0x46>
 80182b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182b4:	f383 8811 	msr	BASEPRI, r3
 80182b8:	f3bf 8f6f 	isb	sy
 80182bc:	f3bf 8f4f 	dsb	sy
 80182c0:	61fb      	str	r3, [r7, #28]
 80182c2:	bf00      	nop
 80182c4:	e7fe      	b.n	80182c4 <xTaskCreateStatic+0x44>
 80182c6:	23c0      	movs	r3, #192	; 0xc0
 80182c8:	613b      	str	r3, [r7, #16]
 80182ca:	693b      	ldr	r3, [r7, #16]
 80182cc:	2bc0      	cmp	r3, #192	; 0xc0
 80182ce:	d00a      	beq.n	80182e6 <xTaskCreateStatic+0x66>
 80182d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182d4:	f383 8811 	msr	BASEPRI, r3
 80182d8:	f3bf 8f6f 	isb	sy
 80182dc:	f3bf 8f4f 	dsb	sy
 80182e0:	61bb      	str	r3, [r7, #24]
 80182e2:	bf00      	nop
 80182e4:	e7fe      	b.n	80182e4 <xTaskCreateStatic+0x64>
 80182e6:	693b      	ldr	r3, [r7, #16]
 80182e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d01e      	beq.n	801832c <xTaskCreateStatic+0xac>
 80182ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d01b      	beq.n	801832c <xTaskCreateStatic+0xac>
 80182f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182f6:	627b      	str	r3, [r7, #36]	; 0x24
 80182f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80182fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80182fc:	631a      	str	r2, [r3, #48]	; 0x30
 80182fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018300:	2202      	movs	r2, #2
 8018302:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
 8018306:	2300      	movs	r3, #0
 8018308:	9303      	str	r3, [sp, #12]
 801830a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801830c:	9302      	str	r3, [sp, #8]
 801830e:	f107 0314 	add.w	r3, r7, #20
 8018312:	9301      	str	r3, [sp, #4]
 8018314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018316:	9300      	str	r3, [sp, #0]
 8018318:	683b      	ldr	r3, [r7, #0]
 801831a:	687a      	ldr	r2, [r7, #4]
 801831c:	68b9      	ldr	r1, [r7, #8]
 801831e:	68f8      	ldr	r0, [r7, #12]
 8018320:	f000 f850 	bl	80183c4 <prvInitialiseNewTask>
 8018324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018326:	f000 f8f7 	bl	8018518 <prvAddNewTaskToReadyList>
 801832a:	e001      	b.n	8018330 <xTaskCreateStatic+0xb0>
 801832c:	2300      	movs	r3, #0
 801832e:	617b      	str	r3, [r7, #20]
 8018330:	697b      	ldr	r3, [r7, #20]
 8018332:	4618      	mov	r0, r3
 8018334:	3728      	adds	r7, #40	; 0x28
 8018336:	46bd      	mov	sp, r7
 8018338:	bd80      	pop	{r7, pc}

0801833a <xTaskCreate>:
 801833a:	b580      	push	{r7, lr}
 801833c:	b08c      	sub	sp, #48	; 0x30
 801833e:	af04      	add	r7, sp, #16
 8018340:	60f8      	str	r0, [r7, #12]
 8018342:	60b9      	str	r1, [r7, #8]
 8018344:	603b      	str	r3, [r7, #0]
 8018346:	4613      	mov	r3, r2
 8018348:	80fb      	strh	r3, [r7, #6]
 801834a:	88fb      	ldrh	r3, [r7, #6]
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	4618      	mov	r0, r3
 8018350:	f001 ff02 	bl	801a158 <pvPortMalloc>
 8018354:	6178      	str	r0, [r7, #20]
 8018356:	697b      	ldr	r3, [r7, #20]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d00e      	beq.n	801837a <xTaskCreate+0x40>
 801835c:	20c0      	movs	r0, #192	; 0xc0
 801835e:	f001 fefb 	bl	801a158 <pvPortMalloc>
 8018362:	61f8      	str	r0, [r7, #28]
 8018364:	69fb      	ldr	r3, [r7, #28]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d003      	beq.n	8018372 <xTaskCreate+0x38>
 801836a:	69fb      	ldr	r3, [r7, #28]
 801836c:	697a      	ldr	r2, [r7, #20]
 801836e:	631a      	str	r2, [r3, #48]	; 0x30
 8018370:	e005      	b.n	801837e <xTaskCreate+0x44>
 8018372:	6978      	ldr	r0, [r7, #20]
 8018374:	f001 ffc0 	bl	801a2f8 <vPortFree>
 8018378:	e001      	b.n	801837e <xTaskCreate+0x44>
 801837a:	2300      	movs	r3, #0
 801837c:	61fb      	str	r3, [r7, #28]
 801837e:	69fb      	ldr	r3, [r7, #28]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d017      	beq.n	80183b4 <xTaskCreate+0x7a>
 8018384:	69fb      	ldr	r3, [r7, #28]
 8018386:	2200      	movs	r2, #0
 8018388:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
 801838c:	88fa      	ldrh	r2, [r7, #6]
 801838e:	2300      	movs	r3, #0
 8018390:	9303      	str	r3, [sp, #12]
 8018392:	69fb      	ldr	r3, [r7, #28]
 8018394:	9302      	str	r3, [sp, #8]
 8018396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018398:	9301      	str	r3, [sp, #4]
 801839a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801839c:	9300      	str	r3, [sp, #0]
 801839e:	683b      	ldr	r3, [r7, #0]
 80183a0:	68b9      	ldr	r1, [r7, #8]
 80183a2:	68f8      	ldr	r0, [r7, #12]
 80183a4:	f000 f80e 	bl	80183c4 <prvInitialiseNewTask>
 80183a8:	69f8      	ldr	r0, [r7, #28]
 80183aa:	f000 f8b5 	bl	8018518 <prvAddNewTaskToReadyList>
 80183ae:	2301      	movs	r3, #1
 80183b0:	61bb      	str	r3, [r7, #24]
 80183b2:	e002      	b.n	80183ba <xTaskCreate+0x80>
 80183b4:	f04f 33ff 	mov.w	r3, #4294967295
 80183b8:	61bb      	str	r3, [r7, #24]
 80183ba:	69bb      	ldr	r3, [r7, #24]
 80183bc:	4618      	mov	r0, r3
 80183be:	3720      	adds	r7, #32
 80183c0:	46bd      	mov	sp, r7
 80183c2:	bd80      	pop	{r7, pc}

080183c4 <prvInitialiseNewTask>:
 80183c4:	b580      	push	{r7, lr}
 80183c6:	b088      	sub	sp, #32
 80183c8:	af00      	add	r7, sp, #0
 80183ca:	60f8      	str	r0, [r7, #12]
 80183cc:	60b9      	str	r1, [r7, #8]
 80183ce:	607a      	str	r2, [r7, #4]
 80183d0:	603b      	str	r3, [r7, #0]
 80183d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	009b      	lsls	r3, r3, #2
 80183da:	461a      	mov	r2, r3
 80183dc:	21a5      	movs	r1, #165	; 0xa5
 80183de:	f002 fc63 	bl	801aca8 <memset>
 80183e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80183ec:	3b01      	subs	r3, #1
 80183ee:	009b      	lsls	r3, r3, #2
 80183f0:	4413      	add	r3, r2
 80183f2:	61bb      	str	r3, [r7, #24]
 80183f4:	69bb      	ldr	r3, [r7, #24]
 80183f6:	f023 0307 	bic.w	r3, r3, #7
 80183fa:	61bb      	str	r3, [r7, #24]
 80183fc:	69bb      	ldr	r3, [r7, #24]
 80183fe:	f003 0307 	and.w	r3, r3, #7
 8018402:	2b00      	cmp	r3, #0
 8018404:	d00a      	beq.n	801841c <prvInitialiseNewTask+0x58>
 8018406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801840a:	f383 8811 	msr	BASEPRI, r3
 801840e:	f3bf 8f6f 	isb	sy
 8018412:	f3bf 8f4f 	dsb	sy
 8018416:	617b      	str	r3, [r7, #20]
 8018418:	bf00      	nop
 801841a:	e7fe      	b.n	801841a <prvInitialiseNewTask+0x56>
 801841c:	68bb      	ldr	r3, [r7, #8]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d01f      	beq.n	8018462 <prvInitialiseNewTask+0x9e>
 8018422:	2300      	movs	r3, #0
 8018424:	61fb      	str	r3, [r7, #28]
 8018426:	e012      	b.n	801844e <prvInitialiseNewTask+0x8a>
 8018428:	68ba      	ldr	r2, [r7, #8]
 801842a:	69fb      	ldr	r3, [r7, #28]
 801842c:	4413      	add	r3, r2
 801842e:	7819      	ldrb	r1, [r3, #0]
 8018430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018432:	69fb      	ldr	r3, [r7, #28]
 8018434:	4413      	add	r3, r2
 8018436:	3334      	adds	r3, #52	; 0x34
 8018438:	460a      	mov	r2, r1
 801843a:	701a      	strb	r2, [r3, #0]
 801843c:	68ba      	ldr	r2, [r7, #8]
 801843e:	69fb      	ldr	r3, [r7, #28]
 8018440:	4413      	add	r3, r2
 8018442:	781b      	ldrb	r3, [r3, #0]
 8018444:	2b00      	cmp	r3, #0
 8018446:	d006      	beq.n	8018456 <prvInitialiseNewTask+0x92>
 8018448:	69fb      	ldr	r3, [r7, #28]
 801844a:	3301      	adds	r3, #1
 801844c:	61fb      	str	r3, [r7, #28]
 801844e:	69fb      	ldr	r3, [r7, #28]
 8018450:	2b0f      	cmp	r3, #15
 8018452:	d9e9      	bls.n	8018428 <prvInitialiseNewTask+0x64>
 8018454:	e000      	b.n	8018458 <prvInitialiseNewTask+0x94>
 8018456:	bf00      	nop
 8018458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801845a:	2200      	movs	r2, #0
 801845c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8018460:	e003      	b.n	801846a <prvInitialiseNewTask+0xa6>
 8018462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018464:	2200      	movs	r2, #0
 8018466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 801846a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801846c:	2b37      	cmp	r3, #55	; 0x37
 801846e:	d901      	bls.n	8018474 <prvInitialiseNewTask+0xb0>
 8018470:	2337      	movs	r3, #55	; 0x37
 8018472:	62bb      	str	r3, [r7, #40]	; 0x28
 8018474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018478:	62da      	str	r2, [r3, #44]	; 0x2c
 801847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801847c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801847e:	64da      	str	r2, [r3, #76]	; 0x4c
 8018480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018482:	2200      	movs	r2, #0
 8018484:	651a      	str	r2, [r3, #80]	; 0x50
 8018486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018488:	3304      	adds	r3, #4
 801848a:	4618      	mov	r0, r3
 801848c:	f7fe f9de 	bl	801684c <vListInitialiseItem>
 8018490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018492:	3318      	adds	r3, #24
 8018494:	4618      	mov	r0, r3
 8018496:	f7fe f9d9 	bl	801684c <vListInitialiseItem>
 801849a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801849c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801849e:	611a      	str	r2, [r3, #16]
 80184a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80184a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184a8:	619a      	str	r2, [r3, #24]
 80184aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184ae:	625a      	str	r2, [r3, #36]	; 0x24
 80184b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184b2:	2200      	movs	r2, #0
 80184b4:	655a      	str	r2, [r3, #84]	; 0x54
 80184b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184b8:	2200      	movs	r2, #0
 80184ba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80184be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184c0:	2200      	movs	r2, #0
 80184c2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 80184c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184c8:	3358      	adds	r3, #88	; 0x58
 80184ca:	2260      	movs	r2, #96	; 0x60
 80184cc:	2100      	movs	r1, #0
 80184ce:	4618      	mov	r0, r3
 80184d0:	f002 fbea 	bl	801aca8 <memset>
 80184d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184d6:	4a0d      	ldr	r2, [pc, #52]	; (801850c <prvInitialiseNewTask+0x148>)
 80184d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80184da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184dc:	4a0c      	ldr	r2, [pc, #48]	; (8018510 <prvInitialiseNewTask+0x14c>)
 80184de:	661a      	str	r2, [r3, #96]	; 0x60
 80184e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184e2:	4a0c      	ldr	r2, [pc, #48]	; (8018514 <prvInitialiseNewTask+0x150>)
 80184e4:	665a      	str	r2, [r3, #100]	; 0x64
 80184e6:	683a      	ldr	r2, [r7, #0]
 80184e8:	68f9      	ldr	r1, [r7, #12]
 80184ea:	69b8      	ldr	r0, [r7, #24]
 80184ec:	f001 fbe8 	bl	8019cc0 <pxPortInitialiseStack>
 80184f0:	4602      	mov	r2, r0
 80184f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80184f4:	601a      	str	r2, [r3, #0]
 80184f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184f8:	2b00      	cmp	r3, #0
 80184fa:	d002      	beq.n	8018502 <prvInitialiseNewTask+0x13e>
 80184fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018500:	601a      	str	r2, [r3, #0]
 8018502:	bf00      	nop
 8018504:	3720      	adds	r7, #32
 8018506:	46bd      	mov	sp, r7
 8018508:	bd80      	pop	{r7, pc}
 801850a:	bf00      	nop
 801850c:	0801dd30 	.word	0x0801dd30
 8018510:	0801dd50 	.word	0x0801dd50
 8018514:	0801dd10 	.word	0x0801dd10

08018518 <prvAddNewTaskToReadyList>:
 8018518:	b580      	push	{r7, lr}
 801851a:	b082      	sub	sp, #8
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
 8018520:	f001 fcf8 	bl	8019f14 <vPortEnterCritical>
 8018524:	4b2d      	ldr	r3, [pc, #180]	; (80185dc <prvAddNewTaskToReadyList+0xc4>)
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	3301      	adds	r3, #1
 801852a:	4a2c      	ldr	r2, [pc, #176]	; (80185dc <prvAddNewTaskToReadyList+0xc4>)
 801852c:	6013      	str	r3, [r2, #0]
 801852e:	4b2c      	ldr	r3, [pc, #176]	; (80185e0 <prvAddNewTaskToReadyList+0xc8>)
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d109      	bne.n	801854a <prvAddNewTaskToReadyList+0x32>
 8018536:	4a2a      	ldr	r2, [pc, #168]	; (80185e0 <prvAddNewTaskToReadyList+0xc8>)
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	6013      	str	r3, [r2, #0]
 801853c:	4b27      	ldr	r3, [pc, #156]	; (80185dc <prvAddNewTaskToReadyList+0xc4>)
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	2b01      	cmp	r3, #1
 8018542:	d110      	bne.n	8018566 <prvAddNewTaskToReadyList+0x4e>
 8018544:	f000 fc7a 	bl	8018e3c <prvInitialiseTaskLists>
 8018548:	e00d      	b.n	8018566 <prvAddNewTaskToReadyList+0x4e>
 801854a:	4b26      	ldr	r3, [pc, #152]	; (80185e4 <prvAddNewTaskToReadyList+0xcc>)
 801854c:	681b      	ldr	r3, [r3, #0]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d109      	bne.n	8018566 <prvAddNewTaskToReadyList+0x4e>
 8018552:	4b23      	ldr	r3, [pc, #140]	; (80185e0 <prvAddNewTaskToReadyList+0xc8>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801855c:	429a      	cmp	r2, r3
 801855e:	d802      	bhi.n	8018566 <prvAddNewTaskToReadyList+0x4e>
 8018560:	4a1f      	ldr	r2, [pc, #124]	; (80185e0 <prvAddNewTaskToReadyList+0xc8>)
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	6013      	str	r3, [r2, #0]
 8018566:	4b20      	ldr	r3, [pc, #128]	; (80185e8 <prvAddNewTaskToReadyList+0xd0>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	3301      	adds	r3, #1
 801856c:	4a1e      	ldr	r2, [pc, #120]	; (80185e8 <prvAddNewTaskToReadyList+0xd0>)
 801856e:	6013      	str	r3, [r2, #0]
 8018570:	4b1d      	ldr	r3, [pc, #116]	; (80185e8 <prvAddNewTaskToReadyList+0xd0>)
 8018572:	681a      	ldr	r2, [r3, #0]
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	645a      	str	r2, [r3, #68]	; 0x44
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801857c:	4b1b      	ldr	r3, [pc, #108]	; (80185ec <prvAddNewTaskToReadyList+0xd4>)
 801857e:	681b      	ldr	r3, [r3, #0]
 8018580:	429a      	cmp	r2, r3
 8018582:	d903      	bls.n	801858c <prvAddNewTaskToReadyList+0x74>
 8018584:	687b      	ldr	r3, [r7, #4]
 8018586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018588:	4a18      	ldr	r2, [pc, #96]	; (80185ec <prvAddNewTaskToReadyList+0xd4>)
 801858a:	6013      	str	r3, [r2, #0]
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018590:	4613      	mov	r3, r2
 8018592:	009b      	lsls	r3, r3, #2
 8018594:	4413      	add	r3, r2
 8018596:	009b      	lsls	r3, r3, #2
 8018598:	4a15      	ldr	r2, [pc, #84]	; (80185f0 <prvAddNewTaskToReadyList+0xd8>)
 801859a:	441a      	add	r2, r3
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	3304      	adds	r3, #4
 80185a0:	4619      	mov	r1, r3
 80185a2:	4610      	mov	r0, r2
 80185a4:	f7fe f95f 	bl	8016866 <vListInsertEnd>
 80185a8:	f001 fce4 	bl	8019f74 <vPortExitCritical>
 80185ac:	4b0d      	ldr	r3, [pc, #52]	; (80185e4 <prvAddNewTaskToReadyList+0xcc>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d00e      	beq.n	80185d2 <prvAddNewTaskToReadyList+0xba>
 80185b4:	4b0a      	ldr	r3, [pc, #40]	; (80185e0 <prvAddNewTaskToReadyList+0xc8>)
 80185b6:	681b      	ldr	r3, [r3, #0]
 80185b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185be:	429a      	cmp	r2, r3
 80185c0:	d207      	bcs.n	80185d2 <prvAddNewTaskToReadyList+0xba>
 80185c2:	4b0c      	ldr	r3, [pc, #48]	; (80185f4 <prvAddNewTaskToReadyList+0xdc>)
 80185c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185c8:	601a      	str	r2, [r3, #0]
 80185ca:	f3bf 8f4f 	dsb	sy
 80185ce:	f3bf 8f6f 	isb	sy
 80185d2:	bf00      	nop
 80185d4:	3708      	adds	r7, #8
 80185d6:	46bd      	mov	sp, r7
 80185d8:	bd80      	pop	{r7, pc}
 80185da:	bf00      	nop
 80185dc:	20002310 	.word	0x20002310
 80185e0:	20001e3c 	.word	0x20001e3c
 80185e4:	2000231c 	.word	0x2000231c
 80185e8:	2000232c 	.word	0x2000232c
 80185ec:	20002318 	.word	0x20002318
 80185f0:	20001e40 	.word	0x20001e40
 80185f4:	e000ed04 	.word	0xe000ed04

080185f8 <vTaskDelay>:
 80185f8:	b580      	push	{r7, lr}
 80185fa:	b084      	sub	sp, #16
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
 8018600:	2300      	movs	r3, #0
 8018602:	60fb      	str	r3, [r7, #12]
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d017      	beq.n	801863a <vTaskDelay+0x42>
 801860a:	4b13      	ldr	r3, [pc, #76]	; (8018658 <vTaskDelay+0x60>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d00a      	beq.n	8018628 <vTaskDelay+0x30>
 8018612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018616:	f383 8811 	msr	BASEPRI, r3
 801861a:	f3bf 8f6f 	isb	sy
 801861e:	f3bf 8f4f 	dsb	sy
 8018622:	60bb      	str	r3, [r7, #8]
 8018624:	bf00      	nop
 8018626:	e7fe      	b.n	8018626 <vTaskDelay+0x2e>
 8018628:	f000 f88c 	bl	8018744 <vTaskSuspendAll>
 801862c:	2100      	movs	r1, #0
 801862e:	6878      	ldr	r0, [r7, #4]
 8018630:	f000 ffa4 	bl	801957c <prvAddCurrentTaskToDelayedList>
 8018634:	f000 f894 	bl	8018760 <xTaskResumeAll>
 8018638:	60f8      	str	r0, [r7, #12]
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d107      	bne.n	8018650 <vTaskDelay+0x58>
 8018640:	4b06      	ldr	r3, [pc, #24]	; (801865c <vTaskDelay+0x64>)
 8018642:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018646:	601a      	str	r2, [r3, #0]
 8018648:	f3bf 8f4f 	dsb	sy
 801864c:	f3bf 8f6f 	isb	sy
 8018650:	bf00      	nop
 8018652:	3710      	adds	r7, #16
 8018654:	46bd      	mov	sp, r7
 8018656:	bd80      	pop	{r7, pc}
 8018658:	20002338 	.word	0x20002338
 801865c:	e000ed04 	.word	0xe000ed04

08018660 <vTaskStartScheduler>:
 8018660:	b580      	push	{r7, lr}
 8018662:	b08a      	sub	sp, #40	; 0x28
 8018664:	af04      	add	r7, sp, #16
 8018666:	2300      	movs	r3, #0
 8018668:	60bb      	str	r3, [r7, #8]
 801866a:	2300      	movs	r3, #0
 801866c:	607b      	str	r3, [r7, #4]
 801866e:	463a      	mov	r2, r7
 8018670:	1d39      	adds	r1, r7, #4
 8018672:	f107 0308 	add.w	r3, r7, #8
 8018676:	4618      	mov	r0, r3
 8018678:	f7fe f894 	bl	80167a4 <vApplicationGetIdleTaskMemory>
 801867c:	6839      	ldr	r1, [r7, #0]
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	68ba      	ldr	r2, [r7, #8]
 8018682:	9202      	str	r2, [sp, #8]
 8018684:	9301      	str	r3, [sp, #4]
 8018686:	2300      	movs	r3, #0
 8018688:	9300      	str	r3, [sp, #0]
 801868a:	2300      	movs	r3, #0
 801868c:	460a      	mov	r2, r1
 801868e:	4925      	ldr	r1, [pc, #148]	; (8018724 <vTaskStartScheduler+0xc4>)
 8018690:	4825      	ldr	r0, [pc, #148]	; (8018728 <vTaskStartScheduler+0xc8>)
 8018692:	f7ff fdf5 	bl	8018280 <xTaskCreateStatic>
 8018696:	4603      	mov	r3, r0
 8018698:	4a24      	ldr	r2, [pc, #144]	; (801872c <vTaskStartScheduler+0xcc>)
 801869a:	6013      	str	r3, [r2, #0]
 801869c:	4b23      	ldr	r3, [pc, #140]	; (801872c <vTaskStartScheduler+0xcc>)
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d002      	beq.n	80186aa <vTaskStartScheduler+0x4a>
 80186a4:	2301      	movs	r3, #1
 80186a6:	617b      	str	r3, [r7, #20]
 80186a8:	e001      	b.n	80186ae <vTaskStartScheduler+0x4e>
 80186aa:	2300      	movs	r3, #0
 80186ac:	617b      	str	r3, [r7, #20]
 80186ae:	697b      	ldr	r3, [r7, #20]
 80186b0:	2b01      	cmp	r3, #1
 80186b2:	d102      	bne.n	80186ba <vTaskStartScheduler+0x5a>
 80186b4:	f000 ffb6 	bl	8019624 <xTimerCreateTimerTask>
 80186b8:	6178      	str	r0, [r7, #20]
 80186ba:	697b      	ldr	r3, [r7, #20]
 80186bc:	2b01      	cmp	r3, #1
 80186be:	d11d      	bne.n	80186fc <vTaskStartScheduler+0x9c>
 80186c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186c4:	f383 8811 	msr	BASEPRI, r3
 80186c8:	f3bf 8f6f 	isb	sy
 80186cc:	f3bf 8f4f 	dsb	sy
 80186d0:	613b      	str	r3, [r7, #16]
 80186d2:	bf00      	nop
 80186d4:	4b16      	ldr	r3, [pc, #88]	; (8018730 <vTaskStartScheduler+0xd0>)
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	3358      	adds	r3, #88	; 0x58
 80186da:	4a16      	ldr	r2, [pc, #88]	; (8018734 <vTaskStartScheduler+0xd4>)
 80186dc:	6013      	str	r3, [r2, #0]
 80186de:	4b16      	ldr	r3, [pc, #88]	; (8018738 <vTaskStartScheduler+0xd8>)
 80186e0:	f04f 32ff 	mov.w	r2, #4294967295
 80186e4:	601a      	str	r2, [r3, #0]
 80186e6:	4b15      	ldr	r3, [pc, #84]	; (801873c <vTaskStartScheduler+0xdc>)
 80186e8:	2201      	movs	r2, #1
 80186ea:	601a      	str	r2, [r3, #0]
 80186ec:	4b14      	ldr	r3, [pc, #80]	; (8018740 <vTaskStartScheduler+0xe0>)
 80186ee:	2200      	movs	r2, #0
 80186f0:	601a      	str	r2, [r3, #0]
 80186f2:	f7f5 fbef 	bl	800ded4 <configureTimerForRunTimeStats>
 80186f6:	f001 fb6b 	bl	8019dd0 <xPortStartScheduler>
 80186fa:	e00e      	b.n	801871a <vTaskStartScheduler+0xba>
 80186fc:	697b      	ldr	r3, [r7, #20]
 80186fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018702:	d10a      	bne.n	801871a <vTaskStartScheduler+0xba>
 8018704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018708:	f383 8811 	msr	BASEPRI, r3
 801870c:	f3bf 8f6f 	isb	sy
 8018710:	f3bf 8f4f 	dsb	sy
 8018714:	60fb      	str	r3, [r7, #12]
 8018716:	bf00      	nop
 8018718:	e7fe      	b.n	8018718 <vTaskStartScheduler+0xb8>
 801871a:	bf00      	nop
 801871c:	3718      	adds	r7, #24
 801871e:	46bd      	mov	sp, r7
 8018720:	bd80      	pop	{r7, pc}
 8018722:	bf00      	nop
 8018724:	0801d8bc 	.word	0x0801d8bc
 8018728:	08018e0d 	.word	0x08018e0d
 801872c:	20002334 	.word	0x20002334
 8018730:	20001e3c 	.word	0x20001e3c
 8018734:	2000003c 	.word	0x2000003c
 8018738:	20002330 	.word	0x20002330
 801873c:	2000231c 	.word	0x2000231c
 8018740:	20002314 	.word	0x20002314

08018744 <vTaskSuspendAll>:
 8018744:	b480      	push	{r7}
 8018746:	af00      	add	r7, sp, #0
 8018748:	4b04      	ldr	r3, [pc, #16]	; (801875c <vTaskSuspendAll+0x18>)
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	3301      	adds	r3, #1
 801874e:	4a03      	ldr	r2, [pc, #12]	; (801875c <vTaskSuspendAll+0x18>)
 8018750:	6013      	str	r3, [r2, #0]
 8018752:	bf00      	nop
 8018754:	46bd      	mov	sp, r7
 8018756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801875a:	4770      	bx	lr
 801875c:	20002338 	.word	0x20002338

08018760 <xTaskResumeAll>:
 8018760:	b580      	push	{r7, lr}
 8018762:	b084      	sub	sp, #16
 8018764:	af00      	add	r7, sp, #0
 8018766:	2300      	movs	r3, #0
 8018768:	60fb      	str	r3, [r7, #12]
 801876a:	2300      	movs	r3, #0
 801876c:	60bb      	str	r3, [r7, #8]
 801876e:	4b42      	ldr	r3, [pc, #264]	; (8018878 <xTaskResumeAll+0x118>)
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d10a      	bne.n	801878c <xTaskResumeAll+0x2c>
 8018776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801877a:	f383 8811 	msr	BASEPRI, r3
 801877e:	f3bf 8f6f 	isb	sy
 8018782:	f3bf 8f4f 	dsb	sy
 8018786:	603b      	str	r3, [r7, #0]
 8018788:	bf00      	nop
 801878a:	e7fe      	b.n	801878a <xTaskResumeAll+0x2a>
 801878c:	f001 fbc2 	bl	8019f14 <vPortEnterCritical>
 8018790:	4b39      	ldr	r3, [pc, #228]	; (8018878 <xTaskResumeAll+0x118>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	3b01      	subs	r3, #1
 8018796:	4a38      	ldr	r2, [pc, #224]	; (8018878 <xTaskResumeAll+0x118>)
 8018798:	6013      	str	r3, [r2, #0]
 801879a:	4b37      	ldr	r3, [pc, #220]	; (8018878 <xTaskResumeAll+0x118>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d162      	bne.n	8018868 <xTaskResumeAll+0x108>
 80187a2:	4b36      	ldr	r3, [pc, #216]	; (801887c <xTaskResumeAll+0x11c>)
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d05e      	beq.n	8018868 <xTaskResumeAll+0x108>
 80187aa:	e02f      	b.n	801880c <xTaskResumeAll+0xac>
 80187ac:	4b34      	ldr	r3, [pc, #208]	; (8018880 <xTaskResumeAll+0x120>)
 80187ae:	68db      	ldr	r3, [r3, #12]
 80187b0:	68db      	ldr	r3, [r3, #12]
 80187b2:	60fb      	str	r3, [r7, #12]
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	3318      	adds	r3, #24
 80187b8:	4618      	mov	r0, r3
 80187ba:	f7fe f8b1 	bl	8016920 <uxListRemove>
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	3304      	adds	r3, #4
 80187c2:	4618      	mov	r0, r3
 80187c4:	f7fe f8ac 	bl	8016920 <uxListRemove>
 80187c8:	68fb      	ldr	r3, [r7, #12]
 80187ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187cc:	4b2d      	ldr	r3, [pc, #180]	; (8018884 <xTaskResumeAll+0x124>)
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	429a      	cmp	r2, r3
 80187d2:	d903      	bls.n	80187dc <xTaskResumeAll+0x7c>
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187d8:	4a2a      	ldr	r2, [pc, #168]	; (8018884 <xTaskResumeAll+0x124>)
 80187da:	6013      	str	r3, [r2, #0]
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187e0:	4613      	mov	r3, r2
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	4413      	add	r3, r2
 80187e6:	009b      	lsls	r3, r3, #2
 80187e8:	4a27      	ldr	r2, [pc, #156]	; (8018888 <xTaskResumeAll+0x128>)
 80187ea:	441a      	add	r2, r3
 80187ec:	68fb      	ldr	r3, [r7, #12]
 80187ee:	3304      	adds	r3, #4
 80187f0:	4619      	mov	r1, r3
 80187f2:	4610      	mov	r0, r2
 80187f4:	f7fe f837 	bl	8016866 <vListInsertEnd>
 80187f8:	68fb      	ldr	r3, [r7, #12]
 80187fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187fc:	4b23      	ldr	r3, [pc, #140]	; (801888c <xTaskResumeAll+0x12c>)
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018802:	429a      	cmp	r2, r3
 8018804:	d302      	bcc.n	801880c <xTaskResumeAll+0xac>
 8018806:	4b22      	ldr	r3, [pc, #136]	; (8018890 <xTaskResumeAll+0x130>)
 8018808:	2201      	movs	r2, #1
 801880a:	601a      	str	r2, [r3, #0]
 801880c:	4b1c      	ldr	r3, [pc, #112]	; (8018880 <xTaskResumeAll+0x120>)
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d1cb      	bne.n	80187ac <xTaskResumeAll+0x4c>
 8018814:	68fb      	ldr	r3, [r7, #12]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d001      	beq.n	801881e <xTaskResumeAll+0xbe>
 801881a:	f000 fbb1 	bl	8018f80 <prvResetNextTaskUnblockTime>
 801881e:	4b1d      	ldr	r3, [pc, #116]	; (8018894 <xTaskResumeAll+0x134>)
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	607b      	str	r3, [r7, #4]
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	2b00      	cmp	r3, #0
 8018828:	d010      	beq.n	801884c <xTaskResumeAll+0xec>
 801882a:	f000 f847 	bl	80188bc <xTaskIncrementTick>
 801882e:	4603      	mov	r3, r0
 8018830:	2b00      	cmp	r3, #0
 8018832:	d002      	beq.n	801883a <xTaskResumeAll+0xda>
 8018834:	4b16      	ldr	r3, [pc, #88]	; (8018890 <xTaskResumeAll+0x130>)
 8018836:	2201      	movs	r2, #1
 8018838:	601a      	str	r2, [r3, #0]
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	3b01      	subs	r3, #1
 801883e:	607b      	str	r3, [r7, #4]
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d1f1      	bne.n	801882a <xTaskResumeAll+0xca>
 8018846:	4b13      	ldr	r3, [pc, #76]	; (8018894 <xTaskResumeAll+0x134>)
 8018848:	2200      	movs	r2, #0
 801884a:	601a      	str	r2, [r3, #0]
 801884c:	4b10      	ldr	r3, [pc, #64]	; (8018890 <xTaskResumeAll+0x130>)
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d009      	beq.n	8018868 <xTaskResumeAll+0x108>
 8018854:	2301      	movs	r3, #1
 8018856:	60bb      	str	r3, [r7, #8]
 8018858:	4b0f      	ldr	r3, [pc, #60]	; (8018898 <xTaskResumeAll+0x138>)
 801885a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801885e:	601a      	str	r2, [r3, #0]
 8018860:	f3bf 8f4f 	dsb	sy
 8018864:	f3bf 8f6f 	isb	sy
 8018868:	f001 fb84 	bl	8019f74 <vPortExitCritical>
 801886c:	68bb      	ldr	r3, [r7, #8]
 801886e:	4618      	mov	r0, r3
 8018870:	3710      	adds	r7, #16
 8018872:	46bd      	mov	sp, r7
 8018874:	bd80      	pop	{r7, pc}
 8018876:	bf00      	nop
 8018878:	20002338 	.word	0x20002338
 801887c:	20002310 	.word	0x20002310
 8018880:	200022d0 	.word	0x200022d0
 8018884:	20002318 	.word	0x20002318
 8018888:	20001e40 	.word	0x20001e40
 801888c:	20001e3c 	.word	0x20001e3c
 8018890:	20002324 	.word	0x20002324
 8018894:	20002320 	.word	0x20002320
 8018898:	e000ed04 	.word	0xe000ed04

0801889c <xTaskGetTickCount>:
 801889c:	b480      	push	{r7}
 801889e:	b083      	sub	sp, #12
 80188a0:	af00      	add	r7, sp, #0
 80188a2:	4b05      	ldr	r3, [pc, #20]	; (80188b8 <xTaskGetTickCount+0x1c>)
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	607b      	str	r3, [r7, #4]
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	4618      	mov	r0, r3
 80188ac:	370c      	adds	r7, #12
 80188ae:	46bd      	mov	sp, r7
 80188b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b4:	4770      	bx	lr
 80188b6:	bf00      	nop
 80188b8:	20002314 	.word	0x20002314

080188bc <xTaskIncrementTick>:
 80188bc:	b580      	push	{r7, lr}
 80188be:	b086      	sub	sp, #24
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	2300      	movs	r3, #0
 80188c4:	617b      	str	r3, [r7, #20]
 80188c6:	4b4f      	ldr	r3, [pc, #316]	; (8018a04 <xTaskIncrementTick+0x148>)
 80188c8:	681b      	ldr	r3, [r3, #0]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	f040 808f 	bne.w	80189ee <xTaskIncrementTick+0x132>
 80188d0:	4b4d      	ldr	r3, [pc, #308]	; (8018a08 <xTaskIncrementTick+0x14c>)
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	3301      	adds	r3, #1
 80188d6:	613b      	str	r3, [r7, #16]
 80188d8:	4a4b      	ldr	r2, [pc, #300]	; (8018a08 <xTaskIncrementTick+0x14c>)
 80188da:	693b      	ldr	r3, [r7, #16]
 80188dc:	6013      	str	r3, [r2, #0]
 80188de:	693b      	ldr	r3, [r7, #16]
 80188e0:	2b00      	cmp	r3, #0
 80188e2:	d120      	bne.n	8018926 <xTaskIncrementTick+0x6a>
 80188e4:	4b49      	ldr	r3, [pc, #292]	; (8018a0c <xTaskIncrementTick+0x150>)
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d00a      	beq.n	8018904 <xTaskIncrementTick+0x48>
 80188ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188f2:	f383 8811 	msr	BASEPRI, r3
 80188f6:	f3bf 8f6f 	isb	sy
 80188fa:	f3bf 8f4f 	dsb	sy
 80188fe:	603b      	str	r3, [r7, #0]
 8018900:	bf00      	nop
 8018902:	e7fe      	b.n	8018902 <xTaskIncrementTick+0x46>
 8018904:	4b41      	ldr	r3, [pc, #260]	; (8018a0c <xTaskIncrementTick+0x150>)
 8018906:	681b      	ldr	r3, [r3, #0]
 8018908:	60fb      	str	r3, [r7, #12]
 801890a:	4b41      	ldr	r3, [pc, #260]	; (8018a10 <xTaskIncrementTick+0x154>)
 801890c:	681b      	ldr	r3, [r3, #0]
 801890e:	4a3f      	ldr	r2, [pc, #252]	; (8018a0c <xTaskIncrementTick+0x150>)
 8018910:	6013      	str	r3, [r2, #0]
 8018912:	4a3f      	ldr	r2, [pc, #252]	; (8018a10 <xTaskIncrementTick+0x154>)
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	6013      	str	r3, [r2, #0]
 8018918:	4b3e      	ldr	r3, [pc, #248]	; (8018a14 <xTaskIncrementTick+0x158>)
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	3301      	adds	r3, #1
 801891e:	4a3d      	ldr	r2, [pc, #244]	; (8018a14 <xTaskIncrementTick+0x158>)
 8018920:	6013      	str	r3, [r2, #0]
 8018922:	f000 fb2d 	bl	8018f80 <prvResetNextTaskUnblockTime>
 8018926:	4b3c      	ldr	r3, [pc, #240]	; (8018a18 <xTaskIncrementTick+0x15c>)
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	693a      	ldr	r2, [r7, #16]
 801892c:	429a      	cmp	r2, r3
 801892e:	d349      	bcc.n	80189c4 <xTaskIncrementTick+0x108>
 8018930:	4b36      	ldr	r3, [pc, #216]	; (8018a0c <xTaskIncrementTick+0x150>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d104      	bne.n	8018944 <xTaskIncrementTick+0x88>
 801893a:	4b37      	ldr	r3, [pc, #220]	; (8018a18 <xTaskIncrementTick+0x15c>)
 801893c:	f04f 32ff 	mov.w	r2, #4294967295
 8018940:	601a      	str	r2, [r3, #0]
 8018942:	e03f      	b.n	80189c4 <xTaskIncrementTick+0x108>
 8018944:	4b31      	ldr	r3, [pc, #196]	; (8018a0c <xTaskIncrementTick+0x150>)
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	68db      	ldr	r3, [r3, #12]
 801894a:	68db      	ldr	r3, [r3, #12]
 801894c:	60bb      	str	r3, [r7, #8]
 801894e:	68bb      	ldr	r3, [r7, #8]
 8018950:	685b      	ldr	r3, [r3, #4]
 8018952:	607b      	str	r3, [r7, #4]
 8018954:	693a      	ldr	r2, [r7, #16]
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	429a      	cmp	r2, r3
 801895a:	d203      	bcs.n	8018964 <xTaskIncrementTick+0xa8>
 801895c:	4a2e      	ldr	r2, [pc, #184]	; (8018a18 <xTaskIncrementTick+0x15c>)
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	6013      	str	r3, [r2, #0]
 8018962:	e02f      	b.n	80189c4 <xTaskIncrementTick+0x108>
 8018964:	68bb      	ldr	r3, [r7, #8]
 8018966:	3304      	adds	r3, #4
 8018968:	4618      	mov	r0, r3
 801896a:	f7fd ffd9 	bl	8016920 <uxListRemove>
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018972:	2b00      	cmp	r3, #0
 8018974:	d004      	beq.n	8018980 <xTaskIncrementTick+0xc4>
 8018976:	68bb      	ldr	r3, [r7, #8]
 8018978:	3318      	adds	r3, #24
 801897a:	4618      	mov	r0, r3
 801897c:	f7fd ffd0 	bl	8016920 <uxListRemove>
 8018980:	68bb      	ldr	r3, [r7, #8]
 8018982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018984:	4b25      	ldr	r3, [pc, #148]	; (8018a1c <xTaskIncrementTick+0x160>)
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	429a      	cmp	r2, r3
 801898a:	d903      	bls.n	8018994 <xTaskIncrementTick+0xd8>
 801898c:	68bb      	ldr	r3, [r7, #8]
 801898e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018990:	4a22      	ldr	r2, [pc, #136]	; (8018a1c <xTaskIncrementTick+0x160>)
 8018992:	6013      	str	r3, [r2, #0]
 8018994:	68bb      	ldr	r3, [r7, #8]
 8018996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018998:	4613      	mov	r3, r2
 801899a:	009b      	lsls	r3, r3, #2
 801899c:	4413      	add	r3, r2
 801899e:	009b      	lsls	r3, r3, #2
 80189a0:	4a1f      	ldr	r2, [pc, #124]	; (8018a20 <xTaskIncrementTick+0x164>)
 80189a2:	441a      	add	r2, r3
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	3304      	adds	r3, #4
 80189a8:	4619      	mov	r1, r3
 80189aa:	4610      	mov	r0, r2
 80189ac:	f7fd ff5b 	bl	8016866 <vListInsertEnd>
 80189b0:	68bb      	ldr	r3, [r7, #8]
 80189b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189b4:	4b1b      	ldr	r3, [pc, #108]	; (8018a24 <xTaskIncrementTick+0x168>)
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189ba:	429a      	cmp	r2, r3
 80189bc:	d3b8      	bcc.n	8018930 <xTaskIncrementTick+0x74>
 80189be:	2301      	movs	r3, #1
 80189c0:	617b      	str	r3, [r7, #20]
 80189c2:	e7b5      	b.n	8018930 <xTaskIncrementTick+0x74>
 80189c4:	4b17      	ldr	r3, [pc, #92]	; (8018a24 <xTaskIncrementTick+0x168>)
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80189ca:	4915      	ldr	r1, [pc, #84]	; (8018a20 <xTaskIncrementTick+0x164>)
 80189cc:	4613      	mov	r3, r2
 80189ce:	009b      	lsls	r3, r3, #2
 80189d0:	4413      	add	r3, r2
 80189d2:	009b      	lsls	r3, r3, #2
 80189d4:	440b      	add	r3, r1
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	2b01      	cmp	r3, #1
 80189da:	d901      	bls.n	80189e0 <xTaskIncrementTick+0x124>
 80189dc:	2301      	movs	r3, #1
 80189de:	617b      	str	r3, [r7, #20]
 80189e0:	4b11      	ldr	r3, [pc, #68]	; (8018a28 <xTaskIncrementTick+0x16c>)
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d007      	beq.n	80189f8 <xTaskIncrementTick+0x13c>
 80189e8:	2301      	movs	r3, #1
 80189ea:	617b      	str	r3, [r7, #20]
 80189ec:	e004      	b.n	80189f8 <xTaskIncrementTick+0x13c>
 80189ee:	4b0f      	ldr	r3, [pc, #60]	; (8018a2c <xTaskIncrementTick+0x170>)
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	3301      	adds	r3, #1
 80189f4:	4a0d      	ldr	r2, [pc, #52]	; (8018a2c <xTaskIncrementTick+0x170>)
 80189f6:	6013      	str	r3, [r2, #0]
 80189f8:	697b      	ldr	r3, [r7, #20]
 80189fa:	4618      	mov	r0, r3
 80189fc:	3718      	adds	r7, #24
 80189fe:	46bd      	mov	sp, r7
 8018a00:	bd80      	pop	{r7, pc}
 8018a02:	bf00      	nop
 8018a04:	20002338 	.word	0x20002338
 8018a08:	20002314 	.word	0x20002314
 8018a0c:	200022c8 	.word	0x200022c8
 8018a10:	200022cc 	.word	0x200022cc
 8018a14:	20002328 	.word	0x20002328
 8018a18:	20002330 	.word	0x20002330
 8018a1c:	20002318 	.word	0x20002318
 8018a20:	20001e40 	.word	0x20001e40
 8018a24:	20001e3c 	.word	0x20001e3c
 8018a28:	20002324 	.word	0x20002324
 8018a2c:	20002320 	.word	0x20002320

08018a30 <vTaskSwitchContext>:
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b084      	sub	sp, #16
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	4b3e      	ldr	r3, [pc, #248]	; (8018b30 <vTaskSwitchContext+0x100>)
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d003      	beq.n	8018a46 <vTaskSwitchContext+0x16>
 8018a3e:	4b3d      	ldr	r3, [pc, #244]	; (8018b34 <vTaskSwitchContext+0x104>)
 8018a40:	2201      	movs	r2, #1
 8018a42:	601a      	str	r2, [r3, #0]
 8018a44:	e070      	b.n	8018b28 <vTaskSwitchContext+0xf8>
 8018a46:	4b3b      	ldr	r3, [pc, #236]	; (8018b34 <vTaskSwitchContext+0x104>)
 8018a48:	2200      	movs	r2, #0
 8018a4a:	601a      	str	r2, [r3, #0]
 8018a4c:	f7f5 fa49 	bl	800dee2 <getRunTimeCounterValue>
 8018a50:	4603      	mov	r3, r0
 8018a52:	4a39      	ldr	r2, [pc, #228]	; (8018b38 <vTaskSwitchContext+0x108>)
 8018a54:	6013      	str	r3, [r2, #0]
 8018a56:	4b38      	ldr	r3, [pc, #224]	; (8018b38 <vTaskSwitchContext+0x108>)
 8018a58:	681a      	ldr	r2, [r3, #0]
 8018a5a:	4b38      	ldr	r3, [pc, #224]	; (8018b3c <vTaskSwitchContext+0x10c>)
 8018a5c:	681b      	ldr	r3, [r3, #0]
 8018a5e:	429a      	cmp	r2, r3
 8018a60:	d909      	bls.n	8018a76 <vTaskSwitchContext+0x46>
 8018a62:	4b37      	ldr	r3, [pc, #220]	; (8018b40 <vTaskSwitchContext+0x110>)
 8018a64:	681b      	ldr	r3, [r3, #0]
 8018a66:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8018a68:	4a33      	ldr	r2, [pc, #204]	; (8018b38 <vTaskSwitchContext+0x108>)
 8018a6a:	6810      	ldr	r0, [r2, #0]
 8018a6c:	4a33      	ldr	r2, [pc, #204]	; (8018b3c <vTaskSwitchContext+0x10c>)
 8018a6e:	6812      	ldr	r2, [r2, #0]
 8018a70:	1a82      	subs	r2, r0, r2
 8018a72:	440a      	add	r2, r1
 8018a74:	655a      	str	r2, [r3, #84]	; 0x54
 8018a76:	4b30      	ldr	r3, [pc, #192]	; (8018b38 <vTaskSwitchContext+0x108>)
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	4a30      	ldr	r2, [pc, #192]	; (8018b3c <vTaskSwitchContext+0x10c>)
 8018a7c:	6013      	str	r3, [r2, #0]
 8018a7e:	4b30      	ldr	r3, [pc, #192]	; (8018b40 <vTaskSwitchContext+0x110>)
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	681a      	ldr	r2, [r3, #0]
 8018a84:	4b2e      	ldr	r3, [pc, #184]	; (8018b40 <vTaskSwitchContext+0x110>)
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a8a:	429a      	cmp	r2, r3
 8018a8c:	d808      	bhi.n	8018aa0 <vTaskSwitchContext+0x70>
 8018a8e:	4b2c      	ldr	r3, [pc, #176]	; (8018b40 <vTaskSwitchContext+0x110>)
 8018a90:	681a      	ldr	r2, [r3, #0]
 8018a92:	4b2b      	ldr	r3, [pc, #172]	; (8018b40 <vTaskSwitchContext+0x110>)
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	3334      	adds	r3, #52	; 0x34
 8018a98:	4619      	mov	r1, r3
 8018a9a:	4610      	mov	r0, r2
 8018a9c:	f7f5 fa29 	bl	800def2 <vApplicationStackOverflowHook>
 8018aa0:	4b28      	ldr	r3, [pc, #160]	; (8018b44 <vTaskSwitchContext+0x114>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	60fb      	str	r3, [r7, #12]
 8018aa6:	e010      	b.n	8018aca <vTaskSwitchContext+0x9a>
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d10a      	bne.n	8018ac4 <vTaskSwitchContext+0x94>
 8018aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ab2:	f383 8811 	msr	BASEPRI, r3
 8018ab6:	f3bf 8f6f 	isb	sy
 8018aba:	f3bf 8f4f 	dsb	sy
 8018abe:	607b      	str	r3, [r7, #4]
 8018ac0:	bf00      	nop
 8018ac2:	e7fe      	b.n	8018ac2 <vTaskSwitchContext+0x92>
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	3b01      	subs	r3, #1
 8018ac8:	60fb      	str	r3, [r7, #12]
 8018aca:	491f      	ldr	r1, [pc, #124]	; (8018b48 <vTaskSwitchContext+0x118>)
 8018acc:	68fa      	ldr	r2, [r7, #12]
 8018ace:	4613      	mov	r3, r2
 8018ad0:	009b      	lsls	r3, r3, #2
 8018ad2:	4413      	add	r3, r2
 8018ad4:	009b      	lsls	r3, r3, #2
 8018ad6:	440b      	add	r3, r1
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d0e4      	beq.n	8018aa8 <vTaskSwitchContext+0x78>
 8018ade:	68fa      	ldr	r2, [r7, #12]
 8018ae0:	4613      	mov	r3, r2
 8018ae2:	009b      	lsls	r3, r3, #2
 8018ae4:	4413      	add	r3, r2
 8018ae6:	009b      	lsls	r3, r3, #2
 8018ae8:	4a17      	ldr	r2, [pc, #92]	; (8018b48 <vTaskSwitchContext+0x118>)
 8018aea:	4413      	add	r3, r2
 8018aec:	60bb      	str	r3, [r7, #8]
 8018aee:	68bb      	ldr	r3, [r7, #8]
 8018af0:	685b      	ldr	r3, [r3, #4]
 8018af2:	685a      	ldr	r2, [r3, #4]
 8018af4:	68bb      	ldr	r3, [r7, #8]
 8018af6:	605a      	str	r2, [r3, #4]
 8018af8:	68bb      	ldr	r3, [r7, #8]
 8018afa:	685a      	ldr	r2, [r3, #4]
 8018afc:	68bb      	ldr	r3, [r7, #8]
 8018afe:	3308      	adds	r3, #8
 8018b00:	429a      	cmp	r2, r3
 8018b02:	d104      	bne.n	8018b0e <vTaskSwitchContext+0xde>
 8018b04:	68bb      	ldr	r3, [r7, #8]
 8018b06:	685b      	ldr	r3, [r3, #4]
 8018b08:	685a      	ldr	r2, [r3, #4]
 8018b0a:	68bb      	ldr	r3, [r7, #8]
 8018b0c:	605a      	str	r2, [r3, #4]
 8018b0e:	68bb      	ldr	r3, [r7, #8]
 8018b10:	685b      	ldr	r3, [r3, #4]
 8018b12:	68db      	ldr	r3, [r3, #12]
 8018b14:	4a0a      	ldr	r2, [pc, #40]	; (8018b40 <vTaskSwitchContext+0x110>)
 8018b16:	6013      	str	r3, [r2, #0]
 8018b18:	4a0a      	ldr	r2, [pc, #40]	; (8018b44 <vTaskSwitchContext+0x114>)
 8018b1a:	68fb      	ldr	r3, [r7, #12]
 8018b1c:	6013      	str	r3, [r2, #0]
 8018b1e:	4b08      	ldr	r3, [pc, #32]	; (8018b40 <vTaskSwitchContext+0x110>)
 8018b20:	681b      	ldr	r3, [r3, #0]
 8018b22:	3358      	adds	r3, #88	; 0x58
 8018b24:	4a09      	ldr	r2, [pc, #36]	; (8018b4c <vTaskSwitchContext+0x11c>)
 8018b26:	6013      	str	r3, [r2, #0]
 8018b28:	bf00      	nop
 8018b2a:	3710      	adds	r7, #16
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	20002338 	.word	0x20002338
 8018b34:	20002324 	.word	0x20002324
 8018b38:	20002340 	.word	0x20002340
 8018b3c:	2000233c 	.word	0x2000233c
 8018b40:	20001e3c 	.word	0x20001e3c
 8018b44:	20002318 	.word	0x20002318
 8018b48:	20001e40 	.word	0x20001e40
 8018b4c:	2000003c 	.word	0x2000003c

08018b50 <vTaskPlaceOnEventList>:
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b084      	sub	sp, #16
 8018b54:	af00      	add	r7, sp, #0
 8018b56:	6078      	str	r0, [r7, #4]
 8018b58:	6039      	str	r1, [r7, #0]
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d10a      	bne.n	8018b76 <vTaskPlaceOnEventList+0x26>
 8018b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b64:	f383 8811 	msr	BASEPRI, r3
 8018b68:	f3bf 8f6f 	isb	sy
 8018b6c:	f3bf 8f4f 	dsb	sy
 8018b70:	60fb      	str	r3, [r7, #12]
 8018b72:	bf00      	nop
 8018b74:	e7fe      	b.n	8018b74 <vTaskPlaceOnEventList+0x24>
 8018b76:	4b07      	ldr	r3, [pc, #28]	; (8018b94 <vTaskPlaceOnEventList+0x44>)
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	3318      	adds	r3, #24
 8018b7c:	4619      	mov	r1, r3
 8018b7e:	6878      	ldr	r0, [r7, #4]
 8018b80:	f7fd fe95 	bl	80168ae <vListInsert>
 8018b84:	2101      	movs	r1, #1
 8018b86:	6838      	ldr	r0, [r7, #0]
 8018b88:	f000 fcf8 	bl	801957c <prvAddCurrentTaskToDelayedList>
 8018b8c:	bf00      	nop
 8018b8e:	3710      	adds	r7, #16
 8018b90:	46bd      	mov	sp, r7
 8018b92:	bd80      	pop	{r7, pc}
 8018b94:	20001e3c 	.word	0x20001e3c

08018b98 <vTaskPlaceOnEventListRestricted>:
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b086      	sub	sp, #24
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	60f8      	str	r0, [r7, #12]
 8018ba0:	60b9      	str	r1, [r7, #8]
 8018ba2:	607a      	str	r2, [r7, #4]
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d10a      	bne.n	8018bc0 <vTaskPlaceOnEventListRestricted+0x28>
 8018baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bae:	f383 8811 	msr	BASEPRI, r3
 8018bb2:	f3bf 8f6f 	isb	sy
 8018bb6:	f3bf 8f4f 	dsb	sy
 8018bba:	617b      	str	r3, [r7, #20]
 8018bbc:	bf00      	nop
 8018bbe:	e7fe      	b.n	8018bbe <vTaskPlaceOnEventListRestricted+0x26>
 8018bc0:	4b0a      	ldr	r3, [pc, #40]	; (8018bec <vTaskPlaceOnEventListRestricted+0x54>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	3318      	adds	r3, #24
 8018bc6:	4619      	mov	r1, r3
 8018bc8:	68f8      	ldr	r0, [r7, #12]
 8018bca:	f7fd fe4c 	bl	8016866 <vListInsertEnd>
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d002      	beq.n	8018bda <vTaskPlaceOnEventListRestricted+0x42>
 8018bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8018bd8:	60bb      	str	r3, [r7, #8]
 8018bda:	6879      	ldr	r1, [r7, #4]
 8018bdc:	68b8      	ldr	r0, [r7, #8]
 8018bde:	f000 fccd 	bl	801957c <prvAddCurrentTaskToDelayedList>
 8018be2:	bf00      	nop
 8018be4:	3718      	adds	r7, #24
 8018be6:	46bd      	mov	sp, r7
 8018be8:	bd80      	pop	{r7, pc}
 8018bea:	bf00      	nop
 8018bec:	20001e3c 	.word	0x20001e3c

08018bf0 <xTaskRemoveFromEventList>:
 8018bf0:	b580      	push	{r7, lr}
 8018bf2:	b086      	sub	sp, #24
 8018bf4:	af00      	add	r7, sp, #0
 8018bf6:	6078      	str	r0, [r7, #4]
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	68db      	ldr	r3, [r3, #12]
 8018bfc:	68db      	ldr	r3, [r3, #12]
 8018bfe:	613b      	str	r3, [r7, #16]
 8018c00:	693b      	ldr	r3, [r7, #16]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d10a      	bne.n	8018c1c <xTaskRemoveFromEventList+0x2c>
 8018c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c0a:	f383 8811 	msr	BASEPRI, r3
 8018c0e:	f3bf 8f6f 	isb	sy
 8018c12:	f3bf 8f4f 	dsb	sy
 8018c16:	60fb      	str	r3, [r7, #12]
 8018c18:	bf00      	nop
 8018c1a:	e7fe      	b.n	8018c1a <xTaskRemoveFromEventList+0x2a>
 8018c1c:	693b      	ldr	r3, [r7, #16]
 8018c1e:	3318      	adds	r3, #24
 8018c20:	4618      	mov	r0, r3
 8018c22:	f7fd fe7d 	bl	8016920 <uxListRemove>
 8018c26:	4b1e      	ldr	r3, [pc, #120]	; (8018ca0 <xTaskRemoveFromEventList+0xb0>)
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d11d      	bne.n	8018c6a <xTaskRemoveFromEventList+0x7a>
 8018c2e:	693b      	ldr	r3, [r7, #16]
 8018c30:	3304      	adds	r3, #4
 8018c32:	4618      	mov	r0, r3
 8018c34:	f7fd fe74 	bl	8016920 <uxListRemove>
 8018c38:	693b      	ldr	r3, [r7, #16]
 8018c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c3c:	4b19      	ldr	r3, [pc, #100]	; (8018ca4 <xTaskRemoveFromEventList+0xb4>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	429a      	cmp	r2, r3
 8018c42:	d903      	bls.n	8018c4c <xTaskRemoveFromEventList+0x5c>
 8018c44:	693b      	ldr	r3, [r7, #16]
 8018c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c48:	4a16      	ldr	r2, [pc, #88]	; (8018ca4 <xTaskRemoveFromEventList+0xb4>)
 8018c4a:	6013      	str	r3, [r2, #0]
 8018c4c:	693b      	ldr	r3, [r7, #16]
 8018c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c50:	4613      	mov	r3, r2
 8018c52:	009b      	lsls	r3, r3, #2
 8018c54:	4413      	add	r3, r2
 8018c56:	009b      	lsls	r3, r3, #2
 8018c58:	4a13      	ldr	r2, [pc, #76]	; (8018ca8 <xTaskRemoveFromEventList+0xb8>)
 8018c5a:	441a      	add	r2, r3
 8018c5c:	693b      	ldr	r3, [r7, #16]
 8018c5e:	3304      	adds	r3, #4
 8018c60:	4619      	mov	r1, r3
 8018c62:	4610      	mov	r0, r2
 8018c64:	f7fd fdff 	bl	8016866 <vListInsertEnd>
 8018c68:	e005      	b.n	8018c76 <xTaskRemoveFromEventList+0x86>
 8018c6a:	693b      	ldr	r3, [r7, #16]
 8018c6c:	3318      	adds	r3, #24
 8018c6e:	4619      	mov	r1, r3
 8018c70:	480e      	ldr	r0, [pc, #56]	; (8018cac <xTaskRemoveFromEventList+0xbc>)
 8018c72:	f7fd fdf8 	bl	8016866 <vListInsertEnd>
 8018c76:	693b      	ldr	r3, [r7, #16]
 8018c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018c7a:	4b0d      	ldr	r3, [pc, #52]	; (8018cb0 <xTaskRemoveFromEventList+0xc0>)
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018c80:	429a      	cmp	r2, r3
 8018c82:	d905      	bls.n	8018c90 <xTaskRemoveFromEventList+0xa0>
 8018c84:	2301      	movs	r3, #1
 8018c86:	617b      	str	r3, [r7, #20]
 8018c88:	4b0a      	ldr	r3, [pc, #40]	; (8018cb4 <xTaskRemoveFromEventList+0xc4>)
 8018c8a:	2201      	movs	r2, #1
 8018c8c:	601a      	str	r2, [r3, #0]
 8018c8e:	e001      	b.n	8018c94 <xTaskRemoveFromEventList+0xa4>
 8018c90:	2300      	movs	r3, #0
 8018c92:	617b      	str	r3, [r7, #20]
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	4618      	mov	r0, r3
 8018c98:	3718      	adds	r7, #24
 8018c9a:	46bd      	mov	sp, r7
 8018c9c:	bd80      	pop	{r7, pc}
 8018c9e:	bf00      	nop
 8018ca0:	20002338 	.word	0x20002338
 8018ca4:	20002318 	.word	0x20002318
 8018ca8:	20001e40 	.word	0x20001e40
 8018cac:	200022d0 	.word	0x200022d0
 8018cb0:	20001e3c 	.word	0x20001e3c
 8018cb4:	20002324 	.word	0x20002324

08018cb8 <vTaskSetTimeOutState>:
 8018cb8:	b580      	push	{r7, lr}
 8018cba:	b084      	sub	sp, #16
 8018cbc:	af00      	add	r7, sp, #0
 8018cbe:	6078      	str	r0, [r7, #4]
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d10a      	bne.n	8018cdc <vTaskSetTimeOutState+0x24>
 8018cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cca:	f383 8811 	msr	BASEPRI, r3
 8018cce:	f3bf 8f6f 	isb	sy
 8018cd2:	f3bf 8f4f 	dsb	sy
 8018cd6:	60fb      	str	r3, [r7, #12]
 8018cd8:	bf00      	nop
 8018cda:	e7fe      	b.n	8018cda <vTaskSetTimeOutState+0x22>
 8018cdc:	f001 f91a 	bl	8019f14 <vPortEnterCritical>
 8018ce0:	4b06      	ldr	r3, [pc, #24]	; (8018cfc <vTaskSetTimeOutState+0x44>)
 8018ce2:	681a      	ldr	r2, [r3, #0]
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	601a      	str	r2, [r3, #0]
 8018ce8:	4b05      	ldr	r3, [pc, #20]	; (8018d00 <vTaskSetTimeOutState+0x48>)
 8018cea:	681a      	ldr	r2, [r3, #0]
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	605a      	str	r2, [r3, #4]
 8018cf0:	f001 f940 	bl	8019f74 <vPortExitCritical>
 8018cf4:	bf00      	nop
 8018cf6:	3710      	adds	r7, #16
 8018cf8:	46bd      	mov	sp, r7
 8018cfa:	bd80      	pop	{r7, pc}
 8018cfc:	20002328 	.word	0x20002328
 8018d00:	20002314 	.word	0x20002314

08018d04 <vTaskInternalSetTimeOutState>:
 8018d04:	b480      	push	{r7}
 8018d06:	b083      	sub	sp, #12
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
 8018d0c:	4b06      	ldr	r3, [pc, #24]	; (8018d28 <vTaskInternalSetTimeOutState+0x24>)
 8018d0e:	681a      	ldr	r2, [r3, #0]
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	601a      	str	r2, [r3, #0]
 8018d14:	4b05      	ldr	r3, [pc, #20]	; (8018d2c <vTaskInternalSetTimeOutState+0x28>)
 8018d16:	681a      	ldr	r2, [r3, #0]
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	605a      	str	r2, [r3, #4]
 8018d1c:	bf00      	nop
 8018d1e:	370c      	adds	r7, #12
 8018d20:	46bd      	mov	sp, r7
 8018d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d26:	4770      	bx	lr
 8018d28:	20002328 	.word	0x20002328
 8018d2c:	20002314 	.word	0x20002314

08018d30 <xTaskCheckForTimeOut>:
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b088      	sub	sp, #32
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	6078      	str	r0, [r7, #4]
 8018d38:	6039      	str	r1, [r7, #0]
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d10a      	bne.n	8018d56 <xTaskCheckForTimeOut+0x26>
 8018d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d44:	f383 8811 	msr	BASEPRI, r3
 8018d48:	f3bf 8f6f 	isb	sy
 8018d4c:	f3bf 8f4f 	dsb	sy
 8018d50:	613b      	str	r3, [r7, #16]
 8018d52:	bf00      	nop
 8018d54:	e7fe      	b.n	8018d54 <xTaskCheckForTimeOut+0x24>
 8018d56:	683b      	ldr	r3, [r7, #0]
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	d10a      	bne.n	8018d72 <xTaskCheckForTimeOut+0x42>
 8018d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d60:	f383 8811 	msr	BASEPRI, r3
 8018d64:	f3bf 8f6f 	isb	sy
 8018d68:	f3bf 8f4f 	dsb	sy
 8018d6c:	60fb      	str	r3, [r7, #12]
 8018d6e:	bf00      	nop
 8018d70:	e7fe      	b.n	8018d70 <xTaskCheckForTimeOut+0x40>
 8018d72:	f001 f8cf 	bl	8019f14 <vPortEnterCritical>
 8018d76:	4b1d      	ldr	r3, [pc, #116]	; (8018dec <xTaskCheckForTimeOut+0xbc>)
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	61bb      	str	r3, [r7, #24]
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	685b      	ldr	r3, [r3, #4]
 8018d80:	69ba      	ldr	r2, [r7, #24]
 8018d82:	1ad3      	subs	r3, r2, r3
 8018d84:	617b      	str	r3, [r7, #20]
 8018d86:	683b      	ldr	r3, [r7, #0]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d8e:	d102      	bne.n	8018d96 <xTaskCheckForTimeOut+0x66>
 8018d90:	2300      	movs	r3, #0
 8018d92:	61fb      	str	r3, [r7, #28]
 8018d94:	e023      	b.n	8018dde <xTaskCheckForTimeOut+0xae>
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	681a      	ldr	r2, [r3, #0]
 8018d9a:	4b15      	ldr	r3, [pc, #84]	; (8018df0 <xTaskCheckForTimeOut+0xc0>)
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	429a      	cmp	r2, r3
 8018da0:	d007      	beq.n	8018db2 <xTaskCheckForTimeOut+0x82>
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	685b      	ldr	r3, [r3, #4]
 8018da6:	69ba      	ldr	r2, [r7, #24]
 8018da8:	429a      	cmp	r2, r3
 8018daa:	d302      	bcc.n	8018db2 <xTaskCheckForTimeOut+0x82>
 8018dac:	2301      	movs	r3, #1
 8018dae:	61fb      	str	r3, [r7, #28]
 8018db0:	e015      	b.n	8018dde <xTaskCheckForTimeOut+0xae>
 8018db2:	683b      	ldr	r3, [r7, #0]
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	697a      	ldr	r2, [r7, #20]
 8018db8:	429a      	cmp	r2, r3
 8018dba:	d20b      	bcs.n	8018dd4 <xTaskCheckForTimeOut+0xa4>
 8018dbc:	683b      	ldr	r3, [r7, #0]
 8018dbe:	681a      	ldr	r2, [r3, #0]
 8018dc0:	697b      	ldr	r3, [r7, #20]
 8018dc2:	1ad2      	subs	r2, r2, r3
 8018dc4:	683b      	ldr	r3, [r7, #0]
 8018dc6:	601a      	str	r2, [r3, #0]
 8018dc8:	6878      	ldr	r0, [r7, #4]
 8018dca:	f7ff ff9b 	bl	8018d04 <vTaskInternalSetTimeOutState>
 8018dce:	2300      	movs	r3, #0
 8018dd0:	61fb      	str	r3, [r7, #28]
 8018dd2:	e004      	b.n	8018dde <xTaskCheckForTimeOut+0xae>
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	601a      	str	r2, [r3, #0]
 8018dda:	2301      	movs	r3, #1
 8018ddc:	61fb      	str	r3, [r7, #28]
 8018dde:	f001 f8c9 	bl	8019f74 <vPortExitCritical>
 8018de2:	69fb      	ldr	r3, [r7, #28]
 8018de4:	4618      	mov	r0, r3
 8018de6:	3720      	adds	r7, #32
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}
 8018dec:	20002314 	.word	0x20002314
 8018df0:	20002328 	.word	0x20002328

08018df4 <vTaskMissedYield>:
 8018df4:	b480      	push	{r7}
 8018df6:	af00      	add	r7, sp, #0
 8018df8:	4b03      	ldr	r3, [pc, #12]	; (8018e08 <vTaskMissedYield+0x14>)
 8018dfa:	2201      	movs	r2, #1
 8018dfc:	601a      	str	r2, [r3, #0]
 8018dfe:	bf00      	nop
 8018e00:	46bd      	mov	sp, r7
 8018e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e06:	4770      	bx	lr
 8018e08:	20002324 	.word	0x20002324

08018e0c <prvIdleTask>:
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b082      	sub	sp, #8
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
 8018e14:	f000 f852 	bl	8018ebc <prvCheckTasksWaitingTermination>
 8018e18:	4b06      	ldr	r3, [pc, #24]	; (8018e34 <prvIdleTask+0x28>)
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	2b01      	cmp	r3, #1
 8018e1e:	d9f9      	bls.n	8018e14 <prvIdleTask+0x8>
 8018e20:	4b05      	ldr	r3, [pc, #20]	; (8018e38 <prvIdleTask+0x2c>)
 8018e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018e26:	601a      	str	r2, [r3, #0]
 8018e28:	f3bf 8f4f 	dsb	sy
 8018e2c:	f3bf 8f6f 	isb	sy
 8018e30:	e7f0      	b.n	8018e14 <prvIdleTask+0x8>
 8018e32:	bf00      	nop
 8018e34:	20001e40 	.word	0x20001e40
 8018e38:	e000ed04 	.word	0xe000ed04

08018e3c <prvInitialiseTaskLists>:
 8018e3c:	b580      	push	{r7, lr}
 8018e3e:	b082      	sub	sp, #8
 8018e40:	af00      	add	r7, sp, #0
 8018e42:	2300      	movs	r3, #0
 8018e44:	607b      	str	r3, [r7, #4]
 8018e46:	e00c      	b.n	8018e62 <prvInitialiseTaskLists+0x26>
 8018e48:	687a      	ldr	r2, [r7, #4]
 8018e4a:	4613      	mov	r3, r2
 8018e4c:	009b      	lsls	r3, r3, #2
 8018e4e:	4413      	add	r3, r2
 8018e50:	009b      	lsls	r3, r3, #2
 8018e52:	4a12      	ldr	r2, [pc, #72]	; (8018e9c <prvInitialiseTaskLists+0x60>)
 8018e54:	4413      	add	r3, r2
 8018e56:	4618      	mov	r0, r3
 8018e58:	f7fd fcd8 	bl	801680c <vListInitialise>
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	3301      	adds	r3, #1
 8018e60:	607b      	str	r3, [r7, #4]
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	2b37      	cmp	r3, #55	; 0x37
 8018e66:	d9ef      	bls.n	8018e48 <prvInitialiseTaskLists+0xc>
 8018e68:	480d      	ldr	r0, [pc, #52]	; (8018ea0 <prvInitialiseTaskLists+0x64>)
 8018e6a:	f7fd fccf 	bl	801680c <vListInitialise>
 8018e6e:	480d      	ldr	r0, [pc, #52]	; (8018ea4 <prvInitialiseTaskLists+0x68>)
 8018e70:	f7fd fccc 	bl	801680c <vListInitialise>
 8018e74:	480c      	ldr	r0, [pc, #48]	; (8018ea8 <prvInitialiseTaskLists+0x6c>)
 8018e76:	f7fd fcc9 	bl	801680c <vListInitialise>
 8018e7a:	480c      	ldr	r0, [pc, #48]	; (8018eac <prvInitialiseTaskLists+0x70>)
 8018e7c:	f7fd fcc6 	bl	801680c <vListInitialise>
 8018e80:	480b      	ldr	r0, [pc, #44]	; (8018eb0 <prvInitialiseTaskLists+0x74>)
 8018e82:	f7fd fcc3 	bl	801680c <vListInitialise>
 8018e86:	4b0b      	ldr	r3, [pc, #44]	; (8018eb4 <prvInitialiseTaskLists+0x78>)
 8018e88:	4a05      	ldr	r2, [pc, #20]	; (8018ea0 <prvInitialiseTaskLists+0x64>)
 8018e8a:	601a      	str	r2, [r3, #0]
 8018e8c:	4b0a      	ldr	r3, [pc, #40]	; (8018eb8 <prvInitialiseTaskLists+0x7c>)
 8018e8e:	4a05      	ldr	r2, [pc, #20]	; (8018ea4 <prvInitialiseTaskLists+0x68>)
 8018e90:	601a      	str	r2, [r3, #0]
 8018e92:	bf00      	nop
 8018e94:	3708      	adds	r7, #8
 8018e96:	46bd      	mov	sp, r7
 8018e98:	bd80      	pop	{r7, pc}
 8018e9a:	bf00      	nop
 8018e9c:	20001e40 	.word	0x20001e40
 8018ea0:	200022a0 	.word	0x200022a0
 8018ea4:	200022b4 	.word	0x200022b4
 8018ea8:	200022d0 	.word	0x200022d0
 8018eac:	200022e4 	.word	0x200022e4
 8018eb0:	200022fc 	.word	0x200022fc
 8018eb4:	200022c8 	.word	0x200022c8
 8018eb8:	200022cc 	.word	0x200022cc

08018ebc <prvCheckTasksWaitingTermination>:
 8018ebc:	b580      	push	{r7, lr}
 8018ebe:	b082      	sub	sp, #8
 8018ec0:	af00      	add	r7, sp, #0
 8018ec2:	e019      	b.n	8018ef8 <prvCheckTasksWaitingTermination+0x3c>
 8018ec4:	f001 f826 	bl	8019f14 <vPortEnterCritical>
 8018ec8:	4b10      	ldr	r3, [pc, #64]	; (8018f0c <prvCheckTasksWaitingTermination+0x50>)
 8018eca:	68db      	ldr	r3, [r3, #12]
 8018ecc:	68db      	ldr	r3, [r3, #12]
 8018ece:	607b      	str	r3, [r7, #4]
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	3304      	adds	r3, #4
 8018ed4:	4618      	mov	r0, r3
 8018ed6:	f7fd fd23 	bl	8016920 <uxListRemove>
 8018eda:	4b0d      	ldr	r3, [pc, #52]	; (8018f10 <prvCheckTasksWaitingTermination+0x54>)
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	3b01      	subs	r3, #1
 8018ee0:	4a0b      	ldr	r2, [pc, #44]	; (8018f10 <prvCheckTasksWaitingTermination+0x54>)
 8018ee2:	6013      	str	r3, [r2, #0]
 8018ee4:	4b0b      	ldr	r3, [pc, #44]	; (8018f14 <prvCheckTasksWaitingTermination+0x58>)
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	3b01      	subs	r3, #1
 8018eea:	4a0a      	ldr	r2, [pc, #40]	; (8018f14 <prvCheckTasksWaitingTermination+0x58>)
 8018eec:	6013      	str	r3, [r2, #0]
 8018eee:	f001 f841 	bl	8019f74 <vPortExitCritical>
 8018ef2:	6878      	ldr	r0, [r7, #4]
 8018ef4:	f000 f810 	bl	8018f18 <prvDeleteTCB>
 8018ef8:	4b06      	ldr	r3, [pc, #24]	; (8018f14 <prvCheckTasksWaitingTermination+0x58>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d1e1      	bne.n	8018ec4 <prvCheckTasksWaitingTermination+0x8>
 8018f00:	bf00      	nop
 8018f02:	bf00      	nop
 8018f04:	3708      	adds	r7, #8
 8018f06:	46bd      	mov	sp, r7
 8018f08:	bd80      	pop	{r7, pc}
 8018f0a:	bf00      	nop
 8018f0c:	200022e4 	.word	0x200022e4
 8018f10:	20002310 	.word	0x20002310
 8018f14:	200022f8 	.word	0x200022f8

08018f18 <prvDeleteTCB>:
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b084      	sub	sp, #16
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	3358      	adds	r3, #88	; 0x58
 8018f24:	4618      	mov	r0, r3
 8018f26:	f002 fc1f 	bl	801b768 <_reclaim_reent>
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d108      	bne.n	8018f46 <prvDeleteTCB+0x2e>
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f38:	4618      	mov	r0, r3
 8018f3a:	f001 f9dd 	bl	801a2f8 <vPortFree>
 8018f3e:	6878      	ldr	r0, [r7, #4]
 8018f40:	f001 f9da 	bl	801a2f8 <vPortFree>
 8018f44:	e018      	b.n	8018f78 <prvDeleteTCB+0x60>
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8018f4c:	2b01      	cmp	r3, #1
 8018f4e:	d103      	bne.n	8018f58 <prvDeleteTCB+0x40>
 8018f50:	6878      	ldr	r0, [r7, #4]
 8018f52:	f001 f9d1 	bl	801a2f8 <vPortFree>
 8018f56:	e00f      	b.n	8018f78 <prvDeleteTCB+0x60>
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8018f5e:	2b02      	cmp	r3, #2
 8018f60:	d00a      	beq.n	8018f78 <prvDeleteTCB+0x60>
 8018f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f66:	f383 8811 	msr	BASEPRI, r3
 8018f6a:	f3bf 8f6f 	isb	sy
 8018f6e:	f3bf 8f4f 	dsb	sy
 8018f72:	60fb      	str	r3, [r7, #12]
 8018f74:	bf00      	nop
 8018f76:	e7fe      	b.n	8018f76 <prvDeleteTCB+0x5e>
 8018f78:	bf00      	nop
 8018f7a:	3710      	adds	r7, #16
 8018f7c:	46bd      	mov	sp, r7
 8018f7e:	bd80      	pop	{r7, pc}

08018f80 <prvResetNextTaskUnblockTime>:
 8018f80:	b480      	push	{r7}
 8018f82:	b083      	sub	sp, #12
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	4b0c      	ldr	r3, [pc, #48]	; (8018fb8 <prvResetNextTaskUnblockTime+0x38>)
 8018f88:	681b      	ldr	r3, [r3, #0]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	2b00      	cmp	r3, #0
 8018f8e:	d104      	bne.n	8018f9a <prvResetNextTaskUnblockTime+0x1a>
 8018f90:	4b0a      	ldr	r3, [pc, #40]	; (8018fbc <prvResetNextTaskUnblockTime+0x3c>)
 8018f92:	f04f 32ff 	mov.w	r2, #4294967295
 8018f96:	601a      	str	r2, [r3, #0]
 8018f98:	e008      	b.n	8018fac <prvResetNextTaskUnblockTime+0x2c>
 8018f9a:	4b07      	ldr	r3, [pc, #28]	; (8018fb8 <prvResetNextTaskUnblockTime+0x38>)
 8018f9c:	681b      	ldr	r3, [r3, #0]
 8018f9e:	68db      	ldr	r3, [r3, #12]
 8018fa0:	68db      	ldr	r3, [r3, #12]
 8018fa2:	607b      	str	r3, [r7, #4]
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	685b      	ldr	r3, [r3, #4]
 8018fa8:	4a04      	ldr	r2, [pc, #16]	; (8018fbc <prvResetNextTaskUnblockTime+0x3c>)
 8018faa:	6013      	str	r3, [r2, #0]
 8018fac:	bf00      	nop
 8018fae:	370c      	adds	r7, #12
 8018fb0:	46bd      	mov	sp, r7
 8018fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fb6:	4770      	bx	lr
 8018fb8:	200022c8 	.word	0x200022c8
 8018fbc:	20002330 	.word	0x20002330

08018fc0 <xTaskGetCurrentTaskHandle>:
 8018fc0:	b480      	push	{r7}
 8018fc2:	b083      	sub	sp, #12
 8018fc4:	af00      	add	r7, sp, #0
 8018fc6:	4b05      	ldr	r3, [pc, #20]	; (8018fdc <xTaskGetCurrentTaskHandle+0x1c>)
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	607b      	str	r3, [r7, #4]
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	4618      	mov	r0, r3
 8018fd0:	370c      	adds	r7, #12
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd8:	4770      	bx	lr
 8018fda:	bf00      	nop
 8018fdc:	20001e3c 	.word	0x20001e3c

08018fe0 <xTaskGetSchedulerState>:
 8018fe0:	b480      	push	{r7}
 8018fe2:	b083      	sub	sp, #12
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	4b0b      	ldr	r3, [pc, #44]	; (8019014 <xTaskGetSchedulerState+0x34>)
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	2b00      	cmp	r3, #0
 8018fec:	d102      	bne.n	8018ff4 <xTaskGetSchedulerState+0x14>
 8018fee:	2301      	movs	r3, #1
 8018ff0:	607b      	str	r3, [r7, #4]
 8018ff2:	e008      	b.n	8019006 <xTaskGetSchedulerState+0x26>
 8018ff4:	4b08      	ldr	r3, [pc, #32]	; (8019018 <xTaskGetSchedulerState+0x38>)
 8018ff6:	681b      	ldr	r3, [r3, #0]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d102      	bne.n	8019002 <xTaskGetSchedulerState+0x22>
 8018ffc:	2302      	movs	r3, #2
 8018ffe:	607b      	str	r3, [r7, #4]
 8019000:	e001      	b.n	8019006 <xTaskGetSchedulerState+0x26>
 8019002:	2300      	movs	r3, #0
 8019004:	607b      	str	r3, [r7, #4]
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	4618      	mov	r0, r3
 801900a:	370c      	adds	r7, #12
 801900c:	46bd      	mov	sp, r7
 801900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019012:	4770      	bx	lr
 8019014:	2000231c 	.word	0x2000231c
 8019018:	20002338 	.word	0x20002338

0801901c <xTaskPriorityInherit>:
 801901c:	b580      	push	{r7, lr}
 801901e:	b084      	sub	sp, #16
 8019020:	af00      	add	r7, sp, #0
 8019022:	6078      	str	r0, [r7, #4]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	60bb      	str	r3, [r7, #8]
 8019028:	2300      	movs	r3, #0
 801902a:	60fb      	str	r3, [r7, #12]
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d051      	beq.n	80190d6 <xTaskPriorityInherit+0xba>
 8019032:	68bb      	ldr	r3, [r7, #8]
 8019034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019036:	4b2a      	ldr	r3, [pc, #168]	; (80190e0 <xTaskPriorityInherit+0xc4>)
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801903c:	429a      	cmp	r2, r3
 801903e:	d241      	bcs.n	80190c4 <xTaskPriorityInherit+0xa8>
 8019040:	68bb      	ldr	r3, [r7, #8]
 8019042:	699b      	ldr	r3, [r3, #24]
 8019044:	2b00      	cmp	r3, #0
 8019046:	db06      	blt.n	8019056 <xTaskPriorityInherit+0x3a>
 8019048:	4b25      	ldr	r3, [pc, #148]	; (80190e0 <xTaskPriorityInherit+0xc4>)
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801904e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019052:	68bb      	ldr	r3, [r7, #8]
 8019054:	619a      	str	r2, [r3, #24]
 8019056:	68bb      	ldr	r3, [r7, #8]
 8019058:	6959      	ldr	r1, [r3, #20]
 801905a:	68bb      	ldr	r3, [r7, #8]
 801905c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801905e:	4613      	mov	r3, r2
 8019060:	009b      	lsls	r3, r3, #2
 8019062:	4413      	add	r3, r2
 8019064:	009b      	lsls	r3, r3, #2
 8019066:	4a1f      	ldr	r2, [pc, #124]	; (80190e4 <xTaskPriorityInherit+0xc8>)
 8019068:	4413      	add	r3, r2
 801906a:	4299      	cmp	r1, r3
 801906c:	d122      	bne.n	80190b4 <xTaskPriorityInherit+0x98>
 801906e:	68bb      	ldr	r3, [r7, #8]
 8019070:	3304      	adds	r3, #4
 8019072:	4618      	mov	r0, r3
 8019074:	f7fd fc54 	bl	8016920 <uxListRemove>
 8019078:	4b19      	ldr	r3, [pc, #100]	; (80190e0 <xTaskPriorityInherit+0xc4>)
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801907e:	68bb      	ldr	r3, [r7, #8]
 8019080:	62da      	str	r2, [r3, #44]	; 0x2c
 8019082:	68bb      	ldr	r3, [r7, #8]
 8019084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019086:	4b18      	ldr	r3, [pc, #96]	; (80190e8 <xTaskPriorityInherit+0xcc>)
 8019088:	681b      	ldr	r3, [r3, #0]
 801908a:	429a      	cmp	r2, r3
 801908c:	d903      	bls.n	8019096 <xTaskPriorityInherit+0x7a>
 801908e:	68bb      	ldr	r3, [r7, #8]
 8019090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019092:	4a15      	ldr	r2, [pc, #84]	; (80190e8 <xTaskPriorityInherit+0xcc>)
 8019094:	6013      	str	r3, [r2, #0]
 8019096:	68bb      	ldr	r3, [r7, #8]
 8019098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801909a:	4613      	mov	r3, r2
 801909c:	009b      	lsls	r3, r3, #2
 801909e:	4413      	add	r3, r2
 80190a0:	009b      	lsls	r3, r3, #2
 80190a2:	4a10      	ldr	r2, [pc, #64]	; (80190e4 <xTaskPriorityInherit+0xc8>)
 80190a4:	441a      	add	r2, r3
 80190a6:	68bb      	ldr	r3, [r7, #8]
 80190a8:	3304      	adds	r3, #4
 80190aa:	4619      	mov	r1, r3
 80190ac:	4610      	mov	r0, r2
 80190ae:	f7fd fbda 	bl	8016866 <vListInsertEnd>
 80190b2:	e004      	b.n	80190be <xTaskPriorityInherit+0xa2>
 80190b4:	4b0a      	ldr	r3, [pc, #40]	; (80190e0 <xTaskPriorityInherit+0xc4>)
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80190ba:	68bb      	ldr	r3, [r7, #8]
 80190bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80190be:	2301      	movs	r3, #1
 80190c0:	60fb      	str	r3, [r7, #12]
 80190c2:	e008      	b.n	80190d6 <xTaskPriorityInherit+0xba>
 80190c4:	68bb      	ldr	r3, [r7, #8]
 80190c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80190c8:	4b05      	ldr	r3, [pc, #20]	; (80190e0 <xTaskPriorityInherit+0xc4>)
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190ce:	429a      	cmp	r2, r3
 80190d0:	d201      	bcs.n	80190d6 <xTaskPriorityInherit+0xba>
 80190d2:	2301      	movs	r3, #1
 80190d4:	60fb      	str	r3, [r7, #12]
 80190d6:	68fb      	ldr	r3, [r7, #12]
 80190d8:	4618      	mov	r0, r3
 80190da:	3710      	adds	r7, #16
 80190dc:	46bd      	mov	sp, r7
 80190de:	bd80      	pop	{r7, pc}
 80190e0:	20001e3c 	.word	0x20001e3c
 80190e4:	20001e40 	.word	0x20001e40
 80190e8:	20002318 	.word	0x20002318

080190ec <xTaskPriorityDisinherit>:
 80190ec:	b580      	push	{r7, lr}
 80190ee:	b086      	sub	sp, #24
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	6078      	str	r0, [r7, #4]
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	613b      	str	r3, [r7, #16]
 80190f8:	2300      	movs	r3, #0
 80190fa:	617b      	str	r3, [r7, #20]
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d056      	beq.n	80191b0 <xTaskPriorityDisinherit+0xc4>
 8019102:	4b2e      	ldr	r3, [pc, #184]	; (80191bc <xTaskPriorityDisinherit+0xd0>)
 8019104:	681b      	ldr	r3, [r3, #0]
 8019106:	693a      	ldr	r2, [r7, #16]
 8019108:	429a      	cmp	r2, r3
 801910a:	d00a      	beq.n	8019122 <xTaskPriorityDisinherit+0x36>
 801910c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019110:	f383 8811 	msr	BASEPRI, r3
 8019114:	f3bf 8f6f 	isb	sy
 8019118:	f3bf 8f4f 	dsb	sy
 801911c:	60fb      	str	r3, [r7, #12]
 801911e:	bf00      	nop
 8019120:	e7fe      	b.n	8019120 <xTaskPriorityDisinherit+0x34>
 8019122:	693b      	ldr	r3, [r7, #16]
 8019124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019126:	2b00      	cmp	r3, #0
 8019128:	d10a      	bne.n	8019140 <xTaskPriorityDisinherit+0x54>
 801912a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801912e:	f383 8811 	msr	BASEPRI, r3
 8019132:	f3bf 8f6f 	isb	sy
 8019136:	f3bf 8f4f 	dsb	sy
 801913a:	60bb      	str	r3, [r7, #8]
 801913c:	bf00      	nop
 801913e:	e7fe      	b.n	801913e <xTaskPriorityDisinherit+0x52>
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019144:	1e5a      	subs	r2, r3, #1
 8019146:	693b      	ldr	r3, [r7, #16]
 8019148:	651a      	str	r2, [r3, #80]	; 0x50
 801914a:	693b      	ldr	r3, [r7, #16]
 801914c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801914e:	693b      	ldr	r3, [r7, #16]
 8019150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019152:	429a      	cmp	r2, r3
 8019154:	d02c      	beq.n	80191b0 <xTaskPriorityDisinherit+0xc4>
 8019156:	693b      	ldr	r3, [r7, #16]
 8019158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801915a:	2b00      	cmp	r3, #0
 801915c:	d128      	bne.n	80191b0 <xTaskPriorityDisinherit+0xc4>
 801915e:	693b      	ldr	r3, [r7, #16]
 8019160:	3304      	adds	r3, #4
 8019162:	4618      	mov	r0, r3
 8019164:	f7fd fbdc 	bl	8016920 <uxListRemove>
 8019168:	693b      	ldr	r3, [r7, #16]
 801916a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801916c:	693b      	ldr	r3, [r7, #16]
 801916e:	62da      	str	r2, [r3, #44]	; 0x2c
 8019170:	693b      	ldr	r3, [r7, #16]
 8019172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019174:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019178:	693b      	ldr	r3, [r7, #16]
 801917a:	619a      	str	r2, [r3, #24]
 801917c:	693b      	ldr	r3, [r7, #16]
 801917e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019180:	4b0f      	ldr	r3, [pc, #60]	; (80191c0 <xTaskPriorityDisinherit+0xd4>)
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	429a      	cmp	r2, r3
 8019186:	d903      	bls.n	8019190 <xTaskPriorityDisinherit+0xa4>
 8019188:	693b      	ldr	r3, [r7, #16]
 801918a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801918c:	4a0c      	ldr	r2, [pc, #48]	; (80191c0 <xTaskPriorityDisinherit+0xd4>)
 801918e:	6013      	str	r3, [r2, #0]
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019194:	4613      	mov	r3, r2
 8019196:	009b      	lsls	r3, r3, #2
 8019198:	4413      	add	r3, r2
 801919a:	009b      	lsls	r3, r3, #2
 801919c:	4a09      	ldr	r2, [pc, #36]	; (80191c4 <xTaskPriorityDisinherit+0xd8>)
 801919e:	441a      	add	r2, r3
 80191a0:	693b      	ldr	r3, [r7, #16]
 80191a2:	3304      	adds	r3, #4
 80191a4:	4619      	mov	r1, r3
 80191a6:	4610      	mov	r0, r2
 80191a8:	f7fd fb5d 	bl	8016866 <vListInsertEnd>
 80191ac:	2301      	movs	r3, #1
 80191ae:	617b      	str	r3, [r7, #20]
 80191b0:	697b      	ldr	r3, [r7, #20]
 80191b2:	4618      	mov	r0, r3
 80191b4:	3718      	adds	r7, #24
 80191b6:	46bd      	mov	sp, r7
 80191b8:	bd80      	pop	{r7, pc}
 80191ba:	bf00      	nop
 80191bc:	20001e3c 	.word	0x20001e3c
 80191c0:	20002318 	.word	0x20002318
 80191c4:	20001e40 	.word	0x20001e40

080191c8 <vTaskPriorityDisinheritAfterTimeout>:
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b088      	sub	sp, #32
 80191cc:	af00      	add	r7, sp, #0
 80191ce:	6078      	str	r0, [r7, #4]
 80191d0:	6039      	str	r1, [r7, #0]
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	61bb      	str	r3, [r7, #24]
 80191d6:	2301      	movs	r3, #1
 80191d8:	617b      	str	r3, [r7, #20]
 80191da:	687b      	ldr	r3, [r7, #4]
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d06a      	beq.n	80192b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 80191e0:	69bb      	ldr	r3, [r7, #24]
 80191e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d10a      	bne.n	80191fe <vTaskPriorityDisinheritAfterTimeout+0x36>
 80191e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191ec:	f383 8811 	msr	BASEPRI, r3
 80191f0:	f3bf 8f6f 	isb	sy
 80191f4:	f3bf 8f4f 	dsb	sy
 80191f8:	60fb      	str	r3, [r7, #12]
 80191fa:	bf00      	nop
 80191fc:	e7fe      	b.n	80191fc <vTaskPriorityDisinheritAfterTimeout+0x34>
 80191fe:	69bb      	ldr	r3, [r7, #24]
 8019200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019202:	683a      	ldr	r2, [r7, #0]
 8019204:	429a      	cmp	r2, r3
 8019206:	d902      	bls.n	801920e <vTaskPriorityDisinheritAfterTimeout+0x46>
 8019208:	683b      	ldr	r3, [r7, #0]
 801920a:	61fb      	str	r3, [r7, #28]
 801920c:	e002      	b.n	8019214 <vTaskPriorityDisinheritAfterTimeout+0x4c>
 801920e:	69bb      	ldr	r3, [r7, #24]
 8019210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019212:	61fb      	str	r3, [r7, #28]
 8019214:	69bb      	ldr	r3, [r7, #24]
 8019216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019218:	69fa      	ldr	r2, [r7, #28]
 801921a:	429a      	cmp	r2, r3
 801921c:	d04b      	beq.n	80192b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 801921e:	69bb      	ldr	r3, [r7, #24]
 8019220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019222:	697a      	ldr	r2, [r7, #20]
 8019224:	429a      	cmp	r2, r3
 8019226:	d146      	bne.n	80192b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8019228:	4b25      	ldr	r3, [pc, #148]	; (80192c0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	69ba      	ldr	r2, [r7, #24]
 801922e:	429a      	cmp	r2, r3
 8019230:	d10a      	bne.n	8019248 <vTaskPriorityDisinheritAfterTimeout+0x80>
 8019232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019236:	f383 8811 	msr	BASEPRI, r3
 801923a:	f3bf 8f6f 	isb	sy
 801923e:	f3bf 8f4f 	dsb	sy
 8019242:	60bb      	str	r3, [r7, #8]
 8019244:	bf00      	nop
 8019246:	e7fe      	b.n	8019246 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8019248:	69bb      	ldr	r3, [r7, #24]
 801924a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801924c:	613b      	str	r3, [r7, #16]
 801924e:	69bb      	ldr	r3, [r7, #24]
 8019250:	69fa      	ldr	r2, [r7, #28]
 8019252:	62da      	str	r2, [r3, #44]	; 0x2c
 8019254:	69bb      	ldr	r3, [r7, #24]
 8019256:	699b      	ldr	r3, [r3, #24]
 8019258:	2b00      	cmp	r3, #0
 801925a:	db04      	blt.n	8019266 <vTaskPriorityDisinheritAfterTimeout+0x9e>
 801925c:	69fb      	ldr	r3, [r7, #28]
 801925e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8019262:	69bb      	ldr	r3, [r7, #24]
 8019264:	619a      	str	r2, [r3, #24]
 8019266:	69bb      	ldr	r3, [r7, #24]
 8019268:	6959      	ldr	r1, [r3, #20]
 801926a:	693a      	ldr	r2, [r7, #16]
 801926c:	4613      	mov	r3, r2
 801926e:	009b      	lsls	r3, r3, #2
 8019270:	4413      	add	r3, r2
 8019272:	009b      	lsls	r3, r3, #2
 8019274:	4a13      	ldr	r2, [pc, #76]	; (80192c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8019276:	4413      	add	r3, r2
 8019278:	4299      	cmp	r1, r3
 801927a:	d11c      	bne.n	80192b6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 801927c:	69bb      	ldr	r3, [r7, #24]
 801927e:	3304      	adds	r3, #4
 8019280:	4618      	mov	r0, r3
 8019282:	f7fd fb4d 	bl	8016920 <uxListRemove>
 8019286:	69bb      	ldr	r3, [r7, #24]
 8019288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801928a:	4b0f      	ldr	r3, [pc, #60]	; (80192c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	429a      	cmp	r2, r3
 8019290:	d903      	bls.n	801929a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8019292:	69bb      	ldr	r3, [r7, #24]
 8019294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019296:	4a0c      	ldr	r2, [pc, #48]	; (80192c8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8019298:	6013      	str	r3, [r2, #0]
 801929a:	69bb      	ldr	r3, [r7, #24]
 801929c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801929e:	4613      	mov	r3, r2
 80192a0:	009b      	lsls	r3, r3, #2
 80192a2:	4413      	add	r3, r2
 80192a4:	009b      	lsls	r3, r3, #2
 80192a6:	4a07      	ldr	r2, [pc, #28]	; (80192c4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80192a8:	441a      	add	r2, r3
 80192aa:	69bb      	ldr	r3, [r7, #24]
 80192ac:	3304      	adds	r3, #4
 80192ae:	4619      	mov	r1, r3
 80192b0:	4610      	mov	r0, r2
 80192b2:	f7fd fad8 	bl	8016866 <vListInsertEnd>
 80192b6:	bf00      	nop
 80192b8:	3720      	adds	r7, #32
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}
 80192be:	bf00      	nop
 80192c0:	20001e3c 	.word	0x20001e3c
 80192c4:	20001e40 	.word	0x20001e40
 80192c8:	20002318 	.word	0x20002318

080192cc <pvTaskIncrementMutexHeldCount>:
 80192cc:	b480      	push	{r7}
 80192ce:	af00      	add	r7, sp, #0
 80192d0:	4b07      	ldr	r3, [pc, #28]	; (80192f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d004      	beq.n	80192e2 <pvTaskIncrementMutexHeldCount+0x16>
 80192d8:	4b05      	ldr	r3, [pc, #20]	; (80192f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80192da:	681b      	ldr	r3, [r3, #0]
 80192dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80192de:	3201      	adds	r2, #1
 80192e0:	651a      	str	r2, [r3, #80]	; 0x50
 80192e2:	4b03      	ldr	r3, [pc, #12]	; (80192f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	4618      	mov	r0, r3
 80192e8:	46bd      	mov	sp, r7
 80192ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192ee:	4770      	bx	lr
 80192f0:	20001e3c 	.word	0x20001e3c

080192f4 <xTaskNotifyWait>:
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b086      	sub	sp, #24
 80192f8:	af00      	add	r7, sp, #0
 80192fa:	60f8      	str	r0, [r7, #12]
 80192fc:	60b9      	str	r1, [r7, #8]
 80192fe:	607a      	str	r2, [r7, #4]
 8019300:	603b      	str	r3, [r7, #0]
 8019302:	f000 fe07 	bl	8019f14 <vPortEnterCritical>
 8019306:	4b29      	ldr	r3, [pc, #164]	; (80193ac <xTaskNotifyWait+0xb8>)
 8019308:	681b      	ldr	r3, [r3, #0]
 801930a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801930e:	b2db      	uxtb	r3, r3
 8019310:	2b02      	cmp	r3, #2
 8019312:	d01c      	beq.n	801934e <xTaskNotifyWait+0x5a>
 8019314:	4b25      	ldr	r3, [pc, #148]	; (80193ac <xTaskNotifyWait+0xb8>)
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801931c:	68fa      	ldr	r2, [r7, #12]
 801931e:	43d2      	mvns	r2, r2
 8019320:	400a      	ands	r2, r1
 8019322:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8019326:	4b21      	ldr	r3, [pc, #132]	; (80193ac <xTaskNotifyWait+0xb8>)
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	2201      	movs	r2, #1
 801932c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8019330:	683b      	ldr	r3, [r7, #0]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d00b      	beq.n	801934e <xTaskNotifyWait+0x5a>
 8019336:	2101      	movs	r1, #1
 8019338:	6838      	ldr	r0, [r7, #0]
 801933a:	f000 f91f 	bl	801957c <prvAddCurrentTaskToDelayedList>
 801933e:	4b1c      	ldr	r3, [pc, #112]	; (80193b0 <xTaskNotifyWait+0xbc>)
 8019340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019344:	601a      	str	r2, [r3, #0]
 8019346:	f3bf 8f4f 	dsb	sy
 801934a:	f3bf 8f6f 	isb	sy
 801934e:	f000 fe11 	bl	8019f74 <vPortExitCritical>
 8019352:	f000 fddf 	bl	8019f14 <vPortEnterCritical>
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d005      	beq.n	8019368 <xTaskNotifyWait+0x74>
 801935c:	4b13      	ldr	r3, [pc, #76]	; (80193ac <xTaskNotifyWait+0xb8>)
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	601a      	str	r2, [r3, #0]
 8019368:	4b10      	ldr	r3, [pc, #64]	; (80193ac <xTaskNotifyWait+0xb8>)
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8019370:	b2db      	uxtb	r3, r3
 8019372:	2b02      	cmp	r3, #2
 8019374:	d002      	beq.n	801937c <xTaskNotifyWait+0x88>
 8019376:	2300      	movs	r3, #0
 8019378:	617b      	str	r3, [r7, #20]
 801937a:	e00a      	b.n	8019392 <xTaskNotifyWait+0x9e>
 801937c:	4b0b      	ldr	r3, [pc, #44]	; (80193ac <xTaskNotifyWait+0xb8>)
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8019384:	68ba      	ldr	r2, [r7, #8]
 8019386:	43d2      	mvns	r2, r2
 8019388:	400a      	ands	r2, r1
 801938a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801938e:	2301      	movs	r3, #1
 8019390:	617b      	str	r3, [r7, #20]
 8019392:	4b06      	ldr	r3, [pc, #24]	; (80193ac <xTaskNotifyWait+0xb8>)
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	2200      	movs	r2, #0
 8019398:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 801939c:	f000 fdea 	bl	8019f74 <vPortExitCritical>
 80193a0:	697b      	ldr	r3, [r7, #20]
 80193a2:	4618      	mov	r0, r3
 80193a4:	3718      	adds	r7, #24
 80193a6:	46bd      	mov	sp, r7
 80193a8:	bd80      	pop	{r7, pc}
 80193aa:	bf00      	nop
 80193ac:	20001e3c 	.word	0x20001e3c
 80193b0:	e000ed04 	.word	0xe000ed04

080193b4 <xTaskGenericNotify>:
 80193b4:	b580      	push	{r7, lr}
 80193b6:	b08a      	sub	sp, #40	; 0x28
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	60f8      	str	r0, [r7, #12]
 80193bc:	60b9      	str	r1, [r7, #8]
 80193be:	603b      	str	r3, [r7, #0]
 80193c0:	4613      	mov	r3, r2
 80193c2:	71fb      	strb	r3, [r7, #7]
 80193c4:	2301      	movs	r3, #1
 80193c6:	627b      	str	r3, [r7, #36]	; 0x24
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	2b00      	cmp	r3, #0
 80193cc:	d10a      	bne.n	80193e4 <xTaskGenericNotify+0x30>
 80193ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193d2:	f383 8811 	msr	BASEPRI, r3
 80193d6:	f3bf 8f6f 	isb	sy
 80193da:	f3bf 8f4f 	dsb	sy
 80193de:	61bb      	str	r3, [r7, #24]
 80193e0:	bf00      	nop
 80193e2:	e7fe      	b.n	80193e2 <xTaskGenericNotify+0x2e>
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	623b      	str	r3, [r7, #32]
 80193e8:	f000 fd94 	bl	8019f14 <vPortEnterCritical>
 80193ec:	683b      	ldr	r3, [r7, #0]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d004      	beq.n	80193fc <xTaskGenericNotify+0x48>
 80193f2:	6a3b      	ldr	r3, [r7, #32]
 80193f4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	601a      	str	r2, [r3, #0]
 80193fc:	6a3b      	ldr	r3, [r7, #32]
 80193fe:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8019402:	77fb      	strb	r3, [r7, #31]
 8019404:	6a3b      	ldr	r3, [r7, #32]
 8019406:	2202      	movs	r2, #2
 8019408:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 801940c:	79fb      	ldrb	r3, [r7, #7]
 801940e:	2b04      	cmp	r3, #4
 8019410:	d82d      	bhi.n	801946e <xTaskGenericNotify+0xba>
 8019412:	a201      	add	r2, pc, #4	; (adr r2, 8019418 <xTaskGenericNotify+0x64>)
 8019414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019418:	08019491 	.word	0x08019491
 801941c:	0801942d 	.word	0x0801942d
 8019420:	0801943f 	.word	0x0801943f
 8019424:	0801944f 	.word	0x0801944f
 8019428:	08019459 	.word	0x08019459
 801942c:	6a3b      	ldr	r3, [r7, #32]
 801942e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8019432:	68bb      	ldr	r3, [r7, #8]
 8019434:	431a      	orrs	r2, r3
 8019436:	6a3b      	ldr	r3, [r7, #32]
 8019438:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801943c:	e02b      	b.n	8019496 <xTaskGenericNotify+0xe2>
 801943e:	6a3b      	ldr	r3, [r7, #32]
 8019440:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8019444:	1c5a      	adds	r2, r3, #1
 8019446:	6a3b      	ldr	r3, [r7, #32]
 8019448:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801944c:	e023      	b.n	8019496 <xTaskGenericNotify+0xe2>
 801944e:	6a3b      	ldr	r3, [r7, #32]
 8019450:	68ba      	ldr	r2, [r7, #8]
 8019452:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8019456:	e01e      	b.n	8019496 <xTaskGenericNotify+0xe2>
 8019458:	7ffb      	ldrb	r3, [r7, #31]
 801945a:	2b02      	cmp	r3, #2
 801945c:	d004      	beq.n	8019468 <xTaskGenericNotify+0xb4>
 801945e:	6a3b      	ldr	r3, [r7, #32]
 8019460:	68ba      	ldr	r2, [r7, #8]
 8019462:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8019466:	e016      	b.n	8019496 <xTaskGenericNotify+0xe2>
 8019468:	2300      	movs	r3, #0
 801946a:	627b      	str	r3, [r7, #36]	; 0x24
 801946c:	e013      	b.n	8019496 <xTaskGenericNotify+0xe2>
 801946e:	6a3b      	ldr	r3, [r7, #32]
 8019470:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8019474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019478:	d00c      	beq.n	8019494 <xTaskGenericNotify+0xe0>
 801947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801947e:	f383 8811 	msr	BASEPRI, r3
 8019482:	f3bf 8f6f 	isb	sy
 8019486:	f3bf 8f4f 	dsb	sy
 801948a:	617b      	str	r3, [r7, #20]
 801948c:	bf00      	nop
 801948e:	e7fe      	b.n	801948e <xTaskGenericNotify+0xda>
 8019490:	bf00      	nop
 8019492:	e000      	b.n	8019496 <xTaskGenericNotify+0xe2>
 8019494:	bf00      	nop
 8019496:	7ffb      	ldrb	r3, [r7, #31]
 8019498:	2b01      	cmp	r3, #1
 801949a:	d13a      	bne.n	8019512 <xTaskGenericNotify+0x15e>
 801949c:	6a3b      	ldr	r3, [r7, #32]
 801949e:	3304      	adds	r3, #4
 80194a0:	4618      	mov	r0, r3
 80194a2:	f7fd fa3d 	bl	8016920 <uxListRemove>
 80194a6:	6a3b      	ldr	r3, [r7, #32]
 80194a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194aa:	4b1d      	ldr	r3, [pc, #116]	; (8019520 <xTaskGenericNotify+0x16c>)
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	429a      	cmp	r2, r3
 80194b0:	d903      	bls.n	80194ba <xTaskGenericNotify+0x106>
 80194b2:	6a3b      	ldr	r3, [r7, #32]
 80194b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194b6:	4a1a      	ldr	r2, [pc, #104]	; (8019520 <xTaskGenericNotify+0x16c>)
 80194b8:	6013      	str	r3, [r2, #0]
 80194ba:	6a3b      	ldr	r3, [r7, #32]
 80194bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194be:	4613      	mov	r3, r2
 80194c0:	009b      	lsls	r3, r3, #2
 80194c2:	4413      	add	r3, r2
 80194c4:	009b      	lsls	r3, r3, #2
 80194c6:	4a17      	ldr	r2, [pc, #92]	; (8019524 <xTaskGenericNotify+0x170>)
 80194c8:	441a      	add	r2, r3
 80194ca:	6a3b      	ldr	r3, [r7, #32]
 80194cc:	3304      	adds	r3, #4
 80194ce:	4619      	mov	r1, r3
 80194d0:	4610      	mov	r0, r2
 80194d2:	f7fd f9c8 	bl	8016866 <vListInsertEnd>
 80194d6:	6a3b      	ldr	r3, [r7, #32]
 80194d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d00a      	beq.n	80194f4 <xTaskGenericNotify+0x140>
 80194de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194e2:	f383 8811 	msr	BASEPRI, r3
 80194e6:	f3bf 8f6f 	isb	sy
 80194ea:	f3bf 8f4f 	dsb	sy
 80194ee:	613b      	str	r3, [r7, #16]
 80194f0:	bf00      	nop
 80194f2:	e7fe      	b.n	80194f2 <xTaskGenericNotify+0x13e>
 80194f4:	6a3b      	ldr	r3, [r7, #32]
 80194f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80194f8:	4b0b      	ldr	r3, [pc, #44]	; (8019528 <xTaskGenericNotify+0x174>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194fe:	429a      	cmp	r2, r3
 8019500:	d907      	bls.n	8019512 <xTaskGenericNotify+0x15e>
 8019502:	4b0a      	ldr	r3, [pc, #40]	; (801952c <xTaskGenericNotify+0x178>)
 8019504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019508:	601a      	str	r2, [r3, #0]
 801950a:	f3bf 8f4f 	dsb	sy
 801950e:	f3bf 8f6f 	isb	sy
 8019512:	f000 fd2f 	bl	8019f74 <vPortExitCritical>
 8019516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019518:	4618      	mov	r0, r3
 801951a:	3728      	adds	r7, #40	; 0x28
 801951c:	46bd      	mov	sp, r7
 801951e:	bd80      	pop	{r7, pc}
 8019520:	20002318 	.word	0x20002318
 8019524:	20001e40 	.word	0x20001e40
 8019528:	20001e3c 	.word	0x20001e3c
 801952c:	e000ed04 	.word	0xe000ed04

08019530 <xTaskNotifyStateClear>:
 8019530:	b580      	push	{r7, lr}
 8019532:	b084      	sub	sp, #16
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d102      	bne.n	8019544 <xTaskNotifyStateClear+0x14>
 801953e:	4b0e      	ldr	r3, [pc, #56]	; (8019578 <xTaskNotifyStateClear+0x48>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	e000      	b.n	8019546 <xTaskNotifyStateClear+0x16>
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	60bb      	str	r3, [r7, #8]
 8019548:	f000 fce4 	bl	8019f14 <vPortEnterCritical>
 801954c:	68bb      	ldr	r3, [r7, #8]
 801954e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8019552:	b2db      	uxtb	r3, r3
 8019554:	2b02      	cmp	r3, #2
 8019556:	d106      	bne.n	8019566 <xTaskNotifyStateClear+0x36>
 8019558:	68bb      	ldr	r3, [r7, #8]
 801955a:	2200      	movs	r2, #0
 801955c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8019560:	2301      	movs	r3, #1
 8019562:	60fb      	str	r3, [r7, #12]
 8019564:	e001      	b.n	801956a <xTaskNotifyStateClear+0x3a>
 8019566:	2300      	movs	r3, #0
 8019568:	60fb      	str	r3, [r7, #12]
 801956a:	f000 fd03 	bl	8019f74 <vPortExitCritical>
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	4618      	mov	r0, r3
 8019572:	3710      	adds	r7, #16
 8019574:	46bd      	mov	sp, r7
 8019576:	bd80      	pop	{r7, pc}
 8019578:	20001e3c 	.word	0x20001e3c

0801957c <prvAddCurrentTaskToDelayedList>:
 801957c:	b580      	push	{r7, lr}
 801957e:	b084      	sub	sp, #16
 8019580:	af00      	add	r7, sp, #0
 8019582:	6078      	str	r0, [r7, #4]
 8019584:	6039      	str	r1, [r7, #0]
 8019586:	4b21      	ldr	r3, [pc, #132]	; (801960c <prvAddCurrentTaskToDelayedList+0x90>)
 8019588:	681b      	ldr	r3, [r3, #0]
 801958a:	60fb      	str	r3, [r7, #12]
 801958c:	4b20      	ldr	r3, [pc, #128]	; (8019610 <prvAddCurrentTaskToDelayedList+0x94>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	3304      	adds	r3, #4
 8019592:	4618      	mov	r0, r3
 8019594:	f7fd f9c4 	bl	8016920 <uxListRemove>
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801959e:	d10a      	bne.n	80195b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	2b00      	cmp	r3, #0
 80195a4:	d007      	beq.n	80195b6 <prvAddCurrentTaskToDelayedList+0x3a>
 80195a6:	4b1a      	ldr	r3, [pc, #104]	; (8019610 <prvAddCurrentTaskToDelayedList+0x94>)
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	3304      	adds	r3, #4
 80195ac:	4619      	mov	r1, r3
 80195ae:	4819      	ldr	r0, [pc, #100]	; (8019614 <prvAddCurrentTaskToDelayedList+0x98>)
 80195b0:	f7fd f959 	bl	8016866 <vListInsertEnd>
 80195b4:	e026      	b.n	8019604 <prvAddCurrentTaskToDelayedList+0x88>
 80195b6:	68fa      	ldr	r2, [r7, #12]
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	4413      	add	r3, r2
 80195bc:	60bb      	str	r3, [r7, #8]
 80195be:	4b14      	ldr	r3, [pc, #80]	; (8019610 <prvAddCurrentTaskToDelayedList+0x94>)
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	68ba      	ldr	r2, [r7, #8]
 80195c4:	605a      	str	r2, [r3, #4]
 80195c6:	68ba      	ldr	r2, [r7, #8]
 80195c8:	68fb      	ldr	r3, [r7, #12]
 80195ca:	429a      	cmp	r2, r3
 80195cc:	d209      	bcs.n	80195e2 <prvAddCurrentTaskToDelayedList+0x66>
 80195ce:	4b12      	ldr	r3, [pc, #72]	; (8019618 <prvAddCurrentTaskToDelayedList+0x9c>)
 80195d0:	681a      	ldr	r2, [r3, #0]
 80195d2:	4b0f      	ldr	r3, [pc, #60]	; (8019610 <prvAddCurrentTaskToDelayedList+0x94>)
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	3304      	adds	r3, #4
 80195d8:	4619      	mov	r1, r3
 80195da:	4610      	mov	r0, r2
 80195dc:	f7fd f967 	bl	80168ae <vListInsert>
 80195e0:	e010      	b.n	8019604 <prvAddCurrentTaskToDelayedList+0x88>
 80195e2:	4b0e      	ldr	r3, [pc, #56]	; (801961c <prvAddCurrentTaskToDelayedList+0xa0>)
 80195e4:	681a      	ldr	r2, [r3, #0]
 80195e6:	4b0a      	ldr	r3, [pc, #40]	; (8019610 <prvAddCurrentTaskToDelayedList+0x94>)
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	3304      	adds	r3, #4
 80195ec:	4619      	mov	r1, r3
 80195ee:	4610      	mov	r0, r2
 80195f0:	f7fd f95d 	bl	80168ae <vListInsert>
 80195f4:	4b0a      	ldr	r3, [pc, #40]	; (8019620 <prvAddCurrentTaskToDelayedList+0xa4>)
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	68ba      	ldr	r2, [r7, #8]
 80195fa:	429a      	cmp	r2, r3
 80195fc:	d202      	bcs.n	8019604 <prvAddCurrentTaskToDelayedList+0x88>
 80195fe:	4a08      	ldr	r2, [pc, #32]	; (8019620 <prvAddCurrentTaskToDelayedList+0xa4>)
 8019600:	68bb      	ldr	r3, [r7, #8]
 8019602:	6013      	str	r3, [r2, #0]
 8019604:	bf00      	nop
 8019606:	3710      	adds	r7, #16
 8019608:	46bd      	mov	sp, r7
 801960a:	bd80      	pop	{r7, pc}
 801960c:	20002314 	.word	0x20002314
 8019610:	20001e3c 	.word	0x20001e3c
 8019614:	200022fc 	.word	0x200022fc
 8019618:	200022cc 	.word	0x200022cc
 801961c:	200022c8 	.word	0x200022c8
 8019620:	20002330 	.word	0x20002330

08019624 <xTimerCreateTimerTask>:
 8019624:	b580      	push	{r7, lr}
 8019626:	b08a      	sub	sp, #40	; 0x28
 8019628:	af04      	add	r7, sp, #16
 801962a:	2300      	movs	r3, #0
 801962c:	617b      	str	r3, [r7, #20]
 801962e:	f000 fb07 	bl	8019c40 <prvCheckForValidListAndQueue>
 8019632:	4b1c      	ldr	r3, [pc, #112]	; (80196a4 <xTimerCreateTimerTask+0x80>)
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	2b00      	cmp	r3, #0
 8019638:	d021      	beq.n	801967e <xTimerCreateTimerTask+0x5a>
 801963a:	2300      	movs	r3, #0
 801963c:	60fb      	str	r3, [r7, #12]
 801963e:	2300      	movs	r3, #0
 8019640:	60bb      	str	r3, [r7, #8]
 8019642:	1d3a      	adds	r2, r7, #4
 8019644:	f107 0108 	add.w	r1, r7, #8
 8019648:	f107 030c 	add.w	r3, r7, #12
 801964c:	4618      	mov	r0, r3
 801964e:	f7fd f8c3 	bl	80167d8 <vApplicationGetTimerTaskMemory>
 8019652:	6879      	ldr	r1, [r7, #4]
 8019654:	68bb      	ldr	r3, [r7, #8]
 8019656:	68fa      	ldr	r2, [r7, #12]
 8019658:	9202      	str	r2, [sp, #8]
 801965a:	9301      	str	r3, [sp, #4]
 801965c:	2302      	movs	r3, #2
 801965e:	9300      	str	r3, [sp, #0]
 8019660:	2300      	movs	r3, #0
 8019662:	460a      	mov	r2, r1
 8019664:	4910      	ldr	r1, [pc, #64]	; (80196a8 <xTimerCreateTimerTask+0x84>)
 8019666:	4811      	ldr	r0, [pc, #68]	; (80196ac <xTimerCreateTimerTask+0x88>)
 8019668:	f7fe fe0a 	bl	8018280 <xTaskCreateStatic>
 801966c:	4603      	mov	r3, r0
 801966e:	4a10      	ldr	r2, [pc, #64]	; (80196b0 <xTimerCreateTimerTask+0x8c>)
 8019670:	6013      	str	r3, [r2, #0]
 8019672:	4b0f      	ldr	r3, [pc, #60]	; (80196b0 <xTimerCreateTimerTask+0x8c>)
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	2b00      	cmp	r3, #0
 8019678:	d001      	beq.n	801967e <xTimerCreateTimerTask+0x5a>
 801967a:	2301      	movs	r3, #1
 801967c:	617b      	str	r3, [r7, #20]
 801967e:	697b      	ldr	r3, [r7, #20]
 8019680:	2b00      	cmp	r3, #0
 8019682:	d10a      	bne.n	801969a <xTimerCreateTimerTask+0x76>
 8019684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019688:	f383 8811 	msr	BASEPRI, r3
 801968c:	f3bf 8f6f 	isb	sy
 8019690:	f3bf 8f4f 	dsb	sy
 8019694:	613b      	str	r3, [r7, #16]
 8019696:	bf00      	nop
 8019698:	e7fe      	b.n	8019698 <xTimerCreateTimerTask+0x74>
 801969a:	697b      	ldr	r3, [r7, #20]
 801969c:	4618      	mov	r0, r3
 801969e:	3718      	adds	r7, #24
 80196a0:	46bd      	mov	sp, r7
 80196a2:	bd80      	pop	{r7, pc}
 80196a4:	20002374 	.word	0x20002374
 80196a8:	0801d8ec 	.word	0x0801d8ec
 80196ac:	080197e9 	.word	0x080197e9
 80196b0:	20002378 	.word	0x20002378

080196b4 <xTimerGenericCommand>:
 80196b4:	b580      	push	{r7, lr}
 80196b6:	b08a      	sub	sp, #40	; 0x28
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	60f8      	str	r0, [r7, #12]
 80196bc:	60b9      	str	r1, [r7, #8]
 80196be:	607a      	str	r2, [r7, #4]
 80196c0:	603b      	str	r3, [r7, #0]
 80196c2:	2300      	movs	r3, #0
 80196c4:	627b      	str	r3, [r7, #36]	; 0x24
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d10a      	bne.n	80196e2 <xTimerGenericCommand+0x2e>
 80196cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196d0:	f383 8811 	msr	BASEPRI, r3
 80196d4:	f3bf 8f6f 	isb	sy
 80196d8:	f3bf 8f4f 	dsb	sy
 80196dc:	623b      	str	r3, [r7, #32]
 80196de:	bf00      	nop
 80196e0:	e7fe      	b.n	80196e0 <xTimerGenericCommand+0x2c>
 80196e2:	4b1a      	ldr	r3, [pc, #104]	; (801974c <xTimerGenericCommand+0x98>)
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d02a      	beq.n	8019740 <xTimerGenericCommand+0x8c>
 80196ea:	68bb      	ldr	r3, [r7, #8]
 80196ec:	613b      	str	r3, [r7, #16]
 80196ee:	687b      	ldr	r3, [r7, #4]
 80196f0:	617b      	str	r3, [r7, #20]
 80196f2:	68fb      	ldr	r3, [r7, #12]
 80196f4:	61bb      	str	r3, [r7, #24]
 80196f6:	68bb      	ldr	r3, [r7, #8]
 80196f8:	2b05      	cmp	r3, #5
 80196fa:	dc18      	bgt.n	801972e <xTimerGenericCommand+0x7a>
 80196fc:	f7ff fc70 	bl	8018fe0 <xTaskGetSchedulerState>
 8019700:	4603      	mov	r3, r0
 8019702:	2b02      	cmp	r3, #2
 8019704:	d109      	bne.n	801971a <xTimerGenericCommand+0x66>
 8019706:	4b11      	ldr	r3, [pc, #68]	; (801974c <xTimerGenericCommand+0x98>)
 8019708:	6818      	ldr	r0, [r3, #0]
 801970a:	f107 0110 	add.w	r1, r7, #16
 801970e:	2300      	movs	r3, #0
 8019710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019712:	f7fd fb8d 	bl	8016e30 <xQueueGenericSend>
 8019716:	6278      	str	r0, [r7, #36]	; 0x24
 8019718:	e012      	b.n	8019740 <xTimerGenericCommand+0x8c>
 801971a:	4b0c      	ldr	r3, [pc, #48]	; (801974c <xTimerGenericCommand+0x98>)
 801971c:	6818      	ldr	r0, [r3, #0]
 801971e:	f107 0110 	add.w	r1, r7, #16
 8019722:	2300      	movs	r3, #0
 8019724:	2200      	movs	r2, #0
 8019726:	f7fd fb83 	bl	8016e30 <xQueueGenericSend>
 801972a:	6278      	str	r0, [r7, #36]	; 0x24
 801972c:	e008      	b.n	8019740 <xTimerGenericCommand+0x8c>
 801972e:	4b07      	ldr	r3, [pc, #28]	; (801974c <xTimerGenericCommand+0x98>)
 8019730:	6818      	ldr	r0, [r3, #0]
 8019732:	f107 0110 	add.w	r1, r7, #16
 8019736:	2300      	movs	r3, #0
 8019738:	683a      	ldr	r2, [r7, #0]
 801973a:	f7fd fc77 	bl	801702c <xQueueGenericSendFromISR>
 801973e:	6278      	str	r0, [r7, #36]	; 0x24
 8019740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019742:	4618      	mov	r0, r3
 8019744:	3728      	adds	r7, #40	; 0x28
 8019746:	46bd      	mov	sp, r7
 8019748:	bd80      	pop	{r7, pc}
 801974a:	bf00      	nop
 801974c:	20002374 	.word	0x20002374

08019750 <prvProcessExpiredTimer>:
 8019750:	b580      	push	{r7, lr}
 8019752:	b088      	sub	sp, #32
 8019754:	af02      	add	r7, sp, #8
 8019756:	6078      	str	r0, [r7, #4]
 8019758:	6039      	str	r1, [r7, #0]
 801975a:	4b22      	ldr	r3, [pc, #136]	; (80197e4 <prvProcessExpiredTimer+0x94>)
 801975c:	681b      	ldr	r3, [r3, #0]
 801975e:	68db      	ldr	r3, [r3, #12]
 8019760:	68db      	ldr	r3, [r3, #12]
 8019762:	617b      	str	r3, [r7, #20]
 8019764:	697b      	ldr	r3, [r7, #20]
 8019766:	3304      	adds	r3, #4
 8019768:	4618      	mov	r0, r3
 801976a:	f7fd f8d9 	bl	8016920 <uxListRemove>
 801976e:	697b      	ldr	r3, [r7, #20]
 8019770:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019774:	f003 0304 	and.w	r3, r3, #4
 8019778:	2b00      	cmp	r3, #0
 801977a:	d022      	beq.n	80197c2 <prvProcessExpiredTimer+0x72>
 801977c:	697b      	ldr	r3, [r7, #20]
 801977e:	699a      	ldr	r2, [r3, #24]
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	18d1      	adds	r1, r2, r3
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	683a      	ldr	r2, [r7, #0]
 8019788:	6978      	ldr	r0, [r7, #20]
 801978a:	f000 f8d1 	bl	8019930 <prvInsertTimerInActiveList>
 801978e:	4603      	mov	r3, r0
 8019790:	2b00      	cmp	r3, #0
 8019792:	d01f      	beq.n	80197d4 <prvProcessExpiredTimer+0x84>
 8019794:	2300      	movs	r3, #0
 8019796:	9300      	str	r3, [sp, #0]
 8019798:	2300      	movs	r3, #0
 801979a:	687a      	ldr	r2, [r7, #4]
 801979c:	2100      	movs	r1, #0
 801979e:	6978      	ldr	r0, [r7, #20]
 80197a0:	f7ff ff88 	bl	80196b4 <xTimerGenericCommand>
 80197a4:	6138      	str	r0, [r7, #16]
 80197a6:	693b      	ldr	r3, [r7, #16]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d113      	bne.n	80197d4 <prvProcessExpiredTimer+0x84>
 80197ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197b0:	f383 8811 	msr	BASEPRI, r3
 80197b4:	f3bf 8f6f 	isb	sy
 80197b8:	f3bf 8f4f 	dsb	sy
 80197bc:	60fb      	str	r3, [r7, #12]
 80197be:	bf00      	nop
 80197c0:	e7fe      	b.n	80197c0 <prvProcessExpiredTimer+0x70>
 80197c2:	697b      	ldr	r3, [r7, #20]
 80197c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80197c8:	f023 0301 	bic.w	r3, r3, #1
 80197cc:	b2da      	uxtb	r2, r3
 80197ce:	697b      	ldr	r3, [r7, #20]
 80197d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80197d4:	697b      	ldr	r3, [r7, #20]
 80197d6:	6a1b      	ldr	r3, [r3, #32]
 80197d8:	6978      	ldr	r0, [r7, #20]
 80197da:	4798      	blx	r3
 80197dc:	bf00      	nop
 80197de:	3718      	adds	r7, #24
 80197e0:	46bd      	mov	sp, r7
 80197e2:	bd80      	pop	{r7, pc}
 80197e4:	2000236c 	.word	0x2000236c

080197e8 <prvTimerTask>:
 80197e8:	b580      	push	{r7, lr}
 80197ea:	b084      	sub	sp, #16
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
 80197f0:	f107 0308 	add.w	r3, r7, #8
 80197f4:	4618      	mov	r0, r3
 80197f6:	f000 f857 	bl	80198a8 <prvGetNextExpireTime>
 80197fa:	60f8      	str	r0, [r7, #12]
 80197fc:	68bb      	ldr	r3, [r7, #8]
 80197fe:	4619      	mov	r1, r3
 8019800:	68f8      	ldr	r0, [r7, #12]
 8019802:	f000 f803 	bl	801980c <prvProcessTimerOrBlockTask>
 8019806:	f000 f8d5 	bl	80199b4 <prvProcessReceivedCommands>
 801980a:	e7f1      	b.n	80197f0 <prvTimerTask+0x8>

0801980c <prvProcessTimerOrBlockTask>:
 801980c:	b580      	push	{r7, lr}
 801980e:	b084      	sub	sp, #16
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
 8019814:	6039      	str	r1, [r7, #0]
 8019816:	f7fe ff95 	bl	8018744 <vTaskSuspendAll>
 801981a:	f107 0308 	add.w	r3, r7, #8
 801981e:	4618      	mov	r0, r3
 8019820:	f000 f866 	bl	80198f0 <prvSampleTimeNow>
 8019824:	60f8      	str	r0, [r7, #12]
 8019826:	68bb      	ldr	r3, [r7, #8]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d130      	bne.n	801988e <prvProcessTimerOrBlockTask+0x82>
 801982c:	683b      	ldr	r3, [r7, #0]
 801982e:	2b00      	cmp	r3, #0
 8019830:	d10a      	bne.n	8019848 <prvProcessTimerOrBlockTask+0x3c>
 8019832:	687a      	ldr	r2, [r7, #4]
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	429a      	cmp	r2, r3
 8019838:	d806      	bhi.n	8019848 <prvProcessTimerOrBlockTask+0x3c>
 801983a:	f7fe ff91 	bl	8018760 <xTaskResumeAll>
 801983e:	68f9      	ldr	r1, [r7, #12]
 8019840:	6878      	ldr	r0, [r7, #4]
 8019842:	f7ff ff85 	bl	8019750 <prvProcessExpiredTimer>
 8019846:	e024      	b.n	8019892 <prvProcessTimerOrBlockTask+0x86>
 8019848:	683b      	ldr	r3, [r7, #0]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d008      	beq.n	8019860 <prvProcessTimerOrBlockTask+0x54>
 801984e:	4b13      	ldr	r3, [pc, #76]	; (801989c <prvProcessTimerOrBlockTask+0x90>)
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d101      	bne.n	801985c <prvProcessTimerOrBlockTask+0x50>
 8019858:	2301      	movs	r3, #1
 801985a:	e000      	b.n	801985e <prvProcessTimerOrBlockTask+0x52>
 801985c:	2300      	movs	r3, #0
 801985e:	603b      	str	r3, [r7, #0]
 8019860:	4b0f      	ldr	r3, [pc, #60]	; (80198a0 <prvProcessTimerOrBlockTask+0x94>)
 8019862:	6818      	ldr	r0, [r3, #0]
 8019864:	687a      	ldr	r2, [r7, #4]
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	1ad3      	subs	r3, r2, r3
 801986a:	683a      	ldr	r2, [r7, #0]
 801986c:	4619      	mov	r1, r3
 801986e:	f7fe f94d 	bl	8017b0c <vQueueWaitForMessageRestricted>
 8019872:	f7fe ff75 	bl	8018760 <xTaskResumeAll>
 8019876:	4603      	mov	r3, r0
 8019878:	2b00      	cmp	r3, #0
 801987a:	d10a      	bne.n	8019892 <prvProcessTimerOrBlockTask+0x86>
 801987c:	4b09      	ldr	r3, [pc, #36]	; (80198a4 <prvProcessTimerOrBlockTask+0x98>)
 801987e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019882:	601a      	str	r2, [r3, #0]
 8019884:	f3bf 8f4f 	dsb	sy
 8019888:	f3bf 8f6f 	isb	sy
 801988c:	e001      	b.n	8019892 <prvProcessTimerOrBlockTask+0x86>
 801988e:	f7fe ff67 	bl	8018760 <xTaskResumeAll>
 8019892:	bf00      	nop
 8019894:	3710      	adds	r7, #16
 8019896:	46bd      	mov	sp, r7
 8019898:	bd80      	pop	{r7, pc}
 801989a:	bf00      	nop
 801989c:	20002370 	.word	0x20002370
 80198a0:	20002374 	.word	0x20002374
 80198a4:	e000ed04 	.word	0xe000ed04

080198a8 <prvGetNextExpireTime>:
 80198a8:	b480      	push	{r7}
 80198aa:	b085      	sub	sp, #20
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
 80198b0:	4b0e      	ldr	r3, [pc, #56]	; (80198ec <prvGetNextExpireTime+0x44>)
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	2b00      	cmp	r3, #0
 80198b8:	d101      	bne.n	80198be <prvGetNextExpireTime+0x16>
 80198ba:	2201      	movs	r2, #1
 80198bc:	e000      	b.n	80198c0 <prvGetNextExpireTime+0x18>
 80198be:	2200      	movs	r2, #0
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	601a      	str	r2, [r3, #0]
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d105      	bne.n	80198d8 <prvGetNextExpireTime+0x30>
 80198cc:	4b07      	ldr	r3, [pc, #28]	; (80198ec <prvGetNextExpireTime+0x44>)
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	68db      	ldr	r3, [r3, #12]
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	60fb      	str	r3, [r7, #12]
 80198d6:	e001      	b.n	80198dc <prvGetNextExpireTime+0x34>
 80198d8:	2300      	movs	r3, #0
 80198da:	60fb      	str	r3, [r7, #12]
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	4618      	mov	r0, r3
 80198e0:	3714      	adds	r7, #20
 80198e2:	46bd      	mov	sp, r7
 80198e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198e8:	4770      	bx	lr
 80198ea:	bf00      	nop
 80198ec:	2000236c 	.word	0x2000236c

080198f0 <prvSampleTimeNow>:
 80198f0:	b580      	push	{r7, lr}
 80198f2:	b084      	sub	sp, #16
 80198f4:	af00      	add	r7, sp, #0
 80198f6:	6078      	str	r0, [r7, #4]
 80198f8:	f7fe ffd0 	bl	801889c <xTaskGetTickCount>
 80198fc:	60f8      	str	r0, [r7, #12]
 80198fe:	4b0b      	ldr	r3, [pc, #44]	; (801992c <prvSampleTimeNow+0x3c>)
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	68fa      	ldr	r2, [r7, #12]
 8019904:	429a      	cmp	r2, r3
 8019906:	d205      	bcs.n	8019914 <prvSampleTimeNow+0x24>
 8019908:	f000 f936 	bl	8019b78 <prvSwitchTimerLists>
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	2201      	movs	r2, #1
 8019910:	601a      	str	r2, [r3, #0]
 8019912:	e002      	b.n	801991a <prvSampleTimeNow+0x2a>
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	2200      	movs	r2, #0
 8019918:	601a      	str	r2, [r3, #0]
 801991a:	4a04      	ldr	r2, [pc, #16]	; (801992c <prvSampleTimeNow+0x3c>)
 801991c:	68fb      	ldr	r3, [r7, #12]
 801991e:	6013      	str	r3, [r2, #0]
 8019920:	68fb      	ldr	r3, [r7, #12]
 8019922:	4618      	mov	r0, r3
 8019924:	3710      	adds	r7, #16
 8019926:	46bd      	mov	sp, r7
 8019928:	bd80      	pop	{r7, pc}
 801992a:	bf00      	nop
 801992c:	2000237c 	.word	0x2000237c

08019930 <prvInsertTimerInActiveList>:
 8019930:	b580      	push	{r7, lr}
 8019932:	b086      	sub	sp, #24
 8019934:	af00      	add	r7, sp, #0
 8019936:	60f8      	str	r0, [r7, #12]
 8019938:	60b9      	str	r1, [r7, #8]
 801993a:	607a      	str	r2, [r7, #4]
 801993c:	603b      	str	r3, [r7, #0]
 801993e:	2300      	movs	r3, #0
 8019940:	617b      	str	r3, [r7, #20]
 8019942:	68fb      	ldr	r3, [r7, #12]
 8019944:	68ba      	ldr	r2, [r7, #8]
 8019946:	605a      	str	r2, [r3, #4]
 8019948:	68fb      	ldr	r3, [r7, #12]
 801994a:	68fa      	ldr	r2, [r7, #12]
 801994c:	611a      	str	r2, [r3, #16]
 801994e:	68ba      	ldr	r2, [r7, #8]
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	429a      	cmp	r2, r3
 8019954:	d812      	bhi.n	801997c <prvInsertTimerInActiveList+0x4c>
 8019956:	687a      	ldr	r2, [r7, #4]
 8019958:	683b      	ldr	r3, [r7, #0]
 801995a:	1ad2      	subs	r2, r2, r3
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	699b      	ldr	r3, [r3, #24]
 8019960:	429a      	cmp	r2, r3
 8019962:	d302      	bcc.n	801996a <prvInsertTimerInActiveList+0x3a>
 8019964:	2301      	movs	r3, #1
 8019966:	617b      	str	r3, [r7, #20]
 8019968:	e01b      	b.n	80199a2 <prvInsertTimerInActiveList+0x72>
 801996a:	4b10      	ldr	r3, [pc, #64]	; (80199ac <prvInsertTimerInActiveList+0x7c>)
 801996c:	681a      	ldr	r2, [r3, #0]
 801996e:	68fb      	ldr	r3, [r7, #12]
 8019970:	3304      	adds	r3, #4
 8019972:	4619      	mov	r1, r3
 8019974:	4610      	mov	r0, r2
 8019976:	f7fc ff9a 	bl	80168ae <vListInsert>
 801997a:	e012      	b.n	80199a2 <prvInsertTimerInActiveList+0x72>
 801997c:	687a      	ldr	r2, [r7, #4]
 801997e:	683b      	ldr	r3, [r7, #0]
 8019980:	429a      	cmp	r2, r3
 8019982:	d206      	bcs.n	8019992 <prvInsertTimerInActiveList+0x62>
 8019984:	68ba      	ldr	r2, [r7, #8]
 8019986:	683b      	ldr	r3, [r7, #0]
 8019988:	429a      	cmp	r2, r3
 801998a:	d302      	bcc.n	8019992 <prvInsertTimerInActiveList+0x62>
 801998c:	2301      	movs	r3, #1
 801998e:	617b      	str	r3, [r7, #20]
 8019990:	e007      	b.n	80199a2 <prvInsertTimerInActiveList+0x72>
 8019992:	4b07      	ldr	r3, [pc, #28]	; (80199b0 <prvInsertTimerInActiveList+0x80>)
 8019994:	681a      	ldr	r2, [r3, #0]
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	3304      	adds	r3, #4
 801999a:	4619      	mov	r1, r3
 801999c:	4610      	mov	r0, r2
 801999e:	f7fc ff86 	bl	80168ae <vListInsert>
 80199a2:	697b      	ldr	r3, [r7, #20]
 80199a4:	4618      	mov	r0, r3
 80199a6:	3718      	adds	r7, #24
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}
 80199ac:	20002370 	.word	0x20002370
 80199b0:	2000236c 	.word	0x2000236c

080199b4 <prvProcessReceivedCommands>:
 80199b4:	b580      	push	{r7, lr}
 80199b6:	b08e      	sub	sp, #56	; 0x38
 80199b8:	af02      	add	r7, sp, #8
 80199ba:	e0ca      	b.n	8019b52 <prvProcessReceivedCommands+0x19e>
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	2b00      	cmp	r3, #0
 80199c0:	da18      	bge.n	80199f4 <prvProcessReceivedCommands+0x40>
 80199c2:	1d3b      	adds	r3, r7, #4
 80199c4:	3304      	adds	r3, #4
 80199c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80199c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d10a      	bne.n	80199e4 <prvProcessReceivedCommands+0x30>
 80199ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80199d2:	f383 8811 	msr	BASEPRI, r3
 80199d6:	f3bf 8f6f 	isb	sy
 80199da:	f3bf 8f4f 	dsb	sy
 80199de:	61fb      	str	r3, [r7, #28]
 80199e0:	bf00      	nop
 80199e2:	e7fe      	b.n	80199e2 <prvProcessReceivedCommands+0x2e>
 80199e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80199ea:	6850      	ldr	r0, [r2, #4]
 80199ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80199ee:	6892      	ldr	r2, [r2, #8]
 80199f0:	4611      	mov	r1, r2
 80199f2:	4798      	blx	r3
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	f2c0 80aa 	blt.w	8019b50 <prvProcessReceivedCommands+0x19c>
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8019a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a02:	695b      	ldr	r3, [r3, #20]
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d004      	beq.n	8019a12 <prvProcessReceivedCommands+0x5e>
 8019a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a0a:	3304      	adds	r3, #4
 8019a0c:	4618      	mov	r0, r3
 8019a0e:	f7fc ff87 	bl	8016920 <uxListRemove>
 8019a12:	463b      	mov	r3, r7
 8019a14:	4618      	mov	r0, r3
 8019a16:	f7ff ff6b 	bl	80198f0 <prvSampleTimeNow>
 8019a1a:	6278      	str	r0, [r7, #36]	; 0x24
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	2b09      	cmp	r3, #9
 8019a20:	f200 8097 	bhi.w	8019b52 <prvProcessReceivedCommands+0x19e>
 8019a24:	a201      	add	r2, pc, #4	; (adr r2, 8019a2c <prvProcessReceivedCommands+0x78>)
 8019a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a2a:	bf00      	nop
 8019a2c:	08019a55 	.word	0x08019a55
 8019a30:	08019a55 	.word	0x08019a55
 8019a34:	08019a55 	.word	0x08019a55
 8019a38:	08019ac9 	.word	0x08019ac9
 8019a3c:	08019add 	.word	0x08019add
 8019a40:	08019b27 	.word	0x08019b27
 8019a44:	08019a55 	.word	0x08019a55
 8019a48:	08019a55 	.word	0x08019a55
 8019a4c:	08019ac9 	.word	0x08019ac9
 8019a50:	08019add 	.word	0x08019add
 8019a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019a5a:	f043 0301 	orr.w	r3, r3, #1
 8019a5e:	b2da      	uxtb	r2, r3
 8019a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8019a66:	68ba      	ldr	r2, [r7, #8]
 8019a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a6a:	699b      	ldr	r3, [r3, #24]
 8019a6c:	18d1      	adds	r1, r2, r3
 8019a6e:	68bb      	ldr	r3, [r7, #8]
 8019a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a74:	f7ff ff5c 	bl	8019930 <prvInsertTimerInActiveList>
 8019a78:	4603      	mov	r3, r0
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d069      	beq.n	8019b52 <prvProcessReceivedCommands+0x19e>
 8019a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a80:	6a1b      	ldr	r3, [r3, #32]
 8019a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019a84:	4798      	blx	r3
 8019a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019a8c:	f003 0304 	and.w	r3, r3, #4
 8019a90:	2b00      	cmp	r3, #0
 8019a92:	d05e      	beq.n	8019b52 <prvProcessReceivedCommands+0x19e>
 8019a94:	68ba      	ldr	r2, [r7, #8]
 8019a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a98:	699b      	ldr	r3, [r3, #24]
 8019a9a:	441a      	add	r2, r3
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	9300      	str	r3, [sp, #0]
 8019aa0:	2300      	movs	r3, #0
 8019aa2:	2100      	movs	r1, #0
 8019aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019aa6:	f7ff fe05 	bl	80196b4 <xTimerGenericCommand>
 8019aaa:	6238      	str	r0, [r7, #32]
 8019aac:	6a3b      	ldr	r3, [r7, #32]
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d14f      	bne.n	8019b52 <prvProcessReceivedCommands+0x19e>
 8019ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019ab6:	f383 8811 	msr	BASEPRI, r3
 8019aba:	f3bf 8f6f 	isb	sy
 8019abe:	f3bf 8f4f 	dsb	sy
 8019ac2:	61bb      	str	r3, [r7, #24]
 8019ac4:	bf00      	nop
 8019ac6:	e7fe      	b.n	8019ac6 <prvProcessReceivedCommands+0x112>
 8019ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ace:	f023 0301 	bic.w	r3, r3, #1
 8019ad2:	b2da      	uxtb	r2, r3
 8019ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8019ada:	e03a      	b.n	8019b52 <prvProcessReceivedCommands+0x19e>
 8019adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019ae2:	f043 0301 	orr.w	r3, r3, #1
 8019ae6:	b2da      	uxtb	r2, r3
 8019ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8019aee:	68ba      	ldr	r2, [r7, #8]
 8019af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019af2:	619a      	str	r2, [r3, #24]
 8019af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019af6:	699b      	ldr	r3, [r3, #24]
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d10a      	bne.n	8019b12 <prvProcessReceivedCommands+0x15e>
 8019afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b00:	f383 8811 	msr	BASEPRI, r3
 8019b04:	f3bf 8f6f 	isb	sy
 8019b08:	f3bf 8f4f 	dsb	sy
 8019b0c:	617b      	str	r3, [r7, #20]
 8019b0e:	bf00      	nop
 8019b10:	e7fe      	b.n	8019b10 <prvProcessReceivedCommands+0x15c>
 8019b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b14:	699a      	ldr	r2, [r3, #24]
 8019b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b18:	18d1      	adds	r1, r2, r3
 8019b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019b20:	f7ff ff06 	bl	8019930 <prvInsertTimerInActiveList>
 8019b24:	e015      	b.n	8019b52 <prvProcessReceivedCommands+0x19e>
 8019b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019b2c:	f003 0302 	and.w	r3, r3, #2
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d103      	bne.n	8019b3c <prvProcessReceivedCommands+0x188>
 8019b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019b36:	f000 fbdf 	bl	801a2f8 <vPortFree>
 8019b3a:	e00a      	b.n	8019b52 <prvProcessReceivedCommands+0x19e>
 8019b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019b42:	f023 0301 	bic.w	r3, r3, #1
 8019b46:	b2da      	uxtb	r2, r3
 8019b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8019b4e:	e000      	b.n	8019b52 <prvProcessReceivedCommands+0x19e>
 8019b50:	bf00      	nop
 8019b52:	4b08      	ldr	r3, [pc, #32]	; (8019b74 <prvProcessReceivedCommands+0x1c0>)
 8019b54:	681b      	ldr	r3, [r3, #0]
 8019b56:	1d39      	adds	r1, r7, #4
 8019b58:	2200      	movs	r2, #0
 8019b5a:	4618      	mov	r0, r3
 8019b5c:	f7fd fb8e 	bl	801727c <xQueueReceive>
 8019b60:	4603      	mov	r3, r0
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	f47f af2a 	bne.w	80199bc <prvProcessReceivedCommands+0x8>
 8019b68:	bf00      	nop
 8019b6a:	bf00      	nop
 8019b6c:	3730      	adds	r7, #48	; 0x30
 8019b6e:	46bd      	mov	sp, r7
 8019b70:	bd80      	pop	{r7, pc}
 8019b72:	bf00      	nop
 8019b74:	20002374 	.word	0x20002374

08019b78 <prvSwitchTimerLists>:
 8019b78:	b580      	push	{r7, lr}
 8019b7a:	b088      	sub	sp, #32
 8019b7c:	af02      	add	r7, sp, #8
 8019b7e:	e048      	b.n	8019c12 <prvSwitchTimerLists+0x9a>
 8019b80:	4b2d      	ldr	r3, [pc, #180]	; (8019c38 <prvSwitchTimerLists+0xc0>)
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	68db      	ldr	r3, [r3, #12]
 8019b86:	681b      	ldr	r3, [r3, #0]
 8019b88:	613b      	str	r3, [r7, #16]
 8019b8a:	4b2b      	ldr	r3, [pc, #172]	; (8019c38 <prvSwitchTimerLists+0xc0>)
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	68db      	ldr	r3, [r3, #12]
 8019b90:	68db      	ldr	r3, [r3, #12]
 8019b92:	60fb      	str	r3, [r7, #12]
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	3304      	adds	r3, #4
 8019b98:	4618      	mov	r0, r3
 8019b9a:	f7fc fec1 	bl	8016920 <uxListRemove>
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	6a1b      	ldr	r3, [r3, #32]
 8019ba2:	68f8      	ldr	r0, [r7, #12]
 8019ba4:	4798      	blx	r3
 8019ba6:	68fb      	ldr	r3, [r7, #12]
 8019ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019bac:	f003 0304 	and.w	r3, r3, #4
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d02e      	beq.n	8019c12 <prvSwitchTimerLists+0x9a>
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	699b      	ldr	r3, [r3, #24]
 8019bb8:	693a      	ldr	r2, [r7, #16]
 8019bba:	4413      	add	r3, r2
 8019bbc:	60bb      	str	r3, [r7, #8]
 8019bbe:	68ba      	ldr	r2, [r7, #8]
 8019bc0:	693b      	ldr	r3, [r7, #16]
 8019bc2:	429a      	cmp	r2, r3
 8019bc4:	d90e      	bls.n	8019be4 <prvSwitchTimerLists+0x6c>
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	68ba      	ldr	r2, [r7, #8]
 8019bca:	605a      	str	r2, [r3, #4]
 8019bcc:	68fb      	ldr	r3, [r7, #12]
 8019bce:	68fa      	ldr	r2, [r7, #12]
 8019bd0:	611a      	str	r2, [r3, #16]
 8019bd2:	4b19      	ldr	r3, [pc, #100]	; (8019c38 <prvSwitchTimerLists+0xc0>)
 8019bd4:	681a      	ldr	r2, [r3, #0]
 8019bd6:	68fb      	ldr	r3, [r7, #12]
 8019bd8:	3304      	adds	r3, #4
 8019bda:	4619      	mov	r1, r3
 8019bdc:	4610      	mov	r0, r2
 8019bde:	f7fc fe66 	bl	80168ae <vListInsert>
 8019be2:	e016      	b.n	8019c12 <prvSwitchTimerLists+0x9a>
 8019be4:	2300      	movs	r3, #0
 8019be6:	9300      	str	r3, [sp, #0]
 8019be8:	2300      	movs	r3, #0
 8019bea:	693a      	ldr	r2, [r7, #16]
 8019bec:	2100      	movs	r1, #0
 8019bee:	68f8      	ldr	r0, [r7, #12]
 8019bf0:	f7ff fd60 	bl	80196b4 <xTimerGenericCommand>
 8019bf4:	6078      	str	r0, [r7, #4]
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d10a      	bne.n	8019c12 <prvSwitchTimerLists+0x9a>
 8019bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c00:	f383 8811 	msr	BASEPRI, r3
 8019c04:	f3bf 8f6f 	isb	sy
 8019c08:	f3bf 8f4f 	dsb	sy
 8019c0c:	603b      	str	r3, [r7, #0]
 8019c0e:	bf00      	nop
 8019c10:	e7fe      	b.n	8019c10 <prvSwitchTimerLists+0x98>
 8019c12:	4b09      	ldr	r3, [pc, #36]	; (8019c38 <prvSwitchTimerLists+0xc0>)
 8019c14:	681b      	ldr	r3, [r3, #0]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d1b1      	bne.n	8019b80 <prvSwitchTimerLists+0x8>
 8019c1c:	4b06      	ldr	r3, [pc, #24]	; (8019c38 <prvSwitchTimerLists+0xc0>)
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	617b      	str	r3, [r7, #20]
 8019c22:	4b06      	ldr	r3, [pc, #24]	; (8019c3c <prvSwitchTimerLists+0xc4>)
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	4a04      	ldr	r2, [pc, #16]	; (8019c38 <prvSwitchTimerLists+0xc0>)
 8019c28:	6013      	str	r3, [r2, #0]
 8019c2a:	4a04      	ldr	r2, [pc, #16]	; (8019c3c <prvSwitchTimerLists+0xc4>)
 8019c2c:	697b      	ldr	r3, [r7, #20]
 8019c2e:	6013      	str	r3, [r2, #0]
 8019c30:	bf00      	nop
 8019c32:	3718      	adds	r7, #24
 8019c34:	46bd      	mov	sp, r7
 8019c36:	bd80      	pop	{r7, pc}
 8019c38:	2000236c 	.word	0x2000236c
 8019c3c:	20002370 	.word	0x20002370

08019c40 <prvCheckForValidListAndQueue>:
 8019c40:	b580      	push	{r7, lr}
 8019c42:	b082      	sub	sp, #8
 8019c44:	af02      	add	r7, sp, #8
 8019c46:	f000 f965 	bl	8019f14 <vPortEnterCritical>
 8019c4a:	4b15      	ldr	r3, [pc, #84]	; (8019ca0 <prvCheckForValidListAndQueue+0x60>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d120      	bne.n	8019c94 <prvCheckForValidListAndQueue+0x54>
 8019c52:	4814      	ldr	r0, [pc, #80]	; (8019ca4 <prvCheckForValidListAndQueue+0x64>)
 8019c54:	f7fc fdda 	bl	801680c <vListInitialise>
 8019c58:	4813      	ldr	r0, [pc, #76]	; (8019ca8 <prvCheckForValidListAndQueue+0x68>)
 8019c5a:	f7fc fdd7 	bl	801680c <vListInitialise>
 8019c5e:	4b13      	ldr	r3, [pc, #76]	; (8019cac <prvCheckForValidListAndQueue+0x6c>)
 8019c60:	4a10      	ldr	r2, [pc, #64]	; (8019ca4 <prvCheckForValidListAndQueue+0x64>)
 8019c62:	601a      	str	r2, [r3, #0]
 8019c64:	4b12      	ldr	r3, [pc, #72]	; (8019cb0 <prvCheckForValidListAndQueue+0x70>)
 8019c66:	4a10      	ldr	r2, [pc, #64]	; (8019ca8 <prvCheckForValidListAndQueue+0x68>)
 8019c68:	601a      	str	r2, [r3, #0]
 8019c6a:	2300      	movs	r3, #0
 8019c6c:	9300      	str	r3, [sp, #0]
 8019c6e:	4b11      	ldr	r3, [pc, #68]	; (8019cb4 <prvCheckForValidListAndQueue+0x74>)
 8019c70:	4a11      	ldr	r2, [pc, #68]	; (8019cb8 <prvCheckForValidListAndQueue+0x78>)
 8019c72:	2110      	movs	r1, #16
 8019c74:	200a      	movs	r0, #10
 8019c76:	f7fc fee5 	bl	8016a44 <xQueueGenericCreateStatic>
 8019c7a:	4603      	mov	r3, r0
 8019c7c:	4a08      	ldr	r2, [pc, #32]	; (8019ca0 <prvCheckForValidListAndQueue+0x60>)
 8019c7e:	6013      	str	r3, [r2, #0]
 8019c80:	4b07      	ldr	r3, [pc, #28]	; (8019ca0 <prvCheckForValidListAndQueue+0x60>)
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d005      	beq.n	8019c94 <prvCheckForValidListAndQueue+0x54>
 8019c88:	4b05      	ldr	r3, [pc, #20]	; (8019ca0 <prvCheckForValidListAndQueue+0x60>)
 8019c8a:	681b      	ldr	r3, [r3, #0]
 8019c8c:	490b      	ldr	r1, [pc, #44]	; (8019cbc <prvCheckForValidListAndQueue+0x7c>)
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f7fd fee8 	bl	8017a64 <vQueueAddToRegistry>
 8019c94:	f000 f96e 	bl	8019f74 <vPortExitCritical>
 8019c98:	bf00      	nop
 8019c9a:	46bd      	mov	sp, r7
 8019c9c:	bd80      	pop	{r7, pc}
 8019c9e:	bf00      	nop
 8019ca0:	20002374 	.word	0x20002374
 8019ca4:	20002344 	.word	0x20002344
 8019ca8:	20002358 	.word	0x20002358
 8019cac:	2000236c 	.word	0x2000236c
 8019cb0:	20002370 	.word	0x20002370
 8019cb4:	20002420 	.word	0x20002420
 8019cb8:	20002380 	.word	0x20002380
 8019cbc:	0801d8f4 	.word	0x0801d8f4

08019cc0 <pxPortInitialiseStack>:
 8019cc0:	b480      	push	{r7}
 8019cc2:	b085      	sub	sp, #20
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	60f8      	str	r0, [r7, #12]
 8019cc8:	60b9      	str	r1, [r7, #8]
 8019cca:	607a      	str	r2, [r7, #4]
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	3b04      	subs	r3, #4
 8019cd0:	60fb      	str	r3, [r7, #12]
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019cd8:	601a      	str	r2, [r3, #0]
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	3b04      	subs	r3, #4
 8019cde:	60fb      	str	r3, [r7, #12]
 8019ce0:	68bb      	ldr	r3, [r7, #8]
 8019ce2:	f023 0201 	bic.w	r2, r3, #1
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	601a      	str	r2, [r3, #0]
 8019cea:	68fb      	ldr	r3, [r7, #12]
 8019cec:	3b04      	subs	r3, #4
 8019cee:	60fb      	str	r3, [r7, #12]
 8019cf0:	4a0c      	ldr	r2, [pc, #48]	; (8019d24 <pxPortInitialiseStack+0x64>)
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	601a      	str	r2, [r3, #0]
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	3b14      	subs	r3, #20
 8019cfa:	60fb      	str	r3, [r7, #12]
 8019cfc:	687a      	ldr	r2, [r7, #4]
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	601a      	str	r2, [r3, #0]
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	3b04      	subs	r3, #4
 8019d06:	60fb      	str	r3, [r7, #12]
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	f06f 0202 	mvn.w	r2, #2
 8019d0e:	601a      	str	r2, [r3, #0]
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	3b20      	subs	r3, #32
 8019d14:	60fb      	str	r3, [r7, #12]
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	4618      	mov	r0, r3
 8019d1a:	3714      	adds	r7, #20
 8019d1c:	46bd      	mov	sp, r7
 8019d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d22:	4770      	bx	lr
 8019d24:	08019d29 	.word	0x08019d29

08019d28 <prvTaskExitError>:
 8019d28:	b480      	push	{r7}
 8019d2a:	b085      	sub	sp, #20
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	2300      	movs	r3, #0
 8019d30:	607b      	str	r3, [r7, #4]
 8019d32:	4b12      	ldr	r3, [pc, #72]	; (8019d7c <prvTaskExitError+0x54>)
 8019d34:	681b      	ldr	r3, [r3, #0]
 8019d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019d3a:	d00a      	beq.n	8019d52 <prvTaskExitError+0x2a>
 8019d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d40:	f383 8811 	msr	BASEPRI, r3
 8019d44:	f3bf 8f6f 	isb	sy
 8019d48:	f3bf 8f4f 	dsb	sy
 8019d4c:	60fb      	str	r3, [r7, #12]
 8019d4e:	bf00      	nop
 8019d50:	e7fe      	b.n	8019d50 <prvTaskExitError+0x28>
 8019d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d56:	f383 8811 	msr	BASEPRI, r3
 8019d5a:	f3bf 8f6f 	isb	sy
 8019d5e:	f3bf 8f4f 	dsb	sy
 8019d62:	60bb      	str	r3, [r7, #8]
 8019d64:	bf00      	nop
 8019d66:	bf00      	nop
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d0fc      	beq.n	8019d68 <prvTaskExitError+0x40>
 8019d6e:	bf00      	nop
 8019d70:	bf00      	nop
 8019d72:	3714      	adds	r7, #20
 8019d74:	46bd      	mov	sp, r7
 8019d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d7a:	4770      	bx	lr
 8019d7c:	20000038 	.word	0x20000038

08019d80 <SVC_Handler>:
 8019d80:	4b07      	ldr	r3, [pc, #28]	; (8019da0 <pxCurrentTCBConst2>)
 8019d82:	6819      	ldr	r1, [r3, #0]
 8019d84:	6808      	ldr	r0, [r1, #0]
 8019d86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d8a:	f380 8809 	msr	PSP, r0
 8019d8e:	f3bf 8f6f 	isb	sy
 8019d92:	f04f 0000 	mov.w	r0, #0
 8019d96:	f380 8811 	msr	BASEPRI, r0
 8019d9a:	4770      	bx	lr
 8019d9c:	f3af 8000 	nop.w

08019da0 <pxCurrentTCBConst2>:
 8019da0:	20001e3c 	.word	0x20001e3c
 8019da4:	bf00      	nop
 8019da6:	bf00      	nop

08019da8 <prvPortStartFirstTask>:
 8019da8:	4808      	ldr	r0, [pc, #32]	; (8019dcc <prvPortStartFirstTask+0x24>)
 8019daa:	6800      	ldr	r0, [r0, #0]
 8019dac:	6800      	ldr	r0, [r0, #0]
 8019dae:	f380 8808 	msr	MSP, r0
 8019db2:	f04f 0000 	mov.w	r0, #0
 8019db6:	f380 8814 	msr	CONTROL, r0
 8019dba:	b662      	cpsie	i
 8019dbc:	b661      	cpsie	f
 8019dbe:	f3bf 8f4f 	dsb	sy
 8019dc2:	f3bf 8f6f 	isb	sy
 8019dc6:	df00      	svc	0
 8019dc8:	bf00      	nop
 8019dca:	bf00      	nop
 8019dcc:	e000ed08 	.word	0xe000ed08

08019dd0 <xPortStartScheduler>:
 8019dd0:	b580      	push	{r7, lr}
 8019dd2:	b086      	sub	sp, #24
 8019dd4:	af00      	add	r7, sp, #0
 8019dd6:	4b46      	ldr	r3, [pc, #280]	; (8019ef0 <xPortStartScheduler+0x120>)
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	4a46      	ldr	r2, [pc, #280]	; (8019ef4 <xPortStartScheduler+0x124>)
 8019ddc:	4293      	cmp	r3, r2
 8019dde:	d10a      	bne.n	8019df6 <xPortStartScheduler+0x26>
 8019de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019de4:	f383 8811 	msr	BASEPRI, r3
 8019de8:	f3bf 8f6f 	isb	sy
 8019dec:	f3bf 8f4f 	dsb	sy
 8019df0:	613b      	str	r3, [r7, #16]
 8019df2:	bf00      	nop
 8019df4:	e7fe      	b.n	8019df4 <xPortStartScheduler+0x24>
 8019df6:	4b3e      	ldr	r3, [pc, #248]	; (8019ef0 <xPortStartScheduler+0x120>)
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	4a3f      	ldr	r2, [pc, #252]	; (8019ef8 <xPortStartScheduler+0x128>)
 8019dfc:	4293      	cmp	r3, r2
 8019dfe:	d10a      	bne.n	8019e16 <xPortStartScheduler+0x46>
 8019e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e04:	f383 8811 	msr	BASEPRI, r3
 8019e08:	f3bf 8f6f 	isb	sy
 8019e0c:	f3bf 8f4f 	dsb	sy
 8019e10:	60fb      	str	r3, [r7, #12]
 8019e12:	bf00      	nop
 8019e14:	e7fe      	b.n	8019e14 <xPortStartScheduler+0x44>
 8019e16:	4b39      	ldr	r3, [pc, #228]	; (8019efc <xPortStartScheduler+0x12c>)
 8019e18:	617b      	str	r3, [r7, #20]
 8019e1a:	697b      	ldr	r3, [r7, #20]
 8019e1c:	781b      	ldrb	r3, [r3, #0]
 8019e1e:	b2db      	uxtb	r3, r3
 8019e20:	607b      	str	r3, [r7, #4]
 8019e22:	697b      	ldr	r3, [r7, #20]
 8019e24:	22ff      	movs	r2, #255	; 0xff
 8019e26:	701a      	strb	r2, [r3, #0]
 8019e28:	697b      	ldr	r3, [r7, #20]
 8019e2a:	781b      	ldrb	r3, [r3, #0]
 8019e2c:	b2db      	uxtb	r3, r3
 8019e2e:	70fb      	strb	r3, [r7, #3]
 8019e30:	78fb      	ldrb	r3, [r7, #3]
 8019e32:	b2db      	uxtb	r3, r3
 8019e34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019e38:	b2da      	uxtb	r2, r3
 8019e3a:	4b31      	ldr	r3, [pc, #196]	; (8019f00 <xPortStartScheduler+0x130>)
 8019e3c:	701a      	strb	r2, [r3, #0]
 8019e3e:	4b31      	ldr	r3, [pc, #196]	; (8019f04 <xPortStartScheduler+0x134>)
 8019e40:	2207      	movs	r2, #7
 8019e42:	601a      	str	r2, [r3, #0]
 8019e44:	e009      	b.n	8019e5a <xPortStartScheduler+0x8a>
 8019e46:	4b2f      	ldr	r3, [pc, #188]	; (8019f04 <xPortStartScheduler+0x134>)
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	3b01      	subs	r3, #1
 8019e4c:	4a2d      	ldr	r2, [pc, #180]	; (8019f04 <xPortStartScheduler+0x134>)
 8019e4e:	6013      	str	r3, [r2, #0]
 8019e50:	78fb      	ldrb	r3, [r7, #3]
 8019e52:	b2db      	uxtb	r3, r3
 8019e54:	005b      	lsls	r3, r3, #1
 8019e56:	b2db      	uxtb	r3, r3
 8019e58:	70fb      	strb	r3, [r7, #3]
 8019e5a:	78fb      	ldrb	r3, [r7, #3]
 8019e5c:	b2db      	uxtb	r3, r3
 8019e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019e62:	2b80      	cmp	r3, #128	; 0x80
 8019e64:	d0ef      	beq.n	8019e46 <xPortStartScheduler+0x76>
 8019e66:	4b27      	ldr	r3, [pc, #156]	; (8019f04 <xPortStartScheduler+0x134>)
 8019e68:	681b      	ldr	r3, [r3, #0]
 8019e6a:	f1c3 0307 	rsb	r3, r3, #7
 8019e6e:	2b04      	cmp	r3, #4
 8019e70:	d00a      	beq.n	8019e88 <xPortStartScheduler+0xb8>
 8019e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019e76:	f383 8811 	msr	BASEPRI, r3
 8019e7a:	f3bf 8f6f 	isb	sy
 8019e7e:	f3bf 8f4f 	dsb	sy
 8019e82:	60bb      	str	r3, [r7, #8]
 8019e84:	bf00      	nop
 8019e86:	e7fe      	b.n	8019e86 <xPortStartScheduler+0xb6>
 8019e88:	4b1e      	ldr	r3, [pc, #120]	; (8019f04 <xPortStartScheduler+0x134>)
 8019e8a:	681b      	ldr	r3, [r3, #0]
 8019e8c:	021b      	lsls	r3, r3, #8
 8019e8e:	4a1d      	ldr	r2, [pc, #116]	; (8019f04 <xPortStartScheduler+0x134>)
 8019e90:	6013      	str	r3, [r2, #0]
 8019e92:	4b1c      	ldr	r3, [pc, #112]	; (8019f04 <xPortStartScheduler+0x134>)
 8019e94:	681b      	ldr	r3, [r3, #0]
 8019e96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8019e9a:	4a1a      	ldr	r2, [pc, #104]	; (8019f04 <xPortStartScheduler+0x134>)
 8019e9c:	6013      	str	r3, [r2, #0]
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	b2da      	uxtb	r2, r3
 8019ea2:	697b      	ldr	r3, [r7, #20]
 8019ea4:	701a      	strb	r2, [r3, #0]
 8019ea6:	4b18      	ldr	r3, [pc, #96]	; (8019f08 <xPortStartScheduler+0x138>)
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	4a17      	ldr	r2, [pc, #92]	; (8019f08 <xPortStartScheduler+0x138>)
 8019eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019eb0:	6013      	str	r3, [r2, #0]
 8019eb2:	4b15      	ldr	r3, [pc, #84]	; (8019f08 <xPortStartScheduler+0x138>)
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	4a14      	ldr	r2, [pc, #80]	; (8019f08 <xPortStartScheduler+0x138>)
 8019eb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8019ebc:	6013      	str	r3, [r2, #0]
 8019ebe:	f000 f8dd 	bl	801a07c <vPortSetupTimerInterrupt>
 8019ec2:	4b12      	ldr	r3, [pc, #72]	; (8019f0c <xPortStartScheduler+0x13c>)
 8019ec4:	2200      	movs	r2, #0
 8019ec6:	601a      	str	r2, [r3, #0]
 8019ec8:	f000 f8fc 	bl	801a0c4 <vPortEnableVFP>
 8019ecc:	4b10      	ldr	r3, [pc, #64]	; (8019f10 <xPortStartScheduler+0x140>)
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	4a0f      	ldr	r2, [pc, #60]	; (8019f10 <xPortStartScheduler+0x140>)
 8019ed2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019ed6:	6013      	str	r3, [r2, #0]
 8019ed8:	f7ff ff66 	bl	8019da8 <prvPortStartFirstTask>
 8019edc:	f7fe fda8 	bl	8018a30 <vTaskSwitchContext>
 8019ee0:	f7ff ff22 	bl	8019d28 <prvTaskExitError>
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	3718      	adds	r7, #24
 8019eea:	46bd      	mov	sp, r7
 8019eec:	bd80      	pop	{r7, pc}
 8019eee:	bf00      	nop
 8019ef0:	e000ed00 	.word	0xe000ed00
 8019ef4:	410fc271 	.word	0x410fc271
 8019ef8:	410fc270 	.word	0x410fc270
 8019efc:	e000e400 	.word	0xe000e400
 8019f00:	20002470 	.word	0x20002470
 8019f04:	20002474 	.word	0x20002474
 8019f08:	e000ed20 	.word	0xe000ed20
 8019f0c:	20000038 	.word	0x20000038
 8019f10:	e000ef34 	.word	0xe000ef34

08019f14 <vPortEnterCritical>:
 8019f14:	b480      	push	{r7}
 8019f16:	b083      	sub	sp, #12
 8019f18:	af00      	add	r7, sp, #0
 8019f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f1e:	f383 8811 	msr	BASEPRI, r3
 8019f22:	f3bf 8f6f 	isb	sy
 8019f26:	f3bf 8f4f 	dsb	sy
 8019f2a:	607b      	str	r3, [r7, #4]
 8019f2c:	bf00      	nop
 8019f2e:	4b0f      	ldr	r3, [pc, #60]	; (8019f6c <vPortEnterCritical+0x58>)
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	3301      	adds	r3, #1
 8019f34:	4a0d      	ldr	r2, [pc, #52]	; (8019f6c <vPortEnterCritical+0x58>)
 8019f36:	6013      	str	r3, [r2, #0]
 8019f38:	4b0c      	ldr	r3, [pc, #48]	; (8019f6c <vPortEnterCritical+0x58>)
 8019f3a:	681b      	ldr	r3, [r3, #0]
 8019f3c:	2b01      	cmp	r3, #1
 8019f3e:	d10f      	bne.n	8019f60 <vPortEnterCritical+0x4c>
 8019f40:	4b0b      	ldr	r3, [pc, #44]	; (8019f70 <vPortEnterCritical+0x5c>)
 8019f42:	681b      	ldr	r3, [r3, #0]
 8019f44:	b2db      	uxtb	r3, r3
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d00a      	beq.n	8019f60 <vPortEnterCritical+0x4c>
 8019f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f4e:	f383 8811 	msr	BASEPRI, r3
 8019f52:	f3bf 8f6f 	isb	sy
 8019f56:	f3bf 8f4f 	dsb	sy
 8019f5a:	603b      	str	r3, [r7, #0]
 8019f5c:	bf00      	nop
 8019f5e:	e7fe      	b.n	8019f5e <vPortEnterCritical+0x4a>
 8019f60:	bf00      	nop
 8019f62:	370c      	adds	r7, #12
 8019f64:	46bd      	mov	sp, r7
 8019f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f6a:	4770      	bx	lr
 8019f6c:	20000038 	.word	0x20000038
 8019f70:	e000ed04 	.word	0xe000ed04

08019f74 <vPortExitCritical>:
 8019f74:	b480      	push	{r7}
 8019f76:	b083      	sub	sp, #12
 8019f78:	af00      	add	r7, sp, #0
 8019f7a:	4b12      	ldr	r3, [pc, #72]	; (8019fc4 <vPortExitCritical+0x50>)
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	2b00      	cmp	r3, #0
 8019f80:	d10a      	bne.n	8019f98 <vPortExitCritical+0x24>
 8019f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f86:	f383 8811 	msr	BASEPRI, r3
 8019f8a:	f3bf 8f6f 	isb	sy
 8019f8e:	f3bf 8f4f 	dsb	sy
 8019f92:	607b      	str	r3, [r7, #4]
 8019f94:	bf00      	nop
 8019f96:	e7fe      	b.n	8019f96 <vPortExitCritical+0x22>
 8019f98:	4b0a      	ldr	r3, [pc, #40]	; (8019fc4 <vPortExitCritical+0x50>)
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	3b01      	subs	r3, #1
 8019f9e:	4a09      	ldr	r2, [pc, #36]	; (8019fc4 <vPortExitCritical+0x50>)
 8019fa0:	6013      	str	r3, [r2, #0]
 8019fa2:	4b08      	ldr	r3, [pc, #32]	; (8019fc4 <vPortExitCritical+0x50>)
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d105      	bne.n	8019fb6 <vPortExitCritical+0x42>
 8019faa:	2300      	movs	r3, #0
 8019fac:	603b      	str	r3, [r7, #0]
 8019fae:	683b      	ldr	r3, [r7, #0]
 8019fb0:	f383 8811 	msr	BASEPRI, r3
 8019fb4:	bf00      	nop
 8019fb6:	bf00      	nop
 8019fb8:	370c      	adds	r7, #12
 8019fba:	46bd      	mov	sp, r7
 8019fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fc0:	4770      	bx	lr
 8019fc2:	bf00      	nop
 8019fc4:	20000038 	.word	0x20000038
	...

08019fd0 <PendSV_Handler>:
 8019fd0:	f3ef 8009 	mrs	r0, PSP
 8019fd4:	f3bf 8f6f 	isb	sy
 8019fd8:	4b15      	ldr	r3, [pc, #84]	; (801a030 <pxCurrentTCBConst>)
 8019fda:	681a      	ldr	r2, [r3, #0]
 8019fdc:	f01e 0f10 	tst.w	lr, #16
 8019fe0:	bf08      	it	eq
 8019fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fea:	6010      	str	r0, [r2, #0]
 8019fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019ff4:	f380 8811 	msr	BASEPRI, r0
 8019ff8:	f3bf 8f4f 	dsb	sy
 8019ffc:	f3bf 8f6f 	isb	sy
 801a000:	f7fe fd16 	bl	8018a30 <vTaskSwitchContext>
 801a004:	f04f 0000 	mov.w	r0, #0
 801a008:	f380 8811 	msr	BASEPRI, r0
 801a00c:	bc09      	pop	{r0, r3}
 801a00e:	6819      	ldr	r1, [r3, #0]
 801a010:	6808      	ldr	r0, [r1, #0]
 801a012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a016:	f01e 0f10 	tst.w	lr, #16
 801a01a:	bf08      	it	eq
 801a01c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801a020:	f380 8809 	msr	PSP, r0
 801a024:	f3bf 8f6f 	isb	sy
 801a028:	4770      	bx	lr
 801a02a:	bf00      	nop
 801a02c:	f3af 8000 	nop.w

0801a030 <pxCurrentTCBConst>:
 801a030:	20001e3c 	.word	0x20001e3c
 801a034:	bf00      	nop
 801a036:	bf00      	nop

0801a038 <xPortSysTickHandler>:
 801a038:	b580      	push	{r7, lr}
 801a03a:	b082      	sub	sp, #8
 801a03c:	af00      	add	r7, sp, #0
 801a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a042:	f383 8811 	msr	BASEPRI, r3
 801a046:	f3bf 8f6f 	isb	sy
 801a04a:	f3bf 8f4f 	dsb	sy
 801a04e:	607b      	str	r3, [r7, #4]
 801a050:	bf00      	nop
 801a052:	f7fe fc33 	bl	80188bc <xTaskIncrementTick>
 801a056:	4603      	mov	r3, r0
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d003      	beq.n	801a064 <xPortSysTickHandler+0x2c>
 801a05c:	4b06      	ldr	r3, [pc, #24]	; (801a078 <xPortSysTickHandler+0x40>)
 801a05e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a062:	601a      	str	r2, [r3, #0]
 801a064:	2300      	movs	r3, #0
 801a066:	603b      	str	r3, [r7, #0]
 801a068:	683b      	ldr	r3, [r7, #0]
 801a06a:	f383 8811 	msr	BASEPRI, r3
 801a06e:	bf00      	nop
 801a070:	bf00      	nop
 801a072:	3708      	adds	r7, #8
 801a074:	46bd      	mov	sp, r7
 801a076:	bd80      	pop	{r7, pc}
 801a078:	e000ed04 	.word	0xe000ed04

0801a07c <vPortSetupTimerInterrupt>:
 801a07c:	b480      	push	{r7}
 801a07e:	af00      	add	r7, sp, #0
 801a080:	4b0b      	ldr	r3, [pc, #44]	; (801a0b0 <vPortSetupTimerInterrupt+0x34>)
 801a082:	2200      	movs	r2, #0
 801a084:	601a      	str	r2, [r3, #0]
 801a086:	4b0b      	ldr	r3, [pc, #44]	; (801a0b4 <vPortSetupTimerInterrupt+0x38>)
 801a088:	2200      	movs	r2, #0
 801a08a:	601a      	str	r2, [r3, #0]
 801a08c:	4b0a      	ldr	r3, [pc, #40]	; (801a0b8 <vPortSetupTimerInterrupt+0x3c>)
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	4a0a      	ldr	r2, [pc, #40]	; (801a0bc <vPortSetupTimerInterrupt+0x40>)
 801a092:	fba2 2303 	umull	r2, r3, r2, r3
 801a096:	099b      	lsrs	r3, r3, #6
 801a098:	4a09      	ldr	r2, [pc, #36]	; (801a0c0 <vPortSetupTimerInterrupt+0x44>)
 801a09a:	3b01      	subs	r3, #1
 801a09c:	6013      	str	r3, [r2, #0]
 801a09e:	4b04      	ldr	r3, [pc, #16]	; (801a0b0 <vPortSetupTimerInterrupt+0x34>)
 801a0a0:	2207      	movs	r2, #7
 801a0a2:	601a      	str	r2, [r3, #0]
 801a0a4:	bf00      	nop
 801a0a6:	46bd      	mov	sp, r7
 801a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ac:	4770      	bx	lr
 801a0ae:	bf00      	nop
 801a0b0:	e000e010 	.word	0xe000e010
 801a0b4:	e000e018 	.word	0xe000e018
 801a0b8:	2000002c 	.word	0x2000002c
 801a0bc:	10624dd3 	.word	0x10624dd3
 801a0c0:	e000e014 	.word	0xe000e014

0801a0c4 <vPortEnableVFP>:
 801a0c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801a0d4 <vPortEnableVFP+0x10>
 801a0c8:	6801      	ldr	r1, [r0, #0]
 801a0ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801a0ce:	6001      	str	r1, [r0, #0]
 801a0d0:	4770      	bx	lr
 801a0d2:	bf00      	nop
 801a0d4:	e000ed88 	.word	0xe000ed88

0801a0d8 <vPortValidateInterruptPriority>:
 801a0d8:	b480      	push	{r7}
 801a0da:	b085      	sub	sp, #20
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	f3ef 8305 	mrs	r3, IPSR
 801a0e2:	60fb      	str	r3, [r7, #12]
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	2b0f      	cmp	r3, #15
 801a0e8:	d914      	bls.n	801a114 <vPortValidateInterruptPriority+0x3c>
 801a0ea:	4a17      	ldr	r2, [pc, #92]	; (801a148 <vPortValidateInterruptPriority+0x70>)
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	4413      	add	r3, r2
 801a0f0:	781b      	ldrb	r3, [r3, #0]
 801a0f2:	72fb      	strb	r3, [r7, #11]
 801a0f4:	4b15      	ldr	r3, [pc, #84]	; (801a14c <vPortValidateInterruptPriority+0x74>)
 801a0f6:	781b      	ldrb	r3, [r3, #0]
 801a0f8:	7afa      	ldrb	r2, [r7, #11]
 801a0fa:	429a      	cmp	r2, r3
 801a0fc:	d20a      	bcs.n	801a114 <vPortValidateInterruptPriority+0x3c>
 801a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a102:	f383 8811 	msr	BASEPRI, r3
 801a106:	f3bf 8f6f 	isb	sy
 801a10a:	f3bf 8f4f 	dsb	sy
 801a10e:	607b      	str	r3, [r7, #4]
 801a110:	bf00      	nop
 801a112:	e7fe      	b.n	801a112 <vPortValidateInterruptPriority+0x3a>
 801a114:	4b0e      	ldr	r3, [pc, #56]	; (801a150 <vPortValidateInterruptPriority+0x78>)
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801a11c:	4b0d      	ldr	r3, [pc, #52]	; (801a154 <vPortValidateInterruptPriority+0x7c>)
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	429a      	cmp	r2, r3
 801a122:	d90a      	bls.n	801a13a <vPortValidateInterruptPriority+0x62>
 801a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a128:	f383 8811 	msr	BASEPRI, r3
 801a12c:	f3bf 8f6f 	isb	sy
 801a130:	f3bf 8f4f 	dsb	sy
 801a134:	603b      	str	r3, [r7, #0]
 801a136:	bf00      	nop
 801a138:	e7fe      	b.n	801a138 <vPortValidateInterruptPriority+0x60>
 801a13a:	bf00      	nop
 801a13c:	3714      	adds	r7, #20
 801a13e:	46bd      	mov	sp, r7
 801a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a144:	4770      	bx	lr
 801a146:	bf00      	nop
 801a148:	e000e3f0 	.word	0xe000e3f0
 801a14c:	20002470 	.word	0x20002470
 801a150:	e000ed0c 	.word	0xe000ed0c
 801a154:	20002474 	.word	0x20002474

0801a158 <pvPortMalloc>:
 801a158:	b580      	push	{r7, lr}
 801a15a:	b08a      	sub	sp, #40	; 0x28
 801a15c:	af00      	add	r7, sp, #0
 801a15e:	6078      	str	r0, [r7, #4]
 801a160:	2300      	movs	r3, #0
 801a162:	61fb      	str	r3, [r7, #28]
 801a164:	f7fe faee 	bl	8018744 <vTaskSuspendAll>
 801a168:	4b5d      	ldr	r3, [pc, #372]	; (801a2e0 <pvPortMalloc+0x188>)
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d101      	bne.n	801a174 <pvPortMalloc+0x1c>
 801a170:	f000 f930 	bl	801a3d4 <prvHeapInit>
 801a174:	4b5b      	ldr	r3, [pc, #364]	; (801a2e4 <pvPortMalloc+0x18c>)
 801a176:	681a      	ldr	r2, [r3, #0]
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	4013      	ands	r3, r2
 801a17c:	2b00      	cmp	r3, #0
 801a17e:	f040 8093 	bne.w	801a2a8 <pvPortMalloc+0x150>
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d01d      	beq.n	801a1c4 <pvPortMalloc+0x6c>
 801a188:	2208      	movs	r2, #8
 801a18a:	687b      	ldr	r3, [r7, #4]
 801a18c:	4413      	add	r3, r2
 801a18e:	607b      	str	r3, [r7, #4]
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	f003 0307 	and.w	r3, r3, #7
 801a196:	2b00      	cmp	r3, #0
 801a198:	d014      	beq.n	801a1c4 <pvPortMalloc+0x6c>
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	f023 0307 	bic.w	r3, r3, #7
 801a1a0:	3308      	adds	r3, #8
 801a1a2:	607b      	str	r3, [r7, #4]
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	f003 0307 	and.w	r3, r3, #7
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d00a      	beq.n	801a1c4 <pvPortMalloc+0x6c>
 801a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1b2:	f383 8811 	msr	BASEPRI, r3
 801a1b6:	f3bf 8f6f 	isb	sy
 801a1ba:	f3bf 8f4f 	dsb	sy
 801a1be:	617b      	str	r3, [r7, #20]
 801a1c0:	bf00      	nop
 801a1c2:	e7fe      	b.n	801a1c2 <pvPortMalloc+0x6a>
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d06e      	beq.n	801a2a8 <pvPortMalloc+0x150>
 801a1ca:	4b47      	ldr	r3, [pc, #284]	; (801a2e8 <pvPortMalloc+0x190>)
 801a1cc:	681b      	ldr	r3, [r3, #0]
 801a1ce:	687a      	ldr	r2, [r7, #4]
 801a1d0:	429a      	cmp	r2, r3
 801a1d2:	d869      	bhi.n	801a2a8 <pvPortMalloc+0x150>
 801a1d4:	4b45      	ldr	r3, [pc, #276]	; (801a2ec <pvPortMalloc+0x194>)
 801a1d6:	623b      	str	r3, [r7, #32]
 801a1d8:	4b44      	ldr	r3, [pc, #272]	; (801a2ec <pvPortMalloc+0x194>)
 801a1da:	681b      	ldr	r3, [r3, #0]
 801a1dc:	627b      	str	r3, [r7, #36]	; 0x24
 801a1de:	e004      	b.n	801a1ea <pvPortMalloc+0x92>
 801a1e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1e2:	623b      	str	r3, [r7, #32]
 801a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1e6:	681b      	ldr	r3, [r3, #0]
 801a1e8:	627b      	str	r3, [r7, #36]	; 0x24
 801a1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1ec:	685b      	ldr	r3, [r3, #4]
 801a1ee:	687a      	ldr	r2, [r7, #4]
 801a1f0:	429a      	cmp	r2, r3
 801a1f2:	d903      	bls.n	801a1fc <pvPortMalloc+0xa4>
 801a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d1f1      	bne.n	801a1e0 <pvPortMalloc+0x88>
 801a1fc:	4b38      	ldr	r3, [pc, #224]	; (801a2e0 <pvPortMalloc+0x188>)
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a202:	429a      	cmp	r2, r3
 801a204:	d050      	beq.n	801a2a8 <pvPortMalloc+0x150>
 801a206:	6a3b      	ldr	r3, [r7, #32]
 801a208:	681b      	ldr	r3, [r3, #0]
 801a20a:	2208      	movs	r2, #8
 801a20c:	4413      	add	r3, r2
 801a20e:	61fb      	str	r3, [r7, #28]
 801a210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a212:	681a      	ldr	r2, [r3, #0]
 801a214:	6a3b      	ldr	r3, [r7, #32]
 801a216:	601a      	str	r2, [r3, #0]
 801a218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a21a:	685a      	ldr	r2, [r3, #4]
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	1ad2      	subs	r2, r2, r3
 801a220:	2308      	movs	r3, #8
 801a222:	005b      	lsls	r3, r3, #1
 801a224:	429a      	cmp	r2, r3
 801a226:	d91f      	bls.n	801a268 <pvPortMalloc+0x110>
 801a228:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	4413      	add	r3, r2
 801a22e:	61bb      	str	r3, [r7, #24]
 801a230:	69bb      	ldr	r3, [r7, #24]
 801a232:	f003 0307 	and.w	r3, r3, #7
 801a236:	2b00      	cmp	r3, #0
 801a238:	d00a      	beq.n	801a250 <pvPortMalloc+0xf8>
 801a23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a23e:	f383 8811 	msr	BASEPRI, r3
 801a242:	f3bf 8f6f 	isb	sy
 801a246:	f3bf 8f4f 	dsb	sy
 801a24a:	613b      	str	r3, [r7, #16]
 801a24c:	bf00      	nop
 801a24e:	e7fe      	b.n	801a24e <pvPortMalloc+0xf6>
 801a250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a252:	685a      	ldr	r2, [r3, #4]
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	1ad2      	subs	r2, r2, r3
 801a258:	69bb      	ldr	r3, [r7, #24]
 801a25a:	605a      	str	r2, [r3, #4]
 801a25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a25e:	687a      	ldr	r2, [r7, #4]
 801a260:	605a      	str	r2, [r3, #4]
 801a262:	69b8      	ldr	r0, [r7, #24]
 801a264:	f000 f918 	bl	801a498 <prvInsertBlockIntoFreeList>
 801a268:	4b1f      	ldr	r3, [pc, #124]	; (801a2e8 <pvPortMalloc+0x190>)
 801a26a:	681a      	ldr	r2, [r3, #0]
 801a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a26e:	685b      	ldr	r3, [r3, #4]
 801a270:	1ad3      	subs	r3, r2, r3
 801a272:	4a1d      	ldr	r2, [pc, #116]	; (801a2e8 <pvPortMalloc+0x190>)
 801a274:	6013      	str	r3, [r2, #0]
 801a276:	4b1c      	ldr	r3, [pc, #112]	; (801a2e8 <pvPortMalloc+0x190>)
 801a278:	681a      	ldr	r2, [r3, #0]
 801a27a:	4b1d      	ldr	r3, [pc, #116]	; (801a2f0 <pvPortMalloc+0x198>)
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	429a      	cmp	r2, r3
 801a280:	d203      	bcs.n	801a28a <pvPortMalloc+0x132>
 801a282:	4b19      	ldr	r3, [pc, #100]	; (801a2e8 <pvPortMalloc+0x190>)
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	4a1a      	ldr	r2, [pc, #104]	; (801a2f0 <pvPortMalloc+0x198>)
 801a288:	6013      	str	r3, [r2, #0]
 801a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a28c:	685a      	ldr	r2, [r3, #4]
 801a28e:	4b15      	ldr	r3, [pc, #84]	; (801a2e4 <pvPortMalloc+0x18c>)
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	431a      	orrs	r2, r3
 801a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a296:	605a      	str	r2, [r3, #4]
 801a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a29a:	2200      	movs	r2, #0
 801a29c:	601a      	str	r2, [r3, #0]
 801a29e:	4b15      	ldr	r3, [pc, #84]	; (801a2f4 <pvPortMalloc+0x19c>)
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	3301      	adds	r3, #1
 801a2a4:	4a13      	ldr	r2, [pc, #76]	; (801a2f4 <pvPortMalloc+0x19c>)
 801a2a6:	6013      	str	r3, [r2, #0]
 801a2a8:	f7fe fa5a 	bl	8018760 <xTaskResumeAll>
 801a2ac:	69fb      	ldr	r3, [r7, #28]
 801a2ae:	2b00      	cmp	r3, #0
 801a2b0:	d101      	bne.n	801a2b6 <pvPortMalloc+0x15e>
 801a2b2:	f7f3 fe29 	bl	800df08 <vApplicationMallocFailedHook>
 801a2b6:	69fb      	ldr	r3, [r7, #28]
 801a2b8:	f003 0307 	and.w	r3, r3, #7
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d00a      	beq.n	801a2d6 <pvPortMalloc+0x17e>
 801a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a2c4:	f383 8811 	msr	BASEPRI, r3
 801a2c8:	f3bf 8f6f 	isb	sy
 801a2cc:	f3bf 8f4f 	dsb	sy
 801a2d0:	60fb      	str	r3, [r7, #12]
 801a2d2:	bf00      	nop
 801a2d4:	e7fe      	b.n	801a2d4 <pvPortMalloc+0x17c>
 801a2d6:	69fb      	ldr	r3, [r7, #28]
 801a2d8:	4618      	mov	r0, r3
 801a2da:	3728      	adds	r7, #40	; 0x28
 801a2dc:	46bd      	mov	sp, r7
 801a2de:	bd80      	pop	{r7, pc}
 801a2e0:	2000a480 	.word	0x2000a480
 801a2e4:	2000a494 	.word	0x2000a494
 801a2e8:	2000a484 	.word	0x2000a484
 801a2ec:	2000a478 	.word	0x2000a478
 801a2f0:	2000a488 	.word	0x2000a488
 801a2f4:	2000a48c 	.word	0x2000a48c

0801a2f8 <vPortFree>:
 801a2f8:	b580      	push	{r7, lr}
 801a2fa:	b086      	sub	sp, #24
 801a2fc:	af00      	add	r7, sp, #0
 801a2fe:	6078      	str	r0, [r7, #4]
 801a300:	687b      	ldr	r3, [r7, #4]
 801a302:	617b      	str	r3, [r7, #20]
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d04d      	beq.n	801a3a6 <vPortFree+0xae>
 801a30a:	2308      	movs	r3, #8
 801a30c:	425b      	negs	r3, r3
 801a30e:	697a      	ldr	r2, [r7, #20]
 801a310:	4413      	add	r3, r2
 801a312:	617b      	str	r3, [r7, #20]
 801a314:	697b      	ldr	r3, [r7, #20]
 801a316:	613b      	str	r3, [r7, #16]
 801a318:	693b      	ldr	r3, [r7, #16]
 801a31a:	685a      	ldr	r2, [r3, #4]
 801a31c:	4b24      	ldr	r3, [pc, #144]	; (801a3b0 <vPortFree+0xb8>)
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	4013      	ands	r3, r2
 801a322:	2b00      	cmp	r3, #0
 801a324:	d10a      	bne.n	801a33c <vPortFree+0x44>
 801a326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a32a:	f383 8811 	msr	BASEPRI, r3
 801a32e:	f3bf 8f6f 	isb	sy
 801a332:	f3bf 8f4f 	dsb	sy
 801a336:	60fb      	str	r3, [r7, #12]
 801a338:	bf00      	nop
 801a33a:	e7fe      	b.n	801a33a <vPortFree+0x42>
 801a33c:	693b      	ldr	r3, [r7, #16]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	2b00      	cmp	r3, #0
 801a342:	d00a      	beq.n	801a35a <vPortFree+0x62>
 801a344:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a348:	f383 8811 	msr	BASEPRI, r3
 801a34c:	f3bf 8f6f 	isb	sy
 801a350:	f3bf 8f4f 	dsb	sy
 801a354:	60bb      	str	r3, [r7, #8]
 801a356:	bf00      	nop
 801a358:	e7fe      	b.n	801a358 <vPortFree+0x60>
 801a35a:	693b      	ldr	r3, [r7, #16]
 801a35c:	685a      	ldr	r2, [r3, #4]
 801a35e:	4b14      	ldr	r3, [pc, #80]	; (801a3b0 <vPortFree+0xb8>)
 801a360:	681b      	ldr	r3, [r3, #0]
 801a362:	4013      	ands	r3, r2
 801a364:	2b00      	cmp	r3, #0
 801a366:	d01e      	beq.n	801a3a6 <vPortFree+0xae>
 801a368:	693b      	ldr	r3, [r7, #16]
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d11a      	bne.n	801a3a6 <vPortFree+0xae>
 801a370:	693b      	ldr	r3, [r7, #16]
 801a372:	685a      	ldr	r2, [r3, #4]
 801a374:	4b0e      	ldr	r3, [pc, #56]	; (801a3b0 <vPortFree+0xb8>)
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	43db      	mvns	r3, r3
 801a37a:	401a      	ands	r2, r3
 801a37c:	693b      	ldr	r3, [r7, #16]
 801a37e:	605a      	str	r2, [r3, #4]
 801a380:	f7fe f9e0 	bl	8018744 <vTaskSuspendAll>
 801a384:	693b      	ldr	r3, [r7, #16]
 801a386:	685a      	ldr	r2, [r3, #4]
 801a388:	4b0a      	ldr	r3, [pc, #40]	; (801a3b4 <vPortFree+0xbc>)
 801a38a:	681b      	ldr	r3, [r3, #0]
 801a38c:	4413      	add	r3, r2
 801a38e:	4a09      	ldr	r2, [pc, #36]	; (801a3b4 <vPortFree+0xbc>)
 801a390:	6013      	str	r3, [r2, #0]
 801a392:	6938      	ldr	r0, [r7, #16]
 801a394:	f000 f880 	bl	801a498 <prvInsertBlockIntoFreeList>
 801a398:	4b07      	ldr	r3, [pc, #28]	; (801a3b8 <vPortFree+0xc0>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	3301      	adds	r3, #1
 801a39e:	4a06      	ldr	r2, [pc, #24]	; (801a3b8 <vPortFree+0xc0>)
 801a3a0:	6013      	str	r3, [r2, #0]
 801a3a2:	f7fe f9dd 	bl	8018760 <xTaskResumeAll>
 801a3a6:	bf00      	nop
 801a3a8:	3718      	adds	r7, #24
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	bd80      	pop	{r7, pc}
 801a3ae:	bf00      	nop
 801a3b0:	2000a494 	.word	0x2000a494
 801a3b4:	2000a484 	.word	0x2000a484
 801a3b8:	2000a490 	.word	0x2000a490

0801a3bc <xPortGetFreeHeapSize>:
 801a3bc:	b480      	push	{r7}
 801a3be:	af00      	add	r7, sp, #0
 801a3c0:	4b03      	ldr	r3, [pc, #12]	; (801a3d0 <xPortGetFreeHeapSize+0x14>)
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	4618      	mov	r0, r3
 801a3c6:	46bd      	mov	sp, r7
 801a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3cc:	4770      	bx	lr
 801a3ce:	bf00      	nop
 801a3d0:	2000a484 	.word	0x2000a484

0801a3d4 <prvHeapInit>:
 801a3d4:	b480      	push	{r7}
 801a3d6:	b085      	sub	sp, #20
 801a3d8:	af00      	add	r7, sp, #0
 801a3da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a3de:	60bb      	str	r3, [r7, #8]
 801a3e0:	4b27      	ldr	r3, [pc, #156]	; (801a480 <prvHeapInit+0xac>)
 801a3e2:	60fb      	str	r3, [r7, #12]
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	f003 0307 	and.w	r3, r3, #7
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d00c      	beq.n	801a408 <prvHeapInit+0x34>
 801a3ee:	68fb      	ldr	r3, [r7, #12]
 801a3f0:	3307      	adds	r3, #7
 801a3f2:	60fb      	str	r3, [r7, #12]
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	f023 0307 	bic.w	r3, r3, #7
 801a3fa:	60fb      	str	r3, [r7, #12]
 801a3fc:	68ba      	ldr	r2, [r7, #8]
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	1ad3      	subs	r3, r2, r3
 801a402:	4a1f      	ldr	r2, [pc, #124]	; (801a480 <prvHeapInit+0xac>)
 801a404:	4413      	add	r3, r2
 801a406:	60bb      	str	r3, [r7, #8]
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	607b      	str	r3, [r7, #4]
 801a40c:	4a1d      	ldr	r2, [pc, #116]	; (801a484 <prvHeapInit+0xb0>)
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	6013      	str	r3, [r2, #0]
 801a412:	4b1c      	ldr	r3, [pc, #112]	; (801a484 <prvHeapInit+0xb0>)
 801a414:	2200      	movs	r2, #0
 801a416:	605a      	str	r2, [r3, #4]
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	68ba      	ldr	r2, [r7, #8]
 801a41c:	4413      	add	r3, r2
 801a41e:	60fb      	str	r3, [r7, #12]
 801a420:	2208      	movs	r2, #8
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	1a9b      	subs	r3, r3, r2
 801a426:	60fb      	str	r3, [r7, #12]
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	f023 0307 	bic.w	r3, r3, #7
 801a42e:	60fb      	str	r3, [r7, #12]
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	4a15      	ldr	r2, [pc, #84]	; (801a488 <prvHeapInit+0xb4>)
 801a434:	6013      	str	r3, [r2, #0]
 801a436:	4b14      	ldr	r3, [pc, #80]	; (801a488 <prvHeapInit+0xb4>)
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	2200      	movs	r2, #0
 801a43c:	605a      	str	r2, [r3, #4]
 801a43e:	4b12      	ldr	r3, [pc, #72]	; (801a488 <prvHeapInit+0xb4>)
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	2200      	movs	r2, #0
 801a444:	601a      	str	r2, [r3, #0]
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	603b      	str	r3, [r7, #0]
 801a44a:	683b      	ldr	r3, [r7, #0]
 801a44c:	68fa      	ldr	r2, [r7, #12]
 801a44e:	1ad2      	subs	r2, r2, r3
 801a450:	683b      	ldr	r3, [r7, #0]
 801a452:	605a      	str	r2, [r3, #4]
 801a454:	4b0c      	ldr	r3, [pc, #48]	; (801a488 <prvHeapInit+0xb4>)
 801a456:	681a      	ldr	r2, [r3, #0]
 801a458:	683b      	ldr	r3, [r7, #0]
 801a45a:	601a      	str	r2, [r3, #0]
 801a45c:	683b      	ldr	r3, [r7, #0]
 801a45e:	685b      	ldr	r3, [r3, #4]
 801a460:	4a0a      	ldr	r2, [pc, #40]	; (801a48c <prvHeapInit+0xb8>)
 801a462:	6013      	str	r3, [r2, #0]
 801a464:	683b      	ldr	r3, [r7, #0]
 801a466:	685b      	ldr	r3, [r3, #4]
 801a468:	4a09      	ldr	r2, [pc, #36]	; (801a490 <prvHeapInit+0xbc>)
 801a46a:	6013      	str	r3, [r2, #0]
 801a46c:	4b09      	ldr	r3, [pc, #36]	; (801a494 <prvHeapInit+0xc0>)
 801a46e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801a472:	601a      	str	r2, [r3, #0]
 801a474:	bf00      	nop
 801a476:	3714      	adds	r7, #20
 801a478:	46bd      	mov	sp, r7
 801a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47e:	4770      	bx	lr
 801a480:	20002478 	.word	0x20002478
 801a484:	2000a478 	.word	0x2000a478
 801a488:	2000a480 	.word	0x2000a480
 801a48c:	2000a488 	.word	0x2000a488
 801a490:	2000a484 	.word	0x2000a484
 801a494:	2000a494 	.word	0x2000a494

0801a498 <prvInsertBlockIntoFreeList>:
 801a498:	b480      	push	{r7}
 801a49a:	b085      	sub	sp, #20
 801a49c:	af00      	add	r7, sp, #0
 801a49e:	6078      	str	r0, [r7, #4]
 801a4a0:	4b28      	ldr	r3, [pc, #160]	; (801a544 <prvInsertBlockIntoFreeList+0xac>)
 801a4a2:	60fb      	str	r3, [r7, #12]
 801a4a4:	e002      	b.n	801a4ac <prvInsertBlockIntoFreeList+0x14>
 801a4a6:	68fb      	ldr	r3, [r7, #12]
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	60fb      	str	r3, [r7, #12]
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	687a      	ldr	r2, [r7, #4]
 801a4b2:	429a      	cmp	r2, r3
 801a4b4:	d8f7      	bhi.n	801a4a6 <prvInsertBlockIntoFreeList+0xe>
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	60bb      	str	r3, [r7, #8]
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	685b      	ldr	r3, [r3, #4]
 801a4be:	68ba      	ldr	r2, [r7, #8]
 801a4c0:	4413      	add	r3, r2
 801a4c2:	687a      	ldr	r2, [r7, #4]
 801a4c4:	429a      	cmp	r2, r3
 801a4c6:	d108      	bne.n	801a4da <prvInsertBlockIntoFreeList+0x42>
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	685a      	ldr	r2, [r3, #4]
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	685b      	ldr	r3, [r3, #4]
 801a4d0:	441a      	add	r2, r3
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	605a      	str	r2, [r3, #4]
 801a4d6:	68fb      	ldr	r3, [r7, #12]
 801a4d8:	607b      	str	r3, [r7, #4]
 801a4da:	687b      	ldr	r3, [r7, #4]
 801a4dc:	60bb      	str	r3, [r7, #8]
 801a4de:	687b      	ldr	r3, [r7, #4]
 801a4e0:	685b      	ldr	r3, [r3, #4]
 801a4e2:	68ba      	ldr	r2, [r7, #8]
 801a4e4:	441a      	add	r2, r3
 801a4e6:	68fb      	ldr	r3, [r7, #12]
 801a4e8:	681b      	ldr	r3, [r3, #0]
 801a4ea:	429a      	cmp	r2, r3
 801a4ec:	d118      	bne.n	801a520 <prvInsertBlockIntoFreeList+0x88>
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	681a      	ldr	r2, [r3, #0]
 801a4f2:	4b15      	ldr	r3, [pc, #84]	; (801a548 <prvInsertBlockIntoFreeList+0xb0>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	429a      	cmp	r2, r3
 801a4f8:	d00d      	beq.n	801a516 <prvInsertBlockIntoFreeList+0x7e>
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	685a      	ldr	r2, [r3, #4]
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	685b      	ldr	r3, [r3, #4]
 801a504:	441a      	add	r2, r3
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	605a      	str	r2, [r3, #4]
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	681a      	ldr	r2, [r3, #0]
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	601a      	str	r2, [r3, #0]
 801a514:	e008      	b.n	801a528 <prvInsertBlockIntoFreeList+0x90>
 801a516:	4b0c      	ldr	r3, [pc, #48]	; (801a548 <prvInsertBlockIntoFreeList+0xb0>)
 801a518:	681a      	ldr	r2, [r3, #0]
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	601a      	str	r2, [r3, #0]
 801a51e:	e003      	b.n	801a528 <prvInsertBlockIntoFreeList+0x90>
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	681a      	ldr	r2, [r3, #0]
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	601a      	str	r2, [r3, #0]
 801a528:	68fa      	ldr	r2, [r7, #12]
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	429a      	cmp	r2, r3
 801a52e:	d002      	beq.n	801a536 <prvInsertBlockIntoFreeList+0x9e>
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	687a      	ldr	r2, [r7, #4]
 801a534:	601a      	str	r2, [r3, #0]
 801a536:	bf00      	nop
 801a538:	3714      	adds	r7, #20
 801a53a:	46bd      	mov	sp, r7
 801a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a540:	4770      	bx	lr
 801a542:	bf00      	nop
 801a544:	2000a478 	.word	0x2000a478
 801a548:	2000a480 	.word	0x2000a480

0801a54c <_ZdlPvj>:
 801a54c:	f000 b816 	b.w	801a57c <_ZdlPv>

0801a550 <_ZdaPv>:
 801a550:	f000 b814 	b.w	801a57c <_ZdlPv>

0801a554 <__cxa_guard_acquire>:
 801a554:	6803      	ldr	r3, [r0, #0]
 801a556:	07db      	lsls	r3, r3, #31
 801a558:	d406      	bmi.n	801a568 <__cxa_guard_acquire+0x14>
 801a55a:	7843      	ldrb	r3, [r0, #1]
 801a55c:	b103      	cbz	r3, 801a560 <__cxa_guard_acquire+0xc>
 801a55e:	deff      	udf	#255	; 0xff
 801a560:	2301      	movs	r3, #1
 801a562:	7043      	strb	r3, [r0, #1]
 801a564:	4618      	mov	r0, r3
 801a566:	4770      	bx	lr
 801a568:	2000      	movs	r0, #0
 801a56a:	4770      	bx	lr

0801a56c <__cxa_guard_release>:
 801a56c:	2301      	movs	r3, #1
 801a56e:	6003      	str	r3, [r0, #0]
 801a570:	4770      	bx	lr

0801a572 <_Znaj>:
 801a572:	f000 b805 	b.w	801a580 <_Znwj>

0801a576 <_ZSt25__throw_bad_function_callv>:
 801a576:	b508      	push	{r3, lr}
 801a578:	f000 fa46 	bl	801aa08 <abort>

0801a57c <_ZdlPv>:
 801a57c:	f000 bb7e 	b.w	801ac7c <free>

0801a580 <_Znwj>:
 801a580:	2801      	cmp	r0, #1
 801a582:	bf38      	it	cc
 801a584:	2001      	movcc	r0, #1
 801a586:	b510      	push	{r4, lr}
 801a588:	4604      	mov	r4, r0
 801a58a:	4620      	mov	r0, r4
 801a58c:	f000 fb6e 	bl	801ac6c <malloc>
 801a590:	b930      	cbnz	r0, 801a5a0 <_Znwj+0x20>
 801a592:	f000 f807 	bl	801a5a4 <_ZSt15get_new_handlerv>
 801a596:	b908      	cbnz	r0, 801a59c <_Znwj+0x1c>
 801a598:	f000 fa36 	bl	801aa08 <abort>
 801a59c:	4780      	blx	r0
 801a59e:	e7f4      	b.n	801a58a <_Znwj+0xa>
 801a5a0:	bd10      	pop	{r4, pc}
	...

0801a5a4 <_ZSt15get_new_handlerv>:
 801a5a4:	4b02      	ldr	r3, [pc, #8]	; (801a5b0 <_ZSt15get_new_handlerv+0xc>)
 801a5a6:	6818      	ldr	r0, [r3, #0]
 801a5a8:	f3bf 8f5b 	dmb	ish
 801a5ac:	4770      	bx	lr
 801a5ae:	bf00      	nop
 801a5b0:	2000a498 	.word	0x2000a498

0801a5b4 <roundf>:
 801a5b4:	ee10 0a10 	vmov	r0, s0
 801a5b8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801a5bc:	3a7f      	subs	r2, #127	; 0x7f
 801a5be:	2a16      	cmp	r2, #22
 801a5c0:	dc15      	bgt.n	801a5ee <roundf+0x3a>
 801a5c2:	2a00      	cmp	r2, #0
 801a5c4:	da08      	bge.n	801a5d8 <roundf+0x24>
 801a5c6:	3201      	adds	r2, #1
 801a5c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801a5cc:	d101      	bne.n	801a5d2 <roundf+0x1e>
 801a5ce:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801a5d2:	ee00 3a10 	vmov	s0, r3
 801a5d6:	4770      	bx	lr
 801a5d8:	4907      	ldr	r1, [pc, #28]	; (801a5f8 <roundf+0x44>)
 801a5da:	4111      	asrs	r1, r2
 801a5dc:	4208      	tst	r0, r1
 801a5de:	d0fa      	beq.n	801a5d6 <roundf+0x22>
 801a5e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801a5e4:	4113      	asrs	r3, r2
 801a5e6:	4403      	add	r3, r0
 801a5e8:	ea23 0301 	bic.w	r3, r3, r1
 801a5ec:	e7f1      	b.n	801a5d2 <roundf+0x1e>
 801a5ee:	2a80      	cmp	r2, #128	; 0x80
 801a5f0:	d1f1      	bne.n	801a5d6 <roundf+0x22>
 801a5f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a5f6:	4770      	bx	lr
 801a5f8:	007fffff 	.word	0x007fffff
 801a5fc:	00000000 	.word	0x00000000

0801a600 <log>:
 801a600:	b538      	push	{r3, r4, r5, lr}
 801a602:	ed2d 8b02 	vpush	{d8}
 801a606:	ec55 4b10 	vmov	r4, r5, d0
 801a60a:	f000 f839 	bl	801a680 <__ieee754_log>
 801a60e:	4622      	mov	r2, r4
 801a610:	462b      	mov	r3, r5
 801a612:	4620      	mov	r0, r4
 801a614:	4629      	mov	r1, r5
 801a616:	eeb0 8a40 	vmov.f32	s16, s0
 801a61a:	eef0 8a60 	vmov.f32	s17, s1
 801a61e:	f7e6 fa85 	bl	8000b2c <__aeabi_dcmpun>
 801a622:	b998      	cbnz	r0, 801a64c <log+0x4c>
 801a624:	2200      	movs	r2, #0
 801a626:	2300      	movs	r3, #0
 801a628:	4620      	mov	r0, r4
 801a62a:	4629      	mov	r1, r5
 801a62c:	f7e6 fa74 	bl	8000b18 <__aeabi_dcmpgt>
 801a630:	b960      	cbnz	r0, 801a64c <log+0x4c>
 801a632:	2200      	movs	r2, #0
 801a634:	2300      	movs	r3, #0
 801a636:	4620      	mov	r0, r4
 801a638:	4629      	mov	r1, r5
 801a63a:	f7e6 fa45 	bl	8000ac8 <__aeabi_dcmpeq>
 801a63e:	b160      	cbz	r0, 801a65a <log+0x5a>
 801a640:	f000 f9f0 	bl	801aa24 <__errno>
 801a644:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 801a670 <log+0x70>
 801a648:	2322      	movs	r3, #34	; 0x22
 801a64a:	6003      	str	r3, [r0, #0]
 801a64c:	eeb0 0a48 	vmov.f32	s0, s16
 801a650:	eef0 0a68 	vmov.f32	s1, s17
 801a654:	ecbd 8b02 	vpop	{d8}
 801a658:	bd38      	pop	{r3, r4, r5, pc}
 801a65a:	f000 f9e3 	bl	801aa24 <__errno>
 801a65e:	ecbd 8b02 	vpop	{d8}
 801a662:	2321      	movs	r3, #33	; 0x21
 801a664:	6003      	str	r3, [r0, #0]
 801a666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a66a:	4803      	ldr	r0, [pc, #12]	; (801a678 <log+0x78>)
 801a66c:	f000 b9c4 	b.w	801a9f8 <nan>
 801a670:	00000000 	.word	0x00000000
 801a674:	fff00000 	.word	0xfff00000
 801a678:	0801dfcf 	.word	0x0801dfcf
 801a67c:	00000000 	.word	0x00000000

0801a680 <__ieee754_log>:
 801a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a684:	ec51 0b10 	vmov	r0, r1, d0
 801a688:	ed2d 8b04 	vpush	{d8-d9}
 801a68c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801a690:	b083      	sub	sp, #12
 801a692:	460d      	mov	r5, r1
 801a694:	da29      	bge.n	801a6ea <__ieee754_log+0x6a>
 801a696:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a69a:	4303      	orrs	r3, r0
 801a69c:	ee10 2a10 	vmov	r2, s0
 801a6a0:	d10c      	bne.n	801a6bc <__ieee754_log+0x3c>
 801a6a2:	49cf      	ldr	r1, [pc, #828]	; (801a9e0 <__ieee754_log+0x360>)
 801a6a4:	2200      	movs	r2, #0
 801a6a6:	2300      	movs	r3, #0
 801a6a8:	2000      	movs	r0, #0
 801a6aa:	f7e6 f8cf 	bl	800084c <__aeabi_ddiv>
 801a6ae:	ec41 0b10 	vmov	d0, r0, r1
 801a6b2:	b003      	add	sp, #12
 801a6b4:	ecbd 8b04 	vpop	{d8-d9}
 801a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6bc:	2900      	cmp	r1, #0
 801a6be:	da05      	bge.n	801a6cc <__ieee754_log+0x4c>
 801a6c0:	460b      	mov	r3, r1
 801a6c2:	f7e5 fde1 	bl	8000288 <__aeabi_dsub>
 801a6c6:	2200      	movs	r2, #0
 801a6c8:	2300      	movs	r3, #0
 801a6ca:	e7ee      	b.n	801a6aa <__ieee754_log+0x2a>
 801a6cc:	4bc5      	ldr	r3, [pc, #788]	; (801a9e4 <__ieee754_log+0x364>)
 801a6ce:	2200      	movs	r2, #0
 801a6d0:	f7e5 ff92 	bl	80005f8 <__aeabi_dmul>
 801a6d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 801a6d8:	460d      	mov	r5, r1
 801a6da:	4ac3      	ldr	r2, [pc, #780]	; (801a9e8 <__ieee754_log+0x368>)
 801a6dc:	4295      	cmp	r5, r2
 801a6de:	dd06      	ble.n	801a6ee <__ieee754_log+0x6e>
 801a6e0:	4602      	mov	r2, r0
 801a6e2:	460b      	mov	r3, r1
 801a6e4:	f7e5 fdd2 	bl	800028c <__adddf3>
 801a6e8:	e7e1      	b.n	801a6ae <__ieee754_log+0x2e>
 801a6ea:	2300      	movs	r3, #0
 801a6ec:	e7f5      	b.n	801a6da <__ieee754_log+0x5a>
 801a6ee:	152c      	asrs	r4, r5, #20
 801a6f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801a6f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 801a6f8:	441c      	add	r4, r3
 801a6fa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801a6fe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 801a702:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801a706:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801a70a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801a70e:	ea42 0105 	orr.w	r1, r2, r5
 801a712:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801a716:	2200      	movs	r2, #0
 801a718:	4bb4      	ldr	r3, [pc, #720]	; (801a9ec <__ieee754_log+0x36c>)
 801a71a:	f7e5 fdb5 	bl	8000288 <__aeabi_dsub>
 801a71e:	1cab      	adds	r3, r5, #2
 801a720:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a724:	2b02      	cmp	r3, #2
 801a726:	4682      	mov	sl, r0
 801a728:	468b      	mov	fp, r1
 801a72a:	f04f 0200 	mov.w	r2, #0
 801a72e:	dc53      	bgt.n	801a7d8 <__ieee754_log+0x158>
 801a730:	2300      	movs	r3, #0
 801a732:	f7e6 f9c9 	bl	8000ac8 <__aeabi_dcmpeq>
 801a736:	b1d0      	cbz	r0, 801a76e <__ieee754_log+0xee>
 801a738:	2c00      	cmp	r4, #0
 801a73a:	f000 8122 	beq.w	801a982 <__ieee754_log+0x302>
 801a73e:	4620      	mov	r0, r4
 801a740:	f7e5 fef0 	bl	8000524 <__aeabi_i2d>
 801a744:	a390      	add	r3, pc, #576	; (adr r3, 801a988 <__ieee754_log+0x308>)
 801a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a74a:	4606      	mov	r6, r0
 801a74c:	460f      	mov	r7, r1
 801a74e:	f7e5 ff53 	bl	80005f8 <__aeabi_dmul>
 801a752:	a38f      	add	r3, pc, #572	; (adr r3, 801a990 <__ieee754_log+0x310>)
 801a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a758:	4604      	mov	r4, r0
 801a75a:	460d      	mov	r5, r1
 801a75c:	4630      	mov	r0, r6
 801a75e:	4639      	mov	r1, r7
 801a760:	f7e5 ff4a 	bl	80005f8 <__aeabi_dmul>
 801a764:	4602      	mov	r2, r0
 801a766:	460b      	mov	r3, r1
 801a768:	4620      	mov	r0, r4
 801a76a:	4629      	mov	r1, r5
 801a76c:	e7ba      	b.n	801a6e4 <__ieee754_log+0x64>
 801a76e:	a38a      	add	r3, pc, #552	; (adr r3, 801a998 <__ieee754_log+0x318>)
 801a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a774:	4650      	mov	r0, sl
 801a776:	4659      	mov	r1, fp
 801a778:	f7e5 ff3e 	bl	80005f8 <__aeabi_dmul>
 801a77c:	4602      	mov	r2, r0
 801a77e:	460b      	mov	r3, r1
 801a780:	2000      	movs	r0, #0
 801a782:	499b      	ldr	r1, [pc, #620]	; (801a9f0 <__ieee754_log+0x370>)
 801a784:	f7e5 fd80 	bl	8000288 <__aeabi_dsub>
 801a788:	4652      	mov	r2, sl
 801a78a:	4606      	mov	r6, r0
 801a78c:	460f      	mov	r7, r1
 801a78e:	465b      	mov	r3, fp
 801a790:	4650      	mov	r0, sl
 801a792:	4659      	mov	r1, fp
 801a794:	f7e5 ff30 	bl	80005f8 <__aeabi_dmul>
 801a798:	4602      	mov	r2, r0
 801a79a:	460b      	mov	r3, r1
 801a79c:	4630      	mov	r0, r6
 801a79e:	4639      	mov	r1, r7
 801a7a0:	f7e5 ff2a 	bl	80005f8 <__aeabi_dmul>
 801a7a4:	4606      	mov	r6, r0
 801a7a6:	460f      	mov	r7, r1
 801a7a8:	b914      	cbnz	r4, 801a7b0 <__ieee754_log+0x130>
 801a7aa:	4632      	mov	r2, r6
 801a7ac:	463b      	mov	r3, r7
 801a7ae:	e0a2      	b.n	801a8f6 <__ieee754_log+0x276>
 801a7b0:	4620      	mov	r0, r4
 801a7b2:	f7e5 feb7 	bl	8000524 <__aeabi_i2d>
 801a7b6:	a374      	add	r3, pc, #464	; (adr r3, 801a988 <__ieee754_log+0x308>)
 801a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7bc:	4680      	mov	r8, r0
 801a7be:	4689      	mov	r9, r1
 801a7c0:	f7e5 ff1a 	bl	80005f8 <__aeabi_dmul>
 801a7c4:	a372      	add	r3, pc, #456	; (adr r3, 801a990 <__ieee754_log+0x310>)
 801a7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a7ca:	4604      	mov	r4, r0
 801a7cc:	460d      	mov	r5, r1
 801a7ce:	4640      	mov	r0, r8
 801a7d0:	4649      	mov	r1, r9
 801a7d2:	f7e5 ff11 	bl	80005f8 <__aeabi_dmul>
 801a7d6:	e0a7      	b.n	801a928 <__ieee754_log+0x2a8>
 801a7d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a7dc:	f7e5 fd56 	bl	800028c <__adddf3>
 801a7e0:	4602      	mov	r2, r0
 801a7e2:	460b      	mov	r3, r1
 801a7e4:	4650      	mov	r0, sl
 801a7e6:	4659      	mov	r1, fp
 801a7e8:	f7e6 f830 	bl	800084c <__aeabi_ddiv>
 801a7ec:	ec41 0b18 	vmov	d8, r0, r1
 801a7f0:	4620      	mov	r0, r4
 801a7f2:	f7e5 fe97 	bl	8000524 <__aeabi_i2d>
 801a7f6:	ec53 2b18 	vmov	r2, r3, d8
 801a7fa:	ec41 0b19 	vmov	d9, r0, r1
 801a7fe:	ec51 0b18 	vmov	r0, r1, d8
 801a802:	f7e5 fef9 	bl	80005f8 <__aeabi_dmul>
 801a806:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801a80a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801a80e:	9301      	str	r3, [sp, #4]
 801a810:	4602      	mov	r2, r0
 801a812:	460b      	mov	r3, r1
 801a814:	4680      	mov	r8, r0
 801a816:	4689      	mov	r9, r1
 801a818:	f7e5 feee 	bl	80005f8 <__aeabi_dmul>
 801a81c:	a360      	add	r3, pc, #384	; (adr r3, 801a9a0 <__ieee754_log+0x320>)
 801a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a822:	4606      	mov	r6, r0
 801a824:	460f      	mov	r7, r1
 801a826:	f7e5 fee7 	bl	80005f8 <__aeabi_dmul>
 801a82a:	a35f      	add	r3, pc, #380	; (adr r3, 801a9a8 <__ieee754_log+0x328>)
 801a82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a830:	f7e5 fd2c 	bl	800028c <__adddf3>
 801a834:	4632      	mov	r2, r6
 801a836:	463b      	mov	r3, r7
 801a838:	f7e5 fede 	bl	80005f8 <__aeabi_dmul>
 801a83c:	a35c      	add	r3, pc, #368	; (adr r3, 801a9b0 <__ieee754_log+0x330>)
 801a83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a842:	f7e5 fd23 	bl	800028c <__adddf3>
 801a846:	4632      	mov	r2, r6
 801a848:	463b      	mov	r3, r7
 801a84a:	f7e5 fed5 	bl	80005f8 <__aeabi_dmul>
 801a84e:	a35a      	add	r3, pc, #360	; (adr r3, 801a9b8 <__ieee754_log+0x338>)
 801a850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a854:	f7e5 fd1a 	bl	800028c <__adddf3>
 801a858:	4642      	mov	r2, r8
 801a85a:	464b      	mov	r3, r9
 801a85c:	f7e5 fecc 	bl	80005f8 <__aeabi_dmul>
 801a860:	a357      	add	r3, pc, #348	; (adr r3, 801a9c0 <__ieee754_log+0x340>)
 801a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a866:	4680      	mov	r8, r0
 801a868:	4689      	mov	r9, r1
 801a86a:	4630      	mov	r0, r6
 801a86c:	4639      	mov	r1, r7
 801a86e:	f7e5 fec3 	bl	80005f8 <__aeabi_dmul>
 801a872:	a355      	add	r3, pc, #340	; (adr r3, 801a9c8 <__ieee754_log+0x348>)
 801a874:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a878:	f7e5 fd08 	bl	800028c <__adddf3>
 801a87c:	4632      	mov	r2, r6
 801a87e:	463b      	mov	r3, r7
 801a880:	f7e5 feba 	bl	80005f8 <__aeabi_dmul>
 801a884:	a352      	add	r3, pc, #328	; (adr r3, 801a9d0 <__ieee754_log+0x350>)
 801a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a88a:	f7e5 fcff 	bl	800028c <__adddf3>
 801a88e:	4632      	mov	r2, r6
 801a890:	463b      	mov	r3, r7
 801a892:	f7e5 feb1 	bl	80005f8 <__aeabi_dmul>
 801a896:	460b      	mov	r3, r1
 801a898:	4602      	mov	r2, r0
 801a89a:	4649      	mov	r1, r9
 801a89c:	4640      	mov	r0, r8
 801a89e:	f7e5 fcf5 	bl	800028c <__adddf3>
 801a8a2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801a8a6:	9b01      	ldr	r3, [sp, #4]
 801a8a8:	3551      	adds	r5, #81	; 0x51
 801a8aa:	431d      	orrs	r5, r3
 801a8ac:	2d00      	cmp	r5, #0
 801a8ae:	4680      	mov	r8, r0
 801a8b0:	4689      	mov	r9, r1
 801a8b2:	dd48      	ble.n	801a946 <__ieee754_log+0x2c6>
 801a8b4:	4b4e      	ldr	r3, [pc, #312]	; (801a9f0 <__ieee754_log+0x370>)
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	4650      	mov	r0, sl
 801a8ba:	4659      	mov	r1, fp
 801a8bc:	f7e5 fe9c 	bl	80005f8 <__aeabi_dmul>
 801a8c0:	4652      	mov	r2, sl
 801a8c2:	465b      	mov	r3, fp
 801a8c4:	f7e5 fe98 	bl	80005f8 <__aeabi_dmul>
 801a8c8:	4602      	mov	r2, r0
 801a8ca:	460b      	mov	r3, r1
 801a8cc:	4606      	mov	r6, r0
 801a8ce:	460f      	mov	r7, r1
 801a8d0:	4640      	mov	r0, r8
 801a8d2:	4649      	mov	r1, r9
 801a8d4:	f7e5 fcda 	bl	800028c <__adddf3>
 801a8d8:	ec53 2b18 	vmov	r2, r3, d8
 801a8dc:	f7e5 fe8c 	bl	80005f8 <__aeabi_dmul>
 801a8e0:	4680      	mov	r8, r0
 801a8e2:	4689      	mov	r9, r1
 801a8e4:	b964      	cbnz	r4, 801a900 <__ieee754_log+0x280>
 801a8e6:	4602      	mov	r2, r0
 801a8e8:	460b      	mov	r3, r1
 801a8ea:	4630      	mov	r0, r6
 801a8ec:	4639      	mov	r1, r7
 801a8ee:	f7e5 fccb 	bl	8000288 <__aeabi_dsub>
 801a8f2:	4602      	mov	r2, r0
 801a8f4:	460b      	mov	r3, r1
 801a8f6:	4650      	mov	r0, sl
 801a8f8:	4659      	mov	r1, fp
 801a8fa:	f7e5 fcc5 	bl	8000288 <__aeabi_dsub>
 801a8fe:	e6d6      	b.n	801a6ae <__ieee754_log+0x2e>
 801a900:	a321      	add	r3, pc, #132	; (adr r3, 801a988 <__ieee754_log+0x308>)
 801a902:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a906:	ec51 0b19 	vmov	r0, r1, d9
 801a90a:	f7e5 fe75 	bl	80005f8 <__aeabi_dmul>
 801a90e:	a320      	add	r3, pc, #128	; (adr r3, 801a990 <__ieee754_log+0x310>)
 801a910:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a914:	4604      	mov	r4, r0
 801a916:	460d      	mov	r5, r1
 801a918:	ec51 0b19 	vmov	r0, r1, d9
 801a91c:	f7e5 fe6c 	bl	80005f8 <__aeabi_dmul>
 801a920:	4642      	mov	r2, r8
 801a922:	464b      	mov	r3, r9
 801a924:	f7e5 fcb2 	bl	800028c <__adddf3>
 801a928:	4602      	mov	r2, r0
 801a92a:	460b      	mov	r3, r1
 801a92c:	4630      	mov	r0, r6
 801a92e:	4639      	mov	r1, r7
 801a930:	f7e5 fcaa 	bl	8000288 <__aeabi_dsub>
 801a934:	4652      	mov	r2, sl
 801a936:	465b      	mov	r3, fp
 801a938:	f7e5 fca6 	bl	8000288 <__aeabi_dsub>
 801a93c:	4602      	mov	r2, r0
 801a93e:	460b      	mov	r3, r1
 801a940:	4620      	mov	r0, r4
 801a942:	4629      	mov	r1, r5
 801a944:	e7d9      	b.n	801a8fa <__ieee754_log+0x27a>
 801a946:	4602      	mov	r2, r0
 801a948:	460b      	mov	r3, r1
 801a94a:	4650      	mov	r0, sl
 801a94c:	4659      	mov	r1, fp
 801a94e:	f7e5 fc9b 	bl	8000288 <__aeabi_dsub>
 801a952:	ec53 2b18 	vmov	r2, r3, d8
 801a956:	f7e5 fe4f 	bl	80005f8 <__aeabi_dmul>
 801a95a:	4606      	mov	r6, r0
 801a95c:	460f      	mov	r7, r1
 801a95e:	2c00      	cmp	r4, #0
 801a960:	f43f af23 	beq.w	801a7aa <__ieee754_log+0x12a>
 801a964:	a308      	add	r3, pc, #32	; (adr r3, 801a988 <__ieee754_log+0x308>)
 801a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a96a:	ec51 0b19 	vmov	r0, r1, d9
 801a96e:	f7e5 fe43 	bl	80005f8 <__aeabi_dmul>
 801a972:	a307      	add	r3, pc, #28	; (adr r3, 801a990 <__ieee754_log+0x310>)
 801a974:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a978:	4604      	mov	r4, r0
 801a97a:	460d      	mov	r5, r1
 801a97c:	ec51 0b19 	vmov	r0, r1, d9
 801a980:	e727      	b.n	801a7d2 <__ieee754_log+0x152>
 801a982:	ed9f 0b15 	vldr	d0, [pc, #84]	; 801a9d8 <__ieee754_log+0x358>
 801a986:	e694      	b.n	801a6b2 <__ieee754_log+0x32>
 801a988:	fee00000 	.word	0xfee00000
 801a98c:	3fe62e42 	.word	0x3fe62e42
 801a990:	35793c76 	.word	0x35793c76
 801a994:	3dea39ef 	.word	0x3dea39ef
 801a998:	55555555 	.word	0x55555555
 801a99c:	3fd55555 	.word	0x3fd55555
 801a9a0:	df3e5244 	.word	0xdf3e5244
 801a9a4:	3fc2f112 	.word	0x3fc2f112
 801a9a8:	96cb03de 	.word	0x96cb03de
 801a9ac:	3fc74664 	.word	0x3fc74664
 801a9b0:	94229359 	.word	0x94229359
 801a9b4:	3fd24924 	.word	0x3fd24924
 801a9b8:	55555593 	.word	0x55555593
 801a9bc:	3fe55555 	.word	0x3fe55555
 801a9c0:	d078c69f 	.word	0xd078c69f
 801a9c4:	3fc39a09 	.word	0x3fc39a09
 801a9c8:	1d8e78af 	.word	0x1d8e78af
 801a9cc:	3fcc71c5 	.word	0x3fcc71c5
 801a9d0:	9997fa04 	.word	0x9997fa04
 801a9d4:	3fd99999 	.word	0x3fd99999
	...
 801a9e0:	c3500000 	.word	0xc3500000
 801a9e4:	43500000 	.word	0x43500000
 801a9e8:	7fefffff 	.word	0x7fefffff
 801a9ec:	3ff00000 	.word	0x3ff00000
 801a9f0:	3fe00000 	.word	0x3fe00000
 801a9f4:	00000000 	.word	0x00000000

0801a9f8 <nan>:
 801a9f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801aa00 <nan+0x8>
 801a9fc:	4770      	bx	lr
 801a9fe:	bf00      	nop
 801aa00:	00000000 	.word	0x00000000
 801aa04:	7ff80000 	.word	0x7ff80000

0801aa08 <abort>:
 801aa08:	b508      	push	{r3, lr}
 801aa0a:	2006      	movs	r0, #6
 801aa0c:	f000 ff40 	bl	801b890 <raise>
 801aa10:	2001      	movs	r0, #1
 801aa12:	f7f3 fee3 	bl	800e7dc <_exit>

0801aa16 <atexit>:
 801aa16:	2300      	movs	r3, #0
 801aa18:	4601      	mov	r1, r0
 801aa1a:	461a      	mov	r2, r3
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	f000 bfa9 	b.w	801b974 <__register_exitproc>
	...

0801aa24 <__errno>:
 801aa24:	4b01      	ldr	r3, [pc, #4]	; (801aa2c <__errno+0x8>)
 801aa26:	6818      	ldr	r0, [r3, #0]
 801aa28:	4770      	bx	lr
 801aa2a:	bf00      	nop
 801aa2c:	2000003c 	.word	0x2000003c

0801aa30 <std>:
 801aa30:	2300      	movs	r3, #0
 801aa32:	b510      	push	{r4, lr}
 801aa34:	4604      	mov	r4, r0
 801aa36:	e9c0 3300 	strd	r3, r3, [r0]
 801aa3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aa3e:	6083      	str	r3, [r0, #8]
 801aa40:	8181      	strh	r1, [r0, #12]
 801aa42:	6643      	str	r3, [r0, #100]	; 0x64
 801aa44:	81c2      	strh	r2, [r0, #14]
 801aa46:	6183      	str	r3, [r0, #24]
 801aa48:	4619      	mov	r1, r3
 801aa4a:	2208      	movs	r2, #8
 801aa4c:	305c      	adds	r0, #92	; 0x5c
 801aa4e:	f000 f92b 	bl	801aca8 <memset>
 801aa52:	4b05      	ldr	r3, [pc, #20]	; (801aa68 <std+0x38>)
 801aa54:	6263      	str	r3, [r4, #36]	; 0x24
 801aa56:	4b05      	ldr	r3, [pc, #20]	; (801aa6c <std+0x3c>)
 801aa58:	62a3      	str	r3, [r4, #40]	; 0x28
 801aa5a:	4b05      	ldr	r3, [pc, #20]	; (801aa70 <std+0x40>)
 801aa5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aa5e:	4b05      	ldr	r3, [pc, #20]	; (801aa74 <std+0x44>)
 801aa60:	6224      	str	r4, [r4, #32]
 801aa62:	6323      	str	r3, [r4, #48]	; 0x30
 801aa64:	bd10      	pop	{r4, pc}
 801aa66:	bf00      	nop
 801aa68:	0801b8c9 	.word	0x0801b8c9
 801aa6c:	0801b8eb 	.word	0x0801b8eb
 801aa70:	0801b923 	.word	0x0801b923
 801aa74:	0801b947 	.word	0x0801b947

0801aa78 <_cleanup_r>:
 801aa78:	4901      	ldr	r1, [pc, #4]	; (801aa80 <_cleanup_r+0x8>)
 801aa7a:	f000 b8af 	b.w	801abdc <_fwalk_reent>
 801aa7e:	bf00      	nop
 801aa80:	0801c859 	.word	0x0801c859

0801aa84 <__sfmoreglue>:
 801aa84:	b570      	push	{r4, r5, r6, lr}
 801aa86:	2268      	movs	r2, #104	; 0x68
 801aa88:	1e4d      	subs	r5, r1, #1
 801aa8a:	4355      	muls	r5, r2
 801aa8c:	460e      	mov	r6, r1
 801aa8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aa92:	f000 f97d 	bl	801ad90 <_malloc_r>
 801aa96:	4604      	mov	r4, r0
 801aa98:	b140      	cbz	r0, 801aaac <__sfmoreglue+0x28>
 801aa9a:	2100      	movs	r1, #0
 801aa9c:	e9c0 1600 	strd	r1, r6, [r0]
 801aaa0:	300c      	adds	r0, #12
 801aaa2:	60a0      	str	r0, [r4, #8]
 801aaa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aaa8:	f000 f8fe 	bl	801aca8 <memset>
 801aaac:	4620      	mov	r0, r4
 801aaae:	bd70      	pop	{r4, r5, r6, pc}

0801aab0 <__sfp_lock_acquire>:
 801aab0:	4801      	ldr	r0, [pc, #4]	; (801aab8 <__sfp_lock_acquire+0x8>)
 801aab2:	f000 b8d8 	b.w	801ac66 <__retarget_lock_acquire_recursive>
 801aab6:	bf00      	nop
 801aab8:	2000a49e 	.word	0x2000a49e

0801aabc <__sfp_lock_release>:
 801aabc:	4801      	ldr	r0, [pc, #4]	; (801aac4 <__sfp_lock_release+0x8>)
 801aabe:	f000 b8d4 	b.w	801ac6a <__retarget_lock_release_recursive>
 801aac2:	bf00      	nop
 801aac4:	2000a49e 	.word	0x2000a49e

0801aac8 <__sinit_lock_acquire>:
 801aac8:	4801      	ldr	r0, [pc, #4]	; (801aad0 <__sinit_lock_acquire+0x8>)
 801aaca:	f000 b8cc 	b.w	801ac66 <__retarget_lock_acquire_recursive>
 801aace:	bf00      	nop
 801aad0:	2000a49f 	.word	0x2000a49f

0801aad4 <__sinit_lock_release>:
 801aad4:	4801      	ldr	r0, [pc, #4]	; (801aadc <__sinit_lock_release+0x8>)
 801aad6:	f000 b8c8 	b.w	801ac6a <__retarget_lock_release_recursive>
 801aada:	bf00      	nop
 801aadc:	2000a49f 	.word	0x2000a49f

0801aae0 <__sinit>:
 801aae0:	b510      	push	{r4, lr}
 801aae2:	4604      	mov	r4, r0
 801aae4:	f7ff fff0 	bl	801aac8 <__sinit_lock_acquire>
 801aae8:	69a3      	ldr	r3, [r4, #24]
 801aaea:	b11b      	cbz	r3, 801aaf4 <__sinit+0x14>
 801aaec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aaf0:	f7ff bff0 	b.w	801aad4 <__sinit_lock_release>
 801aaf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801aaf8:	6523      	str	r3, [r4, #80]	; 0x50
 801aafa:	4b13      	ldr	r3, [pc, #76]	; (801ab48 <__sinit+0x68>)
 801aafc:	4a13      	ldr	r2, [pc, #76]	; (801ab4c <__sinit+0x6c>)
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	62a2      	str	r2, [r4, #40]	; 0x28
 801ab02:	42a3      	cmp	r3, r4
 801ab04:	bf04      	itt	eq
 801ab06:	2301      	moveq	r3, #1
 801ab08:	61a3      	streq	r3, [r4, #24]
 801ab0a:	4620      	mov	r0, r4
 801ab0c:	f000 f820 	bl	801ab50 <__sfp>
 801ab10:	6060      	str	r0, [r4, #4]
 801ab12:	4620      	mov	r0, r4
 801ab14:	f000 f81c 	bl	801ab50 <__sfp>
 801ab18:	60a0      	str	r0, [r4, #8]
 801ab1a:	4620      	mov	r0, r4
 801ab1c:	f000 f818 	bl	801ab50 <__sfp>
 801ab20:	2200      	movs	r2, #0
 801ab22:	60e0      	str	r0, [r4, #12]
 801ab24:	2104      	movs	r1, #4
 801ab26:	6860      	ldr	r0, [r4, #4]
 801ab28:	f7ff ff82 	bl	801aa30 <std>
 801ab2c:	68a0      	ldr	r0, [r4, #8]
 801ab2e:	2201      	movs	r2, #1
 801ab30:	2109      	movs	r1, #9
 801ab32:	f7ff ff7d 	bl	801aa30 <std>
 801ab36:	68e0      	ldr	r0, [r4, #12]
 801ab38:	2202      	movs	r2, #2
 801ab3a:	2112      	movs	r1, #18
 801ab3c:	f7ff ff78 	bl	801aa30 <std>
 801ab40:	2301      	movs	r3, #1
 801ab42:	61a3      	str	r3, [r4, #24]
 801ab44:	e7d2      	b.n	801aaec <__sinit+0xc>
 801ab46:	bf00      	nop
 801ab48:	0801dd70 	.word	0x0801dd70
 801ab4c:	0801aa79 	.word	0x0801aa79

0801ab50 <__sfp>:
 801ab50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab52:	4607      	mov	r7, r0
 801ab54:	f7ff ffac 	bl	801aab0 <__sfp_lock_acquire>
 801ab58:	4b1e      	ldr	r3, [pc, #120]	; (801abd4 <__sfp+0x84>)
 801ab5a:	681e      	ldr	r6, [r3, #0]
 801ab5c:	69b3      	ldr	r3, [r6, #24]
 801ab5e:	b913      	cbnz	r3, 801ab66 <__sfp+0x16>
 801ab60:	4630      	mov	r0, r6
 801ab62:	f7ff ffbd 	bl	801aae0 <__sinit>
 801ab66:	3648      	adds	r6, #72	; 0x48
 801ab68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ab6c:	3b01      	subs	r3, #1
 801ab6e:	d503      	bpl.n	801ab78 <__sfp+0x28>
 801ab70:	6833      	ldr	r3, [r6, #0]
 801ab72:	b30b      	cbz	r3, 801abb8 <__sfp+0x68>
 801ab74:	6836      	ldr	r6, [r6, #0]
 801ab76:	e7f7      	b.n	801ab68 <__sfp+0x18>
 801ab78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ab7c:	b9d5      	cbnz	r5, 801abb4 <__sfp+0x64>
 801ab7e:	4b16      	ldr	r3, [pc, #88]	; (801abd8 <__sfp+0x88>)
 801ab80:	60e3      	str	r3, [r4, #12]
 801ab82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ab86:	6665      	str	r5, [r4, #100]	; 0x64
 801ab88:	f000 f86c 	bl	801ac64 <__retarget_lock_init_recursive>
 801ab8c:	f7ff ff96 	bl	801aabc <__sfp_lock_release>
 801ab90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801ab94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801ab98:	6025      	str	r5, [r4, #0]
 801ab9a:	61a5      	str	r5, [r4, #24]
 801ab9c:	2208      	movs	r2, #8
 801ab9e:	4629      	mov	r1, r5
 801aba0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801aba4:	f000 f880 	bl	801aca8 <memset>
 801aba8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801abac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801abb0:	4620      	mov	r0, r4
 801abb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abb4:	3468      	adds	r4, #104	; 0x68
 801abb6:	e7d9      	b.n	801ab6c <__sfp+0x1c>
 801abb8:	2104      	movs	r1, #4
 801abba:	4638      	mov	r0, r7
 801abbc:	f7ff ff62 	bl	801aa84 <__sfmoreglue>
 801abc0:	4604      	mov	r4, r0
 801abc2:	6030      	str	r0, [r6, #0]
 801abc4:	2800      	cmp	r0, #0
 801abc6:	d1d5      	bne.n	801ab74 <__sfp+0x24>
 801abc8:	f7ff ff78 	bl	801aabc <__sfp_lock_release>
 801abcc:	230c      	movs	r3, #12
 801abce:	603b      	str	r3, [r7, #0]
 801abd0:	e7ee      	b.n	801abb0 <__sfp+0x60>
 801abd2:	bf00      	nop
 801abd4:	0801dd70 	.word	0x0801dd70
 801abd8:	ffff0001 	.word	0xffff0001

0801abdc <_fwalk_reent>:
 801abdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abe0:	4606      	mov	r6, r0
 801abe2:	4688      	mov	r8, r1
 801abe4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801abe8:	2700      	movs	r7, #0
 801abea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801abee:	f1b9 0901 	subs.w	r9, r9, #1
 801abf2:	d505      	bpl.n	801ac00 <_fwalk_reent+0x24>
 801abf4:	6824      	ldr	r4, [r4, #0]
 801abf6:	2c00      	cmp	r4, #0
 801abf8:	d1f7      	bne.n	801abea <_fwalk_reent+0xe>
 801abfa:	4638      	mov	r0, r7
 801abfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac00:	89ab      	ldrh	r3, [r5, #12]
 801ac02:	2b01      	cmp	r3, #1
 801ac04:	d907      	bls.n	801ac16 <_fwalk_reent+0x3a>
 801ac06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ac0a:	3301      	adds	r3, #1
 801ac0c:	d003      	beq.n	801ac16 <_fwalk_reent+0x3a>
 801ac0e:	4629      	mov	r1, r5
 801ac10:	4630      	mov	r0, r6
 801ac12:	47c0      	blx	r8
 801ac14:	4307      	orrs	r7, r0
 801ac16:	3568      	adds	r5, #104	; 0x68
 801ac18:	e7e9      	b.n	801abee <_fwalk_reent+0x12>
	...

0801ac1c <__libc_init_array>:
 801ac1c:	b570      	push	{r4, r5, r6, lr}
 801ac1e:	4d0d      	ldr	r5, [pc, #52]	; (801ac54 <__libc_init_array+0x38>)
 801ac20:	4c0d      	ldr	r4, [pc, #52]	; (801ac58 <__libc_init_array+0x3c>)
 801ac22:	1b64      	subs	r4, r4, r5
 801ac24:	10a4      	asrs	r4, r4, #2
 801ac26:	2600      	movs	r6, #0
 801ac28:	42a6      	cmp	r6, r4
 801ac2a:	d109      	bne.n	801ac40 <__libc_init_array+0x24>
 801ac2c:	4d0b      	ldr	r5, [pc, #44]	; (801ac5c <__libc_init_array+0x40>)
 801ac2e:	4c0c      	ldr	r4, [pc, #48]	; (801ac60 <__libc_init_array+0x44>)
 801ac30:	f002 fd0e 	bl	801d650 <_init>
 801ac34:	1b64      	subs	r4, r4, r5
 801ac36:	10a4      	asrs	r4, r4, #2
 801ac38:	2600      	movs	r6, #0
 801ac3a:	42a6      	cmp	r6, r4
 801ac3c:	d105      	bne.n	801ac4a <__libc_init_array+0x2e>
 801ac3e:	bd70      	pop	{r4, r5, r6, pc}
 801ac40:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac44:	4798      	blx	r3
 801ac46:	3601      	adds	r6, #1
 801ac48:	e7ee      	b.n	801ac28 <__libc_init_array+0xc>
 801ac4a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac4e:	4798      	blx	r3
 801ac50:	3601      	adds	r6, #1
 801ac52:	e7f2      	b.n	801ac3a <__libc_init_array+0x1e>
 801ac54:	0801e0f4 	.word	0x0801e0f4
 801ac58:	0801e0f4 	.word	0x0801e0f4
 801ac5c:	0801e0f4 	.word	0x0801e0f4
 801ac60:	0801e11c 	.word	0x0801e11c

0801ac64 <__retarget_lock_init_recursive>:
 801ac64:	4770      	bx	lr

0801ac66 <__retarget_lock_acquire_recursive>:
 801ac66:	4770      	bx	lr

0801ac68 <__retarget_lock_release>:
 801ac68:	4770      	bx	lr

0801ac6a <__retarget_lock_release_recursive>:
 801ac6a:	4770      	bx	lr

0801ac6c <malloc>:
 801ac6c:	4b02      	ldr	r3, [pc, #8]	; (801ac78 <malloc+0xc>)
 801ac6e:	4601      	mov	r1, r0
 801ac70:	6818      	ldr	r0, [r3, #0]
 801ac72:	f000 b88d 	b.w	801ad90 <_malloc_r>
 801ac76:	bf00      	nop
 801ac78:	2000003c 	.word	0x2000003c

0801ac7c <free>:
 801ac7c:	4b02      	ldr	r3, [pc, #8]	; (801ac88 <free+0xc>)
 801ac7e:	4601      	mov	r1, r0
 801ac80:	6818      	ldr	r0, [r3, #0]
 801ac82:	f000 b819 	b.w	801acb8 <_free_r>
 801ac86:	bf00      	nop
 801ac88:	2000003c 	.word	0x2000003c

0801ac8c <memcpy>:
 801ac8c:	440a      	add	r2, r1
 801ac8e:	4291      	cmp	r1, r2
 801ac90:	f100 33ff 	add.w	r3, r0, #4294967295
 801ac94:	d100      	bne.n	801ac98 <memcpy+0xc>
 801ac96:	4770      	bx	lr
 801ac98:	b510      	push	{r4, lr}
 801ac9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801aca2:	4291      	cmp	r1, r2
 801aca4:	d1f9      	bne.n	801ac9a <memcpy+0xe>
 801aca6:	bd10      	pop	{r4, pc}

0801aca8 <memset>:
 801aca8:	4402      	add	r2, r0
 801acaa:	4603      	mov	r3, r0
 801acac:	4293      	cmp	r3, r2
 801acae:	d100      	bne.n	801acb2 <memset+0xa>
 801acb0:	4770      	bx	lr
 801acb2:	f803 1b01 	strb.w	r1, [r3], #1
 801acb6:	e7f9      	b.n	801acac <memset+0x4>

0801acb8 <_free_r>:
 801acb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801acba:	2900      	cmp	r1, #0
 801acbc:	d044      	beq.n	801ad48 <_free_r+0x90>
 801acbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801acc2:	9001      	str	r0, [sp, #4]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	f1a1 0404 	sub.w	r4, r1, #4
 801acca:	bfb8      	it	lt
 801accc:	18e4      	addlt	r4, r4, r3
 801acce:	f001 fe15 	bl	801c8fc <__malloc_lock>
 801acd2:	4a1e      	ldr	r2, [pc, #120]	; (801ad4c <_free_r+0x94>)
 801acd4:	9801      	ldr	r0, [sp, #4]
 801acd6:	6813      	ldr	r3, [r2, #0]
 801acd8:	b933      	cbnz	r3, 801ace8 <_free_r+0x30>
 801acda:	6063      	str	r3, [r4, #4]
 801acdc:	6014      	str	r4, [r2, #0]
 801acde:	b003      	add	sp, #12
 801ace0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ace4:	f001 be10 	b.w	801c908 <__malloc_unlock>
 801ace8:	42a3      	cmp	r3, r4
 801acea:	d908      	bls.n	801acfe <_free_r+0x46>
 801acec:	6825      	ldr	r5, [r4, #0]
 801acee:	1961      	adds	r1, r4, r5
 801acf0:	428b      	cmp	r3, r1
 801acf2:	bf01      	itttt	eq
 801acf4:	6819      	ldreq	r1, [r3, #0]
 801acf6:	685b      	ldreq	r3, [r3, #4]
 801acf8:	1949      	addeq	r1, r1, r5
 801acfa:	6021      	streq	r1, [r4, #0]
 801acfc:	e7ed      	b.n	801acda <_free_r+0x22>
 801acfe:	461a      	mov	r2, r3
 801ad00:	685b      	ldr	r3, [r3, #4]
 801ad02:	b10b      	cbz	r3, 801ad08 <_free_r+0x50>
 801ad04:	42a3      	cmp	r3, r4
 801ad06:	d9fa      	bls.n	801acfe <_free_r+0x46>
 801ad08:	6811      	ldr	r1, [r2, #0]
 801ad0a:	1855      	adds	r5, r2, r1
 801ad0c:	42a5      	cmp	r5, r4
 801ad0e:	d10b      	bne.n	801ad28 <_free_r+0x70>
 801ad10:	6824      	ldr	r4, [r4, #0]
 801ad12:	4421      	add	r1, r4
 801ad14:	1854      	adds	r4, r2, r1
 801ad16:	42a3      	cmp	r3, r4
 801ad18:	6011      	str	r1, [r2, #0]
 801ad1a:	d1e0      	bne.n	801acde <_free_r+0x26>
 801ad1c:	681c      	ldr	r4, [r3, #0]
 801ad1e:	685b      	ldr	r3, [r3, #4]
 801ad20:	6053      	str	r3, [r2, #4]
 801ad22:	4421      	add	r1, r4
 801ad24:	6011      	str	r1, [r2, #0]
 801ad26:	e7da      	b.n	801acde <_free_r+0x26>
 801ad28:	d902      	bls.n	801ad30 <_free_r+0x78>
 801ad2a:	230c      	movs	r3, #12
 801ad2c:	6003      	str	r3, [r0, #0]
 801ad2e:	e7d6      	b.n	801acde <_free_r+0x26>
 801ad30:	6825      	ldr	r5, [r4, #0]
 801ad32:	1961      	adds	r1, r4, r5
 801ad34:	428b      	cmp	r3, r1
 801ad36:	bf04      	itt	eq
 801ad38:	6819      	ldreq	r1, [r3, #0]
 801ad3a:	685b      	ldreq	r3, [r3, #4]
 801ad3c:	6063      	str	r3, [r4, #4]
 801ad3e:	bf04      	itt	eq
 801ad40:	1949      	addeq	r1, r1, r5
 801ad42:	6021      	streq	r1, [r4, #0]
 801ad44:	6054      	str	r4, [r2, #4]
 801ad46:	e7ca      	b.n	801acde <_free_r+0x26>
 801ad48:	b003      	add	sp, #12
 801ad4a:	bd30      	pop	{r4, r5, pc}
 801ad4c:	2000a4a0 	.word	0x2000a4a0

0801ad50 <sbrk_aligned>:
 801ad50:	b570      	push	{r4, r5, r6, lr}
 801ad52:	4e0e      	ldr	r6, [pc, #56]	; (801ad8c <sbrk_aligned+0x3c>)
 801ad54:	460c      	mov	r4, r1
 801ad56:	6831      	ldr	r1, [r6, #0]
 801ad58:	4605      	mov	r5, r0
 801ad5a:	b911      	cbnz	r1, 801ad62 <sbrk_aligned+0x12>
 801ad5c:	f000 fd60 	bl	801b820 <_sbrk_r>
 801ad60:	6030      	str	r0, [r6, #0]
 801ad62:	4621      	mov	r1, r4
 801ad64:	4628      	mov	r0, r5
 801ad66:	f000 fd5b 	bl	801b820 <_sbrk_r>
 801ad6a:	1c43      	adds	r3, r0, #1
 801ad6c:	d00a      	beq.n	801ad84 <sbrk_aligned+0x34>
 801ad6e:	1cc4      	adds	r4, r0, #3
 801ad70:	f024 0403 	bic.w	r4, r4, #3
 801ad74:	42a0      	cmp	r0, r4
 801ad76:	d007      	beq.n	801ad88 <sbrk_aligned+0x38>
 801ad78:	1a21      	subs	r1, r4, r0
 801ad7a:	4628      	mov	r0, r5
 801ad7c:	f000 fd50 	bl	801b820 <_sbrk_r>
 801ad80:	3001      	adds	r0, #1
 801ad82:	d101      	bne.n	801ad88 <sbrk_aligned+0x38>
 801ad84:	f04f 34ff 	mov.w	r4, #4294967295
 801ad88:	4620      	mov	r0, r4
 801ad8a:	bd70      	pop	{r4, r5, r6, pc}
 801ad8c:	2000a4a4 	.word	0x2000a4a4

0801ad90 <_malloc_r>:
 801ad90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad94:	1ccd      	adds	r5, r1, #3
 801ad96:	f025 0503 	bic.w	r5, r5, #3
 801ad9a:	3508      	adds	r5, #8
 801ad9c:	2d0c      	cmp	r5, #12
 801ad9e:	bf38      	it	cc
 801ada0:	250c      	movcc	r5, #12
 801ada2:	2d00      	cmp	r5, #0
 801ada4:	4607      	mov	r7, r0
 801ada6:	db01      	blt.n	801adac <_malloc_r+0x1c>
 801ada8:	42a9      	cmp	r1, r5
 801adaa:	d905      	bls.n	801adb8 <_malloc_r+0x28>
 801adac:	230c      	movs	r3, #12
 801adae:	603b      	str	r3, [r7, #0]
 801adb0:	2600      	movs	r6, #0
 801adb2:	4630      	mov	r0, r6
 801adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801adb8:	4e2e      	ldr	r6, [pc, #184]	; (801ae74 <_malloc_r+0xe4>)
 801adba:	f001 fd9f 	bl	801c8fc <__malloc_lock>
 801adbe:	6833      	ldr	r3, [r6, #0]
 801adc0:	461c      	mov	r4, r3
 801adc2:	bb34      	cbnz	r4, 801ae12 <_malloc_r+0x82>
 801adc4:	4629      	mov	r1, r5
 801adc6:	4638      	mov	r0, r7
 801adc8:	f7ff ffc2 	bl	801ad50 <sbrk_aligned>
 801adcc:	1c43      	adds	r3, r0, #1
 801adce:	4604      	mov	r4, r0
 801add0:	d14d      	bne.n	801ae6e <_malloc_r+0xde>
 801add2:	6834      	ldr	r4, [r6, #0]
 801add4:	4626      	mov	r6, r4
 801add6:	2e00      	cmp	r6, #0
 801add8:	d140      	bne.n	801ae5c <_malloc_r+0xcc>
 801adda:	6823      	ldr	r3, [r4, #0]
 801addc:	4631      	mov	r1, r6
 801adde:	4638      	mov	r0, r7
 801ade0:	eb04 0803 	add.w	r8, r4, r3
 801ade4:	f000 fd1c 	bl	801b820 <_sbrk_r>
 801ade8:	4580      	cmp	r8, r0
 801adea:	d13a      	bne.n	801ae62 <_malloc_r+0xd2>
 801adec:	6821      	ldr	r1, [r4, #0]
 801adee:	3503      	adds	r5, #3
 801adf0:	1a6d      	subs	r5, r5, r1
 801adf2:	f025 0503 	bic.w	r5, r5, #3
 801adf6:	3508      	adds	r5, #8
 801adf8:	2d0c      	cmp	r5, #12
 801adfa:	bf38      	it	cc
 801adfc:	250c      	movcc	r5, #12
 801adfe:	4629      	mov	r1, r5
 801ae00:	4638      	mov	r0, r7
 801ae02:	f7ff ffa5 	bl	801ad50 <sbrk_aligned>
 801ae06:	3001      	adds	r0, #1
 801ae08:	d02b      	beq.n	801ae62 <_malloc_r+0xd2>
 801ae0a:	6823      	ldr	r3, [r4, #0]
 801ae0c:	442b      	add	r3, r5
 801ae0e:	6023      	str	r3, [r4, #0]
 801ae10:	e00e      	b.n	801ae30 <_malloc_r+0xa0>
 801ae12:	6822      	ldr	r2, [r4, #0]
 801ae14:	1b52      	subs	r2, r2, r5
 801ae16:	d41e      	bmi.n	801ae56 <_malloc_r+0xc6>
 801ae18:	2a0b      	cmp	r2, #11
 801ae1a:	d916      	bls.n	801ae4a <_malloc_r+0xba>
 801ae1c:	1961      	adds	r1, r4, r5
 801ae1e:	42a3      	cmp	r3, r4
 801ae20:	6025      	str	r5, [r4, #0]
 801ae22:	bf18      	it	ne
 801ae24:	6059      	strne	r1, [r3, #4]
 801ae26:	6863      	ldr	r3, [r4, #4]
 801ae28:	bf08      	it	eq
 801ae2a:	6031      	streq	r1, [r6, #0]
 801ae2c:	5162      	str	r2, [r4, r5]
 801ae2e:	604b      	str	r3, [r1, #4]
 801ae30:	4638      	mov	r0, r7
 801ae32:	f104 060b 	add.w	r6, r4, #11
 801ae36:	f001 fd67 	bl	801c908 <__malloc_unlock>
 801ae3a:	f026 0607 	bic.w	r6, r6, #7
 801ae3e:	1d23      	adds	r3, r4, #4
 801ae40:	1af2      	subs	r2, r6, r3
 801ae42:	d0b6      	beq.n	801adb2 <_malloc_r+0x22>
 801ae44:	1b9b      	subs	r3, r3, r6
 801ae46:	50a3      	str	r3, [r4, r2]
 801ae48:	e7b3      	b.n	801adb2 <_malloc_r+0x22>
 801ae4a:	6862      	ldr	r2, [r4, #4]
 801ae4c:	42a3      	cmp	r3, r4
 801ae4e:	bf0c      	ite	eq
 801ae50:	6032      	streq	r2, [r6, #0]
 801ae52:	605a      	strne	r2, [r3, #4]
 801ae54:	e7ec      	b.n	801ae30 <_malloc_r+0xa0>
 801ae56:	4623      	mov	r3, r4
 801ae58:	6864      	ldr	r4, [r4, #4]
 801ae5a:	e7b2      	b.n	801adc2 <_malloc_r+0x32>
 801ae5c:	4634      	mov	r4, r6
 801ae5e:	6876      	ldr	r6, [r6, #4]
 801ae60:	e7b9      	b.n	801add6 <_malloc_r+0x46>
 801ae62:	230c      	movs	r3, #12
 801ae64:	603b      	str	r3, [r7, #0]
 801ae66:	4638      	mov	r0, r7
 801ae68:	f001 fd4e 	bl	801c908 <__malloc_unlock>
 801ae6c:	e7a1      	b.n	801adb2 <_malloc_r+0x22>
 801ae6e:	6025      	str	r5, [r4, #0]
 801ae70:	e7de      	b.n	801ae30 <_malloc_r+0xa0>
 801ae72:	bf00      	nop
 801ae74:	2000a4a0 	.word	0x2000a4a0

0801ae78 <__cvt>:
 801ae78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae7c:	ec55 4b10 	vmov	r4, r5, d0
 801ae80:	2d00      	cmp	r5, #0
 801ae82:	460e      	mov	r6, r1
 801ae84:	4619      	mov	r1, r3
 801ae86:	462b      	mov	r3, r5
 801ae88:	bfbb      	ittet	lt
 801ae8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801ae8e:	461d      	movlt	r5, r3
 801ae90:	2300      	movge	r3, #0
 801ae92:	232d      	movlt	r3, #45	; 0x2d
 801ae94:	700b      	strb	r3, [r1, #0]
 801ae96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ae98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801ae9c:	4691      	mov	r9, r2
 801ae9e:	f023 0820 	bic.w	r8, r3, #32
 801aea2:	bfbc      	itt	lt
 801aea4:	4622      	movlt	r2, r4
 801aea6:	4614      	movlt	r4, r2
 801aea8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801aeac:	d005      	beq.n	801aeba <__cvt+0x42>
 801aeae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801aeb2:	d100      	bne.n	801aeb6 <__cvt+0x3e>
 801aeb4:	3601      	adds	r6, #1
 801aeb6:	2102      	movs	r1, #2
 801aeb8:	e000      	b.n	801aebc <__cvt+0x44>
 801aeba:	2103      	movs	r1, #3
 801aebc:	ab03      	add	r3, sp, #12
 801aebe:	9301      	str	r3, [sp, #4]
 801aec0:	ab02      	add	r3, sp, #8
 801aec2:	9300      	str	r3, [sp, #0]
 801aec4:	ec45 4b10 	vmov	d0, r4, r5
 801aec8:	4653      	mov	r3, sl
 801aeca:	4632      	mov	r2, r6
 801aecc:	f000 fe50 	bl	801bb70 <_dtoa_r>
 801aed0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801aed4:	4607      	mov	r7, r0
 801aed6:	d102      	bne.n	801aede <__cvt+0x66>
 801aed8:	f019 0f01 	tst.w	r9, #1
 801aedc:	d022      	beq.n	801af24 <__cvt+0xac>
 801aede:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801aee2:	eb07 0906 	add.w	r9, r7, r6
 801aee6:	d110      	bne.n	801af0a <__cvt+0x92>
 801aee8:	783b      	ldrb	r3, [r7, #0]
 801aeea:	2b30      	cmp	r3, #48	; 0x30
 801aeec:	d10a      	bne.n	801af04 <__cvt+0x8c>
 801aeee:	2200      	movs	r2, #0
 801aef0:	2300      	movs	r3, #0
 801aef2:	4620      	mov	r0, r4
 801aef4:	4629      	mov	r1, r5
 801aef6:	f7e5 fde7 	bl	8000ac8 <__aeabi_dcmpeq>
 801aefa:	b918      	cbnz	r0, 801af04 <__cvt+0x8c>
 801aefc:	f1c6 0601 	rsb	r6, r6, #1
 801af00:	f8ca 6000 	str.w	r6, [sl]
 801af04:	f8da 3000 	ldr.w	r3, [sl]
 801af08:	4499      	add	r9, r3
 801af0a:	2200      	movs	r2, #0
 801af0c:	2300      	movs	r3, #0
 801af0e:	4620      	mov	r0, r4
 801af10:	4629      	mov	r1, r5
 801af12:	f7e5 fdd9 	bl	8000ac8 <__aeabi_dcmpeq>
 801af16:	b108      	cbz	r0, 801af1c <__cvt+0xa4>
 801af18:	f8cd 900c 	str.w	r9, [sp, #12]
 801af1c:	2230      	movs	r2, #48	; 0x30
 801af1e:	9b03      	ldr	r3, [sp, #12]
 801af20:	454b      	cmp	r3, r9
 801af22:	d307      	bcc.n	801af34 <__cvt+0xbc>
 801af24:	9b03      	ldr	r3, [sp, #12]
 801af26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801af28:	1bdb      	subs	r3, r3, r7
 801af2a:	4638      	mov	r0, r7
 801af2c:	6013      	str	r3, [r2, #0]
 801af2e:	b004      	add	sp, #16
 801af30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af34:	1c59      	adds	r1, r3, #1
 801af36:	9103      	str	r1, [sp, #12]
 801af38:	701a      	strb	r2, [r3, #0]
 801af3a:	e7f0      	b.n	801af1e <__cvt+0xa6>

0801af3c <__exponent>:
 801af3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801af3e:	4603      	mov	r3, r0
 801af40:	2900      	cmp	r1, #0
 801af42:	bfb8      	it	lt
 801af44:	4249      	neglt	r1, r1
 801af46:	f803 2b02 	strb.w	r2, [r3], #2
 801af4a:	bfb4      	ite	lt
 801af4c:	222d      	movlt	r2, #45	; 0x2d
 801af4e:	222b      	movge	r2, #43	; 0x2b
 801af50:	2909      	cmp	r1, #9
 801af52:	7042      	strb	r2, [r0, #1]
 801af54:	dd2a      	ble.n	801afac <__exponent+0x70>
 801af56:	f10d 0407 	add.w	r4, sp, #7
 801af5a:	46a4      	mov	ip, r4
 801af5c:	270a      	movs	r7, #10
 801af5e:	46a6      	mov	lr, r4
 801af60:	460a      	mov	r2, r1
 801af62:	fb91 f6f7 	sdiv	r6, r1, r7
 801af66:	fb07 1516 	mls	r5, r7, r6, r1
 801af6a:	3530      	adds	r5, #48	; 0x30
 801af6c:	2a63      	cmp	r2, #99	; 0x63
 801af6e:	f104 34ff 	add.w	r4, r4, #4294967295
 801af72:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801af76:	4631      	mov	r1, r6
 801af78:	dcf1      	bgt.n	801af5e <__exponent+0x22>
 801af7a:	3130      	adds	r1, #48	; 0x30
 801af7c:	f1ae 0502 	sub.w	r5, lr, #2
 801af80:	f804 1c01 	strb.w	r1, [r4, #-1]
 801af84:	1c44      	adds	r4, r0, #1
 801af86:	4629      	mov	r1, r5
 801af88:	4561      	cmp	r1, ip
 801af8a:	d30a      	bcc.n	801afa2 <__exponent+0x66>
 801af8c:	f10d 0209 	add.w	r2, sp, #9
 801af90:	eba2 020e 	sub.w	r2, r2, lr
 801af94:	4565      	cmp	r5, ip
 801af96:	bf88      	it	hi
 801af98:	2200      	movhi	r2, #0
 801af9a:	4413      	add	r3, r2
 801af9c:	1a18      	subs	r0, r3, r0
 801af9e:	b003      	add	sp, #12
 801afa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801afa2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801afa6:	f804 2f01 	strb.w	r2, [r4, #1]!
 801afaa:	e7ed      	b.n	801af88 <__exponent+0x4c>
 801afac:	2330      	movs	r3, #48	; 0x30
 801afae:	3130      	adds	r1, #48	; 0x30
 801afb0:	7083      	strb	r3, [r0, #2]
 801afb2:	70c1      	strb	r1, [r0, #3]
 801afb4:	1d03      	adds	r3, r0, #4
 801afb6:	e7f1      	b.n	801af9c <__exponent+0x60>

0801afb8 <_printf_float>:
 801afb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afbc:	ed2d 8b02 	vpush	{d8}
 801afc0:	b08d      	sub	sp, #52	; 0x34
 801afc2:	460c      	mov	r4, r1
 801afc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801afc8:	4616      	mov	r6, r2
 801afca:	461f      	mov	r7, r3
 801afcc:	4605      	mov	r5, r0
 801afce:	f001 fc7f 	bl	801c8d0 <_localeconv_r>
 801afd2:	f8d0 a000 	ldr.w	sl, [r0]
 801afd6:	4650      	mov	r0, sl
 801afd8:	f7e5 f8fa 	bl	80001d0 <strlen>
 801afdc:	2300      	movs	r3, #0
 801afde:	930a      	str	r3, [sp, #40]	; 0x28
 801afe0:	6823      	ldr	r3, [r4, #0]
 801afe2:	9305      	str	r3, [sp, #20]
 801afe4:	f8d8 3000 	ldr.w	r3, [r8]
 801afe8:	f894 b018 	ldrb.w	fp, [r4, #24]
 801afec:	3307      	adds	r3, #7
 801afee:	f023 0307 	bic.w	r3, r3, #7
 801aff2:	f103 0208 	add.w	r2, r3, #8
 801aff6:	f8c8 2000 	str.w	r2, [r8]
 801affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801affe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801b002:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801b006:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801b00a:	9307      	str	r3, [sp, #28]
 801b00c:	f8cd 8018 	str.w	r8, [sp, #24]
 801b010:	ee08 0a10 	vmov	s16, r0
 801b014:	4b9f      	ldr	r3, [pc, #636]	; (801b294 <_printf_float+0x2dc>)
 801b016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b01a:	f04f 32ff 	mov.w	r2, #4294967295
 801b01e:	f7e5 fd85 	bl	8000b2c <__aeabi_dcmpun>
 801b022:	bb88      	cbnz	r0, 801b088 <_printf_float+0xd0>
 801b024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b028:	4b9a      	ldr	r3, [pc, #616]	; (801b294 <_printf_float+0x2dc>)
 801b02a:	f04f 32ff 	mov.w	r2, #4294967295
 801b02e:	f7e5 fd5f 	bl	8000af0 <__aeabi_dcmple>
 801b032:	bb48      	cbnz	r0, 801b088 <_printf_float+0xd0>
 801b034:	2200      	movs	r2, #0
 801b036:	2300      	movs	r3, #0
 801b038:	4640      	mov	r0, r8
 801b03a:	4649      	mov	r1, r9
 801b03c:	f7e5 fd4e 	bl	8000adc <__aeabi_dcmplt>
 801b040:	b110      	cbz	r0, 801b048 <_printf_float+0x90>
 801b042:	232d      	movs	r3, #45	; 0x2d
 801b044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b048:	4b93      	ldr	r3, [pc, #588]	; (801b298 <_printf_float+0x2e0>)
 801b04a:	4894      	ldr	r0, [pc, #592]	; (801b29c <_printf_float+0x2e4>)
 801b04c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801b050:	bf94      	ite	ls
 801b052:	4698      	movls	r8, r3
 801b054:	4680      	movhi	r8, r0
 801b056:	2303      	movs	r3, #3
 801b058:	6123      	str	r3, [r4, #16]
 801b05a:	9b05      	ldr	r3, [sp, #20]
 801b05c:	f023 0204 	bic.w	r2, r3, #4
 801b060:	6022      	str	r2, [r4, #0]
 801b062:	f04f 0900 	mov.w	r9, #0
 801b066:	9700      	str	r7, [sp, #0]
 801b068:	4633      	mov	r3, r6
 801b06a:	aa0b      	add	r2, sp, #44	; 0x2c
 801b06c:	4621      	mov	r1, r4
 801b06e:	4628      	mov	r0, r5
 801b070:	f000 f9d8 	bl	801b424 <_printf_common>
 801b074:	3001      	adds	r0, #1
 801b076:	f040 8090 	bne.w	801b19a <_printf_float+0x1e2>
 801b07a:	f04f 30ff 	mov.w	r0, #4294967295
 801b07e:	b00d      	add	sp, #52	; 0x34
 801b080:	ecbd 8b02 	vpop	{d8}
 801b084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b088:	4642      	mov	r2, r8
 801b08a:	464b      	mov	r3, r9
 801b08c:	4640      	mov	r0, r8
 801b08e:	4649      	mov	r1, r9
 801b090:	f7e5 fd4c 	bl	8000b2c <__aeabi_dcmpun>
 801b094:	b140      	cbz	r0, 801b0a8 <_printf_float+0xf0>
 801b096:	464b      	mov	r3, r9
 801b098:	2b00      	cmp	r3, #0
 801b09a:	bfbc      	itt	lt
 801b09c:	232d      	movlt	r3, #45	; 0x2d
 801b09e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b0a2:	487f      	ldr	r0, [pc, #508]	; (801b2a0 <_printf_float+0x2e8>)
 801b0a4:	4b7f      	ldr	r3, [pc, #508]	; (801b2a4 <_printf_float+0x2ec>)
 801b0a6:	e7d1      	b.n	801b04c <_printf_float+0x94>
 801b0a8:	6863      	ldr	r3, [r4, #4]
 801b0aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801b0ae:	9206      	str	r2, [sp, #24]
 801b0b0:	1c5a      	adds	r2, r3, #1
 801b0b2:	d13f      	bne.n	801b134 <_printf_float+0x17c>
 801b0b4:	2306      	movs	r3, #6
 801b0b6:	6063      	str	r3, [r4, #4]
 801b0b8:	9b05      	ldr	r3, [sp, #20]
 801b0ba:	6861      	ldr	r1, [r4, #4]
 801b0bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801b0c0:	2300      	movs	r3, #0
 801b0c2:	9303      	str	r3, [sp, #12]
 801b0c4:	ab0a      	add	r3, sp, #40	; 0x28
 801b0c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 801b0ca:	ab09      	add	r3, sp, #36	; 0x24
 801b0cc:	ec49 8b10 	vmov	d0, r8, r9
 801b0d0:	9300      	str	r3, [sp, #0]
 801b0d2:	6022      	str	r2, [r4, #0]
 801b0d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801b0d8:	4628      	mov	r0, r5
 801b0da:	f7ff fecd 	bl	801ae78 <__cvt>
 801b0de:	9b06      	ldr	r3, [sp, #24]
 801b0e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b0e2:	2b47      	cmp	r3, #71	; 0x47
 801b0e4:	4680      	mov	r8, r0
 801b0e6:	d108      	bne.n	801b0fa <_printf_float+0x142>
 801b0e8:	1cc8      	adds	r0, r1, #3
 801b0ea:	db02      	blt.n	801b0f2 <_printf_float+0x13a>
 801b0ec:	6863      	ldr	r3, [r4, #4]
 801b0ee:	4299      	cmp	r1, r3
 801b0f0:	dd41      	ble.n	801b176 <_printf_float+0x1be>
 801b0f2:	f1ab 0b02 	sub.w	fp, fp, #2
 801b0f6:	fa5f fb8b 	uxtb.w	fp, fp
 801b0fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b0fe:	d820      	bhi.n	801b142 <_printf_float+0x18a>
 801b100:	3901      	subs	r1, #1
 801b102:	465a      	mov	r2, fp
 801b104:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b108:	9109      	str	r1, [sp, #36]	; 0x24
 801b10a:	f7ff ff17 	bl	801af3c <__exponent>
 801b10e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b110:	1813      	adds	r3, r2, r0
 801b112:	2a01      	cmp	r2, #1
 801b114:	4681      	mov	r9, r0
 801b116:	6123      	str	r3, [r4, #16]
 801b118:	dc02      	bgt.n	801b120 <_printf_float+0x168>
 801b11a:	6822      	ldr	r2, [r4, #0]
 801b11c:	07d2      	lsls	r2, r2, #31
 801b11e:	d501      	bpl.n	801b124 <_printf_float+0x16c>
 801b120:	3301      	adds	r3, #1
 801b122:	6123      	str	r3, [r4, #16]
 801b124:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801b128:	2b00      	cmp	r3, #0
 801b12a:	d09c      	beq.n	801b066 <_printf_float+0xae>
 801b12c:	232d      	movs	r3, #45	; 0x2d
 801b12e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b132:	e798      	b.n	801b066 <_printf_float+0xae>
 801b134:	9a06      	ldr	r2, [sp, #24]
 801b136:	2a47      	cmp	r2, #71	; 0x47
 801b138:	d1be      	bne.n	801b0b8 <_printf_float+0x100>
 801b13a:	2b00      	cmp	r3, #0
 801b13c:	d1bc      	bne.n	801b0b8 <_printf_float+0x100>
 801b13e:	2301      	movs	r3, #1
 801b140:	e7b9      	b.n	801b0b6 <_printf_float+0xfe>
 801b142:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801b146:	d118      	bne.n	801b17a <_printf_float+0x1c2>
 801b148:	2900      	cmp	r1, #0
 801b14a:	6863      	ldr	r3, [r4, #4]
 801b14c:	dd0b      	ble.n	801b166 <_printf_float+0x1ae>
 801b14e:	6121      	str	r1, [r4, #16]
 801b150:	b913      	cbnz	r3, 801b158 <_printf_float+0x1a0>
 801b152:	6822      	ldr	r2, [r4, #0]
 801b154:	07d0      	lsls	r0, r2, #31
 801b156:	d502      	bpl.n	801b15e <_printf_float+0x1a6>
 801b158:	3301      	adds	r3, #1
 801b15a:	440b      	add	r3, r1
 801b15c:	6123      	str	r3, [r4, #16]
 801b15e:	65a1      	str	r1, [r4, #88]	; 0x58
 801b160:	f04f 0900 	mov.w	r9, #0
 801b164:	e7de      	b.n	801b124 <_printf_float+0x16c>
 801b166:	b913      	cbnz	r3, 801b16e <_printf_float+0x1b6>
 801b168:	6822      	ldr	r2, [r4, #0]
 801b16a:	07d2      	lsls	r2, r2, #31
 801b16c:	d501      	bpl.n	801b172 <_printf_float+0x1ba>
 801b16e:	3302      	adds	r3, #2
 801b170:	e7f4      	b.n	801b15c <_printf_float+0x1a4>
 801b172:	2301      	movs	r3, #1
 801b174:	e7f2      	b.n	801b15c <_printf_float+0x1a4>
 801b176:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801b17a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b17c:	4299      	cmp	r1, r3
 801b17e:	db05      	blt.n	801b18c <_printf_float+0x1d4>
 801b180:	6823      	ldr	r3, [r4, #0]
 801b182:	6121      	str	r1, [r4, #16]
 801b184:	07d8      	lsls	r0, r3, #31
 801b186:	d5ea      	bpl.n	801b15e <_printf_float+0x1a6>
 801b188:	1c4b      	adds	r3, r1, #1
 801b18a:	e7e7      	b.n	801b15c <_printf_float+0x1a4>
 801b18c:	2900      	cmp	r1, #0
 801b18e:	bfd4      	ite	le
 801b190:	f1c1 0202 	rsble	r2, r1, #2
 801b194:	2201      	movgt	r2, #1
 801b196:	4413      	add	r3, r2
 801b198:	e7e0      	b.n	801b15c <_printf_float+0x1a4>
 801b19a:	6823      	ldr	r3, [r4, #0]
 801b19c:	055a      	lsls	r2, r3, #21
 801b19e:	d407      	bmi.n	801b1b0 <_printf_float+0x1f8>
 801b1a0:	6923      	ldr	r3, [r4, #16]
 801b1a2:	4642      	mov	r2, r8
 801b1a4:	4631      	mov	r1, r6
 801b1a6:	4628      	mov	r0, r5
 801b1a8:	47b8      	blx	r7
 801b1aa:	3001      	adds	r0, #1
 801b1ac:	d12c      	bne.n	801b208 <_printf_float+0x250>
 801b1ae:	e764      	b.n	801b07a <_printf_float+0xc2>
 801b1b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801b1b4:	f240 80e0 	bls.w	801b378 <_printf_float+0x3c0>
 801b1b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b1bc:	2200      	movs	r2, #0
 801b1be:	2300      	movs	r3, #0
 801b1c0:	f7e5 fc82 	bl	8000ac8 <__aeabi_dcmpeq>
 801b1c4:	2800      	cmp	r0, #0
 801b1c6:	d034      	beq.n	801b232 <_printf_float+0x27a>
 801b1c8:	4a37      	ldr	r2, [pc, #220]	; (801b2a8 <_printf_float+0x2f0>)
 801b1ca:	2301      	movs	r3, #1
 801b1cc:	4631      	mov	r1, r6
 801b1ce:	4628      	mov	r0, r5
 801b1d0:	47b8      	blx	r7
 801b1d2:	3001      	adds	r0, #1
 801b1d4:	f43f af51 	beq.w	801b07a <_printf_float+0xc2>
 801b1d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b1dc:	429a      	cmp	r2, r3
 801b1de:	db02      	blt.n	801b1e6 <_printf_float+0x22e>
 801b1e0:	6823      	ldr	r3, [r4, #0]
 801b1e2:	07d8      	lsls	r0, r3, #31
 801b1e4:	d510      	bpl.n	801b208 <_printf_float+0x250>
 801b1e6:	ee18 3a10 	vmov	r3, s16
 801b1ea:	4652      	mov	r2, sl
 801b1ec:	4631      	mov	r1, r6
 801b1ee:	4628      	mov	r0, r5
 801b1f0:	47b8      	blx	r7
 801b1f2:	3001      	adds	r0, #1
 801b1f4:	f43f af41 	beq.w	801b07a <_printf_float+0xc2>
 801b1f8:	f04f 0800 	mov.w	r8, #0
 801b1fc:	f104 091a 	add.w	r9, r4, #26
 801b200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b202:	3b01      	subs	r3, #1
 801b204:	4543      	cmp	r3, r8
 801b206:	dc09      	bgt.n	801b21c <_printf_float+0x264>
 801b208:	6823      	ldr	r3, [r4, #0]
 801b20a:	079b      	lsls	r3, r3, #30
 801b20c:	f100 8105 	bmi.w	801b41a <_printf_float+0x462>
 801b210:	68e0      	ldr	r0, [r4, #12]
 801b212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b214:	4298      	cmp	r0, r3
 801b216:	bfb8      	it	lt
 801b218:	4618      	movlt	r0, r3
 801b21a:	e730      	b.n	801b07e <_printf_float+0xc6>
 801b21c:	2301      	movs	r3, #1
 801b21e:	464a      	mov	r2, r9
 801b220:	4631      	mov	r1, r6
 801b222:	4628      	mov	r0, r5
 801b224:	47b8      	blx	r7
 801b226:	3001      	adds	r0, #1
 801b228:	f43f af27 	beq.w	801b07a <_printf_float+0xc2>
 801b22c:	f108 0801 	add.w	r8, r8, #1
 801b230:	e7e6      	b.n	801b200 <_printf_float+0x248>
 801b232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b234:	2b00      	cmp	r3, #0
 801b236:	dc39      	bgt.n	801b2ac <_printf_float+0x2f4>
 801b238:	4a1b      	ldr	r2, [pc, #108]	; (801b2a8 <_printf_float+0x2f0>)
 801b23a:	2301      	movs	r3, #1
 801b23c:	4631      	mov	r1, r6
 801b23e:	4628      	mov	r0, r5
 801b240:	47b8      	blx	r7
 801b242:	3001      	adds	r0, #1
 801b244:	f43f af19 	beq.w	801b07a <_printf_float+0xc2>
 801b248:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b24c:	4313      	orrs	r3, r2
 801b24e:	d102      	bne.n	801b256 <_printf_float+0x29e>
 801b250:	6823      	ldr	r3, [r4, #0]
 801b252:	07d9      	lsls	r1, r3, #31
 801b254:	d5d8      	bpl.n	801b208 <_printf_float+0x250>
 801b256:	ee18 3a10 	vmov	r3, s16
 801b25a:	4652      	mov	r2, sl
 801b25c:	4631      	mov	r1, r6
 801b25e:	4628      	mov	r0, r5
 801b260:	47b8      	blx	r7
 801b262:	3001      	adds	r0, #1
 801b264:	f43f af09 	beq.w	801b07a <_printf_float+0xc2>
 801b268:	f04f 0900 	mov.w	r9, #0
 801b26c:	f104 0a1a 	add.w	sl, r4, #26
 801b270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b272:	425b      	negs	r3, r3
 801b274:	454b      	cmp	r3, r9
 801b276:	dc01      	bgt.n	801b27c <_printf_float+0x2c4>
 801b278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b27a:	e792      	b.n	801b1a2 <_printf_float+0x1ea>
 801b27c:	2301      	movs	r3, #1
 801b27e:	4652      	mov	r2, sl
 801b280:	4631      	mov	r1, r6
 801b282:	4628      	mov	r0, r5
 801b284:	47b8      	blx	r7
 801b286:	3001      	adds	r0, #1
 801b288:	f43f aef7 	beq.w	801b07a <_printf_float+0xc2>
 801b28c:	f109 0901 	add.w	r9, r9, #1
 801b290:	e7ee      	b.n	801b270 <_printf_float+0x2b8>
 801b292:	bf00      	nop
 801b294:	7fefffff 	.word	0x7fefffff
 801b298:	0801dd74 	.word	0x0801dd74
 801b29c:	0801dd78 	.word	0x0801dd78
 801b2a0:	0801dd80 	.word	0x0801dd80
 801b2a4:	0801dd7c 	.word	0x0801dd7c
 801b2a8:	0801dd84 	.word	0x0801dd84
 801b2ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b2ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b2b0:	429a      	cmp	r2, r3
 801b2b2:	bfa8      	it	ge
 801b2b4:	461a      	movge	r2, r3
 801b2b6:	2a00      	cmp	r2, #0
 801b2b8:	4691      	mov	r9, r2
 801b2ba:	dc37      	bgt.n	801b32c <_printf_float+0x374>
 801b2bc:	f04f 0b00 	mov.w	fp, #0
 801b2c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b2c4:	f104 021a 	add.w	r2, r4, #26
 801b2c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b2ca:	9305      	str	r3, [sp, #20]
 801b2cc:	eba3 0309 	sub.w	r3, r3, r9
 801b2d0:	455b      	cmp	r3, fp
 801b2d2:	dc33      	bgt.n	801b33c <_printf_float+0x384>
 801b2d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b2d8:	429a      	cmp	r2, r3
 801b2da:	db3b      	blt.n	801b354 <_printf_float+0x39c>
 801b2dc:	6823      	ldr	r3, [r4, #0]
 801b2de:	07da      	lsls	r2, r3, #31
 801b2e0:	d438      	bmi.n	801b354 <_printf_float+0x39c>
 801b2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2e4:	9a05      	ldr	r2, [sp, #20]
 801b2e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b2e8:	1a9a      	subs	r2, r3, r2
 801b2ea:	eba3 0901 	sub.w	r9, r3, r1
 801b2ee:	4591      	cmp	r9, r2
 801b2f0:	bfa8      	it	ge
 801b2f2:	4691      	movge	r9, r2
 801b2f4:	f1b9 0f00 	cmp.w	r9, #0
 801b2f8:	dc35      	bgt.n	801b366 <_printf_float+0x3ae>
 801b2fa:	f04f 0800 	mov.w	r8, #0
 801b2fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b302:	f104 0a1a 	add.w	sl, r4, #26
 801b306:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801b30a:	1a9b      	subs	r3, r3, r2
 801b30c:	eba3 0309 	sub.w	r3, r3, r9
 801b310:	4543      	cmp	r3, r8
 801b312:	f77f af79 	ble.w	801b208 <_printf_float+0x250>
 801b316:	2301      	movs	r3, #1
 801b318:	4652      	mov	r2, sl
 801b31a:	4631      	mov	r1, r6
 801b31c:	4628      	mov	r0, r5
 801b31e:	47b8      	blx	r7
 801b320:	3001      	adds	r0, #1
 801b322:	f43f aeaa 	beq.w	801b07a <_printf_float+0xc2>
 801b326:	f108 0801 	add.w	r8, r8, #1
 801b32a:	e7ec      	b.n	801b306 <_printf_float+0x34e>
 801b32c:	4613      	mov	r3, r2
 801b32e:	4631      	mov	r1, r6
 801b330:	4642      	mov	r2, r8
 801b332:	4628      	mov	r0, r5
 801b334:	47b8      	blx	r7
 801b336:	3001      	adds	r0, #1
 801b338:	d1c0      	bne.n	801b2bc <_printf_float+0x304>
 801b33a:	e69e      	b.n	801b07a <_printf_float+0xc2>
 801b33c:	2301      	movs	r3, #1
 801b33e:	4631      	mov	r1, r6
 801b340:	4628      	mov	r0, r5
 801b342:	9205      	str	r2, [sp, #20]
 801b344:	47b8      	blx	r7
 801b346:	3001      	adds	r0, #1
 801b348:	f43f ae97 	beq.w	801b07a <_printf_float+0xc2>
 801b34c:	9a05      	ldr	r2, [sp, #20]
 801b34e:	f10b 0b01 	add.w	fp, fp, #1
 801b352:	e7b9      	b.n	801b2c8 <_printf_float+0x310>
 801b354:	ee18 3a10 	vmov	r3, s16
 801b358:	4652      	mov	r2, sl
 801b35a:	4631      	mov	r1, r6
 801b35c:	4628      	mov	r0, r5
 801b35e:	47b8      	blx	r7
 801b360:	3001      	adds	r0, #1
 801b362:	d1be      	bne.n	801b2e2 <_printf_float+0x32a>
 801b364:	e689      	b.n	801b07a <_printf_float+0xc2>
 801b366:	9a05      	ldr	r2, [sp, #20]
 801b368:	464b      	mov	r3, r9
 801b36a:	4442      	add	r2, r8
 801b36c:	4631      	mov	r1, r6
 801b36e:	4628      	mov	r0, r5
 801b370:	47b8      	blx	r7
 801b372:	3001      	adds	r0, #1
 801b374:	d1c1      	bne.n	801b2fa <_printf_float+0x342>
 801b376:	e680      	b.n	801b07a <_printf_float+0xc2>
 801b378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b37a:	2a01      	cmp	r2, #1
 801b37c:	dc01      	bgt.n	801b382 <_printf_float+0x3ca>
 801b37e:	07db      	lsls	r3, r3, #31
 801b380:	d538      	bpl.n	801b3f4 <_printf_float+0x43c>
 801b382:	2301      	movs	r3, #1
 801b384:	4642      	mov	r2, r8
 801b386:	4631      	mov	r1, r6
 801b388:	4628      	mov	r0, r5
 801b38a:	47b8      	blx	r7
 801b38c:	3001      	adds	r0, #1
 801b38e:	f43f ae74 	beq.w	801b07a <_printf_float+0xc2>
 801b392:	ee18 3a10 	vmov	r3, s16
 801b396:	4652      	mov	r2, sl
 801b398:	4631      	mov	r1, r6
 801b39a:	4628      	mov	r0, r5
 801b39c:	47b8      	blx	r7
 801b39e:	3001      	adds	r0, #1
 801b3a0:	f43f ae6b 	beq.w	801b07a <_printf_float+0xc2>
 801b3a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801b3a8:	2200      	movs	r2, #0
 801b3aa:	2300      	movs	r3, #0
 801b3ac:	f7e5 fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 801b3b0:	b9d8      	cbnz	r0, 801b3ea <_printf_float+0x432>
 801b3b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b3b4:	f108 0201 	add.w	r2, r8, #1
 801b3b8:	3b01      	subs	r3, #1
 801b3ba:	4631      	mov	r1, r6
 801b3bc:	4628      	mov	r0, r5
 801b3be:	47b8      	blx	r7
 801b3c0:	3001      	adds	r0, #1
 801b3c2:	d10e      	bne.n	801b3e2 <_printf_float+0x42a>
 801b3c4:	e659      	b.n	801b07a <_printf_float+0xc2>
 801b3c6:	2301      	movs	r3, #1
 801b3c8:	4652      	mov	r2, sl
 801b3ca:	4631      	mov	r1, r6
 801b3cc:	4628      	mov	r0, r5
 801b3ce:	47b8      	blx	r7
 801b3d0:	3001      	adds	r0, #1
 801b3d2:	f43f ae52 	beq.w	801b07a <_printf_float+0xc2>
 801b3d6:	f108 0801 	add.w	r8, r8, #1
 801b3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b3dc:	3b01      	subs	r3, #1
 801b3de:	4543      	cmp	r3, r8
 801b3e0:	dcf1      	bgt.n	801b3c6 <_printf_float+0x40e>
 801b3e2:	464b      	mov	r3, r9
 801b3e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b3e8:	e6dc      	b.n	801b1a4 <_printf_float+0x1ec>
 801b3ea:	f04f 0800 	mov.w	r8, #0
 801b3ee:	f104 0a1a 	add.w	sl, r4, #26
 801b3f2:	e7f2      	b.n	801b3da <_printf_float+0x422>
 801b3f4:	2301      	movs	r3, #1
 801b3f6:	4642      	mov	r2, r8
 801b3f8:	e7df      	b.n	801b3ba <_printf_float+0x402>
 801b3fa:	2301      	movs	r3, #1
 801b3fc:	464a      	mov	r2, r9
 801b3fe:	4631      	mov	r1, r6
 801b400:	4628      	mov	r0, r5
 801b402:	47b8      	blx	r7
 801b404:	3001      	adds	r0, #1
 801b406:	f43f ae38 	beq.w	801b07a <_printf_float+0xc2>
 801b40a:	f108 0801 	add.w	r8, r8, #1
 801b40e:	68e3      	ldr	r3, [r4, #12]
 801b410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b412:	1a5b      	subs	r3, r3, r1
 801b414:	4543      	cmp	r3, r8
 801b416:	dcf0      	bgt.n	801b3fa <_printf_float+0x442>
 801b418:	e6fa      	b.n	801b210 <_printf_float+0x258>
 801b41a:	f04f 0800 	mov.w	r8, #0
 801b41e:	f104 0919 	add.w	r9, r4, #25
 801b422:	e7f4      	b.n	801b40e <_printf_float+0x456>

0801b424 <_printf_common>:
 801b424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b428:	4616      	mov	r6, r2
 801b42a:	4699      	mov	r9, r3
 801b42c:	688a      	ldr	r2, [r1, #8]
 801b42e:	690b      	ldr	r3, [r1, #16]
 801b430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b434:	4293      	cmp	r3, r2
 801b436:	bfb8      	it	lt
 801b438:	4613      	movlt	r3, r2
 801b43a:	6033      	str	r3, [r6, #0]
 801b43c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b440:	4607      	mov	r7, r0
 801b442:	460c      	mov	r4, r1
 801b444:	b10a      	cbz	r2, 801b44a <_printf_common+0x26>
 801b446:	3301      	adds	r3, #1
 801b448:	6033      	str	r3, [r6, #0]
 801b44a:	6823      	ldr	r3, [r4, #0]
 801b44c:	0699      	lsls	r1, r3, #26
 801b44e:	bf42      	ittt	mi
 801b450:	6833      	ldrmi	r3, [r6, #0]
 801b452:	3302      	addmi	r3, #2
 801b454:	6033      	strmi	r3, [r6, #0]
 801b456:	6825      	ldr	r5, [r4, #0]
 801b458:	f015 0506 	ands.w	r5, r5, #6
 801b45c:	d106      	bne.n	801b46c <_printf_common+0x48>
 801b45e:	f104 0a19 	add.w	sl, r4, #25
 801b462:	68e3      	ldr	r3, [r4, #12]
 801b464:	6832      	ldr	r2, [r6, #0]
 801b466:	1a9b      	subs	r3, r3, r2
 801b468:	42ab      	cmp	r3, r5
 801b46a:	dc26      	bgt.n	801b4ba <_printf_common+0x96>
 801b46c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b470:	1e13      	subs	r3, r2, #0
 801b472:	6822      	ldr	r2, [r4, #0]
 801b474:	bf18      	it	ne
 801b476:	2301      	movne	r3, #1
 801b478:	0692      	lsls	r2, r2, #26
 801b47a:	d42b      	bmi.n	801b4d4 <_printf_common+0xb0>
 801b47c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b480:	4649      	mov	r1, r9
 801b482:	4638      	mov	r0, r7
 801b484:	47c0      	blx	r8
 801b486:	3001      	adds	r0, #1
 801b488:	d01e      	beq.n	801b4c8 <_printf_common+0xa4>
 801b48a:	6823      	ldr	r3, [r4, #0]
 801b48c:	68e5      	ldr	r5, [r4, #12]
 801b48e:	6832      	ldr	r2, [r6, #0]
 801b490:	f003 0306 	and.w	r3, r3, #6
 801b494:	2b04      	cmp	r3, #4
 801b496:	bf08      	it	eq
 801b498:	1aad      	subeq	r5, r5, r2
 801b49a:	68a3      	ldr	r3, [r4, #8]
 801b49c:	6922      	ldr	r2, [r4, #16]
 801b49e:	bf0c      	ite	eq
 801b4a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b4a4:	2500      	movne	r5, #0
 801b4a6:	4293      	cmp	r3, r2
 801b4a8:	bfc4      	itt	gt
 801b4aa:	1a9b      	subgt	r3, r3, r2
 801b4ac:	18ed      	addgt	r5, r5, r3
 801b4ae:	2600      	movs	r6, #0
 801b4b0:	341a      	adds	r4, #26
 801b4b2:	42b5      	cmp	r5, r6
 801b4b4:	d11a      	bne.n	801b4ec <_printf_common+0xc8>
 801b4b6:	2000      	movs	r0, #0
 801b4b8:	e008      	b.n	801b4cc <_printf_common+0xa8>
 801b4ba:	2301      	movs	r3, #1
 801b4bc:	4652      	mov	r2, sl
 801b4be:	4649      	mov	r1, r9
 801b4c0:	4638      	mov	r0, r7
 801b4c2:	47c0      	blx	r8
 801b4c4:	3001      	adds	r0, #1
 801b4c6:	d103      	bne.n	801b4d0 <_printf_common+0xac>
 801b4c8:	f04f 30ff 	mov.w	r0, #4294967295
 801b4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b4d0:	3501      	adds	r5, #1
 801b4d2:	e7c6      	b.n	801b462 <_printf_common+0x3e>
 801b4d4:	18e1      	adds	r1, r4, r3
 801b4d6:	1c5a      	adds	r2, r3, #1
 801b4d8:	2030      	movs	r0, #48	; 0x30
 801b4da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b4de:	4422      	add	r2, r4
 801b4e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b4e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b4e8:	3302      	adds	r3, #2
 801b4ea:	e7c7      	b.n	801b47c <_printf_common+0x58>
 801b4ec:	2301      	movs	r3, #1
 801b4ee:	4622      	mov	r2, r4
 801b4f0:	4649      	mov	r1, r9
 801b4f2:	4638      	mov	r0, r7
 801b4f4:	47c0      	blx	r8
 801b4f6:	3001      	adds	r0, #1
 801b4f8:	d0e6      	beq.n	801b4c8 <_printf_common+0xa4>
 801b4fa:	3601      	adds	r6, #1
 801b4fc:	e7d9      	b.n	801b4b2 <_printf_common+0x8e>
	...

0801b500 <_printf_i>:
 801b500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b504:	7e0f      	ldrb	r7, [r1, #24]
 801b506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b508:	2f78      	cmp	r7, #120	; 0x78
 801b50a:	4691      	mov	r9, r2
 801b50c:	4680      	mov	r8, r0
 801b50e:	460c      	mov	r4, r1
 801b510:	469a      	mov	sl, r3
 801b512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801b516:	d807      	bhi.n	801b528 <_printf_i+0x28>
 801b518:	2f62      	cmp	r7, #98	; 0x62
 801b51a:	d80a      	bhi.n	801b532 <_printf_i+0x32>
 801b51c:	2f00      	cmp	r7, #0
 801b51e:	f000 80d8 	beq.w	801b6d2 <_printf_i+0x1d2>
 801b522:	2f58      	cmp	r7, #88	; 0x58
 801b524:	f000 80a3 	beq.w	801b66e <_printf_i+0x16e>
 801b528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b52c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b530:	e03a      	b.n	801b5a8 <_printf_i+0xa8>
 801b532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b536:	2b15      	cmp	r3, #21
 801b538:	d8f6      	bhi.n	801b528 <_printf_i+0x28>
 801b53a:	a101      	add	r1, pc, #4	; (adr r1, 801b540 <_printf_i+0x40>)
 801b53c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801b540:	0801b599 	.word	0x0801b599
 801b544:	0801b5ad 	.word	0x0801b5ad
 801b548:	0801b529 	.word	0x0801b529
 801b54c:	0801b529 	.word	0x0801b529
 801b550:	0801b529 	.word	0x0801b529
 801b554:	0801b529 	.word	0x0801b529
 801b558:	0801b5ad 	.word	0x0801b5ad
 801b55c:	0801b529 	.word	0x0801b529
 801b560:	0801b529 	.word	0x0801b529
 801b564:	0801b529 	.word	0x0801b529
 801b568:	0801b529 	.word	0x0801b529
 801b56c:	0801b6b9 	.word	0x0801b6b9
 801b570:	0801b5dd 	.word	0x0801b5dd
 801b574:	0801b69b 	.word	0x0801b69b
 801b578:	0801b529 	.word	0x0801b529
 801b57c:	0801b529 	.word	0x0801b529
 801b580:	0801b6db 	.word	0x0801b6db
 801b584:	0801b529 	.word	0x0801b529
 801b588:	0801b5dd 	.word	0x0801b5dd
 801b58c:	0801b529 	.word	0x0801b529
 801b590:	0801b529 	.word	0x0801b529
 801b594:	0801b6a3 	.word	0x0801b6a3
 801b598:	682b      	ldr	r3, [r5, #0]
 801b59a:	1d1a      	adds	r2, r3, #4
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	602a      	str	r2, [r5, #0]
 801b5a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b5a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b5a8:	2301      	movs	r3, #1
 801b5aa:	e0a3      	b.n	801b6f4 <_printf_i+0x1f4>
 801b5ac:	6820      	ldr	r0, [r4, #0]
 801b5ae:	6829      	ldr	r1, [r5, #0]
 801b5b0:	0606      	lsls	r6, r0, #24
 801b5b2:	f101 0304 	add.w	r3, r1, #4
 801b5b6:	d50a      	bpl.n	801b5ce <_printf_i+0xce>
 801b5b8:	680e      	ldr	r6, [r1, #0]
 801b5ba:	602b      	str	r3, [r5, #0]
 801b5bc:	2e00      	cmp	r6, #0
 801b5be:	da03      	bge.n	801b5c8 <_printf_i+0xc8>
 801b5c0:	232d      	movs	r3, #45	; 0x2d
 801b5c2:	4276      	negs	r6, r6
 801b5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b5c8:	485e      	ldr	r0, [pc, #376]	; (801b744 <_printf_i+0x244>)
 801b5ca:	230a      	movs	r3, #10
 801b5cc:	e019      	b.n	801b602 <_printf_i+0x102>
 801b5ce:	680e      	ldr	r6, [r1, #0]
 801b5d0:	602b      	str	r3, [r5, #0]
 801b5d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b5d6:	bf18      	it	ne
 801b5d8:	b236      	sxthne	r6, r6
 801b5da:	e7ef      	b.n	801b5bc <_printf_i+0xbc>
 801b5dc:	682b      	ldr	r3, [r5, #0]
 801b5de:	6820      	ldr	r0, [r4, #0]
 801b5e0:	1d19      	adds	r1, r3, #4
 801b5e2:	6029      	str	r1, [r5, #0]
 801b5e4:	0601      	lsls	r1, r0, #24
 801b5e6:	d501      	bpl.n	801b5ec <_printf_i+0xec>
 801b5e8:	681e      	ldr	r6, [r3, #0]
 801b5ea:	e002      	b.n	801b5f2 <_printf_i+0xf2>
 801b5ec:	0646      	lsls	r6, r0, #25
 801b5ee:	d5fb      	bpl.n	801b5e8 <_printf_i+0xe8>
 801b5f0:	881e      	ldrh	r6, [r3, #0]
 801b5f2:	4854      	ldr	r0, [pc, #336]	; (801b744 <_printf_i+0x244>)
 801b5f4:	2f6f      	cmp	r7, #111	; 0x6f
 801b5f6:	bf0c      	ite	eq
 801b5f8:	2308      	moveq	r3, #8
 801b5fa:	230a      	movne	r3, #10
 801b5fc:	2100      	movs	r1, #0
 801b5fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b602:	6865      	ldr	r5, [r4, #4]
 801b604:	60a5      	str	r5, [r4, #8]
 801b606:	2d00      	cmp	r5, #0
 801b608:	bfa2      	ittt	ge
 801b60a:	6821      	ldrge	r1, [r4, #0]
 801b60c:	f021 0104 	bicge.w	r1, r1, #4
 801b610:	6021      	strge	r1, [r4, #0]
 801b612:	b90e      	cbnz	r6, 801b618 <_printf_i+0x118>
 801b614:	2d00      	cmp	r5, #0
 801b616:	d04d      	beq.n	801b6b4 <_printf_i+0x1b4>
 801b618:	4615      	mov	r5, r2
 801b61a:	fbb6 f1f3 	udiv	r1, r6, r3
 801b61e:	fb03 6711 	mls	r7, r3, r1, r6
 801b622:	5dc7      	ldrb	r7, [r0, r7]
 801b624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b628:	4637      	mov	r7, r6
 801b62a:	42bb      	cmp	r3, r7
 801b62c:	460e      	mov	r6, r1
 801b62e:	d9f4      	bls.n	801b61a <_printf_i+0x11a>
 801b630:	2b08      	cmp	r3, #8
 801b632:	d10b      	bne.n	801b64c <_printf_i+0x14c>
 801b634:	6823      	ldr	r3, [r4, #0]
 801b636:	07de      	lsls	r6, r3, #31
 801b638:	d508      	bpl.n	801b64c <_printf_i+0x14c>
 801b63a:	6923      	ldr	r3, [r4, #16]
 801b63c:	6861      	ldr	r1, [r4, #4]
 801b63e:	4299      	cmp	r1, r3
 801b640:	bfde      	ittt	le
 801b642:	2330      	movle	r3, #48	; 0x30
 801b644:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b648:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b64c:	1b52      	subs	r2, r2, r5
 801b64e:	6122      	str	r2, [r4, #16]
 801b650:	f8cd a000 	str.w	sl, [sp]
 801b654:	464b      	mov	r3, r9
 801b656:	aa03      	add	r2, sp, #12
 801b658:	4621      	mov	r1, r4
 801b65a:	4640      	mov	r0, r8
 801b65c:	f7ff fee2 	bl	801b424 <_printf_common>
 801b660:	3001      	adds	r0, #1
 801b662:	d14c      	bne.n	801b6fe <_printf_i+0x1fe>
 801b664:	f04f 30ff 	mov.w	r0, #4294967295
 801b668:	b004      	add	sp, #16
 801b66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b66e:	4835      	ldr	r0, [pc, #212]	; (801b744 <_printf_i+0x244>)
 801b670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801b674:	6829      	ldr	r1, [r5, #0]
 801b676:	6823      	ldr	r3, [r4, #0]
 801b678:	f851 6b04 	ldr.w	r6, [r1], #4
 801b67c:	6029      	str	r1, [r5, #0]
 801b67e:	061d      	lsls	r5, r3, #24
 801b680:	d514      	bpl.n	801b6ac <_printf_i+0x1ac>
 801b682:	07df      	lsls	r7, r3, #31
 801b684:	bf44      	itt	mi
 801b686:	f043 0320 	orrmi.w	r3, r3, #32
 801b68a:	6023      	strmi	r3, [r4, #0]
 801b68c:	b91e      	cbnz	r6, 801b696 <_printf_i+0x196>
 801b68e:	6823      	ldr	r3, [r4, #0]
 801b690:	f023 0320 	bic.w	r3, r3, #32
 801b694:	6023      	str	r3, [r4, #0]
 801b696:	2310      	movs	r3, #16
 801b698:	e7b0      	b.n	801b5fc <_printf_i+0xfc>
 801b69a:	6823      	ldr	r3, [r4, #0]
 801b69c:	f043 0320 	orr.w	r3, r3, #32
 801b6a0:	6023      	str	r3, [r4, #0]
 801b6a2:	2378      	movs	r3, #120	; 0x78
 801b6a4:	4828      	ldr	r0, [pc, #160]	; (801b748 <_printf_i+0x248>)
 801b6a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b6aa:	e7e3      	b.n	801b674 <_printf_i+0x174>
 801b6ac:	0659      	lsls	r1, r3, #25
 801b6ae:	bf48      	it	mi
 801b6b0:	b2b6      	uxthmi	r6, r6
 801b6b2:	e7e6      	b.n	801b682 <_printf_i+0x182>
 801b6b4:	4615      	mov	r5, r2
 801b6b6:	e7bb      	b.n	801b630 <_printf_i+0x130>
 801b6b8:	682b      	ldr	r3, [r5, #0]
 801b6ba:	6826      	ldr	r6, [r4, #0]
 801b6bc:	6961      	ldr	r1, [r4, #20]
 801b6be:	1d18      	adds	r0, r3, #4
 801b6c0:	6028      	str	r0, [r5, #0]
 801b6c2:	0635      	lsls	r5, r6, #24
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	d501      	bpl.n	801b6cc <_printf_i+0x1cc>
 801b6c8:	6019      	str	r1, [r3, #0]
 801b6ca:	e002      	b.n	801b6d2 <_printf_i+0x1d2>
 801b6cc:	0670      	lsls	r0, r6, #25
 801b6ce:	d5fb      	bpl.n	801b6c8 <_printf_i+0x1c8>
 801b6d0:	8019      	strh	r1, [r3, #0]
 801b6d2:	2300      	movs	r3, #0
 801b6d4:	6123      	str	r3, [r4, #16]
 801b6d6:	4615      	mov	r5, r2
 801b6d8:	e7ba      	b.n	801b650 <_printf_i+0x150>
 801b6da:	682b      	ldr	r3, [r5, #0]
 801b6dc:	1d1a      	adds	r2, r3, #4
 801b6de:	602a      	str	r2, [r5, #0]
 801b6e0:	681d      	ldr	r5, [r3, #0]
 801b6e2:	6862      	ldr	r2, [r4, #4]
 801b6e4:	2100      	movs	r1, #0
 801b6e6:	4628      	mov	r0, r5
 801b6e8:	f7e4 fd7a 	bl	80001e0 <memchr>
 801b6ec:	b108      	cbz	r0, 801b6f2 <_printf_i+0x1f2>
 801b6ee:	1b40      	subs	r0, r0, r5
 801b6f0:	6060      	str	r0, [r4, #4]
 801b6f2:	6863      	ldr	r3, [r4, #4]
 801b6f4:	6123      	str	r3, [r4, #16]
 801b6f6:	2300      	movs	r3, #0
 801b6f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b6fc:	e7a8      	b.n	801b650 <_printf_i+0x150>
 801b6fe:	6923      	ldr	r3, [r4, #16]
 801b700:	462a      	mov	r2, r5
 801b702:	4649      	mov	r1, r9
 801b704:	4640      	mov	r0, r8
 801b706:	47d0      	blx	sl
 801b708:	3001      	adds	r0, #1
 801b70a:	d0ab      	beq.n	801b664 <_printf_i+0x164>
 801b70c:	6823      	ldr	r3, [r4, #0]
 801b70e:	079b      	lsls	r3, r3, #30
 801b710:	d413      	bmi.n	801b73a <_printf_i+0x23a>
 801b712:	68e0      	ldr	r0, [r4, #12]
 801b714:	9b03      	ldr	r3, [sp, #12]
 801b716:	4298      	cmp	r0, r3
 801b718:	bfb8      	it	lt
 801b71a:	4618      	movlt	r0, r3
 801b71c:	e7a4      	b.n	801b668 <_printf_i+0x168>
 801b71e:	2301      	movs	r3, #1
 801b720:	4632      	mov	r2, r6
 801b722:	4649      	mov	r1, r9
 801b724:	4640      	mov	r0, r8
 801b726:	47d0      	blx	sl
 801b728:	3001      	adds	r0, #1
 801b72a:	d09b      	beq.n	801b664 <_printf_i+0x164>
 801b72c:	3501      	adds	r5, #1
 801b72e:	68e3      	ldr	r3, [r4, #12]
 801b730:	9903      	ldr	r1, [sp, #12]
 801b732:	1a5b      	subs	r3, r3, r1
 801b734:	42ab      	cmp	r3, r5
 801b736:	dcf2      	bgt.n	801b71e <_printf_i+0x21e>
 801b738:	e7eb      	b.n	801b712 <_printf_i+0x212>
 801b73a:	2500      	movs	r5, #0
 801b73c:	f104 0619 	add.w	r6, r4, #25
 801b740:	e7f5      	b.n	801b72e <_printf_i+0x22e>
 801b742:	bf00      	nop
 801b744:	0801dd86 	.word	0x0801dd86
 801b748:	0801dd97 	.word	0x0801dd97

0801b74c <cleanup_glue>:
 801b74c:	b538      	push	{r3, r4, r5, lr}
 801b74e:	460c      	mov	r4, r1
 801b750:	6809      	ldr	r1, [r1, #0]
 801b752:	4605      	mov	r5, r0
 801b754:	b109      	cbz	r1, 801b75a <cleanup_glue+0xe>
 801b756:	f7ff fff9 	bl	801b74c <cleanup_glue>
 801b75a:	4621      	mov	r1, r4
 801b75c:	4628      	mov	r0, r5
 801b75e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b762:	f7ff baa9 	b.w	801acb8 <_free_r>
	...

0801b768 <_reclaim_reent>:
 801b768:	4b2c      	ldr	r3, [pc, #176]	; (801b81c <_reclaim_reent+0xb4>)
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	4283      	cmp	r3, r0
 801b76e:	b570      	push	{r4, r5, r6, lr}
 801b770:	4604      	mov	r4, r0
 801b772:	d051      	beq.n	801b818 <_reclaim_reent+0xb0>
 801b774:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b776:	b143      	cbz	r3, 801b78a <_reclaim_reent+0x22>
 801b778:	68db      	ldr	r3, [r3, #12]
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d14a      	bne.n	801b814 <_reclaim_reent+0xac>
 801b77e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b780:	6819      	ldr	r1, [r3, #0]
 801b782:	b111      	cbz	r1, 801b78a <_reclaim_reent+0x22>
 801b784:	4620      	mov	r0, r4
 801b786:	f7ff fa97 	bl	801acb8 <_free_r>
 801b78a:	6961      	ldr	r1, [r4, #20]
 801b78c:	b111      	cbz	r1, 801b794 <_reclaim_reent+0x2c>
 801b78e:	4620      	mov	r0, r4
 801b790:	f7ff fa92 	bl	801acb8 <_free_r>
 801b794:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b796:	b111      	cbz	r1, 801b79e <_reclaim_reent+0x36>
 801b798:	4620      	mov	r0, r4
 801b79a:	f7ff fa8d 	bl	801acb8 <_free_r>
 801b79e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b7a0:	b111      	cbz	r1, 801b7a8 <_reclaim_reent+0x40>
 801b7a2:	4620      	mov	r0, r4
 801b7a4:	f7ff fa88 	bl	801acb8 <_free_r>
 801b7a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b7aa:	b111      	cbz	r1, 801b7b2 <_reclaim_reent+0x4a>
 801b7ac:	4620      	mov	r0, r4
 801b7ae:	f7ff fa83 	bl	801acb8 <_free_r>
 801b7b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b7b4:	b111      	cbz	r1, 801b7bc <_reclaim_reent+0x54>
 801b7b6:	4620      	mov	r0, r4
 801b7b8:	f7ff fa7e 	bl	801acb8 <_free_r>
 801b7bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b7be:	b111      	cbz	r1, 801b7c6 <_reclaim_reent+0x5e>
 801b7c0:	4620      	mov	r0, r4
 801b7c2:	f7ff fa79 	bl	801acb8 <_free_r>
 801b7c6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b7c8:	b111      	cbz	r1, 801b7d0 <_reclaim_reent+0x68>
 801b7ca:	4620      	mov	r0, r4
 801b7cc:	f7ff fa74 	bl	801acb8 <_free_r>
 801b7d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b7d2:	b111      	cbz	r1, 801b7da <_reclaim_reent+0x72>
 801b7d4:	4620      	mov	r0, r4
 801b7d6:	f7ff fa6f 	bl	801acb8 <_free_r>
 801b7da:	69a3      	ldr	r3, [r4, #24]
 801b7dc:	b1e3      	cbz	r3, 801b818 <_reclaim_reent+0xb0>
 801b7de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b7e0:	4620      	mov	r0, r4
 801b7e2:	4798      	blx	r3
 801b7e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b7e6:	b1b9      	cbz	r1, 801b818 <_reclaim_reent+0xb0>
 801b7e8:	4620      	mov	r0, r4
 801b7ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b7ee:	f7ff bfad 	b.w	801b74c <cleanup_glue>
 801b7f2:	5949      	ldr	r1, [r1, r5]
 801b7f4:	b941      	cbnz	r1, 801b808 <_reclaim_reent+0xa0>
 801b7f6:	3504      	adds	r5, #4
 801b7f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b7fa:	2d80      	cmp	r5, #128	; 0x80
 801b7fc:	68d9      	ldr	r1, [r3, #12]
 801b7fe:	d1f8      	bne.n	801b7f2 <_reclaim_reent+0x8a>
 801b800:	4620      	mov	r0, r4
 801b802:	f7ff fa59 	bl	801acb8 <_free_r>
 801b806:	e7ba      	b.n	801b77e <_reclaim_reent+0x16>
 801b808:	680e      	ldr	r6, [r1, #0]
 801b80a:	4620      	mov	r0, r4
 801b80c:	f7ff fa54 	bl	801acb8 <_free_r>
 801b810:	4631      	mov	r1, r6
 801b812:	e7ef      	b.n	801b7f4 <_reclaim_reent+0x8c>
 801b814:	2500      	movs	r5, #0
 801b816:	e7ef      	b.n	801b7f8 <_reclaim_reent+0x90>
 801b818:	bd70      	pop	{r4, r5, r6, pc}
 801b81a:	bf00      	nop
 801b81c:	2000003c 	.word	0x2000003c

0801b820 <_sbrk_r>:
 801b820:	b538      	push	{r3, r4, r5, lr}
 801b822:	4d06      	ldr	r5, [pc, #24]	; (801b83c <_sbrk_r+0x1c>)
 801b824:	2300      	movs	r3, #0
 801b826:	4604      	mov	r4, r0
 801b828:	4608      	mov	r0, r1
 801b82a:	602b      	str	r3, [r5, #0]
 801b82c:	f7f3 f84e 	bl	800e8cc <_sbrk>
 801b830:	1c43      	adds	r3, r0, #1
 801b832:	d102      	bne.n	801b83a <_sbrk_r+0x1a>
 801b834:	682b      	ldr	r3, [r5, #0]
 801b836:	b103      	cbz	r3, 801b83a <_sbrk_r+0x1a>
 801b838:	6023      	str	r3, [r4, #0]
 801b83a:	bd38      	pop	{r3, r4, r5, pc}
 801b83c:	2000a4a8 	.word	0x2000a4a8

0801b840 <_raise_r>:
 801b840:	291f      	cmp	r1, #31
 801b842:	b538      	push	{r3, r4, r5, lr}
 801b844:	4604      	mov	r4, r0
 801b846:	460d      	mov	r5, r1
 801b848:	d904      	bls.n	801b854 <_raise_r+0x14>
 801b84a:	2316      	movs	r3, #22
 801b84c:	6003      	str	r3, [r0, #0]
 801b84e:	f04f 30ff 	mov.w	r0, #4294967295
 801b852:	bd38      	pop	{r3, r4, r5, pc}
 801b854:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b856:	b112      	cbz	r2, 801b85e <_raise_r+0x1e>
 801b858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b85c:	b94b      	cbnz	r3, 801b872 <_raise_r+0x32>
 801b85e:	4620      	mov	r0, r4
 801b860:	f000 f830 	bl	801b8c4 <_getpid_r>
 801b864:	462a      	mov	r2, r5
 801b866:	4601      	mov	r1, r0
 801b868:	4620      	mov	r0, r4
 801b86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b86e:	f000 b817 	b.w	801b8a0 <_kill_r>
 801b872:	2b01      	cmp	r3, #1
 801b874:	d00a      	beq.n	801b88c <_raise_r+0x4c>
 801b876:	1c59      	adds	r1, r3, #1
 801b878:	d103      	bne.n	801b882 <_raise_r+0x42>
 801b87a:	2316      	movs	r3, #22
 801b87c:	6003      	str	r3, [r0, #0]
 801b87e:	2001      	movs	r0, #1
 801b880:	e7e7      	b.n	801b852 <_raise_r+0x12>
 801b882:	2400      	movs	r4, #0
 801b884:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b888:	4628      	mov	r0, r5
 801b88a:	4798      	blx	r3
 801b88c:	2000      	movs	r0, #0
 801b88e:	e7e0      	b.n	801b852 <_raise_r+0x12>

0801b890 <raise>:
 801b890:	4b02      	ldr	r3, [pc, #8]	; (801b89c <raise+0xc>)
 801b892:	4601      	mov	r1, r0
 801b894:	6818      	ldr	r0, [r3, #0]
 801b896:	f7ff bfd3 	b.w	801b840 <_raise_r>
 801b89a:	bf00      	nop
 801b89c:	2000003c 	.word	0x2000003c

0801b8a0 <_kill_r>:
 801b8a0:	b538      	push	{r3, r4, r5, lr}
 801b8a2:	4d07      	ldr	r5, [pc, #28]	; (801b8c0 <_kill_r+0x20>)
 801b8a4:	2300      	movs	r3, #0
 801b8a6:	4604      	mov	r4, r0
 801b8a8:	4608      	mov	r0, r1
 801b8aa:	4611      	mov	r1, r2
 801b8ac:	602b      	str	r3, [r5, #0]
 801b8ae:	f7f2 ff85 	bl	800e7bc <_kill>
 801b8b2:	1c43      	adds	r3, r0, #1
 801b8b4:	d102      	bne.n	801b8bc <_kill_r+0x1c>
 801b8b6:	682b      	ldr	r3, [r5, #0]
 801b8b8:	b103      	cbz	r3, 801b8bc <_kill_r+0x1c>
 801b8ba:	6023      	str	r3, [r4, #0]
 801b8bc:	bd38      	pop	{r3, r4, r5, pc}
 801b8be:	bf00      	nop
 801b8c0:	2000a4a8 	.word	0x2000a4a8

0801b8c4 <_getpid_r>:
 801b8c4:	f7f2 bf72 	b.w	800e7ac <_getpid>

0801b8c8 <__sread>:
 801b8c8:	b510      	push	{r4, lr}
 801b8ca:	460c      	mov	r4, r1
 801b8cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8d0:	f001 fbba 	bl	801d048 <_read_r>
 801b8d4:	2800      	cmp	r0, #0
 801b8d6:	bfab      	itete	ge
 801b8d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b8da:	89a3      	ldrhlt	r3, [r4, #12]
 801b8dc:	181b      	addge	r3, r3, r0
 801b8de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b8e2:	bfac      	ite	ge
 801b8e4:	6563      	strge	r3, [r4, #84]	; 0x54
 801b8e6:	81a3      	strhlt	r3, [r4, #12]
 801b8e8:	bd10      	pop	{r4, pc}

0801b8ea <__swrite>:
 801b8ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8ee:	461f      	mov	r7, r3
 801b8f0:	898b      	ldrh	r3, [r1, #12]
 801b8f2:	05db      	lsls	r3, r3, #23
 801b8f4:	4605      	mov	r5, r0
 801b8f6:	460c      	mov	r4, r1
 801b8f8:	4616      	mov	r6, r2
 801b8fa:	d505      	bpl.n	801b908 <__swrite+0x1e>
 801b8fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b900:	2302      	movs	r3, #2
 801b902:	2200      	movs	r2, #0
 801b904:	f000 ffe8 	bl	801c8d8 <_lseek_r>
 801b908:	89a3      	ldrh	r3, [r4, #12]
 801b90a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b90e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b912:	81a3      	strh	r3, [r4, #12]
 801b914:	4632      	mov	r2, r6
 801b916:	463b      	mov	r3, r7
 801b918:	4628      	mov	r0, r5
 801b91a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b91e:	f000 b817 	b.w	801b950 <_write_r>

0801b922 <__sseek>:
 801b922:	b510      	push	{r4, lr}
 801b924:	460c      	mov	r4, r1
 801b926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b92a:	f000 ffd5 	bl	801c8d8 <_lseek_r>
 801b92e:	1c43      	adds	r3, r0, #1
 801b930:	89a3      	ldrh	r3, [r4, #12]
 801b932:	bf15      	itete	ne
 801b934:	6560      	strne	r0, [r4, #84]	; 0x54
 801b936:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b93a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b93e:	81a3      	strheq	r3, [r4, #12]
 801b940:	bf18      	it	ne
 801b942:	81a3      	strhne	r3, [r4, #12]
 801b944:	bd10      	pop	{r4, pc}

0801b946 <__sclose>:
 801b946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b94a:	f000 b875 	b.w	801ba38 <_close_r>
	...

0801b950 <_write_r>:
 801b950:	b538      	push	{r3, r4, r5, lr}
 801b952:	4d07      	ldr	r5, [pc, #28]	; (801b970 <_write_r+0x20>)
 801b954:	4604      	mov	r4, r0
 801b956:	4608      	mov	r0, r1
 801b958:	4611      	mov	r1, r2
 801b95a:	2200      	movs	r2, #0
 801b95c:	602a      	str	r2, [r5, #0]
 801b95e:	461a      	mov	r2, r3
 801b960:	f7f2 ff63 	bl	800e82a <_write>
 801b964:	1c43      	adds	r3, r0, #1
 801b966:	d102      	bne.n	801b96e <_write_r+0x1e>
 801b968:	682b      	ldr	r3, [r5, #0]
 801b96a:	b103      	cbz	r3, 801b96e <_write_r+0x1e>
 801b96c:	6023      	str	r3, [r4, #0]
 801b96e:	bd38      	pop	{r3, r4, r5, pc}
 801b970:	2000a4a8 	.word	0x2000a4a8

0801b974 <__register_exitproc>:
 801b974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b978:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801ba34 <__register_exitproc+0xc0>
 801b97c:	4606      	mov	r6, r0
 801b97e:	f8d8 0000 	ldr.w	r0, [r8]
 801b982:	461f      	mov	r7, r3
 801b984:	460d      	mov	r5, r1
 801b986:	4691      	mov	r9, r2
 801b988:	f7ff f96d 	bl	801ac66 <__retarget_lock_acquire_recursive>
 801b98c:	4b25      	ldr	r3, [pc, #148]	; (801ba24 <__register_exitproc+0xb0>)
 801b98e:	681c      	ldr	r4, [r3, #0]
 801b990:	b934      	cbnz	r4, 801b9a0 <__register_exitproc+0x2c>
 801b992:	4c25      	ldr	r4, [pc, #148]	; (801ba28 <__register_exitproc+0xb4>)
 801b994:	601c      	str	r4, [r3, #0]
 801b996:	4b25      	ldr	r3, [pc, #148]	; (801ba2c <__register_exitproc+0xb8>)
 801b998:	b113      	cbz	r3, 801b9a0 <__register_exitproc+0x2c>
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801b9a0:	6863      	ldr	r3, [r4, #4]
 801b9a2:	2b1f      	cmp	r3, #31
 801b9a4:	dd07      	ble.n	801b9b6 <__register_exitproc+0x42>
 801b9a6:	f8d8 0000 	ldr.w	r0, [r8]
 801b9aa:	f7ff f95e 	bl	801ac6a <__retarget_lock_release_recursive>
 801b9ae:	f04f 30ff 	mov.w	r0, #4294967295
 801b9b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b9b6:	b34e      	cbz	r6, 801ba0c <__register_exitproc+0x98>
 801b9b8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801b9bc:	b988      	cbnz	r0, 801b9e2 <__register_exitproc+0x6e>
 801b9be:	4b1c      	ldr	r3, [pc, #112]	; (801ba30 <__register_exitproc+0xbc>)
 801b9c0:	b923      	cbnz	r3, 801b9cc <__register_exitproc+0x58>
 801b9c2:	f8d8 0000 	ldr.w	r0, [r8]
 801b9c6:	f7ff f94f 	bl	801ac68 <__retarget_lock_release>
 801b9ca:	e7f0      	b.n	801b9ae <__register_exitproc+0x3a>
 801b9cc:	f44f 7084 	mov.w	r0, #264	; 0x108
 801b9d0:	f7ff f94c 	bl	801ac6c <malloc>
 801b9d4:	2800      	cmp	r0, #0
 801b9d6:	d0f4      	beq.n	801b9c2 <__register_exitproc+0x4e>
 801b9d8:	2300      	movs	r3, #0
 801b9da:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801b9de:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801b9e2:	6863      	ldr	r3, [r4, #4]
 801b9e4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801b9e8:	2201      	movs	r2, #1
 801b9ea:	409a      	lsls	r2, r3
 801b9ec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801b9f0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801b9f4:	4313      	orrs	r3, r2
 801b9f6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801b9fa:	2e02      	cmp	r6, #2
 801b9fc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801ba00:	bf02      	ittt	eq
 801ba02:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801ba06:	4313      	orreq	r3, r2
 801ba08:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801ba0c:	6863      	ldr	r3, [r4, #4]
 801ba0e:	f8d8 0000 	ldr.w	r0, [r8]
 801ba12:	1c5a      	adds	r2, r3, #1
 801ba14:	3302      	adds	r3, #2
 801ba16:	6062      	str	r2, [r4, #4]
 801ba18:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801ba1c:	f7ff f925 	bl	801ac6a <__retarget_lock_release_recursive>
 801ba20:	2000      	movs	r0, #0
 801ba22:	e7c6      	b.n	801b9b2 <__register_exitproc+0x3e>
 801ba24:	2000a538 	.word	0x2000a538
 801ba28:	2000a4ac 	.word	0x2000a4ac
 801ba2c:	00000000 	.word	0x00000000
 801ba30:	0801ac6d 	.word	0x0801ac6d
 801ba34:	200000a0 	.word	0x200000a0

0801ba38 <_close_r>:
 801ba38:	b538      	push	{r3, r4, r5, lr}
 801ba3a:	4d06      	ldr	r5, [pc, #24]	; (801ba54 <_close_r+0x1c>)
 801ba3c:	2300      	movs	r3, #0
 801ba3e:	4604      	mov	r4, r0
 801ba40:	4608      	mov	r0, r1
 801ba42:	602b      	str	r3, [r5, #0]
 801ba44:	f7f2 ff0d 	bl	800e862 <_close>
 801ba48:	1c43      	adds	r3, r0, #1
 801ba4a:	d102      	bne.n	801ba52 <_close_r+0x1a>
 801ba4c:	682b      	ldr	r3, [r5, #0]
 801ba4e:	b103      	cbz	r3, 801ba52 <_close_r+0x1a>
 801ba50:	6023      	str	r3, [r4, #0]
 801ba52:	bd38      	pop	{r3, r4, r5, pc}
 801ba54:	2000a4a8 	.word	0x2000a4a8

0801ba58 <quorem>:
 801ba58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba5c:	6903      	ldr	r3, [r0, #16]
 801ba5e:	690c      	ldr	r4, [r1, #16]
 801ba60:	42a3      	cmp	r3, r4
 801ba62:	4607      	mov	r7, r0
 801ba64:	f2c0 8081 	blt.w	801bb6a <quorem+0x112>
 801ba68:	3c01      	subs	r4, #1
 801ba6a:	f101 0814 	add.w	r8, r1, #20
 801ba6e:	f100 0514 	add.w	r5, r0, #20
 801ba72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ba76:	9301      	str	r3, [sp, #4]
 801ba78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ba7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ba80:	3301      	adds	r3, #1
 801ba82:	429a      	cmp	r2, r3
 801ba84:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801ba88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ba8c:	fbb2 f6f3 	udiv	r6, r2, r3
 801ba90:	d331      	bcc.n	801baf6 <quorem+0x9e>
 801ba92:	f04f 0e00 	mov.w	lr, #0
 801ba96:	4640      	mov	r0, r8
 801ba98:	46ac      	mov	ip, r5
 801ba9a:	46f2      	mov	sl, lr
 801ba9c:	f850 2b04 	ldr.w	r2, [r0], #4
 801baa0:	b293      	uxth	r3, r2
 801baa2:	fb06 e303 	mla	r3, r6, r3, lr
 801baa6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801baaa:	b29b      	uxth	r3, r3
 801baac:	ebaa 0303 	sub.w	r3, sl, r3
 801bab0:	f8dc a000 	ldr.w	sl, [ip]
 801bab4:	0c12      	lsrs	r2, r2, #16
 801bab6:	fa13 f38a 	uxtah	r3, r3, sl
 801baba:	fb06 e202 	mla	r2, r6, r2, lr
 801babe:	9300      	str	r3, [sp, #0]
 801bac0:	9b00      	ldr	r3, [sp, #0]
 801bac2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801bac6:	b292      	uxth	r2, r2
 801bac8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801bacc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bad0:	f8bd 3000 	ldrh.w	r3, [sp]
 801bad4:	4581      	cmp	r9, r0
 801bad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bada:	f84c 3b04 	str.w	r3, [ip], #4
 801bade:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801bae2:	d2db      	bcs.n	801ba9c <quorem+0x44>
 801bae4:	f855 300b 	ldr.w	r3, [r5, fp]
 801bae8:	b92b      	cbnz	r3, 801baf6 <quorem+0x9e>
 801baea:	9b01      	ldr	r3, [sp, #4]
 801baec:	3b04      	subs	r3, #4
 801baee:	429d      	cmp	r5, r3
 801baf0:	461a      	mov	r2, r3
 801baf2:	d32e      	bcc.n	801bb52 <quorem+0xfa>
 801baf4:	613c      	str	r4, [r7, #16]
 801baf6:	4638      	mov	r0, r7
 801baf8:	f001 f98e 	bl	801ce18 <__mcmp>
 801bafc:	2800      	cmp	r0, #0
 801bafe:	db24      	blt.n	801bb4a <quorem+0xf2>
 801bb00:	3601      	adds	r6, #1
 801bb02:	4628      	mov	r0, r5
 801bb04:	f04f 0c00 	mov.w	ip, #0
 801bb08:	f858 2b04 	ldr.w	r2, [r8], #4
 801bb0c:	f8d0 e000 	ldr.w	lr, [r0]
 801bb10:	b293      	uxth	r3, r2
 801bb12:	ebac 0303 	sub.w	r3, ip, r3
 801bb16:	0c12      	lsrs	r2, r2, #16
 801bb18:	fa13 f38e 	uxtah	r3, r3, lr
 801bb1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801bb20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801bb24:	b29b      	uxth	r3, r3
 801bb26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bb2a:	45c1      	cmp	r9, r8
 801bb2c:	f840 3b04 	str.w	r3, [r0], #4
 801bb30:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801bb34:	d2e8      	bcs.n	801bb08 <quorem+0xb0>
 801bb36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801bb3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801bb3e:	b922      	cbnz	r2, 801bb4a <quorem+0xf2>
 801bb40:	3b04      	subs	r3, #4
 801bb42:	429d      	cmp	r5, r3
 801bb44:	461a      	mov	r2, r3
 801bb46:	d30a      	bcc.n	801bb5e <quorem+0x106>
 801bb48:	613c      	str	r4, [r7, #16]
 801bb4a:	4630      	mov	r0, r6
 801bb4c:	b003      	add	sp, #12
 801bb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb52:	6812      	ldr	r2, [r2, #0]
 801bb54:	3b04      	subs	r3, #4
 801bb56:	2a00      	cmp	r2, #0
 801bb58:	d1cc      	bne.n	801baf4 <quorem+0x9c>
 801bb5a:	3c01      	subs	r4, #1
 801bb5c:	e7c7      	b.n	801baee <quorem+0x96>
 801bb5e:	6812      	ldr	r2, [r2, #0]
 801bb60:	3b04      	subs	r3, #4
 801bb62:	2a00      	cmp	r2, #0
 801bb64:	d1f0      	bne.n	801bb48 <quorem+0xf0>
 801bb66:	3c01      	subs	r4, #1
 801bb68:	e7eb      	b.n	801bb42 <quorem+0xea>
 801bb6a:	2000      	movs	r0, #0
 801bb6c:	e7ee      	b.n	801bb4c <quorem+0xf4>
	...

0801bb70 <_dtoa_r>:
 801bb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb74:	ed2d 8b04 	vpush	{d8-d9}
 801bb78:	ec57 6b10 	vmov	r6, r7, d0
 801bb7c:	b093      	sub	sp, #76	; 0x4c
 801bb7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801bb80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801bb84:	9106      	str	r1, [sp, #24]
 801bb86:	ee10 aa10 	vmov	sl, s0
 801bb8a:	4604      	mov	r4, r0
 801bb8c:	9209      	str	r2, [sp, #36]	; 0x24
 801bb8e:	930c      	str	r3, [sp, #48]	; 0x30
 801bb90:	46bb      	mov	fp, r7
 801bb92:	b975      	cbnz	r5, 801bbb2 <_dtoa_r+0x42>
 801bb94:	2010      	movs	r0, #16
 801bb96:	f7ff f869 	bl	801ac6c <malloc>
 801bb9a:	4602      	mov	r2, r0
 801bb9c:	6260      	str	r0, [r4, #36]	; 0x24
 801bb9e:	b920      	cbnz	r0, 801bbaa <_dtoa_r+0x3a>
 801bba0:	4ba7      	ldr	r3, [pc, #668]	; (801be40 <_dtoa_r+0x2d0>)
 801bba2:	21ea      	movs	r1, #234	; 0xea
 801bba4:	48a7      	ldr	r0, [pc, #668]	; (801be44 <_dtoa_r+0x2d4>)
 801bba6:	f001 fa61 	bl	801d06c <__assert_func>
 801bbaa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801bbae:	6005      	str	r5, [r0, #0]
 801bbb0:	60c5      	str	r5, [r0, #12]
 801bbb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbb4:	6819      	ldr	r1, [r3, #0]
 801bbb6:	b151      	cbz	r1, 801bbce <_dtoa_r+0x5e>
 801bbb8:	685a      	ldr	r2, [r3, #4]
 801bbba:	604a      	str	r2, [r1, #4]
 801bbbc:	2301      	movs	r3, #1
 801bbbe:	4093      	lsls	r3, r2
 801bbc0:	608b      	str	r3, [r1, #8]
 801bbc2:	4620      	mov	r0, r4
 801bbc4:	f000 fee6 	bl	801c994 <_Bfree>
 801bbc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bbca:	2200      	movs	r2, #0
 801bbcc:	601a      	str	r2, [r3, #0]
 801bbce:	1e3b      	subs	r3, r7, #0
 801bbd0:	bfaa      	itet	ge
 801bbd2:	2300      	movge	r3, #0
 801bbd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801bbd8:	f8c8 3000 	strge.w	r3, [r8]
 801bbdc:	4b9a      	ldr	r3, [pc, #616]	; (801be48 <_dtoa_r+0x2d8>)
 801bbde:	bfbc      	itt	lt
 801bbe0:	2201      	movlt	r2, #1
 801bbe2:	f8c8 2000 	strlt.w	r2, [r8]
 801bbe6:	ea33 030b 	bics.w	r3, r3, fp
 801bbea:	d11b      	bne.n	801bc24 <_dtoa_r+0xb4>
 801bbec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bbee:	f242 730f 	movw	r3, #9999	; 0x270f
 801bbf2:	6013      	str	r3, [r2, #0]
 801bbf4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801bbf8:	4333      	orrs	r3, r6
 801bbfa:	f000 8592 	beq.w	801c722 <_dtoa_r+0xbb2>
 801bbfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc00:	b963      	cbnz	r3, 801bc1c <_dtoa_r+0xac>
 801bc02:	4b92      	ldr	r3, [pc, #584]	; (801be4c <_dtoa_r+0x2dc>)
 801bc04:	e022      	b.n	801bc4c <_dtoa_r+0xdc>
 801bc06:	4b92      	ldr	r3, [pc, #584]	; (801be50 <_dtoa_r+0x2e0>)
 801bc08:	9301      	str	r3, [sp, #4]
 801bc0a:	3308      	adds	r3, #8
 801bc0c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bc0e:	6013      	str	r3, [r2, #0]
 801bc10:	9801      	ldr	r0, [sp, #4]
 801bc12:	b013      	add	sp, #76	; 0x4c
 801bc14:	ecbd 8b04 	vpop	{d8-d9}
 801bc18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bc1c:	4b8b      	ldr	r3, [pc, #556]	; (801be4c <_dtoa_r+0x2dc>)
 801bc1e:	9301      	str	r3, [sp, #4]
 801bc20:	3303      	adds	r3, #3
 801bc22:	e7f3      	b.n	801bc0c <_dtoa_r+0x9c>
 801bc24:	2200      	movs	r2, #0
 801bc26:	2300      	movs	r3, #0
 801bc28:	4650      	mov	r0, sl
 801bc2a:	4659      	mov	r1, fp
 801bc2c:	f7e4 ff4c 	bl	8000ac8 <__aeabi_dcmpeq>
 801bc30:	ec4b ab19 	vmov	d9, sl, fp
 801bc34:	4680      	mov	r8, r0
 801bc36:	b158      	cbz	r0, 801bc50 <_dtoa_r+0xe0>
 801bc38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc3a:	2301      	movs	r3, #1
 801bc3c:	6013      	str	r3, [r2, #0]
 801bc3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	f000 856b 	beq.w	801c71c <_dtoa_r+0xbac>
 801bc46:	4883      	ldr	r0, [pc, #524]	; (801be54 <_dtoa_r+0x2e4>)
 801bc48:	6018      	str	r0, [r3, #0]
 801bc4a:	1e43      	subs	r3, r0, #1
 801bc4c:	9301      	str	r3, [sp, #4]
 801bc4e:	e7df      	b.n	801bc10 <_dtoa_r+0xa0>
 801bc50:	ec4b ab10 	vmov	d0, sl, fp
 801bc54:	aa10      	add	r2, sp, #64	; 0x40
 801bc56:	a911      	add	r1, sp, #68	; 0x44
 801bc58:	4620      	mov	r0, r4
 801bc5a:	f001 f983 	bl	801cf64 <__d2b>
 801bc5e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801bc62:	ee08 0a10 	vmov	s16, r0
 801bc66:	2d00      	cmp	r5, #0
 801bc68:	f000 8084 	beq.w	801bd74 <_dtoa_r+0x204>
 801bc6c:	ee19 3a90 	vmov	r3, s19
 801bc70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801bc74:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801bc78:	4656      	mov	r6, sl
 801bc7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801bc7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801bc82:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801bc86:	4b74      	ldr	r3, [pc, #464]	; (801be58 <_dtoa_r+0x2e8>)
 801bc88:	2200      	movs	r2, #0
 801bc8a:	4630      	mov	r0, r6
 801bc8c:	4639      	mov	r1, r7
 801bc8e:	f7e4 fafb 	bl	8000288 <__aeabi_dsub>
 801bc92:	a365      	add	r3, pc, #404	; (adr r3, 801be28 <_dtoa_r+0x2b8>)
 801bc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc98:	f7e4 fcae 	bl	80005f8 <__aeabi_dmul>
 801bc9c:	a364      	add	r3, pc, #400	; (adr r3, 801be30 <_dtoa_r+0x2c0>)
 801bc9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bca2:	f7e4 faf3 	bl	800028c <__adddf3>
 801bca6:	4606      	mov	r6, r0
 801bca8:	4628      	mov	r0, r5
 801bcaa:	460f      	mov	r7, r1
 801bcac:	f7e4 fc3a 	bl	8000524 <__aeabi_i2d>
 801bcb0:	a361      	add	r3, pc, #388	; (adr r3, 801be38 <_dtoa_r+0x2c8>)
 801bcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcb6:	f7e4 fc9f 	bl	80005f8 <__aeabi_dmul>
 801bcba:	4602      	mov	r2, r0
 801bcbc:	460b      	mov	r3, r1
 801bcbe:	4630      	mov	r0, r6
 801bcc0:	4639      	mov	r1, r7
 801bcc2:	f7e4 fae3 	bl	800028c <__adddf3>
 801bcc6:	4606      	mov	r6, r0
 801bcc8:	460f      	mov	r7, r1
 801bcca:	f7e4 ff45 	bl	8000b58 <__aeabi_d2iz>
 801bcce:	2200      	movs	r2, #0
 801bcd0:	9000      	str	r0, [sp, #0]
 801bcd2:	2300      	movs	r3, #0
 801bcd4:	4630      	mov	r0, r6
 801bcd6:	4639      	mov	r1, r7
 801bcd8:	f7e4 ff00 	bl	8000adc <__aeabi_dcmplt>
 801bcdc:	b150      	cbz	r0, 801bcf4 <_dtoa_r+0x184>
 801bcde:	9800      	ldr	r0, [sp, #0]
 801bce0:	f7e4 fc20 	bl	8000524 <__aeabi_i2d>
 801bce4:	4632      	mov	r2, r6
 801bce6:	463b      	mov	r3, r7
 801bce8:	f7e4 feee 	bl	8000ac8 <__aeabi_dcmpeq>
 801bcec:	b910      	cbnz	r0, 801bcf4 <_dtoa_r+0x184>
 801bcee:	9b00      	ldr	r3, [sp, #0]
 801bcf0:	3b01      	subs	r3, #1
 801bcf2:	9300      	str	r3, [sp, #0]
 801bcf4:	9b00      	ldr	r3, [sp, #0]
 801bcf6:	2b16      	cmp	r3, #22
 801bcf8:	d85a      	bhi.n	801bdb0 <_dtoa_r+0x240>
 801bcfa:	9a00      	ldr	r2, [sp, #0]
 801bcfc:	4b57      	ldr	r3, [pc, #348]	; (801be5c <_dtoa_r+0x2ec>)
 801bcfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd06:	ec51 0b19 	vmov	r0, r1, d9
 801bd0a:	f7e4 fee7 	bl	8000adc <__aeabi_dcmplt>
 801bd0e:	2800      	cmp	r0, #0
 801bd10:	d050      	beq.n	801bdb4 <_dtoa_r+0x244>
 801bd12:	9b00      	ldr	r3, [sp, #0]
 801bd14:	3b01      	subs	r3, #1
 801bd16:	9300      	str	r3, [sp, #0]
 801bd18:	2300      	movs	r3, #0
 801bd1a:	930b      	str	r3, [sp, #44]	; 0x2c
 801bd1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bd1e:	1b5d      	subs	r5, r3, r5
 801bd20:	1e6b      	subs	r3, r5, #1
 801bd22:	9305      	str	r3, [sp, #20]
 801bd24:	bf45      	ittet	mi
 801bd26:	f1c5 0301 	rsbmi	r3, r5, #1
 801bd2a:	9304      	strmi	r3, [sp, #16]
 801bd2c:	2300      	movpl	r3, #0
 801bd2e:	2300      	movmi	r3, #0
 801bd30:	bf4c      	ite	mi
 801bd32:	9305      	strmi	r3, [sp, #20]
 801bd34:	9304      	strpl	r3, [sp, #16]
 801bd36:	9b00      	ldr	r3, [sp, #0]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	db3d      	blt.n	801bdb8 <_dtoa_r+0x248>
 801bd3c:	9b05      	ldr	r3, [sp, #20]
 801bd3e:	9a00      	ldr	r2, [sp, #0]
 801bd40:	920a      	str	r2, [sp, #40]	; 0x28
 801bd42:	4413      	add	r3, r2
 801bd44:	9305      	str	r3, [sp, #20]
 801bd46:	2300      	movs	r3, #0
 801bd48:	9307      	str	r3, [sp, #28]
 801bd4a:	9b06      	ldr	r3, [sp, #24]
 801bd4c:	2b09      	cmp	r3, #9
 801bd4e:	f200 8089 	bhi.w	801be64 <_dtoa_r+0x2f4>
 801bd52:	2b05      	cmp	r3, #5
 801bd54:	bfc4      	itt	gt
 801bd56:	3b04      	subgt	r3, #4
 801bd58:	9306      	strgt	r3, [sp, #24]
 801bd5a:	9b06      	ldr	r3, [sp, #24]
 801bd5c:	f1a3 0302 	sub.w	r3, r3, #2
 801bd60:	bfcc      	ite	gt
 801bd62:	2500      	movgt	r5, #0
 801bd64:	2501      	movle	r5, #1
 801bd66:	2b03      	cmp	r3, #3
 801bd68:	f200 8087 	bhi.w	801be7a <_dtoa_r+0x30a>
 801bd6c:	e8df f003 	tbb	[pc, r3]
 801bd70:	59383a2d 	.word	0x59383a2d
 801bd74:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801bd78:	441d      	add	r5, r3
 801bd7a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801bd7e:	2b20      	cmp	r3, #32
 801bd80:	bfc1      	itttt	gt
 801bd82:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801bd86:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801bd8a:	fa0b f303 	lslgt.w	r3, fp, r3
 801bd8e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801bd92:	bfda      	itte	le
 801bd94:	f1c3 0320 	rsble	r3, r3, #32
 801bd98:	fa06 f003 	lslle.w	r0, r6, r3
 801bd9c:	4318      	orrgt	r0, r3
 801bd9e:	f7e4 fbb1 	bl	8000504 <__aeabi_ui2d>
 801bda2:	2301      	movs	r3, #1
 801bda4:	4606      	mov	r6, r0
 801bda6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801bdaa:	3d01      	subs	r5, #1
 801bdac:	930e      	str	r3, [sp, #56]	; 0x38
 801bdae:	e76a      	b.n	801bc86 <_dtoa_r+0x116>
 801bdb0:	2301      	movs	r3, #1
 801bdb2:	e7b2      	b.n	801bd1a <_dtoa_r+0x1aa>
 801bdb4:	900b      	str	r0, [sp, #44]	; 0x2c
 801bdb6:	e7b1      	b.n	801bd1c <_dtoa_r+0x1ac>
 801bdb8:	9b04      	ldr	r3, [sp, #16]
 801bdba:	9a00      	ldr	r2, [sp, #0]
 801bdbc:	1a9b      	subs	r3, r3, r2
 801bdbe:	9304      	str	r3, [sp, #16]
 801bdc0:	4253      	negs	r3, r2
 801bdc2:	9307      	str	r3, [sp, #28]
 801bdc4:	2300      	movs	r3, #0
 801bdc6:	930a      	str	r3, [sp, #40]	; 0x28
 801bdc8:	e7bf      	b.n	801bd4a <_dtoa_r+0x1da>
 801bdca:	2300      	movs	r3, #0
 801bdcc:	9308      	str	r3, [sp, #32]
 801bdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bdd0:	2b00      	cmp	r3, #0
 801bdd2:	dc55      	bgt.n	801be80 <_dtoa_r+0x310>
 801bdd4:	2301      	movs	r3, #1
 801bdd6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801bdda:	461a      	mov	r2, r3
 801bddc:	9209      	str	r2, [sp, #36]	; 0x24
 801bdde:	e00c      	b.n	801bdfa <_dtoa_r+0x28a>
 801bde0:	2301      	movs	r3, #1
 801bde2:	e7f3      	b.n	801bdcc <_dtoa_r+0x25c>
 801bde4:	2300      	movs	r3, #0
 801bde6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bde8:	9308      	str	r3, [sp, #32]
 801bdea:	9b00      	ldr	r3, [sp, #0]
 801bdec:	4413      	add	r3, r2
 801bdee:	9302      	str	r3, [sp, #8]
 801bdf0:	3301      	adds	r3, #1
 801bdf2:	2b01      	cmp	r3, #1
 801bdf4:	9303      	str	r3, [sp, #12]
 801bdf6:	bfb8      	it	lt
 801bdf8:	2301      	movlt	r3, #1
 801bdfa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801bdfc:	2200      	movs	r2, #0
 801bdfe:	6042      	str	r2, [r0, #4]
 801be00:	2204      	movs	r2, #4
 801be02:	f102 0614 	add.w	r6, r2, #20
 801be06:	429e      	cmp	r6, r3
 801be08:	6841      	ldr	r1, [r0, #4]
 801be0a:	d93d      	bls.n	801be88 <_dtoa_r+0x318>
 801be0c:	4620      	mov	r0, r4
 801be0e:	f000 fd81 	bl	801c914 <_Balloc>
 801be12:	9001      	str	r0, [sp, #4]
 801be14:	2800      	cmp	r0, #0
 801be16:	d13b      	bne.n	801be90 <_dtoa_r+0x320>
 801be18:	4b11      	ldr	r3, [pc, #68]	; (801be60 <_dtoa_r+0x2f0>)
 801be1a:	4602      	mov	r2, r0
 801be1c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801be20:	e6c0      	b.n	801bba4 <_dtoa_r+0x34>
 801be22:	2301      	movs	r3, #1
 801be24:	e7df      	b.n	801bde6 <_dtoa_r+0x276>
 801be26:	bf00      	nop
 801be28:	636f4361 	.word	0x636f4361
 801be2c:	3fd287a7 	.word	0x3fd287a7
 801be30:	8b60c8b3 	.word	0x8b60c8b3
 801be34:	3fc68a28 	.word	0x3fc68a28
 801be38:	509f79fb 	.word	0x509f79fb
 801be3c:	3fd34413 	.word	0x3fd34413
 801be40:	0801ddb5 	.word	0x0801ddb5
 801be44:	0801ddcc 	.word	0x0801ddcc
 801be48:	7ff00000 	.word	0x7ff00000
 801be4c:	0801ddb1 	.word	0x0801ddb1
 801be50:	0801dda8 	.word	0x0801dda8
 801be54:	0801dd85 	.word	0x0801dd85
 801be58:	3ff80000 	.word	0x3ff80000
 801be5c:	0801dec0 	.word	0x0801dec0
 801be60:	0801de27 	.word	0x0801de27
 801be64:	2501      	movs	r5, #1
 801be66:	2300      	movs	r3, #0
 801be68:	9306      	str	r3, [sp, #24]
 801be6a:	9508      	str	r5, [sp, #32]
 801be6c:	f04f 33ff 	mov.w	r3, #4294967295
 801be70:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801be74:	2200      	movs	r2, #0
 801be76:	2312      	movs	r3, #18
 801be78:	e7b0      	b.n	801bddc <_dtoa_r+0x26c>
 801be7a:	2301      	movs	r3, #1
 801be7c:	9308      	str	r3, [sp, #32]
 801be7e:	e7f5      	b.n	801be6c <_dtoa_r+0x2fc>
 801be80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be82:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801be86:	e7b8      	b.n	801bdfa <_dtoa_r+0x28a>
 801be88:	3101      	adds	r1, #1
 801be8a:	6041      	str	r1, [r0, #4]
 801be8c:	0052      	lsls	r2, r2, #1
 801be8e:	e7b8      	b.n	801be02 <_dtoa_r+0x292>
 801be90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801be92:	9a01      	ldr	r2, [sp, #4]
 801be94:	601a      	str	r2, [r3, #0]
 801be96:	9b03      	ldr	r3, [sp, #12]
 801be98:	2b0e      	cmp	r3, #14
 801be9a:	f200 809d 	bhi.w	801bfd8 <_dtoa_r+0x468>
 801be9e:	2d00      	cmp	r5, #0
 801bea0:	f000 809a 	beq.w	801bfd8 <_dtoa_r+0x468>
 801bea4:	9b00      	ldr	r3, [sp, #0]
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	dd32      	ble.n	801bf10 <_dtoa_r+0x3a0>
 801beaa:	4ab7      	ldr	r2, [pc, #732]	; (801c188 <_dtoa_r+0x618>)
 801beac:	f003 030f 	and.w	r3, r3, #15
 801beb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801beb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801beb8:	9b00      	ldr	r3, [sp, #0]
 801beba:	05d8      	lsls	r0, r3, #23
 801bebc:	ea4f 1723 	mov.w	r7, r3, asr #4
 801bec0:	d516      	bpl.n	801bef0 <_dtoa_r+0x380>
 801bec2:	4bb2      	ldr	r3, [pc, #712]	; (801c18c <_dtoa_r+0x61c>)
 801bec4:	ec51 0b19 	vmov	r0, r1, d9
 801bec8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801becc:	f7e4 fcbe 	bl	800084c <__aeabi_ddiv>
 801bed0:	f007 070f 	and.w	r7, r7, #15
 801bed4:	4682      	mov	sl, r0
 801bed6:	468b      	mov	fp, r1
 801bed8:	2503      	movs	r5, #3
 801beda:	4eac      	ldr	r6, [pc, #688]	; (801c18c <_dtoa_r+0x61c>)
 801bedc:	b957      	cbnz	r7, 801bef4 <_dtoa_r+0x384>
 801bede:	4642      	mov	r2, r8
 801bee0:	464b      	mov	r3, r9
 801bee2:	4650      	mov	r0, sl
 801bee4:	4659      	mov	r1, fp
 801bee6:	f7e4 fcb1 	bl	800084c <__aeabi_ddiv>
 801beea:	4682      	mov	sl, r0
 801beec:	468b      	mov	fp, r1
 801beee:	e028      	b.n	801bf42 <_dtoa_r+0x3d2>
 801bef0:	2502      	movs	r5, #2
 801bef2:	e7f2      	b.n	801beda <_dtoa_r+0x36a>
 801bef4:	07f9      	lsls	r1, r7, #31
 801bef6:	d508      	bpl.n	801bf0a <_dtoa_r+0x39a>
 801bef8:	4640      	mov	r0, r8
 801befa:	4649      	mov	r1, r9
 801befc:	e9d6 2300 	ldrd	r2, r3, [r6]
 801bf00:	f7e4 fb7a 	bl	80005f8 <__aeabi_dmul>
 801bf04:	3501      	adds	r5, #1
 801bf06:	4680      	mov	r8, r0
 801bf08:	4689      	mov	r9, r1
 801bf0a:	107f      	asrs	r7, r7, #1
 801bf0c:	3608      	adds	r6, #8
 801bf0e:	e7e5      	b.n	801bedc <_dtoa_r+0x36c>
 801bf10:	f000 809b 	beq.w	801c04a <_dtoa_r+0x4da>
 801bf14:	9b00      	ldr	r3, [sp, #0]
 801bf16:	4f9d      	ldr	r7, [pc, #628]	; (801c18c <_dtoa_r+0x61c>)
 801bf18:	425e      	negs	r6, r3
 801bf1a:	4b9b      	ldr	r3, [pc, #620]	; (801c188 <_dtoa_r+0x618>)
 801bf1c:	f006 020f 	and.w	r2, r6, #15
 801bf20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bf24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf28:	ec51 0b19 	vmov	r0, r1, d9
 801bf2c:	f7e4 fb64 	bl	80005f8 <__aeabi_dmul>
 801bf30:	1136      	asrs	r6, r6, #4
 801bf32:	4682      	mov	sl, r0
 801bf34:	468b      	mov	fp, r1
 801bf36:	2300      	movs	r3, #0
 801bf38:	2502      	movs	r5, #2
 801bf3a:	2e00      	cmp	r6, #0
 801bf3c:	d17a      	bne.n	801c034 <_dtoa_r+0x4c4>
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d1d3      	bne.n	801beea <_dtoa_r+0x37a>
 801bf42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	f000 8082 	beq.w	801c04e <_dtoa_r+0x4de>
 801bf4a:	4b91      	ldr	r3, [pc, #580]	; (801c190 <_dtoa_r+0x620>)
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	4650      	mov	r0, sl
 801bf50:	4659      	mov	r1, fp
 801bf52:	f7e4 fdc3 	bl	8000adc <__aeabi_dcmplt>
 801bf56:	2800      	cmp	r0, #0
 801bf58:	d079      	beq.n	801c04e <_dtoa_r+0x4de>
 801bf5a:	9b03      	ldr	r3, [sp, #12]
 801bf5c:	2b00      	cmp	r3, #0
 801bf5e:	d076      	beq.n	801c04e <_dtoa_r+0x4de>
 801bf60:	9b02      	ldr	r3, [sp, #8]
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	dd36      	ble.n	801bfd4 <_dtoa_r+0x464>
 801bf66:	9b00      	ldr	r3, [sp, #0]
 801bf68:	4650      	mov	r0, sl
 801bf6a:	4659      	mov	r1, fp
 801bf6c:	1e5f      	subs	r7, r3, #1
 801bf6e:	2200      	movs	r2, #0
 801bf70:	4b88      	ldr	r3, [pc, #544]	; (801c194 <_dtoa_r+0x624>)
 801bf72:	f7e4 fb41 	bl	80005f8 <__aeabi_dmul>
 801bf76:	9e02      	ldr	r6, [sp, #8]
 801bf78:	4682      	mov	sl, r0
 801bf7a:	468b      	mov	fp, r1
 801bf7c:	3501      	adds	r5, #1
 801bf7e:	4628      	mov	r0, r5
 801bf80:	f7e4 fad0 	bl	8000524 <__aeabi_i2d>
 801bf84:	4652      	mov	r2, sl
 801bf86:	465b      	mov	r3, fp
 801bf88:	f7e4 fb36 	bl	80005f8 <__aeabi_dmul>
 801bf8c:	4b82      	ldr	r3, [pc, #520]	; (801c198 <_dtoa_r+0x628>)
 801bf8e:	2200      	movs	r2, #0
 801bf90:	f7e4 f97c 	bl	800028c <__adddf3>
 801bf94:	46d0      	mov	r8, sl
 801bf96:	46d9      	mov	r9, fp
 801bf98:	4682      	mov	sl, r0
 801bf9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801bf9e:	2e00      	cmp	r6, #0
 801bfa0:	d158      	bne.n	801c054 <_dtoa_r+0x4e4>
 801bfa2:	4b7e      	ldr	r3, [pc, #504]	; (801c19c <_dtoa_r+0x62c>)
 801bfa4:	2200      	movs	r2, #0
 801bfa6:	4640      	mov	r0, r8
 801bfa8:	4649      	mov	r1, r9
 801bfaa:	f7e4 f96d 	bl	8000288 <__aeabi_dsub>
 801bfae:	4652      	mov	r2, sl
 801bfb0:	465b      	mov	r3, fp
 801bfb2:	4680      	mov	r8, r0
 801bfb4:	4689      	mov	r9, r1
 801bfb6:	f7e4 fdaf 	bl	8000b18 <__aeabi_dcmpgt>
 801bfba:	2800      	cmp	r0, #0
 801bfbc:	f040 8295 	bne.w	801c4ea <_dtoa_r+0x97a>
 801bfc0:	4652      	mov	r2, sl
 801bfc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801bfc6:	4640      	mov	r0, r8
 801bfc8:	4649      	mov	r1, r9
 801bfca:	f7e4 fd87 	bl	8000adc <__aeabi_dcmplt>
 801bfce:	2800      	cmp	r0, #0
 801bfd0:	f040 8289 	bne.w	801c4e6 <_dtoa_r+0x976>
 801bfd4:	ec5b ab19 	vmov	sl, fp, d9
 801bfd8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	f2c0 8148 	blt.w	801c270 <_dtoa_r+0x700>
 801bfe0:	9a00      	ldr	r2, [sp, #0]
 801bfe2:	2a0e      	cmp	r2, #14
 801bfe4:	f300 8144 	bgt.w	801c270 <_dtoa_r+0x700>
 801bfe8:	4b67      	ldr	r3, [pc, #412]	; (801c188 <_dtoa_r+0x618>)
 801bfea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bfee:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	f280 80d5 	bge.w	801c1a4 <_dtoa_r+0x634>
 801bffa:	9b03      	ldr	r3, [sp, #12]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	f300 80d1 	bgt.w	801c1a4 <_dtoa_r+0x634>
 801c002:	f040 826f 	bne.w	801c4e4 <_dtoa_r+0x974>
 801c006:	4b65      	ldr	r3, [pc, #404]	; (801c19c <_dtoa_r+0x62c>)
 801c008:	2200      	movs	r2, #0
 801c00a:	4640      	mov	r0, r8
 801c00c:	4649      	mov	r1, r9
 801c00e:	f7e4 faf3 	bl	80005f8 <__aeabi_dmul>
 801c012:	4652      	mov	r2, sl
 801c014:	465b      	mov	r3, fp
 801c016:	f7e4 fd75 	bl	8000b04 <__aeabi_dcmpge>
 801c01a:	9e03      	ldr	r6, [sp, #12]
 801c01c:	4637      	mov	r7, r6
 801c01e:	2800      	cmp	r0, #0
 801c020:	f040 8245 	bne.w	801c4ae <_dtoa_r+0x93e>
 801c024:	9d01      	ldr	r5, [sp, #4]
 801c026:	2331      	movs	r3, #49	; 0x31
 801c028:	f805 3b01 	strb.w	r3, [r5], #1
 801c02c:	9b00      	ldr	r3, [sp, #0]
 801c02e:	3301      	adds	r3, #1
 801c030:	9300      	str	r3, [sp, #0]
 801c032:	e240      	b.n	801c4b6 <_dtoa_r+0x946>
 801c034:	07f2      	lsls	r2, r6, #31
 801c036:	d505      	bpl.n	801c044 <_dtoa_r+0x4d4>
 801c038:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c03c:	f7e4 fadc 	bl	80005f8 <__aeabi_dmul>
 801c040:	3501      	adds	r5, #1
 801c042:	2301      	movs	r3, #1
 801c044:	1076      	asrs	r6, r6, #1
 801c046:	3708      	adds	r7, #8
 801c048:	e777      	b.n	801bf3a <_dtoa_r+0x3ca>
 801c04a:	2502      	movs	r5, #2
 801c04c:	e779      	b.n	801bf42 <_dtoa_r+0x3d2>
 801c04e:	9f00      	ldr	r7, [sp, #0]
 801c050:	9e03      	ldr	r6, [sp, #12]
 801c052:	e794      	b.n	801bf7e <_dtoa_r+0x40e>
 801c054:	9901      	ldr	r1, [sp, #4]
 801c056:	4b4c      	ldr	r3, [pc, #304]	; (801c188 <_dtoa_r+0x618>)
 801c058:	4431      	add	r1, r6
 801c05a:	910d      	str	r1, [sp, #52]	; 0x34
 801c05c:	9908      	ldr	r1, [sp, #32]
 801c05e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801c062:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801c066:	2900      	cmp	r1, #0
 801c068:	d043      	beq.n	801c0f2 <_dtoa_r+0x582>
 801c06a:	494d      	ldr	r1, [pc, #308]	; (801c1a0 <_dtoa_r+0x630>)
 801c06c:	2000      	movs	r0, #0
 801c06e:	f7e4 fbed 	bl	800084c <__aeabi_ddiv>
 801c072:	4652      	mov	r2, sl
 801c074:	465b      	mov	r3, fp
 801c076:	f7e4 f907 	bl	8000288 <__aeabi_dsub>
 801c07a:	9d01      	ldr	r5, [sp, #4]
 801c07c:	4682      	mov	sl, r0
 801c07e:	468b      	mov	fp, r1
 801c080:	4649      	mov	r1, r9
 801c082:	4640      	mov	r0, r8
 801c084:	f7e4 fd68 	bl	8000b58 <__aeabi_d2iz>
 801c088:	4606      	mov	r6, r0
 801c08a:	f7e4 fa4b 	bl	8000524 <__aeabi_i2d>
 801c08e:	4602      	mov	r2, r0
 801c090:	460b      	mov	r3, r1
 801c092:	4640      	mov	r0, r8
 801c094:	4649      	mov	r1, r9
 801c096:	f7e4 f8f7 	bl	8000288 <__aeabi_dsub>
 801c09a:	3630      	adds	r6, #48	; 0x30
 801c09c:	f805 6b01 	strb.w	r6, [r5], #1
 801c0a0:	4652      	mov	r2, sl
 801c0a2:	465b      	mov	r3, fp
 801c0a4:	4680      	mov	r8, r0
 801c0a6:	4689      	mov	r9, r1
 801c0a8:	f7e4 fd18 	bl	8000adc <__aeabi_dcmplt>
 801c0ac:	2800      	cmp	r0, #0
 801c0ae:	d163      	bne.n	801c178 <_dtoa_r+0x608>
 801c0b0:	4642      	mov	r2, r8
 801c0b2:	464b      	mov	r3, r9
 801c0b4:	4936      	ldr	r1, [pc, #216]	; (801c190 <_dtoa_r+0x620>)
 801c0b6:	2000      	movs	r0, #0
 801c0b8:	f7e4 f8e6 	bl	8000288 <__aeabi_dsub>
 801c0bc:	4652      	mov	r2, sl
 801c0be:	465b      	mov	r3, fp
 801c0c0:	f7e4 fd0c 	bl	8000adc <__aeabi_dcmplt>
 801c0c4:	2800      	cmp	r0, #0
 801c0c6:	f040 80b5 	bne.w	801c234 <_dtoa_r+0x6c4>
 801c0ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c0cc:	429d      	cmp	r5, r3
 801c0ce:	d081      	beq.n	801bfd4 <_dtoa_r+0x464>
 801c0d0:	4b30      	ldr	r3, [pc, #192]	; (801c194 <_dtoa_r+0x624>)
 801c0d2:	2200      	movs	r2, #0
 801c0d4:	4650      	mov	r0, sl
 801c0d6:	4659      	mov	r1, fp
 801c0d8:	f7e4 fa8e 	bl	80005f8 <__aeabi_dmul>
 801c0dc:	4b2d      	ldr	r3, [pc, #180]	; (801c194 <_dtoa_r+0x624>)
 801c0de:	4682      	mov	sl, r0
 801c0e0:	468b      	mov	fp, r1
 801c0e2:	4640      	mov	r0, r8
 801c0e4:	4649      	mov	r1, r9
 801c0e6:	2200      	movs	r2, #0
 801c0e8:	f7e4 fa86 	bl	80005f8 <__aeabi_dmul>
 801c0ec:	4680      	mov	r8, r0
 801c0ee:	4689      	mov	r9, r1
 801c0f0:	e7c6      	b.n	801c080 <_dtoa_r+0x510>
 801c0f2:	4650      	mov	r0, sl
 801c0f4:	4659      	mov	r1, fp
 801c0f6:	f7e4 fa7f 	bl	80005f8 <__aeabi_dmul>
 801c0fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c0fc:	9d01      	ldr	r5, [sp, #4]
 801c0fe:	930f      	str	r3, [sp, #60]	; 0x3c
 801c100:	4682      	mov	sl, r0
 801c102:	468b      	mov	fp, r1
 801c104:	4649      	mov	r1, r9
 801c106:	4640      	mov	r0, r8
 801c108:	f7e4 fd26 	bl	8000b58 <__aeabi_d2iz>
 801c10c:	4606      	mov	r6, r0
 801c10e:	f7e4 fa09 	bl	8000524 <__aeabi_i2d>
 801c112:	3630      	adds	r6, #48	; 0x30
 801c114:	4602      	mov	r2, r0
 801c116:	460b      	mov	r3, r1
 801c118:	4640      	mov	r0, r8
 801c11a:	4649      	mov	r1, r9
 801c11c:	f7e4 f8b4 	bl	8000288 <__aeabi_dsub>
 801c120:	f805 6b01 	strb.w	r6, [r5], #1
 801c124:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c126:	429d      	cmp	r5, r3
 801c128:	4680      	mov	r8, r0
 801c12a:	4689      	mov	r9, r1
 801c12c:	f04f 0200 	mov.w	r2, #0
 801c130:	d124      	bne.n	801c17c <_dtoa_r+0x60c>
 801c132:	4b1b      	ldr	r3, [pc, #108]	; (801c1a0 <_dtoa_r+0x630>)
 801c134:	4650      	mov	r0, sl
 801c136:	4659      	mov	r1, fp
 801c138:	f7e4 f8a8 	bl	800028c <__adddf3>
 801c13c:	4602      	mov	r2, r0
 801c13e:	460b      	mov	r3, r1
 801c140:	4640      	mov	r0, r8
 801c142:	4649      	mov	r1, r9
 801c144:	f7e4 fce8 	bl	8000b18 <__aeabi_dcmpgt>
 801c148:	2800      	cmp	r0, #0
 801c14a:	d173      	bne.n	801c234 <_dtoa_r+0x6c4>
 801c14c:	4652      	mov	r2, sl
 801c14e:	465b      	mov	r3, fp
 801c150:	4913      	ldr	r1, [pc, #76]	; (801c1a0 <_dtoa_r+0x630>)
 801c152:	2000      	movs	r0, #0
 801c154:	f7e4 f898 	bl	8000288 <__aeabi_dsub>
 801c158:	4602      	mov	r2, r0
 801c15a:	460b      	mov	r3, r1
 801c15c:	4640      	mov	r0, r8
 801c15e:	4649      	mov	r1, r9
 801c160:	f7e4 fcbc 	bl	8000adc <__aeabi_dcmplt>
 801c164:	2800      	cmp	r0, #0
 801c166:	f43f af35 	beq.w	801bfd4 <_dtoa_r+0x464>
 801c16a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801c16c:	1e6b      	subs	r3, r5, #1
 801c16e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c170:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c174:	2b30      	cmp	r3, #48	; 0x30
 801c176:	d0f8      	beq.n	801c16a <_dtoa_r+0x5fa>
 801c178:	9700      	str	r7, [sp, #0]
 801c17a:	e049      	b.n	801c210 <_dtoa_r+0x6a0>
 801c17c:	4b05      	ldr	r3, [pc, #20]	; (801c194 <_dtoa_r+0x624>)
 801c17e:	f7e4 fa3b 	bl	80005f8 <__aeabi_dmul>
 801c182:	4680      	mov	r8, r0
 801c184:	4689      	mov	r9, r1
 801c186:	e7bd      	b.n	801c104 <_dtoa_r+0x594>
 801c188:	0801dec0 	.word	0x0801dec0
 801c18c:	0801de98 	.word	0x0801de98
 801c190:	3ff00000 	.word	0x3ff00000
 801c194:	40240000 	.word	0x40240000
 801c198:	401c0000 	.word	0x401c0000
 801c19c:	40140000 	.word	0x40140000
 801c1a0:	3fe00000 	.word	0x3fe00000
 801c1a4:	9d01      	ldr	r5, [sp, #4]
 801c1a6:	4656      	mov	r6, sl
 801c1a8:	465f      	mov	r7, fp
 801c1aa:	4642      	mov	r2, r8
 801c1ac:	464b      	mov	r3, r9
 801c1ae:	4630      	mov	r0, r6
 801c1b0:	4639      	mov	r1, r7
 801c1b2:	f7e4 fb4b 	bl	800084c <__aeabi_ddiv>
 801c1b6:	f7e4 fccf 	bl	8000b58 <__aeabi_d2iz>
 801c1ba:	4682      	mov	sl, r0
 801c1bc:	f7e4 f9b2 	bl	8000524 <__aeabi_i2d>
 801c1c0:	4642      	mov	r2, r8
 801c1c2:	464b      	mov	r3, r9
 801c1c4:	f7e4 fa18 	bl	80005f8 <__aeabi_dmul>
 801c1c8:	4602      	mov	r2, r0
 801c1ca:	460b      	mov	r3, r1
 801c1cc:	4630      	mov	r0, r6
 801c1ce:	4639      	mov	r1, r7
 801c1d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801c1d4:	f7e4 f858 	bl	8000288 <__aeabi_dsub>
 801c1d8:	f805 6b01 	strb.w	r6, [r5], #1
 801c1dc:	9e01      	ldr	r6, [sp, #4]
 801c1de:	9f03      	ldr	r7, [sp, #12]
 801c1e0:	1bae      	subs	r6, r5, r6
 801c1e2:	42b7      	cmp	r7, r6
 801c1e4:	4602      	mov	r2, r0
 801c1e6:	460b      	mov	r3, r1
 801c1e8:	d135      	bne.n	801c256 <_dtoa_r+0x6e6>
 801c1ea:	f7e4 f84f 	bl	800028c <__adddf3>
 801c1ee:	4642      	mov	r2, r8
 801c1f0:	464b      	mov	r3, r9
 801c1f2:	4606      	mov	r6, r0
 801c1f4:	460f      	mov	r7, r1
 801c1f6:	f7e4 fc8f 	bl	8000b18 <__aeabi_dcmpgt>
 801c1fa:	b9d0      	cbnz	r0, 801c232 <_dtoa_r+0x6c2>
 801c1fc:	4642      	mov	r2, r8
 801c1fe:	464b      	mov	r3, r9
 801c200:	4630      	mov	r0, r6
 801c202:	4639      	mov	r1, r7
 801c204:	f7e4 fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 801c208:	b110      	cbz	r0, 801c210 <_dtoa_r+0x6a0>
 801c20a:	f01a 0f01 	tst.w	sl, #1
 801c20e:	d110      	bne.n	801c232 <_dtoa_r+0x6c2>
 801c210:	4620      	mov	r0, r4
 801c212:	ee18 1a10 	vmov	r1, s16
 801c216:	f000 fbbd 	bl	801c994 <_Bfree>
 801c21a:	2300      	movs	r3, #0
 801c21c:	9800      	ldr	r0, [sp, #0]
 801c21e:	702b      	strb	r3, [r5, #0]
 801c220:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c222:	3001      	adds	r0, #1
 801c224:	6018      	str	r0, [r3, #0]
 801c226:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c228:	2b00      	cmp	r3, #0
 801c22a:	f43f acf1 	beq.w	801bc10 <_dtoa_r+0xa0>
 801c22e:	601d      	str	r5, [r3, #0]
 801c230:	e4ee      	b.n	801bc10 <_dtoa_r+0xa0>
 801c232:	9f00      	ldr	r7, [sp, #0]
 801c234:	462b      	mov	r3, r5
 801c236:	461d      	mov	r5, r3
 801c238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c23c:	2a39      	cmp	r2, #57	; 0x39
 801c23e:	d106      	bne.n	801c24e <_dtoa_r+0x6de>
 801c240:	9a01      	ldr	r2, [sp, #4]
 801c242:	429a      	cmp	r2, r3
 801c244:	d1f7      	bne.n	801c236 <_dtoa_r+0x6c6>
 801c246:	9901      	ldr	r1, [sp, #4]
 801c248:	2230      	movs	r2, #48	; 0x30
 801c24a:	3701      	adds	r7, #1
 801c24c:	700a      	strb	r2, [r1, #0]
 801c24e:	781a      	ldrb	r2, [r3, #0]
 801c250:	3201      	adds	r2, #1
 801c252:	701a      	strb	r2, [r3, #0]
 801c254:	e790      	b.n	801c178 <_dtoa_r+0x608>
 801c256:	4ba6      	ldr	r3, [pc, #664]	; (801c4f0 <_dtoa_r+0x980>)
 801c258:	2200      	movs	r2, #0
 801c25a:	f7e4 f9cd 	bl	80005f8 <__aeabi_dmul>
 801c25e:	2200      	movs	r2, #0
 801c260:	2300      	movs	r3, #0
 801c262:	4606      	mov	r6, r0
 801c264:	460f      	mov	r7, r1
 801c266:	f7e4 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801c26a:	2800      	cmp	r0, #0
 801c26c:	d09d      	beq.n	801c1aa <_dtoa_r+0x63a>
 801c26e:	e7cf      	b.n	801c210 <_dtoa_r+0x6a0>
 801c270:	9a08      	ldr	r2, [sp, #32]
 801c272:	2a00      	cmp	r2, #0
 801c274:	f000 80d7 	beq.w	801c426 <_dtoa_r+0x8b6>
 801c278:	9a06      	ldr	r2, [sp, #24]
 801c27a:	2a01      	cmp	r2, #1
 801c27c:	f300 80ba 	bgt.w	801c3f4 <_dtoa_r+0x884>
 801c280:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801c282:	2a00      	cmp	r2, #0
 801c284:	f000 80b2 	beq.w	801c3ec <_dtoa_r+0x87c>
 801c288:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c28c:	9e07      	ldr	r6, [sp, #28]
 801c28e:	9d04      	ldr	r5, [sp, #16]
 801c290:	9a04      	ldr	r2, [sp, #16]
 801c292:	441a      	add	r2, r3
 801c294:	9204      	str	r2, [sp, #16]
 801c296:	9a05      	ldr	r2, [sp, #20]
 801c298:	2101      	movs	r1, #1
 801c29a:	441a      	add	r2, r3
 801c29c:	4620      	mov	r0, r4
 801c29e:	9205      	str	r2, [sp, #20]
 801c2a0:	f000 fc30 	bl	801cb04 <__i2b>
 801c2a4:	4607      	mov	r7, r0
 801c2a6:	2d00      	cmp	r5, #0
 801c2a8:	dd0c      	ble.n	801c2c4 <_dtoa_r+0x754>
 801c2aa:	9b05      	ldr	r3, [sp, #20]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	dd09      	ble.n	801c2c4 <_dtoa_r+0x754>
 801c2b0:	42ab      	cmp	r3, r5
 801c2b2:	9a04      	ldr	r2, [sp, #16]
 801c2b4:	bfa8      	it	ge
 801c2b6:	462b      	movge	r3, r5
 801c2b8:	1ad2      	subs	r2, r2, r3
 801c2ba:	9204      	str	r2, [sp, #16]
 801c2bc:	9a05      	ldr	r2, [sp, #20]
 801c2be:	1aed      	subs	r5, r5, r3
 801c2c0:	1ad3      	subs	r3, r2, r3
 801c2c2:	9305      	str	r3, [sp, #20]
 801c2c4:	9b07      	ldr	r3, [sp, #28]
 801c2c6:	b31b      	cbz	r3, 801c310 <_dtoa_r+0x7a0>
 801c2c8:	9b08      	ldr	r3, [sp, #32]
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	f000 80af 	beq.w	801c42e <_dtoa_r+0x8be>
 801c2d0:	2e00      	cmp	r6, #0
 801c2d2:	dd13      	ble.n	801c2fc <_dtoa_r+0x78c>
 801c2d4:	4639      	mov	r1, r7
 801c2d6:	4632      	mov	r2, r6
 801c2d8:	4620      	mov	r0, r4
 801c2da:	f000 fcd3 	bl	801cc84 <__pow5mult>
 801c2de:	ee18 2a10 	vmov	r2, s16
 801c2e2:	4601      	mov	r1, r0
 801c2e4:	4607      	mov	r7, r0
 801c2e6:	4620      	mov	r0, r4
 801c2e8:	f000 fc22 	bl	801cb30 <__multiply>
 801c2ec:	ee18 1a10 	vmov	r1, s16
 801c2f0:	4680      	mov	r8, r0
 801c2f2:	4620      	mov	r0, r4
 801c2f4:	f000 fb4e 	bl	801c994 <_Bfree>
 801c2f8:	ee08 8a10 	vmov	s16, r8
 801c2fc:	9b07      	ldr	r3, [sp, #28]
 801c2fe:	1b9a      	subs	r2, r3, r6
 801c300:	d006      	beq.n	801c310 <_dtoa_r+0x7a0>
 801c302:	ee18 1a10 	vmov	r1, s16
 801c306:	4620      	mov	r0, r4
 801c308:	f000 fcbc 	bl	801cc84 <__pow5mult>
 801c30c:	ee08 0a10 	vmov	s16, r0
 801c310:	2101      	movs	r1, #1
 801c312:	4620      	mov	r0, r4
 801c314:	f000 fbf6 	bl	801cb04 <__i2b>
 801c318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	4606      	mov	r6, r0
 801c31e:	f340 8088 	ble.w	801c432 <_dtoa_r+0x8c2>
 801c322:	461a      	mov	r2, r3
 801c324:	4601      	mov	r1, r0
 801c326:	4620      	mov	r0, r4
 801c328:	f000 fcac 	bl	801cc84 <__pow5mult>
 801c32c:	9b06      	ldr	r3, [sp, #24]
 801c32e:	2b01      	cmp	r3, #1
 801c330:	4606      	mov	r6, r0
 801c332:	f340 8081 	ble.w	801c438 <_dtoa_r+0x8c8>
 801c336:	f04f 0800 	mov.w	r8, #0
 801c33a:	6933      	ldr	r3, [r6, #16]
 801c33c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c340:	6918      	ldr	r0, [r3, #16]
 801c342:	f000 fb8f 	bl	801ca64 <__hi0bits>
 801c346:	f1c0 0020 	rsb	r0, r0, #32
 801c34a:	9b05      	ldr	r3, [sp, #20]
 801c34c:	4418      	add	r0, r3
 801c34e:	f010 001f 	ands.w	r0, r0, #31
 801c352:	f000 8092 	beq.w	801c47a <_dtoa_r+0x90a>
 801c356:	f1c0 0320 	rsb	r3, r0, #32
 801c35a:	2b04      	cmp	r3, #4
 801c35c:	f340 808a 	ble.w	801c474 <_dtoa_r+0x904>
 801c360:	f1c0 001c 	rsb	r0, r0, #28
 801c364:	9b04      	ldr	r3, [sp, #16]
 801c366:	4403      	add	r3, r0
 801c368:	9304      	str	r3, [sp, #16]
 801c36a:	9b05      	ldr	r3, [sp, #20]
 801c36c:	4403      	add	r3, r0
 801c36e:	4405      	add	r5, r0
 801c370:	9305      	str	r3, [sp, #20]
 801c372:	9b04      	ldr	r3, [sp, #16]
 801c374:	2b00      	cmp	r3, #0
 801c376:	dd07      	ble.n	801c388 <_dtoa_r+0x818>
 801c378:	ee18 1a10 	vmov	r1, s16
 801c37c:	461a      	mov	r2, r3
 801c37e:	4620      	mov	r0, r4
 801c380:	f000 fcda 	bl	801cd38 <__lshift>
 801c384:	ee08 0a10 	vmov	s16, r0
 801c388:	9b05      	ldr	r3, [sp, #20]
 801c38a:	2b00      	cmp	r3, #0
 801c38c:	dd05      	ble.n	801c39a <_dtoa_r+0x82a>
 801c38e:	4631      	mov	r1, r6
 801c390:	461a      	mov	r2, r3
 801c392:	4620      	mov	r0, r4
 801c394:	f000 fcd0 	bl	801cd38 <__lshift>
 801c398:	4606      	mov	r6, r0
 801c39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d06e      	beq.n	801c47e <_dtoa_r+0x90e>
 801c3a0:	ee18 0a10 	vmov	r0, s16
 801c3a4:	4631      	mov	r1, r6
 801c3a6:	f000 fd37 	bl	801ce18 <__mcmp>
 801c3aa:	2800      	cmp	r0, #0
 801c3ac:	da67      	bge.n	801c47e <_dtoa_r+0x90e>
 801c3ae:	9b00      	ldr	r3, [sp, #0]
 801c3b0:	3b01      	subs	r3, #1
 801c3b2:	ee18 1a10 	vmov	r1, s16
 801c3b6:	9300      	str	r3, [sp, #0]
 801c3b8:	220a      	movs	r2, #10
 801c3ba:	2300      	movs	r3, #0
 801c3bc:	4620      	mov	r0, r4
 801c3be:	f000 fb0b 	bl	801c9d8 <__multadd>
 801c3c2:	9b08      	ldr	r3, [sp, #32]
 801c3c4:	ee08 0a10 	vmov	s16, r0
 801c3c8:	2b00      	cmp	r3, #0
 801c3ca:	f000 81b1 	beq.w	801c730 <_dtoa_r+0xbc0>
 801c3ce:	2300      	movs	r3, #0
 801c3d0:	4639      	mov	r1, r7
 801c3d2:	220a      	movs	r2, #10
 801c3d4:	4620      	mov	r0, r4
 801c3d6:	f000 faff 	bl	801c9d8 <__multadd>
 801c3da:	9b02      	ldr	r3, [sp, #8]
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	4607      	mov	r7, r0
 801c3e0:	f300 808e 	bgt.w	801c500 <_dtoa_r+0x990>
 801c3e4:	9b06      	ldr	r3, [sp, #24]
 801c3e6:	2b02      	cmp	r3, #2
 801c3e8:	dc51      	bgt.n	801c48e <_dtoa_r+0x91e>
 801c3ea:	e089      	b.n	801c500 <_dtoa_r+0x990>
 801c3ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801c3ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c3f2:	e74b      	b.n	801c28c <_dtoa_r+0x71c>
 801c3f4:	9b03      	ldr	r3, [sp, #12]
 801c3f6:	1e5e      	subs	r6, r3, #1
 801c3f8:	9b07      	ldr	r3, [sp, #28]
 801c3fa:	42b3      	cmp	r3, r6
 801c3fc:	bfbf      	itttt	lt
 801c3fe:	9b07      	ldrlt	r3, [sp, #28]
 801c400:	9607      	strlt	r6, [sp, #28]
 801c402:	1af2      	sublt	r2, r6, r3
 801c404:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801c406:	bfb6      	itet	lt
 801c408:	189b      	addlt	r3, r3, r2
 801c40a:	1b9e      	subge	r6, r3, r6
 801c40c:	930a      	strlt	r3, [sp, #40]	; 0x28
 801c40e:	9b03      	ldr	r3, [sp, #12]
 801c410:	bfb8      	it	lt
 801c412:	2600      	movlt	r6, #0
 801c414:	2b00      	cmp	r3, #0
 801c416:	bfb7      	itett	lt
 801c418:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801c41c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801c420:	1a9d      	sublt	r5, r3, r2
 801c422:	2300      	movlt	r3, #0
 801c424:	e734      	b.n	801c290 <_dtoa_r+0x720>
 801c426:	9e07      	ldr	r6, [sp, #28]
 801c428:	9d04      	ldr	r5, [sp, #16]
 801c42a:	9f08      	ldr	r7, [sp, #32]
 801c42c:	e73b      	b.n	801c2a6 <_dtoa_r+0x736>
 801c42e:	9a07      	ldr	r2, [sp, #28]
 801c430:	e767      	b.n	801c302 <_dtoa_r+0x792>
 801c432:	9b06      	ldr	r3, [sp, #24]
 801c434:	2b01      	cmp	r3, #1
 801c436:	dc18      	bgt.n	801c46a <_dtoa_r+0x8fa>
 801c438:	f1ba 0f00 	cmp.w	sl, #0
 801c43c:	d115      	bne.n	801c46a <_dtoa_r+0x8fa>
 801c43e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c442:	b993      	cbnz	r3, 801c46a <_dtoa_r+0x8fa>
 801c444:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801c448:	0d1b      	lsrs	r3, r3, #20
 801c44a:	051b      	lsls	r3, r3, #20
 801c44c:	b183      	cbz	r3, 801c470 <_dtoa_r+0x900>
 801c44e:	9b04      	ldr	r3, [sp, #16]
 801c450:	3301      	adds	r3, #1
 801c452:	9304      	str	r3, [sp, #16]
 801c454:	9b05      	ldr	r3, [sp, #20]
 801c456:	3301      	adds	r3, #1
 801c458:	9305      	str	r3, [sp, #20]
 801c45a:	f04f 0801 	mov.w	r8, #1
 801c45e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c460:	2b00      	cmp	r3, #0
 801c462:	f47f af6a 	bne.w	801c33a <_dtoa_r+0x7ca>
 801c466:	2001      	movs	r0, #1
 801c468:	e76f      	b.n	801c34a <_dtoa_r+0x7da>
 801c46a:	f04f 0800 	mov.w	r8, #0
 801c46e:	e7f6      	b.n	801c45e <_dtoa_r+0x8ee>
 801c470:	4698      	mov	r8, r3
 801c472:	e7f4      	b.n	801c45e <_dtoa_r+0x8ee>
 801c474:	f43f af7d 	beq.w	801c372 <_dtoa_r+0x802>
 801c478:	4618      	mov	r0, r3
 801c47a:	301c      	adds	r0, #28
 801c47c:	e772      	b.n	801c364 <_dtoa_r+0x7f4>
 801c47e:	9b03      	ldr	r3, [sp, #12]
 801c480:	2b00      	cmp	r3, #0
 801c482:	dc37      	bgt.n	801c4f4 <_dtoa_r+0x984>
 801c484:	9b06      	ldr	r3, [sp, #24]
 801c486:	2b02      	cmp	r3, #2
 801c488:	dd34      	ble.n	801c4f4 <_dtoa_r+0x984>
 801c48a:	9b03      	ldr	r3, [sp, #12]
 801c48c:	9302      	str	r3, [sp, #8]
 801c48e:	9b02      	ldr	r3, [sp, #8]
 801c490:	b96b      	cbnz	r3, 801c4ae <_dtoa_r+0x93e>
 801c492:	4631      	mov	r1, r6
 801c494:	2205      	movs	r2, #5
 801c496:	4620      	mov	r0, r4
 801c498:	f000 fa9e 	bl	801c9d8 <__multadd>
 801c49c:	4601      	mov	r1, r0
 801c49e:	4606      	mov	r6, r0
 801c4a0:	ee18 0a10 	vmov	r0, s16
 801c4a4:	f000 fcb8 	bl	801ce18 <__mcmp>
 801c4a8:	2800      	cmp	r0, #0
 801c4aa:	f73f adbb 	bgt.w	801c024 <_dtoa_r+0x4b4>
 801c4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c4b0:	9d01      	ldr	r5, [sp, #4]
 801c4b2:	43db      	mvns	r3, r3
 801c4b4:	9300      	str	r3, [sp, #0]
 801c4b6:	f04f 0800 	mov.w	r8, #0
 801c4ba:	4631      	mov	r1, r6
 801c4bc:	4620      	mov	r0, r4
 801c4be:	f000 fa69 	bl	801c994 <_Bfree>
 801c4c2:	2f00      	cmp	r7, #0
 801c4c4:	f43f aea4 	beq.w	801c210 <_dtoa_r+0x6a0>
 801c4c8:	f1b8 0f00 	cmp.w	r8, #0
 801c4cc:	d005      	beq.n	801c4da <_dtoa_r+0x96a>
 801c4ce:	45b8      	cmp	r8, r7
 801c4d0:	d003      	beq.n	801c4da <_dtoa_r+0x96a>
 801c4d2:	4641      	mov	r1, r8
 801c4d4:	4620      	mov	r0, r4
 801c4d6:	f000 fa5d 	bl	801c994 <_Bfree>
 801c4da:	4639      	mov	r1, r7
 801c4dc:	4620      	mov	r0, r4
 801c4de:	f000 fa59 	bl	801c994 <_Bfree>
 801c4e2:	e695      	b.n	801c210 <_dtoa_r+0x6a0>
 801c4e4:	2600      	movs	r6, #0
 801c4e6:	4637      	mov	r7, r6
 801c4e8:	e7e1      	b.n	801c4ae <_dtoa_r+0x93e>
 801c4ea:	9700      	str	r7, [sp, #0]
 801c4ec:	4637      	mov	r7, r6
 801c4ee:	e599      	b.n	801c024 <_dtoa_r+0x4b4>
 801c4f0:	40240000 	.word	0x40240000
 801c4f4:	9b08      	ldr	r3, [sp, #32]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	f000 80ca 	beq.w	801c690 <_dtoa_r+0xb20>
 801c4fc:	9b03      	ldr	r3, [sp, #12]
 801c4fe:	9302      	str	r3, [sp, #8]
 801c500:	2d00      	cmp	r5, #0
 801c502:	dd05      	ble.n	801c510 <_dtoa_r+0x9a0>
 801c504:	4639      	mov	r1, r7
 801c506:	462a      	mov	r2, r5
 801c508:	4620      	mov	r0, r4
 801c50a:	f000 fc15 	bl	801cd38 <__lshift>
 801c50e:	4607      	mov	r7, r0
 801c510:	f1b8 0f00 	cmp.w	r8, #0
 801c514:	d05b      	beq.n	801c5ce <_dtoa_r+0xa5e>
 801c516:	6879      	ldr	r1, [r7, #4]
 801c518:	4620      	mov	r0, r4
 801c51a:	f000 f9fb 	bl	801c914 <_Balloc>
 801c51e:	4605      	mov	r5, r0
 801c520:	b928      	cbnz	r0, 801c52e <_dtoa_r+0x9be>
 801c522:	4b87      	ldr	r3, [pc, #540]	; (801c740 <_dtoa_r+0xbd0>)
 801c524:	4602      	mov	r2, r0
 801c526:	f240 21ea 	movw	r1, #746	; 0x2ea
 801c52a:	f7ff bb3b 	b.w	801bba4 <_dtoa_r+0x34>
 801c52e:	693a      	ldr	r2, [r7, #16]
 801c530:	3202      	adds	r2, #2
 801c532:	0092      	lsls	r2, r2, #2
 801c534:	f107 010c 	add.w	r1, r7, #12
 801c538:	300c      	adds	r0, #12
 801c53a:	f7fe fba7 	bl	801ac8c <memcpy>
 801c53e:	2201      	movs	r2, #1
 801c540:	4629      	mov	r1, r5
 801c542:	4620      	mov	r0, r4
 801c544:	f000 fbf8 	bl	801cd38 <__lshift>
 801c548:	9b01      	ldr	r3, [sp, #4]
 801c54a:	f103 0901 	add.w	r9, r3, #1
 801c54e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c552:	4413      	add	r3, r2
 801c554:	9305      	str	r3, [sp, #20]
 801c556:	f00a 0301 	and.w	r3, sl, #1
 801c55a:	46b8      	mov	r8, r7
 801c55c:	9304      	str	r3, [sp, #16]
 801c55e:	4607      	mov	r7, r0
 801c560:	4631      	mov	r1, r6
 801c562:	ee18 0a10 	vmov	r0, s16
 801c566:	f7ff fa77 	bl	801ba58 <quorem>
 801c56a:	4641      	mov	r1, r8
 801c56c:	9002      	str	r0, [sp, #8]
 801c56e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c572:	ee18 0a10 	vmov	r0, s16
 801c576:	f000 fc4f 	bl	801ce18 <__mcmp>
 801c57a:	463a      	mov	r2, r7
 801c57c:	9003      	str	r0, [sp, #12]
 801c57e:	4631      	mov	r1, r6
 801c580:	4620      	mov	r0, r4
 801c582:	f000 fc65 	bl	801ce50 <__mdiff>
 801c586:	68c2      	ldr	r2, [r0, #12]
 801c588:	f109 3bff 	add.w	fp, r9, #4294967295
 801c58c:	4605      	mov	r5, r0
 801c58e:	bb02      	cbnz	r2, 801c5d2 <_dtoa_r+0xa62>
 801c590:	4601      	mov	r1, r0
 801c592:	ee18 0a10 	vmov	r0, s16
 801c596:	f000 fc3f 	bl	801ce18 <__mcmp>
 801c59a:	4602      	mov	r2, r0
 801c59c:	4629      	mov	r1, r5
 801c59e:	4620      	mov	r0, r4
 801c5a0:	9207      	str	r2, [sp, #28]
 801c5a2:	f000 f9f7 	bl	801c994 <_Bfree>
 801c5a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801c5aa:	ea43 0102 	orr.w	r1, r3, r2
 801c5ae:	9b04      	ldr	r3, [sp, #16]
 801c5b0:	430b      	orrs	r3, r1
 801c5b2:	464d      	mov	r5, r9
 801c5b4:	d10f      	bne.n	801c5d6 <_dtoa_r+0xa66>
 801c5b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c5ba:	d02a      	beq.n	801c612 <_dtoa_r+0xaa2>
 801c5bc:	9b03      	ldr	r3, [sp, #12]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	dd02      	ble.n	801c5c8 <_dtoa_r+0xa58>
 801c5c2:	9b02      	ldr	r3, [sp, #8]
 801c5c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801c5c8:	f88b a000 	strb.w	sl, [fp]
 801c5cc:	e775      	b.n	801c4ba <_dtoa_r+0x94a>
 801c5ce:	4638      	mov	r0, r7
 801c5d0:	e7ba      	b.n	801c548 <_dtoa_r+0x9d8>
 801c5d2:	2201      	movs	r2, #1
 801c5d4:	e7e2      	b.n	801c59c <_dtoa_r+0xa2c>
 801c5d6:	9b03      	ldr	r3, [sp, #12]
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	db04      	blt.n	801c5e6 <_dtoa_r+0xa76>
 801c5dc:	9906      	ldr	r1, [sp, #24]
 801c5de:	430b      	orrs	r3, r1
 801c5e0:	9904      	ldr	r1, [sp, #16]
 801c5e2:	430b      	orrs	r3, r1
 801c5e4:	d122      	bne.n	801c62c <_dtoa_r+0xabc>
 801c5e6:	2a00      	cmp	r2, #0
 801c5e8:	ddee      	ble.n	801c5c8 <_dtoa_r+0xa58>
 801c5ea:	ee18 1a10 	vmov	r1, s16
 801c5ee:	2201      	movs	r2, #1
 801c5f0:	4620      	mov	r0, r4
 801c5f2:	f000 fba1 	bl	801cd38 <__lshift>
 801c5f6:	4631      	mov	r1, r6
 801c5f8:	ee08 0a10 	vmov	s16, r0
 801c5fc:	f000 fc0c 	bl	801ce18 <__mcmp>
 801c600:	2800      	cmp	r0, #0
 801c602:	dc03      	bgt.n	801c60c <_dtoa_r+0xa9c>
 801c604:	d1e0      	bne.n	801c5c8 <_dtoa_r+0xa58>
 801c606:	f01a 0f01 	tst.w	sl, #1
 801c60a:	d0dd      	beq.n	801c5c8 <_dtoa_r+0xa58>
 801c60c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c610:	d1d7      	bne.n	801c5c2 <_dtoa_r+0xa52>
 801c612:	2339      	movs	r3, #57	; 0x39
 801c614:	f88b 3000 	strb.w	r3, [fp]
 801c618:	462b      	mov	r3, r5
 801c61a:	461d      	mov	r5, r3
 801c61c:	3b01      	subs	r3, #1
 801c61e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801c622:	2a39      	cmp	r2, #57	; 0x39
 801c624:	d071      	beq.n	801c70a <_dtoa_r+0xb9a>
 801c626:	3201      	adds	r2, #1
 801c628:	701a      	strb	r2, [r3, #0]
 801c62a:	e746      	b.n	801c4ba <_dtoa_r+0x94a>
 801c62c:	2a00      	cmp	r2, #0
 801c62e:	dd07      	ble.n	801c640 <_dtoa_r+0xad0>
 801c630:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801c634:	d0ed      	beq.n	801c612 <_dtoa_r+0xaa2>
 801c636:	f10a 0301 	add.w	r3, sl, #1
 801c63a:	f88b 3000 	strb.w	r3, [fp]
 801c63e:	e73c      	b.n	801c4ba <_dtoa_r+0x94a>
 801c640:	9b05      	ldr	r3, [sp, #20]
 801c642:	f809 ac01 	strb.w	sl, [r9, #-1]
 801c646:	4599      	cmp	r9, r3
 801c648:	d047      	beq.n	801c6da <_dtoa_r+0xb6a>
 801c64a:	ee18 1a10 	vmov	r1, s16
 801c64e:	2300      	movs	r3, #0
 801c650:	220a      	movs	r2, #10
 801c652:	4620      	mov	r0, r4
 801c654:	f000 f9c0 	bl	801c9d8 <__multadd>
 801c658:	45b8      	cmp	r8, r7
 801c65a:	ee08 0a10 	vmov	s16, r0
 801c65e:	f04f 0300 	mov.w	r3, #0
 801c662:	f04f 020a 	mov.w	r2, #10
 801c666:	4641      	mov	r1, r8
 801c668:	4620      	mov	r0, r4
 801c66a:	d106      	bne.n	801c67a <_dtoa_r+0xb0a>
 801c66c:	f000 f9b4 	bl	801c9d8 <__multadd>
 801c670:	4680      	mov	r8, r0
 801c672:	4607      	mov	r7, r0
 801c674:	f109 0901 	add.w	r9, r9, #1
 801c678:	e772      	b.n	801c560 <_dtoa_r+0x9f0>
 801c67a:	f000 f9ad 	bl	801c9d8 <__multadd>
 801c67e:	4639      	mov	r1, r7
 801c680:	4680      	mov	r8, r0
 801c682:	2300      	movs	r3, #0
 801c684:	220a      	movs	r2, #10
 801c686:	4620      	mov	r0, r4
 801c688:	f000 f9a6 	bl	801c9d8 <__multadd>
 801c68c:	4607      	mov	r7, r0
 801c68e:	e7f1      	b.n	801c674 <_dtoa_r+0xb04>
 801c690:	9b03      	ldr	r3, [sp, #12]
 801c692:	9302      	str	r3, [sp, #8]
 801c694:	9d01      	ldr	r5, [sp, #4]
 801c696:	ee18 0a10 	vmov	r0, s16
 801c69a:	4631      	mov	r1, r6
 801c69c:	f7ff f9dc 	bl	801ba58 <quorem>
 801c6a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801c6a4:	9b01      	ldr	r3, [sp, #4]
 801c6a6:	f805 ab01 	strb.w	sl, [r5], #1
 801c6aa:	1aea      	subs	r2, r5, r3
 801c6ac:	9b02      	ldr	r3, [sp, #8]
 801c6ae:	4293      	cmp	r3, r2
 801c6b0:	dd09      	ble.n	801c6c6 <_dtoa_r+0xb56>
 801c6b2:	ee18 1a10 	vmov	r1, s16
 801c6b6:	2300      	movs	r3, #0
 801c6b8:	220a      	movs	r2, #10
 801c6ba:	4620      	mov	r0, r4
 801c6bc:	f000 f98c 	bl	801c9d8 <__multadd>
 801c6c0:	ee08 0a10 	vmov	s16, r0
 801c6c4:	e7e7      	b.n	801c696 <_dtoa_r+0xb26>
 801c6c6:	9b02      	ldr	r3, [sp, #8]
 801c6c8:	2b00      	cmp	r3, #0
 801c6ca:	bfc8      	it	gt
 801c6cc:	461d      	movgt	r5, r3
 801c6ce:	9b01      	ldr	r3, [sp, #4]
 801c6d0:	bfd8      	it	le
 801c6d2:	2501      	movle	r5, #1
 801c6d4:	441d      	add	r5, r3
 801c6d6:	f04f 0800 	mov.w	r8, #0
 801c6da:	ee18 1a10 	vmov	r1, s16
 801c6de:	2201      	movs	r2, #1
 801c6e0:	4620      	mov	r0, r4
 801c6e2:	f000 fb29 	bl	801cd38 <__lshift>
 801c6e6:	4631      	mov	r1, r6
 801c6e8:	ee08 0a10 	vmov	s16, r0
 801c6ec:	f000 fb94 	bl	801ce18 <__mcmp>
 801c6f0:	2800      	cmp	r0, #0
 801c6f2:	dc91      	bgt.n	801c618 <_dtoa_r+0xaa8>
 801c6f4:	d102      	bne.n	801c6fc <_dtoa_r+0xb8c>
 801c6f6:	f01a 0f01 	tst.w	sl, #1
 801c6fa:	d18d      	bne.n	801c618 <_dtoa_r+0xaa8>
 801c6fc:	462b      	mov	r3, r5
 801c6fe:	461d      	mov	r5, r3
 801c700:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c704:	2a30      	cmp	r2, #48	; 0x30
 801c706:	d0fa      	beq.n	801c6fe <_dtoa_r+0xb8e>
 801c708:	e6d7      	b.n	801c4ba <_dtoa_r+0x94a>
 801c70a:	9a01      	ldr	r2, [sp, #4]
 801c70c:	429a      	cmp	r2, r3
 801c70e:	d184      	bne.n	801c61a <_dtoa_r+0xaaa>
 801c710:	9b00      	ldr	r3, [sp, #0]
 801c712:	3301      	adds	r3, #1
 801c714:	9300      	str	r3, [sp, #0]
 801c716:	2331      	movs	r3, #49	; 0x31
 801c718:	7013      	strb	r3, [r2, #0]
 801c71a:	e6ce      	b.n	801c4ba <_dtoa_r+0x94a>
 801c71c:	4b09      	ldr	r3, [pc, #36]	; (801c744 <_dtoa_r+0xbd4>)
 801c71e:	f7ff ba95 	b.w	801bc4c <_dtoa_r+0xdc>
 801c722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801c724:	2b00      	cmp	r3, #0
 801c726:	f47f aa6e 	bne.w	801bc06 <_dtoa_r+0x96>
 801c72a:	4b07      	ldr	r3, [pc, #28]	; (801c748 <_dtoa_r+0xbd8>)
 801c72c:	f7ff ba8e 	b.w	801bc4c <_dtoa_r+0xdc>
 801c730:	9b02      	ldr	r3, [sp, #8]
 801c732:	2b00      	cmp	r3, #0
 801c734:	dcae      	bgt.n	801c694 <_dtoa_r+0xb24>
 801c736:	9b06      	ldr	r3, [sp, #24]
 801c738:	2b02      	cmp	r3, #2
 801c73a:	f73f aea8 	bgt.w	801c48e <_dtoa_r+0x91e>
 801c73e:	e7a9      	b.n	801c694 <_dtoa_r+0xb24>
 801c740:	0801de27 	.word	0x0801de27
 801c744:	0801dd84 	.word	0x0801dd84
 801c748:	0801dda8 	.word	0x0801dda8

0801c74c <__sflush_r>:
 801c74c:	898a      	ldrh	r2, [r1, #12]
 801c74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c752:	4605      	mov	r5, r0
 801c754:	0710      	lsls	r0, r2, #28
 801c756:	460c      	mov	r4, r1
 801c758:	d458      	bmi.n	801c80c <__sflush_r+0xc0>
 801c75a:	684b      	ldr	r3, [r1, #4]
 801c75c:	2b00      	cmp	r3, #0
 801c75e:	dc05      	bgt.n	801c76c <__sflush_r+0x20>
 801c760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c762:	2b00      	cmp	r3, #0
 801c764:	dc02      	bgt.n	801c76c <__sflush_r+0x20>
 801c766:	2000      	movs	r0, #0
 801c768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c76c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c76e:	2e00      	cmp	r6, #0
 801c770:	d0f9      	beq.n	801c766 <__sflush_r+0x1a>
 801c772:	2300      	movs	r3, #0
 801c774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c778:	682f      	ldr	r7, [r5, #0]
 801c77a:	602b      	str	r3, [r5, #0]
 801c77c:	d032      	beq.n	801c7e4 <__sflush_r+0x98>
 801c77e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c780:	89a3      	ldrh	r3, [r4, #12]
 801c782:	075a      	lsls	r2, r3, #29
 801c784:	d505      	bpl.n	801c792 <__sflush_r+0x46>
 801c786:	6863      	ldr	r3, [r4, #4]
 801c788:	1ac0      	subs	r0, r0, r3
 801c78a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c78c:	b10b      	cbz	r3, 801c792 <__sflush_r+0x46>
 801c78e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c790:	1ac0      	subs	r0, r0, r3
 801c792:	2300      	movs	r3, #0
 801c794:	4602      	mov	r2, r0
 801c796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c798:	6a21      	ldr	r1, [r4, #32]
 801c79a:	4628      	mov	r0, r5
 801c79c:	47b0      	blx	r6
 801c79e:	1c43      	adds	r3, r0, #1
 801c7a0:	89a3      	ldrh	r3, [r4, #12]
 801c7a2:	d106      	bne.n	801c7b2 <__sflush_r+0x66>
 801c7a4:	6829      	ldr	r1, [r5, #0]
 801c7a6:	291d      	cmp	r1, #29
 801c7a8:	d82c      	bhi.n	801c804 <__sflush_r+0xb8>
 801c7aa:	4a2a      	ldr	r2, [pc, #168]	; (801c854 <__sflush_r+0x108>)
 801c7ac:	40ca      	lsrs	r2, r1
 801c7ae:	07d6      	lsls	r6, r2, #31
 801c7b0:	d528      	bpl.n	801c804 <__sflush_r+0xb8>
 801c7b2:	2200      	movs	r2, #0
 801c7b4:	6062      	str	r2, [r4, #4]
 801c7b6:	04d9      	lsls	r1, r3, #19
 801c7b8:	6922      	ldr	r2, [r4, #16]
 801c7ba:	6022      	str	r2, [r4, #0]
 801c7bc:	d504      	bpl.n	801c7c8 <__sflush_r+0x7c>
 801c7be:	1c42      	adds	r2, r0, #1
 801c7c0:	d101      	bne.n	801c7c6 <__sflush_r+0x7a>
 801c7c2:	682b      	ldr	r3, [r5, #0]
 801c7c4:	b903      	cbnz	r3, 801c7c8 <__sflush_r+0x7c>
 801c7c6:	6560      	str	r0, [r4, #84]	; 0x54
 801c7c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c7ca:	602f      	str	r7, [r5, #0]
 801c7cc:	2900      	cmp	r1, #0
 801c7ce:	d0ca      	beq.n	801c766 <__sflush_r+0x1a>
 801c7d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c7d4:	4299      	cmp	r1, r3
 801c7d6:	d002      	beq.n	801c7de <__sflush_r+0x92>
 801c7d8:	4628      	mov	r0, r5
 801c7da:	f7fe fa6d 	bl	801acb8 <_free_r>
 801c7de:	2000      	movs	r0, #0
 801c7e0:	6360      	str	r0, [r4, #52]	; 0x34
 801c7e2:	e7c1      	b.n	801c768 <__sflush_r+0x1c>
 801c7e4:	6a21      	ldr	r1, [r4, #32]
 801c7e6:	2301      	movs	r3, #1
 801c7e8:	4628      	mov	r0, r5
 801c7ea:	47b0      	blx	r6
 801c7ec:	1c41      	adds	r1, r0, #1
 801c7ee:	d1c7      	bne.n	801c780 <__sflush_r+0x34>
 801c7f0:	682b      	ldr	r3, [r5, #0]
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d0c4      	beq.n	801c780 <__sflush_r+0x34>
 801c7f6:	2b1d      	cmp	r3, #29
 801c7f8:	d001      	beq.n	801c7fe <__sflush_r+0xb2>
 801c7fa:	2b16      	cmp	r3, #22
 801c7fc:	d101      	bne.n	801c802 <__sflush_r+0xb6>
 801c7fe:	602f      	str	r7, [r5, #0]
 801c800:	e7b1      	b.n	801c766 <__sflush_r+0x1a>
 801c802:	89a3      	ldrh	r3, [r4, #12]
 801c804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c808:	81a3      	strh	r3, [r4, #12]
 801c80a:	e7ad      	b.n	801c768 <__sflush_r+0x1c>
 801c80c:	690f      	ldr	r7, [r1, #16]
 801c80e:	2f00      	cmp	r7, #0
 801c810:	d0a9      	beq.n	801c766 <__sflush_r+0x1a>
 801c812:	0793      	lsls	r3, r2, #30
 801c814:	680e      	ldr	r6, [r1, #0]
 801c816:	bf08      	it	eq
 801c818:	694b      	ldreq	r3, [r1, #20]
 801c81a:	600f      	str	r7, [r1, #0]
 801c81c:	bf18      	it	ne
 801c81e:	2300      	movne	r3, #0
 801c820:	eba6 0807 	sub.w	r8, r6, r7
 801c824:	608b      	str	r3, [r1, #8]
 801c826:	f1b8 0f00 	cmp.w	r8, #0
 801c82a:	dd9c      	ble.n	801c766 <__sflush_r+0x1a>
 801c82c:	6a21      	ldr	r1, [r4, #32]
 801c82e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c830:	4643      	mov	r3, r8
 801c832:	463a      	mov	r2, r7
 801c834:	4628      	mov	r0, r5
 801c836:	47b0      	blx	r6
 801c838:	2800      	cmp	r0, #0
 801c83a:	dc06      	bgt.n	801c84a <__sflush_r+0xfe>
 801c83c:	89a3      	ldrh	r3, [r4, #12]
 801c83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c842:	81a3      	strh	r3, [r4, #12]
 801c844:	f04f 30ff 	mov.w	r0, #4294967295
 801c848:	e78e      	b.n	801c768 <__sflush_r+0x1c>
 801c84a:	4407      	add	r7, r0
 801c84c:	eba8 0800 	sub.w	r8, r8, r0
 801c850:	e7e9      	b.n	801c826 <__sflush_r+0xda>
 801c852:	bf00      	nop
 801c854:	20400001 	.word	0x20400001

0801c858 <_fflush_r>:
 801c858:	b538      	push	{r3, r4, r5, lr}
 801c85a:	690b      	ldr	r3, [r1, #16]
 801c85c:	4605      	mov	r5, r0
 801c85e:	460c      	mov	r4, r1
 801c860:	b913      	cbnz	r3, 801c868 <_fflush_r+0x10>
 801c862:	2500      	movs	r5, #0
 801c864:	4628      	mov	r0, r5
 801c866:	bd38      	pop	{r3, r4, r5, pc}
 801c868:	b118      	cbz	r0, 801c872 <_fflush_r+0x1a>
 801c86a:	6983      	ldr	r3, [r0, #24]
 801c86c:	b90b      	cbnz	r3, 801c872 <_fflush_r+0x1a>
 801c86e:	f7fe f937 	bl	801aae0 <__sinit>
 801c872:	4b14      	ldr	r3, [pc, #80]	; (801c8c4 <_fflush_r+0x6c>)
 801c874:	429c      	cmp	r4, r3
 801c876:	d11b      	bne.n	801c8b0 <_fflush_r+0x58>
 801c878:	686c      	ldr	r4, [r5, #4]
 801c87a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d0ef      	beq.n	801c862 <_fflush_r+0xa>
 801c882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801c884:	07d0      	lsls	r0, r2, #31
 801c886:	d404      	bmi.n	801c892 <_fflush_r+0x3a>
 801c888:	0599      	lsls	r1, r3, #22
 801c88a:	d402      	bmi.n	801c892 <_fflush_r+0x3a>
 801c88c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c88e:	f7fe f9ea 	bl	801ac66 <__retarget_lock_acquire_recursive>
 801c892:	4628      	mov	r0, r5
 801c894:	4621      	mov	r1, r4
 801c896:	f7ff ff59 	bl	801c74c <__sflush_r>
 801c89a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801c89c:	07da      	lsls	r2, r3, #31
 801c89e:	4605      	mov	r5, r0
 801c8a0:	d4e0      	bmi.n	801c864 <_fflush_r+0xc>
 801c8a2:	89a3      	ldrh	r3, [r4, #12]
 801c8a4:	059b      	lsls	r3, r3, #22
 801c8a6:	d4dd      	bmi.n	801c864 <_fflush_r+0xc>
 801c8a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c8aa:	f7fe f9de 	bl	801ac6a <__retarget_lock_release_recursive>
 801c8ae:	e7d9      	b.n	801c864 <_fflush_r+0xc>
 801c8b0:	4b05      	ldr	r3, [pc, #20]	; (801c8c8 <_fflush_r+0x70>)
 801c8b2:	429c      	cmp	r4, r3
 801c8b4:	d101      	bne.n	801c8ba <_fflush_r+0x62>
 801c8b6:	68ac      	ldr	r4, [r5, #8]
 801c8b8:	e7df      	b.n	801c87a <_fflush_r+0x22>
 801c8ba:	4b04      	ldr	r3, [pc, #16]	; (801c8cc <_fflush_r+0x74>)
 801c8bc:	429c      	cmp	r4, r3
 801c8be:	bf08      	it	eq
 801c8c0:	68ec      	ldreq	r4, [r5, #12]
 801c8c2:	e7da      	b.n	801c87a <_fflush_r+0x22>
 801c8c4:	0801dd30 	.word	0x0801dd30
 801c8c8:	0801dd50 	.word	0x0801dd50
 801c8cc:	0801dd10 	.word	0x0801dd10

0801c8d0 <_localeconv_r>:
 801c8d0:	4800      	ldr	r0, [pc, #0]	; (801c8d4 <_localeconv_r+0x4>)
 801c8d2:	4770      	bx	lr
 801c8d4:	20000194 	.word	0x20000194

0801c8d8 <_lseek_r>:
 801c8d8:	b538      	push	{r3, r4, r5, lr}
 801c8da:	4d07      	ldr	r5, [pc, #28]	; (801c8f8 <_lseek_r+0x20>)
 801c8dc:	4604      	mov	r4, r0
 801c8de:	4608      	mov	r0, r1
 801c8e0:	4611      	mov	r1, r2
 801c8e2:	2200      	movs	r2, #0
 801c8e4:	602a      	str	r2, [r5, #0]
 801c8e6:	461a      	mov	r2, r3
 801c8e8:	f7f1 ffe2 	bl	800e8b0 <_lseek>
 801c8ec:	1c43      	adds	r3, r0, #1
 801c8ee:	d102      	bne.n	801c8f6 <_lseek_r+0x1e>
 801c8f0:	682b      	ldr	r3, [r5, #0]
 801c8f2:	b103      	cbz	r3, 801c8f6 <_lseek_r+0x1e>
 801c8f4:	6023      	str	r3, [r4, #0]
 801c8f6:	bd38      	pop	{r3, r4, r5, pc}
 801c8f8:	2000a4a8 	.word	0x2000a4a8

0801c8fc <__malloc_lock>:
 801c8fc:	4801      	ldr	r0, [pc, #4]	; (801c904 <__malloc_lock+0x8>)
 801c8fe:	f7fe b9b2 	b.w	801ac66 <__retarget_lock_acquire_recursive>
 801c902:	bf00      	nop
 801c904:	2000a49d 	.word	0x2000a49d

0801c908 <__malloc_unlock>:
 801c908:	4801      	ldr	r0, [pc, #4]	; (801c910 <__malloc_unlock+0x8>)
 801c90a:	f7fe b9ae 	b.w	801ac6a <__retarget_lock_release_recursive>
 801c90e:	bf00      	nop
 801c910:	2000a49d 	.word	0x2000a49d

0801c914 <_Balloc>:
 801c914:	b570      	push	{r4, r5, r6, lr}
 801c916:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c918:	4604      	mov	r4, r0
 801c91a:	460d      	mov	r5, r1
 801c91c:	b976      	cbnz	r6, 801c93c <_Balloc+0x28>
 801c91e:	2010      	movs	r0, #16
 801c920:	f7fe f9a4 	bl	801ac6c <malloc>
 801c924:	4602      	mov	r2, r0
 801c926:	6260      	str	r0, [r4, #36]	; 0x24
 801c928:	b920      	cbnz	r0, 801c934 <_Balloc+0x20>
 801c92a:	4b18      	ldr	r3, [pc, #96]	; (801c98c <_Balloc+0x78>)
 801c92c:	4818      	ldr	r0, [pc, #96]	; (801c990 <_Balloc+0x7c>)
 801c92e:	2166      	movs	r1, #102	; 0x66
 801c930:	f000 fb9c 	bl	801d06c <__assert_func>
 801c934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c938:	6006      	str	r6, [r0, #0]
 801c93a:	60c6      	str	r6, [r0, #12]
 801c93c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c93e:	68f3      	ldr	r3, [r6, #12]
 801c940:	b183      	cbz	r3, 801c964 <_Balloc+0x50>
 801c942:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c944:	68db      	ldr	r3, [r3, #12]
 801c946:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c94a:	b9b8      	cbnz	r0, 801c97c <_Balloc+0x68>
 801c94c:	2101      	movs	r1, #1
 801c94e:	fa01 f605 	lsl.w	r6, r1, r5
 801c952:	1d72      	adds	r2, r6, #5
 801c954:	0092      	lsls	r2, r2, #2
 801c956:	4620      	mov	r0, r4
 801c958:	f000 fb60 	bl	801d01c <_calloc_r>
 801c95c:	b160      	cbz	r0, 801c978 <_Balloc+0x64>
 801c95e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c962:	e00e      	b.n	801c982 <_Balloc+0x6e>
 801c964:	2221      	movs	r2, #33	; 0x21
 801c966:	2104      	movs	r1, #4
 801c968:	4620      	mov	r0, r4
 801c96a:	f000 fb57 	bl	801d01c <_calloc_r>
 801c96e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c970:	60f0      	str	r0, [r6, #12]
 801c972:	68db      	ldr	r3, [r3, #12]
 801c974:	2b00      	cmp	r3, #0
 801c976:	d1e4      	bne.n	801c942 <_Balloc+0x2e>
 801c978:	2000      	movs	r0, #0
 801c97a:	bd70      	pop	{r4, r5, r6, pc}
 801c97c:	6802      	ldr	r2, [r0, #0]
 801c97e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c982:	2300      	movs	r3, #0
 801c984:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c988:	e7f7      	b.n	801c97a <_Balloc+0x66>
 801c98a:	bf00      	nop
 801c98c:	0801ddb5 	.word	0x0801ddb5
 801c990:	0801de38 	.word	0x0801de38

0801c994 <_Bfree>:
 801c994:	b570      	push	{r4, r5, r6, lr}
 801c996:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c998:	4605      	mov	r5, r0
 801c99a:	460c      	mov	r4, r1
 801c99c:	b976      	cbnz	r6, 801c9bc <_Bfree+0x28>
 801c99e:	2010      	movs	r0, #16
 801c9a0:	f7fe f964 	bl	801ac6c <malloc>
 801c9a4:	4602      	mov	r2, r0
 801c9a6:	6268      	str	r0, [r5, #36]	; 0x24
 801c9a8:	b920      	cbnz	r0, 801c9b4 <_Bfree+0x20>
 801c9aa:	4b09      	ldr	r3, [pc, #36]	; (801c9d0 <_Bfree+0x3c>)
 801c9ac:	4809      	ldr	r0, [pc, #36]	; (801c9d4 <_Bfree+0x40>)
 801c9ae:	218a      	movs	r1, #138	; 0x8a
 801c9b0:	f000 fb5c 	bl	801d06c <__assert_func>
 801c9b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c9b8:	6006      	str	r6, [r0, #0]
 801c9ba:	60c6      	str	r6, [r0, #12]
 801c9bc:	b13c      	cbz	r4, 801c9ce <_Bfree+0x3a>
 801c9be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c9c0:	6862      	ldr	r2, [r4, #4]
 801c9c2:	68db      	ldr	r3, [r3, #12]
 801c9c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c9c8:	6021      	str	r1, [r4, #0]
 801c9ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c9ce:	bd70      	pop	{r4, r5, r6, pc}
 801c9d0:	0801ddb5 	.word	0x0801ddb5
 801c9d4:	0801de38 	.word	0x0801de38

0801c9d8 <__multadd>:
 801c9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c9dc:	690d      	ldr	r5, [r1, #16]
 801c9de:	4607      	mov	r7, r0
 801c9e0:	460c      	mov	r4, r1
 801c9e2:	461e      	mov	r6, r3
 801c9e4:	f101 0c14 	add.w	ip, r1, #20
 801c9e8:	2000      	movs	r0, #0
 801c9ea:	f8dc 3000 	ldr.w	r3, [ip]
 801c9ee:	b299      	uxth	r1, r3
 801c9f0:	fb02 6101 	mla	r1, r2, r1, r6
 801c9f4:	0c1e      	lsrs	r6, r3, #16
 801c9f6:	0c0b      	lsrs	r3, r1, #16
 801c9f8:	fb02 3306 	mla	r3, r2, r6, r3
 801c9fc:	b289      	uxth	r1, r1
 801c9fe:	3001      	adds	r0, #1
 801ca00:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801ca04:	4285      	cmp	r5, r0
 801ca06:	f84c 1b04 	str.w	r1, [ip], #4
 801ca0a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801ca0e:	dcec      	bgt.n	801c9ea <__multadd+0x12>
 801ca10:	b30e      	cbz	r6, 801ca56 <__multadd+0x7e>
 801ca12:	68a3      	ldr	r3, [r4, #8]
 801ca14:	42ab      	cmp	r3, r5
 801ca16:	dc19      	bgt.n	801ca4c <__multadd+0x74>
 801ca18:	6861      	ldr	r1, [r4, #4]
 801ca1a:	4638      	mov	r0, r7
 801ca1c:	3101      	adds	r1, #1
 801ca1e:	f7ff ff79 	bl	801c914 <_Balloc>
 801ca22:	4680      	mov	r8, r0
 801ca24:	b928      	cbnz	r0, 801ca32 <__multadd+0x5a>
 801ca26:	4602      	mov	r2, r0
 801ca28:	4b0c      	ldr	r3, [pc, #48]	; (801ca5c <__multadd+0x84>)
 801ca2a:	480d      	ldr	r0, [pc, #52]	; (801ca60 <__multadd+0x88>)
 801ca2c:	21b5      	movs	r1, #181	; 0xb5
 801ca2e:	f000 fb1d 	bl	801d06c <__assert_func>
 801ca32:	6922      	ldr	r2, [r4, #16]
 801ca34:	3202      	adds	r2, #2
 801ca36:	f104 010c 	add.w	r1, r4, #12
 801ca3a:	0092      	lsls	r2, r2, #2
 801ca3c:	300c      	adds	r0, #12
 801ca3e:	f7fe f925 	bl	801ac8c <memcpy>
 801ca42:	4621      	mov	r1, r4
 801ca44:	4638      	mov	r0, r7
 801ca46:	f7ff ffa5 	bl	801c994 <_Bfree>
 801ca4a:	4644      	mov	r4, r8
 801ca4c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801ca50:	3501      	adds	r5, #1
 801ca52:	615e      	str	r6, [r3, #20]
 801ca54:	6125      	str	r5, [r4, #16]
 801ca56:	4620      	mov	r0, r4
 801ca58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ca5c:	0801de27 	.word	0x0801de27
 801ca60:	0801de38 	.word	0x0801de38

0801ca64 <__hi0bits>:
 801ca64:	0c03      	lsrs	r3, r0, #16
 801ca66:	041b      	lsls	r3, r3, #16
 801ca68:	b9d3      	cbnz	r3, 801caa0 <__hi0bits+0x3c>
 801ca6a:	0400      	lsls	r0, r0, #16
 801ca6c:	2310      	movs	r3, #16
 801ca6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ca72:	bf04      	itt	eq
 801ca74:	0200      	lsleq	r0, r0, #8
 801ca76:	3308      	addeq	r3, #8
 801ca78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ca7c:	bf04      	itt	eq
 801ca7e:	0100      	lsleq	r0, r0, #4
 801ca80:	3304      	addeq	r3, #4
 801ca82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ca86:	bf04      	itt	eq
 801ca88:	0080      	lsleq	r0, r0, #2
 801ca8a:	3302      	addeq	r3, #2
 801ca8c:	2800      	cmp	r0, #0
 801ca8e:	db05      	blt.n	801ca9c <__hi0bits+0x38>
 801ca90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ca94:	f103 0301 	add.w	r3, r3, #1
 801ca98:	bf08      	it	eq
 801ca9a:	2320      	moveq	r3, #32
 801ca9c:	4618      	mov	r0, r3
 801ca9e:	4770      	bx	lr
 801caa0:	2300      	movs	r3, #0
 801caa2:	e7e4      	b.n	801ca6e <__hi0bits+0xa>

0801caa4 <__lo0bits>:
 801caa4:	6803      	ldr	r3, [r0, #0]
 801caa6:	f013 0207 	ands.w	r2, r3, #7
 801caaa:	4601      	mov	r1, r0
 801caac:	d00b      	beq.n	801cac6 <__lo0bits+0x22>
 801caae:	07da      	lsls	r2, r3, #31
 801cab0:	d423      	bmi.n	801cafa <__lo0bits+0x56>
 801cab2:	0798      	lsls	r0, r3, #30
 801cab4:	bf49      	itett	mi
 801cab6:	085b      	lsrmi	r3, r3, #1
 801cab8:	089b      	lsrpl	r3, r3, #2
 801caba:	2001      	movmi	r0, #1
 801cabc:	600b      	strmi	r3, [r1, #0]
 801cabe:	bf5c      	itt	pl
 801cac0:	600b      	strpl	r3, [r1, #0]
 801cac2:	2002      	movpl	r0, #2
 801cac4:	4770      	bx	lr
 801cac6:	b298      	uxth	r0, r3
 801cac8:	b9a8      	cbnz	r0, 801caf6 <__lo0bits+0x52>
 801caca:	0c1b      	lsrs	r3, r3, #16
 801cacc:	2010      	movs	r0, #16
 801cace:	b2da      	uxtb	r2, r3
 801cad0:	b90a      	cbnz	r2, 801cad6 <__lo0bits+0x32>
 801cad2:	3008      	adds	r0, #8
 801cad4:	0a1b      	lsrs	r3, r3, #8
 801cad6:	071a      	lsls	r2, r3, #28
 801cad8:	bf04      	itt	eq
 801cada:	091b      	lsreq	r3, r3, #4
 801cadc:	3004      	addeq	r0, #4
 801cade:	079a      	lsls	r2, r3, #30
 801cae0:	bf04      	itt	eq
 801cae2:	089b      	lsreq	r3, r3, #2
 801cae4:	3002      	addeq	r0, #2
 801cae6:	07da      	lsls	r2, r3, #31
 801cae8:	d403      	bmi.n	801caf2 <__lo0bits+0x4e>
 801caea:	085b      	lsrs	r3, r3, #1
 801caec:	f100 0001 	add.w	r0, r0, #1
 801caf0:	d005      	beq.n	801cafe <__lo0bits+0x5a>
 801caf2:	600b      	str	r3, [r1, #0]
 801caf4:	4770      	bx	lr
 801caf6:	4610      	mov	r0, r2
 801caf8:	e7e9      	b.n	801cace <__lo0bits+0x2a>
 801cafa:	2000      	movs	r0, #0
 801cafc:	4770      	bx	lr
 801cafe:	2020      	movs	r0, #32
 801cb00:	4770      	bx	lr
	...

0801cb04 <__i2b>:
 801cb04:	b510      	push	{r4, lr}
 801cb06:	460c      	mov	r4, r1
 801cb08:	2101      	movs	r1, #1
 801cb0a:	f7ff ff03 	bl	801c914 <_Balloc>
 801cb0e:	4602      	mov	r2, r0
 801cb10:	b928      	cbnz	r0, 801cb1e <__i2b+0x1a>
 801cb12:	4b05      	ldr	r3, [pc, #20]	; (801cb28 <__i2b+0x24>)
 801cb14:	4805      	ldr	r0, [pc, #20]	; (801cb2c <__i2b+0x28>)
 801cb16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801cb1a:	f000 faa7 	bl	801d06c <__assert_func>
 801cb1e:	2301      	movs	r3, #1
 801cb20:	6144      	str	r4, [r0, #20]
 801cb22:	6103      	str	r3, [r0, #16]
 801cb24:	bd10      	pop	{r4, pc}
 801cb26:	bf00      	nop
 801cb28:	0801de27 	.word	0x0801de27
 801cb2c:	0801de38 	.word	0x0801de38

0801cb30 <__multiply>:
 801cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb34:	4691      	mov	r9, r2
 801cb36:	690a      	ldr	r2, [r1, #16]
 801cb38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801cb3c:	429a      	cmp	r2, r3
 801cb3e:	bfb8      	it	lt
 801cb40:	460b      	movlt	r3, r1
 801cb42:	460c      	mov	r4, r1
 801cb44:	bfbc      	itt	lt
 801cb46:	464c      	movlt	r4, r9
 801cb48:	4699      	movlt	r9, r3
 801cb4a:	6927      	ldr	r7, [r4, #16]
 801cb4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801cb50:	68a3      	ldr	r3, [r4, #8]
 801cb52:	6861      	ldr	r1, [r4, #4]
 801cb54:	eb07 060a 	add.w	r6, r7, sl
 801cb58:	42b3      	cmp	r3, r6
 801cb5a:	b085      	sub	sp, #20
 801cb5c:	bfb8      	it	lt
 801cb5e:	3101      	addlt	r1, #1
 801cb60:	f7ff fed8 	bl	801c914 <_Balloc>
 801cb64:	b930      	cbnz	r0, 801cb74 <__multiply+0x44>
 801cb66:	4602      	mov	r2, r0
 801cb68:	4b44      	ldr	r3, [pc, #272]	; (801cc7c <__multiply+0x14c>)
 801cb6a:	4845      	ldr	r0, [pc, #276]	; (801cc80 <__multiply+0x150>)
 801cb6c:	f240 115d 	movw	r1, #349	; 0x15d
 801cb70:	f000 fa7c 	bl	801d06c <__assert_func>
 801cb74:	f100 0514 	add.w	r5, r0, #20
 801cb78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801cb7c:	462b      	mov	r3, r5
 801cb7e:	2200      	movs	r2, #0
 801cb80:	4543      	cmp	r3, r8
 801cb82:	d321      	bcc.n	801cbc8 <__multiply+0x98>
 801cb84:	f104 0314 	add.w	r3, r4, #20
 801cb88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801cb8c:	f109 0314 	add.w	r3, r9, #20
 801cb90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801cb94:	9202      	str	r2, [sp, #8]
 801cb96:	1b3a      	subs	r2, r7, r4
 801cb98:	3a15      	subs	r2, #21
 801cb9a:	f022 0203 	bic.w	r2, r2, #3
 801cb9e:	3204      	adds	r2, #4
 801cba0:	f104 0115 	add.w	r1, r4, #21
 801cba4:	428f      	cmp	r7, r1
 801cba6:	bf38      	it	cc
 801cba8:	2204      	movcc	r2, #4
 801cbaa:	9201      	str	r2, [sp, #4]
 801cbac:	9a02      	ldr	r2, [sp, #8]
 801cbae:	9303      	str	r3, [sp, #12]
 801cbb0:	429a      	cmp	r2, r3
 801cbb2:	d80c      	bhi.n	801cbce <__multiply+0x9e>
 801cbb4:	2e00      	cmp	r6, #0
 801cbb6:	dd03      	ble.n	801cbc0 <__multiply+0x90>
 801cbb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801cbbc:	2b00      	cmp	r3, #0
 801cbbe:	d05a      	beq.n	801cc76 <__multiply+0x146>
 801cbc0:	6106      	str	r6, [r0, #16]
 801cbc2:	b005      	add	sp, #20
 801cbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbc8:	f843 2b04 	str.w	r2, [r3], #4
 801cbcc:	e7d8      	b.n	801cb80 <__multiply+0x50>
 801cbce:	f8b3 a000 	ldrh.w	sl, [r3]
 801cbd2:	f1ba 0f00 	cmp.w	sl, #0
 801cbd6:	d024      	beq.n	801cc22 <__multiply+0xf2>
 801cbd8:	f104 0e14 	add.w	lr, r4, #20
 801cbdc:	46a9      	mov	r9, r5
 801cbde:	f04f 0c00 	mov.w	ip, #0
 801cbe2:	f85e 2b04 	ldr.w	r2, [lr], #4
 801cbe6:	f8d9 1000 	ldr.w	r1, [r9]
 801cbea:	fa1f fb82 	uxth.w	fp, r2
 801cbee:	b289      	uxth	r1, r1
 801cbf0:	fb0a 110b 	mla	r1, sl, fp, r1
 801cbf4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801cbf8:	f8d9 2000 	ldr.w	r2, [r9]
 801cbfc:	4461      	add	r1, ip
 801cbfe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cc02:	fb0a c20b 	mla	r2, sl, fp, ip
 801cc06:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801cc0a:	b289      	uxth	r1, r1
 801cc0c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801cc10:	4577      	cmp	r7, lr
 801cc12:	f849 1b04 	str.w	r1, [r9], #4
 801cc16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801cc1a:	d8e2      	bhi.n	801cbe2 <__multiply+0xb2>
 801cc1c:	9a01      	ldr	r2, [sp, #4]
 801cc1e:	f845 c002 	str.w	ip, [r5, r2]
 801cc22:	9a03      	ldr	r2, [sp, #12]
 801cc24:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801cc28:	3304      	adds	r3, #4
 801cc2a:	f1b9 0f00 	cmp.w	r9, #0
 801cc2e:	d020      	beq.n	801cc72 <__multiply+0x142>
 801cc30:	6829      	ldr	r1, [r5, #0]
 801cc32:	f104 0c14 	add.w	ip, r4, #20
 801cc36:	46ae      	mov	lr, r5
 801cc38:	f04f 0a00 	mov.w	sl, #0
 801cc3c:	f8bc b000 	ldrh.w	fp, [ip]
 801cc40:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801cc44:	fb09 220b 	mla	r2, r9, fp, r2
 801cc48:	4492      	add	sl, r2
 801cc4a:	b289      	uxth	r1, r1
 801cc4c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801cc50:	f84e 1b04 	str.w	r1, [lr], #4
 801cc54:	f85c 2b04 	ldr.w	r2, [ip], #4
 801cc58:	f8be 1000 	ldrh.w	r1, [lr]
 801cc5c:	0c12      	lsrs	r2, r2, #16
 801cc5e:	fb09 1102 	mla	r1, r9, r2, r1
 801cc62:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801cc66:	4567      	cmp	r7, ip
 801cc68:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801cc6c:	d8e6      	bhi.n	801cc3c <__multiply+0x10c>
 801cc6e:	9a01      	ldr	r2, [sp, #4]
 801cc70:	50a9      	str	r1, [r5, r2]
 801cc72:	3504      	adds	r5, #4
 801cc74:	e79a      	b.n	801cbac <__multiply+0x7c>
 801cc76:	3e01      	subs	r6, #1
 801cc78:	e79c      	b.n	801cbb4 <__multiply+0x84>
 801cc7a:	bf00      	nop
 801cc7c:	0801de27 	.word	0x0801de27
 801cc80:	0801de38 	.word	0x0801de38

0801cc84 <__pow5mult>:
 801cc84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cc88:	4615      	mov	r5, r2
 801cc8a:	f012 0203 	ands.w	r2, r2, #3
 801cc8e:	4606      	mov	r6, r0
 801cc90:	460f      	mov	r7, r1
 801cc92:	d007      	beq.n	801cca4 <__pow5mult+0x20>
 801cc94:	4c25      	ldr	r4, [pc, #148]	; (801cd2c <__pow5mult+0xa8>)
 801cc96:	3a01      	subs	r2, #1
 801cc98:	2300      	movs	r3, #0
 801cc9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801cc9e:	f7ff fe9b 	bl	801c9d8 <__multadd>
 801cca2:	4607      	mov	r7, r0
 801cca4:	10ad      	asrs	r5, r5, #2
 801cca6:	d03d      	beq.n	801cd24 <__pow5mult+0xa0>
 801cca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801ccaa:	b97c      	cbnz	r4, 801cccc <__pow5mult+0x48>
 801ccac:	2010      	movs	r0, #16
 801ccae:	f7fd ffdd 	bl	801ac6c <malloc>
 801ccb2:	4602      	mov	r2, r0
 801ccb4:	6270      	str	r0, [r6, #36]	; 0x24
 801ccb6:	b928      	cbnz	r0, 801ccc4 <__pow5mult+0x40>
 801ccb8:	4b1d      	ldr	r3, [pc, #116]	; (801cd30 <__pow5mult+0xac>)
 801ccba:	481e      	ldr	r0, [pc, #120]	; (801cd34 <__pow5mult+0xb0>)
 801ccbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801ccc0:	f000 f9d4 	bl	801d06c <__assert_func>
 801ccc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ccc8:	6004      	str	r4, [r0, #0]
 801ccca:	60c4      	str	r4, [r0, #12]
 801cccc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801ccd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ccd4:	b94c      	cbnz	r4, 801ccea <__pow5mult+0x66>
 801ccd6:	f240 2171 	movw	r1, #625	; 0x271
 801ccda:	4630      	mov	r0, r6
 801ccdc:	f7ff ff12 	bl	801cb04 <__i2b>
 801cce0:	2300      	movs	r3, #0
 801cce2:	f8c8 0008 	str.w	r0, [r8, #8]
 801cce6:	4604      	mov	r4, r0
 801cce8:	6003      	str	r3, [r0, #0]
 801ccea:	f04f 0900 	mov.w	r9, #0
 801ccee:	07eb      	lsls	r3, r5, #31
 801ccf0:	d50a      	bpl.n	801cd08 <__pow5mult+0x84>
 801ccf2:	4639      	mov	r1, r7
 801ccf4:	4622      	mov	r2, r4
 801ccf6:	4630      	mov	r0, r6
 801ccf8:	f7ff ff1a 	bl	801cb30 <__multiply>
 801ccfc:	4639      	mov	r1, r7
 801ccfe:	4680      	mov	r8, r0
 801cd00:	4630      	mov	r0, r6
 801cd02:	f7ff fe47 	bl	801c994 <_Bfree>
 801cd06:	4647      	mov	r7, r8
 801cd08:	106d      	asrs	r5, r5, #1
 801cd0a:	d00b      	beq.n	801cd24 <__pow5mult+0xa0>
 801cd0c:	6820      	ldr	r0, [r4, #0]
 801cd0e:	b938      	cbnz	r0, 801cd20 <__pow5mult+0x9c>
 801cd10:	4622      	mov	r2, r4
 801cd12:	4621      	mov	r1, r4
 801cd14:	4630      	mov	r0, r6
 801cd16:	f7ff ff0b 	bl	801cb30 <__multiply>
 801cd1a:	6020      	str	r0, [r4, #0]
 801cd1c:	f8c0 9000 	str.w	r9, [r0]
 801cd20:	4604      	mov	r4, r0
 801cd22:	e7e4      	b.n	801ccee <__pow5mult+0x6a>
 801cd24:	4638      	mov	r0, r7
 801cd26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd2a:	bf00      	nop
 801cd2c:	0801df88 	.word	0x0801df88
 801cd30:	0801ddb5 	.word	0x0801ddb5
 801cd34:	0801de38 	.word	0x0801de38

0801cd38 <__lshift>:
 801cd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cd3c:	460c      	mov	r4, r1
 801cd3e:	6849      	ldr	r1, [r1, #4]
 801cd40:	6923      	ldr	r3, [r4, #16]
 801cd42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801cd46:	68a3      	ldr	r3, [r4, #8]
 801cd48:	4607      	mov	r7, r0
 801cd4a:	4691      	mov	r9, r2
 801cd4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801cd50:	f108 0601 	add.w	r6, r8, #1
 801cd54:	42b3      	cmp	r3, r6
 801cd56:	db0b      	blt.n	801cd70 <__lshift+0x38>
 801cd58:	4638      	mov	r0, r7
 801cd5a:	f7ff fddb 	bl	801c914 <_Balloc>
 801cd5e:	4605      	mov	r5, r0
 801cd60:	b948      	cbnz	r0, 801cd76 <__lshift+0x3e>
 801cd62:	4602      	mov	r2, r0
 801cd64:	4b2a      	ldr	r3, [pc, #168]	; (801ce10 <__lshift+0xd8>)
 801cd66:	482b      	ldr	r0, [pc, #172]	; (801ce14 <__lshift+0xdc>)
 801cd68:	f240 11d9 	movw	r1, #473	; 0x1d9
 801cd6c:	f000 f97e 	bl	801d06c <__assert_func>
 801cd70:	3101      	adds	r1, #1
 801cd72:	005b      	lsls	r3, r3, #1
 801cd74:	e7ee      	b.n	801cd54 <__lshift+0x1c>
 801cd76:	2300      	movs	r3, #0
 801cd78:	f100 0114 	add.w	r1, r0, #20
 801cd7c:	f100 0210 	add.w	r2, r0, #16
 801cd80:	4618      	mov	r0, r3
 801cd82:	4553      	cmp	r3, sl
 801cd84:	db37      	blt.n	801cdf6 <__lshift+0xbe>
 801cd86:	6920      	ldr	r0, [r4, #16]
 801cd88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cd8c:	f104 0314 	add.w	r3, r4, #20
 801cd90:	f019 091f 	ands.w	r9, r9, #31
 801cd94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cd98:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cd9c:	d02f      	beq.n	801cdfe <__lshift+0xc6>
 801cd9e:	f1c9 0e20 	rsb	lr, r9, #32
 801cda2:	468a      	mov	sl, r1
 801cda4:	f04f 0c00 	mov.w	ip, #0
 801cda8:	681a      	ldr	r2, [r3, #0]
 801cdaa:	fa02 f209 	lsl.w	r2, r2, r9
 801cdae:	ea42 020c 	orr.w	r2, r2, ip
 801cdb2:	f84a 2b04 	str.w	r2, [sl], #4
 801cdb6:	f853 2b04 	ldr.w	r2, [r3], #4
 801cdba:	4298      	cmp	r0, r3
 801cdbc:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cdc0:	d8f2      	bhi.n	801cda8 <__lshift+0x70>
 801cdc2:	1b03      	subs	r3, r0, r4
 801cdc4:	3b15      	subs	r3, #21
 801cdc6:	f023 0303 	bic.w	r3, r3, #3
 801cdca:	3304      	adds	r3, #4
 801cdcc:	f104 0215 	add.w	r2, r4, #21
 801cdd0:	4290      	cmp	r0, r2
 801cdd2:	bf38      	it	cc
 801cdd4:	2304      	movcc	r3, #4
 801cdd6:	f841 c003 	str.w	ip, [r1, r3]
 801cdda:	f1bc 0f00 	cmp.w	ip, #0
 801cdde:	d001      	beq.n	801cde4 <__lshift+0xac>
 801cde0:	f108 0602 	add.w	r6, r8, #2
 801cde4:	3e01      	subs	r6, #1
 801cde6:	4638      	mov	r0, r7
 801cde8:	612e      	str	r6, [r5, #16]
 801cdea:	4621      	mov	r1, r4
 801cdec:	f7ff fdd2 	bl	801c994 <_Bfree>
 801cdf0:	4628      	mov	r0, r5
 801cdf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cdf6:	f842 0f04 	str.w	r0, [r2, #4]!
 801cdfa:	3301      	adds	r3, #1
 801cdfc:	e7c1      	b.n	801cd82 <__lshift+0x4a>
 801cdfe:	3904      	subs	r1, #4
 801ce00:	f853 2b04 	ldr.w	r2, [r3], #4
 801ce04:	f841 2f04 	str.w	r2, [r1, #4]!
 801ce08:	4298      	cmp	r0, r3
 801ce0a:	d8f9      	bhi.n	801ce00 <__lshift+0xc8>
 801ce0c:	e7ea      	b.n	801cde4 <__lshift+0xac>
 801ce0e:	bf00      	nop
 801ce10:	0801de27 	.word	0x0801de27
 801ce14:	0801de38 	.word	0x0801de38

0801ce18 <__mcmp>:
 801ce18:	b530      	push	{r4, r5, lr}
 801ce1a:	6902      	ldr	r2, [r0, #16]
 801ce1c:	690c      	ldr	r4, [r1, #16]
 801ce1e:	1b12      	subs	r2, r2, r4
 801ce20:	d10e      	bne.n	801ce40 <__mcmp+0x28>
 801ce22:	f100 0314 	add.w	r3, r0, #20
 801ce26:	3114      	adds	r1, #20
 801ce28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ce2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ce30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ce34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ce38:	42a5      	cmp	r5, r4
 801ce3a:	d003      	beq.n	801ce44 <__mcmp+0x2c>
 801ce3c:	d305      	bcc.n	801ce4a <__mcmp+0x32>
 801ce3e:	2201      	movs	r2, #1
 801ce40:	4610      	mov	r0, r2
 801ce42:	bd30      	pop	{r4, r5, pc}
 801ce44:	4283      	cmp	r3, r0
 801ce46:	d3f3      	bcc.n	801ce30 <__mcmp+0x18>
 801ce48:	e7fa      	b.n	801ce40 <__mcmp+0x28>
 801ce4a:	f04f 32ff 	mov.w	r2, #4294967295
 801ce4e:	e7f7      	b.n	801ce40 <__mcmp+0x28>

0801ce50 <__mdiff>:
 801ce50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce54:	460c      	mov	r4, r1
 801ce56:	4606      	mov	r6, r0
 801ce58:	4611      	mov	r1, r2
 801ce5a:	4620      	mov	r0, r4
 801ce5c:	4690      	mov	r8, r2
 801ce5e:	f7ff ffdb 	bl	801ce18 <__mcmp>
 801ce62:	1e05      	subs	r5, r0, #0
 801ce64:	d110      	bne.n	801ce88 <__mdiff+0x38>
 801ce66:	4629      	mov	r1, r5
 801ce68:	4630      	mov	r0, r6
 801ce6a:	f7ff fd53 	bl	801c914 <_Balloc>
 801ce6e:	b930      	cbnz	r0, 801ce7e <__mdiff+0x2e>
 801ce70:	4b3a      	ldr	r3, [pc, #232]	; (801cf5c <__mdiff+0x10c>)
 801ce72:	4602      	mov	r2, r0
 801ce74:	f240 2132 	movw	r1, #562	; 0x232
 801ce78:	4839      	ldr	r0, [pc, #228]	; (801cf60 <__mdiff+0x110>)
 801ce7a:	f000 f8f7 	bl	801d06c <__assert_func>
 801ce7e:	2301      	movs	r3, #1
 801ce80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ce84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce88:	bfa4      	itt	ge
 801ce8a:	4643      	movge	r3, r8
 801ce8c:	46a0      	movge	r8, r4
 801ce8e:	4630      	mov	r0, r6
 801ce90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ce94:	bfa6      	itte	ge
 801ce96:	461c      	movge	r4, r3
 801ce98:	2500      	movge	r5, #0
 801ce9a:	2501      	movlt	r5, #1
 801ce9c:	f7ff fd3a 	bl	801c914 <_Balloc>
 801cea0:	b920      	cbnz	r0, 801ceac <__mdiff+0x5c>
 801cea2:	4b2e      	ldr	r3, [pc, #184]	; (801cf5c <__mdiff+0x10c>)
 801cea4:	4602      	mov	r2, r0
 801cea6:	f44f 7110 	mov.w	r1, #576	; 0x240
 801ceaa:	e7e5      	b.n	801ce78 <__mdiff+0x28>
 801ceac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801ceb0:	6926      	ldr	r6, [r4, #16]
 801ceb2:	60c5      	str	r5, [r0, #12]
 801ceb4:	f104 0914 	add.w	r9, r4, #20
 801ceb8:	f108 0514 	add.w	r5, r8, #20
 801cebc:	f100 0e14 	add.w	lr, r0, #20
 801cec0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cec4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cec8:	f108 0210 	add.w	r2, r8, #16
 801cecc:	46f2      	mov	sl, lr
 801cece:	2100      	movs	r1, #0
 801ced0:	f859 3b04 	ldr.w	r3, [r9], #4
 801ced4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801ced8:	fa1f f883 	uxth.w	r8, r3
 801cedc:	fa11 f18b 	uxtah	r1, r1, fp
 801cee0:	0c1b      	lsrs	r3, r3, #16
 801cee2:	eba1 0808 	sub.w	r8, r1, r8
 801cee6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801ceea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801ceee:	fa1f f888 	uxth.w	r8, r8
 801cef2:	1419      	asrs	r1, r3, #16
 801cef4:	454e      	cmp	r6, r9
 801cef6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cefa:	f84a 3b04 	str.w	r3, [sl], #4
 801cefe:	d8e7      	bhi.n	801ced0 <__mdiff+0x80>
 801cf00:	1b33      	subs	r3, r6, r4
 801cf02:	3b15      	subs	r3, #21
 801cf04:	f023 0303 	bic.w	r3, r3, #3
 801cf08:	3304      	adds	r3, #4
 801cf0a:	3415      	adds	r4, #21
 801cf0c:	42a6      	cmp	r6, r4
 801cf0e:	bf38      	it	cc
 801cf10:	2304      	movcc	r3, #4
 801cf12:	441d      	add	r5, r3
 801cf14:	4473      	add	r3, lr
 801cf16:	469e      	mov	lr, r3
 801cf18:	462e      	mov	r6, r5
 801cf1a:	4566      	cmp	r6, ip
 801cf1c:	d30e      	bcc.n	801cf3c <__mdiff+0xec>
 801cf1e:	f10c 0203 	add.w	r2, ip, #3
 801cf22:	1b52      	subs	r2, r2, r5
 801cf24:	f022 0203 	bic.w	r2, r2, #3
 801cf28:	3d03      	subs	r5, #3
 801cf2a:	45ac      	cmp	ip, r5
 801cf2c:	bf38      	it	cc
 801cf2e:	2200      	movcc	r2, #0
 801cf30:	441a      	add	r2, r3
 801cf32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cf36:	b17b      	cbz	r3, 801cf58 <__mdiff+0x108>
 801cf38:	6107      	str	r7, [r0, #16]
 801cf3a:	e7a3      	b.n	801ce84 <__mdiff+0x34>
 801cf3c:	f856 8b04 	ldr.w	r8, [r6], #4
 801cf40:	fa11 f288 	uxtah	r2, r1, r8
 801cf44:	1414      	asrs	r4, r2, #16
 801cf46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cf4a:	b292      	uxth	r2, r2
 801cf4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cf50:	f84e 2b04 	str.w	r2, [lr], #4
 801cf54:	1421      	asrs	r1, r4, #16
 801cf56:	e7e0      	b.n	801cf1a <__mdiff+0xca>
 801cf58:	3f01      	subs	r7, #1
 801cf5a:	e7ea      	b.n	801cf32 <__mdiff+0xe2>
 801cf5c:	0801de27 	.word	0x0801de27
 801cf60:	0801de38 	.word	0x0801de38

0801cf64 <__d2b>:
 801cf64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cf68:	4689      	mov	r9, r1
 801cf6a:	2101      	movs	r1, #1
 801cf6c:	ec57 6b10 	vmov	r6, r7, d0
 801cf70:	4690      	mov	r8, r2
 801cf72:	f7ff fccf 	bl	801c914 <_Balloc>
 801cf76:	4604      	mov	r4, r0
 801cf78:	b930      	cbnz	r0, 801cf88 <__d2b+0x24>
 801cf7a:	4602      	mov	r2, r0
 801cf7c:	4b25      	ldr	r3, [pc, #148]	; (801d014 <__d2b+0xb0>)
 801cf7e:	4826      	ldr	r0, [pc, #152]	; (801d018 <__d2b+0xb4>)
 801cf80:	f240 310a 	movw	r1, #778	; 0x30a
 801cf84:	f000 f872 	bl	801d06c <__assert_func>
 801cf88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cf8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cf90:	bb35      	cbnz	r5, 801cfe0 <__d2b+0x7c>
 801cf92:	2e00      	cmp	r6, #0
 801cf94:	9301      	str	r3, [sp, #4]
 801cf96:	d028      	beq.n	801cfea <__d2b+0x86>
 801cf98:	4668      	mov	r0, sp
 801cf9a:	9600      	str	r6, [sp, #0]
 801cf9c:	f7ff fd82 	bl	801caa4 <__lo0bits>
 801cfa0:	9900      	ldr	r1, [sp, #0]
 801cfa2:	b300      	cbz	r0, 801cfe6 <__d2b+0x82>
 801cfa4:	9a01      	ldr	r2, [sp, #4]
 801cfa6:	f1c0 0320 	rsb	r3, r0, #32
 801cfaa:	fa02 f303 	lsl.w	r3, r2, r3
 801cfae:	430b      	orrs	r3, r1
 801cfb0:	40c2      	lsrs	r2, r0
 801cfb2:	6163      	str	r3, [r4, #20]
 801cfb4:	9201      	str	r2, [sp, #4]
 801cfb6:	9b01      	ldr	r3, [sp, #4]
 801cfb8:	61a3      	str	r3, [r4, #24]
 801cfba:	2b00      	cmp	r3, #0
 801cfbc:	bf14      	ite	ne
 801cfbe:	2202      	movne	r2, #2
 801cfc0:	2201      	moveq	r2, #1
 801cfc2:	6122      	str	r2, [r4, #16]
 801cfc4:	b1d5      	cbz	r5, 801cffc <__d2b+0x98>
 801cfc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cfca:	4405      	add	r5, r0
 801cfcc:	f8c9 5000 	str.w	r5, [r9]
 801cfd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cfd4:	f8c8 0000 	str.w	r0, [r8]
 801cfd8:	4620      	mov	r0, r4
 801cfda:	b003      	add	sp, #12
 801cfdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cfe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cfe4:	e7d5      	b.n	801cf92 <__d2b+0x2e>
 801cfe6:	6161      	str	r1, [r4, #20]
 801cfe8:	e7e5      	b.n	801cfb6 <__d2b+0x52>
 801cfea:	a801      	add	r0, sp, #4
 801cfec:	f7ff fd5a 	bl	801caa4 <__lo0bits>
 801cff0:	9b01      	ldr	r3, [sp, #4]
 801cff2:	6163      	str	r3, [r4, #20]
 801cff4:	2201      	movs	r2, #1
 801cff6:	6122      	str	r2, [r4, #16]
 801cff8:	3020      	adds	r0, #32
 801cffa:	e7e3      	b.n	801cfc4 <__d2b+0x60>
 801cffc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d000:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d004:	f8c9 0000 	str.w	r0, [r9]
 801d008:	6918      	ldr	r0, [r3, #16]
 801d00a:	f7ff fd2b 	bl	801ca64 <__hi0bits>
 801d00e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d012:	e7df      	b.n	801cfd4 <__d2b+0x70>
 801d014:	0801de27 	.word	0x0801de27
 801d018:	0801de38 	.word	0x0801de38

0801d01c <_calloc_r>:
 801d01c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d01e:	fba1 2402 	umull	r2, r4, r1, r2
 801d022:	b94c      	cbnz	r4, 801d038 <_calloc_r+0x1c>
 801d024:	4611      	mov	r1, r2
 801d026:	9201      	str	r2, [sp, #4]
 801d028:	f7fd feb2 	bl	801ad90 <_malloc_r>
 801d02c:	9a01      	ldr	r2, [sp, #4]
 801d02e:	4605      	mov	r5, r0
 801d030:	b930      	cbnz	r0, 801d040 <_calloc_r+0x24>
 801d032:	4628      	mov	r0, r5
 801d034:	b003      	add	sp, #12
 801d036:	bd30      	pop	{r4, r5, pc}
 801d038:	220c      	movs	r2, #12
 801d03a:	6002      	str	r2, [r0, #0]
 801d03c:	2500      	movs	r5, #0
 801d03e:	e7f8      	b.n	801d032 <_calloc_r+0x16>
 801d040:	4621      	mov	r1, r4
 801d042:	f7fd fe31 	bl	801aca8 <memset>
 801d046:	e7f4      	b.n	801d032 <_calloc_r+0x16>

0801d048 <_read_r>:
 801d048:	b538      	push	{r3, r4, r5, lr}
 801d04a:	4d07      	ldr	r5, [pc, #28]	; (801d068 <_read_r+0x20>)
 801d04c:	4604      	mov	r4, r0
 801d04e:	4608      	mov	r0, r1
 801d050:	4611      	mov	r1, r2
 801d052:	2200      	movs	r2, #0
 801d054:	602a      	str	r2, [r5, #0]
 801d056:	461a      	mov	r2, r3
 801d058:	f7f1 fbca 	bl	800e7f0 <_read>
 801d05c:	1c43      	adds	r3, r0, #1
 801d05e:	d102      	bne.n	801d066 <_read_r+0x1e>
 801d060:	682b      	ldr	r3, [r5, #0]
 801d062:	b103      	cbz	r3, 801d066 <_read_r+0x1e>
 801d064:	6023      	str	r3, [r4, #0]
 801d066:	bd38      	pop	{r3, r4, r5, pc}
 801d068:	2000a4a8 	.word	0x2000a4a8

0801d06c <__assert_func>:
 801d06c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d06e:	4614      	mov	r4, r2
 801d070:	461a      	mov	r2, r3
 801d072:	4b09      	ldr	r3, [pc, #36]	; (801d098 <__assert_func+0x2c>)
 801d074:	681b      	ldr	r3, [r3, #0]
 801d076:	4605      	mov	r5, r0
 801d078:	68d8      	ldr	r0, [r3, #12]
 801d07a:	b14c      	cbz	r4, 801d090 <__assert_func+0x24>
 801d07c:	4b07      	ldr	r3, [pc, #28]	; (801d09c <__assert_func+0x30>)
 801d07e:	9100      	str	r1, [sp, #0]
 801d080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d084:	4906      	ldr	r1, [pc, #24]	; (801d0a0 <__assert_func+0x34>)
 801d086:	462b      	mov	r3, r5
 801d088:	f000 f80e 	bl	801d0a8 <fiprintf>
 801d08c:	f7fd fcbc 	bl	801aa08 <abort>
 801d090:	4b04      	ldr	r3, [pc, #16]	; (801d0a4 <__assert_func+0x38>)
 801d092:	461c      	mov	r4, r3
 801d094:	e7f3      	b.n	801d07e <__assert_func+0x12>
 801d096:	bf00      	nop
 801d098:	2000003c 	.word	0x2000003c
 801d09c:	0801df94 	.word	0x0801df94
 801d0a0:	0801dfa1 	.word	0x0801dfa1
 801d0a4:	0801dfcf 	.word	0x0801dfcf

0801d0a8 <fiprintf>:
 801d0a8:	b40e      	push	{r1, r2, r3}
 801d0aa:	b503      	push	{r0, r1, lr}
 801d0ac:	4601      	mov	r1, r0
 801d0ae:	ab03      	add	r3, sp, #12
 801d0b0:	4805      	ldr	r0, [pc, #20]	; (801d0c8 <fiprintf+0x20>)
 801d0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0b6:	6800      	ldr	r0, [r0, #0]
 801d0b8:	9301      	str	r3, [sp, #4]
 801d0ba:	f000 f843 	bl	801d144 <_vfiprintf_r>
 801d0be:	b002      	add	sp, #8
 801d0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d0c4:	b003      	add	sp, #12
 801d0c6:	4770      	bx	lr
 801d0c8:	2000003c 	.word	0x2000003c

0801d0cc <__ascii_mbtowc>:
 801d0cc:	b082      	sub	sp, #8
 801d0ce:	b901      	cbnz	r1, 801d0d2 <__ascii_mbtowc+0x6>
 801d0d0:	a901      	add	r1, sp, #4
 801d0d2:	b142      	cbz	r2, 801d0e6 <__ascii_mbtowc+0x1a>
 801d0d4:	b14b      	cbz	r3, 801d0ea <__ascii_mbtowc+0x1e>
 801d0d6:	7813      	ldrb	r3, [r2, #0]
 801d0d8:	600b      	str	r3, [r1, #0]
 801d0da:	7812      	ldrb	r2, [r2, #0]
 801d0dc:	1e10      	subs	r0, r2, #0
 801d0de:	bf18      	it	ne
 801d0e0:	2001      	movne	r0, #1
 801d0e2:	b002      	add	sp, #8
 801d0e4:	4770      	bx	lr
 801d0e6:	4610      	mov	r0, r2
 801d0e8:	e7fb      	b.n	801d0e2 <__ascii_mbtowc+0x16>
 801d0ea:	f06f 0001 	mvn.w	r0, #1
 801d0ee:	e7f8      	b.n	801d0e2 <__ascii_mbtowc+0x16>

0801d0f0 <__sfputc_r>:
 801d0f0:	6893      	ldr	r3, [r2, #8]
 801d0f2:	3b01      	subs	r3, #1
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	b410      	push	{r4}
 801d0f8:	6093      	str	r3, [r2, #8]
 801d0fa:	da08      	bge.n	801d10e <__sfputc_r+0x1e>
 801d0fc:	6994      	ldr	r4, [r2, #24]
 801d0fe:	42a3      	cmp	r3, r4
 801d100:	db01      	blt.n	801d106 <__sfputc_r+0x16>
 801d102:	290a      	cmp	r1, #10
 801d104:	d103      	bne.n	801d10e <__sfputc_r+0x1e>
 801d106:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d10a:	f000 b94b 	b.w	801d3a4 <__swbuf_r>
 801d10e:	6813      	ldr	r3, [r2, #0]
 801d110:	1c58      	adds	r0, r3, #1
 801d112:	6010      	str	r0, [r2, #0]
 801d114:	7019      	strb	r1, [r3, #0]
 801d116:	4608      	mov	r0, r1
 801d118:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d11c:	4770      	bx	lr

0801d11e <__sfputs_r>:
 801d11e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d120:	4606      	mov	r6, r0
 801d122:	460f      	mov	r7, r1
 801d124:	4614      	mov	r4, r2
 801d126:	18d5      	adds	r5, r2, r3
 801d128:	42ac      	cmp	r4, r5
 801d12a:	d101      	bne.n	801d130 <__sfputs_r+0x12>
 801d12c:	2000      	movs	r0, #0
 801d12e:	e007      	b.n	801d140 <__sfputs_r+0x22>
 801d130:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d134:	463a      	mov	r2, r7
 801d136:	4630      	mov	r0, r6
 801d138:	f7ff ffda 	bl	801d0f0 <__sfputc_r>
 801d13c:	1c43      	adds	r3, r0, #1
 801d13e:	d1f3      	bne.n	801d128 <__sfputs_r+0xa>
 801d140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d144 <_vfiprintf_r>:
 801d144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d148:	460d      	mov	r5, r1
 801d14a:	b09d      	sub	sp, #116	; 0x74
 801d14c:	4614      	mov	r4, r2
 801d14e:	4698      	mov	r8, r3
 801d150:	4606      	mov	r6, r0
 801d152:	b118      	cbz	r0, 801d15c <_vfiprintf_r+0x18>
 801d154:	6983      	ldr	r3, [r0, #24]
 801d156:	b90b      	cbnz	r3, 801d15c <_vfiprintf_r+0x18>
 801d158:	f7fd fcc2 	bl	801aae0 <__sinit>
 801d15c:	4b89      	ldr	r3, [pc, #548]	; (801d384 <_vfiprintf_r+0x240>)
 801d15e:	429d      	cmp	r5, r3
 801d160:	d11b      	bne.n	801d19a <_vfiprintf_r+0x56>
 801d162:	6875      	ldr	r5, [r6, #4]
 801d164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d166:	07d9      	lsls	r1, r3, #31
 801d168:	d405      	bmi.n	801d176 <_vfiprintf_r+0x32>
 801d16a:	89ab      	ldrh	r3, [r5, #12]
 801d16c:	059a      	lsls	r2, r3, #22
 801d16e:	d402      	bmi.n	801d176 <_vfiprintf_r+0x32>
 801d170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d172:	f7fd fd78 	bl	801ac66 <__retarget_lock_acquire_recursive>
 801d176:	89ab      	ldrh	r3, [r5, #12]
 801d178:	071b      	lsls	r3, r3, #28
 801d17a:	d501      	bpl.n	801d180 <_vfiprintf_r+0x3c>
 801d17c:	692b      	ldr	r3, [r5, #16]
 801d17e:	b9eb      	cbnz	r3, 801d1bc <_vfiprintf_r+0x78>
 801d180:	4629      	mov	r1, r5
 801d182:	4630      	mov	r0, r6
 801d184:	f000 f96e 	bl	801d464 <__swsetup_r>
 801d188:	b1c0      	cbz	r0, 801d1bc <_vfiprintf_r+0x78>
 801d18a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d18c:	07dc      	lsls	r4, r3, #31
 801d18e:	d50e      	bpl.n	801d1ae <_vfiprintf_r+0x6a>
 801d190:	f04f 30ff 	mov.w	r0, #4294967295
 801d194:	b01d      	add	sp, #116	; 0x74
 801d196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d19a:	4b7b      	ldr	r3, [pc, #492]	; (801d388 <_vfiprintf_r+0x244>)
 801d19c:	429d      	cmp	r5, r3
 801d19e:	d101      	bne.n	801d1a4 <_vfiprintf_r+0x60>
 801d1a0:	68b5      	ldr	r5, [r6, #8]
 801d1a2:	e7df      	b.n	801d164 <_vfiprintf_r+0x20>
 801d1a4:	4b79      	ldr	r3, [pc, #484]	; (801d38c <_vfiprintf_r+0x248>)
 801d1a6:	429d      	cmp	r5, r3
 801d1a8:	bf08      	it	eq
 801d1aa:	68f5      	ldreq	r5, [r6, #12]
 801d1ac:	e7da      	b.n	801d164 <_vfiprintf_r+0x20>
 801d1ae:	89ab      	ldrh	r3, [r5, #12]
 801d1b0:	0598      	lsls	r0, r3, #22
 801d1b2:	d4ed      	bmi.n	801d190 <_vfiprintf_r+0x4c>
 801d1b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d1b6:	f7fd fd58 	bl	801ac6a <__retarget_lock_release_recursive>
 801d1ba:	e7e9      	b.n	801d190 <_vfiprintf_r+0x4c>
 801d1bc:	2300      	movs	r3, #0
 801d1be:	9309      	str	r3, [sp, #36]	; 0x24
 801d1c0:	2320      	movs	r3, #32
 801d1c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d1c6:	f8cd 800c 	str.w	r8, [sp, #12]
 801d1ca:	2330      	movs	r3, #48	; 0x30
 801d1cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801d390 <_vfiprintf_r+0x24c>
 801d1d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d1d4:	f04f 0901 	mov.w	r9, #1
 801d1d8:	4623      	mov	r3, r4
 801d1da:	469a      	mov	sl, r3
 801d1dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d1e0:	b10a      	cbz	r2, 801d1e6 <_vfiprintf_r+0xa2>
 801d1e2:	2a25      	cmp	r2, #37	; 0x25
 801d1e4:	d1f9      	bne.n	801d1da <_vfiprintf_r+0x96>
 801d1e6:	ebba 0b04 	subs.w	fp, sl, r4
 801d1ea:	d00b      	beq.n	801d204 <_vfiprintf_r+0xc0>
 801d1ec:	465b      	mov	r3, fp
 801d1ee:	4622      	mov	r2, r4
 801d1f0:	4629      	mov	r1, r5
 801d1f2:	4630      	mov	r0, r6
 801d1f4:	f7ff ff93 	bl	801d11e <__sfputs_r>
 801d1f8:	3001      	adds	r0, #1
 801d1fa:	f000 80aa 	beq.w	801d352 <_vfiprintf_r+0x20e>
 801d1fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d200:	445a      	add	r2, fp
 801d202:	9209      	str	r2, [sp, #36]	; 0x24
 801d204:	f89a 3000 	ldrb.w	r3, [sl]
 801d208:	2b00      	cmp	r3, #0
 801d20a:	f000 80a2 	beq.w	801d352 <_vfiprintf_r+0x20e>
 801d20e:	2300      	movs	r3, #0
 801d210:	f04f 32ff 	mov.w	r2, #4294967295
 801d214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d218:	f10a 0a01 	add.w	sl, sl, #1
 801d21c:	9304      	str	r3, [sp, #16]
 801d21e:	9307      	str	r3, [sp, #28]
 801d220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d224:	931a      	str	r3, [sp, #104]	; 0x68
 801d226:	4654      	mov	r4, sl
 801d228:	2205      	movs	r2, #5
 801d22a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d22e:	4858      	ldr	r0, [pc, #352]	; (801d390 <_vfiprintf_r+0x24c>)
 801d230:	f7e2 ffd6 	bl	80001e0 <memchr>
 801d234:	9a04      	ldr	r2, [sp, #16]
 801d236:	b9d8      	cbnz	r0, 801d270 <_vfiprintf_r+0x12c>
 801d238:	06d1      	lsls	r1, r2, #27
 801d23a:	bf44      	itt	mi
 801d23c:	2320      	movmi	r3, #32
 801d23e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d242:	0713      	lsls	r3, r2, #28
 801d244:	bf44      	itt	mi
 801d246:	232b      	movmi	r3, #43	; 0x2b
 801d248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d24c:	f89a 3000 	ldrb.w	r3, [sl]
 801d250:	2b2a      	cmp	r3, #42	; 0x2a
 801d252:	d015      	beq.n	801d280 <_vfiprintf_r+0x13c>
 801d254:	9a07      	ldr	r2, [sp, #28]
 801d256:	4654      	mov	r4, sl
 801d258:	2000      	movs	r0, #0
 801d25a:	f04f 0c0a 	mov.w	ip, #10
 801d25e:	4621      	mov	r1, r4
 801d260:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d264:	3b30      	subs	r3, #48	; 0x30
 801d266:	2b09      	cmp	r3, #9
 801d268:	d94e      	bls.n	801d308 <_vfiprintf_r+0x1c4>
 801d26a:	b1b0      	cbz	r0, 801d29a <_vfiprintf_r+0x156>
 801d26c:	9207      	str	r2, [sp, #28]
 801d26e:	e014      	b.n	801d29a <_vfiprintf_r+0x156>
 801d270:	eba0 0308 	sub.w	r3, r0, r8
 801d274:	fa09 f303 	lsl.w	r3, r9, r3
 801d278:	4313      	orrs	r3, r2
 801d27a:	9304      	str	r3, [sp, #16]
 801d27c:	46a2      	mov	sl, r4
 801d27e:	e7d2      	b.n	801d226 <_vfiprintf_r+0xe2>
 801d280:	9b03      	ldr	r3, [sp, #12]
 801d282:	1d19      	adds	r1, r3, #4
 801d284:	681b      	ldr	r3, [r3, #0]
 801d286:	9103      	str	r1, [sp, #12]
 801d288:	2b00      	cmp	r3, #0
 801d28a:	bfbb      	ittet	lt
 801d28c:	425b      	neglt	r3, r3
 801d28e:	f042 0202 	orrlt.w	r2, r2, #2
 801d292:	9307      	strge	r3, [sp, #28]
 801d294:	9307      	strlt	r3, [sp, #28]
 801d296:	bfb8      	it	lt
 801d298:	9204      	strlt	r2, [sp, #16]
 801d29a:	7823      	ldrb	r3, [r4, #0]
 801d29c:	2b2e      	cmp	r3, #46	; 0x2e
 801d29e:	d10c      	bne.n	801d2ba <_vfiprintf_r+0x176>
 801d2a0:	7863      	ldrb	r3, [r4, #1]
 801d2a2:	2b2a      	cmp	r3, #42	; 0x2a
 801d2a4:	d135      	bne.n	801d312 <_vfiprintf_r+0x1ce>
 801d2a6:	9b03      	ldr	r3, [sp, #12]
 801d2a8:	1d1a      	adds	r2, r3, #4
 801d2aa:	681b      	ldr	r3, [r3, #0]
 801d2ac:	9203      	str	r2, [sp, #12]
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	bfb8      	it	lt
 801d2b2:	f04f 33ff 	movlt.w	r3, #4294967295
 801d2b6:	3402      	adds	r4, #2
 801d2b8:	9305      	str	r3, [sp, #20]
 801d2ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801d3a0 <_vfiprintf_r+0x25c>
 801d2be:	7821      	ldrb	r1, [r4, #0]
 801d2c0:	2203      	movs	r2, #3
 801d2c2:	4650      	mov	r0, sl
 801d2c4:	f7e2 ff8c 	bl	80001e0 <memchr>
 801d2c8:	b140      	cbz	r0, 801d2dc <_vfiprintf_r+0x198>
 801d2ca:	2340      	movs	r3, #64	; 0x40
 801d2cc:	eba0 000a 	sub.w	r0, r0, sl
 801d2d0:	fa03 f000 	lsl.w	r0, r3, r0
 801d2d4:	9b04      	ldr	r3, [sp, #16]
 801d2d6:	4303      	orrs	r3, r0
 801d2d8:	3401      	adds	r4, #1
 801d2da:	9304      	str	r3, [sp, #16]
 801d2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2e0:	482c      	ldr	r0, [pc, #176]	; (801d394 <_vfiprintf_r+0x250>)
 801d2e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d2e6:	2206      	movs	r2, #6
 801d2e8:	f7e2 ff7a 	bl	80001e0 <memchr>
 801d2ec:	2800      	cmp	r0, #0
 801d2ee:	d03f      	beq.n	801d370 <_vfiprintf_r+0x22c>
 801d2f0:	4b29      	ldr	r3, [pc, #164]	; (801d398 <_vfiprintf_r+0x254>)
 801d2f2:	bb1b      	cbnz	r3, 801d33c <_vfiprintf_r+0x1f8>
 801d2f4:	9b03      	ldr	r3, [sp, #12]
 801d2f6:	3307      	adds	r3, #7
 801d2f8:	f023 0307 	bic.w	r3, r3, #7
 801d2fc:	3308      	adds	r3, #8
 801d2fe:	9303      	str	r3, [sp, #12]
 801d300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d302:	443b      	add	r3, r7
 801d304:	9309      	str	r3, [sp, #36]	; 0x24
 801d306:	e767      	b.n	801d1d8 <_vfiprintf_r+0x94>
 801d308:	fb0c 3202 	mla	r2, ip, r2, r3
 801d30c:	460c      	mov	r4, r1
 801d30e:	2001      	movs	r0, #1
 801d310:	e7a5      	b.n	801d25e <_vfiprintf_r+0x11a>
 801d312:	2300      	movs	r3, #0
 801d314:	3401      	adds	r4, #1
 801d316:	9305      	str	r3, [sp, #20]
 801d318:	4619      	mov	r1, r3
 801d31a:	f04f 0c0a 	mov.w	ip, #10
 801d31e:	4620      	mov	r0, r4
 801d320:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d324:	3a30      	subs	r2, #48	; 0x30
 801d326:	2a09      	cmp	r2, #9
 801d328:	d903      	bls.n	801d332 <_vfiprintf_r+0x1ee>
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d0c5      	beq.n	801d2ba <_vfiprintf_r+0x176>
 801d32e:	9105      	str	r1, [sp, #20]
 801d330:	e7c3      	b.n	801d2ba <_vfiprintf_r+0x176>
 801d332:	fb0c 2101 	mla	r1, ip, r1, r2
 801d336:	4604      	mov	r4, r0
 801d338:	2301      	movs	r3, #1
 801d33a:	e7f0      	b.n	801d31e <_vfiprintf_r+0x1da>
 801d33c:	ab03      	add	r3, sp, #12
 801d33e:	9300      	str	r3, [sp, #0]
 801d340:	462a      	mov	r2, r5
 801d342:	4b16      	ldr	r3, [pc, #88]	; (801d39c <_vfiprintf_r+0x258>)
 801d344:	a904      	add	r1, sp, #16
 801d346:	4630      	mov	r0, r6
 801d348:	f7fd fe36 	bl	801afb8 <_printf_float>
 801d34c:	4607      	mov	r7, r0
 801d34e:	1c78      	adds	r0, r7, #1
 801d350:	d1d6      	bne.n	801d300 <_vfiprintf_r+0x1bc>
 801d352:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d354:	07d9      	lsls	r1, r3, #31
 801d356:	d405      	bmi.n	801d364 <_vfiprintf_r+0x220>
 801d358:	89ab      	ldrh	r3, [r5, #12]
 801d35a:	059a      	lsls	r2, r3, #22
 801d35c:	d402      	bmi.n	801d364 <_vfiprintf_r+0x220>
 801d35e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d360:	f7fd fc83 	bl	801ac6a <__retarget_lock_release_recursive>
 801d364:	89ab      	ldrh	r3, [r5, #12]
 801d366:	065b      	lsls	r3, r3, #25
 801d368:	f53f af12 	bmi.w	801d190 <_vfiprintf_r+0x4c>
 801d36c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d36e:	e711      	b.n	801d194 <_vfiprintf_r+0x50>
 801d370:	ab03      	add	r3, sp, #12
 801d372:	9300      	str	r3, [sp, #0]
 801d374:	462a      	mov	r2, r5
 801d376:	4b09      	ldr	r3, [pc, #36]	; (801d39c <_vfiprintf_r+0x258>)
 801d378:	a904      	add	r1, sp, #16
 801d37a:	4630      	mov	r0, r6
 801d37c:	f7fe f8c0 	bl	801b500 <_printf_i>
 801d380:	e7e4      	b.n	801d34c <_vfiprintf_r+0x208>
 801d382:	bf00      	nop
 801d384:	0801dd30 	.word	0x0801dd30
 801d388:	0801dd50 	.word	0x0801dd50
 801d38c:	0801dd10 	.word	0x0801dd10
 801d390:	0801dfda 	.word	0x0801dfda
 801d394:	0801dfe4 	.word	0x0801dfe4
 801d398:	0801afb9 	.word	0x0801afb9
 801d39c:	0801d11f 	.word	0x0801d11f
 801d3a0:	0801dfe0 	.word	0x0801dfe0

0801d3a4 <__swbuf_r>:
 801d3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d3a6:	460e      	mov	r6, r1
 801d3a8:	4614      	mov	r4, r2
 801d3aa:	4605      	mov	r5, r0
 801d3ac:	b118      	cbz	r0, 801d3b6 <__swbuf_r+0x12>
 801d3ae:	6983      	ldr	r3, [r0, #24]
 801d3b0:	b90b      	cbnz	r3, 801d3b6 <__swbuf_r+0x12>
 801d3b2:	f7fd fb95 	bl	801aae0 <__sinit>
 801d3b6:	4b21      	ldr	r3, [pc, #132]	; (801d43c <__swbuf_r+0x98>)
 801d3b8:	429c      	cmp	r4, r3
 801d3ba:	d12b      	bne.n	801d414 <__swbuf_r+0x70>
 801d3bc:	686c      	ldr	r4, [r5, #4]
 801d3be:	69a3      	ldr	r3, [r4, #24]
 801d3c0:	60a3      	str	r3, [r4, #8]
 801d3c2:	89a3      	ldrh	r3, [r4, #12]
 801d3c4:	071a      	lsls	r2, r3, #28
 801d3c6:	d52f      	bpl.n	801d428 <__swbuf_r+0x84>
 801d3c8:	6923      	ldr	r3, [r4, #16]
 801d3ca:	b36b      	cbz	r3, 801d428 <__swbuf_r+0x84>
 801d3cc:	6923      	ldr	r3, [r4, #16]
 801d3ce:	6820      	ldr	r0, [r4, #0]
 801d3d0:	1ac0      	subs	r0, r0, r3
 801d3d2:	6963      	ldr	r3, [r4, #20]
 801d3d4:	b2f6      	uxtb	r6, r6
 801d3d6:	4283      	cmp	r3, r0
 801d3d8:	4637      	mov	r7, r6
 801d3da:	dc04      	bgt.n	801d3e6 <__swbuf_r+0x42>
 801d3dc:	4621      	mov	r1, r4
 801d3de:	4628      	mov	r0, r5
 801d3e0:	f7ff fa3a 	bl	801c858 <_fflush_r>
 801d3e4:	bb30      	cbnz	r0, 801d434 <__swbuf_r+0x90>
 801d3e6:	68a3      	ldr	r3, [r4, #8]
 801d3e8:	3b01      	subs	r3, #1
 801d3ea:	60a3      	str	r3, [r4, #8]
 801d3ec:	6823      	ldr	r3, [r4, #0]
 801d3ee:	1c5a      	adds	r2, r3, #1
 801d3f0:	6022      	str	r2, [r4, #0]
 801d3f2:	701e      	strb	r6, [r3, #0]
 801d3f4:	6963      	ldr	r3, [r4, #20]
 801d3f6:	3001      	adds	r0, #1
 801d3f8:	4283      	cmp	r3, r0
 801d3fa:	d004      	beq.n	801d406 <__swbuf_r+0x62>
 801d3fc:	89a3      	ldrh	r3, [r4, #12]
 801d3fe:	07db      	lsls	r3, r3, #31
 801d400:	d506      	bpl.n	801d410 <__swbuf_r+0x6c>
 801d402:	2e0a      	cmp	r6, #10
 801d404:	d104      	bne.n	801d410 <__swbuf_r+0x6c>
 801d406:	4621      	mov	r1, r4
 801d408:	4628      	mov	r0, r5
 801d40a:	f7ff fa25 	bl	801c858 <_fflush_r>
 801d40e:	b988      	cbnz	r0, 801d434 <__swbuf_r+0x90>
 801d410:	4638      	mov	r0, r7
 801d412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d414:	4b0a      	ldr	r3, [pc, #40]	; (801d440 <__swbuf_r+0x9c>)
 801d416:	429c      	cmp	r4, r3
 801d418:	d101      	bne.n	801d41e <__swbuf_r+0x7a>
 801d41a:	68ac      	ldr	r4, [r5, #8]
 801d41c:	e7cf      	b.n	801d3be <__swbuf_r+0x1a>
 801d41e:	4b09      	ldr	r3, [pc, #36]	; (801d444 <__swbuf_r+0xa0>)
 801d420:	429c      	cmp	r4, r3
 801d422:	bf08      	it	eq
 801d424:	68ec      	ldreq	r4, [r5, #12]
 801d426:	e7ca      	b.n	801d3be <__swbuf_r+0x1a>
 801d428:	4621      	mov	r1, r4
 801d42a:	4628      	mov	r0, r5
 801d42c:	f000 f81a 	bl	801d464 <__swsetup_r>
 801d430:	2800      	cmp	r0, #0
 801d432:	d0cb      	beq.n	801d3cc <__swbuf_r+0x28>
 801d434:	f04f 37ff 	mov.w	r7, #4294967295
 801d438:	e7ea      	b.n	801d410 <__swbuf_r+0x6c>
 801d43a:	bf00      	nop
 801d43c:	0801dd30 	.word	0x0801dd30
 801d440:	0801dd50 	.word	0x0801dd50
 801d444:	0801dd10 	.word	0x0801dd10

0801d448 <__ascii_wctomb>:
 801d448:	b149      	cbz	r1, 801d45e <__ascii_wctomb+0x16>
 801d44a:	2aff      	cmp	r2, #255	; 0xff
 801d44c:	bf85      	ittet	hi
 801d44e:	238a      	movhi	r3, #138	; 0x8a
 801d450:	6003      	strhi	r3, [r0, #0]
 801d452:	700a      	strbls	r2, [r1, #0]
 801d454:	f04f 30ff 	movhi.w	r0, #4294967295
 801d458:	bf98      	it	ls
 801d45a:	2001      	movls	r0, #1
 801d45c:	4770      	bx	lr
 801d45e:	4608      	mov	r0, r1
 801d460:	4770      	bx	lr
	...

0801d464 <__swsetup_r>:
 801d464:	4b32      	ldr	r3, [pc, #200]	; (801d530 <__swsetup_r+0xcc>)
 801d466:	b570      	push	{r4, r5, r6, lr}
 801d468:	681d      	ldr	r5, [r3, #0]
 801d46a:	4606      	mov	r6, r0
 801d46c:	460c      	mov	r4, r1
 801d46e:	b125      	cbz	r5, 801d47a <__swsetup_r+0x16>
 801d470:	69ab      	ldr	r3, [r5, #24]
 801d472:	b913      	cbnz	r3, 801d47a <__swsetup_r+0x16>
 801d474:	4628      	mov	r0, r5
 801d476:	f7fd fb33 	bl	801aae0 <__sinit>
 801d47a:	4b2e      	ldr	r3, [pc, #184]	; (801d534 <__swsetup_r+0xd0>)
 801d47c:	429c      	cmp	r4, r3
 801d47e:	d10f      	bne.n	801d4a0 <__swsetup_r+0x3c>
 801d480:	686c      	ldr	r4, [r5, #4]
 801d482:	89a3      	ldrh	r3, [r4, #12]
 801d484:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d488:	0719      	lsls	r1, r3, #28
 801d48a:	d42c      	bmi.n	801d4e6 <__swsetup_r+0x82>
 801d48c:	06dd      	lsls	r5, r3, #27
 801d48e:	d411      	bmi.n	801d4b4 <__swsetup_r+0x50>
 801d490:	2309      	movs	r3, #9
 801d492:	6033      	str	r3, [r6, #0]
 801d494:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801d498:	81a3      	strh	r3, [r4, #12]
 801d49a:	f04f 30ff 	mov.w	r0, #4294967295
 801d49e:	e03e      	b.n	801d51e <__swsetup_r+0xba>
 801d4a0:	4b25      	ldr	r3, [pc, #148]	; (801d538 <__swsetup_r+0xd4>)
 801d4a2:	429c      	cmp	r4, r3
 801d4a4:	d101      	bne.n	801d4aa <__swsetup_r+0x46>
 801d4a6:	68ac      	ldr	r4, [r5, #8]
 801d4a8:	e7eb      	b.n	801d482 <__swsetup_r+0x1e>
 801d4aa:	4b24      	ldr	r3, [pc, #144]	; (801d53c <__swsetup_r+0xd8>)
 801d4ac:	429c      	cmp	r4, r3
 801d4ae:	bf08      	it	eq
 801d4b0:	68ec      	ldreq	r4, [r5, #12]
 801d4b2:	e7e6      	b.n	801d482 <__swsetup_r+0x1e>
 801d4b4:	0758      	lsls	r0, r3, #29
 801d4b6:	d512      	bpl.n	801d4de <__swsetup_r+0x7a>
 801d4b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d4ba:	b141      	cbz	r1, 801d4ce <__swsetup_r+0x6a>
 801d4bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d4c0:	4299      	cmp	r1, r3
 801d4c2:	d002      	beq.n	801d4ca <__swsetup_r+0x66>
 801d4c4:	4630      	mov	r0, r6
 801d4c6:	f7fd fbf7 	bl	801acb8 <_free_r>
 801d4ca:	2300      	movs	r3, #0
 801d4cc:	6363      	str	r3, [r4, #52]	; 0x34
 801d4ce:	89a3      	ldrh	r3, [r4, #12]
 801d4d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801d4d4:	81a3      	strh	r3, [r4, #12]
 801d4d6:	2300      	movs	r3, #0
 801d4d8:	6063      	str	r3, [r4, #4]
 801d4da:	6923      	ldr	r3, [r4, #16]
 801d4dc:	6023      	str	r3, [r4, #0]
 801d4de:	89a3      	ldrh	r3, [r4, #12]
 801d4e0:	f043 0308 	orr.w	r3, r3, #8
 801d4e4:	81a3      	strh	r3, [r4, #12]
 801d4e6:	6923      	ldr	r3, [r4, #16]
 801d4e8:	b94b      	cbnz	r3, 801d4fe <__swsetup_r+0x9a>
 801d4ea:	89a3      	ldrh	r3, [r4, #12]
 801d4ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801d4f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d4f4:	d003      	beq.n	801d4fe <__swsetup_r+0x9a>
 801d4f6:	4621      	mov	r1, r4
 801d4f8:	4630      	mov	r0, r6
 801d4fa:	f000 f847 	bl	801d58c <__smakebuf_r>
 801d4fe:	89a0      	ldrh	r0, [r4, #12]
 801d500:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801d504:	f010 0301 	ands.w	r3, r0, #1
 801d508:	d00a      	beq.n	801d520 <__swsetup_r+0xbc>
 801d50a:	2300      	movs	r3, #0
 801d50c:	60a3      	str	r3, [r4, #8]
 801d50e:	6963      	ldr	r3, [r4, #20]
 801d510:	425b      	negs	r3, r3
 801d512:	61a3      	str	r3, [r4, #24]
 801d514:	6923      	ldr	r3, [r4, #16]
 801d516:	b943      	cbnz	r3, 801d52a <__swsetup_r+0xc6>
 801d518:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801d51c:	d1ba      	bne.n	801d494 <__swsetup_r+0x30>
 801d51e:	bd70      	pop	{r4, r5, r6, pc}
 801d520:	0781      	lsls	r1, r0, #30
 801d522:	bf58      	it	pl
 801d524:	6963      	ldrpl	r3, [r4, #20]
 801d526:	60a3      	str	r3, [r4, #8]
 801d528:	e7f4      	b.n	801d514 <__swsetup_r+0xb0>
 801d52a:	2000      	movs	r0, #0
 801d52c:	e7f7      	b.n	801d51e <__swsetup_r+0xba>
 801d52e:	bf00      	nop
 801d530:	2000003c 	.word	0x2000003c
 801d534:	0801dd30 	.word	0x0801dd30
 801d538:	0801dd50 	.word	0x0801dd50
 801d53c:	0801dd10 	.word	0x0801dd10

0801d540 <__swhatbuf_r>:
 801d540:	b570      	push	{r4, r5, r6, lr}
 801d542:	460e      	mov	r6, r1
 801d544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d548:	2900      	cmp	r1, #0
 801d54a:	b096      	sub	sp, #88	; 0x58
 801d54c:	4614      	mov	r4, r2
 801d54e:	461d      	mov	r5, r3
 801d550:	da08      	bge.n	801d564 <__swhatbuf_r+0x24>
 801d552:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801d556:	2200      	movs	r2, #0
 801d558:	602a      	str	r2, [r5, #0]
 801d55a:	061a      	lsls	r2, r3, #24
 801d55c:	d410      	bmi.n	801d580 <__swhatbuf_r+0x40>
 801d55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d562:	e00e      	b.n	801d582 <__swhatbuf_r+0x42>
 801d564:	466a      	mov	r2, sp
 801d566:	f000 f851 	bl	801d60c <_fstat_r>
 801d56a:	2800      	cmp	r0, #0
 801d56c:	dbf1      	blt.n	801d552 <__swhatbuf_r+0x12>
 801d56e:	9a01      	ldr	r2, [sp, #4]
 801d570:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d574:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d578:	425a      	negs	r2, r3
 801d57a:	415a      	adcs	r2, r3
 801d57c:	602a      	str	r2, [r5, #0]
 801d57e:	e7ee      	b.n	801d55e <__swhatbuf_r+0x1e>
 801d580:	2340      	movs	r3, #64	; 0x40
 801d582:	2000      	movs	r0, #0
 801d584:	6023      	str	r3, [r4, #0]
 801d586:	b016      	add	sp, #88	; 0x58
 801d588:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d58c <__smakebuf_r>:
 801d58c:	898b      	ldrh	r3, [r1, #12]
 801d58e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d590:	079d      	lsls	r5, r3, #30
 801d592:	4606      	mov	r6, r0
 801d594:	460c      	mov	r4, r1
 801d596:	d507      	bpl.n	801d5a8 <__smakebuf_r+0x1c>
 801d598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d59c:	6023      	str	r3, [r4, #0]
 801d59e:	6123      	str	r3, [r4, #16]
 801d5a0:	2301      	movs	r3, #1
 801d5a2:	6163      	str	r3, [r4, #20]
 801d5a4:	b002      	add	sp, #8
 801d5a6:	bd70      	pop	{r4, r5, r6, pc}
 801d5a8:	ab01      	add	r3, sp, #4
 801d5aa:	466a      	mov	r2, sp
 801d5ac:	f7ff ffc8 	bl	801d540 <__swhatbuf_r>
 801d5b0:	9900      	ldr	r1, [sp, #0]
 801d5b2:	4605      	mov	r5, r0
 801d5b4:	4630      	mov	r0, r6
 801d5b6:	f7fd fbeb 	bl	801ad90 <_malloc_r>
 801d5ba:	b948      	cbnz	r0, 801d5d0 <__smakebuf_r+0x44>
 801d5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d5c0:	059a      	lsls	r2, r3, #22
 801d5c2:	d4ef      	bmi.n	801d5a4 <__smakebuf_r+0x18>
 801d5c4:	f023 0303 	bic.w	r3, r3, #3
 801d5c8:	f043 0302 	orr.w	r3, r3, #2
 801d5cc:	81a3      	strh	r3, [r4, #12]
 801d5ce:	e7e3      	b.n	801d598 <__smakebuf_r+0xc>
 801d5d0:	4b0d      	ldr	r3, [pc, #52]	; (801d608 <__smakebuf_r+0x7c>)
 801d5d2:	62b3      	str	r3, [r6, #40]	; 0x28
 801d5d4:	89a3      	ldrh	r3, [r4, #12]
 801d5d6:	6020      	str	r0, [r4, #0]
 801d5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d5dc:	81a3      	strh	r3, [r4, #12]
 801d5de:	9b00      	ldr	r3, [sp, #0]
 801d5e0:	6163      	str	r3, [r4, #20]
 801d5e2:	9b01      	ldr	r3, [sp, #4]
 801d5e4:	6120      	str	r0, [r4, #16]
 801d5e6:	b15b      	cbz	r3, 801d600 <__smakebuf_r+0x74>
 801d5e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d5ec:	4630      	mov	r0, r6
 801d5ee:	f000 f81f 	bl	801d630 <_isatty_r>
 801d5f2:	b128      	cbz	r0, 801d600 <__smakebuf_r+0x74>
 801d5f4:	89a3      	ldrh	r3, [r4, #12]
 801d5f6:	f023 0303 	bic.w	r3, r3, #3
 801d5fa:	f043 0301 	orr.w	r3, r3, #1
 801d5fe:	81a3      	strh	r3, [r4, #12]
 801d600:	89a0      	ldrh	r0, [r4, #12]
 801d602:	4305      	orrs	r5, r0
 801d604:	81a5      	strh	r5, [r4, #12]
 801d606:	e7cd      	b.n	801d5a4 <__smakebuf_r+0x18>
 801d608:	0801aa79 	.word	0x0801aa79

0801d60c <_fstat_r>:
 801d60c:	b538      	push	{r3, r4, r5, lr}
 801d60e:	4d07      	ldr	r5, [pc, #28]	; (801d62c <_fstat_r+0x20>)
 801d610:	2300      	movs	r3, #0
 801d612:	4604      	mov	r4, r0
 801d614:	4608      	mov	r0, r1
 801d616:	4611      	mov	r1, r2
 801d618:	602b      	str	r3, [r5, #0]
 801d61a:	f7f1 f92e 	bl	800e87a <_fstat>
 801d61e:	1c43      	adds	r3, r0, #1
 801d620:	d102      	bne.n	801d628 <_fstat_r+0x1c>
 801d622:	682b      	ldr	r3, [r5, #0]
 801d624:	b103      	cbz	r3, 801d628 <_fstat_r+0x1c>
 801d626:	6023      	str	r3, [r4, #0]
 801d628:	bd38      	pop	{r3, r4, r5, pc}
 801d62a:	bf00      	nop
 801d62c:	2000a4a8 	.word	0x2000a4a8

0801d630 <_isatty_r>:
 801d630:	b538      	push	{r3, r4, r5, lr}
 801d632:	4d06      	ldr	r5, [pc, #24]	; (801d64c <_isatty_r+0x1c>)
 801d634:	2300      	movs	r3, #0
 801d636:	4604      	mov	r4, r0
 801d638:	4608      	mov	r0, r1
 801d63a:	602b      	str	r3, [r5, #0]
 801d63c:	f7f1 f92d 	bl	800e89a <_isatty>
 801d640:	1c43      	adds	r3, r0, #1
 801d642:	d102      	bne.n	801d64a <_isatty_r+0x1a>
 801d644:	682b      	ldr	r3, [r5, #0]
 801d646:	b103      	cbz	r3, 801d64a <_isatty_r+0x1a>
 801d648:	6023      	str	r3, [r4, #0]
 801d64a:	bd38      	pop	{r3, r4, r5, pc}
 801d64c:	2000a4a8 	.word	0x2000a4a8

0801d650 <_init>:
 801d650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d652:	bf00      	nop
 801d654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d656:	bc08      	pop	{r3}
 801d658:	469e      	mov	lr, r3
 801d65a:	4770      	bx	lr

0801d65c <_fini>:
 801d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d65e:	bf00      	nop
 801d660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d662:	bc08      	pop	{r3}
 801d664:	469e      	mov	lr, r3
 801d666:	4770      	bx	lr
