
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015ce8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000087c  08015e78  08015e78  00025e78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080166f4  080166f4  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  080166f4  080166f4  000266f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080166fc  080166fc  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  080166fc  080166fc  000266fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801671c  0801671c  0002671c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08016724  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          0000a250  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  2000a448  2000a448  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049309  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c27c  00000000  00000000  0007952d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003448  00000000  00000000  000857b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000030b8  00000000  00000000  00088bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003246d  00000000  00000000  0008bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00043228  00000000  00000000  000be11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001001c1  00000000  00000000  00101345  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00201506  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f0b0  00000000  00000000  00201558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015e60 	.word	0x08015e60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08015e60 	.word	0x08015e60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	711a      	strb	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	715a      	strb	r2, [r3, #5]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000fde:	b490      	push	{r4, r7}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e009      	b.n	800101e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	0e0a      	lsrs	r2, r1, #24
 800104c:	2300      	movs	r3, #0
 800104e:	b2d3      	uxtb	r3, r2
 8001050:	4323      	orrs	r3, r4
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0a02      	lsrs	r2, r0, #8
 8001068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800106c:	0a0b      	lsrs	r3, r1, #8
 800106e:	b2d4      	uxtb	r4, r2
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c0a      	lsrs	r2, r1, #16
 8001080:	2300      	movs	r3, #0
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	4322      	orrs	r2, r4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0c02      	lsrs	r2, r0, #16
 800109e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a2:	0c0b      	lsrs	r3, r1, #16
 80010a4:	b2d4      	uxtb	r4, r2
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0a0a      	lsrs	r2, r1, #8
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	4322      	orrs	r2, r4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	0e02      	lsrs	r2, r0, #24
 80010d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d8:	0e0b      	lsrs	r3, r1, #24
 80010da:	b2d4      	uxtb	r4, r2
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	000a      	movs	r2, r1
 80010ec:	2300      	movs	r3, #0
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3303      	adds	r3, #3
 80010f4:	4322      	orrs	r2, r4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	000a      	movs	r2, r1
 800110a:	2300      	movs	r3, #0
 800110c:	b2d4      	uxtb	r4, r2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	0e02      	lsrs	r2, r0, #24
 800111e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001122:	0e0b      	lsrs	r3, r1, #24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	4322      	orrs	r2, r4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0a0a      	lsrs	r2, r1, #8
 8001140:	2300      	movs	r3, #0
 8001142:	b2d4      	uxtb	r4, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	0c02      	lsrs	r2, r0, #16
 8001154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001158:	0c0b      	lsrs	r3, r1, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3305      	adds	r3, #5
 8001160:	4322      	orrs	r2, r4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	0c0a      	lsrs	r2, r1, #16
 8001176:	2300      	movs	r3, #0
 8001178:	b2d4      	uxtb	r4, r2
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	0a02      	lsrs	r2, r0, #8
 800118a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800118e:	0a0b      	lsrs	r3, r1, #8
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4322      	orrs	r2, r4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0e0a      	lsrs	r2, r1, #24
 80011ac:	2300      	movs	r3, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3307      	adds	r3, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        }
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr

080011cc <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	6093      	str	r3, [r2, #8]
 80011e0:	60d3      	str	r3, [r2, #12]
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffe3 	bl	80011cc <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f103 0218 	add.w	r2, r3, #24
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fee4 	bl	8000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001216:	bf00      	nop
        }
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffde 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZNK3can11MessageBase4sendEm+0x54>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	f00d fe08 	bl	800ee58 <osMessageQueuePut>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8001258:	f011 fa74 	bl	8012744 <vPortEnterCritical>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZNK3can11MessageBase4sendEm+0x58>)
 8001262:	f00d f9a3 	bl	800e5ac <printf_>
 8001266:	f011 fa9d 	bl	80127a4 <vPortExitCritical>
            }
        }
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000079c 	.word	0x2000079c
 8001278:	08015e78 	.word	0x08015e78

0800127c <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	2204      	movs	r2, #4
 800128a:	2181      	movs	r1, #129	; 0x81
 800128c:	f7ff fe7e 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_ZN7canzero9emergency14consumer_entryEPv>:
#include <cinttypes>
#include "FreeRTOS.h"
#include "task.h"


void canzero::emergency::consumer_entry(void* argv){
 800129a:	b5b0      	push	{r4, r5, r7, lr}
 800129c:	b08c      	sub	sp, #48	; 0x30
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80012a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ffe5 	bl	800127c <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80012ba:	f107 020c 	add.w	r2, r7, #12
 80012be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c2:	2100      	movs	r1, #0
 80012c4:	2000      	movs	r0, #0
 80012c6:	f010 fc2d 	bl	8011b24 <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <_ZN7canzero9emergency14consumer_entryEPv+0x3c>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80012d2:	f000 ff59 	bl	8002188 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d103      	bne.n	80012e4 <_ZN7canzero9emergency14consumer_entryEPv+0x4a>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d00b      	beq.n	80012fc <_ZN7canzero9emergency14consumer_entryEPv+0x62>
			emcyMessage.intel = emergencyBuffer;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2200      	movs	r2, #0
 80012e8:	461c      	mov	r4, r3
 80012ea:	4615      	mov	r5, r2
 80012ec:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff92 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 8001300:	e7db      	b.n	80012ba <_ZN7canzero9emergency14consumer_entryEPv+0x20>
	...

08001304 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5b 	bl	80011cc <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001316:	f240 7301 	movw	r3, #1793	; 0x701
 800131a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001324:	f000 fe50 	bl	8001fc8 <_ZN7canzero9getStatusEv>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f107 010c 	add.w	r1, r7, #12
 8001336:	2300      	movs	r3, #0
 8001338:	2200      	movs	r2, #0
 800133a:	f00d fd8d 	bl	800ee58 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 800133e:	f000 f841 	bl	80013c4 <_ZN7canzero9heartbeat11getIntervalEv>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	4a06      	ldr	r2, [pc, #24]	; (8001368 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	099b      	lsrs	r3, r3, #6
 8001356:	4618      	mov	r0, r3
 8001358:	f00d faa2 	bl	800e8a0 <osDelay>
		frame ++;
 800135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135e:	3301      	adds	r3, #1
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001362:	e7df      	b.n	8001324 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 8001364:	2000079c 	.word	0x2000079c
 8001368:	10624dd3 	.word	0x10624dd3

0800136c <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08d      	sub	sp, #52	; 0x34
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 8001376:	681c      	ldr	r4, [r3, #0]
 8001378:	f000 f824 	bl	80013c4 <_ZN7canzero9heartbeat11getIntervalEv>
 800137c:	4603      	mov	r3, r0
 800137e:	3305      	adds	r3, #5
 8001380:	461a      	mov	r2, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	f107 010c 	add.w	r1, r7, #12
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	4620      	mov	r0, r4
 800139a:	f00f f983 	bl	80106a4 <xStreamBufferReceive>
 800139e:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0e2      	beq.n	8001374 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 80013ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fdec 	bl	8001f90 <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013b8:	e7dc      	b.n	8001374 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80013ba:	bf00      	nop
 80013bc:	20000214 	.word	0x20000214
 80013c0:	10624dd3 	.word	0x10624dd3

080013c4 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80013c8:	f003 f9f8 	bl	80047bc <_Z24OD_HeartbeatInterval_getv>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <_Z41__static_initialization_and_destruction_0ii>:
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d10c      	bne.n	80013fe <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d107      	bne.n	80013fe <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2100      	movs	r1, #0
 80013f2:	20c8      	movs	r0, #200	; 0xc8
 80013f4:	f00e ffd6 	bl	80103a4 <xStreamBufferGenericCreate>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a03      	ldr	r2, [pc, #12]	; (8001408 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80013fc:	6013      	str	r3, [r2, #0]
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000214 	.word	0x20000214

0800140c <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
 8001410:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ffdd 	bl	80013d4 <_Z41__static_initialization_and_destruction_0ii>
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	4798      	blx	r3
    }
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf0c      	ite	eq
 800146e:	2301      	moveq	r3, #1
 8001470:	2300      	movne	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ffd4 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f887 	bl	80015b8 <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_ZN7canzero10receiver_tD1Ev>:
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ffde 	bl	8001480 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:
	g_receivers[g_size++] = recv;
	taskEXIT_CRITICAL();
	return id;
}

bool processRxMessageReceiver(RxMessage& message){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 80014d8:	2300      	movs	r3, #0
 80014da:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d12f      	bne.n	8001544 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d258      	bcs.n	80015a4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 80014f2:	4930      	ldr	r1, [pc, #192]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	3314      	adds	r3, #20
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d119      	bne.n	800153c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	4829      	ldr	r0, [pc, #164]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4403      	add	r3, r0
 800151a:	3310      	adds	r3, #16
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4299      	cmp	r1, r3
 8001520:	d10c      	bne.n	800153c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800152e:	4413      	add	r3, r2
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f84d 	bl	80015d2 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001538:	2301      	movs	r3, #1
 800153a:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	3301      	adds	r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	e7d1      	b.n	80014e8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	429a      	cmp	r2, r3
 8001550:	d228      	bcs.n	80015a4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 8001552:	4918      	ldr	r1, [pc, #96]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3314      	adds	r3, #20
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d119      	bne.n	800159c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4403      	add	r3, r0
 800157a:	3310      	adds	r3, #16
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4299      	cmp	r1, r3
 8001580:	d10c      	bne.n	800159c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800158e:	4413      	add	r3, r2
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f81d 	bl	80015d2 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001598:	2301      	movs	r3, #1
 800159a:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3301      	adds	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	e7d1      	b.n	8001548 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000790 	.word	0x20000790
 80015b4:	20000218 	.word	0x20000218

080015b8 <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff2a 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80015d2:	b5b0      	push	{r4, r5, r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff3d 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 80015ea:	f011 fbce 	bl	8012d8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68dc      	ldr	r4, [r3, #12]
 80015f2:	687d      	ldr	r5, [r7, #4]
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f000 f808 	bl	800160a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4619      	mov	r1, r3
 80015fe:	4628      	mov	r0, r5
 8001600:	47a0      	blx	r4
 8001602:	bf00      	nop
    }
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bdb0      	pop	{r4, r5, r7, pc}

0800160a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffed 	bl	8001620 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001646:	4602      	mov	r2, r0
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001650:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f7ff ffe3 	bl	8001620 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800165a:	4602      	mov	r2, r0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001662:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ffd8 	bl	8001620 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001670:	4602      	mov	r2, r0
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001678:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffed 	bl	8001684 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80016aa:	4603      	mov	r3, r0
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f7ff ffe7 	bl	8001684 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80016b6:	4603      	mov	r3, r0
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ffde 	bl	8001684 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80016c8:	4603      	mov	r3, r0
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	601a      	str	r2, [r3, #0]
    }
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	taskEXIT_CRITICAL();
}

}
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10f      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80016f4:	2431      	movs	r4, #49	; 0x31
 80016f6:	461d      	mov	r5, r3
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	db05      	blt.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016fc:	4628      	mov	r0, r5
 80016fe:	f7ff fecc 	bl	800149a <_ZN7canzero10receiver_tC1Ev>
 8001702:	351c      	adds	r5, #28
 8001704:	3c01      	subs	r4, #1
 8001706:	e7f7      	b.n	80016f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10d      	bne.n	800172a <_Z41__static_initialization_and_destruction_0ii+0x52>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001714:	4293      	cmp	r3, r2
 8001716:	d108      	bne.n	800172a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001718:	4c07      	ldr	r4, [pc, #28]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800171c:	429c      	cmp	r4, r3
 800171e:	d004      	beq.n	800172a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001720:	3c1c      	subs	r4, #28
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff fec6 	bl	80014b4 <_ZN7canzero10receiver_tD1Ev>
 8001728:	e7f7      	b.n	800171a <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bdb0      	pop	{r4, r5, r7, pc}
 8001732:	bf00      	nop
 8001734:	20000218 	.word	0x20000218
 8001738:	20000790 	.word	0x20000790

0800173c <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
 8001740:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff ffc7 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 800174a:	bd80      	pop	{r7, pc}

0800174c <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
 8001750:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff ffbf 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 800175a:	bd80      	pop	{r7, pc}

0800175c <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 800175c:	b084      	sub	sp, #16
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
 8001762:	f107 0c08 	add.w	ip, r7, #8
 8001766:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 800176a:	f107 0008 	add.w	r0, r7, #8
 800176e:	f000 f835 	bl	80017dc <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_Z9processRX9RxMessage+0x74>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	230a      	movs	r3, #10
 800177e:	2224      	movs	r2, #36	; 0x24
 8001780:	f107 0108 	add.w	r1, r7, #8
 8001784:	f00e fe9c 	bl	80104c0 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 8001788:	e01c      	b.n	80017c4 <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 800178a:	f107 0008 	add.w	r0, r7, #8
 800178e:	f7ff fe9f 	bl	80014d0 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d115      	bne.n	80017c4 <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 800179e:	f010 ffd1 	bl	8012744 <vPortEnterCritical>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	4619      	mov	r1, r3
 80017a6:	480b      	ldr	r0, [pc, #44]	; (80017d4 <_Z9processRX9RxMessage+0x78>)
 80017a8:	f00c ff00 	bl	800e5ac <printf_>
 80017ac:	f010 fffa 	bl	80127a4 <vPortExitCritical>
}
 80017b0:	e008      	b.n	80017c4 <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 80017b2:	f010 ffc7 	bl	8012744 <vPortEnterCritical>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4619      	mov	r1, r3
 80017ba:	4807      	ldr	r0, [pc, #28]	; (80017d8 <_Z9processRX9RxMessage+0x7c>)
 80017bc:	f00c fef6 	bl	800e5ac <printf_>
 80017c0:	f010 fff0 	bl	80127a4 <vPortExitCritical>
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017cc:	b004      	add	sp, #16
 80017ce:	4770      	bx	lr
 80017d0:	20000794 	.word	0x20000794
 80017d4:	08015eac 	.word	0x08015eac
 80017d8:	08015ed0 	.word	0x08015ed0

080017dc <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f240 12c1 	movw	r2, #449	; 0x1c1
 80017f4:	4293      	cmp	r3, r2
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	e000      	b.n	8001802 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001800:	2300      	movs	r3, #0
    }
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <_Z41__static_initialization_and_destruction_0ii>:
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10c      	bne.n	800183a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001826:	4293      	cmp	r3, r2
 8001828:	d107      	bne.n	800183a <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 800182a:	2201      	movs	r2, #1
 800182c:	2100      	movs	r1, #0
 800182e:	20c8      	movs	r0, #200	; 0xc8
 8001830:	f00e fdb8 	bl	80103a4 <xStreamBufferGenericCreate>
 8001834:	4603      	mov	r3, r0
 8001836:	4a03      	ldr	r2, [pc, #12]	; (8001844 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001838:	6013      	str	r3, [r2, #0]
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000794 	.word	0x20000794

08001848 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
 800184c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff ffdd 	bl	8001810 <_Z41__static_initialization_and_destruction_0ii>
 8001856:	bd80      	pop	{r7, pc}

08001858 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10c      	bne.n	8001882 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800186e:	4293      	cmp	r3, r2
 8001870:	d107      	bne.n	8001882 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001872:	4a06      	ldr	r2, [pc, #24]	; (800188c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001874:	2124      	movs	r1, #36	; 0x24
 8001876:	2010      	movs	r0, #16
 8001878:	f00d fa7a 	bl	800ed70 <osMessageQueueNew>
 800187c:	4603      	mov	r3, r0
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	08016118 	.word	0x08016118
 8001890:	20000798 	.word	0x20000798

08001894 <_GLOBAL__sub_I_czReceiveQueue>:
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
 8001898:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff ffdb 	bl	8001858 <_Z41__static_initialization_and_destruction_0ii>
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018a8:	f3bf 8f4f 	dsb	sy
}
 80018ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <__NVIC_SystemReset+0x24>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80018b6:	4904      	ldr	r1, [pc, #16]	; (80018c8 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_SystemReset+0x28>)
 80018ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80018bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80018be:	f3bf 8f4f 	dsb	sy
}
 80018c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <__NVIC_SystemReset+0x20>
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	05fa0004 	.word	0x05fa0004

080018d0 <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b092      	sub	sp, #72	; 0x48
 80018d4:	af06      	add	r7, sp, #24
 80018d6:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <_Z15cz_receive_taskPv+0xa4>)
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	f107 010c 	add.w	r1, r7, #12
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	2200      	movs	r2, #0
 80018e6:	f00d fb17 	bl	800ef18 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d136      	bne.n	800195e <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f8e3 	bl	8001ac0 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001900:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001904:	2bff      	cmp	r3, #255	; 0xff
 8001906:	d1e7      	bne.n	80018d8 <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001908:	f7ff ffcc 	bl	80018a4 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f8ee 	bl	8001af2 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4618      	mov	r0, r3
 8001922:	f002 faf1 	bl	8003f08 <_Z22handleSDORequestUploadRK9RxMessage>
 8001926:	e7d7      	b.n	80018d8 <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f8f9 	bl	8001b24 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	4618      	mov	r0, r3
 800193e:	f001 ff44 	bl	80037ca <_Z24handleSDORequestDownloadRK9RxMessage>
 8001942:	e7c9      	b.n	80018d8 <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001944:	466d      	mov	r5, sp
 8001946:	f107 041c 	add.w	r4, r7, #28
 800194a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	602b      	str	r3, [r5, #0]
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001958:	f7ff ff00 	bl	800175c <_Z9processRX9RxMessage>
 800195c:	e7bc      	b.n	80018d8 <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d1b9      	bne.n	80018d8 <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001964:	f010 feee 	bl	8012744 <vPortEnterCritical>
 8001968:	4803      	ldr	r0, [pc, #12]	; (8001978 <_Z15cz_receive_taskPv+0xa8>)
 800196a:	f00c fe1f 	bl	800e5ac <printf_>
 800196e:	f010 ff19 	bl	80127a4 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001972:	e7b1      	b.n	80018d8 <_Z15cz_receive_taskPv+0x8>
 8001974:	20000798 	.word	0x20000798
 8001978:	08015f04 	.word	0x08015f04

0800197c <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b096      	sub	sp, #88	; 0x58
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001984:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001988:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f007 fd40 	bl	8009414 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001994:	f107 040c 	add.w	r4, r7, #12
 8001998:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800199c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	657b      	str	r3, [r7, #84]	; 0x54
 80019ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	dc0e      	bgt.n	80019d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 80019b2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80019b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b8:	4413      	add	r3, r2
 80019ba:	7819      	ldrb	r1, [r3, #0]
 80019bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c2:	4413      	add	r3, r2
 80019c4:	460a      	mov	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	3301      	adds	r3, #1
 80019cc:	657b      	str	r3, [r7, #84]	; 0x54
 80019ce:	e7ed      	b.n	80019ac <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f107 010c 	add.w	r1, r7, #12
 80019d8:	2300      	movs	r3, #0
 80019da:	2200      	movs	r2, #0
 80019dc:	f00d fa3c 	bl	800ee58 <osMessageQueuePut>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0

	}
}
 80019e4:	bf00      	nop
 80019e6:	3758      	adds	r7, #88	; 0x58
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	20000798 	.word	0x20000798

080019f0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b096      	sub	sp, #88	; 0x58
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80019f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a00:	2101      	movs	r1, #1
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f007 fd06 	bl	8009414 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001a08:	f107 040c 	add.w	r4, r7, #12
 8001a0c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	657b      	str	r3, [r7, #84]	; 0x54
 8001a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a22:	2b07      	cmp	r3, #7
 8001a24:	dc0e      	bgt.n	8001a44 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001a26:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2c:	4413      	add	r3, r2
 8001a2e:	7819      	ldrb	r1, [r3, #0]
 8001a30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a36:	4413      	add	r3, r2
 8001a38:	460a      	mov	r2, r1
 8001a3a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3e:	3301      	adds	r3, #1
 8001a40:	657b      	str	r3, [r7, #84]	; 0x54
 8001a42:	e7ed      	b.n	8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	f107 010c 	add.w	r1, r7, #12
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f00d fa02 	bl	800ee58 <osMessageQueuePut>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0

	}
}
 8001a58:	bf00      	nop
 8001a5a:	3758      	adds	r7, #88	; 0x58
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a60:	20000798 	.word	0x20000798

08001a64 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f008 f81a 	bl	8009aa6 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001a72:	f3ef 8211 	mrs	r2, BASEPRI
 8001a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7a:	f383 8811 	msr	BASEPRI, r3
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	60fa      	str	r2, [r7, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <HAL_CAN_ErrorCallback+0x44>)
 8001a90:	f00c fd8c 	bl	800e5ac <printf_>
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001a9e:	bf00      	nop
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	08015f1c 	.word	0x08015f1c

08001aac <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f240 7281 	movw	r2, #1921	; 0x781
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	e000      	b.n	8001ae6 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001ae4:	2300      	movs	r3, #0
    }
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	bf0c      	ite	eq
 8001b0e:	2301      	moveq	r3, #1
 8001b10:	2300      	movne	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	e000      	b.n	8001b18 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001b16:	2300      	movs	r3, #0
    }
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f240 6201 	movw	r2, #1537	; 0x601
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e000      	b.n	8001b4a <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001b48:	2300      	movs	r3, #0
    }
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d10c      	bne.n	8001b82 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d107      	bne.n	8001b82 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001b72:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001b74:	2120      	movs	r1, #32
 8001b76:	2010      	movs	r0, #16
 8001b78:	f00d f8fa 	bl	800ed70 <osMessageQueueNew>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	08016130 	.word	0x08016130
 8001b90:	2000079c 	.word	0x2000079c

08001b94 <_GLOBAL__sub_I_czSendQueue>:
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff ffdb 	bl	8001b58 <_Z41__static_initialization_and_destruction_0ii>
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08e      	sub	sp, #56	; 0x38
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fb0b 	bl	80011cc <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <_Z13cz_send_entryPv+0x180>)
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	f107 010c 	add.w	r1, r7, #12
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f00d f9a6 	bl	800ef18 <osMessageQueueGet>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001bdc:	f005 fd8e 	bl	80076fc <Error_Handler>
		}
		if(sendMessage.txHeader.DLC>8){
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d901      	bls.n	8001bea <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001be6:	f005 fd89 	bl	80076fc <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfe:	d102      	bne.n	8001c06 <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001c00:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <_Z13cz_send_entryPv+0x184>)
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
 8001c04:	e010      	b.n	8001c28 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c0c:	d102      	bne.n	8001c14 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <_Z13cz_send_entryPv+0x188>)
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
 8001c12:	e009      	b.n	8001c28 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001c1e:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <_Z13cz_send_entryPv+0x184>)
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
 8001c22:	e001      	b.n	8001c28 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001c24:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <_Z13cz_send_entryPv+0x188>)
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001c28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c2a:	f007 fbbe 	bl	80093aa <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d016      	beq.n	8001c6c <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001c3e:	f107 0008 	add.w	r0, r7, #8
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	f103 0218 	add.w	r2, r3, #24
 8001c4a:	f107 010c 	add.w	r1, r7, #12
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c52:	f007 facf 	bl	80091f4 <HAL_CAN_AddTxMessage>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d059      	beq.n	8001d1a <_Z13cz_send_entryPv+0x176>
				/* Transmission request Error */
				Error_Handler();
 8001c66:	f005 fd49 	bl	80076fc <Error_Handler>
 8001c6a:	e056      	b.n	8001d1a <_Z13cz_send_entryPv+0x176>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	4a2e      	ldr	r2, [pc, #184]	; (8001d28 <_Z13cz_send_entryPv+0x184>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d10c      	bne.n	8001c8e <_Z13cz_send_entryPv+0xea>
				OD_CAN1_DelayedTxMessages++;
 8001c74:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <_Z13cz_send_entryPv+0x18c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <_Z13cz_send_entryPv+0x18c>)
 8001c7c:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can1 tx mailbox overflow.\n")
 8001c7e:	f010 fd61 	bl	8012744 <vPortEnterCritical>
 8001c82:	482c      	ldr	r0, [pc, #176]	; (8001d34 <_Z13cz_send_entryPv+0x190>)
 8001c84:	f00c fc92 	bl	800e5ac <printf_>
 8001c88:	f010 fd8c 	bl	80127a4 <vPortExitCritical>
 8001c8c:	e00b      	b.n	8001ca6 <_Z13cz_send_entryPv+0x102>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <_Z13cz_send_entryPv+0x194>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <_Z13cz_send_entryPv+0x194>)
 8001c96:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can2 tx mailbox overflow.\n")
 8001c98:	f010 fd54 	bl	8012744 <vPortEnterCritical>
 8001c9c:	4827      	ldr	r0, [pc, #156]	; (8001d3c <_Z13cz_send_entryPv+0x198>)
 8001c9e:	f00c fc85 	bl	800e5ac <printf_>
 8001ca2:	f010 fd7f 	bl	80127a4 <vPortExitCritical>
			}

			osDelay(1);		// Use smallest delay possible
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f00c fdfa 	bl	800e8a0 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001cac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001cae:	f007 fb7c 	bl	80093aa <HAL_CAN_GetTxMailboxesFreeLevel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d016      	beq.n	8001cf0 <_Z13cz_send_entryPv+0x14c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001cc2:	f107 0008 	add.w	r0, r7, #8
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	f103 0218 	add.w	r2, r3, #24
 8001cce:	f107 010c 	add.w	r1, r7, #12
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001cd6:	f007 fa8d 	bl	80091f4 <HAL_CAN_AddTxMessage>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf14      	ite	ne
 8001ce0:	2301      	movne	r3, #1
 8001ce2:	2300      	moveq	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d017      	beq.n	8001d1a <_Z13cz_send_entryPv+0x176>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001cea:	f000 fa5e 	bl	80021aa <_ZN7canzero32handle_trasmission_request_errorEv>
 8001cee:	e014      	b.n	8001d1a <_Z13cz_send_entryPv+0x176>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <_Z13cz_send_entryPv+0x184>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d108      	bne.n	8001d0a <_Z13cz_send_entryPv+0x166>
					OD_CAN1_DiscardedTxMessages++;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <_Z13cz_send_entryPv+0x19c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <_Z13cz_send_entryPv+0x19c>)
 8001d00:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <_Z13cz_send_entryPv+0x184>)
 8001d04:	f000 fa47 	bl	8002196 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001d08:	e007      	b.n	8001d1a <_Z13cz_send_entryPv+0x176>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <_Z13cz_send_entryPv+0x1a0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <_Z13cz_send_entryPv+0x1a0>)
 8001d12:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <_Z13cz_send_entryPv+0x188>)
 8001d16:	f000 fa3e 	bl	8002196 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001d20:	e74b      	b.n	8001bba <_Z13cz_send_entryPv+0x16>
 8001d22:	bf00      	nop
 8001d24:	2000079c 	.word	0x2000079c
 8001d28:	20000d4c 	.word	0x20000d4c
 8001d2c:	20000d74 	.word	0x20000d74
 8001d30:	200007f4 	.word	0x200007f4
 8001d34:	08015f44 	.word	0x08015f44
 8001d38:	2000080c 	.word	0x2000080c
 8001d3c:	08015f6c 	.word	0x08015f6c
 8001d40:	200007ec 	.word	0x200007ec
 8001d44:	20000804 	.word	0x20000804

08001d48 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001d4e:	2080      	movs	r0, #128	; 0x80
 8001d50:	f000 f91e 	bl	8001f90 <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da4f      	bge.n	8001dfe <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001d66:	2300      	movs	r3, #0
 8001d68:	0b5b      	lsrs	r3, r3, #13
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	0b5b      	lsrs	r3, r3, #13
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001d82:	2300      	movs	r3, #0
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	f043 0306 	orr.w	r3, r3, #6
 8001d8c:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	0fda      	lsrs	r2, r3, #31
 8001d92:	4413      	add	r3, r2
 8001d94:	105b      	asrs	r3, r3, #1
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	e001      	b.n	8001da8 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001dac:	230e      	movs	r3, #14
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8001db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db2:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4871      	ldr	r0, [pc, #452]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001dba:	f007 f8f7 	bl	8008fac <HAL_CAN_ConfigFilter>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8001dce:	f005 fc95 	bl	80076fc <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8001dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd4:	330e      	adds	r3, #14
 8001dd6:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001dd8:	463b      	mov	r3, r7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4869      	ldr	r0, [pc, #420]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001dde:	f007 f8e5 	bl	8008fac <HAL_CAN_ConfigFilter>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 8001df2:	f005 fc83 	bl	80076fc <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	3301      	adds	r3, #1
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfc:	e7ac      	b.n	8001d58 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	dc69      	bgt.n	8001edc <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	0fda      	lsrs	r2, r3, #31
 8001e0c:	4413      	add	r3, r2
 8001e0e:	105b      	asrs	r3, r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8001e16:	4a5c      	ldr	r2, [pc, #368]	; (8001f88 <_ZN7canzero4initEv+0x240>)
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	015b      	lsls	r3, r3, #5
 8001e20:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8001e22:	4a5a      	ldr	r2, [pc, #360]	; (8001f8c <_ZN7canzero4initEv+0x244>)
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	015b      	lsls	r3, r3, #5
 8001e2c:	f043 0318 	orr.w	r3, r3, #24
 8001e30:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8001e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d106      	bne.n	8001e46 <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8001e40:	2306      	movs	r3, #6
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e011      	b.n	8001e6a <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <_ZN7canzero4initEv+0x240>)
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	015b      	lsls	r3, r3, #5
 8001e56:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8001e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <_ZN7canzero4initEv+0x244>)
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	015b      	lsls	r3, r3, #5
 8001e64:	f043 0318 	orr.w	r3, r3, #24
 8001e68:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	0fda      	lsrs	r2, r3, #31
 8001e6e:	4413      	add	r3, r2
 8001e70:	105b      	asrs	r3, r3, #1
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e001      	b.n	8001e84 <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001e88:	230e      	movs	r3, #14
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	4619      	mov	r1, r3
 8001e90:	483b      	ldr	r0, [pc, #236]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001e92:	f007 f88b 	bl	8008fac <HAL_CAN_ConfigFilter>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 8001ea6:	f005 fc29 	bl	80076fc <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	0fda      	lsrs	r2, r3, #31
 8001eae:	4413      	add	r3, r2
 8001eb0:	105b      	asrs	r3, r3, #1
 8001eb2:	330e      	adds	r3, #14
 8001eb4:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4832      	ldr	r0, [pc, #200]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001ebc:	f007 f876 	bl	8008fac <HAL_CAN_ConfigFilter>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf14      	ite	ne
 8001ec6:	2301      	movne	r3, #1
 8001ec8:	2300      	moveq	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 8001ed0:	f005 fc14 	bl	80076fc <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eda:	e792      	b.n	8001e02 <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001edc:	4828      	ldr	r0, [pc, #160]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001ede:	f007 f945 	bl	800916c <HAL_CAN_Start>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <_ZN7canzero4initEv+0x1ac>
 8001ee8:	4826      	ldr	r0, [pc, #152]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001eea:	f007 f93f 	bl	800916c <HAL_CAN_Start>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <_ZN7canzero4initEv+0x1b0>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <_ZN7canzero4initEv+0x1b2>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 8001efe:	f005 fbfd 	bl	80076fc <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001f02:	2102      	movs	r1, #2
 8001f04:	481e      	ldr	r0, [pc, #120]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001f06:	f007 fb97 	bl	8009638 <HAL_CAN_ActivateNotification>
 8001f0a:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10e      	bne.n	8001f2e <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001f10:	2110      	movs	r1, #16
 8001f12:	481b      	ldr	r0, [pc, #108]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001f14:	f007 fb90 	bl	8009638 <HAL_CAN_ActivateNotification>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d107      	bne.n	8001f2e <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f22:	4817      	ldr	r0, [pc, #92]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001f24:	f007 fb88 	bl	8009638 <HAL_CAN_ActivateNotification>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <_ZN7canzero4initEv+0x1ea>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <_ZN7canzero4initEv+0x1ec>
 8001f32:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 8001f38:	f005 fbe0 	bl	80076fc <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4811      	ldr	r0, [pc, #68]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001f40:	f007 fb7a 	bl	8009638 <HAL_CAN_ActivateNotification>
 8001f44:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10e      	bne.n	8001f68 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001f4a:	2110      	movs	r1, #16
 8001f4c:	480d      	ldr	r0, [pc, #52]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001f4e:	f007 fb73 	bl	8009638 <HAL_CAN_ActivateNotification>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d107      	bne.n	8001f68 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001f5e:	f007 fb6b 	bl	8009638 <HAL_CAN_ActivateNotification>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <_ZN7canzero4initEv+0x224>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <_ZN7canzero4initEv+0x226>
 8001f6c:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 8001f72:	f005 fbc3 	bl	80076fc <Error_Handler>
	}
}
 8001f76:	bf00      	nop
 8001f78:	3730      	adds	r7, #48	; 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000d4c 	.word	0x20000d4c
 8001f84:	20000d74 	.word	0x20000d74
 8001f88:	08016170 	.word	0x08016170
 8001f8c:	08016148 	.word	0x08016148

08001f90 <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00c fd1d 	bl	800e9e2 <osMutexAcquire>
	nodeStatus = new_status;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <_ZN7canzero9setStatusE9cz_status+0x34>)
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00c fd60 	bl	800ea78 <osMutexRelease>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200007a0 	.word	0x200007a0
 8001fc4:	200007a4 	.word	0x200007a4

08001fc8 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <_ZN7canzero9getStatusEv+0x30>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f00c fd03 	bl	800e9e2 <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_ZN7canzero9getStatusEv+0x34>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <_ZN7canzero9getStatusEv+0x30>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f00c fd46 	bl	800ea78 <osMutexRelease>
	return returnValue;
 8001fec:	79fb      	ldrb	r3, [r7, #7]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200007a0 	.word	0x200007a0
 8001ffc:	200007a4 	.word	0x200007a4

08002000 <_Z41__static_initialization_and_destruction_0ii>:
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10a      	bne.n	8002026 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002016:	4293      	cmp	r3, r2
 8002018:	d105      	bne.n	8002026 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800201c:	f00c fc5b 	bl	800e8d6 <osMutexNew>
 8002020:	4603      	mov	r3, r0
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002024:	6013      	str	r3, [r2, #0]
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	08016198 	.word	0x08016198
 8002034:	200007a0 	.word	0x200007a0

08002038 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
 800203c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002040:	2001      	movs	r0, #1
 8002042:	f7ff ffdd 	bl	8002000 <_Z41__static_initialization_and_destruction_0ii>
 8002046:	bd80      	pop	{r7, pc}

08002048 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b08e      	sub	sp, #56	; 0x38
 800204c:	af02      	add	r7, sp, #8
 800204e:	6078      	str	r0, [r7, #4]
	canzero::init();
 8002050:	f7ff fe7a 	bl	8001d48 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8002054:	2300      	movs	r3, #0
 8002056:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8002058:	f107 0318 	add.w	r3, r7, #24
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2318      	movs	r3, #24
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002068:	4939      	ldr	r1, [pc, #228]	; (8002150 <canzero_start+0x108>)
 800206a:	483a      	ldr	r0, [pc, #232]	; (8002154 <canzero_start+0x10c>)
 800206c:	f00e fd7d 	bl	8010b6a <xTaskCreate>
 8002070:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	2b01      	cmp	r3, #1
 8002076:	d006      	beq.n	8002086 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8002078:	f010 fb64 	bl	8012744 <vPortEnterCritical>
 800207c:	4836      	ldr	r0, [pc, #216]	; (8002158 <canzero_start+0x110>)
 800207e:	f00c fa95 	bl	800e5ac <printf_>
 8002082:	f010 fb8f 	bl	80127a4 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2318      	movs	r3, #24
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2300      	movs	r3, #0
 8002096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800209a:	4930      	ldr	r1, [pc, #192]	; (800215c <canzero_start+0x114>)
 800209c:	4830      	ldr	r0, [pc, #192]	; (8002160 <canzero_start+0x118>)
 800209e:	f00e fd64 	bl	8010b6a <xTaskCreate>
 80020a2:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 80020a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d006      	beq.n	80020b8 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 80020aa:	f010 fb4b 	bl	8012744 <vPortEnterCritical>
 80020ae:	482d      	ldr	r0, [pc, #180]	; (8002164 <canzero_start+0x11c>)
 80020b0:	f00c fa7c 	bl	800e5ac <printf_>
 80020b4:	f010 fb76 	bl	80127a4 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 80020b8:	2300      	movs	r3, #0
 80020ba:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 80020bc:	f107 0310 	add.w	r3, r7, #16
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	2318      	movs	r3, #24
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2300      	movs	r3, #0
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	4926      	ldr	r1, [pc, #152]	; (8002168 <canzero_start+0x120>)
 80020ce:	4827      	ldr	r0, [pc, #156]	; (800216c <canzero_start+0x124>)
 80020d0:	f00e fd4b 	bl	8010b6a <xTaskCreate>
 80020d4:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 80020d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d006      	beq.n	80020ea <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 80020dc:	f010 fb32 	bl	8012744 <vPortEnterCritical>
 80020e0:	4823      	ldr	r0, [pc, #140]	; (8002170 <canzero_start+0x128>)
 80020e2:	f00c fa63 	bl	800e5ac <printf_>
 80020e6:	f010 fb5d 	bl	80127a4 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2318      	movs	r3, #24
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2300      	movs	r3, #0
 80020fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020fe:	491d      	ldr	r1, [pc, #116]	; (8002174 <canzero_start+0x12c>)
 8002100:	481d      	ldr	r0, [pc, #116]	; (8002178 <canzero_start+0x130>)
 8002102:	f00e fd32 	bl	8010b6a <xTaskCreate>
 8002106:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d006      	beq.n	800211c <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 800210e:	f010 fb19 	bl	8012744 <vPortEnterCritical>
 8002112:	481a      	ldr	r0, [pc, #104]	; (800217c <canzero_start+0x134>)
 8002114:	f00c fa4a 	bl	800e5ac <printf_>
 8002118:	f010 fb44 	bl	80127a4 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 800211c:	2300      	movs	r3, #0
 800211e:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2328      	movs	r3, #40	; 0x28
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2300      	movs	r3, #0
 800212c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002130:	4913      	ldr	r1, [pc, #76]	; (8002180 <canzero_start+0x138>)
 8002132:	4814      	ldr	r0, [pc, #80]	; (8002184 <canzero_start+0x13c>)
 8002134:	f00e fd19 	bl	8010b6a <xTaskCreate>
 8002138:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d001      	beq.n	8002144 <canzero_start+0xfc>
		Error_Handler();
 8002140:	f005 fadc 	bl	80076fc <Error_Handler>
	}


	while (true) {
		osDelay(osWaitForever);
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f00c fbaa 	bl	800e8a0 <osDelay>
 800214c:	e7fa      	b.n	8002144 <canzero_start+0xfc>
 800214e:	bf00      	nop
 8002150:	08015fa4 	.word	0x08015fa4
 8002154:	08001ba5 	.word	0x08001ba5
 8002158:	08015fac 	.word	0x08015fac
 800215c:	08015fd0 	.word	0x08015fd0
 8002160:	080018d1 	.word	0x080018d1
 8002164:	08015fdc 	.word	0x08015fdc
 8002168:	08016004 	.word	0x08016004
 800216c:	0800136d 	.word	0x0800136d
 8002170:	08016010 	.word	0x08016010
 8002174:	08016040 	.word	0x08016040
 8002178:	08001305 	.word	0x08001305
 800217c:	0801604c 	.word	0x0801604c
 8002180:	0801607c 	.word	0x0801607c
 8002184:	0800129b 	.word	0x0800129b

08002188 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	ed87 0a01 	vstr	s0, [r7, #4]
 80021c2:	ed97 0a01 	vldr	s0, [r7, #4]
 80021c6:	f010 fdff 	bl	8012dc8 <roundf>
 80021ca:	eef0 7a40 	vmov.f32	s15, s0
 80021ce:	eeb0 0a67 	vmov.f32	s0, s15
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 80021d8:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80021dc:	b0a2      	sub	sp, #136	; 0x88
 80021de:	af00      	add	r7, sp, #0
 80021e0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 80021e4:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80021e8:	4619      	mov	r1, r3
 80021ea:	4613      	mov	r3, r2
 80021ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80021f0:	460b      	mov	r3, r1
 80021f2:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 80021f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80021fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021fe:	6013      	str	r3, [r2, #0]
 8002200:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002204:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002208:	7113      	strb	r3, [r2, #4]
 800220a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800220e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002212:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8002214:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	461a      	mov	r2, r3
 800221c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002220:	3301      	adds	r3, #1
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	441a      	add	r2, r3
 8002228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800222c:	3302      	adds	r3, #2
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	041b      	lsls	r3, r3, #16
 8002232:	441a      	add	r2, r3
 8002234:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002238:	3303      	adds	r3, #3
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	4413      	add	r3, r2
 8002240:	2200      	movs	r2, #0
 8002242:	461c      	mov	r4, r3
 8002244:	4615      	mov	r5, r2
 8002246:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800224a:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 800224e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002252:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002256:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800225a:	3304      	adds	r3, #4
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2200      	movs	r2, #0
 8002262:	673b      	str	r3, [r7, #112]	; 0x70
 8002264:	677a      	str	r2, [r7, #116]	; 0x74
 8002266:	f04f 0000 	mov.w	r0, #0
 800226a:	f04f 0100 	mov.w	r1, #0
 800226e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002270:	0019      	movs	r1, r3
 8002272:	2000      	movs	r0, #0
 8002274:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002278:	3305      	adds	r3, #5
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2200      	movs	r2, #0
 8002280:	66bb      	str	r3, [r7, #104]	; 0x68
 8002282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	f04f 0300 	mov.w	r3, #0
 800228c:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 800228e:	0233      	lsls	r3, r6, #8
 8002290:	2200      	movs	r2, #0
 8002292:	eb10 0802 	adds.w	r8, r0, r2
 8002296:	eb41 0903 	adc.w	r9, r1, r3
 800229a:	eb14 0308 	adds.w	r3, r4, r8
 800229e:	663b      	str	r3, [r7, #96]	; 0x60
 80022a0:	eb45 0309 	adc.w	r3, r5, r9
 80022a4:	667b      	str	r3, [r7, #100]	; 0x64
 80022a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022aa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80022ae:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 80022b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022b6:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80022ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022be:	3306      	adds	r3, #6
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2200      	movs	r2, #0
 80022c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80022c8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022ca:	f04f 0000 	mov.w	r0, #0
 80022ce:	f04f 0100 	mov.w	r1, #0
 80022d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022d4:	0419      	lsls	r1, r3, #16
 80022d6:	2000      	movs	r0, #0
 80022d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022dc:	3307      	adds	r3, #7
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2200      	movs	r2, #0
 80022e4:	653b      	str	r3, [r7, #80]	; 0x50
 80022e6:	657a      	str	r2, [r7, #84]	; 0x54
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 80022f2:	0633      	lsls	r3, r6, #24
 80022f4:	2200      	movs	r2, #0
 80022f6:	eb10 0a02 	adds.w	sl, r0, r2
 80022fa:	eb41 0b03 	adc.w	fp, r1, r3
 80022fe:	eb14 030a 	adds.w	r3, r4, sl
 8002302:	64bb      	str	r3, [r7, #72]	; 0x48
 8002304:	eb45 030b 	adc.w	r3, r5, fp
 8002308:	64fb      	str	r3, [r7, #76]	; 0x4c
 800230a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800230e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002312:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 8002316:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800231a:	3307      	adds	r3, #7
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	461a      	mov	r2, r3
 8002320:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002324:	3306      	adds	r3, #6
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	441a      	add	r2, r3
 800232c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002330:	3305      	adds	r3, #5
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	441a      	add	r2, r3
 8002338:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800233c:	3304      	adds	r3, #4
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	061b      	lsls	r3, r3, #24
 8002342:	4413      	add	r3, r2
 8002344:	2200      	movs	r2, #0
 8002346:	643b      	str	r3, [r7, #64]	; 0x40
 8002348:	647a      	str	r2, [r7, #68]	; 0x44
 800234a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800234e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002352:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8002356:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800235a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800235e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002362:	3303      	adds	r3, #3
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2200      	movs	r2, #0
 800236a:	63bb      	str	r3, [r7, #56]	; 0x38
 800236c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800236e:	f04f 0000 	mov.w	r0, #0
 8002372:	f04f 0100 	mov.w	r1, #0
 8002376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002378:	0019      	movs	r1, r3
 800237a:	2000      	movs	r0, #0
 800237c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002380:	3302      	adds	r3, #2
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2200      	movs	r2, #0
 8002388:	633b      	str	r3, [r7, #48]	; 0x30
 800238a:	637a      	str	r2, [r7, #52]	; 0x34
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8002396:	0233      	lsls	r3, r6, #8
 8002398:	2200      	movs	r2, #0
 800239a:	1886      	adds	r6, r0, r2
 800239c:	62be      	str	r6, [r7, #40]	; 0x28
 800239e:	eb41 0303 	adc.w	r3, r1, r3
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80023a8:	460b      	mov	r3, r1
 80023aa:	18e3      	adds	r3, r4, r3
 80023ac:	623b      	str	r3, [r7, #32]
 80023ae:	4613      	mov	r3, r2
 80023b0:	eb45 0303 	adc.w	r3, r5, r3
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
 80023b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023ba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80023be:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 80023c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023c6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80023ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ce:	3301      	adds	r3, #1
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2200      	movs	r2, #0
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	61fa      	str	r2, [r7, #28]
 80023da:	f04f 0000 	mov.w	r0, #0
 80023de:	f04f 0100 	mov.w	r1, #0
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	0419      	lsls	r1, r3, #16
 80023e6:	2000      	movs	r0, #0
 80023e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2200      	movs	r2, #0
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	617a      	str	r2, [r7, #20]
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	693e      	ldr	r6, [r7, #16]
 8002400:	0633      	lsls	r3, r6, #24
 8002402:	2200      	movs	r2, #0
 8002404:	1886      	adds	r6, r0, r2
 8002406:	60be      	str	r6, [r7, #8]
 8002408:	eb41 0303 	adc.w	r3, r1, r3
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002412:	460b      	mov	r3, r1
 8002414:	18e3      	adds	r3, r4, r3
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	eb45 0303 	adc.w	r3, r5, r3
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002424:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002428:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 800242c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002430:	4618      	mov	r0, r3
 8002432:	3788      	adds	r7, #136	; 0x88
 8002434:	46bd      	mov	sp, r7
 8002436:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800243a:	4770      	bx	lr

0800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800243c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002440:	b087      	sub	sp, #28
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
 800244a:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 800244c:	887b      	ldrh	r3, [r7, #2]
 800244e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002452:	d302      	bcc.n	800245a <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8002454:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002458:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 800245a:	887b      	ldrh	r3, [r7, #2]
 800245c:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	8af9      	ldrh	r1, [r7, #22]
 8002466:	2000      	movs	r0, #0
 8002468:	468a      	mov	sl, r1
 800246a:	4683      	mov	fp, r0
 800246c:	f3ca 040b 	ubfx	r4, sl, #0, #12
 8002470:	2500      	movs	r5, #0
 8002472:	ea42 0804 	orr.w	r8, r2, r4
 8002476:	ea43 0905 	orr.w	r9, r3, r5
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	e9c3 8900 	strd	r8, r9, [r3]
            }
 8002480:	bf00      	nop
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800248a:	4770      	bx	lr

0800248c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	b293      	uxth	r3, r2
 800249e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a2:	81fb      	strh	r3, [r7, #14]
                return value;
 80024a4:	89fb      	ldrh	r3, [r7, #14]
            }
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>:
        class SENSOR_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80024b2:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
 80024c0:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80024c2:	78fb      	ldrb	r3, [r7, #3]
 80024c4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024cc:	7dfb      	ldrb	r3, [r7, #23]
 80024ce:	2200      	movs	r2, #0
 80024d0:	4698      	mov	r8, r3
 80024d2:	4691      	mov	r9, r2
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	ea4f 3309 	mov.w	r3, r9, lsl #12
 80024e0:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 80024e4:	ea4f 3208 	mov.w	r2, r8, lsl #12
 80024e8:	b294      	uxth	r4, r2
 80024ea:	2500      	movs	r5, #0
 80024ec:	ea40 0a04 	orr.w	sl, r0, r4
 80024f0:	ea41 0b05 	orr.w	fp, r1, r5
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 80024fa:	bf00      	nop
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002504:	4770      	bx	lr

08002506 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002506:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6178      	str	r0, [r7, #20]
 8002510:	6139      	str	r1, [r7, #16]
 8002512:	60fa      	str	r2, [r7, #12]
 8002514:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800251c:	d302      	bcc.n	8002524 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 800251e:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002522:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1129);
 8002524:	f240 4369 	movw	r3, #1129	; 0x469
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	6939      	ldr	r1, [r7, #16]
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f7ff ff85 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	69f9      	ldr	r1, [r7, #28]
 800253e:	2000      	movs	r0, #0
 8002540:	468a      	mov	sl, r1
 8002542:	4683      	mov	fp, r0
 8002544:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002548:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800254c:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002550:	0424      	lsls	r4, r4, #16
 8002552:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002556:	ea42 0104 	orr.w	r1, r2, r4
 800255a:	6039      	str	r1, [r7, #0]
 800255c:	432b      	orrs	r3, r5
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002566:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2205      	movs	r2, #5
 800256e:	701a      	strb	r2, [r3, #0]
            }
 8002570:	bf00      	nop
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800257a <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800257a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1128);
 800258a:	f44f 638d 	mov.w	r3, #1128	; 0x468
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7ff ff52 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025a2:	7dfb      	ldrb	r3, [r7, #23]
 80025a4:	2200      	movs	r2, #0
 80025a6:	4698      	mov	r8, r3
 80025a8:	4691      	mov	r9, r2
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80025b6:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80025ba:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80025be:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80025c2:	2500      	movs	r5, #0
 80025c4:	ea40 0a04 	orr.w	sl, r0, r4
 80025c8:	ea41 0b05 	orr.w	fp, r1, r5
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2203      	movs	r2, #3
 80025d6:	701a      	strb	r2, [r3, #0]
            }
 80025d8:	bf00      	nop
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025e2 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80025e2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6178      	str	r0, [r7, #20]
 80025ec:	6139      	str	r1, [r7, #16]
 80025ee:	60fa      	str	r2, [r7, #12]
 80025f0:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f8:	d302      	bcc.n	8002600 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80025fa:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80025fe:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1127);
 8002600:	f240 4367 	movw	r3, #1127	; 0x467
 8002604:	68fa      	ldr	r2, [r7, #12]
 8002606:	6939      	ldr	r1, [r7, #16]
 8002608:	6978      	ldr	r0, [r7, #20]
 800260a:	f7ff ff17 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002618:	69f9      	ldr	r1, [r7, #28]
 800261a:	2000      	movs	r0, #0
 800261c:	468a      	mov	sl, r1
 800261e:	4683      	mov	fp, r0
 8002620:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002624:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002628:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800262c:	0424      	lsls	r4, r4, #16
 800262e:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002632:	ea42 0104 	orr.w	r1, r2, r4
 8002636:	6039      	str	r1, [r7, #0]
 8002638:	432b      	orrs	r3, r5
 800263a:	607b      	str	r3, [r7, #4]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002642:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2205      	movs	r2, #5
 800264a:	701a      	strb	r2, [r3, #0]
            }
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002656 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002656:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
 8002664:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1126);
 8002666:	f240 4366 	movw	r3, #1126	; 0x466
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7ff fee4 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800267e:	7dfb      	ldrb	r3, [r7, #23]
 8002680:	2200      	movs	r2, #0
 8002682:	4698      	mov	r8, r3
 8002684:	4691      	mov	r9, r2
 8002686:	f04f 0200 	mov.w	r2, #0
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002692:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002696:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800269a:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800269e:	2500      	movs	r5, #0
 80026a0:	ea40 0a04 	orr.w	sl, r0, r4
 80026a4:	ea41 0b05 	orr.w	fp, r1, r5
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2203      	movs	r2, #3
 80026b2:	701a      	strb	r2, [r3, #0]
            }
 80026b4:	bf00      	nop
 80026b6:	3718      	adds	r7, #24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080026be <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80026be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c2:	b088      	sub	sp, #32
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6178      	str	r0, [r7, #20]
 80026c8:	6139      	str	r1, [r7, #16]
 80026ca:	60fa      	str	r2, [r7, #12]
 80026cc:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 80026ce:	897b      	ldrh	r3, [r7, #10]
 80026d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026d4:	d902      	bls.n	80026dc <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 80026d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026da:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 80026dc:	897b      	ldrh	r3, [r7, #10]
 80026de:	2b7c      	cmp	r3, #124	; 0x7c
 80026e0:	d801      	bhi.n	80026e6 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 80026e2:	237d      	movs	r3, #125	; 0x7d
 80026e4:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1124);
 80026e6:	f240 4364 	movw	r3, #1124	; 0x464
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	6939      	ldr	r1, [r7, #16]
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f7ff fea4 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80026f4:	897b      	ldrh	r3, [r7, #10]
 80026f6:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fe:	8bf9      	ldrh	r1, [r7, #30]
 8002700:	2000      	movs	r0, #0
 8002702:	4688      	mov	r8, r1
 8002704:	4681      	mov	r9, r0
 8002706:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800270a:	6079      	str	r1, [r7, #4]
 800270c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002710:	6039      	str	r1, [r7, #0]
 8002712:	683c      	ldr	r4, [r7, #0]
 8002714:	2500      	movs	r5, #0
 8002716:	ea42 0a04 	orr.w	sl, r2, r4
 800271a:	ea43 0b05 	orr.w	fp, r3, r5
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2204      	movs	r2, #4
 8002728:	701a      	strb	r2, [r3, #0]
            }
 800272a:	bf00      	nop
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002734 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1124) {
 800273e:	6839      	ldr	r1, [r7, #0]
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff fea3 	bl	800248c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002746:	4603      	mov	r3, r0
 8002748:	461a      	mov	r2, r3
 800274a:	f240 4364 	movw	r3, #1124	; 0x464
 800274e:	429a      	cmp	r2, r3
 8002750:	bf14      	ite	ne
 8002752:	2301      	movne	r3, #1
 8002754:	2300      	moveq	r3, #0
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d000      	beq.n	800275e <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 800275c:	e7fe      	b.n	800275c <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	0c02      	lsrs	r2, r0, #16
 800276e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002772:	0c0b      	lsrs	r3, r1, #16
 8002774:	4613      	mov	r3, r2
 8002776:	81fb      	strh	r3, [r7, #14]
                return value;
 8002778:	89fb      	ldrh	r3, [r7, #14]
            }
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002782:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1123);
 8002792:	f240 4363 	movw	r3, #1123	; 0x463
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	68b9      	ldr	r1, [r7, #8]
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f7ff fe4e 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	2200      	movs	r2, #0
 80027ae:	4698      	mov	r8, r3
 80027b0:	4691      	mov	r9, r2
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80027be:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80027c2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80027c6:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80027ca:	2500      	movs	r5, #0
 80027cc:	ea40 0a04 	orr.w	sl, r0, r4
 80027d0:	ea41 0b05 	orr.w	fp, r1, r5
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	701a      	strb	r2, [r3, #0]
            }
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080027ea <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1123) {
 80027f4:	6839      	ldr	r1, [r7, #0]
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fe48 	bl	800248c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461a      	mov	r2, r3
 8002800:	f240 4363 	movw	r3, #1123	; 0x463
 8002804:	429a      	cmp	r2, r3
 8002806:	bf14      	ite	ne
 8002808:	2301      	movne	r3, #1
 800280a:	2300      	moveq	r3, #0
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d000      	beq.n	8002814 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8002812:	e7fe      	b.n	8002812 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	e9d3 0100 	ldrd	r0, r1, [r3]
 800281a:	f04f 0200 	mov.w	r2, #0
 800281e:	f04f 0300 	mov.w	r3, #0
 8002822:	0c02      	lsrs	r2, r0, #16
 8002824:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002828:	0c0b      	lsrs	r3, r1, #16
 800282a:	4613      	mov	r3, r2
 800282c:	73fb      	strb	r3, [r7, #15]
                return value;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800283c:	b088      	sub	sp, #32
 800283e:	af00      	add	r7, sp, #0
 8002840:	6178      	str	r0, [r7, #20]
 8002842:	6139      	str	r1, [r7, #16]
 8002844:	60fa      	str	r2, [r7, #12]
 8002846:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1122);
 8002848:	f240 4362 	movw	r3, #1122	; 0x462
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	6939      	ldr	r1, [r7, #16]
 8002850:	6978      	ldr	r0, [r7, #20]
 8002852:	f7ff fdf3 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002860:	69f9      	ldr	r1, [r7, #28]
 8002862:	2000      	movs	r0, #0
 8002864:	468a      	mov	sl, r1
 8002866:	4683      	mov	fp, r0
 8002868:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800286c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002870:	480c      	ldr	r0, [pc, #48]	; (80028a4 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 8002872:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002876:	ea08 0400 	and.w	r4, r8, r0
 800287a:	ea09 0501 	and.w	r5, r9, r1
 800287e:	ea42 0104 	orr.w	r1, r2, r4
 8002882:	6039      	str	r1, [r7, #0]
 8002884:	432b      	orrs	r3, r5
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800288e:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2206      	movs	r2, #6
 8002896:	701a      	strb	r2, [r3, #0]
            }
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028a2:	bf00      	nop
 80028a4:	ffff0000 	.word	0xffff0000

080028a8 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80028a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028ac:	b086      	sub	sp, #24
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1121);
 80028b8:	f240 4361 	movw	r3, #1121	; 0x461
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	68b9      	ldr	r1, [r7, #8]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f7ff fdbb 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
 80028d2:	2200      	movs	r2, #0
 80028d4:	4698      	mov	r8, r3
 80028d6:	4691      	mov	r9, r2
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	f04f 0300 	mov.w	r3, #0
 80028e0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80028e4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80028e8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80028ec:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80028f0:	2500      	movs	r5, #0
 80028f2:	ea40 0a04 	orr.w	sl, r0, r4
 80028f6:	ea41 0b05 	orr.w	fp, r1, r5
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2203      	movs	r2, #3
 8002904:	701a      	strb	r2, [r3, #0]
            }
 8002906:	bf00      	nop
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002910 <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1120);
 8002920:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f7ff fd87 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002938:	7dfb      	ldrb	r3, [r7, #23]
 800293a:	2200      	movs	r2, #0
 800293c:	4698      	mov	r8, r3
 800293e:	4691      	mov	r9, r2
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800294c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002950:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002954:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002958:	2500      	movs	r5, #0
 800295a:	ea40 0a04 	orr.w	sl, r0, r4
 800295e:	ea41 0b05 	orr.w	fp, r1, r5
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2203      	movs	r2, #3
 800296c:	701a      	strb	r2, [r3, #0]
            }
 800296e:	bf00      	nop
 8002970:	3718      	adds	r7, #24
 8002972:	46bd      	mov	sp, r7
 8002974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002978 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800297c:	b088      	sub	sp, #32
 800297e:	af00      	add	r7, sp, #0
 8002980:	6178      	str	r0, [r7, #20]
 8002982:	6139      	str	r1, [r7, #16]
 8002984:	60fa      	str	r2, [r7, #12]
 8002986:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800298e:	d302      	bcc.n	8002996 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002990:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002994:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1113);
 8002996:	f240 4359 	movw	r3, #1113	; 0x459
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	6939      	ldr	r1, [r7, #16]
 800299e:	6978      	ldr	r0, [r7, #20]
 80029a0:	f7ff fd4c 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	69f9      	ldr	r1, [r7, #28]
 80029b0:	2000      	movs	r0, #0
 80029b2:	468a      	mov	sl, r1
 80029b4:	4683      	mov	fp, r0
 80029b6:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80029ba:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80029be:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80029c2:	0424      	lsls	r4, r4, #16
 80029c4:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80029c8:	ea42 0104 	orr.w	r1, r2, r4
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	432b      	orrs	r3, r5
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80029d8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2205      	movs	r2, #5
 80029e0:	701a      	strb	r2, [r3, #0]
            }
 80029e2:	bf00      	nop
 80029e4:	3720      	adds	r7, #32
 80029e6:	46bd      	mov	sp, r7
 80029e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029ec <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80029ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1112);
 80029fc:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff fd19 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002a0a:	78fb      	ldrb	r3, [r7, #3]
 8002a0c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a14:	7dfb      	ldrb	r3, [r7, #23]
 8002a16:	2200      	movs	r2, #0
 8002a18:	4698      	mov	r8, r3
 8002a1a:	4691      	mov	r9, r2
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	f04f 0300 	mov.w	r3, #0
 8002a24:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002a28:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002a2c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002a30:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002a34:	2500      	movs	r5, #0
 8002a36:	ea40 0a04 	orr.w	sl, r0, r4
 8002a3a:	ea41 0b05 	orr.w	fp, r1, r5
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2203      	movs	r2, #3
 8002a48:	701a      	strb	r2, [r3, #0]
            }
 8002a4a:	bf00      	nop
 8002a4c:	3718      	adds	r7, #24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a54 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a58:	b088      	sub	sp, #32
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6178      	str	r0, [r7, #20]
 8002a5e:	6139      	str	r1, [r7, #16]
 8002a60:	60fa      	str	r2, [r7, #12]
 8002a62:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a6a:	d302      	bcc.n	8002a72 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002a6c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002a70:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1111);
 8002a72:	f240 4357 	movw	r3, #1111	; 0x457
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	6939      	ldr	r1, [r7, #16]
 8002a7a:	6978      	ldr	r0, [r7, #20]
 8002a7c:	f7ff fcde 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8a:	69f9      	ldr	r1, [r7, #28]
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	468a      	mov	sl, r1
 8002a90:	4683      	mov	fp, r0
 8002a92:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002a96:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002a9a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002a9e:	0424      	lsls	r4, r4, #16
 8002aa0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002aa4:	ea42 0104 	orr.w	r1, r2, r4
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	432b      	orrs	r3, r5
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002ab4:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2205      	movs	r2, #5
 8002abc:	701a      	strb	r2, [r3, #0]
            }
 8002abe:	bf00      	nop
 8002ac0:	3720      	adds	r7, #32
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ac8 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1110);
 8002ad8:	f240 4356 	movw	r3, #1110	; 0x456
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f7ff fcab 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2200      	movs	r2, #0
 8002af4:	4698      	mov	r8, r3
 8002af6:	4691      	mov	r9, r2
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002b04:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002b08:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002b0c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002b10:	2500      	movs	r5, #0
 8002b12:	ea40 0a04 	orr.w	sl, r0, r4
 8002b16:	ea41 0b05 	orr.w	fp, r1, r5
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2203      	movs	r2, #3
 8002b24:	701a      	strb	r2, [r3, #0]
            }
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b30 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b34:	b088      	sub	sp, #32
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6178      	str	r0, [r7, #20]
 8002b3a:	6139      	str	r1, [r7, #16]
 8002b3c:	60fa      	str	r2, [r7, #12]
 8002b3e:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002b40:	897b      	ldrh	r3, [r7, #10]
 8002b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b46:	d902      	bls.n	8002b4e <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002b48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b4c:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002b4e:	897b      	ldrh	r3, [r7, #10]
 8002b50:	2b7c      	cmp	r3, #124	; 0x7c
 8002b52:	d801      	bhi.n	8002b58 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8002b54:	237d      	movs	r3, #125	; 0x7d
 8002b56:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1108);
 8002b58:	f240 4354 	movw	r3, #1108	; 0x454
 8002b5c:	68fa      	ldr	r2, [r7, #12]
 8002b5e:	6939      	ldr	r1, [r7, #16]
 8002b60:	6978      	ldr	r0, [r7, #20]
 8002b62:	f7ff fc6b 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002b66:	897b      	ldrh	r3, [r7, #10]
 8002b68:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	8bf9      	ldrh	r1, [r7, #30]
 8002b72:	2000      	movs	r0, #0
 8002b74:	4688      	mov	r8, r1
 8002b76:	4681      	mov	r9, r0
 8002b78:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002b7c:	6079      	str	r1, [r7, #4]
 8002b7e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002b82:	6039      	str	r1, [r7, #0]
 8002b84:	683c      	ldr	r4, [r7, #0]
 8002b86:	2500      	movs	r5, #0
 8002b88:	ea42 0a04 	orr.w	sl, r2, r4
 8002b8c:	ea43 0b05 	orr.w	fp, r3, r5
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2204      	movs	r2, #4
 8002b9a:	701a      	strb	r2, [r3, #0]
            }
 8002b9c:	bf00      	nop
 8002b9e:	3720      	adds	r7, #32
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ba6 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b084      	sub	sp, #16
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1108) {
 8002bb0:	6839      	ldr	r1, [r7, #0]
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fc6a 	bl	800248c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f240 4354 	movw	r3, #1108	; 0x454
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d000      	beq.n	8002bd0 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8002bce:	e7fe      	b.n	8002bce <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	f04f 0300 	mov.w	r3, #0
 8002bde:	0c02      	lsrs	r2, r0, #16
 8002be0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002be4:	0c0b      	lsrs	r3, r1, #16
 8002be6:	4613      	mov	r3, r2
 8002be8:	81fb      	strh	r3, [r7, #14]
                return value;
 8002bea:	89fb      	ldrh	r3, [r7, #14]
            }
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf8:	b086      	sub	sp, #24
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	607a      	str	r2, [r7, #4]
 8002c02:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1107);
 8002c04:	f240 4353 	movw	r3, #1107	; 0x453
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	68b9      	ldr	r1, [r7, #8]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff fc15 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	4698      	mov	r8, r3
 8002c22:	4691      	mov	r9, r2
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002c30:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002c34:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002c38:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002c3c:	2500      	movs	r5, #0
 8002c3e:	ea40 0a04 	orr.w	sl, r0, r4
 8002c42:	ea41 0b05 	orr.w	fp, r1, r5
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2203      	movs	r2, #3
 8002c50:	701a      	strb	r2, [r3, #0]
            }
 8002c52:	bf00      	nop
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c5c <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1107) {
 8002c66:	6839      	ldr	r1, [r7, #0]
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7ff fc0f 	bl	800248c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	461a      	mov	r2, r3
 8002c72:	f240 4353 	movw	r3, #1107	; 0x453
 8002c76:	429a      	cmp	r2, r3
 8002c78:	bf14      	ite	ne
 8002c7a:	2301      	movne	r3, #1
 8002c7c:	2300      	moveq	r3, #0
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d000      	beq.n	8002c86 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8002c84:	e7fe      	b.n	8002c84 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	0c02      	lsrs	r2, r0, #16
 8002c96:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c9a:	0c0b      	lsrs	r3, r1, #16
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	73fb      	strb	r3, [r7, #15]
                return value;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb0:	b088      	sub	sp, #32
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6178      	str	r0, [r7, #20]
 8002cb6:	6139      	str	r1, [r7, #16]
 8002cb8:	60fa      	str	r2, [r7, #12]
 8002cba:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1106);
 8002cbc:	f240 4352 	movw	r3, #1106	; 0x452
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	6939      	ldr	r1, [r7, #16]
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f7ff fbb9 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd4:	69f9      	ldr	r1, [r7, #28]
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	468a      	mov	sl, r1
 8002cda:	4683      	mov	fp, r0
 8002cdc:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002ce0:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002ce4:	480c      	ldr	r0, [pc, #48]	; (8002d18 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8002ce6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cea:	ea08 0400 	and.w	r4, r8, r0
 8002cee:	ea09 0501 	and.w	r5, r9, r1
 8002cf2:	ea42 0104 	orr.w	r1, r2, r4
 8002cf6:	6039      	str	r1, [r7, #0]
 8002cf8:	432b      	orrs	r3, r5
 8002cfa:	607b      	str	r3, [r7, #4]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002d02:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2206      	movs	r2, #6
 8002d0a:	701a      	strb	r2, [r3, #0]
            }
 8002d0c:	bf00      	nop
 8002d0e:	3720      	adds	r7, #32
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d16:	bf00      	nop
 8002d18:	ffff0000 	.word	0xffff0000

08002d1c <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
 8002d2a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1105);
 8002d2c:	f240 4351 	movw	r3, #1105	; 0x451
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f7ff fb81 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d44:	7dfb      	ldrb	r3, [r7, #23]
 8002d46:	2200      	movs	r2, #0
 8002d48:	4698      	mov	r8, r3
 8002d4a:	4691      	mov	r9, r2
 8002d4c:	f04f 0200 	mov.w	r2, #0
 8002d50:	f04f 0300 	mov.w	r3, #0
 8002d54:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002d58:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002d5c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002d60:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002d64:	2500      	movs	r5, #0
 8002d66:	ea40 0a04 	orr.w	sl, r0, r4
 8002d6a:	ea41 0b05 	orr.w	fp, r1, r5
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2203      	movs	r2, #3
 8002d78:	701a      	strb	r2, [r3, #0]
            }
 8002d7a:	bf00      	nop
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d84 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1104);
 8002d94:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	68b9      	ldr	r1, [r7, #8]
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f7ff fb4d 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002da2:	78fb      	ldrb	r3, [r7, #3]
 8002da4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dac:	7dfb      	ldrb	r3, [r7, #23]
 8002dae:	2200      	movs	r2, #0
 8002db0:	4698      	mov	r8, r3
 8002db2:	4691      	mov	r9, r2
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002dc0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002dc4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002dc8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002dcc:	2500      	movs	r5, #0
 8002dce:	ea40 0a04 	orr.w	sl, r0, r4
 8002dd2:	ea41 0b05 	orr.w	fp, r1, r5
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2203      	movs	r2, #3
 8002de0:	701a      	strb	r2, [r3, #0]
            }
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002dec <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df0:	b088      	sub	sp, #32
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6178      	str	r0, [r7, #20]
 8002df6:	6139      	str	r1, [r7, #16]
 8002df8:	60fa      	str	r2, [r7, #12]
 8002dfa:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e02:	d302      	bcc.n	8002e0a <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8002e04:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002e08:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1073);
 8002e0a:	f240 4331 	movw	r3, #1073	; 0x431
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	6939      	ldr	r1, [r7, #16]
 8002e12:	6978      	ldr	r0, [r7, #20]
 8002e14:	f7ff fb12 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	69f9      	ldr	r1, [r7, #28]
 8002e24:	2000      	movs	r0, #0
 8002e26:	468a      	mov	sl, r1
 8002e28:	4683      	mov	fp, r0
 8002e2a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002e2e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002e32:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002e36:	0424      	lsls	r4, r4, #16
 8002e38:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002e3c:	ea42 0104 	orr.w	r1, r2, r4
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	432b      	orrs	r3, r5
 8002e44:	607b      	str	r3, [r7, #4]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e4c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2205      	movs	r2, #5
 8002e54:	701a      	strb	r2, [r3, #0]
            }
 8002e56:	bf00      	nop
 8002e58:	3720      	adds	r7, #32
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e60 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b088      	sub	sp, #32
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6178      	str	r0, [r7, #20]
 8002e6a:	6139      	str	r1, [r7, #16]
 8002e6c:	60fa      	str	r2, [r7, #12]
 8002e6e:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1072);
 8002e70:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	6939      	ldr	r1, [r7, #16]
 8002e78:	6978      	ldr	r0, [r7, #20]
 8002e7a:	f7ff fadf 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	69f9      	ldr	r1, [r7, #28]
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	468a      	mov	sl, r1
 8002e8e:	4683      	mov	fp, r0
 8002e90:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002e94:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm+0x6c>)
 8002e9a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002e9e:	ea08 0400 	and.w	r4, r8, r0
 8002ea2:	ea09 0501 	and.w	r5, r9, r1
 8002ea6:	ea42 0104 	orr.w	r1, r2, r4
 8002eaa:	6039      	str	r1, [r7, #0]
 8002eac:	432b      	orrs	r3, r5
 8002eae:	607b      	str	r3, [r7, #4]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002eb6:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2206      	movs	r2, #6
 8002ebe:	701a      	strb	r2, [r3, #0]
            }
 8002ec0:	bf00      	nop
 8002ec2:	3720      	adds	r7, #32
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eca:	bf00      	nop
 8002ecc:	ffff0000 	.word	0xffff0000

08002ed0 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8002ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002ed4:	b086      	sub	sp, #24
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8002ede:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ee2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee6:	d305      	bcc.n	8002ef4 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ef0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1057);
 8002ef4:	f240 4321 	movw	r3, #1057	; 0x421
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff fa9d 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8002f02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f06:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f10:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	040b      	lsls	r3, r1, #16
 8002f1e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002f22:	0402      	lsls	r2, r0, #16
 8002f24:	ea48 0402 	orr.w	r4, r8, r2
 8002f28:	ea49 0503 	orr.w	r5, r9, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2208      	movs	r2, #8
 8002f36:	701a      	strb	r2, [r3, #0]
            }
 8002f38:	bf00      	nop
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002f42 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8002f42:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8002f50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f58:	d305      	bcc.n	8002f66 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 8002f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f62:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1056);
 8002f66:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	68b9      	ldr	r1, [r7, #8]
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f7ff fa64 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8002f74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f78:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f82:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	f04f 0300 	mov.w	r3, #0
 8002f8e:	040b      	lsls	r3, r1, #16
 8002f90:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002f94:	0402      	lsls	r2, r0, #16
 8002f96:	ea48 0402 	orr.w	r4, r8, r2
 8002f9a:	ea49 0503 	orr.w	r5, r9, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2208      	movs	r2, #8
 8002fa8:	701a      	strb	r2, [r3, #0]
            }
 8002faa:	bf00      	nop
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002fb4 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb8:	b086      	sub	sp, #24
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
 8002fbe:	60b9      	str	r1, [r7, #8]
 8002fc0:	607a      	str	r2, [r7, #4]
 8002fc2:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1046);
 8002fc4:	f240 4316 	movw	r3, #1046	; 0x416
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	68b9      	ldr	r1, [r7, #8]
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f7ff fa35 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002fd2:	78fb      	ldrb	r3, [r7, #3]
 8002fd4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	4698      	mov	r8, r3
 8002fe2:	4691      	mov	r9, r2
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002ff0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002ff4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002ff8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002ffc:	2500      	movs	r5, #0
 8002ffe:	ea40 0a04 	orr.w	sl, r0, r4
 8003002:	ea41 0b05 	orr.w	fp, r1, r5
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2203      	movs	r2, #3
 8003010:	701a      	strb	r2, [r3, #0]
            }
 8003012:	bf00      	nop
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800301c <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800301c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003020:	b086      	sub	sp, #24
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1045);
 800302c:	f240 4315 	movw	r3, #1045	; 0x415
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f7ff fa01 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003044:	7dfb      	ldrb	r3, [r7, #23]
 8003046:	2200      	movs	r2, #0
 8003048:	4698      	mov	r8, r3
 800304a:	4691      	mov	r9, r2
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003058:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800305c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003060:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003064:	2500      	movs	r5, #0
 8003066:	ea40 0a04 	orr.w	sl, r0, r4
 800306a:	ea41 0b05 	orr.w	fp, r1, r5
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2203      	movs	r2, #3
 8003078:	701a      	strb	r2, [r3, #0]
            }
 800307a:	bf00      	nop
 800307c:	3718      	adds	r7, #24
 800307e:	46bd      	mov	sp, r7
 8003080:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003084 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003088:	b088      	sub	sp, #32
 800308a:	af00      	add	r7, sp, #0
 800308c:	6178      	str	r0, [r7, #20]
 800308e:	6139      	str	r1, [r7, #16]
 8003090:	60fa      	str	r2, [r7, #12]
 8003092:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800309a:	d302      	bcc.n	80030a2 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 800309c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80030a0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1044);
 80030a2:	f240 4314 	movw	r3, #1044	; 0x414
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	6939      	ldr	r1, [r7, #16]
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7ff f9c6 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	69f9      	ldr	r1, [r7, #28]
 80030bc:	2000      	movs	r0, #0
 80030be:	468a      	mov	sl, r1
 80030c0:	4683      	mov	fp, r0
 80030c2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80030c6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80030ca:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80030ce:	0424      	lsls	r4, r4, #16
 80030d0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80030d4:	ea42 0104 	orr.w	r1, r2, r4
 80030d8:	6039      	str	r1, [r7, #0]
 80030da:	432b      	orrs	r3, r5
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80030e4:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2205      	movs	r2, #5
 80030ec:	701a      	strb	r2, [r3, #0]
            }
 80030ee:	bf00      	nop
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080030f8 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80030f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030fc:	b088      	sub	sp, #32
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6178      	str	r0, [r7, #20]
 8003102:	6139      	str	r1, [r7, #16]
 8003104:	60fa      	str	r2, [r7, #12]
 8003106:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800310a:	edd7 7a02 	vldr	s15, [r7, #8]
 800310e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80031a0 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xa8>
 8003112:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311a:	dd01      	ble.n	8003120 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 800311c:	4b21      	ldr	r3, [pc, #132]	; (80031a4 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xac>)
 800311e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003120:	edd7 7a02 	vldr	s15, [r7, #8]
 8003124:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312c:	d502      	bpl.n	8003134 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 800312e:	f04f 0300 	mov.w	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1043);
 8003134:	f240 4313 	movw	r3, #1043	; 0x413
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	6939      	ldr	r1, [r7, #16]
 800313c:	6978      	ldr	r0, [r7, #20]
 800313e:	f7ff f97d 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 8003142:	edd7 7a02 	vldr	s15, [r7, #8]
 8003146:	eddf 6a18 	vldr	s13, [pc, #96]	; 80031a8 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xb0>
 800314a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800314e:	eeb0 0a47 	vmov.f32	s0, s14
 8003152:	f7ff f831 	bl	80021b8 <_ZSt5roundf>
 8003156:	eef0 7a40 	vmov.f32	s15, s0
 800315a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800315e:	ee17 3a90 	vmov	r3, s15
 8003162:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316a:	8bf9      	ldrh	r1, [r7, #30]
 800316c:	2000      	movs	r0, #0
 800316e:	4688      	mov	r8, r1
 8003170:	4681      	mov	r9, r0
 8003172:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003176:	6079      	str	r1, [r7, #4]
 8003178:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800317c:	6039      	str	r1, [r7, #0]
 800317e:	683c      	ldr	r4, [r7, #0]
 8003180:	2500      	movs	r5, #0
 8003182:	ea42 0a04 	orr.w	sl, r2, r4
 8003186:	ea43 0b05 	orr.w	fp, r3, r5
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2204      	movs	r2, #4
 8003194:	701a      	strb	r2, [r3, #0]
            }
 8003196:	bf00      	nop
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031a0:	428311ec 	.word	0x428311ec
 80031a4:	428311ec 	.word	0x428311ec
 80031a8:	3a83126f 	.word	0x3a83126f

080031ac <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80031ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031b0:	b088      	sub	sp, #32
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6178      	str	r0, [r7, #20]
 80031b6:	6139      	str	r1, [r7, #16]
 80031b8:	60fa      	str	r2, [r7, #12]
 80031ba:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80031be:	edd7 7a02 	vldr	s15, [r7, #8]
 80031c2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003260 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb4>
 80031c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ce:	dd01      	ble.n	80031d4 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 80031d2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80031d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80031d8:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80031dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e4:	d501      	bpl.n	80031ea <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 80031e8:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1042);
 80031ea:	f240 4312 	movw	r3, #1042	; 0x412
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	6939      	ldr	r1, [r7, #16]
 80031f2:	6978      	ldr	r0, [r7, #20]
 80031f4:	f7ff f922 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 80031f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80031fc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003200:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003204:	eddf 6a19 	vldr	s13, [pc, #100]	; 800326c <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xc0>
 8003208:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800320c:	eeb0 0a47 	vmov.f32	s0, s14
 8003210:	f7fe ffd2 	bl	80021b8 <_ZSt5roundf>
 8003214:	eef0 7a40 	vmov.f32	s15, s0
 8003218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800321c:	ee17 3a90 	vmov	r3, s15
 8003220:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	8bf9      	ldrh	r1, [r7, #30]
 800322a:	2000      	movs	r0, #0
 800322c:	4688      	mov	r8, r1
 800322e:	4681      	mov	r9, r0
 8003230:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003234:	6079      	str	r1, [r7, #4]
 8003236:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800323a:	6039      	str	r1, [r7, #0]
 800323c:	683c      	ldr	r4, [r7, #0]
 800323e:	2500      	movs	r5, #0
 8003240:	ea42 0a04 	orr.w	sl, r2, r4
 8003244:	ea43 0b05 	orr.w	fp, r3, r5
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2204      	movs	r2, #4
 8003252:	701a      	strb	r2, [r3, #0]
            }
 8003254:	bf00      	nop
 8003256:	3720      	adds	r7, #32
 8003258:	46bd      	mov	sp, r7
 800325a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800325e:	bf00      	nop
 8003260:	441c5666 	.word	0x441c5666
 8003264:	441c5666 	.word	0x441c5666
 8003268:	c1f00000 	.word	0xc1f00000
 800326c:	3c23d70a 	.word	0x3c23d70a

08003270 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	b088      	sub	sp, #32
 8003276:	af00      	add	r7, sp, #0
 8003278:	6178      	str	r0, [r7, #20]
 800327a:	6139      	str	r1, [r7, #16]
 800327c:	60fa      	str	r2, [r7, #12]
 800327e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4a16      	ldr	r2, [pc, #88]	; (80032dc <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d901      	bls.n	800328c <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 8003288:	4b14      	ldr	r3, [pc, #80]	; (80032dc <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 800328a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1041);
 800328c:	f240 4311 	movw	r3, #1041	; 0x411
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	6939      	ldr	r1, [r7, #16]
 8003294:	6978      	ldr	r0, [r7, #20]
 8003296:	f7ff f8d1 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	089b      	lsrs	r3, r3, #2
 800329e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	69f9      	ldr	r1, [r7, #28]
 80032a8:	2000      	movs	r0, #0
 80032aa:	4688      	mov	r8, r1
 80032ac:	4681      	mov	r9, r0
 80032ae:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80032b2:	6079      	str	r1, [r7, #4]
 80032b4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80032b8:	6039      	str	r1, [r7, #0]
 80032ba:	683c      	ldr	r4, [r7, #0]
 80032bc:	2500      	movs	r5, #0
 80032be:	ea42 0a04 	orr.w	sl, r2, r4
 80032c2:	ea43 0b05 	orr.w	fp, r3, r5
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2204      	movs	r2, #4
 80032d0:	701a      	strb	r2, [r3, #0]
            }
 80032d2:	bf00      	nop
 80032d4:	3720      	adds	r7, #32
 80032d6:	46bd      	mov	sp, r7
 80032d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032dc:	0003fffc 	.word	0x0003fffc

080032e0 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80032e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e4:	b088      	sub	sp, #32
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6178      	str	r0, [r7, #20]
 80032ea:	6139      	str	r1, [r7, #16]
 80032ec:	60fa      	str	r2, [r7, #12]
 80032ee:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80032f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003394 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb4>
 80032fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	dd01      	ble.n	8003308 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 8003304:	4b24      	ldr	r3, [pc, #144]	; (8003398 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 8003306:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003308:	edd7 7a02 	vldr	s15, [r7, #8]
 800330c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	d502      	bpl.n	800331c <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1040);
 800331c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	6939      	ldr	r1, [r7, #16]
 8003324:	6978      	ldr	r0, [r7, #20]
 8003326:	f7ff f889 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800332a:	edd7 7a02 	vldr	s15, [r7, #8]
 800332e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003332:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003336:	eeb0 0a47 	vmov.f32	s0, s14
 800333a:	f7fe ff3d 	bl	80021b8 <_ZSt5roundf>
 800333e:	eef0 7a40 	vmov.f32	s15, s0
 8003342:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003346:	edc7 7a01 	vstr	s15, [r7, #4]
 800334a:	793b      	ldrb	r3, [r7, #4]
 800334c:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003354:	7ffb      	ldrb	r3, [r7, #31]
 8003356:	2200      	movs	r2, #0
 8003358:	4698      	mov	r8, r3
 800335a:	4691      	mov	r9, r2
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003368:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800336c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003370:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003374:	2500      	movs	r5, #0
 8003376:	ea40 0a04 	orr.w	sl, r0, r4
 800337a:	ea41 0b05 	orr.w	fp, r1, r5
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2203      	movs	r2, #3
 8003388:	701a      	strb	r2, [r3, #0]
            }
 800338a:	bf00      	nop
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003394:	42c80000 	.word	0x42c80000
 8003398:	42c80000 	.word	0x42c80000

0800339c <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800339c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033a0:	b088      	sub	sp, #32
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6178      	str	r0, [r7, #20]
 80033a6:	6139      	str	r1, [r7, #16]
 80033a8:	60fa      	str	r2, [r7, #12]
 80033aa:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 33);
 80033ac:	2321      	movs	r3, #33	; 0x21
 80033ae:	68fa      	ldr	r2, [r7, #12]
 80033b0:	6939      	ldr	r1, [r7, #16]
 80033b2:	6978      	ldr	r0, [r7, #20]
 80033b4:	f7ff f842 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80033b8:	897b      	ldrh	r3, [r7, #10]
 80033ba:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	8bf9      	ldrh	r1, [r7, #30]
 80033c4:	2000      	movs	r0, #0
 80033c6:	4688      	mov	r8, r1
 80033c8:	4681      	mov	r9, r0
 80033ca:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80033ce:	6079      	str	r1, [r7, #4]
 80033d0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80033d4:	6039      	str	r1, [r7, #0]
 80033d6:	683c      	ldr	r4, [r7, #0]
 80033d8:	2500      	movs	r5, #0
 80033da:	ea42 0a04 	orr.w	sl, r2, r4
 80033de:	ea43 0b05 	orr.w	fp, r3, r5
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2204      	movs	r2, #4
 80033ec:	701a      	strb	r2, [r3, #0]
            }
 80033ee:	bf00      	nop
 80033f0:	3720      	adds	r7, #32
 80033f2:	46bd      	mov	sp, r7
 80033f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080033f8 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 33) {
 8003402:	6839      	ldr	r1, [r7, #0]
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff f841 	bl	800248c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800340a:	4603      	mov	r3, r0
 800340c:	2b21      	cmp	r3, #33	; 0x21
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d000      	beq.n	800341c <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 800341a:	e7fe      	b.n	800341a <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	0c02      	lsrs	r2, r0, #16
 800342c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003430:	0c0b      	lsrs	r3, r1, #16
 8003432:	4613      	mov	r3, r2
 8003434:	81fb      	strh	r3, [r7, #14]
                return value;
 8003436:	89fb      	ldrh	r3, [r7, #14]
            }
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b086      	sub	sp, #24
 8003446:	af00      	add	r7, sp, #0
 8003448:	60f8      	str	r0, [r7, #12]
 800344a:	60b9      	str	r1, [r7, #8]
 800344c:	607a      	str	r2, [r7, #4]
 800344e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 32);
 8003450:	2320      	movs	r3, #32
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f7fe fff0 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800345c:	78fb      	ldrb	r3, [r7, #3]
 800345e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003466:	7dfb      	ldrb	r3, [r7, #23]
 8003468:	2200      	movs	r2, #0
 800346a:	4698      	mov	r8, r3
 800346c:	4691      	mov	r9, r2
 800346e:	f04f 0200 	mov.w	r2, #0
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800347a:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800347e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003482:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003486:	2500      	movs	r5, #0
 8003488:	ea40 0a04 	orr.w	sl, r0, r4
 800348c:	ea41 0b05 	orr.w	fp, r1, r5
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	701a      	strb	r2, [r3, #0]
            }
 800349c:	bf00      	nop
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034a6 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b084      	sub	sp, #16
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
 80034ae:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 32) {
 80034b0:	6839      	ldr	r1, [r7, #0]
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe ffea 	bl	800248c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b20      	cmp	r3, #32
 80034bc:	bf14      	ite	ne
 80034be:	2301      	movne	r3, #1
 80034c0:	2300      	moveq	r3, #0
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d000      	beq.n	80034ca <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 80034c8:	e7fe      	b.n	80034c8 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	0c02      	lsrs	r2, r0, #16
 80034da:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80034de:	0c0b      	lsrs	r3, r1, #16
 80034e0:	4613      	mov	r3, r2
 80034e2:	73fb      	strb	r3, [r7, #15]
                return value;
 80034e4:	7bfb      	ldrb	r3, [r7, #15]
            }
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80034ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f2:	b088      	sub	sp, #32
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6178      	str	r0, [r7, #20]
 80034f8:	6139      	str	r1, [r7, #16]
 80034fa:	60fa      	str	r2, [r7, #12]
 80034fc:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 16);
 80034fe:	2310      	movs	r3, #16
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	6939      	ldr	r1, [r7, #16]
 8003504:	6978      	ldr	r0, [r7, #20]
 8003506:	f7fe ff99 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800350a:	897b      	ldrh	r3, [r7, #10]
 800350c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	8bf9      	ldrh	r1, [r7, #30]
 8003516:	2000      	movs	r0, #0
 8003518:	4688      	mov	r8, r1
 800351a:	4681      	mov	r9, r0
 800351c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003520:	6079      	str	r1, [r7, #4]
 8003522:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003526:	6039      	str	r1, [r7, #0]
 8003528:	683c      	ldr	r4, [r7, #0]
 800352a:	2500      	movs	r5, #0
 800352c:	ea42 0a04 	orr.w	sl, r2, r4
 8003530:	ea43 0b05 	orr.w	fp, r3, r5
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2204      	movs	r2, #4
 800353e:	701a      	strb	r2, [r3, #0]
            }
 8003540:	bf00      	nop
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800354a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 16) {
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fe ff98 	bl	800248c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800355c:	4603      	mov	r3, r0
 800355e:	2b10      	cmp	r3, #16
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d000      	beq.n	800356e <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 800356c:	e7fe      	b.n	800356c <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	0c02      	lsrs	r2, r0, #16
 800357e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003582:	0c0b      	lsrs	r3, r1, #16
 8003584:	4613      	mov	r3, r2
 8003586:	81fb      	strh	r3, [r7, #14]
                return value;
 8003588:	89fb      	ldrh	r3, [r7, #14]
            }
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003592:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003596:	b088      	sub	sp, #32
 8003598:	af00      	add	r7, sp, #0
 800359a:	6178      	str	r0, [r7, #20]
 800359c:	6139      	str	r1, [r7, #16]
 800359e:	60fa      	str	r2, [r7, #12]
 80035a0:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 5);
 80035a2:	2305      	movs	r3, #5
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	6939      	ldr	r1, [r7, #16]
 80035a8:	6978      	ldr	r0, [r7, #20]
 80035aa:	f7fe ff47 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80035ae:	897b      	ldrh	r3, [r7, #10]
 80035b0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	8bf9      	ldrh	r1, [r7, #30]
 80035ba:	2000      	movs	r0, #0
 80035bc:	4688      	mov	r8, r1
 80035be:	4681      	mov	r9, r0
 80035c0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80035c4:	6079      	str	r1, [r7, #4]
 80035c6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80035ca:	6039      	str	r1, [r7, #0]
 80035cc:	683c      	ldr	r4, [r7, #0]
 80035ce:	2500      	movs	r5, #0
 80035d0:	ea42 0a04 	orr.w	sl, r2, r4
 80035d4:	ea43 0b05 	orr.w	fp, r3, r5
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2204      	movs	r2, #4
 80035e2:	701a      	strb	r2, [r3, #0]
            }
 80035e4:	bf00      	nop
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035ee <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80035ee:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f2:	b088      	sub	sp, #32
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6178      	str	r0, [r7, #20]
 80035f8:	6139      	str	r1, [r7, #16]
 80035fa:	60fa      	str	r2, [r7, #12]
 80035fc:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 4);
 80035fe:	2304      	movs	r3, #4
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	6939      	ldr	r1, [r7, #16]
 8003604:	6978      	ldr	r0, [r7, #20]
 8003606:	f7fe ff19 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800360a:	897b      	ldrh	r3, [r7, #10]
 800360c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003614:	8bf9      	ldrh	r1, [r7, #30]
 8003616:	2000      	movs	r0, #0
 8003618:	4688      	mov	r8, r1
 800361a:	4681      	mov	r9, r0
 800361c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003620:	6079      	str	r1, [r7, #4]
 8003622:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003626:	6039      	str	r1, [r7, #0]
 8003628:	683c      	ldr	r4, [r7, #0]
 800362a:	2500      	movs	r5, #0
 800362c:	ea42 0a04 	orr.w	sl, r2, r4
 8003630:	ea43 0b05 	orr.w	fp, r3, r5
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2204      	movs	r2, #4
 800363e:	701a      	strb	r2, [r3, #0]
            }
 8003640:	bf00      	nop
 8003642:	3720      	adds	r7, #32
 8003644:	46bd      	mov	sp, r7
 8003646:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800364a <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800364a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800364e:	b088      	sub	sp, #32
 8003650:	af00      	add	r7, sp, #0
 8003652:	6178      	str	r0, [r7, #20]
 8003654:	6139      	str	r1, [r7, #16]
 8003656:	60fa      	str	r2, [r7, #12]
 8003658:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 3);
 800365a:	2303      	movs	r3, #3
 800365c:	68fa      	ldr	r2, [r7, #12]
 800365e:	6939      	ldr	r1, [r7, #16]
 8003660:	6978      	ldr	r0, [r7, #20]
 8003662:	f7fe feeb 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	8bf9      	ldrh	r1, [r7, #30]
 8003672:	2000      	movs	r0, #0
 8003674:	4688      	mov	r8, r1
 8003676:	4681      	mov	r9, r0
 8003678:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800367c:	6079      	str	r1, [r7, #4]
 800367e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003682:	6039      	str	r1, [r7, #0]
 8003684:	683c      	ldr	r4, [r7, #0]
 8003686:	2500      	movs	r5, #0
 8003688:	ea42 0a04 	orr.w	sl, r2, r4
 800368c:	ea43 0b05 	orr.w	fp, r3, r5
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2204      	movs	r2, #4
 800369a:	701a      	strb	r2, [r3, #0]
            }
 800369c:	bf00      	nop
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080036a6 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80036a6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2);
 80036b6:	2302      	movs	r3, #2
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f7fe febd 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036cc:	7dfb      	ldrb	r3, [r7, #23]
 80036ce:	2200      	movs	r2, #0
 80036d0:	4698      	mov	r8, r3
 80036d2:	4691      	mov	r9, r2
 80036d4:	f04f 0200 	mov.w	r2, #0
 80036d8:	f04f 0300 	mov.w	r3, #0
 80036dc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80036e0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80036e4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80036e8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80036ec:	2500      	movs	r5, #0
 80036ee:	ea40 0a04 	orr.w	sl, r0, r4
 80036f2:	ea41 0b05 	orr.w	fp, r1, r5
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2203      	movs	r2, #3
 8003700:	701a      	strb	r2, [r3, #0]
            }
 8003702:	bf00      	nop
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800370c <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b086      	sub	sp, #24
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
 800371a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1);
 800371c:	2301      	movs	r3, #1
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f7fe fe8a 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	2200      	movs	r2, #0
 8003736:	4698      	mov	r8, r3
 8003738:	4691      	mov	r9, r2
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003746:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800374a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800374e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003752:	2500      	movs	r5, #0
 8003754:	ea40 0a04 	orr.w	sl, r0, r4
 8003758:	ea41 0b05 	orr.w	fp, r1, r5
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2203      	movs	r2, #3
 8003766:	701a      	strb	r2, [r3, #0]
            }
 8003768:	bf00      	nop
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003772 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8003772:	b580      	push	{r7, lr}
 8003774:	b086      	sub	sp, #24
 8003776:	af02      	add	r7, sp, #8
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	2300      	movs	r3, #0
 8003786:	2202      	movs	r2, #2
 8003788:	f240 6101 	movw	r1, #1537	; 0x601
 800378c:	f7fe fd24 	bl	80021d8 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8003794:	f240 6201 	movw	r2, #1537	; 0x601
 8003798:	4293      	cmp	r3, r2
 800379a:	d000      	beq.n	800379e <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800379c:	e7fe      	b.n	800379c <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	6839      	ldr	r1, [r7, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	331c      	adds	r3, #28
 80037b8:	461a      	mov	r2, r3
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f7ff ffd9 	bl	8003772 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b08a      	sub	sp, #40	; 0x28
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 80037d2:	f107 0308 	add.w	r3, r7, #8
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff ffe5 	bl	80037a8 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 80037de:	f107 0308 	add.w	r3, r7, #8
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fc74 	bl	80050d0 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 80037e8:	4603      	mov	r3, r0
 80037ea:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 80037ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 f814 	bl	800381c <_Z31handleSDORequestDownloadBySDOIDt>
}
 80037f4:	bf00      	nop
 80037f6:	3728      	adds	r7, #40	; 0x28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	2300      	movs	r3, #0
 8003808:	2208      	movs	r2, #8
 800380a:	f240 5181 	movw	r1, #1409	; 0x581
 800380e:	f7fd fbbd 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 800381c:	b580      	push	{r7, lr}
 800381e:	b092      	sub	sp, #72	; 0x48
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 8003826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff ffe6 	bl	80037fc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8003830:	2301      	movs	r3, #1
 8003832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	2b21      	cmp	r3, #33	; 0x21
 800383a:	f300 810b 	bgt.w	8003a54 <_Z31handleSDORequestDownloadBySDOIDt+0x238>
 800383e:	2b00      	cmp	r3, #0
 8003840:	f300 80be 	bgt.w	80039c0 <_Z31handleSDORequestDownloadBySDOIDt+0x1a4>
 8003844:	e30d      	b.n	8003e62 <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8003846:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800384a:	2b59      	cmp	r3, #89	; 0x59
 800384c:	f200 8309 	bhi.w	8003e62 <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <_Z31handleSDORequestDownloadBySDOIDt+0x3c>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	08003b49 	.word	0x08003b49
 800385c:	08003b67 	.word	0x08003b67
 8003860:	08003b81 	.word	0x08003b81
 8003864:	08003b9f 	.word	0x08003b9f
 8003868:	08003bbd 	.word	0x08003bbd
 800386c:	08003bd7 	.word	0x08003bd7
 8003870:	08003bf3 	.word	0x08003bf3
 8003874:	08003e63 	.word	0x08003e63
 8003878:	08003e63 	.word	0x08003e63
 800387c:	08003e63 	.word	0x08003e63
 8003880:	08003e63 	.word	0x08003e63
 8003884:	08003e63 	.word	0x08003e63
 8003888:	08003e63 	.word	0x08003e63
 800388c:	08003e63 	.word	0x08003e63
 8003890:	08003e63 	.word	0x08003e63
 8003894:	08003e63 	.word	0x08003e63
 8003898:	08003c0f 	.word	0x08003c0f
 800389c:	08003c29 	.word	0x08003c29
 80038a0:	08003e63 	.word	0x08003e63
 80038a4:	08003e63 	.word	0x08003e63
 80038a8:	08003e63 	.word	0x08003e63
 80038ac:	08003e63 	.word	0x08003e63
 80038b0:	08003e63 	.word	0x08003e63
 80038b4:	08003e63 	.word	0x08003e63
 80038b8:	08003e63 	.word	0x08003e63
 80038bc:	08003e63 	.word	0x08003e63
 80038c0:	08003e63 	.word	0x08003e63
 80038c4:	08003e63 	.word	0x08003e63
 80038c8:	08003e63 	.word	0x08003e63
 80038cc:	08003e63 	.word	0x08003e63
 80038d0:	08003e63 	.word	0x08003e63
 80038d4:	08003e63 	.word	0x08003e63
 80038d8:	08003c43 	.word	0x08003c43
 80038dc:	08003c5d 	.word	0x08003c5d
 80038e0:	08003e63 	.word	0x08003e63
 80038e4:	08003e63 	.word	0x08003e63
 80038e8:	08003e63 	.word	0x08003e63
 80038ec:	08003e63 	.word	0x08003e63
 80038f0:	08003e63 	.word	0x08003e63
 80038f4:	08003e63 	.word	0x08003e63
 80038f8:	08003e63 	.word	0x08003e63
 80038fc:	08003e63 	.word	0x08003e63
 8003900:	08003e63 	.word	0x08003e63
 8003904:	08003e63 	.word	0x08003e63
 8003908:	08003e63 	.word	0x08003e63
 800390c:	08003e63 	.word	0x08003e63
 8003910:	08003e63 	.word	0x08003e63
 8003914:	08003e63 	.word	0x08003e63
 8003918:	08003e63 	.word	0x08003e63
 800391c:	08003e63 	.word	0x08003e63
 8003920:	08003e63 	.word	0x08003e63
 8003924:	08003e63 	.word	0x08003e63
 8003928:	08003e63 	.word	0x08003e63
 800392c:	08003e63 	.word	0x08003e63
 8003930:	08003e63 	.word	0x08003e63
 8003934:	08003e63 	.word	0x08003e63
 8003938:	08003e63 	.word	0x08003e63
 800393c:	08003e63 	.word	0x08003e63
 8003940:	08003e63 	.word	0x08003e63
 8003944:	08003e63 	.word	0x08003e63
 8003948:	08003e63 	.word	0x08003e63
 800394c:	08003e63 	.word	0x08003e63
 8003950:	08003e63 	.word	0x08003e63
 8003954:	08003e63 	.word	0x08003e63
 8003958:	08003c77 	.word	0x08003c77
 800395c:	08003c93 	.word	0x08003c93
 8003960:	08003caf 	.word	0x08003caf
 8003964:	08003cc9 	.word	0x08003cc9
 8003968:	08003ce5 	.word	0x08003ce5
 800396c:	08003e63 	.word	0x08003e63
 8003970:	08003d01 	.word	0x08003d01
 8003974:	08003d1d 	.word	0x08003d1d
 8003978:	08003d37 	.word	0x08003d37
 800397c:	08003d53 	.word	0x08003d53
 8003980:	08003e63 	.word	0x08003e63
 8003984:	08003e63 	.word	0x08003e63
 8003988:	08003e63 	.word	0x08003e63
 800398c:	08003e63 	.word	0x08003e63
 8003990:	08003e63 	.word	0x08003e63
 8003994:	08003e63 	.word	0x08003e63
 8003998:	08003d6d 	.word	0x08003d6d
 800399c:	08003d89 	.word	0x08003d89
 80039a0:	08003da5 	.word	0x08003da5
 80039a4:	08003dbf 	.word	0x08003dbf
 80039a8:	08003ddb 	.word	0x08003ddb
 80039ac:	08003e63 	.word	0x08003e63
 80039b0:	08003df7 	.word	0x08003df7
 80039b4:	08003e13 	.word	0x08003e13
 80039b8:	08003e2d 	.word	0x08003e2d
 80039bc:	08003e49 	.word	0x08003e49
 80039c0:	3b01      	subs	r3, #1
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	f200 824d 	bhi.w	8003e62 <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 80039c8:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <_Z31handleSDORequestDownloadBySDOIDt+0x1b4>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	08003a69 	.word	0x08003a69
 80039d4:	08003a85 	.word	0x08003a85
 80039d8:	08003aa1 	.word	0x08003aa1
 80039dc:	08003abd 	.word	0x08003abd
 80039e0:	08003ad9 	.word	0x08003ad9
 80039e4:	08003e63 	.word	0x08003e63
 80039e8:	08003e63 	.word	0x08003e63
 80039ec:	08003e63 	.word	0x08003e63
 80039f0:	08003e63 	.word	0x08003e63
 80039f4:	08003e63 	.word	0x08003e63
 80039f8:	08003e63 	.word	0x08003e63
 80039fc:	08003e63 	.word	0x08003e63
 8003a00:	08003e63 	.word	0x08003e63
 8003a04:	08003e63 	.word	0x08003e63
 8003a08:	08003e63 	.word	0x08003e63
 8003a0c:	08003af5 	.word	0x08003af5
 8003a10:	08003e63 	.word	0x08003e63
 8003a14:	08003e63 	.word	0x08003e63
 8003a18:	08003e63 	.word	0x08003e63
 8003a1c:	08003e63 	.word	0x08003e63
 8003a20:	08003e63 	.word	0x08003e63
 8003a24:	08003e63 	.word	0x08003e63
 8003a28:	08003e63 	.word	0x08003e63
 8003a2c:	08003e63 	.word	0x08003e63
 8003a30:	08003e63 	.word	0x08003e63
 8003a34:	08003e63 	.word	0x08003e63
 8003a38:	08003e63 	.word	0x08003e63
 8003a3c:	08003e63 	.word	0x08003e63
 8003a40:	08003e63 	.word	0x08003e63
 8003a44:	08003e63 	.word	0x08003e63
 8003a48:	08003e63 	.word	0x08003e63
 8003a4c:	08003b11 	.word	0x08003b11
 8003a50:	08003b2d 	.word	0x08003b2d
 8003a54:	f240 4269 	movw	r2, #1129	; 0x469
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	f300 8202 	bgt.w	8003e62 <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8003a5e:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8003a62:	f6bf aef0 	bge.w	8003846 <_Z31handleSDORequestDownloadBySDOIDt+0x2a>
 8003a66:	e1fc      	b.n	8003e62 <_Z31handleSDORequestDownloadBySDOIDt+0x646>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 8003a68:	f000 fe1c 	bl	80046a4 <_Z13OD_NodeID_getv>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a74:	4611      	mov	r1, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f001 fb3c 	bl	80050f4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003a82:	e1f6      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 8003a84:	f000 fe2a 	bl	80046dc <_Z17OD_NodeStatus_getv>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a90:	4611      	mov	r1, r2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 fb43 	bl	800511e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003a9e:	e1e8      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8003aa0:	f000 fe38 	bl	8004714 <_Z22OD_ProtocolVersion_getv>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 fb4a 	bl	8005148 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003aba:	e1da      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8003abc:	f000 fe46 	bl	800474c <_Z19OD_StackVersion_getv>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 fb51 	bl	8005172 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ad6:	e1cc      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8003ad8:	f000 fe54 	bl	8004784 <_Z17OD_DbcVersion_getv>
 8003adc:	4603      	mov	r3, r0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f001 fb58 	bl	800519c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003af2:	e1be      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8003af4:	f000 fe62 	bl	80047bc <_Z24OD_HeartbeatInterval_getv>
 8003af8:	4603      	mov	r3, r0
 8003afa:	461a      	mov	r2, r3
 8003afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 fb5f 	bl	80051c6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b0e:	e1b0      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8003b10:	f000 fe8c 	bl	800482c <_Z21OD_SendOdOnBootup_getv>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 fb66 	bl	80051f0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b2a:	e1a2      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8003b2c:	f000 feb6 	bl	800489c <_Z26OD_OdEntrySendInterval_getv>
 8003b30:	4603      	mov	r3, r0
 8003b32:	461a      	mov	r2, r3
 8003b34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f001 fb6d 	bl	800521a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b46:	e194      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 8003b48:	f000 fee0 	bl	800490c <_Z15OD_CpuUsage_getv>
 8003b4c:	eef0 7a40 	vmov.f32	s15, s0
 8003b50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b54:	eeb0 0a67 	vmov.f32	s0, s15
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f001 fb73 	bl	8005244 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b64:	e185      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 8003b66:	f000 feef 	bl	8004948 <_Z14OD_MemFree_getv>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b70:	4611      	mov	r1, r2
 8003b72:	4618      	mov	r0, r3
 8003b74:	f001 fb7d 	bl	8005272 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b7e:	e178      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 8003b80:	f000 fefe 	bl	8004980 <_Z16OD_BoardTemp_getv>
 8003b84:	eef0 7a40 	vmov.f32	s15, s0
 8003b88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b90:	4618      	mov	r0, r3
 8003b92:	f001 fb82 	bl	800529a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b9c:	e169      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 8003b9e:	f000 ff29 	bl	80049f4 <_Z19OD_InputVoltage_getv>
 8003ba2:	eef0 7a40 	vmov.f32	s15, s0
 8003ba6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003baa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 fb8a 	bl	80052c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003bba:	e15a      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8003bbc:	f000 ff54 	bl	8004a68 <_Z14OD_runtime_getv>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f001 fb94 	bl	80052f6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003bd4:	e14d      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8003bd6:	f000 ff63 	bl	8004aa0 <_Z12OD_SdcIn_getv>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 fb9a 	bl	800531e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003bf0:	e13f      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 8003bf2:	f000 ff71 	bl	8004ad8 <_Z13OD_SdcOut_getv>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bfe:	4611      	mov	r1, r2
 8003c00:	4618      	mov	r0, r3
 8003c02:	f001 fba1 	bl	8005348 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c0c:	e131      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8003c0e:	f000 ff7f 	bl	8004b10 <_Z15OD_ChipUID1_getv>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c1a:	4608      	mov	r0, r1
 8003c1c:	f001 fba9 	bl	8005372 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c26:	e124      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8003c28:	f000 ff92 	bl	8004b50 <_Z15OD_ChipUID2_getv>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c34:	4608      	mov	r0, r1
 8003c36:	f001 fbb5 	bl	80053a4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c40:	e117      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 8003c42:	f000 ffa5 	bl	8004b90 <_Z16OD_BuildDate_getv>
 8003c46:	4602      	mov	r2, r0
 8003c48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f001 fbc1 	bl	80053d6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c54:	2300      	movs	r3, #0
 8003c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c5a:	e10a      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8003c5c:	f000 ffb4 	bl	8004bc8 <_Z16OD_BuildTime_getv>
 8003c60:	4602      	mov	r2, r0
 8003c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c66:	4611      	mov	r1, r2
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 fbc8 	bl	80053fe <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c74:	e0fd      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8003c76:	f000 ffc3 	bl	8004c00 <_Z20OD_CAN1_TxErrCnt_getv>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c82:	4611      	mov	r1, r2
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 fbce 	bl	8005426 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c90:	e0ef      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8003c92:	f000 ffd1 	bl	8004c38 <_Z20OD_CAN1_RxErrCnt_getv>
 8003c96:	4603      	mov	r3, r0
 8003c98:	461a      	mov	r2, r3
 8003c9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f001 fbd5 	bl	8005450 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003cac:	e0e1      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8003cae:	f000 ffdf 	bl	8004c70 <_Z25OD_CAN1_lastErrorCode_getv>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f001 fbdd 	bl	800547a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003cc6:	e0d4      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8003cc8:	f000 ffee 	bl	8004ca8 <_Z26OD_CAN1_autoErrorReset_getv>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fbe3 	bl	80054a2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ce2:	e0c6      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8003ce4:	f001 f818 	bl	8004d18 <_Z20OD_CAN1_Baudrate_getv>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 fbea 	bl	80054cc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003cfe:	e0b8      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 8003d00:	f001 f842 	bl	8004d88 <_Z18OD_CAN1_Status_getv>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 fbf1 	bl	80054f6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d1a:	e0aa      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8003d1c:	f001 f850 	bl	8004dc0 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8003d20:	4602      	mov	r2, r0
 8003d22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d26:	4611      	mov	r1, r2
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 fbf9 	bl	8005520 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d34:	e09d      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8003d36:	f001 f85f 	bl	8004df8 <_Z23OD_CAN1_ErrorStatus_getv>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d42:	4611      	mov	r1, r2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 fbff 	bl	8005548 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d50:	e08f      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8003d52:	f001 f86d 	bl	8004e30 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8003d56:	4602      	mov	r2, r0
 8003d58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d5c:	4611      	mov	r1, r2
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 fc07 	bl	8005572 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d6a:	e082      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8003d6c:	f001 f87c 	bl	8004e68 <_Z20OD_CAN2_TxErrCnt_getv>
 8003d70:	4603      	mov	r3, r0
 8003d72:	461a      	mov	r2, r3
 8003d74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 fc0d 	bl	800559a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d80:	2300      	movs	r3, #0
 8003d82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d86:	e074      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8003d88:	f001 f88a 	bl	8004ea0 <_Z20OD_CAN2_RxErrCnt_getv>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 fc14 	bl	80055c4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003da2:	e066      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8003da4:	f001 f898 	bl	8004ed8 <_Z25OD_CAN2_lastErrorCode_getv>
 8003da8:	4602      	mov	r2, r0
 8003daa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f001 fc1c 	bl	80055ee <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003dbc:	e059      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8003dbe:	f001 f8a7 	bl	8004f10 <_Z26OD_CAN2_autoErrorReset_getv>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f001 fc22 	bl	8005616 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003dd8:	e04b      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8003dda:	f001 f8d1 	bl	8004f80 <_Z20OD_CAN2_Baudrate_getv>
 8003dde:	4603      	mov	r3, r0
 8003de0:	461a      	mov	r2, r3
 8003de2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f001 fc29 	bl	8005640 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003df4:	e03d      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 8003df6:	f001 f8fb 	bl	8004ff0 <_Z18OD_CAN2_Status_getv>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e02:	4611      	mov	r1, r2
 8003e04:	4618      	mov	r0, r3
 8003e06:	f001 fc30 	bl	800566a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e10:	e02f      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8003e12:	f001 f909 	bl	8005028 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8003e16:	4602      	mov	r2, r0
 8003e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e1c:	4611      	mov	r1, r2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f001 fc38 	bl	8005694 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e2a:	e022      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8003e2c:	f001 f918 	bl	8005060 <_Z23OD_CAN2_ErrorStatus_getv>
 8003e30:	4603      	mov	r3, r0
 8003e32:	461a      	mov	r2, r3
 8003e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f001 fc3e 	bl	80056bc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e40:	2300      	movs	r3, #0
 8003e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e46:	e014      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8003e48:	f001 f926 	bl	8005098 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e52:	4611      	mov	r1, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f001 fc46 	bl	80056e6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e60:	e007      	b.n	8003e72 <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e68:	4611      	mov	r1, r2
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f001 fc4f 	bl	800570e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 8003e70:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 8003e72:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003e76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e7a:	4611      	mov	r1, r2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 fc5b 	bl	8005738 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8003e82:	f107 0308 	add.w	r3, r7, #8
 8003e86:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fd f9b1 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8003e92:	4b06      	ldr	r3, [pc, #24]	; (8003eac <_Z31handleSDORequestDownloadBySDOIDt+0x690>)
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	f107 0108 	add.w	r1, r7, #8
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f00a ffdb 	bl	800ee58 <osMessageQueuePut>
}
 8003ea2:	bf00      	nop
 8003ea4:	3748      	adds	r7, #72	; 0x48
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	2000079c 	.word	0x2000079c

08003eb0 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	2208      	movs	r2, #8
 8003ec6:	f240 51c1 	movw	r1, #1473	; 0x5c1
 8003eca:	f7fe f985 	bl	80021d8 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8003ed2:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d000      	beq.n	8003edc <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8003eda:	e7fe      	b.n	8003eda <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
 8003ef0:	6839      	ldr	r1, [r7, #0]
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	331c      	adds	r3, #28
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff ffd9 	bl	8003eb0 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b09c      	sub	sp, #112	; 0x70
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 8003f10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff ffe5 	bl	8003ee6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 8003f1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fc6b 	bl	80037fc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 8003f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f30:	4618      	mov	r0, r3
 8003f32:	f001 fc16 	bl	8005762 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003f36:	4603      	mov	r3, r0
 8003f38:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    switch (sdoId) {
 8003f3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f40:	2b21      	cmp	r3, #33	; 0x21
 8003f42:	f300 810b 	bgt.w	800415c <_Z22handleSDORequestUploadRK9RxMessage+0x254>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f300 80be 	bgt.w	80040c8 <_Z22handleSDORequestUploadRK9RxMessage+0x1c0>
 8003f4c:	e382      	b.n	8004654 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8003f4e:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003f52:	2b59      	cmp	r3, #89	; 0x59
 8003f54:	f200 837e 	bhi.w	8004654 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8003f58:	a201      	add	r2, pc, #4	; (adr r2, 8003f60 <_Z22handleSDORequestUploadRK9RxMessage+0x58>)
 8003f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5e:	bf00      	nop
 8003f60:	0800429f 	.word	0x0800429f
 8003f64:	080042bd 	.word	0x080042bd
 8003f68:	080042d7 	.word	0x080042d7
 8003f6c:	080042f5 	.word	0x080042f5
 8003f70:	08004313 	.word	0x08004313
 8003f74:	0800432d 	.word	0x0800432d
 8003f78:	08004349 	.word	0x08004349
 8003f7c:	08004655 	.word	0x08004655
 8003f80:	08004655 	.word	0x08004655
 8003f84:	08004655 	.word	0x08004655
 8003f88:	08004655 	.word	0x08004655
 8003f8c:	08004655 	.word	0x08004655
 8003f90:	08004655 	.word	0x08004655
 8003f94:	08004655 	.word	0x08004655
 8003f98:	08004655 	.word	0x08004655
 8003f9c:	08004655 	.word	0x08004655
 8003fa0:	08004365 	.word	0x08004365
 8003fa4:	0800437f 	.word	0x0800437f
 8003fa8:	08004655 	.word	0x08004655
 8003fac:	08004655 	.word	0x08004655
 8003fb0:	08004655 	.word	0x08004655
 8003fb4:	08004655 	.word	0x08004655
 8003fb8:	08004655 	.word	0x08004655
 8003fbc:	08004655 	.word	0x08004655
 8003fc0:	08004655 	.word	0x08004655
 8003fc4:	08004655 	.word	0x08004655
 8003fc8:	08004655 	.word	0x08004655
 8003fcc:	08004655 	.word	0x08004655
 8003fd0:	08004655 	.word	0x08004655
 8003fd4:	08004655 	.word	0x08004655
 8003fd8:	08004655 	.word	0x08004655
 8003fdc:	08004655 	.word	0x08004655
 8003fe0:	08004399 	.word	0x08004399
 8003fe4:	080043b3 	.word	0x080043b3
 8003fe8:	08004655 	.word	0x08004655
 8003fec:	08004655 	.word	0x08004655
 8003ff0:	08004655 	.word	0x08004655
 8003ff4:	08004655 	.word	0x08004655
 8003ff8:	08004655 	.word	0x08004655
 8003ffc:	08004655 	.word	0x08004655
 8004000:	08004655 	.word	0x08004655
 8004004:	08004655 	.word	0x08004655
 8004008:	08004655 	.word	0x08004655
 800400c:	08004655 	.word	0x08004655
 8004010:	08004655 	.word	0x08004655
 8004014:	08004655 	.word	0x08004655
 8004018:	08004655 	.word	0x08004655
 800401c:	08004655 	.word	0x08004655
 8004020:	08004655 	.word	0x08004655
 8004024:	08004655 	.word	0x08004655
 8004028:	08004655 	.word	0x08004655
 800402c:	08004655 	.word	0x08004655
 8004030:	08004655 	.word	0x08004655
 8004034:	08004655 	.word	0x08004655
 8004038:	08004655 	.word	0x08004655
 800403c:	08004655 	.word	0x08004655
 8004040:	08004655 	.word	0x08004655
 8004044:	08004655 	.word	0x08004655
 8004048:	08004655 	.word	0x08004655
 800404c:	08004655 	.word	0x08004655
 8004050:	08004655 	.word	0x08004655
 8004054:	08004655 	.word	0x08004655
 8004058:	08004655 	.word	0x08004655
 800405c:	08004655 	.word	0x08004655
 8004060:	080043cd 	.word	0x080043cd
 8004064:	080043e9 	.word	0x080043e9
 8004068:	08004405 	.word	0x08004405
 800406c:	0800441f 	.word	0x0800441f
 8004070:	08004455 	.word	0x08004455
 8004074:	08004655 	.word	0x08004655
 8004078:	080044a5 	.word	0x080044a5
 800407c:	080044c1 	.word	0x080044c1
 8004080:	080044db 	.word	0x080044db
 8004084:	080044f7 	.word	0x080044f7
 8004088:	08004655 	.word	0x08004655
 800408c:	08004655 	.word	0x08004655
 8004090:	08004655 	.word	0x08004655
 8004094:	08004655 	.word	0x08004655
 8004098:	08004655 	.word	0x08004655
 800409c:	08004655 	.word	0x08004655
 80040a0:	08004511 	.word	0x08004511
 80040a4:	0800452d 	.word	0x0800452d
 80040a8:	08004549 	.word	0x08004549
 80040ac:	08004563 	.word	0x08004563
 80040b0:	08004599 	.word	0x08004599
 80040b4:	08004655 	.word	0x08004655
 80040b8:	080045e9 	.word	0x080045e9
 80040bc:	08004605 	.word	0x08004605
 80040c0:	0800461f 	.word	0x0800461f
 80040c4:	0800463b 	.word	0x0800463b
 80040c8:	3b01      	subs	r3, #1
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	f200 82c2 	bhi.w	8004654 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <_Z22handleSDORequestUploadRK9RxMessage+0x1d0>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	08004171 	.word	0x08004171
 80040dc:	0800418d 	.word	0x0800418d
 80040e0:	080041a9 	.word	0x080041a9
 80040e4:	080041c5 	.word	0x080041c5
 80040e8:	080041e1 	.word	0x080041e1
 80040ec:	08004655 	.word	0x08004655
 80040f0:	08004655 	.word	0x08004655
 80040f4:	08004655 	.word	0x08004655
 80040f8:	08004655 	.word	0x08004655
 80040fc:	08004655 	.word	0x08004655
 8004100:	08004655 	.word	0x08004655
 8004104:	08004655 	.word	0x08004655
 8004108:	08004655 	.word	0x08004655
 800410c:	08004655 	.word	0x08004655
 8004110:	08004655 	.word	0x08004655
 8004114:	080041fd 	.word	0x080041fd
 8004118:	08004655 	.word	0x08004655
 800411c:	08004655 	.word	0x08004655
 8004120:	08004655 	.word	0x08004655
 8004124:	08004655 	.word	0x08004655
 8004128:	08004655 	.word	0x08004655
 800412c:	08004655 	.word	0x08004655
 8004130:	08004655 	.word	0x08004655
 8004134:	08004655 	.word	0x08004655
 8004138:	08004655 	.word	0x08004655
 800413c:	08004655 	.word	0x08004655
 8004140:	08004655 	.word	0x08004655
 8004144:	08004655 	.word	0x08004655
 8004148:	08004655 	.word	0x08004655
 800414c:	08004655 	.word	0x08004655
 8004150:	08004655 	.word	0x08004655
 8004154:	08004233 	.word	0x08004233
 8004158:	08004269 	.word	0x08004269
 800415c:	f240 4269 	movw	r2, #1129	; 0x469
 8004160:	4293      	cmp	r3, r2
 8004162:	f300 8277 	bgt.w	8004654 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8004166:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800416a:	f6bf aef0 	bge.w	8003f4e <_Z22handleSDORequestUploadRK9RxMessage+0x46>
 800416e:	e271      	b.n	8004654 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004170:	2303      	movs	r3, #3
 8004172:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 8004176:	f000 fa95 	bl	80046a4 <_Z13OD_NodeID_getv>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f000 ffb5 	bl	80050f4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 800418a:	e26c      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800418c:	2303      	movs	r3, #3
 800418e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 8004192:	f000 faa3 	bl	80046dc <_Z17OD_NodeStatus_getv>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 ffbc 	bl	800511e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 80041a6:	e25e      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 80041ae:	f000 fab1 	bl	8004714 <_Z22OD_ProtocolVersion_getv>
 80041b2:	4603      	mov	r3, r0
 80041b4:	461a      	mov	r2, r3
 80041b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 ffc3 	bl	8005148 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 80041c2:	e250      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 80041ca:	f000 fabf 	bl	800474c <_Z19OD_StackVersion_getv>
 80041ce:	4603      	mov	r3, r0
 80041d0:	461a      	mov	r2, r3
 80041d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 ffca 	bl	8005172 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 80041de:	e242      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 80041e6:	f000 facd 	bl	8004784 <_Z17OD_DbcVersion_getv>
 80041ea:	4603      	mov	r3, r0
 80041ec:	461a      	mov	r2, r3
 80041ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041f2:	4611      	mov	r1, r2
 80041f4:	4618      	mov	r0, r3
 80041f6:	f000 ffd1 	bl	800519c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 80041fa:	e234      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_HeartbeatInterval>();
 80041fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004200:	4618      	mov	r0, r3
 8004202:	f001 fac0 	bl	8005786 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 8004206:	4603      	mov	r3, r0
 8004208:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 800420c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004210:	4618      	mov	r0, r3
 8004212:	f000 faef 	bl	80047f4 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004216:	2300      	movs	r3, #0
 8004218:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 800421c:	f000 face 	bl	80047bc <_Z24OD_HeartbeatInterval_getv>
 8004220:	4603      	mov	r3, r0
 8004222:	461a      	mov	r2, r3
 8004224:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 ffcb 	bl	80051c6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 8004230:	e219      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_SendOdOnBootup>();
 8004232:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004236:	4618      	mov	r0, r3
 8004238:	f001 fab7 	bl	80057aa <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>
 800423c:	4603      	mov	r3, r0
 800423e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 8004242:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fb0c 	bl	8004864 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800424c:	2300      	movs	r3, #0
 800424e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8004252:	f000 faeb 	bl	800482c <_Z21OD_SendOdOnBootup_getv>
 8004256:	4603      	mov	r3, r0
 8004258:	461a      	mov	r2, r3
 800425a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f000 ffc5 	bl	80051f0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 8004266:	e1fe      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_OdEntrySendInterval>();
 8004268:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800426c:	4618      	mov	r0, r3
 800426e:	f001 faae 	bl	80057ce <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8004272:	4603      	mov	r3, r0
 8004274:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8004278:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fb29 	bl	80048d4 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004282:	2300      	movs	r3, #0
 8004284:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8004288:	f000 fb08 	bl	800489c <_Z26OD_OdEntrySendInterval_getv>
 800428c:	4603      	mov	r3, r0
 800428e:	461a      	mov	r2, r3
 8004290:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f000 ffbf 	bl	800521a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 800429c:	e1e3      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800429e:	2303      	movs	r3, #3
 80042a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 80042a4:	f000 fb32 	bl	800490c <_Z15OD_CpuUsage_getv>
 80042a8:	eef0 7a40 	vmov.f32	s15, s0
 80042ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042b0:	eeb0 0a67 	vmov.f32	s0, s15
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 ffc5 	bl	8005244 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 80042ba:	e1d4      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80042bc:	2303      	movs	r3, #3
 80042be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 80042c2:	f000 fb41 	bl	8004948 <_Z14OD_MemFree_getv>
 80042c6:	4602      	mov	r2, r0
 80042c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042cc:	4611      	mov	r1, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 ffcf 	bl	8005272 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 80042d4:	e1c7      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 80042dc:	f000 fb50 	bl	8004980 <_Z16OD_BoardTemp_getv>
 80042e0:	eef0 7a40 	vmov.f32	s15, s0
 80042e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042e8:	eeb0 0a67 	vmov.f32	s0, s15
 80042ec:	4618      	mov	r0, r3
 80042ee:	f000 ffd4 	bl	800529a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 80042f2:	e1b8      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 80042fa:	f000 fb7b 	bl	80049f4 <_Z19OD_InputVoltage_getv>
 80042fe:	eef0 7a40 	vmov.f32	s15, s0
 8004302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004306:	eeb0 0a67 	vmov.f32	s0, s15
 800430a:	4618      	mov	r0, r3
 800430c:	f000 ffdc 	bl	80052c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 8004310:	e1a9      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004312:	2303      	movs	r3, #3
 8004314:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8004318:	f000 fba6 	bl	8004a68 <_Z14OD_runtime_getv>
 800431c:	4602      	mov	r2, r0
 800431e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f000 ffe6 	bl	80052f6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            break;
 800432a:	e19c      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800432c:	2303      	movs	r3, #3
 800432e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8004332:	f000 fbb5 	bl	8004aa0 <_Z12OD_SdcIn_getv>
 8004336:	4603      	mov	r3, r0
 8004338:	461a      	mov	r2, r3
 800433a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	f000 ffec 	bl	800531e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            break;
 8004346:	e18e      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004348:	2303      	movs	r3, #3
 800434a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 800434e:	f000 fbc3 	bl	8004ad8 <_Z13OD_SdcOut_getv>
 8004352:	4603      	mov	r3, r0
 8004354:	461a      	mov	r2, r3
 8004356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fff3 	bl	8005348 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8004362:	e180      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004364:	2303      	movs	r3, #3
 8004366:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 800436a:	f000 fbd1 	bl	8004b10 <_Z15OD_ChipUID1_getv>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004376:	4608      	mov	r0, r1
 8004378:	f000 fffb 	bl	8005372 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 800437c:	e173      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800437e:	2303      	movs	r3, #3
 8004380:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8004384:	f000 fbe4 	bl	8004b50 <_Z15OD_ChipUID2_getv>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004390:	4608      	mov	r0, r1
 8004392:	f001 f807 	bl	80053a4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 8004396:	e166      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004398:	2303      	movs	r3, #3
 800439a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 800439e:	f000 fbf7 	bl	8004b90 <_Z16OD_BuildDate_getv>
 80043a2:	4602      	mov	r2, r0
 80043a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043a8:	4611      	mov	r1, r2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f001 f813 	bl	80053d6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 80043b0:	e159      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 80043b8:	f000 fc06 	bl	8004bc8 <_Z16OD_BuildTime_getv>
 80043bc:	4602      	mov	r2, r0
 80043be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043c2:	4611      	mov	r1, r2
 80043c4:	4618      	mov	r0, r3
 80043c6:	f001 f81a 	bl	80053fe <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 80043ca:	e14c      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 80043d2:	f000 fc15 	bl	8004c00 <_Z20OD_CAN1_TxErrCnt_getv>
 80043d6:	4603      	mov	r3, r0
 80043d8:	461a      	mov	r2, r3
 80043da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043de:	4611      	mov	r1, r2
 80043e0:	4618      	mov	r0, r3
 80043e2:	f001 f820 	bl	8005426 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 80043e6:	e13e      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 80043ee:	f000 fc23 	bl	8004c38 <_Z20OD_CAN1_RxErrCnt_getv>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043fa:	4611      	mov	r1, r2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 f827 	bl	8005450 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 8004402:	e130      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004404:	2303      	movs	r3, #3
 8004406:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 800440a:	f000 fc31 	bl	8004c70 <_Z25OD_CAN1_lastErrorCode_getv>
 800440e:	4602      	mov	r2, r0
 8004410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004414:	4611      	mov	r1, r2
 8004416:	4618      	mov	r0, r3
 8004418:	f001 f82f 	bl	800547a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 800441c:	e123      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_autoErrorReset>();
 800441e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004422:	4618      	mov	r0, r3
 8004424:	f001 f9e5 	bl	80057f2 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 8004428:	4603      	mov	r3, r0
 800442a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 800442e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004432:	4618      	mov	r0, r3
 8004434:	f000 fc54 	bl	8004ce0 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004438:	2300      	movs	r3, #0
 800443a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 800443e:	f000 fc33 	bl	8004ca8 <_Z26OD_CAN1_autoErrorReset_getv>
 8004442:	4603      	mov	r3, r0
 8004444:	461a      	mov	r2, r3
 8004446:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f001 f828 	bl	80054a2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8004452:	e108      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_Baudrate>();
 8004454:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004458:	4618      	mov	r0, r3
 800445a:	f001 f9dc 	bl	8005816 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 800445e:	4603      	mov	r3, r0
 8004460:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8004464:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004468:	2b7c      	cmp	r3, #124	; 0x7c
 800446a:	d904      	bls.n	8004476 <_Z22handleSDORequestUploadRK9RxMessage+0x56e>
 800446c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004474:	d903      	bls.n	800447e <_Z22handleSDORequestUploadRK9RxMessage+0x576>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 8004476:	2305      	movs	r3, #5
 8004478:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800447c:	e007      	b.n	800448e <_Z22handleSDORequestUploadRK9RxMessage+0x586>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 800447e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fc64 	bl	8004d50 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004488:	2300      	movs	r3, #0
 800448a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 800448e:	f000 fc43 	bl	8004d18 <_Z20OD_CAN1_Baudrate_getv>
 8004492:	4603      	mov	r3, r0
 8004494:	461a      	mov	r2, r3
 8004496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800449a:	4611      	mov	r1, r2
 800449c:	4618      	mov	r0, r3
 800449e:	f001 f815 	bl	80054cc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 80044a2:	e0e0      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 80044aa:	f000 fc6d 	bl	8004d88 <_Z18OD_CAN1_Status_getv>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 f81c 	bl	80054f6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 80044be:	e0d2      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 80044c6:	f000 fc7b 	bl	8004dc0 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 80044ca:	4602      	mov	r2, r0
 80044cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f001 f824 	bl	8005520 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 80044d8:	e0c5      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044da:	2303      	movs	r3, #3
 80044dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 80044e0:	f000 fc8a 	bl	8004df8 <_Z23OD_CAN1_ErrorStatus_getv>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ec:	4611      	mov	r1, r2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 f82a 	bl	8005548 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 80044f4:	e0b7      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 80044fc:	f000 fc98 	bl	8004e30 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8004500:	4602      	mov	r2, r0
 8004502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f001 f832 	bl	8005572 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 800450e:	e0aa      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004510:	2303      	movs	r3, #3
 8004512:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8004516:	f000 fca7 	bl	8004e68 <_Z20OD_CAN2_TxErrCnt_getv>
 800451a:	4603      	mov	r3, r0
 800451c:	461a      	mov	r2, r3
 800451e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004522:	4611      	mov	r1, r2
 8004524:	4618      	mov	r0, r3
 8004526:	f001 f838 	bl	800559a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 800452a:	e09c      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800452c:	2303      	movs	r3, #3
 800452e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8004532:	f000 fcb5 	bl	8004ea0 <_Z20OD_CAN2_RxErrCnt_getv>
 8004536:	4603      	mov	r3, r0
 8004538:	461a      	mov	r2, r3
 800453a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800453e:	4611      	mov	r1, r2
 8004540:	4618      	mov	r0, r3
 8004542:	f001 f83f 	bl	80055c4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 8004546:	e08e      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004548:	2303      	movs	r3, #3
 800454a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 800454e:	f000 fcc3 	bl	8004ed8 <_Z25OD_CAN2_lastErrorCode_getv>
 8004552:	4602      	mov	r2, r0
 8004554:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004558:	4611      	mov	r1, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f001 f847 	bl	80055ee <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8004560:	e081      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_autoErrorReset>();
 8004562:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004566:	4618      	mov	r0, r3
 8004568:	f001 f967 	bl	800583a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8004572:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8004576:	4618      	mov	r0, r3
 8004578:	f000 fce6 	bl	8004f48 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800457c:	2300      	movs	r3, #0
 800457e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8004582:	f000 fcc5 	bl	8004f10 <_Z26OD_CAN2_autoErrorReset_getv>
 8004586:	4603      	mov	r3, r0
 8004588:	461a      	mov	r2, r3
 800458a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f001 f840 	bl	8005616 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8004596:	e066      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_Baudrate>();
 8004598:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800459c:	4618      	mov	r0, r3
 800459e:	f001 f95e 	bl	800585e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 80045a2:	4603      	mov	r3, r0
 80045a4:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 80045a8:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80045ac:	2b7c      	cmp	r3, #124	; 0x7c
 80045ae:	d904      	bls.n	80045ba <_Z22handleSDORequestUploadRK9RxMessage+0x6b2>
 80045b0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80045b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045b8:	d903      	bls.n	80045c2 <_Z22handleSDORequestUploadRK9RxMessage+0x6ba>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 80045ba:	2305      	movs	r3, #5
 80045bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80045c0:	e007      	b.n	80045d2 <_Z22handleSDORequestUploadRK9RxMessage+0x6ca>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 80045c2:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 fcf6 	bl	8004fb8 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80045cc:	2300      	movs	r3, #0
 80045ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80045d2:	f000 fcd5 	bl	8004f80 <_Z20OD_CAN2_Baudrate_getv>
 80045d6:	4603      	mov	r3, r0
 80045d8:	461a      	mov	r2, r3
 80045da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045de:	4611      	mov	r1, r2
 80045e0:	4618      	mov	r0, r3
 80045e2:	f001 f82d 	bl	8005640 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 80045e6:	e03e      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 80045ee:	f000 fcff 	bl	8004ff0 <_Z18OD_CAN2_Status_getv>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f001 f834 	bl	800566a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 8004602:	e030      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004604:	2303      	movs	r3, #3
 8004606:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 800460a:	f000 fd0d 	bl	8005028 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 800460e:	4602      	mov	r2, r0
 8004610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004614:	4611      	mov	r1, r2
 8004616:	4618      	mov	r0, r3
 8004618:	f001 f83c 	bl	8005694 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 800461c:	e023      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800461e:	2303      	movs	r3, #3
 8004620:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8004624:	f000 fd1c 	bl	8005060 <_Z23OD_CAN2_ErrorStatus_getv>
 8004628:	4603      	mov	r3, r0
 800462a:	461a      	mov	r2, r3
 800462c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004630:	4611      	mov	r1, r2
 8004632:	4618      	mov	r0, r3
 8004634:	f001 f842 	bl	80056bc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8004638:	e015      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800463a:	2303      	movs	r3, #3
 800463c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8004640:	f000 fd2a 	bl	8005098 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8004644:	4602      	mov	r2, r0
 8004646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800464a:	4611      	mov	r1, r2
 800464c:	4618      	mov	r0, r3
 800464e:	f001 f84a 	bl	80056e6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004652:	e008      	b.n	8004666 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 8004654:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800465c:	4611      	mov	r1, r2
 800465e:	4618      	mov	r0, r3
 8004660:	f001 f855 	bl	800570e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 8004664:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 8004666:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800466a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f001 f861 	bl	8005738 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8004676:	f107 0308 	add.w	r3, r7, #8
 800467a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800467e:	2200      	movs	r2, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f7fc fdb7 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8004686:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <_Z22handleSDORequestUploadRK9RxMessage+0x798>)
 8004688:	6818      	ldr	r0, [r3, #0]
 800468a:	f107 0108 	add.w	r1, r7, #8
 800468e:	2300      	movs	r3, #0
 8004690:	2200      	movs	r2, #0
 8004692:	f00a fbe1 	bl	800ee58 <osMessageQueuePut>
}
 8004696:	bf00      	nop
 8004698:	3770      	adds	r7, #112	; 0x70
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	2000079c 	.word	0x2000079c

080046a4 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 80046aa:	4b0a      	ldr	r3, [pc, #40]	; (80046d4 <_Z13OD_NodeID_getv+0x30>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f04f 31ff 	mov.w	r1, #4294967295
 80046b2:	4618      	mov	r0, r3
 80046b4:	f00a f995 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_NodeID;
 80046b8:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <_Z13OD_NodeID_getv+0x34>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <_Z13OD_NodeID_getv+0x30>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f00a f9d8 	bl	800ea78 <osMutexRelease>
    return value;
 80046c8:	79fb      	ldrb	r3, [r7, #7]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	20000810 	.word	0x20000810
 80046d8:	200007a5 	.word	0x200007a5

080046dc <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 80046e2:	4b0a      	ldr	r3, [pc, #40]	; (800470c <_Z17OD_NodeStatus_getv+0x30>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f04f 31ff 	mov.w	r1, #4294967295
 80046ea:	4618      	mov	r0, r3
 80046ec:	f00a f979 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 80046f0:	4b07      	ldr	r3, [pc, #28]	; (8004710 <_Z17OD_NodeStatus_getv+0x34>)
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <_Z17OD_NodeStatus_getv+0x30>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f00a f9bc 	bl	800ea78 <osMutexRelease>
    return value;
 8004700:	79fb      	ldrb	r3, [r7, #7]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	20000814 	.word	0x20000814
 8004710:	200007a6 	.word	0x200007a6

08004714 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 800471a:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <_Z22OD_ProtocolVersion_getv+0x30>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f04f 31ff 	mov.w	r1, #4294967295
 8004722:	4618      	mov	r0, r3
 8004724:	f00a f95d 	bl	800e9e2 <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8004728:	4b07      	ldr	r3, [pc, #28]	; (8004748 <_Z22OD_ProtocolVersion_getv+0x34>)
 800472a:	881b      	ldrh	r3, [r3, #0]
 800472c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <_Z22OD_ProtocolVersion_getv+0x30>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f00a f9a0 	bl	800ea78 <osMutexRelease>
    return value;
 8004738:	88fb      	ldrh	r3, [r7, #6]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000818 	.word	0x20000818
 8004748:	20000000 	.word	0x20000000

0800474c <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8004752:	4b0a      	ldr	r3, [pc, #40]	; (800477c <_Z19OD_StackVersion_getv+0x30>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f04f 31ff 	mov.w	r1, #4294967295
 800475a:	4618      	mov	r0, r3
 800475c:	f00a f941 	bl	800e9e2 <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8004760:	4b07      	ldr	r3, [pc, #28]	; (8004780 <_Z19OD_StackVersion_getv+0x34>)
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 8004766:	4b05      	ldr	r3, [pc, #20]	; (800477c <_Z19OD_StackVersion_getv+0x30>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f00a f984 	bl	800ea78 <osMutexRelease>
    return value;
 8004770:	88fb      	ldrh	r3, [r7, #6]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	2000081c 	.word	0x2000081c
 8004780:	200007a8 	.word	0x200007a8

08004784 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 800478a:	4b0a      	ldr	r3, [pc, #40]	; (80047b4 <_Z17OD_DbcVersion_getv+0x30>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f04f 31ff 	mov.w	r1, #4294967295
 8004792:	4618      	mov	r0, r3
 8004794:	f00a f925 	bl	800e9e2 <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8004798:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <_Z17OD_DbcVersion_getv+0x34>)
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <_Z17OD_DbcVersion_getv+0x30>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f00a f968 	bl	800ea78 <osMutexRelease>
    return value;
 80047a8:	88fb      	ldrh	r3, [r7, #6]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	20000820 	.word	0x20000820
 80047b8:	200007aa 	.word	0x200007aa

080047bc <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 80047c2:	4b0a      	ldr	r3, [pc, #40]	; (80047ec <_Z24OD_HeartbeatInterval_getv+0x30>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f04f 31ff 	mov.w	r1, #4294967295
 80047ca:	4618      	mov	r0, r3
 80047cc:	f00a f909 	bl	800e9e2 <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 80047d0:	4b07      	ldr	r3, [pc, #28]	; (80047f0 <_Z24OD_HeartbeatInterval_getv+0x34>)
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 80047d6:	4b05      	ldr	r3, [pc, #20]	; (80047ec <_Z24OD_HeartbeatInterval_getv+0x30>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f00a f94c 	bl	800ea78 <osMutexRelease>
    return value;
 80047e0:	88fb      	ldrh	r3, [r7, #6]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000824 	.word	0x20000824
 80047f0:	20000002 	.word	0x20000002

080047f4 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	4603      	mov	r3, r0
 80047fc:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 80047fe:	4b09      	ldr	r3, [pc, #36]	; (8004824 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f04f 31ff 	mov.w	r1, #4294967295
 8004806:	4618      	mov	r0, r3
 8004808:	f00a f8eb 	bl	800e9e2 <osMutexAcquire>
    OD_HeartbeatInterval = value;
 800480c:	4a06      	ldr	r2, [pc, #24]	; (8004828 <_Z24OD_HeartbeatInterval_sett+0x34>)
 800480e:	88fb      	ldrh	r3, [r7, #6]
 8004810:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8004812:	4b04      	ldr	r3, [pc, #16]	; (8004824 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f00a f92e 	bl	800ea78 <osMutexRelease>
}
 800481c:	bf00      	nop
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000824 	.word	0x20000824
 8004828:	20000002 	.word	0x20000002

0800482c <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f04f 31ff 	mov.w	r1, #4294967295
 800483a:	4618      	mov	r0, r3
 800483c:	f00a f8d1 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 8004840:	4b07      	ldr	r3, [pc, #28]	; (8004860 <_Z21OD_SendOdOnBootup_getv+0x34>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004846:	4b05      	ldr	r3, [pc, #20]	; (800485c <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f00a f914 	bl	800ea78 <osMutexRelease>
    return value;
 8004850:	79fb      	ldrb	r3, [r7, #7]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	20000828 	.word	0x20000828
 8004860:	200007ac 	.word	0x200007ac

08004864 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	4603      	mov	r3, r0
 800486c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 800486e:	4b09      	ldr	r3, [pc, #36]	; (8004894 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f04f 31ff 	mov.w	r1, #4294967295
 8004876:	4618      	mov	r0, r3
 8004878:	f00a f8b3 	bl	800e9e2 <osMutexAcquire>
    OD_SendOdOnBootup = value;
 800487c:	4a06      	ldr	r2, [pc, #24]	; (8004898 <_Z21OD_SendOdOnBootup_seth+0x34>)
 800487e:	79fb      	ldrb	r3, [r7, #7]
 8004880:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004882:	4b04      	ldr	r3, [pc, #16]	; (8004894 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4618      	mov	r0, r3
 8004888:	f00a f8f6 	bl	800ea78 <osMutexRelease>
}
 800488c:	bf00      	nop
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000828 	.word	0x20000828
 8004898:	200007ac 	.word	0x200007ac

0800489c <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 80048a2:	4b0a      	ldr	r3, [pc, #40]	; (80048cc <_Z26OD_OdEntrySendInterval_getv+0x30>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f04f 31ff 	mov.w	r1, #4294967295
 80048aa:	4618      	mov	r0, r3
 80048ac:	f00a f899 	bl	800e9e2 <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 80048b0:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 80048b2:	881b      	ldrh	r3, [r3, #0]
 80048b4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <_Z26OD_OdEntrySendInterval_getv+0x30>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f00a f8dc 	bl	800ea78 <osMutexRelease>
    return value;
 80048c0:	88fb      	ldrh	r3, [r7, #6]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3708      	adds	r7, #8
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	2000082c 	.word	0x2000082c
 80048d0:	20000004 	.word	0x20000004

080048d4 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	4603      	mov	r3, r0
 80048dc:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 80048de:	4b09      	ldr	r3, [pc, #36]	; (8004904 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f04f 31ff 	mov.w	r1, #4294967295
 80048e6:	4618      	mov	r0, r3
 80048e8:	f00a f87b 	bl	800e9e2 <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 80048ec:	4a06      	ldr	r2, [pc, #24]	; (8004908 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 80048ee:	88fb      	ldrh	r3, [r7, #6]
 80048f0:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 80048f2:	4b04      	ldr	r3, [pc, #16]	; (8004904 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f00a f8be 	bl	800ea78 <osMutexRelease>
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	2000082c 	.word	0x2000082c
 8004908:	20000004 	.word	0x20000004

0800490c <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <_Z15OD_CpuUsage_getv+0x34>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f04f 31ff 	mov.w	r1, #4294967295
 800491a:	4618      	mov	r0, r3
 800491c:	f00a f861 	bl	800e9e2 <osMutexAcquire>
    float value = OD_CpuUsage;
 8004920:	4b08      	ldr	r3, [pc, #32]	; (8004944 <_Z15OD_CpuUsage_getv+0x38>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8004926:	4b06      	ldr	r3, [pc, #24]	; (8004940 <_Z15OD_CpuUsage_getv+0x34>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4618      	mov	r0, r3
 800492c:	f00a f8a4 	bl	800ea78 <osMutexRelease>
    return value;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	ee07 3a90 	vmov	s15, r3
}
 8004936:	eeb0 0a67 	vmov.f32	s0, s15
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000830 	.word	0x20000830
 8004944:	200007b0 	.word	0x200007b0

08004948 <_Z14OD_MemFree_getv>:
    osMutexRelease(mutex_OD_CpuUsage);
}
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 800494e:	4b0a      	ldr	r3, [pc, #40]	; (8004978 <_Z14OD_MemFree_getv+0x30>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f04f 31ff 	mov.w	r1, #4294967295
 8004956:	4618      	mov	r0, r3
 8004958:	f00a f843 	bl	800e9e2 <osMutexAcquire>
    uint32_t value = OD_MemFree;
 800495c:	4b07      	ldr	r3, [pc, #28]	; (800497c <_Z14OD_MemFree_getv+0x34>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <_Z14OD_MemFree_getv+0x30>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f00a f886 	bl	800ea78 <osMutexRelease>
    return value;
 800496c:	687b      	ldr	r3, [r7, #4]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000834 	.word	0x20000834
 800497c:	200007b4 	.word	0x200007b4

08004980 <_Z16OD_BoardTemp_getv>:
    osMutexRelease(mutex_OD_MemFree);
}
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <_Z16OD_BoardTemp_getv+0x34>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f04f 31ff 	mov.w	r1, #4294967295
 800498e:	4618      	mov	r0, r3
 8004990:	f00a f827 	bl	800e9e2 <osMutexAcquire>
    float value = OD_BoardTemp;
 8004994:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <_Z16OD_BoardTemp_getv+0x38>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <_Z16OD_BoardTemp_getv+0x34>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4618      	mov	r0, r3
 80049a0:	f00a f86a 	bl	800ea78 <osMutexRelease>
    return value;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	ee07 3a90 	vmov	s15, r3
}
 80049aa:	eeb0 0a67 	vmov.f32	s0, s15
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000838 	.word	0x20000838
 80049b8:	200007b8 	.word	0x200007b8

080049bc <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <_Z16OD_BoardTemp_setf+0x30>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f04f 31ff 	mov.w	r1, #4294967295
 80049ce:	4618      	mov	r0, r3
 80049d0:	f00a f807 	bl	800e9e2 <osMutexAcquire>
    OD_BoardTemp = value;
 80049d4:	4a06      	ldr	r2, [pc, #24]	; (80049f0 <_Z16OD_BoardTemp_setf+0x34>)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 80049da:	4b04      	ldr	r3, [pc, #16]	; (80049ec <_Z16OD_BoardTemp_setf+0x30>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f00a f84a 	bl	800ea78 <osMutexRelease>
}
 80049e4:	bf00      	nop
 80049e6:	3708      	adds	r7, #8
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20000838 	.word	0x20000838
 80049f0:	200007b8 	.word	0x200007b8

080049f4 <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 80049fa:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <_Z19OD_InputVoltage_getv+0x34>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f04f 31ff 	mov.w	r1, #4294967295
 8004a02:	4618      	mov	r0, r3
 8004a04:	f009 ffed 	bl	800e9e2 <osMutexAcquire>
    float value = OD_InputVoltage;
 8004a08:	4b08      	ldr	r3, [pc, #32]	; (8004a2c <_Z19OD_InputVoltage_getv+0x38>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8004a0e:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <_Z19OD_InputVoltage_getv+0x34>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f00a f830 	bl	800ea78 <osMutexRelease>
    return value;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	ee07 3a90 	vmov	s15, r3
}
 8004a1e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a22:	3708      	adds	r7, #8
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	2000083c 	.word	0x2000083c
 8004a2c:	200007bc 	.word	0x200007bc

08004a30 <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8004a3a:	4b09      	ldr	r3, [pc, #36]	; (8004a60 <_Z19OD_InputVoltage_setf+0x30>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f04f 31ff 	mov.w	r1, #4294967295
 8004a42:	4618      	mov	r0, r3
 8004a44:	f009 ffcd 	bl	800e9e2 <osMutexAcquire>
    OD_InputVoltage = value;
 8004a48:	4a06      	ldr	r2, [pc, #24]	; (8004a64 <_Z19OD_InputVoltage_setf+0x34>)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 8004a4e:	4b04      	ldr	r3, [pc, #16]	; (8004a60 <_Z19OD_InputVoltage_setf+0x30>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f00a f810 	bl	800ea78 <osMutexRelease>
}
 8004a58:	bf00      	nop
 8004a5a:	3708      	adds	r7, #8
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	2000083c 	.word	0x2000083c
 8004a64:	200007bc 	.word	0x200007bc

08004a68 <_Z14OD_runtime_getv>:
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <_Z14OD_runtime_getv+0x30>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f04f 31ff 	mov.w	r1, #4294967295
 8004a76:	4618      	mov	r0, r3
 8004a78:	f009 ffb3 	bl	800e9e2 <osMutexAcquire>
    uint32_t value = OD_runtime;
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <_Z14OD_runtime_getv+0x34>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <_Z14OD_runtime_getv+0x30>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4618      	mov	r0, r3
 8004a88:	f009 fff6 	bl	800ea78 <osMutexRelease>
    return value;
 8004a8c:	687b      	ldr	r3, [r7, #4]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000840 	.word	0x20000840
 8004a9c:	200007c0 	.word	0x200007c0

08004aa0 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	; (8004ad0 <_Z12OD_SdcIn_getv+0x30>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f04f 31ff 	mov.w	r1, #4294967295
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f009 ff97 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <_Z12OD_SdcIn_getv+0x34>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 8004aba:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <_Z12OD_SdcIn_getv+0x30>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f009 ffda 	bl	800ea78 <osMutexRelease>
    return value;
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000844 	.word	0x20000844
 8004ad4:	200007c4 	.word	0x200007c4

08004ad8 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8004ade:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <_Z13OD_SdcOut_getv+0x30>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f009 ff7b 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8004aec:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <_Z13OD_SdcOut_getv+0x34>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 8004af2:	4b05      	ldr	r3, [pc, #20]	; (8004b08 <_Z13OD_SdcOut_getv+0x30>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f009 ffbe 	bl	800ea78 <osMutexRelease>
    return value;
 8004afc:	79fb      	ldrb	r3, [r7, #7]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	20000848 	.word	0x20000848
 8004b0c:	200007c5 	.word	0x200007c5

08004b10 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 8004b16:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <_Z15OD_ChipUID1_getv+0x38>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f009 ff5f 	bl	800e9e2 <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <_Z15OD_ChipUID1_getv+0x3c>)
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <_Z15OD_ChipUID1_getv+0x38>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f009 ffa0 	bl	800ea78 <osMutexRelease>
    return value;
 8004b38:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b3c:	4610      	mov	r0, r2
 8004b3e:	4619      	mov	r1, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	2000084c 	.word	0x2000084c
 8004b4c:	200007c8 	.word	0x200007c8

08004b50 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 8004b56:	4b0c      	ldr	r3, [pc, #48]	; (8004b88 <_Z15OD_ChipUID2_getv+0x38>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f009 ff3f 	bl	800e9e2 <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 8004b64:	4b09      	ldr	r3, [pc, #36]	; (8004b8c <_Z15OD_ChipUID2_getv+0x3c>)
 8004b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6a:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <_Z15OD_ChipUID2_getv+0x38>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f009 ff80 	bl	800ea78 <osMutexRelease>
    return value;
 8004b78:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000850 	.word	0x20000850
 8004b8c:	200007d0 	.word	0x200007d0

08004b90 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b082      	sub	sp, #8
 8004b94:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 8004b96:	4b0a      	ldr	r3, [pc, #40]	; (8004bc0 <_Z16OD_BuildDate_getv+0x30>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f009 ff1f 	bl	800e9e2 <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 8004ba4:	4b07      	ldr	r3, [pc, #28]	; (8004bc4 <_Z16OD_BuildDate_getv+0x34>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8004baa:	4b05      	ldr	r3, [pc, #20]	; (8004bc0 <_Z16OD_BuildDate_getv+0x30>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f009 ff62 	bl	800ea78 <osMutexRelease>
    return value;
 8004bb4:	687b      	ldr	r3, [r7, #4]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	20000854 	.word	0x20000854
 8004bc4:	200007d8 	.word	0x200007d8

08004bc8 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 8004bce:	4b0a      	ldr	r3, [pc, #40]	; (8004bf8 <_Z16OD_BuildTime_getv+0x30>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f04f 31ff 	mov.w	r1, #4294967295
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f009 ff03 	bl	800e9e2 <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8004bdc:	4b07      	ldr	r3, [pc, #28]	; (8004bfc <_Z16OD_BuildTime_getv+0x34>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 8004be2:	4b05      	ldr	r3, [pc, #20]	; (8004bf8 <_Z16OD_BuildTime_getv+0x30>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f009 ff46 	bl	800ea78 <osMutexRelease>
    return value;
 8004bec:	687b      	ldr	r3, [r7, #4]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000858 	.word	0x20000858
 8004bfc:	200007dc 	.word	0x200007dc

08004c00 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 8004c06:	4b0a      	ldr	r3, [pc, #40]	; (8004c30 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f009 fee7 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 8004c14:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8004c1a:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f009 ff2a 	bl	800ea78 <osMutexRelease>
    return value;
 8004c24:	79fb      	ldrb	r3, [r7, #7]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	2000085c 	.word	0x2000085c
 8004c34:	200007e0 	.word	0x200007e0

08004c38 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8004c3e:	4b0a      	ldr	r3, [pc, #40]	; (8004c68 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f04f 31ff 	mov.w	r1, #4294967295
 8004c46:	4618      	mov	r0, r3
 8004c48:	f009 fecb 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8004c4c:	4b07      	ldr	r3, [pc, #28]	; (8004c6c <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 8004c52:	4b05      	ldr	r3, [pc, #20]	; (8004c68 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4618      	mov	r0, r3
 8004c58:	f009 ff0e 	bl	800ea78 <osMutexRelease>
    return value;
 8004c5c:	79fb      	ldrb	r3, [r7, #7]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3708      	adds	r7, #8
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000860 	.word	0x20000860
 8004c6c:	200007e1 	.word	0x200007e1

08004c70 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 8004c76:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f009 feaf 	bl	800e9e2 <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 8004c8a:	4b05      	ldr	r3, [pc, #20]	; (8004ca0 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f009 fef2 	bl	800ea78 <osMutexRelease>
    return value;
 8004c94:	687b      	ldr	r3, [r7, #4]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000864 	.word	0x20000864
 8004ca4:	200007e4 	.word	0x200007e4

08004ca8 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8004cae:	4b0a      	ldr	r3, [pc, #40]	; (8004cd8 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f04f 31ff 	mov.w	r1, #4294967295
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f009 fe93 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 8004cbc:	4b07      	ldr	r3, [pc, #28]	; (8004cdc <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8004cc2:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f009 fed6 	bl	800ea78 <osMutexRelease>
    return value;
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000868 	.word	0x20000868
 8004cdc:	20000006 	.word	0x20000006

08004ce0 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b082      	sub	sp, #8
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f04f 31ff 	mov.w	r1, #4294967295
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f009 fe75 	bl	800e9e2 <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 8004cf8:	4a06      	ldr	r2, [pc, #24]	; (8004d14 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 8004cfa:	79fb      	ldrb	r3, [r7, #7]
 8004cfc:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8004cfe:	4b04      	ldr	r3, [pc, #16]	; (8004d10 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f009 feb8 	bl	800ea78 <osMutexRelease>
}
 8004d08:	bf00      	nop
 8004d0a:	3708      	adds	r7, #8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000868 	.word	0x20000868
 8004d14:	20000006 	.word	0x20000006

08004d18 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8004d1e:	4b0a      	ldr	r3, [pc, #40]	; (8004d48 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f04f 31ff 	mov.w	r1, #4294967295
 8004d26:	4618      	mov	r0, r3
 8004d28:	f009 fe5b 	bl	800e9e2 <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8004d2c:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8004d2e:	881b      	ldrh	r3, [r3, #0]
 8004d30:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8004d32:	4b05      	ldr	r3, [pc, #20]	; (8004d48 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4618      	mov	r0, r3
 8004d38:	f009 fe9e 	bl	800ea78 <osMutexRelease>
    return value;
 8004d3c:	88fb      	ldrh	r3, [r7, #6]
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	2000086c 	.word	0x2000086c
 8004d4c:	20000008 	.word	0x20000008

08004d50 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	4603      	mov	r3, r0
 8004d58:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8004d5a:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f04f 31ff 	mov.w	r1, #4294967295
 8004d62:	4618      	mov	r0, r3
 8004d64:	f009 fe3d 	bl	800e9e2 <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8004d68:	4a06      	ldr	r2, [pc, #24]	; (8004d84 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8004d6a:	88fb      	ldrh	r3, [r7, #6]
 8004d6c:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8004d6e:	4b04      	ldr	r3, [pc, #16]	; (8004d80 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f009 fe80 	bl	800ea78 <osMutexRelease>
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	2000086c 	.word	0x2000086c
 8004d84:	20000008 	.word	0x20000008

08004d88 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <_Z18OD_CAN1_Status_getv+0x30>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f04f 31ff 	mov.w	r1, #4294967295
 8004d96:	4618      	mov	r0, r3
 8004d98:	f009 fe23 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8004d9c:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <_Z18OD_CAN1_Status_getv+0x34>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <_Z18OD_CAN1_Status_getv+0x30>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f009 fe66 	bl	800ea78 <osMutexRelease>
    return value;
 8004dac:	79fb      	ldrb	r3, [r7, #7]
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	20000870 	.word	0x20000870
 8004dbc:	200007e8 	.word	0x200007e8

08004dc0 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f04f 31ff 	mov.w	r1, #4294967295
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f009 fe07 	bl	800e9e2 <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 8004dd4:	4b07      	ldr	r3, [pc, #28]	; (8004df4 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 8004dda:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f009 fe4a 	bl	800ea78 <osMutexRelease>
    return value;
 8004de4:	687b      	ldr	r3, [r7, #4]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000874 	.word	0x20000874
 8004df4:	200007ec 	.word	0x200007ec

08004df8 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	; (8004e28 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f04f 31ff 	mov.w	r1, #4294967295
 8004e06:	4618      	mov	r0, r3
 8004e08:	f009 fdeb 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8004e0c:	4b07      	ldr	r3, [pc, #28]	; (8004e2c <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 8004e12:	4b05      	ldr	r3, [pc, #20]	; (8004e28 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f009 fe2e 	bl	800ea78 <osMutexRelease>
    return value;
 8004e1c:	79fb      	ldrb	r3, [r7, #7]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	20000878 	.word	0x20000878
 8004e2c:	200007f0 	.word	0x200007f0

08004e30 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 8004e36:	4b0a      	ldr	r3, [pc, #40]	; (8004e60 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f009 fdcf 	bl	800e9e2 <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 8004e44:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8004e4a:	4b05      	ldr	r3, [pc, #20]	; (8004e60 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f009 fe12 	bl	800ea78 <osMutexRelease>
    return value;
 8004e54:	687b      	ldr	r3, [r7, #4]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	2000087c 	.word	0x2000087c
 8004e64:	200007f4 	.word	0x200007f4

08004e68 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8004e6e:	4b0a      	ldr	r3, [pc, #40]	; (8004e98 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f04f 31ff 	mov.w	r1, #4294967295
 8004e76:	4618      	mov	r0, r3
 8004e78:	f009 fdb3 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8004e7c:	4b07      	ldr	r3, [pc, #28]	; (8004e9c <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f009 fdf6 	bl	800ea78 <osMutexRelease>
    return value;
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000880 	.word	0x20000880
 8004e9c:	200007f8 	.word	0x200007f8

08004ea0 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 8004ea6:	4b0a      	ldr	r3, [pc, #40]	; (8004ed0 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f009 fd97 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 8004eb4:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 8004eba:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f009 fdda 	bl	800ea78 <osMutexRelease>
    return value;
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	20000884 	.word	0x20000884
 8004ed4:	200007f9 	.word	0x200007f9

08004ed8 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 8004ede:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f009 fd7b 	bl	800e9e2 <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8004eec:	4b07      	ldr	r3, [pc, #28]	; (8004f0c <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f009 fdbe 	bl	800ea78 <osMutexRelease>
    return value;
 8004efc:	687b      	ldr	r3, [r7, #4]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	20000888 	.word	0x20000888
 8004f0c:	200007fc 	.word	0x200007fc

08004f10 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8004f16:	4b0a      	ldr	r3, [pc, #40]	; (8004f40 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f009 fd5f 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 8004f24:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8004f2a:	4b05      	ldr	r3, [pc, #20]	; (8004f40 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f009 fda2 	bl	800ea78 <osMutexRelease>
    return value;
 8004f34:	79fb      	ldrb	r3, [r7, #7]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000088c 	.word	0x2000088c
 8004f44:	2000000a 	.word	0x2000000a

08004f48 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8004f52:	4b09      	ldr	r3, [pc, #36]	; (8004f78 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f04f 31ff 	mov.w	r1, #4294967295
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f009 fd41 	bl	800e9e2 <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 8004f60:	4a06      	ldr	r2, [pc, #24]	; (8004f7c <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f009 fd84 	bl	800ea78 <osMutexRelease>
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	2000088c 	.word	0x2000088c
 8004f7c:	2000000a 	.word	0x2000000a

08004f80 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8004f86:	4b0a      	ldr	r3, [pc, #40]	; (8004fb0 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f009 fd27 	bl	800e9e2 <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8004f94:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 8004f96:	881b      	ldrh	r3, [r3, #0]
 8004f98:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f009 fd6a 	bl	800ea78 <osMutexRelease>
    return value;
 8004fa4:	88fb      	ldrh	r3, [r7, #6]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20000890 	.word	0x20000890
 8004fb4:	2000000c 	.word	0x2000000c

08004fb8 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8004fc2:	4b09      	ldr	r3, [pc, #36]	; (8004fe8 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f04f 31ff 	mov.w	r1, #4294967295
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f009 fd09 	bl	800e9e2 <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 8004fd0:	4a06      	ldr	r2, [pc, #24]	; (8004fec <_Z20OD_CAN2_Baudrate_sett+0x34>)
 8004fd2:	88fb      	ldrh	r3, [r7, #6]
 8004fd4:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8004fd6:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f009 fd4c 	bl	800ea78 <osMutexRelease>
}
 8004fe0:	bf00      	nop
 8004fe2:	3708      	adds	r7, #8
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20000890 	.word	0x20000890
 8004fec:	2000000c 	.word	0x2000000c

08004ff0 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <_Z18OD_CAN2_Status_getv+0x30>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f04f 31ff 	mov.w	r1, #4294967295
 8004ffe:	4618      	mov	r0, r3
 8005000:	f009 fcef 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8005004:	4b07      	ldr	r3, [pc, #28]	; (8005024 <_Z18OD_CAN2_Status_getv+0x34>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <_Z18OD_CAN2_Status_getv+0x30>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4618      	mov	r0, r3
 8005010:	f009 fd32 	bl	800ea78 <osMutexRelease>
    return value;
 8005014:	79fb      	ldrb	r3, [r7, #7]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	20000894 	.word	0x20000894
 8005024:	20000800 	.word	0x20000800

08005028 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f04f 31ff 	mov.w	r1, #4294967295
 8005036:	4618      	mov	r0, r3
 8005038:	f009 fcd3 	bl	800e9e2 <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 800503c:	4b07      	ldr	r3, [pc, #28]	; (800505c <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 8005042:	4b05      	ldr	r3, [pc, #20]	; (8005058 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4618      	mov	r0, r3
 8005048:	f009 fd16 	bl	800ea78 <osMutexRelease>
    return value;
 800504c:	687b      	ldr	r3, [r7, #4]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20000898 	.word	0x20000898
 800505c:	20000804 	.word	0x20000804

08005060 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 8005066:	4b0a      	ldr	r3, [pc, #40]	; (8005090 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f04f 31ff 	mov.w	r1, #4294967295
 800506e:	4618      	mov	r0, r3
 8005070:	f009 fcb7 	bl	800e9e2 <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 8005074:	4b07      	ldr	r3, [pc, #28]	; (8005094 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 800507a:	4b05      	ldr	r3, [pc, #20]	; (8005090 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f009 fcfa 	bl	800ea78 <osMutexRelease>
    return value;
 8005084:	79fb      	ldrb	r3, [r7, #7]
}
 8005086:	4618      	mov	r0, r3
 8005088:	3708      	adds	r7, #8
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	2000089c 	.word	0x2000089c
 8005094:	20000808 	.word	0x20000808

08005098 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 8005098:	b580      	push	{r7, lr}
 800509a:	b082      	sub	sp, #8
 800509c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 800509e:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f04f 31ff 	mov.w	r1, #4294967295
 80050a6:	4618      	mov	r0, r3
 80050a8:	f009 fc9b 	bl	800e9e2 <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 80050ac:	4b07      	ldr	r3, [pc, #28]	; (80050cc <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4618      	mov	r0, r3
 80050b8:	f009 fcde 	bl	800ea78 <osMutexRelease>
    return value;
 80050bc:	687b      	ldr	r3, [r7, #4]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200008a0 	.word	0x200008a0
 80050cc:	2000080c 	.word	0x2000080c

080050d0 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f103 0208 	add.w	r2, r3, #8
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	3310      	adds	r3, #16
 80050e2:	4619      	mov	r1, r3
 80050e4:	4610      	mov	r0, r2
 80050e6:	f7fd f9d1 	bl	800248c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80050ea:	4603      	mov	r3, r0
        }
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	460b      	mov	r3, r1
 80050fe:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f103 0008 	add.w	r0, r3, #8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f103 0110 	add.w	r1, r3, #16
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	1d1a      	adds	r2, r3, #4
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	f7fe fafb 	bl	800370c <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>
        }
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800511e:	b580      	push	{r7, lr}
 8005120:	b082      	sub	sp, #8
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
 8005126:	460b      	mov	r3, r1
 8005128:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f103 0008 	add.w	r0, r3, #8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f103 0110 	add.w	r1, r3, #16
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	1d1a      	adds	r2, r3, #4
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	f7fe fab3 	bl	80036a6 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>
        }
 8005140:	bf00      	nop
 8005142:	3708      	adds	r7, #8
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	460b      	mov	r3, r1
 8005152:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f103 0008 	add.w	r0, r3, #8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f103 0110 	add.w	r1, r3, #16
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	1d1a      	adds	r2, r3, #4
 8005164:	887b      	ldrh	r3, [r7, #2]
 8005166:	f7fe fa70 	bl	800364a <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>
        }
 800516a:	bf00      	nop
 800516c:	3708      	adds	r7, #8
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005172:	b580      	push	{r7, lr}
 8005174:	b082      	sub	sp, #8
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	460b      	mov	r3, r1
 800517c:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f103 0008 	add.w	r0, r3, #8
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f103 0110 	add.w	r1, r3, #16
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	1d1a      	adds	r2, r3, #4
 800518e:	887b      	ldrh	r3, [r7, #2]
 8005190:	f7fe fa2d 	bl	80035ee <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>
        }
 8005194:	bf00      	nop
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f103 0008 	add.w	r0, r3, #8
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f103 0110 	add.w	r1, r3, #16
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	887b      	ldrh	r3, [r7, #2]
 80051ba:	f7fe f9ea 	bl	8003592 <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>
        }
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	460b      	mov	r3, r1
 80051d0:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f103 0008 	add.w	r0, r3, #8
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f103 0110 	add.w	r1, r3, #16
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	1d1a      	adds	r2, r3, #4
 80051e2:	887b      	ldrh	r3, [r7, #2]
 80051e4:	f7fe f983 	bl	80034ee <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>
        }
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f103 0008 	add.w	r0, r3, #8
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f103 0110 	add.w	r1, r3, #16
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	1d1a      	adds	r2, r3, #4
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	f7fe f917 	bl	8003440 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	460b      	mov	r3, r1
 8005224:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f103 0008 	add.w	r0, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f103 0110 	add.w	r1, r3, #16
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	1d1a      	adds	r2, r3, #4
 8005236:	887b      	ldrh	r3, [r7, #2]
 8005238:	f7fe f8b0 	bl	800339c <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 800523c:	bf00      	nop
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f103 0008 	add.w	r0, r3, #8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f103 0110 	add.w	r1, r3, #16
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3304      	adds	r3, #4
 8005260:	ed97 0a00 	vldr	s0, [r7]
 8005264:	461a      	mov	r2, r3
 8005266:	f7fe f83b 	bl	80032e0 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>
        }
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f103 0008 	add.w	r0, r3, #8
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f103 0110 	add.w	r1, r3, #16
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	1d1a      	adds	r2, r3, #4
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	f7fd ffef 	bl	8003270 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>
        }
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800529a:	b580      	push	{r7, lr}
 800529c:	b082      	sub	sp, #8
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
 80052a2:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f103 0008 	add.w	r0, r3, #8
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f103 0110 	add.w	r1, r3, #16
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3304      	adds	r3, #4
 80052b6:	ed97 0a00 	vldr	s0, [r7]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f7fd ff76 	bl	80031ac <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>
        }
 80052c0:	bf00      	nop
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f103 0008 	add.w	r0, r3, #8
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f103 0110 	add.w	r1, r3, #16
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	3304      	adds	r3, #4
 80052e4:	ed97 0a00 	vldr	s0, [r7]
 80052e8:	461a      	mov	r2, r3
 80052ea:	f7fd ff05 	bl	80030f8 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>
        }
 80052ee:	bf00      	nop
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f103 0008 	add.w	r0, r3, #8
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f103 0110 	add.w	r1, r3, #16
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	1d1a      	adds	r2, r3, #4
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	f7fd feb7 	bl	8003084 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>
        }
 8005316:	bf00      	nop
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f103 0008 	add.w	r0, r3, #8
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f103 0110 	add.w	r1, r3, #16
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	1d1a      	adds	r2, r3, #4
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	f7fd fe6e 	bl	800301c <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>
        }
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f103 0008 	add.w	r0, r3, #8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f103 0110 	add.w	r1, r3, #16
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	1d1a      	adds	r2, r3, #4
 8005364:	78fb      	ldrb	r3, [r7, #3]
 8005366:	f7fd fe25 	bl	8002fb4 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>
        }
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005372:	b590      	push	{r4, r7, lr}
 8005374:	b087      	sub	sp, #28
 8005376:	af02      	add	r7, sp, #8
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f103 0008 	add.w	r0, r3, #8
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f103 0110 	add.w	r1, r3, #16
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1d1c      	adds	r4, r3, #4
 800538e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005392:	e9cd 2300 	strd	r2, r3, [sp]
 8005396:	4622      	mov	r2, r4
 8005398:	f7fd fdd3 	bl	8002f42 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>
        }
 800539c:	bf00      	nop
 800539e:	3714      	adds	r7, #20
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd90      	pop	{r4, r7, pc}

080053a4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80053a4:	b590      	push	{r4, r7, lr}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af02      	add	r7, sp, #8
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f103 0008 	add.w	r0, r3, #8
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f103 0110 	add.w	r1, r3, #16
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1d1c      	adds	r4, r3, #4
 80053c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c4:	e9cd 2300 	strd	r2, r3, [sp]
 80053c8:	4622      	mov	r2, r4
 80053ca:	f7fd fd81 	bl	8002ed0 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>
        }
 80053ce:	bf00      	nop
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd90      	pop	{r4, r7, pc}

080053d6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b082      	sub	sp, #8
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
 80053de:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f103 0008 	add.w	r0, r3, #8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f103 0110 	add.w	r1, r3, #16
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	1d1a      	adds	r2, r3, #4
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f7fd fd35 	bl	8002e60 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>
        }
 80053f6:	bf00      	nop
 80053f8:	3708      	adds	r7, #8
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}

080053fe <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f103 0008 	add.w	r0, r3, #8
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f103 0110 	add.w	r1, r3, #16
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	1d1a      	adds	r2, r3, #4
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f7fd fce7 	bl	8002dec <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>
        }
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005426:	b580      	push	{r7, lr}
 8005428:	b082      	sub	sp, #8
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	460b      	mov	r3, r1
 8005430:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f103 0008 	add.w	r0, r3, #8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f103 0110 	add.w	r1, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	1d1a      	adds	r2, r3, #4
 8005442:	78fb      	ldrb	r3, [r7, #3]
 8005444:	f7fd fc9e 	bl	8002d84 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 8005448:	bf00      	nop
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f103 0008 	add.w	r0, r3, #8
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f103 0110 	add.w	r1, r3, #16
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	1d1a      	adds	r2, r3, #4
 800546c:	78fb      	ldrb	r3, [r7, #3]
 800546e:	f7fd fc55 	bl	8002d1c <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f103 0008 	add.w	r0, r3, #8
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f103 0110 	add.w	r1, r3, #16
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	1d1a      	adds	r2, r3, #4
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	f7fd fc09 	bl	8002cac <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 800549a:	bf00      	nop
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	460b      	mov	r3, r1
 80054ac:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f103 0008 	add.w	r0, r3, #8
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f103 0110 	add.w	r1, r3, #16
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	1d1a      	adds	r2, r3, #4
 80054be:	78fb      	ldrb	r3, [r7, #3]
 80054c0:	f7fd fb98 	bl	8002bf4 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 80054c4:	bf00      	nop
 80054c6:	3708      	adds	r7, #8
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f103 0008 	add.w	r0, r3, #8
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f103 0110 	add.w	r1, r3, #16
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	1d1a      	adds	r2, r3, #4
 80054e8:	887b      	ldrh	r3, [r7, #2]
 80054ea:	f7fd fb21 	bl	8002b30 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 80054ee:	bf00      	nop
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}

080054f6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80054f6:	b580      	push	{r7, lr}
 80054f8:	b082      	sub	sp, #8
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	460b      	mov	r3, r1
 8005500:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f103 0008 	add.w	r0, r3, #8
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f103 0110 	add.w	r1, r3, #16
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	1d1a      	adds	r2, r3, #4
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	f7fd fad8 	bl	8002ac8 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>
        }
 8005518:	bf00      	nop
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f103 0008 	add.w	r0, r3, #8
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f103 0110 	add.w	r1, r3, #16
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	1d1a      	adds	r2, r3, #4
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	f7fd fa8a 	bl	8002a54 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	460b      	mov	r3, r1
 8005552:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f103 0008 	add.w	r0, r3, #8
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f103 0110 	add.w	r1, r3, #16
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	1d1a      	adds	r2, r3, #4
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	f7fd fa41 	bl	80029ec <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005572:	b580      	push	{r7, lr}
 8005574:	b082      	sub	sp, #8
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f103 0008 	add.w	r0, r3, #8
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f103 0110 	add.w	r1, r3, #16
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	1d1a      	adds	r2, r3, #4
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	f7fd f9f3 	bl	8002978 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8005592:	bf00      	nop
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800559a:	b580      	push	{r7, lr}
 800559c:	b082      	sub	sp, #8
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	460b      	mov	r3, r1
 80055a4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f103 0008 	add.w	r0, r3, #8
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f103 0110 	add.w	r1, r3, #16
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	1d1a      	adds	r2, r3, #4
 80055b6:	78fb      	ldrb	r3, [r7, #3]
 80055b8:	f7fd f9aa 	bl	8002910 <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	460b      	mov	r3, r1
 80055ce:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f103 0008 	add.w	r0, r3, #8
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f103 0110 	add.w	r1, r3, #16
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	1d1a      	adds	r2, r3, #4
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	f7fd f961 	bl	80028a8 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 80055e6:	bf00      	nop
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f103 0008 	add.w	r0, r3, #8
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f103 0110 	add.w	r1, r3, #16
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	1d1a      	adds	r2, r3, #4
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	f7fd f915 	bl	8002838 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005616:	b580      	push	{r7, lr}
 8005618:	b082      	sub	sp, #8
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
 800561e:	460b      	mov	r3, r1
 8005620:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f103 0008 	add.w	r0, r3, #8
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f103 0110 	add.w	r1, r3, #16
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	1d1a      	adds	r2, r3, #4
 8005632:	78fb      	ldrb	r3, [r7, #3]
 8005634:	f7fd f8a5 	bl	8002782 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8005638:	bf00      	nop
 800563a:	3708      	adds	r7, #8
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	460b      	mov	r3, r1
 800564a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f103 0008 	add.w	r0, r3, #8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f103 0110 	add.w	r1, r3, #16
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	1d1a      	adds	r2, r3, #4
 800565c:	887b      	ldrh	r3, [r7, #2]
 800565e:	f7fd f82e 	bl	80026be <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8005662:	bf00      	nop
 8005664:	3708      	adds	r7, #8
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800566a:	b580      	push	{r7, lr}
 800566c:	b082      	sub	sp, #8
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f103 0008 	add.w	r0, r3, #8
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f103 0110 	add.w	r1, r3, #16
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	1d1a      	adds	r2, r3, #4
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	f7fc ffe5 	bl	8002656 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>
        }
 800568c:	bf00      	nop
 800568e:	3708      	adds	r7, #8
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f103 0008 	add.w	r0, r3, #8
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f103 0110 	add.w	r1, r3, #16
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	1d1a      	adds	r2, r3, #4
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	f7fc ff97 	bl	80025e2 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 80056b4:	bf00      	nop
 80056b6:	3708      	adds	r7, #8
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	460b      	mov	r3, r1
 80056c6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f103 0008 	add.w	r0, r3, #8
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f103 0110 	add.w	r1, r3, #16
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	1d1a      	adds	r2, r3, #4
 80056d8:	78fb      	ldrb	r3, [r7, #3]
 80056da:	f7fc ff4e 	bl	800257a <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 80056de:	bf00      	nop
 80056e0:	3708      	adds	r7, #8
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f103 0008 	add.w	r0, r3, #8
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f103 0110 	add.w	r1, r3, #16
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	1d1a      	adds	r2, r3, #4
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	f7fc ff00 	bl	8002506 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8005706:	bf00      	nop
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	460b      	mov	r3, r1
 8005718:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f103 0008 	add.w	r0, r3, #8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f103 0110 	add.w	r1, r3, #16
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	1d1a      	adds	r2, r3, #4
 800572a:	887b      	ldrh	r3, [r7, #2]
 800572c:	f7fc fe86 	bl	800243c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
        }
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}

08005738 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f103 0008 	add.w	r0, r3, #8
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f103 0110 	add.w	r1, r3, #16
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	1d1a      	adds	r2, r3, #4
 8005754:	78fb      	ldrb	r3, [r7, #3]
 8005756:	f7fc feac 	bl	80024b2 <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>
        }
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f103 0208 	add.w	r2, r3, #8
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	3310      	adds	r3, #16
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f7fc fe88 	bl	800248c <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800577c:	4603      	mov	r3, r0
        }
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f103 0208 	add.w	r2, r3, #8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	3310      	adds	r3, #16
 8005798:	4619      	mov	r1, r3
 800579a:	4610      	mov	r0, r2
 800579c:	f7fd fed5 	bl	800354a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>
 80057a0:	4603      	mov	r3, r0
        }
 80057a2:	4618      	mov	r0, r3
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f103 0208 	add.w	r2, r3, #8
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	3310      	adds	r3, #16
 80057bc:	4619      	mov	r1, r3
 80057be:	4610      	mov	r0, r2
 80057c0:	f7fd fe71 	bl	80034a6 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>
 80057c4:	4603      	mov	r3, r0
        }
 80057c6:	4618      	mov	r0, r3
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b082      	sub	sp, #8
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f103 0208 	add.w	r2, r3, #8
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3310      	adds	r3, #16
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f7fd fe08 	bl	80033f8 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>
 80057e8:	4603      	mov	r3, r0
        }
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b082      	sub	sp, #8
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f103 0208 	add.w	r2, r3, #8
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	3310      	adds	r3, #16
 8005804:	4619      	mov	r1, r3
 8005806:	4610      	mov	r0, r2
 8005808:	f7fd fa28 	bl	8002c5c <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>
 800580c:	4603      	mov	r3, r0
        }
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005816:	b580      	push	{r7, lr}
 8005818:	b082      	sub	sp, #8
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f103 0208 	add.w	r2, r3, #8
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3310      	adds	r3, #16
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fd f9bb 	bl	8002ba6 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>
 8005830:	4603      	mov	r3, r0
        }
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800583a:	b580      	push	{r7, lr}
 800583c:	b082      	sub	sp, #8
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f103 0208 	add.w	r2, r3, #8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3310      	adds	r3, #16
 800584c:	4619      	mov	r1, r3
 800584e:	4610      	mov	r0, r2
 8005850:	f7fc ffcb 	bl	80027ea <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>
 8005854:	4603      	mov	r3, r0
        }
 8005856:	4618      	mov	r0, r3
 8005858:	3708      	adds	r7, #8
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}

0800585e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800585e:	b580      	push	{r7, lr}
 8005860:	b082      	sub	sp, #8
 8005862:	af00      	add	r7, sp, #0
 8005864:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f103 0208 	add.w	r2, r3, #8
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	3310      	adds	r3, #16
 8005870:	4619      	mov	r1, r3
 8005872:	4610      	mov	r0, r2
 8005874:	f7fc ff5e 	bl	8002734 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>
 8005878:	4603      	mov	r3, r0
        }
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b01      	cmp	r3, #1
 8005892:	f040 80e4 	bne.w	8005a5e <_Z41__static_initialization_and_destruction_0ii+0x1da>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800589c:	4293      	cmp	r3, r2
 800589e:	f040 80de 	bne.w	8005a5e <_Z41__static_initialization_and_destruction_0ii+0x1da>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 80058a2:	2000      	movs	r0, #0
 80058a4:	f009 f817 	bl	800e8d6 <osMutexNew>
 80058a8:	4603      	mov	r3, r0
 80058aa:	4a6f      	ldr	r2, [pc, #444]	; (8005a68 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 80058ac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 80058ae:	2000      	movs	r0, #0
 80058b0:	f009 f811 	bl	800e8d6 <osMutexNew>
 80058b4:	4603      	mov	r3, r0
 80058b6:	4a6d      	ldr	r2, [pc, #436]	; (8005a6c <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 80058b8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 80058ba:	2000      	movs	r0, #0
 80058bc:	f009 f80b 	bl	800e8d6 <osMutexNew>
 80058c0:	4603      	mov	r3, r0
 80058c2:	4a6b      	ldr	r2, [pc, #428]	; (8005a70 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 80058c4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 80058c6:	2000      	movs	r0, #0
 80058c8:	f009 f805 	bl	800e8d6 <osMutexNew>
 80058cc:	4603      	mov	r3, r0
 80058ce:	4a69      	ldr	r2, [pc, #420]	; (8005a74 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 80058d0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 80058d2:	2000      	movs	r0, #0
 80058d4:	f008 ffff 	bl	800e8d6 <osMutexNew>
 80058d8:	4603      	mov	r3, r0
 80058da:	4a67      	ldr	r2, [pc, #412]	; (8005a78 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80058dc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 80058de:	2000      	movs	r0, #0
 80058e0:	f008 fff9 	bl	800e8d6 <osMutexNew>
 80058e4:	4603      	mov	r3, r0
 80058e6:	4a65      	ldr	r2, [pc, #404]	; (8005a7c <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80058e8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 80058ea:	2000      	movs	r0, #0
 80058ec:	f008 fff3 	bl	800e8d6 <osMutexNew>
 80058f0:	4603      	mov	r3, r0
 80058f2:	4a63      	ldr	r2, [pc, #396]	; (8005a80 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80058f4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 80058f6:	2000      	movs	r0, #0
 80058f8:	f008 ffed 	bl	800e8d6 <osMutexNew>
 80058fc:	4603      	mov	r3, r0
 80058fe:	4a61      	ldr	r2, [pc, #388]	; (8005a84 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8005900:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 8005902:	2000      	movs	r0, #0
 8005904:	f008 ffe7 	bl	800e8d6 <osMutexNew>
 8005908:	4603      	mov	r3, r0
 800590a:	4a5f      	ldr	r2, [pc, #380]	; (8005a88 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 800590c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 800590e:	2000      	movs	r0, #0
 8005910:	f008 ffe1 	bl	800e8d6 <osMutexNew>
 8005914:	4603      	mov	r3, r0
 8005916:	4a5d      	ldr	r2, [pc, #372]	; (8005a8c <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8005918:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 800591a:	2000      	movs	r0, #0
 800591c:	f008 ffdb 	bl	800e8d6 <osMutexNew>
 8005920:	4603      	mov	r3, r0
 8005922:	4a5b      	ldr	r2, [pc, #364]	; (8005a90 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8005924:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 8005926:	2000      	movs	r0, #0
 8005928:	f008 ffd5 	bl	800e8d6 <osMutexNew>
 800592c:	4603      	mov	r3, r0
 800592e:	4a59      	ldr	r2, [pc, #356]	; (8005a94 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8005930:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 8005932:	2000      	movs	r0, #0
 8005934:	f008 ffcf 	bl	800e8d6 <osMutexNew>
 8005938:	4603      	mov	r3, r0
 800593a:	4a57      	ldr	r2, [pc, #348]	; (8005a98 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 800593c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 800593e:	2000      	movs	r0, #0
 8005940:	f008 ffc9 	bl	800e8d6 <osMutexNew>
 8005944:	4603      	mov	r3, r0
 8005946:	4a55      	ldr	r2, [pc, #340]	; (8005a9c <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8005948:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 800594a:	2000      	movs	r0, #0
 800594c:	f008 ffc3 	bl	800e8d6 <osMutexNew>
 8005950:	4603      	mov	r3, r0
 8005952:	4a53      	ldr	r2, [pc, #332]	; (8005aa0 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8005954:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8005956:	2000      	movs	r0, #0
 8005958:	f008 ffbd 	bl	800e8d6 <osMutexNew>
 800595c:	4603      	mov	r3, r0
 800595e:	4a51      	ldr	r2, [pc, #324]	; (8005aa4 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8005960:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 8005962:	2000      	movs	r0, #0
 8005964:	f008 ffb7 	bl	800e8d6 <osMutexNew>
 8005968:	4603      	mov	r3, r0
 800596a:	4a4f      	ldr	r2, [pc, #316]	; (8005aa8 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 800596c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 800596e:	2000      	movs	r0, #0
 8005970:	f008 ffb1 	bl	800e8d6 <osMutexNew>
 8005974:	4603      	mov	r3, r0
 8005976:	4a4d      	ldr	r2, [pc, #308]	; (8005aac <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005978:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 800597a:	2000      	movs	r0, #0
 800597c:	f008 ffab 	bl	800e8d6 <osMutexNew>
 8005980:	4603      	mov	r3, r0
 8005982:	4a4b      	ldr	r2, [pc, #300]	; (8005ab0 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8005984:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8005986:	2000      	movs	r0, #0
 8005988:	f008 ffa5 	bl	800e8d6 <osMutexNew>
 800598c:	4603      	mov	r3, r0
 800598e:	4a49      	ldr	r2, [pc, #292]	; (8005ab4 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005990:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 8005992:	2000      	movs	r0, #0
 8005994:	f008 ff9f 	bl	800e8d6 <osMutexNew>
 8005998:	4603      	mov	r3, r0
 800599a:	4a47      	ldr	r2, [pc, #284]	; (8005ab8 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 800599c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 800599e:	2000      	movs	r0, #0
 80059a0:	f008 ff99 	bl	800e8d6 <osMutexNew>
 80059a4:	4603      	mov	r3, r0
 80059a6:	4a45      	ldr	r2, [pc, #276]	; (8005abc <_Z41__static_initialization_and_destruction_0ii+0x238>)
 80059a8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 80059aa:	2000      	movs	r0, #0
 80059ac:	f008 ff93 	bl	800e8d6 <osMutexNew>
 80059b0:	4603      	mov	r3, r0
 80059b2:	4a43      	ldr	r2, [pc, #268]	; (8005ac0 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 80059b4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 80059b6:	2000      	movs	r0, #0
 80059b8:	f008 ff8d 	bl	800e8d6 <osMutexNew>
 80059bc:	4603      	mov	r3, r0
 80059be:	4a41      	ldr	r2, [pc, #260]	; (8005ac4 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 80059c0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 80059c2:	2000      	movs	r0, #0
 80059c4:	f008 ff87 	bl	800e8d6 <osMutexNew>
 80059c8:	4603      	mov	r3, r0
 80059ca:	4a3f      	ldr	r2, [pc, #252]	; (8005ac8 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 80059cc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 80059ce:	2000      	movs	r0, #0
 80059d0:	f008 ff81 	bl	800e8d6 <osMutexNew>
 80059d4:	4603      	mov	r3, r0
 80059d6:	4a3d      	ldr	r2, [pc, #244]	; (8005acc <_Z41__static_initialization_and_destruction_0ii+0x248>)
 80059d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 80059da:	2000      	movs	r0, #0
 80059dc:	f008 ff7b 	bl	800e8d6 <osMutexNew>
 80059e0:	4603      	mov	r3, r0
 80059e2:	4a3b      	ldr	r2, [pc, #236]	; (8005ad0 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 80059e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 80059e6:	2000      	movs	r0, #0
 80059e8:	f008 ff75 	bl	800e8d6 <osMutexNew>
 80059ec:	4603      	mov	r3, r0
 80059ee:	4a39      	ldr	r2, [pc, #228]	; (8005ad4 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 80059f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 80059f2:	2000      	movs	r0, #0
 80059f4:	f008 ff6f 	bl	800e8d6 <osMutexNew>
 80059f8:	4603      	mov	r3, r0
 80059fa:	4a37      	ldr	r2, [pc, #220]	; (8005ad8 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 80059fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 80059fe:	2000      	movs	r0, #0
 8005a00:	f008 ff69 	bl	800e8d6 <osMutexNew>
 8005a04:	4603      	mov	r3, r0
 8005a06:	4a35      	ldr	r2, [pc, #212]	; (8005adc <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005a08:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8005a0a:	2000      	movs	r0, #0
 8005a0c:	f008 ff63 	bl	800e8d6 <osMutexNew>
 8005a10:	4603      	mov	r3, r0
 8005a12:	4a33      	ldr	r2, [pc, #204]	; (8005ae0 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005a14:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8005a16:	2000      	movs	r0, #0
 8005a18:	f008 ff5d 	bl	800e8d6 <osMutexNew>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	4a31      	ldr	r2, [pc, #196]	; (8005ae4 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005a20:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 8005a22:	2000      	movs	r0, #0
 8005a24:	f008 ff57 	bl	800e8d6 <osMutexNew>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	4a2f      	ldr	r2, [pc, #188]	; (8005ae8 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005a2c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8005a2e:	2000      	movs	r0, #0
 8005a30:	f008 ff51 	bl	800e8d6 <osMutexNew>
 8005a34:	4603      	mov	r3, r0
 8005a36:	4a2d      	ldr	r2, [pc, #180]	; (8005aec <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005a38:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8005a3a:	2000      	movs	r0, #0
 8005a3c:	f008 ff4b 	bl	800e8d6 <osMutexNew>
 8005a40:	4603      	mov	r3, r0
 8005a42:	4a2b      	ldr	r2, [pc, #172]	; (8005af0 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005a44:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8005a46:	2000      	movs	r0, #0
 8005a48:	f008 ff45 	bl	800e8d6 <osMutexNew>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	4a29      	ldr	r2, [pc, #164]	; (8005af4 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005a50:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8005a52:	2000      	movs	r0, #0
 8005a54:	f008 ff3f 	bl	800e8d6 <osMutexNew>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4a27      	ldr	r2, [pc, #156]	; (8005af8 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20000810 	.word	0x20000810
 8005a6c:	20000814 	.word	0x20000814
 8005a70:	20000818 	.word	0x20000818
 8005a74:	2000081c 	.word	0x2000081c
 8005a78:	20000820 	.word	0x20000820
 8005a7c:	20000824 	.word	0x20000824
 8005a80:	20000828 	.word	0x20000828
 8005a84:	2000082c 	.word	0x2000082c
 8005a88:	20000830 	.word	0x20000830
 8005a8c:	20000834 	.word	0x20000834
 8005a90:	20000838 	.word	0x20000838
 8005a94:	2000083c 	.word	0x2000083c
 8005a98:	20000840 	.word	0x20000840
 8005a9c:	20000844 	.word	0x20000844
 8005aa0:	20000848 	.word	0x20000848
 8005aa4:	2000084c 	.word	0x2000084c
 8005aa8:	20000850 	.word	0x20000850
 8005aac:	20000854 	.word	0x20000854
 8005ab0:	20000858 	.word	0x20000858
 8005ab4:	2000085c 	.word	0x2000085c
 8005ab8:	20000860 	.word	0x20000860
 8005abc:	20000864 	.word	0x20000864
 8005ac0:	20000868 	.word	0x20000868
 8005ac4:	2000086c 	.word	0x2000086c
 8005ac8:	20000870 	.word	0x20000870
 8005acc:	20000874 	.word	0x20000874
 8005ad0:	20000878 	.word	0x20000878
 8005ad4:	2000087c 	.word	0x2000087c
 8005ad8:	20000880 	.word	0x20000880
 8005adc:	20000884 	.word	0x20000884
 8005ae0:	20000888 	.word	0x20000888
 8005ae4:	2000088c 	.word	0x2000088c
 8005ae8:	20000890 	.word	0x20000890
 8005aec:	20000894 	.word	0x20000894
 8005af0:	20000898 	.word	0x20000898
 8005af4:	2000089c 	.word	0x2000089c
 8005af8:	200008a0 	.word	0x200008a0

08005afc <_GLOBAL__sub_I_OD_NodeID>:
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005b04:	2001      	movs	r0, #1
 8005b06:	f7ff febd 	bl	8005884 <_Z41__static_initialization_and_destruction_0ii>
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fb fc6c 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4618      	mov	r0, r3
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 8005b6a:	b5b0      	push	{r4, r5, r7, lr}
 8005b6c:	b082      	sub	sp, #8
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	240f      	movs	r4, #15
 8005b76:	461d      	mov	r5, r3
 8005b78:	2c00      	cmp	r4, #0
 8005b7a:	db05      	blt.n	8005b88 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f000 f8cb 	bl	8005d18 <_ZNSt8functionIFvtEEC1Ev>
 8005b82:	3510      	adds	r5, #16
 8005b84:	3c01      	subs	r4, #1
 8005b86:	e7f7      	b.n	8005b78 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4618      	mov	r0, r3
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bdb0      	pop	{r4, r5, r7, pc}

08005b9a <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 8005b9a:	b590      	push	{r4, r7, lr}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00a      	beq.n	8005bbe <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	429c      	cmp	r4, r3
 8005bb2:	d004      	beq.n	8005bbe <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8005bb4:	3c10      	subs	r4, #16
 8005bb6:	4620      	mov	r0, r4
 8005bb8:	f7ff ffca 	bl	8005b50 <_ZNSt8functionIFvtEED1Ev>
 8005bbc:	e7f7      	b.n	8005bae <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd90      	pop	{r4, r7, pc}

08005bc8 <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	4801      	ldr	r0, [pc, #4]	; (8005bd4 <__tcf_0+0xc>)
 8005bce:	f7ff ffe4 	bl	8005b9a <_ZN23GPIOExtiCallbackHandlerD1Ev>
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	200008a4 	.word	0x200008a4

08005bd8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 8005bdc:	4b12      	ldr	r3, [pc, #72]	; (8005c28 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f3bf 8f5b 	dmb	ish
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	bf0c      	ite	eq
 8005bee:	2301      	moveq	r3, #1
 8005bf0:	2300      	movne	r3, #0
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d013      	beq.n	8005c20 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8005bf8:	480b      	ldr	r0, [pc, #44]	; (8005c28 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8005bfa:	f00d f8b5 	bl	8012d68 <__cxa_guard_acquire>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf14      	ite	ne
 8005c04:	2301      	movne	r3, #1
 8005c06:	2300      	moveq	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d008      	beq.n	8005c20 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8005c0e:	4807      	ldr	r0, [pc, #28]	; (8005c2c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 8005c10:	f7ff ffab 	bl	8005b6a <_ZN23GPIOExtiCallbackHandlerC1Ev>
 8005c14:	4806      	ldr	r0, [pc, #24]	; (8005c30 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 8005c16:	f00d fb06 	bl	8013226 <atexit>
 8005c1a:	4803      	ldr	r0, [pc, #12]	; (8005c28 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8005c1c:	f00d f8b0 	bl	8012d80 <__cxa_guard_release>
		return instance;
 8005c20:	4b02      	ldr	r3, [pc, #8]	; (8005c2c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 8005c22:	4618      	mov	r0, r3
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	200009a8 	.word	0x200009a8
 8005c2c:	200008a4 	.word	0x200008a4
 8005c30:	08005bc9 	.word	0x08005bc9

08005c34 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>:
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fb fbfa 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4618      	mov	r0, r3
 8005c48:	3708      	adds	r7, #8
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>:
			m_listeners[i](htim);
		}
	}

private:
	TimPeriodElapsedCallbackHandler() = default;
 8005c4e:	b5b0      	push	{r4, r5, r7, lr}
 8005c50:	b082      	sub	sp, #8
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	240f      	movs	r4, #15
 8005c5a:	461d      	mov	r5, r3
 8005c5c:	2c00      	cmp	r4, #0
 8005c5e:	db05      	blt.n	8005c6c <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0x1e>
 8005c60:	4628      	mov	r0, r5
 8005c62:	f000 f866 	bl	8005d32 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>
 8005c66:	3510      	adds	r5, #16
 8005c68:	3c01      	subs	r4, #1
 8005c6a:	e7f7      	b.n	8005c5c <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0xe>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bdb0      	pop	{r4, r5, r7, pc}

08005c7e <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>:
class TimPeriodElapsedCallbackHandler {
 8005c7e:	b590      	push	{r4, r7, lr}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00a      	beq.n	8005ca2 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	429c      	cmp	r4, r3
 8005c96:	d004      	beq.n	8005ca2 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8005c98:	3c10      	subs	r4, #16
 8005c9a:	4620      	mov	r0, r4
 8005c9c:	f7ff ffca 	bl	8005c34 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
 8005ca0:	e7f7      	b.n	8005c92 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x14>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd90      	pop	{r4, r7, pc}

08005cac <__tcf_1>:
		static TimPeriodElapsedCallbackHandler instance;
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	4801      	ldr	r0, [pc, #4]	; (8005cb8 <__tcf_1+0xc>)
 8005cb2:	f7ff ffe4 	bl	8005c7e <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200009ac 	.word	0x200009ac

08005cbc <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>:
	static TimPeriodElapsedCallbackHandler& getInstance() {
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	af00      	add	r7, sp, #0
		static TimPeriodElapsedCallbackHandler instance;
 8005cc0:	4b12      	ldr	r3, [pc, #72]	; (8005d0c <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	f3bf 8f5b 	dmb	ish
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	bf0c      	ite	eq
 8005cd2:	2301      	moveq	r3, #1
 8005cd4:	2300      	movne	r3, #0
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8005cdc:	480b      	ldr	r0, [pc, #44]	; (8005d0c <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8005cde:	f00d f843 	bl	8012d68 <__cxa_guard_acquire>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	bf14      	ite	ne
 8005ce8:	2301      	movne	r3, #1
 8005cea:	2300      	moveq	r3, #0
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d008      	beq.n	8005d04 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8005cf2:	4807      	ldr	r0, [pc, #28]	; (8005d10 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
 8005cf4:	f7ff ffab 	bl	8005c4e <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>
 8005cf8:	4806      	ldr	r0, [pc, #24]	; (8005d14 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x58>)
 8005cfa:	f00d fa94 	bl	8013226 <atexit>
 8005cfe:	4803      	ldr	r0, [pc, #12]	; (8005d0c <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8005d00:	f00d f83e 	bl	8012d80 <__cxa_guard_release>
		return instance;
 8005d04:	4b02      	ldr	r3, [pc, #8]	; (8005d10 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
	}
 8005d06:	4618      	mov	r0, r3
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop
 8005d0c:	20000ab0 	.word	0x20000ab0
 8005d10:	200009ac 	.word	0x200009ac
 8005d14:	08005cad 	.word	0x08005cad

08005d18 <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fb fb7a 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>:
      function() noexcept
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b082      	sub	sp, #8
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f7fb fb6d 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4618      	mov	r0, r3
 8005d58:	370c      	adds	r7, #12
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	switch (module) {
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <_ZL17AdcModuleToHandle9AdcModule+0x16>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d002      	beq.n	8005d92 <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 8005d8c:	e003      	b.n	8005d96 <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 8005d90:	e004      	b.n	8005d9c <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 8005d94:	e002      	b.n	8005d9c <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 8005d96:	f001 fcb1 	bl	80076fc <Error_Handler>
		return nullptr;
 8005d9a:	2300      	movs	r3, #0
	}
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	20000bfc 	.word	0x20000bfc
 8005da8:	20000c44 	.word	0x20000c44

08005dac <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]

	}
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	4618      	mov	r0, r3
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr

08005dc2 <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 8005dc2:	b480      	push	{r7}
 8005dc4:	b083      	sub	sp, #12
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	6078      	str	r0, [r7, #4]
		return m_value;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	881b      	ldrh	r3, [r3, #0]
	}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	370c      	adds	r7, #12
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr

08005dda <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 8005dda:	b480      	push	{r7}
 8005ddc:	b083      	sub	sp, #12
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	807b      	strh	r3, [r7, #2]
		m_value = value;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	887a      	ldrh	r2, [r7, #2]
 8005dea:	801a      	strh	r2, [r3, #0]
	}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7fb fb18 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 8005e12:	b5b0      	push	{r4, r5, r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	240f      	movs	r4, #15
 8005e1e:	461d      	mov	r5, r3
 8005e20:	2c00      	cmp	r4, #0
 8005e22:	db05      	blt.n	8005e30 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 8005e24:	4628      	mov	r0, r5
 8005e26:	f000 fa0f 	bl	8006248 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 8005e2a:	3510      	adds	r5, #16
 8005e2c:	3c01      	subs	r4, #1
 8005e2e:	e7f7      	b.n	8005e20 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bdb0      	pop	{r4, r5, r7, pc}

08005e42 <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 8005e42:	b590      	push	{r4, r7, lr}
 8005e44:	b083      	sub	sp, #12
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00a      	beq.n	8005e66 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	429c      	cmp	r4, r3
 8005e5a:	d004      	beq.n	8005e66 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8005e5c:	3c10      	subs	r4, #16
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f7ff ffca 	bl	8005df8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 8005e64:	e7f7      	b.n	8005e56 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd90      	pop	{r4, r7, pc}

08005e70 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 8005e70:	b580      	push	{r7, lr}
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	4801      	ldr	r0, [pc, #4]	; (8005e7c <__tcf_0+0xc>)
 8005e76:	f7ff ffe4 	bl	8005e42 <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000ab4 	.word	0x20000ab4

08005e80 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 8005e84:	4b12      	ldr	r3, [pc, #72]	; (8005ed0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f3bf 8f5b 	dmb	ish
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	bf0c      	ite	eq
 8005e96:	2301      	moveq	r3, #1
 8005e98:	2300      	movne	r3, #0
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8005ea0:	480b      	ldr	r0, [pc, #44]	; (8005ed0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8005ea2:	f00c ff61 	bl	8012d68 <__cxa_guard_acquire>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d008      	beq.n	8005ec8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8005eb6:	4807      	ldr	r0, [pc, #28]	; (8005ed4 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 8005eb8:	f7ff ffab 	bl	8005e12 <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 8005ebc:	4806      	ldr	r0, [pc, #24]	; (8005ed8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 8005ebe:	f00d f9b2 	bl	8013226 <atexit>
 8005ec2:	4803      	ldr	r0, [pc, #12]	; (8005ed0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8005ec4:	f00c ff5c 	bl	8012d80 <__cxa_guard_release>
		return instance;
 8005ec8:	4b02      	ldr	r3, [pc, #8]	; (8005ed4 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	20000bb8 	.word	0x20000bb8
 8005ed4:	20000ab4 	.word	0x20000ab4
 8005ed8:	08005e71 	.word	0x08005e71

08005edc <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005eec:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005ef4:	1c59      	adds	r1, r3, #1
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	4413      	add	r3, r2
 8005f02:	6839      	ldr	r1, [r7, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f000 f9ac 	bl	8006262 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
	}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	18d0      	adds	r0, r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	4619      	mov	r1, r3
 8005f34:	f000 f995 	bl	8006262 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	4413      	add	r3, r2
 8005f44:	2100      	movs	r1, #0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 f9a6 	bl	8006298 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005f52:	1e5a      	subs	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 8005f5a:	bf00      	nop
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d104      	bne.n	8005f82 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 f90a 	bl	8006196 <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 8005f82:	bf00      	nop
 8005f84:	3708      	adds	r7, #8
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
	...

08005f8c <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 8005f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8e:	b087      	sub	sp, #28
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 8005f96:	6838      	ldr	r0, [r7, #0]
 8005f98:	f7ff feee 	bl	8005d78 <_ZL17AdcModuleToHandle9AdcModule>
 8005f9c:	4602      	mov	r2, r0
					)) {
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69da      	ldr	r2, [r3, #28]
					)) {
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685c      	ldr	r4, [r3, #4]
 8005fb0:	4b2f      	ldr	r3, [pc, #188]	; (8006070 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8005fb2:	429c      	cmp	r4, r3
 8005fb4:	d801      	bhi.n	8005fba <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 8005fb6:	0063      	lsls	r3, r4, #1
 8005fb8:	e001      	b.n	8005fbe <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 8005fba:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f00c fee1 	bl	8012d86 <_Znaj>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	461e      	mov	r6, r3
 8005fc8:	4635      	mov	r5, r6
 8005fca:	1e63      	subs	r3, r4, #1
 8005fcc:	461c      	mov	r4, r3
 8005fce:	2c00      	cmp	r4, #0
 8005fd0:	db05      	blt.n	8005fde <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f7ff feea 	bl	8005dac <_ZN10AdcChannelC1Ev>
 8005fd8:	3502      	adds	r5, #2
 8005fda:	3c01      	subs	r4, #1
 8005fdc:	e7f7      	b.n	8005fce <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	4a22      	ldr	r2, [pc, #136]	; (8006070 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d801      	bhi.n	8005ff0 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 8005fec:	005b      	lsls	r3, r3, #1
 8005fee:	e001      	b.n	8005ff4 <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f00c fec6 	bl	8012d86 <_Znaj>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	461a      	mov	r2, r3
					)) {
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60da      	str	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8006008:	f7ff ff3a 	bl	8005e80 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800600c:	4604      	mov	r4, r0
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	f107 0308 	add.w	r3, r7, #8
 8006014:	4611      	mov	r1, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f000 f958 	bl	80062cc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 800601c:	f107 0308 	add.w	r3, r7, #8
 8006020:	4619      	mov	r1, r3
 8006022:	4620      	mov	r0, r4
 8006024:	f7ff ff5a 	bl	8005edc <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 8006028:	4602      	mov	r2, r0
					)) {
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 800602e:	f107 0308 	add.w	r3, r7, #8
 8006032:	4618      	mov	r0, r3
 8006034:	f7ff fee0 	bl	8005df8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 8006038:	2200      	movs	r2, #0
 800603a:	2100      	movs	r1, #0
 800603c:	2001      	movs	r0, #1
 800603e:	f008 fd58 	bl	800eaf2 <osSemaphoreNew>
 8006042:	4602      	mov	r2, r0
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800605a:	461a      	mov	r2, r3
 800605c:	f002 faf0 	bl	8008640 <HAL_ADC_Start_DMA>
		update();
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f854 	bl	800610e <_ZN19AdcModuleController6updateEv>
	}
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4618      	mov	r0, r3
 800606a:	371c      	adds	r7, #28
 800606c:	46bd      	mov	sp, r7
 800606e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006070:	3ffffffc 	.word	0x3ffffffc

08006074 <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 800607c:	f7ff ff00 	bl	8005e80 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7ff ff43 	bl	8005f14 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	4618      	mov	r0, r3
 8006094:	f008 fe4c 	bl	800ed30 <osSemaphoreGetCount>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	bf14      	ite	ne
 800609e:	2301      	movne	r3, #1
 80060a0:	2300      	moveq	r3, #0
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d006      	beq.n	80060b6 <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f04f 31ff 	mov.w	r1, #4294967295
 80060b0:	4618      	mov	r0, r3
 80060b2:	f008 fda7 	bl	800ec04 <osSemaphoreAcquire>
		}
		delete[] m_channels;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d004      	beq.n	80060c8 <_ZN19AdcModuleControllerD1Ev+0x54>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f00c fe4e 	bl	8012d64 <_ZdaPv>
		delete[] m_buffer;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <_ZN19AdcModuleControllerD1Ev+0x66>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f00c fe45 	bl	8012d64 <_ZdaPv>
	}
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	683a      	ldr	r2, [r7, #0]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d301      	bcc.n	80060fc <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 80060f8:	f001 fb00 	bl	80076fc <Error_Handler>
		}
		return m_channels + rank;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	005b      	lsls	r3, r3, #1
 8006104:	4413      	add	r3, r2
	}
 8006106:	4618      	mov	r0, r3
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <_ZN19AdcModuleController6updateEv>:

	void update() {
 800610e:	b580      	push	{r7, lr}
 8006110:	b084      	sub	sp, #16
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f04f 31ff 	mov.w	r1, #4294967295
 800611e:	4618      	mov	r0, r3
 8006120:	f008 fd70 	bl	800ec04 <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 8006124:	2300      	movs	r3, #0
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	429a      	cmp	r2, r3
 8006130:	d211      	bcs.n	8006156 <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	689a      	ldr	r2, [r3, #8]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	18d0      	adds	r0, r2, r3
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	4413      	add	r3, r2
 8006146:	881b      	ldrh	r3, [r3, #0]
 8006148:	4619      	mov	r1, r3
 800614a:	f7ff fe46 	bl	8005dda <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3301      	adds	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e7e8      	b.n	8006128 <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8006168:	461a      	mov	r2, r3
 800616a:	f002 fa69 	bl	8008640 <HAL_ADC_Start_DMA>
	}
 800616e:	bf00      	nop
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}

08006176 <_ZN19AdcModuleController10weakUpdateEv>:

	void weakUpdate() {
 8006176:	b580      	push	{r7, lr}
 8006178:	b082      	sub	sp, #8
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	7c1b      	ldrb	r3, [r3, #16]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <_ZN19AdcModuleController10weakUpdateEv+0x18>
			return;
		else
			update();
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f7ff ffc1 	bl	800610e <_ZN19AdcModuleController6updateEv>
 800618c:	e000      	b.n	8006190 <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 800618e:	bf00      	nop
	}
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f008 fd7d 	bl	800eca8 <osSemaphoreRelease>
	}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
	switch(module){
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d004      	beq.n	80061d4 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 80061ca:	e007      	b.n	80061dc <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 80061cc:	f000 f8b0 	bl	8006330 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 80061d0:	4603      	mov	r3, r0
 80061d2:	e008      	b.n	80061e6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 80061d4:	f000 f8e2 	bl	800639c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 80061d8:	4603      	mov	r3, r0
 80061da:	e004      	b.n	80061e6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 80061dc:	f001 fa8e 	bl	80076fc <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 80061e0:	f000 f8a6 	bl	8006330 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 80061e4:	4603      	mov	r3, r0
	}
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <_ZN20AdcChannelControllerC1E9AdcModulej>:



class AdcChannelController {
public:
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	60f8      	str	r0, [r7, #12]
 80061f6:	60b9      	str	r1, [r7, #8]
 80061f8:	607a      	str	r2, [r7, #4]
			m_module(_getChannelAdcModuleControllerRuntime(module)),
 80061fa:	68b8      	ldr	r0, [r7, #8]
 80061fc:	f7ff ffdb 	bl	80061b6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 8006200:	4602      	mov	r2, r0
			m_channel(m_module.getChannelByRank(rank)) {
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4618      	mov	r0, r3
 800620e:	f7ff ff69 	bl	80060e4 <_ZN19AdcModuleController16getChannelByRankEj>
 8006212:	4602      	mov	r2, r0
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	605a      	str	r2, [r3, #4]
	}
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 8006222:	b580      	push	{r7, lr}
 8006224:	b082      	sub	sp, #8
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
		m_module.weakUpdate();
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4618      	mov	r0, r3
 8006230:	f7ff ffa1 	bl	8006176 <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fdc2 	bl	8005dc2 <_ZN10AdcChannel3getEv>
 800623e:	4603      	mov	r3, r0
	}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4618      	mov	r0, r3
 8006254:	f7fb f8e2 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 8006262:	b580      	push	{r7, lr}
 8006264:	b086      	sub	sp, #24
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800626c:	f107 0308 	add.w	r3, r7, #8
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	4618      	mov	r0, r3
 8006274:	f000 f8c0 	bl	80063f8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 8006278:	f107 0308 	add.w	r3, r7, #8
 800627c:	6879      	ldr	r1, [r7, #4]
 800627e:	4618      	mov	r0, r3
 8006280:	f000 f8dc 	bl	800643c <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 8006284:	f107 0308 	add.w	r3, r7, #8
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff fdb5 	bl	8005df8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 800628e:	687b      	ldr	r3, [r7, #4]
      }
 8006290:	4618      	mov	r0, r3
 8006292:	3718      	adds	r7, #24
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00b      	beq.n	80062c2 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	6879      	ldr	r1, [r7, #4]
 80062b2:	2203      	movs	r2, #3
 80062b4:	4798      	blx	r3
	    _M_manager = nullptr;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	60da      	str	r2, [r3, #12]
	return *this;
 80062c2:	687b      	ldr	r3, [r7, #4]
      }
 80062c4:	4618      	mov	r0, r3
 80062c6:	3708      	adds	r7, #8
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fb f89f 	bl	800141c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80062de:	463b      	mov	r3, r7
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 f8d7 	bl	8006494 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00f      	beq.n	800630c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80062ec:	687c      	ldr	r4, [r7, #4]
 80062ee:	463b      	mov	r3, r7
 80062f0:	4618      	mov	r0, r3
 80062f2:	f000 f8da 	bl	80064aa <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80062f6:	4603      	mov	r3, r0
 80062f8:	4619      	mov	r1, r3
 80062fa:	4620      	mov	r0, r4
 80062fc:	f000 f8e0 	bl	80064c0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	4a05      	ldr	r2, [pc, #20]	; (8006318 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 8006304:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a04      	ldr	r2, [pc, #16]	; (800631c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 800630a:	609a      	str	r2, [r3, #8]
      }
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}
 8006316:	bf00      	nop
 8006318:	080064e5 	.word	0x080064e5
 800631c:	0800650f 	.word	0x0800650f

08006320 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
 8006324:	4801      	ldr	r0, [pc, #4]	; (800632c <__tcf_1+0xc>)
 8006326:	f7ff fea5 	bl	8006074 <_ZN19AdcModuleControllerD1Ev>
 800632a:	bd80      	pop	{r7, pc}
 800632c:	20000bbc 	.word	0x20000bbc

08006330 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8006334:	4b12      	ldr	r3, [pc, #72]	; (8006380 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	f3bf 8f5b 	dmb	ish
 800633c:	b2db      	uxtb	r3, r3
 800633e:	f003 0301 	and.w	r3, r3, #1
 8006342:	2b00      	cmp	r3, #0
 8006344:	bf0c      	ite	eq
 8006346:	2301      	moveq	r3, #1
 8006348:	2300      	movne	r3, #0
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d014      	beq.n	800637a <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8006350:	480b      	ldr	r0, [pc, #44]	; (8006380 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8006352:	f00c fd09 	bl	8012d68 <__cxa_guard_acquire>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	bf14      	ite	ne
 800635c:	2301      	movne	r3, #1
 800635e:	2300      	moveq	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d009      	beq.n	800637a <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8006366:	2100      	movs	r1, #0
 8006368:	4806      	ldr	r0, [pc, #24]	; (8006384 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 800636a:	f7ff fe0f 	bl	8005f8c <_ZN19AdcModuleControllerC1E9AdcModule>
 800636e:	4806      	ldr	r0, [pc, #24]	; (8006388 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 8006370:	f00c ff59 	bl	8013226 <atexit>
 8006374:	4802      	ldr	r0, [pc, #8]	; (8006380 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8006376:	f00c fd03 	bl	8012d80 <__cxa_guard_release>
	return instance;
 800637a:	4b02      	ldr	r3, [pc, #8]	; (8006384 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20000bd8 	.word	0x20000bd8
 8006384:	20000bbc 	.word	0x20000bbc
 8006388:	08006321 	.word	0x08006321

0800638c <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
 8006390:	4801      	ldr	r0, [pc, #4]	; (8006398 <__tcf_2+0xc>)
 8006392:	f7ff fe6f 	bl	8006074 <_ZN19AdcModuleControllerD1Ev>
 8006396:	bd80      	pop	{r7, pc}
 8006398:	20000bdc 	.word	0x20000bdc

0800639c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 80063a0:	4b12      	ldr	r3, [pc, #72]	; (80063ec <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 80063a2:	781b      	ldrb	r3, [r3, #0]
 80063a4:	f3bf 8f5b 	dmb	ish
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d014      	beq.n	80063e6 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 80063bc:	480b      	ldr	r0, [pc, #44]	; (80063ec <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 80063be:	f00c fcd3 	bl	8012d68 <__cxa_guard_acquire>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bf14      	ite	ne
 80063c8:	2301      	movne	r3, #1
 80063ca:	2300      	moveq	r3, #0
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d009      	beq.n	80063e6 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 80063d2:	2101      	movs	r1, #1
 80063d4:	4806      	ldr	r0, [pc, #24]	; (80063f0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 80063d6:	f7ff fdd9 	bl	8005f8c <_ZN19AdcModuleControllerC1E9AdcModule>
 80063da:	4806      	ldr	r0, [pc, #24]	; (80063f4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 80063dc:	f00c ff23 	bl	8013226 <atexit>
 80063e0:	4802      	ldr	r0, [pc, #8]	; (80063ec <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 80063e2:	f00c fccd 	bl	8012d80 <__cxa_guard_release>
	return instance;
 80063e6:	4b02      	ldr	r3, [pc, #8]	; (80063f0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	20000bf8 	.word	0x20000bf8
 80063f0:	20000bdc 	.word	0x20000bdc
 80063f4:	0800638d 	.word	0x0800638d

080063f8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
 8006400:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4618      	mov	r0, r3
 8006406:	f7fb f809 	bl	800141c <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800640a:	6838      	ldr	r0, [r7, #0]
 800640c:	f000 f89e 	bl	800654c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00d      	beq.n	8006432 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	2202      	movs	r2, #2
 8006420:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	68da      	ldr	r2, [r3, #12]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	689a      	ldr	r2, [r3, #8]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	609a      	str	r2, [r3, #8]
    }
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4618      	mov	r0, r3
 8006436:	3708      	adds	r7, #8
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}

0800643c <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	4611      	mov	r1, r2
 800644c:	4618      	mov	r0, r3
 800644e:	f7fb f8f2 	bl	8001636 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f103 0208 	add.w	r2, r3, #8
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	3308      	adds	r3, #8
 800645c:	4619      	mov	r1, r3
 800645e:	4610      	mov	r0, r2
 8006460:	f7fb f91b 	bl	800169a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f103 020c 	add.w	r2, r3, #12
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	330c      	adds	r3, #12
 800646e:	4619      	mov	r1, r3
 8006470:	4610      	mov	r0, r2
 8006472:	f000 f886 	bl	8006582 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4618      	mov	r0, r3
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	  { return true; }
 800649c:	2301      	movs	r3, #1
 800649e:	4618      	mov	r0, r3
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80064aa:	b480      	push	{r7}
 80064ac:	b083      	sub	sp, #12
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80064c0:	b590      	push	{r4, r7, lr}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80064ca:	6838      	ldr	r0, [r7, #0]
 80064cc:	f7ff ffed 	bl	80064aa <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80064d0:	4603      	mov	r3, r0
 80064d2:	4622      	mov	r2, r4
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f872 	bl	80065c0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd90      	pop	{r4, r7, pc}

080064e4 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80064e4:	b590      	push	{r4, r7, lr}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f87f 	bl	80065f2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 80064f4:	4604      	mov	r4, r0
 80064f6:	6838      	ldr	r0, [r7, #0]
 80064f8:	f7ff ffc1 	bl	800647e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80064fc:	4603      	mov	r3, r0
 80064fe:	4619      	mov	r1, r3
 8006500:	4620      	mov	r0, r4
 8006502:	f000 f887 	bl	8006614 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8006506:	bf00      	nop
      }
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	bd90      	pop	{r4, r7, pc}

0800650e <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800650e:	b590      	push	{r4, r7, lr}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	4613      	mov	r3, r2
 800651a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	2b01      	cmp	r3, #1
 8006520:	d109      	bne.n	8006536 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 f88c 	bl	8006640 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8006528:	4604      	mov	r4, r0
 800652a:	68b8      	ldr	r0, [r7, #8]
 800652c:	f000 f861 	bl	80065f2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8006530:	4603      	mov	r3, r0
 8006532:	6023      	str	r3, [r4, #0]
	    break;
 8006534:	e005      	b.n	8006542 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	461a      	mov	r2, r3
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f88b 	bl	8006658 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8006542:	2300      	movs	r3, #0
      }
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	bd90      	pop	{r4, r7, pc}

0800654c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4618      	mov	r0, r3
 8006558:	f7fa ff81 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800655c:	4603      	mov	r3, r0
 800655e:	f083 0301 	eor.w	r3, r3, #1
 8006562:	b2db      	uxtb	r3, r3
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4618      	mov	r0, r3
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8006582:	b580      	push	{r7, lr}
 8006584:	b084      	sub	sp, #16
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ffed 	bl	800656c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8006592:	4603      	mov	r3, r0
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006598:	6838      	ldr	r0, [r7, #0]
 800659a:	f7ff ffe7 	bl	800656c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800659e:	4603      	mov	r3, r0
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80065a6:	f107 030c 	add.w	r3, r7, #12
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff ffde 	bl	800656c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80065b0:	4603      	mov	r3, r0
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	601a      	str	r2, [r3, #0]
    }
 80065b8:	bf00      	nop
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80065c0:	b590      	push	{r4, r7, lr}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80065cc:	68b8      	ldr	r0, [r7, #8]
 80065ce:	f7ff ff6c 	bl	80064aa <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80065d2:	4604      	mov	r4, r0
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f7ff faa5 	bl	8005b24 <_ZNSt9_Any_data9_M_accessEv>
 80065da:	4603      	mov	r3, r0
 80065dc:	4619      	mov	r1, r3
 80065de:	2004      	movs	r0, #4
 80065e0:	f7ff fa94 	bl	8005b0c <_ZnwjPv>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	bf00      	nop
 80065ec:	3714      	adds	r7, #20
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd90      	pop	{r4, r7, pc}

080065f2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f857 	bl	80066ae <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8006600:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f85f 	bl	80066c6 <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 8006608:	4603      	mov	r3, r0
 800660a:	bf00      	nop
	}
 800660c:	4618      	mov	r0, r3
 800660e:	3710      	adds	r7, #16
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8006614:	b5b0      	push	{r4, r5, r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f85c 	bl	80066dc <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8006624:	4604      	mov	r4, r0
 8006626:	6838      	ldr	r0, [r7, #0]
 8006628:	f7ff ff29 	bl	800647e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800662c:	4603      	mov	r3, r0
 800662e:	461a      	mov	r2, r3
 8006630:	4621      	mov	r1, r4
 8006632:	4628      	mov	r0, r5
 8006634:	f000 f85d 	bl	80066f2 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bdb0      	pop	{r4, r5, r7, pc}

08006640 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff fa6b 	bl	8005b24 <_ZNSt9_Any_data9_M_accessEv>
 800664e:	4603      	mov	r3, r0
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006658:	b5b0      	push	{r4, r5, r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	4613      	mov	r3, r2
 8006664:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d016      	beq.n	800669a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 800666c:	2b03      	cmp	r3, #3
 800666e:	dc19      	bgt.n	80066a4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8006670:	2b01      	cmp	r3, #1
 8006672:	d002      	beq.n	800667a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 8006674:	2b02      	cmp	r3, #2
 8006676:	d00a      	beq.n	800668e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 8006678:	e014      	b.n	80066a4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7ff ffe0 	bl	8006640 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8006680:	4604      	mov	r4, r0
 8006682:	68b8      	ldr	r0, [r7, #8]
 8006684:	f7ff ffb5 	bl	80065f2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8006688:	4603      	mov	r3, r0
 800668a:	6023      	str	r3, [r4, #0]
	      break;
 800668c:	e00a      	b.n	80066a4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800668e:	462a      	mov	r2, r5
 8006690:	68b9      	ldr	r1, [r7, #8]
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 f844 	bl	8006720 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 8006698:	e004      	b.n	80066a4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800669a:	4621      	mov	r1, r4
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f858 	bl	8006752 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80066a2:	bf00      	nop
	  return false;
 80066a4:	2300      	movs	r3, #0
	}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3710      	adds	r7, #16
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bdb0      	pop	{r4, r5, r7, pc}

080066ae <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 80066ae:	b580      	push	{r7, lr}
 80066b0:	b082      	sub	sp, #8
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff fa3f 	bl	8005b3a <_ZNKSt9_Any_data9_M_accessEv>
 80066bc:	4603      	mov	r3, r0
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4618      	mov	r0, r3
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4618      	mov	r0, r3
 80066e8:	370c      	adds	r7, #12
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr

080066f2 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80066f2:	b590      	push	{r4, r7, lr}
 80066f4:	b085      	sub	sp, #20
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	7338      	strb	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80066fe:	68b8      	ldr	r0, [r7, #8]
 8006700:	f7ff ffec 	bl	80066dc <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8006704:	4604      	mov	r4, r0
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7ff feb9 	bl	800647e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800670c:	4603      	mov	r3, r0
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4619      	mov	r1, r3
 8006712:	4620      	mov	r0, r4
 8006714:	f7ff fc25 	bl	8005f62 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 8006718:	bf00      	nop
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	bd90      	pop	{r4, r7, pc}

08006720 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006720:	b590      	push	{r4, r7, lr}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800672c:	68b8      	ldr	r0, [r7, #8]
 800672e:	f7ff ffbe 	bl	80066ae <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8006732:	4604      	mov	r4, r0
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff f9f5 	bl	8005b24 <_ZNSt9_Any_data9_M_accessEv>
 800673a:	4603      	mov	r3, r0
 800673c:	4619      	mov	r1, r3
 800673e:	2004      	movs	r0, #4
 8006740:	f7ff f9e4 	bl	8005b0c <_ZnwjPv>
 8006744:	4602      	mov	r2, r0
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	6013      	str	r3, [r2, #0]
	}
 800674a:	bf00      	nop
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	bd90      	pop	{r4, r7, pc}

08006752 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f804 	bl	800676a <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 800676a:	b580      	push	{r7, lr}
 800676c:	b082      	sub	sp, #8
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff f9d6 	bl	8005b24 <_ZNSt9_Any_data9_M_accessEv>
 8006778:	4603      	mov	r3, r0
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>:
#include <cmath>
#include "canzero.hpp"

class OnBoardSensors {
public:
	explicit OnBoardSensors(OnBoardTemperaturConfig config) :
 8006782:	b084      	sub	sp, #16
 8006784:	b5b0      	push	{r4, r5, r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	f107 001c 	add.w	r0, r7, #28
 8006790:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			m_internalNTC(config.m_internalNTCConfig.m_adc.m_module,
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
					config.m_externalNTCConfig.m_adc.m_module,
					config.m_externalNTCConfig.m_adc.m_rank),
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
					m_config(config) {
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	69f9      	ldr	r1, [r7, #28]
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
 8006798:	8c3a      	ldrh	r2, [r7, #32]
					m_config(config) {
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fd27 	bl	80061ee <_ZN20AdcChannelControllerC1E9AdcModulej>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	3308      	adds	r3, #8
 80067a4:	6b79      	ldr	r1, [r7, #52]	; 0x34
					config.m_externalNTCConfig.m_adc.m_rank),
 80067a6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
					m_config(config) {
 80067a8:	4618      	mov	r0, r3
 80067aa:	f7ff fd20 	bl	80061ee <_ZN20AdcChannelControllerC1E9AdcModulej>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3310      	adds	r3, #16
 80067b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
 80067b4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
					m_config(config) {
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7ff fd18 	bl	80061ee <_ZN20AdcChannelControllerC1E9AdcModulej>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f103 0418 	add.w	r4, r3, #24
 80067c4:	f107 051c 	add.w	r5, r7, #28
 80067c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067d4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80067d8:	e884 0003 	stmia.w	r4, {r0, r1}
	}
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80067e8:	b004      	add	sp, #16
 80067ea:	4770      	bx	lr

080067ec <_ZN14OnBoardSensors22getInternalTemperaturCEv>:

	float getInternalTemperaturC(){
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b084      	sub	sp, #16
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_internalNTC.get();
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fd13 	bl	8006222 <_ZN20AdcChannelController3getEv>
 80067fc:	4603      	mov	r3, r0
 80067fe:	81fb      	strh	r3, [r7, #14]
		float internalTemp = (3.3f * (float) avalue/4095.0f - 0.76f) / 0.0025f + 25.0f;
 8006800:	89fb      	ldrh	r3, [r7, #14]
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800680a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006848 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x5c>
 800680e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006812:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800684c <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x60>
 8006816:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800681a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006850 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x64>
 800681e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006822:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8006854 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x68>
 8006826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800682a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800682e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006832:	edc7 7a02 	vstr	s15, [r7, #8]
		return internalTemp;
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	ee07 3a90 	vmov	s15, r3
	}
 800683c:	eeb0 0a67 	vmov.f32	s0, s15
 8006840:	3710      	adds	r7, #16
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	40533333 	.word	0x40533333
 800684c:	457ff000 	.word	0x457ff000
 8006850:	3f428f5c 	.word	0x3f428f5c
 8006854:	3b23d70a 	.word	0x3b23d70a

08006858 <_ZN14OnBoardSensors22getExternalTemperaturCEv>:

	float getExternalTemperaturC(){
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_externalNTC.get();
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	3308      	adds	r3, #8
 8006864:	4618      	mov	r0, r3
 8006866:	f7ff fcdc 	bl	8006222 <_ZN20AdcChannelController3getEv>
 800686a:	4603      	mov	r3, r0
 800686c:	81fb      	strh	r3, [r7, #14]
		float ntcTemperature = 1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * log(1.0f / (4095.0f / (float) avalue - 1.0f) )) - 273.15f;
 800686e:	89fb      	ldrh	r3, [r7, #14]
 8006870:	ee07 3a90 	vmov	s15, r3
 8006874:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006878:	eddf 6a29 	vldr	s13, [pc, #164]	; 8006920 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc8>
 800687c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006884:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006888:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800688c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006890:	ee16 0a90 	vmov	r0, s13
 8006894:	f7f9 fe58 	bl	8000548 <__aeabi_f2d>
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	ec43 2b10 	vmov	d0, r2, r3
 80068a0:	f00c fab6 	bl	8012e10 <log>
 80068a4:	ec51 0b10 	vmov	r0, r1, d0
 80068a8:	a317      	add	r3, pc, #92	; (adr r3, 8006908 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb0>)
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f7f9 fea3 	bl	80005f8 <__aeabi_dmul>
 80068b2:	4602      	mov	r2, r0
 80068b4:	460b      	mov	r3, r1
 80068b6:	4610      	mov	r0, r2
 80068b8:	4619      	mov	r1, r3
 80068ba:	a315      	add	r3, pc, #84	; (adr r3, 8006910 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb8>)
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f7f9 fce4 	bl	800028c <__adddf3>
 80068c4:	4602      	mov	r2, r0
 80068c6:	460b      	mov	r3, r1
 80068c8:	f04f 0000 	mov.w	r0, #0
 80068cc:	4915      	ldr	r1, [pc, #84]	; (8006924 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xcc>)
 80068ce:	f7f9 ffbd 	bl	800084c <__aeabi_ddiv>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4610      	mov	r0, r2
 80068d8:	4619      	mov	r1, r3
 80068da:	a30f      	add	r3, pc, #60	; (adr r3, 8006918 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc0>)
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f7f9 fcd2 	bl	8000288 <__aeabi_dsub>
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4610      	mov	r0, r2
 80068ea:	4619      	mov	r1, r3
 80068ec:	f7fa f97c 	bl	8000be8 <__aeabi_d2f>
 80068f0:	4603      	mov	r3, r0
 80068f2:	60bb      	str	r3, [r7, #8]
		return ntcTemperature;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	ee07 3a90 	vmov	s15, r3
	}
 80068fa:	eeb0 0a67 	vmov.f32	s0, s15
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}
 8006904:	f3af 8000 	nop.w
 8006908:	60000000 	.word	0x60000000
 800690c:	3f3363ac 	.word	0x3f3363ac
 8006910:	e0000000 	.word	0xe0000000
 8006914:	3f6b79e1 	.word	0x3f6b79e1
 8006918:	60000000 	.word	0x60000000
 800691c:	40711266 	.word	0x40711266
 8006920:	457ff000 	.word	0x457ff000
 8006924:	3ff00000 	.word	0x3ff00000

08006928 <_ZN14OnBoardSensors21getAverageTemperaturCEv>:

	float getAverageTemperaturC(){
 8006928:	b580      	push	{r7, lr}
 800692a:	ed2d 8b02 	vpush	{d8}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
		float average = (getExternalTemperaturC() + getInternalTemperaturC() ) / 2.0;
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7ff ff8f 	bl	8006858 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 800693a:	eeb0 8a40 	vmov.f32	s16, s0
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f7ff ff54 	bl	80067ec <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 8006944:	eef0 7a40 	vmov.f32	s15, s0
 8006948:	ee78 7a27 	vadd.f32	s15, s16, s15
 800694c:	ee17 0a90 	vmov	r0, s15
 8006950:	f7f9 fdfa 	bl	8000548 <__aeabi_f2d>
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800695c:	f7f9 ff76 	bl	800084c <__aeabi_ddiv>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4610      	mov	r0, r2
 8006966:	4619      	mov	r1, r3
 8006968:	f7fa f93e 	bl	8000be8 <__aeabi_d2f>
 800696c:	4603      	mov	r3, r0
 800696e:	60fb      	str	r3, [r7, #12]
		return average;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	ee07 3a90 	vmov	s15, r3
	}
 8006976:	eeb0 0a67 	vmov.f32	s0, s15
 800697a:	3710      	adds	r7, #16
 800697c:	46bd      	mov	sp, r7
 800697e:	ecbd 8b02 	vpop	{d8}
 8006982:	bd80      	pop	{r7, pc}

08006984 <_ZN14OnBoardSensors15getInputVoltageEv>:

	float getInputVoltage() {
 8006984:	b580      	push	{r7, lr}
 8006986:	b084      	sub	sp, #16
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_inputVoltage.get();
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3310      	adds	r3, #16
 8006990:	4618      	mov	r0, r3
 8006992:	f7ff fc46 	bl	8006222 <_ZN20AdcChannelController3getEv>
 8006996:	4603      	mov	r3, r0
 8006998:	81fb      	strh	r3, [r7, #14]
		float inputVoltage = (float)avalue/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 800699a:	89fb      	ldrh	r3, [r7, #14]
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80069a4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80069d8 <_ZN14OnBoardSensors15getInputVoltageEv+0x54>
 80069a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069ac:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80069dc <_ZN14OnBoardSensors15getInputVoltageEv+0x58>
 80069b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80069b4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80069e0 <_ZN14OnBoardSensors15getInputVoltageEv+0x5c>
 80069b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069bc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80069e4 <_ZN14OnBoardSensors15getInputVoltageEv+0x60>
 80069c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069c4:	edc7 7a02 	vstr	s15, [r7, #8]
		return inputVoltage;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	ee07 3a90 	vmov	s15, r3
	}
 80069ce:	eeb0 0a67 	vmov.f32	s0, s15
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	457ff000 	.word	0x457ff000
 80069dc:	40533333 	.word	0x40533333
 80069e0:	3dda09cc 	.word	0x3dda09cc
 80069e4:	3f19999a 	.word	0x3f19999a

080069e8 <_ZN14OnBoardSensors9updateCANEv>:

	void updateCAN(){
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
		float temp = getAverageTemperaturC();
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff ff99 	bl	8006928 <_ZN14OnBoardSensors21getAverageTemperaturCEv>
 80069f6:	ed87 0a03 	vstr	s0, [r7, #12]
		float vBat = getInputVoltage();
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f7ff ffc2 	bl	8006984 <_ZN14OnBoardSensors15getInputVoltageEv>
 8006a00:	ed87 0a02 	vstr	s0, [r7, #8]
		OD_BoardTemp_set(temp);
 8006a04:	ed97 0a03 	vldr	s0, [r7, #12]
 8006a08:	f7fd ffd8 	bl	80049bc <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(vBat);
 8006a0c:	ed97 0a02 	vldr	s0, [r7, #8]
 8006a10:	f7fe f80e 	bl	8004a30 <_Z19OD_InputVoltage_setf>
	}
 8006a14:	bf00      	nop
 8006a16:	3710      	adds	r7, #16
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <testbench_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void testbench_entry(void *argv) {
 8006a1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006a20:	b0a7      	sub	sp, #156	; 0x9c
 8006a22:	af0c      	add	r7, sp, #48	; 0x30
 8006a24:	6078      	str	r0, [r7, #4]
	OnBoardSensors onBoardSensors(g_peripherals.m_onBoardTemperaturConfig);
 8006a26:	4e25      	ldr	r6, [pc, #148]	; (8006abc <testbench_entry+0xa0>)
 8006a28:	f107 0c0c 	add.w	ip, r7, #12
 8006a2c:	466d      	mov	r5, sp
 8006a2e:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8006a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006a3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006a42:	f106 0340 	add.w	r3, r6, #64	; 0x40
 8006a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a48:	4660      	mov	r0, ip
 8006a4a:	f7ff fe9a 	bl	8006782 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>

	while (true) {
		float internal = onBoardSensors.getInternalTemperaturC();
 8006a4e:	f107 030c 	add.w	r3, r7, #12
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff feca 	bl	80067ec <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 8006a58:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		float external = onBoardSensors.getExternalTemperaturC();
 8006a5c:	f107 030c 	add.w	r3, r7, #12
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff fef9 	bl	8006858 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 8006a66:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
		float voltage = onBoardSensors.getInputVoltage();
 8006a6a:	f107 030c 	add.w	r3, r7, #12
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff ff88 	bl	8006984 <_ZN14OnBoardSensors15getInputVoltageEv>
 8006a74:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

		onBoardSensors.updateCAN();
 8006a78:	f107 030c 	add.w	r3, r7, #12
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff ffb3 	bl	80069e8 <_ZN14OnBoardSensors9updateCANEv>

		printf("%f  %f  %f \n", internal, external, voltage);
 8006a82:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8006a84:	f7f9 fd60 	bl	8000548 <__aeabi_f2d>
 8006a88:	4680      	mov	r8, r0
 8006a8a:	4689      	mov	r9, r1
 8006a8c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006a8e:	f7f9 fd5b 	bl	8000548 <__aeabi_f2d>
 8006a92:	4604      	mov	r4, r0
 8006a94:	460d      	mov	r5, r1
 8006a96:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006a98:	f7f9 fd56 	bl	8000548 <__aeabi_f2d>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006aa4:	e9cd 4500 	strd	r4, r5, [sp]
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	4804      	ldr	r0, [pc, #16]	; (8006ac0 <testbench_entry+0xa4>)
 8006aae:	f007 fd7d 	bl	800e5ac <printf_>
		osDelay(1000);
 8006ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006ab6:	f007 fef3 	bl	800e8a0 <osDelay>
	}
 8006aba:	e7c8      	b.n	8006a4e <testbench_entry+0x32>
 8006abc:	080161a8 	.word	0x080161a8
 8006ac0:	08016084 	.word	0x08016084

08006ac4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006aca:	463b      	mov	r3, r7
 8006acc:	2200      	movs	r2, #0
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	605a      	str	r2, [r3, #4]
 8006ad2:	609a      	str	r2, [r3, #8]
 8006ad4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006ad6:	4b36      	ldr	r3, [pc, #216]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006ad8:	4a36      	ldr	r2, [pc, #216]	; (8006bb4 <MX_ADC1_Init+0xf0>)
 8006ada:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8006adc:	4b34      	ldr	r3, [pc, #208]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006ade:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006ae2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006ae4:	4b32      	ldr	r3, [pc, #200]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006aea:	4b31      	ldr	r3, [pc, #196]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006aec:	2201      	movs	r2, #1
 8006aee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006af0:	4b2f      	ldr	r3, [pc, #188]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006af6:	4b2e      	ldr	r3, [pc, #184]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006afe:	4b2c      	ldr	r3, [pc, #176]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b00:	2200      	movs	r2, #0
 8006b02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006b04:	4b2a      	ldr	r3, [pc, #168]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b06:	4a2c      	ldr	r2, [pc, #176]	; (8006bb8 <MX_ADC1_Init+0xf4>)
 8006b08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006b0a:	4b29      	ldr	r3, [pc, #164]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8006b10:	4b27      	ldr	r3, [pc, #156]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b12:	2204      	movs	r2, #4
 8006b14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006b16:	4b26      	ldr	r3, [pc, #152]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006b1e:	4b24      	ldr	r3, [pc, #144]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b20:	2200      	movs	r2, #0
 8006b22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006b24:	4822      	ldr	r0, [pc, #136]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b26:	f001 fd47 	bl	80085b8 <HAL_ADC_Init>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8006b30:	f000 fde4 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006b34:	230a      	movs	r3, #10
 8006b36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8006b3c:	2305      	movs	r3, #5
 8006b3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006b40:	463b      	mov	r3, r7
 8006b42:	4619      	mov	r1, r3
 8006b44:	481a      	ldr	r0, [pc, #104]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b46:	f001 fe95 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006b50:	f000 fdd4 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006b54:	230c      	movs	r3, #12
 8006b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006b58:	2302      	movs	r3, #2
 8006b5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006b5c:	463b      	mov	r3, r7
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4813      	ldr	r0, [pc, #76]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b62:	f001 fe87 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006b6c:	f000 fdc6 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006b70:	2310      	movs	r3, #16
 8006b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006b74:	2303      	movs	r3, #3
 8006b76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006b78:	463b      	mov	r3, r7
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	480c      	ldr	r0, [pc, #48]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b7e:	f001 fe79 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8006b88:	f000 fdb8 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8006b8c:	2311      	movs	r3, #17
 8006b8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006b90:	2304      	movs	r3, #4
 8006b92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006b94:	463b      	mov	r3, r7
 8006b96:	4619      	mov	r1, r3
 8006b98:	4805      	ldr	r0, [pc, #20]	; (8006bb0 <MX_ADC1_Init+0xec>)
 8006b9a:	f001 fe6b 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d001      	beq.n	8006ba8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8006ba4:	f000 fdaa 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006ba8:	bf00      	nop
 8006baa:	3710      	adds	r7, #16
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000bfc 	.word	0x20000bfc
 8006bb4:	40012000 	.word	0x40012000
 8006bb8:	0f000001 	.word	0x0f000001

08006bbc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006bc2:	463b      	mov	r3, r7
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]
 8006bc8:	605a      	str	r2, [r3, #4]
 8006bca:	609a      	str	r2, [r3, #8]
 8006bcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006bce:	4b52      	ldr	r3, [pc, #328]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006bd0:	4a52      	ldr	r2, [pc, #328]	; (8006d1c <MX_ADC2_Init+0x160>)
 8006bd2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8006bd4:	4b50      	ldr	r3, [pc, #320]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006bd6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006bda:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006bdc:	4b4e      	ldr	r3, [pc, #312]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006be2:	4b4d      	ldr	r3, [pc, #308]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006be4:	2201      	movs	r2, #1
 8006be6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006be8:	4b4b      	ldr	r3, [pc, #300]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006bea:	2200      	movs	r2, #0
 8006bec:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006bee:	4b4a      	ldr	r3, [pc, #296]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006bf6:	4b48      	ldr	r3, [pc, #288]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006bfc:	4b46      	ldr	r3, [pc, #280]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006bfe:	4a48      	ldr	r2, [pc, #288]	; (8006d20 <MX_ADC2_Init+0x164>)
 8006c00:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006c02:	4b45      	ldr	r3, [pc, #276]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 8006c08:	4b43      	ldr	r3, [pc, #268]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006c0a:	2208      	movs	r2, #8
 8006c0c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006c0e:	4b42      	ldr	r3, [pc, #264]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006c16:	4b40      	ldr	r3, [pc, #256]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006c1c:	483e      	ldr	r0, [pc, #248]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006c1e:	f001 fccb 	bl	80085b8 <HAL_ADC_Init>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d001      	beq.n	8006c2c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006c28:	f000 fd68 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006c2c:	230f      	movs	r3, #15
 8006c2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006c30:	2301      	movs	r3, #1
 8006c32:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8006c34:	2304      	movs	r3, #4
 8006c36:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006c38:	463b      	mov	r3, r7
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	4836      	ldr	r0, [pc, #216]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006c3e:	f001 fe19 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006c48:	f000 fd58 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006c4c:	230e      	movs	r3, #14
 8006c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006c50:	2302      	movs	r3, #2
 8006c52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006c54:	463b      	mov	r3, r7
 8006c56:	4619      	mov	r1, r3
 8006c58:	482f      	ldr	r0, [pc, #188]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006c5a:	f001 fe0b 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d001      	beq.n	8006c68 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006c64:	f000 fd4a 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006c68:	2303      	movs	r3, #3
 8006c6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006c6c:	2303      	movs	r3, #3
 8006c6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006c70:	463b      	mov	r3, r7
 8006c72:	4619      	mov	r1, r3
 8006c74:	4828      	ldr	r0, [pc, #160]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006c76:	f001 fdfd 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006c80:	f000 fd3c 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006c84:	2302      	movs	r3, #2
 8006c86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006c88:	2304      	movs	r3, #4
 8006c8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006c8c:	463b      	mov	r3, r7
 8006c8e:	4619      	mov	r1, r3
 8006c90:	4821      	ldr	r0, [pc, #132]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006c92:	f001 fdef 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8006c9c:	f000 fd2e 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006ca0:	2304      	movs	r3, #4
 8006ca2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006ca4:	2305      	movs	r3, #5
 8006ca6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006ca8:	463b      	mov	r3, r7
 8006caa:	4619      	mov	r1, r3
 8006cac:	481a      	ldr	r0, [pc, #104]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006cae:	f001 fde1 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006cb8:	f000 fd20 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006cbc:	2305      	movs	r3, #5
 8006cbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006cc0:	2306      	movs	r3, #6
 8006cc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006cc4:	463b      	mov	r3, r7
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	4813      	ldr	r0, [pc, #76]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006cca:	f001 fdd3 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006cd4:	f000 fd12 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006cd8:	2306      	movs	r3, #6
 8006cda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006cdc:	2307      	movs	r3, #7
 8006cde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006ce0:	463b      	mov	r3, r7
 8006ce2:	4619      	mov	r1, r3
 8006ce4:	480c      	ldr	r0, [pc, #48]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006ce6:	f001 fdc5 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006cf0:	f000 fd04 	bl	80076fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006cf4:	2307      	movs	r3, #7
 8006cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006cf8:	2308      	movs	r3, #8
 8006cfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4805      	ldr	r0, [pc, #20]	; (8006d18 <MX_ADC2_Init+0x15c>)
 8006d02:	f001 fdb7 	bl	8008874 <HAL_ADC_ConfigChannel>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006d0c:	f000 fcf6 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	20000c44 	.word	0x20000c44
 8006d1c:	40012100 	.word	0x40012100
 8006d20:	0f000001 	.word	0x0f000001

08006d24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08c      	sub	sp, #48	; 0x30
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d2c:	f107 031c 	add.w	r3, r7, #28
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	605a      	str	r2, [r3, #4]
 8006d36:	609a      	str	r2, [r3, #8]
 8006d38:	60da      	str	r2, [r3, #12]
 8006d3a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a6b      	ldr	r2, [pc, #428]	; (8006ef0 <HAL_ADC_MspInit+0x1cc>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d157      	bne.n	8006df6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006d46:	2300      	movs	r3, #0
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	4b6a      	ldr	r3, [pc, #424]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d4e:	4a69      	ldr	r2, [pc, #420]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d54:	6453      	str	r3, [r2, #68]	; 0x44
 8006d56:	4b67      	ldr	r3, [pc, #412]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5e:	61bb      	str	r3, [r7, #24]
 8006d60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]
 8006d66:	4b63      	ldr	r3, [pc, #396]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	4a62      	ldr	r2, [pc, #392]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006d6c:	f043 0304 	orr.w	r3, r3, #4
 8006d70:	6313      	str	r3, [r2, #48]	; 0x30
 8006d72:	4b60      	ldr	r3, [pc, #384]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d76:	f003 0304 	and.w	r3, r3, #4
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8006d7e:	2305      	movs	r3, #5
 8006d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006d82:	2303      	movs	r3, #3
 8006d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d8a:	f107 031c 	add.w	r3, r7, #28
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4859      	ldr	r0, [pc, #356]	; (8006ef8 <HAL_ADC_MspInit+0x1d4>)
 8006d92:	f003 fb19 	bl	800a3c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006d96:	4b59      	ldr	r3, [pc, #356]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006d98:	4a59      	ldr	r2, [pc, #356]	; (8006f00 <HAL_ADC_MspInit+0x1dc>)
 8006d9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006d9c:	4b57      	ldr	r3, [pc, #348]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006da2:	4b56      	ldr	r3, [pc, #344]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006da8:	4b54      	ldr	r3, [pc, #336]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006dae:	4b53      	ldr	r3, [pc, #332]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006db4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006db6:	4b51      	ldr	r3, [pc, #324]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006dbe:	4b4f      	ldr	r3, [pc, #316]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006dc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006dc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8006dc6:	4b4d      	ldr	r3, [pc, #308]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006dcc:	4b4b      	ldr	r3, [pc, #300]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006dce:	2200      	movs	r2, #0
 8006dd0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006dd2:	4b4a      	ldr	r3, [pc, #296]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006dd8:	4848      	ldr	r0, [pc, #288]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006dda:	f002 ff85 	bl	8009ce8 <HAL_DMA_Init>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8006de4:	f000 fc8a 	bl	80076fc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a44      	ldr	r2, [pc, #272]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006dec:	639a      	str	r2, [r3, #56]	; 0x38
 8006dee:	4a43      	ldr	r2, [pc, #268]	; (8006efc <HAL_ADC_MspInit+0x1d8>)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8006df4:	e077      	b.n	8006ee6 <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a42      	ldr	r2, [pc, #264]	; (8006f04 <HAL_ADC_MspInit+0x1e0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d172      	bne.n	8006ee6 <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006e00:	2300      	movs	r3, #0
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	4b3b      	ldr	r3, [pc, #236]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e08:	4a3a      	ldr	r2, [pc, #232]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e0e:	6453      	str	r3, [r2, #68]	; 0x44
 8006e10:	4b38      	ldr	r3, [pc, #224]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	4b34      	ldr	r3, [pc, #208]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e24:	4a33      	ldr	r2, [pc, #204]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006e26:	f043 0304 	orr.w	r3, r3, #4
 8006e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8006e2c:	4b31      	ldr	r3, [pc, #196]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	f003 0304 	and.w	r3, r3, #4
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60bb      	str	r3, [r7, #8]
 8006e3c:	4b2d      	ldr	r3, [pc, #180]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	4a2c      	ldr	r2, [pc, #176]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006e42:	f043 0301 	orr.w	r3, r3, #1
 8006e46:	6313      	str	r3, [r2, #48]	; 0x30
 8006e48:	4b2a      	ldr	r3, [pc, #168]	; (8006ef4 <HAL_ADC_MspInit+0x1d0>)
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	60bb      	str	r3, [r7, #8]
 8006e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 8006e54:	2335      	movs	r3, #53	; 0x35
 8006e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e60:	f107 031c 	add.w	r3, r7, #28
 8006e64:	4619      	mov	r1, r3
 8006e66:	4824      	ldr	r0, [pc, #144]	; (8006ef8 <HAL_ADC_MspInit+0x1d4>)
 8006e68:	f003 faae 	bl	800a3c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 8006e6c:	23fc      	movs	r3, #252	; 0xfc
 8006e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e70:	2303      	movs	r3, #3
 8006e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e74:	2300      	movs	r3, #0
 8006e76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e78:	f107 031c 	add.w	r3, r7, #28
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4822      	ldr	r0, [pc, #136]	; (8006f08 <HAL_ADC_MspInit+0x1e4>)
 8006e80:	f003 faa2 	bl	800a3c8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006e84:	4b21      	ldr	r3, [pc, #132]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006e86:	4a22      	ldr	r2, [pc, #136]	; (8006f10 <HAL_ADC_MspInit+0x1ec>)
 8006e88:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006e8a:	4b20      	ldr	r3, [pc, #128]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e90:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e92:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e98:	4b1c      	ldr	r3, [pc, #112]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006e9e:	4b1b      	ldr	r3, [pc, #108]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ea4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006ea6:	4b19      	ldr	r3, [pc, #100]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eac:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006eae:	4b17      	ldr	r3, [pc, #92]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006eb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006eb4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8006eb6:	4b15      	ldr	r3, [pc, #84]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006ebc:	4b13      	ldr	r3, [pc, #76]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006ebe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ec2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ec4:	4b11      	ldr	r3, [pc, #68]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006eca:	4810      	ldr	r0, [pc, #64]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006ecc:	f002 ff0c 	bl	8009ce8 <HAL_DMA_Init>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 8006ed6:	f000 fc11 	bl	80076fc <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a0b      	ldr	r2, [pc, #44]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006ede:	639a      	str	r2, [r3, #56]	; 0x38
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <HAL_ADC_MspInit+0x1e8>)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006ee6:	bf00      	nop
 8006ee8:	3730      	adds	r7, #48	; 0x30
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	40012000 	.word	0x40012000
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	40020800 	.word	0x40020800
 8006efc:	20000c8c 	.word	0x20000c8c
 8006f00:	40026410 	.word	0x40026410
 8006f04:	40012100 	.word	0x40012100
 8006f08:	40020000 	.word	0x40020000
 8006f0c:	20000cec 	.word	0x20000cec
 8006f10:	40026440 	.word	0x40026440

08006f14 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006f18:	4b17      	ldr	r3, [pc, #92]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f1a:	4a18      	ldr	r2, [pc, #96]	; (8006f7c <MX_CAN1_Init+0x68>)
 8006f1c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8006f1e:	4b16      	ldr	r3, [pc, #88]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f20:	2203      	movs	r2, #3
 8006f22:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006f24:	4b14      	ldr	r3, [pc, #80]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006f2a:	4b13      	ldr	r3, [pc, #76]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8006f30:	4b11      	ldr	r3, [pc, #68]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f32:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8006f36:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8006f38:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006f3e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006f40:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f48:	2201      	movs	r2, #1
 8006f4a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8006f52:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f54:	2201      	movs	r2, #1
 8006f56:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006f58:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006f5e:	4b06      	ldr	r3, [pc, #24]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006f64:	4804      	ldr	r0, [pc, #16]	; (8006f78 <MX_CAN1_Init+0x64>)
 8006f66:	f001 ff25 	bl	8008db4 <HAL_CAN_Init>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8006f70:	f000 fbc4 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8006f74:	bf00      	nop
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000d4c 	.word	0x20000d4c
 8006f7c:	40006400 	.word	0x40006400

08006f80 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8006f84:	4b17      	ldr	r3, [pc, #92]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006f86:	4a18      	ldr	r2, [pc, #96]	; (8006fe8 <MX_CAN2_Init+0x68>)
 8006f88:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8006f8a:	4b16      	ldr	r3, [pc, #88]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006f8c:	2203      	movs	r2, #3
 8006f8e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8006f90:	4b14      	ldr	r3, [pc, #80]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006f96:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006f98:	2200      	movs	r2, #0
 8006f9a:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8006f9c:	4b11      	ldr	r3, [pc, #68]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006f9e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8006fa2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006fa6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006faa:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8006fac:	4b0d      	ldr	r3, [pc, #52]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 8006fb2:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8006fb8:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006fba:	2200      	movs	r2, #0
 8006fbc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8006fbe:	4b09      	ldr	r3, [pc, #36]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8006fc4:	4b07      	ldr	r3, [pc, #28]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8006fca:	4b06      	ldr	r3, [pc, #24]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8006fd0:	4804      	ldr	r0, [pc, #16]	; (8006fe4 <MX_CAN2_Init+0x64>)
 8006fd2:	f001 feef 	bl	8008db4 <HAL_CAN_Init>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8006fdc:	f000 fb8e 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8006fe0:	bf00      	nop
 8006fe2:	bd80      	pop	{r7, pc}
 8006fe4:	20000d74 	.word	0x20000d74
 8006fe8:	40006800 	.word	0x40006800

08006fec <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08c      	sub	sp, #48	; 0x30
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ff4:	f107 031c 	add.w	r3, r7, #28
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	601a      	str	r2, [r3, #0]
 8006ffc:	605a      	str	r2, [r3, #4]
 8006ffe:	609a      	str	r2, [r3, #8]
 8007000:	60da      	str	r2, [r3, #12]
 8007002:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a5a      	ldr	r2, [pc, #360]	; (8007174 <HAL_CAN_MspInit+0x188>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d14d      	bne.n	80070aa <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800700e:	4b5a      	ldr	r3, [pc, #360]	; (8007178 <HAL_CAN_MspInit+0x18c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	3301      	adds	r3, #1
 8007014:	4a58      	ldr	r2, [pc, #352]	; (8007178 <HAL_CAN_MspInit+0x18c>)
 8007016:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8007018:	4b57      	ldr	r3, [pc, #348]	; (8007178 <HAL_CAN_MspInit+0x18c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d10d      	bne.n	800703c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8007020:	2300      	movs	r3, #0
 8007022:	61bb      	str	r3, [r7, #24]
 8007024:	4b55      	ldr	r3, [pc, #340]	; (800717c <HAL_CAN_MspInit+0x190>)
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	4a54      	ldr	r2, [pc, #336]	; (800717c <HAL_CAN_MspInit+0x190>)
 800702a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800702e:	6413      	str	r3, [r2, #64]	; 0x40
 8007030:	4b52      	ldr	r3, [pc, #328]	; (800717c <HAL_CAN_MspInit+0x190>)
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007038:	61bb      	str	r3, [r7, #24]
 800703a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800703c:	2300      	movs	r3, #0
 800703e:	617b      	str	r3, [r7, #20]
 8007040:	4b4e      	ldr	r3, [pc, #312]	; (800717c <HAL_CAN_MspInit+0x190>)
 8007042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007044:	4a4d      	ldr	r2, [pc, #308]	; (800717c <HAL_CAN_MspInit+0x190>)
 8007046:	f043 0308 	orr.w	r3, r3, #8
 800704a:	6313      	str	r3, [r2, #48]	; 0x30
 800704c:	4b4b      	ldr	r3, [pc, #300]	; (800717c <HAL_CAN_MspInit+0x190>)
 800704e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007050:	f003 0308 	and.w	r3, r3, #8
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007058:	2303      	movs	r3, #3
 800705a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800705c:	2302      	movs	r3, #2
 800705e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007060:	2300      	movs	r3, #0
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007064:	2303      	movs	r3, #3
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007068:	2309      	movs	r3, #9
 800706a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800706c:	f107 031c 	add.w	r3, r7, #28
 8007070:	4619      	mov	r1, r3
 8007072:	4843      	ldr	r0, [pc, #268]	; (8007180 <HAL_CAN_MspInit+0x194>)
 8007074:	f003 f9a8 	bl	800a3c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8007078:	2200      	movs	r2, #0
 800707a:	2105      	movs	r1, #5
 800707c:	2013      	movs	r0, #19
 800707e:	f002 fded 	bl	8009c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8007082:	2013      	movs	r0, #19
 8007084:	f002 fe06 	bl	8009c94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8007088:	2200      	movs	r2, #0
 800708a:	2105      	movs	r1, #5
 800708c:	2014      	movs	r0, #20
 800708e:	f002 fde5 	bl	8009c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007092:	2014      	movs	r0, #20
 8007094:	f002 fdfe 	bl	8009c94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8007098:	2200      	movs	r2, #0
 800709a:	2105      	movs	r1, #5
 800709c:	2015      	movs	r0, #21
 800709e:	f002 fddd 	bl	8009c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80070a2:	2015      	movs	r0, #21
 80070a4:	f002 fdf6 	bl	8009c94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80070a8:	e05f      	b.n	800716a <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a35      	ldr	r2, [pc, #212]	; (8007184 <HAL_CAN_MspInit+0x198>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d15a      	bne.n	800716a <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80070b4:	2300      	movs	r3, #0
 80070b6:	613b      	str	r3, [r7, #16]
 80070b8:	4b30      	ldr	r3, [pc, #192]	; (800717c <HAL_CAN_MspInit+0x190>)
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	4a2f      	ldr	r2, [pc, #188]	; (800717c <HAL_CAN_MspInit+0x190>)
 80070be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80070c2:	6413      	str	r3, [r2, #64]	; 0x40
 80070c4:	4b2d      	ldr	r3, [pc, #180]	; (800717c <HAL_CAN_MspInit+0x190>)
 80070c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80070cc:	613b      	str	r3, [r7, #16]
 80070ce:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80070d0:	4b29      	ldr	r3, [pc, #164]	; (8007178 <HAL_CAN_MspInit+0x18c>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	4a28      	ldr	r2, [pc, #160]	; (8007178 <HAL_CAN_MspInit+0x18c>)
 80070d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80070da:	4b27      	ldr	r3, [pc, #156]	; (8007178 <HAL_CAN_MspInit+0x18c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d10d      	bne.n	80070fe <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80070e2:	2300      	movs	r3, #0
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	4b25      	ldr	r3, [pc, #148]	; (800717c <HAL_CAN_MspInit+0x190>)
 80070e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ea:	4a24      	ldr	r2, [pc, #144]	; (800717c <HAL_CAN_MspInit+0x190>)
 80070ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80070f0:	6413      	str	r3, [r2, #64]	; 0x40
 80070f2:	4b22      	ldr	r3, [pc, #136]	; (800717c <HAL_CAN_MspInit+0x190>)
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070fa:	60fb      	str	r3, [r7, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
 8007102:	4b1e      	ldr	r3, [pc, #120]	; (800717c <HAL_CAN_MspInit+0x190>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	4a1d      	ldr	r2, [pc, #116]	; (800717c <HAL_CAN_MspInit+0x190>)
 8007108:	f043 0302 	orr.w	r3, r3, #2
 800710c:	6313      	str	r3, [r2, #48]	; 0x30
 800710e:	4b1b      	ldr	r3, [pc, #108]	; (800717c <HAL_CAN_MspInit+0x190>)
 8007110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007112:	f003 0302 	and.w	r3, r3, #2
 8007116:	60bb      	str	r3, [r7, #8]
 8007118:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800711a:	2360      	movs	r3, #96	; 0x60
 800711c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800711e:	2302      	movs	r3, #2
 8007120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007122:	2300      	movs	r3, #0
 8007124:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007126:	2303      	movs	r3, #3
 8007128:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800712a:	2309      	movs	r3, #9
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800712e:	f107 031c 	add.w	r3, r7, #28
 8007132:	4619      	mov	r1, r3
 8007134:	4814      	ldr	r0, [pc, #80]	; (8007188 <HAL_CAN_MspInit+0x19c>)
 8007136:	f003 f947 	bl	800a3c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 800713a:	2200      	movs	r2, #0
 800713c:	2105      	movs	r1, #5
 800713e:	203f      	movs	r0, #63	; 0x3f
 8007140:	f002 fd8c 	bl	8009c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8007144:	203f      	movs	r0, #63	; 0x3f
 8007146:	f002 fda5 	bl	8009c94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800714a:	2200      	movs	r2, #0
 800714c:	2105      	movs	r1, #5
 800714e:	2040      	movs	r0, #64	; 0x40
 8007150:	f002 fd84 	bl	8009c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8007154:	2040      	movs	r0, #64	; 0x40
 8007156:	f002 fd9d 	bl	8009c94 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800715a:	2200      	movs	r2, #0
 800715c:	2105      	movs	r1, #5
 800715e:	2041      	movs	r0, #65	; 0x41
 8007160:	f002 fd7c 	bl	8009c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8007164:	2041      	movs	r0, #65	; 0x41
 8007166:	f002 fd95 	bl	8009c94 <HAL_NVIC_EnableIRQ>
}
 800716a:	bf00      	nop
 800716c:	3730      	adds	r7, #48	; 0x30
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	40006400 	.word	0x40006400
 8007178:	20000d9c 	.word	0x20000d9c
 800717c:	40023800 	.word	0x40023800
 8007180:	40020c00 	.word	0x40020c00
 8007184:	40006800 	.word	0x40006800
 8007188:	40020400 	.word	0x40020400

0800718c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007190:	4b06      	ldr	r3, [pc, #24]	; (80071ac <MX_CRC_Init+0x20>)
 8007192:	4a07      	ldr	r2, [pc, #28]	; (80071b0 <MX_CRC_Init+0x24>)
 8007194:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007196:	4805      	ldr	r0, [pc, #20]	; (80071ac <MX_CRC_Init+0x20>)
 8007198:	f002 fd8a 	bl	8009cb0 <HAL_CRC_Init>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80071a2:	f000 faab 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80071a6:	bf00      	nop
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000da0 	.word	0x20000da0
 80071b0:	40023000 	.word	0x40023000

080071b4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a0b      	ldr	r2, [pc, #44]	; (80071f0 <HAL_CRC_MspInit+0x3c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d10d      	bne.n	80071e2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80071c6:	2300      	movs	r3, #0
 80071c8:	60fb      	str	r3, [r7, #12]
 80071ca:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <HAL_CRC_MspInit+0x40>)
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <HAL_CRC_MspInit+0x40>)
 80071d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80071d4:	6313      	str	r3, [r2, #48]	; 0x30
 80071d6:	4b07      	ldr	r3, [pc, #28]	; (80071f4 <HAL_CRC_MspInit+0x40>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80071e2:	bf00      	nop
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40023000 	.word	0x40023000
 80071f4:	40023800 	.word	0x40023800

080071f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80071fe:	2300      	movs	r3, #0
 8007200:	607b      	str	r3, [r7, #4]
 8007202:	4b18      	ldr	r3, [pc, #96]	; (8007264 <MX_DMA_Init+0x6c>)
 8007204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007206:	4a17      	ldr	r2, [pc, #92]	; (8007264 <MX_DMA_Init+0x6c>)
 8007208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800720c:	6313      	str	r3, [r2, #48]	; 0x30
 800720e:	4b15      	ldr	r3, [pc, #84]	; (8007264 <MX_DMA_Init+0x6c>)
 8007210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007212:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007216:	607b      	str	r3, [r7, #4]
 8007218:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800721a:	2200      	movs	r2, #0
 800721c:	2105      	movs	r1, #5
 800721e:	2038      	movs	r0, #56	; 0x38
 8007220:	f002 fd1c 	bl	8009c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007224:	2038      	movs	r0, #56	; 0x38
 8007226:	f002 fd35 	bl	8009c94 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800722a:	2200      	movs	r2, #0
 800722c:	2105      	movs	r1, #5
 800722e:	203a      	movs	r0, #58	; 0x3a
 8007230:	f002 fd14 	bl	8009c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007234:	203a      	movs	r0, #58	; 0x3a
 8007236:	f002 fd2d 	bl	8009c94 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800723a:	2200      	movs	r2, #0
 800723c:	2105      	movs	r1, #5
 800723e:	2044      	movs	r0, #68	; 0x44
 8007240:	f002 fd0c 	bl	8009c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8007244:	2044      	movs	r0, #68	; 0x44
 8007246:	f002 fd25 	bl	8009c94 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800724a:	2200      	movs	r2, #0
 800724c:	2105      	movs	r1, #5
 800724e:	2046      	movs	r0, #70	; 0x46
 8007250:	f002 fd04 	bl	8009c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007254:	2046      	movs	r0, #70	; 0x46
 8007256:	f002 fd1d 	bl	8009c94 <HAL_NVIC_EnableIRQ>

}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	40023800 	.word	0x40023800

08007268 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0

}
 800726c:	bf00      	nop
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8007276:	b480      	push	{r7}
 8007278:	af00      	add	r7, sp, #0
return 0;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8007290:	bf00      	nop
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80072a0:	bf00      	nop
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr
	...

080072ac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80072ac:	b580      	push	{r7, lr}
 80072ae:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 80072b0:	4a10      	ldr	r2, [pc, #64]	; (80072f4 <MX_FREERTOS_Init+0x48>)
 80072b2:	2101      	movs	r1, #1
 80072b4:	2010      	movs	r0, #16
 80072b6:	f007 fd5b 	bl	800ed70 <osMessageQueueNew>
 80072ba:	4603      	mov	r3, r0
 80072bc:	4a0e      	ldr	r2, [pc, #56]	; (80072f8 <MX_FREERTOS_Init+0x4c>)
 80072be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80072c0:	4a0e      	ldr	r2, [pc, #56]	; (80072fc <MX_FREERTOS_Init+0x50>)
 80072c2:	2100      	movs	r1, #0
 80072c4:	480e      	ldr	r0, [pc, #56]	; (8007300 <MX_FREERTOS_Init+0x54>)
 80072c6:	f007 fa59 	bl	800e77c <osThreadNew>
 80072ca:	4603      	mov	r3, r0
 80072cc:	4a0d      	ldr	r2, [pc, #52]	; (8007304 <MX_FREERTOS_Init+0x58>)
 80072ce:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 80072d0:	4a0d      	ldr	r2, [pc, #52]	; (8007308 <MX_FREERTOS_Init+0x5c>)
 80072d2:	2100      	movs	r1, #0
 80072d4:	480d      	ldr	r0, [pc, #52]	; (800730c <MX_FREERTOS_Init+0x60>)
 80072d6:	f007 fa51 	bl	800e77c <osThreadNew>
 80072da:	4603      	mov	r3, r0
 80072dc:	4a0c      	ldr	r2, [pc, #48]	; (8007310 <MX_FREERTOS_Init+0x64>)
 80072de:	6013      	str	r3, [r2, #0]

  /* creation of testbench */
  testbenchHandle = osThreadNew(testbench_entry, NULL, &testbench_attributes);
 80072e0:	4a0c      	ldr	r2, [pc, #48]	; (8007314 <MX_FREERTOS_Init+0x68>)
 80072e2:	2100      	movs	r1, #0
 80072e4:	480c      	ldr	r0, [pc, #48]	; (8007318 <MX_FREERTOS_Init+0x6c>)
 80072e6:	f007 fa49 	bl	800e77c <osThreadNew>
 80072ea:	4603      	mov	r3, r0
 80072ec:	4a0b      	ldr	r2, [pc, #44]	; (800731c <MX_FREERTOS_Init+0x70>)
 80072ee:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80072f0:	bf00      	nop
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	0801628c 	.word	0x0801628c
 80072f8:	20001074 	.word	0x20001074
 80072fc:	08016220 	.word	0x08016220
 8007300:	08007321 	.word	0x08007321
 8007304:	20000da8 	.word	0x20000da8
 8007308:	08016244 	.word	0x08016244
 800730c:	08002049 	.word	0x08002049
 8007310:	2000106c 	.word	0x2000106c
 8007314:	08016268 	.word	0x08016268
 8007318:	08006a1d 	.word	0x08006a1d
 800731c:	20001070 	.word	0x20001070

08007320 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007328:	2001      	movs	r0, #1
 800732a:	f007 fab9 	bl	800e8a0 <osDelay>
 800732e:	e7fb      	b.n	8007328 <StartDefaultTask+0x8>

08007330 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08a      	sub	sp, #40	; 0x28
 8007334:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007336:	f107 0314 	add.w	r3, r7, #20
 800733a:	2200      	movs	r2, #0
 800733c:	601a      	str	r2, [r3, #0]
 800733e:	605a      	str	r2, [r3, #4]
 8007340:	609a      	str	r2, [r3, #8]
 8007342:	60da      	str	r2, [r3, #12]
 8007344:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007346:	2300      	movs	r3, #0
 8007348:	613b      	str	r3, [r7, #16]
 800734a:	4b55      	ldr	r3, [pc, #340]	; (80074a0 <MX_GPIO_Init+0x170>)
 800734c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734e:	4a54      	ldr	r2, [pc, #336]	; (80074a0 <MX_GPIO_Init+0x170>)
 8007350:	f043 0304 	orr.w	r3, r3, #4
 8007354:	6313      	str	r3, [r2, #48]	; 0x30
 8007356:	4b52      	ldr	r3, [pc, #328]	; (80074a0 <MX_GPIO_Init+0x170>)
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	613b      	str	r3, [r7, #16]
 8007360:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007362:	2300      	movs	r3, #0
 8007364:	60fb      	str	r3, [r7, #12]
 8007366:	4b4e      	ldr	r3, [pc, #312]	; (80074a0 <MX_GPIO_Init+0x170>)
 8007368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736a:	4a4d      	ldr	r2, [pc, #308]	; (80074a0 <MX_GPIO_Init+0x170>)
 800736c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007370:	6313      	str	r3, [r2, #48]	; 0x30
 8007372:	4b4b      	ldr	r3, [pc, #300]	; (80074a0 <MX_GPIO_Init+0x170>)
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800737a:	60fb      	str	r3, [r7, #12]
 800737c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800737e:	2300      	movs	r3, #0
 8007380:	60bb      	str	r3, [r7, #8]
 8007382:	4b47      	ldr	r3, [pc, #284]	; (80074a0 <MX_GPIO_Init+0x170>)
 8007384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007386:	4a46      	ldr	r2, [pc, #280]	; (80074a0 <MX_GPIO_Init+0x170>)
 8007388:	f043 0301 	orr.w	r3, r3, #1
 800738c:	6313      	str	r3, [r2, #48]	; 0x30
 800738e:	4b44      	ldr	r3, [pc, #272]	; (80074a0 <MX_GPIO_Init+0x170>)
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	f003 0301 	and.w	r3, r3, #1
 8007396:	60bb      	str	r3, [r7, #8]
 8007398:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800739a:	2300      	movs	r3, #0
 800739c:	607b      	str	r3, [r7, #4]
 800739e:	4b40      	ldr	r3, [pc, #256]	; (80074a0 <MX_GPIO_Init+0x170>)
 80073a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a2:	4a3f      	ldr	r2, [pc, #252]	; (80074a0 <MX_GPIO_Init+0x170>)
 80073a4:	f043 0302 	orr.w	r3, r3, #2
 80073a8:	6313      	str	r3, [r2, #48]	; 0x30
 80073aa:	4b3d      	ldr	r3, [pc, #244]	; (80074a0 <MX_GPIO_Init+0x170>)
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	f003 0302 	and.w	r3, r3, #2
 80073b2:	607b      	str	r3, [r7, #4]
 80073b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80073b6:	2300      	movs	r3, #0
 80073b8:	603b      	str	r3, [r7, #0]
 80073ba:	4b39      	ldr	r3, [pc, #228]	; (80074a0 <MX_GPIO_Init+0x170>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	4a38      	ldr	r2, [pc, #224]	; (80074a0 <MX_GPIO_Init+0x170>)
 80073c0:	f043 0308 	orr.w	r3, r3, #8
 80073c4:	6313      	str	r3, [r2, #48]	; 0x30
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <MX_GPIO_Init+0x170>)
 80073c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ca:	f003 0308 	and.w	r3, r3, #8
 80073ce:	603b      	str	r3, [r7, #0]
 80073d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 80073d2:	2200      	movs	r2, #0
 80073d4:	f641 4102 	movw	r1, #7170	; 0x1c02
 80073d8:	4832      	ldr	r0, [pc, #200]	; (80074a4 <MX_GPIO_Init+0x174>)
 80073da:	f003 f991 	bl	800a700 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 80073de:	2305      	movs	r3, #5
 80073e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80073e2:	2303      	movs	r3, #3
 80073e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80073ea:	f107 0314 	add.w	r3, r7, #20
 80073ee:	4619      	mov	r1, r3
 80073f0:	482d      	ldr	r0, [pc, #180]	; (80074a8 <MX_GPIO_Init+0x178>)
 80073f2:	f002 ffe9 	bl	800a3c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN1_Pin;
 80073f6:	2302      	movs	r3, #2
 80073f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80073fa:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80073fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007400:	2300      	movs	r3, #0
 8007402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN1_GPIO_Port, &GPIO_InitStruct);
 8007404:	f107 0314 	add.w	r3, r7, #20
 8007408:	4619      	mov	r1, r3
 800740a:	4827      	ldr	r0, [pc, #156]	; (80074a8 <MX_GPIO_Init+0x178>)
 800740c:	f002 ffdc 	bl	800a3c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN2_Pin;
 8007410:	2308      	movs	r3, #8
 8007412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007414:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800741a:	2300      	movs	r3, #0
 800741c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN2_GPIO_Port, &GPIO_InitStruct);
 800741e:	f107 0314 	add.w	r3, r7, #20
 8007422:	4619      	mov	r1, r3
 8007424:	4820      	ldr	r0, [pc, #128]	; (80074a8 <MX_GPIO_Init+0x178>)
 8007426:	f002 ffcf 	bl	800a3c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 800742a:	f641 4302 	movw	r3, #7170	; 0x1c02
 800742e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007430:	2301      	movs	r3, #1
 8007432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007438:	2300      	movs	r3, #0
 800743a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800743c:	f107 0314 	add.w	r3, r7, #20
 8007440:	4619      	mov	r1, r3
 8007442:	4818      	ldr	r0, [pc, #96]	; (80074a4 <MX_GPIO_Init+0x174>)
 8007444:	f002 ffc0 	bl	800a3c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 8007448:	2318      	movs	r3, #24
 800744a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800744c:	2300      	movs	r3, #0
 800744e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007450:	2300      	movs	r3, #0
 8007452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007454:	f107 0314 	add.w	r3, r7, #20
 8007458:	4619      	mov	r1, r3
 800745a:	4814      	ldr	r0, [pc, #80]	; (80074ac <MX_GPIO_Init+0x17c>)
 800745c:	f002 ffb4 	bl	800a3c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIN3_Pin|DIN4_Pin;
 8007460:	2390      	movs	r3, #144	; 0x90
 8007462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007464:	2300      	movs	r3, #0
 8007466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007468:	2300      	movs	r3, #0
 800746a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800746c:	f107 0314 	add.w	r3, r7, #20
 8007470:	4619      	mov	r1, r3
 8007472:	480c      	ldr	r0, [pc, #48]	; (80074a4 <MX_GPIO_Init+0x174>)
 8007474:	f002 ffa8 	bl	800a3c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8007478:	2200      	movs	r2, #0
 800747a:	2105      	movs	r1, #5
 800747c:	2007      	movs	r0, #7
 800747e:	f002 fbed 	bl	8009c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8007482:	2007      	movs	r0, #7
 8007484:	f002 fc06 	bl	8009c94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8007488:	2200      	movs	r2, #0
 800748a:	2105      	movs	r1, #5
 800748c:	2009      	movs	r0, #9
 800748e:	f002 fbe5 	bl	8009c5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8007492:	2009      	movs	r0, #9
 8007494:	f002 fbfe 	bl	8009c94 <HAL_NVIC_EnableIRQ>

}
 8007498:	bf00      	nop
 800749a:	3728      	adds	r7, #40	; 0x28
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40020400 	.word	0x40020400
 80074a8:	40020800 	.word	0x40020800
 80074ac:	40020c00 	.word	0x40020c00

080074b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80074b4:	4b12      	ldr	r3, [pc, #72]	; (8007500 <MX_I2C1_Init+0x50>)
 80074b6:	4a13      	ldr	r2, [pc, #76]	; (8007504 <MX_I2C1_Init+0x54>)
 80074b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80074ba:	4b11      	ldr	r3, [pc, #68]	; (8007500 <MX_I2C1_Init+0x50>)
 80074bc:	4a12      	ldr	r2, [pc, #72]	; (8007508 <MX_I2C1_Init+0x58>)
 80074be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <MX_I2C1_Init+0x50>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80074c6:	4b0e      	ldr	r3, [pc, #56]	; (8007500 <MX_I2C1_Init+0x50>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80074cc:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <MX_I2C1_Init+0x50>)
 80074ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80074d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80074d4:	4b0a      	ldr	r3, [pc, #40]	; (8007500 <MX_I2C1_Init+0x50>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80074da:	4b09      	ldr	r3, [pc, #36]	; (8007500 <MX_I2C1_Init+0x50>)
 80074dc:	2200      	movs	r2, #0
 80074de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <MX_I2C1_Init+0x50>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80074e6:	4b06      	ldr	r3, [pc, #24]	; (8007500 <MX_I2C1_Init+0x50>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80074ec:	4804      	ldr	r0, [pc, #16]	; (8007500 <MX_I2C1_Init+0x50>)
 80074ee:	f003 f939 	bl	800a764 <HAL_I2C_Init>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80074f8:	f000 f900 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80074fc:	bf00      	nop
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20001078 	.word	0x20001078
 8007504:	40005400 	.word	0x40005400
 8007508:	000186a0 	.word	0x000186a0

0800750c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	; 0x28
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007514:	f107 0314 	add.w	r3, r7, #20
 8007518:	2200      	movs	r2, #0
 800751a:	601a      	str	r2, [r3, #0]
 800751c:	605a      	str	r2, [r3, #4]
 800751e:	609a      	str	r2, [r3, #8]
 8007520:	60da      	str	r2, [r3, #12]
 8007522:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a19      	ldr	r2, [pc, #100]	; (8007590 <HAL_I2C_MspInit+0x84>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d12c      	bne.n	8007588 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800752e:	2300      	movs	r3, #0
 8007530:	613b      	str	r3, [r7, #16]
 8007532:	4b18      	ldr	r3, [pc, #96]	; (8007594 <HAL_I2C_MspInit+0x88>)
 8007534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007536:	4a17      	ldr	r2, [pc, #92]	; (8007594 <HAL_I2C_MspInit+0x88>)
 8007538:	f043 0302 	orr.w	r3, r3, #2
 800753c:	6313      	str	r3, [r2, #48]	; 0x30
 800753e:	4b15      	ldr	r3, [pc, #84]	; (8007594 <HAL_I2C_MspInit+0x88>)
 8007540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007542:	f003 0302 	and.w	r3, r3, #2
 8007546:	613b      	str	r3, [r7, #16]
 8007548:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 800754a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800754e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007550:	2312      	movs	r3, #18
 8007552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007554:	2301      	movs	r3, #1
 8007556:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007558:	2303      	movs	r3, #3
 800755a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800755c:	2304      	movs	r3, #4
 800755e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007560:	f107 0314 	add.w	r3, r7, #20
 8007564:	4619      	mov	r1, r3
 8007566:	480c      	ldr	r0, [pc, #48]	; (8007598 <HAL_I2C_MspInit+0x8c>)
 8007568:	f002 ff2e 	bl	800a3c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]
 8007570:	4b08      	ldr	r3, [pc, #32]	; (8007594 <HAL_I2C_MspInit+0x88>)
 8007572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007574:	4a07      	ldr	r2, [pc, #28]	; (8007594 <HAL_I2C_MspInit+0x88>)
 8007576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800757a:	6413      	str	r3, [r2, #64]	; 0x40
 800757c:	4b05      	ldr	r3, [pc, #20]	; (8007594 <HAL_I2C_MspInit+0x88>)
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007584:	60fb      	str	r3, [r7, #12]
 8007586:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007588:	bf00      	nop
 800758a:	3728      	adds	r7, #40	; 0x28
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	40005400 	.word	0x40005400
 8007594:	40023800 	.word	0x40023800
 8007598:	40020400 	.word	0x40020400

0800759c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80075a0:	f000 ffc8 	bl	8008534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80075a4:	f000 f82c 	bl	8007600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80075a8:	f7ff fec2 	bl	8007330 <MX_GPIO_Init>
  MX_DMA_Init();
 80075ac:	f7ff fe24 	bl	80071f8 <MX_DMA_Init>
  MX_ADC1_Init();
 80075b0:	f7ff fa88 	bl	8006ac4 <MX_ADC1_Init>
  MX_CAN1_Init();
 80075b4:	f7ff fcae 	bl	8006f14 <MX_CAN1_Init>
  MX_CAN2_Init();
 80075b8:	f7ff fce2 	bl	8006f80 <MX_CAN2_Init>
  MX_CRC_Init();
 80075bc:	f7ff fde6 	bl	800718c <MX_CRC_Init>
  MX_RNG_Init();
 80075c0:	f000 f8a2 	bl	8007708 <MX_RNG_Init>
  MX_USART2_UART_Init();
 80075c4:	f000 fe7e 	bl	80082c4 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80075c8:	f000 fc0c 	bl	8007de4 <MX_TIM4_Init>
  MX_ADC2_Init();
 80075cc:	f7ff faf6 	bl	8006bbc <MX_ADC2_Init>
  MX_I2C1_Init();
 80075d0:	f7ff ff6e 	bl	80074b0 <MX_I2C1_Init>
  MX_SPI2_Init();
 80075d4:	f000 f8ce 	bl	8007774 <MX_SPI2_Init>
  MX_TIM5_Init();
 80075d8:	f000 fc90 	bl	8007efc <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80075dc:	f000 fe48 	bl	8008270 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80075e0:	f000 fd1a 	bl	8008018 <MX_TIM14_Init>
  MX_TIM2_Init();
 80075e4:	f000 fb62 	bl	8007cac <MX_TIM2_Init>
  MX_TIM9_Init();
 80075e8:	f000 fcdc 	bl	8007fa4 <MX_TIM9_Init>
  MX_TIM3_Init();
 80075ec:	f000 fbac 	bl	8007d48 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80075f0:	f007 f87a 	bl	800e6e8 <osKernelInitialize>
  MX_FREERTOS_Init();
 80075f4:	f7ff fe5a 	bl	80072ac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80075f8:	f007 f89a 	bl	800e730 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80075fc:	e7fe      	b.n	80075fc <main+0x60>
	...

08007600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b094      	sub	sp, #80	; 0x50
 8007604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007606:	f107 0320 	add.w	r3, r7, #32
 800760a:	2230      	movs	r2, #48	; 0x30
 800760c:	2100      	movs	r1, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f00b ff52 	bl	80134b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007614:	f107 030c 	add.w	r3, r7, #12
 8007618:	2200      	movs	r2, #0
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	605a      	str	r2, [r3, #4]
 800761e:	609a      	str	r2, [r3, #8]
 8007620:	60da      	str	r2, [r3, #12]
 8007622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007624:	2300      	movs	r3, #0
 8007626:	60bb      	str	r3, [r7, #8]
 8007628:	4b28      	ldr	r3, [pc, #160]	; (80076cc <SystemClock_Config+0xcc>)
 800762a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800762c:	4a27      	ldr	r2, [pc, #156]	; (80076cc <SystemClock_Config+0xcc>)
 800762e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007632:	6413      	str	r3, [r2, #64]	; 0x40
 8007634:	4b25      	ldr	r3, [pc, #148]	; (80076cc <SystemClock_Config+0xcc>)
 8007636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800763c:	60bb      	str	r3, [r7, #8]
 800763e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007640:	2300      	movs	r3, #0
 8007642:	607b      	str	r3, [r7, #4]
 8007644:	4b22      	ldr	r3, [pc, #136]	; (80076d0 <SystemClock_Config+0xd0>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a21      	ldr	r2, [pc, #132]	; (80076d0 <SystemClock_Config+0xd0>)
 800764a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	4b1f      	ldr	r3, [pc, #124]	; (80076d0 <SystemClock_Config+0xd0>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007658:	607b      	str	r3, [r7, #4]
 800765a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800765c:	2301      	movs	r3, #1
 800765e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007666:	2302      	movs	r3, #2
 8007668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800766a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800766e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007670:	2308      	movs	r3, #8
 8007672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007674:	23a8      	movs	r3, #168	; 0xa8
 8007676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007678:	2302      	movs	r3, #2
 800767a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800767c:	2307      	movs	r3, #7
 800767e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007680:	f107 0320 	add.w	r3, r7, #32
 8007684:	4618      	mov	r0, r3
 8007686:	f003 f9b1 	bl	800a9ec <HAL_RCC_OscConfig>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007690:	f000 f834 	bl	80076fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007694:	230f      	movs	r3, #15
 8007696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007698:	2302      	movs	r3, #2
 800769a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80076a0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80076a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80076a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80076ac:	f107 030c 	add.w	r3, r7, #12
 80076b0:	2105      	movs	r1, #5
 80076b2:	4618      	mov	r0, r3
 80076b4:	f003 fc12 	bl	800aedc <HAL_RCC_ClockConfig>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80076be:	f000 f81d 	bl	80076fc <Error_Handler>
  }
}
 80076c2:	bf00      	nop
 80076c4:	3750      	adds	r7, #80	; 0x50
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40023800 	.word	0x40023800
 80076d0:	40007000 	.word	0x40007000

080076d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a05      	ldr	r2, [pc, #20]	; (80076f8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80076e2:	4293      	cmp	r3, r2
 80076e4:	d101      	bne.n	80076ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80076e6:	f000 ff47 	bl	8008578 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  PeriodElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f005 faf3 	bl	800ccd6 <PeriodElapsedCallback>

  /* USER CODE END Callback 1 */
}
 80076f0:	bf00      	nop
 80076f2:	3708      	adds	r7, #8
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	40010000 	.word	0x40010000

080076fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076fc:	b480      	push	{r7}
 80076fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007700:	b672      	cpsid	i
}
 8007702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007704:	e7fe      	b.n	8007704 <Error_Handler+0x8>
	...

08007708 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800770c:	4b06      	ldr	r3, [pc, #24]	; (8007728 <MX_RNG_Init+0x20>)
 800770e:	4a07      	ldr	r2, [pc, #28]	; (800772c <MX_RNG_Init+0x24>)
 8007710:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8007712:	4805      	ldr	r0, [pc, #20]	; (8007728 <MX_RNG_Init+0x20>)
 8007714:	f003 fe32 	bl	800b37c <HAL_RNG_Init>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d001      	beq.n	8007722 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800771e:	f7ff ffed 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8007722:	bf00      	nop
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200010cc 	.word	0x200010cc
 800772c:	50060800 	.word	0x50060800

08007730 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a0b      	ldr	r2, [pc, #44]	; (800776c <HAL_RNG_MspInit+0x3c>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d10d      	bne.n	800775e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	4b0a      	ldr	r3, [pc, #40]	; (8007770 <HAL_RNG_MspInit+0x40>)
 8007748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774a:	4a09      	ldr	r2, [pc, #36]	; (8007770 <HAL_RNG_MspInit+0x40>)
 800774c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007750:	6353      	str	r3, [r2, #52]	; 0x34
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <HAL_RNG_MspInit+0x40>)
 8007754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800775e:	bf00      	nop
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop
 800776c:	50060800 	.word	0x50060800
 8007770:	40023800 	.word	0x40023800

08007774 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007778:	4b17      	ldr	r3, [pc, #92]	; (80077d8 <MX_SPI2_Init+0x64>)
 800777a:	4a18      	ldr	r2, [pc, #96]	; (80077dc <MX_SPI2_Init+0x68>)
 800777c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800777e:	4b16      	ldr	r3, [pc, #88]	; (80077d8 <MX_SPI2_Init+0x64>)
 8007780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007784:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007786:	4b14      	ldr	r3, [pc, #80]	; (80077d8 <MX_SPI2_Init+0x64>)
 8007788:	2200      	movs	r2, #0
 800778a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800778c:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <MX_SPI2_Init+0x64>)
 800778e:	2200      	movs	r2, #0
 8007790:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007792:	4b11      	ldr	r3, [pc, #68]	; (80077d8 <MX_SPI2_Init+0x64>)
 8007794:	2200      	movs	r2, #0
 8007796:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007798:	4b0f      	ldr	r3, [pc, #60]	; (80077d8 <MX_SPI2_Init+0x64>)
 800779a:	2200      	movs	r2, #0
 800779c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800779e:	4b0e      	ldr	r3, [pc, #56]	; (80077d8 <MX_SPI2_Init+0x64>)
 80077a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077a4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077a6:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <MX_SPI2_Init+0x64>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <MX_SPI2_Init+0x64>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <MX_SPI2_Init+0x64>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077b8:	4b07      	ldr	r3, [pc, #28]	; (80077d8 <MX_SPI2_Init+0x64>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80077be:	4b06      	ldr	r3, [pc, #24]	; (80077d8 <MX_SPI2_Init+0x64>)
 80077c0:	220a      	movs	r2, #10
 80077c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80077c4:	4804      	ldr	r0, [pc, #16]	; (80077d8 <MX_SPI2_Init+0x64>)
 80077c6:	f003 fe03 	bl	800b3d0 <HAL_SPI_Init>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80077d0:	f7ff ff94 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80077d4:	bf00      	nop
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200010dc 	.word	0x200010dc
 80077dc:	40003800 	.word	0x40003800

080077e0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08a      	sub	sp, #40	; 0x28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80077e8:	f107 0314 	add.w	r3, r7, #20
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	605a      	str	r2, [r3, #4]
 80077f2:	609a      	str	r2, [r3, #8]
 80077f4:	60da      	str	r2, [r3, #12]
 80077f6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a19      	ldr	r2, [pc, #100]	; (8007864 <HAL_SPI_MspInit+0x84>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d12c      	bne.n	800785c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007802:	2300      	movs	r3, #0
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	4b18      	ldr	r3, [pc, #96]	; (8007868 <HAL_SPI_MspInit+0x88>)
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	4a17      	ldr	r2, [pc, #92]	; (8007868 <HAL_SPI_MspInit+0x88>)
 800780c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007810:	6413      	str	r3, [r2, #64]	; 0x40
 8007812:	4b15      	ldr	r3, [pc, #84]	; (8007868 <HAL_SPI_MspInit+0x88>)
 8007814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800781a:	613b      	str	r3, [r7, #16]
 800781c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800781e:	2300      	movs	r3, #0
 8007820:	60fb      	str	r3, [r7, #12]
 8007822:	4b11      	ldr	r3, [pc, #68]	; (8007868 <HAL_SPI_MspInit+0x88>)
 8007824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007826:	4a10      	ldr	r2, [pc, #64]	; (8007868 <HAL_SPI_MspInit+0x88>)
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	6313      	str	r3, [r2, #48]	; 0x30
 800782e:	4b0e      	ldr	r3, [pc, #56]	; (8007868 <HAL_SPI_MspInit+0x88>)
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	60fb      	str	r3, [r7, #12]
 8007838:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800783a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800783e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007840:	2302      	movs	r3, #2
 8007842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007844:	2300      	movs	r3, #0
 8007846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007848:	2303      	movs	r3, #3
 800784a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800784c:	2305      	movs	r3, #5
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007850:	f107 0314 	add.w	r3, r7, #20
 8007854:	4619      	mov	r1, r3
 8007856:	4805      	ldr	r0, [pc, #20]	; (800786c <HAL_SPI_MspInit+0x8c>)
 8007858:	f002 fdb6 	bl	800a3c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800785c:	bf00      	nop
 800785e:	3728      	adds	r7, #40	; 0x28
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	40003800 	.word	0x40003800
 8007868:	40023800 	.word	0x40023800
 800786c:	40020400 	.word	0x40020400

08007870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007876:	2300      	movs	r3, #0
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	4b12      	ldr	r3, [pc, #72]	; (80078c4 <HAL_MspInit+0x54>)
 800787c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800787e:	4a11      	ldr	r2, [pc, #68]	; (80078c4 <HAL_MspInit+0x54>)
 8007880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007884:	6453      	str	r3, [r2, #68]	; 0x44
 8007886:	4b0f      	ldr	r3, [pc, #60]	; (80078c4 <HAL_MspInit+0x54>)
 8007888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800788e:	607b      	str	r3, [r7, #4]
 8007890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007892:	2300      	movs	r3, #0
 8007894:	603b      	str	r3, [r7, #0]
 8007896:	4b0b      	ldr	r3, [pc, #44]	; (80078c4 <HAL_MspInit+0x54>)
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	4a0a      	ldr	r2, [pc, #40]	; (80078c4 <HAL_MspInit+0x54>)
 800789c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078a0:	6413      	str	r3, [r2, #64]	; 0x40
 80078a2:	4b08      	ldr	r3, [pc, #32]	; (80078c4 <HAL_MspInit+0x54>)
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80078ae:	2200      	movs	r2, #0
 80078b0:	210f      	movs	r1, #15
 80078b2:	f06f 0001 	mvn.w	r0, #1
 80078b6:	f002 f9d1 	bl	8009c5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80078ba:	bf00      	nop
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	40023800 	.word	0x40023800

080078c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08c      	sub	sp, #48	; 0x30
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80078d8:	2300      	movs	r3, #0
 80078da:	60bb      	str	r3, [r7, #8]
 80078dc:	4b2f      	ldr	r3, [pc, #188]	; (800799c <HAL_InitTick+0xd4>)
 80078de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e0:	4a2e      	ldr	r2, [pc, #184]	; (800799c <HAL_InitTick+0xd4>)
 80078e2:	f043 0301 	orr.w	r3, r3, #1
 80078e6:	6453      	str	r3, [r2, #68]	; 0x44
 80078e8:	4b2c      	ldr	r3, [pc, #176]	; (800799c <HAL_InitTick+0xd4>)
 80078ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ec:	f003 0301 	and.w	r3, r3, #1
 80078f0:	60bb      	str	r3, [r7, #8]
 80078f2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80078f4:	f107 020c 	add.w	r2, r7, #12
 80078f8:	f107 0310 	add.w	r3, r7, #16
 80078fc:	4611      	mov	r1, r2
 80078fe:	4618      	mov	r0, r3
 8007900:	f003 fd0a 	bl	800b318 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8007904:	f003 fcf4 	bl	800b2f0 <HAL_RCC_GetPCLK2Freq>
 8007908:	4603      	mov	r3, r0
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800790e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007910:	4a23      	ldr	r2, [pc, #140]	; (80079a0 <HAL_InitTick+0xd8>)
 8007912:	fba2 2303 	umull	r2, r3, r2, r3
 8007916:	0c9b      	lsrs	r3, r3, #18
 8007918:	3b01      	subs	r3, #1
 800791a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800791c:	4b21      	ldr	r3, [pc, #132]	; (80079a4 <HAL_InitTick+0xdc>)
 800791e:	4a22      	ldr	r2, [pc, #136]	; (80079a8 <HAL_InitTick+0xe0>)
 8007920:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007922:	4b20      	ldr	r3, [pc, #128]	; (80079a4 <HAL_InitTick+0xdc>)
 8007924:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007928:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800792a:	4a1e      	ldr	r2, [pc, #120]	; (80079a4 <HAL_InitTick+0xdc>)
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007930:	4b1c      	ldr	r3, [pc, #112]	; (80079a4 <HAL_InitTick+0xdc>)
 8007932:	2200      	movs	r2, #0
 8007934:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007936:	4b1b      	ldr	r3, [pc, #108]	; (80079a4 <HAL_InitTick+0xdc>)
 8007938:	2200      	movs	r2, #0
 800793a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800793c:	4b19      	ldr	r3, [pc, #100]	; (80079a4 <HAL_InitTick+0xdc>)
 800793e:	2200      	movs	r2, #0
 8007940:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8007942:	4818      	ldr	r0, [pc, #96]	; (80079a4 <HAL_InitTick+0xdc>)
 8007944:	f003 fdcd 	bl	800b4e2 <HAL_TIM_Base_Init>
 8007948:	4603      	mov	r3, r0
 800794a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800794e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007952:	2b00      	cmp	r3, #0
 8007954:	d11b      	bne.n	800798e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007956:	4813      	ldr	r0, [pc, #76]	; (80079a4 <HAL_InitTick+0xdc>)
 8007958:	f003 fe12 	bl	800b580 <HAL_TIM_Base_Start_IT>
 800795c:	4603      	mov	r3, r0
 800795e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007962:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007966:	2b00      	cmp	r3, #0
 8007968:	d111      	bne.n	800798e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800796a:	2019      	movs	r0, #25
 800796c:	f002 f992 	bl	8009c94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2b0f      	cmp	r3, #15
 8007974:	d808      	bhi.n	8007988 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8007976:	2200      	movs	r2, #0
 8007978:	6879      	ldr	r1, [r7, #4]
 800797a:	2019      	movs	r0, #25
 800797c:	f002 f96e 	bl	8009c5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007980:	4a0a      	ldr	r2, [pc, #40]	; (80079ac <HAL_InitTick+0xe4>)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	e002      	b.n	800798e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8007988:	2301      	movs	r3, #1
 800798a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800798e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007992:	4618      	mov	r0, r3
 8007994:	3730      	adds	r7, #48	; 0x30
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	40023800 	.word	0x40023800
 80079a0:	431bde83 	.word	0x431bde83
 80079a4:	20001134 	.word	0x20001134
 80079a8:	40010000 	.word	0x40010000
 80079ac:	20000014 	.word	0x20000014

080079b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80079b4:	e7fe      	b.n	80079b4 <NMI_Handler+0x4>

080079b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80079b6:	b480      	push	{r7}
 80079b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80079ba:	e7fe      	b.n	80079ba <HardFault_Handler+0x4>

080079bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80079c0:	e7fe      	b.n	80079c0 <MemManage_Handler+0x4>

080079c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80079c2:	b480      	push	{r7}
 80079c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80079c6:	e7fe      	b.n	80079c6 <BusFault_Handler+0x4>

080079c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80079c8:	b480      	push	{r7}
 80079ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80079cc:	e7fe      	b.n	80079cc <UsageFault_Handler+0x4>

080079ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80079ce:	b480      	push	{r7}
 80079d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80079d2:	bf00      	nop
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr

080079dc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN1_Pin);
 80079e0:	2002      	movs	r0, #2
 80079e2:	f002 fea7 	bl	800a734 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80079e6:	bf00      	nop
 80079e8:	bd80      	pop	{r7, pc}

080079ea <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 80079ee:	2008      	movs	r0, #8
 80079f0:	f002 fea0 	bl	800a734 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80079f4:	bf00      	nop
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80079fc:	4802      	ldr	r0, [pc, #8]	; (8007a08 <CAN1_TX_IRQHandler+0x10>)
 80079fe:	f001 fe41 	bl	8009684 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20000d4c 	.word	0x20000d4c

08007a0c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007a10:	4802      	ldr	r0, [pc, #8]	; (8007a1c <CAN1_RX0_IRQHandler+0x10>)
 8007a12:	f001 fe37 	bl	8009684 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007a16:	bf00      	nop
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000d4c 	.word	0x20000d4c

08007a20 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007a24:	4802      	ldr	r0, [pc, #8]	; (8007a30 <CAN1_RX1_IRQHandler+0x10>)
 8007a26:	f001 fe2d 	bl	8009684 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007a2a:	bf00      	nop
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	20000d4c 	.word	0x20000d4c

08007a34 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8007a38:	4802      	ldr	r0, [pc, #8]	; (8007a44 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8007a3a:	f003 ff10 	bl	800b85e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8007a3e:	bf00      	nop
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	200012a0 	.word	0x200012a0

08007a48 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007a4c:	4802      	ldr	r0, [pc, #8]	; (8007a58 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007a4e:	f003 ff06 	bl	800b85e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007a52:	bf00      	nop
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	20001134 	.word	0x20001134

08007a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007a60:	4802      	ldr	r0, [pc, #8]	; (8007a6c <TIM3_IRQHandler+0x10>)
 8007a62:	f003 fefc 	bl	800b85e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007a66:	bf00      	nop
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	200011c8 	.word	0x200011c8

08007a70 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007a74:	4802      	ldr	r0, [pc, #8]	; (8007a80 <DMA2_Stream0_IRQHandler+0x10>)
 8007a76:	f002 fa3d 	bl	8009ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007a7a:	bf00      	nop
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20000c8c 	.word	0x20000c8c

08007a84 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007a88:	4802      	ldr	r0, [pc, #8]	; (8007a94 <DMA2_Stream2_IRQHandler+0x10>)
 8007a8a:	f002 fa33 	bl	8009ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007a8e:	bf00      	nop
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20000cec 	.word	0x20000cec

08007a98 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007a9c:	4802      	ldr	r0, [pc, #8]	; (8007aa8 <CAN2_TX_IRQHandler+0x10>)
 8007a9e:	f001 fdf1 	bl	8009684 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8007aa2:	bf00      	nop
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000d74 	.word	0x20000d74

08007aac <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007ab0:	4802      	ldr	r0, [pc, #8]	; (8007abc <CAN2_RX0_IRQHandler+0x10>)
 8007ab2:	f001 fde7 	bl	8009684 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8007ab6:	bf00      	nop
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20000d74 	.word	0x20000d74

08007ac0 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007ac4:	4802      	ldr	r0, [pc, #8]	; (8007ad0 <CAN2_RX1_IRQHandler+0x10>)
 8007ac6:	f001 fddd 	bl	8009684 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8007aca:	bf00      	nop
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000d74 	.word	0x20000d74

08007ad4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007ad8:	4802      	ldr	r0, [pc, #8]	; (8007ae4 <DMA2_Stream5_IRQHandler+0x10>)
 8007ada:	f002 fa0b 	bl	8009ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8007ade:	bf00      	nop
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20001418 	.word	0x20001418

08007ae8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007aec:	4802      	ldr	r0, [pc, #8]	; (8007af8 <DMA2_Stream7_IRQHandler+0x10>)
 8007aee:	f002 fa01 	bl	8009ef4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8007af2:	bf00      	nop
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	200013b8 	.word	0x200013b8

08007afc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
  return 1;
 8007b00:	2301      	movs	r3, #1
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <_kill>:

int _kill(int pid, int sig)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007b16:	f00b fb8d 	bl	8013234 <__errno>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2216      	movs	r2, #22
 8007b1e:	601a      	str	r2, [r3, #0]
  return -1;
 8007b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3708      	adds	r7, #8
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <_exit>:

void _exit (int status)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b082      	sub	sp, #8
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007b34:	f04f 31ff 	mov.w	r1, #4294967295
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f7ff ffe7 	bl	8007b0c <_kill>
  while (1) {}    /* Make sure we hang here */
 8007b3e:	e7fe      	b.n	8007b3e <_exit+0x12>

08007b40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b086      	sub	sp, #24
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]
 8007b50:	e00a      	b.n	8007b68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007b52:	f3af 8000 	nop.w
 8007b56:	4601      	mov	r1, r0
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	60ba      	str	r2, [r7, #8]
 8007b5e:	b2ca      	uxtb	r2, r1
 8007b60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	3301      	adds	r3, #1
 8007b66:	617b      	str	r3, [r7, #20]
 8007b68:	697a      	ldr	r2, [r7, #20]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	dbf0      	blt.n	8007b52 <_read+0x12>
  }

  return len;
 8007b70:	687b      	ldr	r3, [r7, #4]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007b7a:	b580      	push	{r7, lr}
 8007b7c:	b086      	sub	sp, #24
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
 8007b8a:	e009      	b.n	8007ba0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	60ba      	str	r2, [r7, #8]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	4618      	mov	r0, r3
 8007b96:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	617b      	str	r3, [r7, #20]
 8007ba0:	697a      	ldr	r2, [r7, #20]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	dbf1      	blt.n	8007b8c <_write+0x12>
  }
  return len;
 8007ba8:	687b      	ldr	r3, [r7, #4]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <_close>:

int _close(int file)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b083      	sub	sp, #12
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b083      	sub	sp, #12
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007bda:	605a      	str	r2, [r3, #4]
  return 0;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	370c      	adds	r7, #12
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <_isatty>:

int _isatty(int file)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007bf2:	2301      	movs	r3, #1
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
	...

08007c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007c24:	4a14      	ldr	r2, [pc, #80]	; (8007c78 <_sbrk+0x5c>)
 8007c26:	4b15      	ldr	r3, [pc, #84]	; (8007c7c <_sbrk+0x60>)
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007c30:	4b13      	ldr	r3, [pc, #76]	; (8007c80 <_sbrk+0x64>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d102      	bne.n	8007c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007c38:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <_sbrk+0x64>)
 8007c3a:	4a12      	ldr	r2, [pc, #72]	; (8007c84 <_sbrk+0x68>)
 8007c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007c3e:	4b10      	ldr	r3, [pc, #64]	; (8007c80 <_sbrk+0x64>)
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4413      	add	r3, r2
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d207      	bcs.n	8007c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007c4c:	f00b faf2 	bl	8013234 <__errno>
 8007c50:	4603      	mov	r3, r0
 8007c52:	220c      	movs	r2, #12
 8007c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007c56:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5a:	e009      	b.n	8007c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007c5c:	4b08      	ldr	r3, [pc, #32]	; (8007c80 <_sbrk+0x64>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007c62:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <_sbrk+0x64>)
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	4413      	add	r3, r2
 8007c6a:	4a05      	ldr	r2, [pc, #20]	; (8007c80 <_sbrk+0x64>)
 8007c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	20020000 	.word	0x20020000
 8007c7c:	00000800 	.word	0x00000800
 8007c80:	2000117c 	.word	0x2000117c
 8007c84:	2000a448 	.word	0x2000a448

08007c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007c8c:	4b06      	ldr	r3, [pc, #24]	; (8007ca8 <SystemInit+0x20>)
 8007c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c92:	4a05      	ldr	r2, [pc, #20]	; (8007ca8 <SystemInit+0x20>)
 8007c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007c9c:	bf00      	nop
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	e000ed00 	.word	0xe000ed00

08007cac <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007cb2:	f107 0308 	add.w	r3, r7, #8
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	605a      	str	r2, [r3, #4]
 8007cbc:	609a      	str	r2, [r3, #8]
 8007cbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007cc0:	463b      	mov	r3, r7
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007cc8:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <MX_TIM2_Init+0x98>)
 8007cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007cce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8007cd0:	4b1c      	ldr	r3, [pc, #112]	; (8007d44 <MX_TIM2_Init+0x98>)
 8007cd2:	f240 3247 	movw	r2, #839	; 0x347
 8007cd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007cd8:	4b1a      	ldr	r3, [pc, #104]	; (8007d44 <MX_TIM2_Init+0x98>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8007cde:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <MX_TIM2_Init+0x98>)
 8007ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ce4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ce6:	4b17      	ldr	r3, [pc, #92]	; (8007d44 <MX_TIM2_Init+0x98>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007cec:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <MX_TIM2_Init+0x98>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007cf2:	4814      	ldr	r0, [pc, #80]	; (8007d44 <MX_TIM2_Init+0x98>)
 8007cf4:	f003 fbf5 	bl	800b4e2 <HAL_TIM_Base_Init>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007cfe:	f7ff fcfd 	bl	80076fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007d08:	f107 0308 	add.w	r3, r7, #8
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	480d      	ldr	r0, [pc, #52]	; (8007d44 <MX_TIM2_Init+0x98>)
 8007d10:	f003 ff70 	bl	800bbf4 <HAL_TIM_ConfigClockSource>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007d1a:	f7ff fcef 	bl	80076fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d22:	2300      	movs	r3, #0
 8007d24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007d26:	463b      	mov	r3, r7
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4806      	ldr	r0, [pc, #24]	; (8007d44 <MX_TIM2_Init+0x98>)
 8007d2c:	f004 fb3c 	bl	800c3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007d36:	f7ff fce1 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007d3a:	bf00      	nop
 8007d3c:	3718      	adds	r7, #24
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20001180 	.word	0x20001180

08007d48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d4e:	f107 0308 	add.w	r3, r7, #8
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	605a      	str	r2, [r3, #4]
 8007d58:	609a      	str	r2, [r3, #8]
 8007d5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d5c:	463b      	mov	r3, r7
 8007d5e:	2200      	movs	r2, #0
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007d64:	4b1d      	ldr	r3, [pc, #116]	; (8007ddc <MX_TIM3_Init+0x94>)
 8007d66:	4a1e      	ldr	r2, [pc, #120]	; (8007de0 <MX_TIM3_Init+0x98>)
 8007d68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800 - 1;
 8007d6a:	4b1c      	ldr	r3, [pc, #112]	; (8007ddc <MX_TIM3_Init+0x94>)
 8007d6c:	f244 129f 	movw	r2, #16799	; 0x419f
 8007d70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d72:	4b1a      	ldr	r3, [pc, #104]	; (8007ddc <MX_TIM3_Init+0x94>)
 8007d74:	2200      	movs	r2, #0
 8007d76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007d78:	4b18      	ldr	r3, [pc, #96]	; (8007ddc <MX_TIM3_Init+0x94>)
 8007d7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d7e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d80:	4b16      	ldr	r3, [pc, #88]	; (8007ddc <MX_TIM3_Init+0x94>)
 8007d82:	2200      	movs	r2, #0
 8007d84:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d86:	4b15      	ldr	r3, [pc, #84]	; (8007ddc <MX_TIM3_Init+0x94>)
 8007d88:	2200      	movs	r2, #0
 8007d8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007d8c:	4813      	ldr	r0, [pc, #76]	; (8007ddc <MX_TIM3_Init+0x94>)
 8007d8e:	f003 fba8 	bl	800b4e2 <HAL_TIM_Base_Init>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007d98:	f7ff fcb0 	bl	80076fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007da0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007da2:	f107 0308 	add.w	r3, r7, #8
 8007da6:	4619      	mov	r1, r3
 8007da8:	480c      	ldr	r0, [pc, #48]	; (8007ddc <MX_TIM3_Init+0x94>)
 8007daa:	f003 ff23 	bl	800bbf4 <HAL_TIM_ConfigClockSource>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007db4:	f7ff fca2 	bl	80076fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007db8:	2300      	movs	r3, #0
 8007dba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007dc0:	463b      	mov	r3, r7
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4805      	ldr	r0, [pc, #20]	; (8007ddc <MX_TIM3_Init+0x94>)
 8007dc6:	f004 faef 	bl	800c3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007dd0:	f7ff fc94 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007dd4:	bf00      	nop
 8007dd6:	3718      	adds	r7, #24
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	200011c8 	.word	0x200011c8
 8007de0:	40000400 	.word	0x40000400

08007de4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b08e      	sub	sp, #56	; 0x38
 8007de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	605a      	str	r2, [r3, #4]
 8007df4:	609a      	str	r2, [r3, #8]
 8007df6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007df8:	f107 0320 	add.w	r3, r7, #32
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007e02:	1d3b      	adds	r3, r7, #4
 8007e04:	2200      	movs	r2, #0
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	605a      	str	r2, [r3, #4]
 8007e0a:	609a      	str	r2, [r3, #8]
 8007e0c:	60da      	str	r2, [r3, #12]
 8007e0e:	611a      	str	r2, [r3, #16]
 8007e10:	615a      	str	r2, [r3, #20]
 8007e12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007e14:	4b37      	ldr	r3, [pc, #220]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007e16:	4a38      	ldr	r2, [pc, #224]	; (8007ef8 <MX_TIM4_Init+0x114>)
 8007e18:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8007e1a:	4b36      	ldr	r3, [pc, #216]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007e1c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007e20:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e22:	4b34      	ldr	r3, [pc, #208]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8007e28:	4b32      	ldr	r3, [pc, #200]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007e2a:	22fe      	movs	r2, #254	; 0xfe
 8007e2c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e2e:	4b31      	ldr	r3, [pc, #196]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e34:	4b2f      	ldr	r3, [pc, #188]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007e3a:	482e      	ldr	r0, [pc, #184]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007e3c:	f003 fb51 	bl	800b4e2 <HAL_TIM_Base_Init>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8007e46:	f7ff fc59 	bl	80076fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007e54:	4619      	mov	r1, r3
 8007e56:	4827      	ldr	r0, [pc, #156]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007e58:	f003 fecc 	bl	800bbf4 <HAL_TIM_ConfigClockSource>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8007e62:	f7ff fc4b 	bl	80076fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007e66:	4823      	ldr	r0, [pc, #140]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007e68:	f003 fbfa 	bl	800b660 <HAL_TIM_PWM_Init>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8007e72:	f7ff fc43 	bl	80076fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e76:	2300      	movs	r3, #0
 8007e78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007e7e:	f107 0320 	add.w	r3, r7, #32
 8007e82:	4619      	mov	r1, r3
 8007e84:	481b      	ldr	r0, [pc, #108]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007e86:	f004 fa8f 	bl	800c3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8007e90:	f7ff fc34 	bl	80076fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007e94:	2360      	movs	r3, #96	; 0x60
 8007e96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007ea4:	1d3b      	adds	r3, r7, #4
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	4619      	mov	r1, r3
 8007eaa:	4812      	ldr	r0, [pc, #72]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007eac:	f003 fde0 	bl	800ba70 <HAL_TIM_PWM_ConfigChannel>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8007eb6:	f7ff fc21 	bl	80076fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007eba:	1d3b      	adds	r3, r7, #4
 8007ebc:	2204      	movs	r2, #4
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	480c      	ldr	r0, [pc, #48]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007ec2:	f003 fdd5 	bl	800ba70 <HAL_TIM_PWM_ConfigChannel>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8007ecc:	f7ff fc16 	bl	80076fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007ed0:	1d3b      	adds	r3, r7, #4
 8007ed2:	2208      	movs	r2, #8
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4807      	ldr	r0, [pc, #28]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007ed8:	f003 fdca 	bl	800ba70 <HAL_TIM_PWM_ConfigChannel>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8007ee2:	f7ff fc0b 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007ee6:	4803      	ldr	r0, [pc, #12]	; (8007ef4 <MX_TIM4_Init+0x110>)
 8007ee8:	f000 f988 	bl	80081fc <HAL_TIM_MspPostInit>

}
 8007eec:	bf00      	nop
 8007eee:	3738      	adds	r7, #56	; 0x38
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	20001210 	.word	0x20001210
 8007ef8:	40000800 	.word	0x40000800

08007efc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b08c      	sub	sp, #48	; 0x30
 8007f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007f02:	f107 030c 	add.w	r3, r7, #12
 8007f06:	2224      	movs	r2, #36	; 0x24
 8007f08:	2100      	movs	r1, #0
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f00b fad4 	bl	80134b8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f10:	1d3b      	adds	r3, r7, #4
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8007f18:	4b20      	ldr	r3, [pc, #128]	; (8007f9c <MX_TIM5_Init+0xa0>)
 8007f1a:	4a21      	ldr	r2, [pc, #132]	; (8007fa0 <MX_TIM5_Init+0xa4>)
 8007f1c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007f1e:	4b1f      	ldr	r3, [pc, #124]	; (8007f9c <MX_TIM5_Init+0xa0>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f24:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <MX_TIM5_Init+0xa0>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8007f2a:	4b1c      	ldr	r3, [pc, #112]	; (8007f9c <MX_TIM5_Init+0xa0>)
 8007f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f30:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f32:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <MX_TIM5_Init+0xa0>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f38:	4b18      	ldr	r3, [pc, #96]	; (8007f9c <MX_TIM5_Init+0xa0>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007f42:	2300      	movs	r3, #0
 8007f44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007f46:	2301      	movs	r3, #1
 8007f48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007f52:	2300      	movs	r3, #0
 8007f54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007f56:	2301      	movs	r3, #1
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8007f62:	f107 030c 	add.w	r3, r7, #12
 8007f66:	4619      	mov	r1, r3
 8007f68:	480c      	ldr	r0, [pc, #48]	; (8007f9c <MX_TIM5_Init+0xa0>)
 8007f6a:	f003 fbd2 	bl	800b712 <HAL_TIM_Encoder_Init>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8007f74:	f7ff fbc2 	bl	80076fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007f80:	1d3b      	adds	r3, r7, #4
 8007f82:	4619      	mov	r1, r3
 8007f84:	4805      	ldr	r0, [pc, #20]	; (8007f9c <MX_TIM5_Init+0xa0>)
 8007f86:	f004 fa0f 	bl	800c3a8 <HAL_TIMEx_MasterConfigSynchronization>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8007f90:	f7ff fbb4 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8007f94:	bf00      	nop
 8007f96:	3730      	adds	r7, #48	; 0x30
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20001258 	.word	0x20001258
 8007fa0:	40000c00 	.word	0x40000c00

08007fa4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007faa:	463b      	mov	r3, r7
 8007fac:	2200      	movs	r2, #0
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	605a      	str	r2, [r3, #4]
 8007fb2:	609a      	str	r2, [r3, #8]
 8007fb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8007fb6:	4b16      	ldr	r3, [pc, #88]	; (8008010 <MX_TIM9_Init+0x6c>)
 8007fb8:	4a16      	ldr	r2, [pc, #88]	; (8008014 <MX_TIM9_Init+0x70>)
 8007fba:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800 - 1;
 8007fbc:	4b14      	ldr	r3, [pc, #80]	; (8008010 <MX_TIM9_Init+0x6c>)
 8007fbe:	f244 129f 	movw	r2, #16799	; 0x419f
 8007fc2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fc4:	4b12      	ldr	r3, [pc, #72]	; (8008010 <MX_TIM9_Init+0x6c>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8007fca:	4b11      	ldr	r3, [pc, #68]	; (8008010 <MX_TIM9_Init+0x6c>)
 8007fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fd0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fd2:	4b0f      	ldr	r3, [pc, #60]	; (8008010 <MX_TIM9_Init+0x6c>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007fd8:	4b0d      	ldr	r3, [pc, #52]	; (8008010 <MX_TIM9_Init+0x6c>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8007fde:	480c      	ldr	r0, [pc, #48]	; (8008010 <MX_TIM9_Init+0x6c>)
 8007fe0:	f003 fa7f 	bl	800b4e2 <HAL_TIM_Base_Init>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8007fea:	f7ff fb87 	bl	80076fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ff2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8007ff4:	463b      	mov	r3, r7
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	4805      	ldr	r0, [pc, #20]	; (8008010 <MX_TIM9_Init+0x6c>)
 8007ffa:	f003 fdfb 	bl	800bbf4 <HAL_TIM_ConfigClockSource>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d001      	beq.n	8008008 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8008004:	f7ff fb7a 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8008008:	bf00      	nop
 800800a:	3710      	adds	r7, #16
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	200012a0 	.word	0x200012a0
 8008014:	40014000 	.word	0x40014000

08008018 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800801c:	4b0e      	ldr	r3, [pc, #56]	; (8008058 <MX_TIM14_Init+0x40>)
 800801e:	4a0f      	ldr	r2, [pc, #60]	; (800805c <MX_TIM14_Init+0x44>)
 8008020:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 8008022:	4b0d      	ldr	r3, [pc, #52]	; (8008058 <MX_TIM14_Init+0x40>)
 8008024:	f240 3247 	movw	r2, #839	; 0x347
 8008028:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800802a:	4b0b      	ldr	r3, [pc, #44]	; (8008058 <MX_TIM14_Init+0x40>)
 800802c:	2200      	movs	r2, #0
 800802e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8008030:	4b09      	ldr	r3, [pc, #36]	; (8008058 <MX_TIM14_Init+0x40>)
 8008032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008036:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008038:	4b07      	ldr	r3, [pc, #28]	; (8008058 <MX_TIM14_Init+0x40>)
 800803a:	2200      	movs	r2, #0
 800803c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800803e:	4b06      	ldr	r3, [pc, #24]	; (8008058 <MX_TIM14_Init+0x40>)
 8008040:	2200      	movs	r2, #0
 8008042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8008044:	4804      	ldr	r0, [pc, #16]	; (8008058 <MX_TIM14_Init+0x40>)
 8008046:	f003 fa4c 	bl	800b4e2 <HAL_TIM_Base_Init>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8008050:	f7ff fb54 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8008054:	bf00      	nop
 8008056:	bd80      	pop	{r7, pc}
 8008058:	200012e8 	.word	0x200012e8
 800805c:	40002000 	.word	0x40002000

08008060 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b088      	sub	sp, #32
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008070:	d10e      	bne.n	8008090 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008072:	2300      	movs	r3, #0
 8008074:	61fb      	str	r3, [r7, #28]
 8008076:	4b38      	ldr	r3, [pc, #224]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 8008078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807a:	4a37      	ldr	r2, [pc, #220]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 800807c:	f043 0301 	orr.w	r3, r3, #1
 8008080:	6413      	str	r3, [r2, #64]	; 0x40
 8008082:	4b35      	ldr	r3, [pc, #212]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	f003 0301 	and.w	r3, r3, #1
 800808a:	61fb      	str	r3, [r7, #28]
 800808c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800808e:	e05e      	b.n	800814e <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a31      	ldr	r2, [pc, #196]	; (800815c <HAL_TIM_Base_MspInit+0xfc>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d116      	bne.n	80080c8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800809a:	2300      	movs	r3, #0
 800809c:	61bb      	str	r3, [r7, #24]
 800809e:	4b2e      	ldr	r3, [pc, #184]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	4a2d      	ldr	r2, [pc, #180]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 80080a4:	f043 0302 	orr.w	r3, r3, #2
 80080a8:	6413      	str	r3, [r2, #64]	; 0x40
 80080aa:	4b2b      	ldr	r3, [pc, #172]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 80080ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	61bb      	str	r3, [r7, #24]
 80080b4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80080b6:	2200      	movs	r2, #0
 80080b8:	2105      	movs	r1, #5
 80080ba:	201d      	movs	r0, #29
 80080bc:	f001 fdce 	bl	8009c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80080c0:	201d      	movs	r0, #29
 80080c2:	f001 fde7 	bl	8009c94 <HAL_NVIC_EnableIRQ>
}
 80080c6:	e042      	b.n	800814e <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a24      	ldr	r2, [pc, #144]	; (8008160 <HAL_TIM_Base_MspInit+0x100>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d10e      	bne.n	80080f0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80080d2:	2300      	movs	r3, #0
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	4b20      	ldr	r3, [pc, #128]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	4a1f      	ldr	r2, [pc, #124]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 80080dc:	f043 0304 	orr.w	r3, r3, #4
 80080e0:	6413      	str	r3, [r2, #64]	; 0x40
 80080e2:	4b1d      	ldr	r3, [pc, #116]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	617b      	str	r3, [r7, #20]
 80080ec:	697b      	ldr	r3, [r7, #20]
}
 80080ee:	e02e      	b.n	800814e <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a1b      	ldr	r2, [pc, #108]	; (8008164 <HAL_TIM_Base_MspInit+0x104>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d116      	bne.n	8008128 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80080fa:	2300      	movs	r3, #0
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	4b16      	ldr	r3, [pc, #88]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 8008100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008102:	4a15      	ldr	r2, [pc, #84]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 8008104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008108:	6453      	str	r3, [r2, #68]	; 0x44
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 800810c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800810e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008112:	613b      	str	r3, [r7, #16]
 8008114:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8008116:	2200      	movs	r2, #0
 8008118:	2105      	movs	r1, #5
 800811a:	2018      	movs	r0, #24
 800811c:	f001 fd9e 	bl	8009c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8008120:	2018      	movs	r0, #24
 8008122:	f001 fdb7 	bl	8009c94 <HAL_NVIC_EnableIRQ>
}
 8008126:	e012      	b.n	800814e <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM14)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a0e      	ldr	r2, [pc, #56]	; (8008168 <HAL_TIM_Base_MspInit+0x108>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d10d      	bne.n	800814e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8008132:	2300      	movs	r3, #0
 8008134:	60fb      	str	r3, [r7, #12]
 8008136:	4b08      	ldr	r3, [pc, #32]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 8008138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813a:	4a07      	ldr	r2, [pc, #28]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 800813c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008140:	6413      	str	r3, [r2, #64]	; 0x40
 8008142:	4b05      	ldr	r3, [pc, #20]	; (8008158 <HAL_TIM_Base_MspInit+0xf8>)
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800814a:	60fb      	str	r3, [r7, #12]
 800814c:	68fb      	ldr	r3, [r7, #12]
}
 800814e:	bf00      	nop
 8008150:	3720      	adds	r7, #32
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	40023800 	.word	0x40023800
 800815c:	40000400 	.word	0x40000400
 8008160:	40000800 	.word	0x40000800
 8008164:	40014000 	.word	0x40014000
 8008168:	40002000 	.word	0x40002000

0800816c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	; 0x28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008174:	f107 0314 	add.w	r3, r7, #20
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]
 800817c:	605a      	str	r2, [r3, #4]
 800817e:	609a      	str	r2, [r3, #8]
 8008180:	60da      	str	r2, [r3, #12]
 8008182:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a19      	ldr	r2, [pc, #100]	; (80081f0 <HAL_TIM_Encoder_MspInit+0x84>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d12b      	bne.n	80081e6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800818e:	2300      	movs	r3, #0
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	4b18      	ldr	r3, [pc, #96]	; (80081f4 <HAL_TIM_Encoder_MspInit+0x88>)
 8008194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008196:	4a17      	ldr	r2, [pc, #92]	; (80081f4 <HAL_TIM_Encoder_MspInit+0x88>)
 8008198:	f043 0308 	orr.w	r3, r3, #8
 800819c:	6413      	str	r3, [r2, #64]	; 0x40
 800819e:	4b15      	ldr	r3, [pc, #84]	; (80081f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	f003 0308 	and.w	r3, r3, #8
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081aa:	2300      	movs	r3, #0
 80081ac:	60fb      	str	r3, [r7, #12]
 80081ae:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80081b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b2:	4a10      	ldr	r2, [pc, #64]	; (80081f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80081b4:	f043 0301 	orr.w	r3, r3, #1
 80081b8:	6313      	str	r3, [r2, #48]	; 0x30
 80081ba:	4b0e      	ldr	r3, [pc, #56]	; (80081f4 <HAL_TIM_Encoder_MspInit+0x88>)
 80081bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	60fb      	str	r3, [r7, #12]
 80081c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 80081c6:	2303      	movs	r3, #3
 80081c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081ca:	2302      	movs	r3, #2
 80081cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081ce:	2300      	movs	r3, #0
 80081d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081d2:	2300      	movs	r3, #0
 80081d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80081d6:	2302      	movs	r3, #2
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081da:	f107 0314 	add.w	r3, r7, #20
 80081de:	4619      	mov	r1, r3
 80081e0:	4805      	ldr	r0, [pc, #20]	; (80081f8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80081e2:	f002 f8f1 	bl	800a3c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80081e6:	bf00      	nop
 80081e8:	3728      	adds	r7, #40	; 0x28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	40000c00 	.word	0x40000c00
 80081f4:	40023800 	.word	0x40023800
 80081f8:	40020000 	.word	0x40020000

080081fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008204:	f107 030c 	add.w	r3, r7, #12
 8008208:	2200      	movs	r2, #0
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	605a      	str	r2, [r3, #4]
 800820e:	609a      	str	r2, [r3, #8]
 8008210:	60da      	str	r2, [r3, #12]
 8008212:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	4a12      	ldr	r2, [pc, #72]	; (8008264 <HAL_TIM_MspPostInit+0x68>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d11e      	bne.n	800825c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800821e:	2300      	movs	r3, #0
 8008220:	60bb      	str	r3, [r7, #8]
 8008222:	4b11      	ldr	r3, [pc, #68]	; (8008268 <HAL_TIM_MspPostInit+0x6c>)
 8008224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008226:	4a10      	ldr	r2, [pc, #64]	; (8008268 <HAL_TIM_MspPostInit+0x6c>)
 8008228:	f043 0308 	orr.w	r3, r3, #8
 800822c:	6313      	str	r3, [r2, #48]	; 0x30
 800822e:	4b0e      	ldr	r3, [pc, #56]	; (8008268 <HAL_TIM_MspPostInit+0x6c>)
 8008230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008232:	f003 0308 	and.w	r3, r3, #8
 8008236:	60bb      	str	r3, [r7, #8]
 8008238:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 800823a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800823e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008240:	2302      	movs	r3, #2
 8008242:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008244:	2300      	movs	r3, #0
 8008246:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008248:	2300      	movs	r3, #0
 800824a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800824c:	2302      	movs	r3, #2
 800824e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008250:	f107 030c 	add.w	r3, r7, #12
 8008254:	4619      	mov	r1, r3
 8008256:	4805      	ldr	r0, [pc, #20]	; (800826c <HAL_TIM_MspPostInit+0x70>)
 8008258:	f002 f8b6 	bl	800a3c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800825c:	bf00      	nop
 800825e:	3720      	adds	r7, #32
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	40000800 	.word	0x40000800
 8008268:	40023800 	.word	0x40023800
 800826c:	40020c00 	.word	0x40020c00

08008270 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008274:	4b11      	ldr	r3, [pc, #68]	; (80082bc <MX_USART1_UART_Init+0x4c>)
 8008276:	4a12      	ldr	r2, [pc, #72]	; (80082c0 <MX_USART1_UART_Init+0x50>)
 8008278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800827a:	4b10      	ldr	r3, [pc, #64]	; (80082bc <MX_USART1_UART_Init+0x4c>)
 800827c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008282:	4b0e      	ldr	r3, [pc, #56]	; (80082bc <MX_USART1_UART_Init+0x4c>)
 8008284:	2200      	movs	r2, #0
 8008286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008288:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <MX_USART1_UART_Init+0x4c>)
 800828a:	2200      	movs	r2, #0
 800828c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800828e:	4b0b      	ldr	r3, [pc, #44]	; (80082bc <MX_USART1_UART_Init+0x4c>)
 8008290:	2200      	movs	r2, #0
 8008292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008294:	4b09      	ldr	r3, [pc, #36]	; (80082bc <MX_USART1_UART_Init+0x4c>)
 8008296:	220c      	movs	r2, #12
 8008298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800829a:	4b08      	ldr	r3, [pc, #32]	; (80082bc <MX_USART1_UART_Init+0x4c>)
 800829c:	f44f 7240 	mov.w	r2, #768	; 0x300
 80082a0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80082a2:	4b06      	ldr	r3, [pc, #24]	; (80082bc <MX_USART1_UART_Init+0x4c>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80082a8:	4804      	ldr	r0, [pc, #16]	; (80082bc <MX_USART1_UART_Init+0x4c>)
 80082aa:	f004 f90d 	bl	800c4c8 <HAL_UART_Init>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80082b4:	f7ff fa22 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80082b8:	bf00      	nop
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	20001330 	.word	0x20001330
 80082c0:	40011000 	.word	0x40011000

080082c4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80082c8:	4b11      	ldr	r3, [pc, #68]	; (8008310 <MX_USART2_UART_Init+0x4c>)
 80082ca:	4a12      	ldr	r2, [pc, #72]	; (8008314 <MX_USART2_UART_Init+0x50>)
 80082cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 80082ce:	4b10      	ldr	r3, [pc, #64]	; (8008310 <MX_USART2_UART_Init+0x4c>)
 80082d0:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80082d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80082d6:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <MX_USART2_UART_Init+0x4c>)
 80082d8:	2200      	movs	r2, #0
 80082da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80082dc:	4b0c      	ldr	r3, [pc, #48]	; (8008310 <MX_USART2_UART_Init+0x4c>)
 80082de:	2200      	movs	r2, #0
 80082e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80082e2:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <MX_USART2_UART_Init+0x4c>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80082e8:	4b09      	ldr	r3, [pc, #36]	; (8008310 <MX_USART2_UART_Init+0x4c>)
 80082ea:	220c      	movs	r2, #12
 80082ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80082ee:	4b08      	ldr	r3, [pc, #32]	; (8008310 <MX_USART2_UART_Init+0x4c>)
 80082f0:	2200      	movs	r2, #0
 80082f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80082f4:	4b06      	ldr	r3, [pc, #24]	; (8008310 <MX_USART2_UART_Init+0x4c>)
 80082f6:	2200      	movs	r2, #0
 80082f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80082fa:	4805      	ldr	r0, [pc, #20]	; (8008310 <MX_USART2_UART_Init+0x4c>)
 80082fc:	f004 f8e4 	bl	800c4c8 <HAL_UART_Init>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008306:	f7ff f9f9 	bl	80076fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800830a:	bf00      	nop
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20001374 	.word	0x20001374
 8008314:	40004400 	.word	0x40004400

08008318 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b08c      	sub	sp, #48	; 0x30
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008320:	f107 031c 	add.w	r3, r7, #28
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
 8008328:	605a      	str	r2, [r3, #4]
 800832a:	609a      	str	r2, [r3, #8]
 800832c:	60da      	str	r2, [r3, #12]
 800832e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	4a61      	ldr	r2, [pc, #388]	; (80084bc <HAL_UART_MspInit+0x1a4>)
 8008336:	4293      	cmp	r3, r2
 8008338:	f040 808a 	bne.w	8008450 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800833c:	2300      	movs	r3, #0
 800833e:	61bb      	str	r3, [r7, #24]
 8008340:	4b5f      	ldr	r3, [pc, #380]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 8008342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008344:	4a5e      	ldr	r2, [pc, #376]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 8008346:	f043 0310 	orr.w	r3, r3, #16
 800834a:	6453      	str	r3, [r2, #68]	; 0x44
 800834c:	4b5c      	ldr	r3, [pc, #368]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 800834e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	61bb      	str	r3, [r7, #24]
 8008356:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
 800835c:	4b58      	ldr	r3, [pc, #352]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 800835e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008360:	4a57      	ldr	r2, [pc, #348]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 8008362:	f043 0301 	orr.w	r3, r3, #1
 8008366:	6313      	str	r3, [r2, #48]	; 0x30
 8008368:	4b55      	ldr	r3, [pc, #340]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 800836a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800836c:	f003 0301 	and.w	r3, r3, #1
 8008370:	617b      	str	r3, [r7, #20]
 8008372:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8008374:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8008378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800837a:	2302      	movs	r3, #2
 800837c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800837e:	2300      	movs	r3, #0
 8008380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008382:	2303      	movs	r3, #3
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008386:	2307      	movs	r3, #7
 8008388:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800838a:	f107 031c 	add.w	r3, r7, #28
 800838e:	4619      	mov	r1, r3
 8008390:	484c      	ldr	r0, [pc, #304]	; (80084c4 <HAL_UART_MspInit+0x1ac>)
 8008392:	f002 f819 	bl	800a3c8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8008396:	4b4c      	ldr	r3, [pc, #304]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 8008398:	4a4c      	ldr	r2, [pc, #304]	; (80084cc <HAL_UART_MspInit+0x1b4>)
 800839a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800839c:	4b4a      	ldr	r3, [pc, #296]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 800839e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80083a2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80083a4:	4b48      	ldr	r3, [pc, #288]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083a6:	2240      	movs	r2, #64	; 0x40
 80083a8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80083aa:	4b47      	ldr	r3, [pc, #284]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80083b0:	4b45      	ldr	r3, [pc, #276]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083b6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80083b8:	4b43      	ldr	r3, [pc, #268]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80083be:	4b42      	ldr	r3, [pc, #264]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083c0:	2200      	movs	r2, #0
 80083c2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80083c4:	4b40      	ldr	r3, [pc, #256]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80083ca:	4b3f      	ldr	r3, [pc, #252]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80083d0:	4b3d      	ldr	r3, [pc, #244]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083d2:	2200      	movs	r2, #0
 80083d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80083d6:	483c      	ldr	r0, [pc, #240]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083d8:	f001 fc86 	bl	8009ce8 <HAL_DMA_Init>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80083e2:	f7ff f98b 	bl	80076fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	4a37      	ldr	r2, [pc, #220]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083ea:	635a      	str	r2, [r3, #52]	; 0x34
 80083ec:	4a36      	ldr	r2, [pc, #216]	; (80084c8 <HAL_UART_MspInit+0x1b0>)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80083f2:	4b37      	ldr	r3, [pc, #220]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 80083f4:	4a37      	ldr	r2, [pc, #220]	; (80084d4 <HAL_UART_MspInit+0x1bc>)
 80083f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80083f8:	4b35      	ldr	r3, [pc, #212]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 80083fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80083fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008400:	4b33      	ldr	r3, [pc, #204]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 8008402:	2200      	movs	r2, #0
 8008404:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008406:	4b32      	ldr	r3, [pc, #200]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 8008408:	2200      	movs	r2, #0
 800840a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800840c:	4b30      	ldr	r3, [pc, #192]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 800840e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008412:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008414:	4b2e      	ldr	r3, [pc, #184]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 8008416:	2200      	movs	r2, #0
 8008418:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800841a:	4b2d      	ldr	r3, [pc, #180]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 800841c:	2200      	movs	r2, #0
 800841e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008420:	4b2b      	ldr	r3, [pc, #172]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 8008422:	2200      	movs	r2, #0
 8008424:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008426:	4b2a      	ldr	r3, [pc, #168]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 8008428:	2200      	movs	r2, #0
 800842a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800842c:	4b28      	ldr	r3, [pc, #160]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 800842e:	2200      	movs	r2, #0
 8008430:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008432:	4827      	ldr	r0, [pc, #156]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 8008434:	f001 fc58 	bl	8009ce8 <HAL_DMA_Init>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800843e:	f7ff f95d 	bl	80076fc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	4a22      	ldr	r2, [pc, #136]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 8008446:	639a      	str	r2, [r3, #56]	; 0x38
 8008448:	4a21      	ldr	r2, [pc, #132]	; (80084d0 <HAL_UART_MspInit+0x1b8>)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800844e:	e030      	b.n	80084b2 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a20      	ldr	r2, [pc, #128]	; (80084d8 <HAL_UART_MspInit+0x1c0>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d12b      	bne.n	80084b2 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800845a:	2300      	movs	r3, #0
 800845c:	613b      	str	r3, [r7, #16]
 800845e:	4b18      	ldr	r3, [pc, #96]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 8008460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008462:	4a17      	ldr	r2, [pc, #92]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 8008464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008468:	6413      	str	r3, [r2, #64]	; 0x40
 800846a:	4b15      	ldr	r3, [pc, #84]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 800846c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800846e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008472:	613b      	str	r3, [r7, #16]
 8008474:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008476:	2300      	movs	r3, #0
 8008478:	60fb      	str	r3, [r7, #12]
 800847a:	4b11      	ldr	r3, [pc, #68]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 800847c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847e:	4a10      	ldr	r2, [pc, #64]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 8008480:	f043 0308 	orr.w	r3, r3, #8
 8008484:	6313      	str	r3, [r2, #48]	; 0x30
 8008486:	4b0e      	ldr	r3, [pc, #56]	; (80084c0 <HAL_UART_MspInit+0x1a8>)
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	f003 0308 	and.w	r3, r3, #8
 800848e:	60fb      	str	r3, [r7, #12]
 8008490:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 8008492:	2360      	movs	r3, #96	; 0x60
 8008494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008496:	2302      	movs	r3, #2
 8008498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800849a:	2300      	movs	r3, #0
 800849c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800849e:	2303      	movs	r3, #3
 80084a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80084a2:	2307      	movs	r3, #7
 80084a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80084a6:	f107 031c 	add.w	r3, r7, #28
 80084aa:	4619      	mov	r1, r3
 80084ac:	480b      	ldr	r0, [pc, #44]	; (80084dc <HAL_UART_MspInit+0x1c4>)
 80084ae:	f001 ff8b 	bl	800a3c8 <HAL_GPIO_Init>
}
 80084b2:	bf00      	nop
 80084b4:	3730      	adds	r7, #48	; 0x30
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	40011000 	.word	0x40011000
 80084c0:	40023800 	.word	0x40023800
 80084c4:	40020000 	.word	0x40020000
 80084c8:	200013b8 	.word	0x200013b8
 80084cc:	400264b8 	.word	0x400264b8
 80084d0:	20001418 	.word	0x20001418
 80084d4:	40026488 	.word	0x40026488
 80084d8:	40004400 	.word	0x40004400
 80084dc:	40020c00 	.word	0x40020c00

080084e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80084e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80084e4:	480d      	ldr	r0, [pc, #52]	; (800851c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80084e6:	490e      	ldr	r1, [pc, #56]	; (8008520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80084e8:	4a0e      	ldr	r2, [pc, #56]	; (8008524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80084ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80084ec:	e002      	b.n	80084f4 <LoopCopyDataInit>

080084ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80084ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80084f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80084f2:	3304      	adds	r3, #4

080084f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80084f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80084f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80084f8:	d3f9      	bcc.n	80084ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80084fa:	4a0b      	ldr	r2, [pc, #44]	; (8008528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80084fc:	4c0b      	ldr	r4, [pc, #44]	; (800852c <LoopFillZerobss+0x26>)
  movs r3, #0
 80084fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008500:	e001      	b.n	8008506 <LoopFillZerobss>

08008502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008504:	3204      	adds	r2, #4

08008506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008508:	d3fb      	bcc.n	8008502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800850a:	f7ff fbbd 	bl	8007c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800850e:	f00a ff8d 	bl	801342c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008512:	f7ff f843 	bl	800759c <main>
  bx  lr    
 8008516:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800851c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008520:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8008524:	08016724 	.word	0x08016724
  ldr r2, =_sbss
 8008528:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800852c:	2000a448 	.word	0x2000a448

08008530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008530:	e7fe      	b.n	8008530 <ADC_IRQHandler>
	...

08008534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008538:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <HAL_Init+0x40>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a0d      	ldr	r2, [pc, #52]	; (8008574 <HAL_Init+0x40>)
 800853e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008544:	4b0b      	ldr	r3, [pc, #44]	; (8008574 <HAL_Init+0x40>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a0a      	ldr	r2, [pc, #40]	; (8008574 <HAL_Init+0x40>)
 800854a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800854e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008550:	4b08      	ldr	r3, [pc, #32]	; (8008574 <HAL_Init+0x40>)
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a07      	ldr	r2, [pc, #28]	; (8008574 <HAL_Init+0x40>)
 8008556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800855a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800855c:	2003      	movs	r0, #3
 800855e:	f001 fb72 	bl	8009c46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008562:	2005      	movs	r0, #5
 8008564:	f7ff f9b0 	bl	80078c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008568:	f7ff f982 	bl	8007870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	40023c00 	.word	0x40023c00

08008578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008578:	b480      	push	{r7}
 800857a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <HAL_IncTick+0x20>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	461a      	mov	r2, r3
 8008582:	4b06      	ldr	r3, [pc, #24]	; (800859c <HAL_IncTick+0x24>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4413      	add	r3, r2
 8008588:	4a04      	ldr	r2, [pc, #16]	; (800859c <HAL_IncTick+0x24>)
 800858a:	6013      	str	r3, [r2, #0]
}
 800858c:	bf00      	nop
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	20000018 	.word	0x20000018
 800859c:	20001478 	.word	0x20001478

080085a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  return uwTick;
 80085a4:	4b03      	ldr	r3, [pc, #12]	; (80085b4 <HAL_GetTick+0x14>)
 80085a6:	681b      	ldr	r3, [r3, #0]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20001478 	.word	0x20001478

080085b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e033      	b.n	8008636 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d109      	bne.n	80085ea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7fe fba4 	bl	8006d24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	f003 0310 	and.w	r3, r3, #16
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d118      	bne.n	8008628 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80085fe:	f023 0302 	bic.w	r3, r3, #2
 8008602:	f043 0202 	orr.w	r2, r3, #2
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fa54 	bl	8008ab8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2200      	movs	r2, #0
 8008614:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	f023 0303 	bic.w	r3, r3, #3
 800861e:	f043 0201 	orr.w	r2, r3, #1
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	641a      	str	r2, [r3, #64]	; 0x40
 8008626:	e001      	b.n	800862c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008634:	7bfb      	ldrb	r3, [r7, #15]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
	...

08008640 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b086      	sub	sp, #24
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008656:	2b01      	cmp	r3, #1
 8008658:	d101      	bne.n	800865e <HAL_ADC_Start_DMA+0x1e>
 800865a:	2302      	movs	r3, #2
 800865c:	e0e9      	b.n	8008832 <HAL_ADC_Start_DMA+0x1f2>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b01      	cmp	r3, #1
 8008672:	d018      	beq.n	80086a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689a      	ldr	r2, [r3, #8]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f042 0201 	orr.w	r2, r2, #1
 8008682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008684:	4b6d      	ldr	r3, [pc, #436]	; (800883c <HAL_ADC_Start_DMA+0x1fc>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a6d      	ldr	r2, [pc, #436]	; (8008840 <HAL_ADC_Start_DMA+0x200>)
 800868a:	fba2 2303 	umull	r2, r3, r2, r3
 800868e:	0c9a      	lsrs	r2, r3, #18
 8008690:	4613      	mov	r3, r2
 8008692:	005b      	lsls	r3, r3, #1
 8008694:	4413      	add	r3, r2
 8008696:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008698:	e002      	b.n	80086a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	3b01      	subs	r3, #1
 800869e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d1f9      	bne.n	800869a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086b4:	d107      	bne.n	80086c6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	f040 80a1 	bne.w	8008818 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d007      	beq.n	8008708 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008700:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008714:	d106      	bne.n	8008724 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871a:	f023 0206 	bic.w	r2, r3, #6
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	645a      	str	r2, [r3, #68]	; 0x44
 8008722:	e002      	b.n	800872a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2200      	movs	r2, #0
 8008728:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008732:	4b44      	ldr	r3, [pc, #272]	; (8008844 <HAL_ADC_Start_DMA+0x204>)
 8008734:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	4a43      	ldr	r2, [pc, #268]	; (8008848 <HAL_ADC_Start_DMA+0x208>)
 800873c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008742:	4a42      	ldr	r2, [pc, #264]	; (800884c <HAL_ADC_Start_DMA+0x20c>)
 8008744:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800874a:	4a41      	ldr	r2, [pc, #260]	; (8008850 <HAL_ADC_Start_DMA+0x210>)
 800874c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008756:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	685a      	ldr	r2, [r3, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008766:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689a      	ldr	r2, [r3, #8]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008776:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	334c      	adds	r3, #76	; 0x4c
 8008782:	4619      	mov	r1, r3
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f001 fb5c 	bl	8009e44 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	2b00      	cmp	r3, #0
 8008796:	d12a      	bne.n	80087ee <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a2d      	ldr	r2, [pc, #180]	; (8008854 <HAL_ADC_Start_DMA+0x214>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d015      	beq.n	80087ce <HAL_ADC_Start_DMA+0x18e>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a2c      	ldr	r2, [pc, #176]	; (8008858 <HAL_ADC_Start_DMA+0x218>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d105      	bne.n	80087b8 <HAL_ADC_Start_DMA+0x178>
 80087ac:	4b25      	ldr	r3, [pc, #148]	; (8008844 <HAL_ADC_Start_DMA+0x204>)
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	f003 031f 	and.w	r3, r3, #31
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00a      	beq.n	80087ce <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a27      	ldr	r2, [pc, #156]	; (800885c <HAL_ADC_Start_DMA+0x21c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d136      	bne.n	8008830 <HAL_ADC_Start_DMA+0x1f0>
 80087c2:	4b20      	ldr	r3, [pc, #128]	; (8008844 <HAL_ADC_Start_DMA+0x204>)
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f003 0310 	and.w	r3, r3, #16
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d130      	bne.n	8008830 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	689b      	ldr	r3, [r3, #8]
 80087d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d129      	bne.n	8008830 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	689a      	ldr	r2, [r3, #8]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80087ea:	609a      	str	r2, [r3, #8]
 80087ec:	e020      	b.n	8008830 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a18      	ldr	r2, [pc, #96]	; (8008854 <HAL_ADC_Start_DMA+0x214>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d11b      	bne.n	8008830 <HAL_ADC_Start_DMA+0x1f0>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d114      	bne.n	8008830 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	689a      	ldr	r2, [r3, #8]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008814:	609a      	str	r2, [r3, #8]
 8008816:	e00b      	b.n	8008830 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881c:	f043 0210 	orr.w	r2, r3, #16
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008828:	f043 0201 	orr.w	r2, r3, #1
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	20000010 	.word	0x20000010
 8008840:	431bde83 	.word	0x431bde83
 8008844:	40012300 	.word	0x40012300
 8008848:	08008cb1 	.word	0x08008cb1
 800884c:	08008d6b 	.word	0x08008d6b
 8008850:	08008d87 	.word	0x08008d87
 8008854:	40012000 	.word	0x40012000
 8008858:	40012100 	.word	0x40012100
 800885c:	40012200 	.word	0x40012200

08008860 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008888:	2b01      	cmp	r3, #1
 800888a:	d101      	bne.n	8008890 <HAL_ADC_ConfigChannel+0x1c>
 800888c:	2302      	movs	r3, #2
 800888e:	e105      	b.n	8008a9c <HAL_ADC_ConfigChannel+0x228>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b09      	cmp	r3, #9
 800889e:	d925      	bls.n	80088ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68d9      	ldr	r1, [r3, #12]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	b29b      	uxth	r3, r3
 80088ac:	461a      	mov	r2, r3
 80088ae:	4613      	mov	r3, r2
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	4413      	add	r3, r2
 80088b4:	3b1e      	subs	r3, #30
 80088b6:	2207      	movs	r2, #7
 80088b8:	fa02 f303 	lsl.w	r3, r2, r3
 80088bc:	43da      	mvns	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	400a      	ands	r2, r1
 80088c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68d9      	ldr	r1, [r3, #12]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	b29b      	uxth	r3, r3
 80088d6:	4618      	mov	r0, r3
 80088d8:	4603      	mov	r3, r0
 80088da:	005b      	lsls	r3, r3, #1
 80088dc:	4403      	add	r3, r0
 80088de:	3b1e      	subs	r3, #30
 80088e0:	409a      	lsls	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	430a      	orrs	r2, r1
 80088e8:	60da      	str	r2, [r3, #12]
 80088ea:	e022      	b.n	8008932 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6919      	ldr	r1, [r3, #16]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	461a      	mov	r2, r3
 80088fa:	4613      	mov	r3, r2
 80088fc:	005b      	lsls	r3, r3, #1
 80088fe:	4413      	add	r3, r2
 8008900:	2207      	movs	r2, #7
 8008902:	fa02 f303 	lsl.w	r3, r2, r3
 8008906:	43da      	mvns	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	400a      	ands	r2, r1
 800890e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	6919      	ldr	r1, [r3, #16]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689a      	ldr	r2, [r3, #8]
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	b29b      	uxth	r3, r3
 8008920:	4618      	mov	r0, r3
 8008922:	4603      	mov	r3, r0
 8008924:	005b      	lsls	r3, r3, #1
 8008926:	4403      	add	r3, r0
 8008928:	409a      	lsls	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	430a      	orrs	r2, r1
 8008930:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	2b06      	cmp	r3, #6
 8008938:	d824      	bhi.n	8008984 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685a      	ldr	r2, [r3, #4]
 8008944:	4613      	mov	r3, r2
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	3b05      	subs	r3, #5
 800894c:	221f      	movs	r2, #31
 800894e:	fa02 f303 	lsl.w	r3, r2, r3
 8008952:	43da      	mvns	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	400a      	ands	r2, r1
 800895a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	b29b      	uxth	r3, r3
 8008968:	4618      	mov	r0, r3
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	3b05      	subs	r3, #5
 8008976:	fa00 f203 	lsl.w	r2, r0, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	635a      	str	r2, [r3, #52]	; 0x34
 8008982:	e04c      	b.n	8008a1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	2b0c      	cmp	r3, #12
 800898a:	d824      	bhi.n	80089d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	4613      	mov	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4413      	add	r3, r2
 800899c:	3b23      	subs	r3, #35	; 0x23
 800899e:	221f      	movs	r2, #31
 80089a0:	fa02 f303 	lsl.w	r3, r2, r3
 80089a4:	43da      	mvns	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	400a      	ands	r2, r1
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	4618      	mov	r0, r3
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	4613      	mov	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	4413      	add	r3, r2
 80089c6:	3b23      	subs	r3, #35	; 0x23
 80089c8:	fa00 f203 	lsl.w	r2, r0, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	430a      	orrs	r2, r1
 80089d2:	631a      	str	r2, [r3, #48]	; 0x30
 80089d4:	e023      	b.n	8008a1e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	685a      	ldr	r2, [r3, #4]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	3b41      	subs	r3, #65	; 0x41
 80089e8:	221f      	movs	r2, #31
 80089ea:	fa02 f303 	lsl.w	r3, r2, r3
 80089ee:	43da      	mvns	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	400a      	ands	r2, r1
 80089f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	b29b      	uxth	r3, r3
 8008a04:	4618      	mov	r0, r3
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	3b41      	subs	r3, #65	; 0x41
 8008a12:	fa00 f203 	lsl.w	r2, r0, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008a1e:	4b22      	ldr	r3, [pc, #136]	; (8008aa8 <HAL_ADC_ConfigChannel+0x234>)
 8008a20:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a21      	ldr	r2, [pc, #132]	; (8008aac <HAL_ADC_ConfigChannel+0x238>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d109      	bne.n	8008a40 <HAL_ADC_ConfigChannel+0x1cc>
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b12      	cmp	r3, #18
 8008a32:	d105      	bne.n	8008a40 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a19      	ldr	r2, [pc, #100]	; (8008aac <HAL_ADC_ConfigChannel+0x238>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d123      	bne.n	8008a92 <HAL_ADC_ConfigChannel+0x21e>
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b10      	cmp	r3, #16
 8008a50:	d003      	beq.n	8008a5a <HAL_ADC_ConfigChannel+0x1e6>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b11      	cmp	r3, #17
 8008a58:	d11b      	bne.n	8008a92 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	2b10      	cmp	r3, #16
 8008a6c:	d111      	bne.n	8008a92 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008a6e:	4b10      	ldr	r3, [pc, #64]	; (8008ab0 <HAL_ADC_ConfigChannel+0x23c>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a10      	ldr	r2, [pc, #64]	; (8008ab4 <HAL_ADC_ConfigChannel+0x240>)
 8008a74:	fba2 2303 	umull	r2, r3, r2, r3
 8008a78:	0c9a      	lsrs	r2, r3, #18
 8008a7a:	4613      	mov	r3, r2
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	005b      	lsls	r3, r3, #1
 8008a82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008a84:	e002      	b.n	8008a8c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f9      	bne.n	8008a86 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	40012300 	.word	0x40012300
 8008aac:	40012000 	.word	0x40012000
 8008ab0:	20000010 	.word	0x20000010
 8008ab4:	431bde83 	.word	0x431bde83

08008ab8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008ac0:	4b79      	ldr	r3, [pc, #484]	; (8008ca8 <ADC_Init+0x1f0>)
 8008ac2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	431a      	orrs	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	685a      	ldr	r2, [r3, #4]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6859      	ldr	r1, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	691b      	ldr	r3, [r3, #16]
 8008af8:	021a      	lsls	r2, r3, #8
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	430a      	orrs	r2, r1
 8008b00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685a      	ldr	r2, [r3, #4]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008b10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6859      	ldr	r1, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	689a      	ldr	r2, [r3, #8]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	430a      	orrs	r2, r1
 8008b22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6899      	ldr	r1, [r3, #8]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	68da      	ldr	r2, [r3, #12]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	430a      	orrs	r2, r1
 8008b44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4a:	4a58      	ldr	r2, [pc, #352]	; (8008cac <ADC_Init+0x1f4>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d022      	beq.n	8008b96 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689a      	ldr	r2, [r3, #8]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008b5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6899      	ldr	r1, [r3, #8]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6899      	ldr	r1, [r3, #8]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	430a      	orrs	r2, r1
 8008b92:	609a      	str	r2, [r3, #8]
 8008b94:	e00f      	b.n	8008bb6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008ba4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	689a      	ldr	r2, [r3, #8]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008bb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689a      	ldr	r2, [r3, #8]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 0202 	bic.w	r2, r2, #2
 8008bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	6899      	ldr	r1, [r3, #8]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	7e1b      	ldrb	r3, [r3, #24]
 8008bd0:	005a      	lsls	r2, r3, #1
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	430a      	orrs	r2, r1
 8008bd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d01b      	beq.n	8008c1c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	685a      	ldr	r2, [r3, #4]
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bf2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	685a      	ldr	r2, [r3, #4]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008c02:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	6859      	ldr	r1, [r3, #4]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	035a      	lsls	r2, r3, #13
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	430a      	orrs	r2, r1
 8008c18:	605a      	str	r2, [r3, #4]
 8008c1a:	e007      	b.n	8008c2c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c2a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008c3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	051a      	lsls	r2, r3, #20
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	430a      	orrs	r2, r1
 8008c50:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	6899      	ldr	r1, [r3, #8]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008c6e:	025a      	lsls	r2, r3, #9
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6899      	ldr	r1, [r3, #8]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	695b      	ldr	r3, [r3, #20]
 8008c92:	029a      	lsls	r2, r3, #10
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	609a      	str	r2, [r3, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	3714      	adds	r7, #20
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr
 8008ca8:	40012300 	.word	0x40012300
 8008cac:	0f000001 	.word	0x0f000001

08008cb0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d13c      	bne.n	8008d44 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d12b      	bne.n	8008d3c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d127      	bne.n	8008d3c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d006      	beq.n	8008d08 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d119      	bne.n	8008d3c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f022 0220 	bic.w	r2, r2, #32
 8008d16:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d105      	bne.n	8008d3c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d34:	f043 0201 	orr.w	r2, r3, #1
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f003 fea2 	bl	800ca86 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008d42:	e00e      	b.n	8008d62 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	f003 0310 	and.w	r3, r3, #16
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d003      	beq.n	8008d58 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f7ff fd85 	bl	8008860 <HAL_ADC_ErrorCallback>
}
 8008d56:	e004      	b.n	8008d62 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	4798      	blx	r3
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bd80      	pop	{r7, pc}

08008d6a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008d6a:	b580      	push	{r7, lr}
 8008d6c:	b084      	sub	sp, #16
 8008d6e:	af00      	add	r7, sp, #0
 8008d70:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f003 ff32 	bl	800cbe2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008d7e:	bf00      	nop
 8008d80:	3710      	adds	r7, #16
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bd80      	pop	{r7, pc}

08008d86 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008d86:	b580      	push	{r7, lr}
 8008d88:	b084      	sub	sp, #16
 8008d8a:	af00      	add	r7, sp, #0
 8008d8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d92:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2240      	movs	r2, #64	; 0x40
 8008d98:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9e:	f043 0204 	orr.w	r2, r3, #4
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f7ff fd5a 	bl	8008860 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d101      	bne.n	8008dc6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e0ed      	b.n	8008fa2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d102      	bne.n	8008dd8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7fe f90a 	bl	8006fec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f042 0201 	orr.w	r2, r2, #1
 8008de6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008de8:	f7ff fbda 	bl	80085a0 <HAL_GetTick>
 8008dec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008dee:	e012      	b.n	8008e16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008df0:	f7ff fbd6 	bl	80085a0 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b0a      	cmp	r3, #10
 8008dfc:	d90b      	bls.n	8008e16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2205      	movs	r2, #5
 8008e0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e0c5      	b.n	8008fa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0e5      	beq.n	8008df0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f022 0202 	bic.w	r2, r2, #2
 8008e32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008e34:	f7ff fbb4 	bl	80085a0 <HAL_GetTick>
 8008e38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e3a:	e012      	b.n	8008e62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008e3c:	f7ff fbb0 	bl	80085a0 <HAL_GetTick>
 8008e40:	4602      	mov	r2, r0
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	2b0a      	cmp	r3, #10
 8008e48:	d90b      	bls.n	8008e62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2205      	movs	r2, #5
 8008e5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e09f      	b.n	8008fa2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e5      	bne.n	8008e3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	7e1b      	ldrb	r3, [r3, #24]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d108      	bne.n	8008e8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008e86:	601a      	str	r2, [r3, #0]
 8008e88:	e007      	b.n	8008e9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	7e5b      	ldrb	r3, [r3, #25]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d108      	bne.n	8008eb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	681a      	ldr	r2, [r3, #0]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008eb0:	601a      	str	r2, [r3, #0]
 8008eb2:	e007      	b.n	8008ec4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ec2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	7e9b      	ldrb	r3, [r3, #26]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d108      	bne.n	8008ede <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f042 0220 	orr.w	r2, r2, #32
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	e007      	b.n	8008eee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0220 	bic.w	r2, r2, #32
 8008eec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	7edb      	ldrb	r3, [r3, #27]
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d108      	bne.n	8008f08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f022 0210 	bic.w	r2, r2, #16
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	e007      	b.n	8008f18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f042 0210 	orr.w	r2, r2, #16
 8008f16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	7f1b      	ldrb	r3, [r3, #28]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d108      	bne.n	8008f32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f042 0208 	orr.w	r2, r2, #8
 8008f2e:	601a      	str	r2, [r3, #0]
 8008f30:	e007      	b.n	8008f42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f022 0208 	bic.w	r2, r2, #8
 8008f40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	7f5b      	ldrb	r3, [r3, #29]
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d108      	bne.n	8008f5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f042 0204 	orr.w	r2, r2, #4
 8008f58:	601a      	str	r2, [r3, #0]
 8008f5a:	e007      	b.n	8008f6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f022 0204 	bic.w	r2, r2, #4
 8008f6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689a      	ldr	r2, [r3, #8]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	431a      	orrs	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	ea42 0103 	orr.w	r1, r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	1e5a      	subs	r2, r3, #1
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	430a      	orrs	r2, r1
 8008f90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
	...

08008fac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fc2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8008fc4:	7cfb      	ldrb	r3, [r7, #19]
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d003      	beq.n	8008fd2 <HAL_CAN_ConfigFilter+0x26>
 8008fca:	7cfb      	ldrb	r3, [r7, #19]
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	f040 80be 	bne.w	800914e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8008fd2:	4b65      	ldr	r3, [pc, #404]	; (8009168 <HAL_CAN_ConfigFilter+0x1bc>)
 8008fd4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fdc:	f043 0201 	orr.w	r2, r3, #1
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008fec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	021b      	lsls	r3, r3, #8
 8009002:	431a      	orrs	r2, r3
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	f003 031f 	and.w	r3, r3, #31
 8009012:	2201      	movs	r2, #1
 8009014:	fa02 f303 	lsl.w	r3, r2, r3
 8009018:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	43db      	mvns	r3, r3
 8009024:	401a      	ands	r2, r3
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d123      	bne.n	800907c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	43db      	mvns	r3, r3
 800903e:	401a      	ands	r2, r3
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009052:	683a      	ldr	r2, [r7, #0]
 8009054:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8009056:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	3248      	adds	r2, #72	; 0x48
 800905c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009070:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009072:	6979      	ldr	r1, [r7, #20]
 8009074:	3348      	adds	r3, #72	; 0x48
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	440b      	add	r3, r1
 800907a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	2b01      	cmp	r3, #1
 8009082:	d122      	bne.n	80090ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	431a      	orrs	r2, r3
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685b      	ldr	r3, [r3, #4]
 800909e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80090a0:	683a      	ldr	r2, [r7, #0]
 80090a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80090a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	3248      	adds	r2, #72	; 0x48
 80090aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80090be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80090c0:	6979      	ldr	r1, [r7, #20]
 80090c2:	3348      	adds	r3, #72	; 0x48
 80090c4:	00db      	lsls	r3, r3, #3
 80090c6:	440b      	add	r3, r1
 80090c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	699b      	ldr	r3, [r3, #24]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d109      	bne.n	80090e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	43db      	mvns	r3, r3
 80090dc:	401a      	ands	r2, r3
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80090e4:	e007      	b.n	80090f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	431a      	orrs	r2, r3
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d109      	bne.n	8009112 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	43db      	mvns	r3, r3
 8009108:	401a      	ands	r2, r3
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009110:	e007      	b.n	8009122 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	431a      	orrs	r2, r3
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d107      	bne.n	800913a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	431a      	orrs	r2, r3
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009140:	f023 0201 	bic.w	r2, r3, #1
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	e006      	b.n	800915c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
  }
}
 800915c:	4618      	mov	r0, r3
 800915e:	371c      	adds	r7, #28
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	40006400 	.word	0x40006400

0800916c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 3020 	ldrb.w	r3, [r3, #32]
 800917a:	b2db      	uxtb	r3, r3
 800917c:	2b01      	cmp	r3, #1
 800917e:	d12e      	bne.n	80091de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	2202      	movs	r2, #2
 8009184:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 0201 	bic.w	r2, r2, #1
 8009196:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009198:	f7ff fa02 	bl	80085a0 <HAL_GetTick>
 800919c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800919e:	e012      	b.n	80091c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80091a0:	f7ff f9fe 	bl	80085a0 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b0a      	cmp	r3, #10
 80091ac:	d90b      	bls.n	80091c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2205      	movs	r2, #5
 80091be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e012      	b.n	80091ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e5      	bne.n	80091a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	e006      	b.n	80091ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80091ea:	2301      	movs	r3, #1
  }
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b089      	sub	sp, #36	; 0x24
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	60f8      	str	r0, [r7, #12]
 80091fc:	60b9      	str	r1, [r7, #8]
 80091fe:	607a      	str	r2, [r7, #4]
 8009200:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009208:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8009212:	7ffb      	ldrb	r3, [r7, #31]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d003      	beq.n	8009220 <HAL_CAN_AddTxMessage+0x2c>
 8009218:	7ffb      	ldrb	r3, [r7, #31]
 800921a:	2b02      	cmp	r3, #2
 800921c:	f040 80b8 	bne.w	8009390 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009220:	69bb      	ldr	r3, [r7, #24]
 8009222:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10a      	bne.n	8009240 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009230:	2b00      	cmp	r3, #0
 8009232:	d105      	bne.n	8009240 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8009234:	69bb      	ldr	r3, [r7, #24]
 8009236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800923a:	2b00      	cmp	r3, #0
 800923c:	f000 80a0 	beq.w	8009380 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	0e1b      	lsrs	r3, r3, #24
 8009244:	f003 0303 	and.w	r3, r3, #3
 8009248:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	2b02      	cmp	r3, #2
 800924e:	d907      	bls.n	8009260 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009254:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e09e      	b.n	800939e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009260:	2201      	movs	r2, #1
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	409a      	lsls	r2, r3
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d10d      	bne.n	800928e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800927c:	68f9      	ldr	r1, [r7, #12]
 800927e:	6809      	ldr	r1, [r1, #0]
 8009280:	431a      	orrs	r2, r3
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	3318      	adds	r3, #24
 8009286:	011b      	lsls	r3, r3, #4
 8009288:	440b      	add	r3, r1
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	e00f      	b.n	80092ae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009298:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80092a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	3318      	adds	r3, #24
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	440b      	add	r3, r1
 80092ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6819      	ldr	r1, [r3, #0]
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	691a      	ldr	r2, [r3, #16]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	3318      	adds	r3, #24
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	440b      	add	r3, r1
 80092be:	3304      	adds	r3, #4
 80092c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	7d1b      	ldrb	r3, [r3, #20]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d111      	bne.n	80092ee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	3318      	adds	r3, #24
 80092d2:	011b      	lsls	r3, r3, #4
 80092d4:	4413      	add	r3, r2
 80092d6:	3304      	adds	r3, #4
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	68fa      	ldr	r2, [r7, #12]
 80092dc:	6811      	ldr	r1, [r2, #0]
 80092de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	3318      	adds	r3, #24
 80092e6:	011b      	lsls	r3, r3, #4
 80092e8:	440b      	add	r3, r1
 80092ea:	3304      	adds	r3, #4
 80092ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	3307      	adds	r3, #7
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	061a      	lsls	r2, r3, #24
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	3306      	adds	r3, #6
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	041b      	lsls	r3, r3, #16
 80092fe:	431a      	orrs	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3305      	adds	r3, #5
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	021b      	lsls	r3, r3, #8
 8009308:	4313      	orrs	r3, r2
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	3204      	adds	r2, #4
 800930e:	7812      	ldrb	r2, [r2, #0]
 8009310:	4610      	mov	r0, r2
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	6811      	ldr	r1, [r2, #0]
 8009316:	ea43 0200 	orr.w	r2, r3, r0
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	011b      	lsls	r3, r3, #4
 800931e:	440b      	add	r3, r1
 8009320:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8009324:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	3303      	adds	r3, #3
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	061a      	lsls	r2, r3, #24
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	3302      	adds	r3, #2
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	041b      	lsls	r3, r3, #16
 8009336:	431a      	orrs	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3301      	adds	r3, #1
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	021b      	lsls	r3, r3, #8
 8009340:	4313      	orrs	r3, r2
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	7812      	ldrb	r2, [r2, #0]
 8009346:	4610      	mov	r0, r2
 8009348:	68fa      	ldr	r2, [r7, #12]
 800934a:	6811      	ldr	r1, [r2, #0]
 800934c:	ea43 0200 	orr.w	r2, r3, r0
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	011b      	lsls	r3, r3, #4
 8009354:	440b      	add	r3, r1
 8009356:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800935a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	3318      	adds	r3, #24
 8009364:	011b      	lsls	r3, r3, #4
 8009366:	4413      	add	r3, r2
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	6811      	ldr	r1, [r2, #0]
 800936e:	f043 0201 	orr.w	r2, r3, #1
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	3318      	adds	r3, #24
 8009376:	011b      	lsls	r3, r3, #4
 8009378:	440b      	add	r3, r1
 800937a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	e00e      	b.n	800939e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009384:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e006      	b.n	800939e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009394:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
  }
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3724      	adds	r7, #36	; 0x24
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b085      	sub	sp, #20
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80093b2:	2300      	movs	r3, #0
 80093b4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093bc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80093be:	7afb      	ldrb	r3, [r7, #11]
 80093c0:	2b01      	cmp	r3, #1
 80093c2:	d002      	beq.n	80093ca <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80093c4:	7afb      	ldrb	r3, [r7, #11]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d11d      	bne.n	8009406 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d002      	beq.n	80093de <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d002      	beq.n	80093f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	3301      	adds	r3, #1
 80093f0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d002      	beq.n	8009406 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3301      	adds	r3, #1
 8009404:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8009406:	68fb      	ldr	r3, [r7, #12]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009414:	b480      	push	{r7}
 8009416:	b087      	sub	sp, #28
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009428:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800942a:	7dfb      	ldrb	r3, [r7, #23]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d003      	beq.n	8009438 <HAL_CAN_GetRxMessage+0x24>
 8009430:	7dfb      	ldrb	r3, [r7, #23]
 8009432:	2b02      	cmp	r3, #2
 8009434:	f040 80f3 	bne.w	800961e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10e      	bne.n	800945c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	2b00      	cmp	r3, #0
 800944a:	d116      	bne.n	800947a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009450:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	e0e7      	b.n	800962c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f003 0303 	and.w	r3, r3, #3
 8009466:	2b00      	cmp	r3, #0
 8009468:	d107      	bne.n	800947a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
 8009478:	e0d8      	b.n	800962c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	331b      	adds	r3, #27
 8009482:	011b      	lsls	r3, r3, #4
 8009484:	4413      	add	r3, r2
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0204 	and.w	r2, r3, #4
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d10c      	bne.n	80094b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	331b      	adds	r3, #27
 80094a0:	011b      	lsls	r3, r3, #4
 80094a2:	4413      	add	r3, r2
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	0d5b      	lsrs	r3, r3, #21
 80094a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	e00b      	b.n	80094ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	331b      	adds	r3, #27
 80094ba:	011b      	lsls	r3, r3, #4
 80094bc:	4413      	add	r3, r2
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	08db      	lsrs	r3, r3, #3
 80094c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681a      	ldr	r2, [r3, #0]
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	331b      	adds	r3, #27
 80094d2:	011b      	lsls	r3, r3, #4
 80094d4:	4413      	add	r3, r2
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 0202 	and.w	r2, r3, #2
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681a      	ldr	r2, [r3, #0]
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	331b      	adds	r3, #27
 80094e8:	011b      	lsls	r3, r3, #4
 80094ea:	4413      	add	r3, r2
 80094ec:	3304      	adds	r3, #4
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 020f 	and.w	r2, r3, #15
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	331b      	adds	r3, #27
 8009500:	011b      	lsls	r3, r3, #4
 8009502:	4413      	add	r3, r2
 8009504:	3304      	adds	r3, #4
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	0a1b      	lsrs	r3, r3, #8
 800950a:	b2da      	uxtb	r2, r3
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	331b      	adds	r3, #27
 8009518:	011b      	lsls	r3, r3, #4
 800951a:	4413      	add	r3, r2
 800951c:	3304      	adds	r3, #4
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	0c1b      	lsrs	r3, r3, #16
 8009522:	b29a      	uxth	r2, r3
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	011b      	lsls	r3, r3, #4
 8009530:	4413      	add	r3, r2
 8009532:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	b2da      	uxtb	r2, r3
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681a      	ldr	r2, [r3, #0]
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	011b      	lsls	r3, r3, #4
 8009546:	4413      	add	r3, r2
 8009548:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	0a1a      	lsrs	r2, r3, #8
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	3301      	adds	r3, #1
 8009554:	b2d2      	uxtb	r2, r2
 8009556:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681a      	ldr	r2, [r3, #0]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	4413      	add	r3, r2
 8009562:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	0c1a      	lsrs	r2, r3, #16
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	3302      	adds	r3, #2
 800956e:	b2d2      	uxtb	r2, r2
 8009570:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	011b      	lsls	r3, r3, #4
 800957a:	4413      	add	r3, r2
 800957c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	0e1a      	lsrs	r2, r3, #24
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	3303      	adds	r3, #3
 8009588:	b2d2      	uxtb	r2, r2
 800958a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681a      	ldr	r2, [r3, #0]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	011b      	lsls	r3, r3, #4
 8009594:	4413      	add	r3, r2
 8009596:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	3304      	adds	r3, #4
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681a      	ldr	r2, [r3, #0]
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	0a1a      	lsrs	r2, r3, #8
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	3305      	adds	r3, #5
 80095ba:	b2d2      	uxtb	r2, r2
 80095bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	011b      	lsls	r3, r3, #4
 80095c6:	4413      	add	r3, r2
 80095c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	0c1a      	lsrs	r2, r3, #16
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	3306      	adds	r3, #6
 80095d4:	b2d2      	uxtb	r2, r2
 80095d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	011b      	lsls	r3, r3, #4
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	0e1a      	lsrs	r2, r3, #24
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	3307      	adds	r3, #7
 80095ee:	b2d2      	uxtb	r2, r2
 80095f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d108      	bne.n	800960a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68da      	ldr	r2, [r3, #12]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f042 0220 	orr.w	r2, r2, #32
 8009606:	60da      	str	r2, [r3, #12]
 8009608:	e007      	b.n	800961a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	691a      	ldr	r2, [r3, #16]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f042 0220 	orr.w	r2, r2, #32
 8009618:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800961a:	2300      	movs	r3, #0
 800961c:	e006      	b.n	800962c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
  }
}
 800962c:	4618      	mov	r0, r3
 800962e:	371c      	adds	r7, #28
 8009630:	46bd      	mov	sp, r7
 8009632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009636:	4770      	bx	lr

08009638 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009638:	b480      	push	{r7}
 800963a:	b085      	sub	sp, #20
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009648:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d002      	beq.n	8009656 <HAL_CAN_ActivateNotification+0x1e>
 8009650:	7bfb      	ldrb	r3, [r7, #15]
 8009652:	2b02      	cmp	r3, #2
 8009654:	d109      	bne.n	800966a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	6959      	ldr	r1, [r3, #20]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	430a      	orrs	r2, r1
 8009664:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	e006      	b.n	8009678 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009676:	2301      	movs	r3, #1
  }
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr

08009684 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08a      	sub	sp, #40	; 0x28
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800968c:	2300      	movs	r3, #0
 800968e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80096c0:	6a3b      	ldr	r3, [r7, #32]
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d07c      	beq.n	80097c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d023      	beq.n	800971c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	2201      	movs	r2, #1
 80096da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	f003 0302 	and.w	r3, r3, #2
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d003      	beq.n	80096ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f7f8 f9e0 	bl	8001aac <HAL_CAN_TxMailbox0CompleteCallback>
 80096ec:	e016      	b.n	800971c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80096ee:	69bb      	ldr	r3, [r7, #24]
 80096f0:	f003 0304 	and.w	r3, r3, #4
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d004      	beq.n	8009702 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80096f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80096fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009700:	e00c      	b.n	800971c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009702:	69bb      	ldr	r3, [r7, #24]
 8009704:	f003 0308 	and.w	r3, r3, #8
 8009708:	2b00      	cmp	r3, #0
 800970a:	d004      	beq.n	8009716 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009712:	627b      	str	r3, [r7, #36]	; 0x24
 8009714:	e002      	b.n	800971c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f97f 	bl	8009a1a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009722:	2b00      	cmp	r3, #0
 8009724:	d024      	beq.n	8009770 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800972e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009736:	2b00      	cmp	r3, #0
 8009738:	d003      	beq.n	8009742 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f959 	bl	80099f2 <HAL_CAN_TxMailbox1CompleteCallback>
 8009740:	e016      	b.n	8009770 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009748:	2b00      	cmp	r3, #0
 800974a:	d004      	beq.n	8009756 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009752:	627b      	str	r3, [r7, #36]	; 0x24
 8009754:	e00c      	b.n	8009770 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800975c:	2b00      	cmp	r3, #0
 800975e:	d004      	beq.n	800976a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009766:	627b      	str	r3, [r7, #36]	; 0x24
 8009768:	e002      	b.n	8009770 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f95f 	bl	8009a2e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d024      	beq.n	80097c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009782:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009784:	69bb      	ldr	r3, [r7, #24]
 8009786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800978a:	2b00      	cmp	r3, #0
 800978c:	d003      	beq.n	8009796 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f939 	bl	8009a06 <HAL_CAN_TxMailbox2CompleteCallback>
 8009794:	e016      	b.n	80097c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d004      	beq.n	80097aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
 80097a8:	e00c      	b.n	80097c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80097aa:	69bb      	ldr	r3, [r7, #24]
 80097ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d004      	beq.n	80097be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ba:	627b      	str	r3, [r7, #36]	; 0x24
 80097bc:	e002      	b.n	80097c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f93f 	bl	8009a42 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80097c4:	6a3b      	ldr	r3, [r7, #32]
 80097c6:	f003 0308 	and.w	r3, r3, #8
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00c      	beq.n	80097e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	f003 0310 	and.w	r3, r3, #16
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d007      	beq.n	80097e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80097de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2210      	movs	r2, #16
 80097e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80097e8:	6a3b      	ldr	r3, [r7, #32]
 80097ea:	f003 0304 	and.w	r3, r3, #4
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00b      	beq.n	800980a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	f003 0308 	and.w	r3, r3, #8
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d006      	beq.n	800980a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	2208      	movs	r2, #8
 8009802:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f000 f926 	bl	8009a56 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800980a:	6a3b      	ldr	r3, [r7, #32]
 800980c:	f003 0302 	and.w	r3, r3, #2
 8009810:	2b00      	cmp	r3, #0
 8009812:	d009      	beq.n	8009828 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f003 0303 	and.w	r3, r3, #3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d002      	beq.n	8009828 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f7f8 f8aa 	bl	800197c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00c      	beq.n	800984c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f003 0310 	and.w	r3, r3, #16
 8009838:	2b00      	cmp	r3, #0
 800983a:	d007      	beq.n	800984c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800983c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009842:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2210      	movs	r2, #16
 800984a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800984c:	6a3b      	ldr	r3, [r7, #32]
 800984e:	f003 0320 	and.w	r3, r3, #32
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00b      	beq.n	800986e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f003 0308 	and.w	r3, r3, #8
 800985c:	2b00      	cmp	r3, #0
 800985e:	d006      	beq.n	800986e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2208      	movs	r2, #8
 8009866:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f8fe 	bl	8009a6a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	f003 0310 	and.w	r3, r3, #16
 8009874:	2b00      	cmp	r3, #0
 8009876:	d009      	beq.n	800988c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f7f8 f8b2 	bl	80019f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00b      	beq.n	80098ae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	f003 0310 	and.w	r3, r3, #16
 800989c:	2b00      	cmp	r3, #0
 800989e:	d006      	beq.n	80098ae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	2210      	movs	r2, #16
 80098a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f000 f8e8 	bl	8009a7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d00b      	beq.n	80098d0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	f003 0308 	and.w	r3, r3, #8
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d006      	beq.n	80098d0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2208      	movs	r2, #8
 80098c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f000 f8e1 	bl	8009a92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80098d0:	6a3b      	ldr	r3, [r7, #32]
 80098d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d07b      	beq.n	80099d2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80098da:	69fb      	ldr	r3, [r7, #28]
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d072      	beq.n	80099ca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d008      	beq.n	8009900 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d003      	beq.n	8009900 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80098f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fa:	f043 0301 	orr.w	r3, r3, #1
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009900:	6a3b      	ldr	r3, [r7, #32]
 8009902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009906:	2b00      	cmp	r3, #0
 8009908:	d008      	beq.n	800991c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	f043 0302 	orr.w	r3, r3, #2
 800991a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009922:	2b00      	cmp	r3, #0
 8009924:	d008      	beq.n	8009938 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800992c:	2b00      	cmp	r3, #0
 800992e:	d003      	beq.n	8009938 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	f043 0304 	orr.w	r3, r3, #4
 8009936:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800993e:	2b00      	cmp	r3, #0
 8009940:	d043      	beq.n	80099ca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009948:	2b00      	cmp	r3, #0
 800994a:	d03e      	beq.n	80099ca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009952:	2b60      	cmp	r3, #96	; 0x60
 8009954:	d02b      	beq.n	80099ae <HAL_CAN_IRQHandler+0x32a>
 8009956:	2b60      	cmp	r3, #96	; 0x60
 8009958:	d82e      	bhi.n	80099b8 <HAL_CAN_IRQHandler+0x334>
 800995a:	2b50      	cmp	r3, #80	; 0x50
 800995c:	d022      	beq.n	80099a4 <HAL_CAN_IRQHandler+0x320>
 800995e:	2b50      	cmp	r3, #80	; 0x50
 8009960:	d82a      	bhi.n	80099b8 <HAL_CAN_IRQHandler+0x334>
 8009962:	2b40      	cmp	r3, #64	; 0x40
 8009964:	d019      	beq.n	800999a <HAL_CAN_IRQHandler+0x316>
 8009966:	2b40      	cmp	r3, #64	; 0x40
 8009968:	d826      	bhi.n	80099b8 <HAL_CAN_IRQHandler+0x334>
 800996a:	2b30      	cmp	r3, #48	; 0x30
 800996c:	d010      	beq.n	8009990 <HAL_CAN_IRQHandler+0x30c>
 800996e:	2b30      	cmp	r3, #48	; 0x30
 8009970:	d822      	bhi.n	80099b8 <HAL_CAN_IRQHandler+0x334>
 8009972:	2b10      	cmp	r3, #16
 8009974:	d002      	beq.n	800997c <HAL_CAN_IRQHandler+0x2f8>
 8009976:	2b20      	cmp	r3, #32
 8009978:	d005      	beq.n	8009986 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800997a:	e01d      	b.n	80099b8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	f043 0308 	orr.w	r3, r3, #8
 8009982:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009984:	e019      	b.n	80099ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	f043 0310 	orr.w	r3, r3, #16
 800998c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800998e:	e014      	b.n	80099ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	f043 0320 	orr.w	r3, r3, #32
 8009996:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009998:	e00f      	b.n	80099ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80099a2:	e00a      	b.n	80099ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80099a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80099ac:	e005      	b.n	80099ba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80099b6:	e000      	b.n	80099ba <HAL_CAN_IRQHandler+0x336>
            break;
 80099b8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	699a      	ldr	r2, [r3, #24]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80099c8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2204      	movs	r2, #4
 80099d0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80099d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d008      	beq.n	80099ea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	431a      	orrs	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f7f8 f83d 	bl	8001a64 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80099ea:	bf00      	nop
 80099ec:	3728      	adds	r7, #40	; 0x28
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b083      	sub	sp, #12
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80099fa:	bf00      	nop
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009a0e:	bf00      	nop
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	b083      	sub	sp, #12
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009a22:	bf00      	nop
 8009a24:	370c      	adds	r7, #12
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr

08009a2e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009a2e:	b480      	push	{r7}
 8009a30:	b083      	sub	sp, #12
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009a36:	bf00      	nop
 8009a38:	370c      	adds	r7, #12
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a40:	4770      	bx	lr

08009a42 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009a42:	b480      	push	{r7}
 8009a44:	b083      	sub	sp, #12
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009a4a:	bf00      	nop
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009a5e:	bf00      	nop
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009a72:	bf00      	nop
 8009a74:	370c      	adds	r7, #12
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009a7e:	b480      	push	{r7}
 8009a80:	b083      	sub	sp, #12
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009a86:	bf00      	nop
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009a9a:	bf00      	nop
 8009a9c:	370c      	adds	r7, #12
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	b085      	sub	sp, #20
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ab8:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8009aba:	7bbb      	ldrb	r3, [r7, #14]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d002      	beq.n	8009ac6 <HAL_CAN_ResetError+0x20>
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d103      	bne.n	8009ace <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	625a      	str	r2, [r3, #36]	; 0x24
 8009acc:	e007      	b.n	8009ade <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009ada:	2301      	movs	r3, #1
 8009adc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <__NVIC_SetPriorityGrouping>:
{
 8009aec:	b480      	push	{r7}
 8009aee:	b085      	sub	sp, #20
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009afc:	4b0c      	ldr	r3, [pc, #48]	; (8009b30 <__NVIC_SetPriorityGrouping+0x44>)
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009b08:	4013      	ands	r3, r2
 8009b0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009b1e:	4a04      	ldr	r2, [pc, #16]	; (8009b30 <__NVIC_SetPriorityGrouping+0x44>)
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	60d3      	str	r3, [r2, #12]
}
 8009b24:	bf00      	nop
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	e000ed00 	.word	0xe000ed00

08009b34 <__NVIC_GetPriorityGrouping>:
{
 8009b34:	b480      	push	{r7}
 8009b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b38:	4b04      	ldr	r3, [pc, #16]	; (8009b4c <__NVIC_GetPriorityGrouping+0x18>)
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	0a1b      	lsrs	r3, r3, #8
 8009b3e:	f003 0307 	and.w	r3, r3, #7
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr
 8009b4c:	e000ed00 	.word	0xe000ed00

08009b50 <__NVIC_EnableIRQ>:
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	4603      	mov	r3, r0
 8009b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	db0b      	blt.n	8009b7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	f003 021f 	and.w	r2, r3, #31
 8009b68:	4907      	ldr	r1, [pc, #28]	; (8009b88 <__NVIC_EnableIRQ+0x38>)
 8009b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b6e:	095b      	lsrs	r3, r3, #5
 8009b70:	2001      	movs	r0, #1
 8009b72:	fa00 f202 	lsl.w	r2, r0, r2
 8009b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009b7a:	bf00      	nop
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	e000e100 	.word	0xe000e100

08009b8c <__NVIC_SetPriority>:
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	4603      	mov	r3, r0
 8009b94:	6039      	str	r1, [r7, #0]
 8009b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	db0a      	blt.n	8009bb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	b2da      	uxtb	r2, r3
 8009ba4:	490c      	ldr	r1, [pc, #48]	; (8009bd8 <__NVIC_SetPriority+0x4c>)
 8009ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009baa:	0112      	lsls	r2, r2, #4
 8009bac:	b2d2      	uxtb	r2, r2
 8009bae:	440b      	add	r3, r1
 8009bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009bb4:	e00a      	b.n	8009bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	b2da      	uxtb	r2, r3
 8009bba:	4908      	ldr	r1, [pc, #32]	; (8009bdc <__NVIC_SetPriority+0x50>)
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	f003 030f 	and.w	r3, r3, #15
 8009bc2:	3b04      	subs	r3, #4
 8009bc4:	0112      	lsls	r2, r2, #4
 8009bc6:	b2d2      	uxtb	r2, r2
 8009bc8:	440b      	add	r3, r1
 8009bca:	761a      	strb	r2, [r3, #24]
}
 8009bcc:	bf00      	nop
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	e000e100 	.word	0xe000e100
 8009bdc:	e000ed00 	.word	0xe000ed00

08009be0 <NVIC_EncodePriority>:
{
 8009be0:	b480      	push	{r7}
 8009be2:	b089      	sub	sp, #36	; 0x24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f003 0307 	and.w	r3, r3, #7
 8009bf2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	f1c3 0307 	rsb	r3, r3, #7
 8009bfa:	2b04      	cmp	r3, #4
 8009bfc:	bf28      	it	cs
 8009bfe:	2304      	movcs	r3, #4
 8009c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c02:	69fb      	ldr	r3, [r7, #28]
 8009c04:	3304      	adds	r3, #4
 8009c06:	2b06      	cmp	r3, #6
 8009c08:	d902      	bls.n	8009c10 <NVIC_EncodePriority+0x30>
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	3b03      	subs	r3, #3
 8009c0e:	e000      	b.n	8009c12 <NVIC_EncodePriority+0x32>
 8009c10:	2300      	movs	r3, #0
 8009c12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c14:	f04f 32ff 	mov.w	r2, #4294967295
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009c1e:	43da      	mvns	r2, r3
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	401a      	ands	r2, r3
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009c28:	f04f 31ff 	mov.w	r1, #4294967295
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c32:	43d9      	mvns	r1, r3
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c38:	4313      	orrs	r3, r2
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3724      	adds	r7, #36	; 0x24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b082      	sub	sp, #8
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009c4e:	6878      	ldr	r0, [r7, #4]
 8009c50:	f7ff ff4c 	bl	8009aec <__NVIC_SetPriorityGrouping>
}
 8009c54:	bf00      	nop
 8009c56:	3708      	adds	r7, #8
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b086      	sub	sp, #24
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	60b9      	str	r1, [r7, #8]
 8009c66:	607a      	str	r2, [r7, #4]
 8009c68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009c6e:	f7ff ff61 	bl	8009b34 <__NVIC_GetPriorityGrouping>
 8009c72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	68b9      	ldr	r1, [r7, #8]
 8009c78:	6978      	ldr	r0, [r7, #20]
 8009c7a:	f7ff ffb1 	bl	8009be0 <NVIC_EncodePriority>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009c84:	4611      	mov	r1, r2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7ff ff80 	bl	8009b8c <__NVIC_SetPriority>
}
 8009c8c:	bf00      	nop
 8009c8e:	3718      	adds	r7, #24
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7ff ff54 	bl	8009b50 <__NVIC_EnableIRQ>
}
 8009ca8:	bf00      	nop
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e00e      	b.n	8009ce0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	795b      	ldrb	r3, [r3, #5]
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d105      	bne.n	8009cd8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f7fd fa6e 	bl	80071b4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3708      	adds	r7, #8
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009cf4:	f7fe fc54 	bl	80085a0 <HAL_GetTick>
 8009cf8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e099      	b.n	8009e38 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2202      	movs	r2, #2
 8009d08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	681a      	ldr	r2, [r3, #0]
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f022 0201 	bic.w	r2, r2, #1
 8009d22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009d24:	e00f      	b.n	8009d46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009d26:	f7fe fc3b 	bl	80085a0 <HAL_GetTick>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	2b05      	cmp	r3, #5
 8009d32:	d908      	bls.n	8009d46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	2220      	movs	r2, #32
 8009d38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2203      	movs	r2, #3
 8009d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009d42:	2303      	movs	r3, #3
 8009d44:	e078      	b.n	8009e38 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d1e8      	bne.n	8009d26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009d5c:	697a      	ldr	r2, [r7, #20]
 8009d5e:	4b38      	ldr	r3, [pc, #224]	; (8009e40 <HAL_DMA_Init+0x158>)
 8009d60:	4013      	ands	r3, r2
 8009d62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	689b      	ldr	r3, [r3, #8]
 8009d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009d7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	699b      	ldr	r3, [r3, #24]
 8009d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009d8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6a1b      	ldr	r3, [r3, #32]
 8009d90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009d92:	697a      	ldr	r2, [r7, #20]
 8009d94:	4313      	orrs	r3, r2
 8009d96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9c:	2b04      	cmp	r3, #4
 8009d9e:	d107      	bne.n	8009db0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da8:	4313      	orrs	r3, r2
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	697a      	ldr	r2, [r7, #20]
 8009db6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	f023 0307 	bic.w	r3, r3, #7
 8009dc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dcc:	697a      	ldr	r2, [r7, #20]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd6:	2b04      	cmp	r3, #4
 8009dd8:	d117      	bne.n	8009e0a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00e      	beq.n	8009e0a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 fa6f 	bl	800a2d0 <DMA_CheckFifoParam>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d008      	beq.n	8009e0a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2240      	movs	r2, #64	; 0x40
 8009dfc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2201      	movs	r2, #1
 8009e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009e06:	2301      	movs	r3, #1
 8009e08:	e016      	b.n	8009e38 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 fa26 	bl	800a264 <DMA_CalcBaseAndBitshift>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e20:	223f      	movs	r2, #63	; 0x3f
 8009e22:	409a      	lsls	r2, r3
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2201      	movs	r2, #1
 8009e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009e36:	2300      	movs	r3, #0
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	f010803f 	.word	0xf010803f

08009e44 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009e52:	2300      	movs	r3, #0
 8009e54:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e5a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d101      	bne.n	8009e6a <HAL_DMA_Start_IT+0x26>
 8009e66:	2302      	movs	r3, #2
 8009e68:	e040      	b.n	8009eec <HAL_DMA_Start_IT+0xa8>
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	d12f      	bne.n	8009ede <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2202      	movs	r2, #2
 8009e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	68b9      	ldr	r1, [r7, #8]
 8009e92:	68f8      	ldr	r0, [r7, #12]
 8009e94:	f000 f9b8 	bl	800a208 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e9c:	223f      	movs	r2, #63	; 0x3f
 8009e9e:	409a      	lsls	r2, r3
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0216 	orr.w	r2, r2, #22
 8009eb2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d007      	beq.n	8009ecc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f042 0208 	orr.w	r2, r2, #8
 8009eca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	f042 0201 	orr.w	r2, r2, #1
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	e005      	b.n	8009eea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b086      	sub	sp, #24
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009efc:	2300      	movs	r3, #0
 8009efe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009f00:	4b8e      	ldr	r3, [pc, #568]	; (800a13c <HAL_DMA_IRQHandler+0x248>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a8e      	ldr	r2, [pc, #568]	; (800a140 <HAL_DMA_IRQHandler+0x24c>)
 8009f06:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0a:	0a9b      	lsrs	r3, r3, #10
 8009f0c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f12:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f1e:	2208      	movs	r2, #8
 8009f20:	409a      	lsls	r2, r3
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	4013      	ands	r3, r2
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d01a      	beq.n	8009f60 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 0304 	and.w	r3, r3, #4
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d013      	beq.n	8009f60 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f022 0204 	bic.w	r2, r2, #4
 8009f46:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f4c:	2208      	movs	r2, #8
 8009f4e:	409a      	lsls	r2, r3
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f58:	f043 0201 	orr.w	r2, r3, #1
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f64:	2201      	movs	r2, #1
 8009f66:	409a      	lsls	r2, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	4013      	ands	r3, r2
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d012      	beq.n	8009f96 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	695b      	ldr	r3, [r3, #20]
 8009f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00b      	beq.n	8009f96 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f82:	2201      	movs	r2, #1
 8009f84:	409a      	lsls	r2, r3
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f8e:	f043 0202 	orr.w	r2, r3, #2
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f9a:	2204      	movs	r2, #4
 8009f9c:	409a      	lsls	r2, r3
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d012      	beq.n	8009fcc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0302 	and.w	r3, r3, #2
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00b      	beq.n	8009fcc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fb8:	2204      	movs	r2, #4
 8009fba:	409a      	lsls	r2, r3
 8009fbc:	693b      	ldr	r3, [r7, #16]
 8009fbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fc4:	f043 0204 	orr.w	r2, r3, #4
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd0:	2210      	movs	r2, #16
 8009fd2:	409a      	lsls	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d043      	beq.n	800a064 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 0308 	and.w	r3, r3, #8
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d03c      	beq.n	800a064 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fee:	2210      	movs	r2, #16
 8009ff0:	409a      	lsls	r2, r3
 8009ff2:	693b      	ldr	r3, [r7, #16]
 8009ff4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a000:	2b00      	cmp	r3, #0
 800a002:	d018      	beq.n	800a036 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d108      	bne.n	800a024 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a016:	2b00      	cmp	r3, #0
 800a018:	d024      	beq.n	800a064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	4798      	blx	r3
 800a022:	e01f      	b.n	800a064 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d01b      	beq.n	800a064 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	4798      	blx	r3
 800a034:	e016      	b.n	800a064 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a040:	2b00      	cmp	r3, #0
 800a042:	d107      	bne.n	800a054 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0208 	bic.w	r2, r2, #8
 800a052:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d003      	beq.n	800a064 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a068:	2220      	movs	r2, #32
 800a06a:	409a      	lsls	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4013      	ands	r3, r2
 800a070:	2b00      	cmp	r3, #0
 800a072:	f000 808f 	beq.w	800a194 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f003 0310 	and.w	r3, r3, #16
 800a080:	2b00      	cmp	r3, #0
 800a082:	f000 8087 	beq.w	800a194 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a08a:	2220      	movs	r2, #32
 800a08c:	409a      	lsls	r2, r3
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b05      	cmp	r3, #5
 800a09c:	d136      	bne.n	800a10c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f022 0216 	bic.w	r2, r2, #22
 800a0ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	695a      	ldr	r2, [r3, #20]
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a0bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d103      	bne.n	800a0ce <HAL_DMA_IRQHandler+0x1da>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d007      	beq.n	800a0de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f022 0208 	bic.w	r2, r2, #8
 800a0dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0e2:	223f      	movs	r2, #63	; 0x3f
 800a0e4:	409a      	lsls	r2, r3
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d07e      	beq.n	800a200 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	4798      	blx	r3
        }
        return;
 800a10a:	e079      	b.n	800a200 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a116:	2b00      	cmp	r3, #0
 800a118:	d01d      	beq.n	800a156 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d10d      	bne.n	800a144 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d031      	beq.n	800a194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	4798      	blx	r3
 800a138:	e02c      	b.n	800a194 <HAL_DMA_IRQHandler+0x2a0>
 800a13a:	bf00      	nop
 800a13c:	20000010 	.word	0x20000010
 800a140:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d023      	beq.n	800a194 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	4798      	blx	r3
 800a154:	e01e      	b.n	800a194 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10f      	bne.n	800a184 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f022 0210 	bic.w	r2, r2, #16
 800a172:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2200      	movs	r2, #0
 800a180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d003      	beq.n	800a194 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d032      	beq.n	800a202 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d022      	beq.n	800a1ee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2205      	movs	r2, #5
 800a1ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f022 0201 	bic.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	60bb      	str	r3, [r7, #8]
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d307      	bcc.n	800a1dc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d1f2      	bne.n	800a1c0 <HAL_DMA_IRQHandler+0x2cc>
 800a1da:	e000      	b.n	800a1de <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a1dc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d005      	beq.n	800a202 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	4798      	blx	r3
 800a1fe:	e000      	b.n	800a202 <HAL_DMA_IRQHandler+0x30e>
        return;
 800a200:	bf00      	nop
    }
  }
}
 800a202:	3718      	adds	r7, #24
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	607a      	str	r2, [r7, #4]
 800a214:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a224:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	2b40      	cmp	r3, #64	; 0x40
 800a234:	d108      	bne.n	800a248 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68ba      	ldr	r2, [r7, #8]
 800a244:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a246:	e007      	b.n	800a258 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68ba      	ldr	r2, [r7, #8]
 800a24e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	60da      	str	r2, [r3, #12]
}
 800a258:	bf00      	nop
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	b2db      	uxtb	r3, r3
 800a272:	3b10      	subs	r3, #16
 800a274:	4a14      	ldr	r2, [pc, #80]	; (800a2c8 <DMA_CalcBaseAndBitshift+0x64>)
 800a276:	fba2 2303 	umull	r2, r3, r2, r3
 800a27a:	091b      	lsrs	r3, r3, #4
 800a27c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a27e:	4a13      	ldr	r2, [pc, #76]	; (800a2cc <DMA_CalcBaseAndBitshift+0x68>)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4413      	add	r3, r2
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	461a      	mov	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2b03      	cmp	r3, #3
 800a290:	d909      	bls.n	800a2a6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a29a:	f023 0303 	bic.w	r3, r3, #3
 800a29e:	1d1a      	adds	r2, r3, #4
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	659a      	str	r2, [r3, #88]	; 0x58
 800a2a4:	e007      	b.n	800a2b6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a2ae:	f023 0303 	bic.w	r3, r3, #3
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	aaaaaaab 	.word	0xaaaaaaab
 800a2cc:	080162bc 	.word	0x080162bc

0800a2d0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d11f      	bne.n	800a32a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	2b03      	cmp	r3, #3
 800a2ee:	d856      	bhi.n	800a39e <DMA_CheckFifoParam+0xce>
 800a2f0:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <DMA_CheckFifoParam+0x28>)
 800a2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f6:	bf00      	nop
 800a2f8:	0800a309 	.word	0x0800a309
 800a2fc:	0800a31b 	.word	0x0800a31b
 800a300:	0800a309 	.word	0x0800a309
 800a304:	0800a39f 	.word	0x0800a39f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d046      	beq.n	800a3a2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a318:	e043      	b.n	800a3a2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a322:	d140      	bne.n	800a3a6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a328:	e03d      	b.n	800a3a6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	699b      	ldr	r3, [r3, #24]
 800a32e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a332:	d121      	bne.n	800a378 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	2b03      	cmp	r3, #3
 800a338:	d837      	bhi.n	800a3aa <DMA_CheckFifoParam+0xda>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <DMA_CheckFifoParam+0x70>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a351 	.word	0x0800a351
 800a344:	0800a357 	.word	0x0800a357
 800a348:	0800a351 	.word	0x0800a351
 800a34c:	0800a369 	.word	0x0800a369
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a350:	2301      	movs	r3, #1
 800a352:	73fb      	strb	r3, [r7, #15]
      break;
 800a354:	e030      	b.n	800a3b8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a35a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d025      	beq.n	800a3ae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a362:	2301      	movs	r3, #1
 800a364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a366:	e022      	b.n	800a3ae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a370:	d11f      	bne.n	800a3b2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a376:	e01c      	b.n	800a3b2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	2b02      	cmp	r3, #2
 800a37c:	d903      	bls.n	800a386 <DMA_CheckFifoParam+0xb6>
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	2b03      	cmp	r3, #3
 800a382:	d003      	beq.n	800a38c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a384:	e018      	b.n	800a3b8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	73fb      	strb	r3, [r7, #15]
      break;
 800a38a:	e015      	b.n	800a3b8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00e      	beq.n	800a3b6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	73fb      	strb	r3, [r7, #15]
      break;
 800a39c:	e00b      	b.n	800a3b6 <DMA_CheckFifoParam+0xe6>
      break;
 800a39e:	bf00      	nop
 800a3a0:	e00a      	b.n	800a3b8 <DMA_CheckFifoParam+0xe8>
      break;
 800a3a2:	bf00      	nop
 800a3a4:	e008      	b.n	800a3b8 <DMA_CheckFifoParam+0xe8>
      break;
 800a3a6:	bf00      	nop
 800a3a8:	e006      	b.n	800a3b8 <DMA_CheckFifoParam+0xe8>
      break;
 800a3aa:	bf00      	nop
 800a3ac:	e004      	b.n	800a3b8 <DMA_CheckFifoParam+0xe8>
      break;
 800a3ae:	bf00      	nop
 800a3b0:	e002      	b.n	800a3b8 <DMA_CheckFifoParam+0xe8>
      break;   
 800a3b2:	bf00      	nop
 800a3b4:	e000      	b.n	800a3b8 <DMA_CheckFifoParam+0xe8>
      break;
 800a3b6:	bf00      	nop
    }
  } 
  
  return status; 
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3714      	adds	r7, #20
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop

0800a3c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b089      	sub	sp, #36	; 0x24
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a3de:	2300      	movs	r3, #0
 800a3e0:	61fb      	str	r3, [r7, #28]
 800a3e2:	e16b      	b.n	800a6bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	f040 815a 	bne.w	800a6b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f003 0303 	and.w	r3, r3, #3
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d005      	beq.n	800a41a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a416:	2b02      	cmp	r3, #2
 800a418:	d130      	bne.n	800a47c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	689b      	ldr	r3, [r3, #8]
 800a41e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	005b      	lsls	r3, r3, #1
 800a424:	2203      	movs	r2, #3
 800a426:	fa02 f303 	lsl.w	r3, r2, r3
 800a42a:	43db      	mvns	r3, r3
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	4013      	ands	r3, r2
 800a430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68da      	ldr	r2, [r3, #12]
 800a436:	69fb      	ldr	r3, [r7, #28]
 800a438:	005b      	lsls	r3, r3, #1
 800a43a:	fa02 f303 	lsl.w	r3, r2, r3
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	4313      	orrs	r3, r2
 800a442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a450:	2201      	movs	r2, #1
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	fa02 f303 	lsl.w	r3, r2, r3
 800a458:	43db      	mvns	r3, r3
 800a45a:	69ba      	ldr	r2, [r7, #24]
 800a45c:	4013      	ands	r3, r2
 800a45e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	685b      	ldr	r3, [r3, #4]
 800a464:	091b      	lsrs	r3, r3, #4
 800a466:	f003 0201 	and.w	r2, r3, #1
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	fa02 f303 	lsl.w	r3, r2, r3
 800a470:	69ba      	ldr	r2, [r7, #24]
 800a472:	4313      	orrs	r3, r2
 800a474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	69ba      	ldr	r2, [r7, #24]
 800a47a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	f003 0303 	and.w	r3, r3, #3
 800a484:	2b03      	cmp	r3, #3
 800a486:	d017      	beq.n	800a4b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	68db      	ldr	r3, [r3, #12]
 800a48c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	005b      	lsls	r3, r3, #1
 800a492:	2203      	movs	r2, #3
 800a494:	fa02 f303 	lsl.w	r3, r2, r3
 800a498:	43db      	mvns	r3, r3
 800a49a:	69ba      	ldr	r2, [r7, #24]
 800a49c:	4013      	ands	r3, r2
 800a49e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	689a      	ldr	r2, [r3, #8]
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	005b      	lsls	r3, r3, #1
 800a4a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ac:	69ba      	ldr	r2, [r7, #24]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	f003 0303 	and.w	r3, r3, #3
 800a4c0:	2b02      	cmp	r3, #2
 800a4c2:	d123      	bne.n	800a50c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	08da      	lsrs	r2, r3, #3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	3208      	adds	r2, #8
 800a4cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a4d2:	69fb      	ldr	r3, [r7, #28]
 800a4d4:	f003 0307 	and.w	r3, r3, #7
 800a4d8:	009b      	lsls	r3, r3, #2
 800a4da:	220f      	movs	r2, #15
 800a4dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a4e0:	43db      	mvns	r3, r3
 800a4e2:	69ba      	ldr	r2, [r7, #24]
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	691a      	ldr	r2, [r3, #16]
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f8:	69ba      	ldr	r2, [r7, #24]
 800a4fa:	4313      	orrs	r3, r2
 800a4fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	08da      	lsrs	r2, r3, #3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	3208      	adds	r2, #8
 800a506:	69b9      	ldr	r1, [r7, #24]
 800a508:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a512:	69fb      	ldr	r3, [r7, #28]
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	2203      	movs	r2, #3
 800a518:	fa02 f303 	lsl.w	r3, r2, r3
 800a51c:	43db      	mvns	r3, r3
 800a51e:	69ba      	ldr	r2, [r7, #24]
 800a520:	4013      	ands	r3, r2
 800a522:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	f003 0203 	and.w	r2, r3, #3
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	005b      	lsls	r3, r3, #1
 800a530:	fa02 f303 	lsl.w	r3, r2, r3
 800a534:	69ba      	ldr	r2, [r7, #24]
 800a536:	4313      	orrs	r3, r2
 800a538:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	69ba      	ldr	r2, [r7, #24]
 800a53e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a548:	2b00      	cmp	r3, #0
 800a54a:	f000 80b4 	beq.w	800a6b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a54e:	2300      	movs	r3, #0
 800a550:	60fb      	str	r3, [r7, #12]
 800a552:	4b60      	ldr	r3, [pc, #384]	; (800a6d4 <HAL_GPIO_Init+0x30c>)
 800a554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a556:	4a5f      	ldr	r2, [pc, #380]	; (800a6d4 <HAL_GPIO_Init+0x30c>)
 800a558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a55c:	6453      	str	r3, [r2, #68]	; 0x44
 800a55e:	4b5d      	ldr	r3, [pc, #372]	; (800a6d4 <HAL_GPIO_Init+0x30c>)
 800a560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a566:	60fb      	str	r3, [r7, #12]
 800a568:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a56a:	4a5b      	ldr	r2, [pc, #364]	; (800a6d8 <HAL_GPIO_Init+0x310>)
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	089b      	lsrs	r3, r3, #2
 800a570:	3302      	adds	r3, #2
 800a572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a576:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a578:	69fb      	ldr	r3, [r7, #28]
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	220f      	movs	r2, #15
 800a582:	fa02 f303 	lsl.w	r3, r2, r3
 800a586:	43db      	mvns	r3, r3
 800a588:	69ba      	ldr	r2, [r7, #24]
 800a58a:	4013      	ands	r3, r2
 800a58c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a52      	ldr	r2, [pc, #328]	; (800a6dc <HAL_GPIO_Init+0x314>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d02b      	beq.n	800a5ee <HAL_GPIO_Init+0x226>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4a51      	ldr	r2, [pc, #324]	; (800a6e0 <HAL_GPIO_Init+0x318>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d025      	beq.n	800a5ea <HAL_GPIO_Init+0x222>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	4a50      	ldr	r2, [pc, #320]	; (800a6e4 <HAL_GPIO_Init+0x31c>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d01f      	beq.n	800a5e6 <HAL_GPIO_Init+0x21e>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	4a4f      	ldr	r2, [pc, #316]	; (800a6e8 <HAL_GPIO_Init+0x320>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d019      	beq.n	800a5e2 <HAL_GPIO_Init+0x21a>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	4a4e      	ldr	r2, [pc, #312]	; (800a6ec <HAL_GPIO_Init+0x324>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	d013      	beq.n	800a5de <HAL_GPIO_Init+0x216>
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	4a4d      	ldr	r2, [pc, #308]	; (800a6f0 <HAL_GPIO_Init+0x328>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d00d      	beq.n	800a5da <HAL_GPIO_Init+0x212>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	4a4c      	ldr	r2, [pc, #304]	; (800a6f4 <HAL_GPIO_Init+0x32c>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d007      	beq.n	800a5d6 <HAL_GPIO_Init+0x20e>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	4a4b      	ldr	r2, [pc, #300]	; (800a6f8 <HAL_GPIO_Init+0x330>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d101      	bne.n	800a5d2 <HAL_GPIO_Init+0x20a>
 800a5ce:	2307      	movs	r3, #7
 800a5d0:	e00e      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5d2:	2308      	movs	r3, #8
 800a5d4:	e00c      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5d6:	2306      	movs	r3, #6
 800a5d8:	e00a      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5da:	2305      	movs	r3, #5
 800a5dc:	e008      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5de:	2304      	movs	r3, #4
 800a5e0:	e006      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e004      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	e002      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e000      	b.n	800a5f0 <HAL_GPIO_Init+0x228>
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	69fa      	ldr	r2, [r7, #28]
 800a5f2:	f002 0203 	and.w	r2, r2, #3
 800a5f6:	0092      	lsls	r2, r2, #2
 800a5f8:	4093      	lsls	r3, r2
 800a5fa:	69ba      	ldr	r2, [r7, #24]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a600:	4935      	ldr	r1, [pc, #212]	; (800a6d8 <HAL_GPIO_Init+0x310>)
 800a602:	69fb      	ldr	r3, [r7, #28]
 800a604:	089b      	lsrs	r3, r3, #2
 800a606:	3302      	adds	r3, #2
 800a608:	69ba      	ldr	r2, [r7, #24]
 800a60a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a60e:	4b3b      	ldr	r3, [pc, #236]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	43db      	mvns	r3, r3
 800a618:	69ba      	ldr	r2, [r7, #24]
 800a61a:	4013      	ands	r3, r2
 800a61c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a626:	2b00      	cmp	r3, #0
 800a628:	d003      	beq.n	800a632 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a62a:	69ba      	ldr	r2, [r7, #24]
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	4313      	orrs	r3, r2
 800a630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a632:	4a32      	ldr	r2, [pc, #200]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a638:	4b30      	ldr	r3, [pc, #192]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	43db      	mvns	r3, r3
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	4013      	ands	r3, r2
 800a646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a650:	2b00      	cmp	r3, #0
 800a652:	d003      	beq.n	800a65c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a654:	69ba      	ldr	r2, [r7, #24]
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	4313      	orrs	r3, r2
 800a65a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a65c:	4a27      	ldr	r2, [pc, #156]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a662:	4b26      	ldr	r3, [pc, #152]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	43db      	mvns	r3, r3
 800a66c:	69ba      	ldr	r2, [r7, #24]
 800a66e:	4013      	ands	r3, r2
 800a670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d003      	beq.n	800a686 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	4313      	orrs	r3, r2
 800a684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a686:	4a1d      	ldr	r2, [pc, #116]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a68c:	4b1b      	ldr	r3, [pc, #108]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	43db      	mvns	r3, r3
 800a696:	69ba      	ldr	r2, [r7, #24]
 800a698:	4013      	ands	r3, r2
 800a69a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d003      	beq.n	800a6b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a6a8:	69ba      	ldr	r2, [r7, #24]
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a6b0:	4a12      	ldr	r2, [pc, #72]	; (800a6fc <HAL_GPIO_Init+0x334>)
 800a6b2:	69bb      	ldr	r3, [r7, #24]
 800a6b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	61fb      	str	r3, [r7, #28]
 800a6bc:	69fb      	ldr	r3, [r7, #28]
 800a6be:	2b0f      	cmp	r3, #15
 800a6c0:	f67f ae90 	bls.w	800a3e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a6c4:	bf00      	nop
 800a6c6:	bf00      	nop
 800a6c8:	3724      	adds	r7, #36	; 0x24
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	40023800 	.word	0x40023800
 800a6d8:	40013800 	.word	0x40013800
 800a6dc:	40020000 	.word	0x40020000
 800a6e0:	40020400 	.word	0x40020400
 800a6e4:	40020800 	.word	0x40020800
 800a6e8:	40020c00 	.word	0x40020c00
 800a6ec:	40021000 	.word	0x40021000
 800a6f0:	40021400 	.word	0x40021400
 800a6f4:	40021800 	.word	0x40021800
 800a6f8:	40021c00 	.word	0x40021c00
 800a6fc:	40013c00 	.word	0x40013c00

0800a700 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	460b      	mov	r3, r1
 800a70a:	807b      	strh	r3, [r7, #2]
 800a70c:	4613      	mov	r3, r2
 800a70e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a710:	787b      	ldrb	r3, [r7, #1]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d003      	beq.n	800a71e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a716:	887a      	ldrh	r2, [r7, #2]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a71c:	e003      	b.n	800a726 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a71e:	887b      	ldrh	r3, [r7, #2]
 800a720:	041a      	lsls	r2, r3, #16
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	619a      	str	r2, [r3, #24]
}
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
	...

0800a734 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	4603      	mov	r3, r0
 800a73c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a73e:	4b08      	ldr	r3, [pc, #32]	; (800a760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a740:	695a      	ldr	r2, [r3, #20]
 800a742:	88fb      	ldrh	r3, [r7, #6]
 800a744:	4013      	ands	r3, r2
 800a746:	2b00      	cmp	r3, #0
 800a748:	d006      	beq.n	800a758 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a74a:	4a05      	ldr	r2, [pc, #20]	; (800a760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a74c:	88fb      	ldrh	r3, [r7, #6]
 800a74e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a750:	88fb      	ldrh	r3, [r7, #6]
 800a752:	4618      	mov	r0, r3
 800a754:	f002 fa73 	bl	800cc3e <HAL_GPIO_EXTI_Callback>
  }
}
 800a758:	bf00      	nop
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	40013c00 	.word	0x40013c00

0800a764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d101      	bne.n	800a776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e12b      	b.n	800a9ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a77c:	b2db      	uxtb	r3, r3
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d106      	bne.n	800a790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7fc febe 	bl	800750c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2224      	movs	r2, #36	; 0x24
 800a794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	681a      	ldr	r2, [r3, #0]
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	f022 0201 	bic.w	r2, r2, #1
 800a7a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681a      	ldr	r2, [r3, #0]
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a7b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	681a      	ldr	r2, [r3, #0]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a7c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a7c8:	f000 fd7e 	bl	800b2c8 <HAL_RCC_GetPCLK1Freq>
 800a7cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	685b      	ldr	r3, [r3, #4]
 800a7d2:	4a81      	ldr	r2, [pc, #516]	; (800a9d8 <HAL_I2C_Init+0x274>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d807      	bhi.n	800a7e8 <HAL_I2C_Init+0x84>
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	4a80      	ldr	r2, [pc, #512]	; (800a9dc <HAL_I2C_Init+0x278>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	bf94      	ite	ls
 800a7e0:	2301      	movls	r3, #1
 800a7e2:	2300      	movhi	r3, #0
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	e006      	b.n	800a7f6 <HAL_I2C_Init+0x92>
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	4a7d      	ldr	r2, [pc, #500]	; (800a9e0 <HAL_I2C_Init+0x27c>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	bf94      	ite	ls
 800a7f0:	2301      	movls	r3, #1
 800a7f2:	2300      	movhi	r3, #0
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d001      	beq.n	800a7fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	e0e7      	b.n	800a9ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	4a78      	ldr	r2, [pc, #480]	; (800a9e4 <HAL_I2C_Init+0x280>)
 800a802:	fba2 2303 	umull	r2, r3, r2, r3
 800a806:	0c9b      	lsrs	r3, r3, #18
 800a808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68ba      	ldr	r2, [r7, #8]
 800a81a:	430a      	orrs	r2, r1
 800a81c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	6a1b      	ldr	r3, [r3, #32]
 800a824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	4a6a      	ldr	r2, [pc, #424]	; (800a9d8 <HAL_I2C_Init+0x274>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d802      	bhi.n	800a838 <HAL_I2C_Init+0xd4>
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	3301      	adds	r3, #1
 800a836:	e009      	b.n	800a84c <HAL_I2C_Init+0xe8>
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a83e:	fb02 f303 	mul.w	r3, r2, r3
 800a842:	4a69      	ldr	r2, [pc, #420]	; (800a9e8 <HAL_I2C_Init+0x284>)
 800a844:	fba2 2303 	umull	r2, r3, r2, r3
 800a848:	099b      	lsrs	r3, r3, #6
 800a84a:	3301      	adds	r3, #1
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	6812      	ldr	r2, [r2, #0]
 800a850:	430b      	orrs	r3, r1
 800a852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a85e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	495c      	ldr	r1, [pc, #368]	; (800a9d8 <HAL_I2C_Init+0x274>)
 800a868:	428b      	cmp	r3, r1
 800a86a:	d819      	bhi.n	800a8a0 <HAL_I2C_Init+0x13c>
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	1e59      	subs	r1, r3, #1
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	005b      	lsls	r3, r3, #1
 800a876:	fbb1 f3f3 	udiv	r3, r1, r3
 800a87a:	1c59      	adds	r1, r3, #1
 800a87c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a880:	400b      	ands	r3, r1
 800a882:	2b00      	cmp	r3, #0
 800a884:	d00a      	beq.n	800a89c <HAL_I2C_Init+0x138>
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	1e59      	subs	r1, r3, #1
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	685b      	ldr	r3, [r3, #4]
 800a88e:	005b      	lsls	r3, r3, #1
 800a890:	fbb1 f3f3 	udiv	r3, r1, r3
 800a894:	3301      	adds	r3, #1
 800a896:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a89a:	e051      	b.n	800a940 <HAL_I2C_Init+0x1dc>
 800a89c:	2304      	movs	r3, #4
 800a89e:	e04f      	b.n	800a940 <HAL_I2C_Init+0x1dc>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d111      	bne.n	800a8cc <HAL_I2C_Init+0x168>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	1e58      	subs	r0, r3, #1
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6859      	ldr	r1, [r3, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	440b      	add	r3, r1
 800a8b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	bf0c      	ite	eq
 800a8c4:	2301      	moveq	r3, #1
 800a8c6:	2300      	movne	r3, #0
 800a8c8:	b2db      	uxtb	r3, r3
 800a8ca:	e012      	b.n	800a8f2 <HAL_I2C_Init+0x18e>
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	1e58      	subs	r0, r3, #1
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6859      	ldr	r1, [r3, #4]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	440b      	add	r3, r1
 800a8da:	0099      	lsls	r1, r3, #2
 800a8dc:	440b      	add	r3, r1
 800a8de:	fbb0 f3f3 	udiv	r3, r0, r3
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	bf0c      	ite	eq
 800a8ec:	2301      	moveq	r3, #1
 800a8ee:	2300      	movne	r3, #0
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d001      	beq.n	800a8fa <HAL_I2C_Init+0x196>
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e022      	b.n	800a940 <HAL_I2C_Init+0x1dc>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d10e      	bne.n	800a920 <HAL_I2C_Init+0x1bc>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	1e58      	subs	r0, r3, #1
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6859      	ldr	r1, [r3, #4]
 800a90a:	460b      	mov	r3, r1
 800a90c:	005b      	lsls	r3, r3, #1
 800a90e:	440b      	add	r3, r1
 800a910:	fbb0 f3f3 	udiv	r3, r0, r3
 800a914:	3301      	adds	r3, #1
 800a916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a91a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a91e:	e00f      	b.n	800a940 <HAL_I2C_Init+0x1dc>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	1e58      	subs	r0, r3, #1
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6859      	ldr	r1, [r3, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	440b      	add	r3, r1
 800a92e:	0099      	lsls	r1, r3, #2
 800a930:	440b      	add	r3, r1
 800a932:	fbb0 f3f3 	udiv	r3, r0, r3
 800a936:	3301      	adds	r3, #1
 800a938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a93c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a940:	6879      	ldr	r1, [r7, #4]
 800a942:	6809      	ldr	r1, [r1, #0]
 800a944:	4313      	orrs	r3, r2
 800a946:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	69da      	ldr	r2, [r3, #28]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6a1b      	ldr	r3, [r3, #32]
 800a95a:	431a      	orrs	r2, r3
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	689b      	ldr	r3, [r3, #8]
 800a96a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a96e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	6911      	ldr	r1, [r2, #16]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	68d2      	ldr	r2, [r2, #12]
 800a97a:	4311      	orrs	r1, r2
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	6812      	ldr	r2, [r2, #0]
 800a980:	430b      	orrs	r3, r1
 800a982:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	695a      	ldr	r2, [r3, #20]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	431a      	orrs	r2, r3
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	430a      	orrs	r2, r1
 800a99e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681a      	ldr	r2, [r3, #0]
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f042 0201 	orr.w	r2, r2, #1
 800a9ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	000186a0 	.word	0x000186a0
 800a9dc:	001e847f 	.word	0x001e847f
 800a9e0:	003d08ff 	.word	0x003d08ff
 800a9e4:	431bde83 	.word	0x431bde83
 800a9e8:	10624dd3 	.word	0x10624dd3

0800a9ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	e267      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 0301 	and.w	r3, r3, #1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d075      	beq.n	800aaf6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa0a:	4b88      	ldr	r3, [pc, #544]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f003 030c 	and.w	r3, r3, #12
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	d00c      	beq.n	800aa30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa16:	4b85      	ldr	r3, [pc, #532]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aa1e:	2b08      	cmp	r3, #8
 800aa20:	d112      	bne.n	800aa48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aa22:	4b82      	ldr	r3, [pc, #520]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa24:	685b      	ldr	r3, [r3, #4]
 800aa26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aa2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa2e:	d10b      	bne.n	800aa48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa30:	4b7e      	ldr	r3, [pc, #504]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d05b      	beq.n	800aaf4 <HAL_RCC_OscConfig+0x108>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d157      	bne.n	800aaf4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	e242      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa50:	d106      	bne.n	800aa60 <HAL_RCC_OscConfig+0x74>
 800aa52:	4b76      	ldr	r3, [pc, #472]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a75      	ldr	r2, [pc, #468]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa5c:	6013      	str	r3, [r2, #0]
 800aa5e:	e01d      	b.n	800aa9c <HAL_RCC_OscConfig+0xb0>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa68:	d10c      	bne.n	800aa84 <HAL_RCC_OscConfig+0x98>
 800aa6a:	4b70      	ldr	r3, [pc, #448]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	4a6f      	ldr	r2, [pc, #444]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	4b6d      	ldr	r3, [pc, #436]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4a6c      	ldr	r2, [pc, #432]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa80:	6013      	str	r3, [r2, #0]
 800aa82:	e00b      	b.n	800aa9c <HAL_RCC_OscConfig+0xb0>
 800aa84:	4b69      	ldr	r3, [pc, #420]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a68      	ldr	r2, [pc, #416]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa8e:	6013      	str	r3, [r2, #0]
 800aa90:	4b66      	ldr	r3, [pc, #408]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a65      	ldr	r2, [pc, #404]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aa96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aa9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d013      	beq.n	800aacc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aaa4:	f7fd fd7c 	bl	80085a0 <HAL_GetTick>
 800aaa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aaaa:	e008      	b.n	800aabe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aaac:	f7fd fd78 	bl	80085a0 <HAL_GetTick>
 800aab0:	4602      	mov	r2, r0
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	1ad3      	subs	r3, r2, r3
 800aab6:	2b64      	cmp	r3, #100	; 0x64
 800aab8:	d901      	bls.n	800aabe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800aaba:	2303      	movs	r3, #3
 800aabc:	e207      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aabe:	4b5b      	ldr	r3, [pc, #364]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d0f0      	beq.n	800aaac <HAL_RCC_OscConfig+0xc0>
 800aaca:	e014      	b.n	800aaf6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aacc:	f7fd fd68 	bl	80085a0 <HAL_GetTick>
 800aad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aad2:	e008      	b.n	800aae6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aad4:	f7fd fd64 	bl	80085a0 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b64      	cmp	r3, #100	; 0x64
 800aae0:	d901      	bls.n	800aae6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e1f3      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800aae6:	4b51      	ldr	r3, [pc, #324]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d1f0      	bne.n	800aad4 <HAL_RCC_OscConfig+0xe8>
 800aaf2:	e000      	b.n	800aaf6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 0302 	and.w	r3, r3, #2
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d063      	beq.n	800abca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab02:	4b4a      	ldr	r3, [pc, #296]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800ab04:	689b      	ldr	r3, [r3, #8]
 800ab06:	f003 030c 	and.w	r3, r3, #12
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00b      	beq.n	800ab26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab0e:	4b47      	ldr	r3, [pc, #284]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800ab16:	2b08      	cmp	r3, #8
 800ab18:	d11c      	bne.n	800ab54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ab1a:	4b44      	ldr	r3, [pc, #272]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d116      	bne.n	800ab54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab26:	4b41      	ldr	r3, [pc, #260]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0302 	and.w	r3, r3, #2
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d005      	beq.n	800ab3e <HAL_RCC_OscConfig+0x152>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d001      	beq.n	800ab3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e1c7      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab3e:	4b3b      	ldr	r3, [pc, #236]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	00db      	lsls	r3, r3, #3
 800ab4c:	4937      	ldr	r1, [pc, #220]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab52:	e03a      	b.n	800abca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d020      	beq.n	800ab9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ab5c:	4b34      	ldr	r3, [pc, #208]	; (800ac30 <HAL_RCC_OscConfig+0x244>)
 800ab5e:	2201      	movs	r2, #1
 800ab60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab62:	f7fd fd1d 	bl	80085a0 <HAL_GetTick>
 800ab66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab68:	e008      	b.n	800ab7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ab6a:	f7fd fd19 	bl	80085a0 <HAL_GetTick>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	2b02      	cmp	r3, #2
 800ab76:	d901      	bls.n	800ab7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e1a8      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ab7c:	4b2b      	ldr	r3, [pc, #172]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f003 0302 	and.w	r3, r3, #2
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d0f0      	beq.n	800ab6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab88:	4b28      	ldr	r3, [pc, #160]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	4925      	ldr	r1, [pc, #148]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	600b      	str	r3, [r1, #0]
 800ab9c:	e015      	b.n	800abca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab9e:	4b24      	ldr	r3, [pc, #144]	; (800ac30 <HAL_RCC_OscConfig+0x244>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aba4:	f7fd fcfc 	bl	80085a0 <HAL_GetTick>
 800aba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abaa:	e008      	b.n	800abbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800abac:	f7fd fcf8 	bl	80085a0 <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d901      	bls.n	800abbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800abba:	2303      	movs	r3, #3
 800abbc:	e187      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800abbe:	4b1b      	ldr	r3, [pc, #108]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1f0      	bne.n	800abac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0308 	and.w	r3, r3, #8
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d036      	beq.n	800ac44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d016      	beq.n	800ac0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800abde:	4b15      	ldr	r3, [pc, #84]	; (800ac34 <HAL_RCC_OscConfig+0x248>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abe4:	f7fd fcdc 	bl	80085a0 <HAL_GetTick>
 800abe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abea:	e008      	b.n	800abfe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800abec:	f7fd fcd8 	bl	80085a0 <HAL_GetTick>
 800abf0:	4602      	mov	r2, r0
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	1ad3      	subs	r3, r2, r3
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d901      	bls.n	800abfe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800abfa:	2303      	movs	r3, #3
 800abfc:	e167      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800abfe:	4b0b      	ldr	r3, [pc, #44]	; (800ac2c <HAL_RCC_OscConfig+0x240>)
 800ac00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac02:	f003 0302 	and.w	r3, r3, #2
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d0f0      	beq.n	800abec <HAL_RCC_OscConfig+0x200>
 800ac0a:	e01b      	b.n	800ac44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ac0c:	4b09      	ldr	r3, [pc, #36]	; (800ac34 <HAL_RCC_OscConfig+0x248>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ac12:	f7fd fcc5 	bl	80085a0 <HAL_GetTick>
 800ac16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac18:	e00e      	b.n	800ac38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ac1a:	f7fd fcc1 	bl	80085a0 <HAL_GetTick>
 800ac1e:	4602      	mov	r2, r0
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	1ad3      	subs	r3, r2, r3
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d907      	bls.n	800ac38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e150      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
 800ac2c:	40023800 	.word	0x40023800
 800ac30:	42470000 	.word	0x42470000
 800ac34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ac38:	4b88      	ldr	r3, [pc, #544]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ac3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac3c:	f003 0302 	and.w	r3, r3, #2
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1ea      	bne.n	800ac1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0304 	and.w	r3, r3, #4
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	f000 8097 	beq.w	800ad80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac52:	2300      	movs	r3, #0
 800ac54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac56:	4b81      	ldr	r3, [pc, #516]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ac58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d10f      	bne.n	800ac82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac62:	2300      	movs	r3, #0
 800ac64:	60bb      	str	r3, [r7, #8]
 800ac66:	4b7d      	ldr	r3, [pc, #500]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ac68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac6a:	4a7c      	ldr	r2, [pc, #496]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ac6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac70:	6413      	str	r3, [r2, #64]	; 0x40
 800ac72:	4b7a      	ldr	r3, [pc, #488]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ac74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac7a:	60bb      	str	r3, [r7, #8]
 800ac7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac7e:	2301      	movs	r3, #1
 800ac80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ac82:	4b77      	ldr	r3, [pc, #476]	; (800ae60 <HAL_RCC_OscConfig+0x474>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d118      	bne.n	800acc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ac8e:	4b74      	ldr	r3, [pc, #464]	; (800ae60 <HAL_RCC_OscConfig+0x474>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	4a73      	ldr	r2, [pc, #460]	; (800ae60 <HAL_RCC_OscConfig+0x474>)
 800ac94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ac9a:	f7fd fc81 	bl	80085a0 <HAL_GetTick>
 800ac9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aca0:	e008      	b.n	800acb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aca2:	f7fd fc7d 	bl	80085a0 <HAL_GetTick>
 800aca6:	4602      	mov	r2, r0
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	1ad3      	subs	r3, r2, r3
 800acac:	2b02      	cmp	r3, #2
 800acae:	d901      	bls.n	800acb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e10c      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800acb4:	4b6a      	ldr	r3, [pc, #424]	; (800ae60 <HAL_RCC_OscConfig+0x474>)
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d0f0      	beq.n	800aca2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d106      	bne.n	800acd6 <HAL_RCC_OscConfig+0x2ea>
 800acc8:	4b64      	ldr	r3, [pc, #400]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800acca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800accc:	4a63      	ldr	r2, [pc, #396]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800acce:	f043 0301 	orr.w	r3, r3, #1
 800acd2:	6713      	str	r3, [r2, #112]	; 0x70
 800acd4:	e01c      	b.n	800ad10 <HAL_RCC_OscConfig+0x324>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	2b05      	cmp	r3, #5
 800acdc:	d10c      	bne.n	800acf8 <HAL_RCC_OscConfig+0x30c>
 800acde:	4b5f      	ldr	r3, [pc, #380]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ace0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ace2:	4a5e      	ldr	r2, [pc, #376]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ace4:	f043 0304 	orr.w	r3, r3, #4
 800ace8:	6713      	str	r3, [r2, #112]	; 0x70
 800acea:	4b5c      	ldr	r3, [pc, #368]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800acec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acee:	4a5b      	ldr	r2, [pc, #364]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800acf0:	f043 0301 	orr.w	r3, r3, #1
 800acf4:	6713      	str	r3, [r2, #112]	; 0x70
 800acf6:	e00b      	b.n	800ad10 <HAL_RCC_OscConfig+0x324>
 800acf8:	4b58      	ldr	r3, [pc, #352]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800acfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acfc:	4a57      	ldr	r2, [pc, #348]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800acfe:	f023 0301 	bic.w	r3, r3, #1
 800ad02:	6713      	str	r3, [r2, #112]	; 0x70
 800ad04:	4b55      	ldr	r3, [pc, #340]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ad06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad08:	4a54      	ldr	r2, [pc, #336]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ad0a:	f023 0304 	bic.w	r3, r3, #4
 800ad0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	689b      	ldr	r3, [r3, #8]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d015      	beq.n	800ad44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ad18:	f7fd fc42 	bl	80085a0 <HAL_GetTick>
 800ad1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad1e:	e00a      	b.n	800ad36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad20:	f7fd fc3e 	bl	80085a0 <HAL_GetTick>
 800ad24:	4602      	mov	r2, r0
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	1ad3      	subs	r3, r2, r3
 800ad2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d901      	bls.n	800ad36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800ad32:	2303      	movs	r3, #3
 800ad34:	e0cb      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ad36:	4b49      	ldr	r3, [pc, #292]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ad38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad3a:	f003 0302 	and.w	r3, r3, #2
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d0ee      	beq.n	800ad20 <HAL_RCC_OscConfig+0x334>
 800ad42:	e014      	b.n	800ad6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ad44:	f7fd fc2c 	bl	80085a0 <HAL_GetTick>
 800ad48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad4a:	e00a      	b.n	800ad62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ad4c:	f7fd fc28 	bl	80085a0 <HAL_GetTick>
 800ad50:	4602      	mov	r2, r0
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	1ad3      	subs	r3, r2, r3
 800ad56:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d901      	bls.n	800ad62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ad5e:	2303      	movs	r3, #3
 800ad60:	e0b5      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ad62:	4b3e      	ldr	r3, [pc, #248]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ad64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad66:	f003 0302 	and.w	r3, r3, #2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1ee      	bne.n	800ad4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad6e:	7dfb      	ldrb	r3, [r7, #23]
 800ad70:	2b01      	cmp	r3, #1
 800ad72:	d105      	bne.n	800ad80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad74:	4b39      	ldr	r3, [pc, #228]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ad76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad78:	4a38      	ldr	r2, [pc, #224]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ad7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	699b      	ldr	r3, [r3, #24]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	f000 80a1 	beq.w	800aecc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ad8a:	4b34      	ldr	r3, [pc, #208]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ad8c:	689b      	ldr	r3, [r3, #8]
 800ad8e:	f003 030c 	and.w	r3, r3, #12
 800ad92:	2b08      	cmp	r3, #8
 800ad94:	d05c      	beq.n	800ae50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	699b      	ldr	r3, [r3, #24]
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d141      	bne.n	800ae22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad9e:	4b31      	ldr	r3, [pc, #196]	; (800ae64 <HAL_RCC_OscConfig+0x478>)
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ada4:	f7fd fbfc 	bl	80085a0 <HAL_GetTick>
 800ada8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adaa:	e008      	b.n	800adbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800adac:	f7fd fbf8 	bl	80085a0 <HAL_GetTick>
 800adb0:	4602      	mov	r2, r0
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	1ad3      	subs	r3, r2, r3
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d901      	bls.n	800adbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800adba:	2303      	movs	r3, #3
 800adbc:	e087      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800adbe:	4b27      	ldr	r3, [pc, #156]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1f0      	bne.n	800adac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	69da      	ldr	r2, [r3, #28]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	431a      	orrs	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add8:	019b      	lsls	r3, r3, #6
 800adda:	431a      	orrs	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ade0:	085b      	lsrs	r3, r3, #1
 800ade2:	3b01      	subs	r3, #1
 800ade4:	041b      	lsls	r3, r3, #16
 800ade6:	431a      	orrs	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adec:	061b      	lsls	r3, r3, #24
 800adee:	491b      	ldr	r1, [pc, #108]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800adf0:	4313      	orrs	r3, r2
 800adf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800adf4:	4b1b      	ldr	r3, [pc, #108]	; (800ae64 <HAL_RCC_OscConfig+0x478>)
 800adf6:	2201      	movs	r2, #1
 800adf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adfa:	f7fd fbd1 	bl	80085a0 <HAL_GetTick>
 800adfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae00:	e008      	b.n	800ae14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae02:	f7fd fbcd 	bl	80085a0 <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d901      	bls.n	800ae14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800ae10:	2303      	movs	r3, #3
 800ae12:	e05c      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ae14:	4b11      	ldr	r3, [pc, #68]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d0f0      	beq.n	800ae02 <HAL_RCC_OscConfig+0x416>
 800ae20:	e054      	b.n	800aecc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae22:	4b10      	ldr	r3, [pc, #64]	; (800ae64 <HAL_RCC_OscConfig+0x478>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae28:	f7fd fbba 	bl	80085a0 <HAL_GetTick>
 800ae2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae2e:	e008      	b.n	800ae42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae30:	f7fd fbb6 	bl	80085a0 <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d901      	bls.n	800ae42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e045      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae42:	4b06      	ldr	r3, [pc, #24]	; (800ae5c <HAL_RCC_OscConfig+0x470>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1f0      	bne.n	800ae30 <HAL_RCC_OscConfig+0x444>
 800ae4e:	e03d      	b.n	800aecc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	699b      	ldr	r3, [r3, #24]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d107      	bne.n	800ae68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	e038      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
 800ae5c:	40023800 	.word	0x40023800
 800ae60:	40007000 	.word	0x40007000
 800ae64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800ae68:	4b1b      	ldr	r3, [pc, #108]	; (800aed8 <HAL_RCC_OscConfig+0x4ec>)
 800ae6a:	685b      	ldr	r3, [r3, #4]
 800ae6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d028      	beq.n	800aec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d121      	bne.n	800aec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d11a      	bne.n	800aec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800ae92:	68fa      	ldr	r2, [r7, #12]
 800ae94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800ae98:	4013      	ands	r3, r2
 800ae9a:	687a      	ldr	r2, [r7, #4]
 800ae9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ae9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800aea0:	4293      	cmp	r3, r2
 800aea2:	d111      	bne.n	800aec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeae:	085b      	lsrs	r3, r3, #1
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d107      	bne.n	800aec8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aec2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d001      	beq.n	800aecc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e000      	b.n	800aece <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3718      	adds	r7, #24
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}
 800aed6:	bf00      	nop
 800aed8:	40023800 	.word	0x40023800

0800aedc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d101      	bne.n	800aef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e0cc      	b.n	800b08a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800aef0:	4b68      	ldr	r3, [pc, #416]	; (800b094 <HAL_RCC_ClockConfig+0x1b8>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	f003 0307 	and.w	r3, r3, #7
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d90c      	bls.n	800af18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aefe:	4b65      	ldr	r3, [pc, #404]	; (800b094 <HAL_RCC_ClockConfig+0x1b8>)
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	b2d2      	uxtb	r2, r2
 800af04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af06:	4b63      	ldr	r3, [pc, #396]	; (800b094 <HAL_RCC_ClockConfig+0x1b8>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0307 	and.w	r3, r3, #7
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	429a      	cmp	r2, r3
 800af12:	d001      	beq.n	800af18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800af14:	2301      	movs	r3, #1
 800af16:	e0b8      	b.n	800b08a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 0302 	and.w	r3, r3, #2
 800af20:	2b00      	cmp	r3, #0
 800af22:	d020      	beq.n	800af66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d005      	beq.n	800af3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800af30:	4b59      	ldr	r3, [pc, #356]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	4a58      	ldr	r2, [pc, #352]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800af36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800af3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0308 	and.w	r3, r3, #8
 800af44:	2b00      	cmp	r3, #0
 800af46:	d005      	beq.n	800af54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800af48:	4b53      	ldr	r3, [pc, #332]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	4a52      	ldr	r2, [pc, #328]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800af4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800af52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800af54:	4b50      	ldr	r3, [pc, #320]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800af56:	689b      	ldr	r3, [r3, #8]
 800af58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	689b      	ldr	r3, [r3, #8]
 800af60:	494d      	ldr	r1, [pc, #308]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800af62:	4313      	orrs	r3, r2
 800af64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0301 	and.w	r3, r3, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d044      	beq.n	800affc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d107      	bne.n	800af8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af7a:	4b47      	ldr	r3, [pc, #284]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af82:	2b00      	cmp	r3, #0
 800af84:	d119      	bne.n	800afba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e07f      	b.n	800b08a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d003      	beq.n	800af9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800af96:	2b03      	cmp	r3, #3
 800af98:	d107      	bne.n	800afaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af9a:	4b3f      	ldr	r3, [pc, #252]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d109      	bne.n	800afba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	e06f      	b.n	800b08a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afaa:	4b3b      	ldr	r3, [pc, #236]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d101      	bne.n	800afba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e067      	b.n	800b08a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800afba:	4b37      	ldr	r3, [pc, #220]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f023 0203 	bic.w	r2, r3, #3
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	4934      	ldr	r1, [pc, #208]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800afc8:	4313      	orrs	r3, r2
 800afca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800afcc:	f7fd fae8 	bl	80085a0 <HAL_GetTick>
 800afd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afd2:	e00a      	b.n	800afea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800afd4:	f7fd fae4 	bl	80085a0 <HAL_GetTick>
 800afd8:	4602      	mov	r2, r0
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	1ad3      	subs	r3, r2, r3
 800afde:	f241 3288 	movw	r2, #5000	; 0x1388
 800afe2:	4293      	cmp	r3, r2
 800afe4:	d901      	bls.n	800afea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800afe6:	2303      	movs	r3, #3
 800afe8:	e04f      	b.n	800b08a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800afea:	4b2b      	ldr	r3, [pc, #172]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	f003 020c 	and.w	r2, r3, #12
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	009b      	lsls	r3, r3, #2
 800aff8:	429a      	cmp	r2, r3
 800affa:	d1eb      	bne.n	800afd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800affc:	4b25      	ldr	r3, [pc, #148]	; (800b094 <HAL_RCC_ClockConfig+0x1b8>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f003 0307 	and.w	r3, r3, #7
 800b004:	683a      	ldr	r2, [r7, #0]
 800b006:	429a      	cmp	r2, r3
 800b008:	d20c      	bcs.n	800b024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b00a:	4b22      	ldr	r3, [pc, #136]	; (800b094 <HAL_RCC_ClockConfig+0x1b8>)
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	b2d2      	uxtb	r2, r2
 800b010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b012:	4b20      	ldr	r3, [pc, #128]	; (800b094 <HAL_RCC_ClockConfig+0x1b8>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0307 	and.w	r3, r3, #7
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d001      	beq.n	800b024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e032      	b.n	800b08a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f003 0304 	and.w	r3, r3, #4
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d008      	beq.n	800b042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b030:	4b19      	ldr	r3, [pc, #100]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	4916      	ldr	r1, [pc, #88]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800b03e:	4313      	orrs	r3, r2
 800b040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 0308 	and.w	r3, r3, #8
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d009      	beq.n	800b062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b04e:	4b12      	ldr	r3, [pc, #72]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800b050:	689b      	ldr	r3, [r3, #8]
 800b052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	00db      	lsls	r3, r3, #3
 800b05c:	490e      	ldr	r1, [pc, #56]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800b05e:	4313      	orrs	r3, r2
 800b060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b062:	f000 f821 	bl	800b0a8 <HAL_RCC_GetSysClockFreq>
 800b066:	4602      	mov	r2, r0
 800b068:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <HAL_RCC_ClockConfig+0x1bc>)
 800b06a:	689b      	ldr	r3, [r3, #8]
 800b06c:	091b      	lsrs	r3, r3, #4
 800b06e:	f003 030f 	and.w	r3, r3, #15
 800b072:	490a      	ldr	r1, [pc, #40]	; (800b09c <HAL_RCC_ClockConfig+0x1c0>)
 800b074:	5ccb      	ldrb	r3, [r1, r3]
 800b076:	fa22 f303 	lsr.w	r3, r2, r3
 800b07a:	4a09      	ldr	r2, [pc, #36]	; (800b0a0 <HAL_RCC_ClockConfig+0x1c4>)
 800b07c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b07e:	4b09      	ldr	r3, [pc, #36]	; (800b0a4 <HAL_RCC_ClockConfig+0x1c8>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	4618      	mov	r0, r3
 800b084:	f7fc fc20 	bl	80078c8 <HAL_InitTick>

  return HAL_OK;
 800b088:	2300      	movs	r3, #0
}
 800b08a:	4618      	mov	r0, r3
 800b08c:	3710      	adds	r7, #16
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
 800b092:	bf00      	nop
 800b094:	40023c00 	.word	0x40023c00
 800b098:	40023800 	.word	0x40023800
 800b09c:	080162a4 	.word	0x080162a4
 800b0a0:	20000010 	.word	0x20000010
 800b0a4:	20000014 	.word	0x20000014

0800b0a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b0ac:	b094      	sub	sp, #80	; 0x50
 800b0ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	647b      	str	r3, [r7, #68]	; 0x44
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b0c0:	4b79      	ldr	r3, [pc, #484]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	f003 030c 	and.w	r3, r3, #12
 800b0c8:	2b08      	cmp	r3, #8
 800b0ca:	d00d      	beq.n	800b0e8 <HAL_RCC_GetSysClockFreq+0x40>
 800b0cc:	2b08      	cmp	r3, #8
 800b0ce:	f200 80e1 	bhi.w	800b294 <HAL_RCC_GetSysClockFreq+0x1ec>
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d002      	beq.n	800b0dc <HAL_RCC_GetSysClockFreq+0x34>
 800b0d6:	2b04      	cmp	r3, #4
 800b0d8:	d003      	beq.n	800b0e2 <HAL_RCC_GetSysClockFreq+0x3a>
 800b0da:	e0db      	b.n	800b294 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b0dc:	4b73      	ldr	r3, [pc, #460]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x204>)
 800b0de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b0e0:	e0db      	b.n	800b29a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b0e2:	4b72      	ldr	r3, [pc, #456]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x204>)
 800b0e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b0e6:	e0d8      	b.n	800b29a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b0e8:	4b6f      	ldr	r3, [pc, #444]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b0f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b0f2:	4b6d      	ldr	r3, [pc, #436]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d063      	beq.n	800b1c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b0fe:	4b6a      	ldr	r3, [pc, #424]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	099b      	lsrs	r3, r3, #6
 800b104:	2200      	movs	r2, #0
 800b106:	63bb      	str	r3, [r7, #56]	; 0x38
 800b108:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b110:	633b      	str	r3, [r7, #48]	; 0x30
 800b112:	2300      	movs	r3, #0
 800b114:	637b      	str	r3, [r7, #52]	; 0x34
 800b116:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b11a:	4622      	mov	r2, r4
 800b11c:	462b      	mov	r3, r5
 800b11e:	f04f 0000 	mov.w	r0, #0
 800b122:	f04f 0100 	mov.w	r1, #0
 800b126:	0159      	lsls	r1, r3, #5
 800b128:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b12c:	0150      	lsls	r0, r2, #5
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	4621      	mov	r1, r4
 800b134:	1a51      	subs	r1, r2, r1
 800b136:	6139      	str	r1, [r7, #16]
 800b138:	4629      	mov	r1, r5
 800b13a:	eb63 0301 	sbc.w	r3, r3, r1
 800b13e:	617b      	str	r3, [r7, #20]
 800b140:	f04f 0200 	mov.w	r2, #0
 800b144:	f04f 0300 	mov.w	r3, #0
 800b148:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b14c:	4659      	mov	r1, fp
 800b14e:	018b      	lsls	r3, r1, #6
 800b150:	4651      	mov	r1, sl
 800b152:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b156:	4651      	mov	r1, sl
 800b158:	018a      	lsls	r2, r1, #6
 800b15a:	4651      	mov	r1, sl
 800b15c:	ebb2 0801 	subs.w	r8, r2, r1
 800b160:	4659      	mov	r1, fp
 800b162:	eb63 0901 	sbc.w	r9, r3, r1
 800b166:	f04f 0200 	mov.w	r2, #0
 800b16a:	f04f 0300 	mov.w	r3, #0
 800b16e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b17a:	4690      	mov	r8, r2
 800b17c:	4699      	mov	r9, r3
 800b17e:	4623      	mov	r3, r4
 800b180:	eb18 0303 	adds.w	r3, r8, r3
 800b184:	60bb      	str	r3, [r7, #8]
 800b186:	462b      	mov	r3, r5
 800b188:	eb49 0303 	adc.w	r3, r9, r3
 800b18c:	60fb      	str	r3, [r7, #12]
 800b18e:	f04f 0200 	mov.w	r2, #0
 800b192:	f04f 0300 	mov.w	r3, #0
 800b196:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b19a:	4629      	mov	r1, r5
 800b19c:	028b      	lsls	r3, r1, #10
 800b19e:	4621      	mov	r1, r4
 800b1a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b1a4:	4621      	mov	r1, r4
 800b1a6:	028a      	lsls	r2, r1, #10
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b1b8:	f7f5 fd66 	bl	8000c88 <__aeabi_uldivmod>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1c4:	e058      	b.n	800b278 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b1c6:	4b38      	ldr	r3, [pc, #224]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	099b      	lsrs	r3, r3, #6
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b1d6:	623b      	str	r3, [r7, #32]
 800b1d8:	2300      	movs	r3, #0
 800b1da:	627b      	str	r3, [r7, #36]	; 0x24
 800b1dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b1e0:	4642      	mov	r2, r8
 800b1e2:	464b      	mov	r3, r9
 800b1e4:	f04f 0000 	mov.w	r0, #0
 800b1e8:	f04f 0100 	mov.w	r1, #0
 800b1ec:	0159      	lsls	r1, r3, #5
 800b1ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b1f2:	0150      	lsls	r0, r2, #5
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	460b      	mov	r3, r1
 800b1f8:	4641      	mov	r1, r8
 800b1fa:	ebb2 0a01 	subs.w	sl, r2, r1
 800b1fe:	4649      	mov	r1, r9
 800b200:	eb63 0b01 	sbc.w	fp, r3, r1
 800b204:	f04f 0200 	mov.w	r2, #0
 800b208:	f04f 0300 	mov.w	r3, #0
 800b20c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b210:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b214:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b218:	ebb2 040a 	subs.w	r4, r2, sl
 800b21c:	eb63 050b 	sbc.w	r5, r3, fp
 800b220:	f04f 0200 	mov.w	r2, #0
 800b224:	f04f 0300 	mov.w	r3, #0
 800b228:	00eb      	lsls	r3, r5, #3
 800b22a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b22e:	00e2      	lsls	r2, r4, #3
 800b230:	4614      	mov	r4, r2
 800b232:	461d      	mov	r5, r3
 800b234:	4643      	mov	r3, r8
 800b236:	18e3      	adds	r3, r4, r3
 800b238:	603b      	str	r3, [r7, #0]
 800b23a:	464b      	mov	r3, r9
 800b23c:	eb45 0303 	adc.w	r3, r5, r3
 800b240:	607b      	str	r3, [r7, #4]
 800b242:	f04f 0200 	mov.w	r2, #0
 800b246:	f04f 0300 	mov.w	r3, #0
 800b24a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b24e:	4629      	mov	r1, r5
 800b250:	028b      	lsls	r3, r1, #10
 800b252:	4621      	mov	r1, r4
 800b254:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b258:	4621      	mov	r1, r4
 800b25a:	028a      	lsls	r2, r1, #10
 800b25c:	4610      	mov	r0, r2
 800b25e:	4619      	mov	r1, r3
 800b260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b262:	2200      	movs	r2, #0
 800b264:	61bb      	str	r3, [r7, #24]
 800b266:	61fa      	str	r2, [r7, #28]
 800b268:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b26c:	f7f5 fd0c 	bl	8000c88 <__aeabi_uldivmod>
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	4613      	mov	r3, r2
 800b276:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b278:	4b0b      	ldr	r3, [pc, #44]	; (800b2a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	0c1b      	lsrs	r3, r3, #16
 800b27e:	f003 0303 	and.w	r3, r3, #3
 800b282:	3301      	adds	r3, #1
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b288:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b28a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b28c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b290:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b292:	e002      	b.n	800b29a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b294:	4b05      	ldr	r3, [pc, #20]	; (800b2ac <HAL_RCC_GetSysClockFreq+0x204>)
 800b296:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b29a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3750      	adds	r7, #80	; 0x50
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b2a6:	bf00      	nop
 800b2a8:	40023800 	.word	0x40023800
 800b2ac:	00f42400 	.word	0x00f42400

0800b2b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b2b4:	4b03      	ldr	r3, [pc, #12]	; (800b2c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	20000010 	.word	0x20000010

0800b2c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b2cc:	f7ff fff0 	bl	800b2b0 <HAL_RCC_GetHCLKFreq>
 800b2d0:	4602      	mov	r2, r0
 800b2d2:	4b05      	ldr	r3, [pc, #20]	; (800b2e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	0a9b      	lsrs	r3, r3, #10
 800b2d8:	f003 0307 	and.w	r3, r3, #7
 800b2dc:	4903      	ldr	r1, [pc, #12]	; (800b2ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800b2de:	5ccb      	ldrb	r3, [r1, r3]
 800b2e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	bd80      	pop	{r7, pc}
 800b2e8:	40023800 	.word	0x40023800
 800b2ec:	080162b4 	.word	0x080162b4

0800b2f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b2f4:	f7ff ffdc 	bl	800b2b0 <HAL_RCC_GetHCLKFreq>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	4b05      	ldr	r3, [pc, #20]	; (800b310 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	0b5b      	lsrs	r3, r3, #13
 800b300:	f003 0307 	and.w	r3, r3, #7
 800b304:	4903      	ldr	r1, [pc, #12]	; (800b314 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b306:	5ccb      	ldrb	r3, [r1, r3]
 800b308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b30c:	4618      	mov	r0, r3
 800b30e:	bd80      	pop	{r7, pc}
 800b310:	40023800 	.word	0x40023800
 800b314:	080162b4 	.word	0x080162b4

0800b318 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	220f      	movs	r2, #15
 800b326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b328:	4b12      	ldr	r3, [pc, #72]	; (800b374 <HAL_RCC_GetClockConfig+0x5c>)
 800b32a:	689b      	ldr	r3, [r3, #8]
 800b32c:	f003 0203 	and.w	r2, r3, #3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b334:	4b0f      	ldr	r3, [pc, #60]	; (800b374 <HAL_RCC_GetClockConfig+0x5c>)
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b340:	4b0c      	ldr	r3, [pc, #48]	; (800b374 <HAL_RCC_GetClockConfig+0x5c>)
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b34c:	4b09      	ldr	r3, [pc, #36]	; (800b374 <HAL_RCC_GetClockConfig+0x5c>)
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	08db      	lsrs	r3, r3, #3
 800b352:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b35a:	4b07      	ldr	r3, [pc, #28]	; (800b378 <HAL_RCC_GetClockConfig+0x60>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 0207 	and.w	r2, r3, #7
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	601a      	str	r2, [r3, #0]
}
 800b366:	bf00      	nop
 800b368:	370c      	adds	r7, #12
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
 800b372:	bf00      	nop
 800b374:	40023800 	.word	0x40023800
 800b378:	40023c00 	.word	0x40023c00

0800b37c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d101      	bne.n	800b38e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b38a:	2301      	movs	r3, #1
 800b38c:	e01c      	b.n	800b3c8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	795b      	ldrb	r3, [r3, #5]
 800b392:	b2db      	uxtb	r3, r3
 800b394:	2b00      	cmp	r3, #0
 800b396:	d105      	bne.n	800b3a4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7fc f9c6 	bl	8007730 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2202      	movs	r2, #2
 800b3a8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f042 0204 	orr.w	r2, r2, #4
 800b3b8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800b3c6:	2300      	movs	r3, #0
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d101      	bne.n	800b3e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e07b      	b.n	800b4da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d108      	bne.n	800b3fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b3f2:	d009      	beq.n	800b408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	61da      	str	r2, [r3, #28]
 800b3fa:	e005      	b.n	800b408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b00      	cmp	r3, #0
 800b418:	d106      	bne.n	800b428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2200      	movs	r2, #0
 800b41e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7fc f9dc 	bl	80077e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2202      	movs	r2, #2
 800b42c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	681a      	ldr	r2, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b43e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	689b      	ldr	r3, [r3, #8]
 800b44c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b450:	431a      	orrs	r2, r3
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	68db      	ldr	r3, [r3, #12]
 800b456:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b45a:	431a      	orrs	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	f003 0302 	and.w	r3, r3, #2
 800b464:	431a      	orrs	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	f003 0301 	and.w	r3, r3, #1
 800b46e:	431a      	orrs	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b478:	431a      	orrs	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	69db      	ldr	r3, [r3, #28]
 800b47e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b482:	431a      	orrs	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b48c:	ea42 0103 	orr.w	r1, r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b494:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	430a      	orrs	r2, r1
 800b49e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	699b      	ldr	r3, [r3, #24]
 800b4a4:	0c1b      	lsrs	r3, r3, #16
 800b4a6:	f003 0104 	and.w	r1, r3, #4
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ae:	f003 0210 	and.w	r2, r3, #16
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	430a      	orrs	r2, r1
 800b4b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	69da      	ldr	r2, [r3, #28]
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b4c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b082      	sub	sp, #8
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d101      	bne.n	800b4f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e041      	b.n	800b578 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4fa:	b2db      	uxtb	r3, r3
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d106      	bne.n	800b50e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7fc fda9 	bl	8008060 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2202      	movs	r2, #2
 800b512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681a      	ldr	r2, [r3, #0]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	3304      	adds	r3, #4
 800b51e:	4619      	mov	r1, r3
 800b520:	4610      	mov	r0, r2
 800b522:	f000 fc57 	bl	800bdd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2201      	movs	r2, #1
 800b532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2201      	movs	r2, #1
 800b53a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2201      	movs	r2, #1
 800b542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2201      	movs	r2, #1
 800b552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2201      	movs	r2, #1
 800b55a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2201      	movs	r2, #1
 800b562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2201      	movs	r2, #1
 800b56a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2201      	movs	r2, #1
 800b572:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3708      	adds	r7, #8
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b580:	b480      	push	{r7}
 800b582:	b085      	sub	sp, #20
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b01      	cmp	r3, #1
 800b592:	d001      	beq.n	800b598 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b594:	2301      	movs	r3, #1
 800b596:	e04e      	b.n	800b636 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2202      	movs	r2, #2
 800b59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68da      	ldr	r2, [r3, #12]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f042 0201 	orr.w	r2, r2, #1
 800b5ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a23      	ldr	r2, [pc, #140]	; (800b644 <HAL_TIM_Base_Start_IT+0xc4>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d022      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x80>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5c2:	d01d      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x80>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a1f      	ldr	r2, [pc, #124]	; (800b648 <HAL_TIM_Base_Start_IT+0xc8>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d018      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x80>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a1e      	ldr	r2, [pc, #120]	; (800b64c <HAL_TIM_Base_Start_IT+0xcc>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d013      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x80>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a1c      	ldr	r2, [pc, #112]	; (800b650 <HAL_TIM_Base_Start_IT+0xd0>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d00e      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x80>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a1b      	ldr	r2, [pc, #108]	; (800b654 <HAL_TIM_Base_Start_IT+0xd4>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d009      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x80>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	4a19      	ldr	r2, [pc, #100]	; (800b658 <HAL_TIM_Base_Start_IT+0xd8>)
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d004      	beq.n	800b600 <HAL_TIM_Base_Start_IT+0x80>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a18      	ldr	r2, [pc, #96]	; (800b65c <HAL_TIM_Base_Start_IT+0xdc>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d111      	bne.n	800b624 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	f003 0307 	and.w	r3, r3, #7
 800b60a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	2b06      	cmp	r3, #6
 800b610:	d010      	beq.n	800b634 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f042 0201 	orr.w	r2, r2, #1
 800b620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b622:	e007      	b.n	800b634 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f042 0201 	orr.w	r2, r2, #1
 800b632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b634:	2300      	movs	r3, #0
}
 800b636:	4618      	mov	r0, r3
 800b638:	3714      	adds	r7, #20
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
 800b642:	bf00      	nop
 800b644:	40010000 	.word	0x40010000
 800b648:	40000400 	.word	0x40000400
 800b64c:	40000800 	.word	0x40000800
 800b650:	40000c00 	.word	0x40000c00
 800b654:	40010400 	.word	0x40010400
 800b658:	40014000 	.word	0x40014000
 800b65c:	40001800 	.word	0x40001800

0800b660 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d101      	bne.n	800b672 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	e041      	b.n	800b6f6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d106      	bne.n	800b68c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2200      	movs	r2, #0
 800b682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b686:	6878      	ldr	r0, [r7, #4]
 800b688:	f000 f839 	bl	800b6fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2202      	movs	r2, #2
 800b690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	3304      	adds	r3, #4
 800b69c:	4619      	mov	r1, r3
 800b69e:	4610      	mov	r0, r2
 800b6a0:	f000 fb98 	bl	800bdd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b712:	b580      	push	{r7, lr}
 800b714:	b086      	sub	sp, #24
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
 800b71a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e097      	b.n	800b856 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b72c:	b2db      	uxtb	r3, r3
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d106      	bne.n	800b740 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b73a:	6878      	ldr	r0, [r7, #4]
 800b73c:	f7fc fd16 	bl	800816c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	2202      	movs	r2, #2
 800b744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	687a      	ldr	r2, [r7, #4]
 800b750:	6812      	ldr	r2, [r2, #0]
 800b752:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b756:	f023 0307 	bic.w	r3, r3, #7
 800b75a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	3304      	adds	r3, #4
 800b764:	4619      	mov	r1, r3
 800b766:	4610      	mov	r0, r2
 800b768:	f000 fb34 	bl	800bdd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	699b      	ldr	r3, [r3, #24]
 800b77a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	697a      	ldr	r2, [r7, #20]
 800b78a:	4313      	orrs	r3, r2
 800b78c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b794:	f023 0303 	bic.w	r3, r3, #3
 800b798:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	689a      	ldr	r2, [r3, #8]
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	699b      	ldr	r3, [r3, #24]
 800b7a2:	021b      	lsls	r3, r3, #8
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b7b2:	f023 030c 	bic.w	r3, r3, #12
 800b7b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b7be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	68da      	ldr	r2, [r3, #12]
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	69db      	ldr	r3, [r3, #28]
 800b7cc:	021b      	lsls	r3, r3, #8
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	693a      	ldr	r2, [r7, #16]
 800b7d2:	4313      	orrs	r3, r2
 800b7d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	011a      	lsls	r2, r3, #4
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	031b      	lsls	r3, r3, #12
 800b7e2:	4313      	orrs	r3, r2
 800b7e4:	693a      	ldr	r2, [r7, #16]
 800b7e6:	4313      	orrs	r3, r2
 800b7e8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b7f0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b7f8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	685a      	ldr	r2, [r3, #4]
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	695b      	ldr	r3, [r3, #20]
 800b802:	011b      	lsls	r3, r3, #4
 800b804:	4313      	orrs	r3, r2
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	4313      	orrs	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	697a      	ldr	r2, [r7, #20]
 800b812:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b082      	sub	sp, #8
 800b862:	af00      	add	r7, sp, #0
 800b864:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	f003 0302 	and.w	r3, r3, #2
 800b870:	2b02      	cmp	r3, #2
 800b872:	d122      	bne.n	800b8ba <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	68db      	ldr	r3, [r3, #12]
 800b87a:	f003 0302 	and.w	r3, r3, #2
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d11b      	bne.n	800b8ba <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f06f 0202 	mvn.w	r2, #2
 800b88a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	699b      	ldr	r3, [r3, #24]
 800b898:	f003 0303 	and.w	r3, r3, #3
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d003      	beq.n	800b8a8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f000 fa78 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800b8a6:	e005      	b.n	800b8b4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	f000 fa6a 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 fa7b 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	691b      	ldr	r3, [r3, #16]
 800b8c0:	f003 0304 	and.w	r3, r3, #4
 800b8c4:	2b04      	cmp	r3, #4
 800b8c6:	d122      	bne.n	800b90e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	68db      	ldr	r3, [r3, #12]
 800b8ce:	f003 0304 	and.w	r3, r3, #4
 800b8d2:	2b04      	cmp	r3, #4
 800b8d4:	d11b      	bne.n	800b90e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f06f 0204 	mvn.w	r2, #4
 800b8de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2202      	movs	r2, #2
 800b8e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d003      	beq.n	800b8fc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 fa4e 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800b8fa:	e005      	b.n	800b908 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fa40 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 fa51 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	691b      	ldr	r3, [r3, #16]
 800b914:	f003 0308 	and.w	r3, r3, #8
 800b918:	2b08      	cmp	r3, #8
 800b91a:	d122      	bne.n	800b962 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	f003 0308 	and.w	r3, r3, #8
 800b926:	2b08      	cmp	r3, #8
 800b928:	d11b      	bne.n	800b962 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	f06f 0208 	mvn.w	r2, #8
 800b932:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2204      	movs	r2, #4
 800b938:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	69db      	ldr	r3, [r3, #28]
 800b940:	f003 0303 	and.w	r3, r3, #3
 800b944:	2b00      	cmp	r3, #0
 800b946:	d003      	beq.n	800b950 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fa24 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800b94e:	e005      	b.n	800b95c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fa16 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f000 fa27 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2200      	movs	r2, #0
 800b960:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	f003 0310 	and.w	r3, r3, #16
 800b96c:	2b10      	cmp	r3, #16
 800b96e:	d122      	bne.n	800b9b6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	68db      	ldr	r3, [r3, #12]
 800b976:	f003 0310 	and.w	r3, r3, #16
 800b97a:	2b10      	cmp	r3, #16
 800b97c:	d11b      	bne.n	800b9b6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f06f 0210 	mvn.w	r2, #16
 800b986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2208      	movs	r2, #8
 800b98c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	69db      	ldr	r3, [r3, #28]
 800b994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d003      	beq.n	800b9a4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f9fa 	bl	800bd96 <HAL_TIM_IC_CaptureCallback>
 800b9a2:	e005      	b.n	800b9b0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f9ec 	bl	800bd82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f000 f9fd 	bl	800bdaa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2200      	movs	r2, #0
 800b9b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	691b      	ldr	r3, [r3, #16]
 800b9bc:	f003 0301 	and.w	r3, r3, #1
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d10e      	bne.n	800b9e2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	68db      	ldr	r3, [r3, #12]
 800b9ca:	f003 0301 	and.w	r3, r3, #1
 800b9ce:	2b01      	cmp	r3, #1
 800b9d0:	d107      	bne.n	800b9e2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f06f 0201 	mvn.w	r2, #1
 800b9da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7fb fe79 	bl	80076d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	691b      	ldr	r3, [r3, #16]
 800b9e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ec:	2b80      	cmp	r3, #128	; 0x80
 800b9ee:	d10e      	bne.n	800ba0e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9fa:	2b80      	cmp	r3, #128	; 0x80
 800b9fc:	d107      	bne.n	800ba0e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ba06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fd53 	bl	800c4b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba18:	2b40      	cmp	r3, #64	; 0x40
 800ba1a:	d10e      	bne.n	800ba3a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba26:	2b40      	cmp	r3, #64	; 0x40
 800ba28:	d107      	bne.n	800ba3a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ba32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	f000 f9c2 	bl	800bdbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	691b      	ldr	r3, [r3, #16]
 800ba40:	f003 0320 	and.w	r3, r3, #32
 800ba44:	2b20      	cmp	r3, #32
 800ba46:	d10e      	bne.n	800ba66 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	f003 0320 	and.w	r3, r3, #32
 800ba52:	2b20      	cmp	r3, #32
 800ba54:	d107      	bne.n	800ba66 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f06f 0220 	mvn.w	r2, #32
 800ba5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fd1d 	bl	800c4a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba66:	bf00      	nop
 800ba68:	3708      	adds	r7, #8
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
	...

0800ba70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b086      	sub	sp, #24
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	60f8      	str	r0, [r7, #12]
 800ba78:	60b9      	str	r1, [r7, #8]
 800ba7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	d101      	bne.n	800ba8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	e0ae      	b.n	800bbec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2b0c      	cmp	r3, #12
 800ba9a:	f200 809f 	bhi.w	800bbdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800ba9e:	a201      	add	r2, pc, #4	; (adr r2, 800baa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800baa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baa4:	0800bad9 	.word	0x0800bad9
 800baa8:	0800bbdd 	.word	0x0800bbdd
 800baac:	0800bbdd 	.word	0x0800bbdd
 800bab0:	0800bbdd 	.word	0x0800bbdd
 800bab4:	0800bb19 	.word	0x0800bb19
 800bab8:	0800bbdd 	.word	0x0800bbdd
 800babc:	0800bbdd 	.word	0x0800bbdd
 800bac0:	0800bbdd 	.word	0x0800bbdd
 800bac4:	0800bb5b 	.word	0x0800bb5b
 800bac8:	0800bbdd 	.word	0x0800bbdd
 800bacc:	0800bbdd 	.word	0x0800bbdd
 800bad0:	0800bbdd 	.word	0x0800bbdd
 800bad4:	0800bb9b 	.word	0x0800bb9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	68b9      	ldr	r1, [r7, #8]
 800bade:	4618      	mov	r0, r3
 800bae0:	f000 fa18 	bl	800bf14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	699a      	ldr	r2, [r3, #24]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f042 0208 	orr.w	r2, r2, #8
 800baf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	699a      	ldr	r2, [r3, #24]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f022 0204 	bic.w	r2, r2, #4
 800bb02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	6999      	ldr	r1, [r3, #24]
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	691a      	ldr	r2, [r3, #16]
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	430a      	orrs	r2, r1
 800bb14:	619a      	str	r2, [r3, #24]
      break;
 800bb16:	e064      	b.n	800bbe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68b9      	ldr	r1, [r7, #8]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f000 fa68 	bl	800bff4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	699a      	ldr	r2, [r3, #24]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bb32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	699a      	ldr	r2, [r3, #24]
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bb42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	6999      	ldr	r1, [r3, #24]
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	691b      	ldr	r3, [r3, #16]
 800bb4e:	021a      	lsls	r2, r3, #8
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	430a      	orrs	r2, r1
 800bb56:	619a      	str	r2, [r3, #24]
      break;
 800bb58:	e043      	b.n	800bbe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68b9      	ldr	r1, [r7, #8]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f000 fabd 	bl	800c0e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	69da      	ldr	r2, [r3, #28]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f042 0208 	orr.w	r2, r2, #8
 800bb74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	69da      	ldr	r2, [r3, #28]
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f022 0204 	bic.w	r2, r2, #4
 800bb84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	69d9      	ldr	r1, [r3, #28]
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	691a      	ldr	r2, [r3, #16]
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	430a      	orrs	r2, r1
 800bb96:	61da      	str	r2, [r3, #28]
      break;
 800bb98:	e023      	b.n	800bbe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68b9      	ldr	r1, [r7, #8]
 800bba0:	4618      	mov	r0, r3
 800bba2:	f000 fb11 	bl	800c1c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	69da      	ldr	r2, [r3, #28]
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bbb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	69da      	ldr	r2, [r3, #28]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bbc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	69d9      	ldr	r1, [r3, #28]
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	691b      	ldr	r3, [r3, #16]
 800bbd0:	021a      	lsls	r2, r3, #8
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	430a      	orrs	r2, r1
 800bbd8:	61da      	str	r2, [r3, #28]
      break;
 800bbda:	e002      	b.n	800bbe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	75fb      	strb	r3, [r7, #23]
      break;
 800bbe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc08:	2b01      	cmp	r3, #1
 800bc0a:	d101      	bne.n	800bc10 <HAL_TIM_ConfigClockSource+0x1c>
 800bc0c:	2302      	movs	r3, #2
 800bc0e:	e0b4      	b.n	800bd7a <HAL_TIM_ConfigClockSource+0x186>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2201      	movs	r2, #1
 800bc14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2202      	movs	r2, #2
 800bc1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	689b      	ldr	r3, [r3, #8]
 800bc26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bc2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bc36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc48:	d03e      	beq.n	800bcc8 <HAL_TIM_ConfigClockSource+0xd4>
 800bc4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc4e:	f200 8087 	bhi.w	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc56:	f000 8086 	beq.w	800bd66 <HAL_TIM_ConfigClockSource+0x172>
 800bc5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc5e:	d87f      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc60:	2b70      	cmp	r3, #112	; 0x70
 800bc62:	d01a      	beq.n	800bc9a <HAL_TIM_ConfigClockSource+0xa6>
 800bc64:	2b70      	cmp	r3, #112	; 0x70
 800bc66:	d87b      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc68:	2b60      	cmp	r3, #96	; 0x60
 800bc6a:	d050      	beq.n	800bd0e <HAL_TIM_ConfigClockSource+0x11a>
 800bc6c:	2b60      	cmp	r3, #96	; 0x60
 800bc6e:	d877      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc70:	2b50      	cmp	r3, #80	; 0x50
 800bc72:	d03c      	beq.n	800bcee <HAL_TIM_ConfigClockSource+0xfa>
 800bc74:	2b50      	cmp	r3, #80	; 0x50
 800bc76:	d873      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc78:	2b40      	cmp	r3, #64	; 0x40
 800bc7a:	d058      	beq.n	800bd2e <HAL_TIM_ConfigClockSource+0x13a>
 800bc7c:	2b40      	cmp	r3, #64	; 0x40
 800bc7e:	d86f      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc80:	2b30      	cmp	r3, #48	; 0x30
 800bc82:	d064      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc84:	2b30      	cmp	r3, #48	; 0x30
 800bc86:	d86b      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc88:	2b20      	cmp	r3, #32
 800bc8a:	d060      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc8c:	2b20      	cmp	r3, #32
 800bc8e:	d867      	bhi.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d05c      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc94:	2b10      	cmp	r3, #16
 800bc96:	d05a      	beq.n	800bd4e <HAL_TIM_ConfigClockSource+0x15a>
 800bc98:	e062      	b.n	800bd60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6818      	ldr	r0, [r3, #0]
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	6899      	ldr	r1, [r3, #8]
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	685a      	ldr	r2, [r3, #4]
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	f000 fb5d 	bl	800c368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	689b      	ldr	r3, [r3, #8]
 800bcb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bcbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	68ba      	ldr	r2, [r7, #8]
 800bcc4:	609a      	str	r2, [r3, #8]
      break;
 800bcc6:	e04f      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6818      	ldr	r0, [r3, #0]
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	6899      	ldr	r1, [r3, #8]
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	f000 fb46 	bl	800c368 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	689a      	ldr	r2, [r3, #8]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bcea:	609a      	str	r2, [r3, #8]
      break;
 800bcec:	e03c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6818      	ldr	r0, [r3, #0]
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	6859      	ldr	r1, [r3, #4]
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	461a      	mov	r2, r3
 800bcfc:	f000 faba 	bl	800c274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	2150      	movs	r1, #80	; 0x50
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 fb13 	bl	800c332 <TIM_ITRx_SetConfig>
      break;
 800bd0c:	e02c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6818      	ldr	r0, [r3, #0]
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	6859      	ldr	r1, [r3, #4]
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	68db      	ldr	r3, [r3, #12]
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	f000 fad9 	bl	800c2d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	2160      	movs	r1, #96	; 0x60
 800bd26:	4618      	mov	r0, r3
 800bd28:	f000 fb03 	bl	800c332 <TIM_ITRx_SetConfig>
      break;
 800bd2c:	e01c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6818      	ldr	r0, [r3, #0]
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	6859      	ldr	r1, [r3, #4]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	f000 fa9a 	bl	800c274 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2140      	movs	r1, #64	; 0x40
 800bd46:	4618      	mov	r0, r3
 800bd48:	f000 faf3 	bl	800c332 <TIM_ITRx_SetConfig>
      break;
 800bd4c:	e00c      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4619      	mov	r1, r3
 800bd58:	4610      	mov	r0, r2
 800bd5a:	f000 faea 	bl	800c332 <TIM_ITRx_SetConfig>
      break;
 800bd5e:	e003      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bd60:	2301      	movs	r3, #1
 800bd62:	73fb      	strb	r3, [r7, #15]
      break;
 800bd64:	e000      	b.n	800bd68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bd66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3710      	adds	r7, #16
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}

0800bd82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b083      	sub	sp, #12
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd8a:	bf00      	nop
 800bd8c:	370c      	adds	r7, #12
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr

0800bd96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd96:	b480      	push	{r7}
 800bd98:	b083      	sub	sp, #12
 800bd9a:	af00      	add	r7, sp, #0
 800bd9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd9e:	bf00      	nop
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b083      	sub	sp, #12
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bdb2:	bf00      	nop
 800bdb4:	370c      	adds	r7, #12
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b083      	sub	sp, #12
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bdc6:	bf00      	nop
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
	...

0800bdd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a40      	ldr	r2, [pc, #256]	; (800bee8 <TIM_Base_SetConfig+0x114>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d013      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bdf2:	d00f      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	4a3d      	ldr	r2, [pc, #244]	; (800beec <TIM_Base_SetConfig+0x118>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d00b      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	4a3c      	ldr	r2, [pc, #240]	; (800bef0 <TIM_Base_SetConfig+0x11c>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d007      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	4a3b      	ldr	r2, [pc, #236]	; (800bef4 <TIM_Base_SetConfig+0x120>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d003      	beq.n	800be14 <TIM_Base_SetConfig+0x40>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	4a3a      	ldr	r2, [pc, #232]	; (800bef8 <TIM_Base_SetConfig+0x124>)
 800be10:	4293      	cmp	r3, r2
 800be12:	d108      	bne.n	800be26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	4313      	orrs	r3, r2
 800be24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4a2f      	ldr	r2, [pc, #188]	; (800bee8 <TIM_Base_SetConfig+0x114>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d02b      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be34:	d027      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	4a2c      	ldr	r2, [pc, #176]	; (800beec <TIM_Base_SetConfig+0x118>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d023      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a2b      	ldr	r2, [pc, #172]	; (800bef0 <TIM_Base_SetConfig+0x11c>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d01f      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	4a2a      	ldr	r2, [pc, #168]	; (800bef4 <TIM_Base_SetConfig+0x120>)
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d01b      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	4a29      	ldr	r2, [pc, #164]	; (800bef8 <TIM_Base_SetConfig+0x124>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d017      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a28      	ldr	r2, [pc, #160]	; (800befc <TIM_Base_SetConfig+0x128>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d013      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	4a27      	ldr	r2, [pc, #156]	; (800bf00 <TIM_Base_SetConfig+0x12c>)
 800be62:	4293      	cmp	r3, r2
 800be64:	d00f      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	4a26      	ldr	r2, [pc, #152]	; (800bf04 <TIM_Base_SetConfig+0x130>)
 800be6a:	4293      	cmp	r3, r2
 800be6c:	d00b      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a25      	ldr	r2, [pc, #148]	; (800bf08 <TIM_Base_SetConfig+0x134>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d007      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a24      	ldr	r2, [pc, #144]	; (800bf0c <TIM_Base_SetConfig+0x138>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d003      	beq.n	800be86 <TIM_Base_SetConfig+0xb2>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a23      	ldr	r2, [pc, #140]	; (800bf10 <TIM_Base_SetConfig+0x13c>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d108      	bne.n	800be98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	68fa      	ldr	r2, [r7, #12]
 800be94:	4313      	orrs	r3, r2
 800be96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68fa      	ldr	r2, [r7, #12]
 800beaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	689a      	ldr	r2, [r3, #8]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	681a      	ldr	r2, [r3, #0]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a0a      	ldr	r2, [pc, #40]	; (800bee8 <TIM_Base_SetConfig+0x114>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d003      	beq.n	800becc <TIM_Base_SetConfig+0xf8>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a0c      	ldr	r2, [pc, #48]	; (800bef8 <TIM_Base_SetConfig+0x124>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d103      	bne.n	800bed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800becc:	683b      	ldr	r3, [r7, #0]
 800bece:	691a      	ldr	r2, [r3, #16]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	615a      	str	r2, [r3, #20]
}
 800beda:	bf00      	nop
 800bedc:	3714      	adds	r7, #20
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	40010000 	.word	0x40010000
 800beec:	40000400 	.word	0x40000400
 800bef0:	40000800 	.word	0x40000800
 800bef4:	40000c00 	.word	0x40000c00
 800bef8:	40010400 	.word	0x40010400
 800befc:	40014000 	.word	0x40014000
 800bf00:	40014400 	.word	0x40014400
 800bf04:	40014800 	.word	0x40014800
 800bf08:	40001800 	.word	0x40001800
 800bf0c:	40001c00 	.word	0x40001c00
 800bf10:	40002000 	.word	0x40002000

0800bf14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b087      	sub	sp, #28
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a1b      	ldr	r3, [r3, #32]
 800bf22:	f023 0201 	bic.w	r2, r3, #1
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	685b      	ldr	r3, [r3, #4]
 800bf34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	699b      	ldr	r3, [r3, #24]
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f023 0303 	bic.w	r3, r3, #3
 800bf4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f023 0302 	bic.w	r3, r3, #2
 800bf5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	697a      	ldr	r2, [r7, #20]
 800bf64:	4313      	orrs	r3, r2
 800bf66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a20      	ldr	r2, [pc, #128]	; (800bfec <TIM_OC1_SetConfig+0xd8>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d003      	beq.n	800bf78 <TIM_OC1_SetConfig+0x64>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a1f      	ldr	r2, [pc, #124]	; (800bff0 <TIM_OC1_SetConfig+0xdc>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d10c      	bne.n	800bf92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f023 0308 	bic.w	r3, r3, #8
 800bf7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	68db      	ldr	r3, [r3, #12]
 800bf84:	697a      	ldr	r2, [r7, #20]
 800bf86:	4313      	orrs	r3, r2
 800bf88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	f023 0304 	bic.w	r3, r3, #4
 800bf90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	4a15      	ldr	r2, [pc, #84]	; (800bfec <TIM_OC1_SetConfig+0xd8>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d003      	beq.n	800bfa2 <TIM_OC1_SetConfig+0x8e>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4a14      	ldr	r2, [pc, #80]	; (800bff0 <TIM_OC1_SetConfig+0xdc>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d111      	bne.n	800bfc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bfa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bfb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	695b      	ldr	r3, [r3, #20]
 800bfb6:	693a      	ldr	r2, [r7, #16]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	699b      	ldr	r3, [r3, #24]
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	697a      	ldr	r2, [r7, #20]
 800bfde:	621a      	str	r2, [r3, #32]
}
 800bfe0:	bf00      	nop
 800bfe2:	371c      	adds	r7, #28
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfea:	4770      	bx	lr
 800bfec:	40010000 	.word	0x40010000
 800bff0:	40010400 	.word	0x40010400

0800bff4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b087      	sub	sp, #28
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]
 800bffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	f023 0210 	bic.w	r2, r3, #16
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a1b      	ldr	r3, [r3, #32]
 800c00e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c02a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	021b      	lsls	r3, r3, #8
 800c032:	68fa      	ldr	r2, [r7, #12]
 800c034:	4313      	orrs	r3, r2
 800c036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	f023 0320 	bic.w	r3, r3, #32
 800c03e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	689b      	ldr	r3, [r3, #8]
 800c044:	011b      	lsls	r3, r3, #4
 800c046:	697a      	ldr	r2, [r7, #20]
 800c048:	4313      	orrs	r3, r2
 800c04a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a22      	ldr	r2, [pc, #136]	; (800c0d8 <TIM_OC2_SetConfig+0xe4>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d003      	beq.n	800c05c <TIM_OC2_SetConfig+0x68>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a21      	ldr	r2, [pc, #132]	; (800c0dc <TIM_OC2_SetConfig+0xe8>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d10d      	bne.n	800c078 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	68db      	ldr	r3, [r3, #12]
 800c068:	011b      	lsls	r3, r3, #4
 800c06a:	697a      	ldr	r2, [r7, #20]
 800c06c:	4313      	orrs	r3, r2
 800c06e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c076:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a17      	ldr	r2, [pc, #92]	; (800c0d8 <TIM_OC2_SetConfig+0xe4>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d003      	beq.n	800c088 <TIM_OC2_SetConfig+0x94>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4a16      	ldr	r2, [pc, #88]	; (800c0dc <TIM_OC2_SetConfig+0xe8>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d113      	bne.n	800c0b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c08e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c096:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	695b      	ldr	r3, [r3, #20]
 800c09c:	009b      	lsls	r3, r3, #2
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	699b      	ldr	r3, [r3, #24]
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	693a      	ldr	r2, [r7, #16]
 800c0b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	68fa      	ldr	r2, [r7, #12]
 800c0ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	685a      	ldr	r2, [r3, #4]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	697a      	ldr	r2, [r7, #20]
 800c0c8:	621a      	str	r2, [r3, #32]
}
 800c0ca:	bf00      	nop
 800c0cc:	371c      	adds	r7, #28
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
 800c0d6:	bf00      	nop
 800c0d8:	40010000 	.word	0x40010000
 800c0dc:	40010400 	.word	0x40010400

0800c0e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b087      	sub	sp, #28
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	6a1b      	ldr	r3, [r3, #32]
 800c0ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	6a1b      	ldr	r3, [r3, #32]
 800c0fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	69db      	ldr	r3, [r3, #28]
 800c106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c10e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	f023 0303 	bic.w	r3, r3, #3
 800c116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	4313      	orrs	r3, r2
 800c120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	689b      	ldr	r3, [r3, #8]
 800c12e:	021b      	lsls	r3, r3, #8
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	4313      	orrs	r3, r2
 800c134:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a21      	ldr	r2, [pc, #132]	; (800c1c0 <TIM_OC3_SetConfig+0xe0>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d003      	beq.n	800c146 <TIM_OC3_SetConfig+0x66>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	4a20      	ldr	r2, [pc, #128]	; (800c1c4 <TIM_OC3_SetConfig+0xe4>)
 800c142:	4293      	cmp	r3, r2
 800c144:	d10d      	bne.n	800c162 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c14c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	68db      	ldr	r3, [r3, #12]
 800c152:	021b      	lsls	r3, r3, #8
 800c154:	697a      	ldr	r2, [r7, #20]
 800c156:	4313      	orrs	r3, r2
 800c158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	4a16      	ldr	r2, [pc, #88]	; (800c1c0 <TIM_OC3_SetConfig+0xe0>)
 800c166:	4293      	cmp	r3, r2
 800c168:	d003      	beq.n	800c172 <TIM_OC3_SetConfig+0x92>
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	4a15      	ldr	r2, [pc, #84]	; (800c1c4 <TIM_OC3_SetConfig+0xe4>)
 800c16e:	4293      	cmp	r3, r2
 800c170:	d113      	bne.n	800c19a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	695b      	ldr	r3, [r3, #20]
 800c186:	011b      	lsls	r3, r3, #4
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	4313      	orrs	r3, r2
 800c18c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	699b      	ldr	r3, [r3, #24]
 800c192:	011b      	lsls	r3, r3, #4
 800c194:	693a      	ldr	r2, [r7, #16]
 800c196:	4313      	orrs	r3, r2
 800c198:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	68fa      	ldr	r2, [r7, #12]
 800c1a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	685a      	ldr	r2, [r3, #4]
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	697a      	ldr	r2, [r7, #20]
 800c1b2:	621a      	str	r2, [r3, #32]
}
 800c1b4:	bf00      	nop
 800c1b6:	371c      	adds	r7, #28
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	40010000 	.word	0x40010000
 800c1c4:	40010400 	.word	0x40010400

0800c1c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c1c8:	b480      	push	{r7}
 800c1ca:	b087      	sub	sp, #28
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a1b      	ldr	r3, [r3, #32]
 800c1d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6a1b      	ldr	r3, [r3, #32]
 800c1e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	69db      	ldr	r3, [r3, #28]
 800c1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	021b      	lsls	r3, r3, #8
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	4313      	orrs	r3, r2
 800c20a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c212:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	689b      	ldr	r3, [r3, #8]
 800c218:	031b      	lsls	r3, r3, #12
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	4313      	orrs	r3, r2
 800c21e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	4a12      	ldr	r2, [pc, #72]	; (800c26c <TIM_OC4_SetConfig+0xa4>)
 800c224:	4293      	cmp	r3, r2
 800c226:	d003      	beq.n	800c230 <TIM_OC4_SetConfig+0x68>
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	4a11      	ldr	r2, [pc, #68]	; (800c270 <TIM_OC4_SetConfig+0xa8>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d109      	bne.n	800c244 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c236:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	695b      	ldr	r3, [r3, #20]
 800c23c:	019b      	lsls	r3, r3, #6
 800c23e:	697a      	ldr	r2, [r7, #20]
 800c240:	4313      	orrs	r3, r2
 800c242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	697a      	ldr	r2, [r7, #20]
 800c248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68fa      	ldr	r2, [r7, #12]
 800c24e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	685a      	ldr	r2, [r3, #4]
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	693a      	ldr	r2, [r7, #16]
 800c25c:	621a      	str	r2, [r3, #32]
}
 800c25e:	bf00      	nop
 800c260:	371c      	adds	r7, #28
 800c262:	46bd      	mov	sp, r7
 800c264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c268:	4770      	bx	lr
 800c26a:	bf00      	nop
 800c26c:	40010000 	.word	0x40010000
 800c270:	40010400 	.word	0x40010400

0800c274 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c274:	b480      	push	{r7}
 800c276:	b087      	sub	sp, #28
 800c278:	af00      	add	r7, sp, #0
 800c27a:	60f8      	str	r0, [r7, #12]
 800c27c:	60b9      	str	r1, [r7, #8]
 800c27e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	6a1b      	ldr	r3, [r3, #32]
 800c284:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	f023 0201 	bic.w	r2, r3, #1
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	699b      	ldr	r3, [r3, #24]
 800c296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c298:	693b      	ldr	r3, [r7, #16]
 800c29a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c29e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	011b      	lsls	r3, r3, #4
 800c2a4:	693a      	ldr	r2, [r7, #16]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	f023 030a 	bic.w	r3, r3, #10
 800c2b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c2b2:	697a      	ldr	r2, [r7, #20]
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	621a      	str	r2, [r3, #32]
}
 800c2c6:	bf00      	nop
 800c2c8:	371c      	adds	r7, #28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	b087      	sub	sp, #28
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	60f8      	str	r0, [r7, #12]
 800c2da:	60b9      	str	r1, [r7, #8]
 800c2dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	6a1b      	ldr	r3, [r3, #32]
 800c2e2:	f023 0210 	bic.w	r2, r3, #16
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	699b      	ldr	r3, [r3, #24]
 800c2ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	6a1b      	ldr	r3, [r3, #32]
 800c2f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c2fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	031b      	lsls	r3, r3, #12
 800c302:	697a      	ldr	r2, [r7, #20]
 800c304:	4313      	orrs	r3, r2
 800c306:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c30e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	011b      	lsls	r3, r3, #4
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	4313      	orrs	r3, r2
 800c318:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	697a      	ldr	r2, [r7, #20]
 800c31e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	693a      	ldr	r2, [r7, #16]
 800c324:	621a      	str	r2, [r3, #32]
}
 800c326:	bf00      	nop
 800c328:	371c      	adds	r7, #28
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c332:	b480      	push	{r7}
 800c334:	b085      	sub	sp, #20
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	689b      	ldr	r3, [r3, #8]
 800c340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c34a:	683a      	ldr	r2, [r7, #0]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4313      	orrs	r3, r2
 800c350:	f043 0307 	orr.w	r3, r3, #7
 800c354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	609a      	str	r2, [r3, #8]
}
 800c35c:	bf00      	nop
 800c35e:	3714      	adds	r7, #20
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c368:	b480      	push	{r7}
 800c36a:	b087      	sub	sp, #28
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	60b9      	str	r1, [r7, #8]
 800c372:	607a      	str	r2, [r7, #4]
 800c374:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	689b      	ldr	r3, [r3, #8]
 800c37a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c37c:	697b      	ldr	r3, [r7, #20]
 800c37e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c382:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	021a      	lsls	r2, r3, #8
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	431a      	orrs	r2, r3
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	4313      	orrs	r3, r2
 800c390:	697a      	ldr	r2, [r7, #20]
 800c392:	4313      	orrs	r3, r2
 800c394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	697a      	ldr	r2, [r7, #20]
 800c39a:	609a      	str	r2, [r3, #8]
}
 800c39c:	bf00      	nop
 800c39e:	371c      	adds	r7, #28
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d101      	bne.n	800c3c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c3bc:	2302      	movs	r3, #2
 800c3be:	e05a      	b.n	800c476 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2202      	movs	r2, #2
 800c3cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	685b      	ldr	r3, [r3, #4]
 800c3d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	68fa      	ldr	r2, [r7, #12]
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a21      	ldr	r2, [pc, #132]	; (800c484 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d022      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c40c:	d01d      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	4a1d      	ldr	r2, [pc, #116]	; (800c488 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c414:	4293      	cmp	r3, r2
 800c416:	d018      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	4a1b      	ldr	r2, [pc, #108]	; (800c48c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c41e:	4293      	cmp	r3, r2
 800c420:	d013      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	4a1a      	ldr	r2, [pc, #104]	; (800c490 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d00e      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4a18      	ldr	r2, [pc, #96]	; (800c494 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d009      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a17      	ldr	r2, [pc, #92]	; (800c498 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d004      	beq.n	800c44a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a15      	ldr	r2, [pc, #84]	; (800c49c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d10c      	bne.n	800c464 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c450:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	4313      	orrs	r3, r2
 800c45a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	68ba      	ldr	r2, [r7, #8]
 800c462:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3714      	adds	r7, #20
 800c47a:	46bd      	mov	sp, r7
 800c47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c480:	4770      	bx	lr
 800c482:	bf00      	nop
 800c484:	40010000 	.word	0x40010000
 800c488:	40000400 	.word	0x40000400
 800c48c:	40000800 	.word	0x40000800
 800c490:	40000c00 	.word	0x40000c00
 800c494:	40010400 	.word	0x40010400
 800c498:	40014000 	.word	0x40014000
 800c49c:	40001800 	.word	0x40001800

0800c4a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b083      	sub	sp, #12
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4a8:	bf00      	nop
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e03f      	b.n	800c55a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4e0:	b2db      	uxtb	r3, r3
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d106      	bne.n	800c4f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7fb ff12 	bl	8008318 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2224      	movs	r2, #36	; 0x24
 800c4f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68da      	ldr	r2, [r3, #12]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c50a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 f829 	bl	800c564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	691a      	ldr	r2, [r3, #16]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c520:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	695a      	ldr	r2, [r3, #20]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c530:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68da      	ldr	r2, [r3, #12]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c540:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2220      	movs	r2, #32
 800c54c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2220      	movs	r2, #32
 800c554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3708      	adds	r7, #8
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
	...

0800c564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c568:	b0c0      	sub	sp, #256	; 0x100
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	691b      	ldr	r3, [r3, #16]
 800c578:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c57c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c580:	68d9      	ldr	r1, [r3, #12]
 800c582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	ea40 0301 	orr.w	r3, r0, r1
 800c58c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c58e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c592:	689a      	ldr	r2, [r3, #8]
 800c594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	431a      	orrs	r2, r3
 800c59c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5a0:	695b      	ldr	r3, [r3, #20]
 800c5a2:	431a      	orrs	r2, r3
 800c5a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c5b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c5bc:	f021 010c 	bic.w	r1, r1, #12
 800c5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5c4:	681a      	ldr	r2, [r3, #0]
 800c5c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c5ca:	430b      	orrs	r3, r1
 800c5cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c5ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	695b      	ldr	r3, [r3, #20]
 800c5d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c5da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5de:	6999      	ldr	r1, [r3, #24]
 800c5e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	ea40 0301 	orr.w	r3, r0, r1
 800c5ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c5ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	4b8f      	ldr	r3, [pc, #572]	; (800c830 <UART_SetConfig+0x2cc>)
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d005      	beq.n	800c604 <UART_SetConfig+0xa0>
 800c5f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	4b8d      	ldr	r3, [pc, #564]	; (800c834 <UART_SetConfig+0x2d0>)
 800c600:	429a      	cmp	r2, r3
 800c602:	d104      	bne.n	800c60e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c604:	f7fe fe74 	bl	800b2f0 <HAL_RCC_GetPCLK2Freq>
 800c608:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c60c:	e003      	b.n	800c616 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c60e:	f7fe fe5b 	bl	800b2c8 <HAL_RCC_GetPCLK1Freq>
 800c612:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c61a:	69db      	ldr	r3, [r3, #28]
 800c61c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c620:	f040 810c 	bne.w	800c83c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c628:	2200      	movs	r2, #0
 800c62a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c62e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c632:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c636:	4622      	mov	r2, r4
 800c638:	462b      	mov	r3, r5
 800c63a:	1891      	adds	r1, r2, r2
 800c63c:	65b9      	str	r1, [r7, #88]	; 0x58
 800c63e:	415b      	adcs	r3, r3
 800c640:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c642:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c646:	4621      	mov	r1, r4
 800c648:	eb12 0801 	adds.w	r8, r2, r1
 800c64c:	4629      	mov	r1, r5
 800c64e:	eb43 0901 	adc.w	r9, r3, r1
 800c652:	f04f 0200 	mov.w	r2, #0
 800c656:	f04f 0300 	mov.w	r3, #0
 800c65a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c65e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c662:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c666:	4690      	mov	r8, r2
 800c668:	4699      	mov	r9, r3
 800c66a:	4623      	mov	r3, r4
 800c66c:	eb18 0303 	adds.w	r3, r8, r3
 800c670:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c674:	462b      	mov	r3, r5
 800c676:	eb49 0303 	adc.w	r3, r9, r3
 800c67a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c67e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	2200      	movs	r2, #0
 800c686:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c68a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c68e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c692:	460b      	mov	r3, r1
 800c694:	18db      	adds	r3, r3, r3
 800c696:	653b      	str	r3, [r7, #80]	; 0x50
 800c698:	4613      	mov	r3, r2
 800c69a:	eb42 0303 	adc.w	r3, r2, r3
 800c69e:	657b      	str	r3, [r7, #84]	; 0x54
 800c6a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c6a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c6a8:	f7f4 faee 	bl	8000c88 <__aeabi_uldivmod>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	4b61      	ldr	r3, [pc, #388]	; (800c838 <UART_SetConfig+0x2d4>)
 800c6b2:	fba3 2302 	umull	r2, r3, r3, r2
 800c6b6:	095b      	lsrs	r3, r3, #5
 800c6b8:	011c      	lsls	r4, r3, #4
 800c6ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c6be:	2200      	movs	r2, #0
 800c6c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c6c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c6c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	464b      	mov	r3, r9
 800c6d0:	1891      	adds	r1, r2, r2
 800c6d2:	64b9      	str	r1, [r7, #72]	; 0x48
 800c6d4:	415b      	adcs	r3, r3
 800c6d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c6dc:	4641      	mov	r1, r8
 800c6de:	eb12 0a01 	adds.w	sl, r2, r1
 800c6e2:	4649      	mov	r1, r9
 800c6e4:	eb43 0b01 	adc.w	fp, r3, r1
 800c6e8:	f04f 0200 	mov.w	r2, #0
 800c6ec:	f04f 0300 	mov.w	r3, #0
 800c6f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c6f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c6f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c6fc:	4692      	mov	sl, r2
 800c6fe:	469b      	mov	fp, r3
 800c700:	4643      	mov	r3, r8
 800c702:	eb1a 0303 	adds.w	r3, sl, r3
 800c706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c70a:	464b      	mov	r3, r9
 800c70c:	eb4b 0303 	adc.w	r3, fp, r3
 800c710:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c720:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c724:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c728:	460b      	mov	r3, r1
 800c72a:	18db      	adds	r3, r3, r3
 800c72c:	643b      	str	r3, [r7, #64]	; 0x40
 800c72e:	4613      	mov	r3, r2
 800c730:	eb42 0303 	adc.w	r3, r2, r3
 800c734:	647b      	str	r3, [r7, #68]	; 0x44
 800c736:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c73a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c73e:	f7f4 faa3 	bl	8000c88 <__aeabi_uldivmod>
 800c742:	4602      	mov	r2, r0
 800c744:	460b      	mov	r3, r1
 800c746:	4611      	mov	r1, r2
 800c748:	4b3b      	ldr	r3, [pc, #236]	; (800c838 <UART_SetConfig+0x2d4>)
 800c74a:	fba3 2301 	umull	r2, r3, r3, r1
 800c74e:	095b      	lsrs	r3, r3, #5
 800c750:	2264      	movs	r2, #100	; 0x64
 800c752:	fb02 f303 	mul.w	r3, r2, r3
 800c756:	1acb      	subs	r3, r1, r3
 800c758:	00db      	lsls	r3, r3, #3
 800c75a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c75e:	4b36      	ldr	r3, [pc, #216]	; (800c838 <UART_SetConfig+0x2d4>)
 800c760:	fba3 2302 	umull	r2, r3, r3, r2
 800c764:	095b      	lsrs	r3, r3, #5
 800c766:	005b      	lsls	r3, r3, #1
 800c768:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c76c:	441c      	add	r4, r3
 800c76e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c772:	2200      	movs	r2, #0
 800c774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c778:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c77c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c780:	4642      	mov	r2, r8
 800c782:	464b      	mov	r3, r9
 800c784:	1891      	adds	r1, r2, r2
 800c786:	63b9      	str	r1, [r7, #56]	; 0x38
 800c788:	415b      	adcs	r3, r3
 800c78a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c78c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c790:	4641      	mov	r1, r8
 800c792:	1851      	adds	r1, r2, r1
 800c794:	6339      	str	r1, [r7, #48]	; 0x30
 800c796:	4649      	mov	r1, r9
 800c798:	414b      	adcs	r3, r1
 800c79a:	637b      	str	r3, [r7, #52]	; 0x34
 800c79c:	f04f 0200 	mov.w	r2, #0
 800c7a0:	f04f 0300 	mov.w	r3, #0
 800c7a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c7a8:	4659      	mov	r1, fp
 800c7aa:	00cb      	lsls	r3, r1, #3
 800c7ac:	4651      	mov	r1, sl
 800c7ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c7b2:	4651      	mov	r1, sl
 800c7b4:	00ca      	lsls	r2, r1, #3
 800c7b6:	4610      	mov	r0, r2
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4603      	mov	r3, r0
 800c7bc:	4642      	mov	r2, r8
 800c7be:	189b      	adds	r3, r3, r2
 800c7c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c7c4:	464b      	mov	r3, r9
 800c7c6:	460a      	mov	r2, r1
 800c7c8:	eb42 0303 	adc.w	r3, r2, r3
 800c7cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7d4:	685b      	ldr	r3, [r3, #4]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c7dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c7e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	18db      	adds	r3, r3, r3
 800c7e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7ea:	4613      	mov	r3, r2
 800c7ec:	eb42 0303 	adc.w	r3, r2, r3
 800c7f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c7f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c7fa:	f7f4 fa45 	bl	8000c88 <__aeabi_uldivmod>
 800c7fe:	4602      	mov	r2, r0
 800c800:	460b      	mov	r3, r1
 800c802:	4b0d      	ldr	r3, [pc, #52]	; (800c838 <UART_SetConfig+0x2d4>)
 800c804:	fba3 1302 	umull	r1, r3, r3, r2
 800c808:	095b      	lsrs	r3, r3, #5
 800c80a:	2164      	movs	r1, #100	; 0x64
 800c80c:	fb01 f303 	mul.w	r3, r1, r3
 800c810:	1ad3      	subs	r3, r2, r3
 800c812:	00db      	lsls	r3, r3, #3
 800c814:	3332      	adds	r3, #50	; 0x32
 800c816:	4a08      	ldr	r2, [pc, #32]	; (800c838 <UART_SetConfig+0x2d4>)
 800c818:	fba2 2303 	umull	r2, r3, r2, r3
 800c81c:	095b      	lsrs	r3, r3, #5
 800c81e:	f003 0207 	and.w	r2, r3, #7
 800c822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	4422      	add	r2, r4
 800c82a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c82c:	e105      	b.n	800ca3a <UART_SetConfig+0x4d6>
 800c82e:	bf00      	nop
 800c830:	40011000 	.word	0x40011000
 800c834:	40011400 	.word	0x40011400
 800c838:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c83c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c840:	2200      	movs	r2, #0
 800c842:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c846:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c84a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c84e:	4642      	mov	r2, r8
 800c850:	464b      	mov	r3, r9
 800c852:	1891      	adds	r1, r2, r2
 800c854:	6239      	str	r1, [r7, #32]
 800c856:	415b      	adcs	r3, r3
 800c858:	627b      	str	r3, [r7, #36]	; 0x24
 800c85a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c85e:	4641      	mov	r1, r8
 800c860:	1854      	adds	r4, r2, r1
 800c862:	4649      	mov	r1, r9
 800c864:	eb43 0501 	adc.w	r5, r3, r1
 800c868:	f04f 0200 	mov.w	r2, #0
 800c86c:	f04f 0300 	mov.w	r3, #0
 800c870:	00eb      	lsls	r3, r5, #3
 800c872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c876:	00e2      	lsls	r2, r4, #3
 800c878:	4614      	mov	r4, r2
 800c87a:	461d      	mov	r5, r3
 800c87c:	4643      	mov	r3, r8
 800c87e:	18e3      	adds	r3, r4, r3
 800c880:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c884:	464b      	mov	r3, r9
 800c886:	eb45 0303 	adc.w	r3, r5, r3
 800c88a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c88e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	2200      	movs	r2, #0
 800c896:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c89a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c89e:	f04f 0200 	mov.w	r2, #0
 800c8a2:	f04f 0300 	mov.w	r3, #0
 800c8a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c8aa:	4629      	mov	r1, r5
 800c8ac:	008b      	lsls	r3, r1, #2
 800c8ae:	4621      	mov	r1, r4
 800c8b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	008a      	lsls	r2, r1, #2
 800c8b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c8bc:	f7f4 f9e4 	bl	8000c88 <__aeabi_uldivmod>
 800c8c0:	4602      	mov	r2, r0
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	4b60      	ldr	r3, [pc, #384]	; (800ca48 <UART_SetConfig+0x4e4>)
 800c8c6:	fba3 2302 	umull	r2, r3, r3, r2
 800c8ca:	095b      	lsrs	r3, r3, #5
 800c8cc:	011c      	lsls	r4, r3, #4
 800c8ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c8d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c8dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c8e0:	4642      	mov	r2, r8
 800c8e2:	464b      	mov	r3, r9
 800c8e4:	1891      	adds	r1, r2, r2
 800c8e6:	61b9      	str	r1, [r7, #24]
 800c8e8:	415b      	adcs	r3, r3
 800c8ea:	61fb      	str	r3, [r7, #28]
 800c8ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c8f0:	4641      	mov	r1, r8
 800c8f2:	1851      	adds	r1, r2, r1
 800c8f4:	6139      	str	r1, [r7, #16]
 800c8f6:	4649      	mov	r1, r9
 800c8f8:	414b      	adcs	r3, r1
 800c8fa:	617b      	str	r3, [r7, #20]
 800c8fc:	f04f 0200 	mov.w	r2, #0
 800c900:	f04f 0300 	mov.w	r3, #0
 800c904:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c908:	4659      	mov	r1, fp
 800c90a:	00cb      	lsls	r3, r1, #3
 800c90c:	4651      	mov	r1, sl
 800c90e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c912:	4651      	mov	r1, sl
 800c914:	00ca      	lsls	r2, r1, #3
 800c916:	4610      	mov	r0, r2
 800c918:	4619      	mov	r1, r3
 800c91a:	4603      	mov	r3, r0
 800c91c:	4642      	mov	r2, r8
 800c91e:	189b      	adds	r3, r3, r2
 800c920:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c924:	464b      	mov	r3, r9
 800c926:	460a      	mov	r2, r1
 800c928:	eb42 0303 	adc.w	r3, r2, r3
 800c92c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c934:	685b      	ldr	r3, [r3, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	67bb      	str	r3, [r7, #120]	; 0x78
 800c93a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c93c:	f04f 0200 	mov.w	r2, #0
 800c940:	f04f 0300 	mov.w	r3, #0
 800c944:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c948:	4649      	mov	r1, r9
 800c94a:	008b      	lsls	r3, r1, #2
 800c94c:	4641      	mov	r1, r8
 800c94e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c952:	4641      	mov	r1, r8
 800c954:	008a      	lsls	r2, r1, #2
 800c956:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c95a:	f7f4 f995 	bl	8000c88 <__aeabi_uldivmod>
 800c95e:	4602      	mov	r2, r0
 800c960:	460b      	mov	r3, r1
 800c962:	4b39      	ldr	r3, [pc, #228]	; (800ca48 <UART_SetConfig+0x4e4>)
 800c964:	fba3 1302 	umull	r1, r3, r3, r2
 800c968:	095b      	lsrs	r3, r3, #5
 800c96a:	2164      	movs	r1, #100	; 0x64
 800c96c:	fb01 f303 	mul.w	r3, r1, r3
 800c970:	1ad3      	subs	r3, r2, r3
 800c972:	011b      	lsls	r3, r3, #4
 800c974:	3332      	adds	r3, #50	; 0x32
 800c976:	4a34      	ldr	r2, [pc, #208]	; (800ca48 <UART_SetConfig+0x4e4>)
 800c978:	fba2 2303 	umull	r2, r3, r2, r3
 800c97c:	095b      	lsrs	r3, r3, #5
 800c97e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c982:	441c      	add	r4, r3
 800c984:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c988:	2200      	movs	r2, #0
 800c98a:	673b      	str	r3, [r7, #112]	; 0x70
 800c98c:	677a      	str	r2, [r7, #116]	; 0x74
 800c98e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c992:	4642      	mov	r2, r8
 800c994:	464b      	mov	r3, r9
 800c996:	1891      	adds	r1, r2, r2
 800c998:	60b9      	str	r1, [r7, #8]
 800c99a:	415b      	adcs	r3, r3
 800c99c:	60fb      	str	r3, [r7, #12]
 800c99e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c9a2:	4641      	mov	r1, r8
 800c9a4:	1851      	adds	r1, r2, r1
 800c9a6:	6039      	str	r1, [r7, #0]
 800c9a8:	4649      	mov	r1, r9
 800c9aa:	414b      	adcs	r3, r1
 800c9ac:	607b      	str	r3, [r7, #4]
 800c9ae:	f04f 0200 	mov.w	r2, #0
 800c9b2:	f04f 0300 	mov.w	r3, #0
 800c9b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c9ba:	4659      	mov	r1, fp
 800c9bc:	00cb      	lsls	r3, r1, #3
 800c9be:	4651      	mov	r1, sl
 800c9c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c9c4:	4651      	mov	r1, sl
 800c9c6:	00ca      	lsls	r2, r1, #3
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	4642      	mov	r2, r8
 800c9d0:	189b      	adds	r3, r3, r2
 800c9d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800c9d4:	464b      	mov	r3, r9
 800c9d6:	460a      	mov	r2, r1
 800c9d8:	eb42 0303 	adc.w	r3, r2, r3
 800c9dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c9de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9e2:	685b      	ldr	r3, [r3, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	663b      	str	r3, [r7, #96]	; 0x60
 800c9e8:	667a      	str	r2, [r7, #100]	; 0x64
 800c9ea:	f04f 0200 	mov.w	r2, #0
 800c9ee:	f04f 0300 	mov.w	r3, #0
 800c9f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	008b      	lsls	r3, r1, #2
 800c9fa:	4641      	mov	r1, r8
 800c9fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca00:	4641      	mov	r1, r8
 800ca02:	008a      	lsls	r2, r1, #2
 800ca04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ca08:	f7f4 f93e 	bl	8000c88 <__aeabi_uldivmod>
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4b0d      	ldr	r3, [pc, #52]	; (800ca48 <UART_SetConfig+0x4e4>)
 800ca12:	fba3 1302 	umull	r1, r3, r3, r2
 800ca16:	095b      	lsrs	r3, r3, #5
 800ca18:	2164      	movs	r1, #100	; 0x64
 800ca1a:	fb01 f303 	mul.w	r3, r1, r3
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	011b      	lsls	r3, r3, #4
 800ca22:	3332      	adds	r3, #50	; 0x32
 800ca24:	4a08      	ldr	r2, [pc, #32]	; (800ca48 <UART_SetConfig+0x4e4>)
 800ca26:	fba2 2303 	umull	r2, r3, r2, r3
 800ca2a:	095b      	lsrs	r3, r3, #5
 800ca2c:	f003 020f 	and.w	r2, r3, #15
 800ca30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	4422      	add	r2, r4
 800ca38:	609a      	str	r2, [r3, #8]
}
 800ca3a:	bf00      	nop
 800ca3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ca40:	46bd      	mov	sp, r7
 800ca42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca46:	bf00      	nop
 800ca48:	51eb851f 	.word	0x51eb851f

0800ca4c <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
 800ca54:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800ca56:	2300      	movs	r3, #0
 800ca58:	60fb      	str	r3, [r7, #12]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ca60:	68fa      	ldr	r2, [r7, #12]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d20b      	bcs.n	800ca7e <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	011b      	lsls	r3, r3, #4
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	4413      	add	r3, r2
 800ca6e:	6839      	ldr	r1, [r7, #0]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f000 f817 	bl	800caa4 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	60fb      	str	r3, [r7, #12]
 800ca7c:	e7ed      	b.n	800ca5a <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800ca7e:	bf00      	nop
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b082      	sub	sp, #8
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 800ca8e:	f7f9 f9f7 	bl	8005e80 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800ca92:	4603      	mov	r3, r0
 800ca94:	6879      	ldr	r1, [r7, #4]
 800ca96:	4618      	mov	r0, r3
 800ca98:	f7ff ffd8 	bl	800ca4c <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800ca9c:	bf00      	nop
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 800caa4:	b5b0      	push	{r4, r5, r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f7f4 fcd4 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800cab6:	4603      	mov	r3, r0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d001      	beq.n	800cac0 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 800cabc:	f006 f965 	bl	8012d8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	68dc      	ldr	r4, [r3, #12]
 800cac4:	687d      	ldr	r5, [r7, #4]
 800cac6:	463b      	mov	r3, r7
 800cac8:	4618      	mov	r0, r3
 800caca:	f7f9 fcd8 	bl	800647e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800cace:	4603      	mov	r3, r0
 800cad0:	4619      	mov	r1, r3
 800cad2:	4628      	mov	r0, r5
 800cad4:	47a0      	blx	r4
 800cad6:	bf00      	nop
    }
 800cad8:	3708      	adds	r7, #8
 800cada:	46bd      	mov	sp, r7
 800cadc:	bdb0      	pop	{r4, r5, r7, pc}

0800cade <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 800cade:	b5b0      	push	{r4, r5, r7, lr}
 800cae0:	b082      	sub	sp, #8
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	240f      	movs	r4, #15
 800caea:	461d      	mov	r5, r3
 800caec:	2c00      	cmp	r4, #0
 800caee:	db05      	blt.n	800cafc <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 800caf0:	4628      	mov	r0, r5
 800caf2:	f7f9 fba9 	bl	8006248 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800caf6:	3510      	adds	r5, #16
 800caf8:	3c01      	subs	r4, #1
 800cafa:	e7f7      	b.n	800caec <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4618      	mov	r0, r3
 800cb08:	3708      	adds	r7, #8
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bdb0      	pop	{r4, r5, r7, pc}

0800cb0e <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 800cb0e:	b590      	push	{r4, r7, lr}
 800cb10:	b083      	sub	sp, #12
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00a      	beq.n	800cb32 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	429c      	cmp	r4, r3
 800cb26:	d004      	beq.n	800cb32 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800cb28:	3c10      	subs	r4, #16
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f7f9 f964 	bl	8005df8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 800cb30:	e7f7      	b.n	800cb22 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4618      	mov	r0, r3
 800cb36:	370c      	adds	r7, #12
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd90      	pop	{r4, r7, pc}

0800cb3c <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	4801      	ldr	r0, [pc, #4]	; (800cb48 <__tcf_0+0xc>)
 800cb42:	f7ff ffe4 	bl	800cb0e <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 800cb46:	bd80      	pop	{r7, pc}
 800cb48:	2000147c 	.word	0x2000147c

0800cb4c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 800cb50:	4b12      	ldr	r3, [pc, #72]	; (800cb9c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	f3bf 8f5b 	dmb	ish
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	f003 0301 	and.w	r3, r3, #1
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	bf0c      	ite	eq
 800cb62:	2301      	moveq	r3, #1
 800cb64:	2300      	movne	r3, #0
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d013      	beq.n	800cb94 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800cb6c:	480b      	ldr	r0, [pc, #44]	; (800cb9c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cb6e:	f006 f8fb 	bl	8012d68 <__cxa_guard_acquire>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	bf14      	ite	ne
 800cb78:	2301      	movne	r3, #1
 800cb7a:	2300      	moveq	r3, #0
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d008      	beq.n	800cb94 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800cb82:	4807      	ldr	r0, [pc, #28]	; (800cba0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 800cb84:	f7ff ffab 	bl	800cade <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 800cb88:	4806      	ldr	r0, [pc, #24]	; (800cba4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 800cb8a:	f006 fb4c 	bl	8013226 <atexit>
 800cb8e:	4803      	ldr	r0, [pc, #12]	; (800cb9c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cb90:	f006 f8f6 	bl	8012d80 <__cxa_guard_release>
		return instance;
 800cb94:	4b02      	ldr	r3, [pc, #8]	; (800cba0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800cb96:	4618      	mov	r0, r3
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20001580 	.word	0x20001580
 800cba0:	2000147c 	.word	0x2000147c
 800cba4:	0800cb3d 	.word	0x0800cb3d

0800cba8 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	60fb      	str	r3, [r7, #12]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800cbbc:	68fa      	ldr	r2, [r7, #12]
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d20b      	bcs.n	800cbda <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	011b      	lsls	r3, r3, #4
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	4413      	add	r3, r2
 800cbca:	6839      	ldr	r1, [r7, #0]
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f7ff ff69 	bl	800caa4 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	60fb      	str	r3, [r7, #12]
 800cbd8:	e7ed      	b.n	800cbb6 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800cbda:	bf00      	nop
 800cbdc:	3710      	adds	r7, #16
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 800cbea:	f7ff ffaf 	bl	800cb4c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	6879      	ldr	r1, [r7, #4]
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7ff ffd8 	bl	800cba8 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800cbf8:	bf00      	nop
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
 800cc08:	460b      	mov	r3, r1
 800cc0a:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800cc16:	68fa      	ldr	r2, [r7, #12]
 800cc18:	429a      	cmp	r2, r3
 800cc1a:	d20c      	bcs.n	800cc36 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	011b      	lsls	r3, r3, #4
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	4413      	add	r3, r2
 800cc24:	887a      	ldrh	r2, [r7, #2]
 800cc26:	4611      	mov	r1, r2
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f000 f819 	bl	800cc60 <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	3301      	adds	r3, #1
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	e7ec      	b.n	800cc10 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 800cc36:	bf00      	nop
 800cc38:	3710      	adds	r7, #16
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}

0800cc3e <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b082      	sub	sp, #8
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	4603      	mov	r3, r0
 800cc46:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 800cc48:	f7f8 ffc6 	bl	8005bd8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	88fb      	ldrh	r3, [r7, #6]
 800cc50:	4619      	mov	r1, r3
 800cc52:	4610      	mov	r0, r2
 800cc54:	f7ff ffd4 	bl	800cc00 <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 800cc58:	bf00      	nop
 800cc5a:	3708      	adds	r7, #8
 800cc5c:	46bd      	mov	sp, r7
 800cc5e:	bd80      	pop	{r7, pc}

0800cc60 <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 800cc60:	b5b0      	push	{r4, r5, r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	460b      	mov	r3, r1
 800cc6a:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7f4 fbf5 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800cc74:	4603      	mov	r3, r0
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d001      	beq.n	800cc7e <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 800cc7a:	f006 f886 	bl	8012d8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68dc      	ldr	r4, [r3, #12]
 800cc82:	687d      	ldr	r5, [r7, #4]
 800cc84:	1cbb      	adds	r3, r7, #2
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7f9 f860 	bl	8005d4c <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	4619      	mov	r1, r3
 800cc90:	4628      	mov	r0, r5
 800cc92:	47a0      	blx	r4
 800cc94:	bf00      	nop
    }
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bdb0      	pop	{r4, r5, r7, pc}

0800cc9c <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>:
	void notify(TIM_HandleTypeDef *htim) {
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b084      	sub	sp, #16
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800cca6:	2300      	movs	r3, #0
 800cca8:	60fb      	str	r3, [r7, #12]
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	429a      	cmp	r2, r3
 800ccb4:	d20b      	bcs.n	800ccce <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0x32>
			m_listeners[i](htim);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	011b      	lsls	r3, r3, #4
 800ccba:	687a      	ldr	r2, [r7, #4]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	6839      	ldr	r1, [r7, #0]
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f000 f817 	bl	800ccf4 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	3301      	adds	r3, #1
 800ccca:	60fb      	str	r3, [r7, #12]
 800cccc:	e7ed      	b.n	800ccaa <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0xe>
	}
 800ccce:	bf00      	nop
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <PeriodElapsedCallback>:

#ifdef __cplusplus
extern "C" {
#endif

void PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b082      	sub	sp, #8
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
	TimPeriodElapsedCallbackHandler::getInstance().notify(htim);
 800ccde:	f7f8 ffed 	bl	8005cbc <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 800cce2:	4603      	mov	r3, r0
 800cce4:	6879      	ldr	r1, [r7, #4]
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff ffd8 	bl	800cc9c <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>
}
 800ccec:	bf00      	nop
 800ccee:	3708      	adds	r7, #8
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 800ccf4:	b5b0      	push	{r4, r5, r7, lr}
 800ccf6:	b082      	sub	sp, #8
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7f4 fbac 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800cd06:	4603      	mov	r3, r0
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d001      	beq.n	800cd10 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 800cd0c:	f006 f83d 	bl	8012d8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	68dc      	ldr	r4, [r3, #12]
 800cd14:	687d      	ldr	r5, [r7, #4]
 800cd16:	463b      	mov	r3, r7
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7f9 f822 	bl	8005d62 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	4619      	mov	r1, r3
 800cd22:	4628      	mov	r0, r5
 800cd24:	47a0      	blx	r4
 800cd26:	bf00      	nop
    }
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bdb0      	pop	{r4, r5, r7, pc}

0800cd2e <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b085      	sub	sp, #20
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
 800cd38:	603b      	str	r3, [r7, #0]
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800cd3e:	bf00      	nop
 800cd40:	3714      	adds	r7, #20
 800cd42:	46bd      	mov	sp, r7
 800cd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd48:	4770      	bx	lr

0800cd4a <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b084      	sub	sp, #16
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	607a      	str	r2, [r7, #4]
 800cd54:	603b      	str	r3, [r7, #0]
 800cd56:	4603      	mov	r3, r0
 800cd58:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d003      	beq.n	800cd68 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 800cd60:	7bfb      	ldrb	r3, [r7, #15]
 800cd62:	4618      	mov	r0, r3
 800cd64:	f001 fc6f 	bl	800e646 <_putchar>
  }
}
 800cd68:	bf00      	nop
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d006      	beq.n	800cd94 <_ZL10_strnlen_sPKcj+0x24>
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	1e5a      	subs	r2, r3, #1
 800cd8a:	603a      	str	r2, [r7, #0]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d001      	beq.n	800cd94 <_ZL10_strnlen_sPKcj+0x24>
 800cd90:	2301      	movs	r3, #1
 800cd92:	e000      	b.n	800cd96 <_ZL10_strnlen_sPKcj+0x26>
 800cd94:	2300      	movs	r3, #0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d003      	beq.n	800cda2 <_ZL10_strnlen_sPKcj+0x32>
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	60fb      	str	r3, [r7, #12]
 800cda0:	e7ed      	b.n	800cd7e <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	1ad3      	subs	r3, r2, r3
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800cdbe:	79fb      	ldrb	r3, [r7, #7]
 800cdc0:	2b2f      	cmp	r3, #47	; 0x2f
 800cdc2:	d904      	bls.n	800cdce <_ZL9_is_digitc+0x1a>
 800cdc4:	79fb      	ldrb	r3, [r7, #7]
 800cdc6:	2b39      	cmp	r3, #57	; 0x39
 800cdc8:	d801      	bhi.n	800cdce <_ZL9_is_digitc+0x1a>
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e000      	b.n	800cdd0 <_ZL9_is_digitc+0x1c>
 800cdce:	2300      	movs	r3, #0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b084      	sub	sp, #16
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800cde4:	2300      	movs	r3, #0
 800cde6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7ff ffe0 	bl	800cdb4 <_ZL9_is_digitc>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d00f      	beq.n	800ce1a <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800cdfa:	68fa      	ldr	r2, [r7, #12]
 800cdfc:	4613      	mov	r3, r2
 800cdfe:	009b      	lsls	r3, r3, #2
 800ce00:	4413      	add	r3, r2
 800ce02:	005b      	lsls	r3, r3, #1
 800ce04:	4618      	mov	r0, r3
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	1c59      	adds	r1, r3, #1
 800ce0c:	687a      	ldr	r2, [r7, #4]
 800ce0e:	6011      	str	r1, [r2, #0]
 800ce10:	781b      	ldrb	r3, [r3, #0]
 800ce12:	4403      	add	r3, r0
 800ce14:	3b30      	subs	r3, #48	; 0x30
 800ce16:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800ce18:	e7e6      	b.n	800cde8 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800ce24:	b590      	push	{r4, r7, lr}
 800ce26:	b087      	sub	sp, #28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	607a      	str	r2, [r7, #4]
 800ce30:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800ce36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce38:	f003 0302 	and.w	r3, r3, #2
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d116      	bne.n	800ce6e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 800ce40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce42:	f003 0301 	and.w	r3, r3, #1
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d111      	bne.n	800ce6e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 800ce4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce4c:	617b      	str	r3, [r7, #20]
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d20b      	bcs.n	800ce6e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	1c53      	adds	r3, r2, #1
 800ce5a:	607b      	str	r3, [r7, #4]
 800ce5c:	68fc      	ldr	r4, [r7, #12]
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	68b9      	ldr	r1, [r7, #8]
 800ce62:	2020      	movs	r0, #32
 800ce64:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	3301      	adds	r3, #1
 800ce6a:	617b      	str	r3, [r7, #20]
 800ce6c:	e7ef      	b.n	800ce4e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 800ce6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d00e      	beq.n	800ce92 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 800ce74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce76:	3b01      	subs	r3, #1
 800ce78:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7e:	4413      	add	r3, r2
 800ce80:	7818      	ldrb	r0, [r3, #0]
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	1c53      	adds	r3, r2, #1
 800ce86:	607b      	str	r3, [r7, #4]
 800ce88:	68fc      	ldr	r4, [r7, #12]
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	68b9      	ldr	r1, [r7, #8]
 800ce8e:	47a0      	blx	r4
  while (len) {
 800ce90:	e7ed      	b.n	800ce6e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800ce92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce94:	f003 0302 	and.w	r3, r3, #2
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00e      	beq.n	800ceba <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	1ad3      	subs	r3, r2, r3
 800cea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d908      	bls.n	800ceba <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	1c53      	adds	r3, r2, #1
 800ceac:	607b      	str	r3, [r7, #4]
 800ceae:	68fc      	ldr	r4, [r7, #12]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	68b9      	ldr	r1, [r7, #8]
 800ceb4:	2020      	movs	r0, #32
 800ceb6:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800ceb8:	e7f0      	b.n	800ce9c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 800ceba:	687b      	ldr	r3, [r7, #4]
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	371c      	adds	r7, #28
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd90      	pop	{r4, r7, pc}

0800cec4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b088      	sub	sp, #32
 800cec8:	af04      	add	r7, sp, #16
 800ceca:	60f8      	str	r0, [r7, #12]
 800cecc:	60b9      	str	r1, [r7, #8]
 800cece:	607a      	str	r2, [r7, #4]
 800ced0:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800ced2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced4:	f003 0302 	and.w	r3, r3, #2
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d136      	bne.n	800cf4a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800cedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d010      	beq.n	800cf04 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800cee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cee4:	f003 0301 	and.w	r3, r3, #1
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00b      	beq.n	800cf04 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800ceec:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d104      	bne.n	800cefe <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 800cef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef6:	f003 030c 	and.w	r3, r3, #12
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d002      	beq.n	800cf04 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 800cefe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf00:	3b01      	subs	r3, #1
 800cf02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cf04:	69fa      	ldr	r2, [r7, #28]
 800cf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d20a      	bcs.n	800cf22 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	2b1f      	cmp	r3, #31
 800cf10:	d807      	bhi.n	800cf22 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	1c5a      	adds	r2, r3, #1
 800cf16:	61fa      	str	r2, [r7, #28]
 800cf18:	69ba      	ldr	r2, [r7, #24]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	2230      	movs	r2, #48	; 0x30
 800cf1e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cf20:	e7f0      	b.n	800cf04 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf24:	f003 0301 	and.w	r3, r3, #1
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d00e      	beq.n	800cf4a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800cf2c:	69fa      	ldr	r2, [r7, #28]
 800cf2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d20a      	bcs.n	800cf4a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800cf34:	69fb      	ldr	r3, [r7, #28]
 800cf36:	2b1f      	cmp	r3, #31
 800cf38:	d807      	bhi.n	800cf4a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 800cf3a:	69fb      	ldr	r3, [r7, #28]
 800cf3c:	1c5a      	adds	r2, r3, #1
 800cf3e:	61fa      	str	r2, [r7, #28]
 800cf40:	69ba      	ldr	r2, [r7, #24]
 800cf42:	4413      	add	r3, r2
 800cf44:	2230      	movs	r2, #48	; 0x30
 800cf46:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cf48:	e7eb      	b.n	800cf22 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800cf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf4c:	f003 0310 	and.w	r3, r3, #16
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d058      	beq.n	800d006 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800cf54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d116      	bne.n	800cf8c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d013      	beq.n	800cf8c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800cf64:	69fa      	ldr	r2, [r7, #28]
 800cf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d003      	beq.n	800cf74 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 800cf6c:	69fa      	ldr	r2, [r7, #28]
 800cf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf70:	429a      	cmp	r2, r3
 800cf72:	d10b      	bne.n	800cf8c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 800cf74:	69fb      	ldr	r3, [r7, #28]
 800cf76:	3b01      	subs	r3, #1
 800cf78:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d005      	beq.n	800cf8c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800cf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf82:	2b10      	cmp	r3, #16
 800cf84:	d102      	bne.n	800cf8c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 800cf86:	69fb      	ldr	r3, [r7, #28]
 800cf88:	3b01      	subs	r3, #1
 800cf8a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cf8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf8e:	2b10      	cmp	r3, #16
 800cf90:	d10f      	bne.n	800cfb2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800cf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf94:	f003 0320 	and.w	r3, r3, #32
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d10a      	bne.n	800cfb2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800cf9c:	69fb      	ldr	r3, [r7, #28]
 800cf9e:	2b1f      	cmp	r3, #31
 800cfa0:	d807      	bhi.n	800cfb2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 800cfa2:	69fb      	ldr	r3, [r7, #28]
 800cfa4:	1c5a      	adds	r2, r3, #1
 800cfa6:	61fa      	str	r2, [r7, #28]
 800cfa8:	69ba      	ldr	r2, [r7, #24]
 800cfaa:	4413      	add	r3, r2
 800cfac:	2278      	movs	r2, #120	; 0x78
 800cfae:	701a      	strb	r2, [r3, #0]
 800cfb0:	e01f      	b.n	800cff2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb4:	2b10      	cmp	r3, #16
 800cfb6:	d10f      	bne.n	800cfd8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800cfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfba:	f003 0320 	and.w	r3, r3, #32
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00a      	beq.n	800cfd8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800cfc2:	69fb      	ldr	r3, [r7, #28]
 800cfc4:	2b1f      	cmp	r3, #31
 800cfc6:	d807      	bhi.n	800cfd8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 800cfc8:	69fb      	ldr	r3, [r7, #28]
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	61fa      	str	r2, [r7, #28]
 800cfce:	69ba      	ldr	r2, [r7, #24]
 800cfd0:	4413      	add	r3, r2
 800cfd2:	2258      	movs	r2, #88	; 0x58
 800cfd4:	701a      	strb	r2, [r3, #0]
 800cfd6:	e00c      	b.n	800cff2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfda:	2b02      	cmp	r3, #2
 800cfdc:	d109      	bne.n	800cff2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	2b1f      	cmp	r3, #31
 800cfe2:	d806      	bhi.n	800cff2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	1c5a      	adds	r2, r3, #1
 800cfe8:	61fa      	str	r2, [r7, #28]
 800cfea:	69ba      	ldr	r2, [r7, #24]
 800cfec:	4413      	add	r3, r2
 800cfee:	2262      	movs	r2, #98	; 0x62
 800cff0:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	2b1f      	cmp	r3, #31
 800cff6:	d806      	bhi.n	800d006 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 800cff8:	69fb      	ldr	r3, [r7, #28]
 800cffa:	1c5a      	adds	r2, r3, #1
 800cffc:	61fa      	str	r2, [r7, #28]
 800cffe:	69ba      	ldr	r2, [r7, #24]
 800d000:	4413      	add	r3, r2
 800d002:	2230      	movs	r2, #48	; 0x30
 800d004:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800d006:	69fb      	ldr	r3, [r7, #28]
 800d008:	2b1f      	cmp	r3, #31
 800d00a:	d824      	bhi.n	800d056 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 800d00c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d007      	beq.n	800d024 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	1c5a      	adds	r2, r3, #1
 800d018:	61fa      	str	r2, [r7, #28]
 800d01a:	69ba      	ldr	r2, [r7, #24]
 800d01c:	4413      	add	r3, r2
 800d01e:	222d      	movs	r2, #45	; 0x2d
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	e018      	b.n	800d056 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800d024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d026:	f003 0304 	and.w	r3, r3, #4
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d007      	beq.n	800d03e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800d02e:	69fb      	ldr	r3, [r7, #28]
 800d030:	1c5a      	adds	r2, r3, #1
 800d032:	61fa      	str	r2, [r7, #28]
 800d034:	69ba      	ldr	r2, [r7, #24]
 800d036:	4413      	add	r3, r2
 800d038:	222b      	movs	r2, #43	; 0x2b
 800d03a:	701a      	strb	r2, [r3, #0]
 800d03c:	e00b      	b.n	800d056 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800d03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d040:	f003 0308 	and.w	r3, r3, #8
 800d044:	2b00      	cmp	r3, #0
 800d046:	d006      	beq.n	800d056 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 800d048:	69fb      	ldr	r3, [r7, #28]
 800d04a:	1c5a      	adds	r2, r3, #1
 800d04c:	61fa      	str	r2, [r7, #28]
 800d04e:	69ba      	ldr	r2, [r7, #24]
 800d050:	4413      	add	r3, r2
 800d052:	2220      	movs	r2, #32
 800d054:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	9303      	str	r3, [sp, #12]
 800d05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d05c:	9302      	str	r3, [sp, #8]
 800d05e:	69fb      	ldr	r3, [r7, #28]
 800d060:	9301      	str	r3, [sp, #4]
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	68b9      	ldr	r1, [r7, #8]
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f7ff fed9 	bl	800ce24 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d072:	4603      	mov	r3, r0
}
 800d074:	4618      	mov	r0, r3
 800d076:	3710      	adds	r7, #16
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b096      	sub	sp, #88	; 0x58
 800d080:	af08      	add	r7, sp, #32
 800d082:	60f8      	str	r0, [r7, #12]
 800d084:	60b9      	str	r1, [r7, #8]
 800d086:	607a      	str	r2, [r7, #4]
 800d088:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800d08a:	2300      	movs	r3, #0
 800d08c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800d08e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d090:	2b00      	cmp	r3, #0
 800d092:	d103      	bne.n	800d09c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 800d094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d096:	f023 0310 	bic.w	r3, r3, #16
 800d09a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800d09c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d09e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d002      	beq.n	800d0ac <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 800d0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d033      	beq.n	800d114 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 800d0ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0b0:	fbb3 f2f2 	udiv	r2, r3, r2
 800d0b4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d0b6:	fb01 f202 	mul.w	r2, r1, r2
 800d0ba:	1a9b      	subs	r3, r3, r2
 800d0bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800d0c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0c4:	2b09      	cmp	r3, #9
 800d0c6:	d804      	bhi.n	800d0d2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 800d0c8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0cc:	3330      	adds	r3, #48	; 0x30
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	e00d      	b.n	800d0ee <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 800d0d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0d4:	f003 0320 	and.w	r3, r3, #32
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 800d0dc:	2241      	movs	r2, #65	; 0x41
 800d0de:	e000      	b.n	800d0e2 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 800d0e0:	2261      	movs	r2, #97	; 0x61
 800d0e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d0e6:	4413      	add	r3, r2
 800d0e8:	b2db      	uxtb	r3, r3
 800d0ea:	3b0a      	subs	r3, #10
 800d0ec:	b2da      	uxtb	r2, r3
 800d0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f0:	1c59      	adds	r1, r3, #1
 800d0f2:	6379      	str	r1, [r7, #52]	; 0x34
 800d0f4:	3338      	adds	r3, #56	; 0x38
 800d0f6:	443b      	add	r3, r7
 800d0f8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800d0fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d100:	fbb2 f3f3 	udiv	r3, r2, r3
 800d104:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800d106:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d003      	beq.n	800d114 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 800d10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d10e:	2b1f      	cmp	r3, #31
 800d110:	d800      	bhi.n	800d114 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 800d112:	e7cb      	b.n	800d0ac <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800d114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d116:	9306      	str	r3, [sp, #24]
 800d118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d11a:	9305      	str	r3, [sp, #20]
 800d11c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d11e:	9304      	str	r3, [sp, #16]
 800d120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d122:	9303      	str	r3, [sp, #12]
 800d124:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800d128:	9302      	str	r3, [sp, #8]
 800d12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12c:	9301      	str	r3, [sp, #4]
 800d12e:	f107 0310 	add.w	r3, r7, #16
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	68b9      	ldr	r1, [r7, #8]
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	f7ff fec2 	bl	800cec4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800d140:	4603      	mov	r3, r0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3738      	adds	r7, #56	; 0x38
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b096      	sub	sp, #88	; 0x58
 800d14e:	af08      	add	r7, sp, #32
 800d150:	60f8      	str	r0, [r7, #12]
 800d152:	60b9      	str	r1, [r7, #8]
 800d154:	607a      	str	r2, [r7, #4]
 800d156:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800d158:	2300      	movs	r3, #0
 800d15a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800d15c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d160:	4313      	orrs	r3, r2
 800d162:	d103      	bne.n	800d16c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 800d164:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d166:	f023 0310 	bic.w	r3, r3, #16
 800d16a:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800d16c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d16e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d172:	2b00      	cmp	r3, #0
 800d174:	d003      	beq.n	800d17e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 800d176:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d17a:	4313      	orrs	r3, r2
 800d17c:	d038      	beq.n	800d1f0 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 800d17e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d182:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d186:	f7f3 fd7f 	bl	8000c88 <__aeabi_uldivmod>
 800d18a:	4613      	mov	r3, r2
 800d18c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800d190:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d194:	2b09      	cmp	r3, #9
 800d196:	d804      	bhi.n	800d1a2 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 800d198:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d19c:	3330      	adds	r3, #48	; 0x30
 800d19e:	b2da      	uxtb	r2, r3
 800d1a0:	e00d      	b.n	800d1be <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 800d1a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d1a4:	f003 0320 	and.w	r3, r3, #32
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d001      	beq.n	800d1b0 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 800d1ac:	2241      	movs	r2, #65	; 0x41
 800d1ae:	e000      	b.n	800d1b2 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 800d1b0:	2261      	movs	r2, #97	; 0x61
 800d1b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d1b6:	4413      	add	r3, r2
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	3b0a      	subs	r3, #10
 800d1bc:	b2da      	uxtb	r2, r3
 800d1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c0:	1c59      	adds	r1, r3, #1
 800d1c2:	6379      	str	r1, [r7, #52]	; 0x34
 800d1c4:	3338      	adds	r3, #56	; 0x38
 800d1c6:	443b      	add	r3, r7
 800d1c8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800d1cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d1d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d1d4:	f7f3 fd58 	bl	8000c88 <__aeabi_uldivmod>
 800d1d8:	4602      	mov	r2, r0
 800d1da:	460b      	mov	r3, r1
 800d1dc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800d1e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	d003      	beq.n	800d1f0 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 800d1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ea:	2b1f      	cmp	r3, #31
 800d1ec:	d800      	bhi.n	800d1f0 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 800d1ee:	e7c6      	b.n	800d17e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800d1f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1f2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d1f4:	9206      	str	r2, [sp, #24]
 800d1f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1f8:	9205      	str	r2, [sp, #20]
 800d1fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1fc:	9204      	str	r2, [sp, #16]
 800d1fe:	9303      	str	r3, [sp, #12]
 800d200:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d204:	9302      	str	r3, [sp, #8]
 800d206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	f107 0310 	add.w	r3, r7, #16
 800d20e:	9300      	str	r3, [sp, #0]
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	687a      	ldr	r2, [r7, #4]
 800d214:	68b9      	ldr	r1, [r7, #8]
 800d216:	68f8      	ldr	r0, [r7, #12]
 800d218:	f7ff fe54 	bl	800cec4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800d21c:	4603      	mov	r3, r0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3738      	adds	r7, #56	; 0x38
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d228:	b590      	push	{r4, r7, lr}
 800d22a:	b09d      	sub	sp, #116	; 0x74
 800d22c:	af04      	add	r7, sp, #16
 800d22e:	6178      	str	r0, [r7, #20]
 800d230:	6139      	str	r1, [r7, #16]
 800d232:	60fa      	str	r2, [r7, #12]
 800d234:	60bb      	str	r3, [r7, #8]
 800d236:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800d23a:	2300      	movs	r3, #0
 800d23c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800d23e:	f04f 0200 	mov.w	r2, #0
 800d242:	f04f 0300 	mov.w	r3, #0
 800d246:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800d24a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d24e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d252:	f7f3 fc39 	bl	8000ac8 <__aeabi_dcmpeq>
 800d256:	4603      	mov	r3, r0
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d10f      	bne.n	800d27c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800d25c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d25e:	9303      	str	r3, [sp, #12]
 800d260:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d262:	9302      	str	r3, [sp, #8]
 800d264:	2303      	movs	r3, #3
 800d266:	9301      	str	r3, [sp, #4]
 800d268:	4ba7      	ldr	r3, [pc, #668]	; (800d508 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 800d26a:	9300      	str	r3, [sp, #0]
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	6939      	ldr	r1, [r7, #16]
 800d272:	6978      	ldr	r0, [r7, #20]
 800d274:	f7ff fdd6 	bl	800ce24 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d278:	4603      	mov	r3, r0
 800d27a:	e230      	b.n	800d6de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 800d27c:	f04f 32ff 	mov.w	r2, #4294967295
 800d280:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800d284:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d288:	f7f3 fc28 	bl	8000adc <__aeabi_dcmplt>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00f      	beq.n	800d2b2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800d292:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d294:	9303      	str	r3, [sp, #12]
 800d296:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d298:	9302      	str	r3, [sp, #8]
 800d29a:	2304      	movs	r3, #4
 800d29c:	9301      	str	r3, [sp, #4]
 800d29e:	4b9b      	ldr	r3, [pc, #620]	; (800d50c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 800d2a0:	9300      	str	r3, [sp, #0]
 800d2a2:	68bb      	ldr	r3, [r7, #8]
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	6939      	ldr	r1, [r7, #16]
 800d2a8:	6978      	ldr	r0, [r7, #20]
 800d2aa:	f7ff fdbb 	bl	800ce24 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	e215      	b.n	800d6de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 800d2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d2b6:	4b96      	ldr	r3, [pc, #600]	; (800d510 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 800d2b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d2bc:	f7f3 fc2c 	bl	8000b18 <__aeabi_dcmpgt>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d01d      	beq.n	800d302 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800d2c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2c8:	f003 0304 	and.w	r3, r3, #4
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d001      	beq.n	800d2d4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 800d2d0:	4b90      	ldr	r3, [pc, #576]	; (800d514 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 800d2d2:	e000      	b.n	800d2d6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 800d2d4:	4b90      	ldr	r3, [pc, #576]	; (800d518 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 800d2d6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d2d8:	f002 0204 	and.w	r2, r2, #4
 800d2dc:	2a00      	cmp	r2, #0
 800d2de:	d001      	beq.n	800d2e4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 800d2e0:	2204      	movs	r2, #4
 800d2e2:	e000      	b.n	800d2e6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 800d2e4:	2203      	movs	r2, #3
 800d2e6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d2e8:	9103      	str	r1, [sp, #12]
 800d2ea:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d2ec:	9102      	str	r1, [sp, #8]
 800d2ee:	9201      	str	r2, [sp, #4]
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	68bb      	ldr	r3, [r7, #8]
 800d2f4:	68fa      	ldr	r2, [r7, #12]
 800d2f6:	6939      	ldr	r1, [r7, #16]
 800d2f8:	6978      	ldr	r0, [r7, #20]
 800d2fa:	f7ff fd93 	bl	800ce24 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d2fe:	4603      	mov	r3, r0
 800d300:	e1ed      	b.n	800d6de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800d302:	a37d      	add	r3, pc, #500	; (adr r3, 800d4f8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 800d304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d308:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d30c:	f7f3 fc04 	bl	8000b18 <__aeabi_dcmpgt>
 800d310:	4603      	mov	r3, r0
 800d312:	2b00      	cmp	r3, #0
 800d314:	d109      	bne.n	800d32a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 800d316:	a37a      	add	r3, pc, #488	; (adr r3, 800d500 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 800d318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d31c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d320:	f7f3 fbdc 	bl	8000adc <__aeabi_dcmplt>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d00f      	beq.n	800d34a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800d32a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d32c:	9302      	str	r3, [sp, #8]
 800d32e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d330:	9301      	str	r3, [sp, #4]
 800d332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	ed97 0b00 	vldr	d0, [r7]
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	6939      	ldr	r1, [r7, #16]
 800d340:	6978      	ldr	r0, [r7, #20]
 800d342:	f000 f9d5 	bl	800d6f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800d346:	4603      	mov	r3, r0
 800d348:	e1c9      	b.n	800d6de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800d34a:	2300      	movs	r3, #0
 800d34c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800d350:	f04f 0200 	mov.w	r2, #0
 800d354:	f04f 0300 	mov.w	r3, #0
 800d358:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d35c:	f7f3 fbbe 	bl	8000adc <__aeabi_dcmplt>
 800d360:	4603      	mov	r3, r0
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00e      	beq.n	800d384 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 800d366:	2301      	movs	r3, #1
 800d368:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800d36c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d370:	f04f 0000 	mov.w	r0, #0
 800d374:	f04f 0100 	mov.w	r1, #0
 800d378:	f7f2 ff86 	bl	8000288 <__aeabi_dsub>
 800d37c:	4602      	mov	r2, r0
 800d37e:	460b      	mov	r3, r1
 800d380:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800d384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d101      	bne.n	800d392 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800d38e:	2306      	movs	r3, #6
 800d390:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800d392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d394:	2b1f      	cmp	r3, #31
 800d396:	d80e      	bhi.n	800d3b6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 800d398:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d39a:	2b09      	cmp	r3, #9
 800d39c:	d90b      	bls.n	800d3b6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 800d39e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3a0:	1c5a      	adds	r2, r3, #1
 800d3a2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d3a4:	3360      	adds	r3, #96	; 0x60
 800d3a6:	443b      	add	r3, r7
 800d3a8:	2230      	movs	r2, #48	; 0x30
 800d3aa:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800d3ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3b0:	3b01      	subs	r3, #1
 800d3b2:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800d3b4:	e7ed      	b.n	800d392 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 800d3b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3ba:	f7f3 fbcd 	bl	8000b58 <__aeabi_d2iz>
 800d3be:	4603      	mov	r3, r0
 800d3c0:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800d3c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d3c4:	f7f3 f8ae 	bl	8000524 <__aeabi_i2d>
 800d3c8:	4602      	mov	r2, r0
 800d3ca:	460b      	mov	r3, r1
 800d3cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3d0:	f7f2 ff5a 	bl	8000288 <__aeabi_dsub>
 800d3d4:	4602      	mov	r2, r0
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	4610      	mov	r0, r2
 800d3da:	4619      	mov	r1, r3
 800d3dc:	4a4f      	ldr	r2, [pc, #316]	; (800d51c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800d3de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d3e0:	00db      	lsls	r3, r3, #3
 800d3e2:	4413      	add	r3, r2
 800d3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e8:	f7f3 f906 	bl	80005f8 <__aeabi_dmul>
 800d3ec:	4602      	mov	r2, r0
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800d3f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d3f8:	f7f3 fbd6 	bl	8000ba8 <__aeabi_d2uiz>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800d400:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d402:	f7f3 f87f 	bl	8000504 <__aeabi_ui2d>
 800d406:	4602      	mov	r2, r0
 800d408:	460b      	mov	r3, r1
 800d40a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d40e:	f7f2 ff3b 	bl	8000288 <__aeabi_dsub>
 800d412:	4602      	mov	r2, r0
 800d414:	460b      	mov	r3, r1
 800d416:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800d41a:	f04f 0200 	mov.w	r2, #0
 800d41e:	4b40      	ldr	r3, [pc, #256]	; (800d520 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d420:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d424:	f7f3 fb78 	bl	8000b18 <__aeabi_dcmpgt>
 800d428:	4603      	mov	r3, r0
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d016      	beq.n	800d45c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 800d42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d430:	3301      	adds	r3, #1
 800d432:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800d434:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d436:	f7f3 f865 	bl	8000504 <__aeabi_ui2d>
 800d43a:	4a38      	ldr	r2, [pc, #224]	; (800d51c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800d43c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d43e:	00db      	lsls	r3, r3, #3
 800d440:	4413      	add	r3, r2
 800d442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d446:	f7f3 fb5d 	bl	8000b04 <__aeabi_dcmpge>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d01a      	beq.n	800d486 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800d454:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d456:	3301      	adds	r3, #1
 800d458:	657b      	str	r3, [r7, #84]	; 0x54
 800d45a:	e014      	b.n	800d486 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 800d45c:	f04f 0200 	mov.w	r2, #0
 800d460:	4b2f      	ldr	r3, [pc, #188]	; (800d520 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d462:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d466:	f7f3 fb39 	bl	8000adc <__aeabi_dcmplt>
 800d46a:	4603      	mov	r3, r0
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d10a      	bne.n	800d486 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800d470:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d472:	2b00      	cmp	r3, #0
 800d474:	d004      	beq.n	800d480 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 800d476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d478:	f003 0301 	and.w	r3, r3, #1
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d002      	beq.n	800d486 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800d480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d482:	3301      	adds	r3, #1
 800d484:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800d486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d14b      	bne.n	800d524 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 800d48c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d48e:	f7f3 f849 	bl	8000524 <__aeabi_i2d>
 800d492:	4602      	mov	r2, r0
 800d494:	460b      	mov	r3, r1
 800d496:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d49a:	f7f2 fef5 	bl	8000288 <__aeabi_dsub>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	461c      	mov	r4, r3
 800d4aa:	f04f 0200 	mov.w	r2, #0
 800d4ae:	4b1c      	ldr	r3, [pc, #112]	; (800d520 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d4b0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d4b4:	f7f3 fb12 	bl	8000adc <__aeabi_dcmplt>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d101      	bne.n	800d4c2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	461c      	mov	r4, r3
 800d4c2:	b2e3      	uxtb	r3, r4
 800d4c4:	f083 0301 	eor.w	r3, r3, #1
 800d4c8:	b2db      	uxtb	r3, r3
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d109      	bne.n	800d4e2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 800d4ce:	f04f 0200 	mov.w	r2, #0
 800d4d2:	4b13      	ldr	r3, [pc, #76]	; (800d520 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d4d4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d4d8:	f7f3 fb1e 	bl	8000b18 <__aeabi_dcmpgt>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d06d      	beq.n	800d5be <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800d4e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4e4:	f003 0301 	and.w	r3, r3, #1
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d068      	beq.n	800d5be <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800d4ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	657b      	str	r3, [r7, #84]	; 0x54
 800d4f2:	e064      	b.n	800d5be <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800d4f4:	f3af 8000 	nop.w
 800d4f8:	00000000 	.word	0x00000000
 800d4fc:	41cdcd65 	.word	0x41cdcd65
 800d500:	00000000 	.word	0x00000000
 800d504:	c1cdcd65 	.word	0xc1cdcd65
 800d508:	080160c0 	.word	0x080160c0
 800d50c:	080160c4 	.word	0x080160c4
 800d510:	7fefffff 	.word	0x7fefffff
 800d514:	080160cc 	.word	0x080160cc
 800d518:	080160d4 	.word	0x080160d4
 800d51c:	080162c8 	.word	0x080162c8
 800d520:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800d524:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d526:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d52a:	2b1f      	cmp	r3, #31
 800d52c:	d826      	bhi.n	800d57c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 800d52e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d530:	3b01      	subs	r3, #1
 800d532:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800d534:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d536:	4b6c      	ldr	r3, [pc, #432]	; (800d6e8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800d538:	fba3 2301 	umull	r2, r3, r3, r1
 800d53c:	08da      	lsrs	r2, r3, #3
 800d53e:	4613      	mov	r3, r2
 800d540:	009b      	lsls	r3, r3, #2
 800d542:	4413      	add	r3, r2
 800d544:	005b      	lsls	r3, r3, #1
 800d546:	1aca      	subs	r2, r1, r3
 800d548:	b2d2      	uxtb	r2, r2
 800d54a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d54c:	1c59      	adds	r1, r3, #1
 800d54e:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d550:	3230      	adds	r2, #48	; 0x30
 800d552:	b2d2      	uxtb	r2, r2
 800d554:	3360      	adds	r3, #96	; 0x60
 800d556:	443b      	add	r3, r7
 800d558:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800d55c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d55e:	4a62      	ldr	r2, [pc, #392]	; (800d6e8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800d560:	fba2 2303 	umull	r2, r3, r2, r3
 800d564:	08db      	lsrs	r3, r3, #3
 800d566:	653b      	str	r3, [r7, #80]	; 0x50
 800d568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	bf0c      	ite	eq
 800d56e:	2301      	moveq	r3, #1
 800d570:	2300      	movne	r3, #0
 800d572:	b2db      	uxtb	r3, r3
 800d574:	2b00      	cmp	r3, #0
 800d576:	d100      	bne.n	800d57a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d578:	e7d6      	b.n	800d528 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 800d57a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800d57c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d57e:	2b1f      	cmp	r3, #31
 800d580:	d806      	bhi.n	800d590 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800d582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d584:	1e5a      	subs	r2, r3, #1
 800d586:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e000      	b.n	800d592 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 800d590:	2300      	movs	r3, #0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d008      	beq.n	800d5a8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 800d596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d598:	1c5a      	adds	r2, r3, #1
 800d59a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d59c:	3360      	adds	r3, #96	; 0x60
 800d59e:	443b      	add	r3, r7
 800d5a0:	2230      	movs	r2, #48	; 0x30
 800d5a2:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800d5a6:	e7e9      	b.n	800d57c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d5a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5aa:	2b1f      	cmp	r3, #31
 800d5ac:	d807      	bhi.n	800d5be <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 800d5ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5b0:	1c5a      	adds	r2, r3, #1
 800d5b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d5b4:	3360      	adds	r3, #96	; 0x60
 800d5b6:	443b      	add	r3, r7
 800d5b8:	222e      	movs	r2, #46	; 0x2e
 800d5ba:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d5be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5c0:	2b1f      	cmp	r3, #31
 800d5c2:	d827      	bhi.n	800d614 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 800d5c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d5c6:	4b49      	ldr	r3, [pc, #292]	; (800d6ec <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800d5c8:	fb83 1302 	smull	r1, r3, r3, r2
 800d5cc:	1099      	asrs	r1, r3, #2
 800d5ce:	17d3      	asrs	r3, r2, #31
 800d5d0:	1ac9      	subs	r1, r1, r3
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	440b      	add	r3, r1
 800d5d8:	005b      	lsls	r3, r3, #1
 800d5da:	1ad1      	subs	r1, r2, r3
 800d5dc:	b2ca      	uxtb	r2, r1
 800d5de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5e0:	1c59      	adds	r1, r3, #1
 800d5e2:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d5e4:	3230      	adds	r2, #48	; 0x30
 800d5e6:	b2d2      	uxtb	r2, r2
 800d5e8:	3360      	adds	r3, #96	; 0x60
 800d5ea:	443b      	add	r3, r7
 800d5ec:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800d5f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5f2:	4a3e      	ldr	r2, [pc, #248]	; (800d6ec <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800d5f4:	fb82 1203 	smull	r1, r2, r2, r3
 800d5f8:	1092      	asrs	r2, r2, #2
 800d5fa:	17db      	asrs	r3, r3, #31
 800d5fc:	1ad3      	subs	r3, r2, r3
 800d5fe:	657b      	str	r3, [r7, #84]	; 0x54
 800d600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d602:	2b00      	cmp	r3, #0
 800d604:	bf0c      	ite	eq
 800d606:	2301      	moveq	r3, #1
 800d608:	2300      	movne	r3, #0
 800d60a:	b2db      	uxtb	r3, r3
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d100      	bne.n	800d612 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d610:	e7d5      	b.n	800d5be <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 800d612:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800d614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d616:	f003 0302 	and.w	r3, r3, #2
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d123      	bne.n	800d666 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800d61e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d620:	f003 0301 	and.w	r3, r3, #1
 800d624:	2b00      	cmp	r3, #0
 800d626:	d01e      	beq.n	800d666 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800d628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00b      	beq.n	800d646 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 800d62e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d632:	2b00      	cmp	r3, #0
 800d634:	d104      	bne.n	800d640 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 800d636:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d638:	f003 030c 	and.w	r3, r3, #12
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d002      	beq.n	800d646 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 800d640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d642:	3b01      	subs	r3, #1
 800d644:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800d646:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d64a:	429a      	cmp	r2, r3
 800d64c:	d20b      	bcs.n	800d666 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800d64e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d650:	2b1f      	cmp	r3, #31
 800d652:	d808      	bhi.n	800d666 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 800d654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d656:	1c5a      	adds	r2, r3, #1
 800d658:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d65a:	3360      	adds	r3, #96	; 0x60
 800d65c:	443b      	add	r3, r7
 800d65e:	2230      	movs	r2, #48	; 0x30
 800d660:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800d664:	e7ef      	b.n	800d646 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d668:	2b1f      	cmp	r3, #31
 800d66a:	d827      	bhi.n	800d6bc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 800d66c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d670:	2b00      	cmp	r3, #0
 800d672:	d008      	beq.n	800d686 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 800d674:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d676:	1c5a      	adds	r2, r3, #1
 800d678:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d67a:	3360      	adds	r3, #96	; 0x60
 800d67c:	443b      	add	r3, r7
 800d67e:	222d      	movs	r2, #45	; 0x2d
 800d680:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d684:	e01a      	b.n	800d6bc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 800d686:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d688:	f003 0304 	and.w	r3, r3, #4
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d008      	beq.n	800d6a2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800d690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d692:	1c5a      	adds	r2, r3, #1
 800d694:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d696:	3360      	adds	r3, #96	; 0x60
 800d698:	443b      	add	r3, r7
 800d69a:	222b      	movs	r2, #43	; 0x2b
 800d69c:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d6a0:	e00c      	b.n	800d6bc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 800d6a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6a4:	f003 0308 	and.w	r3, r3, #8
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d007      	beq.n	800d6bc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 800d6ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6ae:	1c5a      	adds	r2, r3, #1
 800d6b0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d6b2:	3360      	adds	r3, #96	; 0x60
 800d6b4:	443b      	add	r3, r7
 800d6b6:	2220      	movs	r2, #32
 800d6b8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800d6bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6be:	9303      	str	r3, [sp, #12]
 800d6c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d6c2:	9302      	str	r3, [sp, #8]
 800d6c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6c6:	9301      	str	r3, [sp, #4]
 800d6c8:	f107 0318 	add.w	r3, r7, #24
 800d6cc:	9300      	str	r3, [sp, #0]
 800d6ce:	68bb      	ldr	r3, [r7, #8]
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	6939      	ldr	r1, [r7, #16]
 800d6d4:	6978      	ldr	r0, [r7, #20]
 800d6d6:	f7ff fba5 	bl	800ce24 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d6da:	4603      	mov	r3, r0
 800d6dc:	bf00      	nop
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3764      	adds	r7, #100	; 0x64
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd90      	pop	{r4, r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	cccccccd 	.word	0xcccccccd
 800d6ec:	66666667 	.word	0x66666667

0800d6f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6f4:	b09f      	sub	sp, #124	; 0x7c
 800d6f6:	af06      	add	r7, sp, #24
 800d6f8:	6278      	str	r0, [r7, #36]	; 0x24
 800d6fa:	6239      	str	r1, [r7, #32]
 800d6fc:	61fa      	str	r2, [r7, #28]
 800d6fe:	61bb      	str	r3, [r7, #24]
 800d700:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800d704:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d708:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d70c:	f7f3 f9dc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d710:	4603      	mov	r3, r0
 800d712:	2b00      	cmp	r3, #0
 800d714:	d014      	beq.n	800d740 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800d716:	f04f 32ff 	mov.w	r2, #4294967295
 800d71a:	4bc1      	ldr	r3, [pc, #772]	; (800da20 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 800d71c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d720:	f7f3 f9fa 	bl	8000b18 <__aeabi_dcmpgt>
 800d724:	4603      	mov	r3, r0
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10a      	bne.n	800d740 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800d72a:	f04f 32ff 	mov.w	r2, #4294967295
 800d72e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800d732:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d736:	f7f3 f9d1 	bl	8000adc <__aeabi_dcmplt>
 800d73a:	4603      	mov	r3, r0
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d012      	beq.n	800d766 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800d740:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d744:	9302      	str	r3, [sp, #8]
 800d746:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d74a:	9301      	str	r3, [sp, #4]
 800d74c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	ed97 0b04 	vldr	d0, [r7, #16]
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	69fa      	ldr	r2, [r7, #28]
 800d75a:	6a39      	ldr	r1, [r7, #32]
 800d75c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d75e:	f7ff fd63 	bl	800d228 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800d762:	4603      	mov	r3, r0
 800d764:	e23f      	b.n	800dbe6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800d766:	2301      	movs	r3, #1
 800d768:	461e      	mov	r6, r3
 800d76a:	f04f 0200 	mov.w	r2, #0
 800d76e:	f04f 0300 	mov.w	r3, #0
 800d772:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d776:	f7f3 f9b1 	bl	8000adc <__aeabi_dcmplt>
 800d77a:	4603      	mov	r3, r0
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d101      	bne.n	800d784 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 800d780:	2300      	movs	r3, #0
 800d782:	461e      	mov	r6, r3
 800d784:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800d788:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d009      	beq.n	800d7a4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	603b      	str	r3, [r7, #0]
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d79a:	607b      	str	r3, [r7, #4]
 800d79c:	ed97 7b00 	vldr	d7, [r7]
 800d7a0:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800d7a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d102      	bne.n	800d7b6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800d7b0:	2306      	movs	r3, #6
 800d7b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800d7b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d7ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800d7be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d7c2:	f04f 0200 	mov.w	r2, #0
 800d7c6:	f04f 0300 	mov.w	r3, #0
 800d7ca:	0d0a      	lsrs	r2, r1, #20
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	4613      	mov	r3, r2
 800d7d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d7d4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d7d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800d7da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d7de:	4690      	mov	r8, r2
 800d7e0:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800d7e4:	4644      	mov	r4, r8
 800d7e6:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800d7ea:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d7ee:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800d7f2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d7f4:	f7f2 fe96 	bl	8000524 <__aeabi_i2d>
 800d7f8:	a37d      	add	r3, pc, #500	; (adr r3, 800d9f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 800d7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fe:	f7f2 fefb 	bl	80005f8 <__aeabi_dmul>
 800d802:	4602      	mov	r2, r0
 800d804:	460b      	mov	r3, r1
 800d806:	4610      	mov	r0, r2
 800d808:	4619      	mov	r1, r3
 800d80a:	a37b      	add	r3, pc, #492	; (adr r3, 800d9f8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 800d80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d810:	f7f2 fd3c 	bl	800028c <__adddf3>
 800d814:	4602      	mov	r2, r0
 800d816:	460b      	mov	r3, r1
 800d818:	4614      	mov	r4, r2
 800d81a:	461d      	mov	r5, r3
 800d81c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d820:	f04f 0200 	mov.w	r2, #0
 800d824:	4b7f      	ldr	r3, [pc, #508]	; (800da24 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 800d826:	f7f2 fd2f 	bl	8000288 <__aeabi_dsub>
 800d82a:	4602      	mov	r2, r0
 800d82c:	460b      	mov	r3, r1
 800d82e:	4610      	mov	r0, r2
 800d830:	4619      	mov	r1, r3
 800d832:	a373      	add	r3, pc, #460	; (adr r3, 800da00 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 800d834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d838:	f7f2 fede 	bl	80005f8 <__aeabi_dmul>
 800d83c:	4602      	mov	r2, r0
 800d83e:	460b      	mov	r3, r1
 800d840:	4620      	mov	r0, r4
 800d842:	4629      	mov	r1, r5
 800d844:	f7f2 fd22 	bl	800028c <__adddf3>
 800d848:	4602      	mov	r2, r0
 800d84a:	460b      	mov	r3, r1
 800d84c:	4610      	mov	r0, r2
 800d84e:	4619      	mov	r1, r3
 800d850:	f7f3 f982 	bl	8000b58 <__aeabi_d2iz>
 800d854:	4603      	mov	r3, r0
 800d856:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800d858:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d85a:	f7f2 fe63 	bl	8000524 <__aeabi_i2d>
 800d85e:	a36a      	add	r3, pc, #424	; (adr r3, 800da08 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 800d860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d864:	f7f2 fec8 	bl	80005f8 <__aeabi_dmul>
 800d868:	4602      	mov	r2, r0
 800d86a:	460b      	mov	r3, r1
 800d86c:	4610      	mov	r0, r2
 800d86e:	4619      	mov	r1, r3
 800d870:	f04f 0200 	mov.w	r2, #0
 800d874:	4b6c      	ldr	r3, [pc, #432]	; (800da28 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 800d876:	f7f2 fd09 	bl	800028c <__adddf3>
 800d87a:	4602      	mov	r2, r0
 800d87c:	460b      	mov	r3, r1
 800d87e:	4610      	mov	r0, r2
 800d880:	4619      	mov	r1, r3
 800d882:	f7f3 f969 	bl	8000b58 <__aeabi_d2iz>
 800d886:	4603      	mov	r3, r0
 800d888:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800d88a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d88c:	f7f2 fe4a 	bl	8000524 <__aeabi_i2d>
 800d890:	a35f      	add	r3, pc, #380	; (adr r3, 800da10 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	f7f2 feaf 	bl	80005f8 <__aeabi_dmul>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	4614      	mov	r4, r2
 800d8a0:	461d      	mov	r5, r3
 800d8a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d8a4:	f7f2 fe3e 	bl	8000524 <__aeabi_i2d>
 800d8a8:	a35b      	add	r3, pc, #364	; (adr r3, 800da18 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 800d8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ae:	f7f2 fea3 	bl	80005f8 <__aeabi_dmul>
 800d8b2:	4602      	mov	r2, r0
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	f7f2 fce5 	bl	8000288 <__aeabi_dsub>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800d8c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d8ca:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d8ce:	f7f2 fe93 	bl	80005f8 <__aeabi_dmul>
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800d8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8dc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800d8e0:	17da      	asrs	r2, r3, #31
 800d8e2:	469a      	mov	sl, r3
 800d8e4:	4693      	mov	fp, r2
 800d8e6:	f04f 0200 	mov.w	r2, #0
 800d8ea:	f04f 0300 	mov.w	r3, #0
 800d8ee:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800d8f8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800d8fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d900:	4602      	mov	r2, r0
 800d902:	460b      	mov	r3, r1
 800d904:	f7f2 fcc2 	bl	800028c <__adddf3>
 800d908:	4602      	mov	r2, r0
 800d90a:	460b      	mov	r3, r1
 800d90c:	4690      	mov	r8, r2
 800d90e:	4699      	mov	r9, r3
 800d910:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d914:	f04f 0000 	mov.w	r0, #0
 800d918:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d91c:	f7f2 fcb4 	bl	8000288 <__aeabi_dsub>
 800d920:	4602      	mov	r2, r0
 800d922:	460b      	mov	r3, r1
 800d924:	4692      	mov	sl, r2
 800d926:	469b      	mov	fp, r3
 800d928:	f04f 0200 	mov.w	r2, #0
 800d92c:	4b3f      	ldr	r3, [pc, #252]	; (800da2c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 800d92e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d932:	f7f2 ff8b 	bl	800084c <__aeabi_ddiv>
 800d936:	4602      	mov	r2, r0
 800d938:	460b      	mov	r3, r1
 800d93a:	4610      	mov	r0, r2
 800d93c:	4619      	mov	r1, r3
 800d93e:	f04f 0200 	mov.w	r2, #0
 800d942:	4b3b      	ldr	r3, [pc, #236]	; (800da30 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800d944:	f7f2 fca2 	bl	800028c <__adddf3>
 800d948:	4602      	mov	r2, r0
 800d94a:	460b      	mov	r3, r1
 800d94c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d950:	f7f2 ff7c 	bl	800084c <__aeabi_ddiv>
 800d954:	4602      	mov	r2, r0
 800d956:	460b      	mov	r3, r1
 800d958:	4610      	mov	r0, r2
 800d95a:	4619      	mov	r1, r3
 800d95c:	f04f 0200 	mov.w	r2, #0
 800d960:	4b34      	ldr	r3, [pc, #208]	; (800da34 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 800d962:	f7f2 fc93 	bl	800028c <__adddf3>
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d96e:	f7f2 ff6d 	bl	800084c <__aeabi_ddiv>
 800d972:	4602      	mov	r2, r0
 800d974:	460b      	mov	r3, r1
 800d976:	4650      	mov	r0, sl
 800d978:	4659      	mov	r1, fp
 800d97a:	f7f2 fc87 	bl	800028c <__adddf3>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	4640      	mov	r0, r8
 800d984:	4649      	mov	r1, r9
 800d986:	f7f2 ff61 	bl	800084c <__aeabi_ddiv>
 800d98a:	4602      	mov	r2, r0
 800d98c:	460b      	mov	r3, r1
 800d98e:	4610      	mov	r0, r2
 800d990:	4619      	mov	r1, r3
 800d992:	f04f 0200 	mov.w	r2, #0
 800d996:	4b28      	ldr	r3, [pc, #160]	; (800da38 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 800d998:	f7f2 fc78 	bl	800028c <__adddf3>
 800d99c:	4602      	mov	r2, r0
 800d99e:	460b      	mov	r3, r1
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	4629      	mov	r1, r5
 800d9a4:	f7f2 fe28 	bl	80005f8 <__aeabi_dmul>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800d9b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d9b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d9b8:	f7f3 f890 	bl	8000adc <__aeabi_dcmplt>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d00d      	beq.n	800d9de <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 800d9c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9c4:	3b01      	subs	r3, #1
 800d9c6:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800d9c8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d9cc:	f04f 0200 	mov.w	r2, #0
 800d9d0:	4b17      	ldr	r3, [pc, #92]	; (800da30 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800d9d2:	f7f2 ff3b 	bl	800084c <__aeabi_ddiv>
 800d9d6:	4602      	mov	r2, r0
 800d9d8:	460b      	mov	r3, r1
 800d9da:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800d9de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9e0:	2b63      	cmp	r3, #99	; 0x63
 800d9e2:	dc2b      	bgt.n	800da3c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800d9e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9e6:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800d9ea:	db27      	blt.n	800da3c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800d9ec:	2304      	movs	r3, #4
 800d9ee:	e026      	b.n	800da3e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 800d9f0:	509f79fb 	.word	0x509f79fb
 800d9f4:	3fd34413 	.word	0x3fd34413
 800d9f8:	8b60c8b3 	.word	0x8b60c8b3
 800d9fc:	3fc68a28 	.word	0x3fc68a28
 800da00:	636f4361 	.word	0x636f4361
 800da04:	3fd287a7 	.word	0x3fd287a7
 800da08:	0979a371 	.word	0x0979a371
 800da0c:	400a934f 	.word	0x400a934f
 800da10:	bbb55516 	.word	0xbbb55516
 800da14:	40026bb1 	.word	0x40026bb1
 800da18:	fefa39ef 	.word	0xfefa39ef
 800da1c:	3fe62e42 	.word	0x3fe62e42
 800da20:	7fefffff 	.word	0x7fefffff
 800da24:	3ff80000 	.word	0x3ff80000
 800da28:	3fe00000 	.word	0x3fe00000
 800da2c:	402c0000 	.word	0x402c0000
 800da30:	40240000 	.word	0x40240000
 800da34:	40180000 	.word	0x40180000
 800da38:	3ff00000 	.word	0x3ff00000
 800da3c:	2305      	movs	r3, #5
 800da3e:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800da40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d03d      	beq.n	800dac8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800da4c:	a368      	add	r3, pc, #416	; (adr r3, 800dbf0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 800da4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800da56:	f7f3 f855 	bl	8000b04 <__aeabi_dcmpge>
 800da5a:	4603      	mov	r3, r0
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d024      	beq.n	800daaa <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 800da60:	a365      	add	r3, pc, #404	; (adr r3, 800dbf8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 800da62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da66:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800da6a:	f7f3 f837 	bl	8000adc <__aeabi_dcmplt>
 800da6e:	4603      	mov	r3, r0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d01a      	beq.n	800daaa <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 800da74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800da78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800da7a:	429a      	cmp	r2, r3
 800da7c:	da07      	bge.n	800da8e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800da7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800da82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da84:	1ad3      	subs	r3, r2, r3
 800da86:	3b01      	subs	r3, #1
 800da88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800da8c:	e002      	b.n	800da94 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 800da8e:	2300      	movs	r3, #0
 800da90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800da94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800da9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800daa0:	2300      	movs	r3, #0
 800daa2:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800daa4:	2300      	movs	r3, #0
 800daa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800daa8:	e00e      	b.n	800dac8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800daaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00a      	beq.n	800dac8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 800dab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d004      	beq.n	800dac8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 800dabe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dac2:	3b01      	subs	r3, #1
 800dac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800dac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dacc:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800dace:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dad2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d904      	bls.n	800dae2 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800dad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dada:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dadc:	1ad3      	subs	r3, r2, r3
 800dade:	657b      	str	r3, [r7, #84]	; 0x54
 800dae0:	e001      	b.n	800dae6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800dae2:	2300      	movs	r3, #0
 800dae4:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800dae6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800daea:	f003 0302 	and.w	r3, r3, #2
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d004      	beq.n	800dafc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 800daf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d001      	beq.n	800dafc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800daf8:	2300      	movs	r3, #0
 800dafa:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800dafc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d009      	beq.n	800db16 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 800db02:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800db06:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800db0a:	f7f2 fe9f 	bl	800084c <__aeabi_ddiv>
 800db0e:	4602      	mov	r2, r0
 800db10:	460b      	mov	r3, r1
 800db12:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800db1a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d006      	beq.n	800db30 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	60bb      	str	r3, [r7, #8]
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800db2c:	60fb      	str	r3, [r7, #12]
 800db2e:	e003      	b.n	800db38 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 800db30:	ed97 7b04 	vldr	d7, [r7, #16]
 800db34:	ed87 7b02 	vstr	d7, [r7, #8]
 800db38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800db40:	9302      	str	r3, [sp, #8]
 800db42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db44:	9301      	str	r3, [sp, #4]
 800db46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800db4a:	9300      	str	r3, [sp, #0]
 800db4c:	ed97 0b02 	vldr	d0, [r7, #8]
 800db50:	69bb      	ldr	r3, [r7, #24]
 800db52:	69fa      	ldr	r2, [r7, #28]
 800db54:	6a39      	ldr	r1, [r7, #32]
 800db56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800db58:	f7ff fb66 	bl	800d228 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800db5c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800db5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db60:	2b00      	cmp	r3, #0
 800db62:	d03f      	beq.n	800dbe4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800db64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800db68:	f003 0320 	and.w	r3, r3, #32
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 800db70:	2045      	movs	r0, #69	; 0x45
 800db72:	e000      	b.n	800db76 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 800db74:	2065      	movs	r0, #101	; 0x65
 800db76:	69fa      	ldr	r2, [r7, #28]
 800db78:	1c53      	adds	r3, r2, #1
 800db7a:	61fb      	str	r3, [r7, #28]
 800db7c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800db7e:	69bb      	ldr	r3, [r7, #24]
 800db80:	6a39      	ldr	r1, [r7, #32]
 800db82:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800db84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db86:	2b00      	cmp	r3, #0
 800db88:	bfb8      	it	lt
 800db8a:	425b      	neglt	r3, r3
 800db8c:	4618      	mov	r0, r3
 800db8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db90:	0fdb      	lsrs	r3, r3, #31
 800db92:	b2db      	uxtb	r3, r3
 800db94:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db96:	3a01      	subs	r2, #1
 800db98:	2105      	movs	r1, #5
 800db9a:	9105      	str	r1, [sp, #20]
 800db9c:	9204      	str	r2, [sp, #16]
 800db9e:	2200      	movs	r2, #0
 800dba0:	9203      	str	r2, [sp, #12]
 800dba2:	220a      	movs	r2, #10
 800dba4:	9202      	str	r2, [sp, #8]
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	9000      	str	r0, [sp, #0]
 800dbaa:	69bb      	ldr	r3, [r7, #24]
 800dbac:	69fa      	ldr	r2, [r7, #28]
 800dbae:	6a39      	ldr	r1, [r7, #32]
 800dbb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbb2:	f7ff fa63 	bl	800d07c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800dbb6:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800dbb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbbc:	f003 0302 	and.w	r3, r3, #2
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00f      	beq.n	800dbe4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800dbc4:	69fa      	ldr	r2, [r7, #28]
 800dbc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbc8:	1ad3      	subs	r3, r2, r3
 800dbca:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d908      	bls.n	800dbe4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 800dbd2:	69fa      	ldr	r2, [r7, #28]
 800dbd4:	1c53      	adds	r3, r2, #1
 800dbd6:	61fb      	str	r3, [r7, #28]
 800dbd8:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800dbda:	69bb      	ldr	r3, [r7, #24]
 800dbdc:	6a39      	ldr	r1, [r7, #32]
 800dbde:	2020      	movs	r0, #32
 800dbe0:	47a0      	blx	r4
 800dbe2:	e7ef      	b.n	800dbc4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 800dbe4:	69fb      	ldr	r3, [r7, #28]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3764      	adds	r7, #100	; 0x64
 800dbea:	46bd      	mov	sp, r7
 800dbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbf0:	eb1c432d 	.word	0xeb1c432d
 800dbf4:	3f1a36e2 	.word	0x3f1a36e2
 800dbf8:	00000000 	.word	0x00000000
 800dbfc:	412e8480 	.word	0x412e8480

0800dc00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800dc00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc04:	b0a1      	sub	sp, #132	; 0x84
 800dc06:	af0a      	add	r7, sp, #40	; 0x28
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	60b9      	str	r1, [r7, #8]
 800dc0c:	607a      	str	r2, [r7, #4]
 800dc0e:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800dc10:	2300      	movs	r3, #0
 800dc12:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d101      	bne.n	800dc1e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 800dc1a:	4ba5      	ldr	r3, [pc, #660]	; (800deb0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 800dc1c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800dc1e:	683b      	ldr	r3, [r7, #0]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	f000 84ae 	beq.w	800e584 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	2b25      	cmp	r3, #37	; 0x25
 800dc2e:	d00d      	beq.n	800dc4c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	7818      	ldrb	r0, [r3, #0]
 800dc34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc36:	1c53      	adds	r3, r2, #1
 800dc38:	647b      	str	r3, [r7, #68]	; 0x44
 800dc3a:	68fe      	ldr	r6, [r7, #12]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	47b0      	blx	r6
      format++;
 800dc42:	683b      	ldr	r3, [r7, #0]
 800dc44:	3301      	adds	r3, #1
 800dc46:	603b      	str	r3, [r7, #0]
      continue;
 800dc48:	f000 bc9a 	b.w	800e580 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800dc52:	2300      	movs	r3, #0
 800dc54:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	3b20      	subs	r3, #32
 800dc5c:	2b10      	cmp	r3, #16
 800dc5e:	d857      	bhi.n	800dd10 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 800dc60:	a201      	add	r2, pc, #4	; (adr r2, 800dc68 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 800dc62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc66:	bf00      	nop
 800dc68:	0800dce9 	.word	0x0800dce9
 800dc6c:	0800dd11 	.word	0x0800dd11
 800dc70:	0800dd11 	.word	0x0800dd11
 800dc74:	0800dcfd 	.word	0x0800dcfd
 800dc78:	0800dd11 	.word	0x0800dd11
 800dc7c:	0800dd11 	.word	0x0800dd11
 800dc80:	0800dd11 	.word	0x0800dd11
 800dc84:	0800dd11 	.word	0x0800dd11
 800dc88:	0800dd11 	.word	0x0800dd11
 800dc8c:	0800dd11 	.word	0x0800dd11
 800dc90:	0800dd11 	.word	0x0800dd11
 800dc94:	0800dcd5 	.word	0x0800dcd5
 800dc98:	0800dd11 	.word	0x0800dd11
 800dc9c:	0800dcc1 	.word	0x0800dcc1
 800dca0:	0800dd11 	.word	0x0800dd11
 800dca4:	0800dd11 	.word	0x0800dd11
 800dca8:	0800dcad 	.word	0x0800dcad
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800dcac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcae:	f043 0301 	orr.w	r3, r3, #1
 800dcb2:	657b      	str	r3, [r7, #84]	; 0x54
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	603b      	str	r3, [r7, #0]
 800dcba:	2301      	movs	r3, #1
 800dcbc:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcbe:	e02a      	b.n	800dd16 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800dcc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcc2:	f043 0302 	orr.w	r3, r3, #2
 800dcc6:	657b      	str	r3, [r7, #84]	; 0x54
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	3301      	adds	r3, #1
 800dccc:	603b      	str	r3, [r7, #0]
 800dcce:	2301      	movs	r3, #1
 800dcd0:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcd2:	e020      	b.n	800dd16 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800dcd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcd6:	f043 0304 	orr.w	r3, r3, #4
 800dcda:	657b      	str	r3, [r7, #84]	; 0x54
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	3301      	adds	r3, #1
 800dce0:	603b      	str	r3, [r7, #0]
 800dce2:	2301      	movs	r3, #1
 800dce4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dce6:	e016      	b.n	800dd16 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800dce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcea:	f043 0308 	orr.w	r3, r3, #8
 800dcee:	657b      	str	r3, [r7, #84]	; 0x54
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	3301      	adds	r3, #1
 800dcf4:	603b      	str	r3, [r7, #0]
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	64bb      	str	r3, [r7, #72]	; 0x48
 800dcfa:	e00c      	b.n	800dd16 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800dcfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcfe:	f043 0310 	orr.w	r3, r3, #16
 800dd02:	657b      	str	r3, [r7, #84]	; 0x54
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	3301      	adds	r3, #1
 800dd08:	603b      	str	r3, [r7, #0]
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd0e:	e002      	b.n	800dd16 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 800dd10:	2300      	movs	r3, #0
 800dd12:	64bb      	str	r3, [r7, #72]	; 0x48
 800dd14:	bf00      	nop
      }
    } while (n);
 800dd16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d000      	beq.n	800dd1e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 800dd1c:	e79b      	b.n	800dc56 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	4618      	mov	r0, r3
 800dd28:	f7ff f844 	bl	800cdb4 <_ZL9_is_digitc>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d005      	beq.n	800dd3e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 800dd32:	463b      	mov	r3, r7
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7ff f851 	bl	800cddc <_ZL5_atoiPPKc>
 800dd3a:	6538      	str	r0, [r7, #80]	; 0x50
 800dd3c:	e01a      	b.n	800dd74 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	2b2a      	cmp	r3, #42	; 0x2a
 800dd44:	d116      	bne.n	800dd74 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 800dd46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd4a:	1d1a      	adds	r2, r3, #4
 800dd4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800dd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	da07      	bge.n	800dd6a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 800dd5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd5c:	f043 0302 	orr.w	r3, r3, #2
 800dd60:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800dd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd64:	425b      	negs	r3, r3
 800dd66:	653b      	str	r3, [r7, #80]	; 0x50
 800dd68:	e001      	b.n	800dd6e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 800dd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6c:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	3301      	adds	r3, #1
 800dd72:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800dd74:	2300      	movs	r3, #0
 800dd76:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	2b2e      	cmp	r3, #46	; 0x2e
 800dd7e:	d126      	bne.n	800ddce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 800dd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dd82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd86:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800dd88:	683b      	ldr	r3, [r7, #0]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	781b      	ldrb	r3, [r3, #0]
 800dd92:	4618      	mov	r0, r3
 800dd94:	f7ff f80e 	bl	800cdb4 <_ZL9_is_digitc>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d005      	beq.n	800ddaa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 800dd9e:	463b      	mov	r3, r7
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7ff f81b 	bl	800cddc <_ZL5_atoiPPKc>
 800dda6:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dda8:	e011      	b.n	800ddce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	2b2a      	cmp	r3, #42	; 0x2a
 800ddb0:	d10d      	bne.n	800ddce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 800ddb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ddb6:	1d1a      	adds	r2, r3, #4
 800ddb8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800ddc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ddc6:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	3b68      	subs	r3, #104	; 0x68
 800ddd4:	2b12      	cmp	r3, #18
 800ddd6:	d867      	bhi.n	800dea8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 800ddd8:	a201      	add	r2, pc, #4	; (adr r2, 800dde0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 800ddda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddde:	bf00      	nop
 800dde0:	0800de53 	.word	0x0800de53
 800dde4:	0800dea9 	.word	0x0800dea9
 800dde8:	0800de89 	.word	0x0800de89
 800ddec:	0800dea9 	.word	0x0800dea9
 800ddf0:	0800de2d 	.word	0x0800de2d
 800ddf4:	0800dea9 	.word	0x0800dea9
 800ddf8:	0800dea9 	.word	0x0800dea9
 800ddfc:	0800dea9 	.word	0x0800dea9
 800de00:	0800dea9 	.word	0x0800dea9
 800de04:	0800dea9 	.word	0x0800dea9
 800de08:	0800dea9 	.word	0x0800dea9
 800de0c:	0800dea9 	.word	0x0800dea9
 800de10:	0800de79 	.word	0x0800de79
 800de14:	0800dea9 	.word	0x0800dea9
 800de18:	0800dea9 	.word	0x0800dea9
 800de1c:	0800dea9 	.word	0x0800dea9
 800de20:	0800dea9 	.word	0x0800dea9
 800de24:	0800dea9 	.word	0x0800dea9
 800de28:	0800de99 	.word	0x0800de99
      case 'l' :
        flags |= FLAGS_LONG;
 800de2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de32:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	3301      	adds	r3, #1
 800de38:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	2b6c      	cmp	r3, #108	; 0x6c
 800de40:	d134      	bne.n	800deac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 800de42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800de48:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	3301      	adds	r3, #1
 800de4e:	603b      	str	r3, [r7, #0]
        }
        break;
 800de50:	e02c      	b.n	800deac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 800de52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de58:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	3301      	adds	r3, #1
 800de5e:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	2b68      	cmp	r3, #104	; 0x68
 800de66:	d125      	bne.n	800deb4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 800de68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de6e:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	3301      	adds	r3, #1
 800de74:	603b      	str	r3, [r7, #0]
        }
        break;
 800de76:	e01d      	b.n	800deb4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800de78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de7e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	3301      	adds	r3, #1
 800de84:	603b      	str	r3, [r7, #0]
        break;
 800de86:	e016      	b.n	800deb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800de88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800de8e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	3301      	adds	r3, #1
 800de94:	603b      	str	r3, [r7, #0]
        break;
 800de96:	e00e      	b.n	800deb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800de98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de9e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	3301      	adds	r3, #1
 800dea4:	603b      	str	r3, [r7, #0]
        break;
 800dea6:	e006      	b.n	800deb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 800dea8:	bf00      	nop
 800deaa:	e004      	b.n	800deb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 800deac:	bf00      	nop
 800deae:	e002      	b.n	800deb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 800deb0:	0800cd2f 	.word	0x0800cd2f
        break;
 800deb4:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	3b25      	subs	r3, #37	; 0x25
 800debc:	2b53      	cmp	r3, #83	; 0x53
 800debe:	f200 8352 	bhi.w	800e566 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 800dec2:	a201      	add	r2, pc, #4	; (adr r2, 800dec8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 800dec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec8:	0800e54f 	.word	0x0800e54f
 800decc:	0800e567 	.word	0x0800e567
 800ded0:	0800e567 	.word	0x0800e567
 800ded4:	0800e567 	.word	0x0800e567
 800ded8:	0800e567 	.word	0x0800e567
 800dedc:	0800e567 	.word	0x0800e567
 800dee0:	0800e567 	.word	0x0800e567
 800dee4:	0800e567 	.word	0x0800e567
 800dee8:	0800e567 	.word	0x0800e567
 800deec:	0800e567 	.word	0x0800e567
 800def0:	0800e567 	.word	0x0800e567
 800def4:	0800e567 	.word	0x0800e567
 800def8:	0800e567 	.word	0x0800e567
 800defc:	0800e567 	.word	0x0800e567
 800df00:	0800e567 	.word	0x0800e567
 800df04:	0800e567 	.word	0x0800e567
 800df08:	0800e567 	.word	0x0800e567
 800df0c:	0800e567 	.word	0x0800e567
 800df10:	0800e567 	.word	0x0800e567
 800df14:	0800e567 	.word	0x0800e567
 800df18:	0800e567 	.word	0x0800e567
 800df1c:	0800e567 	.word	0x0800e567
 800df20:	0800e567 	.word	0x0800e567
 800df24:	0800e567 	.word	0x0800e567
 800df28:	0800e567 	.word	0x0800e567
 800df2c:	0800e567 	.word	0x0800e567
 800df30:	0800e567 	.word	0x0800e567
 800df34:	0800e567 	.word	0x0800e567
 800df38:	0800e567 	.word	0x0800e567
 800df3c:	0800e567 	.word	0x0800e567
 800df40:	0800e567 	.word	0x0800e567
 800df44:	0800e567 	.word	0x0800e567
 800df48:	0800e31d 	.word	0x0800e31d
 800df4c:	0800e2cd 	.word	0x0800e2cd
 800df50:	0800e31d 	.word	0x0800e31d
 800df54:	0800e567 	.word	0x0800e567
 800df58:	0800e567 	.word	0x0800e567
 800df5c:	0800e567 	.word	0x0800e567
 800df60:	0800e567 	.word	0x0800e567
 800df64:	0800e567 	.word	0x0800e567
 800df68:	0800e567 	.word	0x0800e567
 800df6c:	0800e567 	.word	0x0800e567
 800df70:	0800e567 	.word	0x0800e567
 800df74:	0800e567 	.word	0x0800e567
 800df78:	0800e567 	.word	0x0800e567
 800df7c:	0800e567 	.word	0x0800e567
 800df80:	0800e567 	.word	0x0800e567
 800df84:	0800e567 	.word	0x0800e567
 800df88:	0800e567 	.word	0x0800e567
 800df8c:	0800e567 	.word	0x0800e567
 800df90:	0800e567 	.word	0x0800e567
 800df94:	0800e019 	.word	0x0800e019
 800df98:	0800e567 	.word	0x0800e567
 800df9c:	0800e567 	.word	0x0800e567
 800dfa0:	0800e567 	.word	0x0800e567
 800dfa4:	0800e567 	.word	0x0800e567
 800dfa8:	0800e567 	.word	0x0800e567
 800dfac:	0800e567 	.word	0x0800e567
 800dfb0:	0800e567 	.word	0x0800e567
 800dfb4:	0800e567 	.word	0x0800e567
 800dfb8:	0800e567 	.word	0x0800e567
 800dfbc:	0800e019 	.word	0x0800e019
 800dfc0:	0800e38d 	.word	0x0800e38d
 800dfc4:	0800e019 	.word	0x0800e019
 800dfc8:	0800e31d 	.word	0x0800e31d
 800dfcc:	0800e2cd 	.word	0x0800e2cd
 800dfd0:	0800e31d 	.word	0x0800e31d
 800dfd4:	0800e567 	.word	0x0800e567
 800dfd8:	0800e019 	.word	0x0800e019
 800dfdc:	0800e567 	.word	0x0800e567
 800dfe0:	0800e567 	.word	0x0800e567
 800dfe4:	0800e567 	.word	0x0800e567
 800dfe8:	0800e567 	.word	0x0800e567
 800dfec:	0800e567 	.word	0x0800e567
 800dff0:	0800e019 	.word	0x0800e019
 800dff4:	0800e503 	.word	0x0800e503
 800dff8:	0800e567 	.word	0x0800e567
 800dffc:	0800e567 	.word	0x0800e567
 800e000:	0800e419 	.word	0x0800e419
 800e004:	0800e567 	.word	0x0800e567
 800e008:	0800e019 	.word	0x0800e019
 800e00c:	0800e567 	.word	0x0800e567
 800e010:	0800e567 	.word	0x0800e567
 800e014:	0800e019 	.word	0x0800e019
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	2b78      	cmp	r3, #120	; 0x78
 800e01e:	d003      	beq.n	800e028 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	2b58      	cmp	r3, #88	; 0x58
 800e026:	d102      	bne.n	800e02e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 800e028:	2310      	movs	r3, #16
 800e02a:	643b      	str	r3, [r7, #64]	; 0x40
 800e02c:	e013      	b.n	800e056 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	2b6f      	cmp	r3, #111	; 0x6f
 800e034:	d102      	bne.n	800e03c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 800e036:	2308      	movs	r3, #8
 800e038:	643b      	str	r3, [r7, #64]	; 0x40
 800e03a:	e00c      	b.n	800e056 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	2b62      	cmp	r3, #98	; 0x62
 800e042:	d102      	bne.n	800e04a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 800e044:	2302      	movs	r3, #2
 800e046:	643b      	str	r3, [r7, #64]	; 0x40
 800e048:	e005      	b.n	800e056 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 800e04a:	230a      	movs	r3, #10
 800e04c:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800e04e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e050:	f023 0310 	bic.w	r3, r3, #16
 800e054:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800e056:	683b      	ldr	r3, [r7, #0]
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	2b58      	cmp	r3, #88	; 0x58
 800e05c:	d103      	bne.n	800e066 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 800e05e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e060:	f043 0320 	orr.w	r3, r3, #32
 800e064:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	781b      	ldrb	r3, [r3, #0]
 800e06a:	2b69      	cmp	r3, #105	; 0x69
 800e06c:	d007      	beq.n	800e07e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 800e06e:	683b      	ldr	r3, [r7, #0]
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	2b64      	cmp	r3, #100	; 0x64
 800e074:	d003      	beq.n	800e07e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800e076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e078:	f023 030c 	bic.w	r3, r3, #12
 800e07c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800e07e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e084:	2b00      	cmp	r3, #0
 800e086:	d003      	beq.n	800e090 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 800e088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e08a:	f023 0301 	bic.w	r3, r3, #1
 800e08e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	2b69      	cmp	r3, #105	; 0x69
 800e096:	d004      	beq.n	800e0a2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 800e098:	683b      	ldr	r3, [r7, #0]
 800e09a:	781b      	ldrb	r3, [r3, #0]
 800e09c:	2b64      	cmp	r3, #100	; 0x64
 800e09e:	f040 8097 	bne.w	800e1d0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800e0a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e0a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d030      	beq.n	800e10e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800e0ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e0b0:	3307      	adds	r3, #7
 800e0b2:	f023 0307 	bic.w	r3, r3, #7
 800e0b6:	f103 0208 	add.w	r2, r3, #8
 800e0ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e0be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e0c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	da05      	bge.n	800e0da <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	4254      	negs	r4, r2
 800e0d2:	eb61 0503 	sbc.w	r5, r1, r3
 800e0d6:	4622      	mov	r2, r4
 800e0d8:	462b      	mov	r3, r5
 800e0da:	6979      	ldr	r1, [r7, #20]
 800e0dc:	0fc9      	lsrs	r1, r1, #31
 800e0de:	b2c9      	uxtb	r1, r1
 800e0e0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e0e2:	2600      	movs	r6, #0
 800e0e4:	4680      	mov	r8, r0
 800e0e6:	46b1      	mov	r9, r6
 800e0e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e0ea:	9008      	str	r0, [sp, #32]
 800e0ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e0ee:	9007      	str	r0, [sp, #28]
 800e0f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e0f2:	9006      	str	r0, [sp, #24]
 800e0f4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800e0f8:	9102      	str	r1, [sp, #8]
 800e0fa:	e9cd 2300 	strd	r2, r3, [sp]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e102:	68b9      	ldr	r1, [r7, #8]
 800e104:	68f8      	ldr	r0, [r7, #12]
 800e106:	f7ff f820 	bl	800d14a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800e10a:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 800e10c:	e0da      	b.n	800e2c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 800e10e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e114:	2b00      	cmp	r3, #0
 800e116:	d020      	beq.n	800e15a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 800e118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e11c:	1d1a      	adds	r2, r3, #4
 800e11e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	bfb8      	it	lt
 800e12c:	425b      	neglt	r3, r3
 800e12e:	4619      	mov	r1, r3
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	0fdb      	lsrs	r3, r3, #31
 800e134:	b2db      	uxtb	r3, r3
 800e136:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e138:	9205      	str	r2, [sp, #20]
 800e13a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e13c:	9204      	str	r2, [sp, #16]
 800e13e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e140:	9203      	str	r2, [sp, #12]
 800e142:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e144:	9202      	str	r2, [sp, #8]
 800e146:	9301      	str	r3, [sp, #4]
 800e148:	9100      	str	r1, [sp, #0]
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e14e:	68b9      	ldr	r1, [r7, #8]
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f7fe ff93 	bl	800d07c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e156:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800e158:	e0b4      	b.n	800e2c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800e15a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e15c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e160:	2b00      	cmp	r3, #0
 800e162:	d007      	beq.n	800e174 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 800e164:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e168:	1d1a      	adds	r2, r3, #4
 800e16a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	b2db      	uxtb	r3, r3
 800e172:	e012      	b.n	800e19a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800e174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d007      	beq.n	800e18e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 800e17e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e182:	1d1a      	adds	r2, r3, #4
 800e184:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	b21b      	sxth	r3, r3
 800e18c:	e005      	b.n	800e19a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800e18e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e192:	1d1a      	adds	r2, r3, #4
 800e194:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e19c:	6a3b      	ldr	r3, [r7, #32]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	bfb8      	it	lt
 800e1a2:	425b      	neglt	r3, r3
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	6a3b      	ldr	r3, [r7, #32]
 800e1a8:	0fdb      	lsrs	r3, r3, #31
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e1ae:	9205      	str	r2, [sp, #20]
 800e1b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e1b2:	9204      	str	r2, [sp, #16]
 800e1b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e1b6:	9203      	str	r2, [sp, #12]
 800e1b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e1ba:	9202      	str	r2, [sp, #8]
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	9100      	str	r1, [sp, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e1c4:	68b9      	ldr	r1, [r7, #8]
 800e1c6:	68f8      	ldr	r0, [r7, #12]
 800e1c8:	f7fe ff58 	bl	800d07c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e1cc:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800e1ce:	e079      	b.n	800e2c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800e1d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d022      	beq.n	800e220 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800e1da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e1de:	3307      	adds	r3, #7
 800e1e0:	f023 0307 	bic.w	r3, r3, #7
 800e1e4:	f103 0208 	add.w	r2, r3, #8
 800e1e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e1f2:	2000      	movs	r0, #0
 800e1f4:	468a      	mov	sl, r1
 800e1f6:	4683      	mov	fp, r0
 800e1f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e1fa:	9108      	str	r1, [sp, #32]
 800e1fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e1fe:	9107      	str	r1, [sp, #28]
 800e200:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e202:	9106      	str	r1, [sp, #24]
 800e204:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800e208:	2100      	movs	r1, #0
 800e20a:	9102      	str	r1, [sp, #8]
 800e20c:	e9cd 2300 	strd	r2, r3, [sp]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e214:	68b9      	ldr	r1, [r7, #8]
 800e216:	68f8      	ldr	r0, [r7, #12]
 800e218:	f7fe ff97 	bl	800d14a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800e21c:	6478      	str	r0, [r7, #68]	; 0x44
 800e21e:	e051      	b.n	800e2c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800e220:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e226:	2b00      	cmp	r3, #0
 800e228:	d018      	beq.n	800e25c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800e22a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e22e:	1d1a      	adds	r2, r3, #4
 800e230:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e238:	9205      	str	r2, [sp, #20]
 800e23a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e23c:	9204      	str	r2, [sp, #16]
 800e23e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e240:	9203      	str	r2, [sp, #12]
 800e242:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e244:	9202      	str	r2, [sp, #8]
 800e246:	2200      	movs	r2, #0
 800e248:	9201      	str	r2, [sp, #4]
 800e24a:	9300      	str	r3, [sp, #0]
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e250:	68b9      	ldr	r1, [r7, #8]
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f7fe ff12 	bl	800d07c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e258:	6478      	str	r0, [r7, #68]	; 0x44
 800e25a:	e033      	b.n	800e2c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800e25c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e25e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e262:	2b00      	cmp	r3, #0
 800e264:	d007      	beq.n	800e276 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 800e266:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e26a:	1d1a      	adds	r2, r3, #4
 800e26c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	b2db      	uxtb	r3, r3
 800e274:	e012      	b.n	800e29c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800e276:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d007      	beq.n	800e290 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 800e280:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e284:	1d1a      	adds	r2, r3, #4
 800e286:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	e005      	b.n	800e29c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800e290:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e294:	1d1a      	adds	r2, r3, #4
 800e296:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800e29e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2a0:	9305      	str	r3, [sp, #20]
 800e2a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2a4:	9304      	str	r3, [sp, #16]
 800e2a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2a8:	9303      	str	r3, [sp, #12]
 800e2aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2ac:	9302      	str	r3, [sp, #8]
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	9301      	str	r3, [sp, #4]
 800e2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b4:	9300      	str	r3, [sp, #0]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2ba:	68b9      	ldr	r1, [r7, #8]
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	f7fe fedd 	bl	800d07c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e2c2:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	603b      	str	r3, [r7, #0]
        break;
 800e2ca:	e159      	b.n	800e580 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	781b      	ldrb	r3, [r3, #0]
 800e2d0:	2b46      	cmp	r3, #70	; 0x46
 800e2d2:	d103      	bne.n	800e2dc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 800e2d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2d6:	f043 0320 	orr.w	r3, r3, #32
 800e2da:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800e2dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e2e0:	3307      	adds	r3, #7
 800e2e2:	f023 0307 	bic.w	r3, r3, #7
 800e2e6:	f103 0208 	add.w	r2, r3, #8
 800e2ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e2ee:	ed93 7b00 	vldr	d7, [r3]
 800e2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2f4:	9302      	str	r3, [sp, #8]
 800e2f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e2f8:	9301      	str	r3, [sp, #4]
 800e2fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2fc:	9300      	str	r3, [sp, #0]
 800e2fe:	eeb0 0a47 	vmov.f32	s0, s14
 800e302:	eef0 0a67 	vmov.f32	s1, s15
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e30a:	68b9      	ldr	r1, [r7, #8]
 800e30c:	68f8      	ldr	r0, [r7, #12]
 800e30e:	f7fe ff8b 	bl	800d228 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800e312:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	3301      	adds	r3, #1
 800e318:	603b      	str	r3, [r7, #0]
        break;
 800e31a:	e131      	b.n	800e580 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	2b67      	cmp	r3, #103	; 0x67
 800e322:	d003      	beq.n	800e32c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	2b47      	cmp	r3, #71	; 0x47
 800e32a:	d103      	bne.n	800e334 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 800e32c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e32e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e332:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	2b45      	cmp	r3, #69	; 0x45
 800e33a:	d003      	beq.n	800e344 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	2b47      	cmp	r3, #71	; 0x47
 800e342:	d103      	bne.n	800e34c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 800e344:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e346:	f043 0320 	orr.w	r3, r3, #32
 800e34a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800e34c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e350:	3307      	adds	r3, #7
 800e352:	f023 0307 	bic.w	r3, r3, #7
 800e356:	f103 0208 	add.w	r2, r3, #8
 800e35a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e35e:	ed93 7b00 	vldr	d7, [r3]
 800e362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e364:	9302      	str	r3, [sp, #8]
 800e366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e368:	9301      	str	r3, [sp, #4]
 800e36a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	eeb0 0a47 	vmov.f32	s0, s14
 800e372:	eef0 0a67 	vmov.f32	s1, s15
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e37a:	68b9      	ldr	r1, [r7, #8]
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f7ff f9b7 	bl	800d6f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800e382:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800e384:	683b      	ldr	r3, [r7, #0]
 800e386:	3301      	adds	r3, #1
 800e388:	603b      	str	r3, [r7, #0]
        break;
 800e38a:	e0f9      	b.n	800e580 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800e38c:	2301      	movs	r3, #1
 800e38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800e390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e392:	f003 0302 	and.w	r3, r3, #2
 800e396:	2b00      	cmp	r3, #0
 800e398:	d113      	bne.n	800e3c2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 800e39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e39c:	1c5a      	adds	r2, r3, #1
 800e39e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e3a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3a2:	429a      	cmp	r2, r3
 800e3a4:	bf8c      	ite	hi
 800e3a6:	2301      	movhi	r3, #1
 800e3a8:	2300      	movls	r3, #0
 800e3aa:	b2db      	uxtb	r3, r3
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d008      	beq.n	800e3c2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 800e3b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3b2:	1c53      	adds	r3, r2, #1
 800e3b4:	647b      	str	r3, [r7, #68]	; 0x44
 800e3b6:	68fe      	ldr	r6, [r7, #12]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	68b9      	ldr	r1, [r7, #8]
 800e3bc:	2020      	movs	r0, #32
 800e3be:	47b0      	blx	r6
          while (l++ < width) {
 800e3c0:	e7eb      	b.n	800e39a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800e3c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3c6:	1d1a      	adds	r2, r3, #4
 800e3c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	b2d8      	uxtb	r0, r3
 800e3d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3d2:	1c53      	adds	r3, r2, #1
 800e3d4:	647b      	str	r3, [r7, #68]	; 0x44
 800e3d6:	68fe      	ldr	r6, [r7, #12]
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	68b9      	ldr	r1, [r7, #8]
 800e3dc:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 800e3de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3e0:	f003 0302 	and.w	r3, r3, #2
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d013      	beq.n	800e410 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 800e3e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3ea:	1c5a      	adds	r2, r3, #1
 800e3ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e3ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	bf8c      	ite	hi
 800e3f4:	2301      	movhi	r3, #1
 800e3f6:	2300      	movls	r3, #0
 800e3f8:	b2db      	uxtb	r3, r3
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d008      	beq.n	800e410 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 800e3fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e400:	1c53      	adds	r3, r2, #1
 800e402:	647b      	str	r3, [r7, #68]	; 0x44
 800e404:	68fe      	ldr	r6, [r7, #12]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	68b9      	ldr	r1, [r7, #8]
 800e40a:	2020      	movs	r0, #32
 800e40c:	47b0      	blx	r6
          while (l++ < width) {
 800e40e:	e7eb      	b.n	800e3e8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	3301      	adds	r3, #1
 800e414:	603b      	str	r3, [r7, #0]
        break;
 800e416:	e0b3      	b.n	800e580 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800e418:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e41c:	1d1a      	adds	r2, r3, #4
 800e41e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800e426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d001      	beq.n	800e430 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 800e42c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e42e:	e001      	b.n	800e434 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 800e430:	f04f 33ff 	mov.w	r3, #4294967295
 800e434:	4619      	mov	r1, r3
 800e436:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e438:	f7fe fc9a 	bl	800cd70 <_ZL10_strnlen_sPKcj>
 800e43c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800e43e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e444:	2b00      	cmp	r3, #0
 800e446:	d007      	beq.n	800e458 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 800e448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d201      	bcs.n	800e454 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 800e450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e452:	e000      	b.n	800e456 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 800e454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e456:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800e458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e45a:	f003 0302 	and.w	r3, r3, #2
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d113      	bne.n	800e48a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 800e462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e464:	1c5a      	adds	r2, r3, #1
 800e466:	637a      	str	r2, [r7, #52]	; 0x34
 800e468:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e46a:	429a      	cmp	r2, r3
 800e46c:	bf8c      	ite	hi
 800e46e:	2301      	movhi	r3, #1
 800e470:	2300      	movls	r3, #0
 800e472:	b2db      	uxtb	r3, r3
 800e474:	2b00      	cmp	r3, #0
 800e476:	d008      	beq.n	800e48a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 800e478:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e47a:	1c53      	adds	r3, r2, #1
 800e47c:	647b      	str	r3, [r7, #68]	; 0x44
 800e47e:	68fe      	ldr	r6, [r7, #12]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	68b9      	ldr	r1, [r7, #8]
 800e484:	2020      	movs	r0, #32
 800e486:	47b0      	blx	r6
          while (l++ < width) {
 800e488:	e7eb      	b.n	800e462 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800e48a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d00b      	beq.n	800e4aa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800e492:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d004      	beq.n	800e4a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 800e49c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e49e:	1e5a      	subs	r2, r3, #1
 800e4a0:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d001      	beq.n	800e4aa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e000      	b.n	800e4ac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d00b      	beq.n	800e4c8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 800e4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	63ba      	str	r2, [r7, #56]	; 0x38
 800e4b6:	7818      	ldrb	r0, [r3, #0]
 800e4b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4ba:	1c53      	adds	r3, r2, #1
 800e4bc:	647b      	str	r3, [r7, #68]	; 0x44
 800e4be:	68fe      	ldr	r6, [r7, #12]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	68b9      	ldr	r1, [r7, #8]
 800e4c4:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800e4c6:	e7e0      	b.n	800e48a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800e4c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4ca:	f003 0302 	and.w	r3, r3, #2
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d013      	beq.n	800e4fa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 800e4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d4:	1c5a      	adds	r2, r3, #1
 800e4d6:	637a      	str	r2, [r7, #52]	; 0x34
 800e4d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	bf8c      	ite	hi
 800e4de:	2301      	movhi	r3, #1
 800e4e0:	2300      	movls	r3, #0
 800e4e2:	b2db      	uxtb	r3, r3
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d008      	beq.n	800e4fa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 800e4e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4ea:	1c53      	adds	r3, r2, #1
 800e4ec:	647b      	str	r3, [r7, #68]	; 0x44
 800e4ee:	68fe      	ldr	r6, [r7, #12]
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	68b9      	ldr	r1, [r7, #8]
 800e4f4:	2020      	movs	r0, #32
 800e4f6:	47b0      	blx	r6
          while (l++ < width) {
 800e4f8:	e7eb      	b.n	800e4d2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	603b      	str	r3, [r7, #0]
        break;
 800e500:	e03e      	b.n	800e580 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800e502:	2308      	movs	r3, #8
 800e504:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800e506:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e508:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800e50c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800e50e:	2300      	movs	r3, #0
 800e510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800e514:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e518:	1d1a      	adds	r2, r3, #4
 800e51a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	461a      	mov	r2, r3
 800e522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e524:	9305      	str	r3, [sp, #20]
 800e526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e528:	9304      	str	r3, [sp, #16]
 800e52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e52c:	9303      	str	r3, [sp, #12]
 800e52e:	2310      	movs	r3, #16
 800e530:	9302      	str	r3, [sp, #8]
 800e532:	2300      	movs	r3, #0
 800e534:	9301      	str	r3, [sp, #4]
 800e536:	9200      	str	r2, [sp, #0]
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e53c:	68b9      	ldr	r1, [r7, #8]
 800e53e:	68f8      	ldr	r0, [r7, #12]
 800e540:	f7fe fd9c 	bl	800d07c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e544:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	3301      	adds	r3, #1
 800e54a:	603b      	str	r3, [r7, #0]
        break;
 800e54c:	e018      	b.n	800e580 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800e54e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e550:	1c53      	adds	r3, r2, #1
 800e552:	647b      	str	r3, [r7, #68]	; 0x44
 800e554:	68fe      	ldr	r6, [r7, #12]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	68b9      	ldr	r1, [r7, #8]
 800e55a:	2025      	movs	r0, #37	; 0x25
 800e55c:	47b0      	blx	r6
        format++;
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	3301      	adds	r3, #1
 800e562:	603b      	str	r3, [r7, #0]
        break;
 800e564:	e00c      	b.n	800e580 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	7818      	ldrb	r0, [r3, #0]
 800e56a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e56c:	1c53      	adds	r3, r2, #1
 800e56e:	647b      	str	r3, [r7, #68]	; 0x44
 800e570:	68fe      	ldr	r6, [r7, #12]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	68b9      	ldr	r1, [r7, #8]
 800e576:	47b0      	blx	r6
        format++;
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	3301      	adds	r3, #1
 800e57c:	603b      	str	r3, [r7, #0]
        break;
 800e57e:	bf00      	nop
  while (*format)
 800e580:	f7ff bb4d 	b.w	800dc1e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800e584:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	429a      	cmp	r2, r3
 800e58a:	d302      	bcc.n	800e592 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	1e5a      	subs	r2, r3, #1
 800e590:	e000      	b.n	800e594 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 800e592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e594:	68fc      	ldr	r4, [r7, #12]
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	68b9      	ldr	r1, [r7, #8]
 800e59a:	2000      	movs	r0, #0
 800e59c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800e59e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	375c      	adds	r7, #92	; 0x5c
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5aa:	bf00      	nop

0800e5ac <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800e5ac:	b40f      	push	{r0, r1, r2, r3}
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b086      	sub	sp, #24
 800e5b2:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800e5b4:	f107 031c 	add.w	r3, r7, #28
 800e5b8:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800e5ba:	1d39      	adds	r1, r7, #4
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	69bb      	ldr	r3, [r7, #24]
 800e5c2:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c6:	4806      	ldr	r0, [pc, #24]	; (800e5e0 <printf_+0x34>)
 800e5c8:	f7ff fb1a 	bl	800dc00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 800e5cc:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e5da:	b004      	add	sp, #16
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	0800cd4b 	.word	0x0800cd4b

0800e5e4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800e5ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e5f0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800e5f4:	f003 0301 	and.w	r3, r3, #1
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d009      	beq.n	800e610 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800e5fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e600:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800e604:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <ITM_SendChar+0x2c>
 800e60c:	2301      	movs	r3, #1
 800e60e:	e000      	b.n	800e612 <ITM_SendChar+0x2e>
 800e610:	2300      	movs	r3, #0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d010      	beq.n	800e638 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800e616:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	bf0c      	ite	eq
 800e620:	2301      	moveq	r3, #1
 800e622:	2300      	movne	r3, #0
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b00      	cmp	r3, #0
 800e628:	d001      	beq.n	800e62e <ITM_SendChar+0x4a>
    {
      __NOP();
 800e62a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800e62c:	e7f3      	b.n	800e616 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800e62e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	b2d2      	uxtb	r2, r2
 800e636:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800e638:	687b      	ldr	r3, [r7, #4]
}
 800e63a:	4618      	mov	r0, r3
 800e63c:	370c      	adds	r7, #12
 800e63e:	46bd      	mov	sp, r7
 800e640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e644:	4770      	bx	lr

0800e646 <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 800e646:	b580      	push	{r7, lr}
 800e648:	b082      	sub	sp, #8
 800e64a:	af00      	add	r7, sp, #0
 800e64c:	4603      	mov	r3, r0
 800e64e:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 800e650:	79fb      	ldrb	r3, [r7, #7]
 800e652:	4618      	mov	r0, r3
 800e654:	f7ff ffc6 	bl	800e5e4 <ITM_SendChar>
}
 800e658:	bf00      	nop
 800e65a:	3708      	adds	r7, #8
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <__NVIC_SetPriority>:
{
 800e660:	b480      	push	{r7}
 800e662:	b083      	sub	sp, #12
 800e664:	af00      	add	r7, sp, #0
 800e666:	4603      	mov	r3, r0
 800e668:	6039      	str	r1, [r7, #0]
 800e66a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e66c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e670:	2b00      	cmp	r3, #0
 800e672:	db0a      	blt.n	800e68a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	b2da      	uxtb	r2, r3
 800e678:	490c      	ldr	r1, [pc, #48]	; (800e6ac <__NVIC_SetPriority+0x4c>)
 800e67a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e67e:	0112      	lsls	r2, r2, #4
 800e680:	b2d2      	uxtb	r2, r2
 800e682:	440b      	add	r3, r1
 800e684:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e688:	e00a      	b.n	800e6a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	b2da      	uxtb	r2, r3
 800e68e:	4908      	ldr	r1, [pc, #32]	; (800e6b0 <__NVIC_SetPriority+0x50>)
 800e690:	79fb      	ldrb	r3, [r7, #7]
 800e692:	f003 030f 	and.w	r3, r3, #15
 800e696:	3b04      	subs	r3, #4
 800e698:	0112      	lsls	r2, r2, #4
 800e69a:	b2d2      	uxtb	r2, r2
 800e69c:	440b      	add	r3, r1
 800e69e:	761a      	strb	r2, [r3, #24]
}
 800e6a0:	bf00      	nop
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr
 800e6ac:	e000e100 	.word	0xe000e100
 800e6b0:	e000ed00 	.word	0xe000ed00

0800e6b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e6b8:	4b05      	ldr	r3, [pc, #20]	; (800e6d0 <SysTick_Handler+0x1c>)
 800e6ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e6bc:	f003 f8a8 	bl	8011810 <xTaskGetSchedulerState>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b01      	cmp	r3, #1
 800e6c4:	d001      	beq.n	800e6ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e6c6:	f004 f8cf 	bl	8012868 <xPortSysTickHandler>
  }
}
 800e6ca:	bf00      	nop
 800e6cc:	bd80      	pop	{r7, pc}
 800e6ce:	bf00      	nop
 800e6d0:	e000e010 	.word	0xe000e010

0800e6d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e6d8:	2100      	movs	r1, #0
 800e6da:	f06f 0004 	mvn.w	r0, #4
 800e6de:	f7ff ffbf 	bl	800e660 <__NVIC_SetPriority>
#endif
}
 800e6e2:	bf00      	nop
 800e6e4:	bd80      	pop	{r7, pc}
	...

0800e6e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e6e8:	b480      	push	{r7}
 800e6ea:	b083      	sub	sp, #12
 800e6ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e6ee:	f3ef 8305 	mrs	r3, IPSR
 800e6f2:	603b      	str	r3, [r7, #0]
  return(result);
 800e6f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d003      	beq.n	800e702 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e6fa:	f06f 0305 	mvn.w	r3, #5
 800e6fe:	607b      	str	r3, [r7, #4]
 800e700:	e00c      	b.n	800e71c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e702:	4b0a      	ldr	r3, [pc, #40]	; (800e72c <osKernelInitialize+0x44>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d105      	bne.n	800e716 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e70a:	4b08      	ldr	r3, [pc, #32]	; (800e72c <osKernelInitialize+0x44>)
 800e70c:	2201      	movs	r2, #1
 800e70e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e710:	2300      	movs	r3, #0
 800e712:	607b      	str	r3, [r7, #4]
 800e714:	e002      	b.n	800e71c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e716:	f04f 33ff 	mov.w	r3, #4294967295
 800e71a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e71c:	687b      	ldr	r3, [r7, #4]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	370c      	adds	r7, #12
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop
 800e72c:	20001584 	.word	0x20001584

0800e730 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e730:	b580      	push	{r7, lr}
 800e732:	b082      	sub	sp, #8
 800e734:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e736:	f3ef 8305 	mrs	r3, IPSR
 800e73a:	603b      	str	r3, [r7, #0]
  return(result);
 800e73c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d003      	beq.n	800e74a <osKernelStart+0x1a>
    stat = osErrorISR;
 800e742:	f06f 0305 	mvn.w	r3, #5
 800e746:	607b      	str	r3, [r7, #4]
 800e748:	e010      	b.n	800e76c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e74a:	4b0b      	ldr	r3, [pc, #44]	; (800e778 <osKernelStart+0x48>)
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	2b01      	cmp	r3, #1
 800e750:	d109      	bne.n	800e766 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e752:	f7ff ffbf 	bl	800e6d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e756:	4b08      	ldr	r3, [pc, #32]	; (800e778 <osKernelStart+0x48>)
 800e758:	2202      	movs	r2, #2
 800e75a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e75c:	f002 fb98 	bl	8010e90 <vTaskStartScheduler>
      stat = osOK;
 800e760:	2300      	movs	r3, #0
 800e762:	607b      	str	r3, [r7, #4]
 800e764:	e002      	b.n	800e76c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e766:	f04f 33ff 	mov.w	r3, #4294967295
 800e76a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e76c:	687b      	ldr	r3, [r7, #4]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3708      	adds	r7, #8
 800e772:	46bd      	mov	sp, r7
 800e774:	bd80      	pop	{r7, pc}
 800e776:	bf00      	nop
 800e778:	20001584 	.word	0x20001584

0800e77c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b08e      	sub	sp, #56	; 0x38
 800e780:	af04      	add	r7, sp, #16
 800e782:	60f8      	str	r0, [r7, #12]
 800e784:	60b9      	str	r1, [r7, #8]
 800e786:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e788:	2300      	movs	r3, #0
 800e78a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e78c:	f3ef 8305 	mrs	r3, IPSR
 800e790:	617b      	str	r3, [r7, #20]
  return(result);
 800e792:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e794:	2b00      	cmp	r3, #0
 800e796:	d17e      	bne.n	800e896 <osThreadNew+0x11a>
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d07b      	beq.n	800e896 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e79e:	2380      	movs	r3, #128	; 0x80
 800e7a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e7a2:	2318      	movs	r3, #24
 800e7a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d045      	beq.n	800e842 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d002      	beq.n	800e7c4 <osThreadNew+0x48>
        name = attr->name;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	699b      	ldr	r3, [r3, #24]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d002      	beq.n	800e7d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	699b      	ldr	r3, [r3, #24]
 800e7d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e7d2:	69fb      	ldr	r3, [r7, #28]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d008      	beq.n	800e7ea <osThreadNew+0x6e>
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	2b38      	cmp	r3, #56	; 0x38
 800e7dc:	d805      	bhi.n	800e7ea <osThreadNew+0x6e>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	f003 0301 	and.w	r3, r3, #1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d001      	beq.n	800e7ee <osThreadNew+0x72>
        return (NULL);
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	e054      	b.n	800e898 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	695b      	ldr	r3, [r3, #20]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d003      	beq.n	800e7fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	695b      	ldr	r3, [r3, #20]
 800e7fa:	089b      	lsrs	r3, r3, #2
 800e7fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	689b      	ldr	r3, [r3, #8]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d00e      	beq.n	800e824 <osThreadNew+0xa8>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	68db      	ldr	r3, [r3, #12]
 800e80a:	2bbf      	cmp	r3, #191	; 0xbf
 800e80c:	d90a      	bls.n	800e824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e812:	2b00      	cmp	r3, #0
 800e814:	d006      	beq.n	800e824 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	695b      	ldr	r3, [r3, #20]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d002      	beq.n	800e824 <osThreadNew+0xa8>
        mem = 1;
 800e81e:	2301      	movs	r3, #1
 800e820:	61bb      	str	r3, [r7, #24]
 800e822:	e010      	b.n	800e846 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	689b      	ldr	r3, [r3, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d10c      	bne.n	800e846 <osThreadNew+0xca>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	68db      	ldr	r3, [r3, #12]
 800e830:	2b00      	cmp	r3, #0
 800e832:	d108      	bne.n	800e846 <osThreadNew+0xca>
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	691b      	ldr	r3, [r3, #16]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d104      	bne.n	800e846 <osThreadNew+0xca>
          mem = 0;
 800e83c:	2300      	movs	r3, #0
 800e83e:	61bb      	str	r3, [r7, #24]
 800e840:	e001      	b.n	800e846 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e842:	2300      	movs	r3, #0
 800e844:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	2b01      	cmp	r3, #1
 800e84a:	d110      	bne.n	800e86e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e854:	9202      	str	r2, [sp, #8]
 800e856:	9301      	str	r3, [sp, #4]
 800e858:	69fb      	ldr	r3, [r7, #28]
 800e85a:	9300      	str	r3, [sp, #0]
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	6a3a      	ldr	r2, [r7, #32]
 800e860:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e862:	68f8      	ldr	r0, [r7, #12]
 800e864:	f002 f924 	bl	8010ab0 <xTaskCreateStatic>
 800e868:	4603      	mov	r3, r0
 800e86a:	613b      	str	r3, [r7, #16]
 800e86c:	e013      	b.n	800e896 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d110      	bne.n	800e896 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e874:	6a3b      	ldr	r3, [r7, #32]
 800e876:	b29a      	uxth	r2, r3
 800e878:	f107 0310 	add.w	r3, r7, #16
 800e87c:	9301      	str	r3, [sp, #4]
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	9300      	str	r3, [sp, #0]
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e886:	68f8      	ldr	r0, [r7, #12]
 800e888:	f002 f96f 	bl	8010b6a <xTaskCreate>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d001      	beq.n	800e896 <osThreadNew+0x11a>
            hTask = NULL;
 800e892:	2300      	movs	r3, #0
 800e894:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e896:	693b      	ldr	r3, [r7, #16]
}
 800e898:	4618      	mov	r0, r3
 800e89a:	3728      	adds	r7, #40	; 0x28
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}

0800e8a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8a8:	f3ef 8305 	mrs	r3, IPSR
 800e8ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d003      	beq.n	800e8bc <osDelay+0x1c>
    stat = osErrorISR;
 800e8b4:	f06f 0305 	mvn.w	r3, #5
 800e8b8:	60fb      	str	r3, [r7, #12]
 800e8ba:	e007      	b.n	800e8cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d002      	beq.n	800e8cc <osDelay+0x2c>
      vTaskDelay(ticks);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f002 faae 	bl	8010e28 <vTaskDelay>
    }
  }

  return (stat);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b088      	sub	sp, #32
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8e2:	f3ef 8305 	mrs	r3, IPSR
 800e8e6:	60bb      	str	r3, [r7, #8]
  return(result);
 800e8e8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d174      	bne.n	800e9d8 <osMutexNew+0x102>
    if (attr != NULL) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d003      	beq.n	800e8fc <osMutexNew+0x26>
      type = attr->attr_bits;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	61bb      	str	r3, [r7, #24]
 800e8fa:	e001      	b.n	800e900 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800e900:	69bb      	ldr	r3, [r7, #24]
 800e902:	f003 0301 	and.w	r3, r3, #1
 800e906:	2b00      	cmp	r3, #0
 800e908:	d002      	beq.n	800e910 <osMutexNew+0x3a>
      rmtx = 1U;
 800e90a:	2301      	movs	r3, #1
 800e90c:	617b      	str	r3, [r7, #20]
 800e90e:	e001      	b.n	800e914 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800e910:	2300      	movs	r3, #0
 800e912:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800e914:	69bb      	ldr	r3, [r7, #24]
 800e916:	f003 0308 	and.w	r3, r3, #8
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d15c      	bne.n	800e9d8 <osMutexNew+0x102>
      mem = -1;
 800e91e:	f04f 33ff 	mov.w	r3, #4294967295
 800e922:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d015      	beq.n	800e956 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	689b      	ldr	r3, [r3, #8]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d006      	beq.n	800e940 <osMutexNew+0x6a>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	68db      	ldr	r3, [r3, #12]
 800e936:	2b4f      	cmp	r3, #79	; 0x4f
 800e938:	d902      	bls.n	800e940 <osMutexNew+0x6a>
          mem = 1;
 800e93a:	2301      	movs	r3, #1
 800e93c:	613b      	str	r3, [r7, #16]
 800e93e:	e00c      	b.n	800e95a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	689b      	ldr	r3, [r3, #8]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d108      	bne.n	800e95a <osMutexNew+0x84>
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68db      	ldr	r3, [r3, #12]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d104      	bne.n	800e95a <osMutexNew+0x84>
            mem = 0;
 800e950:	2300      	movs	r3, #0
 800e952:	613b      	str	r3, [r7, #16]
 800e954:	e001      	b.n	800e95a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800e956:	2300      	movs	r3, #0
 800e958:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800e95a:	693b      	ldr	r3, [r7, #16]
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d112      	bne.n	800e986 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d007      	beq.n	800e976 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	4619      	mov	r1, r3
 800e96c:	2004      	movs	r0, #4
 800e96e:	f000 fd88 	bl	800f482 <xQueueCreateMutexStatic>
 800e972:	61f8      	str	r0, [r7, #28]
 800e974:	e016      	b.n	800e9a4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	4619      	mov	r1, r3
 800e97c:	2001      	movs	r0, #1
 800e97e:	f000 fd80 	bl	800f482 <xQueueCreateMutexStatic>
 800e982:	61f8      	str	r0, [r7, #28]
 800e984:	e00e      	b.n	800e9a4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800e986:	693b      	ldr	r3, [r7, #16]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d10b      	bne.n	800e9a4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800e98c:	697b      	ldr	r3, [r7, #20]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d004      	beq.n	800e99c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800e992:	2004      	movs	r0, #4
 800e994:	f000 fd5d 	bl	800f452 <xQueueCreateMutex>
 800e998:	61f8      	str	r0, [r7, #28]
 800e99a:	e003      	b.n	800e9a4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800e99c:	2001      	movs	r0, #1
 800e99e:	f000 fd58 	bl	800f452 <xQueueCreateMutex>
 800e9a2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800e9a4:	69fb      	ldr	r3, [r7, #28]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00c      	beq.n	800e9c4 <osMutexNew+0xee>
        if (attr != NULL) {
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d003      	beq.n	800e9b8 <osMutexNew+0xe2>
          name = attr->name;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	681b      	ldr	r3, [r3, #0]
 800e9b4:	60fb      	str	r3, [r7, #12]
 800e9b6:	e001      	b.n	800e9bc <osMutexNew+0xe6>
        } else {
          name = NULL;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800e9bc:	68f9      	ldr	r1, [r7, #12]
 800e9be:	69f8      	ldr	r0, [r7, #28]
 800e9c0:	f001 fc68 	bl	8010294 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d006      	beq.n	800e9d8 <osMutexNew+0x102>
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d003      	beq.n	800e9d8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	f043 0301 	orr.w	r3, r3, #1
 800e9d6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800e9d8:	69fb      	ldr	r3, [r7, #28]
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3720      	adds	r7, #32
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b086      	sub	sp, #24
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
 800e9ea:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	f023 0301 	bic.w	r3, r3, #1
 800e9f2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f003 0301 	and.w	r3, r3, #1
 800e9fa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea00:	f3ef 8305 	mrs	r3, IPSR
 800ea04:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea06:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800ea0c:	f06f 0305 	mvn.w	r3, #5
 800ea10:	617b      	str	r3, [r7, #20]
 800ea12:	e02c      	b.n	800ea6e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800ea14:	693b      	ldr	r3, [r7, #16]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d103      	bne.n	800ea22 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800ea1a:	f06f 0303 	mvn.w	r3, #3
 800ea1e:	617b      	str	r3, [r7, #20]
 800ea20:	e025      	b.n	800ea6e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d011      	beq.n	800ea4c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800ea28:	6839      	ldr	r1, [r7, #0]
 800ea2a:	6938      	ldr	r0, [r7, #16]
 800ea2c:	f000 fd78 	bl	800f520 <xQueueTakeMutexRecursive>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d01b      	beq.n	800ea6e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d003      	beq.n	800ea44 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ea3c:	f06f 0301 	mvn.w	r3, #1
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	e014      	b.n	800ea6e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ea44:	f06f 0302 	mvn.w	r3, #2
 800ea48:	617b      	str	r3, [r7, #20]
 800ea4a:	e010      	b.n	800ea6e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ea4c:	6839      	ldr	r1, [r7, #0]
 800ea4e:	6938      	ldr	r0, [r7, #16]
 800ea50:	f001 f90c 	bl	800fc6c <xQueueSemaphoreTake>
 800ea54:	4603      	mov	r3, r0
 800ea56:	2b01      	cmp	r3, #1
 800ea58:	d009      	beq.n	800ea6e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ea5a:	683b      	ldr	r3, [r7, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d003      	beq.n	800ea68 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ea60:	f06f 0301 	mvn.w	r3, #1
 800ea64:	617b      	str	r3, [r7, #20]
 800ea66:	e002      	b.n	800ea6e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ea68:	f06f 0302 	mvn.w	r3, #2
 800ea6c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ea6e:	697b      	ldr	r3, [r7, #20]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3718      	adds	r7, #24
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b086      	sub	sp, #24
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f023 0301 	bic.w	r3, r3, #1
 800ea86:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f003 0301 	and.w	r3, r3, #1
 800ea8e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ea90:	2300      	movs	r3, #0
 800ea92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea94:	f3ef 8305 	mrs	r3, IPSR
 800ea98:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea9a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d003      	beq.n	800eaa8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800eaa0:	f06f 0305 	mvn.w	r3, #5
 800eaa4:	617b      	str	r3, [r7, #20]
 800eaa6:	e01f      	b.n	800eae8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d103      	bne.n	800eab6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800eaae:	f06f 0303 	mvn.w	r3, #3
 800eab2:	617b      	str	r3, [r7, #20]
 800eab4:	e018      	b.n	800eae8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d009      	beq.n	800ead0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800eabc:	6938      	ldr	r0, [r7, #16]
 800eabe:	f000 fcfb 	bl	800f4b8 <xQueueGiveMutexRecursive>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d00f      	beq.n	800eae8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800eac8:	f06f 0302 	mvn.w	r3, #2
 800eacc:	617b      	str	r3, [r7, #20]
 800eace:	e00b      	b.n	800eae8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ead0:	2300      	movs	r3, #0
 800ead2:	2200      	movs	r2, #0
 800ead4:	2100      	movs	r1, #0
 800ead6:	6938      	ldr	r0, [r7, #16]
 800ead8:	f000 fdc2 	bl	800f660 <xQueueGenericSend>
 800eadc:	4603      	mov	r3, r0
 800eade:	2b01      	cmp	r3, #1
 800eae0:	d002      	beq.n	800eae8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800eae2:	f06f 0302 	mvn.w	r3, #2
 800eae6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800eae8:	697b      	ldr	r3, [r7, #20]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3718      	adds	r7, #24
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800eaf2:	b580      	push	{r7, lr}
 800eaf4:	b08a      	sub	sp, #40	; 0x28
 800eaf6:	af02      	add	r7, sp, #8
 800eaf8:	60f8      	str	r0, [r7, #12]
 800eafa:	60b9      	str	r1, [r7, #8]
 800eafc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800eafe:	2300      	movs	r3, #0
 800eb00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb02:	f3ef 8305 	mrs	r3, IPSR
 800eb06:	613b      	str	r3, [r7, #16]
  return(result);
 800eb08:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d175      	bne.n	800ebfa <osSemaphoreNew+0x108>
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d072      	beq.n	800ebfa <osSemaphoreNew+0x108>
 800eb14:	68ba      	ldr	r2, [r7, #8]
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	d86e      	bhi.n	800ebfa <osSemaphoreNew+0x108>
    mem = -1;
 800eb1c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d015      	beq.n	800eb54 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d006      	beq.n	800eb3e <osSemaphoreNew+0x4c>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	2b4f      	cmp	r3, #79	; 0x4f
 800eb36:	d902      	bls.n	800eb3e <osSemaphoreNew+0x4c>
        mem = 1;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	61bb      	str	r3, [r7, #24]
 800eb3c:	e00c      	b.n	800eb58 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	689b      	ldr	r3, [r3, #8]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d108      	bne.n	800eb58 <osSemaphoreNew+0x66>
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d104      	bne.n	800eb58 <osSemaphoreNew+0x66>
          mem = 0;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	61bb      	str	r3, [r7, #24]
 800eb52:	e001      	b.n	800eb58 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800eb54:	2300      	movs	r3, #0
 800eb56:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb5e:	d04c      	beq.n	800ebfa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d128      	bne.n	800ebb8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800eb66:	69bb      	ldr	r3, [r7, #24]
 800eb68:	2b01      	cmp	r3, #1
 800eb6a:	d10a      	bne.n	800eb82 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	689b      	ldr	r3, [r3, #8]
 800eb70:	2203      	movs	r2, #3
 800eb72:	9200      	str	r2, [sp, #0]
 800eb74:	2200      	movs	r2, #0
 800eb76:	2100      	movs	r1, #0
 800eb78:	2001      	movs	r0, #1
 800eb7a:	f000 fb7b 	bl	800f274 <xQueueGenericCreateStatic>
 800eb7e:	61f8      	str	r0, [r7, #28]
 800eb80:	e005      	b.n	800eb8e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800eb82:	2203      	movs	r2, #3
 800eb84:	2100      	movs	r1, #0
 800eb86:	2001      	movs	r0, #1
 800eb88:	f000 fbec 	bl	800f364 <xQueueGenericCreate>
 800eb8c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800eb8e:	69fb      	ldr	r3, [r7, #28]
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d022      	beq.n	800ebda <osSemaphoreNew+0xe8>
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d01f      	beq.n	800ebda <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	2100      	movs	r1, #0
 800eba0:	69f8      	ldr	r0, [r7, #28]
 800eba2:	f000 fd5d 	bl	800f660 <xQueueGenericSend>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d016      	beq.n	800ebda <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ebac:	69f8      	ldr	r0, [r7, #28]
 800ebae:	f001 fa25 	bl	800fffc <vQueueDelete>
            hSemaphore = NULL;
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	61fb      	str	r3, [r7, #28]
 800ebb6:	e010      	b.n	800ebda <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d108      	bne.n	800ebd0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	689b      	ldr	r3, [r3, #8]
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	68b9      	ldr	r1, [r7, #8]
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f000 fce0 	bl	800f58c <xQueueCreateCountingSemaphoreStatic>
 800ebcc:	61f8      	str	r0, [r7, #28]
 800ebce:	e004      	b.n	800ebda <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ebd0:	68b9      	ldr	r1, [r7, #8]
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f000 fd11 	bl	800f5fa <xQueueCreateCountingSemaphore>
 800ebd8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ebda:	69fb      	ldr	r3, [r7, #28]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00c      	beq.n	800ebfa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d003      	beq.n	800ebee <osSemaphoreNew+0xfc>
          name = attr->name;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	617b      	str	r3, [r7, #20]
 800ebec:	e001      	b.n	800ebf2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ebf2:	6979      	ldr	r1, [r7, #20]
 800ebf4:	69f8      	ldr	r0, [r7, #28]
 800ebf6:	f001 fb4d 	bl	8010294 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ebfa:	69fb      	ldr	r3, [r7, #28]
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	3720      	adds	r7, #32
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}

0800ec04 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b086      	sub	sp, #24
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ec12:	2300      	movs	r3, #0
 800ec14:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d103      	bne.n	800ec24 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ec1c:	f06f 0303 	mvn.w	r3, #3
 800ec20:	617b      	str	r3, [r7, #20]
 800ec22:	e039      	b.n	800ec98 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec24:	f3ef 8305 	mrs	r3, IPSR
 800ec28:	60fb      	str	r3, [r7, #12]
  return(result);
 800ec2a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d022      	beq.n	800ec76 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d003      	beq.n	800ec3e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ec36:	f06f 0303 	mvn.w	r3, #3
 800ec3a:	617b      	str	r3, [r7, #20]
 800ec3c:	e02c      	b.n	800ec98 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ec3e:	2300      	movs	r3, #0
 800ec40:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ec42:	f107 0308 	add.w	r3, r7, #8
 800ec46:	461a      	mov	r2, r3
 800ec48:	2100      	movs	r1, #0
 800ec4a:	6938      	ldr	r0, [r7, #16]
 800ec4c:	f001 f91a 	bl	800fe84 <xQueueReceiveFromISR>
 800ec50:	4603      	mov	r3, r0
 800ec52:	2b01      	cmp	r3, #1
 800ec54:	d003      	beq.n	800ec5e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ec56:	f06f 0302 	mvn.w	r3, #2
 800ec5a:	617b      	str	r3, [r7, #20]
 800ec5c:	e01c      	b.n	800ec98 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d019      	beq.n	800ec98 <osSemaphoreAcquire+0x94>
 800ec64:	4b0f      	ldr	r3, [pc, #60]	; (800eca4 <osSemaphoreAcquire+0xa0>)
 800ec66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec6a:	601a      	str	r2, [r3, #0]
 800ec6c:	f3bf 8f4f 	dsb	sy
 800ec70:	f3bf 8f6f 	isb	sy
 800ec74:	e010      	b.n	800ec98 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ec76:	6839      	ldr	r1, [r7, #0]
 800ec78:	6938      	ldr	r0, [r7, #16]
 800ec7a:	f000 fff7 	bl	800fc6c <xQueueSemaphoreTake>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	2b01      	cmp	r3, #1
 800ec82:	d009      	beq.n	800ec98 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ec84:	683b      	ldr	r3, [r7, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d003      	beq.n	800ec92 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ec8a:	f06f 0301 	mvn.w	r3, #1
 800ec8e:	617b      	str	r3, [r7, #20]
 800ec90:	e002      	b.n	800ec98 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ec92:	f06f 0302 	mvn.w	r3, #2
 800ec96:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ec98:	697b      	ldr	r3, [r7, #20]
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	3718      	adds	r7, #24
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	bd80      	pop	{r7, pc}
 800eca2:	bf00      	nop
 800eca4:	e000ed04 	.word	0xe000ed04

0800eca8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d103      	bne.n	800ecc6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ecbe:	f06f 0303 	mvn.w	r3, #3
 800ecc2:	617b      	str	r3, [r7, #20]
 800ecc4:	e02c      	b.n	800ed20 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ecc6:	f3ef 8305 	mrs	r3, IPSR
 800ecca:	60fb      	str	r3, [r7, #12]
  return(result);
 800eccc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d01a      	beq.n	800ed08 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ecd6:	f107 0308 	add.w	r3, r7, #8
 800ecda:	4619      	mov	r1, r3
 800ecdc:	6938      	ldr	r0, [r7, #16]
 800ecde:	f000 fe58 	bl	800f992 <xQueueGiveFromISR>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d003      	beq.n	800ecf0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ece8:	f06f 0302 	mvn.w	r3, #2
 800ecec:	617b      	str	r3, [r7, #20]
 800ecee:	e017      	b.n	800ed20 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d014      	beq.n	800ed20 <osSemaphoreRelease+0x78>
 800ecf6:	4b0d      	ldr	r3, [pc, #52]	; (800ed2c <osSemaphoreRelease+0x84>)
 800ecf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecfc:	601a      	str	r2, [r3, #0]
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	f3bf 8f6f 	isb	sy
 800ed06:	e00b      	b.n	800ed20 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ed08:	2300      	movs	r3, #0
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	6938      	ldr	r0, [r7, #16]
 800ed10:	f000 fca6 	bl	800f660 <xQueueGenericSend>
 800ed14:	4603      	mov	r3, r0
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d002      	beq.n	800ed20 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ed1a:	f06f 0302 	mvn.w	r3, #2
 800ed1e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ed20:	697b      	ldr	r3, [r7, #20]
}
 800ed22:	4618      	mov	r0, r3
 800ed24:	3718      	adds	r7, #24
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd80      	pop	{r7, pc}
 800ed2a:	bf00      	nop
 800ed2c:	e000ed04 	.word	0xe000ed04

0800ed30 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b086      	sub	sp, #24
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800ed3c:	693b      	ldr	r3, [r7, #16]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d102      	bne.n	800ed48 <osSemaphoreGetCount+0x18>
    count = 0U;
 800ed42:	2300      	movs	r3, #0
 800ed44:	617b      	str	r3, [r7, #20]
 800ed46:	e00e      	b.n	800ed66 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed48:	f3ef 8305 	mrs	r3, IPSR
 800ed4c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed4e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d004      	beq.n	800ed5e <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800ed54:	6938      	ldr	r0, [r7, #16]
 800ed56:	f001 f933 	bl	800ffc0 <uxQueueMessagesWaitingFromISR>
 800ed5a:	6178      	str	r0, [r7, #20]
 800ed5c:	e003      	b.n	800ed66 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800ed5e:	6938      	ldr	r0, [r7, #16]
 800ed60:	f001 f910 	bl	800ff84 <uxQueueMessagesWaiting>
 800ed64:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800ed66:	697b      	ldr	r3, [r7, #20]
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3718      	adds	r7, #24
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}

0800ed70 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ed70:	b580      	push	{r7, lr}
 800ed72:	b08a      	sub	sp, #40	; 0x28
 800ed74:	af02      	add	r7, sp, #8
 800ed76:	60f8      	str	r0, [r7, #12]
 800ed78:	60b9      	str	r1, [r7, #8]
 800ed7a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed80:	f3ef 8305 	mrs	r3, IPSR
 800ed84:	613b      	str	r3, [r7, #16]
  return(result);
 800ed86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d15f      	bne.n	800ee4c <osMessageQueueNew+0xdc>
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d05c      	beq.n	800ee4c <osMessageQueueNew+0xdc>
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d059      	beq.n	800ee4c <osMessageQueueNew+0xdc>
    mem = -1;
 800ed98:	f04f 33ff 	mov.w	r3, #4294967295
 800ed9c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d029      	beq.n	800edf8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	689b      	ldr	r3, [r3, #8]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d012      	beq.n	800edd2 <osMessageQueueNew+0x62>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	68db      	ldr	r3, [r3, #12]
 800edb0:	2b4f      	cmp	r3, #79	; 0x4f
 800edb2:	d90e      	bls.n	800edd2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00a      	beq.n	800edd2 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	695a      	ldr	r2, [r3, #20]
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	68b9      	ldr	r1, [r7, #8]
 800edc4:	fb01 f303 	mul.w	r3, r1, r3
 800edc8:	429a      	cmp	r2, r3
 800edca:	d302      	bcc.n	800edd2 <osMessageQueueNew+0x62>
        mem = 1;
 800edcc:	2301      	movs	r3, #1
 800edce:	61bb      	str	r3, [r7, #24]
 800edd0:	e014      	b.n	800edfc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	689b      	ldr	r3, [r3, #8]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d110      	bne.n	800edfc <osMessageQueueNew+0x8c>
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	68db      	ldr	r3, [r3, #12]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d10c      	bne.n	800edfc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d108      	bne.n	800edfc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	695b      	ldr	r3, [r3, #20]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d104      	bne.n	800edfc <osMessageQueueNew+0x8c>
          mem = 0;
 800edf2:	2300      	movs	r3, #0
 800edf4:	61bb      	str	r3, [r7, #24]
 800edf6:	e001      	b.n	800edfc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800edf8:	2300      	movs	r3, #0
 800edfa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	2b01      	cmp	r3, #1
 800ee00:	d10b      	bne.n	800ee1a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	691a      	ldr	r2, [r3, #16]
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	689b      	ldr	r3, [r3, #8]
 800ee0a:	2100      	movs	r1, #0
 800ee0c:	9100      	str	r1, [sp, #0]
 800ee0e:	68b9      	ldr	r1, [r7, #8]
 800ee10:	68f8      	ldr	r0, [r7, #12]
 800ee12:	f000 fa2f 	bl	800f274 <xQueueGenericCreateStatic>
 800ee16:	61f8      	str	r0, [r7, #28]
 800ee18:	e008      	b.n	800ee2c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ee1a:	69bb      	ldr	r3, [r7, #24]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d105      	bne.n	800ee2c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ee20:	2200      	movs	r2, #0
 800ee22:	68b9      	ldr	r1, [r7, #8]
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f000 fa9d 	bl	800f364 <xQueueGenericCreate>
 800ee2a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ee2c:	69fb      	ldr	r3, [r7, #28]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00c      	beq.n	800ee4c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d003      	beq.n	800ee40 <osMessageQueueNew+0xd0>
        name = attr->name;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	617b      	str	r3, [r7, #20]
 800ee3e:	e001      	b.n	800ee44 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ee40:	2300      	movs	r3, #0
 800ee42:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ee44:	6979      	ldr	r1, [r7, #20]
 800ee46:	69f8      	ldr	r0, [r7, #28]
 800ee48:	f001 fa24 	bl	8010294 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ee4c:	69fb      	ldr	r3, [r7, #28]
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3720      	adds	r7, #32
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
	...

0800ee58 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	603b      	str	r3, [r7, #0]
 800ee64:	4613      	mov	r3, r2
 800ee66:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee70:	f3ef 8305 	mrs	r3, IPSR
 800ee74:	617b      	str	r3, [r7, #20]
  return(result);
 800ee76:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d028      	beq.n	800eece <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d005      	beq.n	800ee8e <osMessageQueuePut+0x36>
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d002      	beq.n	800ee8e <osMessageQueuePut+0x36>
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d003      	beq.n	800ee96 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ee8e:	f06f 0303 	mvn.w	r3, #3
 800ee92:	61fb      	str	r3, [r7, #28]
 800ee94:	e038      	b.n	800ef08 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ee96:	2300      	movs	r3, #0
 800ee98:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ee9a:	f107 0210 	add.w	r2, r7, #16
 800ee9e:	2300      	movs	r3, #0
 800eea0:	68b9      	ldr	r1, [r7, #8]
 800eea2:	69b8      	ldr	r0, [r7, #24]
 800eea4:	f000 fcda 	bl	800f85c <xQueueGenericSendFromISR>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d003      	beq.n	800eeb6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800eeae:	f06f 0302 	mvn.w	r3, #2
 800eeb2:	61fb      	str	r3, [r7, #28]
 800eeb4:	e028      	b.n	800ef08 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d025      	beq.n	800ef08 <osMessageQueuePut+0xb0>
 800eebc:	4b15      	ldr	r3, [pc, #84]	; (800ef14 <osMessageQueuePut+0xbc>)
 800eebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eec2:	601a      	str	r2, [r3, #0]
 800eec4:	f3bf 8f4f 	dsb	sy
 800eec8:	f3bf 8f6f 	isb	sy
 800eecc:	e01c      	b.n	800ef08 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800eece:	69bb      	ldr	r3, [r7, #24]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d002      	beq.n	800eeda <osMessageQueuePut+0x82>
 800eed4:	68bb      	ldr	r3, [r7, #8]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d103      	bne.n	800eee2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800eeda:	f06f 0303 	mvn.w	r3, #3
 800eede:	61fb      	str	r3, [r7, #28]
 800eee0:	e012      	b.n	800ef08 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800eee2:	2300      	movs	r3, #0
 800eee4:	683a      	ldr	r2, [r7, #0]
 800eee6:	68b9      	ldr	r1, [r7, #8]
 800eee8:	69b8      	ldr	r0, [r7, #24]
 800eeea:	f000 fbb9 	bl	800f660 <xQueueGenericSend>
 800eeee:	4603      	mov	r3, r0
 800eef0:	2b01      	cmp	r3, #1
 800eef2:	d009      	beq.n	800ef08 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d003      	beq.n	800ef02 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800eefa:	f06f 0301 	mvn.w	r3, #1
 800eefe:	61fb      	str	r3, [r7, #28]
 800ef00:	e002      	b.n	800ef08 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800ef02:	f06f 0302 	mvn.w	r3, #2
 800ef06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ef08:	69fb      	ldr	r3, [r7, #28]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3720      	adds	r7, #32
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}
 800ef12:	bf00      	nop
 800ef14:	e000ed04 	.word	0xe000ed04

0800ef18 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b088      	sub	sp, #32
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	60f8      	str	r0, [r7, #12]
 800ef20:	60b9      	str	r1, [r7, #8]
 800ef22:	607a      	str	r2, [r7, #4]
 800ef24:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef2e:	f3ef 8305 	mrs	r3, IPSR
 800ef32:	617b      	str	r3, [r7, #20]
  return(result);
 800ef34:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d028      	beq.n	800ef8c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d005      	beq.n	800ef4c <osMessageQueueGet+0x34>
 800ef40:	68bb      	ldr	r3, [r7, #8]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d002      	beq.n	800ef4c <osMessageQueueGet+0x34>
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d003      	beq.n	800ef54 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ef4c:	f06f 0303 	mvn.w	r3, #3
 800ef50:	61fb      	str	r3, [r7, #28]
 800ef52:	e037      	b.n	800efc4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ef54:	2300      	movs	r3, #0
 800ef56:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ef58:	f107 0310 	add.w	r3, r7, #16
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	68b9      	ldr	r1, [r7, #8]
 800ef60:	69b8      	ldr	r0, [r7, #24]
 800ef62:	f000 ff8f 	bl	800fe84 <xQueueReceiveFromISR>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b01      	cmp	r3, #1
 800ef6a:	d003      	beq.n	800ef74 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ef6c:	f06f 0302 	mvn.w	r3, #2
 800ef70:	61fb      	str	r3, [r7, #28]
 800ef72:	e027      	b.n	800efc4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d024      	beq.n	800efc4 <osMessageQueueGet+0xac>
 800ef7a:	4b15      	ldr	r3, [pc, #84]	; (800efd0 <osMessageQueueGet+0xb8>)
 800ef7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef80:	601a      	str	r2, [r3, #0]
 800ef82:	f3bf 8f4f 	dsb	sy
 800ef86:	f3bf 8f6f 	isb	sy
 800ef8a:	e01b      	b.n	800efc4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d002      	beq.n	800ef98 <osMessageQueueGet+0x80>
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d103      	bne.n	800efa0 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ef98:	f06f 0303 	mvn.w	r3, #3
 800ef9c:	61fb      	str	r3, [r7, #28]
 800ef9e:	e011      	b.n	800efc4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800efa0:	683a      	ldr	r2, [r7, #0]
 800efa2:	68b9      	ldr	r1, [r7, #8]
 800efa4:	69b8      	ldr	r0, [r7, #24]
 800efa6:	f000 fd81 	bl	800faac <xQueueReceive>
 800efaa:	4603      	mov	r3, r0
 800efac:	2b01      	cmp	r3, #1
 800efae:	d009      	beq.n	800efc4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d003      	beq.n	800efbe <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800efb6:	f06f 0301 	mvn.w	r3, #1
 800efba:	61fb      	str	r3, [r7, #28]
 800efbc:	e002      	b.n	800efc4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800efbe:	f06f 0302 	mvn.w	r3, #2
 800efc2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800efc4:	69fb      	ldr	r3, [r7, #28]
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3720      	adds	r7, #32
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
 800efce:	bf00      	nop
 800efd0:	e000ed04 	.word	0xe000ed04

0800efd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800efd4:	b480      	push	{r7}
 800efd6:	b085      	sub	sp, #20
 800efd8:	af00      	add	r7, sp, #0
 800efda:	60f8      	str	r0, [r7, #12]
 800efdc:	60b9      	str	r1, [r7, #8]
 800efde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	4a07      	ldr	r2, [pc, #28]	; (800f000 <vApplicationGetIdleTaskMemory+0x2c>)
 800efe4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	4a06      	ldr	r2, [pc, #24]	; (800f004 <vApplicationGetIdleTaskMemory+0x30>)
 800efea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2280      	movs	r2, #128	; 0x80
 800eff0:	601a      	str	r2, [r3, #0]
}
 800eff2:	bf00      	nop
 800eff4:	3714      	adds	r7, #20
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr
 800effe:	bf00      	nop
 800f000:	20001588 	.word	0x20001588
 800f004:	20001648 	.word	0x20001648

0800f008 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	4a07      	ldr	r2, [pc, #28]	; (800f034 <vApplicationGetTimerTaskMemory+0x2c>)
 800f018:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f01a:	68bb      	ldr	r3, [r7, #8]
 800f01c:	4a06      	ldr	r2, [pc, #24]	; (800f038 <vApplicationGetTimerTaskMemory+0x30>)
 800f01e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f026:	601a      	str	r2, [r3, #0]
}
 800f028:	bf00      	nop
 800f02a:	3714      	adds	r7, #20
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr
 800f034:	20001848 	.word	0x20001848
 800f038:	20001908 	.word	0x20001908

0800f03c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f03c:	b480      	push	{r7}
 800f03e:	b083      	sub	sp, #12
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f103 0208 	add.w	r2, r3, #8
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f04f 32ff 	mov.w	r2, #4294967295
 800f054:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	f103 0208 	add.w	r2, r3, #8
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f103 0208 	add.w	r2, r3, #8
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	2200      	movs	r2, #0
 800f06e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f070:	bf00      	nop
 800f072:	370c      	adds	r7, #12
 800f074:	46bd      	mov	sp, r7
 800f076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f07a:	4770      	bx	lr

0800f07c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f07c:	b480      	push	{r7}
 800f07e:	b083      	sub	sp, #12
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f08a:	bf00      	nop
 800f08c:	370c      	adds	r7, #12
 800f08e:	46bd      	mov	sp, r7
 800f090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f094:	4770      	bx	lr

0800f096 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f096:	b480      	push	{r7}
 800f098:	b085      	sub	sp, #20
 800f09a:	af00      	add	r7, sp, #0
 800f09c:	6078      	str	r0, [r7, #4]
 800f09e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	685b      	ldr	r3, [r3, #4]
 800f0a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	68fa      	ldr	r2, [r7, #12]
 800f0aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	689a      	ldr	r2, [r3, #8]
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	683a      	ldr	r2, [r7, #0]
 800f0ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	683a      	ldr	r2, [r7, #0]
 800f0c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	687a      	ldr	r2, [r7, #4]
 800f0c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	1c5a      	adds	r2, r3, #1
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	601a      	str	r2, [r3, #0]
}
 800f0d2:	bf00      	nop
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr

0800f0de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f0de:	b480      	push	{r7}
 800f0e0:	b085      	sub	sp, #20
 800f0e2:	af00      	add	r7, sp, #0
 800f0e4:	6078      	str	r0, [r7, #4]
 800f0e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0f4:	d103      	bne.n	800f0fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	691b      	ldr	r3, [r3, #16]
 800f0fa:	60fb      	str	r3, [r7, #12]
 800f0fc:	e00c      	b.n	800f118 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	3308      	adds	r3, #8
 800f102:	60fb      	str	r3, [r7, #12]
 800f104:	e002      	b.n	800f10c <vListInsert+0x2e>
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	60fb      	str	r3, [r7, #12]
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	429a      	cmp	r2, r3
 800f116:	d2f6      	bcs.n	800f106 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	685a      	ldr	r2, [r3, #4]
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	685b      	ldr	r3, [r3, #4]
 800f124:	683a      	ldr	r2, [r7, #0]
 800f126:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	68fa      	ldr	r2, [r7, #12]
 800f12c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	683a      	ldr	r2, [r7, #0]
 800f132:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	687a      	ldr	r2, [r7, #4]
 800f138:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	1c5a      	adds	r2, r3, #1
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	601a      	str	r2, [r3, #0]
}
 800f144:	bf00      	nop
 800f146:	3714      	adds	r7, #20
 800f148:	46bd      	mov	sp, r7
 800f14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14e:	4770      	bx	lr

0800f150 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f150:	b480      	push	{r7}
 800f152:	b085      	sub	sp, #20
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	691b      	ldr	r3, [r3, #16]
 800f15c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	687a      	ldr	r2, [r7, #4]
 800f164:	6892      	ldr	r2, [r2, #8]
 800f166:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	687a      	ldr	r2, [r7, #4]
 800f16e:	6852      	ldr	r2, [r2, #4]
 800f170:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f172:	68fb      	ldr	r3, [r7, #12]
 800f174:	685b      	ldr	r3, [r3, #4]
 800f176:	687a      	ldr	r2, [r7, #4]
 800f178:	429a      	cmp	r2, r3
 800f17a:	d103      	bne.n	800f184 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	689a      	ldr	r2, [r3, #8]
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	1e5a      	subs	r2, r3, #1
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3714      	adds	r7, #20
 800f19c:	46bd      	mov	sp, r7
 800f19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a2:	4770      	bx	lr

0800f1a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b084      	sub	sp, #16
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d10a      	bne.n	800f1ce <xQueueGenericReset+0x2a>
	__asm volatile
 800f1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1bc:	f383 8811 	msr	BASEPRI, r3
 800f1c0:	f3bf 8f6f 	isb	sy
 800f1c4:	f3bf 8f4f 	dsb	sy
 800f1c8:	60bb      	str	r3, [r7, #8]
}
 800f1ca:	bf00      	nop
 800f1cc:	e7fe      	b.n	800f1cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f1ce:	f003 fab9 	bl	8012744 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1da:	68f9      	ldr	r1, [r7, #12]
 800f1dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f1de:	fb01 f303 	mul.w	r3, r1, r3
 800f1e2:	441a      	add	r2, r3
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681a      	ldr	r2, [r3, #0]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1fe:	3b01      	subs	r3, #1
 800f200:	68f9      	ldr	r1, [r7, #12]
 800f202:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f204:	fb01 f303 	mul.w	r3, r1, r3
 800f208:	441a      	add	r2, r3
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	22ff      	movs	r2, #255	; 0xff
 800f212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	22ff      	movs	r2, #255	; 0xff
 800f21a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d114      	bne.n	800f24e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	691b      	ldr	r3, [r3, #16]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d01a      	beq.n	800f262 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	3310      	adds	r3, #16
 800f230:	4618      	mov	r0, r3
 800f232:	f002 f8f5 	bl	8011420 <xTaskRemoveFromEventList>
 800f236:	4603      	mov	r3, r0
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d012      	beq.n	800f262 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f23c:	4b0c      	ldr	r3, [pc, #48]	; (800f270 <xQueueGenericReset+0xcc>)
 800f23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f242:	601a      	str	r2, [r3, #0]
 800f244:	f3bf 8f4f 	dsb	sy
 800f248:	f3bf 8f6f 	isb	sy
 800f24c:	e009      	b.n	800f262 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	3310      	adds	r3, #16
 800f252:	4618      	mov	r0, r3
 800f254:	f7ff fef2 	bl	800f03c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	3324      	adds	r3, #36	; 0x24
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7ff feed 	bl	800f03c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f262:	f003 fa9f 	bl	80127a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f266:	2301      	movs	r3, #1
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3710      	adds	r7, #16
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	e000ed04 	.word	0xe000ed04

0800f274 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f274:	b580      	push	{r7, lr}
 800f276:	b08e      	sub	sp, #56	; 0x38
 800f278:	af02      	add	r7, sp, #8
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	607a      	str	r2, [r7, #4]
 800f280:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d10a      	bne.n	800f29e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f28c:	f383 8811 	msr	BASEPRI, r3
 800f290:	f3bf 8f6f 	isb	sy
 800f294:	f3bf 8f4f 	dsb	sy
 800f298:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f29a:	bf00      	nop
 800f29c:	e7fe      	b.n	800f29c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d10a      	bne.n	800f2ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a8:	f383 8811 	msr	BASEPRI, r3
 800f2ac:	f3bf 8f6f 	isb	sy
 800f2b0:	f3bf 8f4f 	dsb	sy
 800f2b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f2b6:	bf00      	nop
 800f2b8:	e7fe      	b.n	800f2b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d002      	beq.n	800f2c6 <xQueueGenericCreateStatic+0x52>
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d001      	beq.n	800f2ca <xQueueGenericCreateStatic+0x56>
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	e000      	b.n	800f2cc <xQueueGenericCreateStatic+0x58>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d10a      	bne.n	800f2e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f2d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d4:	f383 8811 	msr	BASEPRI, r3
 800f2d8:	f3bf 8f6f 	isb	sy
 800f2dc:	f3bf 8f4f 	dsb	sy
 800f2e0:	623b      	str	r3, [r7, #32]
}
 800f2e2:	bf00      	nop
 800f2e4:	e7fe      	b.n	800f2e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d102      	bne.n	800f2f2 <xQueueGenericCreateStatic+0x7e>
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d101      	bne.n	800f2f6 <xQueueGenericCreateStatic+0x82>
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	e000      	b.n	800f2f8 <xQueueGenericCreateStatic+0x84>
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d10a      	bne.n	800f312 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f300:	f383 8811 	msr	BASEPRI, r3
 800f304:	f3bf 8f6f 	isb	sy
 800f308:	f3bf 8f4f 	dsb	sy
 800f30c:	61fb      	str	r3, [r7, #28]
}
 800f30e:	bf00      	nop
 800f310:	e7fe      	b.n	800f310 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f312:	2350      	movs	r3, #80	; 0x50
 800f314:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	2b50      	cmp	r3, #80	; 0x50
 800f31a:	d00a      	beq.n	800f332 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f320:	f383 8811 	msr	BASEPRI, r3
 800f324:	f3bf 8f6f 	isb	sy
 800f328:	f3bf 8f4f 	dsb	sy
 800f32c:	61bb      	str	r3, [r7, #24]
}
 800f32e:	bf00      	nop
 800f330:	e7fe      	b.n	800f330 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f332:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d00d      	beq.n	800f35a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f340:	2201      	movs	r2, #1
 800f342:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f346:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34c:	9300      	str	r3, [sp, #0]
 800f34e:	4613      	mov	r3, r2
 800f350:	687a      	ldr	r2, [r7, #4]
 800f352:	68b9      	ldr	r1, [r7, #8]
 800f354:	68f8      	ldr	r0, [r7, #12]
 800f356:	f000 f83f 	bl	800f3d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f35c:	4618      	mov	r0, r3
 800f35e:	3730      	adds	r7, #48	; 0x30
 800f360:	46bd      	mov	sp, r7
 800f362:	bd80      	pop	{r7, pc}

0800f364 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f364:	b580      	push	{r7, lr}
 800f366:	b08a      	sub	sp, #40	; 0x28
 800f368:	af02      	add	r7, sp, #8
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	4613      	mov	r3, r2
 800f370:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d10a      	bne.n	800f38e <xQueueGenericCreate+0x2a>
	__asm volatile
 800f378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f37c:	f383 8811 	msr	BASEPRI, r3
 800f380:	f3bf 8f6f 	isb	sy
 800f384:	f3bf 8f4f 	dsb	sy
 800f388:	613b      	str	r3, [r7, #16]
}
 800f38a:	bf00      	nop
 800f38c:	e7fe      	b.n	800f38c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	68ba      	ldr	r2, [r7, #8]
 800f392:	fb02 f303 	mul.w	r3, r2, r3
 800f396:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	3350      	adds	r3, #80	; 0x50
 800f39c:	4618      	mov	r0, r3
 800f39e:	f003 faf3 	bl	8012988 <pvPortMalloc>
 800f3a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d011      	beq.n	800f3ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	3350      	adds	r3, #80	; 0x50
 800f3b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f3b4:	69bb      	ldr	r3, [r7, #24]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f3bc:	79fa      	ldrb	r2, [r7, #7]
 800f3be:	69bb      	ldr	r3, [r7, #24]
 800f3c0:	9300      	str	r3, [sp, #0]
 800f3c2:	4613      	mov	r3, r2
 800f3c4:	697a      	ldr	r2, [r7, #20]
 800f3c6:	68b9      	ldr	r1, [r7, #8]
 800f3c8:	68f8      	ldr	r0, [r7, #12]
 800f3ca:	f000 f805 	bl	800f3d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f3ce:	69bb      	ldr	r3, [r7, #24]
	}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3720      	adds	r7, #32
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	60f8      	str	r0, [r7, #12]
 800f3e0:	60b9      	str	r1, [r7, #8]
 800f3e2:	607a      	str	r2, [r7, #4]
 800f3e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f3e6:	68bb      	ldr	r3, [r7, #8]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d103      	bne.n	800f3f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	69ba      	ldr	r2, [r7, #24]
 800f3f0:	601a      	str	r2, [r3, #0]
 800f3f2:	e002      	b.n	800f3fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f3f4:	69bb      	ldr	r3, [r7, #24]
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f3fa:	69bb      	ldr	r3, [r7, #24]
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f400:	69bb      	ldr	r3, [r7, #24]
 800f402:	68ba      	ldr	r2, [r7, #8]
 800f404:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f406:	2101      	movs	r1, #1
 800f408:	69b8      	ldr	r0, [r7, #24]
 800f40a:	f7ff fecb 	bl	800f1a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f40e:	69bb      	ldr	r3, [r7, #24]
 800f410:	78fa      	ldrb	r2, [r7, #3]
 800f412:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f416:	bf00      	nop
 800f418:	3710      	adds	r7, #16
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b082      	sub	sp, #8
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d00e      	beq.n	800f44a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2200      	movs	r2, #0
 800f430:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2200      	movs	r2, #0
 800f436:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2200      	movs	r2, #0
 800f43c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f43e:	2300      	movs	r3, #0
 800f440:	2200      	movs	r2, #0
 800f442:	2100      	movs	r1, #0
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 f90b 	bl	800f660 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f44a:	bf00      	nop
 800f44c:	3708      	adds	r7, #8
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}

0800f452 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f452:	b580      	push	{r7, lr}
 800f454:	b086      	sub	sp, #24
 800f456:	af00      	add	r7, sp, #0
 800f458:	4603      	mov	r3, r0
 800f45a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f45c:	2301      	movs	r3, #1
 800f45e:	617b      	str	r3, [r7, #20]
 800f460:	2300      	movs	r3, #0
 800f462:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f464:	79fb      	ldrb	r3, [r7, #7]
 800f466:	461a      	mov	r2, r3
 800f468:	6939      	ldr	r1, [r7, #16]
 800f46a:	6978      	ldr	r0, [r7, #20]
 800f46c:	f7ff ff7a 	bl	800f364 <xQueueGenericCreate>
 800f470:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f472:	68f8      	ldr	r0, [r7, #12]
 800f474:	f7ff ffd3 	bl	800f41e <prvInitialiseMutex>

		return xNewQueue;
 800f478:	68fb      	ldr	r3, [r7, #12]
	}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3718      	adds	r7, #24
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}

0800f482 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f482:	b580      	push	{r7, lr}
 800f484:	b088      	sub	sp, #32
 800f486:	af02      	add	r7, sp, #8
 800f488:	4603      	mov	r3, r0
 800f48a:	6039      	str	r1, [r7, #0]
 800f48c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f48e:	2301      	movs	r3, #1
 800f490:	617b      	str	r3, [r7, #20]
 800f492:	2300      	movs	r3, #0
 800f494:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f496:	79fb      	ldrb	r3, [r7, #7]
 800f498:	9300      	str	r3, [sp, #0]
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	2200      	movs	r2, #0
 800f49e:	6939      	ldr	r1, [r7, #16]
 800f4a0:	6978      	ldr	r0, [r7, #20]
 800f4a2:	f7ff fee7 	bl	800f274 <xQueueGenericCreateStatic>
 800f4a6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f4a8:	68f8      	ldr	r0, [r7, #12]
 800f4aa:	f7ff ffb8 	bl	800f41e <prvInitialiseMutex>

		return xNewQueue;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
	}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3718      	adds	r7, #24
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f4b8:	b590      	push	{r4, r7, lr}
 800f4ba:	b087      	sub	sp, #28
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f4c4:	693b      	ldr	r3, [r7, #16]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d10a      	bne.n	800f4e0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800f4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4ce:	f383 8811 	msr	BASEPRI, r3
 800f4d2:	f3bf 8f6f 	isb	sy
 800f4d6:	f3bf 8f4f 	dsb	sy
 800f4da:	60fb      	str	r3, [r7, #12]
}
 800f4dc:	bf00      	nop
 800f4de:	e7fe      	b.n	800f4de <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	689c      	ldr	r4, [r3, #8]
 800f4e4:	f002 f984 	bl	80117f0 <xTaskGetCurrentTaskHandle>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	429c      	cmp	r4, r3
 800f4ec:	d111      	bne.n	800f512 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	68db      	ldr	r3, [r3, #12]
 800f4f2:	1e5a      	subs	r2, r3, #1
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	68db      	ldr	r3, [r3, #12]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d105      	bne.n	800f50c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f500:	2300      	movs	r3, #0
 800f502:	2200      	movs	r2, #0
 800f504:	2100      	movs	r1, #0
 800f506:	6938      	ldr	r0, [r7, #16]
 800f508:	f000 f8aa 	bl	800f660 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f50c:	2301      	movs	r3, #1
 800f50e:	617b      	str	r3, [r7, #20]
 800f510:	e001      	b.n	800f516 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f512:	2300      	movs	r3, #0
 800f514:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f516:	697b      	ldr	r3, [r7, #20]
	}
 800f518:	4618      	mov	r0, r3
 800f51a:	371c      	adds	r7, #28
 800f51c:	46bd      	mov	sp, r7
 800f51e:	bd90      	pop	{r4, r7, pc}

0800f520 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f520:	b590      	push	{r4, r7, lr}
 800f522:	b087      	sub	sp, #28
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
 800f528:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d10a      	bne.n	800f54a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800f534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f538:	f383 8811 	msr	BASEPRI, r3
 800f53c:	f3bf 8f6f 	isb	sy
 800f540:	f3bf 8f4f 	dsb	sy
 800f544:	60fb      	str	r3, [r7, #12]
}
 800f546:	bf00      	nop
 800f548:	e7fe      	b.n	800f548 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f54a:	693b      	ldr	r3, [r7, #16]
 800f54c:	689c      	ldr	r4, [r3, #8]
 800f54e:	f002 f94f 	bl	80117f0 <xTaskGetCurrentTaskHandle>
 800f552:	4603      	mov	r3, r0
 800f554:	429c      	cmp	r4, r3
 800f556:	d107      	bne.n	800f568 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f558:	693b      	ldr	r3, [r7, #16]
 800f55a:	68db      	ldr	r3, [r3, #12]
 800f55c:	1c5a      	adds	r2, r3, #1
 800f55e:	693b      	ldr	r3, [r7, #16]
 800f560:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f562:	2301      	movs	r3, #1
 800f564:	617b      	str	r3, [r7, #20]
 800f566:	e00c      	b.n	800f582 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f568:	6839      	ldr	r1, [r7, #0]
 800f56a:	6938      	ldr	r0, [r7, #16]
 800f56c:	f000 fb7e 	bl	800fc6c <xQueueSemaphoreTake>
 800f570:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d004      	beq.n	800f582 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	1c5a      	adds	r2, r3, #1
 800f57e:	693b      	ldr	r3, [r7, #16]
 800f580:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f582:	697b      	ldr	r3, [r7, #20]
	}
 800f584:	4618      	mov	r0, r3
 800f586:	371c      	adds	r7, #28
 800f588:	46bd      	mov	sp, r7
 800f58a:	bd90      	pop	{r4, r7, pc}

0800f58c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f58c:	b580      	push	{r7, lr}
 800f58e:	b08a      	sub	sp, #40	; 0x28
 800f590:	af02      	add	r7, sp, #8
 800f592:	60f8      	str	r0, [r7, #12]
 800f594:	60b9      	str	r1, [r7, #8]
 800f596:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d10a      	bne.n	800f5b4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800f59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5a2:	f383 8811 	msr	BASEPRI, r3
 800f5a6:	f3bf 8f6f 	isb	sy
 800f5aa:	f3bf 8f4f 	dsb	sy
 800f5ae:	61bb      	str	r3, [r7, #24]
}
 800f5b0:	bf00      	nop
 800f5b2:	e7fe      	b.n	800f5b2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f5b4:	68ba      	ldr	r2, [r7, #8]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d90a      	bls.n	800f5d2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800f5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c0:	f383 8811 	msr	BASEPRI, r3
 800f5c4:	f3bf 8f6f 	isb	sy
 800f5c8:	f3bf 8f4f 	dsb	sy
 800f5cc:	617b      	str	r3, [r7, #20]
}
 800f5ce:	bf00      	nop
 800f5d0:	e7fe      	b.n	800f5d0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f5d2:	2302      	movs	r3, #2
 800f5d4:	9300      	str	r3, [sp, #0]
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	2200      	movs	r2, #0
 800f5da:	2100      	movs	r1, #0
 800f5dc:	68f8      	ldr	r0, [r7, #12]
 800f5de:	f7ff fe49 	bl	800f274 <xQueueGenericCreateStatic>
 800f5e2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d002      	beq.n	800f5f0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f5ea:	69fb      	ldr	r3, [r7, #28]
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f5f0:	69fb      	ldr	r3, [r7, #28]
	}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3720      	adds	r7, #32
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b086      	sub	sp, #24
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
 800f602:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d10a      	bne.n	800f620 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800f60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f60e:	f383 8811 	msr	BASEPRI, r3
 800f612:	f3bf 8f6f 	isb	sy
 800f616:	f3bf 8f4f 	dsb	sy
 800f61a:	613b      	str	r3, [r7, #16]
}
 800f61c:	bf00      	nop
 800f61e:	e7fe      	b.n	800f61e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f620:	683a      	ldr	r2, [r7, #0]
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	429a      	cmp	r2, r3
 800f626:	d90a      	bls.n	800f63e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800f628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f62c:	f383 8811 	msr	BASEPRI, r3
 800f630:	f3bf 8f6f 	isb	sy
 800f634:	f3bf 8f4f 	dsb	sy
 800f638:	60fb      	str	r3, [r7, #12]
}
 800f63a:	bf00      	nop
 800f63c:	e7fe      	b.n	800f63c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f63e:	2202      	movs	r2, #2
 800f640:	2100      	movs	r1, #0
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f7ff fe8e 	bl	800f364 <xQueueGenericCreate>
 800f648:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d002      	beq.n	800f656 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	683a      	ldr	r2, [r7, #0]
 800f654:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f656:	697b      	ldr	r3, [r7, #20]
	}
 800f658:	4618      	mov	r0, r3
 800f65a:	3718      	adds	r7, #24
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b08e      	sub	sp, #56	; 0x38
 800f664:	af00      	add	r7, sp, #0
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
 800f66c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f66e:	2300      	movs	r3, #0
 800f670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d10a      	bne.n	800f692 <xQueueGenericSend+0x32>
	__asm volatile
 800f67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f680:	f383 8811 	msr	BASEPRI, r3
 800f684:	f3bf 8f6f 	isb	sy
 800f688:	f3bf 8f4f 	dsb	sy
 800f68c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f68e:	bf00      	nop
 800f690:	e7fe      	b.n	800f690 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d103      	bne.n	800f6a0 <xQueueGenericSend+0x40>
 800f698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f69a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d101      	bne.n	800f6a4 <xQueueGenericSend+0x44>
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	e000      	b.n	800f6a6 <xQueueGenericSend+0x46>
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10a      	bne.n	800f6c0 <xQueueGenericSend+0x60>
	__asm volatile
 800f6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ae:	f383 8811 	msr	BASEPRI, r3
 800f6b2:	f3bf 8f6f 	isb	sy
 800f6b6:	f3bf 8f4f 	dsb	sy
 800f6ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f6bc:	bf00      	nop
 800f6be:	e7fe      	b.n	800f6be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	2b02      	cmp	r3, #2
 800f6c4:	d103      	bne.n	800f6ce <xQueueGenericSend+0x6e>
 800f6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6ca:	2b01      	cmp	r3, #1
 800f6cc:	d101      	bne.n	800f6d2 <xQueueGenericSend+0x72>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	e000      	b.n	800f6d4 <xQueueGenericSend+0x74>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d10a      	bne.n	800f6ee <xQueueGenericSend+0x8e>
	__asm volatile
 800f6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6dc:	f383 8811 	msr	BASEPRI, r3
 800f6e0:	f3bf 8f6f 	isb	sy
 800f6e4:	f3bf 8f4f 	dsb	sy
 800f6e8:	623b      	str	r3, [r7, #32]
}
 800f6ea:	bf00      	nop
 800f6ec:	e7fe      	b.n	800f6ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6ee:	f002 f88f 	bl	8011810 <xTaskGetSchedulerState>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d102      	bne.n	800f6fe <xQueueGenericSend+0x9e>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d101      	bne.n	800f702 <xQueueGenericSend+0xa2>
 800f6fe:	2301      	movs	r3, #1
 800f700:	e000      	b.n	800f704 <xQueueGenericSend+0xa4>
 800f702:	2300      	movs	r3, #0
 800f704:	2b00      	cmp	r3, #0
 800f706:	d10a      	bne.n	800f71e <xQueueGenericSend+0xbe>
	__asm volatile
 800f708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f70c:	f383 8811 	msr	BASEPRI, r3
 800f710:	f3bf 8f6f 	isb	sy
 800f714:	f3bf 8f4f 	dsb	sy
 800f718:	61fb      	str	r3, [r7, #28]
}
 800f71a:	bf00      	nop
 800f71c:	e7fe      	b.n	800f71c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f71e:	f003 f811 	bl	8012744 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f72a:	429a      	cmp	r2, r3
 800f72c:	d302      	bcc.n	800f734 <xQueueGenericSend+0xd4>
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b02      	cmp	r3, #2
 800f732:	d129      	bne.n	800f788 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f734:	683a      	ldr	r2, [r7, #0]
 800f736:	68b9      	ldr	r1, [r7, #8]
 800f738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f73a:	f000 fc9a 	bl	8010072 <prvCopyDataToQueue>
 800f73e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f744:	2b00      	cmp	r3, #0
 800f746:	d010      	beq.n	800f76a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f74a:	3324      	adds	r3, #36	; 0x24
 800f74c:	4618      	mov	r0, r3
 800f74e:	f001 fe67 	bl	8011420 <xTaskRemoveFromEventList>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d013      	beq.n	800f780 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f758:	4b3f      	ldr	r3, [pc, #252]	; (800f858 <xQueueGenericSend+0x1f8>)
 800f75a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f75e:	601a      	str	r2, [r3, #0]
 800f760:	f3bf 8f4f 	dsb	sy
 800f764:	f3bf 8f6f 	isb	sy
 800f768:	e00a      	b.n	800f780 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d007      	beq.n	800f780 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f770:	4b39      	ldr	r3, [pc, #228]	; (800f858 <xQueueGenericSend+0x1f8>)
 800f772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f776:	601a      	str	r2, [r3, #0]
 800f778:	f3bf 8f4f 	dsb	sy
 800f77c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f780:	f003 f810 	bl	80127a4 <vPortExitCritical>
				return pdPASS;
 800f784:	2301      	movs	r3, #1
 800f786:	e063      	b.n	800f850 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d103      	bne.n	800f796 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f78e:	f003 f809 	bl	80127a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f792:	2300      	movs	r3, #0
 800f794:	e05c      	b.n	800f850 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d106      	bne.n	800f7aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f79c:	f107 0314 	add.w	r3, r7, #20
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f001 fec7 	bl	8011534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f7aa:	f002 fffb 	bl	80127a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f7ae:	f001 fbe1 	bl	8010f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f7b2:	f002 ffc7 	bl	8012744 <vPortEnterCritical>
 800f7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7bc:	b25b      	sxtb	r3, r3
 800f7be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c2:	d103      	bne.n	800f7cc <xQueueGenericSend+0x16c>
 800f7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7d2:	b25b      	sxtb	r3, r3
 800f7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7d8:	d103      	bne.n	800f7e2 <xQueueGenericSend+0x182>
 800f7da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7dc:	2200      	movs	r2, #0
 800f7de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7e2:	f002 ffdf 	bl	80127a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7e6:	1d3a      	adds	r2, r7, #4
 800f7e8:	f107 0314 	add.w	r3, r7, #20
 800f7ec:	4611      	mov	r1, r2
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f001 feb6 	bl	8011560 <xTaskCheckForTimeOut>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d124      	bne.n	800f844 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f7fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f7fc:	f000 fd31 	bl	8010262 <prvIsQueueFull>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d018      	beq.n	800f838 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f808:	3310      	adds	r3, #16
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	4611      	mov	r1, r2
 800f80e:	4618      	mov	r0, r3
 800f810:	f001 fdb6 	bl	8011380 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f816:	f000 fcbc 	bl	8010192 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f81a:	f001 fbb9 	bl	8010f90 <xTaskResumeAll>
 800f81e:	4603      	mov	r3, r0
 800f820:	2b00      	cmp	r3, #0
 800f822:	f47f af7c 	bne.w	800f71e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f826:	4b0c      	ldr	r3, [pc, #48]	; (800f858 <xQueueGenericSend+0x1f8>)
 800f828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f82c:	601a      	str	r2, [r3, #0]
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	f3bf 8f6f 	isb	sy
 800f836:	e772      	b.n	800f71e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f83a:	f000 fcaa 	bl	8010192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f83e:	f001 fba7 	bl	8010f90 <xTaskResumeAll>
 800f842:	e76c      	b.n	800f71e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f846:	f000 fca4 	bl	8010192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f84a:	f001 fba1 	bl	8010f90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f84e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f850:	4618      	mov	r0, r3
 800f852:	3738      	adds	r7, #56	; 0x38
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}
 800f858:	e000ed04 	.word	0xe000ed04

0800f85c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b090      	sub	sp, #64	; 0x40
 800f860:	af00      	add	r7, sp, #0
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	60b9      	str	r1, [r7, #8]
 800f866:	607a      	str	r2, [r7, #4]
 800f868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f86e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f870:	2b00      	cmp	r3, #0
 800f872:	d10a      	bne.n	800f88a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f874:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f878:	f383 8811 	msr	BASEPRI, r3
 800f87c:	f3bf 8f6f 	isb	sy
 800f880:	f3bf 8f4f 	dsb	sy
 800f884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f886:	bf00      	nop
 800f888:	e7fe      	b.n	800f888 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f88a:	68bb      	ldr	r3, [r7, #8]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d103      	bne.n	800f898 <xQueueGenericSendFromISR+0x3c>
 800f890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f894:	2b00      	cmp	r3, #0
 800f896:	d101      	bne.n	800f89c <xQueueGenericSendFromISR+0x40>
 800f898:	2301      	movs	r3, #1
 800f89a:	e000      	b.n	800f89e <xQueueGenericSendFromISR+0x42>
 800f89c:	2300      	movs	r3, #0
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d10a      	bne.n	800f8b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a6:	f383 8811 	msr	BASEPRI, r3
 800f8aa:	f3bf 8f6f 	isb	sy
 800f8ae:	f3bf 8f4f 	dsb	sy
 800f8b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f8b4:	bf00      	nop
 800f8b6:	e7fe      	b.n	800f8b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	2b02      	cmp	r3, #2
 800f8bc:	d103      	bne.n	800f8c6 <xQueueGenericSendFromISR+0x6a>
 800f8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	d101      	bne.n	800f8ca <xQueueGenericSendFromISR+0x6e>
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e000      	b.n	800f8cc <xQueueGenericSendFromISR+0x70>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d10a      	bne.n	800f8e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f8d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8d4:	f383 8811 	msr	BASEPRI, r3
 800f8d8:	f3bf 8f6f 	isb	sy
 800f8dc:	f3bf 8f4f 	dsb	sy
 800f8e0:	623b      	str	r3, [r7, #32]
}
 800f8e2:	bf00      	nop
 800f8e4:	e7fe      	b.n	800f8e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f8e6:	f003 f80f 	bl	8012908 <vPortValidateInterruptPriority>
	__asm volatile
 800f8ea:	f3ef 8211 	mrs	r2, BASEPRI
 800f8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f2:	f383 8811 	msr	BASEPRI, r3
 800f8f6:	f3bf 8f6f 	isb	sy
 800f8fa:	f3bf 8f4f 	dsb	sy
 800f8fe:	61fa      	str	r2, [r7, #28]
 800f900:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800f902:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f904:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f90e:	429a      	cmp	r2, r3
 800f910:	d302      	bcc.n	800f918 <xQueueGenericSendFromISR+0xbc>
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	2b02      	cmp	r3, #2
 800f916:	d12f      	bne.n	800f978 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f91e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f926:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	68b9      	ldr	r1, [r7, #8]
 800f92c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f92e:	f000 fba0 	bl	8010072 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f932:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f93a:	d112      	bne.n	800f962 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f940:	2b00      	cmp	r3, #0
 800f942:	d016      	beq.n	800f972 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f946:	3324      	adds	r3, #36	; 0x24
 800f948:	4618      	mov	r0, r3
 800f94a:	f001 fd69 	bl	8011420 <xTaskRemoveFromEventList>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d00e      	beq.n	800f972 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d00b      	beq.n	800f972 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2201      	movs	r2, #1
 800f95e:	601a      	str	r2, [r3, #0]
 800f960:	e007      	b.n	800f972 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f962:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f966:	3301      	adds	r3, #1
 800f968:	b2db      	uxtb	r3, r3
 800f96a:	b25a      	sxtb	r2, r3
 800f96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f972:	2301      	movs	r3, #1
 800f974:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f976:	e001      	b.n	800f97c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f978:	2300      	movs	r3, #0
 800f97a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f97e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	f383 8811 	msr	BASEPRI, r3
}
 800f986:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3740      	adds	r7, #64	; 0x40
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}

0800f992 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f992:	b580      	push	{r7, lr}
 800f994:	b08e      	sub	sp, #56	; 0x38
 800f996:	af00      	add	r7, sp, #0
 800f998:	6078      	str	r0, [r7, #4]
 800f99a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d10a      	bne.n	800f9bc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800f9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9aa:	f383 8811 	msr	BASEPRI, r3
 800f9ae:	f3bf 8f6f 	isb	sy
 800f9b2:	f3bf 8f4f 	dsb	sy
 800f9b6:	623b      	str	r3, [r7, #32]
}
 800f9b8:	bf00      	nop
 800f9ba:	e7fe      	b.n	800f9ba <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d00a      	beq.n	800f9da <xQueueGiveFromISR+0x48>
	__asm volatile
 800f9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c8:	f383 8811 	msr	BASEPRI, r3
 800f9cc:	f3bf 8f6f 	isb	sy
 800f9d0:	f3bf 8f4f 	dsb	sy
 800f9d4:	61fb      	str	r3, [r7, #28]
}
 800f9d6:	bf00      	nop
 800f9d8:	e7fe      	b.n	800f9d8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d103      	bne.n	800f9ea <xQueueGiveFromISR+0x58>
 800f9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d101      	bne.n	800f9ee <xQueueGiveFromISR+0x5c>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e000      	b.n	800f9f0 <xQueueGiveFromISR+0x5e>
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d10a      	bne.n	800fa0a <xQueueGiveFromISR+0x78>
	__asm volatile
 800f9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	61bb      	str	r3, [r7, #24]
}
 800fa06:	bf00      	nop
 800fa08:	e7fe      	b.n	800fa08 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa0a:	f002 ff7d 	bl	8012908 <vPortValidateInterruptPriority>
	__asm volatile
 800fa0e:	f3ef 8211 	mrs	r2, BASEPRI
 800fa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa16:	f383 8811 	msr	BASEPRI, r3
 800fa1a:	f3bf 8f6f 	isb	sy
 800fa1e:	f3bf 8f4f 	dsb	sy
 800fa22:	617a      	str	r2, [r7, #20]
 800fa24:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fa26:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa28:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa2e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fa36:	429a      	cmp	r2, r3
 800fa38:	d22b      	bcs.n	800fa92 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa46:	1c5a      	adds	r2, r3, #1
 800fa48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fa4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fa50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa54:	d112      	bne.n	800fa7c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fa56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d016      	beq.n	800fa8c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fa5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa60:	3324      	adds	r3, #36	; 0x24
 800fa62:	4618      	mov	r0, r3
 800fa64:	f001 fcdc 	bl	8011420 <xTaskRemoveFromEventList>
 800fa68:	4603      	mov	r3, r0
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d00e      	beq.n	800fa8c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fa6e:	683b      	ldr	r3, [r7, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d00b      	beq.n	800fa8c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	2201      	movs	r2, #1
 800fa78:	601a      	str	r2, [r3, #0]
 800fa7a:	e007      	b.n	800fa8c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fa7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fa80:	3301      	adds	r3, #1
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	b25a      	sxtb	r2, r3
 800fa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	637b      	str	r3, [r7, #52]	; 0x34
 800fa90:	e001      	b.n	800fa96 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fa92:	2300      	movs	r3, #0
 800fa94:	637b      	str	r3, [r7, #52]	; 0x34
 800fa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa98:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	f383 8811 	msr	BASEPRI, r3
}
 800faa0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800faa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3738      	adds	r7, #56	; 0x38
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}

0800faac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b08c      	sub	sp, #48	; 0x30
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fab8:	2300      	movs	r3, #0
 800faba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d10a      	bne.n	800fadc <xQueueReceive+0x30>
	__asm volatile
 800fac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faca:	f383 8811 	msr	BASEPRI, r3
 800face:	f3bf 8f6f 	isb	sy
 800fad2:	f3bf 8f4f 	dsb	sy
 800fad6:	623b      	str	r3, [r7, #32]
}
 800fad8:	bf00      	nop
 800fada:	e7fe      	b.n	800fada <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d103      	bne.n	800faea <xQueueReceive+0x3e>
 800fae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d101      	bne.n	800faee <xQueueReceive+0x42>
 800faea:	2301      	movs	r3, #1
 800faec:	e000      	b.n	800faf0 <xQueueReceive+0x44>
 800faee:	2300      	movs	r3, #0
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d10a      	bne.n	800fb0a <xQueueReceive+0x5e>
	__asm volatile
 800faf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf8:	f383 8811 	msr	BASEPRI, r3
 800fafc:	f3bf 8f6f 	isb	sy
 800fb00:	f3bf 8f4f 	dsb	sy
 800fb04:	61fb      	str	r3, [r7, #28]
}
 800fb06:	bf00      	nop
 800fb08:	e7fe      	b.n	800fb08 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb0a:	f001 fe81 	bl	8011810 <xTaskGetSchedulerState>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d102      	bne.n	800fb1a <xQueueReceive+0x6e>
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d101      	bne.n	800fb1e <xQueueReceive+0x72>
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	e000      	b.n	800fb20 <xQueueReceive+0x74>
 800fb1e:	2300      	movs	r3, #0
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d10a      	bne.n	800fb3a <xQueueReceive+0x8e>
	__asm volatile
 800fb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb28:	f383 8811 	msr	BASEPRI, r3
 800fb2c:	f3bf 8f6f 	isb	sy
 800fb30:	f3bf 8f4f 	dsb	sy
 800fb34:	61bb      	str	r3, [r7, #24]
}
 800fb36:	bf00      	nop
 800fb38:	e7fe      	b.n	800fb38 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb3a:	f002 fe03 	bl	8012744 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fb42:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d01f      	beq.n	800fb8a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fb4a:	68b9      	ldr	r1, [r7, #8]
 800fb4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fb4e:	f000 fafa 	bl	8010146 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fb52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb54:	1e5a      	subs	r2, r3, #1
 800fb56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb58:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb5c:	691b      	ldr	r3, [r3, #16]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d00f      	beq.n	800fb82 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb64:	3310      	adds	r3, #16
 800fb66:	4618      	mov	r0, r3
 800fb68:	f001 fc5a 	bl	8011420 <xTaskRemoveFromEventList>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d007      	beq.n	800fb82 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fb72:	4b3d      	ldr	r3, [pc, #244]	; (800fc68 <xQueueReceive+0x1bc>)
 800fb74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb78:	601a      	str	r2, [r3, #0]
 800fb7a:	f3bf 8f4f 	dsb	sy
 800fb7e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fb82:	f002 fe0f 	bl	80127a4 <vPortExitCritical>
				return pdPASS;
 800fb86:	2301      	movs	r3, #1
 800fb88:	e069      	b.n	800fc5e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d103      	bne.n	800fb98 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fb90:	f002 fe08 	bl	80127a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fb94:	2300      	movs	r3, #0
 800fb96:	e062      	b.n	800fc5e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d106      	bne.n	800fbac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fb9e:	f107 0310 	add.w	r3, r7, #16
 800fba2:	4618      	mov	r0, r3
 800fba4:	f001 fcc6 	bl	8011534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fbac:	f002 fdfa 	bl	80127a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fbb0:	f001 f9e0 	bl	8010f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fbb4:	f002 fdc6 	bl	8012744 <vPortEnterCritical>
 800fbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fbbe:	b25b      	sxtb	r3, r3
 800fbc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbc4:	d103      	bne.n	800fbce <xQueueReceive+0x122>
 800fbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc8:	2200      	movs	r2, #0
 800fbca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbd4:	b25b      	sxtb	r3, r3
 800fbd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbda:	d103      	bne.n	800fbe4 <xQueueReceive+0x138>
 800fbdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbde:	2200      	movs	r2, #0
 800fbe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fbe4:	f002 fdde 	bl	80127a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fbe8:	1d3a      	adds	r2, r7, #4
 800fbea:	f107 0310 	add.w	r3, r7, #16
 800fbee:	4611      	mov	r1, r2
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f001 fcb5 	bl	8011560 <xTaskCheckForTimeOut>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d123      	bne.n	800fc44 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fbfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbfe:	f000 fb1a 	bl	8010236 <prvIsQueueEmpty>
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d017      	beq.n	800fc38 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc0a:	3324      	adds	r3, #36	; 0x24
 800fc0c:	687a      	ldr	r2, [r7, #4]
 800fc0e:	4611      	mov	r1, r2
 800fc10:	4618      	mov	r0, r3
 800fc12:	f001 fbb5 	bl	8011380 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fc16:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc18:	f000 fabb 	bl	8010192 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fc1c:	f001 f9b8 	bl	8010f90 <xTaskResumeAll>
 800fc20:	4603      	mov	r3, r0
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d189      	bne.n	800fb3a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fc26:	4b10      	ldr	r3, [pc, #64]	; (800fc68 <xQueueReceive+0x1bc>)
 800fc28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc2c:	601a      	str	r2, [r3, #0]
 800fc2e:	f3bf 8f4f 	dsb	sy
 800fc32:	f3bf 8f6f 	isb	sy
 800fc36:	e780      	b.n	800fb3a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fc38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc3a:	f000 faaa 	bl	8010192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fc3e:	f001 f9a7 	bl	8010f90 <xTaskResumeAll>
 800fc42:	e77a      	b.n	800fb3a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fc44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc46:	f000 faa4 	bl	8010192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fc4a:	f001 f9a1 	bl	8010f90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fc4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fc50:	f000 faf1 	bl	8010236 <prvIsQueueEmpty>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	f43f af6f 	beq.w	800fb3a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fc5c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fc5e:	4618      	mov	r0, r3
 800fc60:	3730      	adds	r7, #48	; 0x30
 800fc62:	46bd      	mov	sp, r7
 800fc64:	bd80      	pop	{r7, pc}
 800fc66:	bf00      	nop
 800fc68:	e000ed04 	.word	0xe000ed04

0800fc6c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b08e      	sub	sp, #56	; 0x38
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
 800fc74:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc76:	2300      	movs	r3, #0
 800fc78:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d10a      	bne.n	800fc9e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800fc88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc8c:	f383 8811 	msr	BASEPRI, r3
 800fc90:	f3bf 8f6f 	isb	sy
 800fc94:	f3bf 8f4f 	dsb	sy
 800fc98:	623b      	str	r3, [r7, #32]
}
 800fc9a:	bf00      	nop
 800fc9c:	e7fe      	b.n	800fc9c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d00a      	beq.n	800fcbc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800fca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcaa:	f383 8811 	msr	BASEPRI, r3
 800fcae:	f3bf 8f6f 	isb	sy
 800fcb2:	f3bf 8f4f 	dsb	sy
 800fcb6:	61fb      	str	r3, [r7, #28]
}
 800fcb8:	bf00      	nop
 800fcba:	e7fe      	b.n	800fcba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fcbc:	f001 fda8 	bl	8011810 <xTaskGetSchedulerState>
 800fcc0:	4603      	mov	r3, r0
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d102      	bne.n	800fccc <xQueueSemaphoreTake+0x60>
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d101      	bne.n	800fcd0 <xQueueSemaphoreTake+0x64>
 800fccc:	2301      	movs	r3, #1
 800fcce:	e000      	b.n	800fcd2 <xQueueSemaphoreTake+0x66>
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d10a      	bne.n	800fcec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800fcd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcda:	f383 8811 	msr	BASEPRI, r3
 800fcde:	f3bf 8f6f 	isb	sy
 800fce2:	f3bf 8f4f 	dsb	sy
 800fce6:	61bb      	str	r3, [r7, #24]
}
 800fce8:	bf00      	nop
 800fcea:	e7fe      	b.n	800fcea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fcec:	f002 fd2a 	bl	8012744 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fcf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcf4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d024      	beq.n	800fd46 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fcfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcfe:	1e5a      	subs	r2, r3, #1
 800fd00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd02:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d104      	bne.n	800fd16 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fd0c:	f001 fef6 	bl	8011afc <pvTaskIncrementMutexHeldCount>
 800fd10:	4602      	mov	r2, r0
 800fd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd14:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fd16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd18:	691b      	ldr	r3, [r3, #16]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d00f      	beq.n	800fd3e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd20:	3310      	adds	r3, #16
 800fd22:	4618      	mov	r0, r3
 800fd24:	f001 fb7c 	bl	8011420 <xTaskRemoveFromEventList>
 800fd28:	4603      	mov	r3, r0
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d007      	beq.n	800fd3e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fd2e:	4b54      	ldr	r3, [pc, #336]	; (800fe80 <xQueueSemaphoreTake+0x214>)
 800fd30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd34:	601a      	str	r2, [r3, #0]
 800fd36:	f3bf 8f4f 	dsb	sy
 800fd3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fd3e:	f002 fd31 	bl	80127a4 <vPortExitCritical>
				return pdPASS;
 800fd42:	2301      	movs	r3, #1
 800fd44:	e097      	b.n	800fe76 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d111      	bne.n	800fd70 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d00a      	beq.n	800fd68 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800fd52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd56:	f383 8811 	msr	BASEPRI, r3
 800fd5a:	f3bf 8f6f 	isb	sy
 800fd5e:	f3bf 8f4f 	dsb	sy
 800fd62:	617b      	str	r3, [r7, #20]
}
 800fd64:	bf00      	nop
 800fd66:	e7fe      	b.n	800fd66 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fd68:	f002 fd1c 	bl	80127a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	e082      	b.n	800fe76 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d106      	bne.n	800fd84 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd76:	f107 030c 	add.w	r3, r7, #12
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	f001 fbda 	bl	8011534 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd80:	2301      	movs	r3, #1
 800fd82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd84:	f002 fd0e 	bl	80127a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd88:	f001 f8f4 	bl	8010f74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd8c:	f002 fcda 	bl	8012744 <vPortEnterCritical>
 800fd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd96:	b25b      	sxtb	r3, r3
 800fd98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd9c:	d103      	bne.n	800fda6 <xQueueSemaphoreTake+0x13a>
 800fd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda0:	2200      	movs	r2, #0
 800fda2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fdac:	b25b      	sxtb	r3, r3
 800fdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdb2:	d103      	bne.n	800fdbc <xQueueSemaphoreTake+0x150>
 800fdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fdbc:	f002 fcf2 	bl	80127a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fdc0:	463a      	mov	r2, r7
 800fdc2:	f107 030c 	add.w	r3, r7, #12
 800fdc6:	4611      	mov	r1, r2
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f001 fbc9 	bl	8011560 <xTaskCheckForTimeOut>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d132      	bne.n	800fe3a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fdd6:	f000 fa2e 	bl	8010236 <prvIsQueueEmpty>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d026      	beq.n	800fe2e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fde0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d109      	bne.n	800fdfc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800fde8:	f002 fcac 	bl	8012744 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fdec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdee:	689b      	ldr	r3, [r3, #8]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f001 fd2b 	bl	801184c <xTaskPriorityInherit>
 800fdf6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fdf8:	f002 fcd4 	bl	80127a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfe:	3324      	adds	r3, #36	; 0x24
 800fe00:	683a      	ldr	r2, [r7, #0]
 800fe02:	4611      	mov	r1, r2
 800fe04:	4618      	mov	r0, r3
 800fe06:	f001 fabb 	bl	8011380 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fe0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe0c:	f000 f9c1 	bl	8010192 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fe10:	f001 f8be 	bl	8010f90 <xTaskResumeAll>
 800fe14:	4603      	mov	r3, r0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	f47f af68 	bne.w	800fcec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800fe1c:	4b18      	ldr	r3, [pc, #96]	; (800fe80 <xQueueSemaphoreTake+0x214>)
 800fe1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fe22:	601a      	str	r2, [r3, #0]
 800fe24:	f3bf 8f4f 	dsb	sy
 800fe28:	f3bf 8f6f 	isb	sy
 800fe2c:	e75e      	b.n	800fcec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fe2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe30:	f000 f9af 	bl	8010192 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fe34:	f001 f8ac 	bl	8010f90 <xTaskResumeAll>
 800fe38:	e758      	b.n	800fcec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fe3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe3c:	f000 f9a9 	bl	8010192 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fe40:	f001 f8a6 	bl	8010f90 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fe44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe46:	f000 f9f6 	bl	8010236 <prvIsQueueEmpty>
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	f43f af4d 	beq.w	800fcec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fe52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00d      	beq.n	800fe74 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800fe58:	f002 fc74 	bl	8012744 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fe5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fe5e:	f000 f8f0 	bl	8010042 <prvGetDisinheritPriorityAfterTimeout>
 800fe62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fe64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe66:	689b      	ldr	r3, [r3, #8]
 800fe68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f001 fdc4 	bl	80119f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fe70:	f002 fc98 	bl	80127a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fe74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3738      	adds	r7, #56	; 0x38
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	e000ed04 	.word	0xe000ed04

0800fe84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b08e      	sub	sp, #56	; 0x38
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	60f8      	str	r0, [r7, #12]
 800fe8c:	60b9      	str	r1, [r7, #8]
 800fe8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fe94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d10a      	bne.n	800feb0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800fe9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe9e:	f383 8811 	msr	BASEPRI, r3
 800fea2:	f3bf 8f6f 	isb	sy
 800fea6:	f3bf 8f4f 	dsb	sy
 800feaa:	623b      	str	r3, [r7, #32]
}
 800feac:	bf00      	nop
 800feae:	e7fe      	b.n	800feae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d103      	bne.n	800febe <xQueueReceiveFromISR+0x3a>
 800feb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800feba:	2b00      	cmp	r3, #0
 800febc:	d101      	bne.n	800fec2 <xQueueReceiveFromISR+0x3e>
 800febe:	2301      	movs	r3, #1
 800fec0:	e000      	b.n	800fec4 <xQueueReceiveFromISR+0x40>
 800fec2:	2300      	movs	r3, #0
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d10a      	bne.n	800fede <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800fec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fecc:	f383 8811 	msr	BASEPRI, r3
 800fed0:	f3bf 8f6f 	isb	sy
 800fed4:	f3bf 8f4f 	dsb	sy
 800fed8:	61fb      	str	r3, [r7, #28]
}
 800feda:	bf00      	nop
 800fedc:	e7fe      	b.n	800fedc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fede:	f002 fd13 	bl	8012908 <vPortValidateInterruptPriority>
	__asm volatile
 800fee2:	f3ef 8211 	mrs	r2, BASEPRI
 800fee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feea:	f383 8811 	msr	BASEPRI, r3
 800feee:	f3bf 8f6f 	isb	sy
 800fef2:	f3bf 8f4f 	dsb	sy
 800fef6:	61ba      	str	r2, [r7, #24]
 800fef8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fefa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fefc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ff04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d02f      	beq.n	800ff6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ff0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ff14:	68b9      	ldr	r1, [r7, #8]
 800ff16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ff18:	f000 f915 	bl	8010146 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ff1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1e:	1e5a      	subs	r2, r3, #1
 800ff20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ff24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ff28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff2c:	d112      	bne.n	800ff54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ff2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff30:	691b      	ldr	r3, [r3, #16]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d016      	beq.n	800ff64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ff36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff38:	3310      	adds	r3, #16
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f001 fa70 	bl	8011420 <xTaskRemoveFromEventList>
 800ff40:	4603      	mov	r3, r0
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00e      	beq.n	800ff64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d00b      	beq.n	800ff64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	2201      	movs	r2, #1
 800ff50:	601a      	str	r2, [r3, #0]
 800ff52:	e007      	b.n	800ff64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ff54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff58:	3301      	adds	r3, #1
 800ff5a:	b2db      	uxtb	r3, r3
 800ff5c:	b25a      	sxtb	r2, r3
 800ff5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ff64:	2301      	movs	r3, #1
 800ff66:	637b      	str	r3, [r7, #52]	; 0x34
 800ff68:	e001      	b.n	800ff6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	637b      	str	r3, [r7, #52]	; 0x34
 800ff6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff70:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	f383 8811 	msr	BASEPRI, r3
}
 800ff78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3738      	adds	r7, #56	; 0x38
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d10a      	bne.n	800ffa8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800ff92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff96:	f383 8811 	msr	BASEPRI, r3
 800ff9a:	f3bf 8f6f 	isb	sy
 800ff9e:	f3bf 8f4f 	dsb	sy
 800ffa2:	60bb      	str	r3, [r7, #8]
}
 800ffa4:	bf00      	nop
 800ffa6:	e7fe      	b.n	800ffa6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ffa8:	f002 fbcc 	bl	8012744 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffb0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ffb2:	f002 fbf7 	bl	80127a4 <vPortExitCritical>

	return uxReturn;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ffb8:	4618      	mov	r0, r3
 800ffba:	3710      	adds	r7, #16
 800ffbc:	46bd      	mov	sp, r7
 800ffbe:	bd80      	pop	{r7, pc}

0800ffc0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ffc0:	b480      	push	{r7}
 800ffc2:	b087      	sub	sp, #28
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d10a      	bne.n	800ffe8 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800ffd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd6:	f383 8811 	msr	BASEPRI, r3
 800ffda:	f3bf 8f6f 	isb	sy
 800ffde:	f3bf 8f4f 	dsb	sy
 800ffe2:	60fb      	str	r3, [r7, #12]
}
 800ffe4:	bf00      	nop
 800ffe6:	e7fe      	b.n	800ffe6 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ffe8:	697b      	ldr	r3, [r7, #20]
 800ffea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffec:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ffee:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800fff0:	4618      	mov	r0, r3
 800fff2:	371c      	adds	r7, #28
 800fff4:	46bd      	mov	sp, r7
 800fff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffa:	4770      	bx	lr

0800fffc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d10a      	bne.n	8010024 <vQueueDelete+0x28>
	__asm volatile
 801000e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010012:	f383 8811 	msr	BASEPRI, r3
 8010016:	f3bf 8f6f 	isb	sy
 801001a:	f3bf 8f4f 	dsb	sy
 801001e:	60bb      	str	r3, [r7, #8]
}
 8010020:	bf00      	nop
 8010022:	e7fe      	b.n	8010022 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010024:	68f8      	ldr	r0, [r7, #12]
 8010026:	f000 f95f 	bl	80102e8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010030:	2b00      	cmp	r3, #0
 8010032:	d102      	bne.n	801003a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010034:	68f8      	ldr	r0, [r7, #12]
 8010036:	f002 fd77 	bl	8012b28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801003a:	bf00      	nop
 801003c:	3710      	adds	r7, #16
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010042:	b480      	push	{r7}
 8010044:	b085      	sub	sp, #20
 8010046:	af00      	add	r7, sp, #0
 8010048:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801004e:	2b00      	cmp	r3, #0
 8010050:	d006      	beq.n	8010060 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801005c:	60fb      	str	r3, [r7, #12]
 801005e:	e001      	b.n	8010064 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010060:	2300      	movs	r3, #0
 8010062:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010064:	68fb      	ldr	r3, [r7, #12]
	}
 8010066:	4618      	mov	r0, r3
 8010068:	3714      	adds	r7, #20
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr

08010072 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b086      	sub	sp, #24
 8010076:	af00      	add	r7, sp, #0
 8010078:	60f8      	str	r0, [r7, #12]
 801007a:	60b9      	str	r1, [r7, #8]
 801007c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801007e:	2300      	movs	r3, #0
 8010080:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010086:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801008c:	2b00      	cmp	r3, #0
 801008e:	d10d      	bne.n	80100ac <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d14d      	bne.n	8010134 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	689b      	ldr	r3, [r3, #8]
 801009c:	4618      	mov	r0, r3
 801009e:	f001 fc3d 	bl	801191c <xTaskPriorityDisinherit>
 80100a2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2200      	movs	r2, #0
 80100a8:	609a      	str	r2, [r3, #8]
 80100aa:	e043      	b.n	8010134 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d119      	bne.n	80100e6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	6858      	ldr	r0, [r3, #4]
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ba:	461a      	mov	r2, r3
 80100bc:	68b9      	ldr	r1, [r7, #8]
 80100be:	f003 f9ed 	bl	801349c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	685a      	ldr	r2, [r3, #4]
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ca:	441a      	add	r2, r3
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	685a      	ldr	r2, [r3, #4]
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	689b      	ldr	r3, [r3, #8]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d32b      	bcc.n	8010134 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681a      	ldr	r2, [r3, #0]
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	605a      	str	r2, [r3, #4]
 80100e4:	e026      	b.n	8010134 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	68d8      	ldr	r0, [r3, #12]
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100ee:	461a      	mov	r2, r3
 80100f0:	68b9      	ldr	r1, [r7, #8]
 80100f2:	f003 f9d3 	bl	801349c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	68da      	ldr	r2, [r3, #12]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100fe:	425b      	negs	r3, r3
 8010100:	441a      	add	r2, r3
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	68da      	ldr	r2, [r3, #12]
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	429a      	cmp	r2, r3
 8010110:	d207      	bcs.n	8010122 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	689a      	ldr	r2, [r3, #8]
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801011a:	425b      	negs	r3, r3
 801011c:	441a      	add	r2, r3
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	2b02      	cmp	r3, #2
 8010126:	d105      	bne.n	8010134 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d002      	beq.n	8010134 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	3b01      	subs	r3, #1
 8010132:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	1c5a      	adds	r2, r3, #1
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801013c:	697b      	ldr	r3, [r7, #20]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3718      	adds	r7, #24
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}

08010146 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010146:	b580      	push	{r7, lr}
 8010148:	b082      	sub	sp, #8
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
 801014e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010154:	2b00      	cmp	r3, #0
 8010156:	d018      	beq.n	801018a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	68da      	ldr	r2, [r3, #12]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010160:	441a      	add	r2, r3
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	68da      	ldr	r2, [r3, #12]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	689b      	ldr	r3, [r3, #8]
 801016e:	429a      	cmp	r2, r3
 8010170:	d303      	bcc.n	801017a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681a      	ldr	r2, [r3, #0]
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	68d9      	ldr	r1, [r3, #12]
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010182:	461a      	mov	r2, r3
 8010184:	6838      	ldr	r0, [r7, #0]
 8010186:	f003 f989 	bl	801349c <memcpy>
	}
}
 801018a:	bf00      	nop
 801018c:	3708      	adds	r7, #8
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801019a:	f002 fad3 	bl	8012744 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80101a4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80101a6:	e011      	b.n	80101cc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d012      	beq.n	80101d6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	3324      	adds	r3, #36	; 0x24
 80101b4:	4618      	mov	r0, r3
 80101b6:	f001 f933 	bl	8011420 <xTaskRemoveFromEventList>
 80101ba:	4603      	mov	r3, r0
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d001      	beq.n	80101c4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80101c0:	f001 fa30 	bl	8011624 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80101c4:	7bfb      	ldrb	r3, [r7, #15]
 80101c6:	3b01      	subs	r3, #1
 80101c8:	b2db      	uxtb	r3, r3
 80101ca:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80101cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	dce9      	bgt.n	80101a8 <prvUnlockQueue+0x16>
 80101d4:	e000      	b.n	80101d8 <prvUnlockQueue+0x46>
					break;
 80101d6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	22ff      	movs	r2, #255	; 0xff
 80101dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80101e0:	f002 fae0 	bl	80127a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80101e4:	f002 faae 	bl	8012744 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80101ee:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80101f0:	e011      	b.n	8010216 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	691b      	ldr	r3, [r3, #16]
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d012      	beq.n	8010220 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	3310      	adds	r3, #16
 80101fe:	4618      	mov	r0, r3
 8010200:	f001 f90e 	bl	8011420 <xTaskRemoveFromEventList>
 8010204:	4603      	mov	r3, r0
 8010206:	2b00      	cmp	r3, #0
 8010208:	d001      	beq.n	801020e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801020a:	f001 fa0b 	bl	8011624 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801020e:	7bbb      	ldrb	r3, [r7, #14]
 8010210:	3b01      	subs	r3, #1
 8010212:	b2db      	uxtb	r3, r3
 8010214:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010216:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801021a:	2b00      	cmp	r3, #0
 801021c:	dce9      	bgt.n	80101f2 <prvUnlockQueue+0x60>
 801021e:	e000      	b.n	8010222 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010220:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	22ff      	movs	r2, #255	; 0xff
 8010226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801022a:	f002 fabb 	bl	80127a4 <vPortExitCritical>
}
 801022e:	bf00      	nop
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010236:	b580      	push	{r7, lr}
 8010238:	b084      	sub	sp, #16
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801023e:	f002 fa81 	bl	8012744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010246:	2b00      	cmp	r3, #0
 8010248:	d102      	bne.n	8010250 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801024a:	2301      	movs	r3, #1
 801024c:	60fb      	str	r3, [r7, #12]
 801024e:	e001      	b.n	8010254 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010250:	2300      	movs	r3, #0
 8010252:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010254:	f002 faa6 	bl	80127a4 <vPortExitCritical>

	return xReturn;
 8010258:	68fb      	ldr	r3, [r7, #12]
}
 801025a:	4618      	mov	r0, r3
 801025c:	3710      	adds	r7, #16
 801025e:	46bd      	mov	sp, r7
 8010260:	bd80      	pop	{r7, pc}

08010262 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010262:	b580      	push	{r7, lr}
 8010264:	b084      	sub	sp, #16
 8010266:	af00      	add	r7, sp, #0
 8010268:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801026a:	f002 fa6b 	bl	8012744 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010276:	429a      	cmp	r2, r3
 8010278:	d102      	bne.n	8010280 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801027a:	2301      	movs	r3, #1
 801027c:	60fb      	str	r3, [r7, #12]
 801027e:	e001      	b.n	8010284 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010280:	2300      	movs	r3, #0
 8010282:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010284:	f002 fa8e 	bl	80127a4 <vPortExitCritical>

	return xReturn;
 8010288:	68fb      	ldr	r3, [r7, #12]
}
 801028a:	4618      	mov	r0, r3
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
	...

08010294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
 801029c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801029e:	2300      	movs	r3, #0
 80102a0:	60fb      	str	r3, [r7, #12]
 80102a2:	e014      	b.n	80102ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80102a4:	4a0f      	ldr	r2, [pc, #60]	; (80102e4 <vQueueAddToRegistry+0x50>)
 80102a6:	68fb      	ldr	r3, [r7, #12]
 80102a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d10b      	bne.n	80102c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80102b0:	490c      	ldr	r1, [pc, #48]	; (80102e4 <vQueueAddToRegistry+0x50>)
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	683a      	ldr	r2, [r7, #0]
 80102b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80102ba:	4a0a      	ldr	r2, [pc, #40]	; (80102e4 <vQueueAddToRegistry+0x50>)
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	00db      	lsls	r3, r3, #3
 80102c0:	4413      	add	r3, r2
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80102c6:	e006      	b.n	80102d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	3301      	adds	r3, #1
 80102cc:	60fb      	str	r3, [r7, #12]
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	2b07      	cmp	r3, #7
 80102d2:	d9e7      	bls.n	80102a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80102d4:	bf00      	nop
 80102d6:	bf00      	nop
 80102d8:	3714      	adds	r7, #20
 80102da:	46bd      	mov	sp, r7
 80102dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e0:	4770      	bx	lr
 80102e2:	bf00      	nop
 80102e4:	20001d08 	.word	0x20001d08

080102e8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80102e8:	b480      	push	{r7}
 80102ea:	b085      	sub	sp, #20
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80102f0:	2300      	movs	r3, #0
 80102f2:	60fb      	str	r3, [r7, #12]
 80102f4:	e016      	b.n	8010324 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80102f6:	4a10      	ldr	r2, [pc, #64]	; (8010338 <vQueueUnregisterQueue+0x50>)
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	00db      	lsls	r3, r3, #3
 80102fc:	4413      	add	r3, r2
 80102fe:	685b      	ldr	r3, [r3, #4]
 8010300:	687a      	ldr	r2, [r7, #4]
 8010302:	429a      	cmp	r2, r3
 8010304:	d10b      	bne.n	801031e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010306:	4a0c      	ldr	r2, [pc, #48]	; (8010338 <vQueueUnregisterQueue+0x50>)
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2100      	movs	r1, #0
 801030c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010310:	4a09      	ldr	r2, [pc, #36]	; (8010338 <vQueueUnregisterQueue+0x50>)
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	00db      	lsls	r3, r3, #3
 8010316:	4413      	add	r3, r2
 8010318:	2200      	movs	r2, #0
 801031a:	605a      	str	r2, [r3, #4]
				break;
 801031c:	e006      	b.n	801032c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3301      	adds	r3, #1
 8010322:	60fb      	str	r3, [r7, #12]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2b07      	cmp	r3, #7
 8010328:	d9e5      	bls.n	80102f6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801032a:	bf00      	nop
 801032c:	bf00      	nop
 801032e:	3714      	adds	r7, #20
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr
 8010338:	20001d08 	.word	0x20001d08

0801033c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801033c:	b580      	push	{r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801034c:	f002 f9fa 	bl	8012744 <vPortEnterCritical>
 8010350:	697b      	ldr	r3, [r7, #20]
 8010352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010356:	b25b      	sxtb	r3, r3
 8010358:	f1b3 3fff 	cmp.w	r3, #4294967295
 801035c:	d103      	bne.n	8010366 <vQueueWaitForMessageRestricted+0x2a>
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	2200      	movs	r2, #0
 8010362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010366:	697b      	ldr	r3, [r7, #20]
 8010368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801036c:	b25b      	sxtb	r3, r3
 801036e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010372:	d103      	bne.n	801037c <vQueueWaitForMessageRestricted+0x40>
 8010374:	697b      	ldr	r3, [r7, #20]
 8010376:	2200      	movs	r2, #0
 8010378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801037c:	f002 fa12 	bl	80127a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010384:	2b00      	cmp	r3, #0
 8010386:	d106      	bne.n	8010396 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	3324      	adds	r3, #36	; 0x24
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	68b9      	ldr	r1, [r7, #8]
 8010390:	4618      	mov	r0, r3
 8010392:	f001 f819 	bl	80113c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010396:	6978      	ldr	r0, [r7, #20]
 8010398:	f7ff fefb 	bl	8010192 <prvUnlockQueue>
	}
 801039c:	bf00      	nop
 801039e:	3718      	adds	r7, #24
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b08c      	sub	sp, #48	; 0x30
 80103a8:	af02      	add	r7, sp, #8
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	60b9      	str	r1, [r7, #8]
 80103ae:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	2b01      	cmp	r3, #1
 80103b4:	d110      	bne.n	80103d8 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80103b6:	2301      	movs	r3, #1
 80103b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	2b04      	cmp	r3, #4
 80103c0:	d81b      	bhi.n	80103fa <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80103c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103c6:	f383 8811 	msr	BASEPRI, r3
 80103ca:	f3bf 8f6f 	isb	sy
 80103ce:	f3bf 8f4f 	dsb	sy
 80103d2:	61fb      	str	r3, [r7, #28]
}
 80103d4:	bf00      	nop
 80103d6:	e7fe      	b.n	80103d6 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80103d8:	2300      	movs	r3, #0
 80103da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d10a      	bne.n	80103fa <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80103e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103e8:	f383 8811 	msr	BASEPRI, r3
 80103ec:	f3bf 8f6f 	isb	sy
 80103f0:	f3bf 8f4f 	dsb	sy
 80103f4:	61bb      	str	r3, [r7, #24]
}
 80103f6:	bf00      	nop
 80103f8:	e7fe      	b.n	80103f8 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80103fa:	68ba      	ldr	r2, [r7, #8]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d90a      	bls.n	8010418 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8010402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010406:	f383 8811 	msr	BASEPRI, r3
 801040a:	f3bf 8f6f 	isb	sy
 801040e:	f3bf 8f4f 	dsb	sy
 8010412:	617b      	str	r3, [r7, #20]
}
 8010414:	bf00      	nop
 8010416:	e7fe      	b.n	8010416 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8010418:	68bb      	ldr	r3, [r7, #8]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d101      	bne.n	8010422 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 801041e:	2301      	movs	r3, #1
 8010420:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	3301      	adds	r3, #1
 8010426:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	3324      	adds	r3, #36	; 0x24
 801042c:	4618      	mov	r0, r3
 801042e:	f002 faab 	bl	8012988 <pvPortMalloc>
 8010432:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8010434:	6a3b      	ldr	r3, [r7, #32]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d00a      	beq.n	8010450 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 801043a:	6a3b      	ldr	r3, [r7, #32]
 801043c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8010440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010444:	9300      	str	r3, [sp, #0]
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	68fa      	ldr	r2, [r7, #12]
 801044a:	6a38      	ldr	r0, [r7, #32]
 801044c:	f000 fafd 	bl	8010a4a <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8010450:	6a3b      	ldr	r3, [r7, #32]
	}
 8010452:	4618      	mov	r0, r3
 8010454:	3728      	adds	r7, #40	; 0x28
 8010456:	46bd      	mov	sp, r7
 8010458:	bd80      	pop	{r7, pc}

0801045a <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 801045a:	b480      	push	{r7}
 801045c:	b087      	sub	sp, #28
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d10a      	bne.n	8010482 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 801046c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010470:	f383 8811 	msr	BASEPRI, r3
 8010474:	f3bf 8f6f 	isb	sy
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	60fb      	str	r3, [r7, #12]
}
 801047e:	bf00      	nop
 8010480:	e7fe      	b.n	8010480 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8010482:	693b      	ldr	r3, [r7, #16]
 8010484:	689a      	ldr	r2, [r3, #8]
 8010486:	693b      	ldr	r3, [r7, #16]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	4413      	add	r3, r2
 801048c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 801048e:	693b      	ldr	r3, [r7, #16]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	697a      	ldr	r2, [r7, #20]
 8010494:	1ad3      	subs	r3, r2, r3
 8010496:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	3b01      	subs	r3, #1
 801049c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	689b      	ldr	r3, [r3, #8]
 80104a2:	697a      	ldr	r2, [r7, #20]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d304      	bcc.n	80104b2 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	689b      	ldr	r3, [r3, #8]
 80104ac:	697a      	ldr	r2, [r7, #20]
 80104ae:	1ad3      	subs	r3, r2, r3
 80104b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80104b2:	697b      	ldr	r3, [r7, #20]
}
 80104b4:	4618      	mov	r0, r3
 80104b6:	371c      	adds	r7, #28
 80104b8:	46bd      	mov	sp, r7
 80104ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104be:	4770      	bx	lr

080104c0 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b090      	sub	sp, #64	; 0x40
 80104c4:	af02      	add	r7, sp, #8
 80104c6:	60f8      	str	r0, [r7, #12]
 80104c8:	60b9      	str	r1, [r7, #8]
 80104ca:	607a      	str	r2, [r7, #4]
 80104cc:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 80104d2:	2300      	movs	r3, #0
 80104d4:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d10a      	bne.n	80104f6 <xStreamBufferSend+0x36>
	__asm volatile
 80104e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104e4:	f383 8811 	msr	BASEPRI, r3
 80104e8:	f3bf 8f6f 	isb	sy
 80104ec:	f3bf 8f4f 	dsb	sy
 80104f0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80104f2:	bf00      	nop
 80104f4:	e7fe      	b.n	80104f4 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 80104f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d10a      	bne.n	8010512 <xStreamBufferSend+0x52>
	__asm volatile
 80104fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010500:	f383 8811 	msr	BASEPRI, r3
 8010504:	f3bf 8f6f 	isb	sy
 8010508:	f3bf 8f4f 	dsb	sy
 801050c:	623b      	str	r3, [r7, #32]
}
 801050e:	bf00      	nop
 8010510:	e7fe      	b.n	8010510 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8010512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010514:	7f1b      	ldrb	r3, [r3, #28]
 8010516:	f003 0301 	and.w	r3, r3, #1
 801051a:	2b00      	cmp	r3, #0
 801051c:	d011      	beq.n	8010542 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 801051e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010520:	3304      	adds	r3, #4
 8010522:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8010524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	429a      	cmp	r2, r3
 801052a:	d80a      	bhi.n	8010542 <xStreamBufferSend+0x82>
	__asm volatile
 801052c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010530:	f383 8811 	msr	BASEPRI, r3
 8010534:	f3bf 8f6f 	isb	sy
 8010538:	f3bf 8f4f 	dsb	sy
 801053c:	61fb      	str	r3, [r7, #28]
}
 801053e:	bf00      	nop
 8010540:	e7fe      	b.n	8010540 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8010542:	683b      	ldr	r3, [r7, #0]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d03e      	beq.n	80105c6 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8010548:	f107 0310 	add.w	r3, r7, #16
 801054c:	4618      	mov	r0, r3
 801054e:	f000 ffcb 	bl	80114e8 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8010552:	f002 f8f7 	bl	8012744 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8010556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010558:	f7ff ff7f 	bl	801045a <xStreamBufferSpacesAvailable>
 801055c:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 801055e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010562:	429a      	cmp	r2, r3
 8010564:	d217      	bcs.n	8010596 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8010566:	2000      	movs	r0, #0
 8010568:	f001 fbfa 	bl	8011d60 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 801056c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056e:	695b      	ldr	r3, [r3, #20]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d00a      	beq.n	801058a <xStreamBufferSend+0xca>
	__asm volatile
 8010574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010578:	f383 8811 	msr	BASEPRI, r3
 801057c:	f3bf 8f6f 	isb	sy
 8010580:	f3bf 8f4f 	dsb	sy
 8010584:	61bb      	str	r3, [r7, #24]
}
 8010586:	bf00      	nop
 8010588:	e7fe      	b.n	8010588 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 801058a:	f001 f931 	bl	80117f0 <xTaskGetCurrentTaskHandle>
 801058e:	4602      	mov	r2, r0
 8010590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010592:	615a      	str	r2, [r3, #20]
 8010594:	e002      	b.n	801059c <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8010596:	f002 f905 	bl	80127a4 <vPortExitCritical>
					break;
 801059a:	e014      	b.n	80105c6 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 801059c:	f002 f902 	bl	80127a4 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	2200      	movs	r2, #0
 80105a4:	2100      	movs	r1, #0
 80105a6:	2000      	movs	r0, #0
 80105a8:	f001 fabc 	bl	8011b24 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 80105ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ae:	2200      	movs	r2, #0
 80105b0:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 80105b2:	463a      	mov	r2, r7
 80105b4:	f107 0310 	add.w	r3, r7, #16
 80105b8:	4611      	mov	r1, r2
 80105ba:	4618      	mov	r0, r3
 80105bc:	f000 ffd0 	bl	8011560 <xTaskCheckForTimeOut>
 80105c0:	4603      	mov	r3, r0
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d0c5      	beq.n	8010552 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 80105c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d103      	bne.n	80105d4 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80105cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105ce:	f7ff ff44 	bl	801045a <xStreamBufferSpacesAvailable>
 80105d2:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80105d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d6:	9300      	str	r3, [sp, #0]
 80105d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105da:	687a      	ldr	r2, [r7, #4]
 80105dc:	68b9      	ldr	r1, [r7, #8]
 80105de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105e0:	f000 f823 	bl	801062a <prvWriteMessageToBuffer>
 80105e4:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 80105e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d019      	beq.n	8010620 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80105ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105ee:	f000 fa0c 	bl	8010a0a <prvBytesInBuffer>
 80105f2:	4602      	mov	r2, r0
 80105f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f6:	68db      	ldr	r3, [r3, #12]
 80105f8:	429a      	cmp	r2, r3
 80105fa:	d311      	bcc.n	8010620 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 80105fc:	f000 fcba 	bl	8010f74 <vTaskSuspendAll>
 8010600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010602:	691b      	ldr	r3, [r3, #16]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d009      	beq.n	801061c <xStreamBufferSend+0x15c>
 8010608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801060a:	6918      	ldr	r0, [r3, #16]
 801060c:	2300      	movs	r3, #0
 801060e:	2200      	movs	r2, #0
 8010610:	2100      	movs	r1, #0
 8010612:	f001 fae7 	bl	8011be4 <xTaskGenericNotify>
 8010616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010618:	2200      	movs	r2, #0
 801061a:	611a      	str	r2, [r3, #16]
 801061c:	f000 fcb8 	bl	8010f90 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8010620:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010622:	4618      	mov	r0, r3
 8010624:	3738      	adds	r7, #56	; 0x38
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}

0801062a <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 801062a:	b580      	push	{r7, lr}
 801062c:	b086      	sub	sp, #24
 801062e:	af00      	add	r7, sp, #0
 8010630:	60f8      	str	r0, [r7, #12]
 8010632:	60b9      	str	r1, [r7, #8]
 8010634:	607a      	str	r2, [r7, #4]
 8010636:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8010638:	683b      	ldr	r3, [r7, #0]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d102      	bne.n	8010644 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 801063e:	2300      	movs	r3, #0
 8010640:	617b      	str	r3, [r7, #20]
 8010642:	e01d      	b.n	8010680 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8010644:	68fb      	ldr	r3, [r7, #12]
 8010646:	7f1b      	ldrb	r3, [r3, #28]
 8010648:	f003 0301 	and.w	r3, r3, #1
 801064c:	2b00      	cmp	r3, #0
 801064e:	d108      	bne.n	8010662 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8010650:	2301      	movs	r3, #1
 8010652:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	4293      	cmp	r3, r2
 801065a:	bf28      	it	cs
 801065c:	4613      	movcs	r3, r2
 801065e:	607b      	str	r3, [r7, #4]
 8010660:	e00e      	b.n	8010680 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8010662:	683a      	ldr	r2, [r7, #0]
 8010664:	6a3b      	ldr	r3, [r7, #32]
 8010666:	429a      	cmp	r2, r3
 8010668:	d308      	bcc.n	801067c <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 801066a:	2301      	movs	r3, #1
 801066c:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 801066e:	1d3b      	adds	r3, r7, #4
 8010670:	2204      	movs	r2, #4
 8010672:	4619      	mov	r1, r3
 8010674:	68f8      	ldr	r0, [r7, #12]
 8010676:	f000 f8dc 	bl	8010832 <prvWriteBytesToBuffer>
 801067a:	e001      	b.n	8010680 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 801067c:	2300      	movs	r3, #0
 801067e:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8010680:	697b      	ldr	r3, [r7, #20]
 8010682:	2b00      	cmp	r3, #0
 8010684:	d007      	beq.n	8010696 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	461a      	mov	r2, r3
 801068a:	68b9      	ldr	r1, [r7, #8]
 801068c:	68f8      	ldr	r0, [r7, #12]
 801068e:	f000 f8d0 	bl	8010832 <prvWriteBytesToBuffer>
 8010692:	6138      	str	r0, [r7, #16]
 8010694:	e001      	b.n	801069a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8010696:	2300      	movs	r3, #0
 8010698:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 801069a:	693b      	ldr	r3, [r7, #16]
}
 801069c:	4618      	mov	r0, r3
 801069e:	3718      	adds	r7, #24
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b08e      	sub	sp, #56	; 0x38
 80106a8:	af02      	add	r7, sp, #8
 80106aa:	60f8      	str	r0, [r7, #12]
 80106ac:	60b9      	str	r1, [r7, #8]
 80106ae:	607a      	str	r2, [r7, #4]
 80106b0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80106b2:	68fb      	ldr	r3, [r7, #12]
 80106b4:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80106b6:	2300      	movs	r3, #0
 80106b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d10a      	bne.n	80106d6 <xStreamBufferReceive+0x32>
	__asm volatile
 80106c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c4:	f383 8811 	msr	BASEPRI, r3
 80106c8:	f3bf 8f6f 	isb	sy
 80106cc:	f3bf 8f4f 	dsb	sy
 80106d0:	61fb      	str	r3, [r7, #28]
}
 80106d2:	bf00      	nop
 80106d4:	e7fe      	b.n	80106d4 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80106d6:	6a3b      	ldr	r3, [r7, #32]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d10a      	bne.n	80106f2 <xStreamBufferReceive+0x4e>
	__asm volatile
 80106dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106e0:	f383 8811 	msr	BASEPRI, r3
 80106e4:	f3bf 8f6f 	isb	sy
 80106e8:	f3bf 8f4f 	dsb	sy
 80106ec:	61bb      	str	r3, [r7, #24]
}
 80106ee:	bf00      	nop
 80106f0:	e7fe      	b.n	80106f0 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80106f2:	6a3b      	ldr	r3, [r7, #32]
 80106f4:	7f1b      	ldrb	r3, [r3, #28]
 80106f6:	f003 0301 	and.w	r3, r3, #1
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d002      	beq.n	8010704 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80106fe:	2304      	movs	r3, #4
 8010700:	627b      	str	r3, [r7, #36]	; 0x24
 8010702:	e001      	b.n	8010708 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8010704:	2300      	movs	r3, #0
 8010706:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d034      	beq.n	8010778 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 801070e:	f002 f819 	bl	8012744 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8010712:	6a38      	ldr	r0, [r7, #32]
 8010714:	f000 f979 	bl	8010a0a <prvBytesInBuffer>
 8010718:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 801071a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071e:	429a      	cmp	r2, r3
 8010720:	d816      	bhi.n	8010750 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8010722:	2000      	movs	r0, #0
 8010724:	f001 fb1c 	bl	8011d60 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8010728:	6a3b      	ldr	r3, [r7, #32]
 801072a:	691b      	ldr	r3, [r3, #16]
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00a      	beq.n	8010746 <xStreamBufferReceive+0xa2>
	__asm volatile
 8010730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010734:	f383 8811 	msr	BASEPRI, r3
 8010738:	f3bf 8f6f 	isb	sy
 801073c:	f3bf 8f4f 	dsb	sy
 8010740:	617b      	str	r3, [r7, #20]
}
 8010742:	bf00      	nop
 8010744:	e7fe      	b.n	8010744 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8010746:	f001 f853 	bl	80117f0 <xTaskGetCurrentTaskHandle>
 801074a:	4602      	mov	r2, r0
 801074c:	6a3b      	ldr	r3, [r7, #32]
 801074e:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010750:	f002 f828 	bl	80127a4 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8010754:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010758:	429a      	cmp	r2, r3
 801075a:	d811      	bhi.n	8010780 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 801075c:	683b      	ldr	r3, [r7, #0]
 801075e:	2200      	movs	r2, #0
 8010760:	2100      	movs	r1, #0
 8010762:	2000      	movs	r0, #0
 8010764:	f001 f9de 	bl	8011b24 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8010768:	6a3b      	ldr	r3, [r7, #32]
 801076a:	2200      	movs	r2, #0
 801076c:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 801076e:	6a38      	ldr	r0, [r7, #32]
 8010770:	f000 f94b 	bl	8010a0a <prvBytesInBuffer>
 8010774:	62b8      	str	r0, [r7, #40]	; 0x28
 8010776:	e003      	b.n	8010780 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8010778:	6a38      	ldr	r0, [r7, #32]
 801077a:	f000 f946 	bl	8010a0a <prvBytesInBuffer>
 801077e:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8010780:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010784:	429a      	cmp	r2, r3
 8010786:	d91d      	bls.n	80107c4 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8010788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801078a:	9300      	str	r3, [sp, #0]
 801078c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078e:	687a      	ldr	r2, [r7, #4]
 8010790:	68b9      	ldr	r1, [r7, #8]
 8010792:	6a38      	ldr	r0, [r7, #32]
 8010794:	f000 f81b 	bl	80107ce <prvReadMessageFromBuffer>
 8010798:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 801079a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801079c:	2b00      	cmp	r3, #0
 801079e:	d011      	beq.n	80107c4 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80107a0:	f000 fbe8 	bl	8010f74 <vTaskSuspendAll>
 80107a4:	6a3b      	ldr	r3, [r7, #32]
 80107a6:	695b      	ldr	r3, [r3, #20]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d009      	beq.n	80107c0 <xStreamBufferReceive+0x11c>
 80107ac:	6a3b      	ldr	r3, [r7, #32]
 80107ae:	6958      	ldr	r0, [r3, #20]
 80107b0:	2300      	movs	r3, #0
 80107b2:	2200      	movs	r2, #0
 80107b4:	2100      	movs	r1, #0
 80107b6:	f001 fa15 	bl	8011be4 <xTaskGenericNotify>
 80107ba:	6a3b      	ldr	r3, [r7, #32]
 80107bc:	2200      	movs	r2, #0
 80107be:	615a      	str	r2, [r3, #20]
 80107c0:	f000 fbe6 	bl	8010f90 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80107c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80107c6:	4618      	mov	r0, r3
 80107c8:	3730      	adds	r7, #48	; 0x30
 80107ca:	46bd      	mov	sp, r7
 80107cc:	bd80      	pop	{r7, pc}

080107ce <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80107ce:	b580      	push	{r7, lr}
 80107d0:	b088      	sub	sp, #32
 80107d2:	af00      	add	r7, sp, #0
 80107d4:	60f8      	str	r0, [r7, #12]
 80107d6:	60b9      	str	r1, [r7, #8]
 80107d8:	607a      	str	r2, [r7, #4]
 80107da:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80107dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d019      	beq.n	8010816 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80107e8:	f107 0110 	add.w	r1, r7, #16
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107f0:	68f8      	ldr	r0, [r7, #12]
 80107f2:	f000 f890 	bl	8010916 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80107f6:	693b      	ldr	r3, [r7, #16]
 80107f8:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80107fa:	683a      	ldr	r2, [r7, #0]
 80107fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107fe:	1ad3      	subs	r3, r2, r3
 8010800:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8010802:	69fa      	ldr	r2, [r7, #28]
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	429a      	cmp	r2, r3
 8010808:	d907      	bls.n	801081a <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	69ba      	ldr	r2, [r7, #24]
 801080e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8010810:	2300      	movs	r3, #0
 8010812:	61fb      	str	r3, [r7, #28]
 8010814:	e001      	b.n	801081a <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	69fa      	ldr	r2, [r7, #28]
 801081e:	68b9      	ldr	r1, [r7, #8]
 8010820:	68f8      	ldr	r0, [r7, #12]
 8010822:	f000 f878 	bl	8010916 <prvReadBytesFromBuffer>
 8010826:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8010828:	697b      	ldr	r3, [r7, #20]
}
 801082a:	4618      	mov	r0, r3
 801082c:	3720      	adds	r7, #32
 801082e:	46bd      	mov	sp, r7
 8010830:	bd80      	pop	{r7, pc}

08010832 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8010832:	b580      	push	{r7, lr}
 8010834:	b08a      	sub	sp, #40	; 0x28
 8010836:	af00      	add	r7, sp, #0
 8010838:	60f8      	str	r0, [r7, #12]
 801083a:	60b9      	str	r1, [r7, #8]
 801083c:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d10a      	bne.n	801085a <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8010844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	61fb      	str	r3, [r7, #28]
}
 8010856:	bf00      	nop
 8010858:	e7fe      	b.n	8010858 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	685b      	ldr	r3, [r3, #4]
 801085e:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	689a      	ldr	r2, [r3, #8]
 8010864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	687a      	ldr	r2, [r7, #4]
 801086a:	4293      	cmp	r3, r2
 801086c:	bf28      	it	cs
 801086e:	4613      	movcs	r3, r2
 8010870:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8010872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010874:	6a3b      	ldr	r3, [r7, #32]
 8010876:	441a      	add	r2, r3
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	689b      	ldr	r3, [r3, #8]
 801087c:	429a      	cmp	r2, r3
 801087e:	d90a      	bls.n	8010896 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8010880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010884:	f383 8811 	msr	BASEPRI, r3
 8010888:	f3bf 8f6f 	isb	sy
 801088c:	f3bf 8f4f 	dsb	sy
 8010890:	61bb      	str	r3, [r7, #24]
}
 8010892:	bf00      	nop
 8010894:	e7fe      	b.n	8010894 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	699a      	ldr	r2, [r3, #24]
 801089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801089c:	4413      	add	r3, r2
 801089e:	6a3a      	ldr	r2, [r7, #32]
 80108a0:	68b9      	ldr	r1, [r7, #8]
 80108a2:	4618      	mov	r0, r3
 80108a4:	f002 fdfa 	bl	801349c <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80108a8:	687a      	ldr	r2, [r7, #4]
 80108aa:	6a3b      	ldr	r3, [r7, #32]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d91c      	bls.n	80108ea <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	6a3b      	ldr	r3, [r7, #32]
 80108b4:	1ad2      	subs	r2, r2, r3
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	689b      	ldr	r3, [r3, #8]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	d90a      	bls.n	80108d4 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 80108be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c2:	f383 8811 	msr	BASEPRI, r3
 80108c6:	f3bf 8f6f 	isb	sy
 80108ca:	f3bf 8f4f 	dsb	sy
 80108ce:	617b      	str	r3, [r7, #20]
}
 80108d0:	bf00      	nop
 80108d2:	e7fe      	b.n	80108d2 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	6998      	ldr	r0, [r3, #24]
 80108d8:	68ba      	ldr	r2, [r7, #8]
 80108da:	6a3b      	ldr	r3, [r7, #32]
 80108dc:	18d1      	adds	r1, r2, r3
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	1ad3      	subs	r3, r2, r3
 80108e4:	461a      	mov	r2, r3
 80108e6:	f002 fdd9 	bl	801349c <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80108ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	4413      	add	r3, r2
 80108f0:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d304      	bcc.n	8010906 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	689b      	ldr	r3, [r3, #8]
 8010900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010902:	1ad3      	subs	r3, r2, r3
 8010904:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801090a:	605a      	str	r2, [r3, #4]

	return xCount;
 801090c:	687b      	ldr	r3, [r7, #4]
}
 801090e:	4618      	mov	r0, r3
 8010910:	3728      	adds	r7, #40	; 0x28
 8010912:	46bd      	mov	sp, r7
 8010914:	bd80      	pop	{r7, pc}

08010916 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8010916:	b580      	push	{r7, lr}
 8010918:	b08a      	sub	sp, #40	; 0x28
 801091a:	af00      	add	r7, sp, #0
 801091c:	60f8      	str	r0, [r7, #12]
 801091e:	60b9      	str	r1, [r7, #8]
 8010920:	607a      	str	r2, [r7, #4]
 8010922:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8010924:	687a      	ldr	r2, [r7, #4]
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	4293      	cmp	r3, r2
 801092a:	bf28      	it	cs
 801092c:	4613      	movcs	r3, r2
 801092e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8010930:	6a3b      	ldr	r3, [r7, #32]
 8010932:	2b00      	cmp	r3, #0
 8010934:	d064      	beq.n	8010a00 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	689a      	ldr	r2, [r3, #8]
 8010940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010942:	1ad3      	subs	r3, r2, r3
 8010944:	6a3a      	ldr	r2, [r7, #32]
 8010946:	4293      	cmp	r3, r2
 8010948:	bf28      	it	cs
 801094a:	4613      	movcs	r3, r2
 801094c:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 801094e:	69fa      	ldr	r2, [r7, #28]
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	429a      	cmp	r2, r3
 8010954:	d90a      	bls.n	801096c <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8010956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095a:	f383 8811 	msr	BASEPRI, r3
 801095e:	f3bf 8f6f 	isb	sy
 8010962:	f3bf 8f4f 	dsb	sy
 8010966:	61bb      	str	r3, [r7, #24]
}
 8010968:	bf00      	nop
 801096a:	e7fe      	b.n	801096a <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 801096c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801096e:	69fb      	ldr	r3, [r7, #28]
 8010970:	441a      	add	r2, r3
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	689b      	ldr	r3, [r3, #8]
 8010976:	429a      	cmp	r2, r3
 8010978:	d90a      	bls.n	8010990 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 801097a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801097e:	f383 8811 	msr	BASEPRI, r3
 8010982:	f3bf 8f6f 	isb	sy
 8010986:	f3bf 8f4f 	dsb	sy
 801098a:	617b      	str	r3, [r7, #20]
}
 801098c:	bf00      	nop
 801098e:	e7fe      	b.n	801098e <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	699a      	ldr	r2, [r3, #24]
 8010994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010996:	4413      	add	r3, r2
 8010998:	69fa      	ldr	r2, [r7, #28]
 801099a:	4619      	mov	r1, r3
 801099c:	68b8      	ldr	r0, [r7, #8]
 801099e:	f002 fd7d 	bl	801349c <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80109a2:	6a3a      	ldr	r2, [r7, #32]
 80109a4:	69fb      	ldr	r3, [r7, #28]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d919      	bls.n	80109de <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80109aa:	6a3a      	ldr	r2, [r7, #32]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d90a      	bls.n	80109c8 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 80109b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109b6:	f383 8811 	msr	BASEPRI, r3
 80109ba:	f3bf 8f6f 	isb	sy
 80109be:	f3bf 8f4f 	dsb	sy
 80109c2:	613b      	str	r3, [r7, #16]
}
 80109c4:	bf00      	nop
 80109c6:	e7fe      	b.n	80109c6 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80109c8:	68ba      	ldr	r2, [r7, #8]
 80109ca:	69fb      	ldr	r3, [r7, #28]
 80109cc:	18d0      	adds	r0, r2, r3
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	6999      	ldr	r1, [r3, #24]
 80109d2:	6a3a      	ldr	r2, [r7, #32]
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	1ad3      	subs	r3, r2, r3
 80109d8:	461a      	mov	r2, r3
 80109da:	f002 fd5f 	bl	801349c <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80109de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109e0:	6a3b      	ldr	r3, [r7, #32]
 80109e2:	4413      	add	r3, r2
 80109e4:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	689b      	ldr	r3, [r3, #8]
 80109ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d304      	bcc.n	80109fa <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	689b      	ldr	r3, [r3, #8]
 80109f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109f6:	1ad3      	subs	r3, r2, r3
 80109f8:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109fe:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8010a00:	6a3b      	ldr	r3, [r7, #32]
}
 8010a02:	4618      	mov	r0, r3
 8010a04:	3728      	adds	r7, #40	; 0x28
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}

08010a0a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8010a0a:	b480      	push	{r7}
 8010a0c:	b085      	sub	sp, #20
 8010a0e:	af00      	add	r7, sp, #0
 8010a10:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	689a      	ldr	r2, [r3, #8]
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	685b      	ldr	r3, [r3, #4]
 8010a1a:	4413      	add	r3, r2
 8010a1c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	68fa      	ldr	r2, [r7, #12]
 8010a24:	1ad3      	subs	r3, r2, r3
 8010a26:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	689b      	ldr	r3, [r3, #8]
 8010a2c:	68fa      	ldr	r2, [r7, #12]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d304      	bcc.n	8010a3c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	689b      	ldr	r3, [r3, #8]
 8010a36:	68fa      	ldr	r2, [r7, #12]
 8010a38:	1ad3      	subs	r3, r2, r3
 8010a3a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8010a3c:	68fb      	ldr	r3, [r7, #12]
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3714      	adds	r7, #20
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr

08010a4a <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b086      	sub	sp, #24
 8010a4e:	af00      	add	r7, sp, #0
 8010a50:	60f8      	str	r0, [r7, #12]
 8010a52:	60b9      	str	r1, [r7, #8]
 8010a54:	607a      	str	r2, [r7, #4]
 8010a56:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8010a58:	2355      	movs	r3, #85	; 0x55
 8010a5a:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	6979      	ldr	r1, [r7, #20]
 8010a60:	68b8      	ldr	r0, [r7, #8]
 8010a62:	f002 fd29 	bl	80134b8 <memset>
 8010a66:	4602      	mov	r2, r0
 8010a68:	68bb      	ldr	r3, [r7, #8]
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d00a      	beq.n	8010a84 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8010a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a72:	f383 8811 	msr	BASEPRI, r3
 8010a76:	f3bf 8f6f 	isb	sy
 8010a7a:	f3bf 8f4f 	dsb	sy
 8010a7e:	613b      	str	r3, [r7, #16]
}
 8010a80:	bf00      	nop
 8010a82:	e7fe      	b.n	8010a82 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8010a84:	2224      	movs	r2, #36	; 0x24
 8010a86:	2100      	movs	r1, #0
 8010a88:	68f8      	ldr	r0, [r7, #12]
 8010a8a:	f002 fd15 	bl	80134b8 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	68ba      	ldr	r2, [r7, #8]
 8010a92:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	687a      	ldr	r2, [r7, #4]
 8010a98:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	683a      	ldr	r2, [r7, #0]
 8010a9e:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010aa6:	771a      	strb	r2, [r3, #28]
}
 8010aa8:	bf00      	nop
 8010aaa:	3718      	adds	r7, #24
 8010aac:	46bd      	mov	sp, r7
 8010aae:	bd80      	pop	{r7, pc}

08010ab0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b08e      	sub	sp, #56	; 0x38
 8010ab4:	af04      	add	r7, sp, #16
 8010ab6:	60f8      	str	r0, [r7, #12]
 8010ab8:	60b9      	str	r1, [r7, #8]
 8010aba:	607a      	str	r2, [r7, #4]
 8010abc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010abe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d10a      	bne.n	8010ada <xTaskCreateStatic+0x2a>
	__asm volatile
 8010ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ac8:	f383 8811 	msr	BASEPRI, r3
 8010acc:	f3bf 8f6f 	isb	sy
 8010ad0:	f3bf 8f4f 	dsb	sy
 8010ad4:	623b      	str	r3, [r7, #32]
}
 8010ad6:	bf00      	nop
 8010ad8:	e7fe      	b.n	8010ad8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d10a      	bne.n	8010af6 <xTaskCreateStatic+0x46>
	__asm volatile
 8010ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae4:	f383 8811 	msr	BASEPRI, r3
 8010ae8:	f3bf 8f6f 	isb	sy
 8010aec:	f3bf 8f4f 	dsb	sy
 8010af0:	61fb      	str	r3, [r7, #28]
}
 8010af2:	bf00      	nop
 8010af4:	e7fe      	b.n	8010af4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010af6:	23c0      	movs	r3, #192	; 0xc0
 8010af8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010afa:	693b      	ldr	r3, [r7, #16]
 8010afc:	2bc0      	cmp	r3, #192	; 0xc0
 8010afe:	d00a      	beq.n	8010b16 <xTaskCreateStatic+0x66>
	__asm volatile
 8010b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b04:	f383 8811 	msr	BASEPRI, r3
 8010b08:	f3bf 8f6f 	isb	sy
 8010b0c:	f3bf 8f4f 	dsb	sy
 8010b10:	61bb      	str	r3, [r7, #24]
}
 8010b12:	bf00      	nop
 8010b14:	e7fe      	b.n	8010b14 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010b16:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d01e      	beq.n	8010b5c <xTaskCreateStatic+0xac>
 8010b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d01b      	beq.n	8010b5c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b26:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010b2c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b30:	2202      	movs	r2, #2
 8010b32:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010b36:	2300      	movs	r3, #0
 8010b38:	9303      	str	r3, [sp, #12]
 8010b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b3c:	9302      	str	r3, [sp, #8]
 8010b3e:	f107 0314 	add.w	r3, r7, #20
 8010b42:	9301      	str	r3, [sp, #4]
 8010b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010b46:	9300      	str	r3, [sp, #0]
 8010b48:	683b      	ldr	r3, [r7, #0]
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	68b9      	ldr	r1, [r7, #8]
 8010b4e:	68f8      	ldr	r0, [r7, #12]
 8010b50:	f000 f850 	bl	8010bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b56:	f000 f8f7 	bl	8010d48 <prvAddNewTaskToReadyList>
 8010b5a:	e001      	b.n	8010b60 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010b60:	697b      	ldr	r3, [r7, #20]
	}
 8010b62:	4618      	mov	r0, r3
 8010b64:	3728      	adds	r7, #40	; 0x28
 8010b66:	46bd      	mov	sp, r7
 8010b68:	bd80      	pop	{r7, pc}

08010b6a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010b6a:	b580      	push	{r7, lr}
 8010b6c:	b08c      	sub	sp, #48	; 0x30
 8010b6e:	af04      	add	r7, sp, #16
 8010b70:	60f8      	str	r0, [r7, #12]
 8010b72:	60b9      	str	r1, [r7, #8]
 8010b74:	603b      	str	r3, [r7, #0]
 8010b76:	4613      	mov	r3, r2
 8010b78:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010b7a:	88fb      	ldrh	r3, [r7, #6]
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f001 ff02 	bl	8012988 <pvPortMalloc>
 8010b84:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00e      	beq.n	8010baa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010b8c:	20c0      	movs	r0, #192	; 0xc0
 8010b8e:	f001 fefb 	bl	8012988 <pvPortMalloc>
 8010b92:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010b94:	69fb      	ldr	r3, [r7, #28]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010b9a:	69fb      	ldr	r3, [r7, #28]
 8010b9c:	697a      	ldr	r2, [r7, #20]
 8010b9e:	631a      	str	r2, [r3, #48]	; 0x30
 8010ba0:	e005      	b.n	8010bae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010ba2:	6978      	ldr	r0, [r7, #20]
 8010ba4:	f001 ffc0 	bl	8012b28 <vPortFree>
 8010ba8:	e001      	b.n	8010bae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010baa:	2300      	movs	r3, #0
 8010bac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010bae:	69fb      	ldr	r3, [r7, #28]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d017      	beq.n	8010be4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010bb4:	69fb      	ldr	r3, [r7, #28]
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010bbc:	88fa      	ldrh	r2, [r7, #6]
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	9303      	str	r3, [sp, #12]
 8010bc2:	69fb      	ldr	r3, [r7, #28]
 8010bc4:	9302      	str	r3, [sp, #8]
 8010bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc8:	9301      	str	r3, [sp, #4]
 8010bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bcc:	9300      	str	r3, [sp, #0]
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	68b9      	ldr	r1, [r7, #8]
 8010bd2:	68f8      	ldr	r0, [r7, #12]
 8010bd4:	f000 f80e 	bl	8010bf4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010bd8:	69f8      	ldr	r0, [r7, #28]
 8010bda:	f000 f8b5 	bl	8010d48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010bde:	2301      	movs	r3, #1
 8010be0:	61bb      	str	r3, [r7, #24]
 8010be2:	e002      	b.n	8010bea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010be4:	f04f 33ff 	mov.w	r3, #4294967295
 8010be8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010bea:	69bb      	ldr	r3, [r7, #24]
	}
 8010bec:	4618      	mov	r0, r3
 8010bee:	3720      	adds	r7, #32
 8010bf0:	46bd      	mov	sp, r7
 8010bf2:	bd80      	pop	{r7, pc}

08010bf4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b088      	sub	sp, #32
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	60f8      	str	r0, [r7, #12]
 8010bfc:	60b9      	str	r1, [r7, #8]
 8010bfe:	607a      	str	r2, [r7, #4]
 8010c00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	21a5      	movs	r1, #165	; 0xa5
 8010c0e:	f002 fc53 	bl	80134b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010c1c:	3b01      	subs	r3, #1
 8010c1e:	009b      	lsls	r3, r3, #2
 8010c20:	4413      	add	r3, r2
 8010c22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	f023 0307 	bic.w	r3, r3, #7
 8010c2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	f003 0307 	and.w	r3, r3, #7
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d00a      	beq.n	8010c4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8010c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c3a:	f383 8811 	msr	BASEPRI, r3
 8010c3e:	f3bf 8f6f 	isb	sy
 8010c42:	f3bf 8f4f 	dsb	sy
 8010c46:	617b      	str	r3, [r7, #20]
}
 8010c48:	bf00      	nop
 8010c4a:	e7fe      	b.n	8010c4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010c4c:	68bb      	ldr	r3, [r7, #8]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d01f      	beq.n	8010c92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c52:	2300      	movs	r3, #0
 8010c54:	61fb      	str	r3, [r7, #28]
 8010c56:	e012      	b.n	8010c7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010c58:	68ba      	ldr	r2, [r7, #8]
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	7819      	ldrb	r1, [r3, #0]
 8010c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c62:	69fb      	ldr	r3, [r7, #28]
 8010c64:	4413      	add	r3, r2
 8010c66:	3334      	adds	r3, #52	; 0x34
 8010c68:	460a      	mov	r2, r1
 8010c6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010c6c:	68ba      	ldr	r2, [r7, #8]
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	4413      	add	r3, r2
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d006      	beq.n	8010c86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	3301      	adds	r3, #1
 8010c7c:	61fb      	str	r3, [r7, #28]
 8010c7e:	69fb      	ldr	r3, [r7, #28]
 8010c80:	2b0f      	cmp	r3, #15
 8010c82:	d9e9      	bls.n	8010c58 <prvInitialiseNewTask+0x64>
 8010c84:	e000      	b.n	8010c88 <prvInitialiseNewTask+0x94>
			{
				break;
 8010c86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c90:	e003      	b.n	8010c9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c94:	2200      	movs	r2, #0
 8010c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c9c:	2b37      	cmp	r3, #55	; 0x37
 8010c9e:	d901      	bls.n	8010ca4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ca0:	2337      	movs	r3, #55	; 0x37
 8010ca2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ca8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb8:	3304      	adds	r3, #4
 8010cba:	4618      	mov	r0, r3
 8010cbc:	f7fe f9de 	bl	800f07c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc2:	3318      	adds	r3, #24
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7fe f9d9 	bl	800f07c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce8:	2200      	movs	r2, #0
 8010cea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf0:	2200      	movs	r2, #0
 8010cf2:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cf8:	3358      	adds	r3, #88	; 0x58
 8010cfa:	2260      	movs	r2, #96	; 0x60
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	4618      	mov	r0, r3
 8010d00:	f002 fbda 	bl	80134b8 <memset>
 8010d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d06:	4a0d      	ldr	r2, [pc, #52]	; (8010d3c <prvInitialiseNewTask+0x148>)
 8010d08:	65da      	str	r2, [r3, #92]	; 0x5c
 8010d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d0c:	4a0c      	ldr	r2, [pc, #48]	; (8010d40 <prvInitialiseNewTask+0x14c>)
 8010d0e:	661a      	str	r2, [r3, #96]	; 0x60
 8010d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d12:	4a0c      	ldr	r2, [pc, #48]	; (8010d44 <prvInitialiseNewTask+0x150>)
 8010d14:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010d16:	683a      	ldr	r2, [r7, #0]
 8010d18:	68f9      	ldr	r1, [r7, #12]
 8010d1a:	69b8      	ldr	r0, [r7, #24]
 8010d1c:	f001 fbe8 	bl	80124f0 <pxPortInitialiseStack>
 8010d20:	4602      	mov	r2, r0
 8010d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d002      	beq.n	8010d32 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d32:	bf00      	nop
 8010d34:	3720      	adds	r7, #32
 8010d36:	46bd      	mov	sp, r7
 8010d38:	bd80      	pop	{r7, pc}
 8010d3a:	bf00      	nop
 8010d3c:	08016338 	.word	0x08016338
 8010d40:	08016358 	.word	0x08016358
 8010d44:	08016318 	.word	0x08016318

08010d48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010d50:	f001 fcf8 	bl	8012744 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010d54:	4b2d      	ldr	r3, [pc, #180]	; (8010e0c <prvAddNewTaskToReadyList+0xc4>)
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	3301      	adds	r3, #1
 8010d5a:	4a2c      	ldr	r2, [pc, #176]	; (8010e0c <prvAddNewTaskToReadyList+0xc4>)
 8010d5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010d5e:	4b2c      	ldr	r3, [pc, #176]	; (8010e10 <prvAddNewTaskToReadyList+0xc8>)
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d109      	bne.n	8010d7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010d66:	4a2a      	ldr	r2, [pc, #168]	; (8010e10 <prvAddNewTaskToReadyList+0xc8>)
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010d6c:	4b27      	ldr	r3, [pc, #156]	; (8010e0c <prvAddNewTaskToReadyList+0xc4>)
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	2b01      	cmp	r3, #1
 8010d72:	d110      	bne.n	8010d96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010d74:	f000 fc7a 	bl	801166c <prvInitialiseTaskLists>
 8010d78:	e00d      	b.n	8010d96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010d7a:	4b26      	ldr	r3, [pc, #152]	; (8010e14 <prvAddNewTaskToReadyList+0xcc>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d109      	bne.n	8010d96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010d82:	4b23      	ldr	r3, [pc, #140]	; (8010e10 <prvAddNewTaskToReadyList+0xc8>)
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d802      	bhi.n	8010d96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010d90:	4a1f      	ldr	r2, [pc, #124]	; (8010e10 <prvAddNewTaskToReadyList+0xc8>)
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010d96:	4b20      	ldr	r3, [pc, #128]	; (8010e18 <prvAddNewTaskToReadyList+0xd0>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	4a1e      	ldr	r2, [pc, #120]	; (8010e18 <prvAddNewTaskToReadyList+0xd0>)
 8010d9e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010da0:	4b1d      	ldr	r3, [pc, #116]	; (8010e18 <prvAddNewTaskToReadyList+0xd0>)
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dac:	4b1b      	ldr	r3, [pc, #108]	; (8010e1c <prvAddNewTaskToReadyList+0xd4>)
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d903      	bls.n	8010dbc <prvAddNewTaskToReadyList+0x74>
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db8:	4a18      	ldr	r2, [pc, #96]	; (8010e1c <prvAddNewTaskToReadyList+0xd4>)
 8010dba:	6013      	str	r3, [r2, #0]
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dc0:	4613      	mov	r3, r2
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	4413      	add	r3, r2
 8010dc6:	009b      	lsls	r3, r3, #2
 8010dc8:	4a15      	ldr	r2, [pc, #84]	; (8010e20 <prvAddNewTaskToReadyList+0xd8>)
 8010dca:	441a      	add	r2, r3
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	3304      	adds	r3, #4
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	4610      	mov	r0, r2
 8010dd4:	f7fe f95f 	bl	800f096 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010dd8:	f001 fce4 	bl	80127a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010ddc:	4b0d      	ldr	r3, [pc, #52]	; (8010e14 <prvAddNewTaskToReadyList+0xcc>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d00e      	beq.n	8010e02 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010de4:	4b0a      	ldr	r3, [pc, #40]	; (8010e10 <prvAddNewTaskToReadyList+0xc8>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dee:	429a      	cmp	r2, r3
 8010df0:	d207      	bcs.n	8010e02 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010df2:	4b0c      	ldr	r3, [pc, #48]	; (8010e24 <prvAddNewTaskToReadyList+0xdc>)
 8010df4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010df8:	601a      	str	r2, [r3, #0]
 8010dfa:	f3bf 8f4f 	dsb	sy
 8010dfe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e02:	bf00      	nop
 8010e04:	3708      	adds	r7, #8
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}
 8010e0a:	bf00      	nop
 8010e0c:	2000221c 	.word	0x2000221c
 8010e10:	20001d48 	.word	0x20001d48
 8010e14:	20002228 	.word	0x20002228
 8010e18:	20002238 	.word	0x20002238
 8010e1c:	20002224 	.word	0x20002224
 8010e20:	20001d4c 	.word	0x20001d4c
 8010e24:	e000ed04 	.word	0xe000ed04

08010e28 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b084      	sub	sp, #16
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010e30:	2300      	movs	r3, #0
 8010e32:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d017      	beq.n	8010e6a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010e3a:	4b13      	ldr	r3, [pc, #76]	; (8010e88 <vTaskDelay+0x60>)
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00a      	beq.n	8010e58 <vTaskDelay+0x30>
	__asm volatile
 8010e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e46:	f383 8811 	msr	BASEPRI, r3
 8010e4a:	f3bf 8f6f 	isb	sy
 8010e4e:	f3bf 8f4f 	dsb	sy
 8010e52:	60bb      	str	r3, [r7, #8]
}
 8010e54:	bf00      	nop
 8010e56:	e7fe      	b.n	8010e56 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010e58:	f000 f88c 	bl	8010f74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010e5c:	2100      	movs	r1, #0
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	f000 ffa4 	bl	8011dac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010e64:	f000 f894 	bl	8010f90 <xTaskResumeAll>
 8010e68:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d107      	bne.n	8010e80 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010e70:	4b06      	ldr	r3, [pc, #24]	; (8010e8c <vTaskDelay+0x64>)
 8010e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e76:	601a      	str	r2, [r3, #0]
 8010e78:	f3bf 8f4f 	dsb	sy
 8010e7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010e80:	bf00      	nop
 8010e82:	3710      	adds	r7, #16
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}
 8010e88:	20002244 	.word	0x20002244
 8010e8c:	e000ed04 	.word	0xe000ed04

08010e90 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b08a      	sub	sp, #40	; 0x28
 8010e94:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010e96:	2300      	movs	r3, #0
 8010e98:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010e9e:	463a      	mov	r2, r7
 8010ea0:	1d39      	adds	r1, r7, #4
 8010ea2:	f107 0308 	add.w	r3, r7, #8
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7fe f894 	bl	800efd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010eac:	6839      	ldr	r1, [r7, #0]
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	68ba      	ldr	r2, [r7, #8]
 8010eb2:	9202      	str	r2, [sp, #8]
 8010eb4:	9301      	str	r3, [sp, #4]
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	9300      	str	r3, [sp, #0]
 8010eba:	2300      	movs	r3, #0
 8010ebc:	460a      	mov	r2, r1
 8010ebe:	4925      	ldr	r1, [pc, #148]	; (8010f54 <vTaskStartScheduler+0xc4>)
 8010ec0:	4825      	ldr	r0, [pc, #148]	; (8010f58 <vTaskStartScheduler+0xc8>)
 8010ec2:	f7ff fdf5 	bl	8010ab0 <xTaskCreateStatic>
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	4a24      	ldr	r2, [pc, #144]	; (8010f5c <vTaskStartScheduler+0xcc>)
 8010eca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ecc:	4b23      	ldr	r3, [pc, #140]	; (8010f5c <vTaskStartScheduler+0xcc>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	617b      	str	r3, [r7, #20]
 8010ed8:	e001      	b.n	8010ede <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010eda:	2300      	movs	r3, #0
 8010edc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8010ede:	697b      	ldr	r3, [r7, #20]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d102      	bne.n	8010eea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8010ee4:	f000 ffb6 	bl	8011e54 <xTimerCreateTimerTask>
 8010ee8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010eea:	697b      	ldr	r3, [r7, #20]
 8010eec:	2b01      	cmp	r3, #1
 8010eee:	d11d      	bne.n	8010f2c <vTaskStartScheduler+0x9c>
	__asm volatile
 8010ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef4:	f383 8811 	msr	BASEPRI, r3
 8010ef8:	f3bf 8f6f 	isb	sy
 8010efc:	f3bf 8f4f 	dsb	sy
 8010f00:	613b      	str	r3, [r7, #16]
}
 8010f02:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010f04:	4b16      	ldr	r3, [pc, #88]	; (8010f60 <vTaskStartScheduler+0xd0>)
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	3358      	adds	r3, #88	; 0x58
 8010f0a:	4a16      	ldr	r2, [pc, #88]	; (8010f64 <vTaskStartScheduler+0xd4>)
 8010f0c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010f0e:	4b16      	ldr	r3, [pc, #88]	; (8010f68 <vTaskStartScheduler+0xd8>)
 8010f10:	f04f 32ff 	mov.w	r2, #4294967295
 8010f14:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010f16:	4b15      	ldr	r3, [pc, #84]	; (8010f6c <vTaskStartScheduler+0xdc>)
 8010f18:	2201      	movs	r2, #1
 8010f1a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010f1c:	4b14      	ldr	r3, [pc, #80]	; (8010f70 <vTaskStartScheduler+0xe0>)
 8010f1e:	2200      	movs	r2, #0
 8010f20:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8010f22:	f7f6 f9a1 	bl	8007268 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010f26:	f001 fb6b 	bl	8012600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010f2a:	e00e      	b.n	8010f4a <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f32:	d10a      	bne.n	8010f4a <vTaskStartScheduler+0xba>
	__asm volatile
 8010f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f38:	f383 8811 	msr	BASEPRI, r3
 8010f3c:	f3bf 8f6f 	isb	sy
 8010f40:	f3bf 8f4f 	dsb	sy
 8010f44:	60fb      	str	r3, [r7, #12]
}
 8010f46:	bf00      	nop
 8010f48:	e7fe      	b.n	8010f48 <vTaskStartScheduler+0xb8>
}
 8010f4a:	bf00      	nop
 8010f4c:	3718      	adds	r7, #24
 8010f4e:	46bd      	mov	sp, r7
 8010f50:	bd80      	pop	{r7, pc}
 8010f52:	bf00      	nop
 8010f54:	080160d8 	.word	0x080160d8
 8010f58:	0801163d 	.word	0x0801163d
 8010f5c:	20002240 	.word	0x20002240
 8010f60:	20001d48 	.word	0x20001d48
 8010f64:	20000020 	.word	0x20000020
 8010f68:	2000223c 	.word	0x2000223c
 8010f6c:	20002228 	.word	0x20002228
 8010f70:	20002220 	.word	0x20002220

08010f74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010f74:	b480      	push	{r7}
 8010f76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8010f78:	4b04      	ldr	r3, [pc, #16]	; (8010f8c <vTaskSuspendAll+0x18>)
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	4a03      	ldr	r2, [pc, #12]	; (8010f8c <vTaskSuspendAll+0x18>)
 8010f80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8010f82:	bf00      	nop
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr
 8010f8c:	20002244 	.word	0x20002244

08010f90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b084      	sub	sp, #16
 8010f94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010f96:	2300      	movs	r3, #0
 8010f98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010f9e:	4b42      	ldr	r3, [pc, #264]	; (80110a8 <xTaskResumeAll+0x118>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d10a      	bne.n	8010fbc <xTaskResumeAll+0x2c>
	__asm volatile
 8010fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010faa:	f383 8811 	msr	BASEPRI, r3
 8010fae:	f3bf 8f6f 	isb	sy
 8010fb2:	f3bf 8f4f 	dsb	sy
 8010fb6:	603b      	str	r3, [r7, #0]
}
 8010fb8:	bf00      	nop
 8010fba:	e7fe      	b.n	8010fba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010fbc:	f001 fbc2 	bl	8012744 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010fc0:	4b39      	ldr	r3, [pc, #228]	; (80110a8 <xTaskResumeAll+0x118>)
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	3b01      	subs	r3, #1
 8010fc6:	4a38      	ldr	r2, [pc, #224]	; (80110a8 <xTaskResumeAll+0x118>)
 8010fc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fca:	4b37      	ldr	r3, [pc, #220]	; (80110a8 <xTaskResumeAll+0x118>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d162      	bne.n	8011098 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010fd2:	4b36      	ldr	r3, [pc, #216]	; (80110ac <xTaskResumeAll+0x11c>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d05e      	beq.n	8011098 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010fda:	e02f      	b.n	801103c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010fdc:	4b34      	ldr	r3, [pc, #208]	; (80110b0 <xTaskResumeAll+0x120>)
 8010fde:	68db      	ldr	r3, [r3, #12]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	3318      	adds	r3, #24
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7fe f8b1 	bl	800f150 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	3304      	adds	r3, #4
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	f7fe f8ac 	bl	800f150 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ffc:	4b2d      	ldr	r3, [pc, #180]	; (80110b4 <xTaskResumeAll+0x124>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	429a      	cmp	r2, r3
 8011002:	d903      	bls.n	801100c <xTaskResumeAll+0x7c>
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011008:	4a2a      	ldr	r2, [pc, #168]	; (80110b4 <xTaskResumeAll+0x124>)
 801100a:	6013      	str	r3, [r2, #0]
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011010:	4613      	mov	r3, r2
 8011012:	009b      	lsls	r3, r3, #2
 8011014:	4413      	add	r3, r2
 8011016:	009b      	lsls	r3, r3, #2
 8011018:	4a27      	ldr	r2, [pc, #156]	; (80110b8 <xTaskResumeAll+0x128>)
 801101a:	441a      	add	r2, r3
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	3304      	adds	r3, #4
 8011020:	4619      	mov	r1, r3
 8011022:	4610      	mov	r0, r2
 8011024:	f7fe f837 	bl	800f096 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011028:	68fb      	ldr	r3, [r7, #12]
 801102a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801102c:	4b23      	ldr	r3, [pc, #140]	; (80110bc <xTaskResumeAll+0x12c>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011032:	429a      	cmp	r2, r3
 8011034:	d302      	bcc.n	801103c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011036:	4b22      	ldr	r3, [pc, #136]	; (80110c0 <xTaskResumeAll+0x130>)
 8011038:	2201      	movs	r2, #1
 801103a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801103c:	4b1c      	ldr	r3, [pc, #112]	; (80110b0 <xTaskResumeAll+0x120>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d1cb      	bne.n	8010fdc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d001      	beq.n	801104e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801104a:	f000 fbb1 	bl	80117b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801104e:	4b1d      	ldr	r3, [pc, #116]	; (80110c4 <xTaskResumeAll+0x134>)
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d010      	beq.n	801107c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801105a:	f000 f847 	bl	80110ec <xTaskIncrementTick>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011064:	4b16      	ldr	r3, [pc, #88]	; (80110c0 <xTaskResumeAll+0x130>)
 8011066:	2201      	movs	r2, #1
 8011068:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	3b01      	subs	r3, #1
 801106e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d1f1      	bne.n	801105a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8011076:	4b13      	ldr	r3, [pc, #76]	; (80110c4 <xTaskResumeAll+0x134>)
 8011078:	2200      	movs	r2, #0
 801107a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801107c:	4b10      	ldr	r3, [pc, #64]	; (80110c0 <xTaskResumeAll+0x130>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d009      	beq.n	8011098 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011084:	2301      	movs	r3, #1
 8011086:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011088:	4b0f      	ldr	r3, [pc, #60]	; (80110c8 <xTaskResumeAll+0x138>)
 801108a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801108e:	601a      	str	r2, [r3, #0]
 8011090:	f3bf 8f4f 	dsb	sy
 8011094:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011098:	f001 fb84 	bl	80127a4 <vPortExitCritical>

	return xAlreadyYielded;
 801109c:	68bb      	ldr	r3, [r7, #8]
}
 801109e:	4618      	mov	r0, r3
 80110a0:	3710      	adds	r7, #16
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd80      	pop	{r7, pc}
 80110a6:	bf00      	nop
 80110a8:	20002244 	.word	0x20002244
 80110ac:	2000221c 	.word	0x2000221c
 80110b0:	200021dc 	.word	0x200021dc
 80110b4:	20002224 	.word	0x20002224
 80110b8:	20001d4c 	.word	0x20001d4c
 80110bc:	20001d48 	.word	0x20001d48
 80110c0:	20002230 	.word	0x20002230
 80110c4:	2000222c 	.word	0x2000222c
 80110c8:	e000ed04 	.word	0xe000ed04

080110cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80110cc:	b480      	push	{r7}
 80110ce:	b083      	sub	sp, #12
 80110d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80110d2:	4b05      	ldr	r3, [pc, #20]	; (80110e8 <xTaskGetTickCount+0x1c>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80110d8:	687b      	ldr	r3, [r7, #4]
}
 80110da:	4618      	mov	r0, r3
 80110dc:	370c      	adds	r7, #12
 80110de:	46bd      	mov	sp, r7
 80110e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e4:	4770      	bx	lr
 80110e6:	bf00      	nop
 80110e8:	20002220 	.word	0x20002220

080110ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b086      	sub	sp, #24
 80110f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80110f2:	2300      	movs	r3, #0
 80110f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80110f6:	4b4f      	ldr	r3, [pc, #316]	; (8011234 <xTaskIncrementTick+0x148>)
 80110f8:	681b      	ldr	r3, [r3, #0]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	f040 808f 	bne.w	801121e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011100:	4b4d      	ldr	r3, [pc, #308]	; (8011238 <xTaskIncrementTick+0x14c>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	3301      	adds	r3, #1
 8011106:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011108:	4a4b      	ldr	r2, [pc, #300]	; (8011238 <xTaskIncrementTick+0x14c>)
 801110a:	693b      	ldr	r3, [r7, #16]
 801110c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d120      	bne.n	8011156 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011114:	4b49      	ldr	r3, [pc, #292]	; (801123c <xTaskIncrementTick+0x150>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d00a      	beq.n	8011134 <xTaskIncrementTick+0x48>
	__asm volatile
 801111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011122:	f383 8811 	msr	BASEPRI, r3
 8011126:	f3bf 8f6f 	isb	sy
 801112a:	f3bf 8f4f 	dsb	sy
 801112e:	603b      	str	r3, [r7, #0]
}
 8011130:	bf00      	nop
 8011132:	e7fe      	b.n	8011132 <xTaskIncrementTick+0x46>
 8011134:	4b41      	ldr	r3, [pc, #260]	; (801123c <xTaskIncrementTick+0x150>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	60fb      	str	r3, [r7, #12]
 801113a:	4b41      	ldr	r3, [pc, #260]	; (8011240 <xTaskIncrementTick+0x154>)
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	4a3f      	ldr	r2, [pc, #252]	; (801123c <xTaskIncrementTick+0x150>)
 8011140:	6013      	str	r3, [r2, #0]
 8011142:	4a3f      	ldr	r2, [pc, #252]	; (8011240 <xTaskIncrementTick+0x154>)
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	6013      	str	r3, [r2, #0]
 8011148:	4b3e      	ldr	r3, [pc, #248]	; (8011244 <xTaskIncrementTick+0x158>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	3301      	adds	r3, #1
 801114e:	4a3d      	ldr	r2, [pc, #244]	; (8011244 <xTaskIncrementTick+0x158>)
 8011150:	6013      	str	r3, [r2, #0]
 8011152:	f000 fb2d 	bl	80117b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011156:	4b3c      	ldr	r3, [pc, #240]	; (8011248 <xTaskIncrementTick+0x15c>)
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	693a      	ldr	r2, [r7, #16]
 801115c:	429a      	cmp	r2, r3
 801115e:	d349      	bcc.n	80111f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011160:	4b36      	ldr	r3, [pc, #216]	; (801123c <xTaskIncrementTick+0x150>)
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d104      	bne.n	8011174 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801116a:	4b37      	ldr	r3, [pc, #220]	; (8011248 <xTaskIncrementTick+0x15c>)
 801116c:	f04f 32ff 	mov.w	r2, #4294967295
 8011170:	601a      	str	r2, [r3, #0]
					break;
 8011172:	e03f      	b.n	80111f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011174:	4b31      	ldr	r3, [pc, #196]	; (801123c <xTaskIncrementTick+0x150>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	68db      	ldr	r3, [r3, #12]
 801117c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	685b      	ldr	r3, [r3, #4]
 8011182:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011184:	693a      	ldr	r2, [r7, #16]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	429a      	cmp	r2, r3
 801118a:	d203      	bcs.n	8011194 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801118c:	4a2e      	ldr	r2, [pc, #184]	; (8011248 <xTaskIncrementTick+0x15c>)
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011192:	e02f      	b.n	80111f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	3304      	adds	r3, #4
 8011198:	4618      	mov	r0, r3
 801119a:	f7fd ffd9 	bl	800f150 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801119e:	68bb      	ldr	r3, [r7, #8]
 80111a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d004      	beq.n	80111b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	3318      	adds	r3, #24
 80111aa:	4618      	mov	r0, r3
 80111ac:	f7fd ffd0 	bl	800f150 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80111b0:	68bb      	ldr	r3, [r7, #8]
 80111b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111b4:	4b25      	ldr	r3, [pc, #148]	; (801124c <xTaskIncrementTick+0x160>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	429a      	cmp	r2, r3
 80111ba:	d903      	bls.n	80111c4 <xTaskIncrementTick+0xd8>
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111c0:	4a22      	ldr	r2, [pc, #136]	; (801124c <xTaskIncrementTick+0x160>)
 80111c2:	6013      	str	r3, [r2, #0]
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111c8:	4613      	mov	r3, r2
 80111ca:	009b      	lsls	r3, r3, #2
 80111cc:	4413      	add	r3, r2
 80111ce:	009b      	lsls	r3, r3, #2
 80111d0:	4a1f      	ldr	r2, [pc, #124]	; (8011250 <xTaskIncrementTick+0x164>)
 80111d2:	441a      	add	r2, r3
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	3304      	adds	r3, #4
 80111d8:	4619      	mov	r1, r3
 80111da:	4610      	mov	r0, r2
 80111dc:	f7fd ff5b 	bl	800f096 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111e4:	4b1b      	ldr	r3, [pc, #108]	; (8011254 <xTaskIncrementTick+0x168>)
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d3b8      	bcc.n	8011160 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80111ee:	2301      	movs	r3, #1
 80111f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80111f2:	e7b5      	b.n	8011160 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80111f4:	4b17      	ldr	r3, [pc, #92]	; (8011254 <xTaskIncrementTick+0x168>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111fa:	4915      	ldr	r1, [pc, #84]	; (8011250 <xTaskIncrementTick+0x164>)
 80111fc:	4613      	mov	r3, r2
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	4413      	add	r3, r2
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	440b      	add	r3, r1
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	2b01      	cmp	r3, #1
 801120a:	d901      	bls.n	8011210 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801120c:	2301      	movs	r3, #1
 801120e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011210:	4b11      	ldr	r3, [pc, #68]	; (8011258 <xTaskIncrementTick+0x16c>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d007      	beq.n	8011228 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011218:	2301      	movs	r3, #1
 801121a:	617b      	str	r3, [r7, #20]
 801121c:	e004      	b.n	8011228 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801121e:	4b0f      	ldr	r3, [pc, #60]	; (801125c <xTaskIncrementTick+0x170>)
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	3301      	adds	r3, #1
 8011224:	4a0d      	ldr	r2, [pc, #52]	; (801125c <xTaskIncrementTick+0x170>)
 8011226:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011228:	697b      	ldr	r3, [r7, #20]
}
 801122a:	4618      	mov	r0, r3
 801122c:	3718      	adds	r7, #24
 801122e:	46bd      	mov	sp, r7
 8011230:	bd80      	pop	{r7, pc}
 8011232:	bf00      	nop
 8011234:	20002244 	.word	0x20002244
 8011238:	20002220 	.word	0x20002220
 801123c:	200021d4 	.word	0x200021d4
 8011240:	200021d8 	.word	0x200021d8
 8011244:	20002234 	.word	0x20002234
 8011248:	2000223c 	.word	0x2000223c
 801124c:	20002224 	.word	0x20002224
 8011250:	20001d4c 	.word	0x20001d4c
 8011254:	20001d48 	.word	0x20001d48
 8011258:	20002230 	.word	0x20002230
 801125c:	2000222c 	.word	0x2000222c

08011260 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011266:	4b3e      	ldr	r3, [pc, #248]	; (8011360 <vTaskSwitchContext+0x100>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d003      	beq.n	8011276 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801126e:	4b3d      	ldr	r3, [pc, #244]	; (8011364 <vTaskSwitchContext+0x104>)
 8011270:	2201      	movs	r2, #1
 8011272:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011274:	e070      	b.n	8011358 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 8011276:	4b3b      	ldr	r3, [pc, #236]	; (8011364 <vTaskSwitchContext+0x104>)
 8011278:	2200      	movs	r2, #0
 801127a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 801127c:	f7f5 fffb 	bl	8007276 <getRunTimeCounterValue>
 8011280:	4603      	mov	r3, r0
 8011282:	4a39      	ldr	r2, [pc, #228]	; (8011368 <vTaskSwitchContext+0x108>)
 8011284:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8011286:	4b38      	ldr	r3, [pc, #224]	; (8011368 <vTaskSwitchContext+0x108>)
 8011288:	681a      	ldr	r2, [r3, #0]
 801128a:	4b38      	ldr	r3, [pc, #224]	; (801136c <vTaskSwitchContext+0x10c>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	429a      	cmp	r2, r3
 8011290:	d909      	bls.n	80112a6 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8011292:	4b37      	ldr	r3, [pc, #220]	; (8011370 <vTaskSwitchContext+0x110>)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011298:	4a33      	ldr	r2, [pc, #204]	; (8011368 <vTaskSwitchContext+0x108>)
 801129a:	6810      	ldr	r0, [r2, #0]
 801129c:	4a33      	ldr	r2, [pc, #204]	; (801136c <vTaskSwitchContext+0x10c>)
 801129e:	6812      	ldr	r2, [r2, #0]
 80112a0:	1a82      	subs	r2, r0, r2
 80112a2:	440a      	add	r2, r1
 80112a4:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80112a6:	4b30      	ldr	r3, [pc, #192]	; (8011368 <vTaskSwitchContext+0x108>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	4a30      	ldr	r2, [pc, #192]	; (801136c <vTaskSwitchContext+0x10c>)
 80112ac:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80112ae:	4b30      	ldr	r3, [pc, #192]	; (8011370 <vTaskSwitchContext+0x110>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	681a      	ldr	r2, [r3, #0]
 80112b4:	4b2e      	ldr	r3, [pc, #184]	; (8011370 <vTaskSwitchContext+0x110>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d808      	bhi.n	80112d0 <vTaskSwitchContext+0x70>
 80112be:	4b2c      	ldr	r3, [pc, #176]	; (8011370 <vTaskSwitchContext+0x110>)
 80112c0:	681a      	ldr	r2, [r3, #0]
 80112c2:	4b2b      	ldr	r3, [pc, #172]	; (8011370 <vTaskSwitchContext+0x110>)
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	3334      	adds	r3, #52	; 0x34
 80112c8:	4619      	mov	r1, r3
 80112ca:	4610      	mov	r0, r2
 80112cc:	f7f5 ffdb 	bl	8007286 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112d0:	4b28      	ldr	r3, [pc, #160]	; (8011374 <vTaskSwitchContext+0x114>)
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	60fb      	str	r3, [r7, #12]
 80112d6:	e010      	b.n	80112fa <vTaskSwitchContext+0x9a>
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d10a      	bne.n	80112f4 <vTaskSwitchContext+0x94>
	__asm volatile
 80112de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e2:	f383 8811 	msr	BASEPRI, r3
 80112e6:	f3bf 8f6f 	isb	sy
 80112ea:	f3bf 8f4f 	dsb	sy
 80112ee:	607b      	str	r3, [r7, #4]
}
 80112f0:	bf00      	nop
 80112f2:	e7fe      	b.n	80112f2 <vTaskSwitchContext+0x92>
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	3b01      	subs	r3, #1
 80112f8:	60fb      	str	r3, [r7, #12]
 80112fa:	491f      	ldr	r1, [pc, #124]	; (8011378 <vTaskSwitchContext+0x118>)
 80112fc:	68fa      	ldr	r2, [r7, #12]
 80112fe:	4613      	mov	r3, r2
 8011300:	009b      	lsls	r3, r3, #2
 8011302:	4413      	add	r3, r2
 8011304:	009b      	lsls	r3, r3, #2
 8011306:	440b      	add	r3, r1
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d0e4      	beq.n	80112d8 <vTaskSwitchContext+0x78>
 801130e:	68fa      	ldr	r2, [r7, #12]
 8011310:	4613      	mov	r3, r2
 8011312:	009b      	lsls	r3, r3, #2
 8011314:	4413      	add	r3, r2
 8011316:	009b      	lsls	r3, r3, #2
 8011318:	4a17      	ldr	r2, [pc, #92]	; (8011378 <vTaskSwitchContext+0x118>)
 801131a:	4413      	add	r3, r2
 801131c:	60bb      	str	r3, [r7, #8]
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	685b      	ldr	r3, [r3, #4]
 8011322:	685a      	ldr	r2, [r3, #4]
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	605a      	str	r2, [r3, #4]
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	685a      	ldr	r2, [r3, #4]
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	3308      	adds	r3, #8
 8011330:	429a      	cmp	r2, r3
 8011332:	d104      	bne.n	801133e <vTaskSwitchContext+0xde>
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	685a      	ldr	r2, [r3, #4]
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	605a      	str	r2, [r3, #4]
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	685b      	ldr	r3, [r3, #4]
 8011342:	68db      	ldr	r3, [r3, #12]
 8011344:	4a0a      	ldr	r2, [pc, #40]	; (8011370 <vTaskSwitchContext+0x110>)
 8011346:	6013      	str	r3, [r2, #0]
 8011348:	4a0a      	ldr	r2, [pc, #40]	; (8011374 <vTaskSwitchContext+0x114>)
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801134e:	4b08      	ldr	r3, [pc, #32]	; (8011370 <vTaskSwitchContext+0x110>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	3358      	adds	r3, #88	; 0x58
 8011354:	4a09      	ldr	r2, [pc, #36]	; (801137c <vTaskSwitchContext+0x11c>)
 8011356:	6013      	str	r3, [r2, #0]
}
 8011358:	bf00      	nop
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	20002244 	.word	0x20002244
 8011364:	20002230 	.word	0x20002230
 8011368:	2000224c 	.word	0x2000224c
 801136c:	20002248 	.word	0x20002248
 8011370:	20001d48 	.word	0x20001d48
 8011374:	20002224 	.word	0x20002224
 8011378:	20001d4c 	.word	0x20001d4c
 801137c:	20000020 	.word	0x20000020

08011380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b084      	sub	sp, #16
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
 8011388:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d10a      	bne.n	80113a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011394:	f383 8811 	msr	BASEPRI, r3
 8011398:	f3bf 8f6f 	isb	sy
 801139c:	f3bf 8f4f 	dsb	sy
 80113a0:	60fb      	str	r3, [r7, #12]
}
 80113a2:	bf00      	nop
 80113a4:	e7fe      	b.n	80113a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80113a6:	4b07      	ldr	r3, [pc, #28]	; (80113c4 <vTaskPlaceOnEventList+0x44>)
 80113a8:	681b      	ldr	r3, [r3, #0]
 80113aa:	3318      	adds	r3, #24
 80113ac:	4619      	mov	r1, r3
 80113ae:	6878      	ldr	r0, [r7, #4]
 80113b0:	f7fd fe95 	bl	800f0de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80113b4:	2101      	movs	r1, #1
 80113b6:	6838      	ldr	r0, [r7, #0]
 80113b8:	f000 fcf8 	bl	8011dac <prvAddCurrentTaskToDelayedList>
}
 80113bc:	bf00      	nop
 80113be:	3710      	adds	r7, #16
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	20001d48 	.word	0x20001d48

080113c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b086      	sub	sp, #24
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d10a      	bne.n	80113f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80113da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113de:	f383 8811 	msr	BASEPRI, r3
 80113e2:	f3bf 8f6f 	isb	sy
 80113e6:	f3bf 8f4f 	dsb	sy
 80113ea:	617b      	str	r3, [r7, #20]
}
 80113ec:	bf00      	nop
 80113ee:	e7fe      	b.n	80113ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80113f0:	4b0a      	ldr	r3, [pc, #40]	; (801141c <vTaskPlaceOnEventListRestricted+0x54>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	3318      	adds	r3, #24
 80113f6:	4619      	mov	r1, r3
 80113f8:	68f8      	ldr	r0, [r7, #12]
 80113fa:	f7fd fe4c 	bl	800f096 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d002      	beq.n	801140a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011404:	f04f 33ff 	mov.w	r3, #4294967295
 8011408:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801140a:	6879      	ldr	r1, [r7, #4]
 801140c:	68b8      	ldr	r0, [r7, #8]
 801140e:	f000 fccd 	bl	8011dac <prvAddCurrentTaskToDelayedList>
	}
 8011412:	bf00      	nop
 8011414:	3718      	adds	r7, #24
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	20001d48 	.word	0x20001d48

08011420 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b086      	sub	sp, #24
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	68db      	ldr	r3, [r3, #12]
 801142c:	68db      	ldr	r3, [r3, #12]
 801142e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011430:	693b      	ldr	r3, [r7, #16]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d10a      	bne.n	801144c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801143a:	f383 8811 	msr	BASEPRI, r3
 801143e:	f3bf 8f6f 	isb	sy
 8011442:	f3bf 8f4f 	dsb	sy
 8011446:	60fb      	str	r3, [r7, #12]
}
 8011448:	bf00      	nop
 801144a:	e7fe      	b.n	801144a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801144c:	693b      	ldr	r3, [r7, #16]
 801144e:	3318      	adds	r3, #24
 8011450:	4618      	mov	r0, r3
 8011452:	f7fd fe7d 	bl	800f150 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011456:	4b1e      	ldr	r3, [pc, #120]	; (80114d0 <xTaskRemoveFromEventList+0xb0>)
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d11d      	bne.n	801149a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	3304      	adds	r3, #4
 8011462:	4618      	mov	r0, r3
 8011464:	f7fd fe74 	bl	800f150 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801146c:	4b19      	ldr	r3, [pc, #100]	; (80114d4 <xTaskRemoveFromEventList+0xb4>)
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	429a      	cmp	r2, r3
 8011472:	d903      	bls.n	801147c <xTaskRemoveFromEventList+0x5c>
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011478:	4a16      	ldr	r2, [pc, #88]	; (80114d4 <xTaskRemoveFromEventList+0xb4>)
 801147a:	6013      	str	r3, [r2, #0]
 801147c:	693b      	ldr	r3, [r7, #16]
 801147e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011480:	4613      	mov	r3, r2
 8011482:	009b      	lsls	r3, r3, #2
 8011484:	4413      	add	r3, r2
 8011486:	009b      	lsls	r3, r3, #2
 8011488:	4a13      	ldr	r2, [pc, #76]	; (80114d8 <xTaskRemoveFromEventList+0xb8>)
 801148a:	441a      	add	r2, r3
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	3304      	adds	r3, #4
 8011490:	4619      	mov	r1, r3
 8011492:	4610      	mov	r0, r2
 8011494:	f7fd fdff 	bl	800f096 <vListInsertEnd>
 8011498:	e005      	b.n	80114a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801149a:	693b      	ldr	r3, [r7, #16]
 801149c:	3318      	adds	r3, #24
 801149e:	4619      	mov	r1, r3
 80114a0:	480e      	ldr	r0, [pc, #56]	; (80114dc <xTaskRemoveFromEventList+0xbc>)
 80114a2:	f7fd fdf8 	bl	800f096 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114aa:	4b0d      	ldr	r3, [pc, #52]	; (80114e0 <xTaskRemoveFromEventList+0xc0>)
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114b0:	429a      	cmp	r2, r3
 80114b2:	d905      	bls.n	80114c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80114b4:	2301      	movs	r3, #1
 80114b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80114b8:	4b0a      	ldr	r3, [pc, #40]	; (80114e4 <xTaskRemoveFromEventList+0xc4>)
 80114ba:	2201      	movs	r2, #1
 80114bc:	601a      	str	r2, [r3, #0]
 80114be:	e001      	b.n	80114c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80114c0:	2300      	movs	r3, #0
 80114c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80114c4:	697b      	ldr	r3, [r7, #20]
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	3718      	adds	r7, #24
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}
 80114ce:	bf00      	nop
 80114d0:	20002244 	.word	0x20002244
 80114d4:	20002224 	.word	0x20002224
 80114d8:	20001d4c 	.word	0x20001d4c
 80114dc:	200021dc 	.word	0x200021dc
 80114e0:	20001d48 	.word	0x20001d48
 80114e4:	20002230 	.word	0x20002230

080114e8 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b084      	sub	sp, #16
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d10a      	bne.n	801150c <vTaskSetTimeOutState+0x24>
	__asm volatile
 80114f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114fa:	f383 8811 	msr	BASEPRI, r3
 80114fe:	f3bf 8f6f 	isb	sy
 8011502:	f3bf 8f4f 	dsb	sy
 8011506:	60fb      	str	r3, [r7, #12]
}
 8011508:	bf00      	nop
 801150a:	e7fe      	b.n	801150a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 801150c:	f001 f91a 	bl	8012744 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011510:	4b06      	ldr	r3, [pc, #24]	; (801152c <vTaskSetTimeOutState+0x44>)
 8011512:	681a      	ldr	r2, [r3, #0]
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8011518:	4b05      	ldr	r3, [pc, #20]	; (8011530 <vTaskSetTimeOutState+0x48>)
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8011520:	f001 f940 	bl	80127a4 <vPortExitCritical>
}
 8011524:	bf00      	nop
 8011526:	3710      	adds	r7, #16
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}
 801152c:	20002234 	.word	0x20002234
 8011530:	20002220 	.word	0x20002220

08011534 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011534:	b480      	push	{r7}
 8011536:	b083      	sub	sp, #12
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801153c:	4b06      	ldr	r3, [pc, #24]	; (8011558 <vTaskInternalSetTimeOutState+0x24>)
 801153e:	681a      	ldr	r2, [r3, #0]
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011544:	4b05      	ldr	r3, [pc, #20]	; (801155c <vTaskInternalSetTimeOutState+0x28>)
 8011546:	681a      	ldr	r2, [r3, #0]
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	605a      	str	r2, [r3, #4]
}
 801154c:	bf00      	nop
 801154e:	370c      	adds	r7, #12
 8011550:	46bd      	mov	sp, r7
 8011552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011556:	4770      	bx	lr
 8011558:	20002234 	.word	0x20002234
 801155c:	20002220 	.word	0x20002220

08011560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b088      	sub	sp, #32
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d10a      	bne.n	8011586 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011574:	f383 8811 	msr	BASEPRI, r3
 8011578:	f3bf 8f6f 	isb	sy
 801157c:	f3bf 8f4f 	dsb	sy
 8011580:	613b      	str	r3, [r7, #16]
}
 8011582:	bf00      	nop
 8011584:	e7fe      	b.n	8011584 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011586:	683b      	ldr	r3, [r7, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d10a      	bne.n	80115a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801158c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011590:	f383 8811 	msr	BASEPRI, r3
 8011594:	f3bf 8f6f 	isb	sy
 8011598:	f3bf 8f4f 	dsb	sy
 801159c:	60fb      	str	r3, [r7, #12]
}
 801159e:	bf00      	nop
 80115a0:	e7fe      	b.n	80115a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80115a2:	f001 f8cf 	bl	8012744 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80115a6:	4b1d      	ldr	r3, [pc, #116]	; (801161c <xTaskCheckForTimeOut+0xbc>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	69ba      	ldr	r2, [r7, #24]
 80115b2:	1ad3      	subs	r3, r2, r3
 80115b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115be:	d102      	bne.n	80115c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80115c0:	2300      	movs	r3, #0
 80115c2:	61fb      	str	r3, [r7, #28]
 80115c4:	e023      	b.n	801160e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681a      	ldr	r2, [r3, #0]
 80115ca:	4b15      	ldr	r3, [pc, #84]	; (8011620 <xTaskCheckForTimeOut+0xc0>)
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d007      	beq.n	80115e2 <xTaskCheckForTimeOut+0x82>
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	685b      	ldr	r3, [r3, #4]
 80115d6:	69ba      	ldr	r2, [r7, #24]
 80115d8:	429a      	cmp	r2, r3
 80115da:	d302      	bcc.n	80115e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80115dc:	2301      	movs	r3, #1
 80115de:	61fb      	str	r3, [r7, #28]
 80115e0:	e015      	b.n	801160e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80115e2:	683b      	ldr	r3, [r7, #0]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	697a      	ldr	r2, [r7, #20]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d20b      	bcs.n	8011604 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80115ec:	683b      	ldr	r3, [r7, #0]
 80115ee:	681a      	ldr	r2, [r3, #0]
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	1ad2      	subs	r2, r2, r3
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f7ff ff9b 	bl	8011534 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80115fe:	2300      	movs	r3, #0
 8011600:	61fb      	str	r3, [r7, #28]
 8011602:	e004      	b.n	801160e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011604:	683b      	ldr	r3, [r7, #0]
 8011606:	2200      	movs	r2, #0
 8011608:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801160a:	2301      	movs	r3, #1
 801160c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801160e:	f001 f8c9 	bl	80127a4 <vPortExitCritical>

	return xReturn;
 8011612:	69fb      	ldr	r3, [r7, #28]
}
 8011614:	4618      	mov	r0, r3
 8011616:	3720      	adds	r7, #32
 8011618:	46bd      	mov	sp, r7
 801161a:	bd80      	pop	{r7, pc}
 801161c:	20002220 	.word	0x20002220
 8011620:	20002234 	.word	0x20002234

08011624 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011624:	b480      	push	{r7}
 8011626:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011628:	4b03      	ldr	r3, [pc, #12]	; (8011638 <vTaskMissedYield+0x14>)
 801162a:	2201      	movs	r2, #1
 801162c:	601a      	str	r2, [r3, #0]
}
 801162e:	bf00      	nop
 8011630:	46bd      	mov	sp, r7
 8011632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011636:	4770      	bx	lr
 8011638:	20002230 	.word	0x20002230

0801163c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011644:	f000 f852 	bl	80116ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011648:	4b06      	ldr	r3, [pc, #24]	; (8011664 <prvIdleTask+0x28>)
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b01      	cmp	r3, #1
 801164e:	d9f9      	bls.n	8011644 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011650:	4b05      	ldr	r3, [pc, #20]	; (8011668 <prvIdleTask+0x2c>)
 8011652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011656:	601a      	str	r2, [r3, #0]
 8011658:	f3bf 8f4f 	dsb	sy
 801165c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011660:	e7f0      	b.n	8011644 <prvIdleTask+0x8>
 8011662:	bf00      	nop
 8011664:	20001d4c 	.word	0x20001d4c
 8011668:	e000ed04 	.word	0xe000ed04

0801166c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b082      	sub	sp, #8
 8011670:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011672:	2300      	movs	r3, #0
 8011674:	607b      	str	r3, [r7, #4]
 8011676:	e00c      	b.n	8011692 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011678:	687a      	ldr	r2, [r7, #4]
 801167a:	4613      	mov	r3, r2
 801167c:	009b      	lsls	r3, r3, #2
 801167e:	4413      	add	r3, r2
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	4a12      	ldr	r2, [pc, #72]	; (80116cc <prvInitialiseTaskLists+0x60>)
 8011684:	4413      	add	r3, r2
 8011686:	4618      	mov	r0, r3
 8011688:	f7fd fcd8 	bl	800f03c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	3301      	adds	r3, #1
 8011690:	607b      	str	r3, [r7, #4]
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2b37      	cmp	r3, #55	; 0x37
 8011696:	d9ef      	bls.n	8011678 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011698:	480d      	ldr	r0, [pc, #52]	; (80116d0 <prvInitialiseTaskLists+0x64>)
 801169a:	f7fd fccf 	bl	800f03c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801169e:	480d      	ldr	r0, [pc, #52]	; (80116d4 <prvInitialiseTaskLists+0x68>)
 80116a0:	f7fd fccc 	bl	800f03c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80116a4:	480c      	ldr	r0, [pc, #48]	; (80116d8 <prvInitialiseTaskLists+0x6c>)
 80116a6:	f7fd fcc9 	bl	800f03c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80116aa:	480c      	ldr	r0, [pc, #48]	; (80116dc <prvInitialiseTaskLists+0x70>)
 80116ac:	f7fd fcc6 	bl	800f03c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80116b0:	480b      	ldr	r0, [pc, #44]	; (80116e0 <prvInitialiseTaskLists+0x74>)
 80116b2:	f7fd fcc3 	bl	800f03c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80116b6:	4b0b      	ldr	r3, [pc, #44]	; (80116e4 <prvInitialiseTaskLists+0x78>)
 80116b8:	4a05      	ldr	r2, [pc, #20]	; (80116d0 <prvInitialiseTaskLists+0x64>)
 80116ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80116bc:	4b0a      	ldr	r3, [pc, #40]	; (80116e8 <prvInitialiseTaskLists+0x7c>)
 80116be:	4a05      	ldr	r2, [pc, #20]	; (80116d4 <prvInitialiseTaskLists+0x68>)
 80116c0:	601a      	str	r2, [r3, #0]
}
 80116c2:	bf00      	nop
 80116c4:	3708      	adds	r7, #8
 80116c6:	46bd      	mov	sp, r7
 80116c8:	bd80      	pop	{r7, pc}
 80116ca:	bf00      	nop
 80116cc:	20001d4c 	.word	0x20001d4c
 80116d0:	200021ac 	.word	0x200021ac
 80116d4:	200021c0 	.word	0x200021c0
 80116d8:	200021dc 	.word	0x200021dc
 80116dc:	200021f0 	.word	0x200021f0
 80116e0:	20002208 	.word	0x20002208
 80116e4:	200021d4 	.word	0x200021d4
 80116e8:	200021d8 	.word	0x200021d8

080116ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80116ec:	b580      	push	{r7, lr}
 80116ee:	b082      	sub	sp, #8
 80116f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80116f2:	e019      	b.n	8011728 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80116f4:	f001 f826 	bl	8012744 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80116f8:	4b10      	ldr	r3, [pc, #64]	; (801173c <prvCheckTasksWaitingTermination+0x50>)
 80116fa:	68db      	ldr	r3, [r3, #12]
 80116fc:	68db      	ldr	r3, [r3, #12]
 80116fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	3304      	adds	r3, #4
 8011704:	4618      	mov	r0, r3
 8011706:	f7fd fd23 	bl	800f150 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801170a:	4b0d      	ldr	r3, [pc, #52]	; (8011740 <prvCheckTasksWaitingTermination+0x54>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	3b01      	subs	r3, #1
 8011710:	4a0b      	ldr	r2, [pc, #44]	; (8011740 <prvCheckTasksWaitingTermination+0x54>)
 8011712:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011714:	4b0b      	ldr	r3, [pc, #44]	; (8011744 <prvCheckTasksWaitingTermination+0x58>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	3b01      	subs	r3, #1
 801171a:	4a0a      	ldr	r2, [pc, #40]	; (8011744 <prvCheckTasksWaitingTermination+0x58>)
 801171c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801171e:	f001 f841 	bl	80127a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f000 f810 	bl	8011748 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011728:	4b06      	ldr	r3, [pc, #24]	; (8011744 <prvCheckTasksWaitingTermination+0x58>)
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	2b00      	cmp	r3, #0
 801172e:	d1e1      	bne.n	80116f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011730:	bf00      	nop
 8011732:	bf00      	nop
 8011734:	3708      	adds	r7, #8
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}
 801173a:	bf00      	nop
 801173c:	200021f0 	.word	0x200021f0
 8011740:	2000221c 	.word	0x2000221c
 8011744:	20002204 	.word	0x20002204

08011748 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	3358      	adds	r3, #88	; 0x58
 8011754:	4618      	mov	r0, r3
 8011756:	f002 fc0f 	bl	8013f78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011760:	2b00      	cmp	r3, #0
 8011762:	d108      	bne.n	8011776 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011768:	4618      	mov	r0, r3
 801176a:	f001 f9dd 	bl	8012b28 <vPortFree>
				vPortFree( pxTCB );
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f001 f9da 	bl	8012b28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011774:	e018      	b.n	80117a8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801177c:	2b01      	cmp	r3, #1
 801177e:	d103      	bne.n	8011788 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011780:	6878      	ldr	r0, [r7, #4]
 8011782:	f001 f9d1 	bl	8012b28 <vPortFree>
	}
 8011786:	e00f      	b.n	80117a8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801178e:	2b02      	cmp	r3, #2
 8011790:	d00a      	beq.n	80117a8 <prvDeleteTCB+0x60>
	__asm volatile
 8011792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011796:	f383 8811 	msr	BASEPRI, r3
 801179a:	f3bf 8f6f 	isb	sy
 801179e:	f3bf 8f4f 	dsb	sy
 80117a2:	60fb      	str	r3, [r7, #12]
}
 80117a4:	bf00      	nop
 80117a6:	e7fe      	b.n	80117a6 <prvDeleteTCB+0x5e>
	}
 80117a8:	bf00      	nop
 80117aa:	3710      	adds	r7, #16
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80117b0:	b480      	push	{r7}
 80117b2:	b083      	sub	sp, #12
 80117b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80117b6:	4b0c      	ldr	r3, [pc, #48]	; (80117e8 <prvResetNextTaskUnblockTime+0x38>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d104      	bne.n	80117ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80117c0:	4b0a      	ldr	r3, [pc, #40]	; (80117ec <prvResetNextTaskUnblockTime+0x3c>)
 80117c2:	f04f 32ff 	mov.w	r2, #4294967295
 80117c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80117c8:	e008      	b.n	80117dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117ca:	4b07      	ldr	r3, [pc, #28]	; (80117e8 <prvResetNextTaskUnblockTime+0x38>)
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	68db      	ldr	r3, [r3, #12]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	685b      	ldr	r3, [r3, #4]
 80117d8:	4a04      	ldr	r2, [pc, #16]	; (80117ec <prvResetNextTaskUnblockTime+0x3c>)
 80117da:	6013      	str	r3, [r2, #0]
}
 80117dc:	bf00      	nop
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr
 80117e8:	200021d4 	.word	0x200021d4
 80117ec:	2000223c 	.word	0x2000223c

080117f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80117f0:	b480      	push	{r7}
 80117f2:	b083      	sub	sp, #12
 80117f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80117f6:	4b05      	ldr	r3, [pc, #20]	; (801180c <xTaskGetCurrentTaskHandle+0x1c>)
 80117f8:	681b      	ldr	r3, [r3, #0]
 80117fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80117fc:	687b      	ldr	r3, [r7, #4]
	}
 80117fe:	4618      	mov	r0, r3
 8011800:	370c      	adds	r7, #12
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr
 801180a:	bf00      	nop
 801180c:	20001d48 	.word	0x20001d48

08011810 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011810:	b480      	push	{r7}
 8011812:	b083      	sub	sp, #12
 8011814:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011816:	4b0b      	ldr	r3, [pc, #44]	; (8011844 <xTaskGetSchedulerState+0x34>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d102      	bne.n	8011824 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801181e:	2301      	movs	r3, #1
 8011820:	607b      	str	r3, [r7, #4]
 8011822:	e008      	b.n	8011836 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011824:	4b08      	ldr	r3, [pc, #32]	; (8011848 <xTaskGetSchedulerState+0x38>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	2b00      	cmp	r3, #0
 801182a:	d102      	bne.n	8011832 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801182c:	2302      	movs	r3, #2
 801182e:	607b      	str	r3, [r7, #4]
 8011830:	e001      	b.n	8011836 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011832:	2300      	movs	r3, #0
 8011834:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011836:	687b      	ldr	r3, [r7, #4]
	}
 8011838:	4618      	mov	r0, r3
 801183a:	370c      	adds	r7, #12
 801183c:	46bd      	mov	sp, r7
 801183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011842:	4770      	bx	lr
 8011844:	20002228 	.word	0x20002228
 8011848:	20002244 	.word	0x20002244

0801184c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011858:	2300      	movs	r3, #0
 801185a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d051      	beq.n	8011906 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011866:	4b2a      	ldr	r3, [pc, #168]	; (8011910 <xTaskPriorityInherit+0xc4>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801186c:	429a      	cmp	r2, r3
 801186e:	d241      	bcs.n	80118f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011870:	68bb      	ldr	r3, [r7, #8]
 8011872:	699b      	ldr	r3, [r3, #24]
 8011874:	2b00      	cmp	r3, #0
 8011876:	db06      	blt.n	8011886 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011878:	4b25      	ldr	r3, [pc, #148]	; (8011910 <xTaskPriorityInherit+0xc4>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801187e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	6959      	ldr	r1, [r3, #20]
 801188a:	68bb      	ldr	r3, [r7, #8]
 801188c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801188e:	4613      	mov	r3, r2
 8011890:	009b      	lsls	r3, r3, #2
 8011892:	4413      	add	r3, r2
 8011894:	009b      	lsls	r3, r3, #2
 8011896:	4a1f      	ldr	r2, [pc, #124]	; (8011914 <xTaskPriorityInherit+0xc8>)
 8011898:	4413      	add	r3, r2
 801189a:	4299      	cmp	r1, r3
 801189c:	d122      	bne.n	80118e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801189e:	68bb      	ldr	r3, [r7, #8]
 80118a0:	3304      	adds	r3, #4
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fd fc54 	bl	800f150 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80118a8:	4b19      	ldr	r3, [pc, #100]	; (8011910 <xTaskPriorityInherit+0xc4>)
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118b6:	4b18      	ldr	r3, [pc, #96]	; (8011918 <xTaskPriorityInherit+0xcc>)
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d903      	bls.n	80118c6 <xTaskPriorityInherit+0x7a>
 80118be:	68bb      	ldr	r3, [r7, #8]
 80118c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118c2:	4a15      	ldr	r2, [pc, #84]	; (8011918 <xTaskPriorityInherit+0xcc>)
 80118c4:	6013      	str	r3, [r2, #0]
 80118c6:	68bb      	ldr	r3, [r7, #8]
 80118c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ca:	4613      	mov	r3, r2
 80118cc:	009b      	lsls	r3, r3, #2
 80118ce:	4413      	add	r3, r2
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	4a10      	ldr	r2, [pc, #64]	; (8011914 <xTaskPriorityInherit+0xc8>)
 80118d4:	441a      	add	r2, r3
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	3304      	adds	r3, #4
 80118da:	4619      	mov	r1, r3
 80118dc:	4610      	mov	r0, r2
 80118de:	f7fd fbda 	bl	800f096 <vListInsertEnd>
 80118e2:	e004      	b.n	80118ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80118e4:	4b0a      	ldr	r3, [pc, #40]	; (8011910 <xTaskPriorityInherit+0xc4>)
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80118ee:	2301      	movs	r3, #1
 80118f0:	60fb      	str	r3, [r7, #12]
 80118f2:	e008      	b.n	8011906 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80118f8:	4b05      	ldr	r3, [pc, #20]	; (8011910 <xTaskPriorityInherit+0xc4>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118fe:	429a      	cmp	r2, r3
 8011900:	d201      	bcs.n	8011906 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011902:	2301      	movs	r3, #1
 8011904:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011906:	68fb      	ldr	r3, [r7, #12]
	}
 8011908:	4618      	mov	r0, r3
 801190a:	3710      	adds	r7, #16
 801190c:	46bd      	mov	sp, r7
 801190e:	bd80      	pop	{r7, pc}
 8011910:	20001d48 	.word	0x20001d48
 8011914:	20001d4c 	.word	0x20001d4c
 8011918:	20002224 	.word	0x20002224

0801191c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801191c:	b580      	push	{r7, lr}
 801191e:	b086      	sub	sp, #24
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011928:	2300      	movs	r3, #0
 801192a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d056      	beq.n	80119e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011932:	4b2e      	ldr	r3, [pc, #184]	; (80119ec <xTaskPriorityDisinherit+0xd0>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	693a      	ldr	r2, [r7, #16]
 8011938:	429a      	cmp	r2, r3
 801193a:	d00a      	beq.n	8011952 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801193c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011940:	f383 8811 	msr	BASEPRI, r3
 8011944:	f3bf 8f6f 	isb	sy
 8011948:	f3bf 8f4f 	dsb	sy
 801194c:	60fb      	str	r3, [r7, #12]
}
 801194e:	bf00      	nop
 8011950:	e7fe      	b.n	8011950 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011956:	2b00      	cmp	r3, #0
 8011958:	d10a      	bne.n	8011970 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801195a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801195e:	f383 8811 	msr	BASEPRI, r3
 8011962:	f3bf 8f6f 	isb	sy
 8011966:	f3bf 8f4f 	dsb	sy
 801196a:	60bb      	str	r3, [r7, #8]
}
 801196c:	bf00      	nop
 801196e:	e7fe      	b.n	801196e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011974:	1e5a      	subs	r2, r3, #1
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801197a:	693b      	ldr	r3, [r7, #16]
 801197c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011982:	429a      	cmp	r2, r3
 8011984:	d02c      	beq.n	80119e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011986:	693b      	ldr	r3, [r7, #16]
 8011988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801198a:	2b00      	cmp	r3, #0
 801198c:	d128      	bne.n	80119e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	3304      	adds	r3, #4
 8011992:	4618      	mov	r0, r3
 8011994:	f7fd fbdc 	bl	800f150 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119a0:	693b      	ldr	r3, [r7, #16]
 80119a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119b0:	4b0f      	ldr	r3, [pc, #60]	; (80119f0 <xTaskPriorityDisinherit+0xd4>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d903      	bls.n	80119c0 <xTaskPriorityDisinherit+0xa4>
 80119b8:	693b      	ldr	r3, [r7, #16]
 80119ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119bc:	4a0c      	ldr	r2, [pc, #48]	; (80119f0 <xTaskPriorityDisinherit+0xd4>)
 80119be:	6013      	str	r3, [r2, #0]
 80119c0:	693b      	ldr	r3, [r7, #16]
 80119c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119c4:	4613      	mov	r3, r2
 80119c6:	009b      	lsls	r3, r3, #2
 80119c8:	4413      	add	r3, r2
 80119ca:	009b      	lsls	r3, r3, #2
 80119cc:	4a09      	ldr	r2, [pc, #36]	; (80119f4 <xTaskPriorityDisinherit+0xd8>)
 80119ce:	441a      	add	r2, r3
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	3304      	adds	r3, #4
 80119d4:	4619      	mov	r1, r3
 80119d6:	4610      	mov	r0, r2
 80119d8:	f7fd fb5d 	bl	800f096 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80119dc:	2301      	movs	r3, #1
 80119de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119e0:	697b      	ldr	r3, [r7, #20]
	}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3718      	adds	r7, #24
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	20001d48 	.word	0x20001d48
 80119f0:	20002224 	.word	0x20002224
 80119f4:	20001d4c 	.word	0x20001d4c

080119f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b088      	sub	sp, #32
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
 8011a00:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011a06:	2301      	movs	r3, #1
 8011a08:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a0a:	687b      	ldr	r3, [r7, #4]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d06a      	beq.n	8011ae6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011a10:	69bb      	ldr	r3, [r7, #24]
 8011a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d10a      	bne.n	8011a2e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a1c:	f383 8811 	msr	BASEPRI, r3
 8011a20:	f3bf 8f6f 	isb	sy
 8011a24:	f3bf 8f4f 	dsb	sy
 8011a28:	60fb      	str	r3, [r7, #12]
}
 8011a2a:	bf00      	nop
 8011a2c:	e7fe      	b.n	8011a2c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011a2e:	69bb      	ldr	r3, [r7, #24]
 8011a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a32:	683a      	ldr	r2, [r7, #0]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	d902      	bls.n	8011a3e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	61fb      	str	r3, [r7, #28]
 8011a3c:	e002      	b.n	8011a44 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a42:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011a44:	69bb      	ldr	r3, [r7, #24]
 8011a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a48:	69fa      	ldr	r2, [r7, #28]
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d04b      	beq.n	8011ae6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011a4e:	69bb      	ldr	r3, [r7, #24]
 8011a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a52:	697a      	ldr	r2, [r7, #20]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	d146      	bne.n	8011ae6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011a58:	4b25      	ldr	r3, [pc, #148]	; (8011af0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011a5a:	681b      	ldr	r3, [r3, #0]
 8011a5c:	69ba      	ldr	r2, [r7, #24]
 8011a5e:	429a      	cmp	r2, r3
 8011a60:	d10a      	bne.n	8011a78 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a66:	f383 8811 	msr	BASEPRI, r3
 8011a6a:	f3bf 8f6f 	isb	sy
 8011a6e:	f3bf 8f4f 	dsb	sy
 8011a72:	60bb      	str	r3, [r7, #8]
}
 8011a74:	bf00      	nop
 8011a76:	e7fe      	b.n	8011a76 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011a78:	69bb      	ldr	r3, [r7, #24]
 8011a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	69fa      	ldr	r2, [r7, #28]
 8011a82:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	699b      	ldr	r3, [r3, #24]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	db04      	blt.n	8011a96 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a8c:	69fb      	ldr	r3, [r7, #28]
 8011a8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011a92:	69bb      	ldr	r3, [r7, #24]
 8011a94:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011a96:	69bb      	ldr	r3, [r7, #24]
 8011a98:	6959      	ldr	r1, [r3, #20]
 8011a9a:	693a      	ldr	r2, [r7, #16]
 8011a9c:	4613      	mov	r3, r2
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	4413      	add	r3, r2
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	4a13      	ldr	r2, [pc, #76]	; (8011af4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011aa6:	4413      	add	r3, r2
 8011aa8:	4299      	cmp	r1, r3
 8011aaa:	d11c      	bne.n	8011ae6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011aac:	69bb      	ldr	r3, [r7, #24]
 8011aae:	3304      	adds	r3, #4
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f7fd fb4d 	bl	800f150 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011ab6:	69bb      	ldr	r3, [r7, #24]
 8011ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aba:	4b0f      	ldr	r3, [pc, #60]	; (8011af8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d903      	bls.n	8011aca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011ac2:	69bb      	ldr	r3, [r7, #24]
 8011ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ac6:	4a0c      	ldr	r2, [pc, #48]	; (8011af8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011ac8:	6013      	str	r3, [r2, #0]
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ace:	4613      	mov	r3, r2
 8011ad0:	009b      	lsls	r3, r3, #2
 8011ad2:	4413      	add	r3, r2
 8011ad4:	009b      	lsls	r3, r3, #2
 8011ad6:	4a07      	ldr	r2, [pc, #28]	; (8011af4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011ad8:	441a      	add	r2, r3
 8011ada:	69bb      	ldr	r3, [r7, #24]
 8011adc:	3304      	adds	r3, #4
 8011ade:	4619      	mov	r1, r3
 8011ae0:	4610      	mov	r0, r2
 8011ae2:	f7fd fad8 	bl	800f096 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011ae6:	bf00      	nop
 8011ae8:	3720      	adds	r7, #32
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}
 8011aee:	bf00      	nop
 8011af0:	20001d48 	.word	0x20001d48
 8011af4:	20001d4c 	.word	0x20001d4c
 8011af8:	20002224 	.word	0x20002224

08011afc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011afc:	b480      	push	{r7}
 8011afe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011b00:	4b07      	ldr	r3, [pc, #28]	; (8011b20 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d004      	beq.n	8011b12 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011b08:	4b05      	ldr	r3, [pc, #20]	; (8011b20 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b0e:	3201      	adds	r2, #1
 8011b10:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011b12:	4b03      	ldr	r3, [pc, #12]	; (8011b20 <pvTaskIncrementMutexHeldCount+0x24>)
 8011b14:	681b      	ldr	r3, [r3, #0]
	}
 8011b16:	4618      	mov	r0, r3
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b1e:	4770      	bx	lr
 8011b20:	20001d48 	.word	0x20001d48

08011b24 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b086      	sub	sp, #24
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	60f8      	str	r0, [r7, #12]
 8011b2c:	60b9      	str	r1, [r7, #8]
 8011b2e:	607a      	str	r2, [r7, #4]
 8011b30:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011b32:	f000 fe07 	bl	8012744 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011b36:	4b29      	ldr	r3, [pc, #164]	; (8011bdc <xTaskNotifyWait+0xb8>)
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011b3e:	b2db      	uxtb	r3, r3
 8011b40:	2b02      	cmp	r3, #2
 8011b42:	d01c      	beq.n	8011b7e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011b44:	4b25      	ldr	r3, [pc, #148]	; (8011bdc <xTaskNotifyWait+0xb8>)
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8011b4c:	68fa      	ldr	r2, [r7, #12]
 8011b4e:	43d2      	mvns	r2, r2
 8011b50:	400a      	ands	r2, r1
 8011b52:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011b56:	4b21      	ldr	r3, [pc, #132]	; (8011bdc <xTaskNotifyWait+0xb8>)
 8011b58:	681b      	ldr	r3, [r3, #0]
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00b      	beq.n	8011b7e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011b66:	2101      	movs	r1, #1
 8011b68:	6838      	ldr	r0, [r7, #0]
 8011b6a:	f000 f91f 	bl	8011dac <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011b6e:	4b1c      	ldr	r3, [pc, #112]	; (8011be0 <xTaskNotifyWait+0xbc>)
 8011b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b74:	601a      	str	r2, [r3, #0]
 8011b76:	f3bf 8f4f 	dsb	sy
 8011b7a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011b7e:	f000 fe11 	bl	80127a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011b82:	f000 fddf 	bl	8012744 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d005      	beq.n	8011b98 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011b8c:	4b13      	ldr	r3, [pc, #76]	; (8011bdc <xTaskNotifyWait+0xb8>)
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011b98:	4b10      	ldr	r3, [pc, #64]	; (8011bdc <xTaskNotifyWait+0xb8>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	2b02      	cmp	r3, #2
 8011ba4:	d002      	beq.n	8011bac <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	617b      	str	r3, [r7, #20]
 8011baa:	e00a      	b.n	8011bc2 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011bac:	4b0b      	ldr	r3, [pc, #44]	; (8011bdc <xTaskNotifyWait+0xb8>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8011bb4:	68ba      	ldr	r2, [r7, #8]
 8011bb6:	43d2      	mvns	r2, r2
 8011bb8:	400a      	ands	r2, r1
 8011bba:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011bc2:	4b06      	ldr	r3, [pc, #24]	; (8011bdc <xTaskNotifyWait+0xb8>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8011bcc:	f000 fdea 	bl	80127a4 <vPortExitCritical>

		return xReturn;
 8011bd0:	697b      	ldr	r3, [r7, #20]
	}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3718      	adds	r7, #24
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}
 8011bda:	bf00      	nop
 8011bdc:	20001d48 	.word	0x20001d48
 8011be0:	e000ed04 	.word	0xe000ed04

08011be4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011be4:	b580      	push	{r7, lr}
 8011be6:	b08a      	sub	sp, #40	; 0x28
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	60f8      	str	r0, [r7, #12]
 8011bec:	60b9      	str	r1, [r7, #8]
 8011bee:	603b      	str	r3, [r7, #0]
 8011bf0:	4613      	mov	r3, r2
 8011bf2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011bf4:	2301      	movs	r3, #1
 8011bf6:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d10a      	bne.n	8011c14 <xTaskGenericNotify+0x30>
	__asm volatile
 8011bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c02:	f383 8811 	msr	BASEPRI, r3
 8011c06:	f3bf 8f6f 	isb	sy
 8011c0a:	f3bf 8f4f 	dsb	sy
 8011c0e:	61bb      	str	r3, [r7, #24]
}
 8011c10:	bf00      	nop
 8011c12:	e7fe      	b.n	8011c12 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011c18:	f000 fd94 	bl	8012744 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d004      	beq.n	8011c2c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011c22:	6a3b      	ldr	r3, [r7, #32]
 8011c24:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011c28:	683b      	ldr	r3, [r7, #0]
 8011c2a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011c2c:	6a3b      	ldr	r3, [r7, #32]
 8011c2e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011c32:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011c34:	6a3b      	ldr	r3, [r7, #32]
 8011c36:	2202      	movs	r2, #2
 8011c38:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8011c3c:	79fb      	ldrb	r3, [r7, #7]
 8011c3e:	2b04      	cmp	r3, #4
 8011c40:	d82d      	bhi.n	8011c9e <xTaskGenericNotify+0xba>
 8011c42:	a201      	add	r2, pc, #4	; (adr r2, 8011c48 <xTaskGenericNotify+0x64>)
 8011c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c48:	08011cc1 	.word	0x08011cc1
 8011c4c:	08011c5d 	.word	0x08011c5d
 8011c50:	08011c6f 	.word	0x08011c6f
 8011c54:	08011c7f 	.word	0x08011c7f
 8011c58:	08011c89 	.word	0x08011c89
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011c5c:	6a3b      	ldr	r3, [r7, #32]
 8011c5e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	431a      	orrs	r2, r3
 8011c66:	6a3b      	ldr	r3, [r7, #32]
 8011c68:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011c6c:	e02b      	b.n	8011cc6 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011c6e:	6a3b      	ldr	r3, [r7, #32]
 8011c70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011c74:	1c5a      	adds	r2, r3, #1
 8011c76:	6a3b      	ldr	r3, [r7, #32]
 8011c78:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011c7c:	e023      	b.n	8011cc6 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011c7e:	6a3b      	ldr	r3, [r7, #32]
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011c86:	e01e      	b.n	8011cc6 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011c88:	7ffb      	ldrb	r3, [r7, #31]
 8011c8a:	2b02      	cmp	r3, #2
 8011c8c:	d004      	beq.n	8011c98 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011c8e:	6a3b      	ldr	r3, [r7, #32]
 8011c90:	68ba      	ldr	r2, [r7, #8]
 8011c92:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011c96:	e016      	b.n	8011cc6 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011c9c:	e013      	b.n	8011cc6 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011c9e:	6a3b      	ldr	r3, [r7, #32]
 8011ca0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ca8:	d00c      	beq.n	8011cc4 <xTaskGenericNotify+0xe0>
	__asm volatile
 8011caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cae:	f383 8811 	msr	BASEPRI, r3
 8011cb2:	f3bf 8f6f 	isb	sy
 8011cb6:	f3bf 8f4f 	dsb	sy
 8011cba:	617b      	str	r3, [r7, #20]
}
 8011cbc:	bf00      	nop
 8011cbe:	e7fe      	b.n	8011cbe <xTaskGenericNotify+0xda>
					break;
 8011cc0:	bf00      	nop
 8011cc2:	e000      	b.n	8011cc6 <xTaskGenericNotify+0xe2>

					break;
 8011cc4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011cc6:	7ffb      	ldrb	r3, [r7, #31]
 8011cc8:	2b01      	cmp	r3, #1
 8011cca:	d13a      	bne.n	8011d42 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	3304      	adds	r3, #4
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7fd fa3d 	bl	800f150 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011cd6:	6a3b      	ldr	r3, [r7, #32]
 8011cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cda:	4b1d      	ldr	r3, [pc, #116]	; (8011d50 <xTaskGenericNotify+0x16c>)
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	429a      	cmp	r2, r3
 8011ce0:	d903      	bls.n	8011cea <xTaskGenericNotify+0x106>
 8011ce2:	6a3b      	ldr	r3, [r7, #32]
 8011ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ce6:	4a1a      	ldr	r2, [pc, #104]	; (8011d50 <xTaskGenericNotify+0x16c>)
 8011ce8:	6013      	str	r3, [r2, #0]
 8011cea:	6a3b      	ldr	r3, [r7, #32]
 8011cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011cee:	4613      	mov	r3, r2
 8011cf0:	009b      	lsls	r3, r3, #2
 8011cf2:	4413      	add	r3, r2
 8011cf4:	009b      	lsls	r3, r3, #2
 8011cf6:	4a17      	ldr	r2, [pc, #92]	; (8011d54 <xTaskGenericNotify+0x170>)
 8011cf8:	441a      	add	r2, r3
 8011cfa:	6a3b      	ldr	r3, [r7, #32]
 8011cfc:	3304      	adds	r3, #4
 8011cfe:	4619      	mov	r1, r3
 8011d00:	4610      	mov	r0, r2
 8011d02:	f7fd f9c8 	bl	800f096 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011d06:	6a3b      	ldr	r3, [r7, #32]
 8011d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d00a      	beq.n	8011d24 <xTaskGenericNotify+0x140>
	__asm volatile
 8011d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d12:	f383 8811 	msr	BASEPRI, r3
 8011d16:	f3bf 8f6f 	isb	sy
 8011d1a:	f3bf 8f4f 	dsb	sy
 8011d1e:	613b      	str	r3, [r7, #16]
}
 8011d20:	bf00      	nop
 8011d22:	e7fe      	b.n	8011d22 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011d24:	6a3b      	ldr	r3, [r7, #32]
 8011d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d28:	4b0b      	ldr	r3, [pc, #44]	; (8011d58 <xTaskGenericNotify+0x174>)
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d2e:	429a      	cmp	r2, r3
 8011d30:	d907      	bls.n	8011d42 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011d32:	4b0a      	ldr	r3, [pc, #40]	; (8011d5c <xTaskGenericNotify+0x178>)
 8011d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d38:	601a      	str	r2, [r3, #0]
 8011d3a:	f3bf 8f4f 	dsb	sy
 8011d3e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011d42:	f000 fd2f 	bl	80127a4 <vPortExitCritical>

		return xReturn;
 8011d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	3728      	adds	r7, #40	; 0x28
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	bd80      	pop	{r7, pc}
 8011d50:	20002224 	.word	0x20002224
 8011d54:	20001d4c 	.word	0x20001d4c
 8011d58:	20001d48 	.word	0x20001d48
 8011d5c:	e000ed04 	.word	0xe000ed04

08011d60 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b084      	sub	sp, #16
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d102      	bne.n	8011d74 <xTaskNotifyStateClear+0x14>
 8011d6e:	4b0e      	ldr	r3, [pc, #56]	; (8011da8 <xTaskNotifyStateClear+0x48>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	e000      	b.n	8011d76 <xTaskNotifyStateClear+0x16>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8011d78:	f000 fce4 	bl	8012744 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	2b02      	cmp	r3, #2
 8011d86:	d106      	bne.n	8011d96 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011d88:	68bb      	ldr	r3, [r7, #8]
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 8011d90:	2301      	movs	r3, #1
 8011d92:	60fb      	str	r3, [r7, #12]
 8011d94:	e001      	b.n	8011d9a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8011d96:	2300      	movs	r3, #0
 8011d98:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8011d9a:	f000 fd03 	bl	80127a4 <vPortExitCritical>

		return xReturn;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
	}
 8011da0:	4618      	mov	r0, r3
 8011da2:	3710      	adds	r7, #16
 8011da4:	46bd      	mov	sp, r7
 8011da6:	bd80      	pop	{r7, pc}
 8011da8:	20001d48 	.word	0x20001d48

08011dac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b084      	sub	sp, #16
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
 8011db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011db6:	4b21      	ldr	r3, [pc, #132]	; (8011e3c <prvAddCurrentTaskToDelayedList+0x90>)
 8011db8:	681b      	ldr	r3, [r3, #0]
 8011dba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011dbc:	4b20      	ldr	r3, [pc, #128]	; (8011e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	3304      	adds	r3, #4
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fd f9c4 	bl	800f150 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dce:	d10a      	bne.n	8011de6 <prvAddCurrentTaskToDelayedList+0x3a>
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d007      	beq.n	8011de6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011dd6:	4b1a      	ldr	r3, [pc, #104]	; (8011e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	3304      	adds	r3, #4
 8011ddc:	4619      	mov	r1, r3
 8011dde:	4819      	ldr	r0, [pc, #100]	; (8011e44 <prvAddCurrentTaskToDelayedList+0x98>)
 8011de0:	f7fd f959 	bl	800f096 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011de4:	e026      	b.n	8011e34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011de6:	68fa      	ldr	r2, [r7, #12]
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	4413      	add	r3, r2
 8011dec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011dee:	4b14      	ldr	r3, [pc, #80]	; (8011e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	68ba      	ldr	r2, [r7, #8]
 8011df4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011df6:	68ba      	ldr	r2, [r7, #8]
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d209      	bcs.n	8011e12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011dfe:	4b12      	ldr	r3, [pc, #72]	; (8011e48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011e00:	681a      	ldr	r2, [r3, #0]
 8011e02:	4b0f      	ldr	r3, [pc, #60]	; (8011e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	3304      	adds	r3, #4
 8011e08:	4619      	mov	r1, r3
 8011e0a:	4610      	mov	r0, r2
 8011e0c:	f7fd f967 	bl	800f0de <vListInsert>
}
 8011e10:	e010      	b.n	8011e34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011e12:	4b0e      	ldr	r3, [pc, #56]	; (8011e4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8011e14:	681a      	ldr	r2, [r3, #0]
 8011e16:	4b0a      	ldr	r3, [pc, #40]	; (8011e40 <prvAddCurrentTaskToDelayedList+0x94>)
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	3304      	adds	r3, #4
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	4610      	mov	r0, r2
 8011e20:	f7fd f95d 	bl	800f0de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011e24:	4b0a      	ldr	r3, [pc, #40]	; (8011e50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	68ba      	ldr	r2, [r7, #8]
 8011e2a:	429a      	cmp	r2, r3
 8011e2c:	d202      	bcs.n	8011e34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011e2e:	4a08      	ldr	r2, [pc, #32]	; (8011e50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	6013      	str	r3, [r2, #0]
}
 8011e34:	bf00      	nop
 8011e36:	3710      	adds	r7, #16
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	20002220 	.word	0x20002220
 8011e40:	20001d48 	.word	0x20001d48
 8011e44:	20002208 	.word	0x20002208
 8011e48:	200021d8 	.word	0x200021d8
 8011e4c:	200021d4 	.word	0x200021d4
 8011e50:	2000223c 	.word	0x2000223c

08011e54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b08a      	sub	sp, #40	; 0x28
 8011e58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011e5e:	f000 fb07 	bl	8012470 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011e62:	4b1c      	ldr	r3, [pc, #112]	; (8011ed4 <xTimerCreateTimerTask+0x80>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d021      	beq.n	8011eae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011e72:	1d3a      	adds	r2, r7, #4
 8011e74:	f107 0108 	add.w	r1, r7, #8
 8011e78:	f107 030c 	add.w	r3, r7, #12
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f7fd f8c3 	bl	800f008 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011e82:	6879      	ldr	r1, [r7, #4]
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	68fa      	ldr	r2, [r7, #12]
 8011e88:	9202      	str	r2, [sp, #8]
 8011e8a:	9301      	str	r3, [sp, #4]
 8011e8c:	2302      	movs	r3, #2
 8011e8e:	9300      	str	r3, [sp, #0]
 8011e90:	2300      	movs	r3, #0
 8011e92:	460a      	mov	r2, r1
 8011e94:	4910      	ldr	r1, [pc, #64]	; (8011ed8 <xTimerCreateTimerTask+0x84>)
 8011e96:	4811      	ldr	r0, [pc, #68]	; (8011edc <xTimerCreateTimerTask+0x88>)
 8011e98:	f7fe fe0a 	bl	8010ab0 <xTaskCreateStatic>
 8011e9c:	4603      	mov	r3, r0
 8011e9e:	4a10      	ldr	r2, [pc, #64]	; (8011ee0 <xTimerCreateTimerTask+0x8c>)
 8011ea0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011ea2:	4b0f      	ldr	r3, [pc, #60]	; (8011ee0 <xTimerCreateTimerTask+0x8c>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d001      	beq.n	8011eae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011eaa:	2301      	movs	r3, #1
 8011eac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d10a      	bne.n	8011eca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eb8:	f383 8811 	msr	BASEPRI, r3
 8011ebc:	f3bf 8f6f 	isb	sy
 8011ec0:	f3bf 8f4f 	dsb	sy
 8011ec4:	613b      	str	r3, [r7, #16]
}
 8011ec6:	bf00      	nop
 8011ec8:	e7fe      	b.n	8011ec8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011eca:	697b      	ldr	r3, [r7, #20]
}
 8011ecc:	4618      	mov	r0, r3
 8011ece:	3718      	adds	r7, #24
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	20002280 	.word	0x20002280
 8011ed8:	08016108 	.word	0x08016108
 8011edc:	08012019 	.word	0x08012019
 8011ee0:	20002284 	.word	0x20002284

08011ee4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b08a      	sub	sp, #40	; 0x28
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	60f8      	str	r0, [r7, #12]
 8011eec:	60b9      	str	r1, [r7, #8]
 8011eee:	607a      	str	r2, [r7, #4]
 8011ef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d10a      	bne.n	8011f12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8011efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f00:	f383 8811 	msr	BASEPRI, r3
 8011f04:	f3bf 8f6f 	isb	sy
 8011f08:	f3bf 8f4f 	dsb	sy
 8011f0c:	623b      	str	r3, [r7, #32]
}
 8011f0e:	bf00      	nop
 8011f10:	e7fe      	b.n	8011f10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011f12:	4b1a      	ldr	r3, [pc, #104]	; (8011f7c <xTimerGenericCommand+0x98>)
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d02a      	beq.n	8011f70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011f1a:	68bb      	ldr	r3, [r7, #8]
 8011f1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	2b05      	cmp	r3, #5
 8011f2a:	dc18      	bgt.n	8011f5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011f2c:	f7ff fc70 	bl	8011810 <xTaskGetSchedulerState>
 8011f30:	4603      	mov	r3, r0
 8011f32:	2b02      	cmp	r3, #2
 8011f34:	d109      	bne.n	8011f4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011f36:	4b11      	ldr	r3, [pc, #68]	; (8011f7c <xTimerGenericCommand+0x98>)
 8011f38:	6818      	ldr	r0, [r3, #0]
 8011f3a:	f107 0110 	add.w	r1, r7, #16
 8011f3e:	2300      	movs	r3, #0
 8011f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011f42:	f7fd fb8d 	bl	800f660 <xQueueGenericSend>
 8011f46:	6278      	str	r0, [r7, #36]	; 0x24
 8011f48:	e012      	b.n	8011f70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011f4a:	4b0c      	ldr	r3, [pc, #48]	; (8011f7c <xTimerGenericCommand+0x98>)
 8011f4c:	6818      	ldr	r0, [r3, #0]
 8011f4e:	f107 0110 	add.w	r1, r7, #16
 8011f52:	2300      	movs	r3, #0
 8011f54:	2200      	movs	r2, #0
 8011f56:	f7fd fb83 	bl	800f660 <xQueueGenericSend>
 8011f5a:	6278      	str	r0, [r7, #36]	; 0x24
 8011f5c:	e008      	b.n	8011f70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011f5e:	4b07      	ldr	r3, [pc, #28]	; (8011f7c <xTimerGenericCommand+0x98>)
 8011f60:	6818      	ldr	r0, [r3, #0]
 8011f62:	f107 0110 	add.w	r1, r7, #16
 8011f66:	2300      	movs	r3, #0
 8011f68:	683a      	ldr	r2, [r7, #0]
 8011f6a:	f7fd fc77 	bl	800f85c <xQueueGenericSendFromISR>
 8011f6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011f72:	4618      	mov	r0, r3
 8011f74:	3728      	adds	r7, #40	; 0x28
 8011f76:	46bd      	mov	sp, r7
 8011f78:	bd80      	pop	{r7, pc}
 8011f7a:	bf00      	nop
 8011f7c:	20002280 	.word	0x20002280

08011f80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b088      	sub	sp, #32
 8011f84:	af02      	add	r7, sp, #8
 8011f86:	6078      	str	r0, [r7, #4]
 8011f88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f8a:	4b22      	ldr	r3, [pc, #136]	; (8012014 <prvProcessExpiredTimer+0x94>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	68db      	ldr	r3, [r3, #12]
 8011f92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011f94:	697b      	ldr	r3, [r7, #20]
 8011f96:	3304      	adds	r3, #4
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f7fd f8d9 	bl	800f150 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011f9e:	697b      	ldr	r3, [r7, #20]
 8011fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011fa4:	f003 0304 	and.w	r3, r3, #4
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d022      	beq.n	8011ff2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011fac:	697b      	ldr	r3, [r7, #20]
 8011fae:	699a      	ldr	r2, [r3, #24]
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	18d1      	adds	r1, r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	683a      	ldr	r2, [r7, #0]
 8011fb8:	6978      	ldr	r0, [r7, #20]
 8011fba:	f000 f8d1 	bl	8012160 <prvInsertTimerInActiveList>
 8011fbe:	4603      	mov	r3, r0
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d01f      	beq.n	8012004 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011fc4:	2300      	movs	r3, #0
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	2300      	movs	r3, #0
 8011fca:	687a      	ldr	r2, [r7, #4]
 8011fcc:	2100      	movs	r1, #0
 8011fce:	6978      	ldr	r0, [r7, #20]
 8011fd0:	f7ff ff88 	bl	8011ee4 <xTimerGenericCommand>
 8011fd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011fd6:	693b      	ldr	r3, [r7, #16]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d113      	bne.n	8012004 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fe0:	f383 8811 	msr	BASEPRI, r3
 8011fe4:	f3bf 8f6f 	isb	sy
 8011fe8:	f3bf 8f4f 	dsb	sy
 8011fec:	60fb      	str	r3, [r7, #12]
}
 8011fee:	bf00      	nop
 8011ff0:	e7fe      	b.n	8011ff0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ff2:	697b      	ldr	r3, [r7, #20]
 8011ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ff8:	f023 0301 	bic.w	r3, r3, #1
 8011ffc:	b2da      	uxtb	r2, r3
 8011ffe:	697b      	ldr	r3, [r7, #20]
 8012000:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	6a1b      	ldr	r3, [r3, #32]
 8012008:	6978      	ldr	r0, [r7, #20]
 801200a:	4798      	blx	r3
}
 801200c:	bf00      	nop
 801200e:	3718      	adds	r7, #24
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	20002278 	.word	0x20002278

08012018 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012018:	b580      	push	{r7, lr}
 801201a:	b084      	sub	sp, #16
 801201c:	af00      	add	r7, sp, #0
 801201e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012020:	f107 0308 	add.w	r3, r7, #8
 8012024:	4618      	mov	r0, r3
 8012026:	f000 f857 	bl	80120d8 <prvGetNextExpireTime>
 801202a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	4619      	mov	r1, r3
 8012030:	68f8      	ldr	r0, [r7, #12]
 8012032:	f000 f803 	bl	801203c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012036:	f000 f8d5 	bl	80121e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801203a:	e7f1      	b.n	8012020 <prvTimerTask+0x8>

0801203c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
 8012042:	6078      	str	r0, [r7, #4]
 8012044:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012046:	f7fe ff95 	bl	8010f74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801204a:	f107 0308 	add.w	r3, r7, #8
 801204e:	4618      	mov	r0, r3
 8012050:	f000 f866 	bl	8012120 <prvSampleTimeNow>
 8012054:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012056:	68bb      	ldr	r3, [r7, #8]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d130      	bne.n	80120be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801205c:	683b      	ldr	r3, [r7, #0]
 801205e:	2b00      	cmp	r3, #0
 8012060:	d10a      	bne.n	8012078 <prvProcessTimerOrBlockTask+0x3c>
 8012062:	687a      	ldr	r2, [r7, #4]
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	429a      	cmp	r2, r3
 8012068:	d806      	bhi.n	8012078 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801206a:	f7fe ff91 	bl	8010f90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801206e:	68f9      	ldr	r1, [r7, #12]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f7ff ff85 	bl	8011f80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8012076:	e024      	b.n	80120c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d008      	beq.n	8012090 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801207e:	4b13      	ldr	r3, [pc, #76]	; (80120cc <prvProcessTimerOrBlockTask+0x90>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d101      	bne.n	801208c <prvProcessTimerOrBlockTask+0x50>
 8012088:	2301      	movs	r3, #1
 801208a:	e000      	b.n	801208e <prvProcessTimerOrBlockTask+0x52>
 801208c:	2300      	movs	r3, #0
 801208e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012090:	4b0f      	ldr	r3, [pc, #60]	; (80120d0 <prvProcessTimerOrBlockTask+0x94>)
 8012092:	6818      	ldr	r0, [r3, #0]
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	1ad3      	subs	r3, r2, r3
 801209a:	683a      	ldr	r2, [r7, #0]
 801209c:	4619      	mov	r1, r3
 801209e:	f7fe f94d 	bl	801033c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80120a2:	f7fe ff75 	bl	8010f90 <xTaskResumeAll>
 80120a6:	4603      	mov	r3, r0
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d10a      	bne.n	80120c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80120ac:	4b09      	ldr	r3, [pc, #36]	; (80120d4 <prvProcessTimerOrBlockTask+0x98>)
 80120ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120b2:	601a      	str	r2, [r3, #0]
 80120b4:	f3bf 8f4f 	dsb	sy
 80120b8:	f3bf 8f6f 	isb	sy
}
 80120bc:	e001      	b.n	80120c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80120be:	f7fe ff67 	bl	8010f90 <xTaskResumeAll>
}
 80120c2:	bf00      	nop
 80120c4:	3710      	adds	r7, #16
 80120c6:	46bd      	mov	sp, r7
 80120c8:	bd80      	pop	{r7, pc}
 80120ca:	bf00      	nop
 80120cc:	2000227c 	.word	0x2000227c
 80120d0:	20002280 	.word	0x20002280
 80120d4:	e000ed04 	.word	0xe000ed04

080120d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80120d8:	b480      	push	{r7}
 80120da:	b085      	sub	sp, #20
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80120e0:	4b0e      	ldr	r3, [pc, #56]	; (801211c <prvGetNextExpireTime+0x44>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d101      	bne.n	80120ee <prvGetNextExpireTime+0x16>
 80120ea:	2201      	movs	r2, #1
 80120ec:	e000      	b.n	80120f0 <prvGetNextExpireTime+0x18>
 80120ee:	2200      	movs	r2, #0
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d105      	bne.n	8012108 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80120fc:	4b07      	ldr	r3, [pc, #28]	; (801211c <prvGetNextExpireTime+0x44>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	68db      	ldr	r3, [r3, #12]
 8012102:	681b      	ldr	r3, [r3, #0]
 8012104:	60fb      	str	r3, [r7, #12]
 8012106:	e001      	b.n	801210c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012108:	2300      	movs	r3, #0
 801210a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801210c:	68fb      	ldr	r3, [r7, #12]
}
 801210e:	4618      	mov	r0, r3
 8012110:	3714      	adds	r7, #20
 8012112:	46bd      	mov	sp, r7
 8012114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012118:	4770      	bx	lr
 801211a:	bf00      	nop
 801211c:	20002278 	.word	0x20002278

08012120 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b084      	sub	sp, #16
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012128:	f7fe ffd0 	bl	80110cc <xTaskGetTickCount>
 801212c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801212e:	4b0b      	ldr	r3, [pc, #44]	; (801215c <prvSampleTimeNow+0x3c>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	68fa      	ldr	r2, [r7, #12]
 8012134:	429a      	cmp	r2, r3
 8012136:	d205      	bcs.n	8012144 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012138:	f000 f936 	bl	80123a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2201      	movs	r2, #1
 8012140:	601a      	str	r2, [r3, #0]
 8012142:	e002      	b.n	801214a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2200      	movs	r2, #0
 8012148:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801214a:	4a04      	ldr	r2, [pc, #16]	; (801215c <prvSampleTimeNow+0x3c>)
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012150:	68fb      	ldr	r3, [r7, #12]
}
 8012152:	4618      	mov	r0, r3
 8012154:	3710      	adds	r7, #16
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}
 801215a:	bf00      	nop
 801215c:	20002288 	.word	0x20002288

08012160 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012160:	b580      	push	{r7, lr}
 8012162:	b086      	sub	sp, #24
 8012164:	af00      	add	r7, sp, #0
 8012166:	60f8      	str	r0, [r7, #12]
 8012168:	60b9      	str	r1, [r7, #8]
 801216a:	607a      	str	r2, [r7, #4]
 801216c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801216e:	2300      	movs	r3, #0
 8012170:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	68ba      	ldr	r2, [r7, #8]
 8012176:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	68fa      	ldr	r2, [r7, #12]
 801217c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801217e:	68ba      	ldr	r2, [r7, #8]
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	429a      	cmp	r2, r3
 8012184:	d812      	bhi.n	80121ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012186:	687a      	ldr	r2, [r7, #4]
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	1ad2      	subs	r2, r2, r3
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	699b      	ldr	r3, [r3, #24]
 8012190:	429a      	cmp	r2, r3
 8012192:	d302      	bcc.n	801219a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012194:	2301      	movs	r3, #1
 8012196:	617b      	str	r3, [r7, #20]
 8012198:	e01b      	b.n	80121d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801219a:	4b10      	ldr	r3, [pc, #64]	; (80121dc <prvInsertTimerInActiveList+0x7c>)
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	68fb      	ldr	r3, [r7, #12]
 80121a0:	3304      	adds	r3, #4
 80121a2:	4619      	mov	r1, r3
 80121a4:	4610      	mov	r0, r2
 80121a6:	f7fc ff9a 	bl	800f0de <vListInsert>
 80121aa:	e012      	b.n	80121d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80121ac:	687a      	ldr	r2, [r7, #4]
 80121ae:	683b      	ldr	r3, [r7, #0]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d206      	bcs.n	80121c2 <prvInsertTimerInActiveList+0x62>
 80121b4:	68ba      	ldr	r2, [r7, #8]
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	429a      	cmp	r2, r3
 80121ba:	d302      	bcc.n	80121c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80121bc:	2301      	movs	r3, #1
 80121be:	617b      	str	r3, [r7, #20]
 80121c0:	e007      	b.n	80121d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80121c2:	4b07      	ldr	r3, [pc, #28]	; (80121e0 <prvInsertTimerInActiveList+0x80>)
 80121c4:	681a      	ldr	r2, [r3, #0]
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	3304      	adds	r3, #4
 80121ca:	4619      	mov	r1, r3
 80121cc:	4610      	mov	r0, r2
 80121ce:	f7fc ff86 	bl	800f0de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80121d2:	697b      	ldr	r3, [r7, #20]
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3718      	adds	r7, #24
 80121d8:	46bd      	mov	sp, r7
 80121da:	bd80      	pop	{r7, pc}
 80121dc:	2000227c 	.word	0x2000227c
 80121e0:	20002278 	.word	0x20002278

080121e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b08e      	sub	sp, #56	; 0x38
 80121e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80121ea:	e0ca      	b.n	8012382 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	da18      	bge.n	8012224 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80121f2:	1d3b      	adds	r3, r7, #4
 80121f4:	3304      	adds	r3, #4
 80121f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80121f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d10a      	bne.n	8012214 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80121fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012202:	f383 8811 	msr	BASEPRI, r3
 8012206:	f3bf 8f6f 	isb	sy
 801220a:	f3bf 8f4f 	dsb	sy
 801220e:	61fb      	str	r3, [r7, #28]
}
 8012210:	bf00      	nop
 8012212:	e7fe      	b.n	8012212 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801221a:	6850      	ldr	r0, [r2, #4]
 801221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801221e:	6892      	ldr	r2, [r2, #8]
 8012220:	4611      	mov	r1, r2
 8012222:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2b00      	cmp	r3, #0
 8012228:	f2c0 80aa 	blt.w	8012380 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8012230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012232:	695b      	ldr	r3, [r3, #20]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d004      	beq.n	8012242 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223a:	3304      	adds	r3, #4
 801223c:	4618      	mov	r0, r3
 801223e:	f7fc ff87 	bl	800f150 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012242:	463b      	mov	r3, r7
 8012244:	4618      	mov	r0, r3
 8012246:	f7ff ff6b 	bl	8012120 <prvSampleTimeNow>
 801224a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2b09      	cmp	r3, #9
 8012250:	f200 8097 	bhi.w	8012382 <prvProcessReceivedCommands+0x19e>
 8012254:	a201      	add	r2, pc, #4	; (adr r2, 801225c <prvProcessReceivedCommands+0x78>)
 8012256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801225a:	bf00      	nop
 801225c:	08012285 	.word	0x08012285
 8012260:	08012285 	.word	0x08012285
 8012264:	08012285 	.word	0x08012285
 8012268:	080122f9 	.word	0x080122f9
 801226c:	0801230d 	.word	0x0801230d
 8012270:	08012357 	.word	0x08012357
 8012274:	08012285 	.word	0x08012285
 8012278:	08012285 	.word	0x08012285
 801227c:	080122f9 	.word	0x080122f9
 8012280:	0801230d 	.word	0x0801230d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801228a:	f043 0301 	orr.w	r3, r3, #1
 801228e:	b2da      	uxtb	r2, r3
 8012290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012296:	68ba      	ldr	r2, [r7, #8]
 8012298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801229a:	699b      	ldr	r3, [r3, #24]
 801229c:	18d1      	adds	r1, r2, r3
 801229e:	68bb      	ldr	r3, [r7, #8]
 80122a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122a4:	f7ff ff5c 	bl	8012160 <prvInsertTimerInActiveList>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d069      	beq.n	8012382 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80122ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b0:	6a1b      	ldr	r3, [r3, #32]
 80122b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80122b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122bc:	f003 0304 	and.w	r3, r3, #4
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d05e      	beq.n	8012382 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80122c4:	68ba      	ldr	r2, [r7, #8]
 80122c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122c8:	699b      	ldr	r3, [r3, #24]
 80122ca:	441a      	add	r2, r3
 80122cc:	2300      	movs	r3, #0
 80122ce:	9300      	str	r3, [sp, #0]
 80122d0:	2300      	movs	r3, #0
 80122d2:	2100      	movs	r1, #0
 80122d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122d6:	f7ff fe05 	bl	8011ee4 <xTimerGenericCommand>
 80122da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80122dc:	6a3b      	ldr	r3, [r7, #32]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d14f      	bne.n	8012382 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80122e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122e6:	f383 8811 	msr	BASEPRI, r3
 80122ea:	f3bf 8f6f 	isb	sy
 80122ee:	f3bf 8f4f 	dsb	sy
 80122f2:	61bb      	str	r3, [r7, #24]
}
 80122f4:	bf00      	nop
 80122f6:	e7fe      	b.n	80122f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80122f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122fe:	f023 0301 	bic.w	r3, r3, #1
 8012302:	b2da      	uxtb	r2, r3
 8012304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801230a:	e03a      	b.n	8012382 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801230e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012312:	f043 0301 	orr.w	r3, r3, #1
 8012316:	b2da      	uxtb	r2, r3
 8012318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801231e:	68ba      	ldr	r2, [r7, #8]
 8012320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012322:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012326:	699b      	ldr	r3, [r3, #24]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d10a      	bne.n	8012342 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012330:	f383 8811 	msr	BASEPRI, r3
 8012334:	f3bf 8f6f 	isb	sy
 8012338:	f3bf 8f4f 	dsb	sy
 801233c:	617b      	str	r3, [r7, #20]
}
 801233e:	bf00      	nop
 8012340:	e7fe      	b.n	8012340 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8012342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012344:	699a      	ldr	r2, [r3, #24]
 8012346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012348:	18d1      	adds	r1, r2, r3
 801234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801234c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801234e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012350:	f7ff ff06 	bl	8012160 <prvInsertTimerInActiveList>
					break;
 8012354:	e015      	b.n	8012382 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801235c:	f003 0302 	and.w	r3, r3, #2
 8012360:	2b00      	cmp	r3, #0
 8012362:	d103      	bne.n	801236c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012366:	f000 fbdf 	bl	8012b28 <vPortFree>
 801236a:	e00a      	b.n	8012382 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801236e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012372:	f023 0301 	bic.w	r3, r3, #1
 8012376:	b2da      	uxtb	r2, r3
 8012378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801237a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801237e:	e000      	b.n	8012382 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012380:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012382:	4b08      	ldr	r3, [pc, #32]	; (80123a4 <prvProcessReceivedCommands+0x1c0>)
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	1d39      	adds	r1, r7, #4
 8012388:	2200      	movs	r2, #0
 801238a:	4618      	mov	r0, r3
 801238c:	f7fd fb8e 	bl	800faac <xQueueReceive>
 8012390:	4603      	mov	r3, r0
 8012392:	2b00      	cmp	r3, #0
 8012394:	f47f af2a 	bne.w	80121ec <prvProcessReceivedCommands+0x8>
	}
}
 8012398:	bf00      	nop
 801239a:	bf00      	nop
 801239c:	3730      	adds	r7, #48	; 0x30
 801239e:	46bd      	mov	sp, r7
 80123a0:	bd80      	pop	{r7, pc}
 80123a2:	bf00      	nop
 80123a4:	20002280 	.word	0x20002280

080123a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b088      	sub	sp, #32
 80123ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80123ae:	e048      	b.n	8012442 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80123b0:	4b2d      	ldr	r3, [pc, #180]	; (8012468 <prvSwitchTimerLists+0xc0>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	68db      	ldr	r3, [r3, #12]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123ba:	4b2b      	ldr	r3, [pc, #172]	; (8012468 <prvSwitchTimerLists+0xc0>)
 80123bc:	681b      	ldr	r3, [r3, #0]
 80123be:	68db      	ldr	r3, [r3, #12]
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	3304      	adds	r3, #4
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7fc fec1 	bl	800f150 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	6a1b      	ldr	r3, [r3, #32]
 80123d2:	68f8      	ldr	r0, [r7, #12]
 80123d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123dc:	f003 0304 	and.w	r3, r3, #4
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d02e      	beq.n	8012442 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	699b      	ldr	r3, [r3, #24]
 80123e8:	693a      	ldr	r2, [r7, #16]
 80123ea:	4413      	add	r3, r2
 80123ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80123ee:	68ba      	ldr	r2, [r7, #8]
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	429a      	cmp	r2, r3
 80123f4:	d90e      	bls.n	8012414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	68ba      	ldr	r2, [r7, #8]
 80123fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	68fa      	ldr	r2, [r7, #12]
 8012400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012402:	4b19      	ldr	r3, [pc, #100]	; (8012468 <prvSwitchTimerLists+0xc0>)
 8012404:	681a      	ldr	r2, [r3, #0]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	3304      	adds	r3, #4
 801240a:	4619      	mov	r1, r3
 801240c:	4610      	mov	r0, r2
 801240e:	f7fc fe66 	bl	800f0de <vListInsert>
 8012412:	e016      	b.n	8012442 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012414:	2300      	movs	r3, #0
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	2300      	movs	r3, #0
 801241a:	693a      	ldr	r2, [r7, #16]
 801241c:	2100      	movs	r1, #0
 801241e:	68f8      	ldr	r0, [r7, #12]
 8012420:	f7ff fd60 	bl	8011ee4 <xTimerGenericCommand>
 8012424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d10a      	bne.n	8012442 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801242c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012430:	f383 8811 	msr	BASEPRI, r3
 8012434:	f3bf 8f6f 	isb	sy
 8012438:	f3bf 8f4f 	dsb	sy
 801243c:	603b      	str	r3, [r7, #0]
}
 801243e:	bf00      	nop
 8012440:	e7fe      	b.n	8012440 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012442:	4b09      	ldr	r3, [pc, #36]	; (8012468 <prvSwitchTimerLists+0xc0>)
 8012444:	681b      	ldr	r3, [r3, #0]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d1b1      	bne.n	80123b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801244c:	4b06      	ldr	r3, [pc, #24]	; (8012468 <prvSwitchTimerLists+0xc0>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012452:	4b06      	ldr	r3, [pc, #24]	; (801246c <prvSwitchTimerLists+0xc4>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	4a04      	ldr	r2, [pc, #16]	; (8012468 <prvSwitchTimerLists+0xc0>)
 8012458:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801245a:	4a04      	ldr	r2, [pc, #16]	; (801246c <prvSwitchTimerLists+0xc4>)
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	6013      	str	r3, [r2, #0]
}
 8012460:	bf00      	nop
 8012462:	3718      	adds	r7, #24
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}
 8012468:	20002278 	.word	0x20002278
 801246c:	2000227c 	.word	0x2000227c

08012470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012476:	f000 f965 	bl	8012744 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801247a:	4b15      	ldr	r3, [pc, #84]	; (80124d0 <prvCheckForValidListAndQueue+0x60>)
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d120      	bne.n	80124c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8012482:	4814      	ldr	r0, [pc, #80]	; (80124d4 <prvCheckForValidListAndQueue+0x64>)
 8012484:	f7fc fdda 	bl	800f03c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012488:	4813      	ldr	r0, [pc, #76]	; (80124d8 <prvCheckForValidListAndQueue+0x68>)
 801248a:	f7fc fdd7 	bl	800f03c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801248e:	4b13      	ldr	r3, [pc, #76]	; (80124dc <prvCheckForValidListAndQueue+0x6c>)
 8012490:	4a10      	ldr	r2, [pc, #64]	; (80124d4 <prvCheckForValidListAndQueue+0x64>)
 8012492:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012494:	4b12      	ldr	r3, [pc, #72]	; (80124e0 <prvCheckForValidListAndQueue+0x70>)
 8012496:	4a10      	ldr	r2, [pc, #64]	; (80124d8 <prvCheckForValidListAndQueue+0x68>)
 8012498:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801249a:	2300      	movs	r3, #0
 801249c:	9300      	str	r3, [sp, #0]
 801249e:	4b11      	ldr	r3, [pc, #68]	; (80124e4 <prvCheckForValidListAndQueue+0x74>)
 80124a0:	4a11      	ldr	r2, [pc, #68]	; (80124e8 <prvCheckForValidListAndQueue+0x78>)
 80124a2:	2110      	movs	r1, #16
 80124a4:	200a      	movs	r0, #10
 80124a6:	f7fc fee5 	bl	800f274 <xQueueGenericCreateStatic>
 80124aa:	4603      	mov	r3, r0
 80124ac:	4a08      	ldr	r2, [pc, #32]	; (80124d0 <prvCheckForValidListAndQueue+0x60>)
 80124ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80124b0:	4b07      	ldr	r3, [pc, #28]	; (80124d0 <prvCheckForValidListAndQueue+0x60>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d005      	beq.n	80124c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80124b8:	4b05      	ldr	r3, [pc, #20]	; (80124d0 <prvCheckForValidListAndQueue+0x60>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	490b      	ldr	r1, [pc, #44]	; (80124ec <prvCheckForValidListAndQueue+0x7c>)
 80124be:	4618      	mov	r0, r3
 80124c0:	f7fd fee8 	bl	8010294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80124c4:	f000 f96e 	bl	80127a4 <vPortExitCritical>
}
 80124c8:	bf00      	nop
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	20002280 	.word	0x20002280
 80124d4:	20002250 	.word	0x20002250
 80124d8:	20002264 	.word	0x20002264
 80124dc:	20002278 	.word	0x20002278
 80124e0:	2000227c 	.word	0x2000227c
 80124e4:	2000232c 	.word	0x2000232c
 80124e8:	2000228c 	.word	0x2000228c
 80124ec:	08016110 	.word	0x08016110

080124f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80124f0:	b480      	push	{r7}
 80124f2:	b085      	sub	sp, #20
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	60f8      	str	r0, [r7, #12]
 80124f8:	60b9      	str	r1, [r7, #8]
 80124fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	3b04      	subs	r3, #4
 8012500:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	3b04      	subs	r3, #4
 801250e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	f023 0201 	bic.w	r2, r3, #1
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	3b04      	subs	r3, #4
 801251e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012520:	4a0c      	ldr	r2, [pc, #48]	; (8012554 <pxPortInitialiseStack+0x64>)
 8012522:	68fb      	ldr	r3, [r7, #12]
 8012524:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	3b14      	subs	r3, #20
 801252a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801252c:	687a      	ldr	r2, [r7, #4]
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	3b04      	subs	r3, #4
 8012536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	f06f 0202 	mvn.w	r2, #2
 801253e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	3b20      	subs	r3, #32
 8012544:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012546:	68fb      	ldr	r3, [r7, #12]
}
 8012548:	4618      	mov	r0, r3
 801254a:	3714      	adds	r7, #20
 801254c:	46bd      	mov	sp, r7
 801254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012552:	4770      	bx	lr
 8012554:	08012559 	.word	0x08012559

08012558 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012558:	b480      	push	{r7}
 801255a:	b085      	sub	sp, #20
 801255c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801255e:	2300      	movs	r3, #0
 8012560:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012562:	4b12      	ldr	r3, [pc, #72]	; (80125ac <prvTaskExitError+0x54>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	f1b3 3fff 	cmp.w	r3, #4294967295
 801256a:	d00a      	beq.n	8012582 <prvTaskExitError+0x2a>
	__asm volatile
 801256c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012570:	f383 8811 	msr	BASEPRI, r3
 8012574:	f3bf 8f6f 	isb	sy
 8012578:	f3bf 8f4f 	dsb	sy
 801257c:	60fb      	str	r3, [r7, #12]
}
 801257e:	bf00      	nop
 8012580:	e7fe      	b.n	8012580 <prvTaskExitError+0x28>
	__asm volatile
 8012582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012586:	f383 8811 	msr	BASEPRI, r3
 801258a:	f3bf 8f6f 	isb	sy
 801258e:	f3bf 8f4f 	dsb	sy
 8012592:	60bb      	str	r3, [r7, #8]
}
 8012594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012596:	bf00      	nop
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d0fc      	beq.n	8012598 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801259e:	bf00      	nop
 80125a0:	bf00      	nop
 80125a2:	3714      	adds	r7, #20
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr
 80125ac:	2000001c 	.word	0x2000001c

080125b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80125b0:	4b07      	ldr	r3, [pc, #28]	; (80125d0 <pxCurrentTCBConst2>)
 80125b2:	6819      	ldr	r1, [r3, #0]
 80125b4:	6808      	ldr	r0, [r1, #0]
 80125b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ba:	f380 8809 	msr	PSP, r0
 80125be:	f3bf 8f6f 	isb	sy
 80125c2:	f04f 0000 	mov.w	r0, #0
 80125c6:	f380 8811 	msr	BASEPRI, r0
 80125ca:	4770      	bx	lr
 80125cc:	f3af 8000 	nop.w

080125d0 <pxCurrentTCBConst2>:
 80125d0:	20001d48 	.word	0x20001d48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80125d4:	bf00      	nop
 80125d6:	bf00      	nop

080125d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80125d8:	4808      	ldr	r0, [pc, #32]	; (80125fc <prvPortStartFirstTask+0x24>)
 80125da:	6800      	ldr	r0, [r0, #0]
 80125dc:	6800      	ldr	r0, [r0, #0]
 80125de:	f380 8808 	msr	MSP, r0
 80125e2:	f04f 0000 	mov.w	r0, #0
 80125e6:	f380 8814 	msr	CONTROL, r0
 80125ea:	b662      	cpsie	i
 80125ec:	b661      	cpsie	f
 80125ee:	f3bf 8f4f 	dsb	sy
 80125f2:	f3bf 8f6f 	isb	sy
 80125f6:	df00      	svc	0
 80125f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80125fa:	bf00      	nop
 80125fc:	e000ed08 	.word	0xe000ed08

08012600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012600:	b580      	push	{r7, lr}
 8012602:	b086      	sub	sp, #24
 8012604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012606:	4b46      	ldr	r3, [pc, #280]	; (8012720 <xPortStartScheduler+0x120>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	4a46      	ldr	r2, [pc, #280]	; (8012724 <xPortStartScheduler+0x124>)
 801260c:	4293      	cmp	r3, r2
 801260e:	d10a      	bne.n	8012626 <xPortStartScheduler+0x26>
	__asm volatile
 8012610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012614:	f383 8811 	msr	BASEPRI, r3
 8012618:	f3bf 8f6f 	isb	sy
 801261c:	f3bf 8f4f 	dsb	sy
 8012620:	613b      	str	r3, [r7, #16]
}
 8012622:	bf00      	nop
 8012624:	e7fe      	b.n	8012624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012626:	4b3e      	ldr	r3, [pc, #248]	; (8012720 <xPortStartScheduler+0x120>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	4a3f      	ldr	r2, [pc, #252]	; (8012728 <xPortStartScheduler+0x128>)
 801262c:	4293      	cmp	r3, r2
 801262e:	d10a      	bne.n	8012646 <xPortStartScheduler+0x46>
	__asm volatile
 8012630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012634:	f383 8811 	msr	BASEPRI, r3
 8012638:	f3bf 8f6f 	isb	sy
 801263c:	f3bf 8f4f 	dsb	sy
 8012640:	60fb      	str	r3, [r7, #12]
}
 8012642:	bf00      	nop
 8012644:	e7fe      	b.n	8012644 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012646:	4b39      	ldr	r3, [pc, #228]	; (801272c <xPortStartScheduler+0x12c>)
 8012648:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	b2db      	uxtb	r3, r3
 8012650:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012652:	697b      	ldr	r3, [r7, #20]
 8012654:	22ff      	movs	r2, #255	; 0xff
 8012656:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	781b      	ldrb	r3, [r3, #0]
 801265c:	b2db      	uxtb	r3, r3
 801265e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012660:	78fb      	ldrb	r3, [r7, #3]
 8012662:	b2db      	uxtb	r3, r3
 8012664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012668:	b2da      	uxtb	r2, r3
 801266a:	4b31      	ldr	r3, [pc, #196]	; (8012730 <xPortStartScheduler+0x130>)
 801266c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801266e:	4b31      	ldr	r3, [pc, #196]	; (8012734 <xPortStartScheduler+0x134>)
 8012670:	2207      	movs	r2, #7
 8012672:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012674:	e009      	b.n	801268a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012676:	4b2f      	ldr	r3, [pc, #188]	; (8012734 <xPortStartScheduler+0x134>)
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	3b01      	subs	r3, #1
 801267c:	4a2d      	ldr	r2, [pc, #180]	; (8012734 <xPortStartScheduler+0x134>)
 801267e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012680:	78fb      	ldrb	r3, [r7, #3]
 8012682:	b2db      	uxtb	r3, r3
 8012684:	005b      	lsls	r3, r3, #1
 8012686:	b2db      	uxtb	r3, r3
 8012688:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801268a:	78fb      	ldrb	r3, [r7, #3]
 801268c:	b2db      	uxtb	r3, r3
 801268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012692:	2b80      	cmp	r3, #128	; 0x80
 8012694:	d0ef      	beq.n	8012676 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012696:	4b27      	ldr	r3, [pc, #156]	; (8012734 <xPortStartScheduler+0x134>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	f1c3 0307 	rsb	r3, r3, #7
 801269e:	2b04      	cmp	r3, #4
 80126a0:	d00a      	beq.n	80126b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80126a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126a6:	f383 8811 	msr	BASEPRI, r3
 80126aa:	f3bf 8f6f 	isb	sy
 80126ae:	f3bf 8f4f 	dsb	sy
 80126b2:	60bb      	str	r3, [r7, #8]
}
 80126b4:	bf00      	nop
 80126b6:	e7fe      	b.n	80126b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80126b8:	4b1e      	ldr	r3, [pc, #120]	; (8012734 <xPortStartScheduler+0x134>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	021b      	lsls	r3, r3, #8
 80126be:	4a1d      	ldr	r2, [pc, #116]	; (8012734 <xPortStartScheduler+0x134>)
 80126c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80126c2:	4b1c      	ldr	r3, [pc, #112]	; (8012734 <xPortStartScheduler+0x134>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80126ca:	4a1a      	ldr	r2, [pc, #104]	; (8012734 <xPortStartScheduler+0x134>)
 80126cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	b2da      	uxtb	r2, r3
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80126d6:	4b18      	ldr	r3, [pc, #96]	; (8012738 <xPortStartScheduler+0x138>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	4a17      	ldr	r2, [pc, #92]	; (8012738 <xPortStartScheduler+0x138>)
 80126dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80126e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80126e2:	4b15      	ldr	r3, [pc, #84]	; (8012738 <xPortStartScheduler+0x138>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	4a14      	ldr	r2, [pc, #80]	; (8012738 <xPortStartScheduler+0x138>)
 80126e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80126ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80126ee:	f000 f8dd 	bl	80128ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80126f2:	4b12      	ldr	r3, [pc, #72]	; (801273c <xPortStartScheduler+0x13c>)
 80126f4:	2200      	movs	r2, #0
 80126f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80126f8:	f000 f8fc 	bl	80128f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80126fc:	4b10      	ldr	r3, [pc, #64]	; (8012740 <xPortStartScheduler+0x140>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	4a0f      	ldr	r2, [pc, #60]	; (8012740 <xPortStartScheduler+0x140>)
 8012702:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012706:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012708:	f7ff ff66 	bl	80125d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801270c:	f7fe fda8 	bl	8011260 <vTaskSwitchContext>
	prvTaskExitError();
 8012710:	f7ff ff22 	bl	8012558 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012714:	2300      	movs	r3, #0
}
 8012716:	4618      	mov	r0, r3
 8012718:	3718      	adds	r7, #24
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop
 8012720:	e000ed00 	.word	0xe000ed00
 8012724:	410fc271 	.word	0x410fc271
 8012728:	410fc270 	.word	0x410fc270
 801272c:	e000e400 	.word	0xe000e400
 8012730:	2000237c 	.word	0x2000237c
 8012734:	20002380 	.word	0x20002380
 8012738:	e000ed20 	.word	0xe000ed20
 801273c:	2000001c 	.word	0x2000001c
 8012740:	e000ef34 	.word	0xe000ef34

08012744 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012744:	b480      	push	{r7}
 8012746:	b083      	sub	sp, #12
 8012748:	af00      	add	r7, sp, #0
	__asm volatile
 801274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801274e:	f383 8811 	msr	BASEPRI, r3
 8012752:	f3bf 8f6f 	isb	sy
 8012756:	f3bf 8f4f 	dsb	sy
 801275a:	607b      	str	r3, [r7, #4]
}
 801275c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801275e:	4b0f      	ldr	r3, [pc, #60]	; (801279c <vPortEnterCritical+0x58>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	3301      	adds	r3, #1
 8012764:	4a0d      	ldr	r2, [pc, #52]	; (801279c <vPortEnterCritical+0x58>)
 8012766:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012768:	4b0c      	ldr	r3, [pc, #48]	; (801279c <vPortEnterCritical+0x58>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2b01      	cmp	r3, #1
 801276e:	d10f      	bne.n	8012790 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012770:	4b0b      	ldr	r3, [pc, #44]	; (80127a0 <vPortEnterCritical+0x5c>)
 8012772:	681b      	ldr	r3, [r3, #0]
 8012774:	b2db      	uxtb	r3, r3
 8012776:	2b00      	cmp	r3, #0
 8012778:	d00a      	beq.n	8012790 <vPortEnterCritical+0x4c>
	__asm volatile
 801277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801277e:	f383 8811 	msr	BASEPRI, r3
 8012782:	f3bf 8f6f 	isb	sy
 8012786:	f3bf 8f4f 	dsb	sy
 801278a:	603b      	str	r3, [r7, #0]
}
 801278c:	bf00      	nop
 801278e:	e7fe      	b.n	801278e <vPortEnterCritical+0x4a>
	}
}
 8012790:	bf00      	nop
 8012792:	370c      	adds	r7, #12
 8012794:	46bd      	mov	sp, r7
 8012796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801279a:	4770      	bx	lr
 801279c:	2000001c 	.word	0x2000001c
 80127a0:	e000ed04 	.word	0xe000ed04

080127a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80127a4:	b480      	push	{r7}
 80127a6:	b083      	sub	sp, #12
 80127a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80127aa:	4b12      	ldr	r3, [pc, #72]	; (80127f4 <vPortExitCritical+0x50>)
 80127ac:	681b      	ldr	r3, [r3, #0]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d10a      	bne.n	80127c8 <vPortExitCritical+0x24>
	__asm volatile
 80127b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b6:	f383 8811 	msr	BASEPRI, r3
 80127ba:	f3bf 8f6f 	isb	sy
 80127be:	f3bf 8f4f 	dsb	sy
 80127c2:	607b      	str	r3, [r7, #4]
}
 80127c4:	bf00      	nop
 80127c6:	e7fe      	b.n	80127c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80127c8:	4b0a      	ldr	r3, [pc, #40]	; (80127f4 <vPortExitCritical+0x50>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	3b01      	subs	r3, #1
 80127ce:	4a09      	ldr	r2, [pc, #36]	; (80127f4 <vPortExitCritical+0x50>)
 80127d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80127d2:	4b08      	ldr	r3, [pc, #32]	; (80127f4 <vPortExitCritical+0x50>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d105      	bne.n	80127e6 <vPortExitCritical+0x42>
 80127da:	2300      	movs	r3, #0
 80127dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	f383 8811 	msr	BASEPRI, r3
}
 80127e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80127e6:	bf00      	nop
 80127e8:	370c      	adds	r7, #12
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	2000001c 	.word	0x2000001c
	...

08012800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012800:	f3ef 8009 	mrs	r0, PSP
 8012804:	f3bf 8f6f 	isb	sy
 8012808:	4b15      	ldr	r3, [pc, #84]	; (8012860 <pxCurrentTCBConst>)
 801280a:	681a      	ldr	r2, [r3, #0]
 801280c:	f01e 0f10 	tst.w	lr, #16
 8012810:	bf08      	it	eq
 8012812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801281a:	6010      	str	r0, [r2, #0]
 801281c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012824:	f380 8811 	msr	BASEPRI, r0
 8012828:	f3bf 8f4f 	dsb	sy
 801282c:	f3bf 8f6f 	isb	sy
 8012830:	f7fe fd16 	bl	8011260 <vTaskSwitchContext>
 8012834:	f04f 0000 	mov.w	r0, #0
 8012838:	f380 8811 	msr	BASEPRI, r0
 801283c:	bc09      	pop	{r0, r3}
 801283e:	6819      	ldr	r1, [r3, #0]
 8012840:	6808      	ldr	r0, [r1, #0]
 8012842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012846:	f01e 0f10 	tst.w	lr, #16
 801284a:	bf08      	it	eq
 801284c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012850:	f380 8809 	msr	PSP, r0
 8012854:	f3bf 8f6f 	isb	sy
 8012858:	4770      	bx	lr
 801285a:	bf00      	nop
 801285c:	f3af 8000 	nop.w

08012860 <pxCurrentTCBConst>:
 8012860:	20001d48 	.word	0x20001d48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012864:	bf00      	nop
 8012866:	bf00      	nop

08012868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b082      	sub	sp, #8
 801286c:	af00      	add	r7, sp, #0
	__asm volatile
 801286e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012872:	f383 8811 	msr	BASEPRI, r3
 8012876:	f3bf 8f6f 	isb	sy
 801287a:	f3bf 8f4f 	dsb	sy
 801287e:	607b      	str	r3, [r7, #4]
}
 8012880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012882:	f7fe fc33 	bl	80110ec <xTaskIncrementTick>
 8012886:	4603      	mov	r3, r0
 8012888:	2b00      	cmp	r3, #0
 801288a:	d003      	beq.n	8012894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801288c:	4b06      	ldr	r3, [pc, #24]	; (80128a8 <xPortSysTickHandler+0x40>)
 801288e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012892:	601a      	str	r2, [r3, #0]
 8012894:	2300      	movs	r3, #0
 8012896:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012898:	683b      	ldr	r3, [r7, #0]
 801289a:	f383 8811 	msr	BASEPRI, r3
}
 801289e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80128a0:	bf00      	nop
 80128a2:	3708      	adds	r7, #8
 80128a4:	46bd      	mov	sp, r7
 80128a6:	bd80      	pop	{r7, pc}
 80128a8:	e000ed04 	.word	0xe000ed04

080128ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80128ac:	b480      	push	{r7}
 80128ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80128b0:	4b0b      	ldr	r3, [pc, #44]	; (80128e0 <vPortSetupTimerInterrupt+0x34>)
 80128b2:	2200      	movs	r2, #0
 80128b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80128b6:	4b0b      	ldr	r3, [pc, #44]	; (80128e4 <vPortSetupTimerInterrupt+0x38>)
 80128b8:	2200      	movs	r2, #0
 80128ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80128bc:	4b0a      	ldr	r3, [pc, #40]	; (80128e8 <vPortSetupTimerInterrupt+0x3c>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	4a0a      	ldr	r2, [pc, #40]	; (80128ec <vPortSetupTimerInterrupt+0x40>)
 80128c2:	fba2 2303 	umull	r2, r3, r2, r3
 80128c6:	099b      	lsrs	r3, r3, #6
 80128c8:	4a09      	ldr	r2, [pc, #36]	; (80128f0 <vPortSetupTimerInterrupt+0x44>)
 80128ca:	3b01      	subs	r3, #1
 80128cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80128ce:	4b04      	ldr	r3, [pc, #16]	; (80128e0 <vPortSetupTimerInterrupt+0x34>)
 80128d0:	2207      	movs	r2, #7
 80128d2:	601a      	str	r2, [r3, #0]
}
 80128d4:	bf00      	nop
 80128d6:	46bd      	mov	sp, r7
 80128d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128dc:	4770      	bx	lr
 80128de:	bf00      	nop
 80128e0:	e000e010 	.word	0xe000e010
 80128e4:	e000e018 	.word	0xe000e018
 80128e8:	20000010 	.word	0x20000010
 80128ec:	10624dd3 	.word	0x10624dd3
 80128f0:	e000e014 	.word	0xe000e014

080128f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80128f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012904 <vPortEnableVFP+0x10>
 80128f8:	6801      	ldr	r1, [r0, #0]
 80128fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80128fe:	6001      	str	r1, [r0, #0]
 8012900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012902:	bf00      	nop
 8012904:	e000ed88 	.word	0xe000ed88

08012908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012908:	b480      	push	{r7}
 801290a:	b085      	sub	sp, #20
 801290c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801290e:	f3ef 8305 	mrs	r3, IPSR
 8012912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	2b0f      	cmp	r3, #15
 8012918:	d914      	bls.n	8012944 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801291a:	4a17      	ldr	r2, [pc, #92]	; (8012978 <vPortValidateInterruptPriority+0x70>)
 801291c:	68fb      	ldr	r3, [r7, #12]
 801291e:	4413      	add	r3, r2
 8012920:	781b      	ldrb	r3, [r3, #0]
 8012922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012924:	4b15      	ldr	r3, [pc, #84]	; (801297c <vPortValidateInterruptPriority+0x74>)
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	7afa      	ldrb	r2, [r7, #11]
 801292a:	429a      	cmp	r2, r3
 801292c:	d20a      	bcs.n	8012944 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012932:	f383 8811 	msr	BASEPRI, r3
 8012936:	f3bf 8f6f 	isb	sy
 801293a:	f3bf 8f4f 	dsb	sy
 801293e:	607b      	str	r3, [r7, #4]
}
 8012940:	bf00      	nop
 8012942:	e7fe      	b.n	8012942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012944:	4b0e      	ldr	r3, [pc, #56]	; (8012980 <vPortValidateInterruptPriority+0x78>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801294c:	4b0d      	ldr	r3, [pc, #52]	; (8012984 <vPortValidateInterruptPriority+0x7c>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	429a      	cmp	r2, r3
 8012952:	d90a      	bls.n	801296a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012958:	f383 8811 	msr	BASEPRI, r3
 801295c:	f3bf 8f6f 	isb	sy
 8012960:	f3bf 8f4f 	dsb	sy
 8012964:	603b      	str	r3, [r7, #0]
}
 8012966:	bf00      	nop
 8012968:	e7fe      	b.n	8012968 <vPortValidateInterruptPriority+0x60>
	}
 801296a:	bf00      	nop
 801296c:	3714      	adds	r7, #20
 801296e:	46bd      	mov	sp, r7
 8012970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012974:	4770      	bx	lr
 8012976:	bf00      	nop
 8012978:	e000e3f0 	.word	0xe000e3f0
 801297c:	2000237c 	.word	0x2000237c
 8012980:	e000ed0c 	.word	0xe000ed0c
 8012984:	20002380 	.word	0x20002380

08012988 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b08a      	sub	sp, #40	; 0x28
 801298c:	af00      	add	r7, sp, #0
 801298e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012990:	2300      	movs	r3, #0
 8012992:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012994:	f7fe faee 	bl	8010f74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012998:	4b5d      	ldr	r3, [pc, #372]	; (8012b10 <pvPortMalloc+0x188>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d101      	bne.n	80129a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80129a0:	f000 f924 	bl	8012bec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80129a4:	4b5b      	ldr	r3, [pc, #364]	; (8012b14 <pvPortMalloc+0x18c>)
 80129a6:	681a      	ldr	r2, [r3, #0]
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	4013      	ands	r3, r2
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	f040 8093 	bne.w	8012ad8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d01d      	beq.n	80129f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80129b8:	2208      	movs	r2, #8
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	4413      	add	r3, r2
 80129be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f003 0307 	and.w	r3, r3, #7
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d014      	beq.n	80129f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f023 0307 	bic.w	r3, r3, #7
 80129d0:	3308      	adds	r3, #8
 80129d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	f003 0307 	and.w	r3, r3, #7
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d00a      	beq.n	80129f4 <pvPortMalloc+0x6c>
	__asm volatile
 80129de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e2:	f383 8811 	msr	BASEPRI, r3
 80129e6:	f3bf 8f6f 	isb	sy
 80129ea:	f3bf 8f4f 	dsb	sy
 80129ee:	617b      	str	r3, [r7, #20]
}
 80129f0:	bf00      	nop
 80129f2:	e7fe      	b.n	80129f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d06e      	beq.n	8012ad8 <pvPortMalloc+0x150>
 80129fa:	4b47      	ldr	r3, [pc, #284]	; (8012b18 <pvPortMalloc+0x190>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	687a      	ldr	r2, [r7, #4]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d869      	bhi.n	8012ad8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012a04:	4b45      	ldr	r3, [pc, #276]	; (8012b1c <pvPortMalloc+0x194>)
 8012a06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012a08:	4b44      	ldr	r3, [pc, #272]	; (8012b1c <pvPortMalloc+0x194>)
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012a0e:	e004      	b.n	8012a1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a1c:	685b      	ldr	r3, [r3, #4]
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	429a      	cmp	r2, r3
 8012a22:	d903      	bls.n	8012a2c <pvPortMalloc+0xa4>
 8012a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d1f1      	bne.n	8012a10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012a2c:	4b38      	ldr	r3, [pc, #224]	; (8012b10 <pvPortMalloc+0x188>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d050      	beq.n	8012ad8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012a36:	6a3b      	ldr	r3, [r7, #32]
 8012a38:	681b      	ldr	r3, [r3, #0]
 8012a3a:	2208      	movs	r2, #8
 8012a3c:	4413      	add	r3, r2
 8012a3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a42:	681a      	ldr	r2, [r3, #0]
 8012a44:	6a3b      	ldr	r3, [r7, #32]
 8012a46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4a:	685a      	ldr	r2, [r3, #4]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	1ad2      	subs	r2, r2, r3
 8012a50:	2308      	movs	r3, #8
 8012a52:	005b      	lsls	r3, r3, #1
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d91f      	bls.n	8012a98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	f003 0307 	and.w	r3, r3, #7
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d00a      	beq.n	8012a80 <pvPortMalloc+0xf8>
	__asm volatile
 8012a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a6e:	f383 8811 	msr	BASEPRI, r3
 8012a72:	f3bf 8f6f 	isb	sy
 8012a76:	f3bf 8f4f 	dsb	sy
 8012a7a:	613b      	str	r3, [r7, #16]
}
 8012a7c:	bf00      	nop
 8012a7e:	e7fe      	b.n	8012a7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a82:	685a      	ldr	r2, [r3, #4]
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	1ad2      	subs	r2, r2, r3
 8012a88:	69bb      	ldr	r3, [r7, #24]
 8012a8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a8e:	687a      	ldr	r2, [r7, #4]
 8012a90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012a92:	69b8      	ldr	r0, [r7, #24]
 8012a94:	f000 f90c 	bl	8012cb0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012a98:	4b1f      	ldr	r3, [pc, #124]	; (8012b18 <pvPortMalloc+0x190>)
 8012a9a:	681a      	ldr	r2, [r3, #0]
 8012a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a9e:	685b      	ldr	r3, [r3, #4]
 8012aa0:	1ad3      	subs	r3, r2, r3
 8012aa2:	4a1d      	ldr	r2, [pc, #116]	; (8012b18 <pvPortMalloc+0x190>)
 8012aa4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012aa6:	4b1c      	ldr	r3, [pc, #112]	; (8012b18 <pvPortMalloc+0x190>)
 8012aa8:	681a      	ldr	r2, [r3, #0]
 8012aaa:	4b1d      	ldr	r3, [pc, #116]	; (8012b20 <pvPortMalloc+0x198>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d203      	bcs.n	8012aba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012ab2:	4b19      	ldr	r3, [pc, #100]	; (8012b18 <pvPortMalloc+0x190>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	4a1a      	ldr	r2, [pc, #104]	; (8012b20 <pvPortMalloc+0x198>)
 8012ab8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abc:	685a      	ldr	r2, [r3, #4]
 8012abe:	4b15      	ldr	r3, [pc, #84]	; (8012b14 <pvPortMalloc+0x18c>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	431a      	orrs	r2, r3
 8012ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ac6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aca:	2200      	movs	r2, #0
 8012acc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012ace:	4b15      	ldr	r3, [pc, #84]	; (8012b24 <pvPortMalloc+0x19c>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	3301      	adds	r3, #1
 8012ad4:	4a13      	ldr	r2, [pc, #76]	; (8012b24 <pvPortMalloc+0x19c>)
 8012ad6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012ad8:	f7fe fa5a 	bl	8010f90 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012adc:	69fb      	ldr	r3, [r7, #28]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d101      	bne.n	8012ae6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012ae2:	f7f4 fbdb 	bl	800729c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ae6:	69fb      	ldr	r3, [r7, #28]
 8012ae8:	f003 0307 	and.w	r3, r3, #7
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d00a      	beq.n	8012b06 <pvPortMalloc+0x17e>
	__asm volatile
 8012af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af4:	f383 8811 	msr	BASEPRI, r3
 8012af8:	f3bf 8f6f 	isb	sy
 8012afc:	f3bf 8f4f 	dsb	sy
 8012b00:	60fb      	str	r3, [r7, #12]
}
 8012b02:	bf00      	nop
 8012b04:	e7fe      	b.n	8012b04 <pvPortMalloc+0x17c>
	return pvReturn;
 8012b06:	69fb      	ldr	r3, [r7, #28]
}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3728      	adds	r7, #40	; 0x28
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}
 8012b10:	2000a38c 	.word	0x2000a38c
 8012b14:	2000a3a0 	.word	0x2000a3a0
 8012b18:	2000a390 	.word	0x2000a390
 8012b1c:	2000a384 	.word	0x2000a384
 8012b20:	2000a394 	.word	0x2000a394
 8012b24:	2000a398 	.word	0x2000a398

08012b28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b086      	sub	sp, #24
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d04d      	beq.n	8012bd6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012b3a:	2308      	movs	r3, #8
 8012b3c:	425b      	negs	r3, r3
 8012b3e:	697a      	ldr	r2, [r7, #20]
 8012b40:	4413      	add	r3, r2
 8012b42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	685a      	ldr	r2, [r3, #4]
 8012b4c:	4b24      	ldr	r3, [pc, #144]	; (8012be0 <vPortFree+0xb8>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4013      	ands	r3, r2
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d10a      	bne.n	8012b6c <vPortFree+0x44>
	__asm volatile
 8012b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b5a:	f383 8811 	msr	BASEPRI, r3
 8012b5e:	f3bf 8f6f 	isb	sy
 8012b62:	f3bf 8f4f 	dsb	sy
 8012b66:	60fb      	str	r3, [r7, #12]
}
 8012b68:	bf00      	nop
 8012b6a:	e7fe      	b.n	8012b6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d00a      	beq.n	8012b8a <vPortFree+0x62>
	__asm volatile
 8012b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b78:	f383 8811 	msr	BASEPRI, r3
 8012b7c:	f3bf 8f6f 	isb	sy
 8012b80:	f3bf 8f4f 	dsb	sy
 8012b84:	60bb      	str	r3, [r7, #8]
}
 8012b86:	bf00      	nop
 8012b88:	e7fe      	b.n	8012b88 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	685a      	ldr	r2, [r3, #4]
 8012b8e:	4b14      	ldr	r3, [pc, #80]	; (8012be0 <vPortFree+0xb8>)
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	4013      	ands	r3, r2
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d01e      	beq.n	8012bd6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012b98:	693b      	ldr	r3, [r7, #16]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d11a      	bne.n	8012bd6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	685a      	ldr	r2, [r3, #4]
 8012ba4:	4b0e      	ldr	r3, [pc, #56]	; (8012be0 <vPortFree+0xb8>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	43db      	mvns	r3, r3
 8012baa:	401a      	ands	r2, r3
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012bb0:	f7fe f9e0 	bl	8010f74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	685a      	ldr	r2, [r3, #4]
 8012bb8:	4b0a      	ldr	r3, [pc, #40]	; (8012be4 <vPortFree+0xbc>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	4413      	add	r3, r2
 8012bbe:	4a09      	ldr	r2, [pc, #36]	; (8012be4 <vPortFree+0xbc>)
 8012bc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012bc2:	6938      	ldr	r0, [r7, #16]
 8012bc4:	f000 f874 	bl	8012cb0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012bc8:	4b07      	ldr	r3, [pc, #28]	; (8012be8 <vPortFree+0xc0>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	3301      	adds	r3, #1
 8012bce:	4a06      	ldr	r2, [pc, #24]	; (8012be8 <vPortFree+0xc0>)
 8012bd0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012bd2:	f7fe f9dd 	bl	8010f90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012bd6:	bf00      	nop
 8012bd8:	3718      	adds	r7, #24
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop
 8012be0:	2000a3a0 	.word	0x2000a3a0
 8012be4:	2000a390 	.word	0x2000a390
 8012be8:	2000a39c 	.word	0x2000a39c

08012bec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012bec:	b480      	push	{r7}
 8012bee:	b085      	sub	sp, #20
 8012bf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012bf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012bf8:	4b27      	ldr	r3, [pc, #156]	; (8012c98 <prvHeapInit+0xac>)
 8012bfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012bfc:	68fb      	ldr	r3, [r7, #12]
 8012bfe:	f003 0307 	and.w	r3, r3, #7
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d00c      	beq.n	8012c20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	3307      	adds	r3, #7
 8012c0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	f023 0307 	bic.w	r3, r3, #7
 8012c12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012c14:	68ba      	ldr	r2, [r7, #8]
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	1ad3      	subs	r3, r2, r3
 8012c1a:	4a1f      	ldr	r2, [pc, #124]	; (8012c98 <prvHeapInit+0xac>)
 8012c1c:	4413      	add	r3, r2
 8012c1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012c24:	4a1d      	ldr	r2, [pc, #116]	; (8012c9c <prvHeapInit+0xb0>)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012c2a:	4b1c      	ldr	r3, [pc, #112]	; (8012c9c <prvHeapInit+0xb0>)
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	68ba      	ldr	r2, [r7, #8]
 8012c34:	4413      	add	r3, r2
 8012c36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012c38:	2208      	movs	r2, #8
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	1a9b      	subs	r3, r3, r2
 8012c3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	f023 0307 	bic.w	r3, r3, #7
 8012c46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	4a15      	ldr	r2, [pc, #84]	; (8012ca0 <prvHeapInit+0xb4>)
 8012c4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012c4e:	4b14      	ldr	r3, [pc, #80]	; (8012ca0 <prvHeapInit+0xb4>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2200      	movs	r2, #0
 8012c54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012c56:	4b12      	ldr	r3, [pc, #72]	; (8012ca0 <prvHeapInit+0xb4>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	2200      	movs	r2, #0
 8012c5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	68fa      	ldr	r2, [r7, #12]
 8012c66:	1ad2      	subs	r2, r2, r3
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012c6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ca0 <prvHeapInit+0xb4>)
 8012c6e:	681a      	ldr	r2, [r3, #0]
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	4a0a      	ldr	r2, [pc, #40]	; (8012ca4 <prvHeapInit+0xb8>)
 8012c7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	685b      	ldr	r3, [r3, #4]
 8012c80:	4a09      	ldr	r2, [pc, #36]	; (8012ca8 <prvHeapInit+0xbc>)
 8012c82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012c84:	4b09      	ldr	r3, [pc, #36]	; (8012cac <prvHeapInit+0xc0>)
 8012c86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012c8a:	601a      	str	r2, [r3, #0]
}
 8012c8c:	bf00      	nop
 8012c8e:	3714      	adds	r7, #20
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr
 8012c98:	20002384 	.word	0x20002384
 8012c9c:	2000a384 	.word	0x2000a384
 8012ca0:	2000a38c 	.word	0x2000a38c
 8012ca4:	2000a394 	.word	0x2000a394
 8012ca8:	2000a390 	.word	0x2000a390
 8012cac:	2000a3a0 	.word	0x2000a3a0

08012cb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012cb0:	b480      	push	{r7}
 8012cb2:	b085      	sub	sp, #20
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012cb8:	4b28      	ldr	r3, [pc, #160]	; (8012d5c <prvInsertBlockIntoFreeList+0xac>)
 8012cba:	60fb      	str	r3, [r7, #12]
 8012cbc:	e002      	b.n	8012cc4 <prvInsertBlockIntoFreeList+0x14>
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	60fb      	str	r3, [r7, #12]
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	687a      	ldr	r2, [r7, #4]
 8012cca:	429a      	cmp	r2, r3
 8012ccc:	d8f7      	bhi.n	8012cbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012cce:	68fb      	ldr	r3, [r7, #12]
 8012cd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	685b      	ldr	r3, [r3, #4]
 8012cd6:	68ba      	ldr	r2, [r7, #8]
 8012cd8:	4413      	add	r3, r2
 8012cda:	687a      	ldr	r2, [r7, #4]
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d108      	bne.n	8012cf2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	685a      	ldr	r2, [r3, #4]
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	685b      	ldr	r3, [r3, #4]
 8012ce8:	441a      	add	r2, r3
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	685b      	ldr	r3, [r3, #4]
 8012cfa:	68ba      	ldr	r2, [r7, #8]
 8012cfc:	441a      	add	r2, r3
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d118      	bne.n	8012d38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	681a      	ldr	r2, [r3, #0]
 8012d0a:	4b15      	ldr	r3, [pc, #84]	; (8012d60 <prvInsertBlockIntoFreeList+0xb0>)
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d00d      	beq.n	8012d2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	685a      	ldr	r2, [r3, #4]
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	685b      	ldr	r3, [r3, #4]
 8012d1c:	441a      	add	r2, r3
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	681a      	ldr	r2, [r3, #0]
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	601a      	str	r2, [r3, #0]
 8012d2c:	e008      	b.n	8012d40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012d2e:	4b0c      	ldr	r3, [pc, #48]	; (8012d60 <prvInsertBlockIntoFreeList+0xb0>)
 8012d30:	681a      	ldr	r2, [r3, #0]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	601a      	str	r2, [r3, #0]
 8012d36:	e003      	b.n	8012d40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	681a      	ldr	r2, [r3, #0]
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012d40:	68fa      	ldr	r2, [r7, #12]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	429a      	cmp	r2, r3
 8012d46:	d002      	beq.n	8012d4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012d4e:	bf00      	nop
 8012d50:	3714      	adds	r7, #20
 8012d52:	46bd      	mov	sp, r7
 8012d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d58:	4770      	bx	lr
 8012d5a:	bf00      	nop
 8012d5c:	2000a384 	.word	0x2000a384
 8012d60:	2000a38c 	.word	0x2000a38c

08012d64 <_ZdaPv>:
 8012d64:	f000 b814 	b.w	8012d90 <_ZdlPv>

08012d68 <__cxa_guard_acquire>:
 8012d68:	6803      	ldr	r3, [r0, #0]
 8012d6a:	07db      	lsls	r3, r3, #31
 8012d6c:	d406      	bmi.n	8012d7c <__cxa_guard_acquire+0x14>
 8012d6e:	7843      	ldrb	r3, [r0, #1]
 8012d70:	b103      	cbz	r3, 8012d74 <__cxa_guard_acquire+0xc>
 8012d72:	deff      	udf	#255	; 0xff
 8012d74:	2301      	movs	r3, #1
 8012d76:	7043      	strb	r3, [r0, #1]
 8012d78:	4618      	mov	r0, r3
 8012d7a:	4770      	bx	lr
 8012d7c:	2000      	movs	r0, #0
 8012d7e:	4770      	bx	lr

08012d80 <__cxa_guard_release>:
 8012d80:	2301      	movs	r3, #1
 8012d82:	6003      	str	r3, [r0, #0]
 8012d84:	4770      	bx	lr

08012d86 <_Znaj>:
 8012d86:	f000 b805 	b.w	8012d94 <_Znwj>

08012d8a <_ZSt25__throw_bad_function_callv>:
 8012d8a:	b508      	push	{r3, lr}
 8012d8c:	f000 fa44 	bl	8013218 <abort>

08012d90 <_ZdlPv>:
 8012d90:	f000 bb7c 	b.w	801348c <free>

08012d94 <_Znwj>:
 8012d94:	2801      	cmp	r0, #1
 8012d96:	bf38      	it	cc
 8012d98:	2001      	movcc	r0, #1
 8012d9a:	b510      	push	{r4, lr}
 8012d9c:	4604      	mov	r4, r0
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f000 fb6c 	bl	801347c <malloc>
 8012da4:	b930      	cbnz	r0, 8012db4 <_Znwj+0x20>
 8012da6:	f000 f807 	bl	8012db8 <_ZSt15get_new_handlerv>
 8012daa:	b908      	cbnz	r0, 8012db0 <_Znwj+0x1c>
 8012dac:	f000 fa34 	bl	8013218 <abort>
 8012db0:	4780      	blx	r0
 8012db2:	e7f4      	b.n	8012d9e <_Znwj+0xa>
 8012db4:	bd10      	pop	{r4, pc}
	...

08012db8 <_ZSt15get_new_handlerv>:
 8012db8:	4b02      	ldr	r3, [pc, #8]	; (8012dc4 <_ZSt15get_new_handlerv+0xc>)
 8012dba:	6818      	ldr	r0, [r3, #0]
 8012dbc:	f3bf 8f5b 	dmb	ish
 8012dc0:	4770      	bx	lr
 8012dc2:	bf00      	nop
 8012dc4:	2000a3a4 	.word	0x2000a3a4

08012dc8 <roundf>:
 8012dc8:	ee10 0a10 	vmov	r0, s0
 8012dcc:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8012dd0:	3a7f      	subs	r2, #127	; 0x7f
 8012dd2:	2a16      	cmp	r2, #22
 8012dd4:	dc15      	bgt.n	8012e02 <roundf+0x3a>
 8012dd6:	2a00      	cmp	r2, #0
 8012dd8:	da08      	bge.n	8012dec <roundf+0x24>
 8012dda:	3201      	adds	r2, #1
 8012ddc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8012de0:	d101      	bne.n	8012de6 <roundf+0x1e>
 8012de2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8012de6:	ee00 3a10 	vmov	s0, r3
 8012dea:	4770      	bx	lr
 8012dec:	4907      	ldr	r1, [pc, #28]	; (8012e0c <roundf+0x44>)
 8012dee:	4111      	asrs	r1, r2
 8012df0:	4208      	tst	r0, r1
 8012df2:	d0fa      	beq.n	8012dea <roundf+0x22>
 8012df4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012df8:	4113      	asrs	r3, r2
 8012dfa:	4403      	add	r3, r0
 8012dfc:	ea23 0301 	bic.w	r3, r3, r1
 8012e00:	e7f1      	b.n	8012de6 <roundf+0x1e>
 8012e02:	2a80      	cmp	r2, #128	; 0x80
 8012e04:	d1f1      	bne.n	8012dea <roundf+0x22>
 8012e06:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012e0a:	4770      	bx	lr
 8012e0c:	007fffff 	.word	0x007fffff

08012e10 <log>:
 8012e10:	b538      	push	{r3, r4, r5, lr}
 8012e12:	ed2d 8b02 	vpush	{d8}
 8012e16:	ec55 4b10 	vmov	r4, r5, d0
 8012e1a:	f000 f839 	bl	8012e90 <__ieee754_log>
 8012e1e:	4622      	mov	r2, r4
 8012e20:	462b      	mov	r3, r5
 8012e22:	4620      	mov	r0, r4
 8012e24:	4629      	mov	r1, r5
 8012e26:	eeb0 8a40 	vmov.f32	s16, s0
 8012e2a:	eef0 8a60 	vmov.f32	s17, s1
 8012e2e:	f7ed fe7d 	bl	8000b2c <__aeabi_dcmpun>
 8012e32:	b998      	cbnz	r0, 8012e5c <log+0x4c>
 8012e34:	2200      	movs	r2, #0
 8012e36:	2300      	movs	r3, #0
 8012e38:	4620      	mov	r0, r4
 8012e3a:	4629      	mov	r1, r5
 8012e3c:	f7ed fe6c 	bl	8000b18 <__aeabi_dcmpgt>
 8012e40:	b960      	cbnz	r0, 8012e5c <log+0x4c>
 8012e42:	2200      	movs	r2, #0
 8012e44:	2300      	movs	r3, #0
 8012e46:	4620      	mov	r0, r4
 8012e48:	4629      	mov	r1, r5
 8012e4a:	f7ed fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8012e4e:	b160      	cbz	r0, 8012e6a <log+0x5a>
 8012e50:	f000 f9f0 	bl	8013234 <__errno>
 8012e54:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8012e80 <log+0x70>
 8012e58:	2322      	movs	r3, #34	; 0x22
 8012e5a:	6003      	str	r3, [r0, #0]
 8012e5c:	eeb0 0a48 	vmov.f32	s0, s16
 8012e60:	eef0 0a68 	vmov.f32	s1, s17
 8012e64:	ecbd 8b02 	vpop	{d8}
 8012e68:	bd38      	pop	{r3, r4, r5, pc}
 8012e6a:	f000 f9e3 	bl	8013234 <__errno>
 8012e6e:	ecbd 8b02 	vpop	{d8}
 8012e72:	2321      	movs	r3, #33	; 0x21
 8012e74:	6003      	str	r3, [r0, #0]
 8012e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e7a:	4803      	ldr	r0, [pc, #12]	; (8012e88 <log+0x78>)
 8012e7c:	f000 b9c4 	b.w	8013208 <nan>
 8012e80:	00000000 	.word	0x00000000
 8012e84:	fff00000 	.word	0xfff00000
 8012e88:	080165d7 	.word	0x080165d7
 8012e8c:	00000000 	.word	0x00000000

08012e90 <__ieee754_log>:
 8012e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e94:	ec51 0b10 	vmov	r0, r1, d0
 8012e98:	ed2d 8b04 	vpush	{d8-d9}
 8012e9c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8012ea0:	b083      	sub	sp, #12
 8012ea2:	460d      	mov	r5, r1
 8012ea4:	da29      	bge.n	8012efa <__ieee754_log+0x6a>
 8012ea6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012eaa:	4303      	orrs	r3, r0
 8012eac:	ee10 2a10 	vmov	r2, s0
 8012eb0:	d10c      	bne.n	8012ecc <__ieee754_log+0x3c>
 8012eb2:	49cf      	ldr	r1, [pc, #828]	; (80131f0 <__ieee754_log+0x360>)
 8012eb4:	2200      	movs	r2, #0
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	2000      	movs	r0, #0
 8012eba:	f7ed fcc7 	bl	800084c <__aeabi_ddiv>
 8012ebe:	ec41 0b10 	vmov	d0, r0, r1
 8012ec2:	b003      	add	sp, #12
 8012ec4:	ecbd 8b04 	vpop	{d8-d9}
 8012ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ecc:	2900      	cmp	r1, #0
 8012ece:	da05      	bge.n	8012edc <__ieee754_log+0x4c>
 8012ed0:	460b      	mov	r3, r1
 8012ed2:	f7ed f9d9 	bl	8000288 <__aeabi_dsub>
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	2300      	movs	r3, #0
 8012eda:	e7ee      	b.n	8012eba <__ieee754_log+0x2a>
 8012edc:	4bc5      	ldr	r3, [pc, #788]	; (80131f4 <__ieee754_log+0x364>)
 8012ede:	2200      	movs	r2, #0
 8012ee0:	f7ed fb8a 	bl	80005f8 <__aeabi_dmul>
 8012ee4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8012ee8:	460d      	mov	r5, r1
 8012eea:	4ac3      	ldr	r2, [pc, #780]	; (80131f8 <__ieee754_log+0x368>)
 8012eec:	4295      	cmp	r5, r2
 8012eee:	dd06      	ble.n	8012efe <__ieee754_log+0x6e>
 8012ef0:	4602      	mov	r2, r0
 8012ef2:	460b      	mov	r3, r1
 8012ef4:	f7ed f9ca 	bl	800028c <__adddf3>
 8012ef8:	e7e1      	b.n	8012ebe <__ieee754_log+0x2e>
 8012efa:	2300      	movs	r3, #0
 8012efc:	e7f5      	b.n	8012eea <__ieee754_log+0x5a>
 8012efe:	152c      	asrs	r4, r5, #20
 8012f00:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8012f04:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8012f08:	441c      	add	r4, r3
 8012f0a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8012f0e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8012f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012f16:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8012f1a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8012f1e:	ea42 0105 	orr.w	r1, r2, r5
 8012f22:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8012f26:	2200      	movs	r2, #0
 8012f28:	4bb4      	ldr	r3, [pc, #720]	; (80131fc <__ieee754_log+0x36c>)
 8012f2a:	f7ed f9ad 	bl	8000288 <__aeabi_dsub>
 8012f2e:	1cab      	adds	r3, r5, #2
 8012f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012f34:	2b02      	cmp	r3, #2
 8012f36:	4682      	mov	sl, r0
 8012f38:	468b      	mov	fp, r1
 8012f3a:	f04f 0200 	mov.w	r2, #0
 8012f3e:	dc53      	bgt.n	8012fe8 <__ieee754_log+0x158>
 8012f40:	2300      	movs	r3, #0
 8012f42:	f7ed fdc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8012f46:	b1d0      	cbz	r0, 8012f7e <__ieee754_log+0xee>
 8012f48:	2c00      	cmp	r4, #0
 8012f4a:	f000 8122 	beq.w	8013192 <__ieee754_log+0x302>
 8012f4e:	4620      	mov	r0, r4
 8012f50:	f7ed fae8 	bl	8000524 <__aeabi_i2d>
 8012f54:	a390      	add	r3, pc, #576	; (adr r3, 8013198 <__ieee754_log+0x308>)
 8012f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f5a:	4606      	mov	r6, r0
 8012f5c:	460f      	mov	r7, r1
 8012f5e:	f7ed fb4b 	bl	80005f8 <__aeabi_dmul>
 8012f62:	a38f      	add	r3, pc, #572	; (adr r3, 80131a0 <__ieee754_log+0x310>)
 8012f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f68:	4604      	mov	r4, r0
 8012f6a:	460d      	mov	r5, r1
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	4639      	mov	r1, r7
 8012f70:	f7ed fb42 	bl	80005f8 <__aeabi_dmul>
 8012f74:	4602      	mov	r2, r0
 8012f76:	460b      	mov	r3, r1
 8012f78:	4620      	mov	r0, r4
 8012f7a:	4629      	mov	r1, r5
 8012f7c:	e7ba      	b.n	8012ef4 <__ieee754_log+0x64>
 8012f7e:	a38a      	add	r3, pc, #552	; (adr r3, 80131a8 <__ieee754_log+0x318>)
 8012f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f84:	4650      	mov	r0, sl
 8012f86:	4659      	mov	r1, fp
 8012f88:	f7ed fb36 	bl	80005f8 <__aeabi_dmul>
 8012f8c:	4602      	mov	r2, r0
 8012f8e:	460b      	mov	r3, r1
 8012f90:	2000      	movs	r0, #0
 8012f92:	499b      	ldr	r1, [pc, #620]	; (8013200 <__ieee754_log+0x370>)
 8012f94:	f7ed f978 	bl	8000288 <__aeabi_dsub>
 8012f98:	4652      	mov	r2, sl
 8012f9a:	4606      	mov	r6, r0
 8012f9c:	460f      	mov	r7, r1
 8012f9e:	465b      	mov	r3, fp
 8012fa0:	4650      	mov	r0, sl
 8012fa2:	4659      	mov	r1, fp
 8012fa4:	f7ed fb28 	bl	80005f8 <__aeabi_dmul>
 8012fa8:	4602      	mov	r2, r0
 8012faa:	460b      	mov	r3, r1
 8012fac:	4630      	mov	r0, r6
 8012fae:	4639      	mov	r1, r7
 8012fb0:	f7ed fb22 	bl	80005f8 <__aeabi_dmul>
 8012fb4:	4606      	mov	r6, r0
 8012fb6:	460f      	mov	r7, r1
 8012fb8:	b914      	cbnz	r4, 8012fc0 <__ieee754_log+0x130>
 8012fba:	4632      	mov	r2, r6
 8012fbc:	463b      	mov	r3, r7
 8012fbe:	e0a2      	b.n	8013106 <__ieee754_log+0x276>
 8012fc0:	4620      	mov	r0, r4
 8012fc2:	f7ed faaf 	bl	8000524 <__aeabi_i2d>
 8012fc6:	a374      	add	r3, pc, #464	; (adr r3, 8013198 <__ieee754_log+0x308>)
 8012fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fcc:	4680      	mov	r8, r0
 8012fce:	4689      	mov	r9, r1
 8012fd0:	f7ed fb12 	bl	80005f8 <__aeabi_dmul>
 8012fd4:	a372      	add	r3, pc, #456	; (adr r3, 80131a0 <__ieee754_log+0x310>)
 8012fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fda:	4604      	mov	r4, r0
 8012fdc:	460d      	mov	r5, r1
 8012fde:	4640      	mov	r0, r8
 8012fe0:	4649      	mov	r1, r9
 8012fe2:	f7ed fb09 	bl	80005f8 <__aeabi_dmul>
 8012fe6:	e0a7      	b.n	8013138 <__ieee754_log+0x2a8>
 8012fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012fec:	f7ed f94e 	bl	800028c <__adddf3>
 8012ff0:	4602      	mov	r2, r0
 8012ff2:	460b      	mov	r3, r1
 8012ff4:	4650      	mov	r0, sl
 8012ff6:	4659      	mov	r1, fp
 8012ff8:	f7ed fc28 	bl	800084c <__aeabi_ddiv>
 8012ffc:	ec41 0b18 	vmov	d8, r0, r1
 8013000:	4620      	mov	r0, r4
 8013002:	f7ed fa8f 	bl	8000524 <__aeabi_i2d>
 8013006:	ec53 2b18 	vmov	r2, r3, d8
 801300a:	ec41 0b19 	vmov	d9, r0, r1
 801300e:	ec51 0b18 	vmov	r0, r1, d8
 8013012:	f7ed faf1 	bl	80005f8 <__aeabi_dmul>
 8013016:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801301a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801301e:	9301      	str	r3, [sp, #4]
 8013020:	4602      	mov	r2, r0
 8013022:	460b      	mov	r3, r1
 8013024:	4680      	mov	r8, r0
 8013026:	4689      	mov	r9, r1
 8013028:	f7ed fae6 	bl	80005f8 <__aeabi_dmul>
 801302c:	a360      	add	r3, pc, #384	; (adr r3, 80131b0 <__ieee754_log+0x320>)
 801302e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013032:	4606      	mov	r6, r0
 8013034:	460f      	mov	r7, r1
 8013036:	f7ed fadf 	bl	80005f8 <__aeabi_dmul>
 801303a:	a35f      	add	r3, pc, #380	; (adr r3, 80131b8 <__ieee754_log+0x328>)
 801303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013040:	f7ed f924 	bl	800028c <__adddf3>
 8013044:	4632      	mov	r2, r6
 8013046:	463b      	mov	r3, r7
 8013048:	f7ed fad6 	bl	80005f8 <__aeabi_dmul>
 801304c:	a35c      	add	r3, pc, #368	; (adr r3, 80131c0 <__ieee754_log+0x330>)
 801304e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013052:	f7ed f91b 	bl	800028c <__adddf3>
 8013056:	4632      	mov	r2, r6
 8013058:	463b      	mov	r3, r7
 801305a:	f7ed facd 	bl	80005f8 <__aeabi_dmul>
 801305e:	a35a      	add	r3, pc, #360	; (adr r3, 80131c8 <__ieee754_log+0x338>)
 8013060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013064:	f7ed f912 	bl	800028c <__adddf3>
 8013068:	4642      	mov	r2, r8
 801306a:	464b      	mov	r3, r9
 801306c:	f7ed fac4 	bl	80005f8 <__aeabi_dmul>
 8013070:	a357      	add	r3, pc, #348	; (adr r3, 80131d0 <__ieee754_log+0x340>)
 8013072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013076:	4680      	mov	r8, r0
 8013078:	4689      	mov	r9, r1
 801307a:	4630      	mov	r0, r6
 801307c:	4639      	mov	r1, r7
 801307e:	f7ed fabb 	bl	80005f8 <__aeabi_dmul>
 8013082:	a355      	add	r3, pc, #340	; (adr r3, 80131d8 <__ieee754_log+0x348>)
 8013084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013088:	f7ed f900 	bl	800028c <__adddf3>
 801308c:	4632      	mov	r2, r6
 801308e:	463b      	mov	r3, r7
 8013090:	f7ed fab2 	bl	80005f8 <__aeabi_dmul>
 8013094:	a352      	add	r3, pc, #328	; (adr r3, 80131e0 <__ieee754_log+0x350>)
 8013096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309a:	f7ed f8f7 	bl	800028c <__adddf3>
 801309e:	4632      	mov	r2, r6
 80130a0:	463b      	mov	r3, r7
 80130a2:	f7ed faa9 	bl	80005f8 <__aeabi_dmul>
 80130a6:	460b      	mov	r3, r1
 80130a8:	4602      	mov	r2, r0
 80130aa:	4649      	mov	r1, r9
 80130ac:	4640      	mov	r0, r8
 80130ae:	f7ed f8ed 	bl	800028c <__adddf3>
 80130b2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80130b6:	9b01      	ldr	r3, [sp, #4]
 80130b8:	3551      	adds	r5, #81	; 0x51
 80130ba:	431d      	orrs	r5, r3
 80130bc:	2d00      	cmp	r5, #0
 80130be:	4680      	mov	r8, r0
 80130c0:	4689      	mov	r9, r1
 80130c2:	dd48      	ble.n	8013156 <__ieee754_log+0x2c6>
 80130c4:	4b4e      	ldr	r3, [pc, #312]	; (8013200 <__ieee754_log+0x370>)
 80130c6:	2200      	movs	r2, #0
 80130c8:	4650      	mov	r0, sl
 80130ca:	4659      	mov	r1, fp
 80130cc:	f7ed fa94 	bl	80005f8 <__aeabi_dmul>
 80130d0:	4652      	mov	r2, sl
 80130d2:	465b      	mov	r3, fp
 80130d4:	f7ed fa90 	bl	80005f8 <__aeabi_dmul>
 80130d8:	4602      	mov	r2, r0
 80130da:	460b      	mov	r3, r1
 80130dc:	4606      	mov	r6, r0
 80130de:	460f      	mov	r7, r1
 80130e0:	4640      	mov	r0, r8
 80130e2:	4649      	mov	r1, r9
 80130e4:	f7ed f8d2 	bl	800028c <__adddf3>
 80130e8:	ec53 2b18 	vmov	r2, r3, d8
 80130ec:	f7ed fa84 	bl	80005f8 <__aeabi_dmul>
 80130f0:	4680      	mov	r8, r0
 80130f2:	4689      	mov	r9, r1
 80130f4:	b964      	cbnz	r4, 8013110 <__ieee754_log+0x280>
 80130f6:	4602      	mov	r2, r0
 80130f8:	460b      	mov	r3, r1
 80130fa:	4630      	mov	r0, r6
 80130fc:	4639      	mov	r1, r7
 80130fe:	f7ed f8c3 	bl	8000288 <__aeabi_dsub>
 8013102:	4602      	mov	r2, r0
 8013104:	460b      	mov	r3, r1
 8013106:	4650      	mov	r0, sl
 8013108:	4659      	mov	r1, fp
 801310a:	f7ed f8bd 	bl	8000288 <__aeabi_dsub>
 801310e:	e6d6      	b.n	8012ebe <__ieee754_log+0x2e>
 8013110:	a321      	add	r3, pc, #132	; (adr r3, 8013198 <__ieee754_log+0x308>)
 8013112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013116:	ec51 0b19 	vmov	r0, r1, d9
 801311a:	f7ed fa6d 	bl	80005f8 <__aeabi_dmul>
 801311e:	a320      	add	r3, pc, #128	; (adr r3, 80131a0 <__ieee754_log+0x310>)
 8013120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013124:	4604      	mov	r4, r0
 8013126:	460d      	mov	r5, r1
 8013128:	ec51 0b19 	vmov	r0, r1, d9
 801312c:	f7ed fa64 	bl	80005f8 <__aeabi_dmul>
 8013130:	4642      	mov	r2, r8
 8013132:	464b      	mov	r3, r9
 8013134:	f7ed f8aa 	bl	800028c <__adddf3>
 8013138:	4602      	mov	r2, r0
 801313a:	460b      	mov	r3, r1
 801313c:	4630      	mov	r0, r6
 801313e:	4639      	mov	r1, r7
 8013140:	f7ed f8a2 	bl	8000288 <__aeabi_dsub>
 8013144:	4652      	mov	r2, sl
 8013146:	465b      	mov	r3, fp
 8013148:	f7ed f89e 	bl	8000288 <__aeabi_dsub>
 801314c:	4602      	mov	r2, r0
 801314e:	460b      	mov	r3, r1
 8013150:	4620      	mov	r0, r4
 8013152:	4629      	mov	r1, r5
 8013154:	e7d9      	b.n	801310a <__ieee754_log+0x27a>
 8013156:	4602      	mov	r2, r0
 8013158:	460b      	mov	r3, r1
 801315a:	4650      	mov	r0, sl
 801315c:	4659      	mov	r1, fp
 801315e:	f7ed f893 	bl	8000288 <__aeabi_dsub>
 8013162:	ec53 2b18 	vmov	r2, r3, d8
 8013166:	f7ed fa47 	bl	80005f8 <__aeabi_dmul>
 801316a:	4606      	mov	r6, r0
 801316c:	460f      	mov	r7, r1
 801316e:	2c00      	cmp	r4, #0
 8013170:	f43f af23 	beq.w	8012fba <__ieee754_log+0x12a>
 8013174:	a308      	add	r3, pc, #32	; (adr r3, 8013198 <__ieee754_log+0x308>)
 8013176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801317a:	ec51 0b19 	vmov	r0, r1, d9
 801317e:	f7ed fa3b 	bl	80005f8 <__aeabi_dmul>
 8013182:	a307      	add	r3, pc, #28	; (adr r3, 80131a0 <__ieee754_log+0x310>)
 8013184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013188:	4604      	mov	r4, r0
 801318a:	460d      	mov	r5, r1
 801318c:	ec51 0b19 	vmov	r0, r1, d9
 8013190:	e727      	b.n	8012fe2 <__ieee754_log+0x152>
 8013192:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80131e8 <__ieee754_log+0x358>
 8013196:	e694      	b.n	8012ec2 <__ieee754_log+0x32>
 8013198:	fee00000 	.word	0xfee00000
 801319c:	3fe62e42 	.word	0x3fe62e42
 80131a0:	35793c76 	.word	0x35793c76
 80131a4:	3dea39ef 	.word	0x3dea39ef
 80131a8:	55555555 	.word	0x55555555
 80131ac:	3fd55555 	.word	0x3fd55555
 80131b0:	df3e5244 	.word	0xdf3e5244
 80131b4:	3fc2f112 	.word	0x3fc2f112
 80131b8:	96cb03de 	.word	0x96cb03de
 80131bc:	3fc74664 	.word	0x3fc74664
 80131c0:	94229359 	.word	0x94229359
 80131c4:	3fd24924 	.word	0x3fd24924
 80131c8:	55555593 	.word	0x55555593
 80131cc:	3fe55555 	.word	0x3fe55555
 80131d0:	d078c69f 	.word	0xd078c69f
 80131d4:	3fc39a09 	.word	0x3fc39a09
 80131d8:	1d8e78af 	.word	0x1d8e78af
 80131dc:	3fcc71c5 	.word	0x3fcc71c5
 80131e0:	9997fa04 	.word	0x9997fa04
 80131e4:	3fd99999 	.word	0x3fd99999
	...
 80131f0:	c3500000 	.word	0xc3500000
 80131f4:	43500000 	.word	0x43500000
 80131f8:	7fefffff 	.word	0x7fefffff
 80131fc:	3ff00000 	.word	0x3ff00000
 8013200:	3fe00000 	.word	0x3fe00000
 8013204:	00000000 	.word	0x00000000

08013208 <nan>:
 8013208:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013210 <nan+0x8>
 801320c:	4770      	bx	lr
 801320e:	bf00      	nop
 8013210:	00000000 	.word	0x00000000
 8013214:	7ff80000 	.word	0x7ff80000

08013218 <abort>:
 8013218:	b508      	push	{r3, lr}
 801321a:	2006      	movs	r0, #6
 801321c:	f000 ff40 	bl	80140a0 <raise>
 8013220:	2001      	movs	r0, #1
 8013222:	f7f4 fc83 	bl	8007b2c <_exit>

08013226 <atexit>:
 8013226:	2300      	movs	r3, #0
 8013228:	4601      	mov	r1, r0
 801322a:	461a      	mov	r2, r3
 801322c:	4618      	mov	r0, r3
 801322e:	f000 bfa9 	b.w	8014184 <__register_exitproc>
	...

08013234 <__errno>:
 8013234:	4b01      	ldr	r3, [pc, #4]	; (801323c <__errno+0x8>)
 8013236:	6818      	ldr	r0, [r3, #0]
 8013238:	4770      	bx	lr
 801323a:	bf00      	nop
 801323c:	20000020 	.word	0x20000020

08013240 <std>:
 8013240:	2300      	movs	r3, #0
 8013242:	b510      	push	{r4, lr}
 8013244:	4604      	mov	r4, r0
 8013246:	e9c0 3300 	strd	r3, r3, [r0]
 801324a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801324e:	6083      	str	r3, [r0, #8]
 8013250:	8181      	strh	r1, [r0, #12]
 8013252:	6643      	str	r3, [r0, #100]	; 0x64
 8013254:	81c2      	strh	r2, [r0, #14]
 8013256:	6183      	str	r3, [r0, #24]
 8013258:	4619      	mov	r1, r3
 801325a:	2208      	movs	r2, #8
 801325c:	305c      	adds	r0, #92	; 0x5c
 801325e:	f000 f92b 	bl	80134b8 <memset>
 8013262:	4b05      	ldr	r3, [pc, #20]	; (8013278 <std+0x38>)
 8013264:	6263      	str	r3, [r4, #36]	; 0x24
 8013266:	4b05      	ldr	r3, [pc, #20]	; (801327c <std+0x3c>)
 8013268:	62a3      	str	r3, [r4, #40]	; 0x28
 801326a:	4b05      	ldr	r3, [pc, #20]	; (8013280 <std+0x40>)
 801326c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801326e:	4b05      	ldr	r3, [pc, #20]	; (8013284 <std+0x44>)
 8013270:	6224      	str	r4, [r4, #32]
 8013272:	6323      	str	r3, [r4, #48]	; 0x30
 8013274:	bd10      	pop	{r4, pc}
 8013276:	bf00      	nop
 8013278:	080140d9 	.word	0x080140d9
 801327c:	080140fb 	.word	0x080140fb
 8013280:	08014133 	.word	0x08014133
 8013284:	08014157 	.word	0x08014157

08013288 <_cleanup_r>:
 8013288:	4901      	ldr	r1, [pc, #4]	; (8013290 <_cleanup_r+0x8>)
 801328a:	f000 b8af 	b.w	80133ec <_fwalk_reent>
 801328e:	bf00      	nop
 8013290:	08015069 	.word	0x08015069

08013294 <__sfmoreglue>:
 8013294:	b570      	push	{r4, r5, r6, lr}
 8013296:	2268      	movs	r2, #104	; 0x68
 8013298:	1e4d      	subs	r5, r1, #1
 801329a:	4355      	muls	r5, r2
 801329c:	460e      	mov	r6, r1
 801329e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80132a2:	f000 f97d 	bl	80135a0 <_malloc_r>
 80132a6:	4604      	mov	r4, r0
 80132a8:	b140      	cbz	r0, 80132bc <__sfmoreglue+0x28>
 80132aa:	2100      	movs	r1, #0
 80132ac:	e9c0 1600 	strd	r1, r6, [r0]
 80132b0:	300c      	adds	r0, #12
 80132b2:	60a0      	str	r0, [r4, #8]
 80132b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80132b8:	f000 f8fe 	bl	80134b8 <memset>
 80132bc:	4620      	mov	r0, r4
 80132be:	bd70      	pop	{r4, r5, r6, pc}

080132c0 <__sfp_lock_acquire>:
 80132c0:	4801      	ldr	r0, [pc, #4]	; (80132c8 <__sfp_lock_acquire+0x8>)
 80132c2:	f000 b8d8 	b.w	8013476 <__retarget_lock_acquire_recursive>
 80132c6:	bf00      	nop
 80132c8:	2000a3aa 	.word	0x2000a3aa

080132cc <__sfp_lock_release>:
 80132cc:	4801      	ldr	r0, [pc, #4]	; (80132d4 <__sfp_lock_release+0x8>)
 80132ce:	f000 b8d4 	b.w	801347a <__retarget_lock_release_recursive>
 80132d2:	bf00      	nop
 80132d4:	2000a3aa 	.word	0x2000a3aa

080132d8 <__sinit_lock_acquire>:
 80132d8:	4801      	ldr	r0, [pc, #4]	; (80132e0 <__sinit_lock_acquire+0x8>)
 80132da:	f000 b8cc 	b.w	8013476 <__retarget_lock_acquire_recursive>
 80132de:	bf00      	nop
 80132e0:	2000a3ab 	.word	0x2000a3ab

080132e4 <__sinit_lock_release>:
 80132e4:	4801      	ldr	r0, [pc, #4]	; (80132ec <__sinit_lock_release+0x8>)
 80132e6:	f000 b8c8 	b.w	801347a <__retarget_lock_release_recursive>
 80132ea:	bf00      	nop
 80132ec:	2000a3ab 	.word	0x2000a3ab

080132f0 <__sinit>:
 80132f0:	b510      	push	{r4, lr}
 80132f2:	4604      	mov	r4, r0
 80132f4:	f7ff fff0 	bl	80132d8 <__sinit_lock_acquire>
 80132f8:	69a3      	ldr	r3, [r4, #24]
 80132fa:	b11b      	cbz	r3, 8013304 <__sinit+0x14>
 80132fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013300:	f7ff bff0 	b.w	80132e4 <__sinit_lock_release>
 8013304:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013308:	6523      	str	r3, [r4, #80]	; 0x50
 801330a:	4b13      	ldr	r3, [pc, #76]	; (8013358 <__sinit+0x68>)
 801330c:	4a13      	ldr	r2, [pc, #76]	; (801335c <__sinit+0x6c>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	62a2      	str	r2, [r4, #40]	; 0x28
 8013312:	42a3      	cmp	r3, r4
 8013314:	bf04      	itt	eq
 8013316:	2301      	moveq	r3, #1
 8013318:	61a3      	streq	r3, [r4, #24]
 801331a:	4620      	mov	r0, r4
 801331c:	f000 f820 	bl	8013360 <__sfp>
 8013320:	6060      	str	r0, [r4, #4]
 8013322:	4620      	mov	r0, r4
 8013324:	f000 f81c 	bl	8013360 <__sfp>
 8013328:	60a0      	str	r0, [r4, #8]
 801332a:	4620      	mov	r0, r4
 801332c:	f000 f818 	bl	8013360 <__sfp>
 8013330:	2200      	movs	r2, #0
 8013332:	60e0      	str	r0, [r4, #12]
 8013334:	2104      	movs	r1, #4
 8013336:	6860      	ldr	r0, [r4, #4]
 8013338:	f7ff ff82 	bl	8013240 <std>
 801333c:	68a0      	ldr	r0, [r4, #8]
 801333e:	2201      	movs	r2, #1
 8013340:	2109      	movs	r1, #9
 8013342:	f7ff ff7d 	bl	8013240 <std>
 8013346:	68e0      	ldr	r0, [r4, #12]
 8013348:	2202      	movs	r2, #2
 801334a:	2112      	movs	r1, #18
 801334c:	f7ff ff78 	bl	8013240 <std>
 8013350:	2301      	movs	r3, #1
 8013352:	61a3      	str	r3, [r4, #24]
 8013354:	e7d2      	b.n	80132fc <__sinit+0xc>
 8013356:	bf00      	nop
 8013358:	08016378 	.word	0x08016378
 801335c:	08013289 	.word	0x08013289

08013360 <__sfp>:
 8013360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013362:	4607      	mov	r7, r0
 8013364:	f7ff ffac 	bl	80132c0 <__sfp_lock_acquire>
 8013368:	4b1e      	ldr	r3, [pc, #120]	; (80133e4 <__sfp+0x84>)
 801336a:	681e      	ldr	r6, [r3, #0]
 801336c:	69b3      	ldr	r3, [r6, #24]
 801336e:	b913      	cbnz	r3, 8013376 <__sfp+0x16>
 8013370:	4630      	mov	r0, r6
 8013372:	f7ff ffbd 	bl	80132f0 <__sinit>
 8013376:	3648      	adds	r6, #72	; 0x48
 8013378:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801337c:	3b01      	subs	r3, #1
 801337e:	d503      	bpl.n	8013388 <__sfp+0x28>
 8013380:	6833      	ldr	r3, [r6, #0]
 8013382:	b30b      	cbz	r3, 80133c8 <__sfp+0x68>
 8013384:	6836      	ldr	r6, [r6, #0]
 8013386:	e7f7      	b.n	8013378 <__sfp+0x18>
 8013388:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801338c:	b9d5      	cbnz	r5, 80133c4 <__sfp+0x64>
 801338e:	4b16      	ldr	r3, [pc, #88]	; (80133e8 <__sfp+0x88>)
 8013390:	60e3      	str	r3, [r4, #12]
 8013392:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013396:	6665      	str	r5, [r4, #100]	; 0x64
 8013398:	f000 f86c 	bl	8013474 <__retarget_lock_init_recursive>
 801339c:	f7ff ff96 	bl	80132cc <__sfp_lock_release>
 80133a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80133a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80133a8:	6025      	str	r5, [r4, #0]
 80133aa:	61a5      	str	r5, [r4, #24]
 80133ac:	2208      	movs	r2, #8
 80133ae:	4629      	mov	r1, r5
 80133b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80133b4:	f000 f880 	bl	80134b8 <memset>
 80133b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80133bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80133c0:	4620      	mov	r0, r4
 80133c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133c4:	3468      	adds	r4, #104	; 0x68
 80133c6:	e7d9      	b.n	801337c <__sfp+0x1c>
 80133c8:	2104      	movs	r1, #4
 80133ca:	4638      	mov	r0, r7
 80133cc:	f7ff ff62 	bl	8013294 <__sfmoreglue>
 80133d0:	4604      	mov	r4, r0
 80133d2:	6030      	str	r0, [r6, #0]
 80133d4:	2800      	cmp	r0, #0
 80133d6:	d1d5      	bne.n	8013384 <__sfp+0x24>
 80133d8:	f7ff ff78 	bl	80132cc <__sfp_lock_release>
 80133dc:	230c      	movs	r3, #12
 80133de:	603b      	str	r3, [r7, #0]
 80133e0:	e7ee      	b.n	80133c0 <__sfp+0x60>
 80133e2:	bf00      	nop
 80133e4:	08016378 	.word	0x08016378
 80133e8:	ffff0001 	.word	0xffff0001

080133ec <_fwalk_reent>:
 80133ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133f0:	4606      	mov	r6, r0
 80133f2:	4688      	mov	r8, r1
 80133f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80133f8:	2700      	movs	r7, #0
 80133fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80133fe:	f1b9 0901 	subs.w	r9, r9, #1
 8013402:	d505      	bpl.n	8013410 <_fwalk_reent+0x24>
 8013404:	6824      	ldr	r4, [r4, #0]
 8013406:	2c00      	cmp	r4, #0
 8013408:	d1f7      	bne.n	80133fa <_fwalk_reent+0xe>
 801340a:	4638      	mov	r0, r7
 801340c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013410:	89ab      	ldrh	r3, [r5, #12]
 8013412:	2b01      	cmp	r3, #1
 8013414:	d907      	bls.n	8013426 <_fwalk_reent+0x3a>
 8013416:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801341a:	3301      	adds	r3, #1
 801341c:	d003      	beq.n	8013426 <_fwalk_reent+0x3a>
 801341e:	4629      	mov	r1, r5
 8013420:	4630      	mov	r0, r6
 8013422:	47c0      	blx	r8
 8013424:	4307      	orrs	r7, r0
 8013426:	3568      	adds	r5, #104	; 0x68
 8013428:	e7e9      	b.n	80133fe <_fwalk_reent+0x12>
	...

0801342c <__libc_init_array>:
 801342c:	b570      	push	{r4, r5, r6, lr}
 801342e:	4d0d      	ldr	r5, [pc, #52]	; (8013464 <__libc_init_array+0x38>)
 8013430:	4c0d      	ldr	r4, [pc, #52]	; (8013468 <__libc_init_array+0x3c>)
 8013432:	1b64      	subs	r4, r4, r5
 8013434:	10a4      	asrs	r4, r4, #2
 8013436:	2600      	movs	r6, #0
 8013438:	42a6      	cmp	r6, r4
 801343a:	d109      	bne.n	8013450 <__libc_init_array+0x24>
 801343c:	4d0b      	ldr	r5, [pc, #44]	; (801346c <__libc_init_array+0x40>)
 801343e:	4c0c      	ldr	r4, [pc, #48]	; (8013470 <__libc_init_array+0x44>)
 8013440:	f002 fd0e 	bl	8015e60 <_init>
 8013444:	1b64      	subs	r4, r4, r5
 8013446:	10a4      	asrs	r4, r4, #2
 8013448:	2600      	movs	r6, #0
 801344a:	42a6      	cmp	r6, r4
 801344c:	d105      	bne.n	801345a <__libc_init_array+0x2e>
 801344e:	bd70      	pop	{r4, r5, r6, pc}
 8013450:	f855 3b04 	ldr.w	r3, [r5], #4
 8013454:	4798      	blx	r3
 8013456:	3601      	adds	r6, #1
 8013458:	e7ee      	b.n	8013438 <__libc_init_array+0xc>
 801345a:	f855 3b04 	ldr.w	r3, [r5], #4
 801345e:	4798      	blx	r3
 8013460:	3601      	adds	r6, #1
 8013462:	e7f2      	b.n	801344a <__libc_init_array+0x1e>
 8013464:	080166fc 	.word	0x080166fc
 8013468:	080166fc 	.word	0x080166fc
 801346c:	080166fc 	.word	0x080166fc
 8013470:	0801671c 	.word	0x0801671c

08013474 <__retarget_lock_init_recursive>:
 8013474:	4770      	bx	lr

08013476 <__retarget_lock_acquire_recursive>:
 8013476:	4770      	bx	lr

08013478 <__retarget_lock_release>:
 8013478:	4770      	bx	lr

0801347a <__retarget_lock_release_recursive>:
 801347a:	4770      	bx	lr

0801347c <malloc>:
 801347c:	4b02      	ldr	r3, [pc, #8]	; (8013488 <malloc+0xc>)
 801347e:	4601      	mov	r1, r0
 8013480:	6818      	ldr	r0, [r3, #0]
 8013482:	f000 b88d 	b.w	80135a0 <_malloc_r>
 8013486:	bf00      	nop
 8013488:	20000020 	.word	0x20000020

0801348c <free>:
 801348c:	4b02      	ldr	r3, [pc, #8]	; (8013498 <free+0xc>)
 801348e:	4601      	mov	r1, r0
 8013490:	6818      	ldr	r0, [r3, #0]
 8013492:	f000 b819 	b.w	80134c8 <_free_r>
 8013496:	bf00      	nop
 8013498:	20000020 	.word	0x20000020

0801349c <memcpy>:
 801349c:	440a      	add	r2, r1
 801349e:	4291      	cmp	r1, r2
 80134a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80134a4:	d100      	bne.n	80134a8 <memcpy+0xc>
 80134a6:	4770      	bx	lr
 80134a8:	b510      	push	{r4, lr}
 80134aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134b2:	4291      	cmp	r1, r2
 80134b4:	d1f9      	bne.n	80134aa <memcpy+0xe>
 80134b6:	bd10      	pop	{r4, pc}

080134b8 <memset>:
 80134b8:	4402      	add	r2, r0
 80134ba:	4603      	mov	r3, r0
 80134bc:	4293      	cmp	r3, r2
 80134be:	d100      	bne.n	80134c2 <memset+0xa>
 80134c0:	4770      	bx	lr
 80134c2:	f803 1b01 	strb.w	r1, [r3], #1
 80134c6:	e7f9      	b.n	80134bc <memset+0x4>

080134c8 <_free_r>:
 80134c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80134ca:	2900      	cmp	r1, #0
 80134cc:	d044      	beq.n	8013558 <_free_r+0x90>
 80134ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134d2:	9001      	str	r0, [sp, #4]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	f1a1 0404 	sub.w	r4, r1, #4
 80134da:	bfb8      	it	lt
 80134dc:	18e4      	addlt	r4, r4, r3
 80134de:	f001 fe15 	bl	801510c <__malloc_lock>
 80134e2:	4a1e      	ldr	r2, [pc, #120]	; (801355c <_free_r+0x94>)
 80134e4:	9801      	ldr	r0, [sp, #4]
 80134e6:	6813      	ldr	r3, [r2, #0]
 80134e8:	b933      	cbnz	r3, 80134f8 <_free_r+0x30>
 80134ea:	6063      	str	r3, [r4, #4]
 80134ec:	6014      	str	r4, [r2, #0]
 80134ee:	b003      	add	sp, #12
 80134f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134f4:	f001 be10 	b.w	8015118 <__malloc_unlock>
 80134f8:	42a3      	cmp	r3, r4
 80134fa:	d908      	bls.n	801350e <_free_r+0x46>
 80134fc:	6825      	ldr	r5, [r4, #0]
 80134fe:	1961      	adds	r1, r4, r5
 8013500:	428b      	cmp	r3, r1
 8013502:	bf01      	itttt	eq
 8013504:	6819      	ldreq	r1, [r3, #0]
 8013506:	685b      	ldreq	r3, [r3, #4]
 8013508:	1949      	addeq	r1, r1, r5
 801350a:	6021      	streq	r1, [r4, #0]
 801350c:	e7ed      	b.n	80134ea <_free_r+0x22>
 801350e:	461a      	mov	r2, r3
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	b10b      	cbz	r3, 8013518 <_free_r+0x50>
 8013514:	42a3      	cmp	r3, r4
 8013516:	d9fa      	bls.n	801350e <_free_r+0x46>
 8013518:	6811      	ldr	r1, [r2, #0]
 801351a:	1855      	adds	r5, r2, r1
 801351c:	42a5      	cmp	r5, r4
 801351e:	d10b      	bne.n	8013538 <_free_r+0x70>
 8013520:	6824      	ldr	r4, [r4, #0]
 8013522:	4421      	add	r1, r4
 8013524:	1854      	adds	r4, r2, r1
 8013526:	42a3      	cmp	r3, r4
 8013528:	6011      	str	r1, [r2, #0]
 801352a:	d1e0      	bne.n	80134ee <_free_r+0x26>
 801352c:	681c      	ldr	r4, [r3, #0]
 801352e:	685b      	ldr	r3, [r3, #4]
 8013530:	6053      	str	r3, [r2, #4]
 8013532:	4421      	add	r1, r4
 8013534:	6011      	str	r1, [r2, #0]
 8013536:	e7da      	b.n	80134ee <_free_r+0x26>
 8013538:	d902      	bls.n	8013540 <_free_r+0x78>
 801353a:	230c      	movs	r3, #12
 801353c:	6003      	str	r3, [r0, #0]
 801353e:	e7d6      	b.n	80134ee <_free_r+0x26>
 8013540:	6825      	ldr	r5, [r4, #0]
 8013542:	1961      	adds	r1, r4, r5
 8013544:	428b      	cmp	r3, r1
 8013546:	bf04      	itt	eq
 8013548:	6819      	ldreq	r1, [r3, #0]
 801354a:	685b      	ldreq	r3, [r3, #4]
 801354c:	6063      	str	r3, [r4, #4]
 801354e:	bf04      	itt	eq
 8013550:	1949      	addeq	r1, r1, r5
 8013552:	6021      	streq	r1, [r4, #0]
 8013554:	6054      	str	r4, [r2, #4]
 8013556:	e7ca      	b.n	80134ee <_free_r+0x26>
 8013558:	b003      	add	sp, #12
 801355a:	bd30      	pop	{r4, r5, pc}
 801355c:	2000a3ac 	.word	0x2000a3ac

08013560 <sbrk_aligned>:
 8013560:	b570      	push	{r4, r5, r6, lr}
 8013562:	4e0e      	ldr	r6, [pc, #56]	; (801359c <sbrk_aligned+0x3c>)
 8013564:	460c      	mov	r4, r1
 8013566:	6831      	ldr	r1, [r6, #0]
 8013568:	4605      	mov	r5, r0
 801356a:	b911      	cbnz	r1, 8013572 <sbrk_aligned+0x12>
 801356c:	f000 fd60 	bl	8014030 <_sbrk_r>
 8013570:	6030      	str	r0, [r6, #0]
 8013572:	4621      	mov	r1, r4
 8013574:	4628      	mov	r0, r5
 8013576:	f000 fd5b 	bl	8014030 <_sbrk_r>
 801357a:	1c43      	adds	r3, r0, #1
 801357c:	d00a      	beq.n	8013594 <sbrk_aligned+0x34>
 801357e:	1cc4      	adds	r4, r0, #3
 8013580:	f024 0403 	bic.w	r4, r4, #3
 8013584:	42a0      	cmp	r0, r4
 8013586:	d007      	beq.n	8013598 <sbrk_aligned+0x38>
 8013588:	1a21      	subs	r1, r4, r0
 801358a:	4628      	mov	r0, r5
 801358c:	f000 fd50 	bl	8014030 <_sbrk_r>
 8013590:	3001      	adds	r0, #1
 8013592:	d101      	bne.n	8013598 <sbrk_aligned+0x38>
 8013594:	f04f 34ff 	mov.w	r4, #4294967295
 8013598:	4620      	mov	r0, r4
 801359a:	bd70      	pop	{r4, r5, r6, pc}
 801359c:	2000a3b0 	.word	0x2000a3b0

080135a0 <_malloc_r>:
 80135a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135a4:	1ccd      	adds	r5, r1, #3
 80135a6:	f025 0503 	bic.w	r5, r5, #3
 80135aa:	3508      	adds	r5, #8
 80135ac:	2d0c      	cmp	r5, #12
 80135ae:	bf38      	it	cc
 80135b0:	250c      	movcc	r5, #12
 80135b2:	2d00      	cmp	r5, #0
 80135b4:	4607      	mov	r7, r0
 80135b6:	db01      	blt.n	80135bc <_malloc_r+0x1c>
 80135b8:	42a9      	cmp	r1, r5
 80135ba:	d905      	bls.n	80135c8 <_malloc_r+0x28>
 80135bc:	230c      	movs	r3, #12
 80135be:	603b      	str	r3, [r7, #0]
 80135c0:	2600      	movs	r6, #0
 80135c2:	4630      	mov	r0, r6
 80135c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135c8:	4e2e      	ldr	r6, [pc, #184]	; (8013684 <_malloc_r+0xe4>)
 80135ca:	f001 fd9f 	bl	801510c <__malloc_lock>
 80135ce:	6833      	ldr	r3, [r6, #0]
 80135d0:	461c      	mov	r4, r3
 80135d2:	bb34      	cbnz	r4, 8013622 <_malloc_r+0x82>
 80135d4:	4629      	mov	r1, r5
 80135d6:	4638      	mov	r0, r7
 80135d8:	f7ff ffc2 	bl	8013560 <sbrk_aligned>
 80135dc:	1c43      	adds	r3, r0, #1
 80135de:	4604      	mov	r4, r0
 80135e0:	d14d      	bne.n	801367e <_malloc_r+0xde>
 80135e2:	6834      	ldr	r4, [r6, #0]
 80135e4:	4626      	mov	r6, r4
 80135e6:	2e00      	cmp	r6, #0
 80135e8:	d140      	bne.n	801366c <_malloc_r+0xcc>
 80135ea:	6823      	ldr	r3, [r4, #0]
 80135ec:	4631      	mov	r1, r6
 80135ee:	4638      	mov	r0, r7
 80135f0:	eb04 0803 	add.w	r8, r4, r3
 80135f4:	f000 fd1c 	bl	8014030 <_sbrk_r>
 80135f8:	4580      	cmp	r8, r0
 80135fa:	d13a      	bne.n	8013672 <_malloc_r+0xd2>
 80135fc:	6821      	ldr	r1, [r4, #0]
 80135fe:	3503      	adds	r5, #3
 8013600:	1a6d      	subs	r5, r5, r1
 8013602:	f025 0503 	bic.w	r5, r5, #3
 8013606:	3508      	adds	r5, #8
 8013608:	2d0c      	cmp	r5, #12
 801360a:	bf38      	it	cc
 801360c:	250c      	movcc	r5, #12
 801360e:	4629      	mov	r1, r5
 8013610:	4638      	mov	r0, r7
 8013612:	f7ff ffa5 	bl	8013560 <sbrk_aligned>
 8013616:	3001      	adds	r0, #1
 8013618:	d02b      	beq.n	8013672 <_malloc_r+0xd2>
 801361a:	6823      	ldr	r3, [r4, #0]
 801361c:	442b      	add	r3, r5
 801361e:	6023      	str	r3, [r4, #0]
 8013620:	e00e      	b.n	8013640 <_malloc_r+0xa0>
 8013622:	6822      	ldr	r2, [r4, #0]
 8013624:	1b52      	subs	r2, r2, r5
 8013626:	d41e      	bmi.n	8013666 <_malloc_r+0xc6>
 8013628:	2a0b      	cmp	r2, #11
 801362a:	d916      	bls.n	801365a <_malloc_r+0xba>
 801362c:	1961      	adds	r1, r4, r5
 801362e:	42a3      	cmp	r3, r4
 8013630:	6025      	str	r5, [r4, #0]
 8013632:	bf18      	it	ne
 8013634:	6059      	strne	r1, [r3, #4]
 8013636:	6863      	ldr	r3, [r4, #4]
 8013638:	bf08      	it	eq
 801363a:	6031      	streq	r1, [r6, #0]
 801363c:	5162      	str	r2, [r4, r5]
 801363e:	604b      	str	r3, [r1, #4]
 8013640:	4638      	mov	r0, r7
 8013642:	f104 060b 	add.w	r6, r4, #11
 8013646:	f001 fd67 	bl	8015118 <__malloc_unlock>
 801364a:	f026 0607 	bic.w	r6, r6, #7
 801364e:	1d23      	adds	r3, r4, #4
 8013650:	1af2      	subs	r2, r6, r3
 8013652:	d0b6      	beq.n	80135c2 <_malloc_r+0x22>
 8013654:	1b9b      	subs	r3, r3, r6
 8013656:	50a3      	str	r3, [r4, r2]
 8013658:	e7b3      	b.n	80135c2 <_malloc_r+0x22>
 801365a:	6862      	ldr	r2, [r4, #4]
 801365c:	42a3      	cmp	r3, r4
 801365e:	bf0c      	ite	eq
 8013660:	6032      	streq	r2, [r6, #0]
 8013662:	605a      	strne	r2, [r3, #4]
 8013664:	e7ec      	b.n	8013640 <_malloc_r+0xa0>
 8013666:	4623      	mov	r3, r4
 8013668:	6864      	ldr	r4, [r4, #4]
 801366a:	e7b2      	b.n	80135d2 <_malloc_r+0x32>
 801366c:	4634      	mov	r4, r6
 801366e:	6876      	ldr	r6, [r6, #4]
 8013670:	e7b9      	b.n	80135e6 <_malloc_r+0x46>
 8013672:	230c      	movs	r3, #12
 8013674:	603b      	str	r3, [r7, #0]
 8013676:	4638      	mov	r0, r7
 8013678:	f001 fd4e 	bl	8015118 <__malloc_unlock>
 801367c:	e7a1      	b.n	80135c2 <_malloc_r+0x22>
 801367e:	6025      	str	r5, [r4, #0]
 8013680:	e7de      	b.n	8013640 <_malloc_r+0xa0>
 8013682:	bf00      	nop
 8013684:	2000a3ac 	.word	0x2000a3ac

08013688 <__cvt>:
 8013688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801368c:	ec55 4b10 	vmov	r4, r5, d0
 8013690:	2d00      	cmp	r5, #0
 8013692:	460e      	mov	r6, r1
 8013694:	4619      	mov	r1, r3
 8013696:	462b      	mov	r3, r5
 8013698:	bfbb      	ittet	lt
 801369a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801369e:	461d      	movlt	r5, r3
 80136a0:	2300      	movge	r3, #0
 80136a2:	232d      	movlt	r3, #45	; 0x2d
 80136a4:	700b      	strb	r3, [r1, #0]
 80136a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80136a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80136ac:	4691      	mov	r9, r2
 80136ae:	f023 0820 	bic.w	r8, r3, #32
 80136b2:	bfbc      	itt	lt
 80136b4:	4622      	movlt	r2, r4
 80136b6:	4614      	movlt	r4, r2
 80136b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80136bc:	d005      	beq.n	80136ca <__cvt+0x42>
 80136be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80136c2:	d100      	bne.n	80136c6 <__cvt+0x3e>
 80136c4:	3601      	adds	r6, #1
 80136c6:	2102      	movs	r1, #2
 80136c8:	e000      	b.n	80136cc <__cvt+0x44>
 80136ca:	2103      	movs	r1, #3
 80136cc:	ab03      	add	r3, sp, #12
 80136ce:	9301      	str	r3, [sp, #4]
 80136d0:	ab02      	add	r3, sp, #8
 80136d2:	9300      	str	r3, [sp, #0]
 80136d4:	ec45 4b10 	vmov	d0, r4, r5
 80136d8:	4653      	mov	r3, sl
 80136da:	4632      	mov	r2, r6
 80136dc:	f000 fe50 	bl	8014380 <_dtoa_r>
 80136e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80136e4:	4607      	mov	r7, r0
 80136e6:	d102      	bne.n	80136ee <__cvt+0x66>
 80136e8:	f019 0f01 	tst.w	r9, #1
 80136ec:	d022      	beq.n	8013734 <__cvt+0xac>
 80136ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80136f2:	eb07 0906 	add.w	r9, r7, r6
 80136f6:	d110      	bne.n	801371a <__cvt+0x92>
 80136f8:	783b      	ldrb	r3, [r7, #0]
 80136fa:	2b30      	cmp	r3, #48	; 0x30
 80136fc:	d10a      	bne.n	8013714 <__cvt+0x8c>
 80136fe:	2200      	movs	r2, #0
 8013700:	2300      	movs	r3, #0
 8013702:	4620      	mov	r0, r4
 8013704:	4629      	mov	r1, r5
 8013706:	f7ed f9df 	bl	8000ac8 <__aeabi_dcmpeq>
 801370a:	b918      	cbnz	r0, 8013714 <__cvt+0x8c>
 801370c:	f1c6 0601 	rsb	r6, r6, #1
 8013710:	f8ca 6000 	str.w	r6, [sl]
 8013714:	f8da 3000 	ldr.w	r3, [sl]
 8013718:	4499      	add	r9, r3
 801371a:	2200      	movs	r2, #0
 801371c:	2300      	movs	r3, #0
 801371e:	4620      	mov	r0, r4
 8013720:	4629      	mov	r1, r5
 8013722:	f7ed f9d1 	bl	8000ac8 <__aeabi_dcmpeq>
 8013726:	b108      	cbz	r0, 801372c <__cvt+0xa4>
 8013728:	f8cd 900c 	str.w	r9, [sp, #12]
 801372c:	2230      	movs	r2, #48	; 0x30
 801372e:	9b03      	ldr	r3, [sp, #12]
 8013730:	454b      	cmp	r3, r9
 8013732:	d307      	bcc.n	8013744 <__cvt+0xbc>
 8013734:	9b03      	ldr	r3, [sp, #12]
 8013736:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013738:	1bdb      	subs	r3, r3, r7
 801373a:	4638      	mov	r0, r7
 801373c:	6013      	str	r3, [r2, #0]
 801373e:	b004      	add	sp, #16
 8013740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013744:	1c59      	adds	r1, r3, #1
 8013746:	9103      	str	r1, [sp, #12]
 8013748:	701a      	strb	r2, [r3, #0]
 801374a:	e7f0      	b.n	801372e <__cvt+0xa6>

0801374c <__exponent>:
 801374c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801374e:	4603      	mov	r3, r0
 8013750:	2900      	cmp	r1, #0
 8013752:	bfb8      	it	lt
 8013754:	4249      	neglt	r1, r1
 8013756:	f803 2b02 	strb.w	r2, [r3], #2
 801375a:	bfb4      	ite	lt
 801375c:	222d      	movlt	r2, #45	; 0x2d
 801375e:	222b      	movge	r2, #43	; 0x2b
 8013760:	2909      	cmp	r1, #9
 8013762:	7042      	strb	r2, [r0, #1]
 8013764:	dd2a      	ble.n	80137bc <__exponent+0x70>
 8013766:	f10d 0407 	add.w	r4, sp, #7
 801376a:	46a4      	mov	ip, r4
 801376c:	270a      	movs	r7, #10
 801376e:	46a6      	mov	lr, r4
 8013770:	460a      	mov	r2, r1
 8013772:	fb91 f6f7 	sdiv	r6, r1, r7
 8013776:	fb07 1516 	mls	r5, r7, r6, r1
 801377a:	3530      	adds	r5, #48	; 0x30
 801377c:	2a63      	cmp	r2, #99	; 0x63
 801377e:	f104 34ff 	add.w	r4, r4, #4294967295
 8013782:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013786:	4631      	mov	r1, r6
 8013788:	dcf1      	bgt.n	801376e <__exponent+0x22>
 801378a:	3130      	adds	r1, #48	; 0x30
 801378c:	f1ae 0502 	sub.w	r5, lr, #2
 8013790:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013794:	1c44      	adds	r4, r0, #1
 8013796:	4629      	mov	r1, r5
 8013798:	4561      	cmp	r1, ip
 801379a:	d30a      	bcc.n	80137b2 <__exponent+0x66>
 801379c:	f10d 0209 	add.w	r2, sp, #9
 80137a0:	eba2 020e 	sub.w	r2, r2, lr
 80137a4:	4565      	cmp	r5, ip
 80137a6:	bf88      	it	hi
 80137a8:	2200      	movhi	r2, #0
 80137aa:	4413      	add	r3, r2
 80137ac:	1a18      	subs	r0, r3, r0
 80137ae:	b003      	add	sp, #12
 80137b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80137b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80137b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80137ba:	e7ed      	b.n	8013798 <__exponent+0x4c>
 80137bc:	2330      	movs	r3, #48	; 0x30
 80137be:	3130      	adds	r1, #48	; 0x30
 80137c0:	7083      	strb	r3, [r0, #2]
 80137c2:	70c1      	strb	r1, [r0, #3]
 80137c4:	1d03      	adds	r3, r0, #4
 80137c6:	e7f1      	b.n	80137ac <__exponent+0x60>

080137c8 <_printf_float>:
 80137c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137cc:	ed2d 8b02 	vpush	{d8}
 80137d0:	b08d      	sub	sp, #52	; 0x34
 80137d2:	460c      	mov	r4, r1
 80137d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80137d8:	4616      	mov	r6, r2
 80137da:	461f      	mov	r7, r3
 80137dc:	4605      	mov	r5, r0
 80137de:	f001 fc7f 	bl	80150e0 <_localeconv_r>
 80137e2:	f8d0 a000 	ldr.w	sl, [r0]
 80137e6:	4650      	mov	r0, sl
 80137e8:	f7ec fcf2 	bl	80001d0 <strlen>
 80137ec:	2300      	movs	r3, #0
 80137ee:	930a      	str	r3, [sp, #40]	; 0x28
 80137f0:	6823      	ldr	r3, [r4, #0]
 80137f2:	9305      	str	r3, [sp, #20]
 80137f4:	f8d8 3000 	ldr.w	r3, [r8]
 80137f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80137fc:	3307      	adds	r3, #7
 80137fe:	f023 0307 	bic.w	r3, r3, #7
 8013802:	f103 0208 	add.w	r2, r3, #8
 8013806:	f8c8 2000 	str.w	r2, [r8]
 801380a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801380e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013812:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013816:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801381a:	9307      	str	r3, [sp, #28]
 801381c:	f8cd 8018 	str.w	r8, [sp, #24]
 8013820:	ee08 0a10 	vmov	s16, r0
 8013824:	4b9f      	ldr	r3, [pc, #636]	; (8013aa4 <_printf_float+0x2dc>)
 8013826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801382a:	f04f 32ff 	mov.w	r2, #4294967295
 801382e:	f7ed f97d 	bl	8000b2c <__aeabi_dcmpun>
 8013832:	bb88      	cbnz	r0, 8013898 <_printf_float+0xd0>
 8013834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013838:	4b9a      	ldr	r3, [pc, #616]	; (8013aa4 <_printf_float+0x2dc>)
 801383a:	f04f 32ff 	mov.w	r2, #4294967295
 801383e:	f7ed f957 	bl	8000af0 <__aeabi_dcmple>
 8013842:	bb48      	cbnz	r0, 8013898 <_printf_float+0xd0>
 8013844:	2200      	movs	r2, #0
 8013846:	2300      	movs	r3, #0
 8013848:	4640      	mov	r0, r8
 801384a:	4649      	mov	r1, r9
 801384c:	f7ed f946 	bl	8000adc <__aeabi_dcmplt>
 8013850:	b110      	cbz	r0, 8013858 <_printf_float+0x90>
 8013852:	232d      	movs	r3, #45	; 0x2d
 8013854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013858:	4b93      	ldr	r3, [pc, #588]	; (8013aa8 <_printf_float+0x2e0>)
 801385a:	4894      	ldr	r0, [pc, #592]	; (8013aac <_printf_float+0x2e4>)
 801385c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8013860:	bf94      	ite	ls
 8013862:	4698      	movls	r8, r3
 8013864:	4680      	movhi	r8, r0
 8013866:	2303      	movs	r3, #3
 8013868:	6123      	str	r3, [r4, #16]
 801386a:	9b05      	ldr	r3, [sp, #20]
 801386c:	f023 0204 	bic.w	r2, r3, #4
 8013870:	6022      	str	r2, [r4, #0]
 8013872:	f04f 0900 	mov.w	r9, #0
 8013876:	9700      	str	r7, [sp, #0]
 8013878:	4633      	mov	r3, r6
 801387a:	aa0b      	add	r2, sp, #44	; 0x2c
 801387c:	4621      	mov	r1, r4
 801387e:	4628      	mov	r0, r5
 8013880:	f000 f9d8 	bl	8013c34 <_printf_common>
 8013884:	3001      	adds	r0, #1
 8013886:	f040 8090 	bne.w	80139aa <_printf_float+0x1e2>
 801388a:	f04f 30ff 	mov.w	r0, #4294967295
 801388e:	b00d      	add	sp, #52	; 0x34
 8013890:	ecbd 8b02 	vpop	{d8}
 8013894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013898:	4642      	mov	r2, r8
 801389a:	464b      	mov	r3, r9
 801389c:	4640      	mov	r0, r8
 801389e:	4649      	mov	r1, r9
 80138a0:	f7ed f944 	bl	8000b2c <__aeabi_dcmpun>
 80138a4:	b140      	cbz	r0, 80138b8 <_printf_float+0xf0>
 80138a6:	464b      	mov	r3, r9
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	bfbc      	itt	lt
 80138ac:	232d      	movlt	r3, #45	; 0x2d
 80138ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80138b2:	487f      	ldr	r0, [pc, #508]	; (8013ab0 <_printf_float+0x2e8>)
 80138b4:	4b7f      	ldr	r3, [pc, #508]	; (8013ab4 <_printf_float+0x2ec>)
 80138b6:	e7d1      	b.n	801385c <_printf_float+0x94>
 80138b8:	6863      	ldr	r3, [r4, #4]
 80138ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80138be:	9206      	str	r2, [sp, #24]
 80138c0:	1c5a      	adds	r2, r3, #1
 80138c2:	d13f      	bne.n	8013944 <_printf_float+0x17c>
 80138c4:	2306      	movs	r3, #6
 80138c6:	6063      	str	r3, [r4, #4]
 80138c8:	9b05      	ldr	r3, [sp, #20]
 80138ca:	6861      	ldr	r1, [r4, #4]
 80138cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80138d0:	2300      	movs	r3, #0
 80138d2:	9303      	str	r3, [sp, #12]
 80138d4:	ab0a      	add	r3, sp, #40	; 0x28
 80138d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80138da:	ab09      	add	r3, sp, #36	; 0x24
 80138dc:	ec49 8b10 	vmov	d0, r8, r9
 80138e0:	9300      	str	r3, [sp, #0]
 80138e2:	6022      	str	r2, [r4, #0]
 80138e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80138e8:	4628      	mov	r0, r5
 80138ea:	f7ff fecd 	bl	8013688 <__cvt>
 80138ee:	9b06      	ldr	r3, [sp, #24]
 80138f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138f2:	2b47      	cmp	r3, #71	; 0x47
 80138f4:	4680      	mov	r8, r0
 80138f6:	d108      	bne.n	801390a <_printf_float+0x142>
 80138f8:	1cc8      	adds	r0, r1, #3
 80138fa:	db02      	blt.n	8013902 <_printf_float+0x13a>
 80138fc:	6863      	ldr	r3, [r4, #4]
 80138fe:	4299      	cmp	r1, r3
 8013900:	dd41      	ble.n	8013986 <_printf_float+0x1be>
 8013902:	f1ab 0b02 	sub.w	fp, fp, #2
 8013906:	fa5f fb8b 	uxtb.w	fp, fp
 801390a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801390e:	d820      	bhi.n	8013952 <_printf_float+0x18a>
 8013910:	3901      	subs	r1, #1
 8013912:	465a      	mov	r2, fp
 8013914:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013918:	9109      	str	r1, [sp, #36]	; 0x24
 801391a:	f7ff ff17 	bl	801374c <__exponent>
 801391e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013920:	1813      	adds	r3, r2, r0
 8013922:	2a01      	cmp	r2, #1
 8013924:	4681      	mov	r9, r0
 8013926:	6123      	str	r3, [r4, #16]
 8013928:	dc02      	bgt.n	8013930 <_printf_float+0x168>
 801392a:	6822      	ldr	r2, [r4, #0]
 801392c:	07d2      	lsls	r2, r2, #31
 801392e:	d501      	bpl.n	8013934 <_printf_float+0x16c>
 8013930:	3301      	adds	r3, #1
 8013932:	6123      	str	r3, [r4, #16]
 8013934:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013938:	2b00      	cmp	r3, #0
 801393a:	d09c      	beq.n	8013876 <_printf_float+0xae>
 801393c:	232d      	movs	r3, #45	; 0x2d
 801393e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013942:	e798      	b.n	8013876 <_printf_float+0xae>
 8013944:	9a06      	ldr	r2, [sp, #24]
 8013946:	2a47      	cmp	r2, #71	; 0x47
 8013948:	d1be      	bne.n	80138c8 <_printf_float+0x100>
 801394a:	2b00      	cmp	r3, #0
 801394c:	d1bc      	bne.n	80138c8 <_printf_float+0x100>
 801394e:	2301      	movs	r3, #1
 8013950:	e7b9      	b.n	80138c6 <_printf_float+0xfe>
 8013952:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013956:	d118      	bne.n	801398a <_printf_float+0x1c2>
 8013958:	2900      	cmp	r1, #0
 801395a:	6863      	ldr	r3, [r4, #4]
 801395c:	dd0b      	ble.n	8013976 <_printf_float+0x1ae>
 801395e:	6121      	str	r1, [r4, #16]
 8013960:	b913      	cbnz	r3, 8013968 <_printf_float+0x1a0>
 8013962:	6822      	ldr	r2, [r4, #0]
 8013964:	07d0      	lsls	r0, r2, #31
 8013966:	d502      	bpl.n	801396e <_printf_float+0x1a6>
 8013968:	3301      	adds	r3, #1
 801396a:	440b      	add	r3, r1
 801396c:	6123      	str	r3, [r4, #16]
 801396e:	65a1      	str	r1, [r4, #88]	; 0x58
 8013970:	f04f 0900 	mov.w	r9, #0
 8013974:	e7de      	b.n	8013934 <_printf_float+0x16c>
 8013976:	b913      	cbnz	r3, 801397e <_printf_float+0x1b6>
 8013978:	6822      	ldr	r2, [r4, #0]
 801397a:	07d2      	lsls	r2, r2, #31
 801397c:	d501      	bpl.n	8013982 <_printf_float+0x1ba>
 801397e:	3302      	adds	r3, #2
 8013980:	e7f4      	b.n	801396c <_printf_float+0x1a4>
 8013982:	2301      	movs	r3, #1
 8013984:	e7f2      	b.n	801396c <_printf_float+0x1a4>
 8013986:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801398a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801398c:	4299      	cmp	r1, r3
 801398e:	db05      	blt.n	801399c <_printf_float+0x1d4>
 8013990:	6823      	ldr	r3, [r4, #0]
 8013992:	6121      	str	r1, [r4, #16]
 8013994:	07d8      	lsls	r0, r3, #31
 8013996:	d5ea      	bpl.n	801396e <_printf_float+0x1a6>
 8013998:	1c4b      	adds	r3, r1, #1
 801399a:	e7e7      	b.n	801396c <_printf_float+0x1a4>
 801399c:	2900      	cmp	r1, #0
 801399e:	bfd4      	ite	le
 80139a0:	f1c1 0202 	rsble	r2, r1, #2
 80139a4:	2201      	movgt	r2, #1
 80139a6:	4413      	add	r3, r2
 80139a8:	e7e0      	b.n	801396c <_printf_float+0x1a4>
 80139aa:	6823      	ldr	r3, [r4, #0]
 80139ac:	055a      	lsls	r2, r3, #21
 80139ae:	d407      	bmi.n	80139c0 <_printf_float+0x1f8>
 80139b0:	6923      	ldr	r3, [r4, #16]
 80139b2:	4642      	mov	r2, r8
 80139b4:	4631      	mov	r1, r6
 80139b6:	4628      	mov	r0, r5
 80139b8:	47b8      	blx	r7
 80139ba:	3001      	adds	r0, #1
 80139bc:	d12c      	bne.n	8013a18 <_printf_float+0x250>
 80139be:	e764      	b.n	801388a <_printf_float+0xc2>
 80139c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80139c4:	f240 80e0 	bls.w	8013b88 <_printf_float+0x3c0>
 80139c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80139cc:	2200      	movs	r2, #0
 80139ce:	2300      	movs	r3, #0
 80139d0:	f7ed f87a 	bl	8000ac8 <__aeabi_dcmpeq>
 80139d4:	2800      	cmp	r0, #0
 80139d6:	d034      	beq.n	8013a42 <_printf_float+0x27a>
 80139d8:	4a37      	ldr	r2, [pc, #220]	; (8013ab8 <_printf_float+0x2f0>)
 80139da:	2301      	movs	r3, #1
 80139dc:	4631      	mov	r1, r6
 80139de:	4628      	mov	r0, r5
 80139e0:	47b8      	blx	r7
 80139e2:	3001      	adds	r0, #1
 80139e4:	f43f af51 	beq.w	801388a <_printf_float+0xc2>
 80139e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80139ec:	429a      	cmp	r2, r3
 80139ee:	db02      	blt.n	80139f6 <_printf_float+0x22e>
 80139f0:	6823      	ldr	r3, [r4, #0]
 80139f2:	07d8      	lsls	r0, r3, #31
 80139f4:	d510      	bpl.n	8013a18 <_printf_float+0x250>
 80139f6:	ee18 3a10 	vmov	r3, s16
 80139fa:	4652      	mov	r2, sl
 80139fc:	4631      	mov	r1, r6
 80139fe:	4628      	mov	r0, r5
 8013a00:	47b8      	blx	r7
 8013a02:	3001      	adds	r0, #1
 8013a04:	f43f af41 	beq.w	801388a <_printf_float+0xc2>
 8013a08:	f04f 0800 	mov.w	r8, #0
 8013a0c:	f104 091a 	add.w	r9, r4, #26
 8013a10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a12:	3b01      	subs	r3, #1
 8013a14:	4543      	cmp	r3, r8
 8013a16:	dc09      	bgt.n	8013a2c <_printf_float+0x264>
 8013a18:	6823      	ldr	r3, [r4, #0]
 8013a1a:	079b      	lsls	r3, r3, #30
 8013a1c:	f100 8105 	bmi.w	8013c2a <_printf_float+0x462>
 8013a20:	68e0      	ldr	r0, [r4, #12]
 8013a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a24:	4298      	cmp	r0, r3
 8013a26:	bfb8      	it	lt
 8013a28:	4618      	movlt	r0, r3
 8013a2a:	e730      	b.n	801388e <_printf_float+0xc6>
 8013a2c:	2301      	movs	r3, #1
 8013a2e:	464a      	mov	r2, r9
 8013a30:	4631      	mov	r1, r6
 8013a32:	4628      	mov	r0, r5
 8013a34:	47b8      	blx	r7
 8013a36:	3001      	adds	r0, #1
 8013a38:	f43f af27 	beq.w	801388a <_printf_float+0xc2>
 8013a3c:	f108 0801 	add.w	r8, r8, #1
 8013a40:	e7e6      	b.n	8013a10 <_printf_float+0x248>
 8013a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	dc39      	bgt.n	8013abc <_printf_float+0x2f4>
 8013a48:	4a1b      	ldr	r2, [pc, #108]	; (8013ab8 <_printf_float+0x2f0>)
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	4631      	mov	r1, r6
 8013a4e:	4628      	mov	r0, r5
 8013a50:	47b8      	blx	r7
 8013a52:	3001      	adds	r0, #1
 8013a54:	f43f af19 	beq.w	801388a <_printf_float+0xc2>
 8013a58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013a5c:	4313      	orrs	r3, r2
 8013a5e:	d102      	bne.n	8013a66 <_printf_float+0x29e>
 8013a60:	6823      	ldr	r3, [r4, #0]
 8013a62:	07d9      	lsls	r1, r3, #31
 8013a64:	d5d8      	bpl.n	8013a18 <_printf_float+0x250>
 8013a66:	ee18 3a10 	vmov	r3, s16
 8013a6a:	4652      	mov	r2, sl
 8013a6c:	4631      	mov	r1, r6
 8013a6e:	4628      	mov	r0, r5
 8013a70:	47b8      	blx	r7
 8013a72:	3001      	adds	r0, #1
 8013a74:	f43f af09 	beq.w	801388a <_printf_float+0xc2>
 8013a78:	f04f 0900 	mov.w	r9, #0
 8013a7c:	f104 0a1a 	add.w	sl, r4, #26
 8013a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a82:	425b      	negs	r3, r3
 8013a84:	454b      	cmp	r3, r9
 8013a86:	dc01      	bgt.n	8013a8c <_printf_float+0x2c4>
 8013a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a8a:	e792      	b.n	80139b2 <_printf_float+0x1ea>
 8013a8c:	2301      	movs	r3, #1
 8013a8e:	4652      	mov	r2, sl
 8013a90:	4631      	mov	r1, r6
 8013a92:	4628      	mov	r0, r5
 8013a94:	47b8      	blx	r7
 8013a96:	3001      	adds	r0, #1
 8013a98:	f43f aef7 	beq.w	801388a <_printf_float+0xc2>
 8013a9c:	f109 0901 	add.w	r9, r9, #1
 8013aa0:	e7ee      	b.n	8013a80 <_printf_float+0x2b8>
 8013aa2:	bf00      	nop
 8013aa4:	7fefffff 	.word	0x7fefffff
 8013aa8:	0801637c 	.word	0x0801637c
 8013aac:	08016380 	.word	0x08016380
 8013ab0:	08016388 	.word	0x08016388
 8013ab4:	08016384 	.word	0x08016384
 8013ab8:	0801638c 	.word	0x0801638c
 8013abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013abe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ac0:	429a      	cmp	r2, r3
 8013ac2:	bfa8      	it	ge
 8013ac4:	461a      	movge	r2, r3
 8013ac6:	2a00      	cmp	r2, #0
 8013ac8:	4691      	mov	r9, r2
 8013aca:	dc37      	bgt.n	8013b3c <_printf_float+0x374>
 8013acc:	f04f 0b00 	mov.w	fp, #0
 8013ad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013ad4:	f104 021a 	add.w	r2, r4, #26
 8013ad8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013ada:	9305      	str	r3, [sp, #20]
 8013adc:	eba3 0309 	sub.w	r3, r3, r9
 8013ae0:	455b      	cmp	r3, fp
 8013ae2:	dc33      	bgt.n	8013b4c <_printf_float+0x384>
 8013ae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	db3b      	blt.n	8013b64 <_printf_float+0x39c>
 8013aec:	6823      	ldr	r3, [r4, #0]
 8013aee:	07da      	lsls	r2, r3, #31
 8013af0:	d438      	bmi.n	8013b64 <_printf_float+0x39c>
 8013af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013af4:	9a05      	ldr	r2, [sp, #20]
 8013af6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013af8:	1a9a      	subs	r2, r3, r2
 8013afa:	eba3 0901 	sub.w	r9, r3, r1
 8013afe:	4591      	cmp	r9, r2
 8013b00:	bfa8      	it	ge
 8013b02:	4691      	movge	r9, r2
 8013b04:	f1b9 0f00 	cmp.w	r9, #0
 8013b08:	dc35      	bgt.n	8013b76 <_printf_float+0x3ae>
 8013b0a:	f04f 0800 	mov.w	r8, #0
 8013b0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013b12:	f104 0a1a 	add.w	sl, r4, #26
 8013b16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b1a:	1a9b      	subs	r3, r3, r2
 8013b1c:	eba3 0309 	sub.w	r3, r3, r9
 8013b20:	4543      	cmp	r3, r8
 8013b22:	f77f af79 	ble.w	8013a18 <_printf_float+0x250>
 8013b26:	2301      	movs	r3, #1
 8013b28:	4652      	mov	r2, sl
 8013b2a:	4631      	mov	r1, r6
 8013b2c:	4628      	mov	r0, r5
 8013b2e:	47b8      	blx	r7
 8013b30:	3001      	adds	r0, #1
 8013b32:	f43f aeaa 	beq.w	801388a <_printf_float+0xc2>
 8013b36:	f108 0801 	add.w	r8, r8, #1
 8013b3a:	e7ec      	b.n	8013b16 <_printf_float+0x34e>
 8013b3c:	4613      	mov	r3, r2
 8013b3e:	4631      	mov	r1, r6
 8013b40:	4642      	mov	r2, r8
 8013b42:	4628      	mov	r0, r5
 8013b44:	47b8      	blx	r7
 8013b46:	3001      	adds	r0, #1
 8013b48:	d1c0      	bne.n	8013acc <_printf_float+0x304>
 8013b4a:	e69e      	b.n	801388a <_printf_float+0xc2>
 8013b4c:	2301      	movs	r3, #1
 8013b4e:	4631      	mov	r1, r6
 8013b50:	4628      	mov	r0, r5
 8013b52:	9205      	str	r2, [sp, #20]
 8013b54:	47b8      	blx	r7
 8013b56:	3001      	adds	r0, #1
 8013b58:	f43f ae97 	beq.w	801388a <_printf_float+0xc2>
 8013b5c:	9a05      	ldr	r2, [sp, #20]
 8013b5e:	f10b 0b01 	add.w	fp, fp, #1
 8013b62:	e7b9      	b.n	8013ad8 <_printf_float+0x310>
 8013b64:	ee18 3a10 	vmov	r3, s16
 8013b68:	4652      	mov	r2, sl
 8013b6a:	4631      	mov	r1, r6
 8013b6c:	4628      	mov	r0, r5
 8013b6e:	47b8      	blx	r7
 8013b70:	3001      	adds	r0, #1
 8013b72:	d1be      	bne.n	8013af2 <_printf_float+0x32a>
 8013b74:	e689      	b.n	801388a <_printf_float+0xc2>
 8013b76:	9a05      	ldr	r2, [sp, #20]
 8013b78:	464b      	mov	r3, r9
 8013b7a:	4442      	add	r2, r8
 8013b7c:	4631      	mov	r1, r6
 8013b7e:	4628      	mov	r0, r5
 8013b80:	47b8      	blx	r7
 8013b82:	3001      	adds	r0, #1
 8013b84:	d1c1      	bne.n	8013b0a <_printf_float+0x342>
 8013b86:	e680      	b.n	801388a <_printf_float+0xc2>
 8013b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013b8a:	2a01      	cmp	r2, #1
 8013b8c:	dc01      	bgt.n	8013b92 <_printf_float+0x3ca>
 8013b8e:	07db      	lsls	r3, r3, #31
 8013b90:	d538      	bpl.n	8013c04 <_printf_float+0x43c>
 8013b92:	2301      	movs	r3, #1
 8013b94:	4642      	mov	r2, r8
 8013b96:	4631      	mov	r1, r6
 8013b98:	4628      	mov	r0, r5
 8013b9a:	47b8      	blx	r7
 8013b9c:	3001      	adds	r0, #1
 8013b9e:	f43f ae74 	beq.w	801388a <_printf_float+0xc2>
 8013ba2:	ee18 3a10 	vmov	r3, s16
 8013ba6:	4652      	mov	r2, sl
 8013ba8:	4631      	mov	r1, r6
 8013baa:	4628      	mov	r0, r5
 8013bac:	47b8      	blx	r7
 8013bae:	3001      	adds	r0, #1
 8013bb0:	f43f ae6b 	beq.w	801388a <_printf_float+0xc2>
 8013bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013bb8:	2200      	movs	r2, #0
 8013bba:	2300      	movs	r3, #0
 8013bbc:	f7ec ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 8013bc0:	b9d8      	cbnz	r0, 8013bfa <_printf_float+0x432>
 8013bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bc4:	f108 0201 	add.w	r2, r8, #1
 8013bc8:	3b01      	subs	r3, #1
 8013bca:	4631      	mov	r1, r6
 8013bcc:	4628      	mov	r0, r5
 8013bce:	47b8      	blx	r7
 8013bd0:	3001      	adds	r0, #1
 8013bd2:	d10e      	bne.n	8013bf2 <_printf_float+0x42a>
 8013bd4:	e659      	b.n	801388a <_printf_float+0xc2>
 8013bd6:	2301      	movs	r3, #1
 8013bd8:	4652      	mov	r2, sl
 8013bda:	4631      	mov	r1, r6
 8013bdc:	4628      	mov	r0, r5
 8013bde:	47b8      	blx	r7
 8013be0:	3001      	adds	r0, #1
 8013be2:	f43f ae52 	beq.w	801388a <_printf_float+0xc2>
 8013be6:	f108 0801 	add.w	r8, r8, #1
 8013bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013bec:	3b01      	subs	r3, #1
 8013bee:	4543      	cmp	r3, r8
 8013bf0:	dcf1      	bgt.n	8013bd6 <_printf_float+0x40e>
 8013bf2:	464b      	mov	r3, r9
 8013bf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013bf8:	e6dc      	b.n	80139b4 <_printf_float+0x1ec>
 8013bfa:	f04f 0800 	mov.w	r8, #0
 8013bfe:	f104 0a1a 	add.w	sl, r4, #26
 8013c02:	e7f2      	b.n	8013bea <_printf_float+0x422>
 8013c04:	2301      	movs	r3, #1
 8013c06:	4642      	mov	r2, r8
 8013c08:	e7df      	b.n	8013bca <_printf_float+0x402>
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	464a      	mov	r2, r9
 8013c0e:	4631      	mov	r1, r6
 8013c10:	4628      	mov	r0, r5
 8013c12:	47b8      	blx	r7
 8013c14:	3001      	adds	r0, #1
 8013c16:	f43f ae38 	beq.w	801388a <_printf_float+0xc2>
 8013c1a:	f108 0801 	add.w	r8, r8, #1
 8013c1e:	68e3      	ldr	r3, [r4, #12]
 8013c20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013c22:	1a5b      	subs	r3, r3, r1
 8013c24:	4543      	cmp	r3, r8
 8013c26:	dcf0      	bgt.n	8013c0a <_printf_float+0x442>
 8013c28:	e6fa      	b.n	8013a20 <_printf_float+0x258>
 8013c2a:	f04f 0800 	mov.w	r8, #0
 8013c2e:	f104 0919 	add.w	r9, r4, #25
 8013c32:	e7f4      	b.n	8013c1e <_printf_float+0x456>

08013c34 <_printf_common>:
 8013c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c38:	4616      	mov	r6, r2
 8013c3a:	4699      	mov	r9, r3
 8013c3c:	688a      	ldr	r2, [r1, #8]
 8013c3e:	690b      	ldr	r3, [r1, #16]
 8013c40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013c44:	4293      	cmp	r3, r2
 8013c46:	bfb8      	it	lt
 8013c48:	4613      	movlt	r3, r2
 8013c4a:	6033      	str	r3, [r6, #0]
 8013c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013c50:	4607      	mov	r7, r0
 8013c52:	460c      	mov	r4, r1
 8013c54:	b10a      	cbz	r2, 8013c5a <_printf_common+0x26>
 8013c56:	3301      	adds	r3, #1
 8013c58:	6033      	str	r3, [r6, #0]
 8013c5a:	6823      	ldr	r3, [r4, #0]
 8013c5c:	0699      	lsls	r1, r3, #26
 8013c5e:	bf42      	ittt	mi
 8013c60:	6833      	ldrmi	r3, [r6, #0]
 8013c62:	3302      	addmi	r3, #2
 8013c64:	6033      	strmi	r3, [r6, #0]
 8013c66:	6825      	ldr	r5, [r4, #0]
 8013c68:	f015 0506 	ands.w	r5, r5, #6
 8013c6c:	d106      	bne.n	8013c7c <_printf_common+0x48>
 8013c6e:	f104 0a19 	add.w	sl, r4, #25
 8013c72:	68e3      	ldr	r3, [r4, #12]
 8013c74:	6832      	ldr	r2, [r6, #0]
 8013c76:	1a9b      	subs	r3, r3, r2
 8013c78:	42ab      	cmp	r3, r5
 8013c7a:	dc26      	bgt.n	8013cca <_printf_common+0x96>
 8013c7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013c80:	1e13      	subs	r3, r2, #0
 8013c82:	6822      	ldr	r2, [r4, #0]
 8013c84:	bf18      	it	ne
 8013c86:	2301      	movne	r3, #1
 8013c88:	0692      	lsls	r2, r2, #26
 8013c8a:	d42b      	bmi.n	8013ce4 <_printf_common+0xb0>
 8013c8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013c90:	4649      	mov	r1, r9
 8013c92:	4638      	mov	r0, r7
 8013c94:	47c0      	blx	r8
 8013c96:	3001      	adds	r0, #1
 8013c98:	d01e      	beq.n	8013cd8 <_printf_common+0xa4>
 8013c9a:	6823      	ldr	r3, [r4, #0]
 8013c9c:	68e5      	ldr	r5, [r4, #12]
 8013c9e:	6832      	ldr	r2, [r6, #0]
 8013ca0:	f003 0306 	and.w	r3, r3, #6
 8013ca4:	2b04      	cmp	r3, #4
 8013ca6:	bf08      	it	eq
 8013ca8:	1aad      	subeq	r5, r5, r2
 8013caa:	68a3      	ldr	r3, [r4, #8]
 8013cac:	6922      	ldr	r2, [r4, #16]
 8013cae:	bf0c      	ite	eq
 8013cb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013cb4:	2500      	movne	r5, #0
 8013cb6:	4293      	cmp	r3, r2
 8013cb8:	bfc4      	itt	gt
 8013cba:	1a9b      	subgt	r3, r3, r2
 8013cbc:	18ed      	addgt	r5, r5, r3
 8013cbe:	2600      	movs	r6, #0
 8013cc0:	341a      	adds	r4, #26
 8013cc2:	42b5      	cmp	r5, r6
 8013cc4:	d11a      	bne.n	8013cfc <_printf_common+0xc8>
 8013cc6:	2000      	movs	r0, #0
 8013cc8:	e008      	b.n	8013cdc <_printf_common+0xa8>
 8013cca:	2301      	movs	r3, #1
 8013ccc:	4652      	mov	r2, sl
 8013cce:	4649      	mov	r1, r9
 8013cd0:	4638      	mov	r0, r7
 8013cd2:	47c0      	blx	r8
 8013cd4:	3001      	adds	r0, #1
 8013cd6:	d103      	bne.n	8013ce0 <_printf_common+0xac>
 8013cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8013cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ce0:	3501      	adds	r5, #1
 8013ce2:	e7c6      	b.n	8013c72 <_printf_common+0x3e>
 8013ce4:	18e1      	adds	r1, r4, r3
 8013ce6:	1c5a      	adds	r2, r3, #1
 8013ce8:	2030      	movs	r0, #48	; 0x30
 8013cea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013cee:	4422      	add	r2, r4
 8013cf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013cf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013cf8:	3302      	adds	r3, #2
 8013cfa:	e7c7      	b.n	8013c8c <_printf_common+0x58>
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	4622      	mov	r2, r4
 8013d00:	4649      	mov	r1, r9
 8013d02:	4638      	mov	r0, r7
 8013d04:	47c0      	blx	r8
 8013d06:	3001      	adds	r0, #1
 8013d08:	d0e6      	beq.n	8013cd8 <_printf_common+0xa4>
 8013d0a:	3601      	adds	r6, #1
 8013d0c:	e7d9      	b.n	8013cc2 <_printf_common+0x8e>
	...

08013d10 <_printf_i>:
 8013d10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d14:	7e0f      	ldrb	r7, [r1, #24]
 8013d16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013d18:	2f78      	cmp	r7, #120	; 0x78
 8013d1a:	4691      	mov	r9, r2
 8013d1c:	4680      	mov	r8, r0
 8013d1e:	460c      	mov	r4, r1
 8013d20:	469a      	mov	sl, r3
 8013d22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013d26:	d807      	bhi.n	8013d38 <_printf_i+0x28>
 8013d28:	2f62      	cmp	r7, #98	; 0x62
 8013d2a:	d80a      	bhi.n	8013d42 <_printf_i+0x32>
 8013d2c:	2f00      	cmp	r7, #0
 8013d2e:	f000 80d8 	beq.w	8013ee2 <_printf_i+0x1d2>
 8013d32:	2f58      	cmp	r7, #88	; 0x58
 8013d34:	f000 80a3 	beq.w	8013e7e <_printf_i+0x16e>
 8013d38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013d40:	e03a      	b.n	8013db8 <_printf_i+0xa8>
 8013d42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013d46:	2b15      	cmp	r3, #21
 8013d48:	d8f6      	bhi.n	8013d38 <_printf_i+0x28>
 8013d4a:	a101      	add	r1, pc, #4	; (adr r1, 8013d50 <_printf_i+0x40>)
 8013d4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013d50:	08013da9 	.word	0x08013da9
 8013d54:	08013dbd 	.word	0x08013dbd
 8013d58:	08013d39 	.word	0x08013d39
 8013d5c:	08013d39 	.word	0x08013d39
 8013d60:	08013d39 	.word	0x08013d39
 8013d64:	08013d39 	.word	0x08013d39
 8013d68:	08013dbd 	.word	0x08013dbd
 8013d6c:	08013d39 	.word	0x08013d39
 8013d70:	08013d39 	.word	0x08013d39
 8013d74:	08013d39 	.word	0x08013d39
 8013d78:	08013d39 	.word	0x08013d39
 8013d7c:	08013ec9 	.word	0x08013ec9
 8013d80:	08013ded 	.word	0x08013ded
 8013d84:	08013eab 	.word	0x08013eab
 8013d88:	08013d39 	.word	0x08013d39
 8013d8c:	08013d39 	.word	0x08013d39
 8013d90:	08013eeb 	.word	0x08013eeb
 8013d94:	08013d39 	.word	0x08013d39
 8013d98:	08013ded 	.word	0x08013ded
 8013d9c:	08013d39 	.word	0x08013d39
 8013da0:	08013d39 	.word	0x08013d39
 8013da4:	08013eb3 	.word	0x08013eb3
 8013da8:	682b      	ldr	r3, [r5, #0]
 8013daa:	1d1a      	adds	r2, r3, #4
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	602a      	str	r2, [r5, #0]
 8013db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013db4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013db8:	2301      	movs	r3, #1
 8013dba:	e0a3      	b.n	8013f04 <_printf_i+0x1f4>
 8013dbc:	6820      	ldr	r0, [r4, #0]
 8013dbe:	6829      	ldr	r1, [r5, #0]
 8013dc0:	0606      	lsls	r6, r0, #24
 8013dc2:	f101 0304 	add.w	r3, r1, #4
 8013dc6:	d50a      	bpl.n	8013dde <_printf_i+0xce>
 8013dc8:	680e      	ldr	r6, [r1, #0]
 8013dca:	602b      	str	r3, [r5, #0]
 8013dcc:	2e00      	cmp	r6, #0
 8013dce:	da03      	bge.n	8013dd8 <_printf_i+0xc8>
 8013dd0:	232d      	movs	r3, #45	; 0x2d
 8013dd2:	4276      	negs	r6, r6
 8013dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013dd8:	485e      	ldr	r0, [pc, #376]	; (8013f54 <_printf_i+0x244>)
 8013dda:	230a      	movs	r3, #10
 8013ddc:	e019      	b.n	8013e12 <_printf_i+0x102>
 8013dde:	680e      	ldr	r6, [r1, #0]
 8013de0:	602b      	str	r3, [r5, #0]
 8013de2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013de6:	bf18      	it	ne
 8013de8:	b236      	sxthne	r6, r6
 8013dea:	e7ef      	b.n	8013dcc <_printf_i+0xbc>
 8013dec:	682b      	ldr	r3, [r5, #0]
 8013dee:	6820      	ldr	r0, [r4, #0]
 8013df0:	1d19      	adds	r1, r3, #4
 8013df2:	6029      	str	r1, [r5, #0]
 8013df4:	0601      	lsls	r1, r0, #24
 8013df6:	d501      	bpl.n	8013dfc <_printf_i+0xec>
 8013df8:	681e      	ldr	r6, [r3, #0]
 8013dfa:	e002      	b.n	8013e02 <_printf_i+0xf2>
 8013dfc:	0646      	lsls	r6, r0, #25
 8013dfe:	d5fb      	bpl.n	8013df8 <_printf_i+0xe8>
 8013e00:	881e      	ldrh	r6, [r3, #0]
 8013e02:	4854      	ldr	r0, [pc, #336]	; (8013f54 <_printf_i+0x244>)
 8013e04:	2f6f      	cmp	r7, #111	; 0x6f
 8013e06:	bf0c      	ite	eq
 8013e08:	2308      	moveq	r3, #8
 8013e0a:	230a      	movne	r3, #10
 8013e0c:	2100      	movs	r1, #0
 8013e0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013e12:	6865      	ldr	r5, [r4, #4]
 8013e14:	60a5      	str	r5, [r4, #8]
 8013e16:	2d00      	cmp	r5, #0
 8013e18:	bfa2      	ittt	ge
 8013e1a:	6821      	ldrge	r1, [r4, #0]
 8013e1c:	f021 0104 	bicge.w	r1, r1, #4
 8013e20:	6021      	strge	r1, [r4, #0]
 8013e22:	b90e      	cbnz	r6, 8013e28 <_printf_i+0x118>
 8013e24:	2d00      	cmp	r5, #0
 8013e26:	d04d      	beq.n	8013ec4 <_printf_i+0x1b4>
 8013e28:	4615      	mov	r5, r2
 8013e2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8013e2e:	fb03 6711 	mls	r7, r3, r1, r6
 8013e32:	5dc7      	ldrb	r7, [r0, r7]
 8013e34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013e38:	4637      	mov	r7, r6
 8013e3a:	42bb      	cmp	r3, r7
 8013e3c:	460e      	mov	r6, r1
 8013e3e:	d9f4      	bls.n	8013e2a <_printf_i+0x11a>
 8013e40:	2b08      	cmp	r3, #8
 8013e42:	d10b      	bne.n	8013e5c <_printf_i+0x14c>
 8013e44:	6823      	ldr	r3, [r4, #0]
 8013e46:	07de      	lsls	r6, r3, #31
 8013e48:	d508      	bpl.n	8013e5c <_printf_i+0x14c>
 8013e4a:	6923      	ldr	r3, [r4, #16]
 8013e4c:	6861      	ldr	r1, [r4, #4]
 8013e4e:	4299      	cmp	r1, r3
 8013e50:	bfde      	ittt	le
 8013e52:	2330      	movle	r3, #48	; 0x30
 8013e54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013e58:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013e5c:	1b52      	subs	r2, r2, r5
 8013e5e:	6122      	str	r2, [r4, #16]
 8013e60:	f8cd a000 	str.w	sl, [sp]
 8013e64:	464b      	mov	r3, r9
 8013e66:	aa03      	add	r2, sp, #12
 8013e68:	4621      	mov	r1, r4
 8013e6a:	4640      	mov	r0, r8
 8013e6c:	f7ff fee2 	bl	8013c34 <_printf_common>
 8013e70:	3001      	adds	r0, #1
 8013e72:	d14c      	bne.n	8013f0e <_printf_i+0x1fe>
 8013e74:	f04f 30ff 	mov.w	r0, #4294967295
 8013e78:	b004      	add	sp, #16
 8013e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e7e:	4835      	ldr	r0, [pc, #212]	; (8013f54 <_printf_i+0x244>)
 8013e80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013e84:	6829      	ldr	r1, [r5, #0]
 8013e86:	6823      	ldr	r3, [r4, #0]
 8013e88:	f851 6b04 	ldr.w	r6, [r1], #4
 8013e8c:	6029      	str	r1, [r5, #0]
 8013e8e:	061d      	lsls	r5, r3, #24
 8013e90:	d514      	bpl.n	8013ebc <_printf_i+0x1ac>
 8013e92:	07df      	lsls	r7, r3, #31
 8013e94:	bf44      	itt	mi
 8013e96:	f043 0320 	orrmi.w	r3, r3, #32
 8013e9a:	6023      	strmi	r3, [r4, #0]
 8013e9c:	b91e      	cbnz	r6, 8013ea6 <_printf_i+0x196>
 8013e9e:	6823      	ldr	r3, [r4, #0]
 8013ea0:	f023 0320 	bic.w	r3, r3, #32
 8013ea4:	6023      	str	r3, [r4, #0]
 8013ea6:	2310      	movs	r3, #16
 8013ea8:	e7b0      	b.n	8013e0c <_printf_i+0xfc>
 8013eaa:	6823      	ldr	r3, [r4, #0]
 8013eac:	f043 0320 	orr.w	r3, r3, #32
 8013eb0:	6023      	str	r3, [r4, #0]
 8013eb2:	2378      	movs	r3, #120	; 0x78
 8013eb4:	4828      	ldr	r0, [pc, #160]	; (8013f58 <_printf_i+0x248>)
 8013eb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013eba:	e7e3      	b.n	8013e84 <_printf_i+0x174>
 8013ebc:	0659      	lsls	r1, r3, #25
 8013ebe:	bf48      	it	mi
 8013ec0:	b2b6      	uxthmi	r6, r6
 8013ec2:	e7e6      	b.n	8013e92 <_printf_i+0x182>
 8013ec4:	4615      	mov	r5, r2
 8013ec6:	e7bb      	b.n	8013e40 <_printf_i+0x130>
 8013ec8:	682b      	ldr	r3, [r5, #0]
 8013eca:	6826      	ldr	r6, [r4, #0]
 8013ecc:	6961      	ldr	r1, [r4, #20]
 8013ece:	1d18      	adds	r0, r3, #4
 8013ed0:	6028      	str	r0, [r5, #0]
 8013ed2:	0635      	lsls	r5, r6, #24
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	d501      	bpl.n	8013edc <_printf_i+0x1cc>
 8013ed8:	6019      	str	r1, [r3, #0]
 8013eda:	e002      	b.n	8013ee2 <_printf_i+0x1d2>
 8013edc:	0670      	lsls	r0, r6, #25
 8013ede:	d5fb      	bpl.n	8013ed8 <_printf_i+0x1c8>
 8013ee0:	8019      	strh	r1, [r3, #0]
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	6123      	str	r3, [r4, #16]
 8013ee6:	4615      	mov	r5, r2
 8013ee8:	e7ba      	b.n	8013e60 <_printf_i+0x150>
 8013eea:	682b      	ldr	r3, [r5, #0]
 8013eec:	1d1a      	adds	r2, r3, #4
 8013eee:	602a      	str	r2, [r5, #0]
 8013ef0:	681d      	ldr	r5, [r3, #0]
 8013ef2:	6862      	ldr	r2, [r4, #4]
 8013ef4:	2100      	movs	r1, #0
 8013ef6:	4628      	mov	r0, r5
 8013ef8:	f7ec f972 	bl	80001e0 <memchr>
 8013efc:	b108      	cbz	r0, 8013f02 <_printf_i+0x1f2>
 8013efe:	1b40      	subs	r0, r0, r5
 8013f00:	6060      	str	r0, [r4, #4]
 8013f02:	6863      	ldr	r3, [r4, #4]
 8013f04:	6123      	str	r3, [r4, #16]
 8013f06:	2300      	movs	r3, #0
 8013f08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f0c:	e7a8      	b.n	8013e60 <_printf_i+0x150>
 8013f0e:	6923      	ldr	r3, [r4, #16]
 8013f10:	462a      	mov	r2, r5
 8013f12:	4649      	mov	r1, r9
 8013f14:	4640      	mov	r0, r8
 8013f16:	47d0      	blx	sl
 8013f18:	3001      	adds	r0, #1
 8013f1a:	d0ab      	beq.n	8013e74 <_printf_i+0x164>
 8013f1c:	6823      	ldr	r3, [r4, #0]
 8013f1e:	079b      	lsls	r3, r3, #30
 8013f20:	d413      	bmi.n	8013f4a <_printf_i+0x23a>
 8013f22:	68e0      	ldr	r0, [r4, #12]
 8013f24:	9b03      	ldr	r3, [sp, #12]
 8013f26:	4298      	cmp	r0, r3
 8013f28:	bfb8      	it	lt
 8013f2a:	4618      	movlt	r0, r3
 8013f2c:	e7a4      	b.n	8013e78 <_printf_i+0x168>
 8013f2e:	2301      	movs	r3, #1
 8013f30:	4632      	mov	r2, r6
 8013f32:	4649      	mov	r1, r9
 8013f34:	4640      	mov	r0, r8
 8013f36:	47d0      	blx	sl
 8013f38:	3001      	adds	r0, #1
 8013f3a:	d09b      	beq.n	8013e74 <_printf_i+0x164>
 8013f3c:	3501      	adds	r5, #1
 8013f3e:	68e3      	ldr	r3, [r4, #12]
 8013f40:	9903      	ldr	r1, [sp, #12]
 8013f42:	1a5b      	subs	r3, r3, r1
 8013f44:	42ab      	cmp	r3, r5
 8013f46:	dcf2      	bgt.n	8013f2e <_printf_i+0x21e>
 8013f48:	e7eb      	b.n	8013f22 <_printf_i+0x212>
 8013f4a:	2500      	movs	r5, #0
 8013f4c:	f104 0619 	add.w	r6, r4, #25
 8013f50:	e7f5      	b.n	8013f3e <_printf_i+0x22e>
 8013f52:	bf00      	nop
 8013f54:	0801638e 	.word	0x0801638e
 8013f58:	0801639f 	.word	0x0801639f

08013f5c <cleanup_glue>:
 8013f5c:	b538      	push	{r3, r4, r5, lr}
 8013f5e:	460c      	mov	r4, r1
 8013f60:	6809      	ldr	r1, [r1, #0]
 8013f62:	4605      	mov	r5, r0
 8013f64:	b109      	cbz	r1, 8013f6a <cleanup_glue+0xe>
 8013f66:	f7ff fff9 	bl	8013f5c <cleanup_glue>
 8013f6a:	4621      	mov	r1, r4
 8013f6c:	4628      	mov	r0, r5
 8013f6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f72:	f7ff baa9 	b.w	80134c8 <_free_r>
	...

08013f78 <_reclaim_reent>:
 8013f78:	4b2c      	ldr	r3, [pc, #176]	; (801402c <_reclaim_reent+0xb4>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	4283      	cmp	r3, r0
 8013f7e:	b570      	push	{r4, r5, r6, lr}
 8013f80:	4604      	mov	r4, r0
 8013f82:	d051      	beq.n	8014028 <_reclaim_reent+0xb0>
 8013f84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8013f86:	b143      	cbz	r3, 8013f9a <_reclaim_reent+0x22>
 8013f88:	68db      	ldr	r3, [r3, #12]
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d14a      	bne.n	8014024 <_reclaim_reent+0xac>
 8013f8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f90:	6819      	ldr	r1, [r3, #0]
 8013f92:	b111      	cbz	r1, 8013f9a <_reclaim_reent+0x22>
 8013f94:	4620      	mov	r0, r4
 8013f96:	f7ff fa97 	bl	80134c8 <_free_r>
 8013f9a:	6961      	ldr	r1, [r4, #20]
 8013f9c:	b111      	cbz	r1, 8013fa4 <_reclaim_reent+0x2c>
 8013f9e:	4620      	mov	r0, r4
 8013fa0:	f7ff fa92 	bl	80134c8 <_free_r>
 8013fa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8013fa6:	b111      	cbz	r1, 8013fae <_reclaim_reent+0x36>
 8013fa8:	4620      	mov	r0, r4
 8013faa:	f7ff fa8d 	bl	80134c8 <_free_r>
 8013fae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013fb0:	b111      	cbz	r1, 8013fb8 <_reclaim_reent+0x40>
 8013fb2:	4620      	mov	r0, r4
 8013fb4:	f7ff fa88 	bl	80134c8 <_free_r>
 8013fb8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8013fba:	b111      	cbz	r1, 8013fc2 <_reclaim_reent+0x4a>
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	f7ff fa83 	bl	80134c8 <_free_r>
 8013fc2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013fc4:	b111      	cbz	r1, 8013fcc <_reclaim_reent+0x54>
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	f7ff fa7e 	bl	80134c8 <_free_r>
 8013fcc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013fce:	b111      	cbz	r1, 8013fd6 <_reclaim_reent+0x5e>
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	f7ff fa79 	bl	80134c8 <_free_r>
 8013fd6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013fd8:	b111      	cbz	r1, 8013fe0 <_reclaim_reent+0x68>
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f7ff fa74 	bl	80134c8 <_free_r>
 8013fe0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013fe2:	b111      	cbz	r1, 8013fea <_reclaim_reent+0x72>
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	f7ff fa6f 	bl	80134c8 <_free_r>
 8013fea:	69a3      	ldr	r3, [r4, #24]
 8013fec:	b1e3      	cbz	r3, 8014028 <_reclaim_reent+0xb0>
 8013fee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013ff0:	4620      	mov	r0, r4
 8013ff2:	4798      	blx	r3
 8013ff4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013ff6:	b1b9      	cbz	r1, 8014028 <_reclaim_reent+0xb0>
 8013ff8:	4620      	mov	r0, r4
 8013ffa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ffe:	f7ff bfad 	b.w	8013f5c <cleanup_glue>
 8014002:	5949      	ldr	r1, [r1, r5]
 8014004:	b941      	cbnz	r1, 8014018 <_reclaim_reent+0xa0>
 8014006:	3504      	adds	r5, #4
 8014008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801400a:	2d80      	cmp	r5, #128	; 0x80
 801400c:	68d9      	ldr	r1, [r3, #12]
 801400e:	d1f8      	bne.n	8014002 <_reclaim_reent+0x8a>
 8014010:	4620      	mov	r0, r4
 8014012:	f7ff fa59 	bl	80134c8 <_free_r>
 8014016:	e7ba      	b.n	8013f8e <_reclaim_reent+0x16>
 8014018:	680e      	ldr	r6, [r1, #0]
 801401a:	4620      	mov	r0, r4
 801401c:	f7ff fa54 	bl	80134c8 <_free_r>
 8014020:	4631      	mov	r1, r6
 8014022:	e7ef      	b.n	8014004 <_reclaim_reent+0x8c>
 8014024:	2500      	movs	r5, #0
 8014026:	e7ef      	b.n	8014008 <_reclaim_reent+0x90>
 8014028:	bd70      	pop	{r4, r5, r6, pc}
 801402a:	bf00      	nop
 801402c:	20000020 	.word	0x20000020

08014030 <_sbrk_r>:
 8014030:	b538      	push	{r3, r4, r5, lr}
 8014032:	4d06      	ldr	r5, [pc, #24]	; (801404c <_sbrk_r+0x1c>)
 8014034:	2300      	movs	r3, #0
 8014036:	4604      	mov	r4, r0
 8014038:	4608      	mov	r0, r1
 801403a:	602b      	str	r3, [r5, #0]
 801403c:	f7f3 fdee 	bl	8007c1c <_sbrk>
 8014040:	1c43      	adds	r3, r0, #1
 8014042:	d102      	bne.n	801404a <_sbrk_r+0x1a>
 8014044:	682b      	ldr	r3, [r5, #0]
 8014046:	b103      	cbz	r3, 801404a <_sbrk_r+0x1a>
 8014048:	6023      	str	r3, [r4, #0]
 801404a:	bd38      	pop	{r3, r4, r5, pc}
 801404c:	2000a3b4 	.word	0x2000a3b4

08014050 <_raise_r>:
 8014050:	291f      	cmp	r1, #31
 8014052:	b538      	push	{r3, r4, r5, lr}
 8014054:	4604      	mov	r4, r0
 8014056:	460d      	mov	r5, r1
 8014058:	d904      	bls.n	8014064 <_raise_r+0x14>
 801405a:	2316      	movs	r3, #22
 801405c:	6003      	str	r3, [r0, #0]
 801405e:	f04f 30ff 	mov.w	r0, #4294967295
 8014062:	bd38      	pop	{r3, r4, r5, pc}
 8014064:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014066:	b112      	cbz	r2, 801406e <_raise_r+0x1e>
 8014068:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801406c:	b94b      	cbnz	r3, 8014082 <_raise_r+0x32>
 801406e:	4620      	mov	r0, r4
 8014070:	f000 f830 	bl	80140d4 <_getpid_r>
 8014074:	462a      	mov	r2, r5
 8014076:	4601      	mov	r1, r0
 8014078:	4620      	mov	r0, r4
 801407a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801407e:	f000 b817 	b.w	80140b0 <_kill_r>
 8014082:	2b01      	cmp	r3, #1
 8014084:	d00a      	beq.n	801409c <_raise_r+0x4c>
 8014086:	1c59      	adds	r1, r3, #1
 8014088:	d103      	bne.n	8014092 <_raise_r+0x42>
 801408a:	2316      	movs	r3, #22
 801408c:	6003      	str	r3, [r0, #0]
 801408e:	2001      	movs	r0, #1
 8014090:	e7e7      	b.n	8014062 <_raise_r+0x12>
 8014092:	2400      	movs	r4, #0
 8014094:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014098:	4628      	mov	r0, r5
 801409a:	4798      	blx	r3
 801409c:	2000      	movs	r0, #0
 801409e:	e7e0      	b.n	8014062 <_raise_r+0x12>

080140a0 <raise>:
 80140a0:	4b02      	ldr	r3, [pc, #8]	; (80140ac <raise+0xc>)
 80140a2:	4601      	mov	r1, r0
 80140a4:	6818      	ldr	r0, [r3, #0]
 80140a6:	f7ff bfd3 	b.w	8014050 <_raise_r>
 80140aa:	bf00      	nop
 80140ac:	20000020 	.word	0x20000020

080140b0 <_kill_r>:
 80140b0:	b538      	push	{r3, r4, r5, lr}
 80140b2:	4d07      	ldr	r5, [pc, #28]	; (80140d0 <_kill_r+0x20>)
 80140b4:	2300      	movs	r3, #0
 80140b6:	4604      	mov	r4, r0
 80140b8:	4608      	mov	r0, r1
 80140ba:	4611      	mov	r1, r2
 80140bc:	602b      	str	r3, [r5, #0]
 80140be:	f7f3 fd25 	bl	8007b0c <_kill>
 80140c2:	1c43      	adds	r3, r0, #1
 80140c4:	d102      	bne.n	80140cc <_kill_r+0x1c>
 80140c6:	682b      	ldr	r3, [r5, #0]
 80140c8:	b103      	cbz	r3, 80140cc <_kill_r+0x1c>
 80140ca:	6023      	str	r3, [r4, #0]
 80140cc:	bd38      	pop	{r3, r4, r5, pc}
 80140ce:	bf00      	nop
 80140d0:	2000a3b4 	.word	0x2000a3b4

080140d4 <_getpid_r>:
 80140d4:	f7f3 bd12 	b.w	8007afc <_getpid>

080140d8 <__sread>:
 80140d8:	b510      	push	{r4, lr}
 80140da:	460c      	mov	r4, r1
 80140dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80140e0:	f001 fbba 	bl	8015858 <_read_r>
 80140e4:	2800      	cmp	r0, #0
 80140e6:	bfab      	itete	ge
 80140e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80140ea:	89a3      	ldrhlt	r3, [r4, #12]
 80140ec:	181b      	addge	r3, r3, r0
 80140ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80140f2:	bfac      	ite	ge
 80140f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80140f6:	81a3      	strhlt	r3, [r4, #12]
 80140f8:	bd10      	pop	{r4, pc}

080140fa <__swrite>:
 80140fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140fe:	461f      	mov	r7, r3
 8014100:	898b      	ldrh	r3, [r1, #12]
 8014102:	05db      	lsls	r3, r3, #23
 8014104:	4605      	mov	r5, r0
 8014106:	460c      	mov	r4, r1
 8014108:	4616      	mov	r6, r2
 801410a:	d505      	bpl.n	8014118 <__swrite+0x1e>
 801410c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014110:	2302      	movs	r3, #2
 8014112:	2200      	movs	r2, #0
 8014114:	f000 ffe8 	bl	80150e8 <_lseek_r>
 8014118:	89a3      	ldrh	r3, [r4, #12]
 801411a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801411e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014122:	81a3      	strh	r3, [r4, #12]
 8014124:	4632      	mov	r2, r6
 8014126:	463b      	mov	r3, r7
 8014128:	4628      	mov	r0, r5
 801412a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801412e:	f000 b817 	b.w	8014160 <_write_r>

08014132 <__sseek>:
 8014132:	b510      	push	{r4, lr}
 8014134:	460c      	mov	r4, r1
 8014136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801413a:	f000 ffd5 	bl	80150e8 <_lseek_r>
 801413e:	1c43      	adds	r3, r0, #1
 8014140:	89a3      	ldrh	r3, [r4, #12]
 8014142:	bf15      	itete	ne
 8014144:	6560      	strne	r0, [r4, #84]	; 0x54
 8014146:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801414a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801414e:	81a3      	strheq	r3, [r4, #12]
 8014150:	bf18      	it	ne
 8014152:	81a3      	strhne	r3, [r4, #12]
 8014154:	bd10      	pop	{r4, pc}

08014156 <__sclose>:
 8014156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801415a:	f000 b875 	b.w	8014248 <_close_r>
	...

08014160 <_write_r>:
 8014160:	b538      	push	{r3, r4, r5, lr}
 8014162:	4d07      	ldr	r5, [pc, #28]	; (8014180 <_write_r+0x20>)
 8014164:	4604      	mov	r4, r0
 8014166:	4608      	mov	r0, r1
 8014168:	4611      	mov	r1, r2
 801416a:	2200      	movs	r2, #0
 801416c:	602a      	str	r2, [r5, #0]
 801416e:	461a      	mov	r2, r3
 8014170:	f7f3 fd03 	bl	8007b7a <_write>
 8014174:	1c43      	adds	r3, r0, #1
 8014176:	d102      	bne.n	801417e <_write_r+0x1e>
 8014178:	682b      	ldr	r3, [r5, #0]
 801417a:	b103      	cbz	r3, 801417e <_write_r+0x1e>
 801417c:	6023      	str	r3, [r4, #0]
 801417e:	bd38      	pop	{r3, r4, r5, pc}
 8014180:	2000a3b4 	.word	0x2000a3b4

08014184 <__register_exitproc>:
 8014184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014188:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8014244 <__register_exitproc+0xc0>
 801418c:	4606      	mov	r6, r0
 801418e:	f8d8 0000 	ldr.w	r0, [r8]
 8014192:	461f      	mov	r7, r3
 8014194:	460d      	mov	r5, r1
 8014196:	4691      	mov	r9, r2
 8014198:	f7ff f96d 	bl	8013476 <__retarget_lock_acquire_recursive>
 801419c:	4b25      	ldr	r3, [pc, #148]	; (8014234 <__register_exitproc+0xb0>)
 801419e:	681c      	ldr	r4, [r3, #0]
 80141a0:	b934      	cbnz	r4, 80141b0 <__register_exitproc+0x2c>
 80141a2:	4c25      	ldr	r4, [pc, #148]	; (8014238 <__register_exitproc+0xb4>)
 80141a4:	601c      	str	r4, [r3, #0]
 80141a6:	4b25      	ldr	r3, [pc, #148]	; (801423c <__register_exitproc+0xb8>)
 80141a8:	b113      	cbz	r3, 80141b0 <__register_exitproc+0x2c>
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80141b0:	6863      	ldr	r3, [r4, #4]
 80141b2:	2b1f      	cmp	r3, #31
 80141b4:	dd07      	ble.n	80141c6 <__register_exitproc+0x42>
 80141b6:	f8d8 0000 	ldr.w	r0, [r8]
 80141ba:	f7ff f95e 	bl	801347a <__retarget_lock_release_recursive>
 80141be:	f04f 30ff 	mov.w	r0, #4294967295
 80141c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80141c6:	b34e      	cbz	r6, 801421c <__register_exitproc+0x98>
 80141c8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80141cc:	b988      	cbnz	r0, 80141f2 <__register_exitproc+0x6e>
 80141ce:	4b1c      	ldr	r3, [pc, #112]	; (8014240 <__register_exitproc+0xbc>)
 80141d0:	b923      	cbnz	r3, 80141dc <__register_exitproc+0x58>
 80141d2:	f8d8 0000 	ldr.w	r0, [r8]
 80141d6:	f7ff f94f 	bl	8013478 <__retarget_lock_release>
 80141da:	e7f0      	b.n	80141be <__register_exitproc+0x3a>
 80141dc:	f44f 7084 	mov.w	r0, #264	; 0x108
 80141e0:	f7ff f94c 	bl	801347c <malloc>
 80141e4:	2800      	cmp	r0, #0
 80141e6:	d0f4      	beq.n	80141d2 <__register_exitproc+0x4e>
 80141e8:	2300      	movs	r3, #0
 80141ea:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80141ee:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80141f2:	6863      	ldr	r3, [r4, #4]
 80141f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80141f8:	2201      	movs	r2, #1
 80141fa:	409a      	lsls	r2, r3
 80141fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8014200:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8014204:	4313      	orrs	r3, r2
 8014206:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801420a:	2e02      	cmp	r6, #2
 801420c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8014210:	bf02      	ittt	eq
 8014212:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8014216:	4313      	orreq	r3, r2
 8014218:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801421c:	6863      	ldr	r3, [r4, #4]
 801421e:	f8d8 0000 	ldr.w	r0, [r8]
 8014222:	1c5a      	adds	r2, r3, #1
 8014224:	3302      	adds	r3, #2
 8014226:	6062      	str	r2, [r4, #4]
 8014228:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801422c:	f7ff f925 	bl	801347a <__retarget_lock_release_recursive>
 8014230:	2000      	movs	r0, #0
 8014232:	e7c6      	b.n	80141c2 <__register_exitproc+0x3e>
 8014234:	2000a444 	.word	0x2000a444
 8014238:	2000a3b8 	.word	0x2000a3b8
 801423c:	00000000 	.word	0x00000000
 8014240:	0801347d 	.word	0x0801347d
 8014244:	20000084 	.word	0x20000084

08014248 <_close_r>:
 8014248:	b538      	push	{r3, r4, r5, lr}
 801424a:	4d06      	ldr	r5, [pc, #24]	; (8014264 <_close_r+0x1c>)
 801424c:	2300      	movs	r3, #0
 801424e:	4604      	mov	r4, r0
 8014250:	4608      	mov	r0, r1
 8014252:	602b      	str	r3, [r5, #0]
 8014254:	f7f3 fcad 	bl	8007bb2 <_close>
 8014258:	1c43      	adds	r3, r0, #1
 801425a:	d102      	bne.n	8014262 <_close_r+0x1a>
 801425c:	682b      	ldr	r3, [r5, #0]
 801425e:	b103      	cbz	r3, 8014262 <_close_r+0x1a>
 8014260:	6023      	str	r3, [r4, #0]
 8014262:	bd38      	pop	{r3, r4, r5, pc}
 8014264:	2000a3b4 	.word	0x2000a3b4

08014268 <quorem>:
 8014268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801426c:	6903      	ldr	r3, [r0, #16]
 801426e:	690c      	ldr	r4, [r1, #16]
 8014270:	42a3      	cmp	r3, r4
 8014272:	4607      	mov	r7, r0
 8014274:	f2c0 8081 	blt.w	801437a <quorem+0x112>
 8014278:	3c01      	subs	r4, #1
 801427a:	f101 0814 	add.w	r8, r1, #20
 801427e:	f100 0514 	add.w	r5, r0, #20
 8014282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014286:	9301      	str	r3, [sp, #4]
 8014288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801428c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014290:	3301      	adds	r3, #1
 8014292:	429a      	cmp	r2, r3
 8014294:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801429c:	fbb2 f6f3 	udiv	r6, r2, r3
 80142a0:	d331      	bcc.n	8014306 <quorem+0x9e>
 80142a2:	f04f 0e00 	mov.w	lr, #0
 80142a6:	4640      	mov	r0, r8
 80142a8:	46ac      	mov	ip, r5
 80142aa:	46f2      	mov	sl, lr
 80142ac:	f850 2b04 	ldr.w	r2, [r0], #4
 80142b0:	b293      	uxth	r3, r2
 80142b2:	fb06 e303 	mla	r3, r6, r3, lr
 80142b6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80142ba:	b29b      	uxth	r3, r3
 80142bc:	ebaa 0303 	sub.w	r3, sl, r3
 80142c0:	f8dc a000 	ldr.w	sl, [ip]
 80142c4:	0c12      	lsrs	r2, r2, #16
 80142c6:	fa13 f38a 	uxtah	r3, r3, sl
 80142ca:	fb06 e202 	mla	r2, r6, r2, lr
 80142ce:	9300      	str	r3, [sp, #0]
 80142d0:	9b00      	ldr	r3, [sp, #0]
 80142d2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80142d6:	b292      	uxth	r2, r2
 80142d8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80142dc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80142e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80142e4:	4581      	cmp	r9, r0
 80142e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80142ea:	f84c 3b04 	str.w	r3, [ip], #4
 80142ee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80142f2:	d2db      	bcs.n	80142ac <quorem+0x44>
 80142f4:	f855 300b 	ldr.w	r3, [r5, fp]
 80142f8:	b92b      	cbnz	r3, 8014306 <quorem+0x9e>
 80142fa:	9b01      	ldr	r3, [sp, #4]
 80142fc:	3b04      	subs	r3, #4
 80142fe:	429d      	cmp	r5, r3
 8014300:	461a      	mov	r2, r3
 8014302:	d32e      	bcc.n	8014362 <quorem+0xfa>
 8014304:	613c      	str	r4, [r7, #16]
 8014306:	4638      	mov	r0, r7
 8014308:	f001 f98e 	bl	8015628 <__mcmp>
 801430c:	2800      	cmp	r0, #0
 801430e:	db24      	blt.n	801435a <quorem+0xf2>
 8014310:	3601      	adds	r6, #1
 8014312:	4628      	mov	r0, r5
 8014314:	f04f 0c00 	mov.w	ip, #0
 8014318:	f858 2b04 	ldr.w	r2, [r8], #4
 801431c:	f8d0 e000 	ldr.w	lr, [r0]
 8014320:	b293      	uxth	r3, r2
 8014322:	ebac 0303 	sub.w	r3, ip, r3
 8014326:	0c12      	lsrs	r2, r2, #16
 8014328:	fa13 f38e 	uxtah	r3, r3, lr
 801432c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014334:	b29b      	uxth	r3, r3
 8014336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801433a:	45c1      	cmp	r9, r8
 801433c:	f840 3b04 	str.w	r3, [r0], #4
 8014340:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014344:	d2e8      	bcs.n	8014318 <quorem+0xb0>
 8014346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801434a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801434e:	b922      	cbnz	r2, 801435a <quorem+0xf2>
 8014350:	3b04      	subs	r3, #4
 8014352:	429d      	cmp	r5, r3
 8014354:	461a      	mov	r2, r3
 8014356:	d30a      	bcc.n	801436e <quorem+0x106>
 8014358:	613c      	str	r4, [r7, #16]
 801435a:	4630      	mov	r0, r6
 801435c:	b003      	add	sp, #12
 801435e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014362:	6812      	ldr	r2, [r2, #0]
 8014364:	3b04      	subs	r3, #4
 8014366:	2a00      	cmp	r2, #0
 8014368:	d1cc      	bne.n	8014304 <quorem+0x9c>
 801436a:	3c01      	subs	r4, #1
 801436c:	e7c7      	b.n	80142fe <quorem+0x96>
 801436e:	6812      	ldr	r2, [r2, #0]
 8014370:	3b04      	subs	r3, #4
 8014372:	2a00      	cmp	r2, #0
 8014374:	d1f0      	bne.n	8014358 <quorem+0xf0>
 8014376:	3c01      	subs	r4, #1
 8014378:	e7eb      	b.n	8014352 <quorem+0xea>
 801437a:	2000      	movs	r0, #0
 801437c:	e7ee      	b.n	801435c <quorem+0xf4>
	...

08014380 <_dtoa_r>:
 8014380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014384:	ed2d 8b04 	vpush	{d8-d9}
 8014388:	ec57 6b10 	vmov	r6, r7, d0
 801438c:	b093      	sub	sp, #76	; 0x4c
 801438e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014390:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014394:	9106      	str	r1, [sp, #24]
 8014396:	ee10 aa10 	vmov	sl, s0
 801439a:	4604      	mov	r4, r0
 801439c:	9209      	str	r2, [sp, #36]	; 0x24
 801439e:	930c      	str	r3, [sp, #48]	; 0x30
 80143a0:	46bb      	mov	fp, r7
 80143a2:	b975      	cbnz	r5, 80143c2 <_dtoa_r+0x42>
 80143a4:	2010      	movs	r0, #16
 80143a6:	f7ff f869 	bl	801347c <malloc>
 80143aa:	4602      	mov	r2, r0
 80143ac:	6260      	str	r0, [r4, #36]	; 0x24
 80143ae:	b920      	cbnz	r0, 80143ba <_dtoa_r+0x3a>
 80143b0:	4ba7      	ldr	r3, [pc, #668]	; (8014650 <_dtoa_r+0x2d0>)
 80143b2:	21ea      	movs	r1, #234	; 0xea
 80143b4:	48a7      	ldr	r0, [pc, #668]	; (8014654 <_dtoa_r+0x2d4>)
 80143b6:	f001 fa61 	bl	801587c <__assert_func>
 80143ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80143be:	6005      	str	r5, [r0, #0]
 80143c0:	60c5      	str	r5, [r0, #12]
 80143c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143c4:	6819      	ldr	r1, [r3, #0]
 80143c6:	b151      	cbz	r1, 80143de <_dtoa_r+0x5e>
 80143c8:	685a      	ldr	r2, [r3, #4]
 80143ca:	604a      	str	r2, [r1, #4]
 80143cc:	2301      	movs	r3, #1
 80143ce:	4093      	lsls	r3, r2
 80143d0:	608b      	str	r3, [r1, #8]
 80143d2:	4620      	mov	r0, r4
 80143d4:	f000 fee6 	bl	80151a4 <_Bfree>
 80143d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80143da:	2200      	movs	r2, #0
 80143dc:	601a      	str	r2, [r3, #0]
 80143de:	1e3b      	subs	r3, r7, #0
 80143e0:	bfaa      	itet	ge
 80143e2:	2300      	movge	r3, #0
 80143e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80143e8:	f8c8 3000 	strge.w	r3, [r8]
 80143ec:	4b9a      	ldr	r3, [pc, #616]	; (8014658 <_dtoa_r+0x2d8>)
 80143ee:	bfbc      	itt	lt
 80143f0:	2201      	movlt	r2, #1
 80143f2:	f8c8 2000 	strlt.w	r2, [r8]
 80143f6:	ea33 030b 	bics.w	r3, r3, fp
 80143fa:	d11b      	bne.n	8014434 <_dtoa_r+0xb4>
 80143fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80143fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8014402:	6013      	str	r3, [r2, #0]
 8014404:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014408:	4333      	orrs	r3, r6
 801440a:	f000 8592 	beq.w	8014f32 <_dtoa_r+0xbb2>
 801440e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014410:	b963      	cbnz	r3, 801442c <_dtoa_r+0xac>
 8014412:	4b92      	ldr	r3, [pc, #584]	; (801465c <_dtoa_r+0x2dc>)
 8014414:	e022      	b.n	801445c <_dtoa_r+0xdc>
 8014416:	4b92      	ldr	r3, [pc, #584]	; (8014660 <_dtoa_r+0x2e0>)
 8014418:	9301      	str	r3, [sp, #4]
 801441a:	3308      	adds	r3, #8
 801441c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801441e:	6013      	str	r3, [r2, #0]
 8014420:	9801      	ldr	r0, [sp, #4]
 8014422:	b013      	add	sp, #76	; 0x4c
 8014424:	ecbd 8b04 	vpop	{d8-d9}
 8014428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801442c:	4b8b      	ldr	r3, [pc, #556]	; (801465c <_dtoa_r+0x2dc>)
 801442e:	9301      	str	r3, [sp, #4]
 8014430:	3303      	adds	r3, #3
 8014432:	e7f3      	b.n	801441c <_dtoa_r+0x9c>
 8014434:	2200      	movs	r2, #0
 8014436:	2300      	movs	r3, #0
 8014438:	4650      	mov	r0, sl
 801443a:	4659      	mov	r1, fp
 801443c:	f7ec fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 8014440:	ec4b ab19 	vmov	d9, sl, fp
 8014444:	4680      	mov	r8, r0
 8014446:	b158      	cbz	r0, 8014460 <_dtoa_r+0xe0>
 8014448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801444a:	2301      	movs	r3, #1
 801444c:	6013      	str	r3, [r2, #0]
 801444e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014450:	2b00      	cmp	r3, #0
 8014452:	f000 856b 	beq.w	8014f2c <_dtoa_r+0xbac>
 8014456:	4883      	ldr	r0, [pc, #524]	; (8014664 <_dtoa_r+0x2e4>)
 8014458:	6018      	str	r0, [r3, #0]
 801445a:	1e43      	subs	r3, r0, #1
 801445c:	9301      	str	r3, [sp, #4]
 801445e:	e7df      	b.n	8014420 <_dtoa_r+0xa0>
 8014460:	ec4b ab10 	vmov	d0, sl, fp
 8014464:	aa10      	add	r2, sp, #64	; 0x40
 8014466:	a911      	add	r1, sp, #68	; 0x44
 8014468:	4620      	mov	r0, r4
 801446a:	f001 f983 	bl	8015774 <__d2b>
 801446e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8014472:	ee08 0a10 	vmov	s16, r0
 8014476:	2d00      	cmp	r5, #0
 8014478:	f000 8084 	beq.w	8014584 <_dtoa_r+0x204>
 801447c:	ee19 3a90 	vmov	r3, s19
 8014480:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014484:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014488:	4656      	mov	r6, sl
 801448a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801448e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014492:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014496:	4b74      	ldr	r3, [pc, #464]	; (8014668 <_dtoa_r+0x2e8>)
 8014498:	2200      	movs	r2, #0
 801449a:	4630      	mov	r0, r6
 801449c:	4639      	mov	r1, r7
 801449e:	f7eb fef3 	bl	8000288 <__aeabi_dsub>
 80144a2:	a365      	add	r3, pc, #404	; (adr r3, 8014638 <_dtoa_r+0x2b8>)
 80144a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144a8:	f7ec f8a6 	bl	80005f8 <__aeabi_dmul>
 80144ac:	a364      	add	r3, pc, #400	; (adr r3, 8014640 <_dtoa_r+0x2c0>)
 80144ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b2:	f7eb feeb 	bl	800028c <__adddf3>
 80144b6:	4606      	mov	r6, r0
 80144b8:	4628      	mov	r0, r5
 80144ba:	460f      	mov	r7, r1
 80144bc:	f7ec f832 	bl	8000524 <__aeabi_i2d>
 80144c0:	a361      	add	r3, pc, #388	; (adr r3, 8014648 <_dtoa_r+0x2c8>)
 80144c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c6:	f7ec f897 	bl	80005f8 <__aeabi_dmul>
 80144ca:	4602      	mov	r2, r0
 80144cc:	460b      	mov	r3, r1
 80144ce:	4630      	mov	r0, r6
 80144d0:	4639      	mov	r1, r7
 80144d2:	f7eb fedb 	bl	800028c <__adddf3>
 80144d6:	4606      	mov	r6, r0
 80144d8:	460f      	mov	r7, r1
 80144da:	f7ec fb3d 	bl	8000b58 <__aeabi_d2iz>
 80144de:	2200      	movs	r2, #0
 80144e0:	9000      	str	r0, [sp, #0]
 80144e2:	2300      	movs	r3, #0
 80144e4:	4630      	mov	r0, r6
 80144e6:	4639      	mov	r1, r7
 80144e8:	f7ec faf8 	bl	8000adc <__aeabi_dcmplt>
 80144ec:	b150      	cbz	r0, 8014504 <_dtoa_r+0x184>
 80144ee:	9800      	ldr	r0, [sp, #0]
 80144f0:	f7ec f818 	bl	8000524 <__aeabi_i2d>
 80144f4:	4632      	mov	r2, r6
 80144f6:	463b      	mov	r3, r7
 80144f8:	f7ec fae6 	bl	8000ac8 <__aeabi_dcmpeq>
 80144fc:	b910      	cbnz	r0, 8014504 <_dtoa_r+0x184>
 80144fe:	9b00      	ldr	r3, [sp, #0]
 8014500:	3b01      	subs	r3, #1
 8014502:	9300      	str	r3, [sp, #0]
 8014504:	9b00      	ldr	r3, [sp, #0]
 8014506:	2b16      	cmp	r3, #22
 8014508:	d85a      	bhi.n	80145c0 <_dtoa_r+0x240>
 801450a:	9a00      	ldr	r2, [sp, #0]
 801450c:	4b57      	ldr	r3, [pc, #348]	; (801466c <_dtoa_r+0x2ec>)
 801450e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014516:	ec51 0b19 	vmov	r0, r1, d9
 801451a:	f7ec fadf 	bl	8000adc <__aeabi_dcmplt>
 801451e:	2800      	cmp	r0, #0
 8014520:	d050      	beq.n	80145c4 <_dtoa_r+0x244>
 8014522:	9b00      	ldr	r3, [sp, #0]
 8014524:	3b01      	subs	r3, #1
 8014526:	9300      	str	r3, [sp, #0]
 8014528:	2300      	movs	r3, #0
 801452a:	930b      	str	r3, [sp, #44]	; 0x2c
 801452c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801452e:	1b5d      	subs	r5, r3, r5
 8014530:	1e6b      	subs	r3, r5, #1
 8014532:	9305      	str	r3, [sp, #20]
 8014534:	bf45      	ittet	mi
 8014536:	f1c5 0301 	rsbmi	r3, r5, #1
 801453a:	9304      	strmi	r3, [sp, #16]
 801453c:	2300      	movpl	r3, #0
 801453e:	2300      	movmi	r3, #0
 8014540:	bf4c      	ite	mi
 8014542:	9305      	strmi	r3, [sp, #20]
 8014544:	9304      	strpl	r3, [sp, #16]
 8014546:	9b00      	ldr	r3, [sp, #0]
 8014548:	2b00      	cmp	r3, #0
 801454a:	db3d      	blt.n	80145c8 <_dtoa_r+0x248>
 801454c:	9b05      	ldr	r3, [sp, #20]
 801454e:	9a00      	ldr	r2, [sp, #0]
 8014550:	920a      	str	r2, [sp, #40]	; 0x28
 8014552:	4413      	add	r3, r2
 8014554:	9305      	str	r3, [sp, #20]
 8014556:	2300      	movs	r3, #0
 8014558:	9307      	str	r3, [sp, #28]
 801455a:	9b06      	ldr	r3, [sp, #24]
 801455c:	2b09      	cmp	r3, #9
 801455e:	f200 8089 	bhi.w	8014674 <_dtoa_r+0x2f4>
 8014562:	2b05      	cmp	r3, #5
 8014564:	bfc4      	itt	gt
 8014566:	3b04      	subgt	r3, #4
 8014568:	9306      	strgt	r3, [sp, #24]
 801456a:	9b06      	ldr	r3, [sp, #24]
 801456c:	f1a3 0302 	sub.w	r3, r3, #2
 8014570:	bfcc      	ite	gt
 8014572:	2500      	movgt	r5, #0
 8014574:	2501      	movle	r5, #1
 8014576:	2b03      	cmp	r3, #3
 8014578:	f200 8087 	bhi.w	801468a <_dtoa_r+0x30a>
 801457c:	e8df f003 	tbb	[pc, r3]
 8014580:	59383a2d 	.word	0x59383a2d
 8014584:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014588:	441d      	add	r5, r3
 801458a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801458e:	2b20      	cmp	r3, #32
 8014590:	bfc1      	itttt	gt
 8014592:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014596:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801459a:	fa0b f303 	lslgt.w	r3, fp, r3
 801459e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80145a2:	bfda      	itte	le
 80145a4:	f1c3 0320 	rsble	r3, r3, #32
 80145a8:	fa06 f003 	lslle.w	r0, r6, r3
 80145ac:	4318      	orrgt	r0, r3
 80145ae:	f7eb ffa9 	bl	8000504 <__aeabi_ui2d>
 80145b2:	2301      	movs	r3, #1
 80145b4:	4606      	mov	r6, r0
 80145b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80145ba:	3d01      	subs	r5, #1
 80145bc:	930e      	str	r3, [sp, #56]	; 0x38
 80145be:	e76a      	b.n	8014496 <_dtoa_r+0x116>
 80145c0:	2301      	movs	r3, #1
 80145c2:	e7b2      	b.n	801452a <_dtoa_r+0x1aa>
 80145c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80145c6:	e7b1      	b.n	801452c <_dtoa_r+0x1ac>
 80145c8:	9b04      	ldr	r3, [sp, #16]
 80145ca:	9a00      	ldr	r2, [sp, #0]
 80145cc:	1a9b      	subs	r3, r3, r2
 80145ce:	9304      	str	r3, [sp, #16]
 80145d0:	4253      	negs	r3, r2
 80145d2:	9307      	str	r3, [sp, #28]
 80145d4:	2300      	movs	r3, #0
 80145d6:	930a      	str	r3, [sp, #40]	; 0x28
 80145d8:	e7bf      	b.n	801455a <_dtoa_r+0x1da>
 80145da:	2300      	movs	r3, #0
 80145dc:	9308      	str	r3, [sp, #32]
 80145de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145e0:	2b00      	cmp	r3, #0
 80145e2:	dc55      	bgt.n	8014690 <_dtoa_r+0x310>
 80145e4:	2301      	movs	r3, #1
 80145e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80145ea:	461a      	mov	r2, r3
 80145ec:	9209      	str	r2, [sp, #36]	; 0x24
 80145ee:	e00c      	b.n	801460a <_dtoa_r+0x28a>
 80145f0:	2301      	movs	r3, #1
 80145f2:	e7f3      	b.n	80145dc <_dtoa_r+0x25c>
 80145f4:	2300      	movs	r3, #0
 80145f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145f8:	9308      	str	r3, [sp, #32]
 80145fa:	9b00      	ldr	r3, [sp, #0]
 80145fc:	4413      	add	r3, r2
 80145fe:	9302      	str	r3, [sp, #8]
 8014600:	3301      	adds	r3, #1
 8014602:	2b01      	cmp	r3, #1
 8014604:	9303      	str	r3, [sp, #12]
 8014606:	bfb8      	it	lt
 8014608:	2301      	movlt	r3, #1
 801460a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801460c:	2200      	movs	r2, #0
 801460e:	6042      	str	r2, [r0, #4]
 8014610:	2204      	movs	r2, #4
 8014612:	f102 0614 	add.w	r6, r2, #20
 8014616:	429e      	cmp	r6, r3
 8014618:	6841      	ldr	r1, [r0, #4]
 801461a:	d93d      	bls.n	8014698 <_dtoa_r+0x318>
 801461c:	4620      	mov	r0, r4
 801461e:	f000 fd81 	bl	8015124 <_Balloc>
 8014622:	9001      	str	r0, [sp, #4]
 8014624:	2800      	cmp	r0, #0
 8014626:	d13b      	bne.n	80146a0 <_dtoa_r+0x320>
 8014628:	4b11      	ldr	r3, [pc, #68]	; (8014670 <_dtoa_r+0x2f0>)
 801462a:	4602      	mov	r2, r0
 801462c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8014630:	e6c0      	b.n	80143b4 <_dtoa_r+0x34>
 8014632:	2301      	movs	r3, #1
 8014634:	e7df      	b.n	80145f6 <_dtoa_r+0x276>
 8014636:	bf00      	nop
 8014638:	636f4361 	.word	0x636f4361
 801463c:	3fd287a7 	.word	0x3fd287a7
 8014640:	8b60c8b3 	.word	0x8b60c8b3
 8014644:	3fc68a28 	.word	0x3fc68a28
 8014648:	509f79fb 	.word	0x509f79fb
 801464c:	3fd34413 	.word	0x3fd34413
 8014650:	080163bd 	.word	0x080163bd
 8014654:	080163d4 	.word	0x080163d4
 8014658:	7ff00000 	.word	0x7ff00000
 801465c:	080163b9 	.word	0x080163b9
 8014660:	080163b0 	.word	0x080163b0
 8014664:	0801638d 	.word	0x0801638d
 8014668:	3ff80000 	.word	0x3ff80000
 801466c:	080164c8 	.word	0x080164c8
 8014670:	0801642f 	.word	0x0801642f
 8014674:	2501      	movs	r5, #1
 8014676:	2300      	movs	r3, #0
 8014678:	9306      	str	r3, [sp, #24]
 801467a:	9508      	str	r5, [sp, #32]
 801467c:	f04f 33ff 	mov.w	r3, #4294967295
 8014680:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014684:	2200      	movs	r2, #0
 8014686:	2312      	movs	r3, #18
 8014688:	e7b0      	b.n	80145ec <_dtoa_r+0x26c>
 801468a:	2301      	movs	r3, #1
 801468c:	9308      	str	r3, [sp, #32]
 801468e:	e7f5      	b.n	801467c <_dtoa_r+0x2fc>
 8014690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014692:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014696:	e7b8      	b.n	801460a <_dtoa_r+0x28a>
 8014698:	3101      	adds	r1, #1
 801469a:	6041      	str	r1, [r0, #4]
 801469c:	0052      	lsls	r2, r2, #1
 801469e:	e7b8      	b.n	8014612 <_dtoa_r+0x292>
 80146a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80146a2:	9a01      	ldr	r2, [sp, #4]
 80146a4:	601a      	str	r2, [r3, #0]
 80146a6:	9b03      	ldr	r3, [sp, #12]
 80146a8:	2b0e      	cmp	r3, #14
 80146aa:	f200 809d 	bhi.w	80147e8 <_dtoa_r+0x468>
 80146ae:	2d00      	cmp	r5, #0
 80146b0:	f000 809a 	beq.w	80147e8 <_dtoa_r+0x468>
 80146b4:	9b00      	ldr	r3, [sp, #0]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	dd32      	ble.n	8014720 <_dtoa_r+0x3a0>
 80146ba:	4ab7      	ldr	r2, [pc, #732]	; (8014998 <_dtoa_r+0x618>)
 80146bc:	f003 030f 	and.w	r3, r3, #15
 80146c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80146c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80146c8:	9b00      	ldr	r3, [sp, #0]
 80146ca:	05d8      	lsls	r0, r3, #23
 80146cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80146d0:	d516      	bpl.n	8014700 <_dtoa_r+0x380>
 80146d2:	4bb2      	ldr	r3, [pc, #712]	; (801499c <_dtoa_r+0x61c>)
 80146d4:	ec51 0b19 	vmov	r0, r1, d9
 80146d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80146dc:	f7ec f8b6 	bl	800084c <__aeabi_ddiv>
 80146e0:	f007 070f 	and.w	r7, r7, #15
 80146e4:	4682      	mov	sl, r0
 80146e6:	468b      	mov	fp, r1
 80146e8:	2503      	movs	r5, #3
 80146ea:	4eac      	ldr	r6, [pc, #688]	; (801499c <_dtoa_r+0x61c>)
 80146ec:	b957      	cbnz	r7, 8014704 <_dtoa_r+0x384>
 80146ee:	4642      	mov	r2, r8
 80146f0:	464b      	mov	r3, r9
 80146f2:	4650      	mov	r0, sl
 80146f4:	4659      	mov	r1, fp
 80146f6:	f7ec f8a9 	bl	800084c <__aeabi_ddiv>
 80146fa:	4682      	mov	sl, r0
 80146fc:	468b      	mov	fp, r1
 80146fe:	e028      	b.n	8014752 <_dtoa_r+0x3d2>
 8014700:	2502      	movs	r5, #2
 8014702:	e7f2      	b.n	80146ea <_dtoa_r+0x36a>
 8014704:	07f9      	lsls	r1, r7, #31
 8014706:	d508      	bpl.n	801471a <_dtoa_r+0x39a>
 8014708:	4640      	mov	r0, r8
 801470a:	4649      	mov	r1, r9
 801470c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014710:	f7eb ff72 	bl	80005f8 <__aeabi_dmul>
 8014714:	3501      	adds	r5, #1
 8014716:	4680      	mov	r8, r0
 8014718:	4689      	mov	r9, r1
 801471a:	107f      	asrs	r7, r7, #1
 801471c:	3608      	adds	r6, #8
 801471e:	e7e5      	b.n	80146ec <_dtoa_r+0x36c>
 8014720:	f000 809b 	beq.w	801485a <_dtoa_r+0x4da>
 8014724:	9b00      	ldr	r3, [sp, #0]
 8014726:	4f9d      	ldr	r7, [pc, #628]	; (801499c <_dtoa_r+0x61c>)
 8014728:	425e      	negs	r6, r3
 801472a:	4b9b      	ldr	r3, [pc, #620]	; (8014998 <_dtoa_r+0x618>)
 801472c:	f006 020f 	and.w	r2, r6, #15
 8014730:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014738:	ec51 0b19 	vmov	r0, r1, d9
 801473c:	f7eb ff5c 	bl	80005f8 <__aeabi_dmul>
 8014740:	1136      	asrs	r6, r6, #4
 8014742:	4682      	mov	sl, r0
 8014744:	468b      	mov	fp, r1
 8014746:	2300      	movs	r3, #0
 8014748:	2502      	movs	r5, #2
 801474a:	2e00      	cmp	r6, #0
 801474c:	d17a      	bne.n	8014844 <_dtoa_r+0x4c4>
 801474e:	2b00      	cmp	r3, #0
 8014750:	d1d3      	bne.n	80146fa <_dtoa_r+0x37a>
 8014752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014754:	2b00      	cmp	r3, #0
 8014756:	f000 8082 	beq.w	801485e <_dtoa_r+0x4de>
 801475a:	4b91      	ldr	r3, [pc, #580]	; (80149a0 <_dtoa_r+0x620>)
 801475c:	2200      	movs	r2, #0
 801475e:	4650      	mov	r0, sl
 8014760:	4659      	mov	r1, fp
 8014762:	f7ec f9bb 	bl	8000adc <__aeabi_dcmplt>
 8014766:	2800      	cmp	r0, #0
 8014768:	d079      	beq.n	801485e <_dtoa_r+0x4de>
 801476a:	9b03      	ldr	r3, [sp, #12]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d076      	beq.n	801485e <_dtoa_r+0x4de>
 8014770:	9b02      	ldr	r3, [sp, #8]
 8014772:	2b00      	cmp	r3, #0
 8014774:	dd36      	ble.n	80147e4 <_dtoa_r+0x464>
 8014776:	9b00      	ldr	r3, [sp, #0]
 8014778:	4650      	mov	r0, sl
 801477a:	4659      	mov	r1, fp
 801477c:	1e5f      	subs	r7, r3, #1
 801477e:	2200      	movs	r2, #0
 8014780:	4b88      	ldr	r3, [pc, #544]	; (80149a4 <_dtoa_r+0x624>)
 8014782:	f7eb ff39 	bl	80005f8 <__aeabi_dmul>
 8014786:	9e02      	ldr	r6, [sp, #8]
 8014788:	4682      	mov	sl, r0
 801478a:	468b      	mov	fp, r1
 801478c:	3501      	adds	r5, #1
 801478e:	4628      	mov	r0, r5
 8014790:	f7eb fec8 	bl	8000524 <__aeabi_i2d>
 8014794:	4652      	mov	r2, sl
 8014796:	465b      	mov	r3, fp
 8014798:	f7eb ff2e 	bl	80005f8 <__aeabi_dmul>
 801479c:	4b82      	ldr	r3, [pc, #520]	; (80149a8 <_dtoa_r+0x628>)
 801479e:	2200      	movs	r2, #0
 80147a0:	f7eb fd74 	bl	800028c <__adddf3>
 80147a4:	46d0      	mov	r8, sl
 80147a6:	46d9      	mov	r9, fp
 80147a8:	4682      	mov	sl, r0
 80147aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80147ae:	2e00      	cmp	r6, #0
 80147b0:	d158      	bne.n	8014864 <_dtoa_r+0x4e4>
 80147b2:	4b7e      	ldr	r3, [pc, #504]	; (80149ac <_dtoa_r+0x62c>)
 80147b4:	2200      	movs	r2, #0
 80147b6:	4640      	mov	r0, r8
 80147b8:	4649      	mov	r1, r9
 80147ba:	f7eb fd65 	bl	8000288 <__aeabi_dsub>
 80147be:	4652      	mov	r2, sl
 80147c0:	465b      	mov	r3, fp
 80147c2:	4680      	mov	r8, r0
 80147c4:	4689      	mov	r9, r1
 80147c6:	f7ec f9a7 	bl	8000b18 <__aeabi_dcmpgt>
 80147ca:	2800      	cmp	r0, #0
 80147cc:	f040 8295 	bne.w	8014cfa <_dtoa_r+0x97a>
 80147d0:	4652      	mov	r2, sl
 80147d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80147d6:	4640      	mov	r0, r8
 80147d8:	4649      	mov	r1, r9
 80147da:	f7ec f97f 	bl	8000adc <__aeabi_dcmplt>
 80147de:	2800      	cmp	r0, #0
 80147e0:	f040 8289 	bne.w	8014cf6 <_dtoa_r+0x976>
 80147e4:	ec5b ab19 	vmov	sl, fp, d9
 80147e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	f2c0 8148 	blt.w	8014a80 <_dtoa_r+0x700>
 80147f0:	9a00      	ldr	r2, [sp, #0]
 80147f2:	2a0e      	cmp	r2, #14
 80147f4:	f300 8144 	bgt.w	8014a80 <_dtoa_r+0x700>
 80147f8:	4b67      	ldr	r3, [pc, #412]	; (8014998 <_dtoa_r+0x618>)
 80147fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014804:	2b00      	cmp	r3, #0
 8014806:	f280 80d5 	bge.w	80149b4 <_dtoa_r+0x634>
 801480a:	9b03      	ldr	r3, [sp, #12]
 801480c:	2b00      	cmp	r3, #0
 801480e:	f300 80d1 	bgt.w	80149b4 <_dtoa_r+0x634>
 8014812:	f040 826f 	bne.w	8014cf4 <_dtoa_r+0x974>
 8014816:	4b65      	ldr	r3, [pc, #404]	; (80149ac <_dtoa_r+0x62c>)
 8014818:	2200      	movs	r2, #0
 801481a:	4640      	mov	r0, r8
 801481c:	4649      	mov	r1, r9
 801481e:	f7eb feeb 	bl	80005f8 <__aeabi_dmul>
 8014822:	4652      	mov	r2, sl
 8014824:	465b      	mov	r3, fp
 8014826:	f7ec f96d 	bl	8000b04 <__aeabi_dcmpge>
 801482a:	9e03      	ldr	r6, [sp, #12]
 801482c:	4637      	mov	r7, r6
 801482e:	2800      	cmp	r0, #0
 8014830:	f040 8245 	bne.w	8014cbe <_dtoa_r+0x93e>
 8014834:	9d01      	ldr	r5, [sp, #4]
 8014836:	2331      	movs	r3, #49	; 0x31
 8014838:	f805 3b01 	strb.w	r3, [r5], #1
 801483c:	9b00      	ldr	r3, [sp, #0]
 801483e:	3301      	adds	r3, #1
 8014840:	9300      	str	r3, [sp, #0]
 8014842:	e240      	b.n	8014cc6 <_dtoa_r+0x946>
 8014844:	07f2      	lsls	r2, r6, #31
 8014846:	d505      	bpl.n	8014854 <_dtoa_r+0x4d4>
 8014848:	e9d7 2300 	ldrd	r2, r3, [r7]
 801484c:	f7eb fed4 	bl	80005f8 <__aeabi_dmul>
 8014850:	3501      	adds	r5, #1
 8014852:	2301      	movs	r3, #1
 8014854:	1076      	asrs	r6, r6, #1
 8014856:	3708      	adds	r7, #8
 8014858:	e777      	b.n	801474a <_dtoa_r+0x3ca>
 801485a:	2502      	movs	r5, #2
 801485c:	e779      	b.n	8014752 <_dtoa_r+0x3d2>
 801485e:	9f00      	ldr	r7, [sp, #0]
 8014860:	9e03      	ldr	r6, [sp, #12]
 8014862:	e794      	b.n	801478e <_dtoa_r+0x40e>
 8014864:	9901      	ldr	r1, [sp, #4]
 8014866:	4b4c      	ldr	r3, [pc, #304]	; (8014998 <_dtoa_r+0x618>)
 8014868:	4431      	add	r1, r6
 801486a:	910d      	str	r1, [sp, #52]	; 0x34
 801486c:	9908      	ldr	r1, [sp, #32]
 801486e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8014872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8014876:	2900      	cmp	r1, #0
 8014878:	d043      	beq.n	8014902 <_dtoa_r+0x582>
 801487a:	494d      	ldr	r1, [pc, #308]	; (80149b0 <_dtoa_r+0x630>)
 801487c:	2000      	movs	r0, #0
 801487e:	f7eb ffe5 	bl	800084c <__aeabi_ddiv>
 8014882:	4652      	mov	r2, sl
 8014884:	465b      	mov	r3, fp
 8014886:	f7eb fcff 	bl	8000288 <__aeabi_dsub>
 801488a:	9d01      	ldr	r5, [sp, #4]
 801488c:	4682      	mov	sl, r0
 801488e:	468b      	mov	fp, r1
 8014890:	4649      	mov	r1, r9
 8014892:	4640      	mov	r0, r8
 8014894:	f7ec f960 	bl	8000b58 <__aeabi_d2iz>
 8014898:	4606      	mov	r6, r0
 801489a:	f7eb fe43 	bl	8000524 <__aeabi_i2d>
 801489e:	4602      	mov	r2, r0
 80148a0:	460b      	mov	r3, r1
 80148a2:	4640      	mov	r0, r8
 80148a4:	4649      	mov	r1, r9
 80148a6:	f7eb fcef 	bl	8000288 <__aeabi_dsub>
 80148aa:	3630      	adds	r6, #48	; 0x30
 80148ac:	f805 6b01 	strb.w	r6, [r5], #1
 80148b0:	4652      	mov	r2, sl
 80148b2:	465b      	mov	r3, fp
 80148b4:	4680      	mov	r8, r0
 80148b6:	4689      	mov	r9, r1
 80148b8:	f7ec f910 	bl	8000adc <__aeabi_dcmplt>
 80148bc:	2800      	cmp	r0, #0
 80148be:	d163      	bne.n	8014988 <_dtoa_r+0x608>
 80148c0:	4642      	mov	r2, r8
 80148c2:	464b      	mov	r3, r9
 80148c4:	4936      	ldr	r1, [pc, #216]	; (80149a0 <_dtoa_r+0x620>)
 80148c6:	2000      	movs	r0, #0
 80148c8:	f7eb fcde 	bl	8000288 <__aeabi_dsub>
 80148cc:	4652      	mov	r2, sl
 80148ce:	465b      	mov	r3, fp
 80148d0:	f7ec f904 	bl	8000adc <__aeabi_dcmplt>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	f040 80b5 	bne.w	8014a44 <_dtoa_r+0x6c4>
 80148da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148dc:	429d      	cmp	r5, r3
 80148de:	d081      	beq.n	80147e4 <_dtoa_r+0x464>
 80148e0:	4b30      	ldr	r3, [pc, #192]	; (80149a4 <_dtoa_r+0x624>)
 80148e2:	2200      	movs	r2, #0
 80148e4:	4650      	mov	r0, sl
 80148e6:	4659      	mov	r1, fp
 80148e8:	f7eb fe86 	bl	80005f8 <__aeabi_dmul>
 80148ec:	4b2d      	ldr	r3, [pc, #180]	; (80149a4 <_dtoa_r+0x624>)
 80148ee:	4682      	mov	sl, r0
 80148f0:	468b      	mov	fp, r1
 80148f2:	4640      	mov	r0, r8
 80148f4:	4649      	mov	r1, r9
 80148f6:	2200      	movs	r2, #0
 80148f8:	f7eb fe7e 	bl	80005f8 <__aeabi_dmul>
 80148fc:	4680      	mov	r8, r0
 80148fe:	4689      	mov	r9, r1
 8014900:	e7c6      	b.n	8014890 <_dtoa_r+0x510>
 8014902:	4650      	mov	r0, sl
 8014904:	4659      	mov	r1, fp
 8014906:	f7eb fe77 	bl	80005f8 <__aeabi_dmul>
 801490a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801490c:	9d01      	ldr	r5, [sp, #4]
 801490e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014910:	4682      	mov	sl, r0
 8014912:	468b      	mov	fp, r1
 8014914:	4649      	mov	r1, r9
 8014916:	4640      	mov	r0, r8
 8014918:	f7ec f91e 	bl	8000b58 <__aeabi_d2iz>
 801491c:	4606      	mov	r6, r0
 801491e:	f7eb fe01 	bl	8000524 <__aeabi_i2d>
 8014922:	3630      	adds	r6, #48	; 0x30
 8014924:	4602      	mov	r2, r0
 8014926:	460b      	mov	r3, r1
 8014928:	4640      	mov	r0, r8
 801492a:	4649      	mov	r1, r9
 801492c:	f7eb fcac 	bl	8000288 <__aeabi_dsub>
 8014930:	f805 6b01 	strb.w	r6, [r5], #1
 8014934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014936:	429d      	cmp	r5, r3
 8014938:	4680      	mov	r8, r0
 801493a:	4689      	mov	r9, r1
 801493c:	f04f 0200 	mov.w	r2, #0
 8014940:	d124      	bne.n	801498c <_dtoa_r+0x60c>
 8014942:	4b1b      	ldr	r3, [pc, #108]	; (80149b0 <_dtoa_r+0x630>)
 8014944:	4650      	mov	r0, sl
 8014946:	4659      	mov	r1, fp
 8014948:	f7eb fca0 	bl	800028c <__adddf3>
 801494c:	4602      	mov	r2, r0
 801494e:	460b      	mov	r3, r1
 8014950:	4640      	mov	r0, r8
 8014952:	4649      	mov	r1, r9
 8014954:	f7ec f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8014958:	2800      	cmp	r0, #0
 801495a:	d173      	bne.n	8014a44 <_dtoa_r+0x6c4>
 801495c:	4652      	mov	r2, sl
 801495e:	465b      	mov	r3, fp
 8014960:	4913      	ldr	r1, [pc, #76]	; (80149b0 <_dtoa_r+0x630>)
 8014962:	2000      	movs	r0, #0
 8014964:	f7eb fc90 	bl	8000288 <__aeabi_dsub>
 8014968:	4602      	mov	r2, r0
 801496a:	460b      	mov	r3, r1
 801496c:	4640      	mov	r0, r8
 801496e:	4649      	mov	r1, r9
 8014970:	f7ec f8b4 	bl	8000adc <__aeabi_dcmplt>
 8014974:	2800      	cmp	r0, #0
 8014976:	f43f af35 	beq.w	80147e4 <_dtoa_r+0x464>
 801497a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801497c:	1e6b      	subs	r3, r5, #1
 801497e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014980:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014984:	2b30      	cmp	r3, #48	; 0x30
 8014986:	d0f8      	beq.n	801497a <_dtoa_r+0x5fa>
 8014988:	9700      	str	r7, [sp, #0]
 801498a:	e049      	b.n	8014a20 <_dtoa_r+0x6a0>
 801498c:	4b05      	ldr	r3, [pc, #20]	; (80149a4 <_dtoa_r+0x624>)
 801498e:	f7eb fe33 	bl	80005f8 <__aeabi_dmul>
 8014992:	4680      	mov	r8, r0
 8014994:	4689      	mov	r9, r1
 8014996:	e7bd      	b.n	8014914 <_dtoa_r+0x594>
 8014998:	080164c8 	.word	0x080164c8
 801499c:	080164a0 	.word	0x080164a0
 80149a0:	3ff00000 	.word	0x3ff00000
 80149a4:	40240000 	.word	0x40240000
 80149a8:	401c0000 	.word	0x401c0000
 80149ac:	40140000 	.word	0x40140000
 80149b0:	3fe00000 	.word	0x3fe00000
 80149b4:	9d01      	ldr	r5, [sp, #4]
 80149b6:	4656      	mov	r6, sl
 80149b8:	465f      	mov	r7, fp
 80149ba:	4642      	mov	r2, r8
 80149bc:	464b      	mov	r3, r9
 80149be:	4630      	mov	r0, r6
 80149c0:	4639      	mov	r1, r7
 80149c2:	f7eb ff43 	bl	800084c <__aeabi_ddiv>
 80149c6:	f7ec f8c7 	bl	8000b58 <__aeabi_d2iz>
 80149ca:	4682      	mov	sl, r0
 80149cc:	f7eb fdaa 	bl	8000524 <__aeabi_i2d>
 80149d0:	4642      	mov	r2, r8
 80149d2:	464b      	mov	r3, r9
 80149d4:	f7eb fe10 	bl	80005f8 <__aeabi_dmul>
 80149d8:	4602      	mov	r2, r0
 80149da:	460b      	mov	r3, r1
 80149dc:	4630      	mov	r0, r6
 80149de:	4639      	mov	r1, r7
 80149e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80149e4:	f7eb fc50 	bl	8000288 <__aeabi_dsub>
 80149e8:	f805 6b01 	strb.w	r6, [r5], #1
 80149ec:	9e01      	ldr	r6, [sp, #4]
 80149ee:	9f03      	ldr	r7, [sp, #12]
 80149f0:	1bae      	subs	r6, r5, r6
 80149f2:	42b7      	cmp	r7, r6
 80149f4:	4602      	mov	r2, r0
 80149f6:	460b      	mov	r3, r1
 80149f8:	d135      	bne.n	8014a66 <_dtoa_r+0x6e6>
 80149fa:	f7eb fc47 	bl	800028c <__adddf3>
 80149fe:	4642      	mov	r2, r8
 8014a00:	464b      	mov	r3, r9
 8014a02:	4606      	mov	r6, r0
 8014a04:	460f      	mov	r7, r1
 8014a06:	f7ec f887 	bl	8000b18 <__aeabi_dcmpgt>
 8014a0a:	b9d0      	cbnz	r0, 8014a42 <_dtoa_r+0x6c2>
 8014a0c:	4642      	mov	r2, r8
 8014a0e:	464b      	mov	r3, r9
 8014a10:	4630      	mov	r0, r6
 8014a12:	4639      	mov	r1, r7
 8014a14:	f7ec f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a18:	b110      	cbz	r0, 8014a20 <_dtoa_r+0x6a0>
 8014a1a:	f01a 0f01 	tst.w	sl, #1
 8014a1e:	d110      	bne.n	8014a42 <_dtoa_r+0x6c2>
 8014a20:	4620      	mov	r0, r4
 8014a22:	ee18 1a10 	vmov	r1, s16
 8014a26:	f000 fbbd 	bl	80151a4 <_Bfree>
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	9800      	ldr	r0, [sp, #0]
 8014a2e:	702b      	strb	r3, [r5, #0]
 8014a30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014a32:	3001      	adds	r0, #1
 8014a34:	6018      	str	r0, [r3, #0]
 8014a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	f43f acf1 	beq.w	8014420 <_dtoa_r+0xa0>
 8014a3e:	601d      	str	r5, [r3, #0]
 8014a40:	e4ee      	b.n	8014420 <_dtoa_r+0xa0>
 8014a42:	9f00      	ldr	r7, [sp, #0]
 8014a44:	462b      	mov	r3, r5
 8014a46:	461d      	mov	r5, r3
 8014a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014a4c:	2a39      	cmp	r2, #57	; 0x39
 8014a4e:	d106      	bne.n	8014a5e <_dtoa_r+0x6de>
 8014a50:	9a01      	ldr	r2, [sp, #4]
 8014a52:	429a      	cmp	r2, r3
 8014a54:	d1f7      	bne.n	8014a46 <_dtoa_r+0x6c6>
 8014a56:	9901      	ldr	r1, [sp, #4]
 8014a58:	2230      	movs	r2, #48	; 0x30
 8014a5a:	3701      	adds	r7, #1
 8014a5c:	700a      	strb	r2, [r1, #0]
 8014a5e:	781a      	ldrb	r2, [r3, #0]
 8014a60:	3201      	adds	r2, #1
 8014a62:	701a      	strb	r2, [r3, #0]
 8014a64:	e790      	b.n	8014988 <_dtoa_r+0x608>
 8014a66:	4ba6      	ldr	r3, [pc, #664]	; (8014d00 <_dtoa_r+0x980>)
 8014a68:	2200      	movs	r2, #0
 8014a6a:	f7eb fdc5 	bl	80005f8 <__aeabi_dmul>
 8014a6e:	2200      	movs	r2, #0
 8014a70:	2300      	movs	r3, #0
 8014a72:	4606      	mov	r6, r0
 8014a74:	460f      	mov	r7, r1
 8014a76:	f7ec f827 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a7a:	2800      	cmp	r0, #0
 8014a7c:	d09d      	beq.n	80149ba <_dtoa_r+0x63a>
 8014a7e:	e7cf      	b.n	8014a20 <_dtoa_r+0x6a0>
 8014a80:	9a08      	ldr	r2, [sp, #32]
 8014a82:	2a00      	cmp	r2, #0
 8014a84:	f000 80d7 	beq.w	8014c36 <_dtoa_r+0x8b6>
 8014a88:	9a06      	ldr	r2, [sp, #24]
 8014a8a:	2a01      	cmp	r2, #1
 8014a8c:	f300 80ba 	bgt.w	8014c04 <_dtoa_r+0x884>
 8014a90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a92:	2a00      	cmp	r2, #0
 8014a94:	f000 80b2 	beq.w	8014bfc <_dtoa_r+0x87c>
 8014a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014a9c:	9e07      	ldr	r6, [sp, #28]
 8014a9e:	9d04      	ldr	r5, [sp, #16]
 8014aa0:	9a04      	ldr	r2, [sp, #16]
 8014aa2:	441a      	add	r2, r3
 8014aa4:	9204      	str	r2, [sp, #16]
 8014aa6:	9a05      	ldr	r2, [sp, #20]
 8014aa8:	2101      	movs	r1, #1
 8014aaa:	441a      	add	r2, r3
 8014aac:	4620      	mov	r0, r4
 8014aae:	9205      	str	r2, [sp, #20]
 8014ab0:	f000 fc30 	bl	8015314 <__i2b>
 8014ab4:	4607      	mov	r7, r0
 8014ab6:	2d00      	cmp	r5, #0
 8014ab8:	dd0c      	ble.n	8014ad4 <_dtoa_r+0x754>
 8014aba:	9b05      	ldr	r3, [sp, #20]
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	dd09      	ble.n	8014ad4 <_dtoa_r+0x754>
 8014ac0:	42ab      	cmp	r3, r5
 8014ac2:	9a04      	ldr	r2, [sp, #16]
 8014ac4:	bfa8      	it	ge
 8014ac6:	462b      	movge	r3, r5
 8014ac8:	1ad2      	subs	r2, r2, r3
 8014aca:	9204      	str	r2, [sp, #16]
 8014acc:	9a05      	ldr	r2, [sp, #20]
 8014ace:	1aed      	subs	r5, r5, r3
 8014ad0:	1ad3      	subs	r3, r2, r3
 8014ad2:	9305      	str	r3, [sp, #20]
 8014ad4:	9b07      	ldr	r3, [sp, #28]
 8014ad6:	b31b      	cbz	r3, 8014b20 <_dtoa_r+0x7a0>
 8014ad8:	9b08      	ldr	r3, [sp, #32]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	f000 80af 	beq.w	8014c3e <_dtoa_r+0x8be>
 8014ae0:	2e00      	cmp	r6, #0
 8014ae2:	dd13      	ble.n	8014b0c <_dtoa_r+0x78c>
 8014ae4:	4639      	mov	r1, r7
 8014ae6:	4632      	mov	r2, r6
 8014ae8:	4620      	mov	r0, r4
 8014aea:	f000 fcd3 	bl	8015494 <__pow5mult>
 8014aee:	ee18 2a10 	vmov	r2, s16
 8014af2:	4601      	mov	r1, r0
 8014af4:	4607      	mov	r7, r0
 8014af6:	4620      	mov	r0, r4
 8014af8:	f000 fc22 	bl	8015340 <__multiply>
 8014afc:	ee18 1a10 	vmov	r1, s16
 8014b00:	4680      	mov	r8, r0
 8014b02:	4620      	mov	r0, r4
 8014b04:	f000 fb4e 	bl	80151a4 <_Bfree>
 8014b08:	ee08 8a10 	vmov	s16, r8
 8014b0c:	9b07      	ldr	r3, [sp, #28]
 8014b0e:	1b9a      	subs	r2, r3, r6
 8014b10:	d006      	beq.n	8014b20 <_dtoa_r+0x7a0>
 8014b12:	ee18 1a10 	vmov	r1, s16
 8014b16:	4620      	mov	r0, r4
 8014b18:	f000 fcbc 	bl	8015494 <__pow5mult>
 8014b1c:	ee08 0a10 	vmov	s16, r0
 8014b20:	2101      	movs	r1, #1
 8014b22:	4620      	mov	r0, r4
 8014b24:	f000 fbf6 	bl	8015314 <__i2b>
 8014b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	4606      	mov	r6, r0
 8014b2e:	f340 8088 	ble.w	8014c42 <_dtoa_r+0x8c2>
 8014b32:	461a      	mov	r2, r3
 8014b34:	4601      	mov	r1, r0
 8014b36:	4620      	mov	r0, r4
 8014b38:	f000 fcac 	bl	8015494 <__pow5mult>
 8014b3c:	9b06      	ldr	r3, [sp, #24]
 8014b3e:	2b01      	cmp	r3, #1
 8014b40:	4606      	mov	r6, r0
 8014b42:	f340 8081 	ble.w	8014c48 <_dtoa_r+0x8c8>
 8014b46:	f04f 0800 	mov.w	r8, #0
 8014b4a:	6933      	ldr	r3, [r6, #16]
 8014b4c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014b50:	6918      	ldr	r0, [r3, #16]
 8014b52:	f000 fb8f 	bl	8015274 <__hi0bits>
 8014b56:	f1c0 0020 	rsb	r0, r0, #32
 8014b5a:	9b05      	ldr	r3, [sp, #20]
 8014b5c:	4418      	add	r0, r3
 8014b5e:	f010 001f 	ands.w	r0, r0, #31
 8014b62:	f000 8092 	beq.w	8014c8a <_dtoa_r+0x90a>
 8014b66:	f1c0 0320 	rsb	r3, r0, #32
 8014b6a:	2b04      	cmp	r3, #4
 8014b6c:	f340 808a 	ble.w	8014c84 <_dtoa_r+0x904>
 8014b70:	f1c0 001c 	rsb	r0, r0, #28
 8014b74:	9b04      	ldr	r3, [sp, #16]
 8014b76:	4403      	add	r3, r0
 8014b78:	9304      	str	r3, [sp, #16]
 8014b7a:	9b05      	ldr	r3, [sp, #20]
 8014b7c:	4403      	add	r3, r0
 8014b7e:	4405      	add	r5, r0
 8014b80:	9305      	str	r3, [sp, #20]
 8014b82:	9b04      	ldr	r3, [sp, #16]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	dd07      	ble.n	8014b98 <_dtoa_r+0x818>
 8014b88:	ee18 1a10 	vmov	r1, s16
 8014b8c:	461a      	mov	r2, r3
 8014b8e:	4620      	mov	r0, r4
 8014b90:	f000 fcda 	bl	8015548 <__lshift>
 8014b94:	ee08 0a10 	vmov	s16, r0
 8014b98:	9b05      	ldr	r3, [sp, #20]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	dd05      	ble.n	8014baa <_dtoa_r+0x82a>
 8014b9e:	4631      	mov	r1, r6
 8014ba0:	461a      	mov	r2, r3
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	f000 fcd0 	bl	8015548 <__lshift>
 8014ba8:	4606      	mov	r6, r0
 8014baa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d06e      	beq.n	8014c8e <_dtoa_r+0x90e>
 8014bb0:	ee18 0a10 	vmov	r0, s16
 8014bb4:	4631      	mov	r1, r6
 8014bb6:	f000 fd37 	bl	8015628 <__mcmp>
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	da67      	bge.n	8014c8e <_dtoa_r+0x90e>
 8014bbe:	9b00      	ldr	r3, [sp, #0]
 8014bc0:	3b01      	subs	r3, #1
 8014bc2:	ee18 1a10 	vmov	r1, s16
 8014bc6:	9300      	str	r3, [sp, #0]
 8014bc8:	220a      	movs	r2, #10
 8014bca:	2300      	movs	r3, #0
 8014bcc:	4620      	mov	r0, r4
 8014bce:	f000 fb0b 	bl	80151e8 <__multadd>
 8014bd2:	9b08      	ldr	r3, [sp, #32]
 8014bd4:	ee08 0a10 	vmov	s16, r0
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	f000 81b1 	beq.w	8014f40 <_dtoa_r+0xbc0>
 8014bde:	2300      	movs	r3, #0
 8014be0:	4639      	mov	r1, r7
 8014be2:	220a      	movs	r2, #10
 8014be4:	4620      	mov	r0, r4
 8014be6:	f000 faff 	bl	80151e8 <__multadd>
 8014bea:	9b02      	ldr	r3, [sp, #8]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	4607      	mov	r7, r0
 8014bf0:	f300 808e 	bgt.w	8014d10 <_dtoa_r+0x990>
 8014bf4:	9b06      	ldr	r3, [sp, #24]
 8014bf6:	2b02      	cmp	r3, #2
 8014bf8:	dc51      	bgt.n	8014c9e <_dtoa_r+0x91e>
 8014bfa:	e089      	b.n	8014d10 <_dtoa_r+0x990>
 8014bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014bfe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014c02:	e74b      	b.n	8014a9c <_dtoa_r+0x71c>
 8014c04:	9b03      	ldr	r3, [sp, #12]
 8014c06:	1e5e      	subs	r6, r3, #1
 8014c08:	9b07      	ldr	r3, [sp, #28]
 8014c0a:	42b3      	cmp	r3, r6
 8014c0c:	bfbf      	itttt	lt
 8014c0e:	9b07      	ldrlt	r3, [sp, #28]
 8014c10:	9607      	strlt	r6, [sp, #28]
 8014c12:	1af2      	sublt	r2, r6, r3
 8014c14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014c16:	bfb6      	itet	lt
 8014c18:	189b      	addlt	r3, r3, r2
 8014c1a:	1b9e      	subge	r6, r3, r6
 8014c1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014c1e:	9b03      	ldr	r3, [sp, #12]
 8014c20:	bfb8      	it	lt
 8014c22:	2600      	movlt	r6, #0
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	bfb7      	itett	lt
 8014c28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014c2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014c30:	1a9d      	sublt	r5, r3, r2
 8014c32:	2300      	movlt	r3, #0
 8014c34:	e734      	b.n	8014aa0 <_dtoa_r+0x720>
 8014c36:	9e07      	ldr	r6, [sp, #28]
 8014c38:	9d04      	ldr	r5, [sp, #16]
 8014c3a:	9f08      	ldr	r7, [sp, #32]
 8014c3c:	e73b      	b.n	8014ab6 <_dtoa_r+0x736>
 8014c3e:	9a07      	ldr	r2, [sp, #28]
 8014c40:	e767      	b.n	8014b12 <_dtoa_r+0x792>
 8014c42:	9b06      	ldr	r3, [sp, #24]
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	dc18      	bgt.n	8014c7a <_dtoa_r+0x8fa>
 8014c48:	f1ba 0f00 	cmp.w	sl, #0
 8014c4c:	d115      	bne.n	8014c7a <_dtoa_r+0x8fa>
 8014c4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014c52:	b993      	cbnz	r3, 8014c7a <_dtoa_r+0x8fa>
 8014c54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014c58:	0d1b      	lsrs	r3, r3, #20
 8014c5a:	051b      	lsls	r3, r3, #20
 8014c5c:	b183      	cbz	r3, 8014c80 <_dtoa_r+0x900>
 8014c5e:	9b04      	ldr	r3, [sp, #16]
 8014c60:	3301      	adds	r3, #1
 8014c62:	9304      	str	r3, [sp, #16]
 8014c64:	9b05      	ldr	r3, [sp, #20]
 8014c66:	3301      	adds	r3, #1
 8014c68:	9305      	str	r3, [sp, #20]
 8014c6a:	f04f 0801 	mov.w	r8, #1
 8014c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	f47f af6a 	bne.w	8014b4a <_dtoa_r+0x7ca>
 8014c76:	2001      	movs	r0, #1
 8014c78:	e76f      	b.n	8014b5a <_dtoa_r+0x7da>
 8014c7a:	f04f 0800 	mov.w	r8, #0
 8014c7e:	e7f6      	b.n	8014c6e <_dtoa_r+0x8ee>
 8014c80:	4698      	mov	r8, r3
 8014c82:	e7f4      	b.n	8014c6e <_dtoa_r+0x8ee>
 8014c84:	f43f af7d 	beq.w	8014b82 <_dtoa_r+0x802>
 8014c88:	4618      	mov	r0, r3
 8014c8a:	301c      	adds	r0, #28
 8014c8c:	e772      	b.n	8014b74 <_dtoa_r+0x7f4>
 8014c8e:	9b03      	ldr	r3, [sp, #12]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	dc37      	bgt.n	8014d04 <_dtoa_r+0x984>
 8014c94:	9b06      	ldr	r3, [sp, #24]
 8014c96:	2b02      	cmp	r3, #2
 8014c98:	dd34      	ble.n	8014d04 <_dtoa_r+0x984>
 8014c9a:	9b03      	ldr	r3, [sp, #12]
 8014c9c:	9302      	str	r3, [sp, #8]
 8014c9e:	9b02      	ldr	r3, [sp, #8]
 8014ca0:	b96b      	cbnz	r3, 8014cbe <_dtoa_r+0x93e>
 8014ca2:	4631      	mov	r1, r6
 8014ca4:	2205      	movs	r2, #5
 8014ca6:	4620      	mov	r0, r4
 8014ca8:	f000 fa9e 	bl	80151e8 <__multadd>
 8014cac:	4601      	mov	r1, r0
 8014cae:	4606      	mov	r6, r0
 8014cb0:	ee18 0a10 	vmov	r0, s16
 8014cb4:	f000 fcb8 	bl	8015628 <__mcmp>
 8014cb8:	2800      	cmp	r0, #0
 8014cba:	f73f adbb 	bgt.w	8014834 <_dtoa_r+0x4b4>
 8014cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014cc0:	9d01      	ldr	r5, [sp, #4]
 8014cc2:	43db      	mvns	r3, r3
 8014cc4:	9300      	str	r3, [sp, #0]
 8014cc6:	f04f 0800 	mov.w	r8, #0
 8014cca:	4631      	mov	r1, r6
 8014ccc:	4620      	mov	r0, r4
 8014cce:	f000 fa69 	bl	80151a4 <_Bfree>
 8014cd2:	2f00      	cmp	r7, #0
 8014cd4:	f43f aea4 	beq.w	8014a20 <_dtoa_r+0x6a0>
 8014cd8:	f1b8 0f00 	cmp.w	r8, #0
 8014cdc:	d005      	beq.n	8014cea <_dtoa_r+0x96a>
 8014cde:	45b8      	cmp	r8, r7
 8014ce0:	d003      	beq.n	8014cea <_dtoa_r+0x96a>
 8014ce2:	4641      	mov	r1, r8
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	f000 fa5d 	bl	80151a4 <_Bfree>
 8014cea:	4639      	mov	r1, r7
 8014cec:	4620      	mov	r0, r4
 8014cee:	f000 fa59 	bl	80151a4 <_Bfree>
 8014cf2:	e695      	b.n	8014a20 <_dtoa_r+0x6a0>
 8014cf4:	2600      	movs	r6, #0
 8014cf6:	4637      	mov	r7, r6
 8014cf8:	e7e1      	b.n	8014cbe <_dtoa_r+0x93e>
 8014cfa:	9700      	str	r7, [sp, #0]
 8014cfc:	4637      	mov	r7, r6
 8014cfe:	e599      	b.n	8014834 <_dtoa_r+0x4b4>
 8014d00:	40240000 	.word	0x40240000
 8014d04:	9b08      	ldr	r3, [sp, #32]
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	f000 80ca 	beq.w	8014ea0 <_dtoa_r+0xb20>
 8014d0c:	9b03      	ldr	r3, [sp, #12]
 8014d0e:	9302      	str	r3, [sp, #8]
 8014d10:	2d00      	cmp	r5, #0
 8014d12:	dd05      	ble.n	8014d20 <_dtoa_r+0x9a0>
 8014d14:	4639      	mov	r1, r7
 8014d16:	462a      	mov	r2, r5
 8014d18:	4620      	mov	r0, r4
 8014d1a:	f000 fc15 	bl	8015548 <__lshift>
 8014d1e:	4607      	mov	r7, r0
 8014d20:	f1b8 0f00 	cmp.w	r8, #0
 8014d24:	d05b      	beq.n	8014dde <_dtoa_r+0xa5e>
 8014d26:	6879      	ldr	r1, [r7, #4]
 8014d28:	4620      	mov	r0, r4
 8014d2a:	f000 f9fb 	bl	8015124 <_Balloc>
 8014d2e:	4605      	mov	r5, r0
 8014d30:	b928      	cbnz	r0, 8014d3e <_dtoa_r+0x9be>
 8014d32:	4b87      	ldr	r3, [pc, #540]	; (8014f50 <_dtoa_r+0xbd0>)
 8014d34:	4602      	mov	r2, r0
 8014d36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014d3a:	f7ff bb3b 	b.w	80143b4 <_dtoa_r+0x34>
 8014d3e:	693a      	ldr	r2, [r7, #16]
 8014d40:	3202      	adds	r2, #2
 8014d42:	0092      	lsls	r2, r2, #2
 8014d44:	f107 010c 	add.w	r1, r7, #12
 8014d48:	300c      	adds	r0, #12
 8014d4a:	f7fe fba7 	bl	801349c <memcpy>
 8014d4e:	2201      	movs	r2, #1
 8014d50:	4629      	mov	r1, r5
 8014d52:	4620      	mov	r0, r4
 8014d54:	f000 fbf8 	bl	8015548 <__lshift>
 8014d58:	9b01      	ldr	r3, [sp, #4]
 8014d5a:	f103 0901 	add.w	r9, r3, #1
 8014d5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014d62:	4413      	add	r3, r2
 8014d64:	9305      	str	r3, [sp, #20]
 8014d66:	f00a 0301 	and.w	r3, sl, #1
 8014d6a:	46b8      	mov	r8, r7
 8014d6c:	9304      	str	r3, [sp, #16]
 8014d6e:	4607      	mov	r7, r0
 8014d70:	4631      	mov	r1, r6
 8014d72:	ee18 0a10 	vmov	r0, s16
 8014d76:	f7ff fa77 	bl	8014268 <quorem>
 8014d7a:	4641      	mov	r1, r8
 8014d7c:	9002      	str	r0, [sp, #8]
 8014d7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014d82:	ee18 0a10 	vmov	r0, s16
 8014d86:	f000 fc4f 	bl	8015628 <__mcmp>
 8014d8a:	463a      	mov	r2, r7
 8014d8c:	9003      	str	r0, [sp, #12]
 8014d8e:	4631      	mov	r1, r6
 8014d90:	4620      	mov	r0, r4
 8014d92:	f000 fc65 	bl	8015660 <__mdiff>
 8014d96:	68c2      	ldr	r2, [r0, #12]
 8014d98:	f109 3bff 	add.w	fp, r9, #4294967295
 8014d9c:	4605      	mov	r5, r0
 8014d9e:	bb02      	cbnz	r2, 8014de2 <_dtoa_r+0xa62>
 8014da0:	4601      	mov	r1, r0
 8014da2:	ee18 0a10 	vmov	r0, s16
 8014da6:	f000 fc3f 	bl	8015628 <__mcmp>
 8014daa:	4602      	mov	r2, r0
 8014dac:	4629      	mov	r1, r5
 8014dae:	4620      	mov	r0, r4
 8014db0:	9207      	str	r2, [sp, #28]
 8014db2:	f000 f9f7 	bl	80151a4 <_Bfree>
 8014db6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014dba:	ea43 0102 	orr.w	r1, r3, r2
 8014dbe:	9b04      	ldr	r3, [sp, #16]
 8014dc0:	430b      	orrs	r3, r1
 8014dc2:	464d      	mov	r5, r9
 8014dc4:	d10f      	bne.n	8014de6 <_dtoa_r+0xa66>
 8014dc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014dca:	d02a      	beq.n	8014e22 <_dtoa_r+0xaa2>
 8014dcc:	9b03      	ldr	r3, [sp, #12]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	dd02      	ble.n	8014dd8 <_dtoa_r+0xa58>
 8014dd2:	9b02      	ldr	r3, [sp, #8]
 8014dd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014dd8:	f88b a000 	strb.w	sl, [fp]
 8014ddc:	e775      	b.n	8014cca <_dtoa_r+0x94a>
 8014dde:	4638      	mov	r0, r7
 8014de0:	e7ba      	b.n	8014d58 <_dtoa_r+0x9d8>
 8014de2:	2201      	movs	r2, #1
 8014de4:	e7e2      	b.n	8014dac <_dtoa_r+0xa2c>
 8014de6:	9b03      	ldr	r3, [sp, #12]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	db04      	blt.n	8014df6 <_dtoa_r+0xa76>
 8014dec:	9906      	ldr	r1, [sp, #24]
 8014dee:	430b      	orrs	r3, r1
 8014df0:	9904      	ldr	r1, [sp, #16]
 8014df2:	430b      	orrs	r3, r1
 8014df4:	d122      	bne.n	8014e3c <_dtoa_r+0xabc>
 8014df6:	2a00      	cmp	r2, #0
 8014df8:	ddee      	ble.n	8014dd8 <_dtoa_r+0xa58>
 8014dfa:	ee18 1a10 	vmov	r1, s16
 8014dfe:	2201      	movs	r2, #1
 8014e00:	4620      	mov	r0, r4
 8014e02:	f000 fba1 	bl	8015548 <__lshift>
 8014e06:	4631      	mov	r1, r6
 8014e08:	ee08 0a10 	vmov	s16, r0
 8014e0c:	f000 fc0c 	bl	8015628 <__mcmp>
 8014e10:	2800      	cmp	r0, #0
 8014e12:	dc03      	bgt.n	8014e1c <_dtoa_r+0xa9c>
 8014e14:	d1e0      	bne.n	8014dd8 <_dtoa_r+0xa58>
 8014e16:	f01a 0f01 	tst.w	sl, #1
 8014e1a:	d0dd      	beq.n	8014dd8 <_dtoa_r+0xa58>
 8014e1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014e20:	d1d7      	bne.n	8014dd2 <_dtoa_r+0xa52>
 8014e22:	2339      	movs	r3, #57	; 0x39
 8014e24:	f88b 3000 	strb.w	r3, [fp]
 8014e28:	462b      	mov	r3, r5
 8014e2a:	461d      	mov	r5, r3
 8014e2c:	3b01      	subs	r3, #1
 8014e2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014e32:	2a39      	cmp	r2, #57	; 0x39
 8014e34:	d071      	beq.n	8014f1a <_dtoa_r+0xb9a>
 8014e36:	3201      	adds	r2, #1
 8014e38:	701a      	strb	r2, [r3, #0]
 8014e3a:	e746      	b.n	8014cca <_dtoa_r+0x94a>
 8014e3c:	2a00      	cmp	r2, #0
 8014e3e:	dd07      	ble.n	8014e50 <_dtoa_r+0xad0>
 8014e40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014e44:	d0ed      	beq.n	8014e22 <_dtoa_r+0xaa2>
 8014e46:	f10a 0301 	add.w	r3, sl, #1
 8014e4a:	f88b 3000 	strb.w	r3, [fp]
 8014e4e:	e73c      	b.n	8014cca <_dtoa_r+0x94a>
 8014e50:	9b05      	ldr	r3, [sp, #20]
 8014e52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014e56:	4599      	cmp	r9, r3
 8014e58:	d047      	beq.n	8014eea <_dtoa_r+0xb6a>
 8014e5a:	ee18 1a10 	vmov	r1, s16
 8014e5e:	2300      	movs	r3, #0
 8014e60:	220a      	movs	r2, #10
 8014e62:	4620      	mov	r0, r4
 8014e64:	f000 f9c0 	bl	80151e8 <__multadd>
 8014e68:	45b8      	cmp	r8, r7
 8014e6a:	ee08 0a10 	vmov	s16, r0
 8014e6e:	f04f 0300 	mov.w	r3, #0
 8014e72:	f04f 020a 	mov.w	r2, #10
 8014e76:	4641      	mov	r1, r8
 8014e78:	4620      	mov	r0, r4
 8014e7a:	d106      	bne.n	8014e8a <_dtoa_r+0xb0a>
 8014e7c:	f000 f9b4 	bl	80151e8 <__multadd>
 8014e80:	4680      	mov	r8, r0
 8014e82:	4607      	mov	r7, r0
 8014e84:	f109 0901 	add.w	r9, r9, #1
 8014e88:	e772      	b.n	8014d70 <_dtoa_r+0x9f0>
 8014e8a:	f000 f9ad 	bl	80151e8 <__multadd>
 8014e8e:	4639      	mov	r1, r7
 8014e90:	4680      	mov	r8, r0
 8014e92:	2300      	movs	r3, #0
 8014e94:	220a      	movs	r2, #10
 8014e96:	4620      	mov	r0, r4
 8014e98:	f000 f9a6 	bl	80151e8 <__multadd>
 8014e9c:	4607      	mov	r7, r0
 8014e9e:	e7f1      	b.n	8014e84 <_dtoa_r+0xb04>
 8014ea0:	9b03      	ldr	r3, [sp, #12]
 8014ea2:	9302      	str	r3, [sp, #8]
 8014ea4:	9d01      	ldr	r5, [sp, #4]
 8014ea6:	ee18 0a10 	vmov	r0, s16
 8014eaa:	4631      	mov	r1, r6
 8014eac:	f7ff f9dc 	bl	8014268 <quorem>
 8014eb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014eb4:	9b01      	ldr	r3, [sp, #4]
 8014eb6:	f805 ab01 	strb.w	sl, [r5], #1
 8014eba:	1aea      	subs	r2, r5, r3
 8014ebc:	9b02      	ldr	r3, [sp, #8]
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	dd09      	ble.n	8014ed6 <_dtoa_r+0xb56>
 8014ec2:	ee18 1a10 	vmov	r1, s16
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	220a      	movs	r2, #10
 8014eca:	4620      	mov	r0, r4
 8014ecc:	f000 f98c 	bl	80151e8 <__multadd>
 8014ed0:	ee08 0a10 	vmov	s16, r0
 8014ed4:	e7e7      	b.n	8014ea6 <_dtoa_r+0xb26>
 8014ed6:	9b02      	ldr	r3, [sp, #8]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	bfc8      	it	gt
 8014edc:	461d      	movgt	r5, r3
 8014ede:	9b01      	ldr	r3, [sp, #4]
 8014ee0:	bfd8      	it	le
 8014ee2:	2501      	movle	r5, #1
 8014ee4:	441d      	add	r5, r3
 8014ee6:	f04f 0800 	mov.w	r8, #0
 8014eea:	ee18 1a10 	vmov	r1, s16
 8014eee:	2201      	movs	r2, #1
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	f000 fb29 	bl	8015548 <__lshift>
 8014ef6:	4631      	mov	r1, r6
 8014ef8:	ee08 0a10 	vmov	s16, r0
 8014efc:	f000 fb94 	bl	8015628 <__mcmp>
 8014f00:	2800      	cmp	r0, #0
 8014f02:	dc91      	bgt.n	8014e28 <_dtoa_r+0xaa8>
 8014f04:	d102      	bne.n	8014f0c <_dtoa_r+0xb8c>
 8014f06:	f01a 0f01 	tst.w	sl, #1
 8014f0a:	d18d      	bne.n	8014e28 <_dtoa_r+0xaa8>
 8014f0c:	462b      	mov	r3, r5
 8014f0e:	461d      	mov	r5, r3
 8014f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f14:	2a30      	cmp	r2, #48	; 0x30
 8014f16:	d0fa      	beq.n	8014f0e <_dtoa_r+0xb8e>
 8014f18:	e6d7      	b.n	8014cca <_dtoa_r+0x94a>
 8014f1a:	9a01      	ldr	r2, [sp, #4]
 8014f1c:	429a      	cmp	r2, r3
 8014f1e:	d184      	bne.n	8014e2a <_dtoa_r+0xaaa>
 8014f20:	9b00      	ldr	r3, [sp, #0]
 8014f22:	3301      	adds	r3, #1
 8014f24:	9300      	str	r3, [sp, #0]
 8014f26:	2331      	movs	r3, #49	; 0x31
 8014f28:	7013      	strb	r3, [r2, #0]
 8014f2a:	e6ce      	b.n	8014cca <_dtoa_r+0x94a>
 8014f2c:	4b09      	ldr	r3, [pc, #36]	; (8014f54 <_dtoa_r+0xbd4>)
 8014f2e:	f7ff ba95 	b.w	801445c <_dtoa_r+0xdc>
 8014f32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	f47f aa6e 	bne.w	8014416 <_dtoa_r+0x96>
 8014f3a:	4b07      	ldr	r3, [pc, #28]	; (8014f58 <_dtoa_r+0xbd8>)
 8014f3c:	f7ff ba8e 	b.w	801445c <_dtoa_r+0xdc>
 8014f40:	9b02      	ldr	r3, [sp, #8]
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	dcae      	bgt.n	8014ea4 <_dtoa_r+0xb24>
 8014f46:	9b06      	ldr	r3, [sp, #24]
 8014f48:	2b02      	cmp	r3, #2
 8014f4a:	f73f aea8 	bgt.w	8014c9e <_dtoa_r+0x91e>
 8014f4e:	e7a9      	b.n	8014ea4 <_dtoa_r+0xb24>
 8014f50:	0801642f 	.word	0x0801642f
 8014f54:	0801638c 	.word	0x0801638c
 8014f58:	080163b0 	.word	0x080163b0

08014f5c <__sflush_r>:
 8014f5c:	898a      	ldrh	r2, [r1, #12]
 8014f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f62:	4605      	mov	r5, r0
 8014f64:	0710      	lsls	r0, r2, #28
 8014f66:	460c      	mov	r4, r1
 8014f68:	d458      	bmi.n	801501c <__sflush_r+0xc0>
 8014f6a:	684b      	ldr	r3, [r1, #4]
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	dc05      	bgt.n	8014f7c <__sflush_r+0x20>
 8014f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	dc02      	bgt.n	8014f7c <__sflush_r+0x20>
 8014f76:	2000      	movs	r0, #0
 8014f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f7e:	2e00      	cmp	r6, #0
 8014f80:	d0f9      	beq.n	8014f76 <__sflush_r+0x1a>
 8014f82:	2300      	movs	r3, #0
 8014f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f88:	682f      	ldr	r7, [r5, #0]
 8014f8a:	602b      	str	r3, [r5, #0]
 8014f8c:	d032      	beq.n	8014ff4 <__sflush_r+0x98>
 8014f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014f90:	89a3      	ldrh	r3, [r4, #12]
 8014f92:	075a      	lsls	r2, r3, #29
 8014f94:	d505      	bpl.n	8014fa2 <__sflush_r+0x46>
 8014f96:	6863      	ldr	r3, [r4, #4]
 8014f98:	1ac0      	subs	r0, r0, r3
 8014f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014f9c:	b10b      	cbz	r3, 8014fa2 <__sflush_r+0x46>
 8014f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014fa0:	1ac0      	subs	r0, r0, r3
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	4602      	mov	r2, r0
 8014fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014fa8:	6a21      	ldr	r1, [r4, #32]
 8014faa:	4628      	mov	r0, r5
 8014fac:	47b0      	blx	r6
 8014fae:	1c43      	adds	r3, r0, #1
 8014fb0:	89a3      	ldrh	r3, [r4, #12]
 8014fb2:	d106      	bne.n	8014fc2 <__sflush_r+0x66>
 8014fb4:	6829      	ldr	r1, [r5, #0]
 8014fb6:	291d      	cmp	r1, #29
 8014fb8:	d82c      	bhi.n	8015014 <__sflush_r+0xb8>
 8014fba:	4a2a      	ldr	r2, [pc, #168]	; (8015064 <__sflush_r+0x108>)
 8014fbc:	40ca      	lsrs	r2, r1
 8014fbe:	07d6      	lsls	r6, r2, #31
 8014fc0:	d528      	bpl.n	8015014 <__sflush_r+0xb8>
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	6062      	str	r2, [r4, #4]
 8014fc6:	04d9      	lsls	r1, r3, #19
 8014fc8:	6922      	ldr	r2, [r4, #16]
 8014fca:	6022      	str	r2, [r4, #0]
 8014fcc:	d504      	bpl.n	8014fd8 <__sflush_r+0x7c>
 8014fce:	1c42      	adds	r2, r0, #1
 8014fd0:	d101      	bne.n	8014fd6 <__sflush_r+0x7a>
 8014fd2:	682b      	ldr	r3, [r5, #0]
 8014fd4:	b903      	cbnz	r3, 8014fd8 <__sflush_r+0x7c>
 8014fd6:	6560      	str	r0, [r4, #84]	; 0x54
 8014fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014fda:	602f      	str	r7, [r5, #0]
 8014fdc:	2900      	cmp	r1, #0
 8014fde:	d0ca      	beq.n	8014f76 <__sflush_r+0x1a>
 8014fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014fe4:	4299      	cmp	r1, r3
 8014fe6:	d002      	beq.n	8014fee <__sflush_r+0x92>
 8014fe8:	4628      	mov	r0, r5
 8014fea:	f7fe fa6d 	bl	80134c8 <_free_r>
 8014fee:	2000      	movs	r0, #0
 8014ff0:	6360      	str	r0, [r4, #52]	; 0x34
 8014ff2:	e7c1      	b.n	8014f78 <__sflush_r+0x1c>
 8014ff4:	6a21      	ldr	r1, [r4, #32]
 8014ff6:	2301      	movs	r3, #1
 8014ff8:	4628      	mov	r0, r5
 8014ffa:	47b0      	blx	r6
 8014ffc:	1c41      	adds	r1, r0, #1
 8014ffe:	d1c7      	bne.n	8014f90 <__sflush_r+0x34>
 8015000:	682b      	ldr	r3, [r5, #0]
 8015002:	2b00      	cmp	r3, #0
 8015004:	d0c4      	beq.n	8014f90 <__sflush_r+0x34>
 8015006:	2b1d      	cmp	r3, #29
 8015008:	d001      	beq.n	801500e <__sflush_r+0xb2>
 801500a:	2b16      	cmp	r3, #22
 801500c:	d101      	bne.n	8015012 <__sflush_r+0xb6>
 801500e:	602f      	str	r7, [r5, #0]
 8015010:	e7b1      	b.n	8014f76 <__sflush_r+0x1a>
 8015012:	89a3      	ldrh	r3, [r4, #12]
 8015014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015018:	81a3      	strh	r3, [r4, #12]
 801501a:	e7ad      	b.n	8014f78 <__sflush_r+0x1c>
 801501c:	690f      	ldr	r7, [r1, #16]
 801501e:	2f00      	cmp	r7, #0
 8015020:	d0a9      	beq.n	8014f76 <__sflush_r+0x1a>
 8015022:	0793      	lsls	r3, r2, #30
 8015024:	680e      	ldr	r6, [r1, #0]
 8015026:	bf08      	it	eq
 8015028:	694b      	ldreq	r3, [r1, #20]
 801502a:	600f      	str	r7, [r1, #0]
 801502c:	bf18      	it	ne
 801502e:	2300      	movne	r3, #0
 8015030:	eba6 0807 	sub.w	r8, r6, r7
 8015034:	608b      	str	r3, [r1, #8]
 8015036:	f1b8 0f00 	cmp.w	r8, #0
 801503a:	dd9c      	ble.n	8014f76 <__sflush_r+0x1a>
 801503c:	6a21      	ldr	r1, [r4, #32]
 801503e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015040:	4643      	mov	r3, r8
 8015042:	463a      	mov	r2, r7
 8015044:	4628      	mov	r0, r5
 8015046:	47b0      	blx	r6
 8015048:	2800      	cmp	r0, #0
 801504a:	dc06      	bgt.n	801505a <__sflush_r+0xfe>
 801504c:	89a3      	ldrh	r3, [r4, #12]
 801504e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015052:	81a3      	strh	r3, [r4, #12]
 8015054:	f04f 30ff 	mov.w	r0, #4294967295
 8015058:	e78e      	b.n	8014f78 <__sflush_r+0x1c>
 801505a:	4407      	add	r7, r0
 801505c:	eba8 0800 	sub.w	r8, r8, r0
 8015060:	e7e9      	b.n	8015036 <__sflush_r+0xda>
 8015062:	bf00      	nop
 8015064:	20400001 	.word	0x20400001

08015068 <_fflush_r>:
 8015068:	b538      	push	{r3, r4, r5, lr}
 801506a:	690b      	ldr	r3, [r1, #16]
 801506c:	4605      	mov	r5, r0
 801506e:	460c      	mov	r4, r1
 8015070:	b913      	cbnz	r3, 8015078 <_fflush_r+0x10>
 8015072:	2500      	movs	r5, #0
 8015074:	4628      	mov	r0, r5
 8015076:	bd38      	pop	{r3, r4, r5, pc}
 8015078:	b118      	cbz	r0, 8015082 <_fflush_r+0x1a>
 801507a:	6983      	ldr	r3, [r0, #24]
 801507c:	b90b      	cbnz	r3, 8015082 <_fflush_r+0x1a>
 801507e:	f7fe f937 	bl	80132f0 <__sinit>
 8015082:	4b14      	ldr	r3, [pc, #80]	; (80150d4 <_fflush_r+0x6c>)
 8015084:	429c      	cmp	r4, r3
 8015086:	d11b      	bne.n	80150c0 <_fflush_r+0x58>
 8015088:	686c      	ldr	r4, [r5, #4]
 801508a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d0ef      	beq.n	8015072 <_fflush_r+0xa>
 8015092:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015094:	07d0      	lsls	r0, r2, #31
 8015096:	d404      	bmi.n	80150a2 <_fflush_r+0x3a>
 8015098:	0599      	lsls	r1, r3, #22
 801509a:	d402      	bmi.n	80150a2 <_fflush_r+0x3a>
 801509c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801509e:	f7fe f9ea 	bl	8013476 <__retarget_lock_acquire_recursive>
 80150a2:	4628      	mov	r0, r5
 80150a4:	4621      	mov	r1, r4
 80150a6:	f7ff ff59 	bl	8014f5c <__sflush_r>
 80150aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150ac:	07da      	lsls	r2, r3, #31
 80150ae:	4605      	mov	r5, r0
 80150b0:	d4e0      	bmi.n	8015074 <_fflush_r+0xc>
 80150b2:	89a3      	ldrh	r3, [r4, #12]
 80150b4:	059b      	lsls	r3, r3, #22
 80150b6:	d4dd      	bmi.n	8015074 <_fflush_r+0xc>
 80150b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150ba:	f7fe f9de 	bl	801347a <__retarget_lock_release_recursive>
 80150be:	e7d9      	b.n	8015074 <_fflush_r+0xc>
 80150c0:	4b05      	ldr	r3, [pc, #20]	; (80150d8 <_fflush_r+0x70>)
 80150c2:	429c      	cmp	r4, r3
 80150c4:	d101      	bne.n	80150ca <_fflush_r+0x62>
 80150c6:	68ac      	ldr	r4, [r5, #8]
 80150c8:	e7df      	b.n	801508a <_fflush_r+0x22>
 80150ca:	4b04      	ldr	r3, [pc, #16]	; (80150dc <_fflush_r+0x74>)
 80150cc:	429c      	cmp	r4, r3
 80150ce:	bf08      	it	eq
 80150d0:	68ec      	ldreq	r4, [r5, #12]
 80150d2:	e7da      	b.n	801508a <_fflush_r+0x22>
 80150d4:	08016338 	.word	0x08016338
 80150d8:	08016358 	.word	0x08016358
 80150dc:	08016318 	.word	0x08016318

080150e0 <_localeconv_r>:
 80150e0:	4800      	ldr	r0, [pc, #0]	; (80150e4 <_localeconv_r+0x4>)
 80150e2:	4770      	bx	lr
 80150e4:	20000178 	.word	0x20000178

080150e8 <_lseek_r>:
 80150e8:	b538      	push	{r3, r4, r5, lr}
 80150ea:	4d07      	ldr	r5, [pc, #28]	; (8015108 <_lseek_r+0x20>)
 80150ec:	4604      	mov	r4, r0
 80150ee:	4608      	mov	r0, r1
 80150f0:	4611      	mov	r1, r2
 80150f2:	2200      	movs	r2, #0
 80150f4:	602a      	str	r2, [r5, #0]
 80150f6:	461a      	mov	r2, r3
 80150f8:	f7f2 fd82 	bl	8007c00 <_lseek>
 80150fc:	1c43      	adds	r3, r0, #1
 80150fe:	d102      	bne.n	8015106 <_lseek_r+0x1e>
 8015100:	682b      	ldr	r3, [r5, #0]
 8015102:	b103      	cbz	r3, 8015106 <_lseek_r+0x1e>
 8015104:	6023      	str	r3, [r4, #0]
 8015106:	bd38      	pop	{r3, r4, r5, pc}
 8015108:	2000a3b4 	.word	0x2000a3b4

0801510c <__malloc_lock>:
 801510c:	4801      	ldr	r0, [pc, #4]	; (8015114 <__malloc_lock+0x8>)
 801510e:	f7fe b9b2 	b.w	8013476 <__retarget_lock_acquire_recursive>
 8015112:	bf00      	nop
 8015114:	2000a3a9 	.word	0x2000a3a9

08015118 <__malloc_unlock>:
 8015118:	4801      	ldr	r0, [pc, #4]	; (8015120 <__malloc_unlock+0x8>)
 801511a:	f7fe b9ae 	b.w	801347a <__retarget_lock_release_recursive>
 801511e:	bf00      	nop
 8015120:	2000a3a9 	.word	0x2000a3a9

08015124 <_Balloc>:
 8015124:	b570      	push	{r4, r5, r6, lr}
 8015126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015128:	4604      	mov	r4, r0
 801512a:	460d      	mov	r5, r1
 801512c:	b976      	cbnz	r6, 801514c <_Balloc+0x28>
 801512e:	2010      	movs	r0, #16
 8015130:	f7fe f9a4 	bl	801347c <malloc>
 8015134:	4602      	mov	r2, r0
 8015136:	6260      	str	r0, [r4, #36]	; 0x24
 8015138:	b920      	cbnz	r0, 8015144 <_Balloc+0x20>
 801513a:	4b18      	ldr	r3, [pc, #96]	; (801519c <_Balloc+0x78>)
 801513c:	4818      	ldr	r0, [pc, #96]	; (80151a0 <_Balloc+0x7c>)
 801513e:	2166      	movs	r1, #102	; 0x66
 8015140:	f000 fb9c 	bl	801587c <__assert_func>
 8015144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015148:	6006      	str	r6, [r0, #0]
 801514a:	60c6      	str	r6, [r0, #12]
 801514c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801514e:	68f3      	ldr	r3, [r6, #12]
 8015150:	b183      	cbz	r3, 8015174 <_Balloc+0x50>
 8015152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015154:	68db      	ldr	r3, [r3, #12]
 8015156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801515a:	b9b8      	cbnz	r0, 801518c <_Balloc+0x68>
 801515c:	2101      	movs	r1, #1
 801515e:	fa01 f605 	lsl.w	r6, r1, r5
 8015162:	1d72      	adds	r2, r6, #5
 8015164:	0092      	lsls	r2, r2, #2
 8015166:	4620      	mov	r0, r4
 8015168:	f000 fb60 	bl	801582c <_calloc_r>
 801516c:	b160      	cbz	r0, 8015188 <_Balloc+0x64>
 801516e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015172:	e00e      	b.n	8015192 <_Balloc+0x6e>
 8015174:	2221      	movs	r2, #33	; 0x21
 8015176:	2104      	movs	r1, #4
 8015178:	4620      	mov	r0, r4
 801517a:	f000 fb57 	bl	801582c <_calloc_r>
 801517e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015180:	60f0      	str	r0, [r6, #12]
 8015182:	68db      	ldr	r3, [r3, #12]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d1e4      	bne.n	8015152 <_Balloc+0x2e>
 8015188:	2000      	movs	r0, #0
 801518a:	bd70      	pop	{r4, r5, r6, pc}
 801518c:	6802      	ldr	r2, [r0, #0]
 801518e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015192:	2300      	movs	r3, #0
 8015194:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015198:	e7f7      	b.n	801518a <_Balloc+0x66>
 801519a:	bf00      	nop
 801519c:	080163bd 	.word	0x080163bd
 80151a0:	08016440 	.word	0x08016440

080151a4 <_Bfree>:
 80151a4:	b570      	push	{r4, r5, r6, lr}
 80151a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80151a8:	4605      	mov	r5, r0
 80151aa:	460c      	mov	r4, r1
 80151ac:	b976      	cbnz	r6, 80151cc <_Bfree+0x28>
 80151ae:	2010      	movs	r0, #16
 80151b0:	f7fe f964 	bl	801347c <malloc>
 80151b4:	4602      	mov	r2, r0
 80151b6:	6268      	str	r0, [r5, #36]	; 0x24
 80151b8:	b920      	cbnz	r0, 80151c4 <_Bfree+0x20>
 80151ba:	4b09      	ldr	r3, [pc, #36]	; (80151e0 <_Bfree+0x3c>)
 80151bc:	4809      	ldr	r0, [pc, #36]	; (80151e4 <_Bfree+0x40>)
 80151be:	218a      	movs	r1, #138	; 0x8a
 80151c0:	f000 fb5c 	bl	801587c <__assert_func>
 80151c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80151c8:	6006      	str	r6, [r0, #0]
 80151ca:	60c6      	str	r6, [r0, #12]
 80151cc:	b13c      	cbz	r4, 80151de <_Bfree+0x3a>
 80151ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80151d0:	6862      	ldr	r2, [r4, #4]
 80151d2:	68db      	ldr	r3, [r3, #12]
 80151d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80151d8:	6021      	str	r1, [r4, #0]
 80151da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80151de:	bd70      	pop	{r4, r5, r6, pc}
 80151e0:	080163bd 	.word	0x080163bd
 80151e4:	08016440 	.word	0x08016440

080151e8 <__multadd>:
 80151e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151ec:	690d      	ldr	r5, [r1, #16]
 80151ee:	4607      	mov	r7, r0
 80151f0:	460c      	mov	r4, r1
 80151f2:	461e      	mov	r6, r3
 80151f4:	f101 0c14 	add.w	ip, r1, #20
 80151f8:	2000      	movs	r0, #0
 80151fa:	f8dc 3000 	ldr.w	r3, [ip]
 80151fe:	b299      	uxth	r1, r3
 8015200:	fb02 6101 	mla	r1, r2, r1, r6
 8015204:	0c1e      	lsrs	r6, r3, #16
 8015206:	0c0b      	lsrs	r3, r1, #16
 8015208:	fb02 3306 	mla	r3, r2, r6, r3
 801520c:	b289      	uxth	r1, r1
 801520e:	3001      	adds	r0, #1
 8015210:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015214:	4285      	cmp	r5, r0
 8015216:	f84c 1b04 	str.w	r1, [ip], #4
 801521a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801521e:	dcec      	bgt.n	80151fa <__multadd+0x12>
 8015220:	b30e      	cbz	r6, 8015266 <__multadd+0x7e>
 8015222:	68a3      	ldr	r3, [r4, #8]
 8015224:	42ab      	cmp	r3, r5
 8015226:	dc19      	bgt.n	801525c <__multadd+0x74>
 8015228:	6861      	ldr	r1, [r4, #4]
 801522a:	4638      	mov	r0, r7
 801522c:	3101      	adds	r1, #1
 801522e:	f7ff ff79 	bl	8015124 <_Balloc>
 8015232:	4680      	mov	r8, r0
 8015234:	b928      	cbnz	r0, 8015242 <__multadd+0x5a>
 8015236:	4602      	mov	r2, r0
 8015238:	4b0c      	ldr	r3, [pc, #48]	; (801526c <__multadd+0x84>)
 801523a:	480d      	ldr	r0, [pc, #52]	; (8015270 <__multadd+0x88>)
 801523c:	21b5      	movs	r1, #181	; 0xb5
 801523e:	f000 fb1d 	bl	801587c <__assert_func>
 8015242:	6922      	ldr	r2, [r4, #16]
 8015244:	3202      	adds	r2, #2
 8015246:	f104 010c 	add.w	r1, r4, #12
 801524a:	0092      	lsls	r2, r2, #2
 801524c:	300c      	adds	r0, #12
 801524e:	f7fe f925 	bl	801349c <memcpy>
 8015252:	4621      	mov	r1, r4
 8015254:	4638      	mov	r0, r7
 8015256:	f7ff ffa5 	bl	80151a4 <_Bfree>
 801525a:	4644      	mov	r4, r8
 801525c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015260:	3501      	adds	r5, #1
 8015262:	615e      	str	r6, [r3, #20]
 8015264:	6125      	str	r5, [r4, #16]
 8015266:	4620      	mov	r0, r4
 8015268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801526c:	0801642f 	.word	0x0801642f
 8015270:	08016440 	.word	0x08016440

08015274 <__hi0bits>:
 8015274:	0c03      	lsrs	r3, r0, #16
 8015276:	041b      	lsls	r3, r3, #16
 8015278:	b9d3      	cbnz	r3, 80152b0 <__hi0bits+0x3c>
 801527a:	0400      	lsls	r0, r0, #16
 801527c:	2310      	movs	r3, #16
 801527e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015282:	bf04      	itt	eq
 8015284:	0200      	lsleq	r0, r0, #8
 8015286:	3308      	addeq	r3, #8
 8015288:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801528c:	bf04      	itt	eq
 801528e:	0100      	lsleq	r0, r0, #4
 8015290:	3304      	addeq	r3, #4
 8015292:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015296:	bf04      	itt	eq
 8015298:	0080      	lsleq	r0, r0, #2
 801529a:	3302      	addeq	r3, #2
 801529c:	2800      	cmp	r0, #0
 801529e:	db05      	blt.n	80152ac <__hi0bits+0x38>
 80152a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80152a4:	f103 0301 	add.w	r3, r3, #1
 80152a8:	bf08      	it	eq
 80152aa:	2320      	moveq	r3, #32
 80152ac:	4618      	mov	r0, r3
 80152ae:	4770      	bx	lr
 80152b0:	2300      	movs	r3, #0
 80152b2:	e7e4      	b.n	801527e <__hi0bits+0xa>

080152b4 <__lo0bits>:
 80152b4:	6803      	ldr	r3, [r0, #0]
 80152b6:	f013 0207 	ands.w	r2, r3, #7
 80152ba:	4601      	mov	r1, r0
 80152bc:	d00b      	beq.n	80152d6 <__lo0bits+0x22>
 80152be:	07da      	lsls	r2, r3, #31
 80152c0:	d423      	bmi.n	801530a <__lo0bits+0x56>
 80152c2:	0798      	lsls	r0, r3, #30
 80152c4:	bf49      	itett	mi
 80152c6:	085b      	lsrmi	r3, r3, #1
 80152c8:	089b      	lsrpl	r3, r3, #2
 80152ca:	2001      	movmi	r0, #1
 80152cc:	600b      	strmi	r3, [r1, #0]
 80152ce:	bf5c      	itt	pl
 80152d0:	600b      	strpl	r3, [r1, #0]
 80152d2:	2002      	movpl	r0, #2
 80152d4:	4770      	bx	lr
 80152d6:	b298      	uxth	r0, r3
 80152d8:	b9a8      	cbnz	r0, 8015306 <__lo0bits+0x52>
 80152da:	0c1b      	lsrs	r3, r3, #16
 80152dc:	2010      	movs	r0, #16
 80152de:	b2da      	uxtb	r2, r3
 80152e0:	b90a      	cbnz	r2, 80152e6 <__lo0bits+0x32>
 80152e2:	3008      	adds	r0, #8
 80152e4:	0a1b      	lsrs	r3, r3, #8
 80152e6:	071a      	lsls	r2, r3, #28
 80152e8:	bf04      	itt	eq
 80152ea:	091b      	lsreq	r3, r3, #4
 80152ec:	3004      	addeq	r0, #4
 80152ee:	079a      	lsls	r2, r3, #30
 80152f0:	bf04      	itt	eq
 80152f2:	089b      	lsreq	r3, r3, #2
 80152f4:	3002      	addeq	r0, #2
 80152f6:	07da      	lsls	r2, r3, #31
 80152f8:	d403      	bmi.n	8015302 <__lo0bits+0x4e>
 80152fa:	085b      	lsrs	r3, r3, #1
 80152fc:	f100 0001 	add.w	r0, r0, #1
 8015300:	d005      	beq.n	801530e <__lo0bits+0x5a>
 8015302:	600b      	str	r3, [r1, #0]
 8015304:	4770      	bx	lr
 8015306:	4610      	mov	r0, r2
 8015308:	e7e9      	b.n	80152de <__lo0bits+0x2a>
 801530a:	2000      	movs	r0, #0
 801530c:	4770      	bx	lr
 801530e:	2020      	movs	r0, #32
 8015310:	4770      	bx	lr
	...

08015314 <__i2b>:
 8015314:	b510      	push	{r4, lr}
 8015316:	460c      	mov	r4, r1
 8015318:	2101      	movs	r1, #1
 801531a:	f7ff ff03 	bl	8015124 <_Balloc>
 801531e:	4602      	mov	r2, r0
 8015320:	b928      	cbnz	r0, 801532e <__i2b+0x1a>
 8015322:	4b05      	ldr	r3, [pc, #20]	; (8015338 <__i2b+0x24>)
 8015324:	4805      	ldr	r0, [pc, #20]	; (801533c <__i2b+0x28>)
 8015326:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801532a:	f000 faa7 	bl	801587c <__assert_func>
 801532e:	2301      	movs	r3, #1
 8015330:	6144      	str	r4, [r0, #20]
 8015332:	6103      	str	r3, [r0, #16]
 8015334:	bd10      	pop	{r4, pc}
 8015336:	bf00      	nop
 8015338:	0801642f 	.word	0x0801642f
 801533c:	08016440 	.word	0x08016440

08015340 <__multiply>:
 8015340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015344:	4691      	mov	r9, r2
 8015346:	690a      	ldr	r2, [r1, #16]
 8015348:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801534c:	429a      	cmp	r2, r3
 801534e:	bfb8      	it	lt
 8015350:	460b      	movlt	r3, r1
 8015352:	460c      	mov	r4, r1
 8015354:	bfbc      	itt	lt
 8015356:	464c      	movlt	r4, r9
 8015358:	4699      	movlt	r9, r3
 801535a:	6927      	ldr	r7, [r4, #16]
 801535c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015360:	68a3      	ldr	r3, [r4, #8]
 8015362:	6861      	ldr	r1, [r4, #4]
 8015364:	eb07 060a 	add.w	r6, r7, sl
 8015368:	42b3      	cmp	r3, r6
 801536a:	b085      	sub	sp, #20
 801536c:	bfb8      	it	lt
 801536e:	3101      	addlt	r1, #1
 8015370:	f7ff fed8 	bl	8015124 <_Balloc>
 8015374:	b930      	cbnz	r0, 8015384 <__multiply+0x44>
 8015376:	4602      	mov	r2, r0
 8015378:	4b44      	ldr	r3, [pc, #272]	; (801548c <__multiply+0x14c>)
 801537a:	4845      	ldr	r0, [pc, #276]	; (8015490 <__multiply+0x150>)
 801537c:	f240 115d 	movw	r1, #349	; 0x15d
 8015380:	f000 fa7c 	bl	801587c <__assert_func>
 8015384:	f100 0514 	add.w	r5, r0, #20
 8015388:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801538c:	462b      	mov	r3, r5
 801538e:	2200      	movs	r2, #0
 8015390:	4543      	cmp	r3, r8
 8015392:	d321      	bcc.n	80153d8 <__multiply+0x98>
 8015394:	f104 0314 	add.w	r3, r4, #20
 8015398:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801539c:	f109 0314 	add.w	r3, r9, #20
 80153a0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80153a4:	9202      	str	r2, [sp, #8]
 80153a6:	1b3a      	subs	r2, r7, r4
 80153a8:	3a15      	subs	r2, #21
 80153aa:	f022 0203 	bic.w	r2, r2, #3
 80153ae:	3204      	adds	r2, #4
 80153b0:	f104 0115 	add.w	r1, r4, #21
 80153b4:	428f      	cmp	r7, r1
 80153b6:	bf38      	it	cc
 80153b8:	2204      	movcc	r2, #4
 80153ba:	9201      	str	r2, [sp, #4]
 80153bc:	9a02      	ldr	r2, [sp, #8]
 80153be:	9303      	str	r3, [sp, #12]
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d80c      	bhi.n	80153de <__multiply+0x9e>
 80153c4:	2e00      	cmp	r6, #0
 80153c6:	dd03      	ble.n	80153d0 <__multiply+0x90>
 80153c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d05a      	beq.n	8015486 <__multiply+0x146>
 80153d0:	6106      	str	r6, [r0, #16]
 80153d2:	b005      	add	sp, #20
 80153d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153d8:	f843 2b04 	str.w	r2, [r3], #4
 80153dc:	e7d8      	b.n	8015390 <__multiply+0x50>
 80153de:	f8b3 a000 	ldrh.w	sl, [r3]
 80153e2:	f1ba 0f00 	cmp.w	sl, #0
 80153e6:	d024      	beq.n	8015432 <__multiply+0xf2>
 80153e8:	f104 0e14 	add.w	lr, r4, #20
 80153ec:	46a9      	mov	r9, r5
 80153ee:	f04f 0c00 	mov.w	ip, #0
 80153f2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80153f6:	f8d9 1000 	ldr.w	r1, [r9]
 80153fa:	fa1f fb82 	uxth.w	fp, r2
 80153fe:	b289      	uxth	r1, r1
 8015400:	fb0a 110b 	mla	r1, sl, fp, r1
 8015404:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015408:	f8d9 2000 	ldr.w	r2, [r9]
 801540c:	4461      	add	r1, ip
 801540e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015412:	fb0a c20b 	mla	r2, sl, fp, ip
 8015416:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801541a:	b289      	uxth	r1, r1
 801541c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015420:	4577      	cmp	r7, lr
 8015422:	f849 1b04 	str.w	r1, [r9], #4
 8015426:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801542a:	d8e2      	bhi.n	80153f2 <__multiply+0xb2>
 801542c:	9a01      	ldr	r2, [sp, #4]
 801542e:	f845 c002 	str.w	ip, [r5, r2]
 8015432:	9a03      	ldr	r2, [sp, #12]
 8015434:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015438:	3304      	adds	r3, #4
 801543a:	f1b9 0f00 	cmp.w	r9, #0
 801543e:	d020      	beq.n	8015482 <__multiply+0x142>
 8015440:	6829      	ldr	r1, [r5, #0]
 8015442:	f104 0c14 	add.w	ip, r4, #20
 8015446:	46ae      	mov	lr, r5
 8015448:	f04f 0a00 	mov.w	sl, #0
 801544c:	f8bc b000 	ldrh.w	fp, [ip]
 8015450:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015454:	fb09 220b 	mla	r2, r9, fp, r2
 8015458:	4492      	add	sl, r2
 801545a:	b289      	uxth	r1, r1
 801545c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015460:	f84e 1b04 	str.w	r1, [lr], #4
 8015464:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015468:	f8be 1000 	ldrh.w	r1, [lr]
 801546c:	0c12      	lsrs	r2, r2, #16
 801546e:	fb09 1102 	mla	r1, r9, r2, r1
 8015472:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015476:	4567      	cmp	r7, ip
 8015478:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801547c:	d8e6      	bhi.n	801544c <__multiply+0x10c>
 801547e:	9a01      	ldr	r2, [sp, #4]
 8015480:	50a9      	str	r1, [r5, r2]
 8015482:	3504      	adds	r5, #4
 8015484:	e79a      	b.n	80153bc <__multiply+0x7c>
 8015486:	3e01      	subs	r6, #1
 8015488:	e79c      	b.n	80153c4 <__multiply+0x84>
 801548a:	bf00      	nop
 801548c:	0801642f 	.word	0x0801642f
 8015490:	08016440 	.word	0x08016440

08015494 <__pow5mult>:
 8015494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015498:	4615      	mov	r5, r2
 801549a:	f012 0203 	ands.w	r2, r2, #3
 801549e:	4606      	mov	r6, r0
 80154a0:	460f      	mov	r7, r1
 80154a2:	d007      	beq.n	80154b4 <__pow5mult+0x20>
 80154a4:	4c25      	ldr	r4, [pc, #148]	; (801553c <__pow5mult+0xa8>)
 80154a6:	3a01      	subs	r2, #1
 80154a8:	2300      	movs	r3, #0
 80154aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80154ae:	f7ff fe9b 	bl	80151e8 <__multadd>
 80154b2:	4607      	mov	r7, r0
 80154b4:	10ad      	asrs	r5, r5, #2
 80154b6:	d03d      	beq.n	8015534 <__pow5mult+0xa0>
 80154b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80154ba:	b97c      	cbnz	r4, 80154dc <__pow5mult+0x48>
 80154bc:	2010      	movs	r0, #16
 80154be:	f7fd ffdd 	bl	801347c <malloc>
 80154c2:	4602      	mov	r2, r0
 80154c4:	6270      	str	r0, [r6, #36]	; 0x24
 80154c6:	b928      	cbnz	r0, 80154d4 <__pow5mult+0x40>
 80154c8:	4b1d      	ldr	r3, [pc, #116]	; (8015540 <__pow5mult+0xac>)
 80154ca:	481e      	ldr	r0, [pc, #120]	; (8015544 <__pow5mult+0xb0>)
 80154cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80154d0:	f000 f9d4 	bl	801587c <__assert_func>
 80154d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80154d8:	6004      	str	r4, [r0, #0]
 80154da:	60c4      	str	r4, [r0, #12]
 80154dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80154e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80154e4:	b94c      	cbnz	r4, 80154fa <__pow5mult+0x66>
 80154e6:	f240 2171 	movw	r1, #625	; 0x271
 80154ea:	4630      	mov	r0, r6
 80154ec:	f7ff ff12 	bl	8015314 <__i2b>
 80154f0:	2300      	movs	r3, #0
 80154f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80154f6:	4604      	mov	r4, r0
 80154f8:	6003      	str	r3, [r0, #0]
 80154fa:	f04f 0900 	mov.w	r9, #0
 80154fe:	07eb      	lsls	r3, r5, #31
 8015500:	d50a      	bpl.n	8015518 <__pow5mult+0x84>
 8015502:	4639      	mov	r1, r7
 8015504:	4622      	mov	r2, r4
 8015506:	4630      	mov	r0, r6
 8015508:	f7ff ff1a 	bl	8015340 <__multiply>
 801550c:	4639      	mov	r1, r7
 801550e:	4680      	mov	r8, r0
 8015510:	4630      	mov	r0, r6
 8015512:	f7ff fe47 	bl	80151a4 <_Bfree>
 8015516:	4647      	mov	r7, r8
 8015518:	106d      	asrs	r5, r5, #1
 801551a:	d00b      	beq.n	8015534 <__pow5mult+0xa0>
 801551c:	6820      	ldr	r0, [r4, #0]
 801551e:	b938      	cbnz	r0, 8015530 <__pow5mult+0x9c>
 8015520:	4622      	mov	r2, r4
 8015522:	4621      	mov	r1, r4
 8015524:	4630      	mov	r0, r6
 8015526:	f7ff ff0b 	bl	8015340 <__multiply>
 801552a:	6020      	str	r0, [r4, #0]
 801552c:	f8c0 9000 	str.w	r9, [r0]
 8015530:	4604      	mov	r4, r0
 8015532:	e7e4      	b.n	80154fe <__pow5mult+0x6a>
 8015534:	4638      	mov	r0, r7
 8015536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801553a:	bf00      	nop
 801553c:	08016590 	.word	0x08016590
 8015540:	080163bd 	.word	0x080163bd
 8015544:	08016440 	.word	0x08016440

08015548 <__lshift>:
 8015548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801554c:	460c      	mov	r4, r1
 801554e:	6849      	ldr	r1, [r1, #4]
 8015550:	6923      	ldr	r3, [r4, #16]
 8015552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8015556:	68a3      	ldr	r3, [r4, #8]
 8015558:	4607      	mov	r7, r0
 801555a:	4691      	mov	r9, r2
 801555c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015560:	f108 0601 	add.w	r6, r8, #1
 8015564:	42b3      	cmp	r3, r6
 8015566:	db0b      	blt.n	8015580 <__lshift+0x38>
 8015568:	4638      	mov	r0, r7
 801556a:	f7ff fddb 	bl	8015124 <_Balloc>
 801556e:	4605      	mov	r5, r0
 8015570:	b948      	cbnz	r0, 8015586 <__lshift+0x3e>
 8015572:	4602      	mov	r2, r0
 8015574:	4b2a      	ldr	r3, [pc, #168]	; (8015620 <__lshift+0xd8>)
 8015576:	482b      	ldr	r0, [pc, #172]	; (8015624 <__lshift+0xdc>)
 8015578:	f240 11d9 	movw	r1, #473	; 0x1d9
 801557c:	f000 f97e 	bl	801587c <__assert_func>
 8015580:	3101      	adds	r1, #1
 8015582:	005b      	lsls	r3, r3, #1
 8015584:	e7ee      	b.n	8015564 <__lshift+0x1c>
 8015586:	2300      	movs	r3, #0
 8015588:	f100 0114 	add.w	r1, r0, #20
 801558c:	f100 0210 	add.w	r2, r0, #16
 8015590:	4618      	mov	r0, r3
 8015592:	4553      	cmp	r3, sl
 8015594:	db37      	blt.n	8015606 <__lshift+0xbe>
 8015596:	6920      	ldr	r0, [r4, #16]
 8015598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801559c:	f104 0314 	add.w	r3, r4, #20
 80155a0:	f019 091f 	ands.w	r9, r9, #31
 80155a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80155a8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80155ac:	d02f      	beq.n	801560e <__lshift+0xc6>
 80155ae:	f1c9 0e20 	rsb	lr, r9, #32
 80155b2:	468a      	mov	sl, r1
 80155b4:	f04f 0c00 	mov.w	ip, #0
 80155b8:	681a      	ldr	r2, [r3, #0]
 80155ba:	fa02 f209 	lsl.w	r2, r2, r9
 80155be:	ea42 020c 	orr.w	r2, r2, ip
 80155c2:	f84a 2b04 	str.w	r2, [sl], #4
 80155c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80155ca:	4298      	cmp	r0, r3
 80155cc:	fa22 fc0e 	lsr.w	ip, r2, lr
 80155d0:	d8f2      	bhi.n	80155b8 <__lshift+0x70>
 80155d2:	1b03      	subs	r3, r0, r4
 80155d4:	3b15      	subs	r3, #21
 80155d6:	f023 0303 	bic.w	r3, r3, #3
 80155da:	3304      	adds	r3, #4
 80155dc:	f104 0215 	add.w	r2, r4, #21
 80155e0:	4290      	cmp	r0, r2
 80155e2:	bf38      	it	cc
 80155e4:	2304      	movcc	r3, #4
 80155e6:	f841 c003 	str.w	ip, [r1, r3]
 80155ea:	f1bc 0f00 	cmp.w	ip, #0
 80155ee:	d001      	beq.n	80155f4 <__lshift+0xac>
 80155f0:	f108 0602 	add.w	r6, r8, #2
 80155f4:	3e01      	subs	r6, #1
 80155f6:	4638      	mov	r0, r7
 80155f8:	612e      	str	r6, [r5, #16]
 80155fa:	4621      	mov	r1, r4
 80155fc:	f7ff fdd2 	bl	80151a4 <_Bfree>
 8015600:	4628      	mov	r0, r5
 8015602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015606:	f842 0f04 	str.w	r0, [r2, #4]!
 801560a:	3301      	adds	r3, #1
 801560c:	e7c1      	b.n	8015592 <__lshift+0x4a>
 801560e:	3904      	subs	r1, #4
 8015610:	f853 2b04 	ldr.w	r2, [r3], #4
 8015614:	f841 2f04 	str.w	r2, [r1, #4]!
 8015618:	4298      	cmp	r0, r3
 801561a:	d8f9      	bhi.n	8015610 <__lshift+0xc8>
 801561c:	e7ea      	b.n	80155f4 <__lshift+0xac>
 801561e:	bf00      	nop
 8015620:	0801642f 	.word	0x0801642f
 8015624:	08016440 	.word	0x08016440

08015628 <__mcmp>:
 8015628:	b530      	push	{r4, r5, lr}
 801562a:	6902      	ldr	r2, [r0, #16]
 801562c:	690c      	ldr	r4, [r1, #16]
 801562e:	1b12      	subs	r2, r2, r4
 8015630:	d10e      	bne.n	8015650 <__mcmp+0x28>
 8015632:	f100 0314 	add.w	r3, r0, #20
 8015636:	3114      	adds	r1, #20
 8015638:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801563c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015640:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015644:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015648:	42a5      	cmp	r5, r4
 801564a:	d003      	beq.n	8015654 <__mcmp+0x2c>
 801564c:	d305      	bcc.n	801565a <__mcmp+0x32>
 801564e:	2201      	movs	r2, #1
 8015650:	4610      	mov	r0, r2
 8015652:	bd30      	pop	{r4, r5, pc}
 8015654:	4283      	cmp	r3, r0
 8015656:	d3f3      	bcc.n	8015640 <__mcmp+0x18>
 8015658:	e7fa      	b.n	8015650 <__mcmp+0x28>
 801565a:	f04f 32ff 	mov.w	r2, #4294967295
 801565e:	e7f7      	b.n	8015650 <__mcmp+0x28>

08015660 <__mdiff>:
 8015660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015664:	460c      	mov	r4, r1
 8015666:	4606      	mov	r6, r0
 8015668:	4611      	mov	r1, r2
 801566a:	4620      	mov	r0, r4
 801566c:	4690      	mov	r8, r2
 801566e:	f7ff ffdb 	bl	8015628 <__mcmp>
 8015672:	1e05      	subs	r5, r0, #0
 8015674:	d110      	bne.n	8015698 <__mdiff+0x38>
 8015676:	4629      	mov	r1, r5
 8015678:	4630      	mov	r0, r6
 801567a:	f7ff fd53 	bl	8015124 <_Balloc>
 801567e:	b930      	cbnz	r0, 801568e <__mdiff+0x2e>
 8015680:	4b3a      	ldr	r3, [pc, #232]	; (801576c <__mdiff+0x10c>)
 8015682:	4602      	mov	r2, r0
 8015684:	f240 2132 	movw	r1, #562	; 0x232
 8015688:	4839      	ldr	r0, [pc, #228]	; (8015770 <__mdiff+0x110>)
 801568a:	f000 f8f7 	bl	801587c <__assert_func>
 801568e:	2301      	movs	r3, #1
 8015690:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015694:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015698:	bfa4      	itt	ge
 801569a:	4643      	movge	r3, r8
 801569c:	46a0      	movge	r8, r4
 801569e:	4630      	mov	r0, r6
 80156a0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80156a4:	bfa6      	itte	ge
 80156a6:	461c      	movge	r4, r3
 80156a8:	2500      	movge	r5, #0
 80156aa:	2501      	movlt	r5, #1
 80156ac:	f7ff fd3a 	bl	8015124 <_Balloc>
 80156b0:	b920      	cbnz	r0, 80156bc <__mdiff+0x5c>
 80156b2:	4b2e      	ldr	r3, [pc, #184]	; (801576c <__mdiff+0x10c>)
 80156b4:	4602      	mov	r2, r0
 80156b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80156ba:	e7e5      	b.n	8015688 <__mdiff+0x28>
 80156bc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80156c0:	6926      	ldr	r6, [r4, #16]
 80156c2:	60c5      	str	r5, [r0, #12]
 80156c4:	f104 0914 	add.w	r9, r4, #20
 80156c8:	f108 0514 	add.w	r5, r8, #20
 80156cc:	f100 0e14 	add.w	lr, r0, #20
 80156d0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80156d4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80156d8:	f108 0210 	add.w	r2, r8, #16
 80156dc:	46f2      	mov	sl, lr
 80156de:	2100      	movs	r1, #0
 80156e0:	f859 3b04 	ldr.w	r3, [r9], #4
 80156e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80156e8:	fa1f f883 	uxth.w	r8, r3
 80156ec:	fa11 f18b 	uxtah	r1, r1, fp
 80156f0:	0c1b      	lsrs	r3, r3, #16
 80156f2:	eba1 0808 	sub.w	r8, r1, r8
 80156f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80156fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80156fe:	fa1f f888 	uxth.w	r8, r8
 8015702:	1419      	asrs	r1, r3, #16
 8015704:	454e      	cmp	r6, r9
 8015706:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801570a:	f84a 3b04 	str.w	r3, [sl], #4
 801570e:	d8e7      	bhi.n	80156e0 <__mdiff+0x80>
 8015710:	1b33      	subs	r3, r6, r4
 8015712:	3b15      	subs	r3, #21
 8015714:	f023 0303 	bic.w	r3, r3, #3
 8015718:	3304      	adds	r3, #4
 801571a:	3415      	adds	r4, #21
 801571c:	42a6      	cmp	r6, r4
 801571e:	bf38      	it	cc
 8015720:	2304      	movcc	r3, #4
 8015722:	441d      	add	r5, r3
 8015724:	4473      	add	r3, lr
 8015726:	469e      	mov	lr, r3
 8015728:	462e      	mov	r6, r5
 801572a:	4566      	cmp	r6, ip
 801572c:	d30e      	bcc.n	801574c <__mdiff+0xec>
 801572e:	f10c 0203 	add.w	r2, ip, #3
 8015732:	1b52      	subs	r2, r2, r5
 8015734:	f022 0203 	bic.w	r2, r2, #3
 8015738:	3d03      	subs	r5, #3
 801573a:	45ac      	cmp	ip, r5
 801573c:	bf38      	it	cc
 801573e:	2200      	movcc	r2, #0
 8015740:	441a      	add	r2, r3
 8015742:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8015746:	b17b      	cbz	r3, 8015768 <__mdiff+0x108>
 8015748:	6107      	str	r7, [r0, #16]
 801574a:	e7a3      	b.n	8015694 <__mdiff+0x34>
 801574c:	f856 8b04 	ldr.w	r8, [r6], #4
 8015750:	fa11 f288 	uxtah	r2, r1, r8
 8015754:	1414      	asrs	r4, r2, #16
 8015756:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801575a:	b292      	uxth	r2, r2
 801575c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015760:	f84e 2b04 	str.w	r2, [lr], #4
 8015764:	1421      	asrs	r1, r4, #16
 8015766:	e7e0      	b.n	801572a <__mdiff+0xca>
 8015768:	3f01      	subs	r7, #1
 801576a:	e7ea      	b.n	8015742 <__mdiff+0xe2>
 801576c:	0801642f 	.word	0x0801642f
 8015770:	08016440 	.word	0x08016440

08015774 <__d2b>:
 8015774:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015778:	4689      	mov	r9, r1
 801577a:	2101      	movs	r1, #1
 801577c:	ec57 6b10 	vmov	r6, r7, d0
 8015780:	4690      	mov	r8, r2
 8015782:	f7ff fccf 	bl	8015124 <_Balloc>
 8015786:	4604      	mov	r4, r0
 8015788:	b930      	cbnz	r0, 8015798 <__d2b+0x24>
 801578a:	4602      	mov	r2, r0
 801578c:	4b25      	ldr	r3, [pc, #148]	; (8015824 <__d2b+0xb0>)
 801578e:	4826      	ldr	r0, [pc, #152]	; (8015828 <__d2b+0xb4>)
 8015790:	f240 310a 	movw	r1, #778	; 0x30a
 8015794:	f000 f872 	bl	801587c <__assert_func>
 8015798:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801579c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80157a0:	bb35      	cbnz	r5, 80157f0 <__d2b+0x7c>
 80157a2:	2e00      	cmp	r6, #0
 80157a4:	9301      	str	r3, [sp, #4]
 80157a6:	d028      	beq.n	80157fa <__d2b+0x86>
 80157a8:	4668      	mov	r0, sp
 80157aa:	9600      	str	r6, [sp, #0]
 80157ac:	f7ff fd82 	bl	80152b4 <__lo0bits>
 80157b0:	9900      	ldr	r1, [sp, #0]
 80157b2:	b300      	cbz	r0, 80157f6 <__d2b+0x82>
 80157b4:	9a01      	ldr	r2, [sp, #4]
 80157b6:	f1c0 0320 	rsb	r3, r0, #32
 80157ba:	fa02 f303 	lsl.w	r3, r2, r3
 80157be:	430b      	orrs	r3, r1
 80157c0:	40c2      	lsrs	r2, r0
 80157c2:	6163      	str	r3, [r4, #20]
 80157c4:	9201      	str	r2, [sp, #4]
 80157c6:	9b01      	ldr	r3, [sp, #4]
 80157c8:	61a3      	str	r3, [r4, #24]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	bf14      	ite	ne
 80157ce:	2202      	movne	r2, #2
 80157d0:	2201      	moveq	r2, #1
 80157d2:	6122      	str	r2, [r4, #16]
 80157d4:	b1d5      	cbz	r5, 801580c <__d2b+0x98>
 80157d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80157da:	4405      	add	r5, r0
 80157dc:	f8c9 5000 	str.w	r5, [r9]
 80157e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80157e4:	f8c8 0000 	str.w	r0, [r8]
 80157e8:	4620      	mov	r0, r4
 80157ea:	b003      	add	sp, #12
 80157ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80157f4:	e7d5      	b.n	80157a2 <__d2b+0x2e>
 80157f6:	6161      	str	r1, [r4, #20]
 80157f8:	e7e5      	b.n	80157c6 <__d2b+0x52>
 80157fa:	a801      	add	r0, sp, #4
 80157fc:	f7ff fd5a 	bl	80152b4 <__lo0bits>
 8015800:	9b01      	ldr	r3, [sp, #4]
 8015802:	6163      	str	r3, [r4, #20]
 8015804:	2201      	movs	r2, #1
 8015806:	6122      	str	r2, [r4, #16]
 8015808:	3020      	adds	r0, #32
 801580a:	e7e3      	b.n	80157d4 <__d2b+0x60>
 801580c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015810:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015814:	f8c9 0000 	str.w	r0, [r9]
 8015818:	6918      	ldr	r0, [r3, #16]
 801581a:	f7ff fd2b 	bl	8015274 <__hi0bits>
 801581e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015822:	e7df      	b.n	80157e4 <__d2b+0x70>
 8015824:	0801642f 	.word	0x0801642f
 8015828:	08016440 	.word	0x08016440

0801582c <_calloc_r>:
 801582c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801582e:	fba1 2402 	umull	r2, r4, r1, r2
 8015832:	b94c      	cbnz	r4, 8015848 <_calloc_r+0x1c>
 8015834:	4611      	mov	r1, r2
 8015836:	9201      	str	r2, [sp, #4]
 8015838:	f7fd feb2 	bl	80135a0 <_malloc_r>
 801583c:	9a01      	ldr	r2, [sp, #4]
 801583e:	4605      	mov	r5, r0
 8015840:	b930      	cbnz	r0, 8015850 <_calloc_r+0x24>
 8015842:	4628      	mov	r0, r5
 8015844:	b003      	add	sp, #12
 8015846:	bd30      	pop	{r4, r5, pc}
 8015848:	220c      	movs	r2, #12
 801584a:	6002      	str	r2, [r0, #0]
 801584c:	2500      	movs	r5, #0
 801584e:	e7f8      	b.n	8015842 <_calloc_r+0x16>
 8015850:	4621      	mov	r1, r4
 8015852:	f7fd fe31 	bl	80134b8 <memset>
 8015856:	e7f4      	b.n	8015842 <_calloc_r+0x16>

08015858 <_read_r>:
 8015858:	b538      	push	{r3, r4, r5, lr}
 801585a:	4d07      	ldr	r5, [pc, #28]	; (8015878 <_read_r+0x20>)
 801585c:	4604      	mov	r4, r0
 801585e:	4608      	mov	r0, r1
 8015860:	4611      	mov	r1, r2
 8015862:	2200      	movs	r2, #0
 8015864:	602a      	str	r2, [r5, #0]
 8015866:	461a      	mov	r2, r3
 8015868:	f7f2 f96a 	bl	8007b40 <_read>
 801586c:	1c43      	adds	r3, r0, #1
 801586e:	d102      	bne.n	8015876 <_read_r+0x1e>
 8015870:	682b      	ldr	r3, [r5, #0]
 8015872:	b103      	cbz	r3, 8015876 <_read_r+0x1e>
 8015874:	6023      	str	r3, [r4, #0]
 8015876:	bd38      	pop	{r3, r4, r5, pc}
 8015878:	2000a3b4 	.word	0x2000a3b4

0801587c <__assert_func>:
 801587c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801587e:	4614      	mov	r4, r2
 8015880:	461a      	mov	r2, r3
 8015882:	4b09      	ldr	r3, [pc, #36]	; (80158a8 <__assert_func+0x2c>)
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	4605      	mov	r5, r0
 8015888:	68d8      	ldr	r0, [r3, #12]
 801588a:	b14c      	cbz	r4, 80158a0 <__assert_func+0x24>
 801588c:	4b07      	ldr	r3, [pc, #28]	; (80158ac <__assert_func+0x30>)
 801588e:	9100      	str	r1, [sp, #0]
 8015890:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015894:	4906      	ldr	r1, [pc, #24]	; (80158b0 <__assert_func+0x34>)
 8015896:	462b      	mov	r3, r5
 8015898:	f000 f80e 	bl	80158b8 <fiprintf>
 801589c:	f7fd fcbc 	bl	8013218 <abort>
 80158a0:	4b04      	ldr	r3, [pc, #16]	; (80158b4 <__assert_func+0x38>)
 80158a2:	461c      	mov	r4, r3
 80158a4:	e7f3      	b.n	801588e <__assert_func+0x12>
 80158a6:	bf00      	nop
 80158a8:	20000020 	.word	0x20000020
 80158ac:	0801659c 	.word	0x0801659c
 80158b0:	080165a9 	.word	0x080165a9
 80158b4:	080165d7 	.word	0x080165d7

080158b8 <fiprintf>:
 80158b8:	b40e      	push	{r1, r2, r3}
 80158ba:	b503      	push	{r0, r1, lr}
 80158bc:	4601      	mov	r1, r0
 80158be:	ab03      	add	r3, sp, #12
 80158c0:	4805      	ldr	r0, [pc, #20]	; (80158d8 <fiprintf+0x20>)
 80158c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80158c6:	6800      	ldr	r0, [r0, #0]
 80158c8:	9301      	str	r3, [sp, #4]
 80158ca:	f000 f843 	bl	8015954 <_vfiprintf_r>
 80158ce:	b002      	add	sp, #8
 80158d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80158d4:	b003      	add	sp, #12
 80158d6:	4770      	bx	lr
 80158d8:	20000020 	.word	0x20000020

080158dc <__ascii_mbtowc>:
 80158dc:	b082      	sub	sp, #8
 80158de:	b901      	cbnz	r1, 80158e2 <__ascii_mbtowc+0x6>
 80158e0:	a901      	add	r1, sp, #4
 80158e2:	b142      	cbz	r2, 80158f6 <__ascii_mbtowc+0x1a>
 80158e4:	b14b      	cbz	r3, 80158fa <__ascii_mbtowc+0x1e>
 80158e6:	7813      	ldrb	r3, [r2, #0]
 80158e8:	600b      	str	r3, [r1, #0]
 80158ea:	7812      	ldrb	r2, [r2, #0]
 80158ec:	1e10      	subs	r0, r2, #0
 80158ee:	bf18      	it	ne
 80158f0:	2001      	movne	r0, #1
 80158f2:	b002      	add	sp, #8
 80158f4:	4770      	bx	lr
 80158f6:	4610      	mov	r0, r2
 80158f8:	e7fb      	b.n	80158f2 <__ascii_mbtowc+0x16>
 80158fa:	f06f 0001 	mvn.w	r0, #1
 80158fe:	e7f8      	b.n	80158f2 <__ascii_mbtowc+0x16>

08015900 <__sfputc_r>:
 8015900:	6893      	ldr	r3, [r2, #8]
 8015902:	3b01      	subs	r3, #1
 8015904:	2b00      	cmp	r3, #0
 8015906:	b410      	push	{r4}
 8015908:	6093      	str	r3, [r2, #8]
 801590a:	da08      	bge.n	801591e <__sfputc_r+0x1e>
 801590c:	6994      	ldr	r4, [r2, #24]
 801590e:	42a3      	cmp	r3, r4
 8015910:	db01      	blt.n	8015916 <__sfputc_r+0x16>
 8015912:	290a      	cmp	r1, #10
 8015914:	d103      	bne.n	801591e <__sfputc_r+0x1e>
 8015916:	f85d 4b04 	ldr.w	r4, [sp], #4
 801591a:	f000 b94b 	b.w	8015bb4 <__swbuf_r>
 801591e:	6813      	ldr	r3, [r2, #0]
 8015920:	1c58      	adds	r0, r3, #1
 8015922:	6010      	str	r0, [r2, #0]
 8015924:	7019      	strb	r1, [r3, #0]
 8015926:	4608      	mov	r0, r1
 8015928:	f85d 4b04 	ldr.w	r4, [sp], #4
 801592c:	4770      	bx	lr

0801592e <__sfputs_r>:
 801592e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015930:	4606      	mov	r6, r0
 8015932:	460f      	mov	r7, r1
 8015934:	4614      	mov	r4, r2
 8015936:	18d5      	adds	r5, r2, r3
 8015938:	42ac      	cmp	r4, r5
 801593a:	d101      	bne.n	8015940 <__sfputs_r+0x12>
 801593c:	2000      	movs	r0, #0
 801593e:	e007      	b.n	8015950 <__sfputs_r+0x22>
 8015940:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015944:	463a      	mov	r2, r7
 8015946:	4630      	mov	r0, r6
 8015948:	f7ff ffda 	bl	8015900 <__sfputc_r>
 801594c:	1c43      	adds	r3, r0, #1
 801594e:	d1f3      	bne.n	8015938 <__sfputs_r+0xa>
 8015950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015954 <_vfiprintf_r>:
 8015954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015958:	460d      	mov	r5, r1
 801595a:	b09d      	sub	sp, #116	; 0x74
 801595c:	4614      	mov	r4, r2
 801595e:	4698      	mov	r8, r3
 8015960:	4606      	mov	r6, r0
 8015962:	b118      	cbz	r0, 801596c <_vfiprintf_r+0x18>
 8015964:	6983      	ldr	r3, [r0, #24]
 8015966:	b90b      	cbnz	r3, 801596c <_vfiprintf_r+0x18>
 8015968:	f7fd fcc2 	bl	80132f0 <__sinit>
 801596c:	4b89      	ldr	r3, [pc, #548]	; (8015b94 <_vfiprintf_r+0x240>)
 801596e:	429d      	cmp	r5, r3
 8015970:	d11b      	bne.n	80159aa <_vfiprintf_r+0x56>
 8015972:	6875      	ldr	r5, [r6, #4]
 8015974:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015976:	07d9      	lsls	r1, r3, #31
 8015978:	d405      	bmi.n	8015986 <_vfiprintf_r+0x32>
 801597a:	89ab      	ldrh	r3, [r5, #12]
 801597c:	059a      	lsls	r2, r3, #22
 801597e:	d402      	bmi.n	8015986 <_vfiprintf_r+0x32>
 8015980:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015982:	f7fd fd78 	bl	8013476 <__retarget_lock_acquire_recursive>
 8015986:	89ab      	ldrh	r3, [r5, #12]
 8015988:	071b      	lsls	r3, r3, #28
 801598a:	d501      	bpl.n	8015990 <_vfiprintf_r+0x3c>
 801598c:	692b      	ldr	r3, [r5, #16]
 801598e:	b9eb      	cbnz	r3, 80159cc <_vfiprintf_r+0x78>
 8015990:	4629      	mov	r1, r5
 8015992:	4630      	mov	r0, r6
 8015994:	f000 f96e 	bl	8015c74 <__swsetup_r>
 8015998:	b1c0      	cbz	r0, 80159cc <_vfiprintf_r+0x78>
 801599a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801599c:	07dc      	lsls	r4, r3, #31
 801599e:	d50e      	bpl.n	80159be <_vfiprintf_r+0x6a>
 80159a0:	f04f 30ff 	mov.w	r0, #4294967295
 80159a4:	b01d      	add	sp, #116	; 0x74
 80159a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159aa:	4b7b      	ldr	r3, [pc, #492]	; (8015b98 <_vfiprintf_r+0x244>)
 80159ac:	429d      	cmp	r5, r3
 80159ae:	d101      	bne.n	80159b4 <_vfiprintf_r+0x60>
 80159b0:	68b5      	ldr	r5, [r6, #8]
 80159b2:	e7df      	b.n	8015974 <_vfiprintf_r+0x20>
 80159b4:	4b79      	ldr	r3, [pc, #484]	; (8015b9c <_vfiprintf_r+0x248>)
 80159b6:	429d      	cmp	r5, r3
 80159b8:	bf08      	it	eq
 80159ba:	68f5      	ldreq	r5, [r6, #12]
 80159bc:	e7da      	b.n	8015974 <_vfiprintf_r+0x20>
 80159be:	89ab      	ldrh	r3, [r5, #12]
 80159c0:	0598      	lsls	r0, r3, #22
 80159c2:	d4ed      	bmi.n	80159a0 <_vfiprintf_r+0x4c>
 80159c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80159c6:	f7fd fd58 	bl	801347a <__retarget_lock_release_recursive>
 80159ca:	e7e9      	b.n	80159a0 <_vfiprintf_r+0x4c>
 80159cc:	2300      	movs	r3, #0
 80159ce:	9309      	str	r3, [sp, #36]	; 0x24
 80159d0:	2320      	movs	r3, #32
 80159d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80159d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80159da:	2330      	movs	r3, #48	; 0x30
 80159dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015ba0 <_vfiprintf_r+0x24c>
 80159e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80159e4:	f04f 0901 	mov.w	r9, #1
 80159e8:	4623      	mov	r3, r4
 80159ea:	469a      	mov	sl, r3
 80159ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159f0:	b10a      	cbz	r2, 80159f6 <_vfiprintf_r+0xa2>
 80159f2:	2a25      	cmp	r2, #37	; 0x25
 80159f4:	d1f9      	bne.n	80159ea <_vfiprintf_r+0x96>
 80159f6:	ebba 0b04 	subs.w	fp, sl, r4
 80159fa:	d00b      	beq.n	8015a14 <_vfiprintf_r+0xc0>
 80159fc:	465b      	mov	r3, fp
 80159fe:	4622      	mov	r2, r4
 8015a00:	4629      	mov	r1, r5
 8015a02:	4630      	mov	r0, r6
 8015a04:	f7ff ff93 	bl	801592e <__sfputs_r>
 8015a08:	3001      	adds	r0, #1
 8015a0a:	f000 80aa 	beq.w	8015b62 <_vfiprintf_r+0x20e>
 8015a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015a10:	445a      	add	r2, fp
 8015a12:	9209      	str	r2, [sp, #36]	; 0x24
 8015a14:	f89a 3000 	ldrb.w	r3, [sl]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	f000 80a2 	beq.w	8015b62 <_vfiprintf_r+0x20e>
 8015a1e:	2300      	movs	r3, #0
 8015a20:	f04f 32ff 	mov.w	r2, #4294967295
 8015a24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015a28:	f10a 0a01 	add.w	sl, sl, #1
 8015a2c:	9304      	str	r3, [sp, #16]
 8015a2e:	9307      	str	r3, [sp, #28]
 8015a30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015a34:	931a      	str	r3, [sp, #104]	; 0x68
 8015a36:	4654      	mov	r4, sl
 8015a38:	2205      	movs	r2, #5
 8015a3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a3e:	4858      	ldr	r0, [pc, #352]	; (8015ba0 <_vfiprintf_r+0x24c>)
 8015a40:	f7ea fbce 	bl	80001e0 <memchr>
 8015a44:	9a04      	ldr	r2, [sp, #16]
 8015a46:	b9d8      	cbnz	r0, 8015a80 <_vfiprintf_r+0x12c>
 8015a48:	06d1      	lsls	r1, r2, #27
 8015a4a:	bf44      	itt	mi
 8015a4c:	2320      	movmi	r3, #32
 8015a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a52:	0713      	lsls	r3, r2, #28
 8015a54:	bf44      	itt	mi
 8015a56:	232b      	movmi	r3, #43	; 0x2b
 8015a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a5c:	f89a 3000 	ldrb.w	r3, [sl]
 8015a60:	2b2a      	cmp	r3, #42	; 0x2a
 8015a62:	d015      	beq.n	8015a90 <_vfiprintf_r+0x13c>
 8015a64:	9a07      	ldr	r2, [sp, #28]
 8015a66:	4654      	mov	r4, sl
 8015a68:	2000      	movs	r0, #0
 8015a6a:	f04f 0c0a 	mov.w	ip, #10
 8015a6e:	4621      	mov	r1, r4
 8015a70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a74:	3b30      	subs	r3, #48	; 0x30
 8015a76:	2b09      	cmp	r3, #9
 8015a78:	d94e      	bls.n	8015b18 <_vfiprintf_r+0x1c4>
 8015a7a:	b1b0      	cbz	r0, 8015aaa <_vfiprintf_r+0x156>
 8015a7c:	9207      	str	r2, [sp, #28]
 8015a7e:	e014      	b.n	8015aaa <_vfiprintf_r+0x156>
 8015a80:	eba0 0308 	sub.w	r3, r0, r8
 8015a84:	fa09 f303 	lsl.w	r3, r9, r3
 8015a88:	4313      	orrs	r3, r2
 8015a8a:	9304      	str	r3, [sp, #16]
 8015a8c:	46a2      	mov	sl, r4
 8015a8e:	e7d2      	b.n	8015a36 <_vfiprintf_r+0xe2>
 8015a90:	9b03      	ldr	r3, [sp, #12]
 8015a92:	1d19      	adds	r1, r3, #4
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	9103      	str	r1, [sp, #12]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	bfbb      	ittet	lt
 8015a9c:	425b      	neglt	r3, r3
 8015a9e:	f042 0202 	orrlt.w	r2, r2, #2
 8015aa2:	9307      	strge	r3, [sp, #28]
 8015aa4:	9307      	strlt	r3, [sp, #28]
 8015aa6:	bfb8      	it	lt
 8015aa8:	9204      	strlt	r2, [sp, #16]
 8015aaa:	7823      	ldrb	r3, [r4, #0]
 8015aac:	2b2e      	cmp	r3, #46	; 0x2e
 8015aae:	d10c      	bne.n	8015aca <_vfiprintf_r+0x176>
 8015ab0:	7863      	ldrb	r3, [r4, #1]
 8015ab2:	2b2a      	cmp	r3, #42	; 0x2a
 8015ab4:	d135      	bne.n	8015b22 <_vfiprintf_r+0x1ce>
 8015ab6:	9b03      	ldr	r3, [sp, #12]
 8015ab8:	1d1a      	adds	r2, r3, #4
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	9203      	str	r2, [sp, #12]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	bfb8      	it	lt
 8015ac2:	f04f 33ff 	movlt.w	r3, #4294967295
 8015ac6:	3402      	adds	r4, #2
 8015ac8:	9305      	str	r3, [sp, #20]
 8015aca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015bb0 <_vfiprintf_r+0x25c>
 8015ace:	7821      	ldrb	r1, [r4, #0]
 8015ad0:	2203      	movs	r2, #3
 8015ad2:	4650      	mov	r0, sl
 8015ad4:	f7ea fb84 	bl	80001e0 <memchr>
 8015ad8:	b140      	cbz	r0, 8015aec <_vfiprintf_r+0x198>
 8015ada:	2340      	movs	r3, #64	; 0x40
 8015adc:	eba0 000a 	sub.w	r0, r0, sl
 8015ae0:	fa03 f000 	lsl.w	r0, r3, r0
 8015ae4:	9b04      	ldr	r3, [sp, #16]
 8015ae6:	4303      	orrs	r3, r0
 8015ae8:	3401      	adds	r4, #1
 8015aea:	9304      	str	r3, [sp, #16]
 8015aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015af0:	482c      	ldr	r0, [pc, #176]	; (8015ba4 <_vfiprintf_r+0x250>)
 8015af2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015af6:	2206      	movs	r2, #6
 8015af8:	f7ea fb72 	bl	80001e0 <memchr>
 8015afc:	2800      	cmp	r0, #0
 8015afe:	d03f      	beq.n	8015b80 <_vfiprintf_r+0x22c>
 8015b00:	4b29      	ldr	r3, [pc, #164]	; (8015ba8 <_vfiprintf_r+0x254>)
 8015b02:	bb1b      	cbnz	r3, 8015b4c <_vfiprintf_r+0x1f8>
 8015b04:	9b03      	ldr	r3, [sp, #12]
 8015b06:	3307      	adds	r3, #7
 8015b08:	f023 0307 	bic.w	r3, r3, #7
 8015b0c:	3308      	adds	r3, #8
 8015b0e:	9303      	str	r3, [sp, #12]
 8015b10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b12:	443b      	add	r3, r7
 8015b14:	9309      	str	r3, [sp, #36]	; 0x24
 8015b16:	e767      	b.n	80159e8 <_vfiprintf_r+0x94>
 8015b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8015b1c:	460c      	mov	r4, r1
 8015b1e:	2001      	movs	r0, #1
 8015b20:	e7a5      	b.n	8015a6e <_vfiprintf_r+0x11a>
 8015b22:	2300      	movs	r3, #0
 8015b24:	3401      	adds	r4, #1
 8015b26:	9305      	str	r3, [sp, #20]
 8015b28:	4619      	mov	r1, r3
 8015b2a:	f04f 0c0a 	mov.w	ip, #10
 8015b2e:	4620      	mov	r0, r4
 8015b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015b34:	3a30      	subs	r2, #48	; 0x30
 8015b36:	2a09      	cmp	r2, #9
 8015b38:	d903      	bls.n	8015b42 <_vfiprintf_r+0x1ee>
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d0c5      	beq.n	8015aca <_vfiprintf_r+0x176>
 8015b3e:	9105      	str	r1, [sp, #20]
 8015b40:	e7c3      	b.n	8015aca <_vfiprintf_r+0x176>
 8015b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8015b46:	4604      	mov	r4, r0
 8015b48:	2301      	movs	r3, #1
 8015b4a:	e7f0      	b.n	8015b2e <_vfiprintf_r+0x1da>
 8015b4c:	ab03      	add	r3, sp, #12
 8015b4e:	9300      	str	r3, [sp, #0]
 8015b50:	462a      	mov	r2, r5
 8015b52:	4b16      	ldr	r3, [pc, #88]	; (8015bac <_vfiprintf_r+0x258>)
 8015b54:	a904      	add	r1, sp, #16
 8015b56:	4630      	mov	r0, r6
 8015b58:	f7fd fe36 	bl	80137c8 <_printf_float>
 8015b5c:	4607      	mov	r7, r0
 8015b5e:	1c78      	adds	r0, r7, #1
 8015b60:	d1d6      	bne.n	8015b10 <_vfiprintf_r+0x1bc>
 8015b62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b64:	07d9      	lsls	r1, r3, #31
 8015b66:	d405      	bmi.n	8015b74 <_vfiprintf_r+0x220>
 8015b68:	89ab      	ldrh	r3, [r5, #12]
 8015b6a:	059a      	lsls	r2, r3, #22
 8015b6c:	d402      	bmi.n	8015b74 <_vfiprintf_r+0x220>
 8015b6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b70:	f7fd fc83 	bl	801347a <__retarget_lock_release_recursive>
 8015b74:	89ab      	ldrh	r3, [r5, #12]
 8015b76:	065b      	lsls	r3, r3, #25
 8015b78:	f53f af12 	bmi.w	80159a0 <_vfiprintf_r+0x4c>
 8015b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b7e:	e711      	b.n	80159a4 <_vfiprintf_r+0x50>
 8015b80:	ab03      	add	r3, sp, #12
 8015b82:	9300      	str	r3, [sp, #0]
 8015b84:	462a      	mov	r2, r5
 8015b86:	4b09      	ldr	r3, [pc, #36]	; (8015bac <_vfiprintf_r+0x258>)
 8015b88:	a904      	add	r1, sp, #16
 8015b8a:	4630      	mov	r0, r6
 8015b8c:	f7fe f8c0 	bl	8013d10 <_printf_i>
 8015b90:	e7e4      	b.n	8015b5c <_vfiprintf_r+0x208>
 8015b92:	bf00      	nop
 8015b94:	08016338 	.word	0x08016338
 8015b98:	08016358 	.word	0x08016358
 8015b9c:	08016318 	.word	0x08016318
 8015ba0:	080165e2 	.word	0x080165e2
 8015ba4:	080165ec 	.word	0x080165ec
 8015ba8:	080137c9 	.word	0x080137c9
 8015bac:	0801592f 	.word	0x0801592f
 8015bb0:	080165e8 	.word	0x080165e8

08015bb4 <__swbuf_r>:
 8015bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bb6:	460e      	mov	r6, r1
 8015bb8:	4614      	mov	r4, r2
 8015bba:	4605      	mov	r5, r0
 8015bbc:	b118      	cbz	r0, 8015bc6 <__swbuf_r+0x12>
 8015bbe:	6983      	ldr	r3, [r0, #24]
 8015bc0:	b90b      	cbnz	r3, 8015bc6 <__swbuf_r+0x12>
 8015bc2:	f7fd fb95 	bl	80132f0 <__sinit>
 8015bc6:	4b21      	ldr	r3, [pc, #132]	; (8015c4c <__swbuf_r+0x98>)
 8015bc8:	429c      	cmp	r4, r3
 8015bca:	d12b      	bne.n	8015c24 <__swbuf_r+0x70>
 8015bcc:	686c      	ldr	r4, [r5, #4]
 8015bce:	69a3      	ldr	r3, [r4, #24]
 8015bd0:	60a3      	str	r3, [r4, #8]
 8015bd2:	89a3      	ldrh	r3, [r4, #12]
 8015bd4:	071a      	lsls	r2, r3, #28
 8015bd6:	d52f      	bpl.n	8015c38 <__swbuf_r+0x84>
 8015bd8:	6923      	ldr	r3, [r4, #16]
 8015bda:	b36b      	cbz	r3, 8015c38 <__swbuf_r+0x84>
 8015bdc:	6923      	ldr	r3, [r4, #16]
 8015bde:	6820      	ldr	r0, [r4, #0]
 8015be0:	1ac0      	subs	r0, r0, r3
 8015be2:	6963      	ldr	r3, [r4, #20]
 8015be4:	b2f6      	uxtb	r6, r6
 8015be6:	4283      	cmp	r3, r0
 8015be8:	4637      	mov	r7, r6
 8015bea:	dc04      	bgt.n	8015bf6 <__swbuf_r+0x42>
 8015bec:	4621      	mov	r1, r4
 8015bee:	4628      	mov	r0, r5
 8015bf0:	f7ff fa3a 	bl	8015068 <_fflush_r>
 8015bf4:	bb30      	cbnz	r0, 8015c44 <__swbuf_r+0x90>
 8015bf6:	68a3      	ldr	r3, [r4, #8]
 8015bf8:	3b01      	subs	r3, #1
 8015bfa:	60a3      	str	r3, [r4, #8]
 8015bfc:	6823      	ldr	r3, [r4, #0]
 8015bfe:	1c5a      	adds	r2, r3, #1
 8015c00:	6022      	str	r2, [r4, #0]
 8015c02:	701e      	strb	r6, [r3, #0]
 8015c04:	6963      	ldr	r3, [r4, #20]
 8015c06:	3001      	adds	r0, #1
 8015c08:	4283      	cmp	r3, r0
 8015c0a:	d004      	beq.n	8015c16 <__swbuf_r+0x62>
 8015c0c:	89a3      	ldrh	r3, [r4, #12]
 8015c0e:	07db      	lsls	r3, r3, #31
 8015c10:	d506      	bpl.n	8015c20 <__swbuf_r+0x6c>
 8015c12:	2e0a      	cmp	r6, #10
 8015c14:	d104      	bne.n	8015c20 <__swbuf_r+0x6c>
 8015c16:	4621      	mov	r1, r4
 8015c18:	4628      	mov	r0, r5
 8015c1a:	f7ff fa25 	bl	8015068 <_fflush_r>
 8015c1e:	b988      	cbnz	r0, 8015c44 <__swbuf_r+0x90>
 8015c20:	4638      	mov	r0, r7
 8015c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015c24:	4b0a      	ldr	r3, [pc, #40]	; (8015c50 <__swbuf_r+0x9c>)
 8015c26:	429c      	cmp	r4, r3
 8015c28:	d101      	bne.n	8015c2e <__swbuf_r+0x7a>
 8015c2a:	68ac      	ldr	r4, [r5, #8]
 8015c2c:	e7cf      	b.n	8015bce <__swbuf_r+0x1a>
 8015c2e:	4b09      	ldr	r3, [pc, #36]	; (8015c54 <__swbuf_r+0xa0>)
 8015c30:	429c      	cmp	r4, r3
 8015c32:	bf08      	it	eq
 8015c34:	68ec      	ldreq	r4, [r5, #12]
 8015c36:	e7ca      	b.n	8015bce <__swbuf_r+0x1a>
 8015c38:	4621      	mov	r1, r4
 8015c3a:	4628      	mov	r0, r5
 8015c3c:	f000 f81a 	bl	8015c74 <__swsetup_r>
 8015c40:	2800      	cmp	r0, #0
 8015c42:	d0cb      	beq.n	8015bdc <__swbuf_r+0x28>
 8015c44:	f04f 37ff 	mov.w	r7, #4294967295
 8015c48:	e7ea      	b.n	8015c20 <__swbuf_r+0x6c>
 8015c4a:	bf00      	nop
 8015c4c:	08016338 	.word	0x08016338
 8015c50:	08016358 	.word	0x08016358
 8015c54:	08016318 	.word	0x08016318

08015c58 <__ascii_wctomb>:
 8015c58:	b149      	cbz	r1, 8015c6e <__ascii_wctomb+0x16>
 8015c5a:	2aff      	cmp	r2, #255	; 0xff
 8015c5c:	bf85      	ittet	hi
 8015c5e:	238a      	movhi	r3, #138	; 0x8a
 8015c60:	6003      	strhi	r3, [r0, #0]
 8015c62:	700a      	strbls	r2, [r1, #0]
 8015c64:	f04f 30ff 	movhi.w	r0, #4294967295
 8015c68:	bf98      	it	ls
 8015c6a:	2001      	movls	r0, #1
 8015c6c:	4770      	bx	lr
 8015c6e:	4608      	mov	r0, r1
 8015c70:	4770      	bx	lr
	...

08015c74 <__swsetup_r>:
 8015c74:	4b32      	ldr	r3, [pc, #200]	; (8015d40 <__swsetup_r+0xcc>)
 8015c76:	b570      	push	{r4, r5, r6, lr}
 8015c78:	681d      	ldr	r5, [r3, #0]
 8015c7a:	4606      	mov	r6, r0
 8015c7c:	460c      	mov	r4, r1
 8015c7e:	b125      	cbz	r5, 8015c8a <__swsetup_r+0x16>
 8015c80:	69ab      	ldr	r3, [r5, #24]
 8015c82:	b913      	cbnz	r3, 8015c8a <__swsetup_r+0x16>
 8015c84:	4628      	mov	r0, r5
 8015c86:	f7fd fb33 	bl	80132f0 <__sinit>
 8015c8a:	4b2e      	ldr	r3, [pc, #184]	; (8015d44 <__swsetup_r+0xd0>)
 8015c8c:	429c      	cmp	r4, r3
 8015c8e:	d10f      	bne.n	8015cb0 <__swsetup_r+0x3c>
 8015c90:	686c      	ldr	r4, [r5, #4]
 8015c92:	89a3      	ldrh	r3, [r4, #12]
 8015c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015c98:	0719      	lsls	r1, r3, #28
 8015c9a:	d42c      	bmi.n	8015cf6 <__swsetup_r+0x82>
 8015c9c:	06dd      	lsls	r5, r3, #27
 8015c9e:	d411      	bmi.n	8015cc4 <__swsetup_r+0x50>
 8015ca0:	2309      	movs	r3, #9
 8015ca2:	6033      	str	r3, [r6, #0]
 8015ca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015ca8:	81a3      	strh	r3, [r4, #12]
 8015caa:	f04f 30ff 	mov.w	r0, #4294967295
 8015cae:	e03e      	b.n	8015d2e <__swsetup_r+0xba>
 8015cb0:	4b25      	ldr	r3, [pc, #148]	; (8015d48 <__swsetup_r+0xd4>)
 8015cb2:	429c      	cmp	r4, r3
 8015cb4:	d101      	bne.n	8015cba <__swsetup_r+0x46>
 8015cb6:	68ac      	ldr	r4, [r5, #8]
 8015cb8:	e7eb      	b.n	8015c92 <__swsetup_r+0x1e>
 8015cba:	4b24      	ldr	r3, [pc, #144]	; (8015d4c <__swsetup_r+0xd8>)
 8015cbc:	429c      	cmp	r4, r3
 8015cbe:	bf08      	it	eq
 8015cc0:	68ec      	ldreq	r4, [r5, #12]
 8015cc2:	e7e6      	b.n	8015c92 <__swsetup_r+0x1e>
 8015cc4:	0758      	lsls	r0, r3, #29
 8015cc6:	d512      	bpl.n	8015cee <__swsetup_r+0x7a>
 8015cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015cca:	b141      	cbz	r1, 8015cde <__swsetup_r+0x6a>
 8015ccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015cd0:	4299      	cmp	r1, r3
 8015cd2:	d002      	beq.n	8015cda <__swsetup_r+0x66>
 8015cd4:	4630      	mov	r0, r6
 8015cd6:	f7fd fbf7 	bl	80134c8 <_free_r>
 8015cda:	2300      	movs	r3, #0
 8015cdc:	6363      	str	r3, [r4, #52]	; 0x34
 8015cde:	89a3      	ldrh	r3, [r4, #12]
 8015ce0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015ce4:	81a3      	strh	r3, [r4, #12]
 8015ce6:	2300      	movs	r3, #0
 8015ce8:	6063      	str	r3, [r4, #4]
 8015cea:	6923      	ldr	r3, [r4, #16]
 8015cec:	6023      	str	r3, [r4, #0]
 8015cee:	89a3      	ldrh	r3, [r4, #12]
 8015cf0:	f043 0308 	orr.w	r3, r3, #8
 8015cf4:	81a3      	strh	r3, [r4, #12]
 8015cf6:	6923      	ldr	r3, [r4, #16]
 8015cf8:	b94b      	cbnz	r3, 8015d0e <__swsetup_r+0x9a>
 8015cfa:	89a3      	ldrh	r3, [r4, #12]
 8015cfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015d04:	d003      	beq.n	8015d0e <__swsetup_r+0x9a>
 8015d06:	4621      	mov	r1, r4
 8015d08:	4630      	mov	r0, r6
 8015d0a:	f000 f847 	bl	8015d9c <__smakebuf_r>
 8015d0e:	89a0      	ldrh	r0, [r4, #12]
 8015d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015d14:	f010 0301 	ands.w	r3, r0, #1
 8015d18:	d00a      	beq.n	8015d30 <__swsetup_r+0xbc>
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	60a3      	str	r3, [r4, #8]
 8015d1e:	6963      	ldr	r3, [r4, #20]
 8015d20:	425b      	negs	r3, r3
 8015d22:	61a3      	str	r3, [r4, #24]
 8015d24:	6923      	ldr	r3, [r4, #16]
 8015d26:	b943      	cbnz	r3, 8015d3a <__swsetup_r+0xc6>
 8015d28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015d2c:	d1ba      	bne.n	8015ca4 <__swsetup_r+0x30>
 8015d2e:	bd70      	pop	{r4, r5, r6, pc}
 8015d30:	0781      	lsls	r1, r0, #30
 8015d32:	bf58      	it	pl
 8015d34:	6963      	ldrpl	r3, [r4, #20]
 8015d36:	60a3      	str	r3, [r4, #8]
 8015d38:	e7f4      	b.n	8015d24 <__swsetup_r+0xb0>
 8015d3a:	2000      	movs	r0, #0
 8015d3c:	e7f7      	b.n	8015d2e <__swsetup_r+0xba>
 8015d3e:	bf00      	nop
 8015d40:	20000020 	.word	0x20000020
 8015d44:	08016338 	.word	0x08016338
 8015d48:	08016358 	.word	0x08016358
 8015d4c:	08016318 	.word	0x08016318

08015d50 <__swhatbuf_r>:
 8015d50:	b570      	push	{r4, r5, r6, lr}
 8015d52:	460e      	mov	r6, r1
 8015d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015d58:	2900      	cmp	r1, #0
 8015d5a:	b096      	sub	sp, #88	; 0x58
 8015d5c:	4614      	mov	r4, r2
 8015d5e:	461d      	mov	r5, r3
 8015d60:	da08      	bge.n	8015d74 <__swhatbuf_r+0x24>
 8015d62:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015d66:	2200      	movs	r2, #0
 8015d68:	602a      	str	r2, [r5, #0]
 8015d6a:	061a      	lsls	r2, r3, #24
 8015d6c:	d410      	bmi.n	8015d90 <__swhatbuf_r+0x40>
 8015d6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015d72:	e00e      	b.n	8015d92 <__swhatbuf_r+0x42>
 8015d74:	466a      	mov	r2, sp
 8015d76:	f000 f851 	bl	8015e1c <_fstat_r>
 8015d7a:	2800      	cmp	r0, #0
 8015d7c:	dbf1      	blt.n	8015d62 <__swhatbuf_r+0x12>
 8015d7e:	9a01      	ldr	r2, [sp, #4]
 8015d80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015d84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015d88:	425a      	negs	r2, r3
 8015d8a:	415a      	adcs	r2, r3
 8015d8c:	602a      	str	r2, [r5, #0]
 8015d8e:	e7ee      	b.n	8015d6e <__swhatbuf_r+0x1e>
 8015d90:	2340      	movs	r3, #64	; 0x40
 8015d92:	2000      	movs	r0, #0
 8015d94:	6023      	str	r3, [r4, #0]
 8015d96:	b016      	add	sp, #88	; 0x58
 8015d98:	bd70      	pop	{r4, r5, r6, pc}
	...

08015d9c <__smakebuf_r>:
 8015d9c:	898b      	ldrh	r3, [r1, #12]
 8015d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015da0:	079d      	lsls	r5, r3, #30
 8015da2:	4606      	mov	r6, r0
 8015da4:	460c      	mov	r4, r1
 8015da6:	d507      	bpl.n	8015db8 <__smakebuf_r+0x1c>
 8015da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015dac:	6023      	str	r3, [r4, #0]
 8015dae:	6123      	str	r3, [r4, #16]
 8015db0:	2301      	movs	r3, #1
 8015db2:	6163      	str	r3, [r4, #20]
 8015db4:	b002      	add	sp, #8
 8015db6:	bd70      	pop	{r4, r5, r6, pc}
 8015db8:	ab01      	add	r3, sp, #4
 8015dba:	466a      	mov	r2, sp
 8015dbc:	f7ff ffc8 	bl	8015d50 <__swhatbuf_r>
 8015dc0:	9900      	ldr	r1, [sp, #0]
 8015dc2:	4605      	mov	r5, r0
 8015dc4:	4630      	mov	r0, r6
 8015dc6:	f7fd fbeb 	bl	80135a0 <_malloc_r>
 8015dca:	b948      	cbnz	r0, 8015de0 <__smakebuf_r+0x44>
 8015dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015dd0:	059a      	lsls	r2, r3, #22
 8015dd2:	d4ef      	bmi.n	8015db4 <__smakebuf_r+0x18>
 8015dd4:	f023 0303 	bic.w	r3, r3, #3
 8015dd8:	f043 0302 	orr.w	r3, r3, #2
 8015ddc:	81a3      	strh	r3, [r4, #12]
 8015dde:	e7e3      	b.n	8015da8 <__smakebuf_r+0xc>
 8015de0:	4b0d      	ldr	r3, [pc, #52]	; (8015e18 <__smakebuf_r+0x7c>)
 8015de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8015de4:	89a3      	ldrh	r3, [r4, #12]
 8015de6:	6020      	str	r0, [r4, #0]
 8015de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015dec:	81a3      	strh	r3, [r4, #12]
 8015dee:	9b00      	ldr	r3, [sp, #0]
 8015df0:	6163      	str	r3, [r4, #20]
 8015df2:	9b01      	ldr	r3, [sp, #4]
 8015df4:	6120      	str	r0, [r4, #16]
 8015df6:	b15b      	cbz	r3, 8015e10 <__smakebuf_r+0x74>
 8015df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015dfc:	4630      	mov	r0, r6
 8015dfe:	f000 f81f 	bl	8015e40 <_isatty_r>
 8015e02:	b128      	cbz	r0, 8015e10 <__smakebuf_r+0x74>
 8015e04:	89a3      	ldrh	r3, [r4, #12]
 8015e06:	f023 0303 	bic.w	r3, r3, #3
 8015e0a:	f043 0301 	orr.w	r3, r3, #1
 8015e0e:	81a3      	strh	r3, [r4, #12]
 8015e10:	89a0      	ldrh	r0, [r4, #12]
 8015e12:	4305      	orrs	r5, r0
 8015e14:	81a5      	strh	r5, [r4, #12]
 8015e16:	e7cd      	b.n	8015db4 <__smakebuf_r+0x18>
 8015e18:	08013289 	.word	0x08013289

08015e1c <_fstat_r>:
 8015e1c:	b538      	push	{r3, r4, r5, lr}
 8015e1e:	4d07      	ldr	r5, [pc, #28]	; (8015e3c <_fstat_r+0x20>)
 8015e20:	2300      	movs	r3, #0
 8015e22:	4604      	mov	r4, r0
 8015e24:	4608      	mov	r0, r1
 8015e26:	4611      	mov	r1, r2
 8015e28:	602b      	str	r3, [r5, #0]
 8015e2a:	f7f1 fece 	bl	8007bca <_fstat>
 8015e2e:	1c43      	adds	r3, r0, #1
 8015e30:	d102      	bne.n	8015e38 <_fstat_r+0x1c>
 8015e32:	682b      	ldr	r3, [r5, #0]
 8015e34:	b103      	cbz	r3, 8015e38 <_fstat_r+0x1c>
 8015e36:	6023      	str	r3, [r4, #0]
 8015e38:	bd38      	pop	{r3, r4, r5, pc}
 8015e3a:	bf00      	nop
 8015e3c:	2000a3b4 	.word	0x2000a3b4

08015e40 <_isatty_r>:
 8015e40:	b538      	push	{r3, r4, r5, lr}
 8015e42:	4d06      	ldr	r5, [pc, #24]	; (8015e5c <_isatty_r+0x1c>)
 8015e44:	2300      	movs	r3, #0
 8015e46:	4604      	mov	r4, r0
 8015e48:	4608      	mov	r0, r1
 8015e4a:	602b      	str	r3, [r5, #0]
 8015e4c:	f7f1 fecd 	bl	8007bea <_isatty>
 8015e50:	1c43      	adds	r3, r0, #1
 8015e52:	d102      	bne.n	8015e5a <_isatty_r+0x1a>
 8015e54:	682b      	ldr	r3, [r5, #0]
 8015e56:	b103      	cbz	r3, 8015e5a <_isatty_r+0x1a>
 8015e58:	6023      	str	r3, [r4, #0]
 8015e5a:	bd38      	pop	{r3, r4, r5, pc}
 8015e5c:	2000a3b4 	.word	0x2000a3b4

08015e60 <_init>:
 8015e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e62:	bf00      	nop
 8015e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e66:	bc08      	pop	{r3}
 8015e68:	469e      	mov	lr, r3
 8015e6a:	4770      	bx	lr

08015e6c <_fini>:
 8015e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015e6e:	bf00      	nop
 8015e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015e72:	bc08      	pop	{r3}
 8015e74:	469e      	mov	lr, r3
 8015e76:	4770      	bx	lr
