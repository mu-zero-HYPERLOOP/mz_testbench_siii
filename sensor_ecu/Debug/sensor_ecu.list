
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac4  0801c608  0801c608  0002c608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d0cc  0801d0cc  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  0801d0cc  0801d0cc  0002d0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d0d4  0801d0d4  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000028  0801d0d4  0801d0d4  0002d0d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801d0fc  0801d0fc  0002d0fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0801d104  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030204  2**0
                  CONTENTS
 10 .bss          0000a380  20000208  20000208  00030208  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  2000a588  2000a588  00030208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00062663  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000f30c  00000000  00000000  00092897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003ed8  00000000  00000000  000a1ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003ad8  00000000  00000000  000a5a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00034f0b  00000000  00000000  000a9558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004edad  00000000  00000000  000de463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108515  00000000  00000000  0012d210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00235725  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0001209c  00000000  00000000  00235778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801c5f0 	.word	0x0801c5f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	0801c5f0 	.word	0x0801c5f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	711a      	strb	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	715a      	strb	r2, [r3, #5]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000fde:	b490      	push	{r4, r7}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e009      	b.n	800101e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	0e0a      	lsrs	r2, r1, #24
 800104c:	2300      	movs	r3, #0
 800104e:	b2d3      	uxtb	r3, r2
 8001050:	4323      	orrs	r3, r4
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0a02      	lsrs	r2, r0, #8
 8001068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800106c:	0a0b      	lsrs	r3, r1, #8
 800106e:	b2d4      	uxtb	r4, r2
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c0a      	lsrs	r2, r1, #16
 8001080:	2300      	movs	r3, #0
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	4322      	orrs	r2, r4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0c02      	lsrs	r2, r0, #16
 800109e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a2:	0c0b      	lsrs	r3, r1, #16
 80010a4:	b2d4      	uxtb	r4, r2
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0a0a      	lsrs	r2, r1, #8
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	4322      	orrs	r2, r4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	0e02      	lsrs	r2, r0, #24
 80010d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d8:	0e0b      	lsrs	r3, r1, #24
 80010da:	b2d4      	uxtb	r4, r2
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	000a      	movs	r2, r1
 80010ec:	2300      	movs	r3, #0
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3303      	adds	r3, #3
 80010f4:	4322      	orrs	r2, r4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	000a      	movs	r2, r1
 800110a:	2300      	movs	r3, #0
 800110c:	b2d4      	uxtb	r4, r2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	0e02      	lsrs	r2, r0, #24
 800111e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001122:	0e0b      	lsrs	r3, r1, #24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	4322      	orrs	r2, r4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0a0a      	lsrs	r2, r1, #8
 8001140:	2300      	movs	r3, #0
 8001142:	b2d4      	uxtb	r4, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	0c02      	lsrs	r2, r0, #16
 8001154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001158:	0c0b      	lsrs	r3, r1, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3305      	adds	r3, #5
 8001160:	4322      	orrs	r2, r4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	0c0a      	lsrs	r2, r1, #16
 8001176:	2300      	movs	r3, #0
 8001178:	b2d4      	uxtb	r4, r2
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	0a02      	lsrs	r2, r0, #8
 800118a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800118e:	0a0b      	lsrs	r3, r1, #8
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4322      	orrs	r2, r4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0e0a      	lsrs	r2, r1, #24
 80011ac:	2300      	movs	r3, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3307      	adds	r3, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        }
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr

080011cc <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	6093      	str	r3, [r2, #8]
 80011e0:	60d3      	str	r3, [r2, #12]
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffe3 	bl	80011cc <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f103 0218 	add.w	r2, r3, #24
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fee4 	bl	8000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001216:	bf00      	nop
        }
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffde 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZNK3can11MessageBase4sendEm+0x54>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	f014 f9c0 	bl	80155c8 <osMessageQueuePut>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8001258:	f017 fe2c 	bl	8018eb4 <vPortEnterCritical>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZNK3can11MessageBase4sendEm+0x58>)
 8001262:	f013 fd5b 	bl	8014d1c <printf_>
 8001266:	f017 fe55 	bl	8018f14 <vPortExitCritical>
            }
        }
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200007b4 	.word	0x200007b4
 8001278:	0801c608 	.word	0x0801c608

0800127c <_ZN3can7MessageINS_8messages12SensorF_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	2204      	movs	r2, #4
 800128a:	2181      	movs	r1, #129	; 0x81
 800128c:	f7ff fe7e 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_ZN7canzero9emergency14consumer_entryEPv>:
#include "task.h"

TaskHandle_t emergencyTaskHandle;


void canzero::emergency::consumer_entry(void* argv){
 800129c:	b5b0      	push	{r4, r5, r7, lr}
 800129e:	b08c      	sub	sp, #48	; 0x30
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	emergencyTaskHandle = xTaskGetCurrentTaskHandle();
 80012a4:	f016 fe5c 	bl	8017f60 <xTaskGetCurrentTaskHandle>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4a19      	ldr	r2, [pc, #100]	; (8001310 <_ZN7canzero9emergency14consumer_entryEPv+0x74>)
 80012ac:	6013      	str	r3, [r2, #0]

	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80012ae:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ffdf 	bl	800127c <_ZN3can7MessageINS_8messages12SensorF_EMCYEEC1Ev>


	uint32_t emergencyBuffer = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80012c6:	f107 020c 	add.w	r2, r7, #12
 80012ca:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012ce:	2100      	movs	r1, #0
 80012d0:	2000      	movs	r0, #0
 80012d2:	f016 ffdf 	bl	8018294 <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012da:	429a      	cmp	r2, r3
 80012dc:	d001      	beq.n	80012e2 <_ZN7canzero9emergency14consumer_entryEPv+0x46>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80012de:	f001 f871 	bl	80023c4 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d103      	bne.n	80012f0 <_ZN7canzero9emergency14consumer_entryEPv+0x54>
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d00b      	beq.n	8001308 <_ZN7canzero9emergency14consumer_entryEPv+0x6c>
			emcyMessage.intel = emergencyBuffer;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	2200      	movs	r2, #0
 80012f4:	461c      	mov	r4, r3
 80012f6:	4615      	mov	r5, r2
 80012f8:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80012fc:	f107 0310 	add.w	r3, r7, #16
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ff8c 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800130c:	e7db      	b.n	80012c6 <_ZN7canzero9emergency14consumer_entryEPv+0x2a>
 800130e:	bf00      	nop
 8001310:	20000224 	.word	0x20000224

08001314 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff53 	bl	80011cc <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001326:	f240 7301 	movw	r3, #1793	; 0x701
 800132a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800132c:	2301      	movs	r3, #1
 800132e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001334:	f000 ff50 	bl	80021d8 <_ZN7canzero9getStatusEv>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	f107 010c 	add.w	r1, r7, #12
 8001346:	2300      	movs	r3, #0
 8001348:	2200      	movs	r2, #0
 800134a:	f014 f93d 	bl	80155c8 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 800134e:	f000 f843 	bl	80013d8 <_ZN7canzero9heartbeat11getIntervalEv>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8001360:	fba2 2303 	umull	r2, r3, r2, r3
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	4618      	mov	r0, r3
 8001368:	f013 fe52 	bl	8015010 <osDelay>
		frame ++;
 800136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800136e:	3301      	adds	r3, #1
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001372:	e7df      	b.n	8001334 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 8001374:	200007b4 	.word	0x200007b4
 8001378:	10624dd3 	.word	0x10624dd3

0800137c <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b08d      	sub	sp, #52	; 0x34
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 8001386:	681c      	ldr	r4, [r3, #0]
 8001388:	f000 f826 	bl	80013d8 <_ZN7canzero9heartbeat11getIntervalEv>
 800138c:	4603      	mov	r3, r0
 800138e:	3305      	adds	r3, #5
 8001390:	461a      	mov	r2, r3
 8001392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	4a0e      	ldr	r2, [pc, #56]	; (80013d4 <_ZN7canzero9heartbeat14consumer_entryEPv+0x58>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	099b      	lsrs	r3, r3, #6
 80013a2:	f107 010c 	add.w	r1, r7, #12
 80013a6:	2224      	movs	r2, #36	; 0x24
 80013a8:	4620      	mov	r0, r4
 80013aa:	f015 fd33 	bl	8016e14 <xStreamBufferReceive>
 80013ae:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bf14      	ite	ne
 80013b4:	2301      	movne	r3, #1
 80013b6:	2300      	moveq	r3, #0
 80013b8:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d005      	beq.n	80013ca <_ZN7canzero9heartbeat14consumer_entryEPv+0x4e>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 80013be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 feec 	bl	80021a0 <_ZN7canzero9setStatusE9cz_status>
 80013c8:	e7dc      	b.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
		}
		else{
			canzero::handle_heartbeat_miss();
 80013ca:	f001 f802 	bl	80023d2 <_ZN7canzero21handle_heartbeat_missEv>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013ce:	e7d9      	b.n	8001384 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80013d0:	20000228 	.word	0x20000228
 80013d4:	10624dd3 	.word	0x10624dd3

080013d8 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80013dc:	f004 ffc8 	bl	8006370 <_Z24OD_HeartbeatInterval_getv>
 80013e0:	4603      	mov	r3, r0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	bd80      	pop	{r7, pc}
	...

080013e8 <_Z41__static_initialization_and_destruction_0ii>:
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10c      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	4293      	cmp	r3, r2
 8001400:	d107      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8001402:	2201      	movs	r2, #1
 8001404:	2100      	movs	r1, #0
 8001406:	20c8      	movs	r0, #200	; 0xc8
 8001408:	f015 fb84 	bl	8016b14 <xStreamBufferGenericCreate>
 800140c:	4603      	mov	r3, r0
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000228 	.word	0x20000228

08001420 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
 8001424:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ffdd 	bl	80013e8 <_Z41__static_initialization_and_destruction_0ii>
 800142e:	bd80      	pop	{r7, pc}

08001430 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	2203      	movs	r2, #3
 8001466:	4798      	blx	r3
    }
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	2b00      	cmp	r3, #0
 8001480:	bf0c      	ite	eq
 8001482:	2301      	moveq	r3, #1
 8001484:	2300      	movne	r3, #0
 8001486:	b2db      	uxtb	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ffd4 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f8e9 	bl	8001690 <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_ZN7canzero10receiver_tD1Ev>:
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff ffde 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_ZN7canzero10receiver_taSERKS0_>:
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	6039      	str	r1, [r7, #0]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f8fb 	bl	80016ee <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	611a      	str	r2, [r3, #16]
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	7d1a      	ldrb	r2, [r3, #20]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	751a      	strb	r2, [r3, #20]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	699a      	ldr	r2, [r3, #24]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	619a      	str	r2, [r3, #24]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>:
};

static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
uint32_t g_size = 0;

unsigned int registerMessageReceiverInternal(std::function<void(RxMessage&)> receiver, uint32_t msgId, bool extendedId){
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b08d      	sub	sp, #52	; 0x34
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	4613      	mov	r3, r2
 8001528:	71fb      	strb	r3, [r7, #7]
	printf("registered Message receiver for id = %u\n", msgId);
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x7c>)
 800152e:	f013 fbf5 	bl	8014d1c <printf_>
	taskENTER_CRITICAL();
 8001532:	f017 fcbf 	bl	8018eb4 <vPortEnterCritical>
	const unsigned int id = receiverIdAcc++;
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	1c5a      	adds	r2, r3, #1
 800153c:	4917      	ldr	r1, [pc, #92]	; (800159c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 800153e:	600a      	str	r2, [r1, #0]
 8001540:	62fb      	str	r3, [r7, #44]	; 0x2c
	const receiver_t recv = {
		.m_callback = receiver,
		.m_id = msgId,
		.m_extendedId = extendedId,
		.m_receiverId = id
	};
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	68f9      	ldr	r1, [r7, #12]
 8001548:	4618      	mov	r0, r3
 800154a:	f000 f8ae 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	623b      	str	r3, [r7, #32]
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
	g_receivers[g_size++] = recv;
 800155c:	4b10      	ldr	r3, [pc, #64]	; (80015a0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	1c53      	adds	r3, r2, #1
 8001562:	490f      	ldr	r1, [pc, #60]	; (80015a0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 8001564:	600b      	str	r3, [r1, #0]
 8001566:	4613      	mov	r3, r2
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	1a9b      	subs	r3, r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x88>)
 8001570:	4413      	add	r3, r2
 8001572:	f107 0210 	add.w	r2, r7, #16
 8001576:	4611      	mov	r1, r2
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ffb2 	bl	80014e2 <_ZN7canzero10receiver_taSERKS0_>
	taskEXIT_CRITICAL();
 800157e:	f017 fcc9 	bl	8018f14 <vPortExitCritical>
	return id;
 8001582:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	};
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff9d 	bl	80014c8 <_ZN7canzero10receiver_tD1Ev>
	return id;
 800158e:	4623      	mov	r3, r4
}
 8001590:	4618      	mov	r0, r3
 8001592:	3734      	adds	r7, #52	; 0x34
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	0801c63c 	.word	0x0801c63c
 800159c:	2000022c 	.word	0x2000022c
 80015a0:	200007a8 	.word	0x200007a8
 80015a4:	20000230 	.word	0x20000230

080015a8 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:

bool processRxMessageReceiver(RxMessage& message){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 80015b0:	2300      	movs	r3, #0
 80015b2:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d12f      	bne.n	800161c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	4b31      	ldr	r3, [pc, #196]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d258      	bcs.n	800167c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 80015ca:	4930      	ldr	r1, [pc, #192]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4613      	mov	r3, r2
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	440b      	add	r3, r1
 80015d8:	3314      	adds	r3, #20
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d119      	bne.n	8001614 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6819      	ldr	r1, [r3, #0]
 80015e4:	4829      	ldr	r0, [pc, #164]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4613      	mov	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4403      	add	r3, r0
 80015f2:	3310      	adds	r3, #16
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4299      	cmp	r1, r3
 80015f8:	d10c      	bne.n	8001614 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4613      	mov	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	1a9b      	subs	r3, r3, r2
 8001602:	009b      	lsls	r3, r3, #2
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001606:	4413      	add	r3, r2
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4618      	mov	r0, r3
 800160c:	f000 f88a 	bl	8001724 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001610:	2301      	movs	r3, #1
 8001612:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	3301      	adds	r3, #1
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	e7d1      	b.n	80015c0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	4b19      	ldr	r3, [pc, #100]	; (8001688 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	429a      	cmp	r2, r3
 8001628:	d228      	bcs.n	800167c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 800162a:	4918      	ldr	r1, [pc, #96]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3314      	adds	r3, #20
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d119      	bne.n	8001674 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	4811      	ldr	r0, [pc, #68]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4613      	mov	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	1a9b      	subs	r3, r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4403      	add	r3, r0
 8001652:	3310      	adds	r3, #16
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4299      	cmp	r1, r3
 8001658:	d10c      	bne.n	8001674 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4a09      	ldr	r2, [pc, #36]	; (800168c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001666:	4413      	add	r3, r2
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f85a 	bl	8001724 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001670:	2301      	movs	r3, #1
 8001672:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3301      	adds	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e7d1      	b.n	8001620 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 800167c:	7dfb      	ldrb	r3, [r7, #23]
}
 800167e:	4618      	mov	r0, r3
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200007a8 	.word	0x200007a8
 800168c:	20000230 	.word	0x20000230

08001690 <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fec8 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff feba 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 80016bc:	6838      	ldr	r0, [r7, #0]
 80016be:	f000 f84d 	bl	800175c <_ZNKSt8functionIFvR9RxMessageEEcvbEv>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00d      	beq.n	80016e4 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	6839      	ldr	r1, [r7, #0]
 80016d0:	2202      	movs	r2, #2
 80016d2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68da      	ldr	r2, [r3, #12]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	609a      	str	r2, [r3, #8]
	}
    }
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>:
      operator=(const function& __x)
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 80016f8:	f107 0308 	add.w	r3, r7, #8
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f7ff ffd3 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8001704:	f107 0308 	add.w	r3, r7, #8
 8001708:	6879      	ldr	r1, [r7, #4]
 800170a:	4618      	mov	r0, r3
 800170c:	f000 f836 	bl	800177c <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff febd 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	return *this;
 800171a:	687b      	ldr	r3, [r7, #4]
      }
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001724:	b5b0      	push	{r4, r5, r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe9e 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 800173c:	f017 feeb 	bl	8019516 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68dc      	ldr	r4, [r3, #12]
 8001744:	687d      	ldr	r5, [r7, #4]
 8001746:	6838      	ldr	r0, [r7, #0]
 8001748:	f000 f839 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800174c:	4603      	mov	r3, r0
 800174e:	4619      	mov	r1, r3
 8001750:	4628      	mov	r0, r5
 8001752:	47a0      	blx	r4
 8001754:	bf00      	nop
    }
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bdb0      	pop	{r4, r5, r7, pc}

0800175c <_ZNKSt8functionIFvR9RxMessageEEcvbEv>:
      explicit operator bool() const noexcept
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fe83 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 800176c:	4603      	mov	r3, r0
 800176e:	f083 0301 	eor.w	r3, r3, #1
 8001772:	b2db      	uxtb	r3, r3
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>:
      void swap(function& __x) noexcept
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f000 f82c 	bl	80017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f103 0208 	add.w	r2, r3, #8
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	3308      	adds	r3, #8
 800179c:	4619      	mov	r1, r3
 800179e:	4610      	mov	r0, r2
 80017a0:	f000 f855 	bl	800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f103 020c 	add.w	r2, r3, #12
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	330c      	adds	r3, #12
 80017ae:	4619      	mov	r1, r3
 80017b0:	4610      	mov	r0, r2
 80017b2:	f000 f876 	bl	80018a2 <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4618      	mov	r0, r3
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffed 	bl	80017d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80017fa:	4602      	mov	r2, r0
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001804:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001808:	6838      	ldr	r0, [r7, #0]
 800180a:	f7ff ffe3 	bl	80017d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800180e:	4602      	mov	r2, r0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001816:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff ffd8 	bl	80017d4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001824:	4602      	mov	r2, r0
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800182c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ffed 	bl	8001838 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800185e:	4603      	mov	r3, r0
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001864:	6838      	ldr	r0, [r7, #0]
 8001866:	f7ff ffe7 	bl	8001838 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800186a:	4603      	mov	r3, r0
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff ffde 	bl	8001838 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 800187c:	4603      	mov	r3, r0
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	601a      	str	r2, [r3, #0]
    }
 8001884:	bf00      	nop
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr

080018a2 <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ffed 	bl	800188c <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 80018b2:	4603      	mov	r3, r0
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80018b8:	6838      	ldr	r0, [r7, #0]
 80018ba:	f7ff ffe7 	bl	800188c <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 80018be:	4603      	mov	r3, r0
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff ffde 	bl	800188c <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 80018d0:	4603      	mov	r3, r0
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	601a      	str	r2, [r3, #0]
    }
 80018d8:	bf00      	nop
 80018da:	3710      	adds	r7, #16
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	taskEXIT_CRITICAL();
}

}
 80018e0:	b5b0      	push	{r4, r5, r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d10f      	bne.n	8001910 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d10a      	bne.n	8001910 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80018fc:	2431      	movs	r4, #49	; 0x31
 80018fe:	461d      	mov	r5, r3
 8001900:	2c00      	cmp	r4, #0
 8001902:	db05      	blt.n	8001910 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001904:	4628      	mov	r0, r5
 8001906:	f7ff fdd2 	bl	80014ae <_ZN7canzero10receiver_tC1Ev>
 800190a:	351c      	adds	r5, #28
 800190c:	3c01      	subs	r4, #1
 800190e:	e7f7      	b.n	8001900 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10d      	bne.n	8001932 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800191c:	4293      	cmp	r3, r2
 800191e:	d108      	bne.n	8001932 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001920:	4c07      	ldr	r4, [pc, #28]	; (8001940 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001924:	429c      	cmp	r4, r3
 8001926:	d004      	beq.n	8001932 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001928:	3c1c      	subs	r4, #28
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff fdcc 	bl	80014c8 <_ZN7canzero10receiver_tD1Ev>
 8001930:	e7f7      	b.n	8001922 <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bdb0      	pop	{r4, r5, r7, pc}
 800193a:	bf00      	nop
 800193c:	20000230 	.word	0x20000230
 8001940:	200007a8 	.word	0x200007a8

08001944 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
 8001948:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800194c:	2001      	movs	r0, #1
 800194e:	f7ff ffc7 	bl	80018e0 <_Z41__static_initialization_and_destruction_0ii>
 8001952:	bd80      	pop	{r7, pc}

08001954 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
 8001958:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff ffbf 	bl	80018e0 <_Z41__static_initialization_and_destruction_0ii>
 8001962:	bd80      	pop	{r7, pc}

08001964 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 8001964:	b084      	sub	sp, #16
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
 800196a:	f107 0c08 	add.w	ip, r7, #8
 800196e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 8001972:	f107 0008 	add.w	r0, r7, #8
 8001976:	f000 f835 	bl	80019e4 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_Z9processRX9RxMessage+0x74>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	230a      	movs	r3, #10
 8001986:	2224      	movs	r2, #36	; 0x24
 8001988:	f107 0108 	add.w	r1, r7, #8
 800198c:	f015 f950 	bl	8016c30 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 8001990:	e01c      	b.n	80019cc <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 8001992:	f107 0008 	add.w	r0, r7, #8
 8001996:	f7ff fe07 	bl	80015a8 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d115      	bne.n	80019cc <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 80019a6:	f017 fa85 	bl	8018eb4 <vPortEnterCritical>
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	4619      	mov	r1, r3
 80019ae:	480b      	ldr	r0, [pc, #44]	; (80019dc <_Z9processRX9RxMessage+0x78>)
 80019b0:	f013 f9b4 	bl	8014d1c <printf_>
 80019b4:	f017 faae 	bl	8018f14 <vPortExitCritical>
}
 80019b8:	e008      	b.n	80019cc <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 80019ba:	f017 fa7b 	bl	8018eb4 <vPortEnterCritical>
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4807      	ldr	r0, [pc, #28]	; (80019e0 <_Z9processRX9RxMessage+0x7c>)
 80019c4:	f013 f9aa 	bl	8014d1c <printf_>
 80019c8:	f017 faa4 	bl	8018f14 <vPortExitCritical>
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019d4:	b004      	add	sp, #16
 80019d6:	4770      	bx	lr
 80019d8:	200007ac 	.word	0x200007ac
 80019dc:	0801c668 	.word	0x0801c668
 80019e0:	0801c68c 	.word	0x0801c68c

080019e4 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f240 12c1 	movw	r2, #449	; 0x1c1
 80019fc:	4293      	cmp	r3, r2
 80019fe:	bf0c      	ite	eq
 8001a00:	2301      	moveq	r3, #1
 8001a02:	2300      	movne	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	e000      	b.n	8001a0a <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001a08:	2300      	movs	r3, #0
    }
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <_Z41__static_initialization_and_destruction_0ii>:
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d10c      	bne.n	8001a42 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d107      	bne.n	8001a42 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 8001a32:	2201      	movs	r2, #1
 8001a34:	2100      	movs	r1, #0
 8001a36:	20c8      	movs	r0, #200	; 0xc8
 8001a38:	f015 f86c 	bl	8016b14 <xStreamBufferGenericCreate>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001a40:	6013      	str	r3, [r2, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200007ac 	.word	0x200007ac

08001a50 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff ffdd 	bl	8001a18 <_Z41__static_initialization_and_destruction_0ii>
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d10c      	bne.n	8001a8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d107      	bne.n	8001a8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001a7a:	4a06      	ldr	r2, [pc, #24]	; (8001a94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001a7c:	2124      	movs	r1, #36	; 0x24
 8001a7e:	2010      	movs	r0, #16
 8001a80:	f013 fd2e 	bl	80154e0 <osMessageQueueNew>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001a88:	6013      	str	r3, [r2, #0]
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	0801c8f8 	.word	0x0801c8f8
 8001a98:	200007b0 	.word	0x200007b0

08001a9c <_GLOBAL__sub_I_czReceiveQueue>:
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001aa4:	2001      	movs	r0, #1
 8001aa6:	f7ff ffdb 	bl	8001a60 <_Z41__static_initialization_and_destruction_0ii>
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ab0:	f3bf 8f4f 	dsb	sy
}
 8001ab4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <__NVIC_SystemReset+0x24>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001abe:	4904      	ldr	r1, [pc, #16]	; (8001ad0 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <__NVIC_SystemReset+0x28>)
 8001ac2:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001ac4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001ac6:	f3bf 8f4f 	dsb	sy
}
 8001aca:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001acc:	bf00      	nop
 8001ace:	e7fd      	b.n	8001acc <__NVIC_SystemReset+0x20>
 8001ad0:	e000ed00 	.word	0xe000ed00
 8001ad4:	05fa0004 	.word	0x05fa0004

08001ad8 <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b092      	sub	sp, #72	; 0x48
 8001adc:	af06      	add	r7, sp, #24
 8001ade:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001ae0:	4b26      	ldr	r3, [pc, #152]	; (8001b7c <_Z15cz_receive_taskPv+0xa4>)
 8001ae2:	6818      	ldr	r0, [r3, #0]
 8001ae4:	f107 010c 	add.w	r1, r7, #12
 8001ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8001aec:	2200      	movs	r2, #0
 8001aee:	f013 fdcb 	bl	8015688 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d136      	bne.n	8001b66 <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	4618      	mov	r0, r3
 8001afe:	f000 f8e3 	bl	8001cc8 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001b08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b0c:	2bff      	cmp	r3, #255	; 0xff
 8001b0e:	d1e7      	bne.n	8001ae0 <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001b10:	f7ff ffcc 	bl	8001aac <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8001b14:	f107 030c 	add.w	r3, r7, #12
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f8ee 	bl	8001cfa <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d005      	beq.n	8001b30 <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 8001b24:	f107 030c 	add.w	r3, r7, #12
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 fd37 	bl	800559c <_Z22handleSDORequestUploadRK9RxMessage>
 8001b2e:	e7d7      	b.n	8001ae0 <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f8f9 	bl	8001d2c <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d005      	beq.n	8001b4c <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	4618      	mov	r0, r3
 8001b46:	f002 ff9e 	bl	8004a86 <_Z24handleSDORequestDownloadRK9RxMessage>
 8001b4a:	e7c9      	b.n	8001ae0 <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001b4c:	466d      	mov	r5, sp
 8001b4e:	f107 041c 	add.w	r4, r7, #28
 8001b52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	602b      	str	r3, [r5, #0]
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b60:	f7ff ff00 	bl	8001964 <_Z9processRX9RxMessage>
 8001b64:	e7bc      	b.n	8001ae0 <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d1b9      	bne.n	8001ae0 <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001b6c:	f017 f9a2 	bl	8018eb4 <vPortEnterCritical>
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <_Z15cz_receive_taskPv+0xa8>)
 8001b72:	f013 f8d3 	bl	8014d1c <printf_>
 8001b76:	f017 f9cd 	bl	8018f14 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001b7a:	e7b1      	b.n	8001ae0 <_Z15cz_receive_taskPv+0x8>
 8001b7c:	200007b0 	.word	0x200007b0
 8001b80:	0801c6c0 	.word	0x0801c6c0

08001b84 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b096      	sub	sp, #88	; 0x58
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001b8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b90:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b94:	2100      	movs	r1, #0
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f00d fa66 	bl	800f068 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001b9c:	f107 040c 	add.w	r4, r7, #12
 8001ba0:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ba8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001bac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	657b      	str	r3, [r7, #84]	; 0x54
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bb6:	2b07      	cmp	r3, #7
 8001bb8:	dc0e      	bgt.n	8001bd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001bba:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bc0:	4413      	add	r3, r2
 8001bc2:	7819      	ldrb	r1, [r3, #0]
 8001bc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bca:	4413      	add	r3, r2
 8001bcc:	460a      	mov	r2, r1
 8001bce:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	657b      	str	r3, [r7, #84]	; 0x54
 8001bd6:	e7ed      	b.n	8001bb4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	f107 010c 	add.w	r1, r7, #12
 8001be0:	2300      	movs	r3, #0
 8001be2:	2200      	movs	r2, #0
 8001be4:	f013 fcf0 	bl	80155c8 <osMessageQueuePut>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0

	}
}
 8001bec:	bf00      	nop
 8001bee:	3758      	adds	r7, #88	; 0x58
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf4:	200007b0 	.word	0x200007b0

08001bf8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001bf8:	b5b0      	push	{r4, r5, r7, lr}
 8001bfa:	b096      	sub	sp, #88	; 0x58
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001c00:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c04:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001c08:	2101      	movs	r1, #1
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f00d fa2c 	bl	800f068 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001c10:	f107 040c 	add.w	r4, r7, #12
 8001c14:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001c24:	2300      	movs	r3, #0
 8001c26:	657b      	str	r3, [r7, #84]	; 0x54
 8001c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c2a:	2b07      	cmp	r3, #7
 8001c2c:	dc0e      	bgt.n	8001c4c <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001c2e:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c34:	4413      	add	r3, r2
 8001c36:	7819      	ldrb	r1, [r3, #0]
 8001c38:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3e:	4413      	add	r3, r2
 8001c40:	460a      	mov	r2, r1
 8001c42:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001c44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c46:	3301      	adds	r3, #1
 8001c48:	657b      	str	r3, [r7, #84]	; 0x54
 8001c4a:	e7ed      	b.n	8001c28 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	f107 010c 	add.w	r1, r7, #12
 8001c54:	2300      	movs	r3, #0
 8001c56:	2200      	movs	r2, #0
 8001c58:	f013 fcb6 	bl	80155c8 <osMessageQueuePut>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0

	}
}
 8001c60:	bf00      	nop
 8001c62:	3758      	adds	r7, #88	; 0x58
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	200007b0 	.word	0x200007b0

08001c6c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f00d fd40 	bl	800f6fa <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001c7a:	f3ef 8211 	mrs	r2, BASEPRI
 8001c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c82:	f383 8811 	msr	BASEPRI, r3
 8001c86:	f3bf 8f6f 	isb	sy
 8001c8a:	f3bf 8f4f 	dsb	sy
 8001c8e:	60fa      	str	r2, [r7, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001c92:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <HAL_CAN_ErrorCallback+0x44>)
 8001c98:	f013 f840 	bl	8014d1c <printf_>
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001ca6:	bf00      	nop
}
 8001ca8:	bf00      	nop
 8001caa:	3718      	adds	r7, #24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	0801c6d8 	.word	0x0801c6d8

08001cb4 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f240 7281 	movw	r2, #1921	; 0x781
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e000      	b.n	8001cee <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001cec:	2300      	movs	r3, #0
    }
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr

08001cfa <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001d12:	4293      	cmp	r3, r2
 8001d14:	bf0c      	ite	eq
 8001d16:	2301      	moveq	r3, #1
 8001d18:	2300      	movne	r3, #0
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	e000      	b.n	8001d20 <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d1e:	2300      	movs	r3, #0
    }
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f240 6201 	movw	r2, #1537	; 0x601
 8001d44:	4293      	cmp	r3, r2
 8001d46:	bf0c      	ite	eq
 8001d48:	2301      	moveq	r3, #1
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	e000      	b.n	8001d52 <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001d50:	2300      	movs	r3, #0
    }
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d10c      	bne.n	8001d8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d107      	bne.n	8001d8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001d7a:	4a06      	ldr	r2, [pc, #24]	; (8001d94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	2010      	movs	r0, #16
 8001d80:	f013 fbae 	bl	80154e0 <osMessageQueueNew>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001d88:	6013      	str	r3, [r2, #0]
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	0801c910 	.word	0x0801c910
 8001d98:	200007b4 	.word	0x200007b4

08001d9c <_GLOBAL__sub_I_czSendQueue>:
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff ffdb 	bl	8001d60 <_Z41__static_initialization_and_destruction_0ii>
 8001daa:	bd80      	pop	{r7, pc}

08001dac <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b08e      	sub	sp, #56	; 0x38
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001db4:	f107 030c 	add.w	r3, r7, #12
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fa07 	bl	80011cc <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <_Z13cz_send_entryPv+0x180>)
 8001dc4:	6818      	ldr	r0, [r3, #0]
 8001dc6:	f107 010c 	add.w	r1, r7, #12
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f013 fc5a 	bl	8015688 <osMessageQueueGet>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bf14      	ite	ne
 8001dda:	2301      	movne	r3, #1
 8001ddc:	2300      	moveq	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001de4:	f00b fab4 	bl	800d350 <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d901      	bls.n	8001df2 <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001dee:	f00b faaf 	bl	800d350 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	0c1b      	lsrs	r3, r3, #16
 8001df6:	041b      	lsls	r3, r3, #16
 8001df8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e06:	d102      	bne.n	8001e0e <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001e08:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <_Z13cz_send_entryPv+0x184>)
 8001e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001e0c:	e010      	b.n	8001e30 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001e14:	d102      	bne.n	8001e1c <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001e16:	4b47      	ldr	r3, [pc, #284]	; (8001f34 <_Z13cz_send_entryPv+0x188>)
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
 8001e1a:	e009      	b.n	8001e30 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <_Z13cz_send_entryPv+0x184>)
 8001e28:	637b      	str	r3, [r7, #52]	; 0x34
 8001e2a:	e001      	b.n	8001e30 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001e2c:	4b41      	ldr	r3, [pc, #260]	; (8001f34 <_Z13cz_send_entryPv+0x188>)
 8001e2e:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001e30:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e32:	f00d f8e4 	bl	800effe <HAL_CAN_GetTxMailboxesFreeLevel>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001e46:	f107 0008 	add.w	r0, r7, #8
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	f103 0218 	add.w	r2, r3, #24
 8001e52:	f107 010c 	add.w	r1, r7, #12
 8001e56:	4603      	mov	r3, r0
 8001e58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001e5a:	f00c fff5 	bl	800ee48 <HAL_CAN_AddTxMessage>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf14      	ite	ne
 8001e64:	2301      	movne	r3, #1
 8001e66:	2300      	moveq	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d059      	beq.n	8001f22 <_Z13cz_send_entryPv+0x176>
				/* Transmission request Error */
				Error_Handler();
 8001e6e:	f00b fa6f 	bl	800d350 <Error_Handler>
 8001e72:	e056      	b.n	8001f22 <_Z13cz_send_entryPv+0x176>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e76:	4a2e      	ldr	r2, [pc, #184]	; (8001f30 <_Z13cz_send_entryPv+0x184>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d10c      	bne.n	8001e96 <_Z13cz_send_entryPv+0xea>
				OD_CAN1_DelayedTxMessages++;
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <_Z13cz_send_entryPv+0x18c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	4a2d      	ldr	r2, [pc, #180]	; (8001f38 <_Z13cz_send_entryPv+0x18c>)
 8001e84:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can1 tx mailbox overflow.\n")
 8001e86:	f017 f815 	bl	8018eb4 <vPortEnterCritical>
 8001e8a:	482c      	ldr	r0, [pc, #176]	; (8001f3c <_Z13cz_send_entryPv+0x190>)
 8001e8c:	f012 ff46 	bl	8014d1c <printf_>
 8001e90:	f017 f840 	bl	8018f14 <vPortExitCritical>
 8001e94:	e00b      	b.n	8001eae <_Z13cz_send_entryPv+0x102>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001e96:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <_Z13cz_send_entryPv+0x194>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	4a28      	ldr	r2, [pc, #160]	; (8001f40 <_Z13cz_send_entryPv+0x194>)
 8001e9e:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can2 tx mailbox overflow.\n")
 8001ea0:	f017 f808 	bl	8018eb4 <vPortEnterCritical>
 8001ea4:	4827      	ldr	r0, [pc, #156]	; (8001f44 <_Z13cz_send_entryPv+0x198>)
 8001ea6:	f012 ff39 	bl	8014d1c <printf_>
 8001eaa:	f017 f833 	bl	8018f14 <vPortExitCritical>
			}

			osDelay(1);		// Use smallest delay possible
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f013 f8ae 	bl	8015010 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001eb4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001eb6:	f00d f8a2 	bl	800effe <HAL_CAN_GetTxMailboxesFreeLevel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	bf14      	ite	ne
 8001ec0:	2301      	movne	r3, #1
 8001ec2:	2300      	moveq	r3, #0
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <_Z13cz_send_entryPv+0x14c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001eca:	f107 0008 	add.w	r0, r7, #8
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	f103 0218 	add.w	r2, r3, #24
 8001ed6:	f107 010c 	add.w	r1, r7, #12
 8001eda:	4603      	mov	r3, r0
 8001edc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ede:	f00c ffb3 	bl	800ee48 <HAL_CAN_AddTxMessage>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	bf14      	ite	ne
 8001ee8:	2301      	movne	r3, #1
 8001eea:	2300      	moveq	r3, #0
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d017      	beq.n	8001f22 <_Z13cz_send_entryPv+0x176>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001ef2:	f000 fa7f 	bl	80023f4 <_ZN7canzero32handle_trasmission_request_errorEv>
 8001ef6:	e014      	b.n	8001f22 <_Z13cz_send_entryPv+0x176>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001efa:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <_Z13cz_send_entryPv+0x184>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d108      	bne.n	8001f12 <_Z13cz_send_entryPv+0x166>
					OD_CAN1_DiscardedTxMessages++;
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <_Z13cz_send_entryPv+0x19c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3301      	adds	r3, #1
 8001f06:	4a10      	ldr	r2, [pc, #64]	; (8001f48 <_Z13cz_send_entryPv+0x19c>)
 8001f08:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001f0a:	4809      	ldr	r0, [pc, #36]	; (8001f30 <_Z13cz_send_entryPv+0x184>)
 8001f0c:	f000 fa68 	bl	80023e0 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001f10:	e007      	b.n	8001f22 <_Z13cz_send_entryPv+0x176>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <_Z13cz_send_entryPv+0x1a0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	3301      	adds	r3, #1
 8001f18:	4a0c      	ldr	r2, [pc, #48]	; (8001f4c <_Z13cz_send_entryPv+0x1a0>)
 8001f1a:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <_Z13cz_send_entryPv+0x188>)
 8001f1e:	f000 fa5f 	bl	80023e0 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f24:	3301      	adds	r3, #1
 8001f26:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001f28:	e74b      	b.n	8001dc2 <_Z13cz_send_entryPv+0x16>
 8001f2a:	bf00      	nop
 8001f2c:	200007b4 	.word	0x200007b4
 8001f30:	20000e84 	.word	0x20000e84
 8001f34:	20000eac 	.word	0x20000eac
 8001f38:	2000080c 	.word	0x2000080c
 8001f3c:	0801c700 	.word	0x0801c700
 8001f40:	20000824 	.word	0x20000824
 8001f44:	0801c728 	.word	0x0801c728
 8001f48:	20000804 	.word	0x20000804
 8001f4c:	2000081c 	.word	0x2000081c

08001f50 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b08c      	sub	sp, #48	; 0x30
 8001f54:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001f56:	2080      	movs	r0, #128	; 0x80
 8001f58:	f000 f922 	bl	80021a0 <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	dc51      	bgt.n	800200a <_ZN7canzero4initEv+0xba>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001f6e:	4b87      	ldr	r3, [pc, #540]	; (800218c <_ZN7canzero4initEv+0x23c>)
 8001f70:	0b5b      	lsrs	r3, r3, #13
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001f76:	4b85      	ldr	r3, [pc, #532]	; (800218c <_ZN7canzero4initEv+0x23c>)
 8001f78:	00db      	lsls	r3, r3, #3
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001f82:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8001f86:	0b5b      	lsrs	r3, r3, #13
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001f8c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	f043 0306 	orr.w	r3, r3, #6
 8001f98:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f9c:	0fda      	lsrs	r2, r3, #31
 8001f9e:	4413      	add	r3, r2
 8001fa0:	105b      	asrs	r3, r3, #1
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d102      	bne.n	8001fb0 <_ZN7canzero4initEv+0x60>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
 8001fae:	e001      	b.n	8001fb4 <_ZN7canzero4initEv+0x64>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001fb8:	230e      	movs	r3, #14
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fbe:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001fc0:	463b      	mov	r3, r7
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4872      	ldr	r0, [pc, #456]	; (8002190 <_ZN7canzero4initEv+0x240>)
 8001fc6:	f00c fe1b 	bl	800ec00 <HAL_CAN_ConfigFilter>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	bf14      	ite	ne
 8001fd0:	2301      	movne	r3, #1
 8001fd2:	2300      	moveq	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <_ZN7canzero4initEv+0x8e>
			Error_Handler(); /* Filter configuration Error */
 8001fda:	f00b f9b9 	bl	800d350 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	330e      	adds	r3, #14
 8001fe2:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	486a      	ldr	r0, [pc, #424]	; (8002194 <_ZN7canzero4initEv+0x244>)
 8001fea:	f00c fe09 	bl	800ec00 <HAL_CAN_ConfigFilter>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <_ZN7canzero4initEv+0xb2>
			Error_Handler(); /* Filter configuration Error */
 8001ffe:	f00b f9a7 	bl	800d350 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8002002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002004:	3301      	adds	r3, #1
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002008:	e7aa      	b.n	8001f60 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 800200a:	2300      	movs	r3, #0
 800200c:	62bb      	str	r3, [r7, #40]	; 0x28
 800200e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002010:	2b16      	cmp	r3, #22
 8002012:	dc6a      	bgt.n	80020ea <_ZN7canzero4initEv+0x19a>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002016:	0fda      	lsrs	r2, r3, #31
 8002018:	4413      	add	r3, r2
 800201a:	105b      	asrs	r3, r3, #1
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8002024:	4a5c      	ldr	r2, [pc, #368]	; (8002198 <_ZN7canzero4initEv+0x248>)
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	015b      	lsls	r3, r3, #5
 800202e:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8002030:	4a5a      	ldr	r2, [pc, #360]	; (800219c <_ZN7canzero4initEv+0x24c>)
 8002032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002038:	015b      	lsls	r3, r3, #5
 800203a:	f043 0318 	orr.w	r3, r3, #24
 800203e:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	2b16      	cmp	r3, #22
 8002044:	d106      	bne.n	8002054 <_ZN7canzero4initEv+0x104>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002046:	2301      	movs	r3, #1
 8002048:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 800204e:	2306      	movs	r3, #6
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e011      	b.n	8002078 <_ZN7canzero4initEv+0x128>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8002058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800205a:	3301      	adds	r3, #1
 800205c:	4a4e      	ldr	r2, [pc, #312]	; (8002198 <_ZN7canzero4initEv+0x248>)
 800205e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002062:	015b      	lsls	r3, r3, #5
 8002064:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8002066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002068:	3301      	adds	r3, #1
 800206a:	4a4c      	ldr	r2, [pc, #304]	; (800219c <_ZN7canzero4initEv+0x24c>)
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	015b      	lsls	r3, r3, #5
 8002072:	f043 0318 	orr.w	r3, r3, #24
 8002076:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8002078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207a:	0fda      	lsrs	r2, r3, #31
 800207c:	4413      	add	r3, r2
 800207e:	105b      	asrs	r3, r3, #1
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_ZN7canzero4initEv+0x13e>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]
 800208c:	e001      	b.n	8002092 <_ZN7canzero4initEv+0x142>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 800208e:	2301      	movs	r3, #1
 8002090:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8002092:	2301      	movs	r3, #1
 8002094:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8002096:	230e      	movs	r3, #14
 8002098:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800209a:	463b      	mov	r3, r7
 800209c:	4619      	mov	r1, r3
 800209e:	483c      	ldr	r0, [pc, #240]	; (8002190 <_ZN7canzero4initEv+0x240>)
 80020a0:	f00c fdae 	bl	800ec00 <HAL_CAN_ConfigFilter>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	bf14      	ite	ne
 80020aa:	2301      	movne	r3, #1
 80020ac:	2300      	moveq	r3, #0
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <_ZN7canzero4initEv+0x168>
			Error_Handler(); /* Filter configuration Error */
 80020b4:	f00b f94c 	bl	800d350 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 80020b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ba:	0fda      	lsrs	r2, r3, #31
 80020bc:	4413      	add	r3, r2
 80020be:	105b      	asrs	r3, r3, #1
 80020c0:	330f      	adds	r3, #15
 80020c2:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 80020c4:	463b      	mov	r3, r7
 80020c6:	4619      	mov	r1, r3
 80020c8:	4832      	ldr	r0, [pc, #200]	; (8002194 <_ZN7canzero4initEv+0x244>)
 80020ca:	f00c fd99 	bl	800ec00 <HAL_CAN_ConfigFilter>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf14      	ite	ne
 80020d4:	2301      	movne	r3, #1
 80020d6:	2300      	moveq	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <_ZN7canzero4initEv+0x192>
			Error_Handler(); /* Filter configuration Error */
 80020de:	f00b f937 	bl	800d350 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 80020e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e4:	3302      	adds	r3, #2
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80020e8:	e791      	b.n	800200e <_ZN7canzero4initEv+0xbe>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 80020ea:	4829      	ldr	r0, [pc, #164]	; (8002190 <_ZN7canzero4initEv+0x240>)
 80020ec:	f00c fe68 	bl	800edc0 <HAL_CAN_Start>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d105      	bne.n	8002102 <_ZN7canzero4initEv+0x1b2>
 80020f6:	4827      	ldr	r0, [pc, #156]	; (8002194 <_ZN7canzero4initEv+0x244>)
 80020f8:	f00c fe62 	bl	800edc0 <HAL_CAN_Start>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <_ZN7canzero4initEv+0x1b6>
 8002102:	2301      	movs	r3, #1
 8002104:	e000      	b.n	8002108 <_ZN7canzero4initEv+0x1b8>
 8002106:	2300      	movs	r3, #0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <_ZN7canzero4initEv+0x1c0>
		Error_Handler(); /* Start Error */
 800210c:	f00b f920 	bl	800d350 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002110:	2102      	movs	r1, #2
 8002112:	481f      	ldr	r0, [pc, #124]	; (8002190 <_ZN7canzero4initEv+0x240>)
 8002114:	f00d f8ba 	bl	800f28c <HAL_CAN_ActivateNotification>
 8002118:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 800211a:	2b00      	cmp	r3, #0
 800211c:	d10e      	bne.n	800213c <_ZN7canzero4initEv+0x1ec>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 800211e:	2110      	movs	r1, #16
 8002120:	481b      	ldr	r0, [pc, #108]	; (8002190 <_ZN7canzero4initEv+0x240>)
 8002122:	f00d f8b3 	bl	800f28c <HAL_CAN_ActivateNotification>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d107      	bne.n	800213c <_ZN7canzero4initEv+0x1ec>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 800212c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002130:	4817      	ldr	r0, [pc, #92]	; (8002190 <_ZN7canzero4initEv+0x240>)
 8002132:	f00d f8ab 	bl	800f28c <HAL_CAN_ActivateNotification>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <_ZN7canzero4initEv+0x1f0>
 800213c:	2301      	movs	r3, #1
 800213e:	e000      	b.n	8002142 <_ZN7canzero4initEv+0x1f2>
 8002140:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <_ZN7canzero4initEv+0x1fa>
		Error_Handler();
 8002146:	f00b f903 	bl	800d350 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800214a:	2102      	movs	r1, #2
 800214c:	4811      	ldr	r0, [pc, #68]	; (8002194 <_ZN7canzero4initEv+0x244>)
 800214e:	f00d f89d 	bl	800f28c <HAL_CAN_ActivateNotification>
 8002152:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002154:	2b00      	cmp	r3, #0
 8002156:	d10e      	bne.n	8002176 <_ZN7canzero4initEv+0x226>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8002158:	2110      	movs	r1, #16
 800215a:	480e      	ldr	r0, [pc, #56]	; (8002194 <_ZN7canzero4initEv+0x244>)
 800215c:	f00d f896 	bl	800f28c <HAL_CAN_ActivateNotification>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <_ZN7canzero4initEv+0x226>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002166:	f44f 7100 	mov.w	r1, #512	; 0x200
 800216a:	480a      	ldr	r0, [pc, #40]	; (8002194 <_ZN7canzero4initEv+0x244>)
 800216c:	f00d f88e 	bl	800f28c <HAL_CAN_ActivateNotification>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <_ZN7canzero4initEv+0x22a>
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <_ZN7canzero4initEv+0x22c>
 800217a:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <_ZN7canzero4initEv+0x234>
		Error_Handler();
 8002180:	f00b f8e6 	bl	800d350 <Error_Handler>
	}
}
 8002184:	bf00      	nop
 8002186:	3730      	adds	r7, #48	; 0x30
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	1ffffffa 	.word	0x1ffffffa
 8002190:	20000e84 	.word	0x20000e84
 8002194:	20000eac 	.word	0x20000eac
 8002198:	0801c984 	.word	0x0801c984
 800219c:	0801c928 	.word	0x0801c928

080021a0 <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <_ZN7canzero9setStatusE9cz_status+0x30>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f04f 31ff 	mov.w	r1, #4294967295
 80021b2:	4618      	mov	r0, r3
 80021b4:	f012 ffcd 	bl	8015152 <osMutexAcquire>
	nodeStatus = new_status;
 80021b8:	4a06      	ldr	r2, [pc, #24]	; (80021d4 <_ZN7canzero9setStatusE9cz_status+0x34>)
 80021ba:	79fb      	ldrb	r3, [r7, #7]
 80021bc:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 80021be:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <_ZN7canzero9setStatusE9cz_status+0x30>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f013 f810 	bl	80151e8 <osMutexRelease>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200007b8 	.word	0x200007b8
 80021d4:	200007bc 	.word	0x200007bc

080021d8 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 80021de:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <_ZN7canzero9getStatusEv+0x30>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f04f 31ff 	mov.w	r1, #4294967295
 80021e6:	4618      	mov	r0, r3
 80021e8:	f012 ffb3 	bl	8015152 <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <_ZN7canzero9getStatusEv+0x34>)
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <_ZN7canzero9getStatusEv+0x30>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4618      	mov	r0, r3
 80021f8:	f012 fff6 	bl	80151e8 <osMutexRelease>
	return returnValue;
 80021fc:	79fb      	ldrb	r3, [r7, #7]
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200007b8 	.word	0x200007b8
 800220c:	200007bc 	.word	0x200007bc

08002210 <_Z41__static_initialization_and_destruction_0ii>:
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d10a      	bne.n	8002236 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002226:	4293      	cmp	r3, r2
 8002228:	d105      	bne.n	8002236 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800222c:	f012 ff0b 	bl	8015046 <osMutexNew>
 8002230:	4603      	mov	r3, r0
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002234:	6013      	str	r3, [r2, #0]
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	0801c9e0 	.word	0x0801c9e0
 8002244:	200007b8 	.word	0x200007b8

08002248 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
 800224c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002250:	2001      	movs	r0, #1
 8002252:	f7ff ffdd 	bl	8002210 <_Z41__static_initialization_and_destruction_0ii>
 8002256:	bd80      	pop	{r7, pc}

08002258 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8002258:	b580      	push	{r7, lr}
 800225a:	b090      	sub	sp, #64	; 0x40
 800225c:	af02      	add	r7, sp, #8
 800225e:	6078      	str	r0, [r7, #4]
	canzero::init();
 8002260:	f7ff fe76 	bl	8001f50 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	2320      	movs	r3, #32
 8002270:	9300      	str	r3, [sp, #0]
 8002272:	2300      	movs	r3, #0
 8002274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002278:	4942      	ldr	r1, [pc, #264]	; (8002384 <canzero_start+0x12c>)
 800227a:	4843      	ldr	r0, [pc, #268]	; (8002388 <canzero_start+0x130>)
 800227c:	f015 f82d 	bl	80172da <xTaskCreate>
 8002280:	6378      	str	r0, [r7, #52]	; 0x34
			osPriorityAboveNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 8002282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002284:	2b01      	cmp	r3, #1
 8002286:	d006      	beq.n	8002296 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8002288:	f016 fe14 	bl	8018eb4 <vPortEnterCritical>
 800228c:	483f      	ldr	r0, [pc, #252]	; (800238c <canzero_start+0x134>)
 800228e:	f012 fd45 	bl	8014d1c <printf_>
 8002292:	f016 fe3f 	bl	8018f14 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8002296:	2300      	movs	r3, #0
 8002298:	61bb      	str	r3, [r7, #24]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 800229a:	f107 0318 	add.w	r3, r7, #24
 800229e:	9301      	str	r3, [sp, #4]
 80022a0:	2320      	movs	r3, #32
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	2300      	movs	r3, #0
 80022a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022aa:	4939      	ldr	r1, [pc, #228]	; (8002390 <canzero_start+0x138>)
 80022ac:	4839      	ldr	r0, [pc, #228]	; (8002394 <canzero_start+0x13c>)
 80022ae:	f015 f814 	bl	80172da <xTaskCreate>
 80022b2:	6338      	str	r0, [r7, #48]	; 0x30
			osPriorityAboveNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 80022b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d006      	beq.n	80022c8 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 80022ba:	f016 fdfb 	bl	8018eb4 <vPortEnterCritical>
 80022be:	4836      	ldr	r0, [pc, #216]	; (8002398 <canzero_start+0x140>)
 80022c0:	f012 fd2c 	bl	8014d1c <printf_>
 80022c4:	f016 fe26 	bl	8018f14 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 80022cc:	f107 0314 	add.w	r3, r7, #20
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	2320      	movs	r3, #32
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2300      	movs	r3, #0
 80022d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022dc:	492f      	ldr	r1, [pc, #188]	; (800239c <canzero_start+0x144>)
 80022de:	4830      	ldr	r0, [pc, #192]	; (80023a0 <canzero_start+0x148>)
 80022e0:	f014 fffb 	bl	80172da <xTaskCreate>
 80022e4:	62f8      	str	r0, [r7, #44]	; 0x2c
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityAboveNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 80022e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d006      	beq.n	80022fa <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 80022ec:	f016 fde2 	bl	8018eb4 <vPortEnterCritical>
 80022f0:	482c      	ldr	r0, [pc, #176]	; (80023a4 <canzero_start+0x14c>)
 80022f2:	f012 fd13 	bl	8014d1c <printf_>
 80022f6:	f016 fe0d 	bl	8018f14 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 80022fe:	f107 0310 	add.w	r3, r7, #16
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	2320      	movs	r3, #32
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2300      	movs	r3, #0
 800230a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800230e:	4926      	ldr	r1, [pc, #152]	; (80023a8 <canzero_start+0x150>)
 8002310:	4826      	ldr	r0, [pc, #152]	; (80023ac <canzero_start+0x154>)
 8002312:	f014 ffe2 	bl	80172da <xTaskCreate>
 8002316:	62b8      	str	r0, [r7, #40]	; 0x28
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityAboveNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8002318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231a:	2b01      	cmp	r3, #1
 800231c:	d006      	beq.n	800232c <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 800231e:	f016 fdc9 	bl	8018eb4 <vPortEnterCritical>
 8002322:	4823      	ldr	r0, [pc, #140]	; (80023b0 <canzero_start+0x158>)
 8002324:	f012 fcfa 	bl	8014d1c <printf_>
 8002328:	f016 fdf4 	bl	8018f14 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	2328      	movs	r3, #40	; 0x28
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2300      	movs	r3, #0
 800233c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002340:	491c      	ldr	r1, [pc, #112]	; (80023b4 <canzero_start+0x15c>)
 8002342:	481d      	ldr	r0, [pc, #116]	; (80023b8 <canzero_start+0x160>)
 8002344:	f014 ffc9 	bl	80172da <xTaskCreate>
 8002348:	6278      	str	r0, [r7, #36]	; 0x24
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	2b01      	cmp	r3, #1
 800234e:	d001      	beq.n	8002354 <canzero_start+0xfc>
		Error_Handler();
 8002350:	f00a fffe 	bl	800d350 <Error_Handler>
	}

	TaskHandle_t sendOdEntriesHandle = nullptr;
 8002354:	2300      	movs	r3, #0
 8002356:	60bb      	str	r3, [r7, #8]
	BaseType_t sendOdEntriesStatus = xTaskCreate(sendOdEntriesTask, "cz_sendod", 128, NULL,
 8002358:	f107 0308 	add.w	r3, r7, #8
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	2310      	movs	r3, #16
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2300      	movs	r3, #0
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	4915      	ldr	r1, [pc, #84]	; (80023bc <canzero_start+0x164>)
 8002368:	4815      	ldr	r0, [pc, #84]	; (80023c0 <canzero_start+0x168>)
 800236a:	f014 ffb6 	bl	80172da <xTaskCreate>
 800236e:	6238      	str	r0, [r7, #32]
			osPriorityBelowNormal, &sendOdEntriesHandle);
	if(sendOdEntriesStatus != pdPASS){
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d001      	beq.n	800237a <canzero_start+0x122>
		Error_Handler();
 8002376:	f00a ffeb 	bl	800d350 <Error_Handler>
	}


	while (true) {
		osDelay(osWaitForever);
 800237a:	f04f 30ff 	mov.w	r0, #4294967295
 800237e:	f012 fe47 	bl	8015010 <osDelay>
 8002382:	e7fa      	b.n	800237a <canzero_start+0x122>
 8002384:	0801c760 	.word	0x0801c760
 8002388:	08001dad 	.word	0x08001dad
 800238c:	0801c768 	.word	0x0801c768
 8002390:	0801c78c 	.word	0x0801c78c
 8002394:	08001ad9 	.word	0x08001ad9
 8002398:	0801c798 	.word	0x0801c798
 800239c:	0801c7c0 	.word	0x0801c7c0
 80023a0:	0800137d 	.word	0x0800137d
 80023a4:	0801c7cc 	.word	0x0801c7cc
 80023a8:	0801c7fc 	.word	0x0801c7fc
 80023ac:	08001315 	.word	0x08001315
 80023b0:	0801c808 	.word	0x0801c808
 80023b4:	0801c838 	.word	0x0801c838
 80023b8:	0800129d 	.word	0x0800129d
 80023bc:	0801c840 	.word	0x0801c840
 80023c0:	080075ed 	.word	0x080075ed

080023c4 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <_ZN7canzero21handle_heartbeat_missEv>:


void __attribute__((weak)) canzero::handle_heartbeat_miss(){
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80023d6:	bf00      	nop
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	ed87 0a01 	vstr	s0, [r7, #4]
 800240c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002410:	f017 f8a0 	bl	8019554 <roundf>
 8002414:	eef0 7a40 	vmov.f32	s15, s0
 8002418:	eeb0 0a67 	vmov.f32	s0, s15
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 8002422:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002426:	b0a2      	sub	sp, #136	; 0x88
 8002428:	af00      	add	r7, sp, #0
 800242a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800242e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002432:	4619      	mov	r1, r3
 8002434:	4613      	mov	r3, r2
 8002436:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800243a:	460b      	mov	r3, r1
 800243c:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002440:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002444:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800244e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002452:	7113      	strb	r3, [r2, #4]
 8002454:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002458:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800245c:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 800245e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	461a      	mov	r2, r3
 8002466:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800246a:	3301      	adds	r3, #1
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	441a      	add	r2, r3
 8002472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002476:	3302      	adds	r3, #2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	041b      	lsls	r3, r3, #16
 800247c:	441a      	add	r2, r3
 800247e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002482:	3303      	adds	r3, #3
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	061b      	lsls	r3, r3, #24
 8002488:	4413      	add	r3, r2
 800248a:	2200      	movs	r2, #0
 800248c:	461c      	mov	r4, r3
 800248e:	4615      	mov	r5, r2
 8002490:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002494:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 8002498:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800249c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80024a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024a4:	3304      	adds	r3, #4
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2200      	movs	r2, #0
 80024ac:	673b      	str	r3, [r7, #112]	; 0x70
 80024ae:	677a      	str	r2, [r7, #116]	; 0x74
 80024b0:	f04f 0000 	mov.w	r0, #0
 80024b4:	f04f 0100 	mov.w	r1, #0
 80024b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024ba:	0019      	movs	r1, r3
 80024bc:	2000      	movs	r0, #0
 80024be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024c2:	3305      	adds	r3, #5
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2200      	movs	r2, #0
 80024ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80024cc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 80024d8:	0233      	lsls	r3, r6, #8
 80024da:	2200      	movs	r2, #0
 80024dc:	eb10 0802 	adds.w	r8, r0, r2
 80024e0:	eb41 0903 	adc.w	r9, r1, r3
 80024e4:	eb14 0308 	adds.w	r3, r4, r8
 80024e8:	663b      	str	r3, [r7, #96]	; 0x60
 80024ea:	eb45 0309 	adc.w	r3, r5, r9
 80024ee:	667b      	str	r3, [r7, #100]	; 0x64
 80024f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80024f8:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 80024fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002500:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002504:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002508:	3306      	adds	r3, #6
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2200      	movs	r2, #0
 8002510:	65bb      	str	r3, [r7, #88]	; 0x58
 8002512:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002514:	f04f 0000 	mov.w	r0, #0
 8002518:	f04f 0100 	mov.w	r1, #0
 800251c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800251e:	0419      	lsls	r1, r3, #16
 8002520:	2000      	movs	r0, #0
 8002522:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002526:	3307      	adds	r3, #7
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2200      	movs	r2, #0
 800252e:	653b      	str	r3, [r7, #80]	; 0x50
 8002530:	657a      	str	r2, [r7, #84]	; 0x54
 8002532:	f04f 0200 	mov.w	r2, #0
 8002536:	f04f 0300 	mov.w	r3, #0
 800253a:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800253c:	0633      	lsls	r3, r6, #24
 800253e:	2200      	movs	r2, #0
 8002540:	eb10 0a02 	adds.w	sl, r0, r2
 8002544:	eb41 0b03 	adc.w	fp, r1, r3
 8002548:	eb14 030a 	adds.w	r3, r4, sl
 800254c:	64bb      	str	r3, [r7, #72]	; 0x48
 800254e:	eb45 030b 	adc.w	r3, r5, fp
 8002552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002554:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002558:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800255c:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 8002560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002564:	3307      	adds	r3, #7
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800256e:	3306      	adds	r3, #6
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	021b      	lsls	r3, r3, #8
 8002574:	441a      	add	r2, r3
 8002576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800257a:	3305      	adds	r3, #5
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	441a      	add	r2, r3
 8002582:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002586:	3304      	adds	r3, #4
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	061b      	lsls	r3, r3, #24
 800258c:	4413      	add	r3, r2
 800258e:	2200      	movs	r2, #0
 8002590:	643b      	str	r3, [r7, #64]	; 0x40
 8002592:	647a      	str	r2, [r7, #68]	; 0x44
 8002594:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002598:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800259c:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 80025a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025a4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80025a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025ac:	3303      	adds	r3, #3
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2200      	movs	r2, #0
 80025b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80025b6:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025b8:	f04f 0000 	mov.w	r0, #0
 80025bc:	f04f 0100 	mov.w	r1, #0
 80025c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c2:	0019      	movs	r1, r3
 80025c4:	2000      	movs	r0, #0
 80025c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025ca:	3302      	adds	r3, #2
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	633b      	str	r3, [r7, #48]	; 0x30
 80025d4:	637a      	str	r2, [r7, #52]	; 0x34
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80025e0:	0233      	lsls	r3, r6, #8
 80025e2:	2200      	movs	r2, #0
 80025e4:	1886      	adds	r6, r0, r2
 80025e6:	62be      	str	r6, [r7, #40]	; 0x28
 80025e8:	eb41 0303 	adc.w	r3, r1, r3
 80025ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80025f2:	460b      	mov	r3, r1
 80025f4:	18e3      	adds	r3, r4, r3
 80025f6:	623b      	str	r3, [r7, #32]
 80025f8:	4613      	mov	r3, r2
 80025fa:	eb45 0303 	adc.w	r3, r5, r3
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002600:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002604:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002608:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 800260c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002610:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002618:	3301      	adds	r3, #1
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2200      	movs	r2, #0
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	61fa      	str	r2, [r7, #28]
 8002624:	f04f 0000 	mov.w	r0, #0
 8002628:	f04f 0100 	mov.w	r1, #0
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	0419      	lsls	r1, r3, #16
 8002630:	2000      	movs	r0, #0
 8002632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2200      	movs	r2, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	617a      	str	r2, [r7, #20]
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	693e      	ldr	r6, [r7, #16]
 800264a:	0633      	lsls	r3, r6, #24
 800264c:	2200      	movs	r2, #0
 800264e:	1886      	adds	r6, r0, r2
 8002650:	60be      	str	r6, [r7, #8]
 8002652:	eb41 0303 	adc.w	r3, r1, r3
 8002656:	60fb      	str	r3, [r7, #12]
 8002658:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800265c:	460b      	mov	r3, r1
 800265e:	18e3      	adds	r3, r4, r3
 8002660:	603b      	str	r3, [r7, #0]
 8002662:	4613      	mov	r3, r2
 8002664:	eb45 0303 	adc.w	r3, r5, r3
 8002668:	607b      	str	r3, [r7, #4]
 800266a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800266e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002672:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 8002676:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800267a:	4618      	mov	r0, r3
 800267c:	3788      	adds	r7, #136	; 0x88
 800267e:	46bd      	mov	sp, r7
 8002680:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002684:	4770      	bx	lr

08002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002686:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800268a:	b087      	sub	sp, #28
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
 8002694:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800269c:	d302      	bcc.n	80026a4 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 800269e:	f640 73ff 	movw	r3, #4095	; 0xfff
 80026a2:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 80026a4:	887b      	ldrh	r3, [r7, #2]
 80026a6:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	8af9      	ldrh	r1, [r7, #22]
 80026b0:	2000      	movs	r0, #0
 80026b2:	468a      	mov	sl, r1
 80026b4:	4683      	mov	fp, r0
 80026b6:	f3ca 040b 	ubfx	r4, sl, #0, #12
 80026ba:	2500      	movs	r5, #0
 80026bc:	ea42 0804 	orr.w	r8, r2, r4
 80026c0:	ea43 0905 	orr.w	r9, r3, r5
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80026ca:	bf00      	nop
 80026cc:	371c      	adds	r7, #28
 80026ce:	46bd      	mov	sp, r7
 80026d0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80026d4:	4770      	bx	lr

080026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80026d6:	b480      	push	{r7}
 80026d8:	b085      	sub	sp, #20
 80026da:	af00      	add	r7, sp, #0
 80026dc:	6078      	str	r0, [r7, #4]
 80026de:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	b293      	uxth	r3, r2
 80026e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ec:	81fb      	strh	r3, [r7, #14]
                return value;
 80026ee:	89fb      	ldrh	r3, [r7, #14]
            }
 80026f0:	4618      	mov	r0, r3
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <_ZN3can7signals20SensorF_SDO_RespCode3setERyS2_Rhh>:
        class SensorF_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80026fc:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002700:	b087      	sub	sp, #28
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800270c:	78fb      	ldrb	r3, [r7, #3]
 800270e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002716:	7dfb      	ldrb	r3, [r7, #23]
 8002718:	2200      	movs	r2, #0
 800271a:	4698      	mov	r8, r3
 800271c:	4691      	mov	r9, r2
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	ea4f 3309 	mov.w	r3, r9, lsl #12
 800272a:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 800272e:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8002732:	b294      	uxth	r4, r2
 8002734:	2500      	movs	r5, #0
 8002736:	ea40 0a04 	orr.w	sl, r0, r4
 800273a:	ea41 0b05 	orr.w	fp, r1, r5
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800274e:	4770      	bx	lr

08002750 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_>:
                SensorF_SDO_ID::set(intel, motorola, dlc, 2320);
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
                dlc = 3;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2320) {
 800275a:	6839      	ldr	r1, [r7, #0]
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ffba 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8002762:	4603      	mov	r3, r0
 8002764:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002768:	bf14      	ite	ne
 800276a:	2301      	movne	r3, #1
 800276c:	2300      	moveq	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d000      	beq.n	8002776 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_+0x26>
                    while(1);
 8002774:	e7fe      	b.n	8002774 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	e9d3 0100 	ldrd	r0, r1, [r3]
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	0c02      	lsrs	r2, r0, #16
 8002786:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800278a:	0c0b      	lsrs	r3, r1, #16
 800278c:	4613      	mov	r3, r2
 800278e:	73fb      	strb	r3, [r7, #15]
                return value;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
	...

0800279c <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800279c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027a0:	b088      	sub	sp, #32
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6178      	str	r0, [r7, #20]
 80027a6:	6139      	str	r1, [r7, #16]
 80027a8:	60fa      	str	r2, [r7, #12]
 80027aa:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80027ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80027b2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002850 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xb4>
 80027b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027be:	dd01      	ble.n	80027c4 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0x28>
                    value = max;
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xb8>)
 80027c2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80027c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002858 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xbc>
 80027cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d4:	d501      	bpl.n	80027da <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0x3e>
                    value = min;
 80027d6:	4b21      	ldr	r3, [pc, #132]	; (800285c <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc0>)
 80027d8:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 3329);
 80027da:	f640 5301 	movw	r3, #3329	; 0xd01
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	6939      	ldr	r1, [r7, #16]
 80027e2:	6978      	ldr	r0, [r7, #20]
 80027e4:	f7ff ff4f 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80027e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ec:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002860 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc4>
 80027f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027f4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002864 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc8>
 80027f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002800:	f7ff fdff 	bl	8002402 <_ZSt5roundf>
 8002804:	eef0 7a40 	vmov.f32	s15, s0
 8002808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800280c:	ee17 3a90 	vmov	r3, s15
 8002810:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	8bf9      	ldrh	r1, [r7, #30]
 800281a:	2000      	movs	r0, #0
 800281c:	4688      	mov	r8, r1
 800281e:	4681      	mov	r9, r0
 8002820:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002824:	6079      	str	r1, [r7, #4]
 8002826:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800282a:	6039      	str	r1, [r7, #0]
 800282c:	683c      	ldr	r4, [r7, #0]
 800282e:	2500      	movs	r5, #0
 8002830:	ea42 0a04 	orr.w	sl, r2, r4
 8002834:	ea43 0b05 	orr.w	fp, r3, r5
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2204      	movs	r2, #4
 8002842:	701a      	strb	r2, [r3, #0]
            }
 8002844:	bf00      	nop
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800284e:	bf00      	nop
 8002850:	440ad666 	.word	0x440ad666
 8002854:	440ad666 	.word	0x440ad666
 8002858:	c2c80000 	.word	0xc2c80000
 800285c:	c2c80000 	.word	0xc2c80000
 8002860:	42c80000 	.word	0x42c80000
 8002864:	3c23d70a 	.word	0x3c23d70a

08002868 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	b088      	sub	sp, #32
 800286e:	af00      	add	r7, sp, #0
 8002870:	6178      	str	r0, [r7, #20]
 8002872:	6139      	str	r1, [r7, #16]
 8002874:	60fa      	str	r2, [r7, #12]
 8002876:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800287a:	edd7 7a02 	vldr	s15, [r7, #8]
 800287e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800291c <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xb4>
 8002882:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288a:	dd01      	ble.n	8002890 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0x28>
                    value = max;
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xb8>)
 800288e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002890:	edd7 7a02 	vldr	s15, [r7, #8]
 8002894:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002924 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xbc>
 8002898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a0:	d501      	bpl.n	80028a6 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0x3e>
                    value = min;
 80028a2:	4b21      	ldr	r3, [pc, #132]	; (8002928 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc0>)
 80028a4:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 3328);
 80028a6:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6939      	ldr	r1, [r7, #16]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff fee9 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80028b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80028b8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800292c <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc4>
 80028bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028c0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002930 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc8>
 80028c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80028c8:	eeb0 0a47 	vmov.f32	s0, s14
 80028cc:	f7ff fd99 	bl	8002402 <_ZSt5roundf>
 80028d0:	eef0 7a40 	vmov.f32	s15, s0
 80028d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028d8:	ee17 3a90 	vmov	r3, s15
 80028dc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	8bf9      	ldrh	r1, [r7, #30]
 80028e6:	2000      	movs	r0, #0
 80028e8:	4688      	mov	r8, r1
 80028ea:	4681      	mov	r9, r0
 80028ec:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80028f0:	6079      	str	r1, [r7, #4]
 80028f2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80028f6:	6039      	str	r1, [r7, #0]
 80028f8:	683c      	ldr	r4, [r7, #0]
 80028fa:	2500      	movs	r5, #0
 80028fc:	ea42 0a04 	orr.w	sl, r2, r4
 8002900:	ea43 0b05 	orr.w	fp, r3, r5
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2204      	movs	r2, #4
 800290e:	701a      	strb	r2, [r3, #0]
            }
 8002910:	bf00      	nop
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800291a:	bf00      	nop
 800291c:	440ad666 	.word	0x440ad666
 8002920:	440ad666 	.word	0x440ad666
 8002924:	c2c80000 	.word	0xc2c80000
 8002928:	c2c80000 	.word	0xc2c80000
 800292c:	42c80000 	.word	0x42c80000
 8002930:	3c23d70a 	.word	0x3c23d70a

08002934 <_ZN3can7signals30SensorF_OD_FiducialLeftCounter3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3073            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002938:	b088      	sub	sp, #32
 800293a:	af00      	add	r7, sp, #0
 800293c:	6178      	str	r0, [r7, #20]
 800293e:	6139      	str	r1, [r7, #16]
 8002940:	60fa      	str	r2, [r7, #12]
 8002942:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3073);
 8002944:	f640 4301 	movw	r3, #3073	; 0xc01
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	6939      	ldr	r1, [r7, #16]
 800294c:	6978      	ldr	r0, [r7, #20]
 800294e:	f7ff fe9a 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002952:	897b      	ldrh	r3, [r7, #10]
 8002954:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	8bf9      	ldrh	r1, [r7, #30]
 800295e:	2000      	movs	r0, #0
 8002960:	4688      	mov	r8, r1
 8002962:	4681      	mov	r9, r0
 8002964:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002968:	6079      	str	r1, [r7, #4]
 800296a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800296e:	6039      	str	r1, [r7, #0]
 8002970:	683c      	ldr	r4, [r7, #0]
 8002972:	2500      	movs	r5, #0
 8002974:	ea42 0a04 	orr.w	sl, r2, r4
 8002978:	ea43 0b05 	orr.w	fp, r3, r5
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2204      	movs	r2, #4
 8002986:	701a      	strb	r2, [r3, #0]
            }
 8002988:	bf00      	nop
 800298a:	3720      	adds	r7, #32
 800298c:	46bd      	mov	sp, r7
 800298e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002992 <_ZN3can7signals31SensorF_OD_FiducialRightCounter3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3072            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002992:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002996:	b088      	sub	sp, #32
 8002998:	af00      	add	r7, sp, #0
 800299a:	6178      	str	r0, [r7, #20]
 800299c:	6139      	str	r1, [r7, #16]
 800299e:	60fa      	str	r2, [r7, #12]
 80029a0:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3072);
 80029a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	6939      	ldr	r1, [r7, #16]
 80029aa:	6978      	ldr	r0, [r7, #20]
 80029ac:	f7ff fe6b 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80029b0:	897b      	ldrh	r3, [r7, #10]
 80029b2:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	8bf9      	ldrh	r1, [r7, #30]
 80029bc:	2000      	movs	r0, #0
 80029be:	4688      	mov	r8, r1
 80029c0:	4681      	mov	r9, r0
 80029c2:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80029c6:	6079      	str	r1, [r7, #4]
 80029c8:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80029cc:	6039      	str	r1, [r7, #0]
 80029ce:	683c      	ldr	r4, [r7, #0]
 80029d0:	2500      	movs	r5, #0
 80029d2:	ea42 0a04 	orr.w	sl, r2, r4
 80029d6:	ea43 0b05 	orr.w	fp, r3, r5
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2204      	movs	r2, #4
 80029e4:	701a      	strb	r2, [r3, #0]
            }
 80029e6:	bf00      	nop
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029f0 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80029f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029f4:	b088      	sub	sp, #32
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6178      	str	r0, [r7, #20]
 80029fa:	6139      	str	r1, [r7, #16]
 80029fc:	60fa      	str	r2, [r7, #12]
 80029fe:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002a02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a06:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002aa4 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xb4>
 8002a0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a12:	dd01      	ble.n	8002a18 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0x28>
                    value = max;
 8002a14:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xb8>)
 8002a16:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002a18:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a1c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002aac <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xbc>
 8002a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a28:	d501      	bpl.n	8002a2e <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0x3e>
                    value = min;
 8002a2a:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc0>)
 8002a2c:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2816);
 8002a2e:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	6939      	ldr	r1, [r7, #16]
 8002a36:	6978      	ldr	r0, [r7, #20]
 8002a38:	f7ff fe25 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a40:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002ab4 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc4>
 8002a44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a48:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002ab8 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc8>
 8002a4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a50:	eeb0 0a47 	vmov.f32	s0, s14
 8002a54:	f7ff fcd5 	bl	8002402 <_ZSt5roundf>
 8002a58:	eef0 7a40 	vmov.f32	s15, s0
 8002a5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a60:	ee17 3a90 	vmov	r3, s15
 8002a64:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6c:	8bf9      	ldrh	r1, [r7, #30]
 8002a6e:	2000      	movs	r0, #0
 8002a70:	4688      	mov	r8, r1
 8002a72:	4681      	mov	r9, r0
 8002a74:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002a78:	6079      	str	r1, [r7, #4]
 8002a7a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002a7e:	6039      	str	r1, [r7, #0]
 8002a80:	683c      	ldr	r4, [r7, #0]
 8002a82:	2500      	movs	r5, #0
 8002a84:	ea42 0a04 	orr.w	sl, r2, r4
 8002a88:	ea43 0b05 	orr.w	fp, r3, r5
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2204      	movs	r2, #4
 8002a96:	701a      	strb	r2, [r3, #0]
            }
 8002a98:	bf00      	nop
 8002a9a:	3720      	adds	r7, #32
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa2:	bf00      	nop
 8002aa4:	440ad666 	.word	0x440ad666
 8002aa8:	440ad666 	.word	0x440ad666
 8002aac:	c2c80000 	.word	0xc2c80000
 8002ab0:	c2c80000 	.word	0xc2c80000
 8002ab4:	42c80000 	.word	0x42c80000
 8002ab8:	3c23d70a 	.word	0x3c23d70a

08002abc <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ac0:	b088      	sub	sp, #32
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6178      	str	r0, [r7, #20]
 8002ac6:	6139      	str	r1, [r7, #16]
 8002ac8:	60fa      	str	r2, [r7, #12]
 8002aca:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002ace:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ad2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002b70 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xb4>
 8002ad6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ade:	dd01      	ble.n	8002ae4 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0x28>
                    value = max;
 8002ae0:	4b24      	ldr	r3, [pc, #144]	; (8002b74 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xb8>)
 8002ae2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002ae4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002b78 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xbc>
 8002aec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af4:	d501      	bpl.n	8002afa <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0x3e>
                    value = min;
 8002af6:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc0>)
 8002af8:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2611);
 8002afa:	f640 2333 	movw	r3, #2611	; 0xa33
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	6939      	ldr	r1, [r7, #16]
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff fdbf 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002b08:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b0c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002b80 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc4>
 8002b10:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b14:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002b84 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc8>
 8002b18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b1c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b20:	f7ff fc6f 	bl	8002402 <_ZSt5roundf>
 8002b24:	eef0 7a40 	vmov.f32	s15, s0
 8002b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b2c:	ee17 3a90 	vmov	r3, s15
 8002b30:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b38:	8bf9      	ldrh	r1, [r7, #30]
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	4688      	mov	r8, r1
 8002b3e:	4681      	mov	r9, r0
 8002b40:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002b44:	6079      	str	r1, [r7, #4]
 8002b46:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002b4a:	6039      	str	r1, [r7, #0]
 8002b4c:	683c      	ldr	r4, [r7, #0]
 8002b4e:	2500      	movs	r5, #0
 8002b50:	ea42 0a04 	orr.w	sl, r2, r4
 8002b54:	ea43 0b05 	orr.w	fp, r3, r5
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2204      	movs	r2, #4
 8002b62:	701a      	strb	r2, [r3, #0]
            }
 8002b64:	bf00      	nop
 8002b66:	3720      	adds	r7, #32
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b6e:	bf00      	nop
 8002b70:	440ad666 	.word	0x440ad666
 8002b74:	440ad666 	.word	0x440ad666
 8002b78:	c2c80000 	.word	0xc2c80000
 8002b7c:	c2c80000 	.word	0xc2c80000
 8002b80:	42c80000 	.word	0x42c80000
 8002b84:	3c23d70a 	.word	0x3c23d70a

08002b88 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b8c:	b088      	sub	sp, #32
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6178      	str	r0, [r7, #20]
 8002b92:	6139      	str	r1, [r7, #16]
 8002b94:	60fa      	str	r2, [r7, #12]
 8002b96:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002b9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b9e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002c3c <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xb4>
 8002ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002baa:	dd01      	ble.n	8002bb0 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0x28>
                    value = max;
 8002bac:	4b24      	ldr	r3, [pc, #144]	; (8002c40 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xb8>)
 8002bae:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002bb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bb4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002c44 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xbc>
 8002bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc0:	d501      	bpl.n	8002bc6 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0x3e>
                    value = min;
 8002bc2:	4b21      	ldr	r3, [pc, #132]	; (8002c48 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc0>)
 8002bc4:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2610);
 8002bc6:	f640 2332 	movw	r3, #2610	; 0xa32
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	6939      	ldr	r1, [r7, #16]
 8002bce:	6978      	ldr	r0, [r7, #20]
 8002bd0:	f7ff fd59 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002bd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c4c <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc4>
 8002bdc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002be0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002c50 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc8>
 8002be4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002be8:	eeb0 0a47 	vmov.f32	s0, s14
 8002bec:	f7ff fc09 	bl	8002402 <_ZSt5roundf>
 8002bf0:	eef0 7a40 	vmov.f32	s15, s0
 8002bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf8:	ee17 3a90 	vmov	r3, s15
 8002bfc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	8bf9      	ldrh	r1, [r7, #30]
 8002c06:	2000      	movs	r0, #0
 8002c08:	4688      	mov	r8, r1
 8002c0a:	4681      	mov	r9, r0
 8002c0c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002c10:	6079      	str	r1, [r7, #4]
 8002c12:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002c16:	6039      	str	r1, [r7, #0]
 8002c18:	683c      	ldr	r4, [r7, #0]
 8002c1a:	2500      	movs	r5, #0
 8002c1c:	ea42 0a04 	orr.w	sl, r2, r4
 8002c20:	ea43 0b05 	orr.w	fp, r3, r5
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	701a      	strb	r2, [r3, #0]
            }
 8002c30:	bf00      	nop
 8002c32:	3720      	adds	r7, #32
 8002c34:	46bd      	mov	sp, r7
 8002c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c3a:	bf00      	nop
 8002c3c:	440ad666 	.word	0x440ad666
 8002c40:	440ad666 	.word	0x440ad666
 8002c44:	c2c80000 	.word	0xc2c80000
 8002c48:	c2c80000 	.word	0xc2c80000
 8002c4c:	42c80000 	.word	0x42c80000
 8002c50:	3c23d70a 	.word	0x3c23d70a

08002c54 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c58:	b088      	sub	sp, #32
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6178      	str	r0, [r7, #20]
 8002c5e:	6139      	str	r1, [r7, #16]
 8002c60:	60fa      	str	r2, [r7, #12]
 8002c62:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002c66:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c6a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002d08 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xb4>
 8002c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c76:	dd01      	ble.n	8002c7c <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0x28>
                    value = max;
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xb8>)
 8002c7a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002c7c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c80:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002d10 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xbc>
 8002c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8c:	d501      	bpl.n	8002c92 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0x3e>
                    value = min;
 8002c8e:	4b21      	ldr	r3, [pc, #132]	; (8002d14 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc0>)
 8002c90:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2609);
 8002c92:	f640 2331 	movw	r3, #2609	; 0xa31
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6939      	ldr	r1, [r7, #16]
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7ff fcf3 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d18 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc4>
 8002ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002cac:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002d1c <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc8>
 8002cb0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cb4:	eeb0 0a47 	vmov.f32	s0, s14
 8002cb8:	f7ff fba3 	bl	8002402 <_ZSt5roundf>
 8002cbc:	eef0 7a40 	vmov.f32	s15, s0
 8002cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc4:	ee17 3a90 	vmov	r3, s15
 8002cc8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	8bf9      	ldrh	r1, [r7, #30]
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	4688      	mov	r8, r1
 8002cd6:	4681      	mov	r9, r0
 8002cd8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002cdc:	6079      	str	r1, [r7, #4]
 8002cde:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002ce2:	6039      	str	r1, [r7, #0]
 8002ce4:	683c      	ldr	r4, [r7, #0]
 8002ce6:	2500      	movs	r5, #0
 8002ce8:	ea42 0a04 	orr.w	sl, r2, r4
 8002cec:	ea43 0b05 	orr.w	fp, r3, r5
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	701a      	strb	r2, [r3, #0]
            }
 8002cfc:	bf00      	nop
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d06:	bf00      	nop
 8002d08:	440ad666 	.word	0x440ad666
 8002d0c:	440ad666 	.word	0x440ad666
 8002d10:	c2c80000 	.word	0xc2c80000
 8002d14:	c2c80000 	.word	0xc2c80000
 8002d18:	42c80000 	.word	0x42c80000
 8002d1c:	3c23d70a 	.word	0x3c23d70a

08002d20 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d24:	b088      	sub	sp, #32
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6178      	str	r0, [r7, #20]
 8002d2a:	6139      	str	r1, [r7, #16]
 8002d2c:	60fa      	str	r2, [r7, #12]
 8002d2e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002d32:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d36:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002dd4 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xb4>
 8002d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d42:	dd01      	ble.n	8002d48 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0x28>
                    value = max;
 8002d44:	4b24      	ldr	r3, [pc, #144]	; (8002dd8 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xb8>)
 8002d46:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002d48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d4c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ddc <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xbc>
 8002d50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d58:	d501      	bpl.n	8002d5e <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0x3e>
                    value = min;
 8002d5a:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc0>)
 8002d5c:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2608);
 8002d5e:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	6939      	ldr	r1, [r7, #16]
 8002d66:	6978      	ldr	r0, [r7, #20]
 8002d68:	f7ff fc8d 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002d6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d70:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002de4 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc4>
 8002d74:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d78:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002de8 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc8>
 8002d7c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d80:	eeb0 0a47 	vmov.f32	s0, s14
 8002d84:	f7ff fb3d 	bl	8002402 <_ZSt5roundf>
 8002d88:	eef0 7a40 	vmov.f32	s15, s0
 8002d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d90:	ee17 3a90 	vmov	r3, s15
 8002d94:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	8bf9      	ldrh	r1, [r7, #30]
 8002d9e:	2000      	movs	r0, #0
 8002da0:	4688      	mov	r8, r1
 8002da2:	4681      	mov	r9, r0
 8002da4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002da8:	6079      	str	r1, [r7, #4]
 8002daa:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002dae:	6039      	str	r1, [r7, #0]
 8002db0:	683c      	ldr	r4, [r7, #0]
 8002db2:	2500      	movs	r5, #0
 8002db4:	ea42 0a04 	orr.w	sl, r2, r4
 8002db8:	ea43 0b05 	orr.w	fp, r3, r5
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	701a      	strb	r2, [r3, #0]
            }
 8002dc8:	bf00      	nop
 8002dca:	3720      	adds	r7, #32
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002dd2:	bf00      	nop
 8002dd4:	440ad666 	.word	0x440ad666
 8002dd8:	440ad666 	.word	0x440ad666
 8002ddc:	c2c80000 	.word	0xc2c80000
 8002de0:	c2c80000 	.word	0xc2c80000
 8002de4:	42c80000 	.word	0x42c80000
 8002de8:	3c23d70a 	.word	0x3c23d70a

08002dec <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df0:	b088      	sub	sp, #32
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6178      	str	r0, [r7, #20]
 8002df6:	6139      	str	r1, [r7, #16]
 8002df8:	60fa      	str	r2, [r7, #12]
 8002dfa:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002dfe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e02:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002ea0 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xb4>
 8002e06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0e:	dd01      	ble.n	8002e14 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0x28>
                    value = max;
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xb8>)
 8002e12:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002e14:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e18:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ea8 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xbc>
 8002e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e24:	d501      	bpl.n	8002e2a <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0x3e>
                    value = min;
 8002e26:	4b21      	ldr	r3, [pc, #132]	; (8002eac <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc0>)
 8002e28:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2601);
 8002e2a:	f640 2329 	movw	r3, #2601	; 0xa29
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	6939      	ldr	r1, [r7, #16]
 8002e32:	6978      	ldr	r0, [r7, #20]
 8002e34:	f7ff fc27 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002e38:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e3c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002eb0 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc4>
 8002e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e44:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002eb4 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc8>
 8002e48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e4c:	eeb0 0a47 	vmov.f32	s0, s14
 8002e50:	f7ff fad7 	bl	8002402 <_ZSt5roundf>
 8002e54:	eef0 7a40 	vmov.f32	s15, s0
 8002e58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e5c:	ee17 3a90 	vmov	r3, s15
 8002e60:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e68:	8bf9      	ldrh	r1, [r7, #30]
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	4688      	mov	r8, r1
 8002e6e:	4681      	mov	r9, r0
 8002e70:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002e74:	6079      	str	r1, [r7, #4]
 8002e76:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002e7a:	6039      	str	r1, [r7, #0]
 8002e7c:	683c      	ldr	r4, [r7, #0]
 8002e7e:	2500      	movs	r5, #0
 8002e80:	ea42 0a04 	orr.w	sl, r2, r4
 8002e84:	ea43 0b05 	orr.w	fp, r3, r5
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2204      	movs	r2, #4
 8002e92:	701a      	strb	r2, [r3, #0]
            }
 8002e94:	bf00      	nop
 8002e96:	3720      	adds	r7, #32
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e9e:	bf00      	nop
 8002ea0:	440ad666 	.word	0x440ad666
 8002ea4:	440ad666 	.word	0x440ad666
 8002ea8:	c2c80000 	.word	0xc2c80000
 8002eac:	c2c80000 	.word	0xc2c80000
 8002eb0:	42c80000 	.word	0x42c80000
 8002eb4:	3c23d70a 	.word	0x3c23d70a

08002eb8 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ebc:	b088      	sub	sp, #32
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6178      	str	r0, [r7, #20]
 8002ec2:	6139      	str	r1, [r7, #16]
 8002ec4:	60fa      	str	r2, [r7, #12]
 8002ec6:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002eca:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ece:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002f6c <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xb4>
 8002ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eda:	dd01      	ble.n	8002ee0 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0x28>
                    value = max;
 8002edc:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xb8>)
 8002ede:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002ee0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ee4:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f74 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xbc>
 8002ee8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	d501      	bpl.n	8002ef6 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0x3e>
                    value = min;
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc0>)
 8002ef4:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2600);
 8002ef6:	f640 2328 	movw	r3, #2600	; 0xa28
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	6939      	ldr	r1, [r7, #16]
 8002efe:	6978      	ldr	r0, [r7, #20]
 8002f00:	f7ff fbc1 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002f04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f08:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002f7c <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc4>
 8002f0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f10:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002f80 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc8>
 8002f14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f18:	eeb0 0a47 	vmov.f32	s0, s14
 8002f1c:	f7ff fa71 	bl	8002402 <_ZSt5roundf>
 8002f20:	eef0 7a40 	vmov.f32	s15, s0
 8002f24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f28:	ee17 3a90 	vmov	r3, s15
 8002f2c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f34:	8bf9      	ldrh	r1, [r7, #30]
 8002f36:	2000      	movs	r0, #0
 8002f38:	4688      	mov	r8, r1
 8002f3a:	4681      	mov	r9, r0
 8002f3c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002f40:	6079      	str	r1, [r7, #4]
 8002f42:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002f46:	6039      	str	r1, [r7, #0]
 8002f48:	683c      	ldr	r4, [r7, #0]
 8002f4a:	2500      	movs	r5, #0
 8002f4c:	ea42 0a04 	orr.w	sl, r2, r4
 8002f50:	ea43 0b05 	orr.w	fp, r3, r5
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	701a      	strb	r2, [r3, #0]
            }
 8002f60:	bf00      	nop
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f6a:	bf00      	nop
 8002f6c:	440ad666 	.word	0x440ad666
 8002f70:	440ad666 	.word	0x440ad666
 8002f74:	c2c80000 	.word	0xc2c80000
 8002f78:	c2c80000 	.word	0xc2c80000
 8002f7c:	42c80000 	.word	0x42c80000
 8002f80:	3c23d70a 	.word	0x3c23d70a

08002f84 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b088      	sub	sp, #32
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6178      	str	r0, [r7, #20]
 8002f8e:	6139      	str	r1, [r7, #16]
 8002f90:	60fa      	str	r2, [r7, #12]
 8002f92:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002f96:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f9a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003038 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xb4>
 8002f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa6:	dd01      	ble.n	8002fac <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8002fa8:	4b24      	ldr	r3, [pc, #144]	; (800303c <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xb8>)
 8002faa:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002fac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fb0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003040 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xbc>
 8002fb4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	d501      	bpl.n	8002fc2 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8002fbe:	4b21      	ldr	r3, [pc, #132]	; (8003044 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc0>)
 8002fc0:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2599);
 8002fc2:	f640 2327 	movw	r3, #2599	; 0xa27
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	6939      	ldr	r1, [r7, #16]
 8002fca:	6978      	ldr	r0, [r7, #20]
 8002fcc:	f7ff fb5b 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fd4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003048 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc4>
 8002fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fdc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800304c <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc8>
 8002fe0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fe4:	eeb0 0a47 	vmov.f32	s0, s14
 8002fe8:	f7ff fa0b 	bl	8002402 <_ZSt5roundf>
 8002fec:	eef0 7a40 	vmov.f32	s15, s0
 8002ff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff4:	ee17 3a90 	vmov	r3, s15
 8002ff8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	8bf9      	ldrh	r1, [r7, #30]
 8003002:	2000      	movs	r0, #0
 8003004:	4688      	mov	r8, r1
 8003006:	4681      	mov	r9, r0
 8003008:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800300c:	6079      	str	r1, [r7, #4]
 800300e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003012:	6039      	str	r1, [r7, #0]
 8003014:	683c      	ldr	r4, [r7, #0]
 8003016:	2500      	movs	r5, #0
 8003018:	ea42 0a04 	orr.w	sl, r2, r4
 800301c:	ea43 0b05 	orr.w	fp, r3, r5
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2204      	movs	r2, #4
 800302a:	701a      	strb	r2, [r3, #0]
            }
 800302c:	bf00      	nop
 800302e:	3720      	adds	r7, #32
 8003030:	46bd      	mov	sp, r7
 8003032:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003036:	bf00      	nop
 8003038:	440ad666 	.word	0x440ad666
 800303c:	440ad666 	.word	0x440ad666
 8003040:	c2c80000 	.word	0xc2c80000
 8003044:	c2c80000 	.word	0xc2c80000
 8003048:	42c80000 	.word	0x42c80000
 800304c:	3c23d70a 	.word	0x3c23d70a

08003050 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003054:	b088      	sub	sp, #32
 8003056:	af00      	add	r7, sp, #0
 8003058:	6178      	str	r0, [r7, #20]
 800305a:	6139      	str	r1, [r7, #16]
 800305c:	60fa      	str	r2, [r7, #12]
 800305e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003062:	edd7 7a02 	vldr	s15, [r7, #8]
 8003066:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003104 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xb4>
 800306a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800306e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003072:	dd01      	ble.n	8003078 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xb8>)
 8003076:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003078:	edd7 7a02 	vldr	s15, [r7, #8]
 800307c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800310c <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xbc>
 8003080:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003088:	d501      	bpl.n	800308e <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 800308a:	4b21      	ldr	r3, [pc, #132]	; (8003110 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc0>)
 800308c:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2598);
 800308e:	f640 2326 	movw	r3, #2598	; 0xa26
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	6939      	ldr	r1, [r7, #16]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f7ff faf5 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 800309c:	edd7 7a02 	vldr	s15, [r7, #8]
 80030a0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003114 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc4>
 80030a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80030a8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003118 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc8>
 80030ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80030b0:	eeb0 0a47 	vmov.f32	s0, s14
 80030b4:	f7ff f9a5 	bl	8002402 <_ZSt5roundf>
 80030b8:	eef0 7a40 	vmov.f32	s15, s0
 80030bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c0:	ee17 3a90 	vmov	r3, s15
 80030c4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	8bf9      	ldrh	r1, [r7, #30]
 80030ce:	2000      	movs	r0, #0
 80030d0:	4688      	mov	r8, r1
 80030d2:	4681      	mov	r9, r0
 80030d4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80030d8:	6079      	str	r1, [r7, #4]
 80030da:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80030de:	6039      	str	r1, [r7, #0]
 80030e0:	683c      	ldr	r4, [r7, #0]
 80030e2:	2500      	movs	r5, #0
 80030e4:	ea42 0a04 	orr.w	sl, r2, r4
 80030e8:	ea43 0b05 	orr.w	fp, r3, r5
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2204      	movs	r2, #4
 80030f6:	701a      	strb	r2, [r3, #0]
            }
 80030f8:	bf00      	nop
 80030fa:	3720      	adds	r7, #32
 80030fc:	46bd      	mov	sp, r7
 80030fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003102:	bf00      	nop
 8003104:	440ad666 	.word	0x440ad666
 8003108:	440ad666 	.word	0x440ad666
 800310c:	c2c80000 	.word	0xc2c80000
 8003110:	c2c80000 	.word	0xc2c80000
 8003114:	42c80000 	.word	0x42c80000
 8003118:	3c23d70a 	.word	0x3c23d70a

0800311c <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800311c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003120:	b088      	sub	sp, #32
 8003122:	af00      	add	r7, sp, #0
 8003124:	6178      	str	r0, [r7, #20]
 8003126:	6139      	str	r1, [r7, #16]
 8003128:	60fa      	str	r2, [r7, #12]
 800312a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800312e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003132:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80031d0 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xb4>
 8003136:	eef4 7ac7 	vcmpe.f32	s15, s14
 800313a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800313e:	dd01      	ble.n	8003144 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xb8>)
 8003142:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003144:	edd7 7a02 	vldr	s15, [r7, #8]
 8003148:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80031d8 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xbc>
 800314c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003154:	d501      	bpl.n	800315a <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8003156:	4b21      	ldr	r3, [pc, #132]	; (80031dc <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc0>)
 8003158:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2597);
 800315a:	f640 2325 	movw	r3, #2597	; 0xa25
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	6939      	ldr	r1, [r7, #16]
 8003162:	6978      	ldr	r0, [r7, #20]
 8003164:	f7ff fa8f 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003168:	edd7 7a02 	vldr	s15, [r7, #8]
 800316c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80031e0 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc4>
 8003170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003174:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80031e4 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc8>
 8003178:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800317c:	eeb0 0a47 	vmov.f32	s0, s14
 8003180:	f7ff f93f 	bl	8002402 <_ZSt5roundf>
 8003184:	eef0 7a40 	vmov.f32	s15, s0
 8003188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318c:	ee17 3a90 	vmov	r3, s15
 8003190:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	8bf9      	ldrh	r1, [r7, #30]
 800319a:	2000      	movs	r0, #0
 800319c:	4688      	mov	r8, r1
 800319e:	4681      	mov	r9, r0
 80031a0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80031a4:	6079      	str	r1, [r7, #4]
 80031a6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80031aa:	6039      	str	r1, [r7, #0]
 80031ac:	683c      	ldr	r4, [r7, #0]
 80031ae:	2500      	movs	r5, #0
 80031b0:	ea42 0a04 	orr.w	sl, r2, r4
 80031b4:	ea43 0b05 	orr.w	fp, r3, r5
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2204      	movs	r2, #4
 80031c2:	701a      	strb	r2, [r3, #0]
            }
 80031c4:	bf00      	nop
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ce:	bf00      	nop
 80031d0:	440ad666 	.word	0x440ad666
 80031d4:	440ad666 	.word	0x440ad666
 80031d8:	c2c80000 	.word	0xc2c80000
 80031dc:	c2c80000 	.word	0xc2c80000
 80031e0:	42c80000 	.word	0x42c80000
 80031e4:	3c23d70a 	.word	0x3c23d70a

080031e8 <_ZN3can7signals21SensorF_OD_IMU_number3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2592            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80031e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2592);
 80031f8:	f44f 6322 	mov.w	r3, #2592	; 0xa20
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	68b9      	ldr	r1, [r7, #8]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff fa40 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003210:	7dfb      	ldrb	r3, [r7, #23]
 8003212:	2200      	movs	r2, #0
 8003214:	4698      	mov	r8, r3
 8003216:	4691      	mov	r9, r2
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003224:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003228:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800322c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003230:	2500      	movs	r5, #0
 8003232:	ea40 0a04 	orr.w	sl, r0, r4
 8003236:	ea41 0b05 	orr.w	fp, r1, r5
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2203      	movs	r2, #3
 8003244:	701a      	strb	r2, [r3, #0]
            }
 8003246:	bf00      	nop
 8003248:	3718      	adds	r7, #24
 800324a:	46bd      	mov	sp, r7
 800324c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003250 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_>:
                SensorF_SDO_ID::set(intel, motorola, dlc, 2309);
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
                dlc = 3;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2309) {
 800325a:	6839      	ldr	r1, [r7, #0]
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fa3a 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003262:	4603      	mov	r3, r0
 8003264:	461a      	mov	r2, r3
 8003266:	f640 1305 	movw	r3, #2309	; 0x905
 800326a:	429a      	cmp	r2, r3
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d000      	beq.n	800327a <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_+0x2a>
                    while(1);
 8003278:	e7fe      	b.n	8003278 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	0c02      	lsrs	r2, r0, #16
 800328a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800328e:	0c0b      	lsrs	r3, r1, #16
 8003290:	4613      	mov	r3, r2
 8003292:	73fb      	strb	r3, [r7, #15]
                return value;
 8003294:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(1);
            constexpr static float max = static_cast<float>(300);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80032a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a4:	b088      	sub	sp, #32
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6178      	str	r0, [r7, #20]
 80032aa:	6139      	str	r1, [r7, #16]
 80032ac:	60fa      	str	r2, [r7, #12]
 80032ae:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80032b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032b6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800334c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xac>
 80032ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c2:	dd01      	ble.n	80032c8 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0x28>
                    value = max;
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xb0>)
 80032c6:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80032c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80032cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80032d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d8:	d502      	bpl.n	80032e0 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0x40>
                    value = min;
 80032da:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80032de:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2308);
 80032e0:	f640 1304 	movw	r3, #2308	; 0x904
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	6939      	ldr	r1, [r7, #16]
 80032e8:	6978      	ldr	r0, [r7, #20]
 80032ea:	f7ff f9cc 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.005f)));
 80032ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003354 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xb4>
 80032f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032fa:	eeb0 0a47 	vmov.f32	s0, s14
 80032fe:	f7ff f880 	bl	8002402 <_ZSt5roundf>
 8003302:	eef0 7a40 	vmov.f32	s15, s0
 8003306:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800330a:	ee17 3a90 	vmov	r3, s15
 800330e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	8bf9      	ldrh	r1, [r7, #30]
 8003318:	2000      	movs	r0, #0
 800331a:	4688      	mov	r8, r1
 800331c:	4681      	mov	r9, r0
 800331e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003322:	6079      	str	r1, [r7, #4]
 8003324:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003328:	6039      	str	r1, [r7, #0]
 800332a:	683c      	ldr	r4, [r7, #0]
 800332c:	2500      	movs	r5, #0
 800332e:	ea42 0a04 	orr.w	sl, r2, r4
 8003332:	ea43 0b05 	orr.w	fp, r3, r5
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2204      	movs	r2, #4
 8003340:	701a      	strb	r2, [r3, #0]
            }
 8003342:	bf00      	nop
 8003344:	3720      	adds	r7, #32
 8003346:	46bd      	mov	sp, r7
 8003348:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334c:	43960000 	.word	0x43960000
 8003350:	43960000 	.word	0x43960000
 8003354:	3ba3d70a 	.word	0x3ba3d70a

08003358 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2308) {
 8003362:	6839      	ldr	r1, [r7, #0]
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f7ff f9b6 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800336a:	4603      	mov	r3, r0
 800336c:	461a      	mov	r2, r3
 800336e:	f640 1304 	movw	r3, #2308	; 0x904
 8003372:	429a      	cmp	r2, r3
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d000      	beq.n	8003382 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x2a>
                    while(1);
 8003380:	e7fe      	b.n	8003380 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	0c02      	lsrs	r2, r0, #16
 8003392:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003396:	0c0b      	lsrs	r3, r1, #16
 8003398:	4613      	mov	r3, r2
 800339a:	81fb      	strh	r3, [r7, #14]
                return value * (0.005f);
 800339c:	89fb      	ldrh	r3, [r7, #14]
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033a6:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80033b8 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x60>
 80033aa:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80033ae:	eeb0 0a67 	vmov.f32	s0, s15
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	3ba3d70a 	.word	0x3ba3d70a

080033bc <_ZN3can7signals24SensorF_OD_HVBatteryMode3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2307            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80033bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2307);
 80033cc:	f640 1303 	movw	r3, #2307	; 0x903
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68b9      	ldr	r1, [r7, #8]
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7ff f956 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	2200      	movs	r2, #0
 80033e8:	4698      	mov	r8, r3
 80033ea:	4691      	mov	r9, r2
 80033ec:	f04f 0200 	mov.w	r2, #0
 80033f0:	f04f 0300 	mov.w	r3, #0
 80033f4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80033f8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80033fc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003400:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003404:	2500      	movs	r5, #0
 8003406:	ea40 0a04 	orr.w	sl, r0, r4
 800340a:	ea41 0b05 	orr.w	fp, r1, r5
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2203      	movs	r2, #3
 8003418:	701a      	strb	r2, [r3, #0]
            }
 800341a:	bf00      	nop
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003424 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2307) {
 800342e:	6839      	ldr	r1, [r7, #0]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff f950 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003436:	4603      	mov	r3, r0
 8003438:	461a      	mov	r2, r3
 800343a:	f640 1303 	movw	r3, #2307	; 0x903
 800343e:	429a      	cmp	r2, r3
 8003440:	bf14      	ite	ne
 8003442:	2301      	movne	r3, #1
 8003444:	2300      	moveq	r3, #0
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d000      	beq.n	800344e <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_+0x2a>
                    while(1);
 800344c:	e7fe      	b.n	800344c <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	0c02      	lsrs	r2, r0, #16
 800345e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003462:	0c0b      	lsrs	r3, r1, #16
 8003464:	4613      	mov	r3, r2
 8003466:	73fb      	strb	r3, [r7, #15]
                return value;
 8003468:	7bfb      	ldrb	r3, [r7, #15]
            }
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <_ZN3can7signals31SensorF_OD_StateMachineActivate3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2306            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003472:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2306);
 8003482:	f640 1302 	movw	r3, #2306	; 0x902
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f7ff f8fb 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	e9d3 0100 	ldrd	r0, r1, [r3]
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2200      	movs	r2, #0
 800349e:	4698      	mov	r8, r3
 80034a0:	4691      	mov	r9, r2
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	f04f 0300 	mov.w	r3, #0
 80034aa:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80034ae:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80034b2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80034b6:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80034ba:	2500      	movs	r5, #0
 80034bc:	ea40 0a04 	orr.w	sl, r0, r4
 80034c0:	ea41 0b05 	orr.w	fp, r1, r5
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2203      	movs	r2, #3
 80034ce:	701a      	strb	r2, [r3, #0]
            }
 80034d0:	bf00      	nop
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034da <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80034da:	b580      	push	{r7, lr}
 80034dc:	b084      	sub	sp, #16
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2306) {
 80034e4:	6839      	ldr	r1, [r7, #0]
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff f8f5 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80034ec:	4603      	mov	r3, r0
 80034ee:	461a      	mov	r2, r3
 80034f0:	f640 1302 	movw	r3, #2306	; 0x902
 80034f4:	429a      	cmp	r2, r3
 80034f6:	bf14      	ite	ne
 80034f8:	2301      	movne	r3, #1
 80034fa:	2300      	moveq	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d000      	beq.n	8003504 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_+0x2a>
                    while(1);
 8003502:	e7fe      	b.n	8003502 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	e9d3 0100 	ldrd	r0, r1, [r3]
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	0c02      	lsrs	r2, r0, #16
 8003514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003518:	0c0b      	lsrs	r3, r1, #16
 800351a:	4613      	mov	r3, r2
 800351c:	73fb      	strb	r3, [r7, #15]
                return value;
 800351e:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh>:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint8_t min = static_cast<uint8_t>(5);
            constexpr static uint8_t max = static_cast<uint8_t>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh+0x1a>
                    value = max;
 800353e:	2364      	movs	r3, #100	; 0x64
 8003540:	70fb      	strb	r3, [r7, #3]
                }
                if (value < min) {
 8003542:	78fb      	ldrb	r3, [r7, #3]
 8003544:	2b04      	cmp	r3, #4
 8003546:	d801      	bhi.n	800354c <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh+0x24>
                    value = min;
 8003548:	2305      	movs	r3, #5
 800354a:	70fb      	strb	r3, [r7, #3]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2305);
 800354c:	f640 1301 	movw	r3, #2305	; 0x901
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f7ff f896 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003564:	7dfb      	ldrb	r3, [r7, #23]
 8003566:	2200      	movs	r2, #0
 8003568:	4698      	mov	r8, r3
 800356a:	4691      	mov	r9, r2
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003578:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800357c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003580:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003584:	2500      	movs	r5, #0
 8003586:	ea40 0a04 	orr.w	sl, r0, r4
 800358a:	ea41 0b05 	orr.w	fp, r1, r5
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2203      	movs	r2, #3
 8003598:	701a      	strb	r2, [r3, #0]
            }
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035a4 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2305) {
 80035ae:	6839      	ldr	r1, [r7, #0]
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff f890 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80035b6:	4603      	mov	r3, r0
 80035b8:	461a      	mov	r2, r3
 80035ba:	f640 1301 	movw	r3, #2305	; 0x901
 80035be:	429a      	cmp	r2, r3
 80035c0:	bf14      	ite	ne
 80035c2:	2301      	movne	r3, #1
 80035c4:	2300      	moveq	r3, #0
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d000      	beq.n	80035ce <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_+0x2a>
                    while(1);
 80035cc:	e7fe      	b.n	80035cc <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035d4:	f04f 0200 	mov.w	r2, #0
 80035d8:	f04f 0300 	mov.w	r3, #0
 80035dc:	0c02      	lsrs	r2, r0, #16
 80035de:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035e2:	0c0b      	lsrs	r3, r1, #16
 80035e4:	4613      	mov	r3, r2
 80035e6:	73fb      	strb	r3, [r7, #15]
                return value;
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
            }
 80035ea:	4618      	mov	r0, r3
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <_ZN3can7signals28SensorF_OD_TelemetryCommands3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2304            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80035f2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2304);
 8003602:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f7ff f83b 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	e9d3 0100 	ldrd	r0, r1, [r3]
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	2200      	movs	r2, #0
 800361e:	4698      	mov	r8, r3
 8003620:	4691      	mov	r9, r2
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800362e:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003632:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003636:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800363a:	2500      	movs	r5, #0
 800363c:	ea40 0a04 	orr.w	sl, r0, r4
 8003640:	ea41 0b05 	orr.w	fp, r1, r5
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2203      	movs	r2, #3
 800364e:	701a      	strb	r2, [r3, #0]
            }
 8003650:	bf00      	nop
 8003652:	3718      	adds	r7, #24
 8003654:	46bd      	mov	sp, r7
 8003656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800365a <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800365a:	b580      	push	{r7, lr}
 800365c:	b084      	sub	sp, #16
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2304) {
 8003664:	6839      	ldr	r1, [r7, #0]
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff f835 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800366c:	4603      	mov	r3, r0
 800366e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8003672:	bf14      	ite	ne
 8003674:	2301      	movne	r3, #1
 8003676:	2300      	moveq	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d000      	beq.n	8003680 <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_+0x26>
                    while(1);
 800367e:	e7fe      	b.n	800367e <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	f04f 0300 	mov.w	r3, #0
 800368e:	0c02      	lsrs	r2, r0, #16
 8003690:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003694:	0c0b      	lsrs	r3, r1, #16
 8003696:	4613      	mov	r3, r2
 8003698:	73fb      	strb	r3, [r7, #15]
                return value;
 800369a:	7bfb      	ldrb	r3, [r7, #15]
            }
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0.01);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80036a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a8:	b088      	sub	sp, #32
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6178      	str	r0, [r7, #20]
 80036ae:	6139      	str	r1, [r7, #16]
 80036b0:	60fa      	str	r2, [r7, #12]
 80036b2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80036b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036ba:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003750 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xac>
 80036be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c6:	dd01      	ble.n	80036cc <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0x28>
                    value = max;
 80036c8:	4b22      	ldr	r3, [pc, #136]	; (8003754 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb0>)
 80036ca:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80036cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80036d0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003758 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb4>
 80036d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036dc:	d501      	bpl.n	80036e2 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0x3e>
                    value = min;
 80036de:	4b1f      	ldr	r3, [pc, #124]	; (800375c <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb8>)
 80036e0:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2048);
 80036e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	6939      	ldr	r1, [r7, #16]
 80036ea:	6978      	ldr	r0, [r7, #20]
 80036ec:	f7fe ffcb 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 80036f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80036f4:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003758 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb4>
 80036f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80036fc:	eeb0 0a47 	vmov.f32	s0, s14
 8003700:	f7fe fe7f 	bl	8002402 <_ZSt5roundf>
 8003704:	eef0 7a40 	vmov.f32	s15, s0
 8003708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800370c:	ee17 3a90 	vmov	r3, s15
 8003710:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	8bf9      	ldrh	r1, [r7, #30]
 800371a:	2000      	movs	r0, #0
 800371c:	4688      	mov	r8, r1
 800371e:	4681      	mov	r9, r0
 8003720:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003724:	6079      	str	r1, [r7, #4]
 8003726:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800372a:	6039      	str	r1, [r7, #0]
 800372c:	683c      	ldr	r4, [r7, #0]
 800372e:	2500      	movs	r5, #0
 8003730:	ea42 0a04 	orr.w	sl, r2, r4
 8003734:	ea43 0b05 	orr.w	fp, r3, r5
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2204      	movs	r2, #4
 8003742:	701a      	strb	r2, [r3, #0]
            }
 8003744:	bf00      	nop
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800374e:	bf00      	nop
 8003750:	42c80000 	.word	0x42c80000
 8003754:	42c80000 	.word	0x42c80000
 8003758:	3c23d70a 	.word	0x3c23d70a
 800375c:	3c23d70a 	.word	0x3c23d70a

08003760 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2048) {
 800376a:	6839      	ldr	r1, [r7, #0]
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7fe ffb2 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003772:	4603      	mov	r3, r0
 8003774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003778:	bf14      	ite	ne
 800377a:	2301      	movne	r3, #1
 800377c:	2300      	moveq	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d000      	beq.n	8003786 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x26>
                    while(1);
 8003784:	e7fe      	b.n	8003784 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	f04f 0300 	mov.w	r3, #0
 8003794:	0c02      	lsrs	r2, r0, #16
 8003796:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800379a:	0c0b      	lsrs	r3, r1, #16
 800379c:	4613      	mov	r3, r2
 800379e:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 80037a0:	89fb      	ldrh	r3, [r7, #14]
 80037a2:	ee07 3a90 	vmov	s15, r3
 80037a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80037aa:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80037bc <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x5c>
 80037ae:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80037b2:	eeb0 0a67 	vmov.f32	s0, s15
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	3c23d70a 	.word	0x3c23d70a

080037c0 <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80037c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037c4:	b088      	sub	sp, #32
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6178      	str	r0, [r7, #20]
 80037ca:	6139      	str	r1, [r7, #16]
 80037cc:	60fa      	str	r2, [r7, #12]
 80037ce:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d6:	d302      	bcc.n	80037de <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80037d8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80037dc:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1129);
 80037de:	f240 4369 	movw	r3, #1129	; 0x469
 80037e2:	68fa      	ldr	r2, [r7, #12]
 80037e4:	6939      	ldr	r1, [r7, #16]
 80037e6:	6978      	ldr	r0, [r7, #20]
 80037e8:	f7fe ff4d 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f6:	69f9      	ldr	r1, [r7, #28]
 80037f8:	2000      	movs	r0, #0
 80037fa:	468a      	mov	sl, r1
 80037fc:	4683      	mov	fp, r0
 80037fe:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003802:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003806:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800380a:	0424      	lsls	r4, r4, #16
 800380c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003810:	ea42 0104 	orr.w	r1, r2, r4
 8003814:	6039      	str	r1, [r7, #0]
 8003816:	432b      	orrs	r3, r5
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003820:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2205      	movs	r2, #5
 8003828:	701a      	strb	r2, [r3, #0]
            }
 800382a:	bf00      	nop
 800382c:	3720      	adds	r7, #32
 800382e:	46bd      	mov	sp, r7
 8003830:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003834 <_ZN3can7signals27SensorF_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003834:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	60b9      	str	r1, [r7, #8]
 8003840:	607a      	str	r2, [r7, #4]
 8003842:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1128);
 8003844:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f7fe ff1a 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	e9d3 0100 	ldrd	r0, r1, [r3]
 800385c:	7dfb      	ldrb	r3, [r7, #23]
 800385e:	2200      	movs	r2, #0
 8003860:	4698      	mov	r8, r3
 8003862:	4691      	mov	r9, r2
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003870:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003874:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003878:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800387c:	2500      	movs	r5, #0
 800387e:	ea40 0a04 	orr.w	sl, r0, r4
 8003882:	ea41 0b05 	orr.w	fp, r1, r5
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2203      	movs	r2, #3
 8003890:	701a      	strb	r2, [r3, #0]
            }
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800389c <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800389c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038a0:	b088      	sub	sp, #32
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6178      	str	r0, [r7, #20]
 80038a6:	6139      	str	r1, [r7, #16]
 80038a8:	60fa      	str	r2, [r7, #12]
 80038aa:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b2:	d302      	bcc.n	80038ba <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80038b4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80038b8:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1127);
 80038ba:	f240 4367 	movw	r3, #1127	; 0x467
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	6939      	ldr	r1, [r7, #16]
 80038c2:	6978      	ldr	r0, [r7, #20]
 80038c4:	f7fe fedf 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	69f9      	ldr	r1, [r7, #28]
 80038d4:	2000      	movs	r0, #0
 80038d6:	468a      	mov	sl, r1
 80038d8:	4683      	mov	fp, r0
 80038da:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80038de:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80038e2:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80038e6:	0424      	lsls	r4, r4, #16
 80038e8:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80038ec:	ea42 0104 	orr.w	r1, r2, r4
 80038f0:	6039      	str	r1, [r7, #0]
 80038f2:	432b      	orrs	r3, r5
 80038f4:	607b      	str	r3, [r7, #4]
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038fc:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2205      	movs	r2, #5
 8003904:	701a      	strb	r2, [r3, #0]
            }
 8003906:	bf00      	nop
 8003908:	3720      	adds	r7, #32
 800390a:	46bd      	mov	sp, r7
 800390c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003910 <_ZN3can7signals22SensorF_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1126);
 8003920:	f240 4366 	movw	r3, #1126	; 0x466
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f7fe feac 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003938:	7dfb      	ldrb	r3, [r7, #23]
 800393a:	2200      	movs	r2, #0
 800393c:	4698      	mov	r8, r3
 800393e:	4691      	mov	r9, r2
 8003940:	f04f 0200 	mov.w	r2, #0
 8003944:	f04f 0300 	mov.w	r3, #0
 8003948:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800394c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003950:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003954:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003958:	2500      	movs	r5, #0
 800395a:	ea40 0a04 	orr.w	sl, r0, r4
 800395e:	ea41 0b05 	orr.w	fp, r1, r5
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2203      	movs	r2, #3
 800396c:	701a      	strb	r2, [r3, #0]
            }
 800396e:	bf00      	nop
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003978 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800397c:	b088      	sub	sp, #32
 800397e:	af00      	add	r7, sp, #0
 8003980:	6178      	str	r0, [r7, #20]
 8003982:	6139      	str	r1, [r7, #16]
 8003984:	60fa      	str	r2, [r7, #12]
 8003986:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8003988:	897b      	ldrh	r3, [r7, #10]
 800398a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398e:	d902      	bls.n	8003996 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003994:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8003996:	897b      	ldrh	r3, [r7, #10]
 8003998:	2b7c      	cmp	r3, #124	; 0x7c
 800399a:	d801      	bhi.n	80039a0 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 800399c:	237d      	movs	r3, #125	; 0x7d
 800399e:	817b      	strh	r3, [r7, #10]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1124);
 80039a0:	f240 4364 	movw	r3, #1124	; 0x464
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	6939      	ldr	r1, [r7, #16]
 80039a8:	6978      	ldr	r0, [r7, #20]
 80039aa:	f7fe fe6c 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b8:	8bf9      	ldrh	r1, [r7, #30]
 80039ba:	2000      	movs	r0, #0
 80039bc:	4688      	mov	r8, r1
 80039be:	4681      	mov	r9, r0
 80039c0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80039c4:	6079      	str	r1, [r7, #4]
 80039c6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80039ca:	6039      	str	r1, [r7, #0]
 80039cc:	683c      	ldr	r4, [r7, #0]
 80039ce:	2500      	movs	r5, #0
 80039d0:	ea42 0a04 	orr.w	sl, r2, r4
 80039d4:	ea43 0b05 	orr.w	fp, r3, r5
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2204      	movs	r2, #4
 80039e2:	701a      	strb	r2, [r3, #0]
            }
 80039e4:	bf00      	nop
 80039e6:	3720      	adds	r7, #32
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039ee <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1124) {
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f7fe fe6b 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	f240 4364 	movw	r3, #1124	; 0x464
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d000      	beq.n	8003a18 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8003a16:	e7fe      	b.n	8003a16 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a1e:	f04f 0200 	mov.w	r2, #0
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	0c02      	lsrs	r2, r0, #16
 8003a28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a2c:	0c0b      	lsrs	r3, r1, #16
 8003a2e:	4613      	mov	r3, r2
 8003a30:	81fb      	strh	r3, [r7, #14]
                return value;
 8003a32:	89fb      	ldrh	r3, [r7, #14]
            }
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1123);
 8003a4c:	f240 4363 	movw	r3, #1123	; 0x463
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7fe fe16 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	2200      	movs	r2, #0
 8003a68:	4698      	mov	r8, r3
 8003a6a:	4691      	mov	r9, r2
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003a78:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003a7c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003a80:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003a84:	2500      	movs	r5, #0
 8003a86:	ea40 0a04 	orr.w	sl, r0, r4
 8003a8a:	ea41 0b05 	orr.w	fp, r1, r5
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2203      	movs	r2, #3
 8003a98:	701a      	strb	r2, [r3, #0]
            }
 8003a9a:	bf00      	nop
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003aa4 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1123) {
 8003aae:	6839      	ldr	r1, [r7, #0]
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7fe fe10 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f240 4363 	movw	r3, #1123	; 0x463
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	bf14      	ite	ne
 8003ac2:	2301      	movne	r3, #1
 8003ac4:	2300      	moveq	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d000      	beq.n	8003ace <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003acc:	e7fe      	b.n	8003acc <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	f04f 0300 	mov.w	r3, #0
 8003adc:	0c02      	lsrs	r2, r0, #16
 8003ade:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003ae2:	0c0b      	lsrs	r3, r1, #16
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	73fb      	strb	r3, [r7, #15]
                return value;
 8003ae8:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
	...

08003af4 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b088      	sub	sp, #32
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6178      	str	r0, [r7, #20]
 8003afe:	6139      	str	r1, [r7, #16]
 8003b00:	60fa      	str	r2, [r7, #12]
 8003b02:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1122);
 8003b04:	f240 4362 	movw	r3, #1122	; 0x462
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	6939      	ldr	r1, [r7, #16]
 8003b0c:	6978      	ldr	r0, [r7, #20]
 8003b0e:	f7fe fdba 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	69f9      	ldr	r1, [r7, #28]
 8003b1e:	2000      	movs	r0, #0
 8003b20:	468a      	mov	sl, r1
 8003b22:	4683      	mov	fp, r0
 8003b24:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003b28:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003b2c:	480c      	ldr	r0, [pc, #48]	; (8003b60 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 8003b2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003b32:	ea08 0400 	and.w	r4, r8, r0
 8003b36:	ea09 0501 	and.w	r5, r9, r1
 8003b3a:	ea42 0104 	orr.w	r1, r2, r4
 8003b3e:	6039      	str	r1, [r7, #0]
 8003b40:	432b      	orrs	r3, r5
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b4a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2206      	movs	r2, #6
 8003b52:	701a      	strb	r2, [r3, #0]
            }
 8003b54:	bf00      	nop
 8003b56:	3720      	adds	r7, #32
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b5e:	bf00      	nop
 8003b60:	ffff0000 	.word	0xffff0000

08003b64 <_ZN3can7signals24SensorF_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b68:	b086      	sub	sp, #24
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1121);
 8003b74:	f240 4361 	movw	r3, #1121	; 0x461
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68b9      	ldr	r1, [r7, #8]
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7fe fd82 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4698      	mov	r8, r3
 8003b92:	4691      	mov	r9, r2
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003ba0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ba4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003ba8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003bac:	2500      	movs	r5, #0
 8003bae:	ea40 0a04 	orr.w	sl, r0, r4
 8003bb2:	ea41 0b05 	orr.w	fp, r1, r5
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2203      	movs	r2, #3
 8003bc0:	701a      	strb	r2, [r3, #0]
            }
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003bcc <_ZN3can7signals24SensorF_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1120);
 8003bdc:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	68b9      	ldr	r1, [r7, #8]
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7fe fd4e 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003bea:	78fb      	ldrb	r3, [r7, #3]
 8003bec:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4698      	mov	r8, r3
 8003bfa:	4691      	mov	r9, r2
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003c08:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003c0c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003c10:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003c14:	2500      	movs	r5, #0
 8003c16:	ea40 0a04 	orr.w	sl, r0, r4
 8003c1a:	ea41 0b05 	orr.w	fp, r1, r5
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2203      	movs	r2, #3
 8003c28:	701a      	strb	r2, [r3, #0]
            }
 8003c2a:	bf00      	nop
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c34 <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c38:	b088      	sub	sp, #32
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6178      	str	r0, [r7, #20]
 8003c3e:	6139      	str	r1, [r7, #16]
 8003c40:	60fa      	str	r2, [r7, #12]
 8003c42:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c4a:	d302      	bcc.n	8003c52 <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003c4c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003c50:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1113);
 8003c52:	f240 4359 	movw	r3, #1113	; 0x459
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6939      	ldr	r1, [r7, #16]
 8003c5a:	6978      	ldr	r0, [r7, #20]
 8003c5c:	f7fe fd13 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6a:	69f9      	ldr	r1, [r7, #28]
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	468a      	mov	sl, r1
 8003c70:	4683      	mov	fp, r0
 8003c72:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003c76:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003c7a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003c7e:	0424      	lsls	r4, r4, #16
 8003c80:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003c84:	ea42 0104 	orr.w	r1, r2, r4
 8003c88:	6039      	str	r1, [r7, #0]
 8003c8a:	432b      	orrs	r3, r5
 8003c8c:	607b      	str	r3, [r7, #4]
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c94:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	701a      	strb	r2, [r3, #0]
            }
 8003c9e:	bf00      	nop
 8003ca0:	3720      	adds	r7, #32
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ca8 <_ZN3can7signals27SensorF_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cac:	b086      	sub	sp, #24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1112);
 8003cb8:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f7fe fce0 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cd0:	7dfb      	ldrb	r3, [r7, #23]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	4698      	mov	r8, r3
 8003cd6:	4691      	mov	r9, r2
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003ce4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ce8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003cec:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003cf0:	2500      	movs	r5, #0
 8003cf2:	ea40 0a04 	orr.w	sl, r0, r4
 8003cf6:	ea41 0b05 	orr.w	fp, r1, r5
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2203      	movs	r2, #3
 8003d04:	701a      	strb	r2, [r3, #0]
            }
 8003d06:	bf00      	nop
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003d10 <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d14:	b088      	sub	sp, #32
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6178      	str	r0, [r7, #20]
 8003d1a:	6139      	str	r1, [r7, #16]
 8003d1c:	60fa      	str	r2, [r7, #12]
 8003d1e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d26:	d302      	bcc.n	8003d2e <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003d28:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003d2c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1111);
 8003d2e:	f240 4357 	movw	r3, #1111	; 0x457
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	6939      	ldr	r1, [r7, #16]
 8003d36:	6978      	ldr	r0, [r7, #20]
 8003d38:	f7fe fca5 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d46:	69f9      	ldr	r1, [r7, #28]
 8003d48:	2000      	movs	r0, #0
 8003d4a:	468a      	mov	sl, r1
 8003d4c:	4683      	mov	fp, r0
 8003d4e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003d52:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003d56:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003d5a:	0424      	lsls	r4, r4, #16
 8003d5c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003d60:	ea42 0104 	orr.w	r1, r2, r4
 8003d64:	6039      	str	r1, [r7, #0]
 8003d66:	432b      	orrs	r3, r5
 8003d68:	607b      	str	r3, [r7, #4]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003d70:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2205      	movs	r2, #5
 8003d78:	701a      	strb	r2, [r3, #0]
            }
 8003d7a:	bf00      	nop
 8003d7c:	3720      	adds	r7, #32
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003d84 <_ZN3can7signals22SensorF_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003d84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d88:	b086      	sub	sp, #24
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	60b9      	str	r1, [r7, #8]
 8003d90:	607a      	str	r2, [r7, #4]
 8003d92:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1110);
 8003d94:	f240 4356 	movw	r3, #1110	; 0x456
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7fe fc72 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003da2:	78fb      	ldrb	r3, [r7, #3]
 8003da4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	2200      	movs	r2, #0
 8003db0:	4698      	mov	r8, r3
 8003db2:	4691      	mov	r9, r2
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003dc0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003dc4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003dc8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003dcc:	2500      	movs	r5, #0
 8003dce:	ea40 0a04 	orr.w	sl, r0, r4
 8003dd2:	ea41 0b05 	orr.w	fp, r1, r5
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2203      	movs	r2, #3
 8003de0:	701a      	strb	r2, [r3, #0]
            }
 8003de2:	bf00      	nop
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003dec <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df0:	b088      	sub	sp, #32
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6178      	str	r0, [r7, #20]
 8003df6:	6139      	str	r1, [r7, #16]
 8003df8:	60fa      	str	r2, [r7, #12]
 8003dfa:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8003dfc:	897b      	ldrh	r3, [r7, #10]
 8003dfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e02:	d902      	bls.n	8003e0a <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003e04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e08:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8003e0a:	897b      	ldrh	r3, [r7, #10]
 8003e0c:	2b7c      	cmp	r3, #124	; 0x7c
 8003e0e:	d801      	bhi.n	8003e14 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8003e10:	237d      	movs	r3, #125	; 0x7d
 8003e12:	817b      	strh	r3, [r7, #10]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1108);
 8003e14:	f240 4354 	movw	r3, #1108	; 0x454
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	6939      	ldr	r1, [r7, #16]
 8003e1c:	6978      	ldr	r0, [r7, #20]
 8003e1e:	f7fe fc32 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003e22:	897b      	ldrh	r3, [r7, #10]
 8003e24:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2c:	8bf9      	ldrh	r1, [r7, #30]
 8003e2e:	2000      	movs	r0, #0
 8003e30:	4688      	mov	r8, r1
 8003e32:	4681      	mov	r9, r0
 8003e34:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003e38:	6079      	str	r1, [r7, #4]
 8003e3a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003e3e:	6039      	str	r1, [r7, #0]
 8003e40:	683c      	ldr	r4, [r7, #0]
 8003e42:	2500      	movs	r5, #0
 8003e44:	ea42 0a04 	orr.w	sl, r2, r4
 8003e48:	ea43 0b05 	orr.w	fp, r3, r5
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2204      	movs	r2, #4
 8003e56:	701a      	strb	r2, [r3, #0]
            }
 8003e58:	bf00      	nop
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e62 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b084      	sub	sp, #16
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
 8003e6a:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1108) {
 8003e6c:	6839      	ldr	r1, [r7, #0]
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7fe fc31 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003e74:	4603      	mov	r3, r0
 8003e76:	461a      	mov	r2, r3
 8003e78:	f240 4354 	movw	r3, #1108	; 0x454
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	bf14      	ite	ne
 8003e80:	2301      	movne	r3, #1
 8003e82:	2300      	moveq	r3, #0
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d000      	beq.n	8003e8c <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8003e8a:	e7fe      	b.n	8003e8a <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	f04f 0300 	mov.w	r3, #0
 8003e9a:	0c02      	lsrs	r2, r0, #16
 8003e9c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003ea0:	0c0b      	lsrs	r3, r1, #16
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	81fb      	strh	r3, [r7, #14]
                return value;
 8003ea6:	89fb      	ldrh	r3, [r7, #14]
            }
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003eb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003eb4:	b086      	sub	sp, #24
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	60f8      	str	r0, [r7, #12]
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1107);
 8003ec0:	f240 4353 	movw	r3, #1107	; 0x453
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	68b9      	ldr	r1, [r7, #8]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f7fe fbdc 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2200      	movs	r2, #0
 8003edc:	4698      	mov	r8, r3
 8003ede:	4691      	mov	r9, r2
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003eec:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ef0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003ef4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003ef8:	2500      	movs	r5, #0
 8003efa:	ea40 0a04 	orr.w	sl, r0, r4
 8003efe:	ea41 0b05 	orr.w	fp, r1, r5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2203      	movs	r2, #3
 8003f0c:	701a      	strb	r2, [r3, #0]
            }
 8003f0e:	bf00      	nop
 8003f10:	3718      	adds	r7, #24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f18 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1107) {
 8003f22:	6839      	ldr	r1, [r7, #0]
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fe fbd6 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	f240 4353 	movw	r3, #1107	; 0x453
 8003f32:	429a      	cmp	r2, r3
 8003f34:	bf14      	ite	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	2300      	moveq	r3, #0
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d000      	beq.n	8003f42 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003f40:	e7fe      	b.n	8003f40 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	0c02      	lsrs	r2, r0, #16
 8003f52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003f56:	0c0b      	lsrs	r3, r1, #16
 8003f58:	4613      	mov	r3, r2
 8003f5a:	73fb      	strb	r3, [r7, #15]
                return value;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f6c:	b088      	sub	sp, #32
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6178      	str	r0, [r7, #20]
 8003f72:	6139      	str	r1, [r7, #16]
 8003f74:	60fa      	str	r2, [r7, #12]
 8003f76:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1106);
 8003f78:	f240 4352 	movw	r3, #1106	; 0x452
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	6939      	ldr	r1, [r7, #16]
 8003f80:	6978      	ldr	r0, [r7, #20]
 8003f82:	f7fe fb80 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	69f9      	ldr	r1, [r7, #28]
 8003f92:	2000      	movs	r0, #0
 8003f94:	468a      	mov	sl, r1
 8003f96:	4683      	mov	fp, r0
 8003f98:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003f9c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003fa0:	480c      	ldr	r0, [pc, #48]	; (8003fd4 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8003fa2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003fa6:	ea08 0400 	and.w	r4, r8, r0
 8003faa:	ea09 0501 	and.w	r5, r9, r1
 8003fae:	ea42 0104 	orr.w	r1, r2, r4
 8003fb2:	6039      	str	r1, [r7, #0]
 8003fb4:	432b      	orrs	r3, r5
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003fbe:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2206      	movs	r2, #6
 8003fc6:	701a      	strb	r2, [r3, #0]
            }
 8003fc8:	bf00      	nop
 8003fca:	3720      	adds	r7, #32
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	ffff0000 	.word	0xffff0000

08003fd8 <_ZN3can7signals24SensorF_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fdc:	b086      	sub	sp, #24
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	60f8      	str	r0, [r7, #12]
 8003fe2:	60b9      	str	r1, [r7, #8]
 8003fe4:	607a      	str	r2, [r7, #4]
 8003fe6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1105);
 8003fe8:	f240 4351 	movw	r3, #1105	; 0x451
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f7fe fb48 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004000:	7dfb      	ldrb	r3, [r7, #23]
 8004002:	2200      	movs	r2, #0
 8004004:	4698      	mov	r8, r3
 8004006:	4691      	mov	r9, r2
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004014:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004018:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800401c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004020:	2500      	movs	r5, #0
 8004022:	ea40 0a04 	orr.w	sl, r0, r4
 8004026:	ea41 0b05 	orr.w	fp, r1, r5
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2203      	movs	r2, #3
 8004034:	701a      	strb	r2, [r3, #0]
            }
 8004036:	bf00      	nop
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004040 <_ZN3can7signals24SensorF_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004040:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004044:	b086      	sub	sp, #24
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1104);
 8004050:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	68b9      	ldr	r1, [r7, #8]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f7fe fb14 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004068:	7dfb      	ldrb	r3, [r7, #23]
 800406a:	2200      	movs	r2, #0
 800406c:	4698      	mov	r8, r3
 800406e:	4691      	mov	r9, r2
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	f04f 0300 	mov.w	r3, #0
 8004078:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800407c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004080:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004084:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004088:	2500      	movs	r5, #0
 800408a:	ea40 0a04 	orr.w	sl, r0, r4
 800408e:	ea41 0b05 	orr.w	fp, r1, r5
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2203      	movs	r2, #3
 800409c:	701a      	strb	r2, [r3, #0]
            }
 800409e:	bf00      	nop
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080040a8 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80040a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040ac:	b088      	sub	sp, #32
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	6178      	str	r0, [r7, #20]
 80040b2:	6139      	str	r1, [r7, #16]
 80040b4:	60fa      	str	r2, [r7, #12]
 80040b6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040be:	d302      	bcc.n	80040c6 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 80040c0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80040c4:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1073);
 80040c6:	f240 4331 	movw	r3, #1073	; 0x431
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	6939      	ldr	r1, [r7, #16]
 80040ce:	6978      	ldr	r0, [r7, #20]
 80040d0:	f7fe fad9 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	69f9      	ldr	r1, [r7, #28]
 80040e0:	2000      	movs	r0, #0
 80040e2:	468a      	mov	sl, r1
 80040e4:	4683      	mov	fp, r0
 80040e6:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80040ea:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80040ee:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80040f2:	0424      	lsls	r4, r4, #16
 80040f4:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80040f8:	ea42 0104 	orr.w	r1, r2, r4
 80040fc:	6039      	str	r1, [r7, #0]
 80040fe:	432b      	orrs	r3, r5
 8004100:	607b      	str	r3, [r7, #4]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004108:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2205      	movs	r2, #5
 8004110:	701a      	strb	r2, [r3, #0]
            }
 8004112:	bf00      	nop
 8004114:	3720      	adds	r7, #32
 8004116:	46bd      	mov	sp, r7
 8004118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800411c <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800411c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004120:	b088      	sub	sp, #32
 8004122:	af00      	add	r7, sp, #0
 8004124:	6178      	str	r0, [r7, #20]
 8004126:	6139      	str	r1, [r7, #16]
 8004128:	60fa      	str	r2, [r7, #12]
 800412a:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1072);
 800412c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	6939      	ldr	r1, [r7, #16]
 8004134:	6978      	ldr	r0, [r7, #20]
 8004136:	f7fe faa6 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004144:	69f9      	ldr	r1, [r7, #28]
 8004146:	2000      	movs	r0, #0
 8004148:	468a      	mov	sl, r1
 800414a:	4683      	mov	fp, r0
 800414c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8004150:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8004154:	480c      	ldr	r0, [pc, #48]	; (8004188 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm+0x6c>)
 8004156:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800415a:	ea08 0400 	and.w	r4, r8, r0
 800415e:	ea09 0501 	and.w	r5, r9, r1
 8004162:	ea42 0104 	orr.w	r1, r2, r4
 8004166:	6039      	str	r1, [r7, #0]
 8004168:	432b      	orrs	r3, r5
 800416a:	607b      	str	r3, [r7, #4]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004172:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2206      	movs	r2, #6
 800417a:	701a      	strb	r2, [r3, #0]
            }
 800417c:	bf00      	nop
 800417e:	3720      	adds	r7, #32
 8004180:	46bd      	mov	sp, r7
 8004182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004186:	bf00      	nop
 8004188:	ffff0000 	.word	0xffff0000

0800418c <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 800418c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004190:	b086      	sub	sp, #24
 8004192:	af00      	add	r7, sp, #0
 8004194:	60f8      	str	r0, [r7, #12]
 8004196:	60b9      	str	r1, [r7, #8]
 8004198:	607a      	str	r2, [r7, #4]
                if (value > max) {
 800419a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a2:	d305      	bcc.n	80041b0 <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 80041a4:	f04f 32ff 	mov.w	r2, #4294967295
 80041a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1057);
 80041b0:	f240 4321 	movw	r3, #1057	; 0x421
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7fe fa64 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 80041be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80041c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	f04f 0300 	mov.w	r3, #0
 80041d8:	040b      	lsls	r3, r1, #16
 80041da:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80041de:	0402      	lsls	r2, r0, #16
 80041e0:	ea48 0402 	orr.w	r4, r8, r2
 80041e4:	ea49 0503 	orr.w	r5, r9, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2208      	movs	r2, #8
 80041f2:	701a      	strb	r2, [r3, #0]
            }
 80041f4:	bf00      	nop
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080041fe <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 80041fe:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
                if (value > max) {
 800420c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004210:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004214:	d305      	bcc.n	8004222 <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 8004216:	f04f 32ff 	mov.w	r2, #4294967295
 800421a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800421e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1056);
 8004222:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7fe fa2b 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8004230:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004234:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800423e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	f04f 0300 	mov.w	r3, #0
 800424a:	040b      	lsls	r3, r1, #16
 800424c:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8004250:	0402      	lsls	r2, r0, #16
 8004252:	ea48 0402 	orr.w	r4, r8, r2
 8004256:	ea49 0503 	orr.w	r5, r9, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2208      	movs	r2, #8
 8004264:	701a      	strb	r2, [r3, #0]
            }
 8004266:	bf00      	nop
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004270 <_ZN3can7signals17SensorF_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004274:	b086      	sub	sp, #24
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1046);
 8004280:	f240 4316 	movw	r3, #1046	; 0x416
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	68b9      	ldr	r1, [r7, #8]
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7fe f9fc 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004298:	7dfb      	ldrb	r3, [r7, #23]
 800429a:	2200      	movs	r2, #0
 800429c:	4698      	mov	r8, r3
 800429e:	4691      	mov	r9, r2
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	f04f 0300 	mov.w	r3, #0
 80042a8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80042ac:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80042b0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80042b4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80042b8:	2500      	movs	r5, #0
 80042ba:	ea40 0a04 	orr.w	sl, r0, r4
 80042be:	ea41 0b05 	orr.w	fp, r1, r5
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2203      	movs	r2, #3
 80042cc:	701a      	strb	r2, [r3, #0]
            }
 80042ce:	bf00      	nop
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042d8 <_ZN3can7signals16SensorF_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b086      	sub	sp, #24
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1045);
 80042e8:	f240 4315 	movw	r3, #1045	; 0x415
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	68b9      	ldr	r1, [r7, #8]
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f7fe f9c8 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004300:	7dfb      	ldrb	r3, [r7, #23]
 8004302:	2200      	movs	r2, #0
 8004304:	4698      	mov	r8, r3
 8004306:	4691      	mov	r9, r2
 8004308:	f04f 0200 	mov.w	r2, #0
 800430c:	f04f 0300 	mov.w	r3, #0
 8004310:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004314:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004318:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800431c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004320:	2500      	movs	r5, #0
 8004322:	ea40 0a04 	orr.w	sl, r0, r4
 8004326:	ea41 0b05 	orr.w	fp, r1, r5
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2203      	movs	r2, #3
 8004334:	701a      	strb	r2, [r3, #0]
            }
 8004336:	bf00      	nop
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004340 <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004344:	b088      	sub	sp, #32
 8004346:	af00      	add	r7, sp, #0
 8004348:	6178      	str	r0, [r7, #20]
 800434a:	6139      	str	r1, [r7, #16]
 800434c:	60fa      	str	r2, [r7, #12]
 800434e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004356:	d302      	bcc.n	800435e <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8004358:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800435c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1044);
 800435e:	f240 4314 	movw	r3, #1044	; 0x414
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	6939      	ldr	r1, [r7, #16]
 8004366:	6978      	ldr	r0, [r7, #20]
 8004368:	f7fe f98d 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	69f9      	ldr	r1, [r7, #28]
 8004378:	2000      	movs	r0, #0
 800437a:	468a      	mov	sl, r1
 800437c:	4683      	mov	fp, r0
 800437e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8004382:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8004386:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800438a:	0424      	lsls	r4, r4, #16
 800438c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8004390:	ea42 0104 	orr.w	r1, r2, r4
 8004394:	6039      	str	r1, [r7, #0]
 8004396:	432b      	orrs	r3, r5
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043a0:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2205      	movs	r2, #5
 80043a8:	701a      	strb	r2, [r3, #0]
            }
 80043aa:	bf00      	nop
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080043b4 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80043b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b8:	b088      	sub	sp, #32
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6178      	str	r0, [r7, #20]
 80043be:	6139      	str	r1, [r7, #16]
 80043c0:	60fa      	str	r2, [r7, #12]
 80043c2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80043c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80043ca:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800445c <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xa8>
 80043ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	dd01      	ble.n	80043dc <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 80043d8:	4b21      	ldr	r3, [pc, #132]	; (8004460 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xac>)
 80043da:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80043dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80043e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	d502      	bpl.n	80043f0 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1043);
 80043f0:	f240 4313 	movw	r3, #1043	; 0x413
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	6939      	ldr	r1, [r7, #16]
 80043f8:	6978      	ldr	r0, [r7, #20]
 80043fa:	f7fe f944 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 80043fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004402:	eddf 6a18 	vldr	s13, [pc, #96]	; 8004464 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xb0>
 8004406:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800440a:	eeb0 0a47 	vmov.f32	s0, s14
 800440e:	f7fd fff8 	bl	8002402 <_ZSt5roundf>
 8004412:	eef0 7a40 	vmov.f32	s15, s0
 8004416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800441a:	ee17 3a90 	vmov	r3, s15
 800441e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	8bf9      	ldrh	r1, [r7, #30]
 8004428:	2000      	movs	r0, #0
 800442a:	4688      	mov	r8, r1
 800442c:	4681      	mov	r9, r0
 800442e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004432:	6079      	str	r1, [r7, #4]
 8004434:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004438:	6039      	str	r1, [r7, #0]
 800443a:	683c      	ldr	r4, [r7, #0]
 800443c:	2500      	movs	r5, #0
 800443e:	ea42 0a04 	orr.w	sl, r2, r4
 8004442:	ea43 0b05 	orr.w	fp, r3, r5
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2204      	movs	r2, #4
 8004450:	701a      	strb	r2, [r3, #0]
            }
 8004452:	bf00      	nop
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800445c:	428311ec 	.word	0x428311ec
 8004460:	428311ec 	.word	0x428311ec
 8004464:	3a83126f 	.word	0x3a83126f

08004468 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800446c:	b088      	sub	sp, #32
 800446e:	af00      	add	r7, sp, #0
 8004470:	6178      	str	r0, [r7, #20]
 8004472:	6139      	str	r1, [r7, #16]
 8004474:	60fa      	str	r2, [r7, #12]
 8004476:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800447a:	edd7 7a02 	vldr	s15, [r7, #8]
 800447e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800451c <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xb4>
 8004482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448a:	dd01      	ble.n	8004490 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 800448c:	4b24      	ldr	r3, [pc, #144]	; (8004520 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 800448e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8004490:	edd7 7a02 	vldr	s15, [r7, #8]
 8004494:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8004498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a0:	d501      	bpl.n	80044a6 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 80044a4:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1042);
 80044a6:	f240 4312 	movw	r3, #1042	; 0x412
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	6978      	ldr	r0, [r7, #20]
 80044b0:	f7fe f8e9 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 80044b4:	edd7 7a02 	vldr	s15, [r7, #8]
 80044b8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80044bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044c0:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004528 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xc0>
 80044c4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044c8:	eeb0 0a47 	vmov.f32	s0, s14
 80044cc:	f7fd ff99 	bl	8002402 <_ZSt5roundf>
 80044d0:	eef0 7a40 	vmov.f32	s15, s0
 80044d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044d8:	ee17 3a90 	vmov	r3, s15
 80044dc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e4:	8bf9      	ldrh	r1, [r7, #30]
 80044e6:	2000      	movs	r0, #0
 80044e8:	4688      	mov	r8, r1
 80044ea:	4681      	mov	r9, r0
 80044ec:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80044f0:	6079      	str	r1, [r7, #4]
 80044f2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80044f6:	6039      	str	r1, [r7, #0]
 80044f8:	683c      	ldr	r4, [r7, #0]
 80044fa:	2500      	movs	r5, #0
 80044fc:	ea42 0a04 	orr.w	sl, r2, r4
 8004500:	ea43 0b05 	orr.w	fp, r3, r5
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2204      	movs	r2, #4
 800450e:	701a      	strb	r2, [r3, #0]
            }
 8004510:	bf00      	nop
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800451a:	bf00      	nop
 800451c:	441c5666 	.word	0x441c5666
 8004520:	441c5666 	.word	0x441c5666
 8004524:	c1f00000 	.word	0xc1f00000
 8004528:	3c23d70a 	.word	0x3c23d70a

0800452c <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800452c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004530:	b088      	sub	sp, #32
 8004532:	af00      	add	r7, sp, #0
 8004534:	6178      	str	r0, [r7, #20]
 8004536:	6139      	str	r1, [r7, #16]
 8004538:	60fa      	str	r2, [r7, #12]
 800453a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4a16      	ldr	r2, [pc, #88]	; (8004598 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x6c>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 8004544:	4b14      	ldr	r3, [pc, #80]	; (8004598 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x6c>)
 8004546:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1041);
 8004548:	f240 4311 	movw	r3, #1041	; 0x411
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	6939      	ldr	r1, [r7, #16]
 8004550:	6978      	ldr	r0, [r7, #20]
 8004552:	f7fe f898 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	69f9      	ldr	r1, [r7, #28]
 8004564:	2000      	movs	r0, #0
 8004566:	4688      	mov	r8, r1
 8004568:	4681      	mov	r9, r0
 800456a:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800456e:	6079      	str	r1, [r7, #4]
 8004570:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004574:	6039      	str	r1, [r7, #0]
 8004576:	683c      	ldr	r4, [r7, #0]
 8004578:	2500      	movs	r5, #0
 800457a:	ea42 0a04 	orr.w	sl, r2, r4
 800457e:	ea43 0b05 	orr.w	fp, r3, r5
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2204      	movs	r2, #4
 800458c:	701a      	strb	r2, [r3, #0]
            }
 800458e:	bf00      	nop
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004598:	0003fffc 	.word	0x0003fffc

0800459c <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800459c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045a0:	b088      	sub	sp, #32
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6178      	str	r0, [r7, #20]
 80045a6:	6139      	str	r1, [r7, #16]
 80045a8:	60fa      	str	r2, [r7, #12]
 80045aa:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80045ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80045b2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004650 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0xb4>
 80045b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045be:	dd01      	ble.n	80045c4 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 80045c0:	4b24      	ldr	r3, [pc, #144]	; (8004654 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 80045c2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80045c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80045c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80045cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d0:	d502      	bpl.n	80045d8 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1040);
 80045d8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	6939      	ldr	r1, [r7, #16]
 80045e0:	6978      	ldr	r0, [r7, #20]
 80045e2:	f7fe f850 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 80045e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80045ea:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80045ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80045f2:	eeb0 0a47 	vmov.f32	s0, s14
 80045f6:	f7fd ff04 	bl	8002402 <_ZSt5roundf>
 80045fa:	eef0 7a40 	vmov.f32	s15, s0
 80045fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004602:	edc7 7a01 	vstr	s15, [r7, #4]
 8004606:	793b      	ldrb	r3, [r7, #4]
 8004608:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004610:	7ffb      	ldrb	r3, [r7, #31]
 8004612:	2200      	movs	r2, #0
 8004614:	4698      	mov	r8, r3
 8004616:	4691      	mov	r9, r2
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004624:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004628:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800462c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004630:	2500      	movs	r5, #0
 8004632:	ea40 0a04 	orr.w	sl, r0, r4
 8004636:	ea41 0b05 	orr.w	fp, r1, r5
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2203      	movs	r2, #3
 8004644:	701a      	strb	r2, [r3, #0]
            }
 8004646:	bf00      	nop
 8004648:	3720      	adds	r7, #32
 800464a:	46bd      	mov	sp, r7
 800464c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004650:	42c80000 	.word	0x42c80000
 8004654:	42c80000 	.word	0x42c80000

08004658 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800465c:	b088      	sub	sp, #32
 800465e:	af00      	add	r7, sp, #0
 8004660:	6178      	str	r0, [r7, #20]
 8004662:	6139      	str	r1, [r7, #16]
 8004664:	60fa      	str	r2, [r7, #12]
 8004666:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 33);
 8004668:	2321      	movs	r3, #33	; 0x21
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	6939      	ldr	r1, [r7, #16]
 800466e:	6978      	ldr	r0, [r7, #20]
 8004670:	f7fe f809 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004674:	897b      	ldrh	r3, [r7, #10]
 8004676:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467e:	8bf9      	ldrh	r1, [r7, #30]
 8004680:	2000      	movs	r0, #0
 8004682:	4688      	mov	r8, r1
 8004684:	4681      	mov	r9, r0
 8004686:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800468a:	6079      	str	r1, [r7, #4]
 800468c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004690:	6039      	str	r1, [r7, #0]
 8004692:	683c      	ldr	r4, [r7, #0]
 8004694:	2500      	movs	r5, #0
 8004696:	ea42 0a04 	orr.w	sl, r2, r4
 800469a:	ea43 0b05 	orr.w	fp, r3, r5
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2204      	movs	r2, #4
 80046a8:	701a      	strb	r2, [r3, #0]
            }
 80046aa:	bf00      	nop
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080046b4 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 33) {
 80046be:	6839      	ldr	r1, [r7, #0]
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fe f808 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b21      	cmp	r3, #33	; 0x21
 80046ca:	bf14      	ite	ne
 80046cc:	2301      	movne	r3, #1
 80046ce:	2300      	moveq	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d000      	beq.n	80046d8 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 80046d6:	e7fe      	b.n	80046d6 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046de:	f04f 0200 	mov.w	r2, #0
 80046e2:	f04f 0300 	mov.w	r3, #0
 80046e6:	0c02      	lsrs	r2, r0, #16
 80046e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80046ec:	0c0b      	lsrs	r3, r1, #16
 80046ee:	4613      	mov	r3, r2
 80046f0:	81fb      	strh	r3, [r7, #14]
                return value;
 80046f2:	89fb      	ldrh	r3, [r7, #14]
            }
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <_ZN3can7signals25SensorF_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80046fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004700:	b086      	sub	sp, #24
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 32);
 800470c:	2320      	movs	r3, #32
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7fd ffb7 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004718:	78fb      	ldrb	r3, [r7, #3]
 800471a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004722:	7dfb      	ldrb	r3, [r7, #23]
 8004724:	2200      	movs	r2, #0
 8004726:	4698      	mov	r8, r3
 8004728:	4691      	mov	r9, r2
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004736:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800473a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800473e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004742:	2500      	movs	r5, #0
 8004744:	ea40 0a04 	orr.w	sl, r0, r4
 8004748:	ea41 0b05 	orr.w	fp, r1, r5
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2203      	movs	r2, #3
 8004756:	701a      	strb	r2, [r3, #0]
            }
 8004758:	bf00      	nop
 800475a:	3718      	adds	r7, #24
 800475c:	46bd      	mov	sp, r7
 800475e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004762 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8004762:	b580      	push	{r7, lr}
 8004764:	b084      	sub	sp, #16
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 32) {
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fd ffb1 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004774:	4603      	mov	r3, r0
 8004776:	2b20      	cmp	r3, #32
 8004778:	bf14      	ite	ne
 800477a:	2301      	movne	r3, #1
 800477c:	2300      	moveq	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d000      	beq.n	8004786 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 8004784:	e7fe      	b.n	8004784 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	0c02      	lsrs	r2, r0, #16
 8004796:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800479a:	0c0b      	lsrs	r3, r1, #16
 800479c:	4613      	mov	r3, r2
 800479e:	73fb      	strb	r3, [r7, #15]
                return value;
 80047a0:	7bfb      	ldrb	r3, [r7, #15]
            }
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <_ZN3can7signals28SensorF_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80047aa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6178      	str	r0, [r7, #20]
 80047b4:	6139      	str	r1, [r7, #16]
 80047b6:	60fa      	str	r2, [r7, #12]
 80047b8:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 16);
 80047ba:	2310      	movs	r3, #16
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	6939      	ldr	r1, [r7, #16]
 80047c0:	6978      	ldr	r0, [r7, #20]
 80047c2:	f7fd ff60 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80047c6:	897b      	ldrh	r3, [r7, #10]
 80047c8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	8bf9      	ldrh	r1, [r7, #30]
 80047d2:	2000      	movs	r0, #0
 80047d4:	4688      	mov	r8, r1
 80047d6:	4681      	mov	r9, r0
 80047d8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80047dc:	6079      	str	r1, [r7, #4]
 80047de:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80047e2:	6039      	str	r1, [r7, #0]
 80047e4:	683c      	ldr	r4, [r7, #0]
 80047e6:	2500      	movs	r5, #0
 80047e8:	ea42 0a04 	orr.w	sl, r2, r4
 80047ec:	ea43 0b05 	orr.w	fp, r3, r5
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2204      	movs	r2, #4
 80047fa:	701a      	strb	r2, [r3, #0]
            }
 80047fc:	bf00      	nop
 80047fe:	3720      	adds	r7, #32
 8004800:	46bd      	mov	sp, r7
 8004802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004806 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8004806:	b580      	push	{r7, lr}
 8004808:	b084      	sub	sp, #16
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 16) {
 8004810:	6839      	ldr	r1, [r7, #0]
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7fd ff5f 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004818:	4603      	mov	r3, r0
 800481a:	2b10      	cmp	r3, #16
 800481c:	bf14      	ite	ne
 800481e:	2301      	movne	r3, #1
 8004820:	2300      	moveq	r3, #0
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d000      	beq.n	800482a <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 8004828:	e7fe      	b.n	8004828 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	0c02      	lsrs	r2, r0, #16
 800483a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800483e:	0c0b      	lsrs	r3, r1, #16
 8004840:	4613      	mov	r3, r2
 8004842:	81fb      	strh	r3, [r7, #14]
                return value;
 8004844:	89fb      	ldrh	r3, [r7, #14]
            }
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <_ZN3can7signals21SensorF_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800484e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af00      	add	r7, sp, #0
 8004856:	6178      	str	r0, [r7, #20]
 8004858:	6139      	str	r1, [r7, #16]
 800485a:	60fa      	str	r2, [r7, #12]
 800485c:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 5);
 800485e:	2305      	movs	r3, #5
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	6939      	ldr	r1, [r7, #16]
 8004864:	6978      	ldr	r0, [r7, #20]
 8004866:	f7fd ff0e 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	8bf9      	ldrh	r1, [r7, #30]
 8004876:	2000      	movs	r0, #0
 8004878:	4688      	mov	r8, r1
 800487a:	4681      	mov	r9, r0
 800487c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004880:	6079      	str	r1, [r7, #4]
 8004882:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004886:	6039      	str	r1, [r7, #0]
 8004888:	683c      	ldr	r4, [r7, #0]
 800488a:	2500      	movs	r5, #0
 800488c:	ea42 0a04 	orr.w	sl, r2, r4
 8004890:	ea43 0b05 	orr.w	fp, r3, r5
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2204      	movs	r2, #4
 800489e:	701a      	strb	r2, [r3, #0]
            }
 80048a0:	bf00      	nop
 80048a2:	3720      	adds	r7, #32
 80048a4:	46bd      	mov	sp, r7
 80048a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080048aa <_ZN3can7signals23SensorF_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80048aa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ae:	b088      	sub	sp, #32
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6178      	str	r0, [r7, #20]
 80048b4:	6139      	str	r1, [r7, #16]
 80048b6:	60fa      	str	r2, [r7, #12]
 80048b8:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 4);
 80048ba:	2304      	movs	r3, #4
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	6939      	ldr	r1, [r7, #16]
 80048c0:	6978      	ldr	r0, [r7, #20]
 80048c2:	f7fd fee0 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80048c6:	897b      	ldrh	r3, [r7, #10]
 80048c8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d0:	8bf9      	ldrh	r1, [r7, #30]
 80048d2:	2000      	movs	r0, #0
 80048d4:	4688      	mov	r8, r1
 80048d6:	4681      	mov	r9, r0
 80048d8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80048dc:	6079      	str	r1, [r7, #4]
 80048de:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80048e2:	6039      	str	r1, [r7, #0]
 80048e4:	683c      	ldr	r4, [r7, #0]
 80048e6:	2500      	movs	r5, #0
 80048e8:	ea42 0a04 	orr.w	sl, r2, r4
 80048ec:	ea43 0b05 	orr.w	fp, r3, r5
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2204      	movs	r2, #4
 80048fa:	701a      	strb	r2, [r3, #0]
            }
 80048fc:	bf00      	nop
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004906 <_ZN3can7signals26SensorF_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004906:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	6178      	str	r0, [r7, #20]
 8004910:	6139      	str	r1, [r7, #16]
 8004912:	60fa      	str	r2, [r7, #12]
 8004914:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3);
 8004916:	2303      	movs	r3, #3
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	6939      	ldr	r1, [r7, #16]
 800491c:	6978      	ldr	r0, [r7, #20]
 800491e:	f7fd feb2 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004922:	897b      	ldrh	r3, [r7, #10]
 8004924:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	8bf9      	ldrh	r1, [r7, #30]
 800492e:	2000      	movs	r0, #0
 8004930:	4688      	mov	r8, r1
 8004932:	4681      	mov	r9, r0
 8004934:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004938:	6079      	str	r1, [r7, #4]
 800493a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800493e:	6039      	str	r1, [r7, #0]
 8004940:	683c      	ldr	r4, [r7, #0]
 8004942:	2500      	movs	r5, #0
 8004944:	ea42 0a04 	orr.w	sl, r2, r4
 8004948:	ea43 0b05 	orr.w	fp, r3, r5
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2204      	movs	r2, #4
 8004956:	701a      	strb	r2, [r3, #0]
            }
 8004958:	bf00      	nop
 800495a:	3720      	adds	r7, #32
 800495c:	46bd      	mov	sp, r7
 800495e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004962 <_ZN3can7signals21SensorF_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004962:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
 8004970:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2);
 8004972:	2302      	movs	r3, #2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	68b9      	ldr	r1, [r7, #8]
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f7fd fe84 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800497e:	78fb      	ldrb	r3, [r7, #3]
 8004980:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	2200      	movs	r2, #0
 800498c:	4698      	mov	r8, r3
 800498e:	4691      	mov	r9, r2
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800499c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80049a0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80049a4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80049a8:	2500      	movs	r5, #0
 80049aa:	ea40 0a04 	orr.w	sl, r0, r4
 80049ae:	ea41 0b05 	orr.w	fp, r1, r5
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2203      	movs	r2, #3
 80049bc:	701a      	strb	r2, [r3, #0]
            }
 80049be:	bf00      	nop
 80049c0:	3718      	adds	r7, #24
 80049c2:	46bd      	mov	sp, r7
 80049c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080049c8 <_ZN3can7signals17SensorF_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80049c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049cc:	b086      	sub	sp, #24
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	60f8      	str	r0, [r7, #12]
 80049d2:	60b9      	str	r1, [r7, #8]
 80049d4:	607a      	str	r2, [r7, #4]
 80049d6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1);
 80049d8:	2301      	movs	r3, #1
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	f7fd fe51 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80049ee:	7dfb      	ldrb	r3, [r7, #23]
 80049f0:	2200      	movs	r2, #0
 80049f2:	4698      	mov	r8, r3
 80049f4:	4691      	mov	r9, r2
 80049f6:	f04f 0200 	mov.w	r2, #0
 80049fa:	f04f 0300 	mov.w	r3, #0
 80049fe:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8004a02:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004a06:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004a0a:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004a0e:	2500      	movs	r5, #0
 8004a10:	ea40 0a04 	orr.w	sl, r0, r4
 8004a14:	ea41 0b05 	orr.w	fp, r1, r5
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2203      	movs	r2, #3
 8004a22:	701a      	strb	r2, [r3, #0]
            }
 8004a24:	bf00      	nop
 8004a26:	3718      	adds	r7, #24
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004a2e <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b086      	sub	sp, #24
 8004a32:	af02      	add	r7, sp, #8
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	2300      	movs	r3, #0
 8004a42:	2202      	movs	r2, #2
 8004a44:	f240 6101 	movw	r1, #1537	; 0x601
 8004a48:	f7fd fceb 	bl	8002422 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8004a50:	f240 6201 	movw	r2, #1537	; 0x601
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d000      	beq.n	8004a5a <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8004a58:	e7fe      	b.n	8004a58 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	331c      	adds	r3, #28
 8004a74:	461a      	mov	r2, r3
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7ff ffd9 	bl	8004a2e <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b08a      	sub	sp, #40	; 0x28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SensorF_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7ff ffe5 	bl	8004a64 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SensorF_SDO_ID>();
 8004a9a:	f107 0308 	add.w	r3, r7, #8
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f002 fdf0 	bl	8007684 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8004aa8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 f814 	bl	8004ad8 <_Z31handleSDORequestDownloadBySDOIDt>
}
 8004ab0:	bf00      	nop
 8004ab2:	3728      	adds	r7, #40	; 0x28
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	f240 5181 	movw	r1, #1409	; 0x581
 8004aca:	f7fc fa5f 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3708      	adds	r7, #8
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b092      	sub	sp, #72	; 0x48
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SensorF_SDO_Resp> msgSdoResp;
 8004ae2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7ff ffe6 	bl	8004ab8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SensorF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8004af2:	88fb      	ldrh	r3, [r7, #6]
 8004af4:	f640 5201 	movw	r2, #3329	; 0xd01
 8004af8:	4293      	cmp	r3, r2
 8004afa:	f000 84ec 	beq.w	80054d6 <_Z31handleSDORequestDownloadBySDOIDt+0x9fe>
 8004afe:	f640 5201 	movw	r2, #3329	; 0xd01
 8004b02:	4293      	cmp	r3, r2
 8004b04:	f300 84f6 	bgt.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004b08:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004b0c:	f000 84d4 	beq.w	80054b8 <_Z31handleSDORequestDownloadBySDOIDt+0x9e0>
 8004b10:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004b14:	f300 84ee 	bgt.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004b18:	f640 4201 	movw	r2, #3073	; 0xc01
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	f000 84bd 	beq.w	800549c <_Z31handleSDORequestDownloadBySDOIDt+0x9c4>
 8004b22:	f640 4201 	movw	r2, #3073	; 0xc01
 8004b26:	4293      	cmp	r3, r2
 8004b28:	f300 84e4 	bgt.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004b2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b30:	f000 84a6 	beq.w	8005480 <_Z31handleSDORequestDownloadBySDOIDt+0x9a8>
 8004b34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b38:	f300 84dc 	bgt.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004b3c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004b40:	f000 848f 	beq.w	8005462 <_Z31handleSDORequestDownloadBySDOIDt+0x98a>
 8004b44:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004b48:	f300 84d4 	bgt.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004b4c:	f640 2233 	movw	r2, #2611	; 0xa33
 8004b50:	4293      	cmp	r3, r2
 8004b52:	f300 84cf 	bgt.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004b56:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8004b5a:	da16      	bge.n	8004b8a <_Z31handleSDORequestDownloadBySDOIDt+0xb2>
 8004b5c:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8004b60:	f300 84c8 	bgt.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004b64:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004b68:	da40      	bge.n	8004bec <_Z31handleSDORequestDownloadBySDOIDt+0x114>
 8004b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b6e:	f000 8374 	beq.w	800525a <_Z31handleSDORequestDownloadBySDOIDt+0x782>
 8004b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b76:	f300 84bd 	bgt.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004b7a:	2b21      	cmp	r3, #33	; 0x21
 8004b7c:	f300 8166 	bgt.w	8004e4c <_Z31handleSDORequestDownloadBySDOIDt+0x374>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f300 8119 	bgt.w	8004db8 <_Z31handleSDORequestDownloadBySDOIDt+0x2e0>
 8004b86:	f000 bcb5 	b.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004b8a:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8004b8e:	2b13      	cmp	r3, #19
 8004b90:	f200 84b0 	bhi.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004b94:	a201      	add	r2, pc, #4	; (adr r2, 8004b9c <_Z31handleSDORequestDownloadBySDOIDt+0xc4>)
 8004b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08005333 	.word	0x08005333
 8004ba0:	080054f5 	.word	0x080054f5
 8004ba4:	080054f5 	.word	0x080054f5
 8004ba8:	080054f5 	.word	0x080054f5
 8004bac:	080054f5 	.word	0x080054f5
 8004bb0:	0800534f 	.word	0x0800534f
 8004bb4:	0800536d 	.word	0x0800536d
 8004bb8:	0800538b 	.word	0x0800538b
 8004bbc:	080053a9 	.word	0x080053a9
 8004bc0:	080053cd 	.word	0x080053cd
 8004bc4:	080054f5 	.word	0x080054f5
 8004bc8:	080054f5 	.word	0x080054f5
 8004bcc:	080054f5 	.word	0x080054f5
 8004bd0:	080054f5 	.word	0x080054f5
 8004bd4:	080054f5 	.word	0x080054f5
 8004bd8:	080054f5 	.word	0x080054f5
 8004bdc:	080053eb 	.word	0x080053eb
 8004be0:	08005409 	.word	0x08005409
 8004be4:	08005427 	.word	0x08005427
 8004be8:	08005445 	.word	0x08005445
 8004bec:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	f200 847f 	bhi.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004bf6:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <_Z31handleSDORequestDownloadBySDOIDt+0x124>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08005279 	.word	0x08005279
 8004c00:	08005295 	.word	0x08005295
 8004c04:	080052b1 	.word	0x080052b1
 8004c08:	080052cd 	.word	0x080052cd
 8004c0c:	080052e9 	.word	0x080052e9
 8004c10:	08005307 	.word	0x08005307
 8004c14:	080054f5 	.word	0x080054f5
 8004c18:	080054f5 	.word	0x080054f5
 8004c1c:	080054f5 	.word	0x080054f5
 8004c20:	080054f5 	.word	0x080054f5
 8004c24:	080054f5 	.word	0x080054f5
 8004c28:	080054f5 	.word	0x080054f5
 8004c2c:	080054f5 	.word	0x080054f5
 8004c30:	080054f5 	.word	0x080054f5
 8004c34:	080054f5 	.word	0x080054f5
 8004c38:	080054f5 	.word	0x080054f5
 8004c3c:	0800531d 	.word	0x0800531d
 8004c40:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004c44:	2b59      	cmp	r3, #89	; 0x59
 8004c46:	f200 8455 	bhi.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004c4a:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <_Z31handleSDORequestDownloadBySDOIDt+0x178>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004f41 	.word	0x08004f41
 8004c54:	08004f5f 	.word	0x08004f5f
 8004c58:	08004f79 	.word	0x08004f79
 8004c5c:	08004f97 	.word	0x08004f97
 8004c60:	08004fb5 	.word	0x08004fb5
 8004c64:	08004fcf 	.word	0x08004fcf
 8004c68:	08004feb 	.word	0x08004feb
 8004c6c:	080054f5 	.word	0x080054f5
 8004c70:	080054f5 	.word	0x080054f5
 8004c74:	080054f5 	.word	0x080054f5
 8004c78:	080054f5 	.word	0x080054f5
 8004c7c:	080054f5 	.word	0x080054f5
 8004c80:	080054f5 	.word	0x080054f5
 8004c84:	080054f5 	.word	0x080054f5
 8004c88:	080054f5 	.word	0x080054f5
 8004c8c:	080054f5 	.word	0x080054f5
 8004c90:	08005007 	.word	0x08005007
 8004c94:	08005021 	.word	0x08005021
 8004c98:	080054f5 	.word	0x080054f5
 8004c9c:	080054f5 	.word	0x080054f5
 8004ca0:	080054f5 	.word	0x080054f5
 8004ca4:	080054f5 	.word	0x080054f5
 8004ca8:	080054f5 	.word	0x080054f5
 8004cac:	080054f5 	.word	0x080054f5
 8004cb0:	080054f5 	.word	0x080054f5
 8004cb4:	080054f5 	.word	0x080054f5
 8004cb8:	080054f5 	.word	0x080054f5
 8004cbc:	080054f5 	.word	0x080054f5
 8004cc0:	080054f5 	.word	0x080054f5
 8004cc4:	080054f5 	.word	0x080054f5
 8004cc8:	080054f5 	.word	0x080054f5
 8004ccc:	080054f5 	.word	0x080054f5
 8004cd0:	0800503b 	.word	0x0800503b
 8004cd4:	08005055 	.word	0x08005055
 8004cd8:	080054f5 	.word	0x080054f5
 8004cdc:	080054f5 	.word	0x080054f5
 8004ce0:	080054f5 	.word	0x080054f5
 8004ce4:	080054f5 	.word	0x080054f5
 8004ce8:	080054f5 	.word	0x080054f5
 8004cec:	080054f5 	.word	0x080054f5
 8004cf0:	080054f5 	.word	0x080054f5
 8004cf4:	080054f5 	.word	0x080054f5
 8004cf8:	080054f5 	.word	0x080054f5
 8004cfc:	080054f5 	.word	0x080054f5
 8004d00:	080054f5 	.word	0x080054f5
 8004d04:	080054f5 	.word	0x080054f5
 8004d08:	080054f5 	.word	0x080054f5
 8004d0c:	080054f5 	.word	0x080054f5
 8004d10:	080054f5 	.word	0x080054f5
 8004d14:	080054f5 	.word	0x080054f5
 8004d18:	080054f5 	.word	0x080054f5
 8004d1c:	080054f5 	.word	0x080054f5
 8004d20:	080054f5 	.word	0x080054f5
 8004d24:	080054f5 	.word	0x080054f5
 8004d28:	080054f5 	.word	0x080054f5
 8004d2c:	080054f5 	.word	0x080054f5
 8004d30:	080054f5 	.word	0x080054f5
 8004d34:	080054f5 	.word	0x080054f5
 8004d38:	080054f5 	.word	0x080054f5
 8004d3c:	080054f5 	.word	0x080054f5
 8004d40:	080054f5 	.word	0x080054f5
 8004d44:	080054f5 	.word	0x080054f5
 8004d48:	080054f5 	.word	0x080054f5
 8004d4c:	080054f5 	.word	0x080054f5
 8004d50:	0800506f 	.word	0x0800506f
 8004d54:	0800508b 	.word	0x0800508b
 8004d58:	080050a7 	.word	0x080050a7
 8004d5c:	080050c1 	.word	0x080050c1
 8004d60:	080050dd 	.word	0x080050dd
 8004d64:	080054f5 	.word	0x080054f5
 8004d68:	080050f9 	.word	0x080050f9
 8004d6c:	08005115 	.word	0x08005115
 8004d70:	0800512f 	.word	0x0800512f
 8004d74:	0800514b 	.word	0x0800514b
 8004d78:	080054f5 	.word	0x080054f5
 8004d7c:	080054f5 	.word	0x080054f5
 8004d80:	080054f5 	.word	0x080054f5
 8004d84:	080054f5 	.word	0x080054f5
 8004d88:	080054f5 	.word	0x080054f5
 8004d8c:	080054f5 	.word	0x080054f5
 8004d90:	08005165 	.word	0x08005165
 8004d94:	08005181 	.word	0x08005181
 8004d98:	0800519d 	.word	0x0800519d
 8004d9c:	080051b7 	.word	0x080051b7
 8004da0:	080051d3 	.word	0x080051d3
 8004da4:	080054f5 	.word	0x080054f5
 8004da8:	080051ef 	.word	0x080051ef
 8004dac:	0800520b 	.word	0x0800520b
 8004db0:	08005225 	.word	0x08005225
 8004db4:	08005241 	.word	0x08005241
 8004db8:	3b01      	subs	r3, #1
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	f200 839a 	bhi.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004dc0:	a201      	add	r2, pc, #4	; (adr r2, 8004dc8 <_Z31handleSDORequestDownloadBySDOIDt+0x2f0>)
 8004dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc6:	bf00      	nop
 8004dc8:	08004e61 	.word	0x08004e61
 8004dcc:	08004e7d 	.word	0x08004e7d
 8004dd0:	08004e99 	.word	0x08004e99
 8004dd4:	08004eb5 	.word	0x08004eb5
 8004dd8:	08004ed1 	.word	0x08004ed1
 8004ddc:	080054f5 	.word	0x080054f5
 8004de0:	080054f5 	.word	0x080054f5
 8004de4:	080054f5 	.word	0x080054f5
 8004de8:	080054f5 	.word	0x080054f5
 8004dec:	080054f5 	.word	0x080054f5
 8004df0:	080054f5 	.word	0x080054f5
 8004df4:	080054f5 	.word	0x080054f5
 8004df8:	080054f5 	.word	0x080054f5
 8004dfc:	080054f5 	.word	0x080054f5
 8004e00:	080054f5 	.word	0x080054f5
 8004e04:	08004eed 	.word	0x08004eed
 8004e08:	080054f5 	.word	0x080054f5
 8004e0c:	080054f5 	.word	0x080054f5
 8004e10:	080054f5 	.word	0x080054f5
 8004e14:	080054f5 	.word	0x080054f5
 8004e18:	080054f5 	.word	0x080054f5
 8004e1c:	080054f5 	.word	0x080054f5
 8004e20:	080054f5 	.word	0x080054f5
 8004e24:	080054f5 	.word	0x080054f5
 8004e28:	080054f5 	.word	0x080054f5
 8004e2c:	080054f5 	.word	0x080054f5
 8004e30:	080054f5 	.word	0x080054f5
 8004e34:	080054f5 	.word	0x080054f5
 8004e38:	080054f5 	.word	0x080054f5
 8004e3c:	080054f5 	.word	0x080054f5
 8004e40:	080054f5 	.word	0x080054f5
 8004e44:	08004f09 	.word	0x08004f09
 8004e48:	08004f25 	.word	0x08004f25
 8004e4c:	f240 4269 	movw	r2, #1129	; 0x469
 8004e50:	4293      	cmp	r3, r2
 8004e52:	f300 834f 	bgt.w	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
 8004e56:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8004e5a:	f6bf aef1 	bge.w	8004c40 <_Z31handleSDORequestDownloadBySDOIDt+0x168>
 8004e5e:	e349      	b.n	80054f4 <_Z31handleSDORequestDownloadBySDOIDt+0xa1c>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SensorF_OD_NodeID>(OD_NodeID_get());
 8004e60:	f001 f9fa 	bl	8006258 <_Z13OD_NodeID_getv>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e6c:	4611      	mov	r1, r2
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f002 fc1a 	bl	80076a8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e7a:	e343      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SensorF_OD_NodeStatus>(OD_NodeStatus_get());
 8004e7c:	f001 fa08 	bl	8006290 <_Z17OD_NodeStatus_getv>
 8004e80:	4603      	mov	r3, r0
 8004e82:	461a      	mov	r2, r3
 8004e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e88:	4611      	mov	r1, r2
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f002 fc21 	bl	80076d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e96:	e335      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SensorF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8004e98:	f001 fa16 	bl	80062c8 <_Z22OD_ProtocolVersion_getv>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f002 fc28 	bl	80076fc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004eb2:	e327      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SensorF_OD_StackVersion>(OD_StackVersion_get());
 8004eb4:	f001 fa24 	bl	8006300 <_Z19OD_StackVersion_getv>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f002 fc2f 	bl	8007726 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ece:	e319      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SensorF_OD_DbcVersion>(OD_DbcVersion_get());
 8004ed0:	f001 fa32 	bl	8006338 <_Z17OD_DbcVersion_getv>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004edc:	4611      	mov	r1, r2
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f002 fc36 	bl	8007750 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004eea:	e30b      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SensorF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8004eec:	f001 fa40 	bl	8006370 <_Z24OD_HeartbeatInterval_getv>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ef8:	4611      	mov	r1, r2
 8004efa:	4618      	mov	r0, r3
 8004efc:	f002 fc3d 	bl	800777a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f06:	e2fd      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SensorF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8004f08:	f001 fa6a 	bl	80063e0 <_Z21OD_SendOdOnBootup_getv>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f14:	4611      	mov	r1, r2
 8004f16:	4618      	mov	r0, r3
 8004f18:	f002 fc44 	bl	80077a4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f22:	e2ef      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SensorF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8004f24:	f001 fa94 	bl	8006450 <_Z26OD_OdEntrySendInterval_getv>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f002 fc4b 	bl	80077ce <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f3e:	e2e1      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SensorF_OD_CpuUsage>(OD_CpuUsage_get());
 8004f40:	f001 fabe 	bl	80064c0 <_Z15OD_CpuUsage_getv>
 8004f44:	eef0 7a40 	vmov.f32	s15, s0
 8004f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004f50:	4618      	mov	r0, r3
 8004f52:	f002 fc51 	bl	80077f8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f56:	2300      	movs	r3, #0
 8004f58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f5c:	e2d2      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SensorF_OD_MemFree>(OD_MemFree_get());
 8004f5e:	f001 fae9 	bl	8006534 <_Z14OD_MemFree_getv>
 8004f62:	4602      	mov	r2, r0
 8004f64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f002 fc5b 	bl	8007826 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f70:	2300      	movs	r3, #0
 8004f72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f76:	e2c5      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SensorF_OD_BoardTemp>(OD_BoardTemp_get());
 8004f78:	f001 fb14 	bl	80065a4 <_Z16OD_BoardTemp_getv>
 8004f7c:	eef0 7a40 	vmov.f32	s15, s0
 8004f80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f84:	eeb0 0a67 	vmov.f32	s0, s15
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f002 fc60 	bl	800784e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f94:	e2b6      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SensorF_OD_InputVoltage>(OD_InputVoltage_get());
 8004f96:	f001 fb3f 	bl	8006618 <_Z19OD_InputVoltage_getv>
 8004f9a:	eef0 7a40 	vmov.f32	s15, s0
 8004f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f002 fc68 	bl	800787c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fb2:	e2a7      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SensorF_OD_runtime>(OD_runtime_get());
 8004fb4:	f001 fb6a 	bl	800668c <_Z14OD_runtime_getv>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f002 fc72 	bl	80078aa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fcc:	e29a      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SensorF_OD_SdcIn>(OD_SdcIn_get());
 8004fce:	f001 fb79 	bl	80066c4 <_Z12OD_SdcIn_getv>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f002 fc78 	bl	80078d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fe8:	e28c      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SensorF_OD_SdcOut>(OD_SdcOut_get());
 8004fea:	f001 fb87 	bl	80066fc <_Z13OD_SdcOut_getv>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f002 fc7f 	bl	80078fc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005004:	e27e      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID1>(OD_ChipUID1_get());
 8005006:	f001 fb95 	bl	8006734 <_Z15OD_ChipUID1_getv>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005012:	4608      	mov	r0, r1
 8005014:	f002 fc87 	bl	8007926 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005018:	2300      	movs	r3, #0
 800501a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800501e:	e271      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID2>(OD_ChipUID2_get());
 8005020:	f001 fba8 	bl	8006774 <_Z15OD_ChipUID2_getv>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800502c:	4608      	mov	r0, r1
 800502e:	f002 fc93 	bl	8007958 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005032:	2300      	movs	r3, #0
 8005034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005038:	e264      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SensorF_OD_BuildDate>(OD_BuildDate_get());
 800503a:	f001 fbbb 	bl	80067b4 <_Z16OD_BuildDate_getv>
 800503e:	4602      	mov	r2, r0
 8005040:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005044:	4611      	mov	r1, r2
 8005046:	4618      	mov	r0, r3
 8005048:	f002 fc9f 	bl	800798a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800504c:	2300      	movs	r3, #0
 800504e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005052:	e257      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SensorF_OD_BuildTime>(OD_BuildTime_get());
 8005054:	f001 fbca 	bl	80067ec <_Z16OD_BuildTime_getv>
 8005058:	4602      	mov	r2, r0
 800505a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800505e:	4611      	mov	r1, r2
 8005060:	4618      	mov	r0, r3
 8005062:	f002 fca6 	bl	80079b2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005066:	2300      	movs	r3, #0
 8005068:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800506c:	e24a      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 800506e:	f001 fbd9 	bl	8006824 <_Z20OD_CAN1_TxErrCnt_getv>
 8005072:	4603      	mov	r3, r0
 8005074:	461a      	mov	r2, r3
 8005076:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f002 fcac 	bl	80079da <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005082:	2300      	movs	r3, #0
 8005084:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005088:	e23c      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 800508a:	f001 fbe7 	bl	800685c <_Z20OD_CAN1_RxErrCnt_getv>
 800508e:	4603      	mov	r3, r0
 8005090:	461a      	mov	r2, r3
 8005092:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005096:	4611      	mov	r1, r2
 8005098:	4618      	mov	r0, r3
 800509a:	f002 fcb3 	bl	8007a04 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800509e:	2300      	movs	r3, #0
 80050a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050a4:	e22e      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 80050a6:	f001 fbf5 	bl	8006894 <_Z25OD_CAN1_lastErrorCode_getv>
 80050aa:	4602      	mov	r2, r0
 80050ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f002 fcbb 	bl	8007a2e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050be:	e221      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 80050c0:	f001 fc04 	bl	80068cc <_Z26OD_CAN1_autoErrorReset_getv>
 80050c4:	4603      	mov	r3, r0
 80050c6:	461a      	mov	r2, r3
 80050c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050cc:	4611      	mov	r1, r2
 80050ce:	4618      	mov	r0, r3
 80050d0:	f002 fcc1 	bl	8007a56 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050d4:	2300      	movs	r3, #0
 80050d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050da:	e213      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 80050dc:	f001 fc2e 	bl	800693c <_Z20OD_CAN1_Baudrate_getv>
 80050e0:	4603      	mov	r3, r0
 80050e2:	461a      	mov	r2, r3
 80050e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050e8:	4611      	mov	r1, r2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f002 fcc8 	bl	8007a80 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050f0:	2300      	movs	r3, #0
 80050f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050f6:	e205      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Status>(OD_CAN1_Status_get());
 80050f8:	f001 fc58 	bl	80069ac <_Z18OD_CAN1_Status_getv>
 80050fc:	4603      	mov	r3, r0
 80050fe:	461a      	mov	r2, r3
 8005100:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f002 fccf 	bl	8007aaa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800510c:	2300      	movs	r3, #0
 800510e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005112:	e1f7      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8005114:	f001 fc66 	bl	80069e4 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8005118:	4602      	mov	r2, r0
 800511a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800511e:	4611      	mov	r1, r2
 8005120:	4618      	mov	r0, r3
 8005122:	f002 fcd7 	bl	8007ad4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005126:	2300      	movs	r3, #0
 8005128:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800512c:	e1ea      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 800512e:	f001 fc75 	bl	8006a1c <_Z23OD_CAN1_ErrorStatus_getv>
 8005132:	4603      	mov	r3, r0
 8005134:	461a      	mov	r2, r3
 8005136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800513a:	4611      	mov	r1, r2
 800513c:	4618      	mov	r0, r3
 800513e:	f002 fcdd 	bl	8007afc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005142:	2300      	movs	r3, #0
 8005144:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005148:	e1dc      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 800514a:	f001 fc83 	bl	8006a54 <_Z29OD_CAN1_DelayedTxMessages_getv>
 800514e:	4602      	mov	r2, r0
 8005150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005154:	4611      	mov	r1, r2
 8005156:	4618      	mov	r0, r3
 8005158:	f002 fce5 	bl	8007b26 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005162:	e1cf      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8005164:	f001 fc92 	bl	8006a8c <_Z20OD_CAN2_TxErrCnt_getv>
 8005168:	4603      	mov	r3, r0
 800516a:	461a      	mov	r2, r3
 800516c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f002 fceb 	bl	8007b4e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800517e:	e1c1      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8005180:	f001 fca0 	bl	8006ac4 <_Z20OD_CAN2_RxErrCnt_getv>
 8005184:	4603      	mov	r3, r0
 8005186:	461a      	mov	r2, r3
 8005188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f002 fcf2 	bl	8007b78 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005194:	2300      	movs	r3, #0
 8005196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800519a:	e1b3      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 800519c:	f001 fcae 	bl	8006afc <_Z25OD_CAN2_lastErrorCode_getv>
 80051a0:	4602      	mov	r2, r0
 80051a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051a6:	4611      	mov	r1, r2
 80051a8:	4618      	mov	r0, r3
 80051aa:	f002 fcfa 	bl	8007ba2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051b4:	e1a6      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 80051b6:	f001 fcbd 	bl	8006b34 <_Z26OD_CAN2_autoErrorReset_getv>
 80051ba:	4603      	mov	r3, r0
 80051bc:	461a      	mov	r2, r3
 80051be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051c2:	4611      	mov	r1, r2
 80051c4:	4618      	mov	r0, r3
 80051c6:	f002 fd00 	bl	8007bca <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051d0:	e198      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80051d2:	f001 fce7 	bl	8006ba4 <_Z20OD_CAN2_Baudrate_getv>
 80051d6:	4603      	mov	r3, r0
 80051d8:	461a      	mov	r2, r3
 80051da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051de:	4611      	mov	r1, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f002 fd07 	bl	8007bf4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051ec:	e18a      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Status>(OD_CAN2_Status_get());
 80051ee:	f001 fd11 	bl	8006c14 <_Z18OD_CAN2_Status_getv>
 80051f2:	4603      	mov	r3, r0
 80051f4:	461a      	mov	r2, r3
 80051f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f002 fd0e 	bl	8007c1e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005202:	2300      	movs	r3, #0
 8005204:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005208:	e17c      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 800520a:	f001 fd1f 	bl	8006c4c <_Z31OD_CAN2_DiscardedTxMessages_getv>
 800520e:	4602      	mov	r2, r0
 8005210:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f002 fd16 	bl	8007c48 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800521c:	2300      	movs	r3, #0
 800521e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005222:	e16f      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8005224:	f001 fd2e 	bl	8006c84 <_Z23OD_CAN2_ErrorStatus_getv>
 8005228:	4603      	mov	r3, r0
 800522a:	461a      	mov	r2, r3
 800522c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005230:	4611      	mov	r1, r2
 8005232:	4618      	mov	r0, r3
 8005234:	f002 fd1c 	bl	8007c70 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005238:	2300      	movs	r3, #0
 800523a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800523e:	e161      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8005240:	f001 fd3c 	bl	8006cbc <_Z29OD_CAN2_DelayedTxMessages_getv>
 8005244:	4602      	mov	r2, r0
 8005246:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800524a:	4611      	mov	r1, r2
 800524c:	4618      	mov	r0, r3
 800524e:	f002 fd24 	bl	8007c9a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005252:	2300      	movs	r3, #0
 8005254:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005258:	e154      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x800:    // OD_samplingInterval
            msgSdoResp.set<can::signals::SensorF_OD_samplingInterval>(OD_samplingInterval_get());
 800525a:	f001 fd4b 	bl	8006cf4 <_Z23OD_samplingInterval_getv>
 800525e:	eef0 7a40 	vmov.f32	s15, s0
 8005262:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005266:	eeb0 0a67 	vmov.f32	s0, s15
 800526a:	4618      	mov	r0, r3
 800526c:	f002 fd29 	bl	8007cc2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005270:	2300      	movs	r3, #0
 8005272:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005276:	e145      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x900:    // OD_TelemetryCommands
            msgSdoResp.set<can::signals::SensorF_OD_TelemetryCommands>(OD_TelemetryCommands_get());
 8005278:	f001 fd76 	bl	8006d68 <_Z24OD_TelemetryCommands_getv>
 800527c:	4603      	mov	r3, r0
 800527e:	461a      	mov	r2, r3
 8005280:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005284:	4611      	mov	r1, r2
 8005286:	4618      	mov	r0, r3
 8005288:	f002 fd32 	bl	8007cf0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800528c:	2300      	movs	r3, #0
 800528e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005292:	e137      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x901:    // OD_StateMachineInterval
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineInterval>(OD_StateMachineInterval_get());
 8005294:	f001 fda0 	bl	8006dd8 <_Z27OD_StateMachineInterval_getv>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f002 fd39 	bl	8007d1a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052ae:	e129      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x902:    // OD_StateMachineActivate
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineActivate>(OD_StateMachineActivate_get());
 80052b0:	f001 fdca 	bl	8006e48 <_Z27OD_StateMachineActivate_getv>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f002 fd40 	bl	8007d44 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052ca:	e11b      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x903:    // OD_HVBatteryMode
            msgSdoResp.set<can::signals::SensorF_OD_HVBatteryMode>(OD_HVBatteryMode_get());
 80052cc:	f001 fdf4 	bl	8006eb8 <_Z20OD_HVBatteryMode_getv>
 80052d0:	4603      	mov	r3, r0
 80052d2:	461a      	mov	r2, r3
 80052d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d8:	4611      	mov	r1, r2
 80052da:	4618      	mov	r0, r3
 80052dc:	f002 fd47 	bl	8007d6e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052e6:	e10d      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x904:    // OD_EncoderWheelDiameter
            msgSdoResp.set<can::signals::SensorF_OD_EncoderWheelDiameter>(OD_EncoderWheelDiameter_get());
 80052e8:	f001 fe1e 	bl	8006f28 <_Z27OD_EncoderWheelDiameter_getv>
 80052ec:	eef0 7a40 	vmov.f32	s15, s0
 80052f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052f4:	eeb0 0a67 	vmov.f32	s0, s15
 80052f8:	4618      	mov	r0, r3
 80052fa:	f002 fd4d 	bl	8007d98 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005304:	e0fe      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x905:    // OD_EncoderResetPosition
            respCode = can::signals::SensorF_SDO_RespCode::ERR_WRITE_ONLY_OBJECT;
 8005306:	2302      	movs	r3, #2
 8005308:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x905);
 800530c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005310:	f640 1105 	movw	r1, #2309	; 0x905
 8005314:	4618      	mov	r0, r3
 8005316:	f002 fd56 	bl	8007dc6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 800531a:	e0f3      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0x910:    // OD_SetReset
            respCode = can::signals::SensorF_SDO_RespCode::ERR_WRITE_ONLY_OBJECT;
 800531c:	2302      	movs	r3, #2
 800531e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x910);
 8005322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005326:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800532a:	4618      	mov	r0, r3
 800532c:	f002 fd4b 	bl	8007dc6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005330:	e0e8      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA20:    // OD_IMU_number
            msgSdoResp.set<can::signals::SensorF_OD_IMU_number>(OD_IMU_number_get());
 8005332:	f001 fe6b 	bl	800700c <_Z17OD_IMU_number_getv>
 8005336:	4603      	mov	r3, r0
 8005338:	461a      	mov	r2, r3
 800533a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f002 fd55 	bl	8007df0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005346:	2300      	movs	r3, #0
 8005348:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800534c:	e0da      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA25:    // OD_IMU1_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 800534e:	f001 fe79 	bl	8007044 <_Z23OD_IMU1_Temperature_getv>
 8005352:	eef0 7a40 	vmov.f32	s15, s0
 8005356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800535a:	eeb0 0a67 	vmov.f32	s0, s15
 800535e:	4618      	mov	r0, r3
 8005360:	f002 fd5b 	bl	8007e1a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005364:	2300      	movs	r3, #0
 8005366:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800536a:	e0cb      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA26:    // OD_IMU2_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 800536c:	f001 fe88 	bl	8007080 <_Z23OD_IMU2_Temperature_getv>
 8005370:	eef0 7a40 	vmov.f32	s15, s0
 8005374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005378:	eeb0 0a67 	vmov.f32	s0, s15
 800537c:	4618      	mov	r0, r3
 800537e:	f002 fd63 	bl	8007e48 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005382:	2300      	movs	r3, #0
 8005384:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005388:	e0bc      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA27:    // OD_IMU3_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 800538a:	f001 fe97 	bl	80070bc <_Z23OD_IMU3_Temperature_getv>
 800538e:	eef0 7a40 	vmov.f32	s15, s0
 8005392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005396:	eeb0 0a67 	vmov.f32	s0, s15
 800539a:	4618      	mov	r0, r3
 800539c:	f002 fd6b 	bl	8007e76 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053a6:	e0ad      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA28:    // OD_IMU_AccelX
        	printf("send imu accelX\n");
 80053a8:	4864      	ldr	r0, [pc, #400]	; (800553c <_Z31handleSDORequestDownloadBySDOIDt+0xa64>)
 80053aa:	f00f fcb7 	bl	8014d1c <printf_>
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelX>(OD_IMU_AccelX_get());
 80053ae:	f001 fea3 	bl	80070f8 <_Z17OD_IMU_AccelX_getv>
 80053b2:	eef0 7a40 	vmov.f32	s15, s0
 80053b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053ba:	eeb0 0a67 	vmov.f32	s0, s15
 80053be:	4618      	mov	r0, r3
 80053c0:	f002 fd70 	bl	8007ea4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053ca:	e09b      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA29:    // OD_IMU_AccelY
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelY>(OD_IMU_AccelY_get());
 80053cc:	f001 fece 	bl	800716c <_Z17OD_IMU_AccelY_getv>
 80053d0:	eef0 7a40 	vmov.f32	s15, s0
 80053d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053d8:	eeb0 0a67 	vmov.f32	s0, s15
 80053dc:	4618      	mov	r0, r3
 80053de:	f002 fd78 	bl	8007ed2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053e2:	2300      	movs	r3, #0
 80053e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053e8:	e08c      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA30:    // OD_IMU_AccelZ
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelZ>(OD_IMU_AccelZ_get());
 80053ea:	f001 fef9 	bl	80071e0 <_Z17OD_IMU_AccelZ_getv>
 80053ee:	eef0 7a40 	vmov.f32	s15, s0
 80053f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053f6:	eeb0 0a67 	vmov.f32	s0, s15
 80053fa:	4618      	mov	r0, r3
 80053fc:	f002 fd80 	bl	8007f00 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005400:	2300      	movs	r3, #0
 8005402:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005406:	e07d      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA31:    // OD_IMU_GyroX
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroX>(OD_IMU_GyroX_get());
 8005408:	f001 ff24 	bl	8007254 <_Z16OD_IMU_GyroX_getv>
 800540c:	eef0 7a40 	vmov.f32	s15, s0
 8005410:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005414:	eeb0 0a67 	vmov.f32	s0, s15
 8005418:	4618      	mov	r0, r3
 800541a:	f002 fd88 	bl	8007f2e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800541e:	2300      	movs	r3, #0
 8005420:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005424:	e06e      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA32:    // OD_IMU_GyroY
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroY>(OD_IMU_GyroY_get());
 8005426:	f001 ff4f 	bl	80072c8 <_Z16OD_IMU_GyroY_getv>
 800542a:	eef0 7a40 	vmov.f32	s15, s0
 800542e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005432:	eeb0 0a67 	vmov.f32	s0, s15
 8005436:	4618      	mov	r0, r3
 8005438:	f002 fd90 	bl	8007f5c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800543c:	2300      	movs	r3, #0
 800543e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005442:	e05f      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xA33:    // OD_IMU_GyroZ
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroZ>(OD_IMU_GyroZ_get());
 8005444:	f001 ff7a 	bl	800733c <_Z16OD_IMU_GyroZ_getv>
 8005448:	eef0 7a40 	vmov.f32	s15, s0
 800544c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005450:	eeb0 0a67 	vmov.f32	s0, s15
 8005454:	4618      	mov	r0, r3
 8005456:	f002 fd98 	bl	8007f8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800545a:	2300      	movs	r3, #0
 800545c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005460:	e050      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xB00:    // OD_CoolingPressure
            msgSdoResp.set<can::signals::SensorF_OD_CoolingPressure>(OD_CoolingPressure_get());
 8005462:	f001 ffa5 	bl	80073b0 <_Z22OD_CoolingPressure_getv>
 8005466:	eef0 7a40 	vmov.f32	s15, s0
 800546a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800546e:	eeb0 0a67 	vmov.f32	s0, s15
 8005472:	4618      	mov	r0, r3
 8005474:	f002 fda0 	bl	8007fb8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005478:	2300      	movs	r3, #0
 800547a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800547e:	e041      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xC00:    // OD_FiducialRightCounter
            msgSdoResp.set<can::signals::SensorF_OD_FiducialRightCounter>(OD_FiducialRightCounter_get());
 8005480:	f001 ffd0 	bl	8007424 <_Z27OD_FiducialRightCounter_getv>
 8005484:	4603      	mov	r3, r0
 8005486:	461a      	mov	r2, r3
 8005488:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800548c:	4611      	mov	r1, r2
 800548e:	4618      	mov	r0, r3
 8005490:	f002 fda9 	bl	8007fe6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005494:	2300      	movs	r3, #0
 8005496:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800549a:	e033      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xC01:    // OD_FiducialLeftCounter
            msgSdoResp.set<can::signals::SensorF_OD_FiducialLeftCounter>(OD_FiducialLeftCounter_get());
 800549c:	f001 fffa 	bl	8007494 <_Z26OD_FiducialLeftCounter_getv>
 80054a0:	4603      	mov	r3, r0
 80054a2:	461a      	mov	r2, r3
 80054a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054a8:	4611      	mov	r1, r2
 80054aa:	4618      	mov	r0, r3
 80054ac:	f002 fdb0 	bl	8008010 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80054b6:	e025      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xD00:    // OD_Position
            msgSdoResp.set<can::signals::SensorF_OD_Position>(OD_Position_get());
 80054b8:	f002 f824 	bl	8007504 <_Z15OD_Position_getv>
 80054bc:	eef0 7a40 	vmov.f32	s15, s0
 80054c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054c4:	eeb0 0a67 	vmov.f32	s0, s15
 80054c8:	4618      	mov	r0, r3
 80054ca:	f002 fdb6 	bl	800803a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80054d4:	e016      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        case 0xD01:    // OD_Velocity
            msgSdoResp.set<can::signals::SensorF_OD_Velocity>(OD_Velocity_get());
 80054d6:	f002 f84f 	bl	8007578 <_Z15OD_Velocity_getv>
 80054da:	eef0 7a40 	vmov.f32	s15, s0
 80054de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054e2:	eeb0 0a67 	vmov.f32	s0, s15
 80054e6:	4618      	mov	r0, r3
 80054e8:	f002 fdbe 	bl	8008068 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80054ec:	2300      	movs	r3, #0
 80054ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80054f2:	e007      	b.n	8005504 <_Z31handleSDORequestDownloadBySDOIDt+0xa2c>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(sdoId);
 80054f4:	88fa      	ldrh	r2, [r7, #6]
 80054f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054fa:	4611      	mov	r1, r2
 80054fc:	4618      	mov	r0, r3
 80054fe:	f002 fc62 	bl	8007dc6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005502:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SensorF_SDO_RespCode>(respCode);
 8005504:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005508:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f002 fdc1 	bl	8008096 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8005514:	f107 0308 	add.w	r3, r7, #8
 8005518:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800551c:	2200      	movs	r2, #0
 800551e:	4618      	mov	r0, r3
 8005520:	f7fb fe68 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8005524:	4b06      	ldr	r3, [pc, #24]	; (8005540 <_Z31handleSDORequestDownloadBySDOIDt+0xa68>)
 8005526:	6818      	ldr	r0, [r3, #0]
 8005528:	f107 0108 	add.w	r1, r7, #8
 800552c:	2300      	movs	r3, #0
 800552e:	2200      	movs	r2, #0
 8005530:	f010 f84a 	bl	80155c8 <osMessageQueuePut>
}
 8005534:	bf00      	nop
 8005536:	3748      	adds	r7, #72	; 0x48
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	0801c84c 	.word	0x0801c84c
 8005540:	200007b4 	.word	0x200007b4

08005544 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af02      	add	r7, sp, #8
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	9300      	str	r3, [sp, #0]
 8005556:	2300      	movs	r3, #0
 8005558:	2208      	movs	r2, #8
 800555a:	f240 51c1 	movw	r1, #1473	; 0x5c1
 800555e:	f7fc ff60 	bl	8002422 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8005566:	f240 52c1 	movw	r2, #1473	; 0x5c1
 800556a:	4293      	cmp	r3, r2
 800556c:	d000      	beq.n	8005570 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800556e:	e7fe      	b.n	800556e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800557a:	b580      	push	{r7, lr}
 800557c:	b082      	sub	sp, #8
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	6039      	str	r1, [r7, #0]
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	331c      	adds	r3, #28
 800558a:	461a      	mov	r2, r3
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff ffd9 	bl	8005544 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4618      	mov	r0, r3
 8005596:	3708      	adds	r7, #8
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 800559c:	b580      	push	{r7, lr}
 800559e:	b0a0      	sub	sp, #128	; 0x80
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SensorF_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 80055a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f7ff ffe5 	bl	800557a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SensorF_SDO_Resp> msgSdoResp;
 80055b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7ff fa7f 	bl	8004ab8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SensorF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint16_t sdoId = msgSdoReq.get<can::signals::SensorF_SDO_ID>();
 80055c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80055c4:	4618      	mov	r0, r3
 80055c6:	f002 fd7b 	bl	80080c0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>
 80055ca:	4603      	mov	r3, r0
 80055cc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

    switch (sdoId) {
 80055d0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80055d4:	f640 5201 	movw	r2, #3329	; 0xd01
 80055d8:	4293      	cmp	r3, r2
 80055da:	f000 8607 	beq.w	80061ec <_Z22handleSDORequestUploadRK9RxMessage+0xc50>
 80055de:	f640 5201 	movw	r2, #3329	; 0xd01
 80055e2:	4293      	cmp	r3, r2
 80055e4:	f300 8611 	bgt.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80055e8:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80055ec:	f000 85e9 	beq.w	80061c2 <_Z22handleSDORequestUploadRK9RxMessage+0xc26>
 80055f0:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80055f4:	f300 8609 	bgt.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80055f8:	f640 4201 	movw	r2, #3073	; 0xc01
 80055fc:	4293      	cmp	r3, r2
 80055fe:	f000 85d2 	beq.w	80061a6 <_Z22handleSDORequestUploadRK9RxMessage+0xc0a>
 8005602:	f640 4201 	movw	r2, #3073	; 0xc01
 8005606:	4293      	cmp	r3, r2
 8005608:	f300 85ff 	bgt.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800560c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005610:	f000 85bb 	beq.w	800618a <_Z22handleSDORequestUploadRK9RxMessage+0xbee>
 8005614:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005618:	f300 85f7 	bgt.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800561c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005620:	f000 85a4 	beq.w	800616c <_Z22handleSDORequestUploadRK9RxMessage+0xbd0>
 8005624:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005628:	f300 85ef 	bgt.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800562c:	f640 2233 	movw	r2, #2611	; 0xa33
 8005630:	4293      	cmp	r3, r2
 8005632:	f300 85ea 	bgt.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005636:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 800563a:	da16      	bge.n	800566a <_Z22handleSDORequestUploadRK9RxMessage+0xce>
 800563c:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005640:	f300 85e3 	bgt.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005644:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005648:	da40      	bge.n	80056cc <_Z22handleSDORequestUploadRK9RxMessage+0x130>
 800564a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800564e:	f000 83f0 	beq.w	8005e32 <_Z22handleSDORequestUploadRK9RxMessage+0x896>
 8005652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005656:	f300 85d8 	bgt.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800565a:	2b21      	cmp	r3, #33	; 0x21
 800565c:	f300 8166 	bgt.w	800592c <_Z22handleSDORequestUploadRK9RxMessage+0x390>
 8005660:	2b00      	cmp	r3, #0
 8005662:	f300 8119 	bgt.w	8005898 <_Z22handleSDORequestUploadRK9RxMessage+0x2fc>
 8005666:	f000 bdd0 	b.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800566a:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 800566e:	2b13      	cmp	r3, #19
 8005670:	f200 85cb 	bhi.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005674:	a201      	add	r2, pc, #4	; (adr r2, 800567c <_Z22handleSDORequestUploadRK9RxMessage+0xe0>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	08006043 	.word	0x08006043
 8005680:	0800620b 	.word	0x0800620b
 8005684:	0800620b 	.word	0x0800620b
 8005688:	0800620b 	.word	0x0800620b
 800568c:	0800620b 	.word	0x0800620b
 8005690:	0800605f 	.word	0x0800605f
 8005694:	0800607d 	.word	0x0800607d
 8005698:	0800609b 	.word	0x0800609b
 800569c:	080060b9 	.word	0x080060b9
 80056a0:	080060d7 	.word	0x080060d7
 80056a4:	0800620b 	.word	0x0800620b
 80056a8:	0800620b 	.word	0x0800620b
 80056ac:	0800620b 	.word	0x0800620b
 80056b0:	0800620b 	.word	0x0800620b
 80056b4:	0800620b 	.word	0x0800620b
 80056b8:	0800620b 	.word	0x0800620b
 80056bc:	080060f5 	.word	0x080060f5
 80056c0:	08006113 	.word	0x08006113
 80056c4:	08006131 	.word	0x08006131
 80056c8:	0800614f 	.word	0x0800614f
 80056cc:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	f200 859a 	bhi.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80056d6:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <_Z22handleSDORequestUploadRK9RxMessage+0x140>)
 80056d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056dc:	08005e93 	.word	0x08005e93
 80056e0:	08005ec9 	.word	0x08005ec9
 80056e4:	08005f17 	.word	0x08005f17
 80056e8:	08005f4d 	.word	0x08005f4d
 80056ec:	08005f83 	.word	0x08005f83
 80056f0:	08005fe3 	.word	0x08005fe3
 80056f4:	0800620b 	.word	0x0800620b
 80056f8:	0800620b 	.word	0x0800620b
 80056fc:	0800620b 	.word	0x0800620b
 8005700:	0800620b 	.word	0x0800620b
 8005704:	0800620b 	.word	0x0800620b
 8005708:	0800620b 	.word	0x0800620b
 800570c:	0800620b 	.word	0x0800620b
 8005710:	0800620b 	.word	0x0800620b
 8005714:	0800620b 	.word	0x0800620b
 8005718:	0800620b 	.word	0x0800620b
 800571c:	08006013 	.word	0x08006013
 8005720:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8005724:	2b59      	cmp	r3, #89	; 0x59
 8005726:	f200 8570 	bhi.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <_Z22handleSDORequestUploadRK9RxMessage+0x194>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005a7d 	.word	0x08005a7d
 8005734:	08005a9b 	.word	0x08005a9b
 8005738:	08005ab5 	.word	0x08005ab5
 800573c:	08005ad3 	.word	0x08005ad3
 8005740:	08005af1 	.word	0x08005af1
 8005744:	08005b0b 	.word	0x08005b0b
 8005748:	08005b27 	.word	0x08005b27
 800574c:	0800620b 	.word	0x0800620b
 8005750:	0800620b 	.word	0x0800620b
 8005754:	0800620b 	.word	0x0800620b
 8005758:	0800620b 	.word	0x0800620b
 800575c:	0800620b 	.word	0x0800620b
 8005760:	0800620b 	.word	0x0800620b
 8005764:	0800620b 	.word	0x0800620b
 8005768:	0800620b 	.word	0x0800620b
 800576c:	0800620b 	.word	0x0800620b
 8005770:	08005b43 	.word	0x08005b43
 8005774:	08005b5d 	.word	0x08005b5d
 8005778:	0800620b 	.word	0x0800620b
 800577c:	0800620b 	.word	0x0800620b
 8005780:	0800620b 	.word	0x0800620b
 8005784:	0800620b 	.word	0x0800620b
 8005788:	0800620b 	.word	0x0800620b
 800578c:	0800620b 	.word	0x0800620b
 8005790:	0800620b 	.word	0x0800620b
 8005794:	0800620b 	.word	0x0800620b
 8005798:	0800620b 	.word	0x0800620b
 800579c:	0800620b 	.word	0x0800620b
 80057a0:	0800620b 	.word	0x0800620b
 80057a4:	0800620b 	.word	0x0800620b
 80057a8:	0800620b 	.word	0x0800620b
 80057ac:	0800620b 	.word	0x0800620b
 80057b0:	08005b77 	.word	0x08005b77
 80057b4:	08005b91 	.word	0x08005b91
 80057b8:	0800620b 	.word	0x0800620b
 80057bc:	0800620b 	.word	0x0800620b
 80057c0:	0800620b 	.word	0x0800620b
 80057c4:	0800620b 	.word	0x0800620b
 80057c8:	0800620b 	.word	0x0800620b
 80057cc:	0800620b 	.word	0x0800620b
 80057d0:	0800620b 	.word	0x0800620b
 80057d4:	0800620b 	.word	0x0800620b
 80057d8:	0800620b 	.word	0x0800620b
 80057dc:	0800620b 	.word	0x0800620b
 80057e0:	0800620b 	.word	0x0800620b
 80057e4:	0800620b 	.word	0x0800620b
 80057e8:	0800620b 	.word	0x0800620b
 80057ec:	0800620b 	.word	0x0800620b
 80057f0:	0800620b 	.word	0x0800620b
 80057f4:	0800620b 	.word	0x0800620b
 80057f8:	0800620b 	.word	0x0800620b
 80057fc:	0800620b 	.word	0x0800620b
 8005800:	0800620b 	.word	0x0800620b
 8005804:	0800620b 	.word	0x0800620b
 8005808:	0800620b 	.word	0x0800620b
 800580c:	0800620b 	.word	0x0800620b
 8005810:	0800620b 	.word	0x0800620b
 8005814:	0800620b 	.word	0x0800620b
 8005818:	0800620b 	.word	0x0800620b
 800581c:	0800620b 	.word	0x0800620b
 8005820:	0800620b 	.word	0x0800620b
 8005824:	0800620b 	.word	0x0800620b
 8005828:	0800620b 	.word	0x0800620b
 800582c:	0800620b 	.word	0x0800620b
 8005830:	08005bab 	.word	0x08005bab
 8005834:	08005bc7 	.word	0x08005bc7
 8005838:	08005be3 	.word	0x08005be3
 800583c:	08005bfd 	.word	0x08005bfd
 8005840:	08005c33 	.word	0x08005c33
 8005844:	0800620b 	.word	0x0800620b
 8005848:	08005c83 	.word	0x08005c83
 800584c:	08005c9f 	.word	0x08005c9f
 8005850:	08005cb9 	.word	0x08005cb9
 8005854:	08005cd5 	.word	0x08005cd5
 8005858:	0800620b 	.word	0x0800620b
 800585c:	0800620b 	.word	0x0800620b
 8005860:	0800620b 	.word	0x0800620b
 8005864:	0800620b 	.word	0x0800620b
 8005868:	0800620b 	.word	0x0800620b
 800586c:	0800620b 	.word	0x0800620b
 8005870:	08005cef 	.word	0x08005cef
 8005874:	08005d0b 	.word	0x08005d0b
 8005878:	08005d27 	.word	0x08005d27
 800587c:	08005d41 	.word	0x08005d41
 8005880:	08005d77 	.word	0x08005d77
 8005884:	0800620b 	.word	0x0800620b
 8005888:	08005dc7 	.word	0x08005dc7
 800588c:	08005de3 	.word	0x08005de3
 8005890:	08005dfd 	.word	0x08005dfd
 8005894:	08005e19 	.word	0x08005e19
 8005898:	3b01      	subs	r3, #1
 800589a:	2b20      	cmp	r3, #32
 800589c:	f200 84b5 	bhi.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80058a0:	a201      	add	r2, pc, #4	; (adr r2, 80058a8 <_Z22handleSDORequestUploadRK9RxMessage+0x30c>)
 80058a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058a6:	bf00      	nop
 80058a8:	08005943 	.word	0x08005943
 80058ac:	08005961 	.word	0x08005961
 80058b0:	0800597f 	.word	0x0800597f
 80058b4:	0800599d 	.word	0x0800599d
 80058b8:	080059bb 	.word	0x080059bb
 80058bc:	0800620b 	.word	0x0800620b
 80058c0:	0800620b 	.word	0x0800620b
 80058c4:	0800620b 	.word	0x0800620b
 80058c8:	0800620b 	.word	0x0800620b
 80058cc:	0800620b 	.word	0x0800620b
 80058d0:	0800620b 	.word	0x0800620b
 80058d4:	0800620b 	.word	0x0800620b
 80058d8:	0800620b 	.word	0x0800620b
 80058dc:	0800620b 	.word	0x0800620b
 80058e0:	0800620b 	.word	0x0800620b
 80058e4:	080059d9 	.word	0x080059d9
 80058e8:	0800620b 	.word	0x0800620b
 80058ec:	0800620b 	.word	0x0800620b
 80058f0:	0800620b 	.word	0x0800620b
 80058f4:	0800620b 	.word	0x0800620b
 80058f8:	0800620b 	.word	0x0800620b
 80058fc:	0800620b 	.word	0x0800620b
 8005900:	0800620b 	.word	0x0800620b
 8005904:	0800620b 	.word	0x0800620b
 8005908:	0800620b 	.word	0x0800620b
 800590c:	0800620b 	.word	0x0800620b
 8005910:	0800620b 	.word	0x0800620b
 8005914:	0800620b 	.word	0x0800620b
 8005918:	0800620b 	.word	0x0800620b
 800591c:	0800620b 	.word	0x0800620b
 8005920:	0800620b 	.word	0x0800620b
 8005924:	08005a11 	.word	0x08005a11
 8005928:	08005a47 	.word	0x08005a47
 800592c:	f240 4269 	movw	r2, #1129	; 0x469
 8005930:	4293      	cmp	r3, r2
 8005932:	f300 846a 	bgt.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005936:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800593a:	f6bf aef1 	bge.w	8005720 <_Z22handleSDORequestUploadRK9RxMessage+0x184>
 800593e:	f000 bc64 	b.w	800620a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005942:	2303      	movs	r3, #3
 8005944:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_NodeID>(OD_NodeID_get());
 8005948:	f000 fc86 	bl	8006258 <_Z13OD_NodeID_getv>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005954:	4611      	mov	r1, r2
 8005956:	4618      	mov	r0, r3
 8005958:	f001 fea6 	bl	80076a8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 800595c:	f000 bc5e 	b.w	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005960:	2303      	movs	r3, #3
 8005962:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_NodeStatus>(OD_NodeStatus_get());
 8005966:	f000 fc93 	bl	8006290 <_Z17OD_NodeStatus_getv>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005972:	4611      	mov	r1, r2
 8005974:	4618      	mov	r0, r3
 8005976:	f001 feac 	bl	80076d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 800597a:	f000 bc4f 	b.w	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800597e:	2303      	movs	r3, #3
 8005980:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8005984:	f000 fca0 	bl	80062c8 <_Z22OD_ProtocolVersion_getv>
 8005988:	4603      	mov	r3, r0
 800598a:	461a      	mov	r2, r3
 800598c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005990:	4611      	mov	r1, r2
 8005992:	4618      	mov	r0, r3
 8005994:	f001 feb2 	bl	80076fc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 8005998:	f000 bc40 	b.w	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800599c:	2303      	movs	r3, #3
 800599e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_StackVersion>(OD_StackVersion_get());
 80059a2:	f000 fcad 	bl	8006300 <_Z19OD_StackVersion_getv>
 80059a6:	4603      	mov	r3, r0
 80059a8:	461a      	mov	r2, r3
 80059aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f001 feb8 	bl	8007726 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 80059b6:	f000 bc31 	b.w	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_DbcVersion>(OD_DbcVersion_get());
 80059c0:	f000 fcba 	bl	8006338 <_Z17OD_DbcVersion_getv>
 80059c4:	4603      	mov	r3, r0
 80059c6:	461a      	mov	r2, r3
 80059c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059cc:	4611      	mov	r1, r2
 80059ce:	4618      	mov	r0, r3
 80059d0:	f001 febe 	bl	8007750 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 80059d4:	f000 bc22 	b.w	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_HeartbeatInterval>();
 80059d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80059dc:	4618      	mov	r0, r3
 80059de:	f002 fb81 	bl	80080e4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 80059e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fcdb 	bl	80063a8 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80059f8:	f000 fcba 	bl	8006370 <_Z24OD_HeartbeatInterval_getv>
 80059fc:	4603      	mov	r3, r0
 80059fe:	461a      	mov	r2, r3
 8005a00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a04:	4611      	mov	r1, r2
 8005a06:	4618      	mov	r0, r3
 8005a08:	f001 feb7 	bl	800777a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 8005a0c:	f000 bc06 	b.w	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_SendOdOnBootup>();
 8005a10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a14:	4618      	mov	r0, r3
 8005a16:	f002 fb77 	bl	8008108 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals25SensorF_OD_SendOdOnBootupEEENT_8dataTypeEv>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 8005a20:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 fcf7 	bl	8006418 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8005a30:	f000 fcd6 	bl	80063e0 <_Z21OD_SendOdOnBootup_getv>
 8005a34:	4603      	mov	r3, r0
 8005a36:	461a      	mov	r2, r3
 8005a38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 feb0 	bl	80077a4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 8005a44:	e3ea      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_OdEntrySendInterval>();
 8005a46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f002 fb6e 	bl	800812c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8005a50:	4603      	mov	r3, r0
 8005a52:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8005a56:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fd14 	bl	8006488 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8005a66:	f000 fcf3 	bl	8006450 <_Z26OD_OdEntrySendInterval_getv>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a72:	4611      	mov	r1, r2
 8005a74:	4618      	mov	r0, r3
 8005a76:	f001 feaa 	bl	80077ce <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 8005a7a:	e3cf      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CpuUsage>(OD_CpuUsage_get());
 8005a82:	f000 fd1d 	bl	80064c0 <_Z15OD_CpuUsage_getv>
 8005a86:	eef0 7a40 	vmov.f32	s15, s0
 8005a8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 feb0 	bl	80077f8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 8005a98:	e3c0      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_MemFree>(OD_MemFree_get());
 8005aa0:	f000 fd48 	bl	8006534 <_Z14OD_MemFree_getv>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 feba 	bl	8007826 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 8005ab2:	e3b3      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BoardTemp>(OD_BoardTemp_get());
 8005aba:	f000 fd73 	bl	80065a4 <_Z16OD_BoardTemp_getv>
 8005abe:	eef0 7a40 	vmov.f32	s15, s0
 8005ac2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 febf 	bl	800784e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 8005ad0:	e3a4      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_InputVoltage>(OD_InputVoltage_get());
 8005ad8:	f000 fd9e 	bl	8006618 <_Z19OD_InputVoltage_getv>
 8005adc:	eef0 7a40 	vmov.f32	s15, s0
 8005ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f001 fec7 	bl	800787c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 8005aee:	e395      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005af0:	2303      	movs	r3, #3
 8005af2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_runtime>(OD_runtime_get());
 8005af6:	f000 fdc9 	bl	800668c <_Z14OD_runtime_getv>
 8005afa:	4602      	mov	r2, r0
 8005afc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b00:	4611      	mov	r1, r2
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 fed1 	bl	80078aa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>
            break;
 8005b08:	e388      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SdcIn>(OD_SdcIn_get());
 8005b10:	f000 fdd8 	bl	80066c4 <_Z12OD_SdcIn_getv>
 8005b14:	4603      	mov	r3, r0
 8005b16:	461a      	mov	r2, r3
 8005b18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b1c:	4611      	mov	r1, r2
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f001 fed7 	bl	80078d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>
            break;
 8005b24:	e37a      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SdcOut>(OD_SdcOut_get());
 8005b2c:	f000 fde6 	bl	80066fc <_Z13OD_SdcOut_getv>
 8005b30:	4603      	mov	r3, r0
 8005b32:	461a      	mov	r2, r3
 8005b34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b38:	4611      	mov	r1, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f001 fede 	bl	80078fc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8005b40:	e36c      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID1>(OD_ChipUID1_get());
 8005b48:	f000 fdf4 	bl	8006734 <_Z15OD_ChipUID1_getv>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005b54:	4608      	mov	r0, r1
 8005b56:	f001 fee6 	bl	8007926 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8005b5a:	e35f      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID2>(OD_ChipUID2_get());
 8005b62:	f000 fe07 	bl	8006774 <_Z15OD_ChipUID2_getv>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005b6e:	4608      	mov	r0, r1
 8005b70:	f001 fef2 	bl	8007958 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 8005b74:	e352      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BuildDate>(OD_BuildDate_get());
 8005b7c:	f000 fe1a 	bl	80067b4 <_Z16OD_BuildDate_getv>
 8005b80:	4602      	mov	r2, r0
 8005b82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b86:	4611      	mov	r1, r2
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fefe 	bl	800798a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8005b8e:	e345      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BuildTime>(OD_BuildTime_get());
 8005b96:	f000 fe29 	bl	80067ec <_Z16OD_BuildTime_getv>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f001 ff05 	bl	80079b2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 8005ba8:	e338      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8005bb0:	f000 fe38 	bl	8006824 <_Z20OD_CAN1_TxErrCnt_getv>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bbc:	4611      	mov	r1, r2
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f001 ff0b 	bl	80079da <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 8005bc4:	e32a      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8005bcc:	f000 fe46 	bl	800685c <_Z20OD_CAN1_RxErrCnt_getv>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 ff12 	bl	8007a04 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 8005be0:	e31c      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005be2:	2303      	movs	r3, #3
 8005be4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8005be8:	f000 fe54 	bl	8006894 <_Z25OD_CAN1_lastErrorCode_getv>
 8005bec:	4602      	mov	r2, r0
 8005bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 ff1a 	bl	8007a2e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005bfa:	e30f      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN1_autoErrorReset>();
 8005bfc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c00:	4618      	mov	r0, r3
 8005c02:	f002 faa5 	bl	8008150 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 8005c0c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005c10:	4618      	mov	r0, r3
 8005c12:	f000 fe77 	bl	8006904 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8005c1c:	f000 fe56 	bl	80068cc <_Z26OD_CAN1_autoErrorReset_getv>
 8005c20:	4603      	mov	r3, r0
 8005c22:	461a      	mov	r2, r3
 8005c24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c28:	4611      	mov	r1, r2
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 ff13 	bl	8007a56 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8005c30:	e2f4      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN1_Baudrate>();
 8005c32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c36:	4618      	mov	r0, r3
 8005c38:	f002 fa9c 	bl	8008174 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8005c42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c46:	2b7c      	cmp	r3, #124	; 0x7c
 8005c48:	d904      	bls.n	8005c54 <_Z22handleSDORequestUploadRK9RxMessage+0x6b8>
 8005c4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c52:	d903      	bls.n	8005c5c <_Z22handleSDORequestUploadRK9RxMessage+0x6c0>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005c54:	2305      	movs	r3, #5
 8005c56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005c5a:	e007      	b.n	8005c6c <_Z22handleSDORequestUploadRK9RxMessage+0x6d0>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8005c5c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 fe87 	bl	8006974 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8005c6c:	f000 fe66 	bl	800693c <_Z20OD_CAN1_Baudrate_getv>
 8005c70:	4603      	mov	r3, r0
 8005c72:	461a      	mov	r2, r3
 8005c74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c78:	4611      	mov	r1, r2
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 ff00 	bl	8007a80 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8005c80:	e2cc      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Status>(OD_CAN1_Status_get());
 8005c88:	f000 fe90 	bl	80069ac <_Z18OD_CAN1_Status_getv>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	461a      	mov	r2, r3
 8005c90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c94:	4611      	mov	r1, r2
 8005c96:	4618      	mov	r0, r3
 8005c98:	f001 ff07 	bl	8007aaa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 8005c9c:	e2be      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8005ca4:	f000 fe9e 	bl	80069e4 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cae:	4611      	mov	r1, r2
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f001 ff0f 	bl	8007ad4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005cb6:	e2b1      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8005cbe:	f000 fead 	bl	8006a1c <_Z23OD_CAN1_ErrorStatus_getv>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 ff15 	bl	8007afc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8005cd2:	e2a3      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8005cda:	f000 febb 	bl	8006a54 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ce4:	4611      	mov	r1, r2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f001 ff1d 	bl	8007b26 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005cec:	e296      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8005cf4:	f000 feca 	bl	8006a8c <_Z20OD_CAN2_TxErrCnt_getv>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d00:	4611      	mov	r1, r2
 8005d02:	4618      	mov	r0, r3
 8005d04:	f001 ff23 	bl	8007b4e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 8005d08:	e288      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005d0a:	2303      	movs	r3, #3
 8005d0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8005d10:	f000 fed8 	bl	8006ac4 <_Z20OD_CAN2_RxErrCnt_getv>
 8005d14:	4603      	mov	r3, r0
 8005d16:	461a      	mov	r2, r3
 8005d18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 ff2a 	bl	8007b78 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 8005d24:	e27a      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8005d2c:	f000 fee6 	bl	8006afc <_Z25OD_CAN2_lastErrorCode_getv>
 8005d30:	4602      	mov	r2, r0
 8005d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d36:	4611      	mov	r1, r2
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f001 ff32 	bl	8007ba2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005d3e:	e26d      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN2_autoErrorReset>();
 8005d40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d44:	4618      	mov	r0, r3
 8005d46:	f002 fa27 	bl	8008198 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8005d50:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 ff09 	bl	8006b6c <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8005d60:	f000 fee8 	bl	8006b34 <_Z26OD_CAN2_autoErrorReset_getv>
 8005d64:	4603      	mov	r3, r0
 8005d66:	461a      	mov	r2, r3
 8005d68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f001 ff2b 	bl	8007bca <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8005d74:	e252      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN2_Baudrate>();
 8005d76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f002 fa1e 	bl	80081bc <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 8005d86:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005d8a:	2b7c      	cmp	r3, #124	; 0x7c
 8005d8c:	d904      	bls.n	8005d98 <_Z22handleSDORequestUploadRK9RxMessage+0x7fc>
 8005d8e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005d92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d96:	d903      	bls.n	8005da0 <_Z22handleSDORequestUploadRK9RxMessage+0x804>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005d98:	2305      	movs	r3, #5
 8005d9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005d9e:	e007      	b.n	8005db0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 8005da0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 ff19 	bl	8006bdc <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005daa:	2300      	movs	r3, #0
 8005dac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8005db0:	f000 fef8 	bl	8006ba4 <_Z20OD_CAN2_Baudrate_getv>
 8005db4:	4603      	mov	r3, r0
 8005db6:	461a      	mov	r2, r3
 8005db8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 ff18 	bl	8007bf4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 8005dc4:	e22a      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Status>(OD_CAN2_Status_get());
 8005dcc:	f000 ff22 	bl	8006c14 <_Z18OD_CAN2_Status_getv>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dd8:	4611      	mov	r1, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f001 ff1f 	bl	8007c1e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 8005de0:	e21c      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8005de8:	f000 ff30 	bl	8006c4c <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8005dec:	4602      	mov	r2, r0
 8005dee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005df2:	4611      	mov	r1, r2
 8005df4:	4618      	mov	r0, r3
 8005df6:	f001 ff27 	bl	8007c48 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005dfa:	e20f      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8005e02:	f000 ff3f 	bl	8006c84 <_Z23OD_CAN2_ErrorStatus_getv>
 8005e06:	4603      	mov	r3, r0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e0e:	4611      	mov	r1, r2
 8005e10:	4618      	mov	r0, r3
 8005e12:	f001 ff2d 	bl	8007c70 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8005e16:	e201      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8005e1e:	f000 ff4d 	bl	8006cbc <_Z29OD_CAN2_DelayedTxMessages_getv>
 8005e22:	4602      	mov	r2, r0
 8005e24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e28:	4611      	mov	r1, r2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 ff35 	bl	8007c9a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005e30:	e1f4      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x800: {   // OD_samplingInterval
            float value = msgSdoReq.get<can::signals::SensorF_OD_samplingInterval>();
 8005e32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e36:	4618      	mov	r0, r3
 8005e38:	f002 f9d2 	bl	80081e0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals27SensorF_OD_samplingIntervalEEENT_8dataTypeEv>
 8005e3c:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
if (value < 0.01f || value > 100.0f) {
 8005e40:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005e44:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 80061e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc44>
 8005e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e50:	d408      	bmi.n	8005e64 <_Z22handleSDORequestUploadRK9RxMessage+0x8c8>
 8005e52:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005e56:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 80061e4 <_Z22handleSDORequestUploadRK9RxMessage+0xc48>
 8005e5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e62:	dd03      	ble.n	8005e6c <_Z22handleSDORequestUploadRK9RxMessage+0x8d0>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005e64:	2305      	movs	r3, #5
 8005e66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005e6a:	e006      	b.n	8005e7a <_Z22handleSDORequestUploadRK9RxMessage+0x8de>
            }
            else {
                OD_samplingInterval_set(value);
 8005e6c:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8005e70:	f000 ff5e 	bl	8006d30 <_Z23OD_samplingInterval_setf>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005e74:	2300      	movs	r3, #0
 8005e76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_samplingInterval>(OD_samplingInterval_get());
 8005e7a:	f000 ff3b 	bl	8006cf4 <_Z23OD_samplingInterval_getv>
 8005e7e:	eef0 7a40 	vmov.f32	s15, s0
 8005e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e86:	eeb0 0a67 	vmov.f32	s0, s15
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 ff19 	bl	8007cc2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>
            break;
 8005e90:	e1c4      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x900: {   // OD_TelemetryCommands
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_TelemetryCommands>();
 8005e92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e96:	4618      	mov	r0, r3
 8005e98:	f002 f9b6 	bl	8008208 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_TelemetryCommandsEEENT_8dataTypeEv>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                OD_TelemetryCommands_set(value);
 8005ea2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 ff7a 	bl	8006da0 <_Z24OD_TelemetryCommands_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_TelemetryCommands>(OD_TelemetryCommands_get());
 8005eb2:	f000 ff59 	bl	8006d68 <_Z24OD_TelemetryCommands_getv>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	461a      	mov	r2, r3
 8005eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f001 ff15 	bl	8007cf0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>
            break;
 8005ec6:	e1a9      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x901: {   // OD_StateMachineInterval
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_StateMachineInterval>();
 8005ec8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f002 f9ad 	bl	800822c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineIntervalEEENT_8dataTypeEv>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
if (value < 5 || value > 100) {
 8005ed8:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d903      	bls.n	8005ee8 <_Z22handleSDORequestUploadRK9RxMessage+0x94c>
 8005ee0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005ee4:	2b64      	cmp	r3, #100	; 0x64
 8005ee6:	d903      	bls.n	8005ef0 <_Z22handleSDORequestUploadRK9RxMessage+0x954>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005ee8:	2305      	movs	r3, #5
 8005eea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005eee:	e007      	b.n	8005f00 <_Z22handleSDORequestUploadRK9RxMessage+0x964>
            }
            else {
                OD_StateMachineInterval_set(value);
 8005ef0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f000 ff8b 	bl	8006e10 <_Z27OD_StateMachineInterval_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005efa:	2300      	movs	r3, #0
 8005efc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineInterval>(OD_StateMachineInterval_get());
 8005f00:	f000 ff6a 	bl	8006dd8 <_Z27OD_StateMachineInterval_getv>
 8005f04:	4603      	mov	r3, r0
 8005f06:	461a      	mov	r2, r3
 8005f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f0c:	4611      	mov	r1, r2
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f001 ff03 	bl	8007d1a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>
            break;
 8005f14:	e182      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x902: {   // OD_StateMachineActivate
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_StateMachineActivate>();
 8005f16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f002 f998 	bl	8008250 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineActivateEEENT_8dataTypeEv>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                OD_StateMachineActivate_set(value);
 8005f26:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 ffa8 	bl	8006e80 <_Z27OD_StateMachineActivate_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineActivate>(OD_StateMachineActivate_get());
 8005f36:	f000 ff87 	bl	8006e48 <_Z27OD_StateMachineActivate_getv>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f42:	4611      	mov	r1, r2
 8005f44:	4618      	mov	r0, r3
 8005f46:	f001 fefd 	bl	8007d44 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>
            break;
 8005f4a:	e167      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x903: {   // OD_HVBatteryMode
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_HVBatteryMode>();
 8005f4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f50:	4618      	mov	r0, r3
 8005f52:	f002 f98f 	bl	8008274 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_HVBatteryModeEEENT_8dataTypeEv>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                OD_HVBatteryMode_set(value);
 8005f5c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8005f60:	4618      	mov	r0, r3
 8005f62:	f000 ffc5 	bl	8006ef0 <_Z20OD_HVBatteryMode_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_HVBatteryMode>(OD_HVBatteryMode_get());
 8005f6c:	f000 ffa4 	bl	8006eb8 <_Z20OD_HVBatteryMode_getv>
 8005f70:	4603      	mov	r3, r0
 8005f72:	461a      	mov	r2, r3
 8005f74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f78:	4611      	mov	r1, r2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f001 fef7 	bl	8007d6e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>
            break;
 8005f80:	e14c      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x904: {   // OD_EncoderWheelDiameter
            float value = msgSdoReq.get<can::signals::SensorF_OD_EncoderWheelDiameter>();
 8005f82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f86:	4618      	mov	r0, r3
 8005f88:	f002 f986 	bl	8008298 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderWheelDiameterEEENT_8dataTypeEv>
 8005f8c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
if (value < 1.0f || value > 300.0f) {
 8005f90:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa0:	d408      	bmi.n	8005fb4 <_Z22handleSDORequestUploadRK9RxMessage+0xa18>
 8005fa2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005fa6:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80061e8 <_Z22handleSDORequestUploadRK9RxMessage+0xc4c>
 8005faa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb2:	dd03      	ble.n	8005fbc <_Z22handleSDORequestUploadRK9RxMessage+0xa20>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005fb4:	2305      	movs	r3, #5
 8005fb6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005fba:	e006      	b.n	8005fca <_Z22handleSDORequestUploadRK9RxMessage+0xa2e>
            }
            else {
                OD_EncoderWheelDiameter_set(value);
 8005fbc:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8005fc0:	f000 ffd0 	bl	8006f64 <_Z27OD_EncoderWheelDiameter_setf>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_EncoderWheelDiameter>(OD_EncoderWheelDiameter_get());
 8005fca:	f000 ffad 	bl	8006f28 <_Z27OD_EncoderWheelDiameter_getv>
 8005fce:	eef0 7a40 	vmov.f32	s15, s0
 8005fd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 fedc 	bl	8007d98 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>
            break;
 8005fe0:	e11c      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x905: {   // OD_EncoderResetPosition
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_EncoderResetPosition>();
 8005fe2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f002 f96a 	bl	80082c0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderResetPositionEEENT_8dataTypeEv>
 8005fec:	4603      	mov	r3, r0
 8005fee:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
                OD_EncoderResetPosition_set(value);
 8005ff2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 ffd0 	bl	8006f9c <_Z27OD_EncoderResetPosition_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x905);
 8006002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006006:	f640 1105 	movw	r1, #2309	; 0x905
 800600a:	4618      	mov	r0, r3
 800600c:	f001 fedb 	bl	8007dc6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8006010:	e104      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x910: {   // OD_SetReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_SetReset>();
 8006012:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006016:	4618      	mov	r0, r3
 8006018:	f002 f964 	bl	80082e4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals19SensorF_OD_SetResetEEENT_8dataTypeEv>
 800601c:	4603      	mov	r3, r0
 800601e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                OD_SetReset_set(value);
 8006022:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8006026:	4618      	mov	r0, r3
 8006028:	f000 ffd4 	bl	8006fd4 <_Z15OD_SetReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 800602c:	2300      	movs	r3, #0
 800602e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x910);
 8006032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006036:	f44f 6111 	mov.w	r1, #2320	; 0x910
 800603a:	4618      	mov	r0, r3
 800603c:	f001 fec3 	bl	8007dc6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8006040:	e0ec      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA20: {   // OD_IMU_number
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006042:	2303      	movs	r3, #3
 8006044:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_number>(OD_IMU_number_get());
 8006048:	f000 ffe0 	bl	800700c <_Z17OD_IMU_number_getv>
 800604c:	4603      	mov	r3, r0
 800604e:	461a      	mov	r2, r3
 8006050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006054:	4611      	mov	r1, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f001 feca 	bl	8007df0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>
            break;
 800605c:	e0de      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA25: {   // OD_IMU1_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800605e:	2303      	movs	r3, #3
 8006060:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8006064:	f000 ffee 	bl	8007044 <_Z23OD_IMU1_Temperature_getv>
 8006068:	eef0 7a40 	vmov.f32	s15, s0
 800606c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006070:	eeb0 0a67 	vmov.f32	s0, s15
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fed0 	bl	8007e1a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            break;
 800607a:	e0cf      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA26: {   // OD_IMU2_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800607c:	2303      	movs	r3, #3
 800607e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8006082:	f000 fffd 	bl	8007080 <_Z23OD_IMU2_Temperature_getv>
 8006086:	eef0 7a40 	vmov.f32	s15, s0
 800608a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800608e:	eeb0 0a67 	vmov.f32	s0, s15
 8006092:	4618      	mov	r0, r3
 8006094:	f001 fed8 	bl	8007e48 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            break;
 8006098:	e0c0      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA27: {   // OD_IMU3_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800609a:	2303      	movs	r3, #3
 800609c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 80060a0:	f001 f80c 	bl	80070bc <_Z23OD_IMU3_Temperature_getv>
 80060a4:	eef0 7a40 	vmov.f32	s15, s0
 80060a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ac:	eeb0 0a67 	vmov.f32	s0, s15
 80060b0:	4618      	mov	r0, r3
 80060b2:	f001 fee0 	bl	8007e76 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            break;
 80060b6:	e0b1      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA28: {   // OD_IMU_AccelX
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelX>(OD_IMU_AccelX_get());
 80060be:	f001 f81b 	bl	80070f8 <_Z17OD_IMU_AccelX_getv>
 80060c2:	eef0 7a40 	vmov.f32	s15, s0
 80060c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060ca:	eeb0 0a67 	vmov.f32	s0, s15
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fee8 	bl	8007ea4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>
            break;
 80060d4:	e0a2      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA29: {   // OD_IMU_AccelY
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelY>(OD_IMU_AccelY_get());
 80060dc:	f001 f846 	bl	800716c <_Z17OD_IMU_AccelY_getv>
 80060e0:	eef0 7a40 	vmov.f32	s15, s0
 80060e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060e8:	eeb0 0a67 	vmov.f32	s0, s15
 80060ec:	4618      	mov	r0, r3
 80060ee:	f001 fef0 	bl	8007ed2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>
            break;
 80060f2:	e093      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA30: {   // OD_IMU_AccelZ
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelZ>(OD_IMU_AccelZ_get());
 80060fa:	f001 f871 	bl	80071e0 <_Z17OD_IMU_AccelZ_getv>
 80060fe:	eef0 7a40 	vmov.f32	s15, s0
 8006102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006106:	eeb0 0a67 	vmov.f32	s0, s15
 800610a:	4618      	mov	r0, r3
 800610c:	f001 fef8 	bl	8007f00 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>
            break;
 8006110:	e084      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA31: {   // OD_IMU_GyroX
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006112:	2303      	movs	r3, #3
 8006114:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroX>(OD_IMU_GyroX_get());
 8006118:	f001 f89c 	bl	8007254 <_Z16OD_IMU_GyroX_getv>
 800611c:	eef0 7a40 	vmov.f32	s15, s0
 8006120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006124:	eeb0 0a67 	vmov.f32	s0, s15
 8006128:	4618      	mov	r0, r3
 800612a:	f001 ff00 	bl	8007f2e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>
            break;
 800612e:	e075      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA32: {   // OD_IMU_GyroY
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006130:	2303      	movs	r3, #3
 8006132:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroY>(OD_IMU_GyroY_get());
 8006136:	f001 f8c7 	bl	80072c8 <_Z16OD_IMU_GyroY_getv>
 800613a:	eef0 7a40 	vmov.f32	s15, s0
 800613e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006142:	eeb0 0a67 	vmov.f32	s0, s15
 8006146:	4618      	mov	r0, r3
 8006148:	f001 ff08 	bl	8007f5c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>
            break;
 800614c:	e066      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA33: {   // OD_IMU_GyroZ
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800614e:	2303      	movs	r3, #3
 8006150:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroZ>(OD_IMU_GyroZ_get());
 8006154:	f001 f8f2 	bl	800733c <_Z16OD_IMU_GyroZ_getv>
 8006158:	eef0 7a40 	vmov.f32	s15, s0
 800615c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006160:	eeb0 0a67 	vmov.f32	s0, s15
 8006164:	4618      	mov	r0, r3
 8006166:	f001 ff10 	bl	8007f8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>
            break;
 800616a:	e057      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xB00: {   // OD_CoolingPressure
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800616c:	2303      	movs	r3, #3
 800616e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CoolingPressure>(OD_CoolingPressure_get());
 8006172:	f001 f91d 	bl	80073b0 <_Z22OD_CoolingPressure_getv>
 8006176:	eef0 7a40 	vmov.f32	s15, s0
 800617a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800617e:	eeb0 0a67 	vmov.f32	s0, s15
 8006182:	4618      	mov	r0, r3
 8006184:	f001 ff18 	bl	8007fb8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>
            break;
 8006188:	e048      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xC00: {   // OD_FiducialRightCounter
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800618a:	2303      	movs	r3, #3
 800618c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_FiducialRightCounter>(OD_FiducialRightCounter_get());
 8006190:	f001 f948 	bl	8007424 <_Z27OD_FiducialRightCounter_getv>
 8006194:	4603      	mov	r3, r0
 8006196:	461a      	mov	r2, r3
 8006198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f001 ff21 	bl	8007fe6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>
            break;
 80061a4:	e03a      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xC01: {   // OD_FiducialLeftCounter
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80061a6:	2303      	movs	r3, #3
 80061a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_FiducialLeftCounter>(OD_FiducialLeftCounter_get());
 80061ac:	f001 f972 	bl	8007494 <_Z26OD_FiducialLeftCounter_getv>
 80061b0:	4603      	mov	r3, r0
 80061b2:	461a      	mov	r2, r3
 80061b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061b8:	4611      	mov	r1, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 ff28 	bl	8008010 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>
            break;
 80061c0:	e02c      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xD00: {   // OD_Position
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_Position>(OD_Position_get());
 80061c8:	f001 f99c 	bl	8007504 <_Z15OD_Position_getv>
 80061cc:	eef0 7a40 	vmov.f32	s15, s0
 80061d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061d4:	eeb0 0a67 	vmov.f32	s0, s15
 80061d8:	4618      	mov	r0, r3
 80061da:	f001 ff2e 	bl	800803a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>
            break;
 80061de:	e01d      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
 80061e0:	3c23d70a 	.word	0x3c23d70a
 80061e4:	42c80000 	.word	0x42c80000
 80061e8:	43960000 	.word	0x43960000
        }
        case 0xD01: {   // OD_Velocity
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_Velocity>(OD_Velocity_get());
 80061f2:	f001 f9c1 	bl	8007578 <_Z15OD_Velocity_getv>
 80061f6:	eef0 7a40 	vmov.f32	s15, s0
 80061fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006202:	4618      	mov	r0, r3
 8006204:	f001 ff30 	bl	8008068 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>
            break;
 8006208:	e008      	b.n	800621c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(sdoId);
 800620a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800620e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006212:	4611      	mov	r1, r2
 8006214:	4618      	mov	r0, r3
 8006216:	f001 fdd6 	bl	8007dc6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 800621a:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SensorF_SDO_RespCode>(respCode);
 800621c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8006220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006224:	4611      	mov	r1, r2
 8006226:	4618      	mov	r0, r3
 8006228:	f001 ff35 	bl	8008096 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 800622c:	f107 0308 	add.w	r3, r7, #8
 8006230:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006234:	2200      	movs	r2, #0
 8006236:	4618      	mov	r0, r3
 8006238:	f7fa ffdc 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 800623c:	4b05      	ldr	r3, [pc, #20]	; (8006254 <_Z22handleSDORequestUploadRK9RxMessage+0xcb8>)
 800623e:	6818      	ldr	r0, [r3, #0]
 8006240:	f107 0108 	add.w	r1, r7, #8
 8006244:	2300      	movs	r3, #0
 8006246:	2200      	movs	r2, #0
 8006248:	f00f f9be 	bl	80155c8 <osMessageQueuePut>
}
 800624c:	bf00      	nop
 800624e:	3780      	adds	r7, #128	; 0x80
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	200007b4 	.word	0x200007b4

08006258 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 800625e:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <_Z13OD_NodeID_getv+0x30>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f04f 31ff 	mov.w	r1, #4294967295
 8006266:	4618      	mov	r0, r3
 8006268:	f00e ff73 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_NodeID;
 800626c:	4b07      	ldr	r3, [pc, #28]	; (800628c <_Z13OD_NodeID_getv+0x34>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8006272:	4b05      	ldr	r3, [pc, #20]	; (8006288 <_Z13OD_NodeID_getv+0x30>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f00e ffb6 	bl	80151e8 <osMutexRelease>
    return value;
 800627c:	79fb      	ldrb	r3, [r7, #7]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3708      	adds	r7, #8
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	20000860 	.word	0x20000860
 800628c:	200007bd 	.word	0x200007bd

08006290 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 8006296:	4b0a      	ldr	r3, [pc, #40]	; (80062c0 <_Z17OD_NodeStatus_getv+0x30>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f04f 31ff 	mov.w	r1, #4294967295
 800629e:	4618      	mov	r0, r3
 80062a0:	f00e ff57 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 80062a4:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <_Z17OD_NodeStatus_getv+0x34>)
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 80062aa:	4b05      	ldr	r3, [pc, #20]	; (80062c0 <_Z17OD_NodeStatus_getv+0x30>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4618      	mov	r0, r3
 80062b0:	f00e ff9a 	bl	80151e8 <osMutexRelease>
    return value;
 80062b4:	79fb      	ldrb	r3, [r7, #7]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000864 	.word	0x20000864
 80062c4:	200007be 	.word	0x200007be

080062c8 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 80062ce:	4b0a      	ldr	r3, [pc, #40]	; (80062f8 <_Z22OD_ProtocolVersion_getv+0x30>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f04f 31ff 	mov.w	r1, #4294967295
 80062d6:	4618      	mov	r0, r3
 80062d8:	f00e ff3b 	bl	8015152 <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 80062dc:	4b07      	ldr	r3, [pc, #28]	; (80062fc <_Z22OD_ProtocolVersion_getv+0x34>)
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 80062e2:	4b05      	ldr	r3, [pc, #20]	; (80062f8 <_Z22OD_ProtocolVersion_getv+0x30>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f00e ff7e 	bl	80151e8 <osMutexRelease>
    return value;
 80062ec:	88fb      	ldrh	r3, [r7, #6]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3708      	adds	r7, #8
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	20000868 	.word	0x20000868
 80062fc:	20000000 	.word	0x20000000

08006300 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8006306:	4b0a      	ldr	r3, [pc, #40]	; (8006330 <_Z19OD_StackVersion_getv+0x30>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f04f 31ff 	mov.w	r1, #4294967295
 800630e:	4618      	mov	r0, r3
 8006310:	f00e ff1f 	bl	8015152 <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8006314:	4b07      	ldr	r3, [pc, #28]	; (8006334 <_Z19OD_StackVersion_getv+0x34>)
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 800631a:	4b05      	ldr	r3, [pc, #20]	; (8006330 <_Z19OD_StackVersion_getv+0x30>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4618      	mov	r0, r3
 8006320:	f00e ff62 	bl	80151e8 <osMutexRelease>
    return value;
 8006324:	88fb      	ldrh	r3, [r7, #6]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
 800632e:	bf00      	nop
 8006330:	2000086c 	.word	0x2000086c
 8006334:	200007c0 	.word	0x200007c0

08006338 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 800633e:	4b0a      	ldr	r3, [pc, #40]	; (8006368 <_Z17OD_DbcVersion_getv+0x30>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f04f 31ff 	mov.w	r1, #4294967295
 8006346:	4618      	mov	r0, r3
 8006348:	f00e ff03 	bl	8015152 <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 800634c:	4b07      	ldr	r3, [pc, #28]	; (800636c <_Z17OD_DbcVersion_getv+0x34>)
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 8006352:	4b05      	ldr	r3, [pc, #20]	; (8006368 <_Z17OD_DbcVersion_getv+0x30>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f00e ff46 	bl	80151e8 <osMutexRelease>
    return value;
 800635c:	88fb      	ldrh	r3, [r7, #6]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	20000870 	.word	0x20000870
 800636c:	200007c2 	.word	0x200007c2

08006370 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8006370:	b580      	push	{r7, lr}
 8006372:	b082      	sub	sp, #8
 8006374:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8006376:	4b0a      	ldr	r3, [pc, #40]	; (80063a0 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f04f 31ff 	mov.w	r1, #4294967295
 800637e:	4618      	mov	r0, r3
 8006380:	f00e fee7 	bl	8015152 <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8006384:	4b07      	ldr	r3, [pc, #28]	; (80063a4 <_Z24OD_HeartbeatInterval_getv+0x34>)
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <_Z24OD_HeartbeatInterval_getv+0x30>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f00e ff2a 	bl	80151e8 <osMutexRelease>
    return value;
 8006394:	88fb      	ldrh	r3, [r7, #6]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	20000874 	.word	0x20000874
 80063a4:	20000002 	.word	0x20000002

080063a8 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	4603      	mov	r3, r0
 80063b0:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 80063b2:	4b09      	ldr	r3, [pc, #36]	; (80063d8 <_Z24OD_HeartbeatInterval_sett+0x30>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f04f 31ff 	mov.w	r1, #4294967295
 80063ba:	4618      	mov	r0, r3
 80063bc:	f00e fec9 	bl	8015152 <osMutexAcquire>
    OD_HeartbeatInterval = value;
 80063c0:	4a06      	ldr	r2, [pc, #24]	; (80063dc <_Z24OD_HeartbeatInterval_sett+0x34>)
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 80063c6:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <_Z24OD_HeartbeatInterval_sett+0x30>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f00e ff0c 	bl	80151e8 <osMutexRelease>
}
 80063d0:	bf00      	nop
 80063d2:	3708      	adds	r7, #8
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000874 	.word	0x20000874
 80063dc:	20000002 	.word	0x20000002

080063e0 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 80063e6:	4b0a      	ldr	r3, [pc, #40]	; (8006410 <_Z21OD_SendOdOnBootup_getv+0x30>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f04f 31ff 	mov.w	r1, #4294967295
 80063ee:	4618      	mov	r0, r3
 80063f0:	f00e feaf 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 80063f4:	4b07      	ldr	r3, [pc, #28]	; (8006414 <_Z21OD_SendOdOnBootup_getv+0x34>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 80063fa:	4b05      	ldr	r3, [pc, #20]	; (8006410 <_Z21OD_SendOdOnBootup_getv+0x30>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4618      	mov	r0, r3
 8006400:	f00e fef2 	bl	80151e8 <osMutexRelease>
    return value;
 8006404:	79fb      	ldrb	r3, [r7, #7]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000878 	.word	0x20000878
 8006414:	200007c4 	.word	0x200007c4

08006418 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	4603      	mov	r3, r0
 8006420:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8006422:	4b09      	ldr	r3, [pc, #36]	; (8006448 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f04f 31ff 	mov.w	r1, #4294967295
 800642a:	4618      	mov	r0, r3
 800642c:	f00e fe91 	bl	8015152 <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8006430:	4a06      	ldr	r2, [pc, #24]	; (800644c <_Z21OD_SendOdOnBootup_seth+0x34>)
 8006432:	79fb      	ldrb	r3, [r7, #7]
 8006434:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8006436:	4b04      	ldr	r3, [pc, #16]	; (8006448 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f00e fed4 	bl	80151e8 <osMutexRelease>
}
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	20000878 	.word	0x20000878
 800644c:	200007c4 	.word	0x200007c4

08006450 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8006456:	4b0a      	ldr	r3, [pc, #40]	; (8006480 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f04f 31ff 	mov.w	r1, #4294967295
 800645e:	4618      	mov	r0, r3
 8006460:	f00e fe77 	bl	8015152 <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8006464:	4b07      	ldr	r3, [pc, #28]	; (8006484 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4618      	mov	r0, r3
 8006470:	f00e feba 	bl	80151e8 <osMutexRelease>
    return value;
 8006474:	88fb      	ldrh	r3, [r7, #6]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	2000087c 	.word	0x2000087c
 8006484:	20000004 	.word	0x20000004

08006488 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f04f 31ff 	mov.w	r1, #4294967295
 800649a:	4618      	mov	r0, r3
 800649c:	f00e fe59 	bl	8015152 <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 80064a0:	4a06      	ldr	r2, [pc, #24]	; (80064bc <_Z26OD_OdEntrySendInterval_sett+0x34>)
 80064a2:	88fb      	ldrh	r3, [r7, #6]
 80064a4:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 80064a6:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4618      	mov	r0, r3
 80064ac:	f00e fe9c 	bl	80151e8 <osMutexRelease>
}
 80064b0:	bf00      	nop
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	2000087c 	.word	0x2000087c
 80064bc:	20000004 	.word	0x20000004

080064c0 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <_Z15OD_CpuUsage_getv+0x34>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f04f 31ff 	mov.w	r1, #4294967295
 80064ce:	4618      	mov	r0, r3
 80064d0:	f00e fe3f 	bl	8015152 <osMutexAcquire>
    float value = OD_CpuUsage;
 80064d4:	4b08      	ldr	r3, [pc, #32]	; (80064f8 <_Z15OD_CpuUsage_getv+0x38>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 80064da:	4b06      	ldr	r3, [pc, #24]	; (80064f4 <_Z15OD_CpuUsage_getv+0x34>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4618      	mov	r0, r3
 80064e0:	f00e fe82 	bl	80151e8 <osMutexRelease>
    return value;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	ee07 3a90 	vmov	s15, r3
}
 80064ea:	eeb0 0a67 	vmov.f32	s0, s15
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	20000880 	.word	0x20000880
 80064f8:	200007c8 	.word	0x200007c8

080064fc <_Z15OD_CpuUsage_setf>:
#endif
#ifndef OD_CpuUsage_SET_OVERWRITE
void WEAK_SYMBOL OD_CpuUsage_set(const float value) {
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b082      	sub	sp, #8
 8006500:	af00      	add	r7, sp, #0
 8006502:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <_Z15OD_CpuUsage_setf+0x30>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f04f 31ff 	mov.w	r1, #4294967295
 800650e:	4618      	mov	r0, r3
 8006510:	f00e fe1f 	bl	8015152 <osMutexAcquire>
    OD_CpuUsage = value;
 8006514:	4a06      	ldr	r2, [pc, #24]	; (8006530 <_Z15OD_CpuUsage_setf+0x34>)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CpuUsage);
 800651a:	4b04      	ldr	r3, [pc, #16]	; (800652c <_Z15OD_CpuUsage_setf+0x30>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4618      	mov	r0, r3
 8006520:	f00e fe62 	bl	80151e8 <osMutexRelease>
}
 8006524:	bf00      	nop
 8006526:	3708      	adds	r7, #8
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20000880 	.word	0x20000880
 8006530:	200007c8 	.word	0x200007c8

08006534 <_Z14OD_MemFree_getv>:
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 800653a:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <_Z14OD_MemFree_getv+0x30>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f04f 31ff 	mov.w	r1, #4294967295
 8006542:	4618      	mov	r0, r3
 8006544:	f00e fe05 	bl	8015152 <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <_Z14OD_MemFree_getv+0x34>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 800654e:	4b05      	ldr	r3, [pc, #20]	; (8006564 <_Z14OD_MemFree_getv+0x30>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f00e fe48 	bl	80151e8 <osMutexRelease>
    return value;
 8006558:	687b      	ldr	r3, [r7, #4]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000884 	.word	0x20000884
 8006568:	200007cc 	.word	0x200007cc

0800656c <_Z14OD_MemFree_setm>:
#endif
#ifndef OD_MemFree_SET_OVERWRITE
void WEAK_SYMBOL OD_MemFree_set(const uint32_t value) {
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8006574:	4b09      	ldr	r3, [pc, #36]	; (800659c <_Z14OD_MemFree_setm+0x30>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f04f 31ff 	mov.w	r1, #4294967295
 800657c:	4618      	mov	r0, r3
 800657e:	f00e fde8 	bl	8015152 <osMutexAcquire>
    OD_MemFree = value;
 8006582:	4a07      	ldr	r2, [pc, #28]	; (80065a0 <_Z14OD_MemFree_setm+0x34>)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_MemFree);
 8006588:	4b04      	ldr	r3, [pc, #16]	; (800659c <_Z14OD_MemFree_setm+0x30>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4618      	mov	r0, r3
 800658e:	f00e fe2b 	bl	80151e8 <osMutexRelease>
}
 8006592:	bf00      	nop
 8006594:	3708      	adds	r7, #8
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20000884 	.word	0x20000884
 80065a0:	200007cc 	.word	0x200007cc

080065a4 <_Z16OD_BoardTemp_getv>:
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 80065aa:	4b0b      	ldr	r3, [pc, #44]	; (80065d8 <_Z16OD_BoardTemp_getv+0x34>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f04f 31ff 	mov.w	r1, #4294967295
 80065b2:	4618      	mov	r0, r3
 80065b4:	f00e fdcd 	bl	8015152 <osMutexAcquire>
    float value = OD_BoardTemp;
 80065b8:	4b08      	ldr	r3, [pc, #32]	; (80065dc <_Z16OD_BoardTemp_getv+0x38>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <_Z16OD_BoardTemp_getv+0x34>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f00e fe10 	bl	80151e8 <osMutexRelease>
    return value;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	ee07 3a90 	vmov	s15, r3
}
 80065ce:	eeb0 0a67 	vmov.f32	s0, s15
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20000888 	.word	0x20000888
 80065dc:	200007d0 	.word	0x200007d0

080065e0 <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 80065ea:	4b09      	ldr	r3, [pc, #36]	; (8006610 <_Z16OD_BoardTemp_setf+0x30>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f04f 31ff 	mov.w	r1, #4294967295
 80065f2:	4618      	mov	r0, r3
 80065f4:	f00e fdad 	bl	8015152 <osMutexAcquire>
    OD_BoardTemp = value;
 80065f8:	4a06      	ldr	r2, [pc, #24]	; (8006614 <_Z16OD_BoardTemp_setf+0x34>)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 80065fe:	4b04      	ldr	r3, [pc, #16]	; (8006610 <_Z16OD_BoardTemp_setf+0x30>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f00e fdf0 	bl	80151e8 <osMutexRelease>
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000888 	.word	0x20000888
 8006614:	200007d0 	.word	0x200007d0

08006618 <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 800661e:	4b0b      	ldr	r3, [pc, #44]	; (800664c <_Z19OD_InputVoltage_getv+0x34>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f04f 31ff 	mov.w	r1, #4294967295
 8006626:	4618      	mov	r0, r3
 8006628:	f00e fd93 	bl	8015152 <osMutexAcquire>
    float value = OD_InputVoltage;
 800662c:	4b08      	ldr	r3, [pc, #32]	; (8006650 <_Z19OD_InputVoltage_getv+0x38>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8006632:	4b06      	ldr	r3, [pc, #24]	; (800664c <_Z19OD_InputVoltage_getv+0x34>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4618      	mov	r0, r3
 8006638:	f00e fdd6 	bl	80151e8 <osMutexRelease>
    return value;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	ee07 3a90 	vmov	s15, r3
}
 8006642:	eeb0 0a67 	vmov.f32	s0, s15
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	2000088c 	.word	0x2000088c
 8006650:	200007d4 	.word	0x200007d4

08006654 <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b082      	sub	sp, #8
 8006658:	af00      	add	r7, sp, #0
 800665a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 800665e:	4b09      	ldr	r3, [pc, #36]	; (8006684 <_Z19OD_InputVoltage_setf+0x30>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f04f 31ff 	mov.w	r1, #4294967295
 8006666:	4618      	mov	r0, r3
 8006668:	f00e fd73 	bl	8015152 <osMutexAcquire>
    OD_InputVoltage = value;
 800666c:	4a06      	ldr	r2, [pc, #24]	; (8006688 <_Z19OD_InputVoltage_setf+0x34>)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 8006672:	4b04      	ldr	r3, [pc, #16]	; (8006684 <_Z19OD_InputVoltage_setf+0x30>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4618      	mov	r0, r3
 8006678:	f00e fdb6 	bl	80151e8 <osMutexRelease>
}
 800667c:	bf00      	nop
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	2000088c 	.word	0x2000088c
 8006688:	200007d4 	.word	0x200007d4

0800668c <_Z14OD_runtime_getv>:
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8006692:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <_Z14OD_runtime_getv+0x30>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f04f 31ff 	mov.w	r1, #4294967295
 800669a:	4618      	mov	r0, r3
 800669c:	f00e fd59 	bl	8015152 <osMutexAcquire>
    uint32_t value = OD_runtime;
 80066a0:	4b07      	ldr	r3, [pc, #28]	; (80066c0 <_Z14OD_runtime_getv+0x34>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 80066a6:	4b05      	ldr	r3, [pc, #20]	; (80066bc <_Z14OD_runtime_getv+0x30>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f00e fd9c 	bl	80151e8 <osMutexRelease>
    return value;
 80066b0:	687b      	ldr	r3, [r7, #4]
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000890 	.word	0x20000890
 80066c0:	200007d8 	.word	0x200007d8

080066c4 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 80066ca:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <_Z12OD_SdcIn_getv+0x30>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f04f 31ff 	mov.w	r1, #4294967295
 80066d2:	4618      	mov	r0, r3
 80066d4:	f00e fd3d 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 80066d8:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <_Z12OD_SdcIn_getv+0x34>)
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 80066de:	4b05      	ldr	r3, [pc, #20]	; (80066f4 <_Z12OD_SdcIn_getv+0x30>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f00e fd80 	bl	80151e8 <osMutexRelease>
    return value;
 80066e8:	79fb      	ldrb	r3, [r7, #7]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20000894 	.word	0x20000894
 80066f8:	200007dc 	.word	0x200007dc

080066fc <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8006702:	4b0a      	ldr	r3, [pc, #40]	; (800672c <_Z13OD_SdcOut_getv+0x30>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f04f 31ff 	mov.w	r1, #4294967295
 800670a:	4618      	mov	r0, r3
 800670c:	f00e fd21 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <_Z13OD_SdcOut_getv+0x34>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 8006716:	4b05      	ldr	r3, [pc, #20]	; (800672c <_Z13OD_SdcOut_getv+0x30>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f00e fd64 	bl	80151e8 <osMutexRelease>
    return value;
 8006720:	79fb      	ldrb	r3, [r7, #7]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20000898 	.word	0x20000898
 8006730:	200007dd 	.word	0x200007dd

08006734 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 800673a:	4b0c      	ldr	r3, [pc, #48]	; (800676c <_Z15OD_ChipUID1_getv+0x38>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f04f 31ff 	mov.w	r1, #4294967295
 8006742:	4618      	mov	r0, r3
 8006744:	f00e fd05 	bl	8015152 <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8006748:	4b09      	ldr	r3, [pc, #36]	; (8006770 <_Z15OD_ChipUID1_getv+0x3c>)
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8006752:	4b06      	ldr	r3, [pc, #24]	; (800676c <_Z15OD_ChipUID1_getv+0x38>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f00e fd46 	bl	80151e8 <osMutexRelease>
    return value;
 800675c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006760:	4610      	mov	r0, r2
 8006762:	4619      	mov	r1, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	2000089c 	.word	0x2000089c
 8006770:	200007e0 	.word	0x200007e0

08006774 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 800677a:	4b0c      	ldr	r3, [pc, #48]	; (80067ac <_Z15OD_ChipUID2_getv+0x38>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f04f 31ff 	mov.w	r1, #4294967295
 8006782:	4618      	mov	r0, r3
 8006784:	f00e fce5 	bl	8015152 <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 8006788:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <_Z15OD_ChipUID2_getv+0x3c>)
 800678a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678e:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8006792:	4b06      	ldr	r3, [pc, #24]	; (80067ac <_Z15OD_ChipUID2_getv+0x38>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4618      	mov	r0, r3
 8006798:	f00e fd26 	bl	80151e8 <osMutexRelease>
    return value;
 800679c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80067a0:	4610      	mov	r0, r2
 80067a2:	4619      	mov	r1, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	200008a0 	.word	0x200008a0
 80067b0:	200007e8 	.word	0x200007e8

080067b4 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 80067ba:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <_Z16OD_BuildDate_getv+0x30>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f04f 31ff 	mov.w	r1, #4294967295
 80067c2:	4618      	mov	r0, r3
 80067c4:	f00e fcc5 	bl	8015152 <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 80067c8:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <_Z16OD_BuildDate_getv+0x34>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 80067ce:	4b05      	ldr	r3, [pc, #20]	; (80067e4 <_Z16OD_BuildDate_getv+0x30>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4618      	mov	r0, r3
 80067d4:	f00e fd08 	bl	80151e8 <osMutexRelease>
    return value;
 80067d8:	687b      	ldr	r3, [r7, #4]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	200008a4 	.word	0x200008a4
 80067e8:	200007f0 	.word	0x200007f0

080067ec <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 80067f2:	4b0a      	ldr	r3, [pc, #40]	; (800681c <_Z16OD_BuildTime_getv+0x30>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f04f 31ff 	mov.w	r1, #4294967295
 80067fa:	4618      	mov	r0, r3
 80067fc:	f00e fca9 	bl	8015152 <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <_Z16OD_BuildTime_getv+0x34>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 8006806:	4b05      	ldr	r3, [pc, #20]	; (800681c <_Z16OD_BuildTime_getv+0x30>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4618      	mov	r0, r3
 800680c:	f00e fcec 	bl	80151e8 <osMutexRelease>
    return value;
 8006810:	687b      	ldr	r3, [r7, #4]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3708      	adds	r7, #8
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	200008a8 	.word	0x200008a8
 8006820:	200007f4 	.word	0x200007f4

08006824 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 8006824:	b580      	push	{r7, lr}
 8006826:	b082      	sub	sp, #8
 8006828:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 800682a:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f04f 31ff 	mov.w	r1, #4294967295
 8006832:	4618      	mov	r0, r3
 8006834:	f00e fc8d 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 8006838:	4b07      	ldr	r3, [pc, #28]	; (8006858 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4618      	mov	r0, r3
 8006844:	f00e fcd0 	bl	80151e8 <osMutexRelease>
    return value;
 8006848:	79fb      	ldrb	r3, [r7, #7]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	200008ac 	.word	0x200008ac
 8006858:	200007f8 	.word	0x200007f8

0800685c <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8006862:	4b0a      	ldr	r3, [pc, #40]	; (800688c <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f04f 31ff 	mov.w	r1, #4294967295
 800686a:	4618      	mov	r0, r3
 800686c:	f00e fc71 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8006870:	4b07      	ldr	r3, [pc, #28]	; (8006890 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 8006876:	4b05      	ldr	r3, [pc, #20]	; (800688c <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4618      	mov	r0, r3
 800687c:	f00e fcb4 	bl	80151e8 <osMutexRelease>
    return value;
 8006880:	79fb      	ldrb	r3, [r7, #7]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3708      	adds	r7, #8
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	200008b0 	.word	0x200008b0
 8006890:	200007f9 	.word	0x200007f9

08006894 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 800689a:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f04f 31ff 	mov.w	r1, #4294967295
 80068a2:	4618      	mov	r0, r3
 80068a4:	f00e fc55 	bl	8015152 <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 80068a8:	4b07      	ldr	r3, [pc, #28]	; (80068c8 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 80068ae:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f00e fc98 	bl	80151e8 <osMutexRelease>
    return value;
 80068b8:	687b      	ldr	r3, [r7, #4]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	200008b4 	.word	0x200008b4
 80068c8:	200007fc 	.word	0x200007fc

080068cc <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 80068d2:	4b0a      	ldr	r3, [pc, #40]	; (80068fc <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f04f 31ff 	mov.w	r1, #4294967295
 80068da:	4618      	mov	r0, r3
 80068dc:	f00e fc39 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80068e6:	4b05      	ldr	r3, [pc, #20]	; (80068fc <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4618      	mov	r0, r3
 80068ec:	f00e fc7c 	bl	80151e8 <osMutexRelease>
    return value;
 80068f0:	79fb      	ldrb	r3, [r7, #7]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3708      	adds	r7, #8
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	200008b8 	.word	0x200008b8
 8006900:	20000006 	.word	0x20000006

08006904 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	4603      	mov	r3, r0
 800690c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 800690e:	4b09      	ldr	r3, [pc, #36]	; (8006934 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f04f 31ff 	mov.w	r1, #4294967295
 8006916:	4618      	mov	r0, r3
 8006918:	f00e fc1b 	bl	8015152 <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 800691c:	4a06      	ldr	r2, [pc, #24]	; (8006938 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 800691e:	79fb      	ldrb	r3, [r7, #7]
 8006920:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8006922:	4b04      	ldr	r3, [pc, #16]	; (8006934 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4618      	mov	r0, r3
 8006928:	f00e fc5e 	bl	80151e8 <osMutexRelease>
}
 800692c:	bf00      	nop
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	200008b8 	.word	0x200008b8
 8006938:	20000006 	.word	0x20000006

0800693c <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8006942:	4b0a      	ldr	r3, [pc, #40]	; (800696c <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f04f 31ff 	mov.w	r1, #4294967295
 800694a:	4618      	mov	r0, r3
 800694c:	f00e fc01 	bl	8015152 <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8006950:	4b07      	ldr	r3, [pc, #28]	; (8006970 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8006956:	4b05      	ldr	r3, [pc, #20]	; (800696c <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f00e fc44 	bl	80151e8 <osMutexRelease>
    return value;
 8006960:	88fb      	ldrh	r3, [r7, #6]
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	200008bc 	.word	0x200008bc
 8006970:	20000008 	.word	0x20000008

08006974 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 800697e:	4b09      	ldr	r3, [pc, #36]	; (80069a4 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f04f 31ff 	mov.w	r1, #4294967295
 8006986:	4618      	mov	r0, r3
 8006988:	f00e fbe3 	bl	8015152 <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 800698c:	4a06      	ldr	r2, [pc, #24]	; (80069a8 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 800698e:	88fb      	ldrh	r3, [r7, #6]
 8006990:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8006992:	4b04      	ldr	r3, [pc, #16]	; (80069a4 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	f00e fc26 	bl	80151e8 <osMutexRelease>
}
 800699c:	bf00      	nop
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	200008bc 	.word	0x200008bc
 80069a8:	20000008 	.word	0x20000008

080069ac <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 80069b2:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <_Z18OD_CAN1_Status_getv+0x30>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f04f 31ff 	mov.w	r1, #4294967295
 80069ba:	4618      	mov	r0, r3
 80069bc:	f00e fbc9 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 80069c0:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <_Z18OD_CAN1_Status_getv+0x34>)
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 80069c6:	4b05      	ldr	r3, [pc, #20]	; (80069dc <_Z18OD_CAN1_Status_getv+0x30>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f00e fc0c 	bl	80151e8 <osMutexRelease>
    return value;
 80069d0:	79fb      	ldrb	r3, [r7, #7]
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3708      	adds	r7, #8
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	200008c0 	.word	0x200008c0
 80069e0:	20000800 	.word	0x20000800

080069e4 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 80069ea:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f04f 31ff 	mov.w	r1, #4294967295
 80069f2:	4618      	mov	r0, r3
 80069f4:	f00e fbad 	bl	8015152 <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 80069f8:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f00e fbf0 	bl	80151e8 <osMutexRelease>
    return value;
 8006a08:	687b      	ldr	r3, [r7, #4]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	200008c4 	.word	0x200008c4
 8006a18:	20000804 	.word	0x20000804

08006a1c <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 8006a22:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f04f 31ff 	mov.w	r1, #4294967295
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f00e fb91 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 8006a36:	4b05      	ldr	r3, [pc, #20]	; (8006a4c <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f00e fbd4 	bl	80151e8 <osMutexRelease>
    return value;
 8006a40:	79fb      	ldrb	r3, [r7, #7]
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	200008c8 	.word	0x200008c8
 8006a50:	20000808 	.word	0x20000808

08006a54 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f04f 31ff 	mov.w	r1, #4294967295
 8006a62:	4618      	mov	r0, r3
 8006a64:	f00e fb75 	bl	8015152 <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 8006a68:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4618      	mov	r0, r3
 8006a74:	f00e fbb8 	bl	80151e8 <osMutexRelease>
    return value;
 8006a78:	687b      	ldr	r3, [r7, #4]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	200008cc 	.word	0x200008cc
 8006a88:	2000080c 	.word	0x2000080c

08006a8c <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8006a92:	4b0a      	ldr	r3, [pc, #40]	; (8006abc <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f04f 31ff 	mov.w	r1, #4294967295
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f00e fb59 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8006aa0:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 8006aa6:	4b05      	ldr	r3, [pc, #20]	; (8006abc <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f00e fb9c 	bl	80151e8 <osMutexRelease>
    return value;
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3708      	adds	r7, #8
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
 8006aba:	bf00      	nop
 8006abc:	200008d0 	.word	0x200008d0
 8006ac0:	20000810 	.word	0x20000810

08006ac4 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f04f 31ff 	mov.w	r1, #4294967295
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f00e fb3d 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 8006ade:	4b05      	ldr	r3, [pc, #20]	; (8006af4 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f00e fb80 	bl	80151e8 <osMutexRelease>
    return value;
 8006ae8:	79fb      	ldrb	r3, [r7, #7]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200008d4 	.word	0x200008d4
 8006af8:	20000811 	.word	0x20000811

08006afc <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 8006b02:	4b0a      	ldr	r3, [pc, #40]	; (8006b2c <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f04f 31ff 	mov.w	r1, #4294967295
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f00e fb21 	bl	8015152 <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 8006b16:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f00e fb64 	bl	80151e8 <osMutexRelease>
    return value;
 8006b20:	687b      	ldr	r3, [r7, #4]
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200008d8 	.word	0x200008d8
 8006b30:	20000814 	.word	0x20000814

08006b34 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8006b3a:	4b0a      	ldr	r3, [pc, #40]	; (8006b64 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f04f 31ff 	mov.w	r1, #4294967295
 8006b42:	4618      	mov	r0, r3
 8006b44:	f00e fb05 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 8006b48:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8006b4e:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f00e fb48 	bl	80151e8 <osMutexRelease>
    return value;
 8006b58:	79fb      	ldrb	r3, [r7, #7]
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	200008dc 	.word	0x200008dc
 8006b68:	2000000a 	.word	0x2000000a

08006b6c <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8006b76:	4b09      	ldr	r3, [pc, #36]	; (8006b9c <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f00e fae7 	bl	8015152 <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 8006b84:	4a06      	ldr	r2, [pc, #24]	; (8006ba0 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8006b8a:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f00e fb2a 	bl	80151e8 <osMutexRelease>
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	200008dc 	.word	0x200008dc
 8006ba0:	2000000a 	.word	0x2000000a

08006ba4 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8006baa:	4b0a      	ldr	r3, [pc, #40]	; (8006bd4 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f04f 31ff 	mov.w	r1, #4294967295
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f00e facd 	bl	8015152 <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8006bb8:	4b07      	ldr	r3, [pc, #28]	; (8006bd8 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 8006bba:	881b      	ldrh	r3, [r3, #0]
 8006bbc:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8006bbe:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f00e fb10 	bl	80151e8 <osMutexRelease>
    return value;
 8006bc8:	88fb      	ldrh	r3, [r7, #6]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	200008e0 	.word	0x200008e0
 8006bd8:	2000000c 	.word	0x2000000c

08006bdc <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8006be6:	4b09      	ldr	r3, [pc, #36]	; (8006c0c <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f04f 31ff 	mov.w	r1, #4294967295
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f00e faaf 	bl	8015152 <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 8006bf4:	4a06      	ldr	r2, [pc, #24]	; (8006c10 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 8006bf6:	88fb      	ldrh	r3, [r7, #6]
 8006bf8:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8006bfa:	4b04      	ldr	r3, [pc, #16]	; (8006c0c <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f00e faf2 	bl	80151e8 <osMutexRelease>
}
 8006c04:	bf00      	nop
 8006c06:	3708      	adds	r7, #8
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	200008e0 	.word	0x200008e0
 8006c10:	2000000c 	.word	0x2000000c

08006c14 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 8006c1a:	4b0a      	ldr	r3, [pc, #40]	; (8006c44 <_Z18OD_CAN2_Status_getv+0x30>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8006c22:	4618      	mov	r0, r3
 8006c24:	f00e fa95 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8006c28:	4b07      	ldr	r3, [pc, #28]	; (8006c48 <_Z18OD_CAN2_Status_getv+0x34>)
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8006c2e:	4b05      	ldr	r3, [pc, #20]	; (8006c44 <_Z18OD_CAN2_Status_getv+0x30>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4618      	mov	r0, r3
 8006c34:	f00e fad8 	bl	80151e8 <osMutexRelease>
    return value;
 8006c38:	79fb      	ldrb	r3, [r7, #7]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	200008e4 	.word	0x200008e4
 8006c48:	20000818 	.word	0x20000818

08006c4c <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 8006c52:	4b0a      	ldr	r3, [pc, #40]	; (8006c7c <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f04f 31ff 	mov.w	r1, #4294967295
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f00e fa79 	bl	8015152 <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8006c60:	4b07      	ldr	r3, [pc, #28]	; (8006c80 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 8006c66:	4b05      	ldr	r3, [pc, #20]	; (8006c7c <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f00e fabc 	bl	80151e8 <osMutexRelease>
    return value;
 8006c70:	687b      	ldr	r3, [r7, #4]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3708      	adds	r7, #8
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	200008e8 	.word	0x200008e8
 8006c80:	2000081c 	.word	0x2000081c

08006c84 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 8006c8a:	4b0a      	ldr	r3, [pc, #40]	; (8006cb4 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f04f 31ff 	mov.w	r1, #4294967295
 8006c92:	4618      	mov	r0, r3
 8006c94:	f00e fa5d 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 8006c98:	4b07      	ldr	r3, [pc, #28]	; (8006cb8 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 8006c9e:	4b05      	ldr	r3, [pc, #20]	; (8006cb4 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f00e faa0 	bl	80151e8 <osMutexRelease>
    return value;
 8006ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	200008ec 	.word	0x200008ec
 8006cb8:	20000820 	.word	0x20000820

08006cbc <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b082      	sub	sp, #8
 8006cc0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 8006cc2:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f00e fa41 	bl	8015152 <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 8006cd6:	4b05      	ldr	r3, [pc, #20]	; (8006cec <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f00e fa84 	bl	80151e8 <osMutexRelease>
    return value;
 8006ce0:	687b      	ldr	r3, [r7, #4]
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3708      	adds	r7, #8
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	200008f0 	.word	0x200008f0
 8006cf0:	20000824 	.word	0x20000824

08006cf4 <_Z23OD_samplingInterval_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_samplingInterval_GET_OVERWRITE
float WEAK_SYMBOL OD_samplingInterval_get() {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_samplingInterval, portMAX_DELAY);
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <_Z23OD_samplingInterval_getv+0x34>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8006d02:	4618      	mov	r0, r3
 8006d04:	f00e fa25 	bl	8015152 <osMutexAcquire>
    float value = OD_samplingInterval;
 8006d08:	4b08      	ldr	r3, [pc, #32]	; (8006d2c <_Z23OD_samplingInterval_getv+0x38>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_samplingInterval);
 8006d0e:	4b06      	ldr	r3, [pc, #24]	; (8006d28 <_Z23OD_samplingInterval_getv+0x34>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4618      	mov	r0, r3
 8006d14:	f00e fa68 	bl	80151e8 <osMutexRelease>
    return value;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	ee07 3a90 	vmov	s15, r3
}
 8006d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	200008f4 	.word	0x200008f4
 8006d2c:	20000010 	.word	0x20000010

08006d30 <_Z23OD_samplingInterval_setf>:
#endif
#ifndef OD_samplingInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_samplingInterval_set(const float value) {
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_samplingInterval, portMAX_DELAY);
 8006d3a:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <_Z23OD_samplingInterval_setf+0x30>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f04f 31ff 	mov.w	r1, #4294967295
 8006d42:	4618      	mov	r0, r3
 8006d44:	f00e fa05 	bl	8015152 <osMutexAcquire>
    OD_samplingInterval = value;
 8006d48:	4a06      	ldr	r2, [pc, #24]	; (8006d64 <_Z23OD_samplingInterval_setf+0x34>)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_samplingInterval);
 8006d4e:	4b04      	ldr	r3, [pc, #16]	; (8006d60 <_Z23OD_samplingInterval_setf+0x30>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f00e fa48 	bl	80151e8 <osMutexRelease>
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	200008f4 	.word	0x200008f4
 8006d64:	20000010 	.word	0x20000010

08006d68 <_Z24OD_TelemetryCommands_getv>:
#endif

#ifndef OD_TelemetryCommands_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_TelemetryCommands_get() {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_TelemetryCommands, portMAX_DELAY);
 8006d6e:	4b0a      	ldr	r3, [pc, #40]	; (8006d98 <_Z24OD_TelemetryCommands_getv+0x30>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f04f 31ff 	mov.w	r1, #4294967295
 8006d76:	4618      	mov	r0, r3
 8006d78:	f00e f9eb 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_TelemetryCommands;
 8006d7c:	4b07      	ldr	r3, [pc, #28]	; (8006d9c <_Z24OD_TelemetryCommands_getv+0x34>)
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_TelemetryCommands);
 8006d82:	4b05      	ldr	r3, [pc, #20]	; (8006d98 <_Z24OD_TelemetryCommands_getv+0x30>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4618      	mov	r0, r3
 8006d88:	f00e fa2e 	bl	80151e8 <osMutexRelease>
    return value;
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3708      	adds	r7, #8
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	200008f8 	.word	0x200008f8
 8006d9c:	20000828 	.word	0x20000828

08006da0 <_Z24OD_TelemetryCommands_seth>:
#endif
#ifndef OD_TelemetryCommands_SET_OVERWRITE
void WEAK_SYMBOL OD_TelemetryCommands_set(const uint8_t value) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_TelemetryCommands, portMAX_DELAY);
 8006daa:	4b09      	ldr	r3, [pc, #36]	; (8006dd0 <_Z24OD_TelemetryCommands_seth+0x30>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f04f 31ff 	mov.w	r1, #4294967295
 8006db2:	4618      	mov	r0, r3
 8006db4:	f00e f9cd 	bl	8015152 <osMutexAcquire>
    OD_TelemetryCommands = value;
 8006db8:	4a06      	ldr	r2, [pc, #24]	; (8006dd4 <_Z24OD_TelemetryCommands_seth+0x34>)
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_TelemetryCommands);
 8006dbe:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <_Z24OD_TelemetryCommands_seth+0x30>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f00e fa10 	bl	80151e8 <osMutexRelease>
}
 8006dc8:	bf00      	nop
 8006dca:	3708      	adds	r7, #8
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	200008f8 	.word	0x200008f8
 8006dd4:	20000828 	.word	0x20000828

08006dd8 <_Z27OD_StateMachineInterval_getv>:
#endif

#ifndef OD_StateMachineInterval_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_StateMachineInterval_get() {
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StateMachineInterval, portMAX_DELAY);
 8006dde:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <_Z27OD_StateMachineInterval_getv+0x30>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f04f 31ff 	mov.w	r1, #4294967295
 8006de6:	4618      	mov	r0, r3
 8006de8:	f00e f9b3 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_StateMachineInterval;
 8006dec:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <_Z27OD_StateMachineInterval_getv+0x34>)
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_StateMachineInterval);
 8006df2:	4b05      	ldr	r3, [pc, #20]	; (8006e08 <_Z27OD_StateMachineInterval_getv+0x30>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f00e f9f6 	bl	80151e8 <osMutexRelease>
    return value;
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	200008fc 	.word	0x200008fc
 8006e0c:	20000014 	.word	0x20000014

08006e10 <_Z27OD_StateMachineInterval_seth>:
#endif
#ifndef OD_StateMachineInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_StateMachineInterval_set(const uint8_t value) {
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4603      	mov	r3, r0
 8006e18:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_StateMachineInterval, portMAX_DELAY);
 8006e1a:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <_Z27OD_StateMachineInterval_seth+0x30>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e22:	4618      	mov	r0, r3
 8006e24:	f00e f995 	bl	8015152 <osMutexAcquire>
    OD_StateMachineInterval = value;
 8006e28:	4a06      	ldr	r2, [pc, #24]	; (8006e44 <_Z27OD_StateMachineInterval_seth+0x34>)
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_StateMachineInterval);
 8006e2e:	4b04      	ldr	r3, [pc, #16]	; (8006e40 <_Z27OD_StateMachineInterval_seth+0x30>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f00e f9d8 	bl	80151e8 <osMutexRelease>
}
 8006e38:	bf00      	nop
 8006e3a:	3708      	adds	r7, #8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	200008fc 	.word	0x200008fc
 8006e44:	20000014 	.word	0x20000014

08006e48 <_Z27OD_StateMachineActivate_getv>:
#endif

#ifndef OD_StateMachineActivate_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_StateMachineActivate_get() {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StateMachineActivate, portMAX_DELAY);
 8006e4e:	4b0a      	ldr	r3, [pc, #40]	; (8006e78 <_Z27OD_StateMachineActivate_getv+0x30>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f04f 31ff 	mov.w	r1, #4294967295
 8006e56:	4618      	mov	r0, r3
 8006e58:	f00e f97b 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_StateMachineActivate;
 8006e5c:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <_Z27OD_StateMachineActivate_getv+0x34>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_StateMachineActivate);
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <_Z27OD_StateMachineActivate_getv+0x30>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f00e f9be 	bl	80151e8 <osMutexRelease>
    return value;
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000900 	.word	0x20000900
 8006e7c:	20000829 	.word	0x20000829

08006e80 <_Z27OD_StateMachineActivate_seth>:
#endif
#ifndef OD_StateMachineActivate_SET_OVERWRITE
void WEAK_SYMBOL OD_StateMachineActivate_set(const uint8_t value) {
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_StateMachineActivate, portMAX_DELAY);
 8006e8a:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <_Z27OD_StateMachineActivate_seth+0x30>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e92:	4618      	mov	r0, r3
 8006e94:	f00e f95d 	bl	8015152 <osMutexAcquire>
    OD_StateMachineActivate = value;
 8006e98:	4a06      	ldr	r2, [pc, #24]	; (8006eb4 <_Z27OD_StateMachineActivate_seth+0x34>)
 8006e9a:	79fb      	ldrb	r3, [r7, #7]
 8006e9c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_StateMachineActivate);
 8006e9e:	4b04      	ldr	r3, [pc, #16]	; (8006eb0 <_Z27OD_StateMachineActivate_seth+0x30>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f00e f9a0 	bl	80151e8 <osMutexRelease>
}
 8006ea8:	bf00      	nop
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	20000900 	.word	0x20000900
 8006eb4:	20000829 	.word	0x20000829

08006eb8 <_Z20OD_HVBatteryMode_getv>:
#endif

#ifndef OD_HVBatteryMode_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_HVBatteryMode_get() {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HVBatteryMode, portMAX_DELAY);
 8006ebe:	4b0a      	ldr	r3, [pc, #40]	; (8006ee8 <_Z20OD_HVBatteryMode_getv+0x30>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f00e f943 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_HVBatteryMode;
 8006ecc:	4b07      	ldr	r3, [pc, #28]	; (8006eec <_Z20OD_HVBatteryMode_getv+0x34>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_HVBatteryMode);
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <_Z20OD_HVBatteryMode_getv+0x30>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f00e f986 	bl	80151e8 <osMutexRelease>
    return value;
 8006edc:	79fb      	ldrb	r3, [r7, #7]
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}
 8006ee6:	bf00      	nop
 8006ee8:	20000904 	.word	0x20000904
 8006eec:	2000082a 	.word	0x2000082a

08006ef0 <_Z20OD_HVBatteryMode_seth>:
#endif
#ifndef OD_HVBatteryMode_SET_OVERWRITE
void WEAK_SYMBOL OD_HVBatteryMode_set(const uint8_t value) {
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_HVBatteryMode, portMAX_DELAY);
 8006efa:	4b09      	ldr	r3, [pc, #36]	; (8006f20 <_Z20OD_HVBatteryMode_seth+0x30>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f04f 31ff 	mov.w	r1, #4294967295
 8006f02:	4618      	mov	r0, r3
 8006f04:	f00e f925 	bl	8015152 <osMutexAcquire>
    OD_HVBatteryMode = value;
 8006f08:	4a06      	ldr	r2, [pc, #24]	; (8006f24 <_Z20OD_HVBatteryMode_seth+0x34>)
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_HVBatteryMode);
 8006f0e:	4b04      	ldr	r3, [pc, #16]	; (8006f20 <_Z20OD_HVBatteryMode_seth+0x30>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f00e f968 	bl	80151e8 <osMutexRelease>
}
 8006f18:	bf00      	nop
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}
 8006f20:	20000904 	.word	0x20000904
 8006f24:	2000082a 	.word	0x2000082a

08006f28 <_Z27OD_EncoderWheelDiameter_getv>:
#endif

#ifndef OD_EncoderWheelDiameter_GET_OVERWRITE
float WEAK_SYMBOL OD_EncoderWheelDiameter_get() {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_EncoderWheelDiameter, portMAX_DELAY);
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	; (8006f5c <_Z27OD_EncoderWheelDiameter_getv+0x34>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f04f 31ff 	mov.w	r1, #4294967295
 8006f36:	4618      	mov	r0, r3
 8006f38:	f00e f90b 	bl	8015152 <osMutexAcquire>
    float value = OD_EncoderWheelDiameter;
 8006f3c:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <_Z27OD_EncoderWheelDiameter_getv+0x38>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_EncoderWheelDiameter);
 8006f42:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <_Z27OD_EncoderWheelDiameter_getv+0x34>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f00e f94e 	bl	80151e8 <osMutexRelease>
    return value;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	ee07 3a90 	vmov	s15, r3
}
 8006f52:	eeb0 0a67 	vmov.f32	s0, s15
 8006f56:	3708      	adds	r7, #8
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	20000908 	.word	0x20000908
 8006f60:	20000018 	.word	0x20000018

08006f64 <_Z27OD_EncoderWheelDiameter_setf>:
#endif
#ifndef OD_EncoderWheelDiameter_SET_OVERWRITE
void WEAK_SYMBOL OD_EncoderWheelDiameter_set(const float value) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_EncoderWheelDiameter, portMAX_DELAY);
 8006f6e:	4b09      	ldr	r3, [pc, #36]	; (8006f94 <_Z27OD_EncoderWheelDiameter_setf+0x30>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f04f 31ff 	mov.w	r1, #4294967295
 8006f76:	4618      	mov	r0, r3
 8006f78:	f00e f8eb 	bl	8015152 <osMutexAcquire>
    OD_EncoderWheelDiameter = value;
 8006f7c:	4a06      	ldr	r2, [pc, #24]	; (8006f98 <_Z27OD_EncoderWheelDiameter_setf+0x34>)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_EncoderWheelDiameter);
 8006f82:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <_Z27OD_EncoderWheelDiameter_setf+0x30>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f00e f92e 	bl	80151e8 <osMutexRelease>
}
 8006f8c:	bf00      	nop
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}
 8006f94:	20000908 	.word	0x20000908
 8006f98:	20000018 	.word	0x20000018

08006f9c <_Z27OD_EncoderResetPosition_seth>:
    osMutexRelease(mutex_OD_EncoderResetPosition);
    return value;
}
#endif
#ifndef OD_EncoderResetPosition_SET_OVERWRITE
void WEAK_SYMBOL OD_EncoderResetPosition_set(const uint8_t value) {
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b082      	sub	sp, #8
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_EncoderResetPosition, portMAX_DELAY);
 8006fa6:	4b09      	ldr	r3, [pc, #36]	; (8006fcc <_Z27OD_EncoderResetPosition_seth+0x30>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f04f 31ff 	mov.w	r1, #4294967295
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f00e f8cf 	bl	8015152 <osMutexAcquire>
    OD_EncoderResetPosition = value;
 8006fb4:	4a06      	ldr	r2, [pc, #24]	; (8006fd0 <_Z27OD_EncoderResetPosition_seth+0x34>)
 8006fb6:	79fb      	ldrb	r3, [r7, #7]
 8006fb8:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_EncoderResetPosition);
 8006fba:	4b04      	ldr	r3, [pc, #16]	; (8006fcc <_Z27OD_EncoderResetPosition_seth+0x30>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f00e f912 	bl	80151e8 <osMutexRelease>
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	2000090c 	.word	0x2000090c
 8006fd0:	2000082b 	.word	0x2000082b

08006fd4 <_Z15OD_SetReset_seth>:
    osMutexRelease(mutex_OD_SetReset);
    return value;
}
#endif
#ifndef OD_SetReset_SET_OVERWRITE
void WEAK_SYMBOL OD_SetReset_set(const uint8_t value) {
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b082      	sub	sp, #8
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SetReset, portMAX_DELAY);
 8006fde:	4b09      	ldr	r3, [pc, #36]	; (8007004 <_Z15OD_SetReset_seth+0x30>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f04f 31ff 	mov.w	r1, #4294967295
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f00e f8b3 	bl	8015152 <osMutexAcquire>
    OD_SetReset = value;
 8006fec:	4a06      	ldr	r2, [pc, #24]	; (8007008 <_Z15OD_SetReset_seth+0x34>)
 8006fee:	79fb      	ldrb	r3, [r7, #7]
 8006ff0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SetReset);
 8006ff2:	4b04      	ldr	r3, [pc, #16]	; (8007004 <_Z15OD_SetReset_seth+0x30>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f00e f8f6 	bl	80151e8 <osMutexRelease>
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20000910 	.word	0x20000910
 8007008:	2000082c 	.word	0x2000082c

0800700c <_Z17OD_IMU_number_getv>:
#endif

#ifndef OD_IMU_number_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_IMU_number_get() {
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_number, portMAX_DELAY);
 8007012:	4b0a      	ldr	r3, [pc, #40]	; (800703c <_Z17OD_IMU_number_getv+0x30>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f04f 31ff 	mov.w	r1, #4294967295
 800701a:	4618      	mov	r0, r3
 800701c:	f00e f899 	bl	8015152 <osMutexAcquire>
    uint8_t value = OD_IMU_number;
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <_Z17OD_IMU_number_getv+0x34>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_IMU_number);
 8007026:	4b05      	ldr	r3, [pc, #20]	; (800703c <_Z17OD_IMU_number_getv+0x30>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f00e f8dc 	bl	80151e8 <osMutexRelease>
    return value;
 8007030:	79fb      	ldrb	r3, [r7, #7]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3708      	adds	r7, #8
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	20000914 	.word	0x20000914
 8007040:	2000082d 	.word	0x2000082d

08007044 <_Z23OD_IMU1_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU_number);
}
#endif

#ifndef OD_IMU1_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU1_Temperature_get() {
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU1_Temperature, portMAX_DELAY);
 800704a:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <_Z23OD_IMU1_Temperature_getv+0x34>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f04f 31ff 	mov.w	r1, #4294967295
 8007052:	4618      	mov	r0, r3
 8007054:	f00e f87d 	bl	8015152 <osMutexAcquire>
    float value = OD_IMU1_Temperature;
 8007058:	4b08      	ldr	r3, [pc, #32]	; (800707c <_Z23OD_IMU1_Temperature_getv+0x38>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU1_Temperature);
 800705e:	4b06      	ldr	r3, [pc, #24]	; (8007078 <_Z23OD_IMU1_Temperature_getv+0x34>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f00e f8c0 	bl	80151e8 <osMutexRelease>
    return value;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	ee07 3a90 	vmov	s15, r3
}
 800706e:	eeb0 0a67 	vmov.f32	s0, s15
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000918 	.word	0x20000918
 800707c:	20000830 	.word	0x20000830

08007080 <_Z23OD_IMU2_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU1_Temperature);
}
#endif

#ifndef OD_IMU2_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU2_Temperature_get() {
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU2_Temperature, portMAX_DELAY);
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <_Z23OD_IMU2_Temperature_getv+0x34>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f04f 31ff 	mov.w	r1, #4294967295
 800708e:	4618      	mov	r0, r3
 8007090:	f00e f85f 	bl	8015152 <osMutexAcquire>
    float value = OD_IMU2_Temperature;
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <_Z23OD_IMU2_Temperature_getv+0x38>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU2_Temperature);
 800709a:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <_Z23OD_IMU2_Temperature_getv+0x34>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f00e f8a2 	bl	80151e8 <osMutexRelease>
    return value;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	ee07 3a90 	vmov	s15, r3
}
 80070aa:	eeb0 0a67 	vmov.f32	s0, s15
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	2000091c 	.word	0x2000091c
 80070b8:	20000834 	.word	0x20000834

080070bc <_Z23OD_IMU3_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU2_Temperature);
}
#endif

#ifndef OD_IMU3_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU3_Temperature_get() {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU3_Temperature, portMAX_DELAY);
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <_Z23OD_IMU3_Temperature_getv+0x34>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f04f 31ff 	mov.w	r1, #4294967295
 80070ca:	4618      	mov	r0, r3
 80070cc:	f00e f841 	bl	8015152 <osMutexAcquire>
    float value = OD_IMU3_Temperature;
 80070d0:	4b08      	ldr	r3, [pc, #32]	; (80070f4 <_Z23OD_IMU3_Temperature_getv+0x38>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU3_Temperature);
 80070d6:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <_Z23OD_IMU3_Temperature_getv+0x34>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f00e f884 	bl	80151e8 <osMutexRelease>
    return value;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	ee07 3a90 	vmov	s15, r3
}
 80070e6:	eeb0 0a67 	vmov.f32	s0, s15
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000920 	.word	0x20000920
 80070f4:	20000838 	.word	0x20000838

080070f8 <_Z17OD_IMU_AccelX_getv>:
    osMutexRelease(mutex_OD_IMU3_Temperature);
}
#endif

#ifndef OD_IMU_AccelX_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelX_get() {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelX, portMAX_DELAY);
 80070fe:	4b0b      	ldr	r3, [pc, #44]	; (800712c <_Z17OD_IMU_AccelX_getv+0x34>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f04f 31ff 	mov.w	r1, #4294967295
 8007106:	4618      	mov	r0, r3
 8007108:	f00e f823 	bl	8015152 <osMutexAcquire>
    float value = OD_IMU_AccelX;
 800710c:	4b08      	ldr	r3, [pc, #32]	; (8007130 <_Z17OD_IMU_AccelX_getv+0x38>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelX);
 8007112:	4b06      	ldr	r3, [pc, #24]	; (800712c <_Z17OD_IMU_AccelX_getv+0x34>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4618      	mov	r0, r3
 8007118:	f00e f866 	bl	80151e8 <osMutexRelease>
    return value;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	ee07 3a90 	vmov	s15, r3
}
 8007122:	eeb0 0a67 	vmov.f32	s0, s15
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20000924 	.word	0x20000924
 8007130:	2000083c 	.word	0x2000083c

08007134 <_Z17OD_IMU_AccelX_setf>:
#endif
#ifndef OD_IMU_AccelX_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_AccelX_set(const float value) {
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_AccelX, portMAX_DELAY);
 800713e:	4b09      	ldr	r3, [pc, #36]	; (8007164 <_Z17OD_IMU_AccelX_setf+0x30>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f04f 31ff 	mov.w	r1, #4294967295
 8007146:	4618      	mov	r0, r3
 8007148:	f00e f803 	bl	8015152 <osMutexAcquire>
    OD_IMU_AccelX = value;
 800714c:	4a06      	ldr	r2, [pc, #24]	; (8007168 <_Z17OD_IMU_AccelX_setf+0x34>)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_AccelX);
 8007152:	4b04      	ldr	r3, [pc, #16]	; (8007164 <_Z17OD_IMU_AccelX_setf+0x30>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f00e f846 	bl	80151e8 <osMutexRelease>
}
 800715c:	bf00      	nop
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	20000924 	.word	0x20000924
 8007168:	2000083c 	.word	0x2000083c

0800716c <_Z17OD_IMU_AccelY_getv>:
#endif

#ifndef OD_IMU_AccelY_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelY_get() {
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelY, portMAX_DELAY);
 8007172:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <_Z17OD_IMU_AccelY_getv+0x34>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f04f 31ff 	mov.w	r1, #4294967295
 800717a:	4618      	mov	r0, r3
 800717c:	f00d ffe9 	bl	8015152 <osMutexAcquire>
    float value = OD_IMU_AccelY;
 8007180:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <_Z17OD_IMU_AccelY_getv+0x38>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelY);
 8007186:	4b06      	ldr	r3, [pc, #24]	; (80071a0 <_Z17OD_IMU_AccelY_getv+0x34>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f00e f82c 	bl	80151e8 <osMutexRelease>
    return value;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	ee07 3a90 	vmov	s15, r3
}
 8007196:	eeb0 0a67 	vmov.f32	s0, s15
 800719a:	3708      	adds	r7, #8
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	20000928 	.word	0x20000928
 80071a4:	20000840 	.word	0x20000840

080071a8 <_Z17OD_IMU_AccelY_setf>:
#endif
#ifndef OD_IMU_AccelY_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_AccelY_set(const float value) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_AccelY, portMAX_DELAY);
 80071b2:	4b09      	ldr	r3, [pc, #36]	; (80071d8 <_Z17OD_IMU_AccelY_setf+0x30>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f04f 31ff 	mov.w	r1, #4294967295
 80071ba:	4618      	mov	r0, r3
 80071bc:	f00d ffc9 	bl	8015152 <osMutexAcquire>
    OD_IMU_AccelY = value;
 80071c0:	4a06      	ldr	r2, [pc, #24]	; (80071dc <_Z17OD_IMU_AccelY_setf+0x34>)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_AccelY);
 80071c6:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <_Z17OD_IMU_AccelY_setf+0x30>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4618      	mov	r0, r3
 80071cc:	f00e f80c 	bl	80151e8 <osMutexRelease>
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	20000928 	.word	0x20000928
 80071dc:	20000840 	.word	0x20000840

080071e0 <_Z17OD_IMU_AccelZ_getv>:
#endif

#ifndef OD_IMU_AccelZ_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelZ_get() {
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelZ, portMAX_DELAY);
 80071e6:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <_Z17OD_IMU_AccelZ_getv+0x34>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f04f 31ff 	mov.w	r1, #4294967295
 80071ee:	4618      	mov	r0, r3
 80071f0:	f00d ffaf 	bl	8015152 <osMutexAcquire>
    float value = OD_IMU_AccelZ;
 80071f4:	4b08      	ldr	r3, [pc, #32]	; (8007218 <_Z17OD_IMU_AccelZ_getv+0x38>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelZ);
 80071fa:	4b06      	ldr	r3, [pc, #24]	; (8007214 <_Z17OD_IMU_AccelZ_getv+0x34>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4618      	mov	r0, r3
 8007200:	f00d fff2 	bl	80151e8 <osMutexRelease>
    return value;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	ee07 3a90 	vmov	s15, r3
}
 800720a:	eeb0 0a67 	vmov.f32	s0, s15
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	2000092c 	.word	0x2000092c
 8007218:	20000844 	.word	0x20000844

0800721c <_Z17OD_IMU_AccelZ_setf>:
#endif
#ifndef OD_IMU_AccelZ_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_AccelZ_set(const float value) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_AccelZ, portMAX_DELAY);
 8007226:	4b09      	ldr	r3, [pc, #36]	; (800724c <_Z17OD_IMU_AccelZ_setf+0x30>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f04f 31ff 	mov.w	r1, #4294967295
 800722e:	4618      	mov	r0, r3
 8007230:	f00d ff8f 	bl	8015152 <osMutexAcquire>
    OD_IMU_AccelZ = value;
 8007234:	4a06      	ldr	r2, [pc, #24]	; (8007250 <_Z17OD_IMU_AccelZ_setf+0x34>)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_AccelZ);
 800723a:	4b04      	ldr	r3, [pc, #16]	; (800724c <_Z17OD_IMU_AccelZ_setf+0x30>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4618      	mov	r0, r3
 8007240:	f00d ffd2 	bl	80151e8 <osMutexRelease>
}
 8007244:	bf00      	nop
 8007246:	3708      	adds	r7, #8
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	2000092c 	.word	0x2000092c
 8007250:	20000844 	.word	0x20000844

08007254 <_Z16OD_IMU_GyroX_getv>:
#endif

#ifndef OD_IMU_GyroX_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroX_get() {
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroX, portMAX_DELAY);
 800725a:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <_Z16OD_IMU_GyroX_getv+0x34>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f04f 31ff 	mov.w	r1, #4294967295
 8007262:	4618      	mov	r0, r3
 8007264:	f00d ff75 	bl	8015152 <osMutexAcquire>
    float value = OD_IMU_GyroX;
 8007268:	4b08      	ldr	r3, [pc, #32]	; (800728c <_Z16OD_IMU_GyroX_getv+0x38>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroX);
 800726e:	4b06      	ldr	r3, [pc, #24]	; (8007288 <_Z16OD_IMU_GyroX_getv+0x34>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f00d ffb8 	bl	80151e8 <osMutexRelease>
    return value;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	ee07 3a90 	vmov	s15, r3
}
 800727e:	eeb0 0a67 	vmov.f32	s0, s15
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	20000930 	.word	0x20000930
 800728c:	20000848 	.word	0x20000848

08007290 <_Z16OD_IMU_GyroX_setf>:
#endif
#ifndef OD_IMU_GyroX_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_GyroX_set(const float value) {
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_GyroX, portMAX_DELAY);
 800729a:	4b09      	ldr	r3, [pc, #36]	; (80072c0 <_Z16OD_IMU_GyroX_setf+0x30>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f04f 31ff 	mov.w	r1, #4294967295
 80072a2:	4618      	mov	r0, r3
 80072a4:	f00d ff55 	bl	8015152 <osMutexAcquire>
    OD_IMU_GyroX = value;
 80072a8:	4a06      	ldr	r2, [pc, #24]	; (80072c4 <_Z16OD_IMU_GyroX_setf+0x34>)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_GyroX);
 80072ae:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <_Z16OD_IMU_GyroX_setf+0x30>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f00d ff98 	bl	80151e8 <osMutexRelease>
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000930 	.word	0x20000930
 80072c4:	20000848 	.word	0x20000848

080072c8 <_Z16OD_IMU_GyroY_getv>:
#endif

#ifndef OD_IMU_GyroY_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroY_get() {
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b082      	sub	sp, #8
 80072cc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroY, portMAX_DELAY);
 80072ce:	4b0b      	ldr	r3, [pc, #44]	; (80072fc <_Z16OD_IMU_GyroY_getv+0x34>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f04f 31ff 	mov.w	r1, #4294967295
 80072d6:	4618      	mov	r0, r3
 80072d8:	f00d ff3b 	bl	8015152 <osMutexAcquire>
    float value = OD_IMU_GyroY;
 80072dc:	4b08      	ldr	r3, [pc, #32]	; (8007300 <_Z16OD_IMU_GyroY_getv+0x38>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroY);
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <_Z16OD_IMU_GyroY_getv+0x34>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f00d ff7e 	bl	80151e8 <osMutexRelease>
    return value;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	ee07 3a90 	vmov	s15, r3
}
 80072f2:	eeb0 0a67 	vmov.f32	s0, s15
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	20000934 	.word	0x20000934
 8007300:	2000084c 	.word	0x2000084c

08007304 <_Z16OD_IMU_GyroY_setf>:
#endif
#ifndef OD_IMU_GyroY_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_GyroY_set(const float value) {
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
 800730a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_GyroY, portMAX_DELAY);
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <_Z16OD_IMU_GyroY_setf+0x30>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f04f 31ff 	mov.w	r1, #4294967295
 8007316:	4618      	mov	r0, r3
 8007318:	f00d ff1b 	bl	8015152 <osMutexAcquire>
    OD_IMU_GyroY = value;
 800731c:	4a06      	ldr	r2, [pc, #24]	; (8007338 <_Z16OD_IMU_GyroY_setf+0x34>)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_GyroY);
 8007322:	4b04      	ldr	r3, [pc, #16]	; (8007334 <_Z16OD_IMU_GyroY_setf+0x30>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f00d ff5e 	bl	80151e8 <osMutexRelease>
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	20000934 	.word	0x20000934
 8007338:	2000084c 	.word	0x2000084c

0800733c <_Z16OD_IMU_GyroZ_getv>:
#endif

#ifndef OD_IMU_GyroZ_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroZ_get() {
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroZ, portMAX_DELAY);
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <_Z16OD_IMU_GyroZ_getv+0x34>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f04f 31ff 	mov.w	r1, #4294967295
 800734a:	4618      	mov	r0, r3
 800734c:	f00d ff01 	bl	8015152 <osMutexAcquire>
    float value = OD_IMU_GyroZ;
 8007350:	4b08      	ldr	r3, [pc, #32]	; (8007374 <_Z16OD_IMU_GyroZ_getv+0x38>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroZ);
 8007356:	4b06      	ldr	r3, [pc, #24]	; (8007370 <_Z16OD_IMU_GyroZ_getv+0x34>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f00d ff44 	bl	80151e8 <osMutexRelease>
    return value;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	ee07 3a90 	vmov	s15, r3
}
 8007366:	eeb0 0a67 	vmov.f32	s0, s15
 800736a:	3708      	adds	r7, #8
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000938 	.word	0x20000938
 8007374:	20000850 	.word	0x20000850

08007378 <_Z16OD_IMU_GyroZ_setf>:
#endif
#ifndef OD_IMU_GyroZ_SET_OVERWRITE
void WEAK_SYMBOL OD_IMU_GyroZ_set(const float value) {
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_IMU_GyroZ, portMAX_DELAY);
 8007382:	4b09      	ldr	r3, [pc, #36]	; (80073a8 <_Z16OD_IMU_GyroZ_setf+0x30>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f04f 31ff 	mov.w	r1, #4294967295
 800738a:	4618      	mov	r0, r3
 800738c:	f00d fee1 	bl	8015152 <osMutexAcquire>
    OD_IMU_GyroZ = value;
 8007390:	4a06      	ldr	r2, [pc, #24]	; (80073ac <_Z16OD_IMU_GyroZ_setf+0x34>)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_IMU_GyroZ);
 8007396:	4b04      	ldr	r3, [pc, #16]	; (80073a8 <_Z16OD_IMU_GyroZ_setf+0x30>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4618      	mov	r0, r3
 800739c:	f00d ff24 	bl	80151e8 <osMutexRelease>
}
 80073a0:	bf00      	nop
 80073a2:	3708      	adds	r7, #8
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	20000938 	.word	0x20000938
 80073ac:	20000850 	.word	0x20000850

080073b0 <_Z22OD_CoolingPressure_getv>:
#endif

#ifndef OD_CoolingPressure_GET_OVERWRITE
float WEAK_SYMBOL OD_CoolingPressure_get() {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CoolingPressure, portMAX_DELAY);
 80073b6:	4b0b      	ldr	r3, [pc, #44]	; (80073e4 <_Z22OD_CoolingPressure_getv+0x34>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f04f 31ff 	mov.w	r1, #4294967295
 80073be:	4618      	mov	r0, r3
 80073c0:	f00d fec7 	bl	8015152 <osMutexAcquire>
    float value = OD_CoolingPressure;
 80073c4:	4b08      	ldr	r3, [pc, #32]	; (80073e8 <_Z22OD_CoolingPressure_getv+0x38>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CoolingPressure);
 80073ca:	4b06      	ldr	r3, [pc, #24]	; (80073e4 <_Z22OD_CoolingPressure_getv+0x34>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f00d ff0a 	bl	80151e8 <osMutexRelease>
    return value;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	ee07 3a90 	vmov	s15, r3
}
 80073da:	eeb0 0a67 	vmov.f32	s0, s15
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	2000093c 	.word	0x2000093c
 80073e8:	2000001c 	.word	0x2000001c

080073ec <_Z22OD_CoolingPressure_setf>:
#endif
#ifndef OD_CoolingPressure_SET_OVERWRITE
void WEAK_SYMBOL OD_CoolingPressure_set(const float value) {
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CoolingPressure, portMAX_DELAY);
 80073f6:	4b09      	ldr	r3, [pc, #36]	; (800741c <_Z22OD_CoolingPressure_setf+0x30>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f04f 31ff 	mov.w	r1, #4294967295
 80073fe:	4618      	mov	r0, r3
 8007400:	f00d fea7 	bl	8015152 <osMutexAcquire>
    OD_CoolingPressure = value;
 8007404:	4a06      	ldr	r2, [pc, #24]	; (8007420 <_Z22OD_CoolingPressure_setf+0x34>)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CoolingPressure);
 800740a:	4b04      	ldr	r3, [pc, #16]	; (800741c <_Z22OD_CoolingPressure_setf+0x30>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4618      	mov	r0, r3
 8007410:	f00d feea 	bl	80151e8 <osMutexRelease>
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	2000093c 	.word	0x2000093c
 8007420:	2000001c 	.word	0x2000001c

08007424 <_Z27OD_FiducialRightCounter_getv>:
#endif

#ifndef OD_FiducialRightCounter_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_FiducialRightCounter_get() {
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_FiducialRightCounter, portMAX_DELAY);
 800742a:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <_Z27OD_FiducialRightCounter_getv+0x30>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f04f 31ff 	mov.w	r1, #4294967295
 8007432:	4618      	mov	r0, r3
 8007434:	f00d fe8d 	bl	8015152 <osMutexAcquire>
    uint16_t value = OD_FiducialRightCounter;
 8007438:	4b07      	ldr	r3, [pc, #28]	; (8007458 <_Z27OD_FiducialRightCounter_getv+0x34>)
 800743a:	881b      	ldrh	r3, [r3, #0]
 800743c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_FiducialRightCounter);
 800743e:	4b05      	ldr	r3, [pc, #20]	; (8007454 <_Z27OD_FiducialRightCounter_getv+0x30>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f00d fed0 	bl	80151e8 <osMutexRelease>
    return value;
 8007448:	88fb      	ldrh	r3, [r7, #6]
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	20000940 	.word	0x20000940
 8007458:	20000854 	.word	0x20000854

0800745c <_Z27OD_FiducialRightCounter_sett>:
#endif
#ifndef OD_FiducialRightCounter_SET_OVERWRITE
void WEAK_SYMBOL OD_FiducialRightCounter_set(const uint16_t value) {
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
 8007462:	4603      	mov	r3, r0
 8007464:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_FiducialRightCounter, portMAX_DELAY);
 8007466:	4b09      	ldr	r3, [pc, #36]	; (800748c <_Z27OD_FiducialRightCounter_sett+0x30>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f04f 31ff 	mov.w	r1, #4294967295
 800746e:	4618      	mov	r0, r3
 8007470:	f00d fe6f 	bl	8015152 <osMutexAcquire>
    OD_FiducialRightCounter = value;
 8007474:	4a06      	ldr	r2, [pc, #24]	; (8007490 <_Z27OD_FiducialRightCounter_sett+0x34>)
 8007476:	88fb      	ldrh	r3, [r7, #6]
 8007478:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_FiducialRightCounter);
 800747a:	4b04      	ldr	r3, [pc, #16]	; (800748c <_Z27OD_FiducialRightCounter_sett+0x30>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4618      	mov	r0, r3
 8007480:	f00d feb2 	bl	80151e8 <osMutexRelease>
}
 8007484:	bf00      	nop
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000940 	.word	0x20000940
 8007490:	20000854 	.word	0x20000854

08007494 <_Z26OD_FiducialLeftCounter_getv>:
#endif

#ifndef OD_FiducialLeftCounter_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_FiducialLeftCounter_get() {
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_FiducialLeftCounter, portMAX_DELAY);
 800749a:	4b0a      	ldr	r3, [pc, #40]	; (80074c4 <_Z26OD_FiducialLeftCounter_getv+0x30>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f04f 31ff 	mov.w	r1, #4294967295
 80074a2:	4618      	mov	r0, r3
 80074a4:	f00d fe55 	bl	8015152 <osMutexAcquire>
    uint16_t value = OD_FiducialLeftCounter;
 80074a8:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <_Z26OD_FiducialLeftCounter_getv+0x34>)
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_FiducialLeftCounter);
 80074ae:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <_Z26OD_FiducialLeftCounter_getv+0x30>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4618      	mov	r0, r3
 80074b4:	f00d fe98 	bl	80151e8 <osMutexRelease>
    return value;
 80074b8:	88fb      	ldrh	r3, [r7, #6]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3708      	adds	r7, #8
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	20000944 	.word	0x20000944
 80074c8:	20000856 	.word	0x20000856

080074cc <_Z26OD_FiducialLeftCounter_sett>:
#endif
#ifndef OD_FiducialLeftCounter_SET_OVERWRITE
void WEAK_SYMBOL OD_FiducialLeftCounter_set(const uint16_t value) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_FiducialLeftCounter, portMAX_DELAY);
 80074d6:	4b09      	ldr	r3, [pc, #36]	; (80074fc <_Z26OD_FiducialLeftCounter_sett+0x30>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f04f 31ff 	mov.w	r1, #4294967295
 80074de:	4618      	mov	r0, r3
 80074e0:	f00d fe37 	bl	8015152 <osMutexAcquire>
    OD_FiducialLeftCounter = value;
 80074e4:	4a06      	ldr	r2, [pc, #24]	; (8007500 <_Z26OD_FiducialLeftCounter_sett+0x34>)
 80074e6:	88fb      	ldrh	r3, [r7, #6]
 80074e8:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_FiducialLeftCounter);
 80074ea:	4b04      	ldr	r3, [pc, #16]	; (80074fc <_Z26OD_FiducialLeftCounter_sett+0x30>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4618      	mov	r0, r3
 80074f0:	f00d fe7a 	bl	80151e8 <osMutexRelease>
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}
 80074fc:	20000944 	.word	0x20000944
 8007500:	20000856 	.word	0x20000856

08007504 <_Z15OD_Position_getv>:
#endif

#ifndef OD_Position_GET_OVERWRITE
float WEAK_SYMBOL OD_Position_get() {
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_Position, portMAX_DELAY);
 800750a:	4b0b      	ldr	r3, [pc, #44]	; (8007538 <_Z15OD_Position_getv+0x34>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f04f 31ff 	mov.w	r1, #4294967295
 8007512:	4618      	mov	r0, r3
 8007514:	f00d fe1d 	bl	8015152 <osMutexAcquire>
    float value = OD_Position;
 8007518:	4b08      	ldr	r3, [pc, #32]	; (800753c <_Z15OD_Position_getv+0x38>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_Position);
 800751e:	4b06      	ldr	r3, [pc, #24]	; (8007538 <_Z15OD_Position_getv+0x34>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4618      	mov	r0, r3
 8007524:	f00d fe60 	bl	80151e8 <osMutexRelease>
    return value;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	ee07 3a90 	vmov	s15, r3
}
 800752e:	eeb0 0a67 	vmov.f32	s0, s15
 8007532:	3708      	adds	r7, #8
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20000948 	.word	0x20000948
 800753c:	20000858 	.word	0x20000858

08007540 <_Z15OD_Position_setf>:
#endif
#ifndef OD_Position_SET_OVERWRITE
void WEAK_SYMBOL OD_Position_set(const float value) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_Position, portMAX_DELAY);
 800754a:	4b09      	ldr	r3, [pc, #36]	; (8007570 <_Z15OD_Position_setf+0x30>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f04f 31ff 	mov.w	r1, #4294967295
 8007552:	4618      	mov	r0, r3
 8007554:	f00d fdfd 	bl	8015152 <osMutexAcquire>
    OD_Position = value;
 8007558:	4a06      	ldr	r2, [pc, #24]	; (8007574 <_Z15OD_Position_setf+0x34>)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_Position);
 800755e:	4b04      	ldr	r3, [pc, #16]	; (8007570 <_Z15OD_Position_setf+0x30>)
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4618      	mov	r0, r3
 8007564:	f00d fe40 	bl	80151e8 <osMutexRelease>
}
 8007568:	bf00      	nop
 800756a:	3708      	adds	r7, #8
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	20000948 	.word	0x20000948
 8007574:	20000858 	.word	0x20000858

08007578 <_Z15OD_Velocity_getv>:
#endif

#ifndef OD_Velocity_GET_OVERWRITE
float WEAK_SYMBOL OD_Velocity_get() {
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_Velocity, portMAX_DELAY);
 800757e:	4b0b      	ldr	r3, [pc, #44]	; (80075ac <_Z15OD_Velocity_getv+0x34>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f04f 31ff 	mov.w	r1, #4294967295
 8007586:	4618      	mov	r0, r3
 8007588:	f00d fde3 	bl	8015152 <osMutexAcquire>
    float value = OD_Velocity;
 800758c:	4b08      	ldr	r3, [pc, #32]	; (80075b0 <_Z15OD_Velocity_getv+0x38>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_Velocity);
 8007592:	4b06      	ldr	r3, [pc, #24]	; (80075ac <_Z15OD_Velocity_getv+0x34>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4618      	mov	r0, r3
 8007598:	f00d fe26 	bl	80151e8 <osMutexRelease>
    return value;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	ee07 3a90 	vmov	s15, r3
}
 80075a2:	eeb0 0a67 	vmov.f32	s0, s15
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	2000094c 	.word	0x2000094c
 80075b0:	2000085c 	.word	0x2000085c

080075b4 <_Z15OD_Velocity_setf>:
#endif
#ifndef OD_Velocity_SET_OVERWRITE
void WEAK_SYMBOL OD_Velocity_set(const float value) {
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_Velocity, portMAX_DELAY);
 80075be:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <_Z15OD_Velocity_setf+0x30>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f04f 31ff 	mov.w	r1, #4294967295
 80075c6:	4618      	mov	r0, r3
 80075c8:	f00d fdc3 	bl	8015152 <osMutexAcquire>
    OD_Velocity = value;
 80075cc:	4a06      	ldr	r2, [pc, #24]	; (80075e8 <_Z15OD_Velocity_setf+0x34>)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_Velocity);
 80075d2:	4b04      	ldr	r3, [pc, #16]	; (80075e4 <_Z15OD_Velocity_setf+0x30>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4618      	mov	r0, r3
 80075d8:	f00d fe06 	bl	80151e8 <osMutexRelease>
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	2000094c 	.word	0x2000094c
 80075e8:	2000085c 	.word	0x2000085c

080075ec <_Z17sendOdEntriesTaskPv>:
    0xD00,    0xD01 
};
constexpr uint16_t NUMBER_OF_READABLE_SDO_IDS = 58;
extern RNG_HandleTypeDef hrng;

void sendOdEntriesTask(void *pvParameters) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
    // Delay for random amount so that not all nodes send exactly at the same time
    uint32_t randomDelayMs;
    HAL_RNG_GenerateRandomNumber(&hrng, &randomDelayMs);
 80075f4:	f107 030c 	add.w	r3, r7, #12
 80075f8:	4619      	mov	r1, r3
 80075fa:	481f      	ldr	r0, [pc, #124]	; (8007678 <_Z17sendOdEntriesTaskPv+0x8c>)
 80075fc:	f009 fd2a 	bl	8011054 <HAL_RNG_GenerateRandomNumber>
    randomDelayMs = randomDelayMs & 0xFF;   // Use only lower byte, so delay will be 255ms at maximum
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	60fb      	str	r3, [r7, #12]
    osDelay(pdMS_TO_TICKS(randomDelayMs));
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800760c:	fb02 f303 	mul.w	r3, r2, r3
 8007610:	4a1a      	ldr	r2, [pc, #104]	; (800767c <_Z17sendOdEntriesTaskPv+0x90>)
 8007612:	fba2 2303 	umull	r2, r3, r2, r3
 8007616:	099b      	lsrs	r3, r3, #6
 8007618:	4618      	mov	r0, r3
 800761a:	f00d fcf9 	bl	8015010 <osDelay>

    uint16_t currentSdoListPos = 0;
 800761e:	2300      	movs	r3, #0
 8007620:	82fb      	strh	r3, [r7, #22]

    while(1) {
        uint16_t delayInterval = OD_OdEntrySendInterval_get();
 8007622:	f7fe ff15 	bl	8006450 <_Z26OD_OdEntrySendInterval_getv>
 8007626:	4603      	mov	r3, r0
 8007628:	82bb      	strh	r3, [r7, #20]
        if(delayInterval >= 5) {    // Periodically sending of all readable OD entries is enabled
 800762a:	8abb      	ldrh	r3, [r7, #20]
 800762c:	2b04      	cmp	r3, #4
 800762e:	d91d      	bls.n	800766c <_Z17sendOdEntriesTaskPv+0x80>
            uint16_t sdoId = READABLE_SDO_IDS[currentSdoListPos];
 8007630:	8afb      	ldrh	r3, [r7, #22]
 8007632:	4a13      	ldr	r2, [pc, #76]	; (8007680 <_Z17sendOdEntriesTaskPv+0x94>)
 8007634:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007638:	827b      	strh	r3, [r7, #18]

            currentSdoListPos++;
 800763a:	8afb      	ldrh	r3, [r7, #22]
 800763c:	3301      	adds	r3, #1
 800763e:	82fb      	strh	r3, [r7, #22]
            if (currentSdoListPos >= NUMBER_OF_READABLE_SDO_IDS) {
 8007640:	8afb      	ldrh	r3, [r7, #22]
 8007642:	2b39      	cmp	r3, #57	; 0x39
 8007644:	d901      	bls.n	800764a <_Z17sendOdEntriesTaskPv+0x5e>
                currentSdoListPos = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	82fb      	strh	r3, [r7, #22]
            }

            handleSDORequestDownloadBySDOID(sdoId);
 800764a:	8a7b      	ldrh	r3, [r7, #18]
 800764c:	4618      	mov	r0, r3
 800764e:	f7fd fa43 	bl	8004ad8 <_Z31handleSDORequestDownloadBySDOIDt>

            osDelay(pdMS_TO_TICKS(delayInterval));
 8007652:	8abb      	ldrh	r3, [r7, #20]
 8007654:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007658:	fb02 f303 	mul.w	r3, r2, r3
 800765c:	4a07      	ldr	r2, [pc, #28]	; (800767c <_Z17sendOdEntriesTaskPv+0x90>)
 800765e:	fba2 2303 	umull	r2, r3, r2, r3
 8007662:	099b      	lsrs	r3, r3, #6
 8007664:	4618      	mov	r0, r3
 8007666:	f00d fcd3 	bl	8015010 <osDelay>
 800766a:	e7da      	b.n	8007622 <_Z17sendOdEntriesTaskPv+0x36>

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
 800766c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007670:	f00d fcce 	bl	8015010 <osDelay>
        }
    }
 8007674:	e7d5      	b.n	8007622 <_Z17sendOdEntriesTaskPv+0x36>
 8007676:	bf00      	nop
 8007678:	2000120c 	.word	0x2000120c
 800767c:	10624dd3 	.word	0x10624dd3
 8007680:	0801c9f0 	.word	0x0801c9f0

08007684 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007684:	b580      	push	{r7, lr}
 8007686:	b082      	sub	sp, #8
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f103 0208 	add.w	r2, r3, #8
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	3310      	adds	r3, #16
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7fb f81c 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800769e:	4603      	mov	r3, r0
        }
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	460b      	mov	r3, r1
 80076b2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f103 0008 	add.w	r0, r3, #8
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f103 0110 	add.w	r1, r3, #16
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	1d1a      	adds	r2, r3, #4
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	f7fd f97f 	bl	80049c8 <_ZN3can7signals17SensorF_OD_NodeID3setERyS2_Rhh>
        }
 80076ca:	bf00      	nop
 80076cc:	3708      	adds	r7, #8
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b082      	sub	sp, #8
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	460b      	mov	r3, r1
 80076dc:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f103 0008 	add.w	r0, r3, #8
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f103 0110 	add.w	r1, r3, #16
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	1d1a      	adds	r2, r3, #4
 80076ee:	78fb      	ldrb	r3, [r7, #3]
 80076f0:	f7fd f937 	bl	8004962 <_ZN3can7signals21SensorF_OD_NodeStatus3setERyS2_Rhh>
        }
 80076f4:	bf00      	nop
 80076f6:	3708      	adds	r7, #8
 80076f8:	46bd      	mov	sp, r7
 80076fa:	bd80      	pop	{r7, pc}

080076fc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
 8007704:	460b      	mov	r3, r1
 8007706:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f103 0008 	add.w	r0, r3, #8
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f103 0110 	add.w	r1, r3, #16
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	1d1a      	adds	r2, r3, #4
 8007718:	887b      	ldrh	r3, [r7, #2]
 800771a:	f7fd f8f4 	bl	8004906 <_ZN3can7signals26SensorF_OD_ProtocolVersion3setERyS2_Rht>
        }
 800771e:	bf00      	nop
 8007720:	3708      	adds	r7, #8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}

08007726 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f103 0008 	add.w	r0, r3, #8
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f103 0110 	add.w	r1, r3, #16
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	1d1a      	adds	r2, r3, #4
 8007742:	887b      	ldrh	r3, [r7, #2]
 8007744:	f7fd f8b1 	bl	80048aa <_ZN3can7signals23SensorF_OD_StackVersion3setERyS2_Rht>
        }
 8007748:	bf00      	nop
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007750:	b580      	push	{r7, lr}
 8007752:	b082      	sub	sp, #8
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f103 0008 	add.w	r0, r3, #8
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f103 0110 	add.w	r1, r3, #16
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	1d1a      	adds	r2, r3, #4
 800776c:	887b      	ldrh	r3, [r7, #2]
 800776e:	f7fd f86e 	bl	800484e <_ZN3can7signals21SensorF_OD_DbcVersion3setERyS2_Rht>
        }
 8007772:	bf00      	nop
 8007774:	3708      	adds	r7, #8
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800777a:	b580      	push	{r7, lr}
 800777c:	b082      	sub	sp, #8
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
 8007782:	460b      	mov	r3, r1
 8007784:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f103 0008 	add.w	r0, r3, #8
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f103 0110 	add.w	r1, r3, #16
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	1d1a      	adds	r2, r3, #4
 8007796:	887b      	ldrh	r3, [r7, #2]
 8007798:	f7fd f807 	bl	80047aa <_ZN3can7signals28SensorF_OD_HeartbeatInterval3setERyS2_Rht>
        }
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f103 0008 	add.w	r0, r3, #8
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f103 0110 	add.w	r1, r3, #16
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	1d1a      	adds	r2, r3, #4
 80077c0:	78fb      	ldrb	r3, [r7, #3]
 80077c2:	f7fc ff9b 	bl	80046fc <_ZN3can7signals25SensorF_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b082      	sub	sp, #8
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	460b      	mov	r3, r1
 80077d8:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f103 0008 	add.w	r0, r3, #8
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f103 0110 	add.w	r1, r3, #16
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	1d1a      	adds	r2, r3, #4
 80077ea:	887b      	ldrh	r3, [r7, #2]
 80077ec:	f7fc ff34 	bl	8004658 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f103 0008 	add.w	r0, r3, #8
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f103 0110 	add.w	r1, r3, #16
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	3304      	adds	r3, #4
 8007814:	ed97 0a00 	vldr	s0, [r7]
 8007818:	461a      	mov	r2, r3
 800781a:	f7fc febf 	bl	800459c <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf>
        }
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
 800782e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f103 0008 	add.w	r0, r3, #8
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f103 0110 	add.w	r1, r3, #16
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	1d1a      	adds	r2, r3, #4
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	f7fc fe73 	bl	800452c <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm>
        }
 8007846:	bf00      	nop
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}

0800784e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800784e:	b580      	push	{r7, lr}
 8007850:	b082      	sub	sp, #8
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f103 0008 	add.w	r0, r3, #8
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f103 0110 	add.w	r1, r3, #16
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	3304      	adds	r3, #4
 800786a:	ed97 0a00 	vldr	s0, [r7]
 800786e:	461a      	mov	r2, r3
 8007870:	f7fc fdfa 	bl	8004468 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf>
        }
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f103 0008 	add.w	r0, r3, #8
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f103 0110 	add.w	r1, r3, #16
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3304      	adds	r3, #4
 8007898:	ed97 0a00 	vldr	s0, [r7]
 800789c:	461a      	mov	r2, r3
 800789e:	f7fc fd89 	bl	80043b4 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf>
        }
 80078a2:	bf00      	nop
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b082      	sub	sp, #8
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f103 0008 	add.w	r0, r3, #8
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f103 0110 	add.w	r1, r3, #16
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	1d1a      	adds	r2, r3, #4
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	f7fc fd3b 	bl	8004340 <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm>
        }
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f103 0008 	add.w	r0, r3, #8
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f103 0110 	add.w	r1, r3, #16
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	1d1a      	adds	r2, r3, #4
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	f7fc fcf2 	bl	80042d8 <_ZN3can7signals16SensorF_OD_SdcIn3setERyS2_Rhh>
        }
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f103 0008 	add.w	r0, r3, #8
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f103 0110 	add.w	r1, r3, #16
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	1d1a      	adds	r2, r3, #4
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	f7fc fca9 	bl	8004270 <_ZN3can7signals17SensorF_OD_SdcOut3setERyS2_Rhh>
        }
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007926:	b590      	push	{r4, r7, lr}
 8007928:	b087      	sub	sp, #28
 800792a:	af02      	add	r7, sp, #8
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f103 0008 	add.w	r0, r3, #8
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f103 0110 	add.w	r1, r3, #16
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	1d1c      	adds	r4, r3, #4
 8007942:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007946:	e9cd 2300 	strd	r2, r3, [sp]
 800794a:	4622      	mov	r2, r4
 800794c:	f7fc fc57 	bl	80041fe <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy>
        }
 8007950:	bf00      	nop
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	bd90      	pop	{r4, r7, pc}

08007958 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007958:	b590      	push	{r4, r7, lr}
 800795a:	b087      	sub	sp, #28
 800795c:	af02      	add	r7, sp, #8
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f103 0008 	add.w	r0, r3, #8
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f103 0110 	add.w	r1, r3, #16
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	1d1c      	adds	r4, r3, #4
 8007974:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007978:	e9cd 2300 	strd	r2, r3, [sp]
 800797c:	4622      	mov	r2, r4
 800797e:	f7fc fc05 	bl	800418c <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy>
        }
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	bd90      	pop	{r4, r7, pc}

0800798a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800798a:	b580      	push	{r7, lr}
 800798c:	b082      	sub	sp, #8
 800798e:	af00      	add	r7, sp, #0
 8007990:	6078      	str	r0, [r7, #4]
 8007992:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f103 0008 	add.w	r0, r3, #8
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f103 0110 	add.w	r1, r3, #16
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	1d1a      	adds	r2, r3, #4
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	f7fc fbb9 	bl	800411c <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm>
        }
 80079aa:	bf00      	nop
 80079ac:	3708      	adds	r7, #8
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}

080079b2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80079b2:	b580      	push	{r7, lr}
 80079b4:	b082      	sub	sp, #8
 80079b6:	af00      	add	r7, sp, #0
 80079b8:	6078      	str	r0, [r7, #4]
 80079ba:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f103 0008 	add.w	r0, r3, #8
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f103 0110 	add.w	r1, r3, #16
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	1d1a      	adds	r2, r3, #4
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	f7fc fb6b 	bl	80040a8 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm>
        }
 80079d2:	bf00      	nop
 80079d4:	3708      	adds	r7, #8
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}

080079da <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80079da:	b580      	push	{r7, lr}
 80079dc:	b082      	sub	sp, #8
 80079de:	af00      	add	r7, sp, #0
 80079e0:	6078      	str	r0, [r7, #4]
 80079e2:	460b      	mov	r3, r1
 80079e4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f103 0008 	add.w	r0, r3, #8
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f103 0110 	add.w	r1, r3, #16
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	1d1a      	adds	r2, r3, #4
 80079f6:	78fb      	ldrb	r3, [r7, #3]
 80079f8:	f7fc fb22 	bl	8004040 <_ZN3can7signals24SensorF_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 80079fc:	bf00      	nop
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f103 0008 	add.w	r0, r3, #8
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f103 0110 	add.w	r1, r3, #16
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	1d1a      	adds	r2, r3, #4
 8007a20:	78fb      	ldrb	r3, [r7, #3]
 8007a22:	f7fc fad9 	bl	8003fd8 <_ZN3can7signals24SensorF_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f103 0008 	add.w	r0, r3, #8
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f103 0110 	add.w	r1, r3, #16
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	1d1a      	adds	r2, r3, #4
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f7fc fa8d 	bl	8003f68 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 8007a4e:	bf00      	nop
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b082      	sub	sp, #8
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	460b      	mov	r3, r1
 8007a60:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f103 0008 	add.w	r0, r3, #8
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f103 0110 	add.w	r1, r3, #16
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	1d1a      	adds	r2, r3, #4
 8007a72:	78fb      	ldrb	r3, [r7, #3]
 8007a74:	f7fc fa1c 	bl	8003eb0 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8007a78:	bf00      	nop
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f103 0008 	add.w	r0, r3, #8
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f103 0110 	add.w	r1, r3, #16
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	1d1a      	adds	r2, r3, #4
 8007a9c:	887b      	ldrh	r3, [r7, #2]
 8007a9e:	f7fc f9a5 	bl	8003dec <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f103 0008 	add.w	r0, r3, #8
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f103 0110 	add.w	r1, r3, #16
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	1d1a      	adds	r2, r3, #4
 8007ac6:	78fb      	ldrb	r3, [r7, #3]
 8007ac8:	f7fc f95c 	bl	8003d84 <_ZN3can7signals22SensorF_OD_CAN1_Status3setERyS2_Rhh>
        }
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f103 0008 	add.w	r0, r3, #8
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f103 0110 	add.w	r1, r3, #16
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	1d1a      	adds	r2, r3, #4
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	f7fc f90e 	bl	8003d10 <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8007af4:	bf00      	nop
 8007af6:	3708      	adds	r7, #8
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b082      	sub	sp, #8
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f103 0008 	add.w	r0, r3, #8
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f103 0110 	add.w	r1, r3, #16
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	1d1a      	adds	r2, r3, #4
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	f7fc f8c5 	bl	8003ca8 <_ZN3can7signals27SensorF_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b082      	sub	sp, #8
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
 8007b2e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f103 0008 	add.w	r0, r3, #8
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f103 0110 	add.w	r1, r3, #16
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	1d1a      	adds	r2, r3, #4
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	f7fc f877 	bl	8003c34 <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8007b46:	bf00      	nop
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b082      	sub	sp, #8
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
 8007b56:	460b      	mov	r3, r1
 8007b58:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f103 0008 	add.w	r0, r3, #8
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f103 0110 	add.w	r1, r3, #16
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	1d1a      	adds	r2, r3, #4
 8007b6a:	78fb      	ldrb	r3, [r7, #3]
 8007b6c:	f7fc f82e 	bl	8003bcc <_ZN3can7signals24SensorF_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8007b70:	bf00      	nop
 8007b72:	3708      	adds	r7, #8
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
 8007b80:	460b      	mov	r3, r1
 8007b82:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f103 0008 	add.w	r0, r3, #8
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f103 0110 	add.w	r1, r3, #16
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	1d1a      	adds	r2, r3, #4
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	f7fb ffe5 	bl	8003b64 <_ZN3can7signals24SensorF_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8007b9a:	bf00      	nop
 8007b9c:	3708      	adds	r7, #8
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}

08007ba2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007ba2:	b580      	push	{r7, lr}
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f103 0008 	add.w	r0, r3, #8
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f103 0110 	add.w	r1, r3, #16
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	1d1a      	adds	r2, r3, #4
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	f7fb ff99 	bl	8003af4 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 8007bc2:	bf00      	nop
 8007bc4:	3708      	adds	r7, #8
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b082      	sub	sp, #8
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f103 0008 	add.w	r0, r3, #8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f103 0110 	add.w	r1, r3, #16
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	1d1a      	adds	r2, r3, #4
 8007be6:	78fb      	ldrb	r3, [r7, #3]
 8007be8:	f7fb ff28 	bl	8003a3c <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8007bec:	bf00      	nop
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f103 0008 	add.w	r0, r3, #8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f103 0110 	add.w	r1, r3, #16
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	1d1a      	adds	r2, r3, #4
 8007c10:	887b      	ldrh	r3, [r7, #2]
 8007c12:	f7fb feb1 	bl	8003978 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8007c16:	bf00      	nop
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b082      	sub	sp, #8
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	460b      	mov	r3, r1
 8007c28:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f103 0008 	add.w	r0, r3, #8
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f103 0110 	add.w	r1, r3, #16
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	1d1a      	adds	r2, r3, #4
 8007c3a:	78fb      	ldrb	r3, [r7, #3]
 8007c3c:	f7fb fe68 	bl	8003910 <_ZN3can7signals22SensorF_OD_CAN2_Status3setERyS2_Rhh>
        }
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f103 0008 	add.w	r0, r3, #8
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f103 0110 	add.w	r1, r3, #16
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	1d1a      	adds	r2, r3, #4
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	f7fb fe1a 	bl	800389c <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8007c68:	bf00      	nop
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f103 0008 	add.w	r0, r3, #8
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f103 0110 	add.w	r1, r3, #16
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	1d1a      	adds	r2, r3, #4
 8007c8c:	78fb      	ldrb	r3, [r7, #3]
 8007c8e:	f7fb fdd1 	bl	8003834 <_ZN3can7signals27SensorF_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 8007c92:	bf00      	nop
 8007c94:	3708      	adds	r7, #8
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b082      	sub	sp, #8
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6078      	str	r0, [r7, #4]
 8007ca2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f103 0008 	add.w	r0, r3, #8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f103 0110 	add.w	r1, r3, #16
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	1d1a      	adds	r2, r3, #4
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	f7fb fd83 	bl	80037c0 <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8007cba:	bf00      	nop
 8007cbc:	3708      	adds	r7, #8
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}

08007cc2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b082      	sub	sp, #8
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f103 0008 	add.w	r0, r3, #8
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f103 0110 	add.w	r1, r3, #16
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	ed97 0a00 	vldr	s0, [r7]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f7fb fcde 	bl	80036a4 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf>
        }
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f103 0008 	add.w	r0, r3, #8
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f103 0110 	add.w	r1, r3, #16
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	1d1a      	adds	r2, r3, #4
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	f7fb fc70 	bl	80035f2 <_ZN3can7signals28SensorF_OD_TelemetryCommands3setERyS2_Rhh>
        }
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	460b      	mov	r3, r1
 8007d24:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f103 0008 	add.w	r0, r3, #8
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f103 0110 	add.w	r1, r3, #16
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	1d1a      	adds	r2, r3, #4
 8007d36:	78fb      	ldrb	r3, [r7, #3]
 8007d38:	f7fb fbf6 	bl	8003528 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh>
        }
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	460b      	mov	r3, r1
 8007d4e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f103 0008 	add.w	r0, r3, #8
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f103 0110 	add.w	r1, r3, #16
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	1d1a      	adds	r2, r3, #4
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	f7fb fb86 	bl	8003472 <_ZN3can7signals31SensorF_OD_StateMachineActivate3setERyS2_Rhh>
        }
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007d6e:	b580      	push	{r7, lr}
 8007d70:	b082      	sub	sp, #8
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
 8007d76:	460b      	mov	r3, r1
 8007d78:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f103 0008 	add.w	r0, r3, #8
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f103 0110 	add.w	r1, r3, #16
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	1d1a      	adds	r2, r3, #4
 8007d8a:	78fb      	ldrb	r3, [r7, #3]
 8007d8c:	f7fb fb16 	bl	80033bc <_ZN3can7signals24SensorF_OD_HVBatteryMode3setERyS2_Rhh>
        }
 8007d90:	bf00      	nop
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f103 0008 	add.w	r0, r3, #8
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f103 0110 	add.w	r1, r3, #16
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	3304      	adds	r3, #4
 8007db4:	ed97 0a00 	vldr	s0, [r7]
 8007db8:	461a      	mov	r2, r3
 8007dba:	f7fb fa71 	bl	80032a0 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf>
        }
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b082      	sub	sp, #8
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f103 0008 	add.w	r0, r3, #8
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f103 0110 	add.w	r1, r3, #16
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	1d1a      	adds	r2, r3, #4
 8007de2:	887b      	ldrh	r3, [r7, #2]
 8007de4:	f7fa fc4f 	bl	8002686 <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
        }
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f103 0008 	add.w	r0, r3, #8
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f103 0110 	add.w	r1, r3, #16
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	1d1a      	adds	r2, r3, #4
 8007e0c:	78fb      	ldrb	r3, [r7, #3]
 8007e0e:	f7fb f9eb 	bl	80031e8 <_ZN3can7signals21SensorF_OD_IMU_number3setERyS2_Rhh>
        }
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f103 0008 	add.w	r0, r3, #8
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f103 0110 	add.w	r1, r3, #16
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3304      	adds	r3, #4
 8007e36:	ed97 0a00 	vldr	s0, [r7]
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	f7fb f96e 	bl	800311c <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf>
        }
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f103 0008 	add.w	r0, r3, #8
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f103 0110 	add.w	r1, r3, #16
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	3304      	adds	r3, #4
 8007e64:	ed97 0a00 	vldr	s0, [r7]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f7fb f8f1 	bl	8003050 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf>
        }
 8007e6e:	bf00      	nop
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f103 0008 	add.w	r0, r3, #8
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f103 0110 	add.w	r1, r3, #16
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3304      	adds	r3, #4
 8007e92:	ed97 0a00 	vldr	s0, [r7]
 8007e96:	461a      	mov	r2, r3
 8007e98:	f7fb f874 	bl	8002f84 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf>
        }
 8007e9c:	bf00      	nop
 8007e9e:	3708      	adds	r7, #8
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b082      	sub	sp, #8
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f103 0008 	add.w	r0, r3, #8
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f103 0110 	add.w	r1, r3, #16
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	ed97 0a00 	vldr	s0, [r7]
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	f7fa fff7 	bl	8002eb8 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf>
        }
 8007eca:	bf00      	nop
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b082      	sub	sp, #8
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f103 0008 	add.w	r0, r3, #8
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f103 0110 	add.w	r1, r3, #16
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3304      	adds	r3, #4
 8007eee:	ed97 0a00 	vldr	s0, [r7]
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f7fa ff7a 	bl	8002dec <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf>
        }
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
 8007f08:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f103 0008 	add.w	r0, r3, #8
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f103 0110 	add.w	r1, r3, #16
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	ed97 0a00 	vldr	s0, [r7]
 8007f20:	461a      	mov	r2, r3
 8007f22:	f7fa fefd 	bl	8002d20 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf>
        }
 8007f26:	bf00      	nop
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f103 0008 	add.w	r0, r3, #8
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f103 0110 	add.w	r1, r3, #16
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3304      	adds	r3, #4
 8007f4a:	ed97 0a00 	vldr	s0, [r7]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	f7fa fe80 	bl	8002c54 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf>
        }
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f103 0008 	add.w	r0, r3, #8
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f103 0110 	add.w	r1, r3, #16
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	3304      	adds	r3, #4
 8007f78:	ed97 0a00 	vldr	s0, [r7]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	f7fa fe03 	bl	8002b88 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf>
        }
 8007f82:	bf00      	nop
 8007f84:	3708      	adds	r7, #8
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f103 0008 	add.w	r0, r3, #8
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f103 0110 	add.w	r1, r3, #16
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	ed97 0a00 	vldr	s0, [r7]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f7fa fd86 	bl	8002abc <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf>
        }
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f103 0008 	add.w	r0, r3, #8
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f103 0110 	add.w	r1, r3, #16
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	3304      	adds	r3, #4
 8007fd4:	ed97 0a00 	vldr	s0, [r7]
 8007fd8:	461a      	mov	r2, r3
 8007fda:	f7fa fd09 	bl	80029f0 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf>
        }
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b082      	sub	sp, #8
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f103 0008 	add.w	r0, r3, #8
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f103 0110 	add.w	r1, r3, #16
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	1d1a      	adds	r2, r3, #4
 8008002:	887b      	ldrh	r3, [r7, #2]
 8008004:	f7fa fcc5 	bl	8002992 <_ZN3can7signals31SensorF_OD_FiducialRightCounter3setERyS2_Rht>
        }
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f103 0008 	add.w	r0, r3, #8
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f103 0110 	add.w	r1, r3, #16
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	1d1a      	adds	r2, r3, #4
 800802c:	887b      	ldrh	r3, [r7, #2]
 800802e:	f7fa fc81 	bl	8002934 <_ZN3can7signals30SensorF_OD_FiducialLeftCounter3setERyS2_Rht>
        }
 8008032:	bf00      	nop
 8008034:	3708      	adds	r7, #8
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}

0800803a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800803a:	b580      	push	{r7, lr}
 800803c:	b082      	sub	sp, #8
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
 8008042:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f103 0008 	add.w	r0, r3, #8
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f103 0110 	add.w	r1, r3, #16
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3304      	adds	r3, #4
 8008056:	ed97 0a00 	vldr	s0, [r7]
 800805a:	461a      	mov	r2, r3
 800805c:	f7fa fc04 	bl	8002868 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf>
        }
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f103 0008 	add.w	r0, r3, #8
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f103 0110 	add.w	r1, r3, #16
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	3304      	adds	r3, #4
 8008084:	ed97 0a00 	vldr	s0, [r7]
 8008088:	461a      	mov	r2, r3
 800808a:	f7fa fb87 	bl	800279c <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf>
        }
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8008096:	b580      	push	{r7, lr}
 8008098:	b082      	sub	sp, #8
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
 800809e:	460b      	mov	r3, r1
 80080a0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f103 0008 	add.w	r0, r3, #8
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f103 0110 	add.w	r1, r3, #16
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	1d1a      	adds	r2, r3, #4
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	f7fa fb22 	bl	80026fc <_ZN3can7signals20SensorF_SDO_RespCode3setERyS2_Rhh>
        }
 80080b8:	bf00      	nop
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f103 0208 	add.w	r2, r3, #8
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	3310      	adds	r3, #16
 80080d2:	4619      	mov	r1, r3
 80080d4:	4610      	mov	r0, r2
 80080d6:	f7fa fafe 	bl	80026d6 <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80080da:	4603      	mov	r3, r0
        }
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f103 0208 	add.w	r2, r3, #8
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	3310      	adds	r3, #16
 80080f6:	4619      	mov	r1, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f7fc fb84 	bl	8004806 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_>
 80080fe:	4603      	mov	r3, r0
        }
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals25SensorF_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f103 0208 	add.w	r2, r3, #8
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	3310      	adds	r3, #16
 800811a:	4619      	mov	r1, r3
 800811c:	4610      	mov	r0, r2
 800811e:	f7fc fb20 	bl	8004762 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_>
 8008122:	4603      	mov	r3, r0
        }
 8008124:	4618      	mov	r0, r3
 8008126:	3708      	adds	r7, #8
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f103 0208 	add.w	r2, r3, #8
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	3310      	adds	r3, #16
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f7fc fab7 	bl	80046b4 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_>
 8008146:	4603      	mov	r3, r0
        }
 8008148:	4618      	mov	r0, r3
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f103 0208 	add.w	r2, r3, #8
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	3310      	adds	r3, #16
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f7fb fed7 	bl	8003f18 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_>
 800816a:	4603      	mov	r3, r0
        }
 800816c:	4618      	mov	r0, r3
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f103 0208 	add.w	r2, r3, #8
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3310      	adds	r3, #16
 8008186:	4619      	mov	r1, r3
 8008188:	4610      	mov	r0, r2
 800818a:	f7fb fe6a 	bl	8003e62 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_>
 800818e:	4603      	mov	r3, r0
        }
 8008190:	4618      	mov	r0, r3
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f103 0208 	add.w	r2, r3, #8
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	3310      	adds	r3, #16
 80081aa:	4619      	mov	r1, r3
 80081ac:	4610      	mov	r0, r2
 80081ae:	f7fb fc79 	bl	8003aa4 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_>
 80081b2:	4603      	mov	r3, r0
        }
 80081b4:	4618      	mov	r0, r3
 80081b6:	3708      	adds	r7, #8
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f103 0208 	add.w	r2, r3, #8
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	3310      	adds	r3, #16
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f7fb fc0c 	bl	80039ee <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_>
 80081d6:	4603      	mov	r3, r0
        }
 80081d8:	4618      	mov	r0, r3
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals27SensorF_OD_samplingIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f103 0208 	add.w	r2, r3, #8
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3310      	adds	r3, #16
 80081f2:	4619      	mov	r1, r3
 80081f4:	4610      	mov	r0, r2
 80081f6:	f7fb fab3 	bl	8003760 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_>
 80081fa:	eef0 7a40 	vmov.f32	s15, s0
        }
 80081fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_TelemetryCommandsEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f103 0208 	add.w	r2, r3, #8
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3310      	adds	r3, #16
 800821a:	4619      	mov	r1, r3
 800821c:	4610      	mov	r0, r2
 800821e:	f7fb fa1c 	bl	800365a <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_>
 8008222:	4603      	mov	r3, r0
        }
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f103 0208 	add.w	r2, r3, #8
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3310      	adds	r3, #16
 800823e:	4619      	mov	r1, r3
 8008240:	4610      	mov	r0, r2
 8008242:	f7fb f9af 	bl	80035a4 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_>
 8008246:	4603      	mov	r3, r0
        }
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineActivateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f103 0208 	add.w	r2, r3, #8
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	3310      	adds	r3, #16
 8008262:	4619      	mov	r1, r3
 8008264:	4610      	mov	r0, r2
 8008266:	f7fb f938 	bl	80034da <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_>
 800826a:	4603      	mov	r3, r0
        }
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_HVBatteryModeEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f103 0208 	add.w	r2, r3, #8
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3310      	adds	r3, #16
 8008286:	4619      	mov	r1, r3
 8008288:	4610      	mov	r0, r2
 800828a:	f7fb f8cb 	bl	8003424 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_>
 800828e:	4603      	mov	r3, r0
        }
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderWheelDiameterEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f103 0208 	add.w	r2, r3, #8
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3310      	adds	r3, #16
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f7fb f853 	bl	8003358 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_>
 80082b2:	eef0 7a40 	vmov.f32	s15, s0
        }
 80082b6:	eeb0 0a67 	vmov.f32	s0, s15
 80082ba:	3708      	adds	r7, #8
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderResetPositionEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f103 0208 	add.w	r2, r3, #8
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3310      	adds	r3, #16
 80082d2:	4619      	mov	r1, r3
 80082d4:	4610      	mov	r0, r2
 80082d6:	f7fa ffbb 	bl	8003250 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_>
 80082da:	4603      	mov	r3, r0
        }
 80082dc:	4618      	mov	r0, r3
 80082de:	3708      	adds	r7, #8
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals19SensorF_OD_SetResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b082      	sub	sp, #8
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f103 0208 	add.w	r2, r3, #8
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	3310      	adds	r3, #16
 80082f6:	4619      	mov	r1, r3
 80082f8:	4610      	mov	r0, r2
 80082fa:	f7fa fa29 	bl	8002750 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_>
 80082fe:	4603      	mov	r3, r0
        }
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <_Z41__static_initialization_and_destruction_0ii>:
}
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2b01      	cmp	r3, #1
 8008316:	f040 816e 	bne.w	80085f6 <_Z41__static_initialization_and_destruction_0ii+0x2ee>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008320:	4293      	cmp	r3, r2
 8008322:	f040 8168 	bne.w	80085f6 <_Z41__static_initialization_and_destruction_0ii+0x2ee>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 8008326:	2000      	movs	r0, #0
 8008328:	f00c fe8d 	bl	8015046 <osMutexNew>
 800832c:	4603      	mov	r3, r0
 800832e:	4ab4      	ldr	r2, [pc, #720]	; (8008600 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8008330:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 8008332:	2000      	movs	r0, #0
 8008334:	f00c fe87 	bl	8015046 <osMutexNew>
 8008338:	4603      	mov	r3, r0
 800833a:	4ab2      	ldr	r2, [pc, #712]	; (8008604 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 800833c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 800833e:	2000      	movs	r0, #0
 8008340:	f00c fe81 	bl	8015046 <osMutexNew>
 8008344:	4603      	mov	r3, r0
 8008346:	4ab0      	ldr	r2, [pc, #704]	; (8008608 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8008348:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 800834a:	2000      	movs	r0, #0
 800834c:	f00c fe7b 	bl	8015046 <osMutexNew>
 8008350:	4603      	mov	r3, r0
 8008352:	4aae      	ldr	r2, [pc, #696]	; (800860c <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8008354:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 8008356:	2000      	movs	r0, #0
 8008358:	f00c fe75 	bl	8015046 <osMutexNew>
 800835c:	4603      	mov	r3, r0
 800835e:	4aac      	ldr	r2, [pc, #688]	; (8008610 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8008360:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 8008362:	2000      	movs	r0, #0
 8008364:	f00c fe6f 	bl	8015046 <osMutexNew>
 8008368:	4603      	mov	r3, r0
 800836a:	4aaa      	ldr	r2, [pc, #680]	; (8008614 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800836c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 800836e:	2000      	movs	r0, #0
 8008370:	f00c fe69 	bl	8015046 <osMutexNew>
 8008374:	4603      	mov	r3, r0
 8008376:	4aa8      	ldr	r2, [pc, #672]	; (8008618 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8008378:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 800837a:	2000      	movs	r0, #0
 800837c:	f00c fe63 	bl	8015046 <osMutexNew>
 8008380:	4603      	mov	r3, r0
 8008382:	4aa6      	ldr	r2, [pc, #664]	; (800861c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8008384:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 8008386:	2000      	movs	r0, #0
 8008388:	f00c fe5d 	bl	8015046 <osMutexNew>
 800838c:	4603      	mov	r3, r0
 800838e:	4aa4      	ldr	r2, [pc, #656]	; (8008620 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8008390:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 8008392:	2000      	movs	r0, #0
 8008394:	f00c fe57 	bl	8015046 <osMutexNew>
 8008398:	4603      	mov	r3, r0
 800839a:	4aa2      	ldr	r2, [pc, #648]	; (8008624 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800839c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 800839e:	2000      	movs	r0, #0
 80083a0:	f00c fe51 	bl	8015046 <osMutexNew>
 80083a4:	4603      	mov	r3, r0
 80083a6:	4aa0      	ldr	r2, [pc, #640]	; (8008628 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 80083a8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 80083aa:	2000      	movs	r0, #0
 80083ac:	f00c fe4b 	bl	8015046 <osMutexNew>
 80083b0:	4603      	mov	r3, r0
 80083b2:	4a9e      	ldr	r2, [pc, #632]	; (800862c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 80083b4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 80083b6:	2000      	movs	r0, #0
 80083b8:	f00c fe45 	bl	8015046 <osMutexNew>
 80083bc:	4603      	mov	r3, r0
 80083be:	4a9c      	ldr	r2, [pc, #624]	; (8008630 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 80083c0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 80083c2:	2000      	movs	r0, #0
 80083c4:	f00c fe3f 	bl	8015046 <osMutexNew>
 80083c8:	4603      	mov	r3, r0
 80083ca:	4a9a      	ldr	r2, [pc, #616]	; (8008634 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 80083cc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 80083ce:	2000      	movs	r0, #0
 80083d0:	f00c fe39 	bl	8015046 <osMutexNew>
 80083d4:	4603      	mov	r3, r0
 80083d6:	4a98      	ldr	r2, [pc, #608]	; (8008638 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 80083d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 80083da:	2000      	movs	r0, #0
 80083dc:	f00c fe33 	bl	8015046 <osMutexNew>
 80083e0:	4603      	mov	r3, r0
 80083e2:	4a96      	ldr	r2, [pc, #600]	; (800863c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80083e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 80083e6:	2000      	movs	r0, #0
 80083e8:	f00c fe2d 	bl	8015046 <osMutexNew>
 80083ec:	4603      	mov	r3, r0
 80083ee:	4a94      	ldr	r2, [pc, #592]	; (8008640 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80083f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 80083f2:	2000      	movs	r0, #0
 80083f4:	f00c fe27 	bl	8015046 <osMutexNew>
 80083f8:	4603      	mov	r3, r0
 80083fa:	4a92      	ldr	r2, [pc, #584]	; (8008644 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80083fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 80083fe:	2000      	movs	r0, #0
 8008400:	f00c fe21 	bl	8015046 <osMutexNew>
 8008404:	4603      	mov	r3, r0
 8008406:	4a90      	ldr	r2, [pc, #576]	; (8008648 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8008408:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 800840a:	2000      	movs	r0, #0
 800840c:	f00c fe1b 	bl	8015046 <osMutexNew>
 8008410:	4603      	mov	r3, r0
 8008412:	4a8e      	ldr	r2, [pc, #568]	; (800864c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8008414:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 8008416:	2000      	movs	r0, #0
 8008418:	f00c fe15 	bl	8015046 <osMutexNew>
 800841c:	4603      	mov	r3, r0
 800841e:	4a8c      	ldr	r2, [pc, #560]	; (8008650 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8008420:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 8008422:	2000      	movs	r0, #0
 8008424:	f00c fe0f 	bl	8015046 <osMutexNew>
 8008428:	4603      	mov	r3, r0
 800842a:	4a8a      	ldr	r2, [pc, #552]	; (8008654 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800842c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 800842e:	2000      	movs	r0, #0
 8008430:	f00c fe09 	bl	8015046 <osMutexNew>
 8008434:	4603      	mov	r3, r0
 8008436:	4a88      	ldr	r2, [pc, #544]	; (8008658 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8008438:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 800843a:	2000      	movs	r0, #0
 800843c:	f00c fe03 	bl	8015046 <osMutexNew>
 8008440:	4603      	mov	r3, r0
 8008442:	4a86      	ldr	r2, [pc, #536]	; (800865c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8008444:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8008446:	2000      	movs	r0, #0
 8008448:	f00c fdfd 	bl	8015046 <osMutexNew>
 800844c:	4603      	mov	r3, r0
 800844e:	4a84      	ldr	r2, [pc, #528]	; (8008660 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8008450:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 8008452:	2000      	movs	r0, #0
 8008454:	f00c fdf7 	bl	8015046 <osMutexNew>
 8008458:	4603      	mov	r3, r0
 800845a:	4a82      	ldr	r2, [pc, #520]	; (8008664 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800845c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 800845e:	2000      	movs	r0, #0
 8008460:	f00c fdf1 	bl	8015046 <osMutexNew>
 8008464:	4603      	mov	r3, r0
 8008466:	4a80      	ldr	r2, [pc, #512]	; (8008668 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8008468:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 800846a:	2000      	movs	r0, #0
 800846c:	f00c fdeb 	bl	8015046 <osMutexNew>
 8008470:	4603      	mov	r3, r0
 8008472:	4a7e      	ldr	r2, [pc, #504]	; (800866c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8008474:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 8008476:	2000      	movs	r0, #0
 8008478:	f00c fde5 	bl	8015046 <osMutexNew>
 800847c:	4603      	mov	r3, r0
 800847e:	4a7c      	ldr	r2, [pc, #496]	; (8008670 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8008480:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 8008482:	2000      	movs	r0, #0
 8008484:	f00c fddf 	bl	8015046 <osMutexNew>
 8008488:	4603      	mov	r3, r0
 800848a:	4a7a      	ldr	r2, [pc, #488]	; (8008674 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800848c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 800848e:	2000      	movs	r0, #0
 8008490:	f00c fdd9 	bl	8015046 <osMutexNew>
 8008494:	4603      	mov	r3, r0
 8008496:	4a78      	ldr	r2, [pc, #480]	; (8008678 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8008498:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 800849a:	2000      	movs	r0, #0
 800849c:	f00c fdd3 	bl	8015046 <osMutexNew>
 80084a0:	4603      	mov	r3, r0
 80084a2:	4a76      	ldr	r2, [pc, #472]	; (800867c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 80084a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 80084a6:	2000      	movs	r0, #0
 80084a8:	f00c fdcd 	bl	8015046 <osMutexNew>
 80084ac:	4603      	mov	r3, r0
 80084ae:	4a74      	ldr	r2, [pc, #464]	; (8008680 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 80084b0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 80084b2:	2000      	movs	r0, #0
 80084b4:	f00c fdc7 	bl	8015046 <osMutexNew>
 80084b8:	4603      	mov	r3, r0
 80084ba:	4a72      	ldr	r2, [pc, #456]	; (8008684 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 80084bc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 80084be:	2000      	movs	r0, #0
 80084c0:	f00c fdc1 	bl	8015046 <osMutexNew>
 80084c4:	4603      	mov	r3, r0
 80084c6:	4a70      	ldr	r2, [pc, #448]	; (8008688 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 80084c8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 80084ca:	2000      	movs	r0, #0
 80084cc:	f00c fdbb 	bl	8015046 <osMutexNew>
 80084d0:	4603      	mov	r3, r0
 80084d2:	4a6e      	ldr	r2, [pc, #440]	; (800868c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 80084d4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 80084d6:	2000      	movs	r0, #0
 80084d8:	f00c fdb5 	bl	8015046 <osMutexNew>
 80084dc:	4603      	mov	r3, r0
 80084de:	4a6c      	ldr	r2, [pc, #432]	; (8008690 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 80084e0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_samplingInterval         = osMutexNew(NULL);
 80084e2:	2000      	movs	r0, #0
 80084e4:	f00c fdaf 	bl	8015046 <osMutexNew>
 80084e8:	4603      	mov	r3, r0
 80084ea:	4a6a      	ldr	r2, [pc, #424]	; (8008694 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80084ec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_TelemetryCommands        = osMutexNew(NULL);
 80084ee:	2000      	movs	r0, #0
 80084f0:	f00c fda9 	bl	8015046 <osMutexNew>
 80084f4:	4603      	mov	r3, r0
 80084f6:	4a68      	ldr	r2, [pc, #416]	; (8008698 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80084f8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineInterval     = osMutexNew(NULL);
 80084fa:	2000      	movs	r0, #0
 80084fc:	f00c fda3 	bl	8015046 <osMutexNew>
 8008500:	4603      	mov	r3, r0
 8008502:	4a66      	ldr	r2, [pc, #408]	; (800869c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8008504:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineActivate     = osMutexNew(NULL);
 8008506:	2000      	movs	r0, #0
 8008508:	f00c fd9d 	bl	8015046 <osMutexNew>
 800850c:	4603      	mov	r3, r0
 800850e:	4a64      	ldr	r2, [pc, #400]	; (80086a0 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8008510:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HVBatteryMode            = osMutexNew(NULL);
 8008512:	2000      	movs	r0, #0
 8008514:	f00c fd97 	bl	8015046 <osMutexNew>
 8008518:	4603      	mov	r3, r0
 800851a:	4a62      	ldr	r2, [pc, #392]	; (80086a4 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800851c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderWheelDiameter     = osMutexNew(NULL);
 800851e:	2000      	movs	r0, #0
 8008520:	f00c fd91 	bl	8015046 <osMutexNew>
 8008524:	4603      	mov	r3, r0
 8008526:	4a60      	ldr	r2, [pc, #384]	; (80086a8 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8008528:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderResetPosition     = osMutexNew(NULL);
 800852a:	2000      	movs	r0, #0
 800852c:	f00c fd8b 	bl	8015046 <osMutexNew>
 8008530:	4603      	mov	r3, r0
 8008532:	4a5e      	ldr	r2, [pc, #376]	; (80086ac <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8008534:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SetReset                 = osMutexNew(NULL);
 8008536:	2000      	movs	r0, #0
 8008538:	f00c fd85 	bl	8015046 <osMutexNew>
 800853c:	4603      	mov	r3, r0
 800853e:	4a5c      	ldr	r2, [pc, #368]	; (80086b0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8008540:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_number               = osMutexNew(NULL);
 8008542:	2000      	movs	r0, #0
 8008544:	f00c fd7f 	bl	8015046 <osMutexNew>
 8008548:	4603      	mov	r3, r0
 800854a:	4a5a      	ldr	r2, [pc, #360]	; (80086b4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800854c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU1_Temperature         = osMutexNew(NULL);
 800854e:	2000      	movs	r0, #0
 8008550:	f00c fd79 	bl	8015046 <osMutexNew>
 8008554:	4603      	mov	r3, r0
 8008556:	4a58      	ldr	r2, [pc, #352]	; (80086b8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008558:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU2_Temperature         = osMutexNew(NULL);
 800855a:	2000      	movs	r0, #0
 800855c:	f00c fd73 	bl	8015046 <osMutexNew>
 8008560:	4603      	mov	r3, r0
 8008562:	4a56      	ldr	r2, [pc, #344]	; (80086bc <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8008564:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU3_Temperature         = osMutexNew(NULL);
 8008566:	2000      	movs	r0, #0
 8008568:	f00c fd6d 	bl	8015046 <osMutexNew>
 800856c:	4603      	mov	r3, r0
 800856e:	4a54      	ldr	r2, [pc, #336]	; (80086c0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8008570:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelX               = osMutexNew(NULL);
 8008572:	2000      	movs	r0, #0
 8008574:	f00c fd67 	bl	8015046 <osMutexNew>
 8008578:	4603      	mov	r3, r0
 800857a:	4a52      	ldr	r2, [pc, #328]	; (80086c4 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800857c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelY               = osMutexNew(NULL);
 800857e:	2000      	movs	r0, #0
 8008580:	f00c fd61 	bl	8015046 <osMutexNew>
 8008584:	4603      	mov	r3, r0
 8008586:	4a50      	ldr	r2, [pc, #320]	; (80086c8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8008588:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelZ               = osMutexNew(NULL);
 800858a:	2000      	movs	r0, #0
 800858c:	f00c fd5b 	bl	8015046 <osMutexNew>
 8008590:	4603      	mov	r3, r0
 8008592:	4a4e      	ldr	r2, [pc, #312]	; (80086cc <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8008594:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroX                = osMutexNew(NULL);
 8008596:	2000      	movs	r0, #0
 8008598:	f00c fd55 	bl	8015046 <osMutexNew>
 800859c:	4603      	mov	r3, r0
 800859e:	4a4c      	ldr	r2, [pc, #304]	; (80086d0 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 80085a0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroY                = osMutexNew(NULL);
 80085a2:	2000      	movs	r0, #0
 80085a4:	f00c fd4f 	bl	8015046 <osMutexNew>
 80085a8:	4603      	mov	r3, r0
 80085aa:	4a4a      	ldr	r2, [pc, #296]	; (80086d4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 80085ac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroZ                = osMutexNew(NULL);
 80085ae:	2000      	movs	r0, #0
 80085b0:	f00c fd49 	bl	8015046 <osMutexNew>
 80085b4:	4603      	mov	r3, r0
 80085b6:	4a48      	ldr	r2, [pc, #288]	; (80086d8 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 80085b8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CoolingPressure          = osMutexNew(NULL);
 80085ba:	2000      	movs	r0, #0
 80085bc:	f00c fd43 	bl	8015046 <osMutexNew>
 80085c0:	4603      	mov	r3, r0
 80085c2:	4a46      	ldr	r2, [pc, #280]	; (80086dc <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 80085c4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_FiducialRightCounter     = osMutexNew(NULL);
 80085c6:	2000      	movs	r0, #0
 80085c8:	f00c fd3d 	bl	8015046 <osMutexNew>
 80085cc:	4603      	mov	r3, r0
 80085ce:	4a44      	ldr	r2, [pc, #272]	; (80086e0 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 80085d0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_FiducialLeftCounter      = osMutexNew(NULL);
 80085d2:	2000      	movs	r0, #0
 80085d4:	f00c fd37 	bl	8015046 <osMutexNew>
 80085d8:	4603      	mov	r3, r0
 80085da:	4a42      	ldr	r2, [pc, #264]	; (80086e4 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 80085dc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Position                 = osMutexNew(NULL);
 80085de:	2000      	movs	r0, #0
 80085e0:	f00c fd31 	bl	8015046 <osMutexNew>
 80085e4:	4603      	mov	r3, r0
 80085e6:	4a40      	ldr	r2, [pc, #256]	; (80086e8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80085e8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Velocity                 = osMutexNew(NULL);
 80085ea:	2000      	movs	r0, #0
 80085ec:	f00c fd2b 	bl	8015046 <osMutexNew>
 80085f0:	4603      	mov	r3, r0
 80085f2:	4a3e      	ldr	r2, [pc, #248]	; (80086ec <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80085f4:	6013      	str	r3, [r2, #0]
}
 80085f6:	bf00      	nop
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	20000860 	.word	0x20000860
 8008604:	20000864 	.word	0x20000864
 8008608:	20000868 	.word	0x20000868
 800860c:	2000086c 	.word	0x2000086c
 8008610:	20000870 	.word	0x20000870
 8008614:	20000874 	.word	0x20000874
 8008618:	20000878 	.word	0x20000878
 800861c:	2000087c 	.word	0x2000087c
 8008620:	20000880 	.word	0x20000880
 8008624:	20000884 	.word	0x20000884
 8008628:	20000888 	.word	0x20000888
 800862c:	2000088c 	.word	0x2000088c
 8008630:	20000890 	.word	0x20000890
 8008634:	20000894 	.word	0x20000894
 8008638:	20000898 	.word	0x20000898
 800863c:	2000089c 	.word	0x2000089c
 8008640:	200008a0 	.word	0x200008a0
 8008644:	200008a4 	.word	0x200008a4
 8008648:	200008a8 	.word	0x200008a8
 800864c:	200008ac 	.word	0x200008ac
 8008650:	200008b0 	.word	0x200008b0
 8008654:	200008b4 	.word	0x200008b4
 8008658:	200008b8 	.word	0x200008b8
 800865c:	200008bc 	.word	0x200008bc
 8008660:	200008c0 	.word	0x200008c0
 8008664:	200008c4 	.word	0x200008c4
 8008668:	200008c8 	.word	0x200008c8
 800866c:	200008cc 	.word	0x200008cc
 8008670:	200008d0 	.word	0x200008d0
 8008674:	200008d4 	.word	0x200008d4
 8008678:	200008d8 	.word	0x200008d8
 800867c:	200008dc 	.word	0x200008dc
 8008680:	200008e0 	.word	0x200008e0
 8008684:	200008e4 	.word	0x200008e4
 8008688:	200008e8 	.word	0x200008e8
 800868c:	200008ec 	.word	0x200008ec
 8008690:	200008f0 	.word	0x200008f0
 8008694:	200008f4 	.word	0x200008f4
 8008698:	200008f8 	.word	0x200008f8
 800869c:	200008fc 	.word	0x200008fc
 80086a0:	20000900 	.word	0x20000900
 80086a4:	20000904 	.word	0x20000904
 80086a8:	20000908 	.word	0x20000908
 80086ac:	2000090c 	.word	0x2000090c
 80086b0:	20000910 	.word	0x20000910
 80086b4:	20000914 	.word	0x20000914
 80086b8:	20000918 	.word	0x20000918
 80086bc:	2000091c 	.word	0x2000091c
 80086c0:	20000920 	.word	0x20000920
 80086c4:	20000924 	.word	0x20000924
 80086c8:	20000928 	.word	0x20000928
 80086cc:	2000092c 	.word	0x2000092c
 80086d0:	20000930 	.word	0x20000930
 80086d4:	20000934 	.word	0x20000934
 80086d8:	20000938 	.word	0x20000938
 80086dc:	2000093c 	.word	0x2000093c
 80086e0:	20000940 	.word	0x20000940
 80086e4:	20000944 	.word	0x20000944
 80086e8:	20000948 	.word	0x20000948
 80086ec:	2000094c 	.word	0x2000094c

080086f0 <_GLOBAL__sub_I_OD_NodeID>:
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80086f8:	2001      	movs	r0, #1
 80086fa:	f7ff fe05 	bl	8008308 <_Z41__static_initialization_and_destruction_0ii>
 80086fe:	bd80      	pop	{r7, pc}

08008700 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
 8008708:	6039      	str	r1, [r7, #0]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	4618      	mov	r0, r3
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4618      	mov	r0, r3
 8008724:	370c      	adds	r7, #12
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800872e:	b480      	push	{r7}
 8008730:	b083      	sub	sp, #12
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4618      	mov	r0, r3
 8008750:	f7f8 fe7c 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 800875e:	b5b0      	push	{r4, r5, r7, lr}
 8008760:	b082      	sub	sp, #8
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	240f      	movs	r4, #15
 800876a:	461d      	mov	r5, r3
 800876c:	2c00      	cmp	r4, #0
 800876e:	db05      	blt.n	800877c <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 8008770:	4628      	mov	r0, r5
 8008772:	f000 fa83 	bl	8008c7c <_ZNSt8functionIFvtEEC1Ev>
 8008776:	3510      	adds	r5, #16
 8008778:	3c01      	subs	r4, #1
 800877a:	e7f7      	b.n	800876c <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2200      	movs	r2, #0
 8008780:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bdb0      	pop	{r4, r5, r7, pc}

0800878e <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 800878e:	b590      	push	{r4, r7, lr}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00a      	beq.n	80087b2 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	429c      	cmp	r4, r3
 80087a6:	d004      	beq.n	80087b2 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 80087a8:	3c10      	subs	r4, #16
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7ff ffca 	bl	8008744 <_ZNSt8functionIFvtEED1Ev>
 80087b0:	e7f7      	b.n	80087a2 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4618      	mov	r0, r3
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd90      	pop	{r4, r7, pc}

080087bc <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 80087bc:	b580      	push	{r7, lr}
 80087be:	af00      	add	r7, sp, #0
 80087c0:	4801      	ldr	r0, [pc, #4]	; (80087c8 <__tcf_0+0xc>)
 80087c2:	f7ff ffe4 	bl	800878e <_ZN23GPIOExtiCallbackHandlerD1Ev>
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	20000950 	.word	0x20000950

080087cc <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 80087d0:	4b12      	ldr	r3, [pc, #72]	; (800881c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 80087d2:	781b      	ldrb	r3, [r3, #0]
 80087d4:	f3bf 8f5b 	dmb	ish
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	bf0c      	ite	eq
 80087e2:	2301      	moveq	r3, #1
 80087e4:	2300      	movne	r3, #0
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d013      	beq.n	8008814 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 80087ec:	480b      	ldr	r0, [pc, #44]	; (800881c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 80087ee:	f010 fe81 	bl	80194f4 <__cxa_guard_acquire>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	bf14      	ite	ne
 80087f8:	2301      	movne	r3, #1
 80087fa:	2300      	moveq	r3, #0
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d008      	beq.n	8008814 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8008802:	4807      	ldr	r0, [pc, #28]	; (8008820 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 8008804:	f7ff ffab 	bl	800875e <_ZN23GPIOExtiCallbackHandlerC1Ev>
 8008808:	4806      	ldr	r0, [pc, #24]	; (8008824 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 800880a:	f011 f8d4 	bl	80199b6 <atexit>
 800880e:	4803      	ldr	r0, [pc, #12]	; (800881c <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8008810:	f010 fe7c 	bl	801950c <__cxa_guard_release>
		return instance;
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 8008816:	4618      	mov	r0, r3
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000a54 	.word	0x20000a54
 8008820:	20000950 	.word	0x20000950
 8008824:	080087bd 	.word	0x080087bd

08008828 <_ZN23GPIOExtiCallbackHandler16registerCallbackESt8functionIFvtEE>:
	unsigned int registerCallback(std::function<void(uint16_t)> isr) {
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008838:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008840:	1c59      	adds	r1, r3, #1
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8008848:	011b      	lsls	r3, r3, #4
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	4413      	add	r3, r2
 800884e:	6839      	ldr	r1, [r7, #0]
 8008850:	4618      	mov	r0, r3
 8008852:	f000 fa20 	bl	8008c96 <_ZNSt8functionIFvtEEaSERKS1_>
		return id;
 8008856:	68fb      	ldr	r3, [r7, #12]
	}
 8008858:	4618      	mov	r0, r3
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <_ZNSt8functionIFvbEED1Ev>:
 8008860:	b580      	push	{r7, lr}
 8008862:	b082      	sub	sp, #8
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4618      	mov	r0, r3
 800886c:	f7f8 fdee 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt>:
class GPIOExtiController {
public:
	explicit GPIOExtiController(GPIO_TypeDef *port, uint16_t pin) :
			m_port(port), m_pin(pin) {
		m_extiIsrId = GPIOExtiCallbackHandler::getInstance().registerCallback(
				[&](uint16_t pin) {
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	807b      	strh	r3, [r7, #2]
					if (m_extiCallback != nullptr && m_pin == pin) {
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	330c      	adds	r3, #12
 800888c:	2100      	movs	r1, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f000 fa2a 	bl	8008ce8 <_ZStneIvJbEEbRKSt8functionIFT_DpT0_EEDn>
 8008894:	4603      	mov	r3, r0
 8008896:	2b00      	cmp	r3, #0
 8008898:	d007      	beq.n	80088aa <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x30>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	889b      	ldrh	r3, [r3, #4]
 80088a0:	887a      	ldrh	r2, [r7, #2]
 80088a2:	429a      	cmp	r2, r3
 80088a4:	d101      	bne.n	80088aa <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x30>
 80088a6:	2301      	movs	r3, #1
 80088a8:	e000      	b.n	80088ac <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x32>
 80088aa:	2300      	movs	r3, #0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d019      	beq.n	80088e4 <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt+0x6a>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
						GPIO_PinState state = HAL_GPIO_ReadPin(m_port, m_pin);
 80088b4:	681a      	ldr	r2, [r3, #0]
					if (m_extiCallback != nullptr && m_pin == pin) {
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
						GPIO_PinState state = HAL_GPIO_ReadPin(m_port, m_pin);
 80088ba:	889b      	ldrh	r3, [r3, #4]
 80088bc:	4619      	mov	r1, r3
 80088be:	4610      	mov	r0, r2
 80088c0:	f007 fd48 	bl	8010354 <HAL_GPIO_ReadPin>
 80088c4:	4603      	mov	r3, r0
 80088c6:	73fb      	strb	r3, [r7, #15]
					if (m_extiCallback != nullptr && m_pin == pin) {
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
						m_extiCallback(state == GPIO_PIN_SET);
 80088cc:	f103 020c 	add.w	r2, r3, #12
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	bf0c      	ite	eq
 80088d6:	2301      	moveq	r3, #1
 80088d8:	2300      	movne	r3, #0
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	4619      	mov	r1, r3
 80088de:	4610      	mov	r0, r2
 80088e0:	f000 fa0f 	bl	8008d02 <_ZNKSt8functionIFvbEEclEb>
					}
				});
 80088e4:	bf00      	nop
 80088e6:	3710      	adds	r7, #16
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}

080088ec <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>:
	explicit GPIOExtiController(GPIO_TypeDef *port, uint16_t pin) :
 80088ec:	b590      	push	{r4, r7, lr}
 80088ee:	b089      	sub	sp, #36	; 0x24
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	60f8      	str	r0, [r7, #12]
 80088f4:	60b9      	str	r1, [r7, #8]
 80088f6:	4613      	mov	r3, r2
 80088f8:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	68ba      	ldr	r2, [r7, #8]
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	88fa      	ldrh	r2, [r7, #6]
 8008904:	809a      	strh	r2, [r3, #4]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	330c      	adds	r3, #12
 800890a:	2100      	movs	r1, #0
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f9dd 	bl	8008ccc <_ZNSt8functionIFvbEEC1EDn>
		m_extiIsrId = GPIOExtiCallbackHandler::getInstance().registerCallback(
 8008912:	f7ff ff5b 	bl	80087cc <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 8008916:	4604      	mov	r4, r0
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	f107 0310 	add.w	r3, r7, #16
 800891e:	4611      	mov	r1, r2
 8008920:	4618      	mov	r0, r3
 8008922:	f000 fa0d 	bl	8008d40 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_>
 8008926:	f107 0310 	add.w	r3, r7, #16
 800892a:	4619      	mov	r1, r3
 800892c:	4620      	mov	r0, r4
 800892e:	f7ff ff7b 	bl	8008828 <_ZN23GPIOExtiCallbackHandler16registerCallbackESt8functionIFvtEE>
 8008932:	4602      	mov	r2, r0
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	609a      	str	r2, [r3, #8]
 8008938:	f107 0310 	add.w	r3, r7, #16
 800893c:	4618      	mov	r0, r3
 800893e:	f7ff ff01 	bl	8008744 <_ZNSt8functionIFvtEED1Ev>
	}
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	4618      	mov	r0, r3
 8008946:	3724      	adds	r7, #36	; 0x24
 8008948:	46bd      	mov	sp, r7
 800894a:	bd90      	pop	{r4, r7, pc}

0800894c <_ZN18GPIOExtiController15setExtiCallbackESt8functionIFvbEE>:
	~GPIOExtiController() {
		GPIOExtiCallbackHandler::getInstance().unregisterCallback(m_extiIsrId);
	}
	void setExtiCallback(std::function<void(bool)> extiCallback) {
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
		m_extiCallback = extiCallback;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	330c      	adds	r3, #12
 800895a:	6839      	ldr	r1, [r7, #0]
 800895c:	4618      	mov	r0, r3
 800895e:	f000 fa19 	bl	8008d94 <_ZNSt8functionIFvbEEaSERKS1_>
	}
 8008962:	bf00      	nop
 8008964:	3708      	adds	r7, #8
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>:
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4618      	mov	r0, r3
 8008976:	f7f8 fd69 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4618      	mov	r0, r3
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>:
			m_listeners[i](htim);
		}
	}

private:
	TimPeriodElapsedCallbackHandler() = default;
 8008984:	b5b0      	push	{r4, r5, r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	240f      	movs	r4, #15
 8008990:	461d      	mov	r5, r3
 8008992:	2c00      	cmp	r4, #0
 8008994:	db05      	blt.n	80089a2 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0x1e>
 8008996:	4628      	mov	r0, r5
 8008998:	f000 fa17 	bl	8008dca <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>
 800899c:	3510      	adds	r5, #16
 800899e:	3c01      	subs	r4, #1
 80089a0:	e7f7      	b.n	8008992 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0xe>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bdb0      	pop	{r4, r5, r7, pc}

080089b4 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>:
class TimPeriodElapsedCallbackHandler {
 80089b4:	b590      	push	{r4, r7, lr}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00a      	beq.n	80089d8 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	429c      	cmp	r4, r3
 80089cc:	d004      	beq.n	80089d8 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 80089ce:	3c10      	subs	r4, #16
 80089d0:	4620      	mov	r0, r4
 80089d2:	f7ff ffca 	bl	800896a <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
 80089d6:	e7f7      	b.n	80089c8 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x14>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	4618      	mov	r0, r3
 80089dc:	370c      	adds	r7, #12
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd90      	pop	{r4, r7, pc}
	...

080089e4 <__tcf_1>:
		static TimPeriodElapsedCallbackHandler instance;
 80089e4:	b580      	push	{r7, lr}
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	4801      	ldr	r0, [pc, #4]	; (80089f0 <__tcf_1+0xc>)
 80089ea:	f7ff ffe3 	bl	80089b4 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	20000a58 	.word	0x20000a58

080089f4 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>:
	static TimPeriodElapsedCallbackHandler& getInstance() {
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
		static TimPeriodElapsedCallbackHandler instance;
 80089f8:	4b12      	ldr	r3, [pc, #72]	; (8008a44 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	f3bf 8f5b 	dmb	ish
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	bf0c      	ite	eq
 8008a0a:	2301      	moveq	r3, #1
 8008a0c:	2300      	movne	r3, #0
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d013      	beq.n	8008a3c <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8008a14:	480b      	ldr	r0, [pc, #44]	; (8008a44 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8008a16:	f010 fd6d 	bl	80194f4 <__cxa_guard_acquire>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bf14      	ite	ne
 8008a20:	2301      	movne	r3, #1
 8008a22:	2300      	moveq	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d008      	beq.n	8008a3c <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8008a2a:	4807      	ldr	r0, [pc, #28]	; (8008a48 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
 8008a2c:	f7ff ffaa 	bl	8008984 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>
 8008a30:	4806      	ldr	r0, [pc, #24]	; (8008a4c <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x58>)
 8008a32:	f010 ffc0 	bl	80199b6 <atexit>
 8008a36:	4803      	ldr	r0, [pc, #12]	; (8008a44 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8008a38:	f010 fd68 	bl	801950c <__cxa_guard_release>
		return instance;
 8008a3c:	4b02      	ldr	r3, [pc, #8]	; (8008a48 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
	}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20000b5c 	.word	0x20000b5c
 8008a48:	20000a58 	.word	0x20000a58
 8008a4c:	080089e5 	.word	0x080089e5

08008a50 <_ZN31TimPeriodElapsedCallbackHandler16registerCallbackESt8functionIFvP17TIM_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(TIM_HandleTypeDef*)> isr) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008a60:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8008a68:	1c59      	adds	r1, r3, #1
 8008a6a:	687a      	ldr	r2, [r7, #4]
 8008a6c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8008a70:	011b      	lsls	r3, r3, #4
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	4413      	add	r3, r2
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f000 f9b3 	bl	8008de4 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEaSERKS3_>
		return id;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
	}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_>:

class Timer {
public:
	explicit Timer(TIM_HandleTypeDef *htim) :
			m_htim(htim) {
		m_cpltIsr = TimPeriodElapsedCallbackHandler::getInstance().registerCallback([&](TIM_HandleTypeDef* htim){
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
			if(m_htim == htim){
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	683a      	ldr	r2, [r7, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d104      	bne.n	8008aa8 <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_+0x20>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
				m_overflow++;
 8008aa2:	685a      	ldr	r2, [r3, #4]
 8008aa4:	3201      	adds	r2, #1
 8008aa6:	605a      	str	r2, [r3, #4]
			}
		});
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <_ZN5TimerC1EP17TIM_HandleTypeDef>:
	explicit Timer(TIM_HandleTypeDef *htim) :
 8008ab4:	b590      	push	{r4, r7, lr}
 8008ab6:	b087      	sub	sp, #28
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
			m_htim(htim) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	683a      	ldr	r2, [r7, #0]
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	605a      	str	r2, [r3, #4]
		m_cpltIsr = TimPeriodElapsedCallbackHandler::getInstance().registerCallback([&](TIM_HandleTypeDef* htim){
 8008aca:	f7ff ff93 	bl	80089f4 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 8008ace:	4604      	mov	r4, r0
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 f99f 	bl	8008e1c <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_>
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4620      	mov	r0, r4
 8008ae6:	f7ff ffb3 	bl	8008a50 <_ZN31TimPeriodElapsedCallbackHandler16registerCallbackESt8functionIFvP17TIM_HandleTypeDefEE>
 8008aea:	4602      	mov	r2, r0
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	609a      	str	r2, [r3, #8]
 8008af0:	f107 0308 	add.w	r3, r7, #8
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff ff38 	bl	800896a <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
	}
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4618      	mov	r0, r3
 8008afe:	371c      	adds	r7, #28
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd90      	pop	{r4, r7, pc}

08008b04 <_ZN5Timer5startEv>:

	void start() {
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
		reset();
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f809 	bl	8008b24 <_ZN5Timer5resetEv>
		HAL_TIM_Base_Start_IT(m_htim);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4618      	mov	r0, r3
 8008b18:	f009 f8ea 	bl	8011cf0 <HAL_TIM_Base_Start_IT>
	}
 8008b1c:	bf00      	nop
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <_ZN5Timer5resetEv>:

	void stop() {
		HAL_TIM_Base_Stop_IT(m_htim);
	}

	void reset() {
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
		m_overflow = 0;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	605a      	str	r2, [r3, #4]
		__HAL_TIM_SET_COUNTER(m_htim, 0);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <_ZN5Timer3getEv>:

	[[nodiscard]] inline uint16_t get() {
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
		return __HAL_TIM_GET_COUNTER(m_htim);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b58:	b29b      	uxth	r3, r3
	}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	370c      	adds	r7, #12
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <_ZN5Timer8overflowEv>:
	[[nodiscard]] inline unsigned int overflow(){
 8008b66:	b480      	push	{r7}
 8008b68:	b083      	sub	sp, #12
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
		return m_overflow;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
	}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <_ZZN14FiducialSensorC4E14FiducialConfigENKUlbE_clEb>:

FiducialSensor::FiducialSensor(FiducialConfig config) :
		m_exti(config.m_gpio.m_port, config.m_gpio.m_pin), m_count(0), m_timer(config.m_htim), m_deltaTime(
				0), m_distanceBetweenInterrupts(
				config.m_distanceBetweenInterrupts) {
	m_exti.setExtiCallback([&](bool v) {
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b082      	sub	sp, #8
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
		this->extiCallback(v);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	78fa      	ldrb	r2, [r7, #3]
 8008b90:	4611      	mov	r1, r2
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 f844 	bl	8008c20 <_ZN14FiducialSensor12extiCallbackEb>
	});
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <_ZN14FiducialSensorC1E14FiducialConfig>:
FiducialSensor::FiducialSensor(FiducialConfig config) :
 8008ba0:	b084      	sub	sp, #16
 8008ba2:	b590      	push	{r4, r7, lr}
 8008ba4:	b087      	sub	sp, #28
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
 8008baa:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8008bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
				config.m_distanceBetweenInterrupts) {
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bb6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7ff fe97 	bl	80088ec <_ZN18GPIOExtiControllerC1EP12GPIO_TypeDeft>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	61da      	str	r2, [r3, #28]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	3320      	adds	r3, #32
 8008bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff ff71 	bl	8008ab4 <_ZN5TimerC1EP17TIM_HandleTypeDef>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8008bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	631a      	str	r2, [r3, #48]	; 0x30
	m_exti.setExtiCallback([&](bool v) {
 8008bde:	687c      	ldr	r4, [r7, #4]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	f107 0308 	add.w	r3, r7, #8
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f000 f941 	bl	8008e70 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_>
 8008bee:	f107 0308 	add.w	r3, r7, #8
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	f7ff fea9 	bl	800894c <_ZN18GPIOExtiController15setExtiCallbackESt8functionIFvbEE>
 8008bfa:	f107 0308 	add.w	r3, r7, #8
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fe2e 	bl	8008860 <_ZNSt8functionIFvbEED1Ev>
	m_timer.start();
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	3320      	adds	r3, #32
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f7ff ff7b 	bl	8008b04 <_ZN5Timer5startEv>
}
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4618      	mov	r0, r3
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008c1a:	b004      	add	sp, #16
 8008c1c:	4770      	bx	lr
	...

08008c20 <_ZN14FiducialSensor12extiCallbackEb>:

float FiducialSensor::estimateVelocityMPS() {
	return m_distanceBetweenInterrupts / (float) m_deltaTime;
}

void FiducialSensor::extiCallback(bool v) {
 8008c20:	b590      	push	{r4, r7, lr}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
	m_deltaTime = (m_timer.get() + m_timer.overflow() * 0xFFFF) / 10;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3320      	adds	r3, #32
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7ff ff89 	bl	8008b48 <_ZN5Timer3getEv>
 8008c36:	4603      	mov	r3, r0
 8008c38:	461c      	mov	r4, r3
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	3320      	adds	r3, #32
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f7ff ff91 	bl	8008b66 <_ZN5Timer8overflowEv>
 8008c44:	4602      	mov	r2, r0
 8008c46:	4613      	mov	r3, r2
 8008c48:	041b      	lsls	r3, r3, #16
 8008c4a:	1a9b      	subs	r3, r3, r2
 8008c4c:	4423      	add	r3, r4
 8008c4e:	4a0a      	ldr	r2, [pc, #40]	; (8008c78 <_ZN14FiducialSensor12extiCallbackEb+0x58>)
 8008c50:	fba2 2303 	umull	r2, r3, r2, r3
 8008c54:	08da      	lsrs	r2, r3, #3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	62da      	str	r2, [r3, #44]	; 0x2c
	m_timer.reset();
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3320      	adds	r3, #32
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff ff60 	bl	8008b24 <_ZN5Timer5resetEv>
	m_count++;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	1c5a      	adds	r2, r3, #1
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	61da      	str	r2, [r3, #28]
}
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd90      	pop	{r4, r7, pc}
 8008c76:	bf00      	nop
 8008c78:	cccccccd 	.word	0xcccccccd

08008c7c <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f8 fbd2 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <_ZNSt8functionIFvtEEaSERKS1_>:
      operator=(const function& __x)
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b086      	sub	sp, #24
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8008ca0:	f107 0308 	add.w	r3, r7, #8
 8008ca4:	6839      	ldr	r1, [r7, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 f90c 	bl	8008ec4 <_ZNSt8functionIFvtEEC1ERKS1_>
 8008cac:	f107 0308 	add.w	r3, r7, #8
 8008cb0:	6879      	ldr	r1, [r7, #4]
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f000 f928 	bl	8008f08 <_ZNSt8functionIFvtEE4swapERS1_>
 8008cb8:	f107 0308 	add.w	r3, r7, #8
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff fd41 	bl	8008744 <_ZNSt8functionIFvtEED1Ev>
	return *this;
 8008cc2:	687b      	ldr	r3, [r7, #4]
      }
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3718      	adds	r7, #24
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <_ZNSt8functionIFvbEEC1EDn>:
      function(nullptr_t) noexcept
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
      : _Function_base() { }
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7f8 fba9 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <_ZStneIvJbEEbRKSt8functionIFT_DpT0_EEDn>:
   *
   *  This function will not throw an %exception.
   */
  template<typename _Res, typename... _Args>
    inline bool
    operator!=(const function<_Res(_Args...)>& __f, nullptr_t) noexcept
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
 8008cf0:	6039      	str	r1, [r7, #0]
    { return static_cast<bool>(__f); }
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f955 	bl	8008fa2 <_ZNKSt8functionIFvbEEcvbEv>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <_ZNKSt8functionIFvbEEclEb>:
    function<_Res(_ArgTypes...)>::
 8008d02:	b5b0      	push	{r4, r5, r7, lr}
 8008d04:	b082      	sub	sp, #8
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	70fb      	strb	r3, [r7, #3]
      if (_M_empty())
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4618      	mov	r0, r3
 8008d12:	f7f8 fbae 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <_ZNKSt8functionIFvbEEclEb+0x1e>
	__throw_bad_function_call();
 8008d1c:	f010 fbfb 	bl	8019516 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	68dc      	ldr	r4, [r3, #12]
 8008d24:	687d      	ldr	r5, [r7, #4]
 8008d26:	1cfb      	adds	r3, r7, #3
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 f94a 	bl	8008fc2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	4619      	mov	r1, r3
 8008d32:	4628      	mov	r0, r5
 8008d34:	47a0      	blx	r4
 8008d36:	bf00      	nop
    }
 8008d38:	3708      	adds	r7, #8
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008d40 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8008d40:	b590      	push	{r4, r7, lr}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7f8 fb6f 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8008d52:	463b      	mov	r3, r7
 8008d54:	4618      	mov	r0, r3
 8008d56:	f000 f93f 	bl	8008fd8 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E21_M_not_empty_functionIS4_EEbRKT_>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d00f      	beq.n	8008d80 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8008d60:	687c      	ldr	r4, [r7, #4]
 8008d62:	463b      	mov	r3, r7
 8008d64:	4618      	mov	r0, r3
 8008d66:	f000 f942 	bl	8008fee <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	4620      	mov	r0, r4
 8008d70:	f000 f948 	bl	8009004 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a05      	ldr	r2, [pc, #20]	; (8008d8c <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x4c>)
 8008d78:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a04      	ldr	r2, [pc, #16]	; (8008d90 <_ZNSt8functionIFvtEEC1IZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_vvEET_+0x50>)
 8008d7e:	609a      	str	r2, [r3, #8]
      }
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	4618      	mov	r0, r3
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd90      	pop	{r4, r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	08009029 	.word	0x08009029
 8008d90:	08009053 	.word	0x08009053

08008d94 <_ZNSt8functionIFvbEEaSERKS1_>:
      operator=(const function& __x)
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b086      	sub	sp, #24
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8008d9e:	f107 0308 	add.w	r3, r7, #8
 8008da2:	6839      	ldr	r1, [r7, #0]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f000 f973 	bl	8009090 <_ZNSt8functionIFvbEEC1ERKS1_>
 8008daa:	f107 0308 	add.w	r3, r7, #8
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	4618      	mov	r0, r3
 8008db2:	f000 f8d5 	bl	8008f60 <_ZNSt8functionIFvbEE4swapERS1_>
 8008db6:	f107 0308 	add.w	r3, r7, #8
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff fd50 	bl	8008860 <_ZNSt8functionIFvbEED1Ev>
	return *this;
 8008dc0:	687b      	ldr	r3, [r7, #4]
      }
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>:
      function() noexcept
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7f8 fb2b 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3708      	adds	r7, #8
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8008dee:	f107 0308 	add.w	r3, r7, #8
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 f96d 	bl	80090d4 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_>
 8008dfa:	f107 0308 	add.w	r3, r7, #8
 8008dfe:	6879      	ldr	r1, [r7, #4]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 f989 	bl	8009118 <_ZNSt8functionIFvP17TIM_HandleTypeDefEE4swapERS3_>
 8008e06:	f107 0308 	add.w	r3, r7, #8
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f7ff fdad 	bl	800896a <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
	return *this;
 8008e10:	687b      	ldr	r3, [r7, #4]
      }
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8008e1c:	b590      	push	{r4, r7, lr}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f7f8 fb01 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8008e2e:	463b      	mov	r3, r7
 8008e30:	4618      	mov	r0, r3
 8008e32:	f000 f99d 	bl	8009170 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E21_M_not_empty_functionIS4_EEbRKT_>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d00f      	beq.n	8008e5c <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8008e3c:	687c      	ldr	r4, [r7, #4]
 8008e3e:	463b      	mov	r3, r7
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 f9a0 	bl	8009186 <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 8008e46:	4603      	mov	r3, r0
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	f000 f9a6 	bl	800919c <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a05      	ldr	r2, [pc, #20]	; (8008e68 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x4c>)
 8008e54:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a04      	ldr	r2, [pc, #16]	; (8008e6c <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1IZN5TimerC4ES1_EUlS1_E_vvEET_+0x50>)
 8008e5a:	609a      	str	r2, [r3, #8]
      }
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	370c      	adds	r7, #12
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd90      	pop	{r4, r7, pc}
 8008e66:	bf00      	nop
 8008e68:	080091c1 	.word	0x080091c1
 8008e6c:	080091eb 	.word	0x080091eb

08008e70 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8008e70:	b590      	push	{r4, r7, lr}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f7f8 fad7 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8008e82:	463b      	mov	r3, r7
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 f9cf 	bl	8009228 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E21_M_not_empty_functionIS3_EEbRKT_>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00f      	beq.n	8008eb0 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8008e90:	687c      	ldr	r4, [r7, #4]
 8008e92:	463b      	mov	r3, r7
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 f9d2 	bl	800923e <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f000 f9d8 	bl	8009254 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a05      	ldr	r2, [pc, #20]	; (8008ebc <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x4c>)
 8008ea8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a04      	ldr	r2, [pc, #16]	; (8008ec0 <_ZNSt8functionIFvbEEC1IZN14FiducialSensorC4E14FiducialConfigEUlbE_vvEET_+0x50>)
 8008eae:	609a      	str	r2, [r3, #8]
      }
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	370c      	adds	r7, #12
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd90      	pop	{r4, r7, pc}
 8008eba:	bf00      	nop
 8008ebc:	08009279 	.word	0x08009279
 8008ec0:	080092a3 	.word	0x080092a3

08008ec4 <_ZNSt8functionIFvtEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b082      	sub	sp, #8
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f7f8 faad 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8008ed6:	6838      	ldr	r0, [r7, #0]
 8008ed8:	f000 fa02 	bl	80092e0 <_ZNKSt8functionIFvtEEcvbEv>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00d      	beq.n	8008efe <_ZNSt8functionIFvtEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	2202      	movs	r2, #2
 8008eec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	689a      	ldr	r2, [r3, #8]
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	609a      	str	r2, [r3, #8]
    }
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <_ZNSt8functionIFvtEE4swapERS1_>:
      void swap(function& __x) noexcept
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	683a      	ldr	r2, [r7, #0]
 8008f16:	4611      	mov	r1, r2
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7f8 fc66 	bl	80017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f103 0208 	add.w	r2, r3, #8
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	3308      	adds	r3, #8
 8008f28:	4619      	mov	r1, r3
 8008f2a:	4610      	mov	r0, r2
 8008f2c:	f7f8 fc8f 	bl	800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f103 020c 	add.w	r2, r3, #12
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	330c      	adds	r3, #12
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f000 f9ea 	bl	8009316 <_ZSt4swapIPFvRKSt9_Any_dataOtEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008f4a:	b480      	push	{r7}
 8008f4c:	b083      	sub	sp, #12
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4618      	mov	r0, r3
 8008f56:	370c      	adds	r7, #12
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5e:	4770      	bx	lr

08008f60 <_ZNSt8functionIFvbEE4swapERS1_>:
      void swap(function& __x) noexcept
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	683a      	ldr	r2, [r7, #0]
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7f8 fc3a 	bl	80017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f103 0208 	add.w	r2, r3, #8
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	3308      	adds	r3, #8
 8008f80:	4619      	mov	r1, r3
 8008f82:	4610      	mov	r0, r2
 8008f84:	f7f8 fc63 	bl	800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f103 020c 	add.w	r2, r3, #12
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	330c      	adds	r3, #12
 8008f92:	4619      	mov	r1, r3
 8008f94:	4610      	mov	r0, r2
 8008f96:	f000 f9e8 	bl	800936a <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>
      }
 8008f9a:	bf00      	nop
 8008f9c:	3708      	adds	r7, #8
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <_ZNKSt8functionIFvbEEcvbEv>:
      explicit operator bool() const noexcept
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b082      	sub	sp, #8
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7f8 fa60 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	f083 0301 	eor.w	r3, r3, #1
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008fc2:	b480      	push	{r7}
 8008fc4:	b083      	sub	sp, #12
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr

08008fd8 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
	  { return true; }
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8009004:	b590      	push	{r4, r7, lr}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800900e:	6838      	ldr	r0, [r7, #0]
 8009010:	f7ff ffed 	bl	8008fee <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 8009014:	4603      	mov	r3, r0
 8009016:	4622      	mov	r2, r4
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 f9c4 	bl	80093a8 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	bd90      	pop	{r4, r7, pc}

08009028 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E9_M_invokeERKSt9_Any_dataOt>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8009028:	b590      	push	{r4, r7, lr}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f9d1 	bl	80093da <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 8009038:	4604      	mov	r4, r0
 800903a:	6838      	ldr	r0, [r7, #0]
 800903c:	f7ff ff85 	bl	8008f4a <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8009040:	4603      	mov	r3, r0
 8009042:	4619      	mov	r1, r3
 8009044:	4620      	mov	r0, r4
 8009046:	f000 f9d9 	bl	80093fc <_ZSt10__invoke_rIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800904a:	bf00      	nop
      }
 800904c:	370c      	adds	r7, #12
 800904e:	46bd      	mov	sp, r7
 8009050:	bd90      	pop	{r4, r7, pc}

08009052 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8009052:	b590      	push	{r4, r7, lr}
 8009054:	b085      	sub	sp, #20
 8009056:	af00      	add	r7, sp, #0
 8009058:	60f8      	str	r0, [r7, #12]
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	4613      	mov	r3, r2
 800905e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8009060:	79fb      	ldrb	r3, [r7, #7]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d109      	bne.n	800907a <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 f9de 	bl	8009428 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
 800906c:	4604      	mov	r4, r0
 800906e:	68b8      	ldr	r0, [r7, #8]
 8009070:	f000 f9b3 	bl	80093da <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 8009074:	4603      	mov	r3, r0
 8009076:	6023      	str	r3, [r4, #0]
	    break;
 8009078:	e005      	b.n	8009086 <_ZNSt17_Function_handlerIFvtEZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	461a      	mov	r2, r3
 800907e:	68b9      	ldr	r1, [r7, #8]
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	f000 f9dd 	bl	8009440 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8009086:	2300      	movs	r3, #0
      }
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	bd90      	pop	{r4, r7, pc}

08009090 <_ZNSt8functionIFvbEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4618      	mov	r0, r3
 800909e:	f7f8 f9c7 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80090a2:	6838      	ldr	r0, [r7, #0]
 80090a4:	f7ff ff7d 	bl	8008fa2 <_ZNKSt8functionIFvbEEcvbEv>
 80090a8:	4603      	mov	r3, r0
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00d      	beq.n	80090ca <_ZNSt8functionIFvbEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	689b      	ldr	r3, [r3, #8]
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	2202      	movs	r2, #2
 80090b8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	609a      	str	r2, [r3, #8]
    }
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b082      	sub	sp, #8
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7f8 f9a5 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80090e6:	6838      	ldr	r0, [r7, #0]
 80090e8:	f000 f9d5 	bl	8009496 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEcvbEv>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00d      	beq.n	800910e <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	2202      	movs	r2, #2
 80090fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	689a      	ldr	r2, [r3, #8]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	609a      	str	r2, [r3, #8]
    }
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <_ZNSt8functionIFvP17TIM_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	683a      	ldr	r2, [r7, #0]
 8009126:	4611      	mov	r1, r2
 8009128:	4618      	mov	r0, r3
 800912a:	f7f8 fb5e 	bl	80017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f103 0208 	add.w	r2, r3, #8
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	4619      	mov	r1, r3
 800913a:	4610      	mov	r0, r2
 800913c:	f7f8 fb87 	bl	800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f103 020c 	add.w	r2, r3, #12
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	330c      	adds	r3, #12
 800914a:	4619      	mov	r1, r3
 800914c:	4610      	mov	r0, r2
 800914e:	f000 f9bd 	bl	80094cc <_ZSt4swapIPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8009152:	bf00      	nop
 8009154:	3708      	adds	r7, #8
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800915a:	b480      	push	{r7}
 800915c:	b083      	sub	sp, #12
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4618      	mov	r0, r3
 8009166:	370c      	adds	r7, #12
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
	  { return true; }
 8009178:	2301      	movs	r3, #1
 800917a:	4618      	mov	r0, r3
 800917c:	370c      	adds	r7, #12
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr

08009186 <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8009186:	b480      	push	{r7}
 8009188:	b083      	sub	sp, #12
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	4618      	mov	r0, r3
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800919c:	b590      	push	{r4, r7, lr}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80091a6:	6838      	ldr	r0, [r7, #0]
 80091a8:	f7ff ffed 	bl	8009186 <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 80091ac:	4603      	mov	r3, r0
 80091ae:	4622      	mov	r2, r4
 80091b0:	4619      	mov	r1, r3
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 f9a9 	bl	800950a <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd90      	pop	{r4, r7, pc}

080091c0 <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f9b6 	bl	800953c <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 80091d0:	4604      	mov	r4, r0
 80091d2:	6838      	ldr	r0, [r7, #0]
 80091d4:	f7ff ffc1 	bl	800915a <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80091d8:	4603      	mov	r3, r0
 80091da:	4619      	mov	r1, r3
 80091dc:	4620      	mov	r0, r4
 80091de:	f000 f9be 	bl	800955e <_ZSt10__invoke_rIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 80091e2:	bf00      	nop
      }
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd90      	pop	{r4, r7, pc}

080091ea <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80091ea:	b590      	push	{r4, r7, lr}
 80091ec:	b085      	sub	sp, #20
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	4613      	mov	r3, r2
 80091f6:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d109      	bne.n	8009212 <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 f9c3 	bl	800958a <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
 8009204:	4604      	mov	r4, r0
 8009206:	68b8      	ldr	r0, [r7, #8]
 8009208:	f000 f998 	bl	800953c <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 800920c:	4603      	mov	r3, r0
 800920e:	6023      	str	r3, [r4, #0]
	    break;
 8009210:	e005      	b.n	800921e <_ZNSt17_Function_handlerIFvP17TIM_HandleTypeDefEZN5TimerC4ES1_EUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	461a      	mov	r2, r3
 8009216:	68b9      	ldr	r1, [r7, #8]
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 f9c2 	bl	80095a2 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800921e:	2300      	movs	r3, #0
      }
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	bd90      	pop	{r4, r7, pc}

08009228 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E21_M_not_empty_functionIS3_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8009230:	2301      	movs	r3, #1
 8009232:	4618      	mov	r0, r3
 8009234:	370c      	adds	r7, #12
 8009236:	46bd      	mov	sp, r7
 8009238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923c:	4770      	bx	lr

0800923e <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800923e:	b480      	push	{r7}
 8009240:	b083      	sub	sp, #12
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8009254:	b590      	push	{r4, r7, lr}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800925e:	6838      	ldr	r0, [r7, #0]
 8009260:	f7ff ffed 	bl	800923e <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 8009264:	4603      	mov	r3, r0
 8009266:	4622      	mov	r2, r4
 8009268:	4619      	mov	r1, r3
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f9c4 	bl	80095f8 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8009270:	bf00      	nop
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	bd90      	pop	{r4, r7, pc}

08009278 <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E9_M_invokeERKSt9_Any_dataOb>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8009278:	b590      	push	{r4, r7, lr}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f9d1 	bl	800962a <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 8009288:	4604      	mov	r4, r0
 800928a:	6838      	ldr	r0, [r7, #0]
 800928c:	f7ff fe99 	bl	8008fc2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8009290:	4603      	mov	r3, r0
 8009292:	4619      	mov	r1, r3
 8009294:	4620      	mov	r0, r4
 8009296:	f000 f9d9 	bl	800964c <_ZSt10__invoke_rIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>
				     std::forward<_ArgTypes>(__args)...);
 800929a:	bf00      	nop
      }
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd90      	pop	{r4, r7, pc}

080092a2 <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80092a2:	b590      	push	{r4, r7, lr}
 80092a4:	b085      	sub	sp, #20
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	60f8      	str	r0, [r7, #12]
 80092aa:	60b9      	str	r1, [r7, #8]
 80092ac:	4613      	mov	r3, r2
 80092ae:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d109      	bne.n	80092ca <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80092b6:	68f8      	ldr	r0, [r7, #12]
 80092b8:	f000 f9de 	bl	8009678 <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
 80092bc:	4604      	mov	r4, r0
 80092be:	68b8      	ldr	r0, [r7, #8]
 80092c0:	f000 f9b3 	bl	800962a <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 80092c4:	4603      	mov	r3, r0
 80092c6:	6023      	str	r3, [r4, #0]
	    break;
 80092c8:	e005      	b.n	80092d6 <_ZNSt17_Function_handlerIFvbEZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80092ca:	79fb      	ldrb	r3, [r7, #7]
 80092cc:	461a      	mov	r2, r3
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 f9dd 	bl	8009690 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>
	return false;
 80092d6:	2300      	movs	r3, #0
      }
 80092d8:	4618      	mov	r0, r3
 80092da:	3714      	adds	r7, #20
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd90      	pop	{r4, r7, pc}

080092e0 <_ZNKSt8functionIFvtEEcvbEv>:
      explicit operator bool() const noexcept
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7f8 f8c1 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80092f0:	4603      	mov	r3, r0
 80092f2:	f083 0301 	eor.w	r3, r3, #1
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	4618      	mov	r0, r3
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	4618      	mov	r0, r3
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <_ZSt4swapIPFvRKSt9_Any_dataOtEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 8009316:	b580      	push	{r7, lr}
 8009318:	b084      	sub	sp, #16
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
 800931e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f7ff ffed 	bl	8009300 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 8009326:	4603      	mov	r3, r0
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800932c:	6838      	ldr	r0, [r7, #0]
 800932e:	f7ff ffe7 	bl	8009300 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 8009332:	4603      	mov	r3, r0
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800933a:	f107 030c 	add.w	r3, r7, #12
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff ffde 	bl	8009300 <_ZSt4moveIRPFvRKSt9_Any_dataOtEEONSt16remove_referenceIT_E4typeEOS8_>
 8009344:	4603      	mov	r3, r0
 8009346:	681a      	ldr	r2, [r3, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	601a      	str	r2, [r3, #0]
    }
 800934c:	bf00      	nop
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>:
    move(_Tp&& __t) noexcept
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	4618      	mov	r0, r3
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <_ZSt4swapIPFvRKSt9_Any_dataObEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISA_ESt18is_move_assignableISA_EEE5valueEvE4typeERSA_SK_>:
    swap(_Tp& __a, _Tp& __b)
 800936a:	b580      	push	{r7, lr}
 800936c:	b084      	sub	sp, #16
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7ff ffed 	bl	8009354 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 800937a:	4603      	mov	r3, r0
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8009380:	6838      	ldr	r0, [r7, #0]
 8009382:	f7ff ffe7 	bl	8009354 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8009386:	4603      	mov	r3, r0
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800938e:	f107 030c 	add.w	r3, r7, #12
 8009392:	4618      	mov	r0, r3
 8009394:	f7ff ffde 	bl	8009354 <_ZSt4moveIRPFvRKSt9_Any_dataObEEONSt16remove_referenceIT_E4typeEOS8_>
 8009398:	4603      	mov	r3, r0
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	601a      	str	r2, [r3, #0]
    }
 80093a0:	bf00      	nop
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80093a8:	b590      	push	{r4, r7, lr}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80093b4:	68b8      	ldr	r0, [r7, #8]
 80093b6:	f7ff fe1a 	bl	8008fee <_ZSt4moveIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EONSt16remove_referenceIT_E4typeEOS6_>
 80093ba:	4604      	mov	r4, r0
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f7ff f9ab 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 80093c2:	4603      	mov	r3, r0
 80093c4:	4619      	mov	r1, r3
 80093c6:	2004      	movs	r0, #4
 80093c8:	f7ff f99a 	bl	8008700 <_ZnwjPv>
 80093cc:	4602      	mov	r2, r0
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	bf00      	nop
 80093d4:	3714      	adds	r7, #20
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd90      	pop	{r4, r7, pc}

080093da <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f97f 	bl	80096e6 <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>
 80093e8:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 f987 	bl	80096fe <_ZSt11__addressofIKZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EPT_RS5_>
 80093f0:	4603      	mov	r3, r0
 80093f2:	bf00      	nop
	}
 80093f4:	4618      	mov	r0, r3
 80093f6:	3710      	adds	r7, #16
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bd80      	pop	{r7, pc}

080093fc <_ZSt10__invoke_rIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80093fc:	b5b0      	push	{r4, r5, r7, lr}
 80093fe:	b082      	sub	sp, #8
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 f984 	bl	8009714 <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800940c:	4604      	mov	r4, r0
 800940e:	6838      	ldr	r0, [r7, #0]
 8009410:	f7ff fd9b 	bl	8008f4a <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8009414:	4603      	mov	r3, r0
 8009416:	461a      	mov	r2, r3
 8009418:	4621      	mov	r1, r4
 800941a:	4628      	mov	r0, r5
 800941c:	f000 f985 	bl	800972a <_ZSt13__invoke_implIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8009420:	bf00      	nop
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bdb0      	pop	{r4, r5, r7, pc}

08009428 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>:
      _M_access()
 8009428:	b580      	push	{r7, lr}
 800942a:	b082      	sub	sp, #8
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f7ff f971 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 8009436:	4603      	mov	r3, r0
 8009438:	4618      	mov	r0, r3
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8009440:	b5b0      	push	{r4, r5, r7, lr}
 8009442:	b084      	sub	sp, #16
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	4613      	mov	r3, r2
 800944c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	2b03      	cmp	r3, #3
 8009452:	d016      	beq.n	8009482 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8009454:	2b03      	cmp	r3, #3
 8009456:	dc19      	bgt.n	800948c <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8009458:	2b01      	cmp	r3, #1
 800945a:	d002      	beq.n	8009462 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800945c:	2b02      	cmp	r3, #2
 800945e:	d00a      	beq.n	8009476 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8009460:	e014      	b.n	800948c <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f7ff ffe0 	bl	8009428 <_ZNSt9_Any_data9_M_accessIPZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
 8009468:	4604      	mov	r4, r0
 800946a:	68b8      	ldr	r0, [r7, #8]
 800946c:	f7ff ffb5 	bl	80093da <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E14_M_get_pointerERKSt9_Any_data>
 8009470:	4603      	mov	r3, r0
 8009472:	6023      	str	r3, [r4, #0]
	      break;
 8009474:	e00a      	b.n	800948c <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8009476:	462a      	mov	r2, r5
 8009478:	68b9      	ldr	r1, [r7, #8]
 800947a:	68f8      	ldr	r0, [r7, #12]
 800947c:	f000 f96c 	bl	8009758 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8009480:	e004      	b.n	800948c <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8009482:	4621      	mov	r1, r4
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 f980 	bl	800978a <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800948a:	bf00      	nop
	  return false;
 800948c:	2300      	movs	r3, #0
	}
 800948e:	4618      	mov	r0, r3
 8009490:	3710      	adds	r7, #16
 8009492:	46bd      	mov	sp, r7
 8009494:	bdb0      	pop	{r4, r5, r7, pc}

08009496 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f7f7 ffe6 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80094a6:	4603      	mov	r3, r0
 80094a8:	f083 0301 	eor.w	r3, r3, #1
 80094ac:	b2db      	uxtb	r3, r3
 80094ae:	4618      	mov	r0, r3
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <_ZSt4swapIPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f7ff ffed 	bl	80094b6 <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80094dc:	4603      	mov	r3, r0
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80094e2:	6838      	ldr	r0, [r7, #0]
 80094e4:	f7ff ffe7 	bl	80094b6 <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80094e8:	4603      	mov	r3, r0
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80094f0:	f107 030c 	add.w	r3, r7, #12
 80094f4:	4618      	mov	r0, r3
 80094f6:	f7ff ffde 	bl	80094b6 <_ZSt4moveIRPFvRKSt9_Any_dataOP17TIM_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 80094fa:	4603      	mov	r3, r0
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	601a      	str	r2, [r3, #0]
    }
 8009502:	bf00      	nop
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800950a:	b590      	push	{r4, r7, lr}
 800950c:	b085      	sub	sp, #20
 800950e:	af00      	add	r7, sp, #0
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8009516:	68b8      	ldr	r0, [r7, #8]
 8009518:	f7ff fe35 	bl	8009186 <_ZSt4moveIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EONSt16remove_referenceIT_E4typeEOS6_>
 800951c:	4604      	mov	r4, r0
 800951e:	68f8      	ldr	r0, [r7, #12]
 8009520:	f7ff f8fa 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 8009524:	4603      	mov	r3, r0
 8009526:	4619      	mov	r1, r3
 8009528:	2004      	movs	r0, #4
 800952a:	f7ff f8e9 	bl	8008700 <_ZnwjPv>
 800952e:	4602      	mov	r2, r0
 8009530:	6823      	ldr	r3, [r4, #0]
 8009532:	6013      	str	r3, [r2, #0]
 8009534:	bf00      	nop
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	bd90      	pop	{r4, r7, pc}

0800953c <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 f92c 	bl	80097a2 <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>
 800954a:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 f934 	bl	80097ba <_ZSt11__addressofIKZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EPT_RS5_>
 8009552:	4603      	mov	r3, r0
 8009554:	bf00      	nop
	}
 8009556:	4618      	mov	r0, r3
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <_ZSt10__invoke_rIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800955e:	b5b0      	push	{r4, r5, r7, lr}
 8009560:	b082      	sub	sp, #8
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f000 f931 	bl	80097d0 <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 800956e:	4604      	mov	r4, r0
 8009570:	6838      	ldr	r0, [r7, #0]
 8009572:	f7ff fdf2 	bl	800915a <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8009576:	4603      	mov	r3, r0
 8009578:	461a      	mov	r2, r3
 800957a:	4621      	mov	r1, r4
 800957c:	4628      	mov	r0, r5
 800957e:	f000 f932 	bl	80097e6 <_ZSt13__invoke_implIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8009582:	bf00      	nop
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bdb0      	pop	{r4, r5, r7, pc}

0800958a <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>:
      _M_access()
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7ff f8c0 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 8009598:	4603      	mov	r3, r0
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80095a2:	b5b0      	push	{r4, r5, r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	4613      	mov	r3, r2
 80095ae:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	d016      	beq.n	80095e4 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	dc19      	bgt.n	80095ee <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d002      	beq.n	80095c4 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d00a      	beq.n	80095d8 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 80095c2:	e014      	b.n	80095ee <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f7ff ffe0 	bl	800958a <_ZNSt9_Any_data9_M_accessIPZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
 80095ca:	4604      	mov	r4, r0
 80095cc:	68b8      	ldr	r0, [r7, #8]
 80095ce:	f7ff ffb5 	bl	800953c <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E14_M_get_pointerERKSt9_Any_data>
 80095d2:	4603      	mov	r3, r0
 80095d4:	6023      	str	r3, [r4, #0]
	      break;
 80095d6:	e00a      	b.n	80095ee <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80095d8:	462a      	mov	r2, r5
 80095da:	68b9      	ldr	r1, [r7, #8]
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f919 	bl	8009814 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 80095e2:	e004      	b.n	80095ee <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80095e4:	4621      	mov	r1, r4
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f000 f92d 	bl	8009846 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80095ec:	bf00      	nop
	  return false;
 80095ee:	2300      	movs	r3, #0
	}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bdb0      	pop	{r4, r5, r7, pc}

080095f8 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80095f8:	b590      	push	{r4, r7, lr}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8009604:	68b8      	ldr	r0, [r7, #8]
 8009606:	f7ff fe1a 	bl	800923e <_ZSt4moveIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EONSt16remove_referenceIT_E4typeEOS5_>
 800960a:	4604      	mov	r4, r0
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f7ff f883 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 8009612:	4603      	mov	r3, r0
 8009614:	4619      	mov	r1, r3
 8009616:	2004      	movs	r0, #4
 8009618:	f7ff f872 	bl	8008700 <_ZnwjPv>
 800961c:	4602      	mov	r2, r0
 800961e:	6823      	ldr	r3, [r4, #0]
 8009620:	6013      	str	r3, [r2, #0]
 8009622:	bf00      	nop
 8009624:	3714      	adds	r7, #20
 8009626:	46bd      	mov	sp, r7
 8009628:	bd90      	pop	{r4, r7, pc}

0800962a <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800962a:	b580      	push	{r7, lr}
 800962c:	b084      	sub	sp, #16
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f913 	bl	800985e <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>
 8009638:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 f91b 	bl	8009876 <_ZSt11__addressofIKZN14FiducialSensorC4E14FiducialConfigEUlbE_EPT_RS4_>
 8009640:	4603      	mov	r3, r0
 8009642:	bf00      	nop
	}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <_ZSt10__invoke_rIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES7_E4typeEOSA_DpOSB_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800964c:	b5b0      	push	{r4, r5, r7, lr}
 800964e:	b082      	sub	sp, #8
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
 8009654:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f000 f918 	bl	800988c <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 800965c:	4604      	mov	r4, r0
 800965e:	6838      	ldr	r0, [r7, #0]
 8009660:	f7ff fcaf 	bl	8008fc2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8009664:	4603      	mov	r3, r0
 8009666:	461a      	mov	r2, r3
 8009668:	4621      	mov	r1, r4
 800966a:	4628      	mov	r0, r5
 800966c:	f000 f919 	bl	80098a2 <_ZSt13__invoke_implIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>
    }
 8009670:	bf00      	nop
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bdb0      	pop	{r4, r5, r7, pc}

08009678 <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>:
      _M_access()
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f7ff f849 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 8009686:	4603      	mov	r3, r0
 8009688:	4618      	mov	r0, r3
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8009690:	b5b0      	push	{r4, r5, r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	4613      	mov	r3, r2
 800969c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800969e:	79fb      	ldrb	r3, [r7, #7]
 80096a0:	2b03      	cmp	r3, #3
 80096a2:	d016      	beq.n	80096d2 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	dc19      	bgt.n	80096dc <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 80096a8:	2b01      	cmp	r3, #1
 80096aa:	d002      	beq.n	80096b2 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 80096ac:	2b02      	cmp	r3, #2
 80096ae:	d00a      	beq.n	80096c6 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 80096b0:	e014      	b.n	80096dc <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff ffe0 	bl	8009678 <_ZNSt9_Any_data9_M_accessIPZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
 80096b8:	4604      	mov	r4, r0
 80096ba:	68b8      	ldr	r0, [r7, #8]
 80096bc:	f7ff ffb5 	bl	800962a <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E14_M_get_pointerERKSt9_Any_data>
 80096c0:	4603      	mov	r3, r0
 80096c2:	6023      	str	r3, [r4, #0]
	      break;
 80096c4:	e00a      	b.n	80096dc <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 80096c6:	462a      	mov	r2, r5
 80096c8:	68b9      	ldr	r1, [r7, #8]
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f000 f900 	bl	80098d0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 80096d0:	e004      	b.n	80096dc <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80096d2:	4621      	mov	r1, r4
 80096d4:	68f8      	ldr	r0, [r7, #12]
 80096d6:	f000 f914 	bl	8009902 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80096da:	bf00      	nop
	  return false;
 80096dc:	2300      	movs	r3, #0
	}
 80096de:	4618      	mov	r0, r3
 80096e0:	3710      	adds	r7, #16
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bdb0      	pop	{r4, r5, r7, pc}

080096e6 <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>:
      _M_access() const
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f7ff f81d 	bl	800872e <_ZNKSt9_Any_data9_M_accessEv>
 80096f4:	4603      	mov	r3, r0
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <_ZSt11__addressofIKZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80096fe:	b480      	push	{r7}
 8009700:	b083      	sub	sp, #12
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	4618      	mov	r0, r3
 800970a:	370c      	adds	r7, #12
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4618      	mov	r0, r3
 8009720:	370c      	adds	r7, #12
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <_ZSt13__invoke_implIvRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_JtEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800972a:	b590      	push	{r4, r7, lr}
 800972c:	b085      	sub	sp, #20
 800972e:	af00      	add	r7, sp, #0
 8009730:	7338      	strb	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8009736:	68b8      	ldr	r0, [r7, #8]
 8009738:	f7ff ffec 	bl	8009714 <_ZSt7forwardIRZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800973c:	4604      	mov	r4, r0
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7ff fc03 	bl	8008f4a <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8009744:	4603      	mov	r3, r0
 8009746:	881b      	ldrh	r3, [r3, #0]
 8009748:	4619      	mov	r1, r3
 800974a:	4620      	mov	r0, r4
 800974c:	f7ff f895 	bl	800887a <_ZZN18GPIOExtiControllerC4EP12GPIO_TypeDeftENKUltE_clEt>
 8009750:	bf00      	nop
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	bd90      	pop	{r4, r7, pc}

08009758 <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8009758:	b590      	push	{r4, r7, lr}
 800975a:	b085      	sub	sp, #20
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8009764:	68b8      	ldr	r0, [r7, #8]
 8009766:	f7ff ffbe 	bl	80096e6 <_ZNKSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERKT_v>
 800976a:	4604      	mov	r4, r0
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7fe ffd3 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 8009772:	4603      	mov	r3, r0
 8009774:	4619      	mov	r1, r3
 8009776:	2004      	movs	r0, #4
 8009778:	f7fe ffc2 	bl	8008700 <_ZnwjPv>
 800977c:	4602      	mov	r2, r0
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	6013      	str	r3, [r2, #0]
	}
 8009782:	bf00      	nop
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	bd90      	pop	{r4, r7, pc}

0800978a <_ZNSt14_Function_base13_Base_managerIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800978a:	b580      	push	{r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 f8c0 	bl	800991a <_ZNSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>
	}
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>:
      _M_access() const
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b082      	sub	sp, #8
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f7fe ffbf 	bl	800872e <_ZNKSt9_Any_data9_M_accessEv>
 80097b0:	4603      	mov	r3, r0
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <_ZSt11__addressofIKZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80097ba:	b480      	push	{r7}
 80097bc:	b083      	sub	sp, #12
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4618      	mov	r0, r3
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <_ZSt13__invoke_implIvRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80097e6:	b590      	push	{r4, r7, lr}
 80097e8:	b085      	sub	sp, #20
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	7338      	strb	r0, [r7, #12]
 80097ee:	60b9      	str	r1, [r7, #8]
 80097f0:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80097f2:	68b8      	ldr	r0, [r7, #8]
 80097f4:	f7ff ffec 	bl	80097d0 <_ZSt7forwardIRZN5TimerC4EP17TIM_HandleTypeDefEUlS2_E_EOT_RNSt16remove_referenceIS5_E4typeE>
 80097f8:	4604      	mov	r4, r0
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f7ff fcad 	bl	800915a <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8009800:	4603      	mov	r3, r0
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	4619      	mov	r1, r3
 8009806:	4620      	mov	r0, r4
 8009808:	f7ff f93e 	bl	8008a88 <_ZZN5TimerC4EP17TIM_HandleTypeDefENKUlS1_E_clES1_>
 800980c:	bf00      	nop
 800980e:	3714      	adds	r7, #20
 8009810:	46bd      	mov	sp, r7
 8009812:	bd90      	pop	{r4, r7, pc}

08009814 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8009814:	b590      	push	{r4, r7, lr}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	60f8      	str	r0, [r7, #12]
 800981c:	60b9      	str	r1, [r7, #8]
 800981e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8009820:	68b8      	ldr	r0, [r7, #8]
 8009822:	f7ff ffbe 	bl	80097a2 <_ZNKSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERKT_v>
 8009826:	4604      	mov	r4, r0
 8009828:	68f8      	ldr	r0, [r7, #12]
 800982a:	f7fe ff75 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800982e:	4603      	mov	r3, r0
 8009830:	4619      	mov	r1, r3
 8009832:	2004      	movs	r0, #4
 8009834:	f7fe ff64 	bl	8008700 <_ZnwjPv>
 8009838:	4602      	mov	r2, r0
 800983a:	6823      	ldr	r3, [r4, #0]
 800983c:	6013      	str	r3, [r2, #0]
	}
 800983e:	bf00      	nop
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	bd90      	pop	{r4, r7, pc}

08009846 <_ZNSt14_Function_base13_Base_managerIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
 800984e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f86e 	bl	8009932 <_ZNSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>
	}
 8009856:	bf00      	nop
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>:
      _M_access() const
 800985e:	b580      	push	{r7, lr}
 8009860:	b082      	sub	sp, #8
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7fe ff61 	bl	800872e <_ZNKSt9_Any_data9_M_accessEv>
 800986c:	4603      	mov	r3, r0
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <_ZSt11__addressofIKZN14FiducialSensorC4E14FiducialConfigEUlbE_EPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8009876:	b480      	push	{r7}
 8009878:	b083      	sub	sp, #12
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4618      	mov	r0, r3
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4618      	mov	r0, r3
 8009898:	370c      	adds	r7, #12
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr

080098a2 <_ZSt13__invoke_implIvRZN14FiducialSensorC4E14FiducialConfigEUlbE_JbEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80098a2:	b590      	push	{r4, r7, lr}
 80098a4:	b085      	sub	sp, #20
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	7338      	strb	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80098ae:	68b8      	ldr	r0, [r7, #8]
 80098b0:	f7ff ffec 	bl	800988c <_ZSt7forwardIRZN14FiducialSensorC4E14FiducialConfigEUlbE_EOT_RNSt16remove_referenceIS4_E4typeE>
 80098b4:	4604      	mov	r4, r0
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f7ff fb83 	bl	8008fc2 <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80098bc:	4603      	mov	r3, r0
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	4619      	mov	r1, r3
 80098c2:	4620      	mov	r0, r4
 80098c4:	f7ff f95b 	bl	8008b7e <_ZZN14FiducialSensorC4E14FiducialConfigENKUlbE_clEb>
 80098c8:	bf00      	nop
 80098ca:	3714      	adds	r7, #20
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd90      	pop	{r4, r7, pc}

080098d0 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80098d0:	b590      	push	{r4, r7, lr}
 80098d2:	b085      	sub	sp, #20
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80098dc:	68b8      	ldr	r0, [r7, #8]
 80098de:	f7ff ffbe 	bl	800985e <_ZNKSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERKT_v>
 80098e2:	4604      	mov	r4, r0
 80098e4:	68f8      	ldr	r0, [r7, #12]
 80098e6:	f7fe ff17 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 80098ea:	4603      	mov	r3, r0
 80098ec:	4619      	mov	r1, r3
 80098ee:	2004      	movs	r0, #4
 80098f0:	f7fe ff06 	bl	8008700 <_ZnwjPv>
 80098f4:	4602      	mov	r2, r0
 80098f6:	6823      	ldr	r3, [r4, #0]
 80098f8:	6013      	str	r3, [r2, #0]
	}
 80098fa:	bf00      	nop
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd90      	pop	{r4, r7, pc}

08009902 <_ZNSt14_Function_base13_Base_managerIZN14FiducialSensorC4E14FiducialConfigEUlbE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8009902:	b580      	push	{r7, lr}
 8009904:	b082      	sub	sp, #8
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800990c:	6878      	ldr	r0, [r7, #4]
 800990e:	f000 f81c 	bl	800994a <_ZNSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>
	}
 8009912:	bf00      	nop
 8009914:	3708      	adds	r7, #8
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}

0800991a <_ZNSt9_Any_data9_M_accessIZN18GPIOExtiControllerC4EP12GPIO_TypeDeftEUltE_EERT_v>:
      _M_access()
 800991a:	b580      	push	{r7, lr}
 800991c:	b082      	sub	sp, #8
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7fe fef8 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 8009928:	4603      	mov	r3, r0
 800992a:	4618      	mov	r0, r3
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <_ZNSt9_Any_data9_M_accessIZN5TimerC4EP17TIM_HandleTypeDefEUlS3_E_EERT_v>:
      _M_access()
 8009932:	b580      	push	{r7, lr}
 8009934:	b082      	sub	sp, #8
 8009936:	af00      	add	r7, sp, #0
 8009938:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7fe feec 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 8009940:	4603      	mov	r3, r0
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <_ZNSt9_Any_data9_M_accessIZN14FiducialSensorC4E14FiducialConfigEUlbE_EERT_v>:
      _M_access()
 800994a:	b580      	push	{r7, lr}
 800994c:	b082      	sub	sp, #8
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7fe fee0 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 8009958:	4603      	mov	r3, r0
 800995a:	4618      	mov	r0, r3
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
	...

08009964 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>:

#include <ICM20602.hpp>
#include "FreeRTOS.h"
#include "cmsis_os2.h"

ICM20602::ICM20602(const config_t& cfg, SPI_HandleTypeDef* hspi, GPIO_TypeDef* csPort, uint16_t csPin) : m_cfg{cfg}, m_hspi{hspi}, m_csPort{csPort}, m_csPin{csPin} {
 8009964:	b480      	push	{r7}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	603b      	str	r3, [r7, #0]
 8009972:	4a2c      	ldr	r2, [pc, #176]	; (8009a24 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft+0xc0>)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	3304      	adds	r3, #4
 800997e:	6810      	ldr	r0, [r2, #0]
 8009980:	6018      	str	r0, [r3, #0]
 8009982:	7912      	ldrb	r2, [r2, #4]
 8009984:	711a      	strb	r2, [r3, #4]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	60da      	str	r2, [r3, #12]
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	611a      	str	r2, [r3, #16]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	8b3a      	ldrh	r2, [r7, #24]
 8009996:	829a      	strh	r2, [r3, #20]
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	759a      	strb	r2, [r3, #22]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f04f 0200 	mov.w	r2, #0
 80099a4:	629a      	str	r2, [r3, #40]	; 0x28
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f04f 0200 	mov.w	r2, #0
 80099ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	631a      	str	r2, [r3, #48]	; 0x30
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f04f 0200 	mov.w	r2, #0
 80099bc:	635a      	str	r2, [r3, #52]	; 0x34
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	f04f 0200 	mov.w	r2, #0
 80099c4:	639a      	str	r2, [r3, #56]	; 0x38
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f04f 0200 	mov.w	r2, #0
 80099cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f04f 0200 	mov.w	r2, #0
 80099d4:	641a      	str	r2, [r3, #64]	; 0x40
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f04f 0200 	mov.w	r2, #0
 80099dc:	645a      	str	r2, [r3, #68]	; 0x44
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f04f 0200 	mov.w	r2, #0
 80099e4:	649a      	str	r2, [r3, #72]	; 0x48
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f04f 0200 	mov.w	r2, #0
 80099ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f04f 0200 	mov.w	r2, #0
 80099f4:	651a      	str	r2, [r3, #80]	; 0x50
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	f04f 0200 	mov.w	r2, #0
 80099fc:	655a      	str	r2, [r3, #84]	; 0x54
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f04f 0200 	mov.w	r2, #0
 8009a04:	659a      	str	r2, [r3, #88]	; 0x58
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f04f 0200 	mov.w	r2, #0
 8009a0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	f04f 0200 	mov.w	r2, #0
 8009a14:	661a      	str	r2, [r3, #96]	; 0x60

}
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr
 8009a24:	0801ca6c 	.word	0x0801ca6c

08009a28 <_ZN8ICM20602D1Ev>:

ICM20602::~ICM20602() {
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	4a04      	ldr	r2, [pc, #16]	; (8009a44 <_ZN8ICM20602D1Ev+0x1c>)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	601a      	str	r2, [r3, #0]

}
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4618      	mov	r0, r3
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	0801ca6c 	.word	0x0801ca6c

08009a48 <_ZN8ICM20602D0Ev>:
ICM20602::~ICM20602() {
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
}
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7ff ffe9 	bl	8009a28 <_ZN8ICM20602D1Ev>
 8009a56:	2164      	movs	r1, #100	; 0x64
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f00f fd47 	bl	80194ec <_ZdlPvj>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <_ZN8ICM206028csEnableEv>:

inline void ICM20602::csEnable() {
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_csPort, m_csPin, GPIO_PIN_RESET);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6918      	ldr	r0, [r3, #16]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	8a9b      	ldrh	r3, [r3, #20]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4619      	mov	r1, r3
 8009a7c:	f006 fc82 	bl	8010384 <HAL_GPIO_WritePin>
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <_ZN8ICM206029csDisableEv>:
inline void ICM20602::csDisable() {
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(m_csPort, m_csPin, GPIO_PIN_SET);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6918      	ldr	r0, [r3, #16]
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	8a9b      	ldrh	r3, [r3, #20]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	f006 fc72 	bl	8010384 <HAL_GPIO_WritePin>
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <_ZN8ICM206028writeRegEhh>:

void ICM20602::writeReg(uint8_t reg, uint8_t val) {
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	70fb      	strb	r3, [r7, #3]
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	70bb      	strb	r3, [r7, #2]
	csEnable();
 8009ab8:	6878      	ldr	r0, [r7, #4]
 8009aba:	f7ff ffd5 	bl	8009a68 <_ZN8ICM206028csEnableEv>
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	68d8      	ldr	r0, [r3, #12]
 8009ac2:	1cf9      	adds	r1, r7, #3
 8009ac4:	230a      	movs	r3, #10
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f007 fba3 	bl	8011212 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(m_hspi, &val, 1, 10);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68d8      	ldr	r0, [r3, #12]
 8009ad0:	1cb9      	adds	r1, r7, #2
 8009ad2:	230a      	movs	r3, #10
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	f007 fb9c 	bl	8011212 <HAL_SPI_Transmit>
	csDisable();
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f7ff ffd4 	bl	8009a88 <_ZN8ICM206029csDisableEv>
}
 8009ae0:	bf00      	nop
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <_ZN8ICM206027readRegEh>:

uint8_t ICM20602::readReg(uint8_t reg) {
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	70fb      	strb	r3, [r7, #3]
	reg |= 128;		// Set read bit
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	70fb      	strb	r3, [r7, #3]
	uint8_t val = 0;
 8009afe:	2300      	movs	r3, #0
 8009b00:	73fb      	strb	r3, [r7, #15]
	csEnable();
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f7ff ffb0 	bl	8009a68 <_ZN8ICM206028csEnableEv>
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	68d8      	ldr	r0, [r3, #12]
 8009b0c:	1cf9      	adds	r1, r7, #3
 8009b0e:	230a      	movs	r3, #10
 8009b10:	2201      	movs	r2, #1
 8009b12:	f007 fb7e 	bl	8011212 <HAL_SPI_Transmit>
	HAL_SPI_Receive(m_hspi, &val, 1, 10);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68d8      	ldr	r0, [r3, #12]
 8009b1a:	f107 010f 	add.w	r1, r7, #15
 8009b1e:	230a      	movs	r3, #10
 8009b20:	2201      	movs	r2, #1
 8009b22:	f007 fcb2 	bl	801148a <HAL_SPI_Receive>
	csDisable();
 8009b26:	6878      	ldr	r0, [r7, #4]
 8009b28:	f7ff ffae 	bl	8009a88 <_ZN8ICM206029csDisableEv>
	return val;
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <_ZN8ICM206025startEv>:

bool ICM20602::start() {
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]

	writeReg(REG_I2C_IF, 0x40);
 8009b40:	2240      	movs	r2, #64	; 0x40
 8009b42:	2170      	movs	r1, #112	; 0x70
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff ffaf 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>

	// Reset device and wait
	writeReg(REG_PWR_MGMT_1, 0x80);
 8009b4a:	2280      	movs	r2, #128	; 0x80
 8009b4c:	216b      	movs	r1, #107	; 0x6b
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff ffaa 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>
	osDelay(pdMS_TO_TICKS(10));
 8009b54:	200a      	movs	r0, #10
 8009b56:	f00b fa5b 	bl	8015010 <osDelay>

	// Check if connection is working by reading the WHO_AM_I register
	uint8_t whoAmI = readReg(REG_WHO_AM_I);
 8009b5a:	2175      	movs	r1, #117	; 0x75
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7ff ffc3 	bl	8009ae8 <_ZN8ICM206027readRegEh>
 8009b62:	4603      	mov	r3, r0
 8009b64:	73fb      	strb	r3, [r7, #15]
	if(whoAmI != 0x12) {
 8009b66:	7bfb      	ldrb	r3, [r7, #15]
 8009b68:	2b12      	cmp	r3, #18
 8009b6a:	d001      	beq.n	8009b70 <_ZN8ICM206025startEv+0x38>
		return false;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	e0ce      	b.n	8009d0e <_ZN8ICM206025startEv+0x1d6>
	}

	// Set internal clock to PLL
	writeReg(REG_PWR_MGMT_1, 0x01);
 8009b70:	2201      	movs	r2, #1
 8009b72:	216b      	movs	r1, #107	; 0x6b
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff ff97 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>

	// Accel and gyro standby
	writeReg(REG_PWR_MGMT_2, 0x3F);
 8009b7a:	223f      	movs	r2, #63	; 0x3f
 8009b7c:	216c      	movs	r1, #108	; 0x6c
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f7ff ff92 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>

	// Disable FIFO
	writeReg(REG_USER_CTRL, 0x00);
 8009b84:	2200      	movs	r2, #0
 8009b86:	216a      	movs	r1, #106	; 0x6a
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff ff8d 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>

	// Disable I2C interface
	writeReg(REG_I2C_IF, 0x40);
 8009b8e:	2240      	movs	r2, #64	; 0x40
 8009b90:	2170      	movs	r1, #112	; 0x70
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7ff ff88 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>

	// Enable and config acceleration
	if(m_cfg.accelDlpf == ACCEL_DLPF_BYPASS_1046_HZ) {
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	791b      	ldrb	r3, [r3, #4]
 8009b9c:	2b08      	cmp	r3, #8
 8009b9e:	d105      	bne.n	8009bac <_ZN8ICM206025startEv+0x74>
		writeReg(REG_ACCEL_CONFIG_2, (1 << 3));
 8009ba0:	2208      	movs	r2, #8
 8009ba2:	211d      	movs	r1, #29
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f7ff ff7f 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>
 8009baa:	e006      	b.n	8009bba <_ZN8ICM206025startEv+0x82>
	} else {
		writeReg(REG_ACCEL_CONFIG_2, m_cfg.accelDlpf);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	791b      	ldrb	r3, [r3, #4]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	211d      	movs	r1, #29
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff ff77 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>
	}
	writeReg(REG_ACCEL_CONFIG, m_cfg.accelFs << 3);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	795b      	ldrb	r3, [r3, #5]
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	211c      	movs	r1, #28
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f7ff ff6e 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>
	if(m_cfg.accelFs == ACCEL_FS_2G) {
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	795b      	ldrb	r3, [r3, #5]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d104      	bne.n	8009bde <_ZN8ICM206025startEv+0xa6>
		m_accelSensitivity = 16384.0f;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
 8009bda:	629a      	str	r2, [r3, #40]	; 0x28
 8009bdc:	e01c      	b.n	8009c18 <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_4G) {
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	795b      	ldrb	r3, [r3, #5]
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d104      	bne.n	8009bf0 <_ZN8ICM206025startEv+0xb8>
		m_accelSensitivity = 8192.0f;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
 8009bec:	629a      	str	r2, [r3, #40]	; 0x28
 8009bee:	e013      	b.n	8009c18 <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_8G) {
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	795b      	ldrb	r3, [r3, #5]
 8009bf4:	2b02      	cmp	r3, #2
 8009bf6:	d104      	bne.n	8009c02 <_ZN8ICM206025startEv+0xca>
		m_accelSensitivity = 4096.0f;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
 8009bfe:	629a      	str	r2, [r3, #40]	; 0x28
 8009c00:	e00a      	b.n	8009c18 <_ZN8ICM206025startEv+0xe0>
	} else if(m_cfg.accelFs == ACCEL_FS_16G) {
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	795b      	ldrb	r3, [r3, #5]
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d104      	bne.n	8009c14 <_ZN8ICM206025startEv+0xdc>
		m_accelSensitivity = 2048.0f;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
 8009c10:	629a      	str	r2, [r3, #40]	; 0x28
 8009c12:	e001      	b.n	8009c18 <_ZN8ICM206025startEv+0xe0>
	} else {
		return false;
 8009c14:	2300      	movs	r3, #0
 8009c16:	e07a      	b.n	8009d0e <_ZN8ICM206025startEv+0x1d6>
	}

	// Enable and config gyro
	if(m_cfg.gyroDlpf == GYRO_DLPF_BYPASS_3281_HZ) {
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	799b      	ldrb	r3, [r3, #6]
 8009c1c:	2b08      	cmp	r3, #8
 8009c1e:	d112      	bne.n	8009c46 <_ZN8ICM206025startEv+0x10e>
		// Bypass dpf and set dps
		writeReg(REG_CONFIG, 0x00);
 8009c20:	2200      	movs	r2, #0
 8009c22:	211a      	movs	r1, #26
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7ff ff3f 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>

		// See table page 37 of datasheet
		writeReg(REG_GYRO_CONFIG, (m_cfg.gyroDps << 3) | 0x02);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	79db      	ldrb	r3, [r3, #7]
 8009c2e:	00db      	lsls	r3, r3, #3
 8009c30:	b25b      	sxtb	r3, r3
 8009c32:	f043 0302 	orr.w	r3, r3, #2
 8009c36:	b25b      	sxtb	r3, r3
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	211b      	movs	r1, #27
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f7ff ff32 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>
 8009c44:	e026      	b.n	8009c94 <_ZN8ICM206025startEv+0x15c>
	} else if(m_cfg.gyroDlpf == GYRO_DLPF_BYPASS_8173_HZ) {
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	799b      	ldrb	r3, [r3, #6]
 8009c4a:	2b09      	cmp	r3, #9
 8009c4c:	d112      	bne.n	8009c74 <_ZN8ICM206025startEv+0x13c>
		// Bypass dpf and set dps
		writeReg(REG_CONFIG, 0x00);
 8009c4e:	2200      	movs	r2, #0
 8009c50:	211a      	movs	r1, #26
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7ff ff28 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>

		// See table page 37 of datasheet
		writeReg(REG_GYRO_CONFIG, (m_cfg.gyroDps << 3) | 0x01);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	79db      	ldrb	r3, [r3, #7]
 8009c5c:	00db      	lsls	r3, r3, #3
 8009c5e:	b25b      	sxtb	r3, r3
 8009c60:	f043 0301 	orr.w	r3, r3, #1
 8009c64:	b25b      	sxtb	r3, r3
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	461a      	mov	r2, r3
 8009c6a:	211b      	movs	r1, #27
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	f7ff ff1b 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>
 8009c72:	e00f      	b.n	8009c94 <_ZN8ICM206025startEv+0x15c>
	} else {
		// Configure dpf and dps
		writeReg(REG_CONFIG, m_cfg.gyroDlpf);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	799b      	ldrb	r3, [r3, #6]
 8009c78:	461a      	mov	r2, r3
 8009c7a:	211a      	movs	r1, #26
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f7ff ff13 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>

		writeReg(REG_GYRO_CONFIG, m_cfg.gyroDps << 3);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	79db      	ldrb	r3, [r3, #7]
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	b2db      	uxtb	r3, r3
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	211b      	movs	r1, #27
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7ff ff0a 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>
	}
	if(m_cfg.gyroDps == GYRO_RANGE_250_DPS) {
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	79db      	ldrb	r3, [r3, #7]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d103      	bne.n	8009ca4 <_ZN8ICM206025startEv+0x16c>
		m_gyroSensitivity = 131.0f;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a1e      	ldr	r2, [pc, #120]	; (8009d18 <_ZN8ICM206025startEv+0x1e0>)
 8009ca0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009ca2:	e019      	b.n	8009cd8 <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_500_DPS) {
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	79db      	ldrb	r3, [r3, #7]
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d103      	bne.n	8009cb4 <_ZN8ICM206025startEv+0x17c>
		m_gyroSensitivity = 65.5f;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	4a1b      	ldr	r2, [pc, #108]	; (8009d1c <_ZN8ICM206025startEv+0x1e4>)
 8009cb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009cb2:	e011      	b.n	8009cd8 <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_1000_DPS) {
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	79db      	ldrb	r3, [r3, #7]
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d103      	bne.n	8009cc4 <_ZN8ICM206025startEv+0x18c>
		m_gyroSensitivity = 32.8f;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a18      	ldr	r2, [pc, #96]	; (8009d20 <_ZN8ICM206025startEv+0x1e8>)
 8009cc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009cc2:	e009      	b.n	8009cd8 <_ZN8ICM206025startEv+0x1a0>
	} else if(m_cfg.gyroDps == GYRO_RANGE_2000_DPS) {
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	79db      	ldrb	r3, [r3, #7]
 8009cc8:	2b03      	cmp	r3, #3
 8009cca:	d103      	bne.n	8009cd4 <_ZN8ICM206025startEv+0x19c>
		m_gyroSensitivity = 16.4f;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a15      	ldr	r2, [pc, #84]	; (8009d24 <_ZN8ICM206025startEv+0x1ec>)
 8009cd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8009cd2:	e001      	b.n	8009cd8 <_ZN8ICM206025startEv+0x1a0>
	} else {
		return false;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e01a      	b.n	8009d0e <_ZN8ICM206025startEv+0x1d6>
	}

	// We will not enable the FIFO

	// Configure sample rate divider
	writeReg(REG_SMPLRT_DIV, m_cfg.sampleRateDiv);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	7a1b      	ldrb	r3, [r3, #8]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	2119      	movs	r1, #25
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7ff fee1 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>

	// Enable both Accel and Gyro
	writeReg(REG_PWR_MGMT_2, 0x00);
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	216c      	movs	r1, #108	; 0x6c
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f7ff fedc 	bl	8009aa8 <_ZN8ICM206028writeRegEhh>

	// Verify that connection is still working
	whoAmI = readReg(REG_WHO_AM_I);
 8009cf0:	2175      	movs	r1, #117	; 0x75
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f7ff fef8 	bl	8009ae8 <_ZN8ICM206027readRegEh>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	73fb      	strb	r3, [r7, #15]
	if(whoAmI != 0x12) {
 8009cfc:	7bfb      	ldrb	r3, [r7, #15]
 8009cfe:	2b12      	cmp	r3, #18
 8009d00:	d001      	beq.n	8009d06 <_ZN8ICM206025startEv+0x1ce>
		return false;
 8009d02:	2300      	movs	r3, #0
 8009d04:	e003      	b.n	8009d0e <_ZN8ICM206025startEv+0x1d6>
	}

	m_initDone = true;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2201      	movs	r2, #1
 8009d0a:	759a      	strb	r2, [r3, #22]
	return true;
 8009d0c:	2301      	movs	r3, #1
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	43030000 	.word	0x43030000
 8009d1c:	42830000 	.word	0x42830000
 8009d20:	42033333 	.word	0x42033333
 8009d24:	41833333 	.word	0x41833333

08009d28 <_ZN8ICM206024readEv>:


bool ICM20602::read() {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b086      	sub	sp, #24
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
	if(!m_initDone) {
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	7d9b      	ldrb	r3, [r3, #22]
 8009d34:	f083 0301 	eor.w	r3, r3, #1
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d001      	beq.n	8009d42 <_ZN8ICM206024readEv+0x1a>
		return false;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	e0dc      	b.n	8009efc <_ZN8ICM206024readEv+0x1d4>
	}

	// Read seven 16-bit data values, so 14 bytes: ACCEL_X ACCEL_Y ACCEL_Z TEMP GYRO_X GYRO_Y GYRO_Z
	csEnable();
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f7ff fe90 	bl	8009a68 <_ZN8ICM206028csEnableEv>
	uint8_t reg = REG_ACCEL_XOUT_H | 128;
 8009d48:	23bb      	movs	r3, #187	; 0xbb
 8009d4a:	727b      	strb	r3, [r7, #9]
	HAL_SPI_Transmit(m_hspi, &reg, 1, 10);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68d8      	ldr	r0, [r3, #12]
 8009d50:	f107 0109 	add.w	r1, r7, #9
 8009d54:	230a      	movs	r3, #10
 8009d56:	2201      	movs	r2, #1
 8009d58:	f007 fa5b 	bl	8011212 <HAL_SPI_Transmit>
	HAL_SPI_Receive(m_hspi, m_data, 14, 10);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	68d8      	ldr	r0, [r3, #12]
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f103 0117 	add.w	r1, r3, #23
 8009d66:	230a      	movs	r3, #10
 8009d68:	220e      	movs	r2, #14
 8009d6a:	f007 fb8e 	bl	801148a <HAL_SPI_Receive>
	csDisable();
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff fe8a 	bl	8009a88 <_ZN8ICM206029csDisableEv>

	// Get acceleration
	int16_t accelXRaw = (m_data[0] << 8) + m_data[1];
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	7ddb      	ldrb	r3, [r3, #23]
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	021b      	lsls	r3, r3, #8
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	7e1b      	ldrb	r3, [r3, #24]
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	4413      	add	r3, r2
 8009d86:	b29b      	uxth	r3, r3
 8009d88:	82fb      	strh	r3, [r7, #22]
	int16_t accelYRaw = (m_data[2] << 8) + m_data[3];
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	7e5b      	ldrb	r3, [r3, #25]
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	7e9b      	ldrb	r3, [r3, #26]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	4413      	add	r3, r2
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	82bb      	strh	r3, [r7, #20]
	int16_t accelZRaw = (m_data[4] << 8) + m_data[5];
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	7edb      	ldrb	r3, [r3, #27]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	021b      	lsls	r3, r3, #8
 8009da8:	b29a      	uxth	r2, r3
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	7f1b      	ldrb	r3, [r3, #28]
 8009dae:	b29b      	uxth	r3, r3
 8009db0:	4413      	add	r3, r2
 8009db2:	b29b      	uxth	r3, r3
 8009db4:	827b      	strh	r3, [r7, #18]
	m_accelX = accelXRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 8009db6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009dba:	ee07 3a90 	vmov	s15, r3
 8009dbe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8009dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dcc:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8009f04 <_ZN8ICM206024readEv+0x1dc>
 8009dd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	m_accelY = accelYRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 8009dda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8009dde:	ee07 3a90 	vmov	s15, r3
 8009de2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8009dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009df0:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8009f04 <_ZN8ICM206024readEv+0x1dc>
 8009df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	m_accelZ = accelZRaw / m_accelSensitivity * GRAVITATIONAL_ACCELERATION;
 8009dfe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e02:	ee07 3a90 	vmov	s15, r3
 8009e06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8009e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e14:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8009f04 <_ZN8ICM206024readEv+0x1dc>
 8009e18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	// Internal temperature sensor
	int16_t temperatureRaw = (m_data[6] << 8) + m_data[7];
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	7f5b      	ldrb	r3, [r3, #29]
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	021b      	lsls	r3, r3, #8
 8009e2a:	b29a      	uxth	r2, r3
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7f9b      	ldrb	r3, [r3, #30]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	4413      	add	r3, r2
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	823b      	strh	r3, [r7, #16]
	m_temperature = temperatureRaw / 326.8f + 25.0f;
 8009e38:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009e3c:	ee07 3a90 	vmov	s15, r3
 8009e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009e44:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009f08 <_ZN8ICM206024readEv+0x1e0>
 8009e48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009e4c:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8009e50:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

	// Get gyroscope
	int16_t gyroXRaw = (m_data[8] << 8) + m_data[9];
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	7fdb      	ldrb	r3, [r3, #31]
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	021b      	lsls	r3, r3, #8
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	4413      	add	r3, r2
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	81fb      	strh	r3, [r7, #14]
	int16_t gyroYRaw = (m_data[10] << 8) + m_data[11];
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	021b      	lsls	r3, r3, #8
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	4413      	add	r3, r2
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	81bb      	strh	r3, [r7, #12]
	int16_t gyroZRaw = (m_data[12] << 8) + m_data[13];
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	021b      	lsls	r3, r3, #8
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e9e:	b29b      	uxth	r3, r3
 8009ea0:	4413      	add	r3, r2
 8009ea2:	b29b      	uxth	r3, r3
 8009ea4:	817b      	strh	r3, [r7, #10]
	m_gyroX = gyroXRaw / m_gyroSensitivity;
 8009ea6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009eaa:	ee07 3a90 	vmov	s15, r3
 8009eae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	m_gyroY = gyroYRaw / m_gyroSensitivity;
 8009ec2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009ec6:	ee07 3a90 	vmov	s15, r3
 8009eca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	m_gyroZ = gyroZRaw / m_gyroSensitivity;
 8009ede:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8009ee2:	ee07 3a90 	vmov	s15, r3
 8009ee6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8009ef0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	return true;
 8009efa:	2301      	movs	r3, #1
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}
 8009f04:	411cf5c3 	.word	0x411cf5c3
 8009f08:	43a36666 	.word	0x43a36666

08009f0c <_ZN8ICM206029getAccelXEv>:

	/**
	 * Get acceleration in X direction of the IMU in m/s^2.
	 * @return Acceleration in X direction of the IMU in m/s^2.
	 */
	inline float getAccelX() { return m_accelX - m_accelXOffset; }
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8009f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f24:	eeb0 0a67 	vmov.f32	s0, s15
 8009f28:	370c      	adds	r7, #12
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f30:	4770      	bx	lr

08009f32 <_ZN8ICM206029getAccelYEv>:

	/**
	 * Get acceleration in Y direction of the IMU in m/s^2.
	 * @return Acceleration in Y direction of the IMU in m/s^2.
	 */
	inline float getAccelY() { return m_accelY - m_accelYOffset; }
 8009f32:	b480      	push	{r7}
 8009f34:	b083      	sub	sp, #12
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	6078      	str	r0, [r7, #4]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8009f46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f4a:	eeb0 0a67 	vmov.f32	s0, s15
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <_ZN8ICM206029getAccelZEv>:

	/**
	 * Get acceleration in Z direction of the IMU in m/s^2.
	 * @return Acceleration in Z direction of the IMU in m/s^2.
	 */
	inline float getAccelZ() { return m_accelZ - m_accelZOffset; }
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8009f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009f70:	eeb0 0a67 	vmov.f32	s0, s15
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <_ZN8ICM2060214getTemperatureEv>:

	/**
	 * Get the internal temperature of the IMU in °C.
	 * @return Internal temperature in °C.
	 */
	inline float getTemperature() { return m_temperature; }
 8009f7e:	b480      	push	{r7}
 8009f80:	b083      	sub	sp, #12
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f8a:	ee07 3a90 	vmov	s15, r3
 8009f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <_ZN8ICM206028getGyroXEv>:

	/**
	 * Get rotation around X axis of the IMU in °/s.
	 * @return Rotation around X axis in °/s.
	 */
	inline float getGyroX() { return m_gyroX - m_gyroXOffset; }
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8009fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fb4:	eeb0 0a67 	vmov.f32	s0, s15
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <_ZN8ICM206028getGyroYEv>:

	/**
	 * Get rotation around Y axis of the IMU in °/s.
	 * @return Rotation around Y axis in °/s.
	 */
	inline float getGyroY() { return m_gyroY - m_gyroYOffset; }
 8009fc2:	b480      	push	{r7}
 8009fc4:	b083      	sub	sp, #12
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8009fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fda:	eeb0 0a67 	vmov.f32	s0, s15
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <_ZN8ICM206028getGyroZEv>:

	/**
	 * Get rotation around Z axis of the IMU in °/s.
	 * @return Rotation around Z axis in °/s.
	 */
	inline float getGyroZ() { return m_gyroZ - m_gyroZOffset; }
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8009ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a000:	eeb0 0a67 	vmov.f32	s0, s15
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr
	...

0800a010 <_ZN9ImuMasterC1Ev>:
#include "cmsis_os2.h"
#include "canzero.hpp"
#include "estdio.hpp"


ImuMaster::ImuMaster() {
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af02      	add	r7, sp, #8
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	4a33      	ldr	r2, [pc, #204]	; (800a0e8 <_ZN9ImuMasterC1Ev+0xd8>)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	601a      	str	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a32      	ldr	r2, [pc, #200]	; (800a0ec <_ZN9ImuMasterC1Ev+0xdc>)
 800a022:	3304      	adds	r3, #4
 800a024:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a028:	6018      	str	r0, [r3, #0]
 800a02a:	3304      	adds	r3, #4
 800a02c:	7019      	strb	r1, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f103 000c 	add.w	r0, r3, #12
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	1d19      	adds	r1, r3, #4
 800a038:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a03c:	9300      	str	r3, [sp, #0]
 800a03e:	4b2c      	ldr	r3, [pc, #176]	; (800a0f0 <_ZN9ImuMasterC1Ev+0xe0>)
 800a040:	4a2c      	ldr	r2, [pc, #176]	; (800a0f4 <_ZN9ImuMasterC1Ev+0xe4>)
 800a042:	f7ff fc8f 	bl	8009964 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f103 0070 	add.w	r0, r3, #112	; 0x70
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	1d19      	adds	r1, r3, #4
 800a050:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	4b26      	ldr	r3, [pc, #152]	; (800a0f0 <_ZN9ImuMasterC1Ev+0xe0>)
 800a058:	4a26      	ldr	r2, [pc, #152]	; (800a0f4 <_ZN9ImuMasterC1Ev+0xe4>)
 800a05a:	f7ff fc83 	bl	8009964 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f103 00d4 	add.w	r0, r3, #212	; 0xd4
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	1d19      	adds	r1, r3, #4
 800a068:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	4b20      	ldr	r3, [pc, #128]	; (800a0f0 <_ZN9ImuMasterC1Ev+0xe0>)
 800a070:	4a20      	ldr	r2, [pc, #128]	; (800a0f4 <_ZN9ImuMasterC1Ev+0xe4>)
 800a072:	f7ff fc77 	bl	8009964 <_ZN8ICM20602C1ERKNS_8config_tEP19__SPI_HandleTypeDefP12GPIO_TypeDeft>
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f04f 0200 	mov.w	r2, #0
 800a07c:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f04f 0200 	mov.w	r2, #0
 800a086:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f04f 0200 	mov.w	r2, #0
 800a090:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f04f 0200 	mov.w	r2, #0
 800a09a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	f04f 0200 	mov.w	r2, #0
 800a0a4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f04f 0200 	mov.w	r2, #0
 800a0ae:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f04f 0200 	mov.w	r2, #0
 800a0b8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	// TODO Auto-generated constructor stub

}
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3708      	adds	r7, #8
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	0801ca7c 	.word	0x0801ca7c
 800a0ec:	0801c860 	.word	0x0801c860
 800a0f0:	40020400 	.word	0x40020400
 800a0f4:	2000121c 	.word	0x2000121c

0800a0f8 <_ZN9ImuMasterD1Ev>:

ImuMaster::~ImuMaster() {
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	4a0b      	ldr	r2, [pc, #44]	; (800a130 <_ZN9ImuMasterD1Ev+0x38>)
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	601a      	str	r2, [r3, #0]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	33d4      	adds	r3, #212	; 0xd4
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7ff fc8c 	bl	8009a28 <_ZN8ICM20602D1Ev>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	3370      	adds	r3, #112	; 0x70
 800a114:	4618      	mov	r0, r3
 800a116:	f7ff fc87 	bl	8009a28 <_ZN8ICM20602D1Ev>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	330c      	adds	r3, #12
 800a11e:	4618      	mov	r0, r3
 800a120:	f7ff fc82 	bl	8009a28 <_ZN8ICM20602D1Ev>
	// TODO Auto-generated destructor stub
}
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	4618      	mov	r0, r3
 800a128:	3708      	adds	r7, #8
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	0801ca7c 	.word	0x0801ca7c

0800a134 <_ZN9ImuMasterD0Ev>:
ImuMaster::~ImuMaster() {
 800a134:	b580      	push	{r7, lr}
 800a136:	b082      	sub	sp, #8
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
}
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7ff ffdb 	bl	800a0f8 <_ZN9ImuMasterD1Ev>
 800a142:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f00f f9d0 	bl	80194ec <_ZdlPvj>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
	...

0800a158 <_ZN9ImuMaster5startEv>:

bool ImuMaster::start() {
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
	// Init all CS
	HAL_GPIO_WritePin(CS_IMU1_GPIO_Port, CS_IMU1_Pin, GPIO_PIN_SET);
 800a160:	2201      	movs	r2, #1
 800a162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800a166:	4839      	ldr	r0, [pc, #228]	; (800a24c <_ZN9ImuMaster5startEv+0xf4>)
 800a168:	f006 f90c 	bl	8010384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_IMU2_GPIO_Port, CS_IMU2_Pin, GPIO_PIN_SET);
 800a16c:	2201      	movs	r2, #1
 800a16e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a172:	4836      	ldr	r0, [pc, #216]	; (800a24c <_ZN9ImuMaster5startEv+0xf4>)
 800a174:	f006 f906 	bl	8010384 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CS_IMU3_GPIO_Port, CS_IMU3_Pin, GPIO_PIN_SET);
 800a178:	2201      	movs	r2, #1
 800a17a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a17e:	4833      	ldr	r0, [pc, #204]	; (800a24c <_ZN9ImuMaster5startEv+0xf4>)
 800a180:	f006 f900 	bl	8010384 <HAL_GPIO_WritePin>

	// Wait until IMUs should be ready after powerup
	osDelay(pdMS_TO_TICKS(10));
 800a184:	200a      	movs	r0, #10
 800a186:	f00a ff43 	bl	8015010 <osDelay>

	// Now init all three IMUs
	m_imu1Ok = m_imu1.start();
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	330c      	adds	r3, #12
 800a18e:	4618      	mov	r0, r3
 800a190:	f7ff fcd2 	bl	8009b38 <_ZN8ICM206025startEv>
 800a194:	4603      	mov	r3, r0
 800a196:	461a      	mov	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f883 2154 	strb.w	r2, [r3, #340]	; 0x154
	m_imu2Ok = m_imu2.start();
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	3370      	adds	r3, #112	; 0x70
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff fcc8 	bl	8009b38 <_ZN8ICM206025startEv>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f883 2155 	strb.w	r2, [r3, #341]	; 0x155
	m_imu3Ok = m_imu3.start();
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	33d4      	adds	r3, #212	; 0xd4
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f7ff fcbe 	bl	8009b38 <_ZN8ICM206025startEv>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	461a      	mov	r2, r3
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f883 2156 	strb.w	r2, [r3, #342]	; 0x156

	// Get the number of IMUs
	if(m_imu1Ok) {
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d006      	beq.n	800a1de <_ZN9ImuMaster5startEv+0x86>
		m_numOfImusOnline++;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a1d6:	1c5a      	adds	r2, r3, #1
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	if(m_imu2Ok) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d006      	beq.n	800a1f6 <_ZN9ImuMaster5startEv+0x9e>
		m_numOfImusOnline++;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a1ee:	1c5a      	adds	r2, r3, #1
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	if(m_imu3Ok) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d006      	beq.n	800a20e <_ZN9ImuMaster5startEv+0xb6>
		m_numOfImusOnline++;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
	}
	OD_IMU_number = m_numOfImusOnline;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a214:	b2da      	uxtb	r2, r3
 800a216:	4b0e      	ldr	r3, [pc, #56]	; (800a250 <_ZN9ImuMaster5startEv+0xf8>)
 800a218:	701a      	strb	r2, [r3, #0]

	// The internal filters of the IMU need some time to swing in
	osDelay(pdMS_TO_TICKS(100));
 800a21a:	2064      	movs	r0, #100	; 0x64
 800a21c:	f00a fef8 	bl	8015010 <osDelay>

	return m_imu1Ok & m_imu2Ok & m_imu3Ok;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a226:	461a      	mov	r2, r3
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a22e:	4013      	ands	r3, r2
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	f892 2156 	ldrb.w	r2, [r2, #342]	; 0x156
 800a236:	4013      	ands	r3, r2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	bf14      	ite	ne
 800a23c:	2301      	movne	r3, #1
 800a23e:	2300      	moveq	r3, #0
 800a240:	b2db      	uxtb	r3, r3
}
 800a242:	4618      	mov	r0, r3
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	40020400 	.word	0x40020400
 800a250:	2000082d 	.word	0x2000082d

0800a254 <_ZN9ImuMaster8syncReadEv>:
	m_imu1.resetValues();
	m_imu2.resetValues();
	m_imu3.resetValues();
}

bool ImuMaster::syncRead() {
 800a254:	b580      	push	{r7, lr}
 800a256:	b082      	sub	sp, #8
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
	if(m_numOfImusOnline == 0) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a262:	2b00      	cmp	r3, #0
 800a264:	d101      	bne.n	800a26a <_ZN9ImuMaster8syncReadEv+0x16>
		return false;
 800a266:	2300      	movs	r3, #0
 800a268:	e20a      	b.n	800a680 <_ZN9ImuMaster8syncReadEv+0x42c>
	}

	// Reset internal variables
	m_accelX = 0;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f04f 0200 	mov.w	r2, #0
 800a270:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	m_accelY = 0;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	f04f 0200 	mov.w	r2, #0
 800a27a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	m_accelZ = 0;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f04f 0200 	mov.w	r2, #0
 800a284:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	m_temperature = 0;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f04f 0200 	mov.w	r2, #0
 800a28e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	m_gyroX = 0;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f04f 0200 	mov.w	r2, #0
 800a298:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	m_gyroY = 0;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f04f 0200 	mov.w	r2, #0
 800a2a2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	m_gyroZ = 0;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f04f 0200 	mov.w	r2, #0
 800a2ac:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

	// Read data from all IMUs that are online
	if(m_imu1Ok) {
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 3154 	ldrb.w	r3, [r3, #340]	; 0x154
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d077      	beq.n	800a3aa <_ZN9ImuMaster8syncReadEv+0x156>
		m_imu1.read();
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	330c      	adds	r3, #12
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f7ff fd32 	bl	8009d28 <_ZN8ICM206024readEv>

		OD_IMU1_Temperature = m_imu1.getTemperature();
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	330c      	adds	r3, #12
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f7ff fe58 	bl	8009f7e <_ZN8ICM2060214getTemperatureEv>
 800a2ce:	eef0 7a40 	vmov.f32	s15, s0
 800a2d2:	4bb3      	ldr	r3, [pc, #716]	; (800a5a0 <_ZN9ImuMaster8syncReadEv+0x34c>)
 800a2d4:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu1.getAccelX();
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	330c      	adds	r3, #12
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7ff fe15 	bl	8009f0c <_ZN8ICM206029getAccelXEv>
 800a2e2:	eeb0 7a40 	vmov.f32	s14, s0
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800a2ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu1.getAccelY();
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	330c      	adds	r3, #12
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	f7ff fe19 	bl	8009f32 <_ZN8ICM206029getAccelYEv>
 800a300:	eeb0 7a40 	vmov.f32	s14, s0
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800a30a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu1.getAccelZ();
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	330c      	adds	r3, #12
 800a318:	4618      	mov	r0, r3
 800a31a:	f7ff fe1d 	bl	8009f58 <_ZN8ICM206029getAccelZEv>
 800a31e:	eeb0 7a40 	vmov.f32	s14, s0
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800a328:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu1.getTemperature();
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	330c      	adds	r3, #12
 800a336:	4618      	mov	r0, r3
 800a338:	f7ff fe21 	bl	8009f7e <_ZN8ICM2060214getTemperatureEv>
 800a33c:	eeb0 7a40 	vmov.f32	s14, s0
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800a346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu1.getGyroX();
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	330c      	adds	r3, #12
 800a354:	4618      	mov	r0, r3
 800a356:	f7ff fe21 	bl	8009f9c <_ZN8ICM206028getGyroXEv>
 800a35a:	eeb0 7a40 	vmov.f32	s14, s0
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800a364:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu1.getGyroY();
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	330c      	adds	r3, #12
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff fe25 	bl	8009fc2 <_ZN8ICM206028getGyroYEv>
 800a378:	eeb0 7a40 	vmov.f32	s14, s0
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800a382:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu1.getGyroZ();
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	330c      	adds	r3, #12
 800a390:	4618      	mov	r0, r3
 800a392:	f7ff fe29 	bl	8009fe8 <_ZN8ICM206028getGyroZEv>
 800a396:	eeb0 7a40 	vmov.f32	s14, s0
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800a3a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	}

	if(m_imu2Ok) {
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f893 3155 	ldrb.w	r3, [r3, #341]	; 0x155
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d077      	beq.n	800a4a4 <_ZN9ImuMaster8syncReadEv+0x250>
		m_imu2.read();
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	3370      	adds	r3, #112	; 0x70
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff fcb5 	bl	8009d28 <_ZN8ICM206024readEv>

		OD_IMU2_Temperature = m_imu2.getTemperature();
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3370      	adds	r3, #112	; 0x70
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f7ff fddb 	bl	8009f7e <_ZN8ICM2060214getTemperatureEv>
 800a3c8:	eef0 7a40 	vmov.f32	s15, s0
 800a3cc:	4b75      	ldr	r3, [pc, #468]	; (800a5a4 <_ZN9ImuMaster8syncReadEv+0x350>)
 800a3ce:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu2.getAccelX();
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	3370      	adds	r3, #112	; 0x70
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7ff fd98 	bl	8009f0c <_ZN8ICM206029getAccelXEv>
 800a3dc:	eeb0 7a40 	vmov.f32	s14, s0
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800a3e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu2.getAccelY();
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3370      	adds	r3, #112	; 0x70
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff fd9c 	bl	8009f32 <_ZN8ICM206029getAccelYEv>
 800a3fa:	eeb0 7a40 	vmov.f32	s14, s0
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800a404:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu2.getAccelZ();
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	3370      	adds	r3, #112	; 0x70
 800a412:	4618      	mov	r0, r3
 800a414:	f7ff fda0 	bl	8009f58 <_ZN8ICM206029getAccelZEv>
 800a418:	eeb0 7a40 	vmov.f32	s14, s0
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800a422:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu2.getTemperature();
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	3370      	adds	r3, #112	; 0x70
 800a430:	4618      	mov	r0, r3
 800a432:	f7ff fda4 	bl	8009f7e <_ZN8ICM2060214getTemperatureEv>
 800a436:	eeb0 7a40 	vmov.f32	s14, s0
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800a440:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu2.getGyroX();
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	3370      	adds	r3, #112	; 0x70
 800a44e:	4618      	mov	r0, r3
 800a450:	f7ff fda4 	bl	8009f9c <_ZN8ICM206028getGyroXEv>
 800a454:	eeb0 7a40 	vmov.f32	s14, s0
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800a45e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu2.getGyroY();
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	3370      	adds	r3, #112	; 0x70
 800a46c:	4618      	mov	r0, r3
 800a46e:	f7ff fda8 	bl	8009fc2 <_ZN8ICM206028getGyroYEv>
 800a472:	eeb0 7a40 	vmov.f32	s14, s0
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800a47c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu2.getGyroZ();
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	3370      	adds	r3, #112	; 0x70
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7ff fdac 	bl	8009fe8 <_ZN8ICM206028getGyroZEv>
 800a490:	eeb0 7a40 	vmov.f32	s14, s0
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800a49a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
	}

	if(m_imu3Ok) {
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f893 3156 	ldrb.w	r3, [r3, #342]	; 0x156
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d07e      	beq.n	800a5ac <_ZN9ImuMaster8syncReadEv+0x358>
		m_imu3.read();
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	33d4      	adds	r3, #212	; 0xd4
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f7ff fc38 	bl	8009d28 <_ZN8ICM206024readEv>

		OD_IMU3_Temperature = m_imu3.getTemperature();
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	33d4      	adds	r3, #212	; 0xd4
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f7ff fd5e 	bl	8009f7e <_ZN8ICM2060214getTemperatureEv>
 800a4c2:	eef0 7a40 	vmov.f32	s15, s0
 800a4c6:	4b38      	ldr	r3, [pc, #224]	; (800a5a8 <_ZN9ImuMaster8syncReadEv+0x354>)
 800a4c8:	edc3 7a00 	vstr	s15, [r3]

		m_accelX += m_imu3.getAccelX();
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	33d4      	adds	r3, #212	; 0xd4
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f7ff fd1b 	bl	8009f0c <_ZN8ICM206029getAccelXEv>
 800a4d6:	eeb0 7a40 	vmov.f32	s14, s0
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800a4e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
		m_accelY += m_imu3.getAccelY();
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	33d4      	adds	r3, #212	; 0xd4
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff fd1f 	bl	8009f32 <_ZN8ICM206029getAccelYEv>
 800a4f4:	eeb0 7a40 	vmov.f32	s14, s0
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800a4fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
		m_accelZ += m_imu3.getAccelZ();
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	33d4      	adds	r3, #212	; 0xd4
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7ff fd23 	bl	8009f58 <_ZN8ICM206029getAccelZEv>
 800a512:	eeb0 7a40 	vmov.f32	s14, s0
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800a51c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
		m_temperature += m_imu3.getTemperature();
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	33d4      	adds	r3, #212	; 0xd4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff fd27 	bl	8009f7e <_ZN8ICM2060214getTemperatureEv>
 800a530:	eeb0 7a40 	vmov.f32	s14, s0
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 800a53a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
		m_gyroX += m_imu3.getGyroX();
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	33d4      	adds	r3, #212	; 0xd4
 800a548:	4618      	mov	r0, r3
 800a54a:	f7ff fd27 	bl	8009f9c <_ZN8ICM206028getGyroXEv>
 800a54e:	eeb0 7a40 	vmov.f32	s14, s0
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 800a558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
		m_gyroY += m_imu3.getGyroY();
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	33d4      	adds	r3, #212	; 0xd4
 800a566:	4618      	mov	r0, r3
 800a568:	f7ff fd2b 	bl	8009fc2 <_ZN8ICM206028getGyroYEv>
 800a56c:	eeb0 7a40 	vmov.f32	s14, s0
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800a576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
		m_gyroZ += m_imu3.getGyroZ();
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	33d4      	adds	r3, #212	; 0xd4
 800a584:	4618      	mov	r0, r3
 800a586:	f7ff fd2f 	bl	8009fe8 <_ZN8ICM206028getGyroZEv>
 800a58a:	eeb0 7a40 	vmov.f32	s14, s0
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	edd3 7a54 	vldr	s15, [r3, #336]	; 0x150
 800a594:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150
 800a59e:	e005      	b.n	800a5ac <_ZN9ImuMaster8syncReadEv+0x358>
 800a5a0:	20000830 	.word	0x20000830
 800a5a4:	20000834 	.word	0x20000834
 800a5a8:	20000838 	.word	0x20000838
	}

	// Divide data by number of IMUs that are online
	m_accelX /= m_numOfImusOnline;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	edd3 6a4e 	vldr	s13, [r3, #312]	; 0x138
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a5b8:	ee07 3a90 	vmov	s15, r3
 800a5bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	edc3 7a4e 	vstr	s15, [r3, #312]	; 0x138
	m_accelY /= m_numOfImusOnline;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	edd3 6a4f 	vldr	s13, [r3, #316]	; 0x13c
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	edc3 7a4f 	vstr	s15, [r3, #316]	; 0x13c
	m_accelZ /= m_numOfImusOnline;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	edd3 6a50 	vldr	s13, [r3, #320]	; 0x140
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a5f4:	ee07 3a90 	vmov	s15, r3
 800a5f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a5fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	edc3 7a50 	vstr	s15, [r3, #320]	; 0x140
	m_temperature /= m_numOfImusOnline;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	edd3 6a51 	vldr	s13, [r3, #324]	; 0x144
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a612:	ee07 3a90 	vmov	s15, r3
 800a616:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a61a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	edc3 7a51 	vstr	s15, [r3, #324]	; 0x144
	m_gyroX /= m_numOfImusOnline;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	edd3 6a52 	vldr	s13, [r3, #328]	; 0x148
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a630:	ee07 3a90 	vmov	s15, r3
 800a634:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a638:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	edc3 7a52 	vstr	s15, [r3, #328]	; 0x148
	m_gyroY /= m_numOfImusOnline;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	edd3 6a53 	vldr	s13, [r3, #332]	; 0x14c
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a64e:	ee07 3a90 	vmov	s15, r3
 800a652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
	m_gyroZ /= m_numOfImusOnline;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	edd3 6a54 	vldr	s13, [r3, #336]	; 0x150
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a66c:	ee07 3a90 	vmov	s15, r3
 800a670:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	edc3 7a54 	vstr	s15, [r3, #336]	; 0x150

	return true;
 800a67e:	2301      	movs	r3, #1
}
 800a680:	4618      	mov	r0, r3
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 800a688:	b580      	push	{r7, lr}
 800a68a:	b082      	sub	sp, #8
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
	switch (module) {
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d003      	beq.n	800a69e <_ZL17AdcModuleToHandle9AdcModule+0x16>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d002      	beq.n	800a6a2 <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 800a69c:	e003      	b.n	800a6a6 <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 800a69e:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 800a6a0:	e004      	b.n	800a6ac <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 800a6a2:	4b05      	ldr	r3, [pc, #20]	; (800a6b8 <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 800a6a4:	e002      	b.n	800a6ac <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 800a6a6:	f002 fe53 	bl	800d350 <Error_Handler>
		return nullptr;
 800a6aa:	2300      	movs	r3, #0
	}
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20000d34 	.word	0x20000d34
 800a6b8:	20000d7c 	.word	0x20000d7c

0800a6bc <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]

	}
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
		return m_value;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	881b      	ldrh	r3, [r3, #0]
	}
 800a6de:	4618      	mov	r0, r3
 800a6e0:	370c      	adds	r7, #12
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 800a6ea:	b480      	push	{r7}
 800a6ec:	b083      	sub	sp, #12
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	6078      	str	r0, [r7, #4]
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	807b      	strh	r3, [r7, #2]
		m_value = value;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	887a      	ldrh	r2, [r7, #2]
 800a6fa:	801a      	strh	r2, [r3, #0]
	}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800a708:	b580      	push	{r7, lr}
 800a70a:	b082      	sub	sp, #8
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4618      	mov	r0, r3
 800a714:	f7f6 fe9a 	bl	800144c <_ZNSt14_Function_baseD1Ev>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4618      	mov	r0, r3
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 800a722:	b5b0      	push	{r4, r5, r7, lr}
 800a724:	b082      	sub	sp, #8
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	240f      	movs	r4, #15
 800a72e:	461d      	mov	r5, r3
 800a730:	2c00      	cmp	r4, #0
 800a732:	db05      	blt.n	800a740 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 800a734:	4628      	mov	r0, r5
 800a736:	f000 fa0f 	bl	800ab58 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800a73a:	3510      	adds	r5, #16
 800a73c:	3c01      	subs	r4, #1
 800a73e:	e7f7      	b.n	800a730 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2200      	movs	r2, #0
 800a744:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4618      	mov	r0, r3
 800a74c:	3708      	adds	r7, #8
 800a74e:	46bd      	mov	sp, r7
 800a750:	bdb0      	pop	{r4, r5, r7, pc}

0800a752 <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 800a752:	b590      	push	{r4, r7, lr}
 800a754:	b083      	sub	sp, #12
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d00a      	beq.n	800a776 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	429c      	cmp	r4, r3
 800a76a:	d004      	beq.n	800a776 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 800a76c:	3c10      	subs	r4, #16
 800a76e:	4620      	mov	r0, r4
 800a770:	f7ff ffca 	bl	800a708 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 800a774:	e7f7      	b.n	800a766 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	4618      	mov	r0, r3
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	bd90      	pop	{r4, r7, pc}

0800a780 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 800a780:	b580      	push	{r7, lr}
 800a782:	af00      	add	r7, sp, #0
 800a784:	4801      	ldr	r0, [pc, #4]	; (800a78c <__tcf_0+0xc>)
 800a786:	f7ff ffe4 	bl	800a752 <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20000b60 	.word	0x20000b60

0800a790 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 800a790:	b580      	push	{r7, lr}
 800a792:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 800a794:	4b12      	ldr	r3, [pc, #72]	; (800a7e0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	f3bf 8f5b 	dmb	ish
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	f003 0301 	and.w	r3, r3, #1
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	bf0c      	ite	eq
 800a7a6:	2301      	moveq	r3, #1
 800a7a8:	2300      	movne	r3, #0
 800a7aa:	b2db      	uxtb	r3, r3
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d013      	beq.n	800a7d8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 800a7b0:	480b      	ldr	r0, [pc, #44]	; (800a7e0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800a7b2:	f00e fe9f 	bl	80194f4 <__cxa_guard_acquire>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	bf14      	ite	ne
 800a7bc:	2301      	movne	r3, #1
 800a7be:	2300      	moveq	r3, #0
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d008      	beq.n	800a7d8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 800a7c6:	4807      	ldr	r0, [pc, #28]	; (800a7e4 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 800a7c8:	f7ff ffab 	bl	800a722 <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 800a7cc:	4806      	ldr	r0, [pc, #24]	; (800a7e8 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 800a7ce:	f00f f8f2 	bl	80199b6 <atexit>
 800a7d2:	4803      	ldr	r0, [pc, #12]	; (800a7e0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 800a7d4:	f00e fe9a 	bl	801950c <__cxa_guard_release>
		return instance;
 800a7d8:	4b02      	ldr	r3, [pc, #8]	; (800a7e4 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	20000c64 	.word	0x20000c64
 800a7e4:	20000b60 	.word	0x20000b60
 800a7e8:	0800a781 	.word	0x0800a781

0800a7ec <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a7fc:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a804:	1c59      	adds	r1, r3, #1
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 800a80c:	011b      	lsls	r3, r3, #4
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	4413      	add	r3, r2
 800a812:	6839      	ldr	r1, [r7, #0]
 800a814:	4618      	mov	r0, r3
 800a816:	f000 f9ac 	bl	800ab72 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 800a81a:	68fb      	ldr	r3, [r7, #12]
	}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3710      	adds	r7, #16
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	011b      	lsls	r3, r3, #4
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	18d0      	adds	r0, r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a83c:	011b      	lsls	r3, r3, #4
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	4413      	add	r3, r2
 800a842:	4619      	mov	r1, r3
 800a844:	f000 f995 	bl	800ab72 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a84e:	011b      	lsls	r3, r3, #4
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	4413      	add	r3, r2
 800a854:	2100      	movs	r1, #0
 800a856:	4618      	mov	r0, r3
 800a858:	f000 f9a6 	bl	800aba8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a862:	1e5a      	subs	r2, r3, #1
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 800a86a:	bf00      	nop
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	429a      	cmp	r2, r3
 800a886:	d104      	bne.n	800a892 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 800a88c:	4618      	mov	r0, r3
 800a88e:	f000 f90a 	bl	800aaa6 <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 800a892:	bf00      	nop
 800a894:	3708      	adds	r7, #8
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
	...

0800a89c <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 800a89c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89e:	b087      	sub	sp, #28
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 800a8a6:	6838      	ldr	r0, [r7, #0]
 800a8a8:	f7ff feee 	bl	800a688 <_ZL17AdcModuleToHandle9AdcModule>
 800a8ac:	4602      	mov	r2, r0
					)) {
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	69da      	ldr	r2, [r3, #28]
					)) {
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	685c      	ldr	r4, [r3, #4]
 800a8c0:	4b2f      	ldr	r3, [pc, #188]	; (800a980 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 800a8c2:	429c      	cmp	r4, r3
 800a8c4:	d801      	bhi.n	800a8ca <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 800a8c6:	0063      	lsls	r3, r4, #1
 800a8c8:	e001      	b.n	800a8ce <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 800a8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ce:	4618      	mov	r0, r3
 800a8d0:	f00e fe1f 	bl	8019512 <_Znaj>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	461e      	mov	r6, r3
 800a8d8:	4635      	mov	r5, r6
 800a8da:	1e63      	subs	r3, r4, #1
 800a8dc:	461c      	mov	r4, r3
 800a8de:	2c00      	cmp	r4, #0
 800a8e0:	db05      	blt.n	800a8ee <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f7ff feea 	bl	800a6bc <_ZN10AdcChannelC1Ev>
 800a8e8:	3502      	adds	r5, #2
 800a8ea:	3c01      	subs	r4, #1
 800a8ec:	e7f7      	b.n	800a8de <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	4a22      	ldr	r2, [pc, #136]	; (800a980 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d801      	bhi.n	800a900 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 800a8fc:	005b      	lsls	r3, r3, #1
 800a8fe:	e001      	b.n	800a904 <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 800a900:	f04f 33ff 	mov.w	r3, #4294967295
 800a904:	4618      	mov	r0, r3
 800a906:	f00e fe04 	bl	8019512 <_Znaj>
 800a90a:	4603      	mov	r3, r0
 800a90c:	461a      	mov	r2, r3
					)) {
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	60da      	str	r2, [r3, #12]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 800a918:	f7ff ff3a 	bl	800a790 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800a91c:	4604      	mov	r4, r0
 800a91e:	687a      	ldr	r2, [r7, #4]
 800a920:	f107 0308 	add.w	r3, r7, #8
 800a924:	4611      	mov	r1, r2
 800a926:	4618      	mov	r0, r3
 800a928:	f000 f958 	bl	800abdc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 800a92c:	f107 0308 	add.w	r3, r7, #8
 800a930:	4619      	mov	r1, r3
 800a932:	4620      	mov	r0, r4
 800a934:	f7ff ff5a 	bl	800a7ec <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 800a938:	4602      	mov	r2, r0
					)) {
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 800a93e:	f107 0308 	add.w	r3, r7, #8
 800a942:	4618      	mov	r0, r3
 800a944:	f7ff fee0 	bl	800a708 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 800a948:	2200      	movs	r2, #0
 800a94a:	2100      	movs	r1, #0
 800a94c:	2001      	movs	r0, #1
 800a94e:	f00a fc88 	bl	8015262 <osSemaphoreNew>
 800a952:	4602      	mov	r2, r0
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2201      	movs	r2, #1
 800a95c:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6818      	ldr	r0, [r3, #0]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800a96a:	461a      	mov	r2, r3
 800a96c:	f003 fc92 	bl	800e294 <HAL_ADC_Start_DMA>
		update();
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f854 	bl	800aa1e <_ZN19AdcModuleController6updateEv>
	}
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4618      	mov	r0, r3
 800a97a:	371c      	adds	r7, #28
 800a97c:	46bd      	mov	sp, r7
 800a97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a980:	3ffffffc 	.word	0x3ffffffc

0800a984 <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 800a98c:	f7ff ff00 	bl	800a790 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800a990:	4602      	mov	r2, r0
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	699b      	ldr	r3, [r3, #24]
 800a996:	4619      	mov	r1, r3
 800a998:	4610      	mov	r0, r2
 800a99a:	f7ff ff43 	bl	800a824 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	695b      	ldr	r3, [r3, #20]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f00a fd7c 	bl	80154a0 <osSemaphoreGetCount>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	bf14      	ite	ne
 800a9ae:	2301      	movne	r3, #1
 800a9b0:	2300      	moveq	r3, #0
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d006      	beq.n	800a9c6 <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	f04f 31ff 	mov.w	r1, #4294967295
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f00a fcd7 	bl	8015374 <osSemaphoreAcquire>
		}
		delete[] m_channels;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	689b      	ldr	r3, [r3, #8]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d004      	beq.n	800a9d8 <_ZN19AdcModuleControllerD1Ev+0x54>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f00e fd8c 	bl	80194f0 <_ZdaPv>
		delete[] m_buffer;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <_ZN19AdcModuleControllerD1Ev+0x66>
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f00e fd83 	bl	80194f0 <_ZdaPv>
	}
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3708      	adds	r7, #8
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	685b      	ldr	r3, [r3, #4]
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d301      	bcc.n	800aa0c <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 800aa08:	f002 fca2 	bl	800d350 <Error_Handler>
		}
		return m_channels + rank;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	689a      	ldr	r2, [r3, #8]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	005b      	lsls	r3, r3, #1
 800aa14:	4413      	add	r3, r2
	}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <_ZN19AdcModuleController6updateEv>:

	void update() {
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b084      	sub	sp, #16
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	695b      	ldr	r3, [r3, #20]
 800aa2a:	f04f 31ff 	mov.w	r1, #4294967295
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f00a fca0 	bl	8015374 <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 800aa34:	2300      	movs	r3, #0
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d211      	bcs.n	800aa66 <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	689a      	ldr	r2, [r3, #8]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	18d0      	adds	r0, r2, r3
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68da      	ldr	r2, [r3, #12]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	005b      	lsls	r3, r3, #1
 800aa54:	4413      	add	r3, r2
 800aa56:	881b      	ldrh	r3, [r3, #0]
 800aa58:	4619      	mov	r1, r3
 800aa5a:	f7ff fe46 	bl	800a6ea <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	3301      	adds	r3, #1
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	e7e8      	b.n	800aa38 <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800aa78:	461a      	mov	r2, r3
 800aa7a:	f003 fc0b 	bl	800e294 <HAL_ADC_Start_DMA>
	}
 800aa7e:	bf00      	nop
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <_ZN19AdcModuleController10weakUpdateEv>:

	void weakUpdate() {
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b082      	sub	sp, #8
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	7c1b      	ldrb	r3, [r3, #16]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d103      	bne.n	800aa9e <_ZN19AdcModuleController10weakUpdateEv+0x18>
			return;
		else
			update();
 800aa96:	6878      	ldr	r0, [r7, #4]
 800aa98:	f7ff ffc1 	bl	800aa1e <_ZN19AdcModuleController6updateEv>
 800aa9c:	e000      	b.n	800aaa0 <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 800aa9e:	bf00      	nop
	}
 800aaa0:	3708      	adds	r7, #8
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 800aaa6:	b580      	push	{r7, lr}
 800aaa8:	b082      	sub	sp, #8
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	2200      	movs	r2, #0
 800aab2:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	695b      	ldr	r3, [r3, #20]
 800aab8:	4618      	mov	r0, r3
 800aaba:	f00a fcad 	bl	8015418 <osSemaphoreRelease>
	}
 800aabe:	bf00      	nop
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 800aac6:	b580      	push	{r7, lr}
 800aac8:	b082      	sub	sp, #8
 800aaca:	af00      	add	r7, sp, #0
 800aacc:	6078      	str	r0, [r7, #4]
	switch(module){
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d003      	beq.n	800aadc <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2b01      	cmp	r3, #1
 800aad8:	d004      	beq.n	800aae4 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 800aada:	e007      	b.n	800aaec <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 800aadc:	f000 f8b0 	bl	800ac40 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 800aae0:	4603      	mov	r3, r0
 800aae2:	e008      	b.n	800aaf6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 800aae4:	f000 f8e2 	bl	800acac <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 800aae8:	4603      	mov	r3, r0
 800aaea:	e004      	b.n	800aaf6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 800aaec:	f002 fc30 	bl	800d350 <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 800aaf0:	f000 f8a6 	bl	800ac40 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 800aaf4:	4603      	mov	r3, r0
	}
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3708      	adds	r7, #8
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <_ZN20AdcChannelControllerC1E9AdcModulej>:



class AdcChannelController {
public:
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	60f8      	str	r0, [r7, #12]
 800ab06:	60b9      	str	r1, [r7, #8]
 800ab08:	607a      	str	r2, [r7, #4]
			m_module(_getChannelAdcModuleControllerRuntime(module)),
 800ab0a:	68b8      	ldr	r0, [r7, #8]
 800ab0c:	f7ff ffdb 	bl	800aac6 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 800ab10:	4602      	mov	r2, r0
			m_channel(m_module.getChannelByRank(rank)) {
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	601a      	str	r2, [r3, #0]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f7ff ff69 	bl	800a9f4 <_ZN19AdcModuleController16getChannelByRankEj>
 800ab22:	4602      	mov	r2, r0
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	605a      	str	r2, [r3, #4]
	}
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 800ab32:	b580      	push	{r7, lr}
 800ab34:	b082      	sub	sp, #8
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
		m_module.weakUpdate();
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7ff ffa1 	bl	800aa86 <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff fdc2 	bl	800a6d2 <_ZN10AdcChannel3getEv>
 800ab4e:	4603      	mov	r3, r0
	}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3708      	adds	r7, #8
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7f6 fc64 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b086      	sub	sp, #24
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
 800ab7a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800ab7c:	f107 0308 	add.w	r3, r7, #8
 800ab80:	6839      	ldr	r1, [r7, #0]
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 f8c0 	bl	800ad08 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 800ab88:	f107 0308 	add.w	r3, r7, #8
 800ab8c:	6879      	ldr	r1, [r7, #4]
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 f8dc 	bl	800ad4c <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 800ab94:	f107 0308 	add.w	r3, r7, #8
 800ab98:	4618      	mov	r0, r3
 800ab9a:	f7ff fdb5 	bl	800a708 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 800ab9e:	687b      	ldr	r3, [r7, #4]
      }
 800aba0:	4618      	mov	r0, r3
 800aba2:	3718      	adds	r7, #24
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00b      	beq.n	800abd2 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	6879      	ldr	r1, [r7, #4]
 800abc2:	2203      	movs	r2, #3
 800abc4:	4798      	blx	r3
	    _M_manager = nullptr;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2200      	movs	r2, #0
 800abca:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	60da      	str	r2, [r3, #12]
	return *this;
 800abd2:	687b      	ldr	r3, [r7, #4]
      }
 800abd4:	4618      	mov	r0, r3
 800abd6:	3708      	adds	r7, #8
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}

0800abdc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800abdc:	b590      	push	{r4, r7, lr}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
 800abe4:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4618      	mov	r0, r3
 800abea:	f7f6 fc21 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800abee:	463b      	mov	r3, r7
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 f8d7 	bl	800ada4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00f      	beq.n	800ac1c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800abfc:	687c      	ldr	r4, [r7, #4]
 800abfe:	463b      	mov	r3, r7
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 f8da 	bl	800adba <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 800ac06:	4603      	mov	r3, r0
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4620      	mov	r0, r4
 800ac0c:	f000 f8e0 	bl	800add0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a05      	ldr	r2, [pc, #20]	; (800ac28 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 800ac14:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	4a04      	ldr	r2, [pc, #16]	; (800ac2c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 800ac1a:	609a      	str	r2, [r3, #8]
      }
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	370c      	adds	r7, #12
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd90      	pop	{r4, r7, pc}
 800ac26:	bf00      	nop
 800ac28:	0800adf5 	.word	0x0800adf5
 800ac2c:	0800ae1f 	.word	0x0800ae1f

0800ac30 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 800ac30:	b580      	push	{r7, lr}
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	4801      	ldr	r0, [pc, #4]	; (800ac3c <__tcf_1+0xc>)
 800ac36:	f7ff fea5 	bl	800a984 <_ZN19AdcModuleControllerD1Ev>
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20000c68 	.word	0x20000c68

0800ac40 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800ac40:	b580      	push	{r7, lr}
 800ac42:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 800ac44:	4b12      	ldr	r3, [pc, #72]	; (800ac90 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	f3bf 8f5b 	dmb	ish
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	f003 0301 	and.w	r3, r3, #1
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	bf0c      	ite	eq
 800ac56:	2301      	moveq	r3, #1
 800ac58:	2300      	movne	r3, #0
 800ac5a:	b2db      	uxtb	r3, r3
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d014      	beq.n	800ac8a <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 800ac60:	480b      	ldr	r0, [pc, #44]	; (800ac90 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800ac62:	f00e fc47 	bl	80194f4 <__cxa_guard_acquire>
 800ac66:	4603      	mov	r3, r0
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	bf14      	ite	ne
 800ac6c:	2301      	movne	r3, #1
 800ac6e:	2300      	moveq	r3, #0
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d009      	beq.n	800ac8a <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 800ac76:	2100      	movs	r1, #0
 800ac78:	4806      	ldr	r0, [pc, #24]	; (800ac94 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 800ac7a:	f7ff fe0f 	bl	800a89c <_ZN19AdcModuleControllerC1E9AdcModule>
 800ac7e:	4806      	ldr	r0, [pc, #24]	; (800ac98 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 800ac80:	f00e fe99 	bl	80199b6 <atexit>
 800ac84:	4802      	ldr	r0, [pc, #8]	; (800ac90 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800ac86:	f00e fc41 	bl	801950c <__cxa_guard_release>
	return instance;
 800ac8a:	4b02      	ldr	r3, [pc, #8]	; (800ac94 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20000c84 	.word	0x20000c84
 800ac94:	20000c68 	.word	0x20000c68
 800ac98:	0800ac31 	.word	0x0800ac31

0800ac9c <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	4801      	ldr	r0, [pc, #4]	; (800aca8 <__tcf_2+0xc>)
 800aca2:	f7ff fe6f 	bl	800a984 <_ZN19AdcModuleControllerD1Ev>
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	20000c88 	.word	0x20000c88

0800acac <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800acac:	b580      	push	{r7, lr}
 800acae:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 800acb0:	4b12      	ldr	r3, [pc, #72]	; (800acfc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	f3bf 8f5b 	dmb	ish
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	bf0c      	ite	eq
 800acc2:	2301      	moveq	r3, #1
 800acc4:	2300      	movne	r3, #0
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d014      	beq.n	800acf6 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800accc:	480b      	ldr	r0, [pc, #44]	; (800acfc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800acce:	f00e fc11 	bl	80194f4 <__cxa_guard_acquire>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	bf14      	ite	ne
 800acd8:	2301      	movne	r3, #1
 800acda:	2300      	moveq	r3, #0
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d009      	beq.n	800acf6 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800ace2:	2101      	movs	r1, #1
 800ace4:	4806      	ldr	r0, [pc, #24]	; (800ad00 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 800ace6:	f7ff fdd9 	bl	800a89c <_ZN19AdcModuleControllerC1E9AdcModule>
 800acea:	4806      	ldr	r0, [pc, #24]	; (800ad04 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 800acec:	f00e fe63 	bl	80199b6 <atexit>
 800acf0:	4802      	ldr	r0, [pc, #8]	; (800acfc <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800acf2:	f00e fc0b 	bl	801950c <__cxa_guard_release>
	return instance;
 800acf6:	4b02      	ldr	r3, [pc, #8]	; (800ad00 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	20000ca4 	.word	0x20000ca4
 800ad00:	20000c88 	.word	0x20000c88
 800ad04:	0800ac9d 	.word	0x0800ac9d

0800ad08 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b082      	sub	sp, #8
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
    : _Function_base()
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7f6 fb8b 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 800ad1a:	6838      	ldr	r0, [r7, #0]
 800ad1c:	f000 f89e 	bl	800ae5c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 800ad20:	4603      	mov	r3, r0
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d00d      	beq.n	800ad42 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	689b      	ldr	r3, [r3, #8]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	6839      	ldr	r1, [r7, #0]
 800ad2e:	2202      	movs	r2, #2
 800ad30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	68da      	ldr	r2, [r3, #12]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	689a      	ldr	r2, [r3, #8]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	609a      	str	r2, [r3, #8]
    }
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4618      	mov	r0, r3
 800ad46:	3708      	adds	r7, #8
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b082      	sub	sp, #8
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
 800ad54:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	683a      	ldr	r2, [r7, #0]
 800ad5a:	4611      	mov	r1, r2
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7f6 fd44 	bl	80017ea <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f103 0208 	add.w	r2, r3, #8
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	4610      	mov	r0, r2
 800ad70:	f7f6 fd6d 	bl	800184e <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f103 020c 	add.w	r2, r3, #12
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	330c      	adds	r3, #12
 800ad7e:	4619      	mov	r1, r3
 800ad80:	4610      	mov	r0, r2
 800ad82:	f000 f886 	bl	800ae92 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800ad86:	bf00      	nop
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ad8e:	b480      	push	{r7}
 800ad90:	b083      	sub	sp, #12
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
	  { return true; }
 800adac:	2301      	movs	r3, #1
 800adae:	4618      	mov	r0, r3
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr

0800adba <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800adba:	b480      	push	{r7}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	4618      	mov	r0, r3
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800add0:	b590      	push	{r4, r7, lr}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800adda:	6838      	ldr	r0, [r7, #0]
 800addc:	f7ff ffed 	bl	800adba <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 800ade0:	4603      	mov	r3, r0
 800ade2:	4622      	mov	r2, r4
 800ade4:	4619      	mov	r1, r3
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f872 	bl	800aed0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	bd90      	pop	{r4, r7, pc}

0800adf4 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800adf4:	b590      	push	{r4, r7, lr}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
 800adfc:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 f87f 	bl	800af02 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 800ae04:	4604      	mov	r4, r0
 800ae06:	6838      	ldr	r0, [r7, #0]
 800ae08:	f7ff ffc1 	bl	800ad8e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	4619      	mov	r1, r3
 800ae10:	4620      	mov	r0, r4
 800ae12:	f000 f887 	bl	800af24 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 800ae16:	bf00      	nop
      }
 800ae18:	370c      	adds	r7, #12
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd90      	pop	{r4, r7, pc}

0800ae1e <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800ae1e:	b590      	push	{r4, r7, lr}
 800ae20:	b085      	sub	sp, #20
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	4613      	mov	r3, r2
 800ae2a:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800ae2c:	79fb      	ldrb	r3, [r7, #7]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d109      	bne.n	800ae46 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f000 f88c 	bl	800af50 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 800ae38:	4604      	mov	r4, r0
 800ae3a:	68b8      	ldr	r0, [r7, #8]
 800ae3c:	f000 f861 	bl	800af02 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 800ae40:	4603      	mov	r3, r0
 800ae42:	6023      	str	r3, [r4, #0]
	    break;
 800ae44:	e005      	b.n	800ae52 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800ae46:	79fb      	ldrb	r3, [r7, #7]
 800ae48:	461a      	mov	r2, r3
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f000 f88b 	bl	800af68 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 800ae52:	2300      	movs	r3, #0
      }
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	bd90      	pop	{r4, r7, pc}

0800ae5c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b082      	sub	sp, #8
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7f6 fb03 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	f083 0301 	eor.w	r3, r3, #1
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	4618      	mov	r0, r3
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}

0800ae7c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	4618      	mov	r0, r3
 800ae88:	370c      	adds	r7, #12
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b084      	sub	sp, #16
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff ffed 	bl	800ae7c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800aea2:	4603      	mov	r3, r0
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800aea8:	6838      	ldr	r0, [r7, #0]
 800aeaa:	f7ff ffe7 	bl	800ae7c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800aeb6:	f107 030c 	add.w	r3, r7, #12
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7ff ffde 	bl	800ae7c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800aec0:	4603      	mov	r3, r0
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	601a      	str	r2, [r3, #0]
    }
 800aec8:	bf00      	nop
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800aed0:	b590      	push	{r4, r7, lr}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	60f8      	str	r0, [r7, #12]
 800aed8:	60b9      	str	r1, [r7, #8]
 800aeda:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800aedc:	68b8      	ldr	r0, [r7, #8]
 800aede:	f7ff ff6c 	bl	800adba <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 800aee2:	4604      	mov	r4, r0
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f7fd fc17 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800aeea:	4603      	mov	r3, r0
 800aeec:	4619      	mov	r1, r3
 800aeee:	2004      	movs	r0, #4
 800aef0:	f7fd fc06 	bl	8008700 <_ZnwjPv>
 800aef4:	4602      	mov	r2, r0
 800aef6:	6823      	ldr	r3, [r4, #0]
 800aef8:	6013      	str	r3, [r2, #0]
 800aefa:	bf00      	nop
 800aefc:	3714      	adds	r7, #20
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd90      	pop	{r4, r7, pc}

0800af02 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800af02:	b580      	push	{r7, lr}
 800af04:	b084      	sub	sp, #16
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f857 	bl	800afbe <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 800af10:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f000 f85f 	bl	800afd6 <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 800af18:	4603      	mov	r3, r0
 800af1a:	bf00      	nop
	}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3710      	adds	r7, #16
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800af24:	b5b0      	push	{r4, r5, r7, lr}
 800af26:	b082      	sub	sp, #8
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 f85c 	bl	800afec <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 800af34:	4604      	mov	r4, r0
 800af36:	6838      	ldr	r0, [r7, #0]
 800af38:	f7ff ff29 	bl	800ad8e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800af3c:	4603      	mov	r3, r0
 800af3e:	461a      	mov	r2, r3
 800af40:	4621      	mov	r1, r4
 800af42:	4628      	mov	r0, r5
 800af44:	f000 f85d 	bl	800b002 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800af48:	bf00      	nop
 800af4a:	3708      	adds	r7, #8
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bdb0      	pop	{r4, r5, r7, pc}

0800af50 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f7fd fbdd 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800af5e:	4603      	mov	r3, r0
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800af68:	b5b0      	push	{r4, r5, r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	4613      	mov	r3, r2
 800af74:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800af76:	79fb      	ldrb	r3, [r7, #7]
 800af78:	2b03      	cmp	r3, #3
 800af7a:	d016      	beq.n	800afaa <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 800af7c:	2b03      	cmp	r3, #3
 800af7e:	dc19      	bgt.n	800afb4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 800af80:	2b01      	cmp	r3, #1
 800af82:	d002      	beq.n	800af8a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 800af84:	2b02      	cmp	r3, #2
 800af86:	d00a      	beq.n	800af9e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 800af88:	e014      	b.n	800afb4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f7ff ffe0 	bl	800af50 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 800af90:	4604      	mov	r4, r0
 800af92:	68b8      	ldr	r0, [r7, #8]
 800af94:	f7ff ffb5 	bl	800af02 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 800af98:	4603      	mov	r3, r0
 800af9a:	6023      	str	r3, [r4, #0]
	      break;
 800af9c:	e00a      	b.n	800afb4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800af9e:	462a      	mov	r2, r5
 800afa0:	68b9      	ldr	r1, [r7, #8]
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 f844 	bl	800b030 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 800afa8:	e004      	b.n	800afb4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800afaa:	4621      	mov	r1, r4
 800afac:	68f8      	ldr	r0, [r7, #12]
 800afae:	f000 f858 	bl	800b062 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800afb2:	bf00      	nop
	  return false;
 800afb4:	2300      	movs	r3, #0
	}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bdb0      	pop	{r4, r5, r7, pc}

0800afbe <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b082      	sub	sp, #8
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7fd fbb1 	bl	800872e <_ZNKSt9_Any_data9_M_accessEv>
 800afcc:	4603      	mov	r3, r0
 800afce:	4618      	mov	r0, r3
 800afd0:	3708      	adds	r7, #8
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800afd6:	b480      	push	{r7}
 800afd8:	b083      	sub	sp, #12
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	4618      	mov	r0, r3
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800afec:	b480      	push	{r7}
 800afee:	b083      	sub	sp, #12
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4618      	mov	r0, r3
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800b002:	b590      	push	{r4, r7, lr}
 800b004:	b085      	sub	sp, #20
 800b006:	af00      	add	r7, sp, #0
 800b008:	7338      	strb	r0, [r7, #12]
 800b00a:	60b9      	str	r1, [r7, #8]
 800b00c:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800b00e:	68b8      	ldr	r0, [r7, #8]
 800b010:	f7ff ffec 	bl	800afec <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 800b014:	4604      	mov	r4, r0
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f7ff feb9 	bl	800ad8e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800b01c:	4603      	mov	r3, r0
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4619      	mov	r1, r3
 800b022:	4620      	mov	r0, r4
 800b024:	f7ff fc25 	bl	800a872 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 800b028:	bf00      	nop
 800b02a:	3714      	adds	r7, #20
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd90      	pop	{r4, r7, pc}

0800b030 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800b030:	b590      	push	{r4, r7, lr}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	60f8      	str	r0, [r7, #12]
 800b038:	60b9      	str	r1, [r7, #8]
 800b03a:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800b03c:	68b8      	ldr	r0, [r7, #8]
 800b03e:	f7ff ffbe 	bl	800afbe <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 800b042:	4604      	mov	r4, r0
 800b044:	68f8      	ldr	r0, [r7, #12]
 800b046:	f7fd fb67 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800b04a:	4603      	mov	r3, r0
 800b04c:	4619      	mov	r1, r3
 800b04e:	2004      	movs	r0, #4
 800b050:	f7fd fb56 	bl	8008700 <_ZnwjPv>
 800b054:	4602      	mov	r2, r0
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	6013      	str	r3, [r2, #0]
	}
 800b05a:	bf00      	nop
 800b05c:	3714      	adds	r7, #20
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd90      	pop	{r4, r7, pc}

0800b062 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800b062:	b580      	push	{r7, lr}
 800b064:	b082      	sub	sp, #8
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 f804 	bl	800b07a <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 800b072:	bf00      	nop
 800b074:	3708      	adds	r7, #8
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b082      	sub	sp, #8
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7fd fb48 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800b088:	4603      	mov	r3, r0
 800b08a:	4618      	mov	r0, r3
 800b08c:	3708      	adds	r7, #8
 800b08e:	46bd      	mov	sp, r7
 800b090:	bd80      	pop	{r7, pc}
	...

0800b094 <_ZN7cooling6updateEv>:
	osMutexAcquire(s_modeMutex, osWaitForever);
	s_nextMode = mode;
	osMutexRelease(s_modeMutex);
}

void update(){
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
	osMutexAcquire(s_modeMutex, osWaitForever);
 800b09a:	4b12      	ldr	r3, [pc, #72]	; (800b0e4 <_ZN7cooling6updateEv+0x50>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f04f 31ff 	mov.w	r1, #4294967295
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f00a f855 	bl	8015152 <osMutexAcquire>
	s_mode = s_nextMode;
 800b0a8:	4b0f      	ldr	r3, [pc, #60]	; (800b0e8 <_ZN7cooling6updateEv+0x54>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a0f      	ldr	r2, [pc, #60]	; (800b0ec <_ZN7cooling6updateEv+0x58>)
 800b0ae:	6013      	str	r3, [r2, #0]
	osMutexRelease(s_modeMutex);
 800b0b0:	4b0c      	ldr	r3, [pc, #48]	; (800b0e4 <_ZN7cooling6updateEv+0x50>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f00a f897 	bl	80151e8 <osMutexRelease>

	switch(s_mode){
 800b0ba:	4b0c      	ldr	r3, [pc, #48]	; (800b0ec <_ZN7cooling6updateEv+0x58>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b02      	cmp	r3, #2
 800b0c0:	d005      	beq.n	800b0ce <_ZN7cooling6updateEv+0x3a>
 800b0c2:	2b02      	cmp	r3, #2
 800b0c4:	dc06      	bgt.n	800b0d4 <_ZN7cooling6updateEv+0x40>
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d003      	beq.n	800b0d2 <_ZN7cooling6updateEv+0x3e>
 800b0ca:	2b01      	cmp	r3, #1
	case MODE::ON:
		break;
	case MODE::DYNAMIC:
		break;
 800b0cc:	e002      	b.n	800b0d4 <_ZN7cooling6updateEv+0x40>
	case MODE::OFF:
		break;
 800b0ce:	bf00      	nop
 800b0d0:	e000      	b.n	800b0d4 <_ZN7cooling6updateEv+0x40>
		break;
 800b0d2:	bf00      	nop
	}

	float temperature = 0; // TODO get temperatur values.
 800b0d4:	f04f 0300 	mov.w	r3, #0
 800b0d8:	607b      	str	r3, [r7, #4]

}
 800b0da:	bf00      	nop
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}
 800b0e2:	bf00      	nop
 800b0e4:	20000cb0 	.word	0x20000cb0
 800b0e8:	20000cac 	.word	0x20000cac
 800b0ec:	20000ca8 	.word	0x20000ca8

0800b0f0 <_Z41__static_initialization_and_destruction_0ii>:

}
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b082      	sub	sp, #8
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d10a      	bne.n	800b116 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b106:	4293      	cmp	r3, r2
 800b108:	d105      	bne.n	800b116 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t s_modeMutex = osMutexNew(NULL);
 800b10a:	2000      	movs	r0, #0
 800b10c:	f009 ff9b 	bl	8015046 <osMutexNew>
 800b110:	4603      	mov	r3, r0
 800b112:	4a03      	ldr	r2, [pc, #12]	; (800b120 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800b114:	6013      	str	r3, [r2, #0]
}
 800b116:	bf00      	nop
 800b118:	3708      	adds	r7, #8
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	20000cb0 	.word	0x20000cb0

0800b124 <_GLOBAL__sub_I__ZN7cooling7setModeENS_4MODEE>:
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
 800b128:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b12c:	2001      	movs	r0, #1
 800b12e:	f7ff ffdf 	bl	800b0f0 <_Z41__static_initialization_and_destruction_0ii>
 800b132:	bd80      	pop	{r7, pc}

0800b134 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b144:	f04f 0200 	mov.w	r2, #0
 800b148:	f04f 0300 	mov.w	r3, #0
 800b14c:	0c02      	lsrs	r2, r0, #16
 800b14e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800b152:	0c0b      	lsrs	r3, r1, #16
 800b154:	4613      	mov	r3, r2
 800b156:	81fb      	strh	r3, [r7, #14]
                return value * (0.036f);
 800b158:	89fb      	ldrh	r3, [r7, #14]
 800b15a:	ee07 3a90 	vmov	s15, r3
 800b15e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b162:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800b178 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_+0x44>
 800b166:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800b16a:	eeb0 0a67 	vmov.f32	s0, s15
 800b16e:	3714      	adds	r7, #20
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr
 800b178:	3d1374bc 	.word	0x3d1374bc
 800b17c:	00000000 	.word	0x00000000

0800b180 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_>:
            constexpr static inline double get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
                uint32_t value = static_cast<uint32_t>((intel & 0xFFFFFFFF00000000ull) >> 32);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b190:	f04f 0200 	mov.w	r2, #0
 800b194:	f04f 0300 	mov.w	r3, #0
 800b198:	000a      	movs	r2, r1
 800b19a:	2300      	movs	r3, #0
 800b19c:	4613      	mov	r3, r2
 800b19e:	60fb      	str	r3, [r7, #12]
                return value * (0.001);
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7f5 f9af 	bl	8000504 <__aeabi_ui2d>
 800b1a6:	a308      	add	r3, pc, #32	; (adr r3, 800b1c8 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_+0x48>)
 800b1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ac:	f7f5 fa24 	bl	80005f8 <__aeabi_dmul>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	460b      	mov	r3, r1
 800b1b4:	ec43 2b17 	vmov	d7, r2, r3
            }
 800b1b8:	eeb0 0a47 	vmov.f32	s0, s14
 800b1bc:	eef0 0a67 	vmov.f32	s1, s15
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	d2f1a9fc 	.word	0xd2f1a9fc
 800b1cc:	3f50624d 	.word	0x3f50624d

0800b1d0 <_ZN14PressureSensorC1E9AdcModulet>:
#include "AdcChannelController.hpp"

class PressureSensor {
public:

	explicit PressureSensor(AdcModule module, uint16_t rank) : m_adcChannel(module, rank){
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b084      	sub	sp, #16
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	60f8      	str	r0, [r7, #12]
 800b1d8:	60b9      	str	r1, [r7, #8]
 800b1da:	4613      	mov	r3, r2
 800b1dc:	80fb      	strh	r3, [r7, #6]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	88fa      	ldrh	r2, [r7, #6]
 800b1e2:	68b9      	ldr	r1, [r7, #8]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff fc8a 	bl	800aafe <_ZN20AdcChannelControllerC1E9AdcModulej>

	}
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <_ZN14PressureSensor3getEv>:

	float get(){
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_adcChannel.get();
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4618      	mov	r0, r3
 800b200:	f7ff fc97 	bl	800ab32 <_ZN20AdcChannelController3getEv>
 800b204:	4603      	mov	r3, r0
 800b206:	817b      	strh	r3, [r7, #10]
		float pressure = c1 * avalue + c2;
 800b208:	897b      	ldrh	r3, [r7, #10]
 800b20a:	ee07 3a90 	vmov	s15, r3
 800b20e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b212:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800b264 <_ZN14PressureSensor3getEv+0x70>
 800b216:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b21a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800b21e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b222:	edc7 7a03 	vstr	s15, [r7, #12]
		if(pressure < messageLowerLimit){
 800b226:	edd7 7a03 	vldr	s15, [r7, #12]
 800b22a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800b268 <_ZN14PressureSensor3getEv+0x74>
 800b22e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b236:	d501      	bpl.n	800b23c <_ZN14PressureSensor3getEv+0x48>
			pressure = messageLowerLimit;
 800b238:	4b0c      	ldr	r3, [pc, #48]	; (800b26c <_ZN14PressureSensor3getEv+0x78>)
 800b23a:	60fb      	str	r3, [r7, #12]
		}
		if(pressure > messageUpperLimit){
 800b23c:	edd7 7a03 	vldr	s15, [r7, #12]
 800b240:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800b270 <_ZN14PressureSensor3getEv+0x7c>
 800b244:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24c:	dd01      	ble.n	800b252 <_ZN14PressureSensor3getEv+0x5e>
			pressure = messageUpperLimit;
 800b24e:	4b09      	ldr	r3, [pc, #36]	; (800b274 <_ZN14PressureSensor3getEv+0x80>)
 800b250:	60fb      	str	r3, [r7, #12]
		}
		return pressure;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	ee07 3a90 	vmov	s15, r3
	}
 800b258:	eeb0 0a67 	vmov.f32	s0, s15
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	3bb00b01 	.word	0x3bb00b01
 800b268:	bff33333 	.word	0xbff33333
 800b26c:	bff33333 	.word	0xbff33333
 800b270:	418f3333 	.word	0x418f3333
 800b274:	418f3333 	.word	0x418f3333

0800b278 <_ZN9ImuMaster9getAccelXEv>:

	/**
	 * Get acceleration in X direction of the pod in m/s^2.
	 * @return Acceleration in X direction of the pod in m/s^2.
	 */
	inline float getAccelX() { return m_accelZ; }
 800b278:	b480      	push	{r7}
 800b27a:	b083      	sub	sp, #12
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800b286:	ee07 3a90 	vmov	s15, r3
 800b28a:	eeb0 0a67 	vmov.f32	s0, s15
 800b28e:	370c      	adds	r7, #12
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <_ZN9ImuMaster9getAccelYEv>:

	/**
	 * Get acceleration in Y direction of the pod in m/s^2.
	 * @return Acceleration in Y direction of the pod in m/s^2.
	 */
	inline float getAccelY() { return -m_accelY; }
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 800b2a6:	eef1 7a67 	vneg.f32	s15, s15
 800b2aa:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ae:	370c      	adds	r7, #12
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <_ZN9ImuMaster9getAccelZEv>:

	/**
	 * Get acceleration in Z direction of the pod in m/s^2.
	 * @return Acceleration in Z direction of the pod in m/s^2.
	 */
	inline float getAccelZ() { return -m_accelX; }
 800b2b8:	b480      	push	{r7}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 800b2c6:	eef1 7a67 	vneg.f32	s15, s15
 800b2ca:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ce:	370c      	adds	r7, #12
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr

0800b2d8 <_ZN9ImuMaster8getGyroXEv>:

	/**
	 * Get rotation around X axis of the pod in °/s.
	 * @return Rotation around X axis in °/s.
	 */
	inline float getGyroX() { return m_gyroX; }
 800b2d8:	b480      	push	{r7}
 800b2da:	b083      	sub	sp, #12
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800b2e6:	ee07 3a90 	vmov	s15, r3
 800b2ea:	eeb0 0a67 	vmov.f32	s0, s15
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <_ZN9ImuMaster8getGyroYEv>:

	/**
	 * Get rotation around Y axis of the pod in °/s.
	 * @return Rotation around Y axis in °/s.
	 */
	inline float getGyroY() { return m_gyroZ; }
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800b306:	ee07 3a90 	vmov	s15, r3
 800b30a:	eeb0 0a67 	vmov.f32	s0, s15
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <_ZN9ImuMaster8getGyroZEv>:

	/**
	 * Get rotation around Z axis of the pod in °/s.
	 * @return Rotation around Z axis in °/s.
	 */
	inline float getGyroZ() { return -m_gyroY; }
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 800b326:	eef1 7a67 	vneg.f32	s15, s15
 800b32a:	eeb0 0a67 	vmov.f32	s0, s15
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <_ZN14FiducialSensor8getCountEv>:

	[[nodiscard]] float estimatedPosition(){
		return (m_count * m_distanceBetweenInterrupts) / 1000.0;
	}

	[[nodiscard]] inline unsigned int getCount() {
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
		return m_count;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	69db      	ldr	r3, [r3, #28]
	}
 800b344:	4618      	mov	r0, r3
 800b346:	370c      	adds	r7, #12
 800b348:	46bd      	mov	sp, r7
 800b34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34e:	4770      	bx	lr

0800b350 <_ZZN17KistlerControllerC4EvENKUlR9RxMessageE_clES1_>:
#include "canzero.hpp"

class KistlerController {
public:
	explicit KistlerController(){
		m_receiverId = can::registerMessageReceiver<can::messages::OpticalSensor_TX_MainData>([this](RxMessage& msg){
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
			this->callback(msg);
 800b35e:	6839      	ldr	r1, [r7, #0]
 800b360:	4618      	mov	r0, r3
 800b362:	f000 f876 	bl	800b452 <_ZN17KistlerController8callbackER9RxMessage>
		});
 800b366:	bf00      	nop
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
	...

0800b370 <_ZN17KistlerControllerC1Ev>:
	explicit KistlerController(){
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a0f      	ldr	r2, [pc, #60]	; (800b3b8 <_ZN17KistlerControllerC1Ev+0x48>)
 800b37c:	605a      	str	r2, [r3, #4]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	4a0d      	ldr	r2, [pc, #52]	; (800b3b8 <_ZN17KistlerControllerC1Ev+0x48>)
 800b382:	609a      	str	r2, [r3, #8]
		m_receiverId = can::registerMessageReceiver<can::messages::OpticalSensor_TX_MainData>([this](RxMessage& msg){
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	f107 0308 	add.w	r3, r7, #8
 800b38a:	4611      	mov	r1, r2
 800b38c:	4618      	mov	r0, r3
 800b38e:	f000 f945 	bl	800b61c <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_>
 800b392:	f107 0308 	add.w	r3, r7, #8
 800b396:	4618      	mov	r0, r3
 800b398:	f000 f96a 	bl	800b670 <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE>
 800b39c:	4602      	mov	r2, r0
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	601a      	str	r2, [r3, #0]
 800b3a2:	f107 0308 	add.w	r3, r7, #8
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7f6 f874 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	}
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	c2c80000 	.word	0xc2c80000

0800b3bc <_ZN17KistlerController11getVelocityEv>:
	KistlerController(KistlerController&) = delete;
	KistlerController(KistlerController&&) = delete;
	KistlerController& operator=(KistlerController&) = delete;
	KistlerController& operator=(KistlerController&&) = delete;

	[[nodiscard]] inline float getVelocity(){
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
		return m_velocity;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	ee07 3a90 	vmov	s15, r3
	}
 800b3cc:	eeb0 0a67 	vmov.f32	s0, s15
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <_ZN17KistlerController11getPositionEv>:

	[[nodiscard]] inline float getPosition(){
 800b3da:	b480      	push	{r7}
 800b3dc:	b083      	sub	sp, #12
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
		return m_position;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	ee07 3a90 	vmov	s15, r3
	}
 800b3ea:	eeb0 0a67 	vmov.f32	s0, s15
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af02      	add	r7, sp, #8
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	2301      	movs	r3, #1
 800b40c:	2208      	movs	r2, #8
 800b40e:	4907      	ldr	r1, [pc, #28]	; (800b42c <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x34>)
 800b410:	f7f7 f807 	bl	8002422 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.ExtId != MESSAGE_T::id) {
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	685b      	ldr	r3, [r3, #4]
            if(MESSAGE_T::isExtendedId) {
 800b418:	4a04      	ldr	r2, [pc, #16]	; (800b42c <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x34>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d000      	beq.n	800b420 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
                    while(1);
 800b41e:	e7fe      	b.n	800b41e <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh+0x26>
        };
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	1ffffffa 	.word	0x1ffffffa

0800b430 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800b430:	b580      	push	{r7, lr}
 800b432:	b082      	sub	sp, #8
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
 800b438:	6039      	str	r1, [r7, #0]
 800b43a:	6839      	ldr	r1, [r7, #0]
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	331c      	adds	r3, #28
 800b440:	461a      	mov	r2, r3
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f7ff ffd8 	bl	800b3f8 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4618      	mov	r0, r3
 800b44c:	3708      	adds	r7, #8
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <_ZN17KistlerController8callbackER9RxMessage>:

private:

	void callback(RxMessage& raw){
 800b452:	b580      	push	{r7, lr}
 800b454:	b088      	sub	sp, #32
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	6039      	str	r1, [r7, #0]
		can::Message<can::messages::OpticalSensor_TX_MainData> msg {raw};
 800b45c:	f107 0308 	add.w	r3, r7, #8
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff ffe4 	bl	800b430 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEEC1ERK9RxMessage>
		m_velocity = msg.get<can::signals::OpticalSensor_TX_Vel>();
 800b468:	f107 0308 	add.w	r3, r7, #8
 800b46c:	4618      	mov	r0, r3
 800b46e:	f000 f91f 	bl	800b6b0 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals20OpticalSensor_TX_VelEEENT_8dataTypeEv>
 800b472:	eef0 7a40 	vmov.f32	s15, s0
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	edc3 7a01 	vstr	s15, [r3, #4]
		m_position = msg.get<can::signals::OpticalSensor_TX_Distance>();
 800b47c:	f107 0308 	add.w	r3, r7, #8
 800b480:	4618      	mov	r0, r3
 800b482:	f000 f929 	bl	800b6d8 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals25OpticalSensor_TX_DistanceEEENT_8dataTypeEv>
 800b486:	ec53 2b10 	vmov	r2, r3, d0
 800b48a:	4610      	mov	r0, r2
 800b48c:	4619      	mov	r1, r3
 800b48e:	f7f5 fbab 	bl	8000be8 <__aeabi_d2f>
 800b492:	4602      	mov	r2, r0
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	609a      	str	r2, [r3, #8]
	}
 800b498:	bf00      	nop
 800b49a:	3720      	adds	r7, #32
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <main_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void main_entry(void *argv) {
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b0fe      	sub	sp, #504	; 0x1f8
 800b4a4:	af02      	add	r7, sp, #8
 800b4a6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800b4aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800b4ae:	6018      	str	r0, [r3, #0]
	pdu::init();
 800b4b0:	f000 fd52 	bl	800bf58 <_ZN3pdu4initEv>
	//TODO initalize peripherals.
	ImuMaster imuMaster;
 800b4b4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fe fda9 	bl	800a010 <_ZN9ImuMasterC1Ev>

	PressureSensor pressureSensor(ADC_MODULE2, 3);
 800b4be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b4c2:	2203      	movs	r2, #3
 800b4c4:	2101      	movs	r1, #1
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7ff fe82 	bl	800b1d0 <_ZN14PressureSensorC1E9AdcModulet>

	FiducialSensor fiducialRight = FiducialSensor(
			g_peripherals.m_fiducialRightConfig);
 800b4cc:	4b52      	ldr	r3, [pc, #328]	; (800b618 <main_entry+0x178>)
 800b4ce:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800b4d2:	68da      	ldr	r2, [r3, #12]
 800b4d4:	9200      	str	r2, [sp, #0]
 800b4d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4d8:	f7fd fb62 	bl	8008ba0 <_ZN14FiducialSensorC1E14FiducialConfig>
	FiducialSensor fiducialLeft = FiducialSensor(
			g_peripherals.m_fiducialLeftConfig);
 800b4dc:	4b4e      	ldr	r3, [pc, #312]	; (800b618 <main_entry+0x178>)
 800b4de:	f107 0014 	add.w	r0, r7, #20
 800b4e2:	69da      	ldr	r2, [r3, #28]
 800b4e4:	9200      	str	r2, [sp, #0]
 800b4e6:	3310      	adds	r3, #16
 800b4e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4ea:	f7fd fb59 	bl	8008ba0 <_ZN14FiducialSensorC1E14FiducialConfig>
	KistlerController kistlerController;
 800b4ee:	f107 0308 	add.w	r3, r7, #8
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7ff ff3c 	bl	800b370 <_ZN17KistlerControllerC1Ev>

	imuMaster.start();
 800b4f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7fe fe2b 	bl	800a158 <_ZN9ImuMaster5startEv>

	while (true) {
		//TODO read sensor data.
		imuMaster.syncRead();
 800b502:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b506:	4618      	mov	r0, r3
 800b508:	f7fe fea4 	bl	800a254 <_ZN9ImuMaster8syncReadEv>
		OD_IMU_AccelX_set(imuMaster.getAccelX());
 800b50c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b510:	4618      	mov	r0, r3
 800b512:	f7ff feb1 	bl	800b278 <_ZN9ImuMaster9getAccelXEv>
 800b516:	eef0 7a40 	vmov.f32	s15, s0
 800b51a:	eeb0 0a67 	vmov.f32	s0, s15
 800b51e:	f7fb fe09 	bl	8007134 <_Z17OD_IMU_AccelX_setf>
		OD_IMU_AccelY_set(imuMaster.getAccelY());
 800b522:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b526:	4618      	mov	r0, r3
 800b528:	f7ff feb6 	bl	800b298 <_ZN9ImuMaster9getAccelYEv>
 800b52c:	eef0 7a40 	vmov.f32	s15, s0
 800b530:	eeb0 0a67 	vmov.f32	s0, s15
 800b534:	f7fb fe38 	bl	80071a8 <_Z17OD_IMU_AccelY_setf>
		OD_IMU_AccelZ_set(imuMaster.getAccelZ());
 800b538:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b53c:	4618      	mov	r0, r3
 800b53e:	f7ff febb 	bl	800b2b8 <_ZN9ImuMaster9getAccelZEv>
 800b542:	eef0 7a40 	vmov.f32	s15, s0
 800b546:	eeb0 0a67 	vmov.f32	s0, s15
 800b54a:	f7fb fe67 	bl	800721c <_Z17OD_IMU_AccelZ_setf>

		OD_IMU_GyroX_set(imuMaster.getGyroX());
 800b54e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b552:	4618      	mov	r0, r3
 800b554:	f7ff fec0 	bl	800b2d8 <_ZN9ImuMaster8getGyroXEv>
 800b558:	eef0 7a40 	vmov.f32	s15, s0
 800b55c:	eeb0 0a67 	vmov.f32	s0, s15
 800b560:	f7fb fe96 	bl	8007290 <_Z16OD_IMU_GyroX_setf>
		OD_IMU_GyroY_set(imuMaster.getGyroY());
 800b564:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b568:	4618      	mov	r0, r3
 800b56a:	f7ff fec5 	bl	800b2f8 <_ZN9ImuMaster8getGyroYEv>
 800b56e:	eef0 7a40 	vmov.f32	s15, s0
 800b572:	eeb0 0a67 	vmov.f32	s0, s15
 800b576:	f7fb fec5 	bl	8007304 <_Z16OD_IMU_GyroY_setf>
		OD_IMU_GyroZ_set(imuMaster.getGyroZ());
 800b57a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b57e:	4618      	mov	r0, r3
 800b580:	f7ff feca 	bl	800b318 <_ZN9ImuMaster8getGyroZEv>
 800b584:	eef0 7a40 	vmov.f32	s15, s0
 800b588:	eeb0 0a67 	vmov.f32	s0, s15
 800b58c:	f7fb fef4 	bl	8007378 <_Z16OD_IMU_GyroZ_setf>

		OD_CoolingPressure_set(pressureSensor.get());
 800b590:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff fe2d 	bl	800b1f4 <_ZN14PressureSensor3getEv>
 800b59a:	eef0 7a40 	vmov.f32	s15, s0
 800b59e:	eeb0 0a67 	vmov.f32	s0, s15
 800b5a2:	f7fb ff23 	bl	80073ec <_Z22OD_CoolingPressure_setf>

		unsigned int fiducialLeftCounter = fiducialLeft.getCount();
 800b5a6:	f107 0314 	add.w	r3, r7, #20
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	f7ff fec4 	bl	800b338 <_ZN14FiducialSensor8getCountEv>
 800b5b0:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
		OD_FiducialLeftCounter_set((uint16_t)fiducialLeftCounter);
 800b5b4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fb ff86 	bl	80074cc <_Z26OD_FiducialLeftCounter_sett>

		unsigned int fiducialRightCounter = fiducialRight.getCount();
 800b5c0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7ff feb7 	bl	800b338 <_ZN14FiducialSensor8getCountEv>
 800b5ca:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
		OD_FiducialRightCounter_set((uint16_t)fiducialRightCounter);
 800b5ce:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7fb ff41 	bl	800745c <_Z27OD_FiducialRightCounter_sett>

		float kistlerVel = kistlerController.getVelocity();
 800b5da:	f107 0308 	add.w	r3, r7, #8
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f7ff feec 	bl	800b3bc <_ZN17KistlerController11getVelocityEv>
 800b5e4:	ed87 0a79 	vstr	s0, [r7, #484]	; 0x1e4
		float kistlerPos = kistlerController.getPosition();
 800b5e8:	f107 0308 	add.w	r3, r7, #8
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f7ff fef4 	bl	800b3da <_ZN17KistlerController11getPositionEv>
 800b5f2:	ed87 0a78 	vstr	s0, [r7, #480]	; 0x1e0

		OD_Position_set(kistlerPos);
 800b5f6:	ed97 0a78 	vldr	s0, [r7, #480]	; 0x1e0
 800b5fa:	f7fb ffa1 	bl	8007540 <_Z15OD_Position_setf>
		OD_Velocity_set(kistlerVel);
 800b5fe:	ed97 0a79 	vldr	s0, [r7, #484]	; 0x1e4
 800b602:	f7fb ffd7 	bl	80075b4 <_Z15OD_Velocity_setf>


		cooling::update();
 800b606:	f7ff fd45 	bl	800b094 <_ZN7cooling6updateEv>
		pdu::update();
 800b60a:	f000 fccb 	bl	800bfa4 <_ZN3pdu6updateEv>
		// ======= POSITION-ESTIMATION ======
		osDelay(pdMS_TO_TICKS(50));
 800b60e:	2032      	movs	r0, #50	; 0x32
 800b610:	f009 fcfe 	bl	8015010 <osDelay>

	}
 800b614:	e775      	b.n	800b502 <main_entry+0x62>
 800b616:	bf00      	nop
 800b618:	0801ca84 	.word	0x0801ca84

0800b61c <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800b61c:	b590      	push	{r4, r7, lr}
 800b61e:	b083      	sub	sp, #12
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4618      	mov	r0, r3
 800b62a:	f7f5 ff01 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800b62e:	463b      	mov	r3, r7
 800b630:	4618      	mov	r0, r3
 800b632:	f000 f869 	bl	800b708 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00f      	beq.n	800b65c <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800b63c:	687c      	ldr	r4, [r7, #4]
 800b63e:	463b      	mov	r3, r7
 800b640:	4618      	mov	r0, r3
 800b642:	f000 f86c 	bl	800b71e <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800b646:	4603      	mov	r3, r0
 800b648:	4619      	mov	r1, r3
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 f872 	bl	800b734 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a05      	ldr	r2, [pc, #20]	; (800b668 <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x4c>)
 800b654:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	4a04      	ldr	r2, [pc, #16]	; (800b66c <_ZNSt8functionIFvR9RxMessageEEC1IZN17KistlerControllerC4EvEUlS1_E_vvEET_+0x50>)
 800b65a:	609a      	str	r2, [r3, #8]
      }
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4618      	mov	r0, r3
 800b660:	370c      	adds	r7, #12
 800b662:	46bd      	mov	sp, r7
 800b664:	bd90      	pop	{r4, r7, pc}
 800b666:	bf00      	nop
 800b668:	0800b759 	.word	0x0800b759
 800b66c:	0800b783 	.word	0x0800b783

0800b670 <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE>:
}

namespace can {

template<typename MESSAGE>
inline unsigned int registerMessageReceiver(
 800b670:	b590      	push	{r4, r7, lr}
 800b672:	b087      	sub	sp, #28
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
		std::function<void(RxMessage&)> receiver) {
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800b678:	f107 0308 	add.w	r3, r7, #8
 800b67c:	6879      	ldr	r1, [r7, #4]
 800b67e:	4618      	mov	r0, r3
 800b680:	f7f6 f813 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800b684:	f107 0308 	add.w	r3, r7, #8
 800b688:	2201      	movs	r2, #1
 800b68a:	4908      	ldr	r1, [pc, #32]	; (800b6ac <_ZN3can23registerMessageReceiverINS_8messages25OpticalSensor_TX_MainDataEEEjSt8functionIFvR9RxMessageEE+0x3c>)
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7f5 ff45 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800b692:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800b694:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800b696:	f107 0308 	add.w	r3, r7, #8
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7f5 fefa 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800b6a0:	4623      	mov	r3, r4
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	371c      	adds	r7, #28
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd90      	pop	{r4, r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	1ffffffa 	.word	0x1ffffffa

0800b6b0 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals20OpticalSensor_TX_VelEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f103 0208 	add.w	r2, r3, #8
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	3310      	adds	r3, #16
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f7ff fd35 	bl	800b134 <_ZN3can7signals20OpticalSensor_TX_Vel3getERKyS3_>
 800b6ca:	eef0 7a40 	vmov.f32	s15, s0
        }
 800b6ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <_ZN3can7MessageINS_8messages25OpticalSensor_TX_MainDataEE3getINS_7signals25OpticalSensor_TX_DistanceEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f103 0208 	add.w	r2, r3, #8
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3310      	adds	r3, #16
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	f7ff fd47 	bl	800b180 <_ZN3can7signals25OpticalSensor_TX_Distance3getERKyS3_>
 800b6f2:	eeb0 7a40 	vmov.f32	s14, s0
 800b6f6:	eef0 7a60 	vmov.f32	s15, s1
        }
 800b6fa:	eeb0 0a47 	vmov.f32	s0, s14
 800b6fe:	eef0 0a67 	vmov.f32	s1, s15
 800b702:	3708      	adds	r7, #8
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
	  { return true; }
 800b710:	2301      	movs	r3, #1
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	4618      	mov	r0, r3
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800b734:	b590      	push	{r4, r7, lr}
 800b736:	b083      	sub	sp, #12
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800b73e:	6838      	ldr	r0, [r7, #0]
 800b740:	f7ff ffed 	bl	800b71e <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800b744:	4603      	mov	r3, r0
 800b746:	4622      	mov	r2, r4
 800b748:	4619      	mov	r1, r3
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f838 	bl	800b7c0 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	bd90      	pop	{r4, r7, pc}

0800b758 <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800b758:	b590      	push	{r4, r7, lr}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 f845 	bl	800b7f2 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800b768:	4604      	mov	r4, r0
 800b76a:	6838      	ldr	r0, [r7, #0]
 800b76c:	f7f6 f827 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800b770:	4603      	mov	r3, r0
 800b772:	4619      	mov	r1, r3
 800b774:	4620      	mov	r0, r4
 800b776:	f000 f84d 	bl	800b814 <_ZSt10__invoke_rIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800b77a:	bf00      	nop
      }
 800b77c:	370c      	adds	r7, #12
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd90      	pop	{r4, r7, pc}

0800b782 <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800b782:	b590      	push	{r4, r7, lr}
 800b784:	b085      	sub	sp, #20
 800b786:	af00      	add	r7, sp, #0
 800b788:	60f8      	str	r0, [r7, #12]
 800b78a:	60b9      	str	r1, [r7, #8]
 800b78c:	4613      	mov	r3, r2
 800b78e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800b790:	79fb      	ldrb	r3, [r7, #7]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d109      	bne.n	800b7aa <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	f000 f852 	bl	800b840 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
 800b79c:	4604      	mov	r4, r0
 800b79e:	68b8      	ldr	r0, [r7, #8]
 800b7a0:	f000 f827 	bl	800b7f2 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	6023      	str	r3, [r4, #0]
	    break;
 800b7a8:	e005      	b.n	800b7b6 <_ZNSt17_Function_handlerIFvR9RxMessageEZN17KistlerControllerC4EvEUlS1_E_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800b7aa:	79fb      	ldrb	r3, [r7, #7]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	68b9      	ldr	r1, [r7, #8]
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f000 f851 	bl	800b858 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800b7b6:	2300      	movs	r3, #0
      }
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3714      	adds	r7, #20
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd90      	pop	{r4, r7, pc}

0800b7c0 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800b7c0:	b590      	push	{r4, r7, lr}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800b7cc:	68b8      	ldr	r0, [r7, #8]
 800b7ce:	f7ff ffa6 	bl	800b71e <_ZSt4moveIRZN17KistlerControllerC4EvEUlR9RxMessageE_EONSt16remove_referenceIT_E4typeEOS6_>
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f7fc ff9f 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	4619      	mov	r1, r3
 800b7de:	2004      	movs	r0, #4
 800b7e0:	f7fc ff8e 	bl	8008700 <_ZnwjPv>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	6013      	str	r3, [r2, #0]
 800b7ea:	bf00      	nop
 800b7ec:	3714      	adds	r7, #20
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd90      	pop	{r4, r7, pc}

0800b7f2 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b084      	sub	sp, #16
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f857 	bl	800b8ae <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>
 800b800:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800b802:	68f8      	ldr	r0, [r7, #12]
 800b804:	f000 f85f 	bl	800b8c6 <_ZSt11__addressofIKZN17KistlerControllerC4EvEUlR9RxMessageE_EPT_RS5_>
 800b808:	4603      	mov	r3, r0
 800b80a:	bf00      	nop
	}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3710      	adds	r7, #16
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <_ZSt10__invoke_rIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800b814:	b5b0      	push	{r4, r5, r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800b81e:	6878      	ldr	r0, [r7, #4]
 800b820:	f000 f85c 	bl	800b8dc <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800b824:	4604      	mov	r4, r0
 800b826:	6838      	ldr	r0, [r7, #0]
 800b828:	f7f5 ffc9 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800b82c:	4603      	mov	r3, r0
 800b82e:	461a      	mov	r2, r3
 800b830:	4621      	mov	r1, r4
 800b832:	4628      	mov	r0, r5
 800b834:	f000 f85d 	bl	800b8f2 <_ZSt13__invoke_implIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bdb0      	pop	{r4, r5, r7, pc}

0800b840 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	f7fc ff65 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800b84e:	4603      	mov	r3, r0
 800b850:	4618      	mov	r0, r3
 800b852:	3708      	adds	r7, #8
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}

0800b858 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800b858:	b5b0      	push	{r4, r5, r7, lr}
 800b85a:	b084      	sub	sp, #16
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	60f8      	str	r0, [r7, #12]
 800b860:	60b9      	str	r1, [r7, #8]
 800b862:	4613      	mov	r3, r2
 800b864:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800b866:	79fb      	ldrb	r3, [r7, #7]
 800b868:	2b03      	cmp	r3, #3
 800b86a:	d016      	beq.n	800b89a <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800b86c:	2b03      	cmp	r3, #3
 800b86e:	dc19      	bgt.n	800b8a4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800b870:	2b01      	cmp	r3, #1
 800b872:	d002      	beq.n	800b87a <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800b874:	2b02      	cmp	r3, #2
 800b876:	d00a      	beq.n	800b88e <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800b878:	e014      	b.n	800b8a4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f7ff ffe0 	bl	800b840 <_ZNSt9_Any_data9_M_accessIPZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
 800b880:	4604      	mov	r4, r0
 800b882:	68b8      	ldr	r0, [r7, #8]
 800b884:	f7ff ffb5 	bl	800b7f2 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E14_M_get_pointerERKSt9_Any_data>
 800b888:	4603      	mov	r3, r0
 800b88a:	6023      	str	r3, [r4, #0]
	      break;
 800b88c:	e00a      	b.n	800b8a4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800b88e:	462a      	mov	r2, r5
 800b890:	68b9      	ldr	r1, [r7, #8]
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f000 f843 	bl	800b91e <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800b898:	e004      	b.n	800b8a4 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800b89a:	4621      	mov	r1, r4
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f000 f857 	bl	800b950 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800b8a2:	bf00      	nop
	  return false;
 800b8a4:	2300      	movs	r3, #0
	}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bdb0      	pop	{r4, r5, r7, pc}

0800b8ae <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>:
      _M_access() const
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b082      	sub	sp, #8
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7fc ff39 	bl	800872e <_ZNKSt9_Any_data9_M_accessEv>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	4618      	mov	r0, r3
 800b8c0:	3708      	adds	r7, #8
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}

0800b8c6 <_ZSt11__addressofIKZN17KistlerControllerC4EvEUlR9RxMessageE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	370c      	adds	r7, #12
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8da:	4770      	bx	lr

0800b8dc <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b8dc:	b480      	push	{r7}
 800b8de:	b083      	sub	sp, #12
 800b8e0:	af00      	add	r7, sp, #0
 800b8e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	370c      	adds	r7, #12
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr

0800b8f2 <_ZSt13__invoke_implIvRZN17KistlerControllerC4EvEUlR9RxMessageE_JS2_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800b8f2:	b590      	push	{r4, r7, lr}
 800b8f4:	b085      	sub	sp, #20
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	7338      	strb	r0, [r7, #12]
 800b8fa:	60b9      	str	r1, [r7, #8]
 800b8fc:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800b8fe:	68b8      	ldr	r0, [r7, #8]
 800b900:	f7ff ffec 	bl	800b8dc <_ZSt7forwardIRZN17KistlerControllerC4EvEUlR9RxMessageE_EOT_RNSt16remove_referenceIS5_E4typeE>
 800b904:	4604      	mov	r4, r0
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f7f5 ff59 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800b90c:	4603      	mov	r3, r0
 800b90e:	4619      	mov	r1, r3
 800b910:	4620      	mov	r0, r4
 800b912:	f7ff fd1d 	bl	800b350 <_ZZN17KistlerControllerC4EvENKUlR9RxMessageE_clES1_>
 800b916:	bf00      	nop
 800b918:	3714      	adds	r7, #20
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd90      	pop	{r4, r7, pc}

0800b91e <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800b91e:	b590      	push	{r4, r7, lr}
 800b920:	b085      	sub	sp, #20
 800b922:	af00      	add	r7, sp, #0
 800b924:	60f8      	str	r0, [r7, #12]
 800b926:	60b9      	str	r1, [r7, #8]
 800b928:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800b92a:	68b8      	ldr	r0, [r7, #8]
 800b92c:	f7ff ffbf 	bl	800b8ae <_ZNKSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERKT_v>
 800b930:	4604      	mov	r4, r0
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f7fc fef0 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800b938:	4603      	mov	r3, r0
 800b93a:	4619      	mov	r1, r3
 800b93c:	2004      	movs	r0, #4
 800b93e:	f7fc fedf 	bl	8008700 <_ZnwjPv>
 800b942:	4602      	mov	r2, r0
 800b944:	6823      	ldr	r3, [r4, #0]
 800b946:	6013      	str	r3, [r2, #0]
	}
 800b948:	bf00      	nop
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bd90      	pop	{r4, r7, pc}

0800b950 <_ZNSt14_Function_base13_Base_managerIZN17KistlerControllerC4EvEUlR9RxMessageE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f804 	bl	800b968 <_ZNSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>
	}
 800b960:	bf00      	nop
 800b962:	3708      	adds	r7, #8
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}

0800b968 <_ZNSt9_Any_data9_M_accessIZN17KistlerControllerC4EvEUlR9RxMessageE_EERT_v>:
      _M_access()
 800b968:	b580      	push	{r7, lr}
 800b96a:	b082      	sub	sp, #8
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800b970:	6878      	ldr	r0, [r7, #4]
 800b972:	f7fc fed1 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800b976:	4603      	mov	r3, r0
 800b978:	4618      	mov	r0, r3
 800b97a:	3708      	adds	r7, #8
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>:
#include <cmath>
#include "canzero.hpp"

class OnBoardSensors {
public:
	explicit OnBoardSensors(OnBoardTemperaturConfig config) :
 800b980:	b084      	sub	sp, #16
 800b982:	b5b0      	push	{r4, r5, r7, lr}
 800b984:	b082      	sub	sp, #8
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	f107 001c 	add.w	r0, r7, #28
 800b98e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			m_internalNTC(config.m_internalNTCConfig.m_adc.m_module,
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
					config.m_externalNTCConfig.m_adc.m_module,
					config.m_externalNTCConfig.m_adc.m_rank),
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
					m_config(config) {
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	69f9      	ldr	r1, [r7, #28]
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
 800b996:	8c3a      	ldrh	r2, [r7, #32]
					m_config(config) {
 800b998:	4618      	mov	r0, r3
 800b99a:	f7ff f8b0 	bl	800aafe <_ZN20AdcChannelControllerC1E9AdcModulej>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	3308      	adds	r3, #8
 800b9a2:	6b79      	ldr	r1, [r7, #52]	; 0x34
					config.m_externalNTCConfig.m_adc.m_rank),
 800b9a4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
					m_config(config) {
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff f8a9 	bl	800aafe <_ZN20AdcChannelControllerC1E9AdcModulej>
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	3310      	adds	r3, #16
 800b9b0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
 800b9b2:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
					m_config(config) {
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7ff f8a1 	bl	800aafe <_ZN20AdcChannelControllerC1E9AdcModulej>
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f103 0418 	add.w	r4, r3, #24
 800b9c2:	f107 051c 	add.w	r5, r7, #28
 800b9c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 800b9d6:	e884 0003 	stmia.w	r4, {r0, r1}
	}
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b9e6:	b004      	add	sp, #16
 800b9e8:	4770      	bx	lr
	...

0800b9ec <_ZN14OnBoardSensors22getInternalTemperaturCEv>:

	float getInternalTemperaturC(){
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_internalNTC.get();
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff f89b 	bl	800ab32 <_ZN20AdcChannelController3getEv>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	81fb      	strh	r3, [r7, #14]
		float internalTemp = (3.3f * (float) avalue/4095.0f - 0.76f) / 0.0025f + 25.0f;
 800ba00:	89fb      	ldrh	r3, [r7, #14]
 800ba02:	ee07 3a90 	vmov	s15, r3
 800ba06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba0a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800ba48 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x5c>
 800ba0e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ba12:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800ba4c <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x60>
 800ba16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800ba50 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x64>
 800ba1e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800ba22:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800ba54 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x68>
 800ba26:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba2a:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 800ba2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba32:	edc7 7a02 	vstr	s15, [r7, #8]
		return internalTemp;
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	ee07 3a90 	vmov	s15, r3
	}
 800ba3c:	eeb0 0a67 	vmov.f32	s0, s15
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	40533333 	.word	0x40533333
 800ba4c:	457ff000 	.word	0x457ff000
 800ba50:	3f428f5c 	.word	0x3f428f5c
 800ba54:	3b23d70a 	.word	0x3b23d70a

0800ba58 <_ZN14OnBoardSensors22getExternalTemperaturCEv>:

	float getExternalTemperaturC(){
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_externalNTC.get();
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	3308      	adds	r3, #8
 800ba64:	4618      	mov	r0, r3
 800ba66:	f7ff f864 	bl	800ab32 <_ZN20AdcChannelController3getEv>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	81fb      	strh	r3, [r7, #14]
		float ntcTemperature = 1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * log(1.0f / (4095.0f / (float) avalue - 1.0f) )) - 273.15f;
 800ba6e:	89fb      	ldrh	r3, [r7, #14]
 800ba70:	ee07 3a90 	vmov	s15, r3
 800ba74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba78:	eddf 6a29 	vldr	s13, [pc, #164]	; 800bb20 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc8>
 800ba7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba8c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800ba90:	ee16 0a90 	vmov	r0, s13
 800ba94:	f7f4 fd58 	bl	8000548 <__aeabi_f2d>
 800ba98:	4602      	mov	r2, r0
 800ba9a:	460b      	mov	r3, r1
 800ba9c:	ec43 2b10 	vmov	d0, r2, r3
 800baa0:	f00d fd7e 	bl	80195a0 <log>
 800baa4:	ec51 0b10 	vmov	r0, r1, d0
 800baa8:	a317      	add	r3, pc, #92	; (adr r3, 800bb08 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb0>)
 800baaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baae:	f7f4 fda3 	bl	80005f8 <__aeabi_dmul>
 800bab2:	4602      	mov	r2, r0
 800bab4:	460b      	mov	r3, r1
 800bab6:	4610      	mov	r0, r2
 800bab8:	4619      	mov	r1, r3
 800baba:	a315      	add	r3, pc, #84	; (adr r3, 800bb10 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb8>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	f7f4 fbe4 	bl	800028c <__adddf3>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	f04f 0000 	mov.w	r0, #0
 800bacc:	4915      	ldr	r1, [pc, #84]	; (800bb24 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xcc>)
 800bace:	f7f4 febd 	bl	800084c <__aeabi_ddiv>
 800bad2:	4602      	mov	r2, r0
 800bad4:	460b      	mov	r3, r1
 800bad6:	4610      	mov	r0, r2
 800bad8:	4619      	mov	r1, r3
 800bada:	a30f      	add	r3, pc, #60	; (adr r3, 800bb18 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc0>)
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f7f4 fbd2 	bl	8000288 <__aeabi_dsub>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4610      	mov	r0, r2
 800baea:	4619      	mov	r1, r3
 800baec:	f7f5 f87c 	bl	8000be8 <__aeabi_d2f>
 800baf0:	4603      	mov	r3, r0
 800baf2:	60bb      	str	r3, [r7, #8]
		return ntcTemperature;
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	ee07 3a90 	vmov	s15, r3
	}
 800bafa:	eeb0 0a67 	vmov.f32	s0, s15
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}
 800bb04:	f3af 8000 	nop.w
 800bb08:	60000000 	.word	0x60000000
 800bb0c:	3f3363ac 	.word	0x3f3363ac
 800bb10:	e0000000 	.word	0xe0000000
 800bb14:	3f6b79e1 	.word	0x3f6b79e1
 800bb18:	60000000 	.word	0x60000000
 800bb1c:	40711266 	.word	0x40711266
 800bb20:	457ff000 	.word	0x457ff000
 800bb24:	3ff00000 	.word	0x3ff00000

0800bb28 <_ZN14OnBoardSensors21getAverageTemperaturCEv>:

	float getAverageTemperaturC(){
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	ed2d 8b02 	vpush	{d8}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
		float average = (getExternalTemperaturC() + getInternalTemperaturC() ) / 2.0;
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f7ff ff8f 	bl	800ba58 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 800bb3a:	eeb0 8a40 	vmov.f32	s16, s0
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f7ff ff54 	bl	800b9ec <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 800bb44:	eef0 7a40 	vmov.f32	s15, s0
 800bb48:	ee78 7a27 	vadd.f32	s15, s16, s15
 800bb4c:	ee17 0a90 	vmov	r0, s15
 800bb50:	f7f4 fcfa 	bl	8000548 <__aeabi_f2d>
 800bb54:	f04f 0200 	mov.w	r2, #0
 800bb58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bb5c:	f7f4 fe76 	bl	800084c <__aeabi_ddiv>
 800bb60:	4602      	mov	r2, r0
 800bb62:	460b      	mov	r3, r1
 800bb64:	4610      	mov	r0, r2
 800bb66:	4619      	mov	r1, r3
 800bb68:	f7f5 f83e 	bl	8000be8 <__aeabi_d2f>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	60fb      	str	r3, [r7, #12]
		return average;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	ee07 3a90 	vmov	s15, r3
	}
 800bb76:	eeb0 0a67 	vmov.f32	s0, s15
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	ecbd 8b02 	vpop	{d8}
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <_ZN14OnBoardSensors15getInputVoltageEv>:

	float getInputVoltage() {
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_inputVoltage.get();
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	3310      	adds	r3, #16
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe ffce 	bl	800ab32 <_ZN20AdcChannelController3getEv>
 800bb96:	4603      	mov	r3, r0
 800bb98:	81fb      	strh	r3, [r7, #14]
		float inputVoltage = (float)avalue/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 800bb9a:	89fb      	ldrh	r3, [r7, #14]
 800bb9c:	ee07 3a90 	vmov	s15, r3
 800bba0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bba4:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800bbd8 <_ZN14OnBoardSensors15getInputVoltageEv+0x54>
 800bba8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bbac:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800bbdc <_ZN14OnBoardSensors15getInputVoltageEv+0x58>
 800bbb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bbb4:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800bbe0 <_ZN14OnBoardSensors15getInputVoltageEv+0x5c>
 800bbb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bbbc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800bbe4 <_ZN14OnBoardSensors15getInputVoltageEv+0x60>
 800bbc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbc4:	edc7 7a02 	vstr	s15, [r7, #8]
		return inputVoltage;
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	ee07 3a90 	vmov	s15, r3
	}
 800bbce:	eeb0 0a67 	vmov.f32	s0, s15
 800bbd2:	3710      	adds	r7, #16
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	bd80      	pop	{r7, pc}
 800bbd8:	457ff000 	.word	0x457ff000
 800bbdc:	40533333 	.word	0x40533333
 800bbe0:	3dda09cc 	.word	0x3dda09cc
 800bbe4:	3f19999a 	.word	0x3f19999a

0800bbe8 <_ZN14OnBoardSensors9updateODsEv>:

	void updateODs(){
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b084      	sub	sp, #16
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
		float temp = getAverageTemperaturC();
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f7ff ff99 	bl	800bb28 <_ZN14OnBoardSensors21getAverageTemperaturCEv>
 800bbf6:	ed87 0a03 	vstr	s0, [r7, #12]
		float vBat = getInputVoltage();
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7ff ffc2 	bl	800bb84 <_ZN14OnBoardSensors15getInputVoltageEv>
 800bc00:	ed87 0a02 	vstr	s0, [r7, #8]
		OD_BoardTemp_set(temp);
 800bc04:	ed97 0a03 	vldr	s0, [r7, #12]
 800bc08:	f7fa fcea 	bl	80065e0 <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(vBat);
 800bc0c:	ed97 0a02 	vldr	s0, [r7, #8]
 800bc10:	f7fa fd20 	bl	8006654 <_Z19OD_InputVoltage_setf>
	}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}

0800bc1c <_ZL18estimateFreeMemoryv>:
#include "canzero.hpp"
#include "FreeRTOS.h"
#include "cmsis_os.h"
#include "task.h"

static inline size_t estimateFreeMemory() {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	af00      	add	r7, sp, #0
	return xPortGetFreeHeapSize();
 800bc20:	f00d fb9c 	bl	801935c <xPortGetFreeHeapSize>
 800bc24:	4603      	mov	r3, r0
}
 800bc26:	4618      	mov	r0, r3
 800bc28:	bd80      	pop	{r7, pc}
	...

0800bc2c <_ZL16estimateCPUusagev>:


static inline float estimateCPUusage() {
 800bc2c:	b480      	push	{r7}
 800bc2e:	af00      	add	r7, sp, #0
	}
	g_oldIdleTick = xTaskGetIdleRunTimeCounter();
	g_oldTotalTick = portGET_RUN_TIME_COUNTER_VALUE();
	return cpuUsage;
	*/
	return 80.0;
 800bc30:	4b04      	ldr	r3, [pc, #16]	; (800bc44 <_ZL16estimateCPUusagev+0x18>)
 800bc32:	ee07 3a90 	vmov	s15, r3
}
 800bc36:	eeb0 0a67 	vmov.f32	s0, s15
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	42a00000 	.word	0x42a00000

0800bc48 <microcontroller_info_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void microcontroller_info_entry(void *argv) {
 800bc48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc4a:	b0a7      	sub	sp, #156	; 0x9c
 800bc4c:	af0c      	add	r7, sp, #48	; 0x30
 800bc4e:	6078      	str	r0, [r7, #4]
	OnBoardSensors onBoardSensors(g_peripherals.m_onBoardTemperaturConfig);
 800bc50:	4e19      	ldr	r6, [pc, #100]	; (800bcb8 <microcontroller_info_entry+0x70>)
 800bc52:	f107 0c0c 	add.w	ip, r7, #12
 800bc56:	466d      	mov	r5, sp
 800bc58:	f106 0464 	add.w	r4, r6, #100	; 0x64
 800bc5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bc62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800bc64:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800bc68:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800bc6c:	f106 0358 	add.w	r3, r6, #88	; 0x58
 800bc70:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bc72:	4660      	mov	r0, ip
 800bc74:	f7ff fe84 	bl	800b980 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>
	unsigned int frameCounter;
	while (true) {
		onBoardSensors.updateODs();
 800bc78:	f107 030c 	add.w	r3, r7, #12
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	f7ff ffb3 	bl	800bbe8 <_ZN14OnBoardSensors9updateODsEv>
		if (frameCounter > 20) {
 800bc82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc84:	2b14      	cmp	r3, #20
 800bc86:	d90f      	bls.n	800bca8 <microcontroller_info_entry+0x60>
			float cpuUsage = estimateCPUusage();
 800bc88:	f7ff ffd0 	bl	800bc2c <_ZL16estimateCPUusagev>
 800bc8c:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
			OD_CpuUsage_set(cpuUsage);
 800bc90:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 800bc94:	f7fa fc32 	bl	80064fc <_Z15OD_CpuUsage_setf>
			size_t freeMemory = estimateFreeMemory();
 800bc98:	f7ff ffc0 	bl	800bc1c <_ZL18estimateFreeMemoryv>
 800bc9c:	65f8      	str	r0, [r7, #92]	; 0x5c
			OD_MemFree_set(freeMemory);
 800bc9e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800bca0:	f7fa fc64 	bl	800656c <_Z14OD_MemFree_setm>
			frameCounter = 0;
 800bca4:	2300      	movs	r3, #0
 800bca6:	667b      	str	r3, [r7, #100]	; 0x64
		}
		frameCounter++;
 800bca8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcaa:	3301      	adds	r3, #1
 800bcac:	667b      	str	r3, [r7, #100]	; 0x64
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
 800bcae:	2032      	movs	r0, #50	; 0x32
 800bcb0:	f009 f9ae 	bl	8015010 <osDelay>
	}
 800bcb4:	e7e0      	b.n	800bc78 <microcontroller_info_entry+0x30>
 800bcb6:	bf00      	nop
 800bcb8:	0801cb1c 	.word	0x0801cb1c

0800bcbc <_ZN3can7signals14PDU_TX_Enabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1ull));
 800bcc6:	6879      	ldr	r1, [r7, #4]
 800bcc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bccc:	f000 0201 	and.w	r2, r0, #1
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bf14      	ite	ne
 800bcd8:	2301      	movne	r3, #1
 800bcda:	2300      	moveq	r3, #0
 800bcdc:	73fb      	strb	r3, [r7, #15]
                return value;
 800bcde:	7bfb      	ldrb	r3, [r7, #15]
            }
 800bce0:	4618      	mov	r0, r3
 800bce2:	3714      	adds	r7, #20
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <_ZN3can7signals18PDU_TX_PEHWEnabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcfc:	f000 0204 	and.w	r2, r0, #4
 800bd00:	2300      	movs	r3, #0
 800bd02:	4313      	orrs	r3, r2
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	bf14      	ite	ne
 800bd08:	2301      	movne	r3, #1
 800bd0a:	2300      	moveq	r3, #0
 800bd0c:	73fb      	strb	r3, [r7, #15]
                return value;
 800bd0e:	7bfb      	ldrb	r3, [r7, #15]
            }
 800bd10:	4618      	mov	r0, r3
 800bd12:	3714      	adds	r7, #20
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <_ZN3can7signals13PDU_RX_Enable3setERyS2_Rhb>:
        class PDU_RX_Enable {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800bd1c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 800bd20:	b087      	sub	sp, #28
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	60f8      	str	r0, [r7, #12]
 800bd26:	60b9      	str	r1, [r7, #8]
 800bd28:	607a      	str	r2, [r7, #4]
 800bd2a:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800bd2c:	78fb      	ldrb	r3, [r7, #3]
 800bd2e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	7df9      	ldrb	r1, [r7, #23]
 800bd38:	2900      	cmp	r1, #0
 800bd3a:	bf14      	ite	ne
 800bd3c:	2101      	movne	r1, #1
 800bd3e:	2100      	moveq	r1, #0
 800bd40:	b2c9      	uxtb	r1, r1
 800bd42:	b2c9      	uxtb	r1, r1
 800bd44:	2000      	movs	r0, #0
 800bd46:	460c      	mov	r4, r1
 800bd48:	4605      	mov	r5, r0
 800bd4a:	ea42 0804 	orr.w	r8, r2, r4
 800bd4e:	ea43 0905 	orr.w	r9, r3, r5
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800bd58:	bf00      	nop
 800bd5a:	371c      	adds	r7, #28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 800bd62:	4770      	bx	lr

0800bd64 <_ZN3can7signals17PDU_RX_PEHWEnable3setERyS2_Rhb>:
        class PDU_RX_PEHWEnable {
            public:
            using dataType = bool;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x1DA };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
 800bd64:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bd68:	b087      	sub	sp, #28
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	60f8      	str	r0, [r7, #12]
 800bd6e:	60b9      	str	r1, [r7, #8]
 800bd70:	607a      	str	r2, [r7, #4]
 800bd72:	70fb      	strb	r3, [r7, #3]
                bool rawValue = value;
 800bd74:	78fb      	ldrb	r3, [r7, #3]
 800bd76:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd7e:	7dfb      	ldrb	r3, [r7, #23]
 800bd80:	2200      	movs	r2, #0
 800bd82:	4698      	mov	r8, r3
 800bd84:	4691      	mov	r9, r2
 800bd86:	f04f 0200 	mov.w	r2, #0
 800bd8a:	f04f 0300 	mov.w	r3, #0
 800bd8e:	ea4f 0389 	mov.w	r3, r9, lsl #2
 800bd92:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 800bd96:	ea4f 0288 	mov.w	r2, r8, lsl #2
 800bd9a:	f002 0404 	and.w	r4, r2, #4
 800bd9e:	2500      	movs	r5, #0
 800bda0:	ea40 0a04 	orr.w	sl, r0, r4
 800bda4:	ea41 0b05 	orr.w	fp, r1, r5
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800bdae:	bf00      	nop
 800bdb0:	371c      	adds	r7, #28
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bdb8:	4770      	bx	lr

0800bdba <_ZNK3pdu9PduStatuseqERKS0_>:

struct PduStatus {
	bool m_enabled;
	bool m_pehwEnabled;

	bool operator==(const PduStatus& other)const  {
 800bdba:	b480      	push	{r7}
 800bdbc:	b083      	sub	sp, #12
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	6039      	str	r1, [r7, #0]
		return m_enabled == other.m_enabled
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	781a      	ldrb	r2, [r3, #0]
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	781b      	ldrb	r3, [r3, #0]
				&& m_pehwEnabled == other.m_pehwEnabled;
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d107      	bne.n	800bde0 <_ZNK3pdu9PduStatuseqERKS0_+0x26>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	785a      	ldrb	r2, [r3, #1]
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	785b      	ldrb	r3, [r3, #1]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d101      	bne.n	800bde0 <_ZNK3pdu9PduStatuseqERKS0_+0x26>
 800bddc:	2301      	movs	r3, #1
 800bdde:	e000      	b.n	800bde2 <_ZNK3pdu9PduStatuseqERKS0_+0x28>
 800bde0:	2300      	movs	r3, #0
	}
 800bde2:	4618      	mov	r0, r3
 800bde4:	370c      	adds	r7, #12
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr

0800bdee <_ZNK3pdu9PduStatusneERKS0_>:
	bool operator!=(const PduStatus& other)const  {
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b082      	sub	sp, #8
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
 800bdf6:	6039      	str	r1, [r7, #0]
		return not (*this == other);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f7ff ffdd 	bl	800bdba <_ZNK3pdu9PduStatuseqERKS0_>
 800be00:	4603      	mov	r3, r0
 800be02:	f083 0301 	eor.w	r3, r3, #1
 800be06:	b2db      	uxtb	r3, r3
	}
 800be08:	4618      	mov	r0, r3
 800be0a:	3708      	adds	r7, #8
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <_ZNK3pdu15LpChannelConfigeqERKS0_>:
struct LpChannelConfig {
	static constexpr size_t NUMBER_OF_CHANNELS = 10;
	float m_duty[NUMBER_OF_CHANNELS];


	bool operator==(const LpChannelConfig& other) const {
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
		for(size_t i=0;i<NUMBER_OF_CHANNELS;i++){
 800be1a:	2300      	movs	r3, #0
 800be1c:	60fb      	str	r3, [r7, #12]
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2b09      	cmp	r3, #9
 800be22:	d816      	bhi.n	800be52 <_ZNK3pdu15LpChannelConfigeqERKS0_+0x42>
			if(m_duty[i] != other.m_duty[i])return false;
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	4413      	add	r3, r2
 800be2c:	ed93 7a00 	vldr	s14, [r3]
 800be30:	683a      	ldr	r2, [r7, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	4413      	add	r3, r2
 800be38:	edd3 7a00 	vldr	s15, [r3]
 800be3c:	eeb4 7a67 	vcmp.f32	s14, s15
 800be40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be44:	d001      	beq.n	800be4a <_ZNK3pdu15LpChannelConfigeqERKS0_+0x3a>
 800be46:	2300      	movs	r3, #0
 800be48:	e004      	b.n	800be54 <_ZNK3pdu15LpChannelConfigeqERKS0_+0x44>
		for(size_t i=0;i<NUMBER_OF_CHANNELS;i++){
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	3301      	adds	r3, #1
 800be4e:	60fb      	str	r3, [r7, #12]
 800be50:	e7e5      	b.n	800be1e <_ZNK3pdu15LpChannelConfigeqERKS0_+0xe>
		}
		return true;
 800be52:	2301      	movs	r3, #1
	}
 800be54:	4618      	mov	r0, r3
 800be56:	3714      	adds	r7, #20
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <_ZNK3pdu15LpChannelConfigneERKS0_>:

	bool operator!=(const LpChannelConfig& other) const {
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	6039      	str	r1, [r7, #0]
		return not (*this == other);
 800be6a:	6839      	ldr	r1, [r7, #0]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	f7ff ffcf 	bl	800be10 <_ZNK3pdu15LpChannelConfigeqERKS0_>
 800be72:	4603      	mov	r3, r0
 800be74:	f083 0301 	eor.w	r3, r3, #1
 800be78:	b2db      	uxtb	r3, r3
	}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3708      	adds	r7, #8
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <_ZNK3pdu15HpChannelConfigeqERKS0_>:

struct HpChannelConfig {
	static constexpr size_t NUMBER_OF_CHANNELS = 4;
	float m_duty[NUMBER_OF_CHANNELS];

	bool operator==(const HpChannelConfig& other)const{
 800be82:	b480      	push	{r7}
 800be84:	b085      	sub	sp, #20
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
		for(size_t i=0;i<NUMBER_OF_CHANNELS;i++){
 800be8c:	2300      	movs	r3, #0
 800be8e:	60fb      	str	r3, [r7, #12]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2b03      	cmp	r3, #3
 800be94:	d816      	bhi.n	800bec4 <_ZNK3pdu15HpChannelConfigeqERKS0_+0x42>
			if(m_duty[i] != other.m_duty[i])return false;
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	4413      	add	r3, r2
 800be9e:	ed93 7a00 	vldr	s14, [r3]
 800bea2:	683a      	ldr	r2, [r7, #0]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	edd3 7a00 	vldr	s15, [r3]
 800beae:	eeb4 7a67 	vcmp.f32	s14, s15
 800beb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb6:	d001      	beq.n	800bebc <_ZNK3pdu15HpChannelConfigeqERKS0_+0x3a>
 800beb8:	2300      	movs	r3, #0
 800beba:	e004      	b.n	800bec6 <_ZNK3pdu15HpChannelConfigeqERKS0_+0x44>
		for(size_t i=0;i<NUMBER_OF_CHANNELS;i++){
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3301      	adds	r3, #1
 800bec0:	60fb      	str	r3, [r7, #12]
 800bec2:	e7e5      	b.n	800be90 <_ZNK3pdu15HpChannelConfigeqERKS0_+0xe>
		}
		return false;
 800bec4:	2300      	movs	r3, #0
	}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3714      	adds	r7, #20
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr

0800bed2 <_ZNK3pdu15HpChannelConfigneERKS0_>:
	bool operator!=(const HpChannelConfig& other)const{
 800bed2:	b580      	push	{r7, lr}
 800bed4:	b082      	sub	sp, #8
 800bed6:	af00      	add	r7, sp, #0
 800bed8:	6078      	str	r0, [r7, #4]
 800beda:	6039      	str	r1, [r7, #0]
		return not (*this == other);
 800bedc:	6839      	ldr	r1, [r7, #0]
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f7ff ffcf 	bl	800be82 <_ZNK3pdu15HpChannelConfigeqERKS0_>
 800bee4:	4603      	mov	r3, r0
 800bee6:	f083 0301 	eor.w	r3, r3, #1
 800beea:	b2db      	uxtb	r3, r3
	}
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	2300      	movs	r3, #0
 800bf00:	2201      	movs	r2, #1
 800bf02:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800bf06:	f7f5 f841 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3708      	adds	r7, #8
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd80      	pop	{r7, pc}

0800bf14 <_ZN3pdu15receiveTxStatusER9RxMessage>:
		}
	}
}


void receiveTxStatus(RxMessage& raw) {
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
	can::Message<can::messages::PDU_TX_Status> msg;
 800bf1c:	f107 0308 	add.w	r3, r7, #8
 800bf20:	4618      	mov	r0, r3
 800bf22:	f7ff ffe7 	bl	800bef4 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1Ev>
	s_confirmed_status.m_enabled = msg.get<can::signals::PDU_TX_Enabled>();
 800bf26:	f107 0308 	add.w	r3, r7, #8
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f000 f874 	bl	800c018 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals14PDU_TX_EnabledEEENT_8dataTypeEv>
 800bf30:	4603      	mov	r3, r0
 800bf32:	461a      	mov	r2, r3
 800bf34:	4b07      	ldr	r3, [pc, #28]	; (800bf54 <_ZN3pdu15receiveTxStatusER9RxMessage+0x40>)
 800bf36:	701a      	strb	r2, [r3, #0]
	s_confirmed_status.m_pehwEnabled = msg.get<can::signals::PDU_TX_PEHWEnabled>();
 800bf38:	f107 0308 	add.w	r3, r7, #8
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f000 f87d 	bl	800c03c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals18PDU_TX_PEHWEnabledEEENT_8dataTypeEv>
 800bf42:	4603      	mov	r3, r0
 800bf44:	461a      	mov	r2, r3
 800bf46:	4b03      	ldr	r3, [pc, #12]	; (800bf54 <_ZN3pdu15receiveTxStatusER9RxMessage+0x40>)
 800bf48:	705a      	strb	r2, [r3, #1]
}
 800bf4a:	bf00      	nop
 800bf4c:	3720      	adds	r7, #32
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	20000cb8 	.word	0x20000cb8

0800bf58 <_ZN3pdu4initEv>:

void init(){
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
	can::registerMessageReceiver<can::messages::PDU_TX_Status>(receiveTxStatus);
 800bf5e:	463b      	mov	r3, r7
 800bf60:	4907      	ldr	r1, [pc, #28]	; (800bf80 <_ZN3pdu4initEv+0x28>)
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 f87c 	bl	800c060 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>
 800bf68:	463b      	mov	r3, r7
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f000 f8a2 	bl	800c0b4 <_ZN3can23registerMessageReceiverINS_8messages13PDU_TX_StatusEEEjSt8functionIFvR9RxMessageEE>
 800bf70:	463b      	mov	r3, r7
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7f5 fa8e 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
}
 800bf78:	bf00      	nop
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	0800bf15 	.word	0x0800bf15

0800bf84 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1Ev>:
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	2300      	movs	r3, #0
 800bf90:	2201      	movs	r2, #1
 800bf92:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800bf96:	f7f4 fff9 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4618      	mov	r0, r3
 800bf9e:	3708      	adds	r7, #8
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}

0800bfa4 <_ZN3pdu6updateEv>:


void update(){
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
	if(s_status != s_confirmed_status){
 800bfaa:	4915      	ldr	r1, [pc, #84]	; (800c000 <_ZN3pdu6updateEv+0x5c>)
 800bfac:	4815      	ldr	r0, [pc, #84]	; (800c004 <_ZN3pdu6updateEv+0x60>)
 800bfae:	f7ff ff1e 	bl	800bdee <_ZNK3pdu9PduStatusneERKS0_>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d016      	beq.n	800bfe6 <_ZN3pdu6updateEv+0x42>
		can::Message<can::messages::PDU_RX_Control> controlMsg;
 800bfb8:	463b      	mov	r3, r7
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7ff ffe2 	bl	800bf84 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEEC1Ev>
		controlMsg.set<can::signals::PDU_RX_Enable>(s_confirmed_status.m_pehwEnabled);
 800bfc0:	4b0f      	ldr	r3, [pc, #60]	; (800c000 <_ZN3pdu6updateEv+0x5c>)
 800bfc2:	785a      	ldrb	r2, [r3, #1]
 800bfc4:	463b      	mov	r3, r7
 800bfc6:	4611      	mov	r1, r2
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f000 f891 	bl	800c0f0 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals13PDU_RX_EnableEEEvNT_8dataTypeE>
		//controlMsg.set<can::signals::PDU_RX_ErrorReset>(s_confirmed_status.m_error);
		controlMsg.set<can::signals::PDU_RX_PEHWEnable>(s_confirmed_status.m_pehwEnabled);
 800bfce:	4b0c      	ldr	r3, [pc, #48]	; (800c000 <_ZN3pdu6updateEv+0x5c>)
 800bfd0:	785a      	ldrb	r2, [r3, #1]
 800bfd2:	463b      	mov	r3, r7
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 f89f 	bl	800c11a <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_PEHWEnableEEEvNT_8dataTypeE>
		controlMsg.send();
 800bfdc:	463b      	mov	r3, r7
 800bfde:	2100      	movs	r1, #0
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	f7f5 f91d 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
	if(s_lpChannelConfig != s_confirmed_lpChannelConfig){
 800bfe6:	4908      	ldr	r1, [pc, #32]	; (800c008 <_ZN3pdu6updateEv+0x64>)
 800bfe8:	4808      	ldr	r0, [pc, #32]	; (800c00c <_ZN3pdu6updateEv+0x68>)
 800bfea:	f7ff ff39 	bl	800be60 <_ZNK3pdu15LpChannelConfigneERKS0_>
		//can::message<can::messages::PDU_LP_Duty> lpDutyMsg;
		//TODO ...

	}

	if(s_hpChannelConfig != s_confirmed_hpChannelConfig){
 800bfee:	4908      	ldr	r1, [pc, #32]	; (800c010 <_ZN3pdu6updateEv+0x6c>)
 800bff0:	4808      	ldr	r0, [pc, #32]	; (800c014 <_ZN3pdu6updateEv+0x70>)
 800bff2:	f7ff ff6e 	bl	800bed2 <_ZNK3pdu15HpChannelConfigneERKS0_>
		// update hp channel config.
		//can::message<can::messages::PDU_HP_D_Duty> lpDutyMsg;
	}
}
 800bff6:	bf00      	nop
 800bff8:	3718      	adds	r7, #24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	20000cb8 	.word	0x20000cb8
 800c004:	20000cb4 	.word	0x20000cb4
 800c008:	20000ce4 	.word	0x20000ce4
 800c00c:	20000cbc 	.word	0x20000cbc
 800c010:	20000d1c 	.word	0x20000d1c
 800c014:	20000d0c 	.word	0x20000d0c

0800c018 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals14PDU_TX_EnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f103 0208 	add.w	r2, r3, #8
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	3310      	adds	r3, #16
 800c02a:	4619      	mov	r1, r3
 800c02c:	4610      	mov	r0, r2
 800c02e:	f7ff fe45 	bl	800bcbc <_ZN3can7signals14PDU_TX_Enabled3getERKyS3_>
 800c032:	4603      	mov	r3, r0
        }
 800c034:	4618      	mov	r0, r3
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals18PDU_TX_PEHWEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b082      	sub	sp, #8
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f103 0208 	add.w	r2, r3, #8
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	3310      	adds	r3, #16
 800c04e:	4619      	mov	r1, r3
 800c050:	4610      	mov	r0, r2
 800c052:	f7ff fe4b 	bl	800bcec <_ZN3can7signals18PDU_TX_PEHWEnabled3getERKyS3_>
 800c056:	4603      	mov	r3, r0
        }
 800c058:	4618      	mov	r0, r3
 800c05a:	3708      	adds	r7, #8
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}

0800c060 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800c060:	b590      	push	{r4, r7, lr}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
 800c068:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f7f5 f9df 	bl	8001430 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	4618      	mov	r0, r3
 800c076:	f000 f865 	bl	800c144 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE21_M_not_empty_functionIS3_EEbPT_>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00f      	beq.n	800c0a0 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800c080:	687c      	ldr	r4, [r7, #4]
 800c082:	463b      	mov	r3, r7
 800c084:	4618      	mov	r0, r3
 800c086:	f000 f86d 	bl	800c164 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 800c08a:	4603      	mov	r3, r0
 800c08c:	4619      	mov	r1, r3
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 f873 	bl	800c17a <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4a05      	ldr	r2, [pc, #20]	; (800c0ac <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x4c>)
 800c098:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	4a04      	ldr	r2, [pc, #16]	; (800c0b0 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x50>)
 800c09e:	609a      	str	r2, [r3, #8]
      }
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	370c      	adds	r7, #12
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd90      	pop	{r4, r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	0800c19f 	.word	0x0800c19f
 800c0b0:	0800c1c9 	.word	0x0800c1c9

0800c0b4 <_ZN3can23registerMessageReceiverINS_8messages13PDU_TX_StatusEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 800c0b4:	b590      	push	{r4, r7, lr}
 800c0b6:	b087      	sub	sp, #28
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800c0bc:	f107 0308 	add.w	r3, r7, #8
 800c0c0:	6879      	ldr	r1, [r7, #4]
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7f5 faf1 	bl	80016aa <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 800c0c8:	f107 0308 	add.w	r3, r7, #8
 800c0cc:	2200      	movs	r2, #0
 800c0ce:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f7f5 fa22 	bl	800151c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 800c0d8:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 800c0da:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 800c0dc:	f107 0308 	add.w	r3, r7, #8
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7f5 f9d7 	bl	8001494 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 800c0e6:	4623      	mov	r3, r4
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	371c      	adds	r7, #28
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd90      	pop	{r4, r7, pc}

0800c0f0 <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals13PDU_RX_EnableEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f103 0008 	add.w	r0, r3, #8
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	f103 0110 	add.w	r1, r3, #16
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	1d1a      	adds	r2, r3, #4
 800c10c:	78fb      	ldrb	r3, [r7, #3]
 800c10e:	f7ff fe05 	bl	800bd1c <_ZN3can7signals13PDU_RX_Enable3setERyS2_Rhb>
        }
 800c112:	bf00      	nop
 800c114:	3708      	adds	r7, #8
 800c116:	46bd      	mov	sp, r7
 800c118:	bd80      	pop	{r7, pc}

0800c11a <_ZN3can7MessageINS_8messages14PDU_RX_ControlEE3setINS_7signals17PDU_RX_PEHWEnableEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c11a:	b580      	push	{r7, lr}
 800c11c:	b082      	sub	sp, #8
 800c11e:	af00      	add	r7, sp, #0
 800c120:	6078      	str	r0, [r7, #4]
 800c122:	460b      	mov	r3, r1
 800c124:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f103 0008 	add.w	r0, r3, #8
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f103 0110 	add.w	r1, r3, #16
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	1d1a      	adds	r2, r3, #4
 800c136:	78fb      	ldrb	r3, [r7, #3]
 800c138:	f7ff fe14 	bl	800bd64 <_ZN3can7signals17PDU_RX_PEHWEnable3setERyS2_Rhb>
        }
 800c13c:	bf00      	nop
 800c13e:	3708      	adds	r7, #8
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 800c144:	b480      	push	{r7}
 800c146:	b083      	sub	sp, #12
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	bf14      	ite	ne
 800c152:	2301      	movne	r3, #1
 800c154:	2300      	moveq	r3, #0
 800c156:	b2db      	uxtb	r3, r3
 800c158:	4618      	mov	r0, r3
 800c15a:	370c      	adds	r7, #12
 800c15c:	46bd      	mov	sp, r7
 800c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c162:	4770      	bx	lr

0800c164 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 800c164:	b480      	push	{r7}
 800c166:	b083      	sub	sp, #12
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	4618      	mov	r0, r3
 800c170:	370c      	adds	r7, #12
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr

0800c17a <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800c17a:	b590      	push	{r4, r7, lr}
 800c17c:	b083      	sub	sp, #12
 800c17e:	af00      	add	r7, sp, #0
 800c180:	6078      	str	r0, [r7, #4]
 800c182:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800c184:	6838      	ldr	r0, [r7, #0]
 800c186:	f7ff ffed 	bl	800c164 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 800c18a:	4603      	mov	r3, r0
 800c18c:	4622      	mov	r2, r4
 800c18e:	4619      	mov	r1, r3
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f000 f838 	bl	800c206 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800c196:	bf00      	nop
 800c198:	370c      	adds	r7, #12
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd90      	pop	{r4, r7, pc}

0800c19e <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800c19e:	b590      	push	{r4, r7, lr}
 800c1a0:	b083      	sub	sp, #12
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 f845 	bl	800c238 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	6838      	ldr	r0, [r7, #0]
 800c1b2:	f7f5 fb04 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800c1b6:	4603      	mov	r3, r0
 800c1b8:	4619      	mov	r1, r3
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	f000 f84d 	bl	800c25a <_ZSt10__invoke_rIvRPFvR9RxMessageEJS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 800c1c0:	bf00      	nop
      }
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd90      	pop	{r4, r7, pc}

0800c1c8 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800c1c8:	b590      	push	{r4, r7, lr}
 800c1ca:	b085      	sub	sp, #20
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800c1d6:	79fb      	ldrb	r3, [r7, #7]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d109      	bne.n	800c1f0 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800c1dc:	68f8      	ldr	r0, [r7, #12]
 800c1de:	f000 f852 	bl	800c286 <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	68b8      	ldr	r0, [r7, #8]
 800c1e6:	f000 f827 	bl	800c238 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	6023      	str	r3, [r4, #0]
	    break;
 800c1ee:	e005      	b.n	800c1fc <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 800c1f0:	79fb      	ldrb	r3, [r7, #7]
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f000 f851 	bl	800c29e <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 800c1fc:	2300      	movs	r3, #0
      }
 800c1fe:	4618      	mov	r0, r3
 800c200:	3714      	adds	r7, #20
 800c202:	46bd      	mov	sp, r7
 800c204:	bd90      	pop	{r4, r7, pc}

0800c206 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800c206:	b590      	push	{r4, r7, lr}
 800c208:	b085      	sub	sp, #20
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	60b9      	str	r1, [r7, #8]
 800c210:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800c212:	68b8      	ldr	r0, [r7, #8]
 800c214:	f7ff ffa6 	bl	800c164 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 800c218:	4603      	mov	r3, r0
 800c21a:	681c      	ldr	r4, [r3, #0]
 800c21c:	68f8      	ldr	r0, [r7, #12]
 800c21e:	f7fc fa7b 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800c222:	4603      	mov	r3, r0
 800c224:	4619      	mov	r1, r3
 800c226:	2004      	movs	r0, #4
 800c228:	f7fc fa6a 	bl	8008700 <_ZnwjPv>
 800c22c:	4603      	mov	r3, r0
 800c22e:	601c      	str	r4, [r3, #0]
 800c230:	bf00      	nop
 800c232:	3714      	adds	r7, #20
 800c234:	46bd      	mov	sp, r7
 800c236:	bd90      	pop	{r4, r7, pc}

0800c238 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f857 	bl	800c2f4 <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>
 800c246:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800c248:	68f8      	ldr	r0, [r7, #12]
 800c24a:	f000 f85f 	bl	800c30c <_ZSt11__addressofIKPFvR9RxMessageEEPT_RS5_>
 800c24e:	4603      	mov	r3, r0
 800c250:	bf00      	nop
	}
 800c252:	4618      	mov	r0, r3
 800c254:	3710      	adds	r7, #16
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}

0800c25a <_ZSt10__invoke_rIvRPFvR9RxMessageEJS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 800c25a:	b5b0      	push	{r4, r5, r7, lr}
 800c25c:	b082      	sub	sp, #8
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]
 800c262:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f000 f85c 	bl	800c322 <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>
 800c26a:	4604      	mov	r4, r0
 800c26c:	6838      	ldr	r0, [r7, #0]
 800c26e:	f7f5 faa6 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800c272:	4603      	mov	r3, r0
 800c274:	461a      	mov	r2, r3
 800c276:	4621      	mov	r1, r4
 800c278:	4628      	mov	r0, r5
 800c27a:	f000 f85d 	bl	800c338 <_ZSt13__invoke_implIvRPFvR9RxMessageEJS1_EET_St14__invoke_otherOT0_DpOT1_>
    }
 800c27e:	bf00      	nop
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bdb0      	pop	{r4, r5, r7, pc}

0800c286 <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>:
      _M_access()
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7fc fa42 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800c294:	4603      	mov	r3, r0
 800c296:	4618      	mov	r0, r3
 800c298:	3708      	adds	r7, #8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}

0800c29e <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800c29e:	b5b0      	push	{r4, r5, r7, lr}
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	60f8      	str	r0, [r7, #12]
 800c2a6:	60b9      	str	r1, [r7, #8]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800c2ac:	79fb      	ldrb	r3, [r7, #7]
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d016      	beq.n	800c2e0 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 800c2b2:	2b03      	cmp	r3, #3
 800c2b4:	dc19      	bgt.n	800c2ea <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800c2b6:	2b01      	cmp	r3, #1
 800c2b8:	d002      	beq.n	800c2c0 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	d00a      	beq.n	800c2d4 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 800c2be:	e014      	b.n	800c2ea <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f7ff ffe0 	bl	800c286 <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>
 800c2c6:	4604      	mov	r4, r0
 800c2c8:	68b8      	ldr	r0, [r7, #8]
 800c2ca:	f7ff ffb5 	bl	800c238 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	6023      	str	r3, [r4, #0]
	      break;
 800c2d2:	e00a      	b.n	800c2ea <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 800c2d4:	462a      	mov	r2, r5
 800c2d6:	68b9      	ldr	r1, [r7, #8]
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f000 f842 	bl	800c362 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 800c2de:	e004      	b.n	800c2ea <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	68f8      	ldr	r0, [r7, #12]
 800c2e4:	f000 f856 	bl	800c394 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800c2e8:	bf00      	nop
	  return false;
 800c2ea:	2300      	movs	r3, #0
	}
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	3710      	adds	r7, #16
 800c2f0:	46bd      	mov	sp, r7
 800c2f2:	bdb0      	pop	{r4, r5, r7, pc}

0800c2f4 <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>:
      _M_access() const
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7fc fa16 	bl	800872e <_ZNKSt9_Any_data9_M_accessEv>
 800c302:	4603      	mov	r3, r0
 800c304:	4618      	mov	r0, r3
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}

0800c30c <_ZSt11__addressofIKPFvR9RxMessageEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4618      	mov	r0, r3
 800c318:	370c      	adds	r7, #12
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr

0800c322 <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c322:	b480      	push	{r7}
 800c324:	b083      	sub	sp, #12
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4618      	mov	r0, r3
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <_ZSt13__invoke_implIvRPFvR9RxMessageEJS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 800c338:	b590      	push	{r4, r7, lr}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	7338      	strb	r0, [r7, #12]
 800c340:	60b9      	str	r1, [r7, #8]
 800c342:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800c344:	68b8      	ldr	r0, [r7, #8]
 800c346:	f7ff ffec 	bl	800c322 <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>
 800c34a:	4603      	mov	r3, r0
 800c34c:	681c      	ldr	r4, [r3, #0]
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f7f5 fa35 	bl	80017be <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800c354:	4603      	mov	r3, r0
 800c356:	4618      	mov	r0, r3
 800c358:	47a0      	blx	r4
 800c35a:	bf00      	nop
 800c35c:	3714      	adds	r7, #20
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd90      	pop	{r4, r7, pc}

0800c362 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800c362:	b590      	push	{r4, r7, lr}
 800c364:	b085      	sub	sp, #20
 800c366:	af00      	add	r7, sp, #0
 800c368:	60f8      	str	r0, [r7, #12]
 800c36a:	60b9      	str	r1, [r7, #8]
 800c36c:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 800c36e:	68b8      	ldr	r0, [r7, #8]
 800c370:	f7ff ffc0 	bl	800c2f4 <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>
 800c374:	4603      	mov	r3, r0
 800c376:	681c      	ldr	r4, [r3, #0]
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7fc f9cd 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800c37e:	4603      	mov	r3, r0
 800c380:	4619      	mov	r1, r3
 800c382:	2004      	movs	r0, #4
 800c384:	f7fc f9bc 	bl	8008700 <_ZnwjPv>
 800c388:	4603      	mov	r3, r0
 800c38a:	601c      	str	r4, [r3, #0]
	}
 800c38c:	bf00      	nop
 800c38e:	3714      	adds	r7, #20
 800c390:	46bd      	mov	sp, r7
 800c392:	bd90      	pop	{r4, r7, pc}

0800c394 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f000 f804 	bl	800c3ac <_ZNSt9_Any_data9_M_accessIPFvR9RxMessageEEERT_v>
	}
 800c3a4:	bf00      	nop
 800c3a6:	3708      	adds	r7, #8
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <_ZNSt9_Any_data9_M_accessIPFvR9RxMessageEEERT_v>:
      _M_access()
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b082      	sub	sp, #8
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7fc f9af 	bl	8008718 <_ZNSt9_Any_data9_M_accessEv>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <_ZN3can7signals19SensorF_TX_PodState3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800c3c4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c3c8:	b087      	sub	sp, #28
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	60f8      	str	r0, [r7, #12]
 800c3ce:	60b9      	str	r1, [r7, #8]
 800c3d0:	607a      	str	r2, [r7, #4]
 800c3d2:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800c3d4:	78fb      	ldrb	r3, [r7, #3]
 800c3d6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue)) & 0x7ull;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3de:	7df9      	ldrb	r1, [r7, #23]
 800c3e0:	2000      	movs	r0, #0
 800c3e2:	468a      	mov	sl, r1
 800c3e4:	4683      	mov	fp, r0
 800c3e6:	f00a 0407 	and.w	r4, sl, #7
 800c3ea:	2500      	movs	r5, #0
 800c3ec:	ea42 0804 	orr.w	r8, r2, r4
 800c3f0:	ea43 0905 	orr.w	r9, r3, r5
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	e9c3 8900 	strd	r8, r9, [r3]
            }
 800c3fa:	bf00      	nop
 800c3fc:	371c      	adds	r7, #28
 800c3fe:	46bd      	mov	sp, r7
 800c400:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c404:	4770      	bx	lr

0800c406 <_ZN3can7signals24SensorF_TX_PodState_Last3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800c406:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c40a:	b087      	sub	sp, #28
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	60b9      	str	r1, [r7, #8]
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800c416:	78fb      	ldrb	r3, [r7, #3]
 800c418:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 3) & 0x38ull;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c420:	7dfb      	ldrb	r3, [r7, #23]
 800c422:	2200      	movs	r2, #0
 800c424:	4698      	mov	r8, r3
 800c426:	4691      	mov	r9, r2
 800c428:	f04f 0200 	mov.w	r2, #0
 800c42c:	f04f 0300 	mov.w	r3, #0
 800c430:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c434:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c438:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c43c:	f002 0438 	and.w	r4, r2, #56	; 0x38
 800c440:	2500      	movs	r5, #0
 800c442:	ea40 0a04 	orr.w	sl, r0, r4
 800c446:	ea41 0b05 	orr.w	fp, r1, r5
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800c450:	bf00      	nop
 800c452:	371c      	adds	r7, #28
 800c454:	46bd      	mov	sp, r7
 800c456:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c45a:	4770      	bx	lr

0800c45c <_ZN3can7signals26SensorF_TX_PodState_Target3setERyS2_Rhh>:
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800c45c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c460:	b087      	sub	sp, #28
 800c462:	af00      	add	r7, sp, #0
 800c464:	60f8      	str	r0, [r7, #12]
 800c466:	60b9      	str	r1, [r7, #8]
 800c468:	607a      	str	r2, [r7, #4]
 800c46a:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 800c46c:	78fb      	ldrb	r3, [r7, #3]
 800c46e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 8) & 0x700ull;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c476:	7dfb      	ldrb	r3, [r7, #23]
 800c478:	2200      	movs	r2, #0
 800c47a:	4698      	mov	r8, r3
 800c47c:	4691      	mov	r9, r2
 800c47e:	f04f 0200 	mov.w	r2, #0
 800c482:	f04f 0300 	mov.w	r3, #0
 800c486:	ea4f 2309 	mov.w	r3, r9, lsl #8
 800c48a:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 800c48e:	ea4f 2208 	mov.w	r2, r8, lsl #8
 800c492:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
 800c496:	2500      	movs	r5, #0
 800c498:	ea40 0a04 	orr.w	sl, r0, r4
 800c49c:	ea41 0b05 	orr.w	fp, r1, r5
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800c4a6:	bf00      	nop
 800c4a8:	371c      	adds	r7, #28
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800c4b0:	4770      	bx	lr
	...

0800c4b4 <_ZN3fms8setStateEh>:
PodState s_state;
PodState s_lastState;
PodState s_nextState;
osMutexId_t s_stateMutex = osMutexNew(NULL);

void setState(PodState state){
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(s_stateMutex, portMAX_DELAY);
 800c4be:	4b09      	ldr	r3, [pc, #36]	; (800c4e4 <_ZN3fms8setStateEh+0x30>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f04f 31ff 	mov.w	r1, #4294967295
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f008 fe43 	bl	8015152 <osMutexAcquire>
	s_nextState = state;
 800c4cc:	4a06      	ldr	r2, [pc, #24]	; (800c4e8 <_ZN3fms8setStateEh+0x34>)
 800c4ce:	79fb      	ldrb	r3, [r7, #7]
 800c4d0:	7013      	strb	r3, [r2, #0]
    osMutexRelease(s_stateMutex);
 800c4d2:	4b04      	ldr	r3, [pc, #16]	; (800c4e4 <_ZN3fms8setStateEh+0x30>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f008 fe86 	bl	80151e8 <osMutexRelease>
}
 800c4dc:	bf00      	nop
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}
 800c4e4:	20000d30 	.word	0x20000d30
 800c4e8:	20000d2e 	.word	0x20000d2e

0800c4ec <_ZN3fms6updateEv>:

void update(){
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	af00      	add	r7, sp, #0
    osMutexAcquire(s_stateMutex, portMAX_DELAY);
 800c4f0:	4b1b      	ldr	r3, [pc, #108]	; (800c560 <_ZN3fms6updateEv+0x74>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f04f 31ff 	mov.w	r1, #4294967295
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f008 fe2a 	bl	8015152 <osMutexAcquire>
	s_lastState = s_state;
 800c4fe:	4b19      	ldr	r3, [pc, #100]	; (800c564 <_ZN3fms6updateEv+0x78>)
 800c500:	781a      	ldrb	r2, [r3, #0]
 800c502:	4b19      	ldr	r3, [pc, #100]	; (800c568 <_ZN3fms6updateEv+0x7c>)
 800c504:	701a      	strb	r2, [r3, #0]
	s_state = s_nextState;
 800c506:	4b19      	ldr	r3, [pc, #100]	; (800c56c <_ZN3fms6updateEv+0x80>)
 800c508:	781a      	ldrb	r2, [r3, #0]
 800c50a:	4b16      	ldr	r3, [pc, #88]	; (800c564 <_ZN3fms6updateEv+0x78>)
 800c50c:	701a      	strb	r2, [r3, #0]
    osMutexRelease(s_stateMutex);
 800c50e:	4b14      	ldr	r3, [pc, #80]	; (800c560 <_ZN3fms6updateEv+0x74>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	4618      	mov	r0, r3
 800c514:	f008 fe68 	bl	80151e8 <osMutexRelease>

    switch(s_state){
 800c518:	4b12      	ldr	r3, [pc, #72]	; (800c564 <_ZN3fms6updateEv+0x78>)
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	3b01      	subs	r3, #1
 800c51e:	2b0b      	cmp	r3, #11
 800c520:	d81b      	bhi.n	800c55a <_ZN3fms6updateEv+0x6e>
 800c522:	a201      	add	r2, pc, #4	; (adr r2, 800c528 <_ZN3fms6updateEv+0x3c>)
 800c524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c528:	0800c559 	.word	0x0800c559
 800c52c:	0800c559 	.word	0x0800c559
 800c530:	0800c559 	.word	0x0800c559
 800c534:	0800c559 	.word	0x0800c559
 800c538:	0800c559 	.word	0x0800c559
 800c53c:	0800c55b 	.word	0x0800c55b
 800c540:	0800c559 	.word	0x0800c559
 800c544:	0800c559 	.word	0x0800c559
 800c548:	0800c559 	.word	0x0800c559
 800c54c:	0800c559 	.word	0x0800c559
 800c550:	0800c559 	.word	0x0800c559
 800c554:	0800c559 	.word	0x0800c559
    case STATE::POD_IDLE:
    	break;
 800c558:	bf00      	nop
    case STATE::POD_SAFE_TO_APPROACH:
    	break;
    case STATE::POD_FAULT:
    	break;
    }
}
 800c55a:	bf00      	nop
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop
 800c560:	20000d30 	.word	0x20000d30
 800c564:	20000d2c 	.word	0x20000d2c
 800c568:	20000d2d 	.word	0x20000d2d
 800c56c:	20000d2e 	.word	0x20000d2e

0800c570 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	2300      	movs	r3, #0
 800c57c:	2202      	movs	r2, #2
 800c57e:	f240 1181 	movw	r1, #385	; 0x181
 800c582:	f7f4 fd03 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4618      	mov	r0, r3
 800c58a:	3708      	adds	r7, #8
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <_ZN3fms5startEv>:

void start(){
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
	s_state = s_nextState;
 800c596:	4b14      	ldr	r3, [pc, #80]	; (800c5e8 <_ZN3fms5startEv+0x58>)
 800c598:	781a      	ldrb	r2, [r3, #0]
 800c59a:	4b14      	ldr	r3, [pc, #80]	; (800c5ec <_ZN3fms5startEv+0x5c>)
 800c59c:	701a      	strb	r2, [r3, #0]
	s_lastState = s_nextState;
 800c59e:	4b12      	ldr	r3, [pc, #72]	; (800c5e8 <_ZN3fms5startEv+0x58>)
 800c5a0:	781a      	ldrb	r2, [r3, #0]
 800c5a2:	4b13      	ldr	r3, [pc, #76]	; (800c5f0 <_ZN3fms5startEv+0x60>)
 800c5a4:	701a      	strb	r2, [r3, #0]
	while(true){
		update();
 800c5a6:	f7ff ffa1 	bl	800c4ec <_ZN3fms6updateEv>
		can::Message<can::messages::SensorF_TX_StatePod> stateMsg;
 800c5aa:	463b      	mov	r3, r7
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7ff ffdf 	bl	800c570 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEEC1Ev>
		stateMsg.set<can::signals::SensorF_TX_PodState>(s_state);
 800c5b2:	4b0e      	ldr	r3, [pc, #56]	; (800c5ec <_ZN3fms5startEv+0x5c>)
 800c5b4:	781a      	ldrb	r2, [r3, #0]
 800c5b6:	463b      	mov	r3, r7
 800c5b8:	4611      	mov	r1, r2
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 f81a 	bl	800c5f4 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals19SensorF_TX_PodStateEEEvNT_8dataTypeE>
		stateMsg.set<can::signals::SensorF_TX_PodState_Target>(s_nextState);
 800c5c0:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <_ZN3fms5startEv+0x58>)
 800c5c2:	781a      	ldrb	r2, [r3, #0]
 800c5c4:	463b      	mov	r3, r7
 800c5c6:	4611      	mov	r1, r2
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f000 f828 	bl	800c61e <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals26SensorF_TX_PodState_TargetEEEvNT_8dataTypeE>
		stateMsg.set<can::signals::SensorF_TX_PodState_Last>(s_lastState);
 800c5ce:	4b08      	ldr	r3, [pc, #32]	; (800c5f0 <_ZN3fms5startEv+0x60>)
 800c5d0:	781a      	ldrb	r2, [r3, #0]
 800c5d2:	463b      	mov	r3, r7
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	f000 f836 	bl	800c648 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals24SensorF_TX_PodState_LastEEEvNT_8dataTypeE>
		stateMsg.send();
 800c5dc:	463b      	mov	r3, r7
 800c5de:	2100      	movs	r1, #0
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	f7f4 fe1d 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
	}
 800c5e6:	e7de      	b.n	800c5a6 <_ZN3fms5startEv+0x16>
 800c5e8:	20000d2e 	.word	0x20000d2e
 800c5ec:	20000d2c 	.word	0x20000d2c
 800c5f0:	20000d2d 	.word	0x20000d2d

0800c5f4 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals19SensorF_TX_PodStateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f103 0008 	add.w	r0, r3, #8
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f103 0110 	add.w	r1, r3, #16
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	1d1a      	adds	r2, r3, #4
 800c610:	78fb      	ldrb	r3, [r7, #3]
 800c612:	f7ff fed7 	bl	800c3c4 <_ZN3can7signals19SensorF_TX_PodState3setERyS2_Rhh>
        }
 800c616:	bf00      	nop
 800c618:	3708      	adds	r7, #8
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}

0800c61e <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals26SensorF_TX_PodState_TargetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c61e:	b580      	push	{r7, lr}
 800c620:	b082      	sub	sp, #8
 800c622:	af00      	add	r7, sp, #0
 800c624:	6078      	str	r0, [r7, #4]
 800c626:	460b      	mov	r3, r1
 800c628:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f103 0008 	add.w	r0, r3, #8
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f103 0110 	add.w	r1, r3, #16
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	1d1a      	adds	r2, r3, #4
 800c63a:	78fb      	ldrb	r3, [r7, #3]
 800c63c:	f7ff ff0e 	bl	800c45c <_ZN3can7signals26SensorF_TX_PodState_Target3setERyS2_Rhh>
        }
 800c640:	bf00      	nop
 800c642:	3708      	adds	r7, #8
 800c644:	46bd      	mov	sp, r7
 800c646:	bd80      	pop	{r7, pc}

0800c648 <_ZN3can7MessageINS_8messages19SensorF_TX_StatePodEE3setINS_7signals24SensorF_TX_PodState_LastEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800c648:	b580      	push	{r7, lr}
 800c64a:	b082      	sub	sp, #8
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	460b      	mov	r3, r1
 800c652:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	f103 0008 	add.w	r0, r3, #8
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f103 0110 	add.w	r1, r3, #16
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	1d1a      	adds	r2, r3, #4
 800c664:	78fb      	ldrb	r3, [r7, #3]
 800c666:	f7ff fece 	bl	800c406 <_ZN3can7signals24SensorF_TX_PodState_Last3setERyS2_Rhh>
        }
 800c66a:	bf00      	nop
 800c66c:	3708      	adds	r7, #8
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
	...

0800c674 <_Z41__static_initialization_and_destruction_0ii>:
}

}
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
 800c67c:	6039      	str	r1, [r7, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d10a      	bne.n	800c69a <_Z41__static_initialization_and_destruction_0ii+0x26>
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c68a:	4293      	cmp	r3, r2
 800c68c:	d105      	bne.n	800c69a <_Z41__static_initialization_and_destruction_0ii+0x26>
osMutexId_t s_stateMutex = osMutexNew(NULL);
 800c68e:	2000      	movs	r0, #0
 800c690:	f008 fcd9 	bl	8015046 <osMutexNew>
 800c694:	4603      	mov	r3, r0
 800c696:	4a03      	ldr	r2, [pc, #12]	; (800c6a4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800c698:	6013      	str	r3, [r2, #0]
}
 800c69a:	bf00      	nop
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	20000d30 	.word	0x20000d30

0800c6a8 <_GLOBAL__sub_I__ZN3fms7s_stateE>:
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	f7ff ffdf 	bl	800c674 <_Z41__static_initialization_and_destruction_0ii>
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <state_maschine_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void state_maschine_entry(void *argv) {
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b082      	sub	sp, #8
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
	fms::setState(fms::STATE::POD_IDLE);
 800c6c0:	2001      	movs	r0, #1
 800c6c2:	f7ff fef7 	bl	800c4b4 <_ZN3fms8setStateEh>
	fms::start();
 800c6c6:	f7ff ff63 	bl	800c590 <_ZN3fms5startEv>

}
 800c6ca:	bf00      	nop
 800c6cc:	3708      	adds	r7, #8
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
	...

0800c6d4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c6da:	463b      	mov	r3, r7
 800c6dc:	2200      	movs	r2, #0
 800c6de:	601a      	str	r2, [r3, #0]
 800c6e0:	605a      	str	r2, [r3, #4]
 800c6e2:	609a      	str	r2, [r3, #8]
 800c6e4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800c6e6:	4b36      	ldr	r3, [pc, #216]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c6e8:	4a36      	ldr	r2, [pc, #216]	; (800c7c4 <MX_ADC1_Init+0xf0>)
 800c6ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800c6ec:	4b34      	ldr	r3, [pc, #208]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c6ee:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c6f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800c6f4:	4b32      	ldr	r3, [pc, #200]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800c6fa:	4b31      	ldr	r3, [pc, #196]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800c700:	4b2f      	ldr	r3, [pc, #188]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c702:	2200      	movs	r2, #0
 800c704:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800c706:	4b2e      	ldr	r3, [pc, #184]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c708:	2200      	movs	r2, #0
 800c70a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c70e:	4b2c      	ldr	r3, [pc, #176]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c710:	2200      	movs	r2, #0
 800c712:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c714:	4b2a      	ldr	r3, [pc, #168]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c716:	4a2c      	ldr	r2, [pc, #176]	; (800c7c8 <MX_ADC1_Init+0xf4>)
 800c718:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c71a:	4b29      	ldr	r3, [pc, #164]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c71c:	2200      	movs	r2, #0
 800c71e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800c720:	4b27      	ldr	r3, [pc, #156]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c722:	2204      	movs	r2, #4
 800c724:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800c726:	4b26      	ldr	r3, [pc, #152]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c728:	2200      	movs	r2, #0
 800c72a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800c72e:	4b24      	ldr	r3, [pc, #144]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c730:	2200      	movs	r2, #0
 800c732:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800c734:	4822      	ldr	r0, [pc, #136]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c736:	f001 fd69 	bl	800e20c <HAL_ADC_Init>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d001      	beq.n	800c744 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800c740:	f000 fe06 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800c744:	230a      	movs	r3, #10
 800c746:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800c748:	2301      	movs	r3, #1
 800c74a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800c74c:	2305      	movs	r3, #5
 800c74e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c750:	463b      	mov	r3, r7
 800c752:	4619      	mov	r1, r3
 800c754:	481a      	ldr	r0, [pc, #104]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c756:	f001 feb7 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d001      	beq.n	800c764 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800c760:	f000 fdf6 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800c764:	230c      	movs	r3, #12
 800c766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800c768:	2302      	movs	r3, #2
 800c76a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c76c:	463b      	mov	r3, r7
 800c76e:	4619      	mov	r1, r3
 800c770:	4813      	ldr	r0, [pc, #76]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c772:	f001 fea9 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800c77c:	f000 fde8 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800c780:	2310      	movs	r3, #16
 800c782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800c784:	2303      	movs	r3, #3
 800c786:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c788:	463b      	mov	r3, r7
 800c78a:	4619      	mov	r1, r3
 800c78c:	480c      	ldr	r0, [pc, #48]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c78e:	f001 fe9b 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c792:	4603      	mov	r3, r0
 800c794:	2b00      	cmp	r3, #0
 800c796:	d001      	beq.n	800c79c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800c798:	f000 fdda 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800c79c:	2311      	movs	r3, #17
 800c79e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800c7a0:	2304      	movs	r3, #4
 800c7a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800c7a4:	463b      	mov	r3, r7
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	4805      	ldr	r0, [pc, #20]	; (800c7c0 <MX_ADC1_Init+0xec>)
 800c7aa:	f001 fe8d 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d001      	beq.n	800c7b8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800c7b4:	f000 fdcc 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800c7b8:	bf00      	nop
 800c7ba:	3710      	adds	r7, #16
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	20000d34 	.word	0x20000d34
 800c7c4:	40012000 	.word	0x40012000
 800c7c8:	0f000001 	.word	0x0f000001

0800c7cc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800c7d2:	463b      	mov	r3, r7
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	605a      	str	r2, [r3, #4]
 800c7da:	609a      	str	r2, [r3, #8]
 800c7dc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800c7de:	4b52      	ldr	r3, [pc, #328]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c7e0:	4a52      	ldr	r2, [pc, #328]	; (800c92c <MX_ADC2_Init+0x160>)
 800c7e2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800c7e4:	4b50      	ldr	r3, [pc, #320]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c7e6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800c7ea:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800c7ec:	4b4e      	ldr	r3, [pc, #312]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800c7f2:	4b4d      	ldr	r3, [pc, #308]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800c7f8:	4b4b      	ldr	r3, [pc, #300]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800c7fe:	4b4a      	ldr	r3, [pc, #296]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c800:	2200      	movs	r2, #0
 800c802:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800c806:	4b48      	ldr	r3, [pc, #288]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c808:	2200      	movs	r2, #0
 800c80a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800c80c:	4b46      	ldr	r3, [pc, #280]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c80e:	4a48      	ldr	r2, [pc, #288]	; (800c930 <MX_ADC2_Init+0x164>)
 800c810:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800c812:	4b45      	ldr	r3, [pc, #276]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c814:	2200      	movs	r2, #0
 800c816:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 800c818:	4b43      	ldr	r3, [pc, #268]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c81a:	2208      	movs	r2, #8
 800c81c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800c81e:	4b42      	ldr	r3, [pc, #264]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c820:	2200      	movs	r2, #0
 800c822:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800c826:	4b40      	ldr	r3, [pc, #256]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c828:	2200      	movs	r2, #0
 800c82a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800c82c:	483e      	ldr	r0, [pc, #248]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c82e:	f001 fced 	bl	800e20c <HAL_ADC_Init>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d001      	beq.n	800c83c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800c838:	f000 fd8a 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800c83c:	230f      	movs	r3, #15
 800c83e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800c840:	2301      	movs	r3, #1
 800c842:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800c844:	2304      	movs	r3, #4
 800c846:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c848:	463b      	mov	r3, r7
 800c84a:	4619      	mov	r1, r3
 800c84c:	4836      	ldr	r0, [pc, #216]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c84e:	f001 fe3b 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c852:	4603      	mov	r3, r0
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800c858:	f000 fd7a 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800c85c:	230e      	movs	r3, #14
 800c85e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800c860:	2302      	movs	r3, #2
 800c862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c864:	463b      	mov	r3, r7
 800c866:	4619      	mov	r1, r3
 800c868:	482f      	ldr	r0, [pc, #188]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c86a:	f001 fe2d 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d001      	beq.n	800c878 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 800c874:	f000 fd6c 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800c878:	2303      	movs	r3, #3
 800c87a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800c87c:	2303      	movs	r3, #3
 800c87e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c880:	463b      	mov	r3, r7
 800c882:	4619      	mov	r1, r3
 800c884:	4828      	ldr	r0, [pc, #160]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c886:	f001 fe1f 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d001      	beq.n	800c894 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800c890:	f000 fd5e 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800c894:	2302      	movs	r3, #2
 800c896:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800c898:	2304      	movs	r3, #4
 800c89a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c89c:	463b      	mov	r3, r7
 800c89e:	4619      	mov	r1, r3
 800c8a0:	4821      	ldr	r0, [pc, #132]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c8a2:	f001 fe11 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d001      	beq.n	800c8b0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800c8ac:	f000 fd50 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800c8b0:	2304      	movs	r3, #4
 800c8b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800c8b4:	2305      	movs	r3, #5
 800c8b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c8b8:	463b      	mov	r3, r7
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	481a      	ldr	r0, [pc, #104]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c8be:	f001 fe03 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d001      	beq.n	800c8cc <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800c8c8:	f000 fd42 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800c8cc:	2305      	movs	r3, #5
 800c8ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800c8d0:	2306      	movs	r3, #6
 800c8d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c8d4:	463b      	mov	r3, r7
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4813      	ldr	r0, [pc, #76]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c8da:	f001 fdf5 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d001      	beq.n	800c8e8 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800c8e4:	f000 fd34 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800c8e8:	2306      	movs	r3, #6
 800c8ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800c8ec:	2307      	movs	r3, #7
 800c8ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c8f0:	463b      	mov	r3, r7
 800c8f2:	4619      	mov	r1, r3
 800c8f4:	480c      	ldr	r0, [pc, #48]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c8f6:	f001 fde7 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d001      	beq.n	800c904 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 800c900:	f000 fd26 	bl	800d350 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800c904:	2307      	movs	r3, #7
 800c906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 800c908:	2308      	movs	r3, #8
 800c90a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800c90c:	463b      	mov	r3, r7
 800c90e:	4619      	mov	r1, r3
 800c910:	4805      	ldr	r0, [pc, #20]	; (800c928 <MX_ADC2_Init+0x15c>)
 800c912:	f001 fdd9 	bl	800e4c8 <HAL_ADC_ConfigChannel>
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d001      	beq.n	800c920 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800c91c:	f000 fd18 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800c920:	bf00      	nop
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	20000d7c 	.word	0x20000d7c
 800c92c:	40012100 	.word	0x40012100
 800c930:	0f000001 	.word	0x0f000001

0800c934 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b08c      	sub	sp, #48	; 0x30
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c93c:	f107 031c 	add.w	r3, r7, #28
 800c940:	2200      	movs	r2, #0
 800c942:	601a      	str	r2, [r3, #0]
 800c944:	605a      	str	r2, [r3, #4]
 800c946:	609a      	str	r2, [r3, #8]
 800c948:	60da      	str	r2, [r3, #12]
 800c94a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4a6b      	ldr	r2, [pc, #428]	; (800cb00 <HAL_ADC_MspInit+0x1cc>)
 800c952:	4293      	cmp	r3, r2
 800c954:	d157      	bne.n	800ca06 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c956:	2300      	movs	r3, #0
 800c958:	61bb      	str	r3, [r7, #24]
 800c95a:	4b6a      	ldr	r3, [pc, #424]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800c95c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c95e:	4a69      	ldr	r2, [pc, #420]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800c960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c964:	6453      	str	r3, [r2, #68]	; 0x44
 800c966:	4b67      	ldr	r3, [pc, #412]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800c968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c96a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c96e:	61bb      	str	r3, [r7, #24]
 800c970:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c972:	2300      	movs	r3, #0
 800c974:	617b      	str	r3, [r7, #20]
 800c976:	4b63      	ldr	r3, [pc, #396]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800c978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c97a:	4a62      	ldr	r2, [pc, #392]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800c97c:	f043 0304 	orr.w	r3, r3, #4
 800c980:	6313      	str	r3, [r2, #48]	; 0x30
 800c982:	4b60      	ldr	r3, [pc, #384]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800c984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c986:	f003 0304 	and.w	r3, r3, #4
 800c98a:	617b      	str	r3, [r7, #20]
 800c98c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800c98e:	2305      	movs	r3, #5
 800c990:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c992:	2303      	movs	r3, #3
 800c994:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c996:	2300      	movs	r3, #0
 800c998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c99a:	f107 031c 	add.w	r3, r7, #28
 800c99e:	4619      	mov	r1, r3
 800c9a0:	4859      	ldr	r0, [pc, #356]	; (800cb08 <HAL_ADC_MspInit+0x1d4>)
 800c9a2:	f003 fb3b 	bl	801001c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c9a6:	4b59      	ldr	r3, [pc, #356]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9a8:	4a59      	ldr	r2, [pc, #356]	; (800cb10 <HAL_ADC_MspInit+0x1dc>)
 800c9aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c9ac:	4b57      	ldr	r3, [pc, #348]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c9b2:	4b56      	ldr	r3, [pc, #344]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c9b8:	4b54      	ldr	r3, [pc, #336]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c9be:	4b53      	ldr	r3, [pc, #332]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c9c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c9c6:	4b51      	ldr	r3, [pc, #324]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c9ce:	4b4f      	ldr	r3, [pc, #316]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c9d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800c9d6:	4b4d      	ldr	r3, [pc, #308]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9d8:	2200      	movs	r2, #0
 800c9da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800c9dc:	4b4b      	ldr	r3, [pc, #300]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9de:	2200      	movs	r2, #0
 800c9e0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c9e2:	4b4a      	ldr	r3, [pc, #296]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c9e8:	4848      	ldr	r0, [pc, #288]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9ea:	f002 ffa7 	bl	800f93c <HAL_DMA_Init>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 800c9f4:	f000 fcac 	bl	800d350 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	4a44      	ldr	r2, [pc, #272]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800c9fc:	639a      	str	r2, [r3, #56]	; 0x38
 800c9fe:	4a43      	ldr	r2, [pc, #268]	; (800cb0c <HAL_ADC_MspInit+0x1d8>)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800ca04:	e077      	b.n	800caf6 <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a42      	ldr	r2, [pc, #264]	; (800cb14 <HAL_ADC_MspInit+0x1e0>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d172      	bne.n	800caf6 <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800ca10:	2300      	movs	r3, #0
 800ca12:	613b      	str	r3, [r7, #16]
 800ca14:	4b3b      	ldr	r3, [pc, #236]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800ca16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca18:	4a3a      	ldr	r2, [pc, #232]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800ca1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ca1e:	6453      	str	r3, [r2, #68]	; 0x44
 800ca20:	4b38      	ldr	r3, [pc, #224]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800ca22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ca28:	613b      	str	r3, [r7, #16]
 800ca2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	60fb      	str	r3, [r7, #12]
 800ca30:	4b34      	ldr	r3, [pc, #208]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800ca32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca34:	4a33      	ldr	r2, [pc, #204]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800ca36:	f043 0304 	orr.w	r3, r3, #4
 800ca3a:	6313      	str	r3, [r2, #48]	; 0x30
 800ca3c:	4b31      	ldr	r3, [pc, #196]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800ca3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca40:	f003 0304 	and.w	r3, r3, #4
 800ca44:	60fb      	str	r3, [r7, #12]
 800ca46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca48:	2300      	movs	r3, #0
 800ca4a:	60bb      	str	r3, [r7, #8]
 800ca4c:	4b2d      	ldr	r3, [pc, #180]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800ca4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca50:	4a2c      	ldr	r2, [pc, #176]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800ca52:	f043 0301 	orr.w	r3, r3, #1
 800ca56:	6313      	str	r3, [r2, #48]	; 0x30
 800ca58:	4b2a      	ldr	r3, [pc, #168]	; (800cb04 <HAL_ADC_MspInit+0x1d0>)
 800ca5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca5c:	f003 0301 	and.w	r3, r3, #1
 800ca60:	60bb      	str	r3, [r7, #8]
 800ca62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 800ca64:	2335      	movs	r3, #53	; 0x35
 800ca66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ca68:	2303      	movs	r3, #3
 800ca6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ca70:	f107 031c 	add.w	r3, r7, #28
 800ca74:	4619      	mov	r1, r3
 800ca76:	4824      	ldr	r0, [pc, #144]	; (800cb08 <HAL_ADC_MspInit+0x1d4>)
 800ca78:	f003 fad0 	bl	801001c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 800ca7c:	23fc      	movs	r3, #252	; 0xfc
 800ca7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ca80:	2303      	movs	r3, #3
 800ca82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca84:	2300      	movs	r3, #0
 800ca86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca88:	f107 031c 	add.w	r3, r7, #28
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4822      	ldr	r0, [pc, #136]	; (800cb18 <HAL_ADC_MspInit+0x1e4>)
 800ca90:	f003 fac4 	bl	801001c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800ca94:	4b21      	ldr	r3, [pc, #132]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800ca96:	4a22      	ldr	r2, [pc, #136]	; (800cb20 <HAL_ADC_MspInit+0x1ec>)
 800ca98:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800ca9a:	4b20      	ldr	r3, [pc, #128]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800ca9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800caa0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800caa2:	4b1e      	ldr	r3, [pc, #120]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800caa4:	2200      	movs	r2, #0
 800caa6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800caa8:	4b1c      	ldr	r3, [pc, #112]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800caaa:	2200      	movs	r2, #0
 800caac:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800caae:	4b1b      	ldr	r3, [pc, #108]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800cab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cab4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cab6:	4b19      	ldr	r3, [pc, #100]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800cab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cabc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cabe:	4b17      	ldr	r3, [pc, #92]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800cac0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cac4:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800cac6:	4b15      	ldr	r3, [pc, #84]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800cac8:	2200      	movs	r2, #0
 800caca:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800cacc:	4b13      	ldr	r3, [pc, #76]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800cace:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cad2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cad4:	4b11      	ldr	r3, [pc, #68]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800cad6:	2200      	movs	r2, #0
 800cad8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800cada:	4810      	ldr	r0, [pc, #64]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800cadc:	f002 ff2e 	bl	800f93c <HAL_DMA_Init>
 800cae0:	4603      	mov	r3, r0
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d001      	beq.n	800caea <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 800cae6:	f000 fc33 	bl	800d350 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4a0b      	ldr	r2, [pc, #44]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800caee:	639a      	str	r2, [r3, #56]	; 0x38
 800caf0:	4a0a      	ldr	r2, [pc, #40]	; (800cb1c <HAL_ADC_MspInit+0x1e8>)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6393      	str	r3, [r2, #56]	; 0x38
}
 800caf6:	bf00      	nop
 800caf8:	3730      	adds	r7, #48	; 0x30
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	40012000 	.word	0x40012000
 800cb04:	40023800 	.word	0x40023800
 800cb08:	40020800 	.word	0x40020800
 800cb0c:	20000dc4 	.word	0x20000dc4
 800cb10:	40026410 	.word	0x40026410
 800cb14:	40012100 	.word	0x40012100
 800cb18:	40020000 	.word	0x40020000
 800cb1c:	20000e24 	.word	0x20000e24
 800cb20:	40026440 	.word	0x40026440

0800cb24 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800cb28:	4b17      	ldr	r3, [pc, #92]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb2a:	4a18      	ldr	r2, [pc, #96]	; (800cb8c <MX_CAN1_Init+0x68>)
 800cb2c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800cb2e:	4b16      	ldr	r3, [pc, #88]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb30:	2203      	movs	r2, #3
 800cb32:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800cb34:	4b14      	ldr	r3, [pc, #80]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb36:	2200      	movs	r2, #0
 800cb38:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800cb3a:	4b13      	ldr	r3, [pc, #76]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800cb40:	4b11      	ldr	r3, [pc, #68]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb42:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800cb46:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800cb48:	4b0f      	ldr	r3, [pc, #60]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb4a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cb4e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800cb50:	4b0d      	ldr	r3, [pc, #52]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb52:	2200      	movs	r2, #0
 800cb54:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800cb56:	4b0c      	ldr	r3, [pc, #48]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb58:	2201      	movs	r2, #1
 800cb5a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800cb5c:	4b0a      	ldr	r3, [pc, #40]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb5e:	2200      	movs	r2, #0
 800cb60:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800cb62:	4b09      	ldr	r3, [pc, #36]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb64:	2201      	movs	r2, #1
 800cb66:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800cb68:	4b07      	ldr	r3, [pc, #28]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800cb6e:	4b06      	ldr	r3, [pc, #24]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb70:	2200      	movs	r2, #0
 800cb72:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800cb74:	4804      	ldr	r0, [pc, #16]	; (800cb88 <MX_CAN1_Init+0x64>)
 800cb76:	f001 ff47 	bl	800ea08 <HAL_CAN_Init>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d001      	beq.n	800cb84 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800cb80:	f000 fbe6 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800cb84:	bf00      	nop
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	20000e84 	.word	0x20000e84
 800cb8c:	40006400 	.word	0x40006400

0800cb90 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800cb94:	4b17      	ldr	r3, [pc, #92]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cb96:	4a18      	ldr	r2, [pc, #96]	; (800cbf8 <MX_CAN2_Init+0x68>)
 800cb98:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 800cb9a:	4b16      	ldr	r3, [pc, #88]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cb9c:	2203      	movs	r2, #3
 800cb9e:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800cba0:	4b14      	ldr	r3, [pc, #80]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cba2:	2200      	movs	r2, #0
 800cba4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800cba6:	4b13      	ldr	r3, [pc, #76]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cba8:	2200      	movs	r2, #0
 800cbaa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 800cbac:	4b11      	ldr	r3, [pc, #68]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cbae:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800cbb2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800cbb4:	4b0f      	ldr	r3, [pc, #60]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cbb6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800cbba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800cbbc:	4b0d      	ldr	r3, [pc, #52]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800cbc2:	4b0c      	ldr	r3, [pc, #48]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800cbc8:	4b0a      	ldr	r3, [pc, #40]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 800cbce:	4b09      	ldr	r3, [pc, #36]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800cbd4:	4b07      	ldr	r3, [pc, #28]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800cbda:	4b06      	ldr	r3, [pc, #24]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800cbe0:	4804      	ldr	r0, [pc, #16]	; (800cbf4 <MX_CAN2_Init+0x64>)
 800cbe2:	f001 ff11 	bl	800ea08 <HAL_CAN_Init>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 800cbec:	f000 fbb0 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800cbf0:	bf00      	nop
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	20000eac 	.word	0x20000eac
 800cbf8:	40006800 	.word	0x40006800

0800cbfc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08c      	sub	sp, #48	; 0x30
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc04:	f107 031c 	add.w	r3, r7, #28
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]
 800cc0c:	605a      	str	r2, [r3, #4]
 800cc0e:	609a      	str	r2, [r3, #8]
 800cc10:	60da      	str	r2, [r3, #12]
 800cc12:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a5a      	ldr	r2, [pc, #360]	; (800cd84 <HAL_CAN_MspInit+0x188>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d14d      	bne.n	800ccba <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800cc1e:	4b5a      	ldr	r3, [pc, #360]	; (800cd88 <HAL_CAN_MspInit+0x18c>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	3301      	adds	r3, #1
 800cc24:	4a58      	ldr	r2, [pc, #352]	; (800cd88 <HAL_CAN_MspInit+0x18c>)
 800cc26:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800cc28:	4b57      	ldr	r3, [pc, #348]	; (800cd88 <HAL_CAN_MspInit+0x18c>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d10d      	bne.n	800cc4c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800cc30:	2300      	movs	r3, #0
 800cc32:	61bb      	str	r3, [r7, #24]
 800cc34:	4b55      	ldr	r3, [pc, #340]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800cc36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc38:	4a54      	ldr	r2, [pc, #336]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800cc3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cc3e:	6413      	str	r3, [r2, #64]	; 0x40
 800cc40:	4b52      	ldr	r3, [pc, #328]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800cc42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc48:	61bb      	str	r3, [r7, #24]
 800cc4a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	617b      	str	r3, [r7, #20]
 800cc50:	4b4e      	ldr	r3, [pc, #312]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800cc52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc54:	4a4d      	ldr	r2, [pc, #308]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800cc56:	f043 0308 	orr.w	r3, r3, #8
 800cc5a:	6313      	str	r3, [r2, #48]	; 0x30
 800cc5c:	4b4b      	ldr	r3, [pc, #300]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800cc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc60:	f003 0308 	and.w	r3, r3, #8
 800cc64:	617b      	str	r3, [r7, #20]
 800cc66:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800cc68:	2303      	movs	r3, #3
 800cc6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc6c:	2302      	movs	r3, #2
 800cc6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc70:	2300      	movs	r3, #0
 800cc72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc74:	2303      	movs	r3, #3
 800cc76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800cc78:	2309      	movs	r3, #9
 800cc7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc7c:	f107 031c 	add.w	r3, r7, #28
 800cc80:	4619      	mov	r1, r3
 800cc82:	4843      	ldr	r0, [pc, #268]	; (800cd90 <HAL_CAN_MspInit+0x194>)
 800cc84:	f003 f9ca 	bl	801001c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 800cc88:	2200      	movs	r2, #0
 800cc8a:	2105      	movs	r1, #5
 800cc8c:	2013      	movs	r0, #19
 800cc8e:	f002 fe0f 	bl	800f8b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800cc92:	2013      	movs	r0, #19
 800cc94:	f002 fe28 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800cc98:	2200      	movs	r2, #0
 800cc9a:	2105      	movs	r1, #5
 800cc9c:	2014      	movs	r0, #20
 800cc9e:	f002 fe07 	bl	800f8b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800cca2:	2014      	movs	r0, #20
 800cca4:	f002 fe20 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800cca8:	2200      	movs	r2, #0
 800ccaa:	2105      	movs	r1, #5
 800ccac:	2015      	movs	r0, #21
 800ccae:	f002 fdff 	bl	800f8b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800ccb2:	2015      	movs	r0, #21
 800ccb4:	f002 fe18 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 800ccb8:	e05f      	b.n	800cd7a <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	4a35      	ldr	r2, [pc, #212]	; (800cd94 <HAL_CAN_MspInit+0x198>)
 800ccc0:	4293      	cmp	r3, r2
 800ccc2:	d15a      	bne.n	800cd7a <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	613b      	str	r3, [r7, #16]
 800ccc8:	4b30      	ldr	r3, [pc, #192]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800ccca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cccc:	4a2f      	ldr	r2, [pc, #188]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800ccce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ccd2:	6413      	str	r3, [r2, #64]	; 0x40
 800ccd4:	4b2d      	ldr	r3, [pc, #180]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800ccd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ccdc:	613b      	str	r3, [r7, #16]
 800ccde:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800cce0:	4b29      	ldr	r3, [pc, #164]	; (800cd88 <HAL_CAN_MspInit+0x18c>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	3301      	adds	r3, #1
 800cce6:	4a28      	ldr	r2, [pc, #160]	; (800cd88 <HAL_CAN_MspInit+0x18c>)
 800cce8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800ccea:	4b27      	ldr	r3, [pc, #156]	; (800cd88 <HAL_CAN_MspInit+0x18c>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d10d      	bne.n	800cd0e <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	4b25      	ldr	r3, [pc, #148]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800ccf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccfa:	4a24      	ldr	r2, [pc, #144]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800ccfc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cd00:	6413      	str	r3, [r2, #64]	; 0x40
 800cd02:	4b22      	ldr	r3, [pc, #136]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800cd04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd0a:	60fb      	str	r3, [r7, #12]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60bb      	str	r3, [r7, #8]
 800cd12:	4b1e      	ldr	r3, [pc, #120]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800cd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd16:	4a1d      	ldr	r2, [pc, #116]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800cd18:	f043 0302 	orr.w	r3, r3, #2
 800cd1c:	6313      	str	r3, [r2, #48]	; 0x30
 800cd1e:	4b1b      	ldr	r3, [pc, #108]	; (800cd8c <HAL_CAN_MspInit+0x190>)
 800cd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd22:	f003 0302 	and.w	r3, r3, #2
 800cd26:	60bb      	str	r3, [r7, #8]
 800cd28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800cd2a:	2360      	movs	r3, #96	; 0x60
 800cd2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd2e:	2302      	movs	r3, #2
 800cd30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd36:	2303      	movs	r3, #3
 800cd38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800cd3a:	2309      	movs	r3, #9
 800cd3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd3e:	f107 031c 	add.w	r3, r7, #28
 800cd42:	4619      	mov	r1, r3
 800cd44:	4814      	ldr	r0, [pc, #80]	; (800cd98 <HAL_CAN_MspInit+0x19c>)
 800cd46:	f003 f969 	bl	801001c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	2105      	movs	r1, #5
 800cd4e:	203f      	movs	r0, #63	; 0x3f
 800cd50:	f002 fdae 	bl	800f8b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800cd54:	203f      	movs	r0, #63	; 0x3f
 800cd56:	f002 fdc7 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	2105      	movs	r1, #5
 800cd5e:	2040      	movs	r0, #64	; 0x40
 800cd60:	f002 fda6 	bl	800f8b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800cd64:	2040      	movs	r0, #64	; 0x40
 800cd66:	f002 fdbf 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	2105      	movs	r1, #5
 800cd6e:	2041      	movs	r0, #65	; 0x41
 800cd70:	f002 fd9e 	bl	800f8b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800cd74:	2041      	movs	r0, #65	; 0x41
 800cd76:	f002 fdb7 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
}
 800cd7a:	bf00      	nop
 800cd7c:	3730      	adds	r7, #48	; 0x30
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	40006400 	.word	0x40006400
 800cd88:	20000ed4 	.word	0x20000ed4
 800cd8c:	40023800 	.word	0x40023800
 800cd90:	40020c00 	.word	0x40020c00
 800cd94:	40006800 	.word	0x40006800
 800cd98:	40020400 	.word	0x40020400

0800cd9c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800cda0:	4b06      	ldr	r3, [pc, #24]	; (800cdbc <MX_CRC_Init+0x20>)
 800cda2:	4a07      	ldr	r2, [pc, #28]	; (800cdc0 <MX_CRC_Init+0x24>)
 800cda4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800cda6:	4805      	ldr	r0, [pc, #20]	; (800cdbc <MX_CRC_Init+0x20>)
 800cda8:	f002 fdac 	bl	800f904 <HAL_CRC_Init>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d001      	beq.n	800cdb6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800cdb2:	f000 facd 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800cdb6:	bf00      	nop
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000ed8 	.word	0x20000ed8
 800cdc0:	40023000 	.word	0x40023000

0800cdc4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	4a0b      	ldr	r2, [pc, #44]	; (800ce00 <HAL_CRC_MspInit+0x3c>)
 800cdd2:	4293      	cmp	r3, r2
 800cdd4:	d10d      	bne.n	800cdf2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	60fb      	str	r3, [r7, #12]
 800cdda:	4b0a      	ldr	r3, [pc, #40]	; (800ce04 <HAL_CRC_MspInit+0x40>)
 800cddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdde:	4a09      	ldr	r2, [pc, #36]	; (800ce04 <HAL_CRC_MspInit+0x40>)
 800cde0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800cde4:	6313      	str	r3, [r2, #48]	; 0x30
 800cde6:	4b07      	ldr	r3, [pc, #28]	; (800ce04 <HAL_CRC_MspInit+0x40>)
 800cde8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cdee:	60fb      	str	r3, [r7, #12]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 800cdf2:	bf00      	nop
 800cdf4:	3714      	adds	r7, #20
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfc:	4770      	bx	lr
 800cdfe:	bf00      	nop
 800ce00:	40023000 	.word	0x40023000
 800ce04:	40023800 	.word	0x40023800

0800ce08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800ce0e:	2300      	movs	r3, #0
 800ce10:	607b      	str	r3, [r7, #4]
 800ce12:	4b18      	ldr	r3, [pc, #96]	; (800ce74 <MX_DMA_Init+0x6c>)
 800ce14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce16:	4a17      	ldr	r2, [pc, #92]	; (800ce74 <MX_DMA_Init+0x6c>)
 800ce18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800ce1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ce1e:	4b15      	ldr	r3, [pc, #84]	; (800ce74 <MX_DMA_Init+0x6c>)
 800ce20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ce26:	607b      	str	r3, [r7, #4]
 800ce28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	2105      	movs	r1, #5
 800ce2e:	2038      	movs	r0, #56	; 0x38
 800ce30:	f002 fd3e 	bl	800f8b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800ce34:	2038      	movs	r0, #56	; 0x38
 800ce36:	f002 fd57 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	2105      	movs	r1, #5
 800ce3e:	203a      	movs	r0, #58	; 0x3a
 800ce40:	f002 fd36 	bl	800f8b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800ce44:	203a      	movs	r0, #58	; 0x3a
 800ce46:	f002 fd4f 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	2105      	movs	r1, #5
 800ce4e:	2044      	movs	r0, #68	; 0x44
 800ce50:	f002 fd2e 	bl	800f8b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800ce54:	2044      	movs	r0, #68	; 0x44
 800ce56:	f002 fd47 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2105      	movs	r1, #5
 800ce5e:	2046      	movs	r0, #70	; 0x46
 800ce60:	f002 fd26 	bl	800f8b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800ce64:	2046      	movs	r0, #70	; 0x46
 800ce66:	f002 fd3f 	bl	800f8e8 <HAL_NVIC_EnableIRQ>

}
 800ce6a:	bf00      	nop
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	40023800 	.word	0x40023800

0800ce78 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	af00      	add	r7, sp, #0

}
 800ce7c:	bf00      	nop
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce84:	4770      	bx	lr

0800ce86 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800ce86:	b480      	push	{r7}
 800ce88:	af00      	add	r7, sp, #0
return 0;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800ce96:	b480      	push	{r7}
 800ce98:	b083      	sub	sp, #12
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	6078      	str	r0, [r7, #4]
 800ce9e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800cea0:	bf00      	nop
 800cea2:	370c      	adds	r7, #12
 800cea4:	46bd      	mov	sp, r7
 800cea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceaa:	4770      	bx	lr

0800ceac <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800ceb0:	bf00      	nop
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb8:	4770      	bx	lr
	...

0800cebc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800cebc:	b580      	push	{r7, lr}
 800cebe:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 800cec0:	4a18      	ldr	r2, [pc, #96]	; (800cf24 <MX_FREERTOS_Init+0x68>)
 800cec2:	2101      	movs	r1, #1
 800cec4:	2010      	movs	r0, #16
 800cec6:	f008 fb0b 	bl	80154e0 <osMessageQueueNew>
 800ceca:	4603      	mov	r3, r0
 800cecc:	4a16      	ldr	r2, [pc, #88]	; (800cf28 <MX_FREERTOS_Init+0x6c>)
 800cece:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800ced0:	4a16      	ldr	r2, [pc, #88]	; (800cf2c <MX_FREERTOS_Init+0x70>)
 800ced2:	2100      	movs	r1, #0
 800ced4:	4816      	ldr	r0, [pc, #88]	; (800cf30 <MX_FREERTOS_Init+0x74>)
 800ced6:	f008 f809 	bl	8014eec <osThreadNew>
 800ceda:	4603      	mov	r3, r0
 800cedc:	4a15      	ldr	r2, [pc, #84]	; (800cf34 <MX_FREERTOS_Init+0x78>)
 800cede:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 800cee0:	4a15      	ldr	r2, [pc, #84]	; (800cf38 <MX_FREERTOS_Init+0x7c>)
 800cee2:	2100      	movs	r1, #0
 800cee4:	4815      	ldr	r0, [pc, #84]	; (800cf3c <MX_FREERTOS_Init+0x80>)
 800cee6:	f008 f801 	bl	8014eec <osThreadNew>
 800ceea:	4603      	mov	r3, r0
 800ceec:	4a14      	ldr	r2, [pc, #80]	; (800cf40 <MX_FREERTOS_Init+0x84>)
 800ceee:	6013      	str	r3, [r2, #0]

  /* creation of fms */
  fmsHandle = osThreadNew(state_maschine_entry, NULL, &fms_attributes);
 800cef0:	4a14      	ldr	r2, [pc, #80]	; (800cf44 <MX_FREERTOS_Init+0x88>)
 800cef2:	2100      	movs	r1, #0
 800cef4:	4814      	ldr	r0, [pc, #80]	; (800cf48 <MX_FREERTOS_Init+0x8c>)
 800cef6:	f007 fff9 	bl	8014eec <osThreadNew>
 800cefa:	4603      	mov	r3, r0
 800cefc:	4a13      	ldr	r2, [pc, #76]	; (800cf4c <MX_FREERTOS_Init+0x90>)
 800cefe:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 800cf00:	4a13      	ldr	r2, [pc, #76]	; (800cf50 <MX_FREERTOS_Init+0x94>)
 800cf02:	2100      	movs	r1, #0
 800cf04:	4813      	ldr	r0, [pc, #76]	; (800cf54 <MX_FREERTOS_Init+0x98>)
 800cf06:	f007 fff1 	bl	8014eec <osThreadNew>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	4a12      	ldr	r2, [pc, #72]	; (800cf58 <MX_FREERTOS_Init+0x9c>)
 800cf0e:	6013      	str	r3, [r2, #0]

  /* creation of info_task */
  info_taskHandle = osThreadNew(microcontroller_info_entry, NULL, &info_task_attributes);
 800cf10:	4a12      	ldr	r2, [pc, #72]	; (800cf5c <MX_FREERTOS_Init+0xa0>)
 800cf12:	2100      	movs	r1, #0
 800cf14:	4812      	ldr	r0, [pc, #72]	; (800cf60 <MX_FREERTOS_Init+0xa4>)
 800cf16:	f007 ffe9 	bl	8014eec <osThreadNew>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	4a11      	ldr	r2, [pc, #68]	; (800cf64 <MX_FREERTOS_Init+0xa8>)
 800cf1e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800cf20:	bf00      	nop
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	0801cc68 	.word	0x0801cc68
 800cf28:	200011b4 	.word	0x200011b4
 800cf2c:	0801cbb4 	.word	0x0801cbb4
 800cf30:	0800cf69 	.word	0x0800cf69
 800cf34:	20000ee0 	.word	0x20000ee0
 800cf38:	0801cbd8 	.word	0x0801cbd8
 800cf3c:	08002259 	.word	0x08002259
 800cf40:	200011a4 	.word	0x200011a4
 800cf44:	0801cbfc 	.word	0x0801cbfc
 800cf48:	0800c6b9 	.word	0x0800c6b9
 800cf4c:	200011a8 	.word	0x200011a8
 800cf50:	0801cc20 	.word	0x0801cc20
 800cf54:	0800b4a1 	.word	0x0800b4a1
 800cf58:	200011ac 	.word	0x200011ac
 800cf5c:	0801cc44 	.word	0x0801cc44
 800cf60:	0800bc49 	.word	0x0800bc49
 800cf64:	200011b0 	.word	0x200011b0

0800cf68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	b082      	sub	sp, #8
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800cf70:	2001      	movs	r0, #1
 800cf72:	f008 f84d 	bl	8015010 <osDelay>
 800cf76:	e7fb      	b.n	800cf70 <StartDefaultTask+0x8>

0800cf78 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b08a      	sub	sp, #40	; 0x28
 800cf7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf7e:	f107 0314 	add.w	r3, r7, #20
 800cf82:	2200      	movs	r2, #0
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	605a      	str	r2, [r3, #4]
 800cf88:	609a      	str	r2, [r3, #8]
 800cf8a:	60da      	str	r2, [r3, #12]
 800cf8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800cf8e:	2300      	movs	r3, #0
 800cf90:	613b      	str	r3, [r7, #16]
 800cf92:	4b58      	ldr	r3, [pc, #352]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cf94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf96:	4a57      	ldr	r2, [pc, #348]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cf98:	f043 0304 	orr.w	r3, r3, #4
 800cf9c:	6313      	str	r3, [r2, #48]	; 0x30
 800cf9e:	4b55      	ldr	r3, [pc, #340]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cfa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfa2:	f003 0304 	and.w	r3, r3, #4
 800cfa6:	613b      	str	r3, [r7, #16]
 800cfa8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800cfaa:	2300      	movs	r3, #0
 800cfac:	60fb      	str	r3, [r7, #12]
 800cfae:	4b51      	ldr	r3, [pc, #324]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cfb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfb2:	4a50      	ldr	r2, [pc, #320]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cfb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfb8:	6313      	str	r3, [r2, #48]	; 0x30
 800cfba:	4b4e      	ldr	r3, [pc, #312]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfc2:	60fb      	str	r3, [r7, #12]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	60bb      	str	r3, [r7, #8]
 800cfca:	4b4a      	ldr	r3, [pc, #296]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cfcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfce:	4a49      	ldr	r2, [pc, #292]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cfd0:	f043 0301 	orr.w	r3, r3, #1
 800cfd4:	6313      	str	r3, [r2, #48]	; 0x30
 800cfd6:	4b47      	ldr	r3, [pc, #284]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfda:	f003 0301 	and.w	r3, r3, #1
 800cfde:	60bb      	str	r3, [r7, #8]
 800cfe0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	607b      	str	r3, [r7, #4]
 800cfe6:	4b43      	ldr	r3, [pc, #268]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfea:	4a42      	ldr	r2, [pc, #264]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cfec:	f043 0302 	orr.w	r3, r3, #2
 800cff0:	6313      	str	r3, [r2, #48]	; 0x30
 800cff2:	4b40      	ldr	r3, [pc, #256]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800cff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff6:	f003 0302 	and.w	r3, r3, #2
 800cffa:	607b      	str	r3, [r7, #4]
 800cffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800cffe:	2300      	movs	r3, #0
 800d000:	603b      	str	r3, [r7, #0]
 800d002:	4b3c      	ldr	r3, [pc, #240]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800d004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d006:	4a3b      	ldr	r2, [pc, #236]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800d008:	f043 0308 	orr.w	r3, r3, #8
 800d00c:	6313      	str	r3, [r2, #48]	; 0x30
 800d00e:	4b39      	ldr	r3, [pc, #228]	; (800d0f4 <MX_GPIO_Init+0x17c>)
 800d010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d012:	f003 0308 	and.w	r3, r3, #8
 800d016:	603b      	str	r3, [r7, #0]
 800d018:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 800d01a:	2200      	movs	r2, #0
 800d01c:	f641 4102 	movw	r1, #7170	; 0x1c02
 800d020:	4835      	ldr	r0, [pc, #212]	; (800d0f8 <MX_GPIO_Init+0x180>)
 800d022:	f003 f9af 	bl	8010384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN4_GPIO_Port, DIN4_Pin, GPIO_PIN_SET);
 800d026:	2201      	movs	r2, #1
 800d028:	2180      	movs	r1, #128	; 0x80
 800d02a:	4833      	ldr	r0, [pc, #204]	; (800d0f8 <MX_GPIO_Init+0x180>)
 800d02c:	f003 f9aa 	bl	8010384 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800d030:	2305      	movs	r3, #5
 800d032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800d034:	2303      	movs	r3, #3
 800d036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d038:	2300      	movs	r3, #0
 800d03a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d03c:	f107 0314 	add.w	r3, r7, #20
 800d040:	4619      	mov	r1, r3
 800d042:	482e      	ldr	r0, [pc, #184]	; (800d0fc <MX_GPIO_Init+0x184>)
 800d044:	f002 ffea 	bl	801001c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIN1_Pin|DIN2_Pin;
 800d048:	230a      	movs	r3, #10
 800d04a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800d04c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800d050:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d052:	2300      	movs	r3, #0
 800d054:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d056:	f107 0314 	add.w	r3, r7, #20
 800d05a:	4619      	mov	r1, r3
 800d05c:	4827      	ldr	r0, [pc, #156]	; (800d0fc <MX_GPIO_Init+0x184>)
 800d05e:	f002 ffdd 	bl	801001c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 800d062:	f641 4302 	movw	r3, #7170	; 0x1c02
 800d066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d068:	2301      	movs	r3, #1
 800d06a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d06c:	2300      	movs	r3, #0
 800d06e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d070:	2300      	movs	r3, #0
 800d072:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d074:	f107 0314 	add.w	r3, r7, #20
 800d078:	4619      	mov	r1, r3
 800d07a:	481f      	ldr	r0, [pc, #124]	; (800d0f8 <MX_GPIO_Init+0x180>)
 800d07c:	f002 ffce 	bl	801001c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 800d080:	2318      	movs	r3, #24
 800d082:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d084:	2300      	movs	r3, #0
 800d086:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d088:	2300      	movs	r3, #0
 800d08a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d08c:	f107 0314 	add.w	r3, r7, #20
 800d090:	4619      	mov	r1, r3
 800d092:	481b      	ldr	r0, [pc, #108]	; (800d100 <MX_GPIO_Init+0x188>)
 800d094:	f002 ffc2 	bl	801001c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN3_Pin;
 800d098:	2310      	movs	r3, #16
 800d09a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d09c:	2300      	movs	r3, #0
 800d09e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN3_GPIO_Port, &GPIO_InitStruct);
 800d0a4:	f107 0314 	add.w	r3, r7, #20
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4813      	ldr	r0, [pc, #76]	; (800d0f8 <MX_GPIO_Init+0x180>)
 800d0ac:	f002 ffb6 	bl	801001c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN4_Pin;
 800d0b0:	2380      	movs	r3, #128	; 0x80
 800d0b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800d0b4:	2301      	movs	r3, #1
 800d0b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800d0b8:	2302      	movs	r3, #2
 800d0ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN4_GPIO_Port, &GPIO_InitStruct);
 800d0c0:	f107 0314 	add.w	r3, r7, #20
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	480c      	ldr	r0, [pc, #48]	; (800d0f8 <MX_GPIO_Init+0x180>)
 800d0c8:	f002 ffa8 	bl	801001c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	2105      	movs	r1, #5
 800d0d0:	2007      	movs	r0, #7
 800d0d2:	f002 fbed 	bl	800f8b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800d0d6:	2007      	movs	r0, #7
 800d0d8:	f002 fc06 	bl	800f8e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2105      	movs	r1, #5
 800d0e0:	2009      	movs	r0, #9
 800d0e2:	f002 fbe5 	bl	800f8b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800d0e6:	2009      	movs	r0, #9
 800d0e8:	f002 fbfe 	bl	800f8e8 <HAL_NVIC_EnableIRQ>

}
 800d0ec:	bf00      	nop
 800d0ee:	3728      	adds	r7, #40	; 0x28
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	40023800 	.word	0x40023800
 800d0f8:	40020400 	.word	0x40020400
 800d0fc:	40020800 	.word	0x40020800
 800d100:	40020c00 	.word	0x40020c00

0800d104 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800d108:	4b12      	ldr	r3, [pc, #72]	; (800d154 <MX_I2C1_Init+0x50>)
 800d10a:	4a13      	ldr	r2, [pc, #76]	; (800d158 <MX_I2C1_Init+0x54>)
 800d10c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800d10e:	4b11      	ldr	r3, [pc, #68]	; (800d154 <MX_I2C1_Init+0x50>)
 800d110:	4a12      	ldr	r2, [pc, #72]	; (800d15c <MX_I2C1_Init+0x58>)
 800d112:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800d114:	4b0f      	ldr	r3, [pc, #60]	; (800d154 <MX_I2C1_Init+0x50>)
 800d116:	2200      	movs	r2, #0
 800d118:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800d11a:	4b0e      	ldr	r3, [pc, #56]	; (800d154 <MX_I2C1_Init+0x50>)
 800d11c:	2200      	movs	r2, #0
 800d11e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800d120:	4b0c      	ldr	r3, [pc, #48]	; (800d154 <MX_I2C1_Init+0x50>)
 800d122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d126:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800d128:	4b0a      	ldr	r3, [pc, #40]	; (800d154 <MX_I2C1_Init+0x50>)
 800d12a:	2200      	movs	r2, #0
 800d12c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800d12e:	4b09      	ldr	r3, [pc, #36]	; (800d154 <MX_I2C1_Init+0x50>)
 800d130:	2200      	movs	r2, #0
 800d132:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800d134:	4b07      	ldr	r3, [pc, #28]	; (800d154 <MX_I2C1_Init+0x50>)
 800d136:	2200      	movs	r2, #0
 800d138:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800d13a:	4b06      	ldr	r3, [pc, #24]	; (800d154 <MX_I2C1_Init+0x50>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800d140:	4804      	ldr	r0, [pc, #16]	; (800d154 <MX_I2C1_Init+0x50>)
 800d142:	f003 f951 	bl	80103e8 <HAL_I2C_Init>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d001      	beq.n	800d150 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800d14c:	f000 f900 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800d150:	bf00      	nop
 800d152:	bd80      	pop	{r7, pc}
 800d154:	200011b8 	.word	0x200011b8
 800d158:	40005400 	.word	0x40005400
 800d15c:	000186a0 	.word	0x000186a0

0800d160 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b08a      	sub	sp, #40	; 0x28
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d168:	f107 0314 	add.w	r3, r7, #20
 800d16c:	2200      	movs	r2, #0
 800d16e:	601a      	str	r2, [r3, #0]
 800d170:	605a      	str	r2, [r3, #4]
 800d172:	609a      	str	r2, [r3, #8]
 800d174:	60da      	str	r2, [r3, #12]
 800d176:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4a19      	ldr	r2, [pc, #100]	; (800d1e4 <HAL_I2C_MspInit+0x84>)
 800d17e:	4293      	cmp	r3, r2
 800d180:	d12c      	bne.n	800d1dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d182:	2300      	movs	r3, #0
 800d184:	613b      	str	r3, [r7, #16]
 800d186:	4b18      	ldr	r3, [pc, #96]	; (800d1e8 <HAL_I2C_MspInit+0x88>)
 800d188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d18a:	4a17      	ldr	r2, [pc, #92]	; (800d1e8 <HAL_I2C_MspInit+0x88>)
 800d18c:	f043 0302 	orr.w	r3, r3, #2
 800d190:	6313      	str	r3, [r2, #48]	; 0x30
 800d192:	4b15      	ldr	r3, [pc, #84]	; (800d1e8 <HAL_I2C_MspInit+0x88>)
 800d194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d196:	f003 0302 	and.w	r3, r3, #2
 800d19a:	613b      	str	r3, [r7, #16]
 800d19c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 800d19e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d1a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800d1a4:	2312      	movs	r3, #18
 800d1a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800d1b0:	2304      	movs	r3, #4
 800d1b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d1b4:	f107 0314 	add.w	r3, r7, #20
 800d1b8:	4619      	mov	r1, r3
 800d1ba:	480c      	ldr	r0, [pc, #48]	; (800d1ec <HAL_I2C_MspInit+0x8c>)
 800d1bc:	f002 ff2e 	bl	801001c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	60fb      	str	r3, [r7, #12]
 800d1c4:	4b08      	ldr	r3, [pc, #32]	; (800d1e8 <HAL_I2C_MspInit+0x88>)
 800d1c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c8:	4a07      	ldr	r2, [pc, #28]	; (800d1e8 <HAL_I2C_MspInit+0x88>)
 800d1ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1ce:	6413      	str	r3, [r2, #64]	; 0x40
 800d1d0:	4b05      	ldr	r3, [pc, #20]	; (800d1e8 <HAL_I2C_MspInit+0x88>)
 800d1d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d1d8:	60fb      	str	r3, [r7, #12]
 800d1da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800d1dc:	bf00      	nop
 800d1de:	3728      	adds	r7, #40	; 0x28
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	bd80      	pop	{r7, pc}
 800d1e4:	40005400 	.word	0x40005400
 800d1e8:	40023800 	.word	0x40023800
 800d1ec:	40020400 	.word	0x40020400

0800d1f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800d1f4:	f000 ffc8 	bl	800e188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800d1f8:	f000 f82c 	bl	800d254 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800d1fc:	f7ff febc 	bl	800cf78 <MX_GPIO_Init>
  MX_DMA_Init();
 800d200:	f7ff fe02 	bl	800ce08 <MX_DMA_Init>
  MX_ADC1_Init();
 800d204:	f7ff fa66 	bl	800c6d4 <MX_ADC1_Init>
  MX_CAN1_Init();
 800d208:	f7ff fc8c 	bl	800cb24 <MX_CAN1_Init>
  MX_CAN2_Init();
 800d20c:	f7ff fcc0 	bl	800cb90 <MX_CAN2_Init>
  MX_CRC_Init();
 800d210:	f7ff fdc4 	bl	800cd9c <MX_CRC_Init>
  MX_RNG_Init();
 800d214:	f000 f8a2 	bl	800d35c <MX_RNG_Init>
  MX_USART2_UART_Init();
 800d218:	f000 fe7e 	bl	800df18 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 800d21c:	f000 fc0c 	bl	800da38 <MX_TIM4_Init>
  MX_ADC2_Init();
 800d220:	f7ff fad4 	bl	800c7cc <MX_ADC2_Init>
  MX_I2C1_Init();
 800d224:	f7ff ff6e 	bl	800d104 <MX_I2C1_Init>
  MX_SPI2_Init();
 800d228:	f000 f8ce 	bl	800d3c8 <MX_SPI2_Init>
  MX_TIM5_Init();
 800d22c:	f000 fc90 	bl	800db50 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800d230:	f000 fe48 	bl	800dec4 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 800d234:	f000 fd1a 	bl	800dc6c <MX_TIM14_Init>
  MX_TIM2_Init();
 800d238:	f000 fb62 	bl	800d900 <MX_TIM2_Init>
  MX_TIM9_Init();
 800d23c:	f000 fcdc 	bl	800dbf8 <MX_TIM9_Init>
  MX_TIM3_Init();
 800d240:	f000 fbac 	bl	800d99c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800d244:	f007 fe08 	bl	8014e58 <osKernelInitialize>
  MX_FREERTOS_Init();
 800d248:	f7ff fe38 	bl	800cebc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800d24c:	f007 fe28 	bl	8014ea0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800d250:	e7fe      	b.n	800d250 <main+0x60>
	...

0800d254 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b094      	sub	sp, #80	; 0x50
 800d258:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800d25a:	f107 0320 	add.w	r3, r7, #32
 800d25e:	2230      	movs	r2, #48	; 0x30
 800d260:	2100      	movs	r1, #0
 800d262:	4618      	mov	r0, r3
 800d264:	f00c fcf0 	bl	8019c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800d268:	f107 030c 	add.w	r3, r7, #12
 800d26c:	2200      	movs	r2, #0
 800d26e:	601a      	str	r2, [r3, #0]
 800d270:	605a      	str	r2, [r3, #4]
 800d272:	609a      	str	r2, [r3, #8]
 800d274:	60da      	str	r2, [r3, #12]
 800d276:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800d278:	2300      	movs	r3, #0
 800d27a:	60bb      	str	r3, [r7, #8]
 800d27c:	4b28      	ldr	r3, [pc, #160]	; (800d320 <SystemClock_Config+0xcc>)
 800d27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d280:	4a27      	ldr	r2, [pc, #156]	; (800d320 <SystemClock_Config+0xcc>)
 800d282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d286:	6413      	str	r3, [r2, #64]	; 0x40
 800d288:	4b25      	ldr	r3, [pc, #148]	; (800d320 <SystemClock_Config+0xcc>)
 800d28a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d28c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d290:	60bb      	str	r3, [r7, #8]
 800d292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800d294:	2300      	movs	r3, #0
 800d296:	607b      	str	r3, [r7, #4]
 800d298:	4b22      	ldr	r3, [pc, #136]	; (800d324 <SystemClock_Config+0xd0>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	4a21      	ldr	r2, [pc, #132]	; (800d324 <SystemClock_Config+0xd0>)
 800d29e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d2a2:	6013      	str	r3, [r2, #0]
 800d2a4:	4b1f      	ldr	r3, [pc, #124]	; (800d324 <SystemClock_Config+0xd0>)
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2ac:	607b      	str	r3, [r7, #4]
 800d2ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800d2b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d2b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800d2ba:	2302      	movs	r3, #2
 800d2bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800d2be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800d2c4:	2308      	movs	r3, #8
 800d2c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800d2c8:	23a8      	movs	r3, #168	; 0xa8
 800d2ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800d2cc:	2302      	movs	r3, #2
 800d2ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800d2d0:	2307      	movs	r3, #7
 800d2d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800d2d4:	f107 0320 	add.w	r3, r7, #32
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f003 f9c9 	bl	8010670 <HAL_RCC_OscConfig>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d001      	beq.n	800d2e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800d2e4:	f000 f834 	bl	800d350 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800d2e8:	230f      	movs	r3, #15
 800d2ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800d2ec:	2302      	movs	r3, #2
 800d2ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800d2f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800d2f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800d2fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800d300:	f107 030c 	add.w	r3, r7, #12
 800d304:	2105      	movs	r1, #5
 800d306:	4618      	mov	r0, r3
 800d308:	f003 fc2a 	bl	8010b60 <HAL_RCC_ClockConfig>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d001      	beq.n	800d316 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800d312:	f000 f81d 	bl	800d350 <Error_Handler>
  }
}
 800d316:	bf00      	nop
 800d318:	3750      	adds	r7, #80	; 0x50
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}
 800d31e:	bf00      	nop
 800d320:	40023800 	.word	0x40023800
 800d324:	40007000 	.word	0x40007000

0800d328 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	4a05      	ldr	r2, [pc, #20]	; (800d34c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d101      	bne.n	800d33e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800d33a:	f000 ff47 	bl	800e1cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  PeriodElapsedCallback(htim);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f006 f881 	bl	8013446 <PeriodElapsedCallback>

  /* USER CODE END Callback 1 */
}
 800d344:	bf00      	nop
 800d346:	3708      	adds	r7, #8
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}
 800d34c:	40010000 	.word	0x40010000

0800d350 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800d350:	b480      	push	{r7}
 800d352:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800d354:	b672      	cpsid	i
}
 800d356:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800d358:	e7fe      	b.n	800d358 <Error_Handler+0x8>
	...

0800d35c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800d360:	4b06      	ldr	r3, [pc, #24]	; (800d37c <MX_RNG_Init+0x20>)
 800d362:	4a07      	ldr	r2, [pc, #28]	; (800d380 <MX_RNG_Init+0x24>)
 800d364:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800d366:	4805      	ldr	r0, [pc, #20]	; (800d37c <MX_RNG_Init+0x20>)
 800d368:	f003 fe4a 	bl	8011000 <HAL_RNG_Init>
 800d36c:	4603      	mov	r3, r0
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d001      	beq.n	800d376 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800d372:	f7ff ffed 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800d376:	bf00      	nop
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	2000120c 	.word	0x2000120c
 800d380:	50060800 	.word	0x50060800

0800d384 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800d384:	b480      	push	{r7}
 800d386:	b085      	sub	sp, #20
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a0b      	ldr	r2, [pc, #44]	; (800d3c0 <HAL_RNG_MspInit+0x3c>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d10d      	bne.n	800d3b2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800d396:	2300      	movs	r3, #0
 800d398:	60fb      	str	r3, [r7, #12]
 800d39a:	4b0a      	ldr	r3, [pc, #40]	; (800d3c4 <HAL_RNG_MspInit+0x40>)
 800d39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d39e:	4a09      	ldr	r2, [pc, #36]	; (800d3c4 <HAL_RNG_MspInit+0x40>)
 800d3a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3a4:	6353      	str	r3, [r2, #52]	; 0x34
 800d3a6:	4b07      	ldr	r3, [pc, #28]	; (800d3c4 <HAL_RNG_MspInit+0x40>)
 800d3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3ae:	60fb      	str	r3, [r7, #12]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800d3b2:	bf00      	nop
 800d3b4:	3714      	adds	r7, #20
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	50060800 	.word	0x50060800
 800d3c4:	40023800 	.word	0x40023800

0800d3c8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800d3cc:	4b17      	ldr	r3, [pc, #92]	; (800d42c <MX_SPI2_Init+0x64>)
 800d3ce:	4a18      	ldr	r2, [pc, #96]	; (800d430 <MX_SPI2_Init+0x68>)
 800d3d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800d3d2:	4b16      	ldr	r3, [pc, #88]	; (800d42c <MX_SPI2_Init+0x64>)
 800d3d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d3d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800d3da:	4b14      	ldr	r3, [pc, #80]	; (800d42c <MX_SPI2_Init+0x64>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800d3e0:	4b12      	ldr	r3, [pc, #72]	; (800d42c <MX_SPI2_Init+0x64>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800d3e6:	4b11      	ldr	r3, [pc, #68]	; (800d42c <MX_SPI2_Init+0x64>)
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800d3ec:	4b0f      	ldr	r3, [pc, #60]	; (800d42c <MX_SPI2_Init+0x64>)
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800d3f2:	4b0e      	ldr	r3, [pc, #56]	; (800d42c <MX_SPI2_Init+0x64>)
 800d3f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d3fa:	4b0c      	ldr	r3, [pc, #48]	; (800d42c <MX_SPI2_Init+0x64>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800d400:	4b0a      	ldr	r3, [pc, #40]	; (800d42c <MX_SPI2_Init+0x64>)
 800d402:	2200      	movs	r2, #0
 800d404:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800d406:	4b09      	ldr	r3, [pc, #36]	; (800d42c <MX_SPI2_Init+0x64>)
 800d408:	2200      	movs	r2, #0
 800d40a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d40c:	4b07      	ldr	r3, [pc, #28]	; (800d42c <MX_SPI2_Init+0x64>)
 800d40e:	2200      	movs	r2, #0
 800d410:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800d412:	4b06      	ldr	r3, [pc, #24]	; (800d42c <MX_SPI2_Init+0x64>)
 800d414:	220a      	movs	r2, #10
 800d416:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800d418:	4804      	ldr	r0, [pc, #16]	; (800d42c <MX_SPI2_Init+0x64>)
 800d41a:	f003 fe71 	bl	8011100 <HAL_SPI_Init>
 800d41e:	4603      	mov	r3, r0
 800d420:	2b00      	cmp	r3, #0
 800d422:	d001      	beq.n	800d428 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800d424:	f7ff ff94 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800d428:	bf00      	nop
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	2000121c 	.word	0x2000121c
 800d430:	40003800 	.word	0x40003800

0800d434 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08a      	sub	sp, #40	; 0x28
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d43c:	f107 0314 	add.w	r3, r7, #20
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	605a      	str	r2, [r3, #4]
 800d446:	609a      	str	r2, [r3, #8]
 800d448:	60da      	str	r2, [r3, #12]
 800d44a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a19      	ldr	r2, [pc, #100]	; (800d4b8 <HAL_SPI_MspInit+0x84>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d12c      	bne.n	800d4b0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800d456:	2300      	movs	r3, #0
 800d458:	613b      	str	r3, [r7, #16]
 800d45a:	4b18      	ldr	r3, [pc, #96]	; (800d4bc <HAL_SPI_MspInit+0x88>)
 800d45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45e:	4a17      	ldr	r2, [pc, #92]	; (800d4bc <HAL_SPI_MspInit+0x88>)
 800d460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d464:	6413      	str	r3, [r2, #64]	; 0x40
 800d466:	4b15      	ldr	r3, [pc, #84]	; (800d4bc <HAL_SPI_MspInit+0x88>)
 800d468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d46e:	613b      	str	r3, [r7, #16]
 800d470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d472:	2300      	movs	r3, #0
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	4b11      	ldr	r3, [pc, #68]	; (800d4bc <HAL_SPI_MspInit+0x88>)
 800d478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47a:	4a10      	ldr	r2, [pc, #64]	; (800d4bc <HAL_SPI_MspInit+0x88>)
 800d47c:	f043 0302 	orr.w	r3, r3, #2
 800d480:	6313      	str	r3, [r2, #48]	; 0x30
 800d482:	4b0e      	ldr	r3, [pc, #56]	; (800d4bc <HAL_SPI_MspInit+0x88>)
 800d484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d486:	f003 0302 	and.w	r3, r3, #2
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800d48e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800d492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d494:	2302      	movs	r3, #2
 800d496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d498:	2300      	movs	r3, #0
 800d49a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d49c:	2303      	movs	r3, #3
 800d49e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d4a0:	2305      	movs	r3, #5
 800d4a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d4a4:	f107 0314 	add.w	r3, r7, #20
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4805      	ldr	r0, [pc, #20]	; (800d4c0 <HAL_SPI_MspInit+0x8c>)
 800d4ac:	f002 fdb6 	bl	801001c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800d4b0:	bf00      	nop
 800d4b2:	3728      	adds	r7, #40	; 0x28
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}
 800d4b8:	40003800 	.word	0x40003800
 800d4bc:	40023800 	.word	0x40023800
 800d4c0:	40020400 	.word	0x40020400

0800d4c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	607b      	str	r3, [r7, #4]
 800d4ce:	4b12      	ldr	r3, [pc, #72]	; (800d518 <HAL_MspInit+0x54>)
 800d4d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4d2:	4a11      	ldr	r2, [pc, #68]	; (800d518 <HAL_MspInit+0x54>)
 800d4d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4d8:	6453      	str	r3, [r2, #68]	; 0x44
 800d4da:	4b0f      	ldr	r3, [pc, #60]	; (800d518 <HAL_MspInit+0x54>)
 800d4dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4e2:	607b      	str	r3, [r7, #4]
 800d4e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	603b      	str	r3, [r7, #0]
 800d4ea:	4b0b      	ldr	r3, [pc, #44]	; (800d518 <HAL_MspInit+0x54>)
 800d4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4ee:	4a0a      	ldr	r2, [pc, #40]	; (800d518 <HAL_MspInit+0x54>)
 800d4f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4f4:	6413      	str	r3, [r2, #64]	; 0x40
 800d4f6:	4b08      	ldr	r3, [pc, #32]	; (800d518 <HAL_MspInit+0x54>)
 800d4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d4fe:	603b      	str	r3, [r7, #0]
 800d500:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800d502:	2200      	movs	r2, #0
 800d504:	210f      	movs	r1, #15
 800d506:	f06f 0001 	mvn.w	r0, #1
 800d50a:	f002 f9d1 	bl	800f8b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800d50e:	bf00      	nop
 800d510:	3708      	adds	r7, #8
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}
 800d516:	bf00      	nop
 800d518:	40023800 	.word	0x40023800

0800d51c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b08c      	sub	sp, #48	; 0x30
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800d524:	2300      	movs	r3, #0
 800d526:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800d528:	2300      	movs	r3, #0
 800d52a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800d52c:	2300      	movs	r3, #0
 800d52e:	60bb      	str	r3, [r7, #8]
 800d530:	4b2f      	ldr	r3, [pc, #188]	; (800d5f0 <HAL_InitTick+0xd4>)
 800d532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d534:	4a2e      	ldr	r2, [pc, #184]	; (800d5f0 <HAL_InitTick+0xd4>)
 800d536:	f043 0301 	orr.w	r3, r3, #1
 800d53a:	6453      	str	r3, [r2, #68]	; 0x44
 800d53c:	4b2c      	ldr	r3, [pc, #176]	; (800d5f0 <HAL_InitTick+0xd4>)
 800d53e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	60bb      	str	r3, [r7, #8]
 800d546:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800d548:	f107 020c 	add.w	r2, r7, #12
 800d54c:	f107 0310 	add.w	r3, r7, #16
 800d550:	4611      	mov	r1, r2
 800d552:	4618      	mov	r0, r3
 800d554:	f003 fd22 	bl	8010f9c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800d558:	f003 fd0c 	bl	8010f74 <HAL_RCC_GetPCLK2Freq>
 800d55c:	4603      	mov	r3, r0
 800d55e:	005b      	lsls	r3, r3, #1
 800d560:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800d562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d564:	4a23      	ldr	r2, [pc, #140]	; (800d5f4 <HAL_InitTick+0xd8>)
 800d566:	fba2 2303 	umull	r2, r3, r2, r3
 800d56a:	0c9b      	lsrs	r3, r3, #18
 800d56c:	3b01      	subs	r3, #1
 800d56e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800d570:	4b21      	ldr	r3, [pc, #132]	; (800d5f8 <HAL_InitTick+0xdc>)
 800d572:	4a22      	ldr	r2, [pc, #136]	; (800d5fc <HAL_InitTick+0xe0>)
 800d574:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800d576:	4b20      	ldr	r3, [pc, #128]	; (800d5f8 <HAL_InitTick+0xdc>)
 800d578:	f240 32e7 	movw	r2, #999	; 0x3e7
 800d57c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800d57e:	4a1e      	ldr	r2, [pc, #120]	; (800d5f8 <HAL_InitTick+0xdc>)
 800d580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d582:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800d584:	4b1c      	ldr	r3, [pc, #112]	; (800d5f8 <HAL_InitTick+0xdc>)
 800d586:	2200      	movs	r2, #0
 800d588:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d58a:	4b1b      	ldr	r3, [pc, #108]	; (800d5f8 <HAL_InitTick+0xdc>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d590:	4b19      	ldr	r3, [pc, #100]	; (800d5f8 <HAL_InitTick+0xdc>)
 800d592:	2200      	movs	r2, #0
 800d594:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800d596:	4818      	ldr	r0, [pc, #96]	; (800d5f8 <HAL_InitTick+0xdc>)
 800d598:	f004 fb5a 	bl	8011c50 <HAL_TIM_Base_Init>
 800d59c:	4603      	mov	r3, r0
 800d59e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800d5a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d11b      	bne.n	800d5e2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800d5aa:	4813      	ldr	r0, [pc, #76]	; (800d5f8 <HAL_InitTick+0xdc>)
 800d5ac:	f004 fba0 	bl	8011cf0 <HAL_TIM_Base_Start_IT>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800d5b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d111      	bne.n	800d5e2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800d5be:	2019      	movs	r0, #25
 800d5c0:	f002 f992 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b0f      	cmp	r3, #15
 800d5c8:	d808      	bhi.n	800d5dc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	6879      	ldr	r1, [r7, #4]
 800d5ce:	2019      	movs	r0, #25
 800d5d0:	f002 f96e 	bl	800f8b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d5d4:	4a0a      	ldr	r2, [pc, #40]	; (800d600 <HAL_InitTick+0xe4>)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6013      	str	r3, [r2, #0]
 800d5da:	e002      	b.n	800d5e2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800d5e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3730      	adds	r7, #48	; 0x30
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	40023800 	.word	0x40023800
 800d5f4:	431bde83 	.word	0x431bde83
 800d5f8:	20001274 	.word	0x20001274
 800d5fc:	40010000 	.word	0x40010000
 800d600:	20000024 	.word	0x20000024

0800d604 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d604:	b480      	push	{r7}
 800d606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800d608:	e7fe      	b.n	800d608 <NMI_Handler+0x4>

0800d60a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d60a:	b480      	push	{r7}
 800d60c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d60e:	e7fe      	b.n	800d60e <HardFault_Handler+0x4>

0800d610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d610:	b480      	push	{r7}
 800d612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d614:	e7fe      	b.n	800d614 <MemManage_Handler+0x4>

0800d616 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d616:	b480      	push	{r7}
 800d618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d61a:	e7fe      	b.n	800d61a <BusFault_Handler+0x4>

0800d61c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d61c:	b480      	push	{r7}
 800d61e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d620:	e7fe      	b.n	800d620 <UsageFault_Handler+0x4>

0800d622 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d622:	b480      	push	{r7}
 800d624:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d626:	bf00      	nop
 800d628:	46bd      	mov	sp, r7
 800d62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62e:	4770      	bx	lr

0800d630 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN1_Pin);
 800d634:	2002      	movs	r0, #2
 800d636:	f002 febf 	bl	80103b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800d63a:	bf00      	nop
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 800d642:	2008      	movs	r0, #8
 800d644:	f002 feb8 	bl	80103b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800d648:	bf00      	nop
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800d650:	4802      	ldr	r0, [pc, #8]	; (800d65c <CAN1_TX_IRQHandler+0x10>)
 800d652:	f001 fe41 	bl	800f2d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800d656:	bf00      	nop
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20000e84 	.word	0x20000e84

0800d660 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800d664:	4802      	ldr	r0, [pc, #8]	; (800d670 <CAN1_RX0_IRQHandler+0x10>)
 800d666:	f001 fe37 	bl	800f2d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800d66a:	bf00      	nop
 800d66c:	bd80      	pop	{r7, pc}
 800d66e:	bf00      	nop
 800d670:	20000e84 	.word	0x20000e84

0800d674 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800d678:	4802      	ldr	r0, [pc, #8]	; (800d684 <CAN1_RX1_IRQHandler+0x10>)
 800d67a:	f001 fe2d 	bl	800f2d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800d67e:	bf00      	nop
 800d680:	bd80      	pop	{r7, pc}
 800d682:	bf00      	nop
 800d684:	20000e84 	.word	0x20000e84

0800d688 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800d68c:	4802      	ldr	r0, [pc, #8]	; (800d698 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800d68e:	f004 fc9e 	bl	8011fce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800d692:	bf00      	nop
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	200013e0 	.word	0x200013e0

0800d69c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d6a0:	4802      	ldr	r0, [pc, #8]	; (800d6ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 800d6a2:	f004 fc94 	bl	8011fce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800d6a6:	bf00      	nop
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20001274 	.word	0x20001274

0800d6b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d6b4:	4802      	ldr	r0, [pc, #8]	; (800d6c0 <TIM3_IRQHandler+0x10>)
 800d6b6:	f004 fc8a 	bl	8011fce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800d6ba:	bf00      	nop
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	20001308 	.word	0x20001308

0800d6c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d6c8:	4802      	ldr	r0, [pc, #8]	; (800d6d4 <DMA2_Stream0_IRQHandler+0x10>)
 800d6ca:	f002 fa3d 	bl	800fb48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d6ce:	bf00      	nop
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop
 800d6d4:	20000dc4 	.word	0x20000dc4

0800d6d8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d6dc:	4802      	ldr	r0, [pc, #8]	; (800d6e8 <DMA2_Stream2_IRQHandler+0x10>)
 800d6de:	f002 fa33 	bl	800fb48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800d6e2:	bf00      	nop
 800d6e4:	bd80      	pop	{r7, pc}
 800d6e6:	bf00      	nop
 800d6e8:	20000e24 	.word	0x20000e24

0800d6ec <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800d6f0:	4802      	ldr	r0, [pc, #8]	; (800d6fc <CAN2_TX_IRQHandler+0x10>)
 800d6f2:	f001 fdf1 	bl	800f2d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 800d6f6:	bf00      	nop
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	20000eac 	.word	0x20000eac

0800d700 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800d704:	4802      	ldr	r0, [pc, #8]	; (800d710 <CAN2_RX0_IRQHandler+0x10>)
 800d706:	f001 fde7 	bl	800f2d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800d70a:	bf00      	nop
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	20000eac 	.word	0x20000eac

0800d714 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800d718:	4802      	ldr	r0, [pc, #8]	; (800d724 <CAN2_RX1_IRQHandler+0x10>)
 800d71a:	f001 fddd 	bl	800f2d8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 800d71e:	bf00      	nop
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20000eac 	.word	0x20000eac

0800d728 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800d72c:	4802      	ldr	r0, [pc, #8]	; (800d738 <DMA2_Stream5_IRQHandler+0x10>)
 800d72e:	f002 fa0b 	bl	800fb48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800d732:	bf00      	nop
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	20001558 	.word	0x20001558

0800d73c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800d740:	4802      	ldr	r0, [pc, #8]	; (800d74c <DMA2_Stream7_IRQHandler+0x10>)
 800d742:	f002 fa01 	bl	800fb48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800d746:	bf00      	nop
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	200014f8 	.word	0x200014f8

0800d750 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800d750:	b480      	push	{r7}
 800d752:	af00      	add	r7, sp, #0
  return 1;
 800d754:	2301      	movs	r3, #1
}
 800d756:	4618      	mov	r0, r3
 800d758:	46bd      	mov	sp, r7
 800d75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75e:	4770      	bx	lr

0800d760 <_kill>:

int _kill(int pid, int sig)
{
 800d760:	b580      	push	{r7, lr}
 800d762:	b082      	sub	sp, #8
 800d764:	af00      	add	r7, sp, #0
 800d766:	6078      	str	r0, [r7, #4]
 800d768:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800d76a:	f00c f92b 	bl	80199c4 <__errno>
 800d76e:	4603      	mov	r3, r0
 800d770:	2216      	movs	r2, #22
 800d772:	601a      	str	r2, [r3, #0]
  return -1;
 800d774:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d778:	4618      	mov	r0, r3
 800d77a:	3708      	adds	r7, #8
 800d77c:	46bd      	mov	sp, r7
 800d77e:	bd80      	pop	{r7, pc}

0800d780 <_exit>:

void _exit (int status)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b082      	sub	sp, #8
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800d788:	f04f 31ff 	mov.w	r1, #4294967295
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f7ff ffe7 	bl	800d760 <_kill>
  while (1) {}    /* Make sure we hang here */
 800d792:	e7fe      	b.n	800d792 <_exit+0x12>

0800d794 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b086      	sub	sp, #24
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d7a0:	2300      	movs	r3, #0
 800d7a2:	617b      	str	r3, [r7, #20]
 800d7a4:	e00a      	b.n	800d7bc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800d7a6:	f3af 8000 	nop.w
 800d7aa:	4601      	mov	r1, r0
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	1c5a      	adds	r2, r3, #1
 800d7b0:	60ba      	str	r2, [r7, #8]
 800d7b2:	b2ca      	uxtb	r2, r1
 800d7b4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	617b      	str	r3, [r7, #20]
 800d7bc:	697a      	ldr	r2, [r7, #20]
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	dbf0      	blt.n	800d7a6 <_read+0x12>
  }

  return len;
 800d7c4:	687b      	ldr	r3, [r7, #4]
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3718      	adds	r7, #24
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}

0800d7ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800d7ce:	b580      	push	{r7, lr}
 800d7d0:	b086      	sub	sp, #24
 800d7d2:	af00      	add	r7, sp, #0
 800d7d4:	60f8      	str	r0, [r7, #12]
 800d7d6:	60b9      	str	r1, [r7, #8]
 800d7d8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d7da:	2300      	movs	r3, #0
 800d7dc:	617b      	str	r3, [r7, #20]
 800d7de:	e009      	b.n	800d7f4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	1c5a      	adds	r2, r3, #1
 800d7e4:	60ba      	str	r2, [r7, #8]
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	697a      	ldr	r2, [r7, #20]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	dbf1      	blt.n	800d7e0 <_write+0x12>
  }
  return len;
 800d7fc:	687b      	ldr	r3, [r7, #4]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3718      	adds	r7, #24
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <_close>:

int _close(int file)
{
 800d806:	b480      	push	{r7}
 800d808:	b083      	sub	sp, #12
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800d80e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d812:	4618      	mov	r0, r3
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800d81e:	b480      	push	{r7}
 800d820:	b083      	sub	sp, #12
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
 800d826:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d82e:	605a      	str	r2, [r3, #4]
  return 0;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	370c      	adds	r7, #12
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr

0800d83e <_isatty>:

int _isatty(int file)
{
 800d83e:	b480      	push	{r7}
 800d840:	b083      	sub	sp, #12
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800d846:	2301      	movs	r3, #1
}
 800d848:	4618      	mov	r0, r3
 800d84a:	370c      	adds	r7, #12
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800d854:	b480      	push	{r7}
 800d856:	b085      	sub	sp, #20
 800d858:	af00      	add	r7, sp, #0
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800d860:	2300      	movs	r3, #0
}
 800d862:	4618      	mov	r0, r3
 800d864:	3714      	adds	r7, #20
 800d866:	46bd      	mov	sp, r7
 800d868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d86c:	4770      	bx	lr
	...

0800d870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b086      	sub	sp, #24
 800d874:	af00      	add	r7, sp, #0
 800d876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800d878:	4a14      	ldr	r2, [pc, #80]	; (800d8cc <_sbrk+0x5c>)
 800d87a:	4b15      	ldr	r3, [pc, #84]	; (800d8d0 <_sbrk+0x60>)
 800d87c:	1ad3      	subs	r3, r2, r3
 800d87e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800d880:	697b      	ldr	r3, [r7, #20]
 800d882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800d884:	4b13      	ldr	r3, [pc, #76]	; (800d8d4 <_sbrk+0x64>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d102      	bne.n	800d892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800d88c:	4b11      	ldr	r3, [pc, #68]	; (800d8d4 <_sbrk+0x64>)
 800d88e:	4a12      	ldr	r2, [pc, #72]	; (800d8d8 <_sbrk+0x68>)
 800d890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800d892:	4b10      	ldr	r3, [pc, #64]	; (800d8d4 <_sbrk+0x64>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	4413      	add	r3, r2
 800d89a:	693a      	ldr	r2, [r7, #16]
 800d89c:	429a      	cmp	r2, r3
 800d89e:	d207      	bcs.n	800d8b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800d8a0:	f00c f890 	bl	80199c4 <__errno>
 800d8a4:	4603      	mov	r3, r0
 800d8a6:	220c      	movs	r2, #12
 800d8a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800d8aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d8ae:	e009      	b.n	800d8c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800d8b0:	4b08      	ldr	r3, [pc, #32]	; (800d8d4 <_sbrk+0x64>)
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800d8b6:	4b07      	ldr	r3, [pc, #28]	; (800d8d4 <_sbrk+0x64>)
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4413      	add	r3, r2
 800d8be:	4a05      	ldr	r2, [pc, #20]	; (800d8d4 <_sbrk+0x64>)
 800d8c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3718      	adds	r7, #24
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}
 800d8cc:	20020000 	.word	0x20020000
 800d8d0:	00000800 	.word	0x00000800
 800d8d4:	200012bc 	.word	0x200012bc
 800d8d8:	2000a588 	.word	0x2000a588

0800d8dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d8dc:	b480      	push	{r7}
 800d8de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d8e0:	4b06      	ldr	r3, [pc, #24]	; (800d8fc <SystemInit+0x20>)
 800d8e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8e6:	4a05      	ldr	r2, [pc, #20]	; (800d8fc <SystemInit+0x20>)
 800d8e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d8ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800d8f0:	bf00      	nop
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	e000ed00 	.word	0xe000ed00

0800d900 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d906:	f107 0308 	add.w	r3, r7, #8
 800d90a:	2200      	movs	r2, #0
 800d90c:	601a      	str	r2, [r3, #0]
 800d90e:	605a      	str	r2, [r3, #4]
 800d910:	609a      	str	r2, [r3, #8]
 800d912:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d914:	463b      	mov	r3, r7
 800d916:	2200      	movs	r2, #0
 800d918:	601a      	str	r2, [r3, #0]
 800d91a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800d91c:	4b1e      	ldr	r3, [pc, #120]	; (800d998 <MX_TIM2_Init+0x98>)
 800d91e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800d922:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 800d924:	4b1c      	ldr	r3, [pc, #112]	; (800d998 <MX_TIM2_Init+0x98>)
 800d926:	f240 3247 	movw	r2, #839	; 0x347
 800d92a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d92c:	4b1a      	ldr	r3, [pc, #104]	; (800d998 <MX_TIM2_Init+0x98>)
 800d92e:	2200      	movs	r2, #0
 800d930:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800d932:	4b19      	ldr	r3, [pc, #100]	; (800d998 <MX_TIM2_Init+0x98>)
 800d934:	f04f 32ff 	mov.w	r2, #4294967295
 800d938:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d93a:	4b17      	ldr	r3, [pc, #92]	; (800d998 <MX_TIM2_Init+0x98>)
 800d93c:	2200      	movs	r2, #0
 800d93e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d940:	4b15      	ldr	r3, [pc, #84]	; (800d998 <MX_TIM2_Init+0x98>)
 800d942:	2200      	movs	r2, #0
 800d944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800d946:	4814      	ldr	r0, [pc, #80]	; (800d998 <MX_TIM2_Init+0x98>)
 800d948:	f004 f982 	bl	8011c50 <HAL_TIM_Base_Init>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d001      	beq.n	800d956 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800d952:	f7ff fcfd 	bl	800d350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d95a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800d95c:	f107 0308 	add.w	r3, r7, #8
 800d960:	4619      	mov	r1, r3
 800d962:	480d      	ldr	r0, [pc, #52]	; (800d998 <MX_TIM2_Init+0x98>)
 800d964:	f004 fcfe 	bl	8012364 <HAL_TIM_ConfigClockSource>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d001      	beq.n	800d972 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800d96e:	f7ff fcef 	bl	800d350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800d972:	2300      	movs	r3, #0
 800d974:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800d976:	2300      	movs	r3, #0
 800d978:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800d97a:	463b      	mov	r3, r7
 800d97c:	4619      	mov	r1, r3
 800d97e:	4806      	ldr	r0, [pc, #24]	; (800d998 <MX_TIM2_Init+0x98>)
 800d980:	f005 f8ca 	bl	8012b18 <HAL_TIMEx_MasterConfigSynchronization>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d001      	beq.n	800d98e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800d98a:	f7ff fce1 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800d98e:	bf00      	nop
 800d990:	3718      	adds	r7, #24
 800d992:	46bd      	mov	sp, r7
 800d994:	bd80      	pop	{r7, pc}
 800d996:	bf00      	nop
 800d998:	200012c0 	.word	0x200012c0

0800d99c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b086      	sub	sp, #24
 800d9a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800d9a2:	f107 0308 	add.w	r3, r7, #8
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	601a      	str	r2, [r3, #0]
 800d9aa:	605a      	str	r2, [r3, #4]
 800d9ac:	609a      	str	r2, [r3, #8]
 800d9ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800d9b0:	463b      	mov	r3, r7
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	601a      	str	r2, [r3, #0]
 800d9b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800d9b8:	4b1d      	ldr	r3, [pc, #116]	; (800da30 <MX_TIM3_Init+0x94>)
 800d9ba:	4a1e      	ldr	r2, [pc, #120]	; (800da34 <MX_TIM3_Init+0x98>)
 800d9bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800 - 1;
 800d9be:	4b1c      	ldr	r3, [pc, #112]	; (800da30 <MX_TIM3_Init+0x94>)
 800d9c0:	f244 129f 	movw	r2, #16799	; 0x419f
 800d9c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800d9c6:	4b1a      	ldr	r3, [pc, #104]	; (800da30 <MX_TIM3_Init+0x94>)
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800d9cc:	4b18      	ldr	r3, [pc, #96]	; (800da30 <MX_TIM3_Init+0x94>)
 800d9ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d9d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800d9d4:	4b16      	ldr	r3, [pc, #88]	; (800da30 <MX_TIM3_Init+0x94>)
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800d9da:	4b15      	ldr	r3, [pc, #84]	; (800da30 <MX_TIM3_Init+0x94>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800d9e0:	4813      	ldr	r0, [pc, #76]	; (800da30 <MX_TIM3_Init+0x94>)
 800d9e2:	f004 f935 	bl	8011c50 <HAL_TIM_Base_Init>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d001      	beq.n	800d9f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800d9ec:	f7ff fcb0 	bl	800d350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800d9f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d9f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800d9f6:	f107 0308 	add.w	r3, r7, #8
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	480c      	ldr	r0, [pc, #48]	; (800da30 <MX_TIM3_Init+0x94>)
 800d9fe:	f004 fcb1 	bl	8012364 <HAL_TIM_ConfigClockSource>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d001      	beq.n	800da0c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800da08:	f7ff fca2 	bl	800d350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800da0c:	2300      	movs	r3, #0
 800da0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800da10:	2300      	movs	r3, #0
 800da12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800da14:	463b      	mov	r3, r7
 800da16:	4619      	mov	r1, r3
 800da18:	4805      	ldr	r0, [pc, #20]	; (800da30 <MX_TIM3_Init+0x94>)
 800da1a:	f005 f87d 	bl	8012b18 <HAL_TIMEx_MasterConfigSynchronization>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800da24:	f7ff fc94 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800da28:	bf00      	nop
 800da2a:	3718      	adds	r7, #24
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}
 800da30:	20001308 	.word	0x20001308
 800da34:	40000400 	.word	0x40000400

0800da38 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b08e      	sub	sp, #56	; 0x38
 800da3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800da3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800da42:	2200      	movs	r2, #0
 800da44:	601a      	str	r2, [r3, #0]
 800da46:	605a      	str	r2, [r3, #4]
 800da48:	609a      	str	r2, [r3, #8]
 800da4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800da4c:	f107 0320 	add.w	r3, r7, #32
 800da50:	2200      	movs	r2, #0
 800da52:	601a      	str	r2, [r3, #0]
 800da54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800da56:	1d3b      	adds	r3, r7, #4
 800da58:	2200      	movs	r2, #0
 800da5a:	601a      	str	r2, [r3, #0]
 800da5c:	605a      	str	r2, [r3, #4]
 800da5e:	609a      	str	r2, [r3, #8]
 800da60:	60da      	str	r2, [r3, #12]
 800da62:	611a      	str	r2, [r3, #16]
 800da64:	615a      	str	r2, [r3, #20]
 800da66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800da68:	4b37      	ldr	r3, [pc, #220]	; (800db48 <MX_TIM4_Init+0x110>)
 800da6a:	4a38      	ldr	r2, [pc, #224]	; (800db4c <MX_TIM4_Init+0x114>)
 800da6c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 800da6e:	4b36      	ldr	r3, [pc, #216]	; (800db48 <MX_TIM4_Init+0x110>)
 800da70:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800da74:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800da76:	4b34      	ldr	r3, [pc, #208]	; (800db48 <MX_TIM4_Init+0x110>)
 800da78:	2200      	movs	r2, #0
 800da7a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 800da7c:	4b32      	ldr	r3, [pc, #200]	; (800db48 <MX_TIM4_Init+0x110>)
 800da7e:	22fe      	movs	r2, #254	; 0xfe
 800da80:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800da82:	4b31      	ldr	r3, [pc, #196]	; (800db48 <MX_TIM4_Init+0x110>)
 800da84:	2200      	movs	r2, #0
 800da86:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800da88:	4b2f      	ldr	r3, [pc, #188]	; (800db48 <MX_TIM4_Init+0x110>)
 800da8a:	2200      	movs	r2, #0
 800da8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800da8e:	482e      	ldr	r0, [pc, #184]	; (800db48 <MX_TIM4_Init+0x110>)
 800da90:	f004 f8de 	bl	8011c50 <HAL_TIM_Base_Init>
 800da94:	4603      	mov	r3, r0
 800da96:	2b00      	cmp	r3, #0
 800da98:	d001      	beq.n	800da9e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800da9a:	f7ff fc59 	bl	800d350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800da9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800daa2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800daa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800daa8:	4619      	mov	r1, r3
 800daaa:	4827      	ldr	r0, [pc, #156]	; (800db48 <MX_TIM4_Init+0x110>)
 800daac:	f004 fc5a 	bl	8012364 <HAL_TIM_ConfigClockSource>
 800dab0:	4603      	mov	r3, r0
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d001      	beq.n	800daba <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800dab6:	f7ff fc4b 	bl	800d350 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800daba:	4823      	ldr	r0, [pc, #140]	; (800db48 <MX_TIM4_Init+0x110>)
 800dabc:	f004 f988 	bl	8011dd0 <HAL_TIM_PWM_Init>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800dac6:	f7ff fc43 	bl	800d350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800daca:	2300      	movs	r3, #0
 800dacc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dace:	2300      	movs	r3, #0
 800dad0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800dad2:	f107 0320 	add.w	r3, r7, #32
 800dad6:	4619      	mov	r1, r3
 800dad8:	481b      	ldr	r0, [pc, #108]	; (800db48 <MX_TIM4_Init+0x110>)
 800dada:	f005 f81d 	bl	8012b18 <HAL_TIMEx_MasterConfigSynchronization>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d001      	beq.n	800dae8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800dae4:	f7ff fc34 	bl	800d350 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800dae8:	2360      	movs	r3, #96	; 0x60
 800daea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800daec:	2300      	movs	r3, #0
 800daee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800daf0:	2300      	movs	r3, #0
 800daf2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800daf4:	2300      	movs	r3, #0
 800daf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800daf8:	1d3b      	adds	r3, r7, #4
 800dafa:	2200      	movs	r2, #0
 800dafc:	4619      	mov	r1, r3
 800dafe:	4812      	ldr	r0, [pc, #72]	; (800db48 <MX_TIM4_Init+0x110>)
 800db00:	f004 fb6e 	bl	80121e0 <HAL_TIM_PWM_ConfigChannel>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d001      	beq.n	800db0e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800db0a:	f7ff fc21 	bl	800d350 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800db0e:	1d3b      	adds	r3, r7, #4
 800db10:	2204      	movs	r2, #4
 800db12:	4619      	mov	r1, r3
 800db14:	480c      	ldr	r0, [pc, #48]	; (800db48 <MX_TIM4_Init+0x110>)
 800db16:	f004 fb63 	bl	80121e0 <HAL_TIM_PWM_ConfigChannel>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d001      	beq.n	800db24 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800db20:	f7ff fc16 	bl	800d350 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800db24:	1d3b      	adds	r3, r7, #4
 800db26:	2208      	movs	r2, #8
 800db28:	4619      	mov	r1, r3
 800db2a:	4807      	ldr	r0, [pc, #28]	; (800db48 <MX_TIM4_Init+0x110>)
 800db2c:	f004 fb58 	bl	80121e0 <HAL_TIM_PWM_ConfigChannel>
 800db30:	4603      	mov	r3, r0
 800db32:	2b00      	cmp	r3, #0
 800db34:	d001      	beq.n	800db3a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800db36:	f7ff fc0b 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800db3a:	4803      	ldr	r0, [pc, #12]	; (800db48 <MX_TIM4_Init+0x110>)
 800db3c:	f000 f988 	bl	800de50 <HAL_TIM_MspPostInit>

}
 800db40:	bf00      	nop
 800db42:	3738      	adds	r7, #56	; 0x38
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	20001350 	.word	0x20001350
 800db4c:	40000800 	.word	0x40000800

0800db50 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b08c      	sub	sp, #48	; 0x30
 800db54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800db56:	f107 030c 	add.w	r3, r7, #12
 800db5a:	2224      	movs	r2, #36	; 0x24
 800db5c:	2100      	movs	r1, #0
 800db5e:	4618      	mov	r0, r3
 800db60:	f00c f872 	bl	8019c48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800db64:	1d3b      	adds	r3, r7, #4
 800db66:	2200      	movs	r2, #0
 800db68:	601a      	str	r2, [r3, #0]
 800db6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800db6c:	4b20      	ldr	r3, [pc, #128]	; (800dbf0 <MX_TIM5_Init+0xa0>)
 800db6e:	4a21      	ldr	r2, [pc, #132]	; (800dbf4 <MX_TIM5_Init+0xa4>)
 800db70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800db72:	4b1f      	ldr	r3, [pc, #124]	; (800dbf0 <MX_TIM5_Init+0xa0>)
 800db74:	2200      	movs	r2, #0
 800db76:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800db78:	4b1d      	ldr	r3, [pc, #116]	; (800dbf0 <MX_TIM5_Init+0xa0>)
 800db7a:	2200      	movs	r2, #0
 800db7c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800db7e:	4b1c      	ldr	r3, [pc, #112]	; (800dbf0 <MX_TIM5_Init+0xa0>)
 800db80:	f04f 32ff 	mov.w	r2, #4294967295
 800db84:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800db86:	4b1a      	ldr	r3, [pc, #104]	; (800dbf0 <MX_TIM5_Init+0xa0>)
 800db88:	2200      	movs	r2, #0
 800db8a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800db8c:	4b18      	ldr	r3, [pc, #96]	; (800dbf0 <MX_TIM5_Init+0xa0>)
 800db8e:	2200      	movs	r2, #0
 800db90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800db92:	2301      	movs	r3, #1
 800db94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800db96:	2300      	movs	r3, #0
 800db98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800db9a:	2301      	movs	r3, #1
 800db9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800db9e:	2300      	movs	r3, #0
 800dba0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800dba2:	2300      	movs	r3, #0
 800dba4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800dba6:	2300      	movs	r3, #0
 800dba8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800dbae:	2300      	movs	r3, #0
 800dbb0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800dbb6:	f107 030c 	add.w	r3, r7, #12
 800dbba:	4619      	mov	r1, r3
 800dbbc:	480c      	ldr	r0, [pc, #48]	; (800dbf0 <MX_TIM5_Init+0xa0>)
 800dbbe:	f004 f960 	bl	8011e82 <HAL_TIM_Encoder_Init>
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800dbc8:	f7ff fbc2 	bl	800d350 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800dbcc:	2300      	movs	r3, #0
 800dbce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800dbd4:	1d3b      	adds	r3, r7, #4
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	4805      	ldr	r0, [pc, #20]	; (800dbf0 <MX_TIM5_Init+0xa0>)
 800dbda:	f004 ff9d 	bl	8012b18 <HAL_TIMEx_MasterConfigSynchronization>
 800dbde:	4603      	mov	r3, r0
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d001      	beq.n	800dbe8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 800dbe4:	f7ff fbb4 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800dbe8:	bf00      	nop
 800dbea:	3730      	adds	r7, #48	; 0x30
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	20001398 	.word	0x20001398
 800dbf4:	40000c00 	.word	0x40000c00

0800dbf8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800dbfe:	463b      	mov	r3, r7
 800dc00:	2200      	movs	r2, #0
 800dc02:	601a      	str	r2, [r3, #0]
 800dc04:	605a      	str	r2, [r3, #4]
 800dc06:	609a      	str	r2, [r3, #8]
 800dc08:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800dc0a:	4b16      	ldr	r3, [pc, #88]	; (800dc64 <MX_TIM9_Init+0x6c>)
 800dc0c:	4a16      	ldr	r2, [pc, #88]	; (800dc68 <MX_TIM9_Init+0x70>)
 800dc0e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800 - 1;
 800dc10:	4b14      	ldr	r3, [pc, #80]	; (800dc64 <MX_TIM9_Init+0x6c>)
 800dc12:	f244 129f 	movw	r2, #16799	; 0x419f
 800dc16:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc18:	4b12      	ldr	r3, [pc, #72]	; (800dc64 <MX_TIM9_Init+0x6c>)
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800dc1e:	4b11      	ldr	r3, [pc, #68]	; (800dc64 <MX_TIM9_Init+0x6c>)
 800dc20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc24:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc26:	4b0f      	ldr	r3, [pc, #60]	; (800dc64 <MX_TIM9_Init+0x6c>)
 800dc28:	2200      	movs	r2, #0
 800dc2a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc2c:	4b0d      	ldr	r3, [pc, #52]	; (800dc64 <MX_TIM9_Init+0x6c>)
 800dc2e:	2200      	movs	r2, #0
 800dc30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800dc32:	480c      	ldr	r0, [pc, #48]	; (800dc64 <MX_TIM9_Init+0x6c>)
 800dc34:	f004 f80c 	bl	8011c50 <HAL_TIM_Base_Init>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d001      	beq.n	800dc42 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800dc3e:	f7ff fb87 	bl	800d350 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800dc42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800dc46:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800dc48:	463b      	mov	r3, r7
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	4805      	ldr	r0, [pc, #20]	; (800dc64 <MX_TIM9_Init+0x6c>)
 800dc4e:	f004 fb89 	bl	8012364 <HAL_TIM_ConfigClockSource>
 800dc52:	4603      	mov	r3, r0
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d001      	beq.n	800dc5c <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 800dc58:	f7ff fb7a 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800dc5c:	bf00      	nop
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	200013e0 	.word	0x200013e0
 800dc68:	40014000 	.word	0x40014000

0800dc6c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800dc70:	4b0e      	ldr	r3, [pc, #56]	; (800dcac <MX_TIM14_Init+0x40>)
 800dc72:	4a0f      	ldr	r2, [pc, #60]	; (800dcb0 <MX_TIM14_Init+0x44>)
 800dc74:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 800dc76:	4b0d      	ldr	r3, [pc, #52]	; (800dcac <MX_TIM14_Init+0x40>)
 800dc78:	f240 3247 	movw	r2, #839	; 0x347
 800dc7c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800dc7e:	4b0b      	ldr	r3, [pc, #44]	; (800dcac <MX_TIM14_Init+0x40>)
 800dc80:	2200      	movs	r2, #0
 800dc82:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800dc84:	4b09      	ldr	r3, [pc, #36]	; (800dcac <MX_TIM14_Init+0x40>)
 800dc86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc8a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800dc8c:	4b07      	ldr	r3, [pc, #28]	; (800dcac <MX_TIM14_Init+0x40>)
 800dc8e:	2200      	movs	r2, #0
 800dc90:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800dc92:	4b06      	ldr	r3, [pc, #24]	; (800dcac <MX_TIM14_Init+0x40>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800dc98:	4804      	ldr	r0, [pc, #16]	; (800dcac <MX_TIM14_Init+0x40>)
 800dc9a:	f003 ffd9 	bl	8011c50 <HAL_TIM_Base_Init>
 800dc9e:	4603      	mov	r3, r0
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d001      	beq.n	800dca8 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 800dca4:	f7ff fb54 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800dca8:	bf00      	nop
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	20001428 	.word	0x20001428
 800dcb0:	40002000 	.word	0x40002000

0800dcb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b088      	sub	sp, #32
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcc4:	d10e      	bne.n	800dce4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	61fb      	str	r3, [r7, #28]
 800dcca:	4b38      	ldr	r3, [pc, #224]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcce:	4a37      	ldr	r2, [pc, #220]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dcd0:	f043 0301 	orr.w	r3, r3, #1
 800dcd4:	6413      	str	r3, [r2, #64]	; 0x40
 800dcd6:	4b35      	ldr	r3, [pc, #212]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcda:	f003 0301 	and.w	r3, r3, #1
 800dcde:	61fb      	str	r3, [r7, #28]
 800dce0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800dce2:	e05e      	b.n	800dda2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a31      	ldr	r2, [pc, #196]	; (800ddb0 <HAL_TIM_Base_MspInit+0xfc>)
 800dcea:	4293      	cmp	r3, r2
 800dcec:	d116      	bne.n	800dd1c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800dcee:	2300      	movs	r3, #0
 800dcf0:	61bb      	str	r3, [r7, #24]
 800dcf2:	4b2e      	ldr	r3, [pc, #184]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dcf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcf6:	4a2d      	ldr	r2, [pc, #180]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dcf8:	f043 0302 	orr.w	r3, r3, #2
 800dcfc:	6413      	str	r3, [r2, #64]	; 0x40
 800dcfe:	4b2b      	ldr	r3, [pc, #172]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd02:	f003 0302 	and.w	r3, r3, #2
 800dd06:	61bb      	str	r3, [r7, #24]
 800dd08:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	2105      	movs	r1, #5
 800dd0e:	201d      	movs	r0, #29
 800dd10:	f001 fdce 	bl	800f8b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800dd14:	201d      	movs	r0, #29
 800dd16:	f001 fde7 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
}
 800dd1a:	e042      	b.n	800dda2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4a24      	ldr	r2, [pc, #144]	; (800ddb4 <HAL_TIM_Base_MspInit+0x100>)
 800dd22:	4293      	cmp	r3, r2
 800dd24:	d10e      	bne.n	800dd44 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800dd26:	2300      	movs	r3, #0
 800dd28:	617b      	str	r3, [r7, #20]
 800dd2a:	4b20      	ldr	r3, [pc, #128]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2e:	4a1f      	ldr	r2, [pc, #124]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dd30:	f043 0304 	orr.w	r3, r3, #4
 800dd34:	6413      	str	r3, [r2, #64]	; 0x40
 800dd36:	4b1d      	ldr	r3, [pc, #116]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dd38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd3a:	f003 0304 	and.w	r3, r3, #4
 800dd3e:	617b      	str	r3, [r7, #20]
 800dd40:	697b      	ldr	r3, [r7, #20]
}
 800dd42:	e02e      	b.n	800dda2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	4a1b      	ldr	r2, [pc, #108]	; (800ddb8 <HAL_TIM_Base_MspInit+0x104>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d116      	bne.n	800dd7c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800dd4e:	2300      	movs	r3, #0
 800dd50:	613b      	str	r3, [r7, #16]
 800dd52:	4b16      	ldr	r3, [pc, #88]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dd54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd56:	4a15      	ldr	r2, [pc, #84]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dd58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd5c:	6453      	str	r3, [r2, #68]	; 0x44
 800dd5e:	4b13      	ldr	r3, [pc, #76]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dd60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dd66:	613b      	str	r3, [r7, #16]
 800dd68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	2105      	movs	r1, #5
 800dd6e:	2018      	movs	r0, #24
 800dd70:	f001 fd9e 	bl	800f8b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800dd74:	2018      	movs	r0, #24
 800dd76:	f001 fdb7 	bl	800f8e8 <HAL_NVIC_EnableIRQ>
}
 800dd7a:	e012      	b.n	800dda2 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM14)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	4a0e      	ldr	r2, [pc, #56]	; (800ddbc <HAL_TIM_Base_MspInit+0x108>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d10d      	bne.n	800dda2 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800dd86:	2300      	movs	r3, #0
 800dd88:	60fb      	str	r3, [r7, #12]
 800dd8a:	4b08      	ldr	r3, [pc, #32]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dd8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd8e:	4a07      	ldr	r2, [pc, #28]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dd90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd94:	6413      	str	r3, [r2, #64]	; 0x40
 800dd96:	4b05      	ldr	r3, [pc, #20]	; (800ddac <HAL_TIM_Base_MspInit+0xf8>)
 800dd98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dd9e:	60fb      	str	r3, [r7, #12]
 800dda0:	68fb      	ldr	r3, [r7, #12]
}
 800dda2:	bf00      	nop
 800dda4:	3720      	adds	r7, #32
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
 800ddaa:	bf00      	nop
 800ddac:	40023800 	.word	0x40023800
 800ddb0:	40000400 	.word	0x40000400
 800ddb4:	40000800 	.word	0x40000800
 800ddb8:	40014000 	.word	0x40014000
 800ddbc:	40002000 	.word	0x40002000

0800ddc0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b08a      	sub	sp, #40	; 0x28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ddc8:	f107 0314 	add.w	r3, r7, #20
 800ddcc:	2200      	movs	r2, #0
 800ddce:	601a      	str	r2, [r3, #0]
 800ddd0:	605a      	str	r2, [r3, #4]
 800ddd2:	609a      	str	r2, [r3, #8]
 800ddd4:	60da      	str	r2, [r3, #12]
 800ddd6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4a19      	ldr	r2, [pc, #100]	; (800de44 <HAL_TIM_Encoder_MspInit+0x84>)
 800ddde:	4293      	cmp	r3, r2
 800dde0:	d12b      	bne.n	800de3a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800dde2:	2300      	movs	r3, #0
 800dde4:	613b      	str	r3, [r7, #16]
 800dde6:	4b18      	ldr	r3, [pc, #96]	; (800de48 <HAL_TIM_Encoder_MspInit+0x88>)
 800dde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddea:	4a17      	ldr	r2, [pc, #92]	; (800de48 <HAL_TIM_Encoder_MspInit+0x88>)
 800ddec:	f043 0308 	orr.w	r3, r3, #8
 800ddf0:	6413      	str	r3, [r2, #64]	; 0x40
 800ddf2:	4b15      	ldr	r3, [pc, #84]	; (800de48 <HAL_TIM_Encoder_MspInit+0x88>)
 800ddf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddf6:	f003 0308 	and.w	r3, r3, #8
 800ddfa:	613b      	str	r3, [r7, #16]
 800ddfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ddfe:	2300      	movs	r3, #0
 800de00:	60fb      	str	r3, [r7, #12]
 800de02:	4b11      	ldr	r3, [pc, #68]	; (800de48 <HAL_TIM_Encoder_MspInit+0x88>)
 800de04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de06:	4a10      	ldr	r2, [pc, #64]	; (800de48 <HAL_TIM_Encoder_MspInit+0x88>)
 800de08:	f043 0301 	orr.w	r3, r3, #1
 800de0c:	6313      	str	r3, [r2, #48]	; 0x30
 800de0e:	4b0e      	ldr	r3, [pc, #56]	; (800de48 <HAL_TIM_Encoder_MspInit+0x88>)
 800de10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de12:	f003 0301 	and.w	r3, r3, #1
 800de16:	60fb      	str	r3, [r7, #12]
 800de18:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 800de1a:	2303      	movs	r3, #3
 800de1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de1e:	2302      	movs	r3, #2
 800de20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de22:	2300      	movs	r3, #0
 800de24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de26:	2300      	movs	r3, #0
 800de28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800de2a:	2302      	movs	r3, #2
 800de2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800de2e:	f107 0314 	add.w	r3, r7, #20
 800de32:	4619      	mov	r1, r3
 800de34:	4805      	ldr	r0, [pc, #20]	; (800de4c <HAL_TIM_Encoder_MspInit+0x8c>)
 800de36:	f002 f8f1 	bl	801001c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800de3a:	bf00      	nop
 800de3c:	3728      	adds	r7, #40	; 0x28
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	40000c00 	.word	0x40000c00
 800de48:	40023800 	.word	0x40023800
 800de4c:	40020000 	.word	0x40020000

0800de50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b088      	sub	sp, #32
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de58:	f107 030c 	add.w	r3, r7, #12
 800de5c:	2200      	movs	r2, #0
 800de5e:	601a      	str	r2, [r3, #0]
 800de60:	605a      	str	r2, [r3, #4]
 800de62:	609a      	str	r2, [r3, #8]
 800de64:	60da      	str	r2, [r3, #12]
 800de66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	4a12      	ldr	r2, [pc, #72]	; (800deb8 <HAL_TIM_MspPostInit+0x68>)
 800de6e:	4293      	cmp	r3, r2
 800de70:	d11e      	bne.n	800deb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800de72:	2300      	movs	r3, #0
 800de74:	60bb      	str	r3, [r7, #8]
 800de76:	4b11      	ldr	r3, [pc, #68]	; (800debc <HAL_TIM_MspPostInit+0x6c>)
 800de78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de7a:	4a10      	ldr	r2, [pc, #64]	; (800debc <HAL_TIM_MspPostInit+0x6c>)
 800de7c:	f043 0308 	orr.w	r3, r3, #8
 800de80:	6313      	str	r3, [r2, #48]	; 0x30
 800de82:	4b0e      	ldr	r3, [pc, #56]	; (800debc <HAL_TIM_MspPostInit+0x6c>)
 800de84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de86:	f003 0308 	and.w	r3, r3, #8
 800de8a:	60bb      	str	r3, [r7, #8]
 800de8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 800de8e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800de92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de94:	2302      	movs	r3, #2
 800de96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de98:	2300      	movs	r3, #0
 800de9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800de9c:	2300      	movs	r3, #0
 800de9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800dea0:	2302      	movs	r3, #2
 800dea2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800dea4:	f107 030c 	add.w	r3, r7, #12
 800dea8:	4619      	mov	r1, r3
 800deaa:	4805      	ldr	r0, [pc, #20]	; (800dec0 <HAL_TIM_MspPostInit+0x70>)
 800deac:	f002 f8b6 	bl	801001c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800deb0:	bf00      	nop
 800deb2:	3720      	adds	r7, #32
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	40000800 	.word	0x40000800
 800debc:	40023800 	.word	0x40023800
 800dec0:	40020c00 	.word	0x40020c00

0800dec4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800dec4:	b580      	push	{r7, lr}
 800dec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800dec8:	4b11      	ldr	r3, [pc, #68]	; (800df10 <MX_USART1_UART_Init+0x4c>)
 800deca:	4a12      	ldr	r2, [pc, #72]	; (800df14 <MX_USART1_UART_Init+0x50>)
 800decc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800dece:	4b10      	ldr	r3, [pc, #64]	; (800df10 <MX_USART1_UART_Init+0x4c>)
 800ded0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ded4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ded6:	4b0e      	ldr	r3, [pc, #56]	; (800df10 <MX_USART1_UART_Init+0x4c>)
 800ded8:	2200      	movs	r2, #0
 800deda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800dedc:	4b0c      	ldr	r3, [pc, #48]	; (800df10 <MX_USART1_UART_Init+0x4c>)
 800dede:	2200      	movs	r2, #0
 800dee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800dee2:	4b0b      	ldr	r3, [pc, #44]	; (800df10 <MX_USART1_UART_Init+0x4c>)
 800dee4:	2200      	movs	r2, #0
 800dee6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800dee8:	4b09      	ldr	r3, [pc, #36]	; (800df10 <MX_USART1_UART_Init+0x4c>)
 800deea:	220c      	movs	r2, #12
 800deec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800deee:	4b08      	ldr	r3, [pc, #32]	; (800df10 <MX_USART1_UART_Init+0x4c>)
 800def0:	f44f 7240 	mov.w	r2, #768	; 0x300
 800def4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800def6:	4b06      	ldr	r3, [pc, #24]	; (800df10 <MX_USART1_UART_Init+0x4c>)
 800def8:	2200      	movs	r2, #0
 800defa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800defc:	4804      	ldr	r0, [pc, #16]	; (800df10 <MX_USART1_UART_Init+0x4c>)
 800defe:	f004 fe9b 	bl	8012c38 <HAL_UART_Init>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d001      	beq.n	800df0c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800df08:	f7ff fa22 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800df0c:	bf00      	nop
 800df0e:	bd80      	pop	{r7, pc}
 800df10:	20001470 	.word	0x20001470
 800df14:	40011000 	.word	0x40011000

0800df18 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800df1c:	4b11      	ldr	r3, [pc, #68]	; (800df64 <MX_USART2_UART_Init+0x4c>)
 800df1e:	4a12      	ldr	r2, [pc, #72]	; (800df68 <MX_USART2_UART_Init+0x50>)
 800df20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 800df22:	4b10      	ldr	r3, [pc, #64]	; (800df64 <MX_USART2_UART_Init+0x4c>)
 800df24:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800df28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800df2a:	4b0e      	ldr	r3, [pc, #56]	; (800df64 <MX_USART2_UART_Init+0x4c>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800df30:	4b0c      	ldr	r3, [pc, #48]	; (800df64 <MX_USART2_UART_Init+0x4c>)
 800df32:	2200      	movs	r2, #0
 800df34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800df36:	4b0b      	ldr	r3, [pc, #44]	; (800df64 <MX_USART2_UART_Init+0x4c>)
 800df38:	2200      	movs	r2, #0
 800df3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800df3c:	4b09      	ldr	r3, [pc, #36]	; (800df64 <MX_USART2_UART_Init+0x4c>)
 800df3e:	220c      	movs	r2, #12
 800df40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800df42:	4b08      	ldr	r3, [pc, #32]	; (800df64 <MX_USART2_UART_Init+0x4c>)
 800df44:	2200      	movs	r2, #0
 800df46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800df48:	4b06      	ldr	r3, [pc, #24]	; (800df64 <MX_USART2_UART_Init+0x4c>)
 800df4a:	2200      	movs	r2, #0
 800df4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800df4e:	4805      	ldr	r0, [pc, #20]	; (800df64 <MX_USART2_UART_Init+0x4c>)
 800df50:	f004 fe72 	bl	8012c38 <HAL_UART_Init>
 800df54:	4603      	mov	r3, r0
 800df56:	2b00      	cmp	r3, #0
 800df58:	d001      	beq.n	800df5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800df5a:	f7ff f9f9 	bl	800d350 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800df5e:	bf00      	nop
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	200014b4 	.word	0x200014b4
 800df68:	40004400 	.word	0x40004400

0800df6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b08c      	sub	sp, #48	; 0x30
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df74:	f107 031c 	add.w	r3, r7, #28
 800df78:	2200      	movs	r2, #0
 800df7a:	601a      	str	r2, [r3, #0]
 800df7c:	605a      	str	r2, [r3, #4]
 800df7e:	609a      	str	r2, [r3, #8]
 800df80:	60da      	str	r2, [r3, #12]
 800df82:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a61      	ldr	r2, [pc, #388]	; (800e110 <HAL_UART_MspInit+0x1a4>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	f040 808a 	bne.w	800e0a4 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800df90:	2300      	movs	r3, #0
 800df92:	61bb      	str	r3, [r7, #24]
 800df94:	4b5f      	ldr	r3, [pc, #380]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800df96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df98:	4a5e      	ldr	r2, [pc, #376]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800df9a:	f043 0310 	orr.w	r3, r3, #16
 800df9e:	6453      	str	r3, [r2, #68]	; 0x44
 800dfa0:	4b5c      	ldr	r3, [pc, #368]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800dfa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfa4:	f003 0310 	and.w	r3, r3, #16
 800dfa8:	61bb      	str	r3, [r7, #24]
 800dfaa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800dfac:	2300      	movs	r3, #0
 800dfae:	617b      	str	r3, [r7, #20]
 800dfb0:	4b58      	ldr	r3, [pc, #352]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800dfb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfb4:	4a57      	ldr	r2, [pc, #348]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800dfb6:	f043 0301 	orr.w	r3, r3, #1
 800dfba:	6313      	str	r3, [r2, #48]	; 0x30
 800dfbc:	4b55      	ldr	r3, [pc, #340]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800dfbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfc0:	f003 0301 	and.w	r3, r3, #1
 800dfc4:	617b      	str	r3, [r7, #20]
 800dfc6:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800dfc8:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800dfcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800dfce:	2302      	movs	r3, #2
 800dfd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfd6:	2303      	movs	r3, #3
 800dfd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800dfda:	2307      	movs	r3, #7
 800dfdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfde:	f107 031c 	add.w	r3, r7, #28
 800dfe2:	4619      	mov	r1, r3
 800dfe4:	484c      	ldr	r0, [pc, #304]	; (800e118 <HAL_UART_MspInit+0x1ac>)
 800dfe6:	f002 f819 	bl	801001c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800dfea:	4b4c      	ldr	r3, [pc, #304]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800dfec:	4a4c      	ldr	r2, [pc, #304]	; (800e120 <HAL_UART_MspInit+0x1b4>)
 800dfee:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800dff0:	4b4a      	ldr	r3, [pc, #296]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800dff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800dff6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800dff8:	4b48      	ldr	r3, [pc, #288]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800dffa:	2240      	movs	r2, #64	; 0x40
 800dffc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800dffe:	4b47      	ldr	r3, [pc, #284]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800e000:	2200      	movs	r2, #0
 800e002:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800e004:	4b45      	ldr	r3, [pc, #276]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800e006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e00a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e00c:	4b43      	ldr	r3, [pc, #268]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800e00e:	2200      	movs	r2, #0
 800e010:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e012:	4b42      	ldr	r3, [pc, #264]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800e014:	2200      	movs	r2, #0
 800e016:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800e018:	4b40      	ldr	r3, [pc, #256]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800e01a:	2200      	movs	r2, #0
 800e01c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800e01e:	4b3f      	ldr	r3, [pc, #252]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800e020:	2200      	movs	r2, #0
 800e022:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e024:	4b3d      	ldr	r3, [pc, #244]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800e026:	2200      	movs	r2, #0
 800e028:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800e02a:	483c      	ldr	r0, [pc, #240]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800e02c:	f001 fc86 	bl	800f93c <HAL_DMA_Init>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d001      	beq.n	800e03a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800e036:	f7ff f98b 	bl	800d350 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	4a37      	ldr	r2, [pc, #220]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800e03e:	635a      	str	r2, [r3, #52]	; 0x34
 800e040:	4a36      	ldr	r2, [pc, #216]	; (800e11c <HAL_UART_MspInit+0x1b0>)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800e046:	4b37      	ldr	r3, [pc, #220]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e048:	4a37      	ldr	r2, [pc, #220]	; (800e128 <HAL_UART_MspInit+0x1bc>)
 800e04a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800e04c:	4b35      	ldr	r3, [pc, #212]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e04e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800e052:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e054:	4b33      	ldr	r3, [pc, #204]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e056:	2200      	movs	r2, #0
 800e058:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800e05a:	4b32      	ldr	r3, [pc, #200]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e05c:	2200      	movs	r2, #0
 800e05e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800e060:	4b30      	ldr	r3, [pc, #192]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e066:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800e068:	4b2e      	ldr	r3, [pc, #184]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e06a:	2200      	movs	r2, #0
 800e06c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800e06e:	4b2d      	ldr	r3, [pc, #180]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e070:	2200      	movs	r2, #0
 800e072:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800e074:	4b2b      	ldr	r3, [pc, #172]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e076:	2200      	movs	r2, #0
 800e078:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800e07a:	4b2a      	ldr	r3, [pc, #168]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e080:	4b28      	ldr	r3, [pc, #160]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e082:	2200      	movs	r2, #0
 800e084:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800e086:	4827      	ldr	r0, [pc, #156]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e088:	f001 fc58 	bl	800f93c <HAL_DMA_Init>
 800e08c:	4603      	mov	r3, r0
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d001      	beq.n	800e096 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800e092:	f7ff f95d 	bl	800d350 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4a22      	ldr	r2, [pc, #136]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e09a:	639a      	str	r2, [r3, #56]	; 0x38
 800e09c:	4a21      	ldr	r2, [pc, #132]	; (800e124 <HAL_UART_MspInit+0x1b8>)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800e0a2:	e030      	b.n	800e106 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	4a20      	ldr	r2, [pc, #128]	; (800e12c <HAL_UART_MspInit+0x1c0>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d12b      	bne.n	800e106 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	613b      	str	r3, [r7, #16]
 800e0b2:	4b18      	ldr	r3, [pc, #96]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800e0b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0b6:	4a17      	ldr	r2, [pc, #92]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800e0b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0bc:	6413      	str	r3, [r2, #64]	; 0x40
 800e0be:	4b15      	ldr	r3, [pc, #84]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800e0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e0c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0c6:	613b      	str	r3, [r7, #16]
 800e0c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	60fb      	str	r3, [r7, #12]
 800e0ce:	4b11      	ldr	r3, [pc, #68]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800e0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0d2:	4a10      	ldr	r2, [pc, #64]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800e0d4:	f043 0308 	orr.w	r3, r3, #8
 800e0d8:	6313      	str	r3, [r2, #48]	; 0x30
 800e0da:	4b0e      	ldr	r3, [pc, #56]	; (800e114 <HAL_UART_MspInit+0x1a8>)
 800e0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0de:	f003 0308 	and.w	r3, r3, #8
 800e0e2:	60fb      	str	r3, [r7, #12]
 800e0e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 800e0e6:	2360      	movs	r3, #96	; 0x60
 800e0e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e0ea:	2302      	movs	r3, #2
 800e0ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e0f2:	2303      	movs	r3, #3
 800e0f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800e0f6:	2307      	movs	r3, #7
 800e0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e0fa:	f107 031c 	add.w	r3, r7, #28
 800e0fe:	4619      	mov	r1, r3
 800e100:	480b      	ldr	r0, [pc, #44]	; (800e130 <HAL_UART_MspInit+0x1c4>)
 800e102:	f001 ff8b 	bl	801001c <HAL_GPIO_Init>
}
 800e106:	bf00      	nop
 800e108:	3730      	adds	r7, #48	; 0x30
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop
 800e110:	40011000 	.word	0x40011000
 800e114:	40023800 	.word	0x40023800
 800e118:	40020000 	.word	0x40020000
 800e11c:	200014f8 	.word	0x200014f8
 800e120:	400264b8 	.word	0x400264b8
 800e124:	20001558 	.word	0x20001558
 800e128:	40026488 	.word	0x40026488
 800e12c:	40004400 	.word	0x40004400
 800e130:	40020c00 	.word	0x40020c00

0800e134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800e134:	f8df d034 	ldr.w	sp, [pc, #52]	; 800e16c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800e138:	480d      	ldr	r0, [pc, #52]	; (800e170 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800e13a:	490e      	ldr	r1, [pc, #56]	; (800e174 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800e13c:	4a0e      	ldr	r2, [pc, #56]	; (800e178 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800e13e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800e140:	e002      	b.n	800e148 <LoopCopyDataInit>

0800e142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800e142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800e144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800e146:	3304      	adds	r3, #4

0800e148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800e148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800e14a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800e14c:	d3f9      	bcc.n	800e142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800e14e:	4a0b      	ldr	r2, [pc, #44]	; (800e17c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800e150:	4c0b      	ldr	r4, [pc, #44]	; (800e180 <LoopFillZerobss+0x26>)
  movs r3, #0
 800e152:	2300      	movs	r3, #0
  b LoopFillZerobss
 800e154:	e001      	b.n	800e15a <LoopFillZerobss>

0800e156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800e156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800e158:	3204      	adds	r2, #4

0800e15a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800e15a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800e15c:	d3fb      	bcc.n	800e156 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800e15e:	f7ff fbbd 	bl	800d8dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800e162:	f00b fd2b 	bl	8019bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800e166:	f7ff f843 	bl	800d1f0 <main>
  bx  lr    
 800e16a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800e16c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800e170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800e174:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 800e178:	0801d104 	.word	0x0801d104
  ldr r2, =_sbss
 800e17c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800e180:	2000a588 	.word	0x2000a588

0800e184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800e184:	e7fe      	b.n	800e184 <ADC_IRQHandler>
	...

0800e188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e18c:	4b0e      	ldr	r3, [pc, #56]	; (800e1c8 <HAL_Init+0x40>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a0d      	ldr	r2, [pc, #52]	; (800e1c8 <HAL_Init+0x40>)
 800e192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800e198:	4b0b      	ldr	r3, [pc, #44]	; (800e1c8 <HAL_Init+0x40>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	4a0a      	ldr	r2, [pc, #40]	; (800e1c8 <HAL_Init+0x40>)
 800e19e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e1a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800e1a4:	4b08      	ldr	r3, [pc, #32]	; (800e1c8 <HAL_Init+0x40>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	4a07      	ldr	r2, [pc, #28]	; (800e1c8 <HAL_Init+0x40>)
 800e1aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e1ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800e1b0:	2003      	movs	r0, #3
 800e1b2:	f001 fb72 	bl	800f89a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800e1b6:	2005      	movs	r0, #5
 800e1b8:	f7ff f9b0 	bl	800d51c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800e1bc:	f7ff f982 	bl	800d4c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800e1c0:	2300      	movs	r3, #0
}
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	bd80      	pop	{r7, pc}
 800e1c6:	bf00      	nop
 800e1c8:	40023c00 	.word	0x40023c00

0800e1cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800e1d0:	4b06      	ldr	r3, [pc, #24]	; (800e1ec <HAL_IncTick+0x20>)
 800e1d2:	781b      	ldrb	r3, [r3, #0]
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	4b06      	ldr	r3, [pc, #24]	; (800e1f0 <HAL_IncTick+0x24>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	4413      	add	r3, r2
 800e1dc:	4a04      	ldr	r2, [pc, #16]	; (800e1f0 <HAL_IncTick+0x24>)
 800e1de:	6013      	str	r3, [r2, #0]
}
 800e1e0:	bf00      	nop
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e8:	4770      	bx	lr
 800e1ea:	bf00      	nop
 800e1ec:	20000028 	.word	0x20000028
 800e1f0:	200015b8 	.word	0x200015b8

0800e1f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800e1f4:	b480      	push	{r7}
 800e1f6:	af00      	add	r7, sp, #0
  return uwTick;
 800e1f8:	4b03      	ldr	r3, [pc, #12]	; (800e208 <HAL_GetTick+0x14>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
 800e206:	bf00      	nop
 800e208:	200015b8 	.word	0x200015b8

0800e20c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800e214:	2300      	movs	r3, #0
 800e216:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d101      	bne.n	800e222 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800e21e:	2301      	movs	r3, #1
 800e220:	e033      	b.n	800e28a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e226:	2b00      	cmp	r3, #0
 800e228:	d109      	bne.n	800e23e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7fe fb82 	bl	800c934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2200      	movs	r2, #0
 800e234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2200      	movs	r2, #0
 800e23a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e242:	f003 0310 	and.w	r3, r3, #16
 800e246:	2b00      	cmp	r3, #0
 800e248:	d118      	bne.n	800e27c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e24e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800e252:	f023 0302 	bic.w	r3, r3, #2
 800e256:	f043 0202 	orr.w	r2, r3, #2
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 fa54 	bl	800e70c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2200      	movs	r2, #0
 800e268:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e26e:	f023 0303 	bic.w	r3, r3, #3
 800e272:	f043 0201 	orr.w	r2, r3, #1
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	641a      	str	r2, [r3, #64]	; 0x40
 800e27a:	e001      	b.n	800e280 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800e27c:	2301      	movs	r3, #1
 800e27e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2200      	movs	r2, #0
 800e284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800e288:	7bfb      	ldrb	r3, [r7, #15]
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3710      	adds	r7, #16
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
	...

0800e294 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2aa:	2b01      	cmp	r3, #1
 800e2ac:	d101      	bne.n	800e2b2 <HAL_ADC_Start_DMA+0x1e>
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	e0e9      	b.n	800e486 <HAL_ADC_Start_DMA+0x1f2>
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	689b      	ldr	r3, [r3, #8]
 800e2c0:	f003 0301 	and.w	r3, r3, #1
 800e2c4:	2b01      	cmp	r3, #1
 800e2c6:	d018      	beq.n	800e2fa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	689a      	ldr	r2, [r3, #8]
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	f042 0201 	orr.w	r2, r2, #1
 800e2d6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800e2d8:	4b6d      	ldr	r3, [pc, #436]	; (800e490 <HAL_ADC_Start_DMA+0x1fc>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a6d      	ldr	r2, [pc, #436]	; (800e494 <HAL_ADC_Start_DMA+0x200>)
 800e2de:	fba2 2303 	umull	r2, r3, r2, r3
 800e2e2:	0c9a      	lsrs	r2, r3, #18
 800e2e4:	4613      	mov	r3, r2
 800e2e6:	005b      	lsls	r3, r3, #1
 800e2e8:	4413      	add	r3, r2
 800e2ea:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e2ec:	e002      	b.n	800e2f4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	3b01      	subs	r3, #1
 800e2f2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800e2f4:	693b      	ldr	r3, [r7, #16]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1f9      	bne.n	800e2ee <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	689b      	ldr	r3, [r3, #8]
 800e300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e308:	d107      	bne.n	800e31a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	689a      	ldr	r2, [r3, #8]
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e318:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	689b      	ldr	r3, [r3, #8]
 800e320:	f003 0301 	and.w	r3, r3, #1
 800e324:	2b01      	cmp	r3, #1
 800e326:	f040 80a1 	bne.w	800e46c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e32e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800e332:	f023 0301 	bic.w	r3, r3, #1
 800e336:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d007      	beq.n	800e35c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e350:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800e354:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e368:	d106      	bne.n	800e378 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e36e:	f023 0206 	bic.w	r2, r3, #6
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	645a      	str	r2, [r3, #68]	; 0x44
 800e376:	e002      	b.n	800e37e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	2200      	movs	r2, #0
 800e37c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2200      	movs	r2, #0
 800e382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e386:	4b44      	ldr	r3, [pc, #272]	; (800e498 <HAL_ADC_Start_DMA+0x204>)
 800e388:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38e:	4a43      	ldr	r2, [pc, #268]	; (800e49c <HAL_ADC_Start_DMA+0x208>)
 800e390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e396:	4a42      	ldr	r2, [pc, #264]	; (800e4a0 <HAL_ADC_Start_DMA+0x20c>)
 800e398:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e39e:	4a41      	ldr	r2, [pc, #260]	; (800e4a4 <HAL_ADC_Start_DMA+0x210>)
 800e3a0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800e3aa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	685a      	ldr	r2, [r3, #4]
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800e3ba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	689a      	ldr	r2, [r3, #8]
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e3ca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	334c      	adds	r3, #76	; 0x4c
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	68ba      	ldr	r2, [r7, #8]
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	f001 fb5c 	bl	800fa98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	685b      	ldr	r3, [r3, #4]
 800e3e4:	f003 031f 	and.w	r3, r3, #31
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d12a      	bne.n	800e442 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	4a2d      	ldr	r2, [pc, #180]	; (800e4a8 <HAL_ADC_Start_DMA+0x214>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d015      	beq.n	800e422 <HAL_ADC_Start_DMA+0x18e>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	4a2c      	ldr	r2, [pc, #176]	; (800e4ac <HAL_ADC_Start_DMA+0x218>)
 800e3fc:	4293      	cmp	r3, r2
 800e3fe:	d105      	bne.n	800e40c <HAL_ADC_Start_DMA+0x178>
 800e400:	4b25      	ldr	r3, [pc, #148]	; (800e498 <HAL_ADC_Start_DMA+0x204>)
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	f003 031f 	and.w	r3, r3, #31
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d00a      	beq.n	800e422 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	4a27      	ldr	r2, [pc, #156]	; (800e4b0 <HAL_ADC_Start_DMA+0x21c>)
 800e412:	4293      	cmp	r3, r2
 800e414:	d136      	bne.n	800e484 <HAL_ADC_Start_DMA+0x1f0>
 800e416:	4b20      	ldr	r3, [pc, #128]	; (800e498 <HAL_ADC_Start_DMA+0x204>)
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	f003 0310 	and.w	r3, r3, #16
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d130      	bne.n	800e484 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	689b      	ldr	r3, [r3, #8]
 800e428:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d129      	bne.n	800e484 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	689a      	ldr	r2, [r3, #8]
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e43e:	609a      	str	r2, [r3, #8]
 800e440:	e020      	b.n	800e484 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4a18      	ldr	r2, [pc, #96]	; (800e4a8 <HAL_ADC_Start_DMA+0x214>)
 800e448:	4293      	cmp	r3, r2
 800e44a:	d11b      	bne.n	800e484 <HAL_ADC_Start_DMA+0x1f0>
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e456:	2b00      	cmp	r3, #0
 800e458:	d114      	bne.n	800e484 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	689a      	ldr	r2, [r3, #8]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800e468:	609a      	str	r2, [r3, #8]
 800e46a:	e00b      	b.n	800e484 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e470:	f043 0210 	orr.w	r2, r3, #16
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e47c:	f043 0201 	orr.w	r2, r3, #1
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	3718      	adds	r7, #24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	20000020 	.word	0x20000020
 800e494:	431bde83 	.word	0x431bde83
 800e498:	40012300 	.word	0x40012300
 800e49c:	0800e905 	.word	0x0800e905
 800e4a0:	0800e9bf 	.word	0x0800e9bf
 800e4a4:	0800e9db 	.word	0x0800e9db
 800e4a8:	40012000 	.word	0x40012000
 800e4ac:	40012100 	.word	0x40012100
 800e4b0:	40012200 	.word	0x40012200

0800e4b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800e4bc:	bf00      	nop
 800e4be:	370c      	adds	r7, #12
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c6:	4770      	bx	lr

0800e4c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800e4c8:	b480      	push	{r7}
 800e4ca:	b085      	sub	sp, #20
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800e4d2:	2300      	movs	r3, #0
 800e4d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	d101      	bne.n	800e4e4 <HAL_ADC_ConfigChannel+0x1c>
 800e4e0:	2302      	movs	r3, #2
 800e4e2:	e105      	b.n	800e6f0 <HAL_ADC_ConfigChannel+0x228>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	2b09      	cmp	r3, #9
 800e4f2:	d925      	bls.n	800e540 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	68d9      	ldr	r1, [r3, #12]
 800e4fa:	683b      	ldr	r3, [r7, #0]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	b29b      	uxth	r3, r3
 800e500:	461a      	mov	r2, r3
 800e502:	4613      	mov	r3, r2
 800e504:	005b      	lsls	r3, r3, #1
 800e506:	4413      	add	r3, r2
 800e508:	3b1e      	subs	r3, #30
 800e50a:	2207      	movs	r2, #7
 800e50c:	fa02 f303 	lsl.w	r3, r2, r3
 800e510:	43da      	mvns	r2, r3
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	400a      	ands	r2, r1
 800e518:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	68d9      	ldr	r1, [r3, #12]
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	689a      	ldr	r2, [r3, #8]
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	b29b      	uxth	r3, r3
 800e52a:	4618      	mov	r0, r3
 800e52c:	4603      	mov	r3, r0
 800e52e:	005b      	lsls	r3, r3, #1
 800e530:	4403      	add	r3, r0
 800e532:	3b1e      	subs	r3, #30
 800e534:	409a      	lsls	r2, r3
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	430a      	orrs	r2, r1
 800e53c:	60da      	str	r2, [r3, #12]
 800e53e:	e022      	b.n	800e586 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	6919      	ldr	r1, [r3, #16]
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	461a      	mov	r2, r3
 800e54e:	4613      	mov	r3, r2
 800e550:	005b      	lsls	r3, r3, #1
 800e552:	4413      	add	r3, r2
 800e554:	2207      	movs	r2, #7
 800e556:	fa02 f303 	lsl.w	r3, r2, r3
 800e55a:	43da      	mvns	r2, r3
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	400a      	ands	r2, r1
 800e562:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6919      	ldr	r1, [r3, #16]
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	689a      	ldr	r2, [r3, #8]
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	b29b      	uxth	r3, r3
 800e574:	4618      	mov	r0, r3
 800e576:	4603      	mov	r3, r0
 800e578:	005b      	lsls	r3, r3, #1
 800e57a:	4403      	add	r3, r0
 800e57c:	409a      	lsls	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	430a      	orrs	r2, r1
 800e584:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	685b      	ldr	r3, [r3, #4]
 800e58a:	2b06      	cmp	r3, #6
 800e58c:	d824      	bhi.n	800e5d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	685a      	ldr	r2, [r3, #4]
 800e598:	4613      	mov	r3, r2
 800e59a:	009b      	lsls	r3, r3, #2
 800e59c:	4413      	add	r3, r2
 800e59e:	3b05      	subs	r3, #5
 800e5a0:	221f      	movs	r2, #31
 800e5a2:	fa02 f303 	lsl.w	r3, r2, r3
 800e5a6:	43da      	mvns	r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	400a      	ands	r2, r1
 800e5ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	4618      	mov	r0, r3
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	4613      	mov	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	4413      	add	r3, r2
 800e5c8:	3b05      	subs	r3, #5
 800e5ca:	fa00 f203 	lsl.w	r2, r0, r3
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	430a      	orrs	r2, r1
 800e5d4:	635a      	str	r2, [r3, #52]	; 0x34
 800e5d6:	e04c      	b.n	800e672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	685b      	ldr	r3, [r3, #4]
 800e5dc:	2b0c      	cmp	r3, #12
 800e5de:	d824      	bhi.n	800e62a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	685a      	ldr	r2, [r3, #4]
 800e5ea:	4613      	mov	r3, r2
 800e5ec:	009b      	lsls	r3, r3, #2
 800e5ee:	4413      	add	r3, r2
 800e5f0:	3b23      	subs	r3, #35	; 0x23
 800e5f2:	221f      	movs	r2, #31
 800e5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800e5f8:	43da      	mvns	r2, r3
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	400a      	ands	r2, r1
 800e600:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	4618      	mov	r0, r3
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	685a      	ldr	r2, [r3, #4]
 800e614:	4613      	mov	r3, r2
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	4413      	add	r3, r2
 800e61a:	3b23      	subs	r3, #35	; 0x23
 800e61c:	fa00 f203 	lsl.w	r2, r0, r3
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	430a      	orrs	r2, r1
 800e626:	631a      	str	r2, [r3, #48]	; 0x30
 800e628:	e023      	b.n	800e672 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	685a      	ldr	r2, [r3, #4]
 800e634:	4613      	mov	r3, r2
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	4413      	add	r3, r2
 800e63a:	3b41      	subs	r3, #65	; 0x41
 800e63c:	221f      	movs	r2, #31
 800e63e:	fa02 f303 	lsl.w	r3, r2, r3
 800e642:	43da      	mvns	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	400a      	ands	r2, r1
 800e64a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	b29b      	uxth	r3, r3
 800e658:	4618      	mov	r0, r3
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	685a      	ldr	r2, [r3, #4]
 800e65e:	4613      	mov	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4413      	add	r3, r2
 800e664:	3b41      	subs	r3, #65	; 0x41
 800e666:	fa00 f203 	lsl.w	r2, r0, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	430a      	orrs	r2, r1
 800e670:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e672:	4b22      	ldr	r3, [pc, #136]	; (800e6fc <HAL_ADC_ConfigChannel+0x234>)
 800e674:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	4a21      	ldr	r2, [pc, #132]	; (800e700 <HAL_ADC_ConfigChannel+0x238>)
 800e67c:	4293      	cmp	r3, r2
 800e67e:	d109      	bne.n	800e694 <HAL_ADC_ConfigChannel+0x1cc>
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b12      	cmp	r3, #18
 800e686:	d105      	bne.n	800e694 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4a19      	ldr	r2, [pc, #100]	; (800e700 <HAL_ADC_ConfigChannel+0x238>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d123      	bne.n	800e6e6 <HAL_ADC_ConfigChannel+0x21e>
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b10      	cmp	r3, #16
 800e6a4:	d003      	beq.n	800e6ae <HAL_ADC_ConfigChannel+0x1e6>
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2b11      	cmp	r3, #17
 800e6ac:	d11b      	bne.n	800e6e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	685b      	ldr	r3, [r3, #4]
 800e6b2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b10      	cmp	r3, #16
 800e6c0:	d111      	bne.n	800e6e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800e6c2:	4b10      	ldr	r3, [pc, #64]	; (800e704 <HAL_ADC_ConfigChannel+0x23c>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	4a10      	ldr	r2, [pc, #64]	; (800e708 <HAL_ADC_ConfigChannel+0x240>)
 800e6c8:	fba2 2303 	umull	r2, r3, r2, r3
 800e6cc:	0c9a      	lsrs	r2, r3, #18
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	4413      	add	r3, r2
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800e6d8:	e002      	b.n	800e6e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	3b01      	subs	r3, #1
 800e6de:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d1f9      	bne.n	800e6da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800e6ee:	2300      	movs	r3, #0
}
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	3714      	adds	r7, #20
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fa:	4770      	bx	lr
 800e6fc:	40012300 	.word	0x40012300
 800e700:	40012000 	.word	0x40012000
 800e704:	20000020 	.word	0x20000020
 800e708:	431bde83 	.word	0x431bde83

0800e70c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800e714:	4b79      	ldr	r3, [pc, #484]	; (800e8fc <ADC_Init+0x1f0>)
 800e716:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	685a      	ldr	r2, [r3, #4]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	685b      	ldr	r3, [r3, #4]
 800e72c:	431a      	orrs	r2, r3
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	685a      	ldr	r2, [r3, #4]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	6859      	ldr	r1, [r3, #4]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	021a      	lsls	r2, r3, #8
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	430a      	orrs	r2, r1
 800e754:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800e764:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	6859      	ldr	r1, [r3, #4]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	689a      	ldr	r2, [r3, #8]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	430a      	orrs	r2, r1
 800e776:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	689a      	ldr	r2, [r3, #8]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e786:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	6899      	ldr	r1, [r3, #8]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	68da      	ldr	r2, [r3, #12]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	430a      	orrs	r2, r1
 800e798:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e79e:	4a58      	ldr	r2, [pc, #352]	; (800e900 <ADC_Init+0x1f4>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d022      	beq.n	800e7ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	689a      	ldr	r2, [r3, #8]
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e7b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	6899      	ldr	r1, [r3, #8]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	430a      	orrs	r2, r1
 800e7c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	689a      	ldr	r2, [r3, #8]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e7d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	6899      	ldr	r1, [r3, #8]
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	430a      	orrs	r2, r1
 800e7e6:	609a      	str	r2, [r3, #8]
 800e7e8:	e00f      	b.n	800e80a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	689a      	ldr	r2, [r3, #8]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e7f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	689a      	ldr	r2, [r3, #8]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800e808:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	689a      	ldr	r2, [r3, #8]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f022 0202 	bic.w	r2, r2, #2
 800e818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	6899      	ldr	r1, [r3, #8]
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	7e1b      	ldrb	r3, [r3, #24]
 800e824:	005a      	lsls	r2, r3, #1
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	430a      	orrs	r2, r1
 800e82c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 3020 	ldrb.w	r3, [r3, #32]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d01b      	beq.n	800e870 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	685a      	ldr	r2, [r3, #4]
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e846:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	685a      	ldr	r2, [r3, #4]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800e856:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	6859      	ldr	r1, [r3, #4]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e862:	3b01      	subs	r3, #1
 800e864:	035a      	lsls	r2, r3, #13
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	430a      	orrs	r2, r1
 800e86c:	605a      	str	r2, [r3, #4]
 800e86e:	e007      	b.n	800e880 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	685a      	ldr	r2, [r3, #4]
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e87e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800e88e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	69db      	ldr	r3, [r3, #28]
 800e89a:	3b01      	subs	r3, #1
 800e89c:	051a      	lsls	r2, r3, #20
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	430a      	orrs	r2, r1
 800e8a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	689a      	ldr	r2, [r3, #8]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e8b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	6899      	ldr	r1, [r3, #8]
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e8c2:	025a      	lsls	r2, r3, #9
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	430a      	orrs	r2, r1
 800e8ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	689a      	ldr	r2, [r3, #8]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e8da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	6899      	ldr	r1, [r3, #8]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	695b      	ldr	r3, [r3, #20]
 800e8e6:	029a      	lsls	r2, r3, #10
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	430a      	orrs	r2, r1
 800e8ee:	609a      	str	r2, [r3, #8]
}
 800e8f0:	bf00      	nop
 800e8f2:	3714      	adds	r7, #20
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fa:	4770      	bx	lr
 800e8fc:	40012300 	.word	0x40012300
 800e900:	0f000001 	.word	0x0f000001

0800e904 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b084      	sub	sp, #16
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e910:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e916:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d13c      	bne.n	800e998 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e922:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800e934:	2b00      	cmp	r3, #0
 800e936:	d12b      	bne.n	800e990 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d127      	bne.n	800e990 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	681b      	ldr	r3, [r3, #0]
 800e944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e946:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d006      	beq.n	800e95c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	689b      	ldr	r3, [r3, #8]
 800e954:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d119      	bne.n	800e990 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	685a      	ldr	r2, [r3, #4]
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	f022 0220 	bic.w	r2, r2, #32
 800e96a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e970:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e97c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e980:	2b00      	cmp	r3, #0
 800e982:	d105      	bne.n	800e990 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e988:	f043 0201 	orr.w	r2, r3, #1
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f004 fc30 	bl	80131f6 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800e996:	e00e      	b.n	800e9b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e99c:	f003 0310 	and.w	r3, r3, #16
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d003      	beq.n	800e9ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f7ff fd85 	bl	800e4b4 <HAL_ADC_ErrorCallback>
}
 800e9aa:	e004      	b.n	800e9b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	4798      	blx	r3
}
 800e9b6:	bf00      	nop
 800e9b8:	3710      	adds	r7, #16
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b084      	sub	sp, #16
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9ca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f004 fcc0 	bl	8013352 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800e9d2:	bf00      	nop
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b084      	sub	sp, #16
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9e6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	2240      	movs	r2, #64	; 0x40
 800e9ec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e9f2:	f043 0204 	orr.w	r2, r3, #4
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800e9fa:	68f8      	ldr	r0, [r7, #12]
 800e9fc:	f7ff fd5a 	bl	800e4b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ea00:	bf00      	nop
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d101      	bne.n	800ea1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800ea16:	2301      	movs	r3, #1
 800ea18:	e0ed      	b.n	800ebf6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d102      	bne.n	800ea2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7fe f8e8 	bl	800cbfc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	681a      	ldr	r2, [r3, #0]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f042 0201 	orr.w	r2, r2, #1
 800ea3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ea3c:	f7ff fbda 	bl	800e1f4 <HAL_GetTick>
 800ea40:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ea42:	e012      	b.n	800ea6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ea44:	f7ff fbd6 	bl	800e1f4 <HAL_GetTick>
 800ea48:	4602      	mov	r2, r0
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	2b0a      	cmp	r3, #10
 800ea50:	d90b      	bls.n	800ea6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2205      	movs	r2, #5
 800ea62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800ea66:	2301      	movs	r3, #1
 800ea68:	e0c5      	b.n	800ebf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	f003 0301 	and.w	r3, r3, #1
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d0e5      	beq.n	800ea44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	681a      	ldr	r2, [r3, #0]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	f022 0202 	bic.w	r2, r2, #2
 800ea86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ea88:	f7ff fbb4 	bl	800e1f4 <HAL_GetTick>
 800ea8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800ea8e:	e012      	b.n	800eab6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800ea90:	f7ff fbb0 	bl	800e1f4 <HAL_GetTick>
 800ea94:	4602      	mov	r2, r0
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	1ad3      	subs	r3, r2, r3
 800ea9a:	2b0a      	cmp	r3, #10
 800ea9c:	d90b      	bls.n	800eab6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2205      	movs	r2, #5
 800eaae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800eab2:	2301      	movs	r3, #1
 800eab4:	e09f      	b.n	800ebf6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	685b      	ldr	r3, [r3, #4]
 800eabc:	f003 0302 	and.w	r3, r3, #2
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d1e5      	bne.n	800ea90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	7e1b      	ldrb	r3, [r3, #24]
 800eac8:	2b01      	cmp	r3, #1
 800eaca:	d108      	bne.n	800eade <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800eada:	601a      	str	r2, [r3, #0]
 800eadc:	e007      	b.n	800eaee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	681a      	ldr	r2, [r3, #0]
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800eaec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	7e5b      	ldrb	r3, [r3, #25]
 800eaf2:	2b01      	cmp	r3, #1
 800eaf4:	d108      	bne.n	800eb08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	681a      	ldr	r2, [r3, #0]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800eb04:	601a      	str	r2, [r3, #0]
 800eb06:	e007      	b.n	800eb18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	681a      	ldr	r2, [r3, #0]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	7e9b      	ldrb	r3, [r3, #26]
 800eb1c:	2b01      	cmp	r3, #1
 800eb1e:	d108      	bne.n	800eb32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f042 0220 	orr.w	r2, r2, #32
 800eb2e:	601a      	str	r2, [r3, #0]
 800eb30:	e007      	b.n	800eb42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f022 0220 	bic.w	r2, r2, #32
 800eb40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	7edb      	ldrb	r3, [r3, #27]
 800eb46:	2b01      	cmp	r3, #1
 800eb48:	d108      	bne.n	800eb5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	681b      	ldr	r3, [r3, #0]
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	f022 0210 	bic.w	r2, r2, #16
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	e007      	b.n	800eb6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	681a      	ldr	r2, [r3, #0]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	f042 0210 	orr.w	r2, r2, #16
 800eb6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	7f1b      	ldrb	r3, [r3, #28]
 800eb70:	2b01      	cmp	r3, #1
 800eb72:	d108      	bne.n	800eb86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	681a      	ldr	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f042 0208 	orr.w	r2, r2, #8
 800eb82:	601a      	str	r2, [r3, #0]
 800eb84:	e007      	b.n	800eb96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	681a      	ldr	r2, [r3, #0]
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f022 0208 	bic.w	r2, r2, #8
 800eb94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	7f5b      	ldrb	r3, [r3, #29]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d108      	bne.n	800ebb0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	681a      	ldr	r2, [r3, #0]
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f042 0204 	orr.w	r2, r2, #4
 800ebac:	601a      	str	r2, [r3, #0]
 800ebae:	e007      	b.n	800ebc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	681a      	ldr	r2, [r3, #0]
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f022 0204 	bic.w	r2, r2, #4
 800ebbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	689a      	ldr	r2, [r3, #8]
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	68db      	ldr	r3, [r3, #12]
 800ebc8:	431a      	orrs	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	691b      	ldr	r3, [r3, #16]
 800ebce:	431a      	orrs	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	695b      	ldr	r3, [r3, #20]
 800ebd4:	ea42 0103 	orr.w	r1, r2, r3
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	685b      	ldr	r3, [r3, #4]
 800ebdc:	1e5a      	subs	r2, r3, #1
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	430a      	orrs	r2, r1
 800ebe4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2200      	movs	r2, #0
 800ebea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800ebf4:	2300      	movs	r3, #0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
	...

0800ec00 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b087      	sub	sp, #28
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
 800ec08:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ec16:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800ec18:	7cfb      	ldrb	r3, [r7, #19]
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d003      	beq.n	800ec26 <HAL_CAN_ConfigFilter+0x26>
 800ec1e:	7cfb      	ldrb	r3, [r7, #19]
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	f040 80be 	bne.w	800eda2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800ec26:	4b65      	ldr	r3, [pc, #404]	; (800edbc <HAL_CAN_ConfigFilter+0x1bc>)
 800ec28:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec30:	f043 0201 	orr.w	r2, r3, #1
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800ec3a:	697b      	ldr	r3, [r7, #20]
 800ec3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ec40:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800ec4a:	697b      	ldr	r3, [r7, #20]
 800ec4c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec54:	021b      	lsls	r3, r3, #8
 800ec56:	431a      	orrs	r2, r3
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	695b      	ldr	r3, [r3, #20]
 800ec62:	f003 031f 	and.w	r3, r3, #31
 800ec66:	2201      	movs	r2, #1
 800ec68:	fa02 f303 	lsl.w	r3, r2, r3
 800ec6c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	43db      	mvns	r3, r3
 800ec78:	401a      	ands	r2, r3
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	69db      	ldr	r3, [r3, #28]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d123      	bne.n	800ecd0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800ec88:	697b      	ldr	r3, [r7, #20]
 800ec8a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	43db      	mvns	r3, r3
 800ec92:	401a      	ands	r2, r3
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	68db      	ldr	r3, [r3, #12]
 800ec9e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800eca6:	683a      	ldr	r2, [r7, #0]
 800eca8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800ecaa:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	3248      	adds	r2, #72	; 0x48
 800ecb0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	689b      	ldr	r3, [r3, #8]
 800ecb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ecc4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ecc6:	6979      	ldr	r1, [r7, #20]
 800ecc8:	3348      	adds	r3, #72	; 0x48
 800ecca:	00db      	lsls	r3, r3, #3
 800eccc:	440b      	add	r3, r1
 800ecce:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	69db      	ldr	r3, [r3, #28]
 800ecd4:	2b01      	cmp	r3, #1
 800ecd6:	d122      	bne.n	800ed1e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	431a      	orrs	r2, r3
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	685b      	ldr	r3, [r3, #4]
 800ecf2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ecf4:	683a      	ldr	r2, [r7, #0]
 800ecf6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800ecf8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	3248      	adds	r2, #72	; 0x48
 800ecfe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ed02:	683b      	ldr	r3, [r7, #0]
 800ed04:	689b      	ldr	r3, [r3, #8]
 800ed06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	68db      	ldr	r3, [r3, #12]
 800ed0c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ed0e:	683b      	ldr	r3, [r7, #0]
 800ed10:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800ed12:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800ed14:	6979      	ldr	r1, [r7, #20]
 800ed16:	3348      	adds	r3, #72	; 0x48
 800ed18:	00db      	lsls	r3, r3, #3
 800ed1a:	440b      	add	r3, r1
 800ed1c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	699b      	ldr	r3, [r3, #24]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d109      	bne.n	800ed3a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800ed26:	697b      	ldr	r3, [r7, #20]
 800ed28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	43db      	mvns	r3, r3
 800ed30:	401a      	ands	r2, r3
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800ed38:	e007      	b.n	800ed4a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	431a      	orrs	r2, r3
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	691b      	ldr	r3, [r3, #16]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d109      	bne.n	800ed66 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	43db      	mvns	r3, r3
 800ed5c:	401a      	ands	r2, r3
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800ed64:	e007      	b.n	800ed76 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	431a      	orrs	r2, r3
 800ed70:	697b      	ldr	r3, [r7, #20]
 800ed72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	6a1b      	ldr	r3, [r3, #32]
 800ed7a:	2b01      	cmp	r3, #1
 800ed7c:	d107      	bne.n	800ed8e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	431a      	orrs	r2, r3
 800ed88:	697b      	ldr	r3, [r7, #20]
 800ed8a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ed94:	f023 0201 	bic.w	r2, r3, #1
 800ed98:	697b      	ldr	r3, [r7, #20]
 800ed9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800ed9e:	2300      	movs	r3, #0
 800eda0:	e006      	b.n	800edb0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eda6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800edae:	2301      	movs	r3, #1
  }
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	371c      	adds	r7, #28
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr
 800edbc:	40006400 	.word	0x40006400

0800edc0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b084      	sub	sp, #16
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	d12e      	bne.n	800ee32 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2202      	movs	r2, #2
 800edd8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f022 0201 	bic.w	r2, r2, #1
 800edea:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800edec:	f7ff fa02 	bl	800e1f4 <HAL_GetTick>
 800edf0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800edf2:	e012      	b.n	800ee1a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800edf4:	f7ff f9fe 	bl	800e1f4 <HAL_GetTick>
 800edf8:	4602      	mov	r2, r0
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	1ad3      	subs	r3, r2, r3
 800edfe:	2b0a      	cmp	r3, #10
 800ee00:	d90b      	bls.n	800ee1a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2205      	movs	r2, #5
 800ee12:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ee16:	2301      	movs	r3, #1
 800ee18:	e012      	b.n	800ee40 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	f003 0301 	and.w	r3, r3, #1
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d1e5      	bne.n	800edf4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800ee2e:	2300      	movs	r3, #0
 800ee30:	e006      	b.n	800ee40 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ee3e:	2301      	movs	r3, #1
  }
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3710      	adds	r7, #16
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}

0800ee48 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b089      	sub	sp, #36	; 0x24
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	60f8      	str	r0, [r7, #12]
 800ee50:	60b9      	str	r1, [r7, #8]
 800ee52:	607a      	str	r2, [r7, #4]
 800ee54:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ee5c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800ee66:	7ffb      	ldrb	r3, [r7, #31]
 800ee68:	2b01      	cmp	r3, #1
 800ee6a:	d003      	beq.n	800ee74 <HAL_CAN_AddTxMessage+0x2c>
 800ee6c:	7ffb      	ldrb	r3, [r7, #31]
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	f040 80b8 	bne.w	800efe4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d10a      	bne.n	800ee94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800ee7e:	69bb      	ldr	r3, [r7, #24]
 800ee80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d105      	bne.n	800ee94 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800ee88:	69bb      	ldr	r3, [r7, #24]
 800ee8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	f000 80a0 	beq.w	800efd4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800ee94:	69bb      	ldr	r3, [r7, #24]
 800ee96:	0e1b      	lsrs	r3, r3, #24
 800ee98:	f003 0303 	and.w	r3, r3, #3
 800ee9c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	2b02      	cmp	r3, #2
 800eea2:	d907      	bls.n	800eeb4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eea8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	e09e      	b.n	800eff2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	697b      	ldr	r3, [r7, #20]
 800eeb8:	409a      	lsls	r2, r3
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800eebe:	68bb      	ldr	r3, [r7, #8]
 800eec0:	689b      	ldr	r3, [r3, #8]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d10d      	bne.n	800eee2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800eed0:	68f9      	ldr	r1, [r7, #12]
 800eed2:	6809      	ldr	r1, [r1, #0]
 800eed4:	431a      	orrs	r2, r3
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	3318      	adds	r3, #24
 800eeda:	011b      	lsls	r3, r3, #4
 800eedc:	440b      	add	r3, r1
 800eede:	601a      	str	r2, [r3, #0]
 800eee0:	e00f      	b.n	800ef02 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800eeec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800eef2:	68f9      	ldr	r1, [r7, #12]
 800eef4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800eef6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	3318      	adds	r3, #24
 800eefc:	011b      	lsls	r3, r3, #4
 800eefe:	440b      	add	r3, r1
 800ef00:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	6819      	ldr	r1, [r3, #0]
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	691a      	ldr	r2, [r3, #16]
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	3318      	adds	r3, #24
 800ef0e:	011b      	lsls	r3, r3, #4
 800ef10:	440b      	add	r3, r1
 800ef12:	3304      	adds	r3, #4
 800ef14:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	7d1b      	ldrb	r3, [r3, #20]
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d111      	bne.n	800ef42 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	3318      	adds	r3, #24
 800ef26:	011b      	lsls	r3, r3, #4
 800ef28:	4413      	add	r3, r2
 800ef2a:	3304      	adds	r3, #4
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	6811      	ldr	r1, [r2, #0]
 800ef32:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	3318      	adds	r3, #24
 800ef3a:	011b      	lsls	r3, r3, #4
 800ef3c:	440b      	add	r3, r1
 800ef3e:	3304      	adds	r3, #4
 800ef40:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	3307      	adds	r3, #7
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	061a      	lsls	r2, r3, #24
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	3306      	adds	r3, #6
 800ef4e:	781b      	ldrb	r3, [r3, #0]
 800ef50:	041b      	lsls	r3, r3, #16
 800ef52:	431a      	orrs	r2, r3
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	3305      	adds	r3, #5
 800ef58:	781b      	ldrb	r3, [r3, #0]
 800ef5a:	021b      	lsls	r3, r3, #8
 800ef5c:	4313      	orrs	r3, r2
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	3204      	adds	r2, #4
 800ef62:	7812      	ldrb	r2, [r2, #0]
 800ef64:	4610      	mov	r0, r2
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	6811      	ldr	r1, [r2, #0]
 800ef6a:	ea43 0200 	orr.w	r2, r3, r0
 800ef6e:	697b      	ldr	r3, [r7, #20]
 800ef70:	011b      	lsls	r3, r3, #4
 800ef72:	440b      	add	r3, r1
 800ef74:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800ef78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	3303      	adds	r3, #3
 800ef7e:	781b      	ldrb	r3, [r3, #0]
 800ef80:	061a      	lsls	r2, r3, #24
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	3302      	adds	r3, #2
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	041b      	lsls	r3, r3, #16
 800ef8a:	431a      	orrs	r2, r3
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	3301      	adds	r3, #1
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	021b      	lsls	r3, r3, #8
 800ef94:	4313      	orrs	r3, r2
 800ef96:	687a      	ldr	r2, [r7, #4]
 800ef98:	7812      	ldrb	r2, [r2, #0]
 800ef9a:	4610      	mov	r0, r2
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	6811      	ldr	r1, [r2, #0]
 800efa0:	ea43 0200 	orr.w	r2, r3, r0
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	011b      	lsls	r3, r3, #4
 800efa8:	440b      	add	r3, r1
 800efaa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800efae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	697b      	ldr	r3, [r7, #20]
 800efb6:	3318      	adds	r3, #24
 800efb8:	011b      	lsls	r3, r3, #4
 800efba:	4413      	add	r3, r2
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	6811      	ldr	r1, [r2, #0]
 800efc2:	f043 0201 	orr.w	r2, r3, #1
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	3318      	adds	r3, #24
 800efca:	011b      	lsls	r3, r3, #4
 800efcc:	440b      	add	r3, r1
 800efce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800efd0:	2300      	movs	r3, #0
 800efd2:	e00e      	b.n	800eff2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efd8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800efe0:	2301      	movs	r3, #1
 800efe2:	e006      	b.n	800eff2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efe8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800eff0:	2301      	movs	r3, #1
  }
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3724      	adds	r7, #36	; 0x24
 800eff6:	46bd      	mov	sp, r7
 800eff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effc:	4770      	bx	lr

0800effe <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800effe:	b480      	push	{r7}
 800f000:	b085      	sub	sp, #20
 800f002:	af00      	add	r7, sp, #0
 800f004:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800f006:	2300      	movs	r3, #0
 800f008:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f010:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800f012:	7afb      	ldrb	r3, [r7, #11]
 800f014:	2b01      	cmp	r3, #1
 800f016:	d002      	beq.n	800f01e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800f018:	7afb      	ldrb	r3, [r7, #11]
 800f01a:	2b02      	cmp	r3, #2
 800f01c:	d11d      	bne.n	800f05a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	689b      	ldr	r3, [r3, #8]
 800f024:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d002      	beq.n	800f032 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	3301      	adds	r3, #1
 800f030:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d002      	beq.n	800f046 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	3301      	adds	r3, #1
 800f044:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	689b      	ldr	r3, [r3, #8]
 800f04c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f050:	2b00      	cmp	r3, #0
 800f052:	d002      	beq.n	800f05a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	3301      	adds	r3, #1
 800f058:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800f05a:	68fb      	ldr	r3, [r7, #12]
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3714      	adds	r7, #20
 800f060:	46bd      	mov	sp, r7
 800f062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f066:	4770      	bx	lr

0800f068 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800f068:	b480      	push	{r7}
 800f06a:	b087      	sub	sp, #28
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	60f8      	str	r0, [r7, #12]
 800f070:	60b9      	str	r1, [r7, #8]
 800f072:	607a      	str	r2, [r7, #4]
 800f074:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f07c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
 800f080:	2b01      	cmp	r3, #1
 800f082:	d003      	beq.n	800f08c <HAL_CAN_GetRxMessage+0x24>
 800f084:	7dfb      	ldrb	r3, [r7, #23]
 800f086:	2b02      	cmp	r3, #2
 800f088:	f040 80f3 	bne.w	800f272 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d10e      	bne.n	800f0b0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	68db      	ldr	r3, [r3, #12]
 800f098:	f003 0303 	and.w	r3, r3, #3
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d116      	bne.n	800f0ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0a4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800f0ac:	2301      	movs	r3, #1
 800f0ae:	e0e7      	b.n	800f280 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	691b      	ldr	r3, [r3, #16]
 800f0b6:	f003 0303 	and.w	r3, r3, #3
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d107      	bne.n	800f0ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	e0d8      	b.n	800f280 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	681a      	ldr	r2, [r3, #0]
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	331b      	adds	r3, #27
 800f0d6:	011b      	lsls	r3, r3, #4
 800f0d8:	4413      	add	r3, r2
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f003 0204 	and.w	r2, r3, #4
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d10c      	bne.n	800f106 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681a      	ldr	r2, [r3, #0]
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	331b      	adds	r3, #27
 800f0f4:	011b      	lsls	r3, r3, #4
 800f0f6:	4413      	add	r3, r2
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	0d5b      	lsrs	r3, r3, #21
 800f0fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	601a      	str	r2, [r3, #0]
 800f104:	e00b      	b.n	800f11e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	331b      	adds	r3, #27
 800f10e:	011b      	lsls	r3, r3, #4
 800f110:	4413      	add	r3, r2
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	08db      	lsrs	r3, r3, #3
 800f116:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	681a      	ldr	r2, [r3, #0]
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	331b      	adds	r3, #27
 800f126:	011b      	lsls	r3, r3, #4
 800f128:	4413      	add	r3, r2
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	f003 0202 	and.w	r2, r3, #2
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	681a      	ldr	r2, [r3, #0]
 800f138:	68bb      	ldr	r3, [r7, #8]
 800f13a:	331b      	adds	r3, #27
 800f13c:	011b      	lsls	r3, r3, #4
 800f13e:	4413      	add	r3, r2
 800f140:	3304      	adds	r3, #4
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f003 020f 	and.w	r2, r3, #15
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	681a      	ldr	r2, [r3, #0]
 800f150:	68bb      	ldr	r3, [r7, #8]
 800f152:	331b      	adds	r3, #27
 800f154:	011b      	lsls	r3, r3, #4
 800f156:	4413      	add	r3, r2
 800f158:	3304      	adds	r3, #4
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	0a1b      	lsrs	r3, r3, #8
 800f15e:	b2da      	uxtb	r2, r3
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	331b      	adds	r3, #27
 800f16c:	011b      	lsls	r3, r3, #4
 800f16e:	4413      	add	r3, r2
 800f170:	3304      	adds	r3, #4
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	0c1b      	lsrs	r3, r3, #16
 800f176:	b29a      	uxth	r2, r3
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	011b      	lsls	r3, r3, #4
 800f184:	4413      	add	r3, r2
 800f186:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	b2da      	uxtb	r2, r3
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	681a      	ldr	r2, [r3, #0]
 800f196:	68bb      	ldr	r3, [r7, #8]
 800f198:	011b      	lsls	r3, r3, #4
 800f19a:	4413      	add	r3, r2
 800f19c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	0a1a      	lsrs	r2, r3, #8
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	b2d2      	uxtb	r2, r2
 800f1aa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	68bb      	ldr	r3, [r7, #8]
 800f1b2:	011b      	lsls	r3, r3, #4
 800f1b4:	4413      	add	r3, r2
 800f1b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	0c1a      	lsrs	r2, r3, #16
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	3302      	adds	r3, #2
 800f1c2:	b2d2      	uxtb	r2, r2
 800f1c4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	68bb      	ldr	r3, [r7, #8]
 800f1cc:	011b      	lsls	r3, r3, #4
 800f1ce:	4413      	add	r3, r2
 800f1d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	0e1a      	lsrs	r2, r3, #24
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	3303      	adds	r3, #3
 800f1dc:	b2d2      	uxtb	r2, r2
 800f1de:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681a      	ldr	r2, [r3, #0]
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	011b      	lsls	r3, r3, #4
 800f1e8:	4413      	add	r3, r2
 800f1ea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800f1ee:	681a      	ldr	r2, [r3, #0]
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	3304      	adds	r3, #4
 800f1f4:	b2d2      	uxtb	r2, r2
 800f1f6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	011b      	lsls	r3, r3, #4
 800f200:	4413      	add	r3, r2
 800f202:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	0a1a      	lsrs	r2, r3, #8
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	3305      	adds	r3, #5
 800f20e:	b2d2      	uxtb	r2, r2
 800f210:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681a      	ldr	r2, [r3, #0]
 800f216:	68bb      	ldr	r3, [r7, #8]
 800f218:	011b      	lsls	r3, r3, #4
 800f21a:	4413      	add	r3, r2
 800f21c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	0c1a      	lsrs	r2, r3, #16
 800f224:	683b      	ldr	r3, [r7, #0]
 800f226:	3306      	adds	r3, #6
 800f228:	b2d2      	uxtb	r2, r2
 800f22a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681a      	ldr	r2, [r3, #0]
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	011b      	lsls	r3, r3, #4
 800f234:	4413      	add	r3, r2
 800f236:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	0e1a      	lsrs	r2, r3, #24
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	3307      	adds	r3, #7
 800f242:	b2d2      	uxtb	r2, r2
 800f244:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800f246:	68bb      	ldr	r3, [r7, #8]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d108      	bne.n	800f25e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68da      	ldr	r2, [r3, #12]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f042 0220 	orr.w	r2, r2, #32
 800f25a:	60da      	str	r2, [r3, #12]
 800f25c:	e007      	b.n	800f26e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	691a      	ldr	r2, [r3, #16]
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f042 0220 	orr.w	r2, r2, #32
 800f26c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800f26e:	2300      	movs	r3, #0
 800f270:	e006      	b.n	800f280 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f276:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f27e:	2301      	movs	r3, #1
  }
}
 800f280:	4618      	mov	r0, r3
 800f282:	371c      	adds	r7, #28
 800f284:	46bd      	mov	sp, r7
 800f286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28a:	4770      	bx	lr

0800f28c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b085      	sub	sp, #20
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]
 800f294:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f29c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800f29e:	7bfb      	ldrb	r3, [r7, #15]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	d002      	beq.n	800f2aa <HAL_CAN_ActivateNotification+0x1e>
 800f2a4:	7bfb      	ldrb	r3, [r7, #15]
 800f2a6:	2b02      	cmp	r3, #2
 800f2a8:	d109      	bne.n	800f2be <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	6959      	ldr	r1, [r3, #20]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	683a      	ldr	r2, [r7, #0]
 800f2b6:	430a      	orrs	r2, r1
 800f2b8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	e006      	b.n	800f2cc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2c2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
  }
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3714      	adds	r7, #20
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b08a      	sub	sp, #40	; 0x28
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	695b      	ldr	r3, [r3, #20]
 800f2ea:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	685b      	ldr	r3, [r3, #4]
 800f2f2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	691b      	ldr	r3, [r3, #16]
 800f30a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	699b      	ldr	r3, [r3, #24]
 800f312:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800f314:	6a3b      	ldr	r3, [r7, #32]
 800f316:	f003 0301 	and.w	r3, r3, #1
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d07c      	beq.n	800f418 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800f31e:	69bb      	ldr	r3, [r7, #24]
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d023      	beq.n	800f370 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2201      	movs	r2, #1
 800f32e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800f330:	69bb      	ldr	r3, [r7, #24]
 800f332:	f003 0302 	and.w	r3, r3, #2
 800f336:	2b00      	cmp	r3, #0
 800f338:	d003      	beq.n	800f342 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f7f2 fcba 	bl	8001cb4 <HAL_CAN_TxMailbox0CompleteCallback>
 800f340:	e016      	b.n	800f370 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	f003 0304 	and.w	r3, r3, #4
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d004      	beq.n	800f356 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800f34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f34e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f352:	627b      	str	r3, [r7, #36]	; 0x24
 800f354:	e00c      	b.n	800f370 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800f356:	69bb      	ldr	r3, [r7, #24]
 800f358:	f003 0308 	and.w	r3, r3, #8
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d004      	beq.n	800f36a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800f360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f366:	627b      	str	r3, [r7, #36]	; 0x24
 800f368:	e002      	b.n	800f370 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 f97f 	bl	800f66e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f376:	2b00      	cmp	r3, #0
 800f378:	d024      	beq.n	800f3c4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f382:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d003      	beq.n	800f396 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f000 f959 	bl	800f646 <HAL_CAN_TxMailbox1CompleteCallback>
 800f394:	e016      	b.n	800f3c4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d004      	beq.n	800f3aa <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800f3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f3a6:	627b      	str	r3, [r7, #36]	; 0x24
 800f3a8:	e00c      	b.n	800f3c4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800f3aa:	69bb      	ldr	r3, [r7, #24]
 800f3ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d004      	beq.n	800f3be <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800f3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f3ba:	627b      	str	r3, [r7, #36]	; 0x24
 800f3bc:	e002      	b.n	800f3c4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800f3be:	6878      	ldr	r0, [r7, #4]
 800f3c0:	f000 f95f 	bl	800f682 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800f3c4:	69bb      	ldr	r3, [r7, #24]
 800f3c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d024      	beq.n	800f418 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f3d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800f3d8:	69bb      	ldr	r3, [r7, #24]
 800f3da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d003      	beq.n	800f3ea <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 f939 	bl	800f65a <HAL_CAN_TxMailbox2CompleteCallback>
 800f3e8:	e016      	b.n	800f418 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800f3ea:	69bb      	ldr	r3, [r7, #24]
 800f3ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d004      	beq.n	800f3fe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800f3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f3fa:	627b      	str	r3, [r7, #36]	; 0x24
 800f3fc:	e00c      	b.n	800f418 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f404:	2b00      	cmp	r3, #0
 800f406:	d004      	beq.n	800f412 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800f408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f40e:	627b      	str	r3, [r7, #36]	; 0x24
 800f410:	e002      	b.n	800f418 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f93f 	bl	800f696 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800f418:	6a3b      	ldr	r3, [r7, #32]
 800f41a:	f003 0308 	and.w	r3, r3, #8
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d00c      	beq.n	800f43c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	f003 0310 	and.w	r3, r3, #16
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d007      	beq.n	800f43c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800f42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f432:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2210      	movs	r2, #16
 800f43a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800f43c:	6a3b      	ldr	r3, [r7, #32]
 800f43e:	f003 0304 	and.w	r3, r3, #4
 800f442:	2b00      	cmp	r3, #0
 800f444:	d00b      	beq.n	800f45e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	f003 0308 	and.w	r3, r3, #8
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d006      	beq.n	800f45e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	2208      	movs	r2, #8
 800f456:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800f458:	6878      	ldr	r0, [r7, #4]
 800f45a:	f000 f926 	bl	800f6aa <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800f45e:	6a3b      	ldr	r3, [r7, #32]
 800f460:	f003 0302 	and.w	r3, r3, #2
 800f464:	2b00      	cmp	r3, #0
 800f466:	d009      	beq.n	800f47c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68db      	ldr	r3, [r3, #12]
 800f46e:	f003 0303 	and.w	r3, r3, #3
 800f472:	2b00      	cmp	r3, #0
 800f474:	d002      	beq.n	800f47c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f7f2 fb84 	bl	8001b84 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800f47c:	6a3b      	ldr	r3, [r7, #32]
 800f47e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f482:	2b00      	cmp	r3, #0
 800f484:	d00c      	beq.n	800f4a0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	f003 0310 	and.w	r3, r3, #16
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d007      	beq.n	800f4a0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800f490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f492:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f496:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	2210      	movs	r2, #16
 800f49e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800f4a0:	6a3b      	ldr	r3, [r7, #32]
 800f4a2:	f003 0320 	and.w	r3, r3, #32
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d00b      	beq.n	800f4c2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f003 0308 	and.w	r3, r3, #8
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d006      	beq.n	800f4c2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	2208      	movs	r2, #8
 800f4ba:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 f8fe 	bl	800f6be <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800f4c2:	6a3b      	ldr	r3, [r7, #32]
 800f4c4:	f003 0310 	and.w	r3, r3, #16
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d009      	beq.n	800f4e0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	691b      	ldr	r3, [r3, #16]
 800f4d2:	f003 0303 	and.w	r3, r3, #3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d002      	beq.n	800f4e0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f7f2 fb8c 	bl	8001bf8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800f4e0:	6a3b      	ldr	r3, [r7, #32]
 800f4e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d00b      	beq.n	800f502 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800f4ea:	69fb      	ldr	r3, [r7, #28]
 800f4ec:	f003 0310 	and.w	r3, r3, #16
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d006      	beq.n	800f502 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	2210      	movs	r2, #16
 800f4fa:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 f8e8 	bl	800f6d2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800f502:	6a3b      	ldr	r3, [r7, #32]
 800f504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00b      	beq.n	800f524 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	f003 0308 	and.w	r3, r3, #8
 800f512:	2b00      	cmp	r3, #0
 800f514:	d006      	beq.n	800f524 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	2208      	movs	r2, #8
 800f51c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 f8e1 	bl	800f6e6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800f524:	6a3b      	ldr	r3, [r7, #32]
 800f526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d07b      	beq.n	800f626 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800f52e:	69fb      	ldr	r3, [r7, #28]
 800f530:	f003 0304 	and.w	r3, r3, #4
 800f534:	2b00      	cmp	r3, #0
 800f536:	d072      	beq.n	800f61e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f538:	6a3b      	ldr	r3, [r7, #32]
 800f53a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d008      	beq.n	800f554 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d003      	beq.n	800f554 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800f54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f54e:	f043 0301 	orr.w	r3, r3, #1
 800f552:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f554:	6a3b      	ldr	r3, [r7, #32]
 800f556:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d008      	beq.n	800f570 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800f564:	2b00      	cmp	r3, #0
 800f566:	d003      	beq.n	800f570 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800f568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56a:	f043 0302 	orr.w	r3, r3, #2
 800f56e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f570:	6a3b      	ldr	r3, [r7, #32]
 800f572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f576:	2b00      	cmp	r3, #0
 800f578:	d008      	beq.n	800f58c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800f580:	2b00      	cmp	r3, #0
 800f582:	d003      	beq.n	800f58c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800f584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f586:	f043 0304 	orr.w	r3, r3, #4
 800f58a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f58c:	6a3b      	ldr	r3, [r7, #32]
 800f58e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f592:	2b00      	cmp	r3, #0
 800f594:	d043      	beq.n	800f61e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d03e      	beq.n	800f61e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800f5a6:	2b60      	cmp	r3, #96	; 0x60
 800f5a8:	d02b      	beq.n	800f602 <HAL_CAN_IRQHandler+0x32a>
 800f5aa:	2b60      	cmp	r3, #96	; 0x60
 800f5ac:	d82e      	bhi.n	800f60c <HAL_CAN_IRQHandler+0x334>
 800f5ae:	2b50      	cmp	r3, #80	; 0x50
 800f5b0:	d022      	beq.n	800f5f8 <HAL_CAN_IRQHandler+0x320>
 800f5b2:	2b50      	cmp	r3, #80	; 0x50
 800f5b4:	d82a      	bhi.n	800f60c <HAL_CAN_IRQHandler+0x334>
 800f5b6:	2b40      	cmp	r3, #64	; 0x40
 800f5b8:	d019      	beq.n	800f5ee <HAL_CAN_IRQHandler+0x316>
 800f5ba:	2b40      	cmp	r3, #64	; 0x40
 800f5bc:	d826      	bhi.n	800f60c <HAL_CAN_IRQHandler+0x334>
 800f5be:	2b30      	cmp	r3, #48	; 0x30
 800f5c0:	d010      	beq.n	800f5e4 <HAL_CAN_IRQHandler+0x30c>
 800f5c2:	2b30      	cmp	r3, #48	; 0x30
 800f5c4:	d822      	bhi.n	800f60c <HAL_CAN_IRQHandler+0x334>
 800f5c6:	2b10      	cmp	r3, #16
 800f5c8:	d002      	beq.n	800f5d0 <HAL_CAN_IRQHandler+0x2f8>
 800f5ca:	2b20      	cmp	r3, #32
 800f5cc:	d005      	beq.n	800f5da <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800f5ce:	e01d      	b.n	800f60c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800f5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d2:	f043 0308 	orr.w	r3, r3, #8
 800f5d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f5d8:	e019      	b.n	800f60e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800f5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5dc:	f043 0310 	orr.w	r3, r3, #16
 800f5e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f5e2:	e014      	b.n	800f60e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	f043 0320 	orr.w	r3, r3, #32
 800f5ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f5ec:	e00f      	b.n	800f60e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800f5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f5f6:	e00a      	b.n	800f60e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800f5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f600:	e005      	b.n	800f60e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800f602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f608:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800f60a:	e000      	b.n	800f60e <HAL_CAN_IRQHandler+0x336>
            break;
 800f60c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	699a      	ldr	r2, [r3, #24]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800f61c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	2204      	movs	r2, #4
 800f624:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800f626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d008      	beq.n	800f63e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f632:	431a      	orrs	r2, r3
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f7f2 fb17 	bl	8001c6c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800f63e:	bf00      	nop
 800f640:	3728      	adds	r7, #40	; 0x28
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}

0800f646 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f646:	b480      	push	{r7}
 800f648:	b083      	sub	sp, #12
 800f64a:	af00      	add	r7, sp, #0
 800f64c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800f64e:	bf00      	nop
 800f650:	370c      	adds	r7, #12
 800f652:	46bd      	mov	sp, r7
 800f654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f658:	4770      	bx	lr

0800f65a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800f65a:	b480      	push	{r7}
 800f65c:	b083      	sub	sp, #12
 800f65e:	af00      	add	r7, sp, #0
 800f660:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800f662:	bf00      	nop
 800f664:	370c      	adds	r7, #12
 800f666:	46bd      	mov	sp, r7
 800f668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66c:	4770      	bx	lr

0800f66e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f66e:	b480      	push	{r7}
 800f670:	b083      	sub	sp, #12
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800f676:	bf00      	nop
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr

0800f682 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f682:	b480      	push	{r7}
 800f684:	b083      	sub	sp, #12
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800f68a:	bf00      	nop
 800f68c:	370c      	adds	r7, #12
 800f68e:	46bd      	mov	sp, r7
 800f690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f694:	4770      	bx	lr

0800f696 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800f696:	b480      	push	{r7}
 800f698:	b083      	sub	sp, #12
 800f69a:	af00      	add	r7, sp, #0
 800f69c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800f69e:	bf00      	nop
 800f6a0:	370c      	adds	r7, #12
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr

0800f6aa <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800f6aa:	b480      	push	{r7}
 800f6ac:	b083      	sub	sp, #12
 800f6ae:	af00      	add	r7, sp, #0
 800f6b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800f6b2:	bf00      	nop
 800f6b4:	370c      	adds	r7, #12
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6bc:	4770      	bx	lr

0800f6be <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800f6be:	b480      	push	{r7}
 800f6c0:	b083      	sub	sp, #12
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800f6c6:	bf00      	nop
 800f6c8:	370c      	adds	r7, #12
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d0:	4770      	bx	lr

0800f6d2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800f6d2:	b480      	push	{r7}
 800f6d4:	b083      	sub	sp, #12
 800f6d6:	af00      	add	r7, sp, #0
 800f6d8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800f6da:	bf00      	nop
 800f6dc:	370c      	adds	r7, #12
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800f6e6:	b480      	push	{r7}
 800f6e8:	b083      	sub	sp, #12
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800f6ee:	bf00      	nop
 800f6f0:	370c      	adds	r7, #12
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f8:	4770      	bx	lr

0800f6fa <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 800f6fa:	b480      	push	{r7}
 800f6fc:	b085      	sub	sp, #20
 800f6fe:	af00      	add	r7, sp, #0
 800f700:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f702:	2300      	movs	r3, #0
 800f704:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f70c:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 800f70e:	7bbb      	ldrb	r3, [r7, #14]
 800f710:	2b01      	cmp	r3, #1
 800f712:	d002      	beq.n	800f71a <HAL_CAN_ResetError+0x20>
 800f714:	7bbb      	ldrb	r3, [r7, #14]
 800f716:	2b02      	cmp	r3, #2
 800f718:	d103      	bne.n	800f722 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2200      	movs	r2, #0
 800f71e:	625a      	str	r2, [r3, #36]	; 0x24
 800f720:	e007      	b.n	800f732 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f726:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800f72e:	2301      	movs	r3, #1
 800f730:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 800f732:	7bfb      	ldrb	r3, [r7, #15]
}
 800f734:	4618      	mov	r0, r3
 800f736:	3714      	adds	r7, #20
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr

0800f740 <__NVIC_SetPriorityGrouping>:
{
 800f740:	b480      	push	{r7}
 800f742:	b085      	sub	sp, #20
 800f744:	af00      	add	r7, sp, #0
 800f746:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f003 0307 	and.w	r3, r3, #7
 800f74e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800f750:	4b0c      	ldr	r3, [pc, #48]	; (800f784 <__NVIC_SetPriorityGrouping+0x44>)
 800f752:	68db      	ldr	r3, [r3, #12]
 800f754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800f756:	68ba      	ldr	r2, [r7, #8]
 800f758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800f75c:	4013      	ands	r3, r2
 800f75e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800f768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800f76c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800f772:	4a04      	ldr	r2, [pc, #16]	; (800f784 <__NVIC_SetPriorityGrouping+0x44>)
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	60d3      	str	r3, [r2, #12]
}
 800f778:	bf00      	nop
 800f77a:	3714      	adds	r7, #20
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr
 800f784:	e000ed00 	.word	0xe000ed00

0800f788 <__NVIC_GetPriorityGrouping>:
{
 800f788:	b480      	push	{r7}
 800f78a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800f78c:	4b04      	ldr	r3, [pc, #16]	; (800f7a0 <__NVIC_GetPriorityGrouping+0x18>)
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	0a1b      	lsrs	r3, r3, #8
 800f792:	f003 0307 	and.w	r3, r3, #7
}
 800f796:	4618      	mov	r0, r3
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr
 800f7a0:	e000ed00 	.word	0xe000ed00

0800f7a4 <__NVIC_EnableIRQ>:
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f7ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	db0b      	blt.n	800f7ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800f7b6:	79fb      	ldrb	r3, [r7, #7]
 800f7b8:	f003 021f 	and.w	r2, r3, #31
 800f7bc:	4907      	ldr	r1, [pc, #28]	; (800f7dc <__NVIC_EnableIRQ+0x38>)
 800f7be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7c2:	095b      	lsrs	r3, r3, #5
 800f7c4:	2001      	movs	r0, #1
 800f7c6:	fa00 f202 	lsl.w	r2, r0, r2
 800f7ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f7ce:	bf00      	nop
 800f7d0:	370c      	adds	r7, #12
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d8:	4770      	bx	lr
 800f7da:	bf00      	nop
 800f7dc:	e000e100 	.word	0xe000e100

0800f7e0 <__NVIC_SetPriority>:
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b083      	sub	sp, #12
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	6039      	str	r1, [r7, #0]
 800f7ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f7ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	db0a      	blt.n	800f80a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	b2da      	uxtb	r2, r3
 800f7f8:	490c      	ldr	r1, [pc, #48]	; (800f82c <__NVIC_SetPriority+0x4c>)
 800f7fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7fe:	0112      	lsls	r2, r2, #4
 800f800:	b2d2      	uxtb	r2, r2
 800f802:	440b      	add	r3, r1
 800f804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800f808:	e00a      	b.n	800f820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	b2da      	uxtb	r2, r3
 800f80e:	4908      	ldr	r1, [pc, #32]	; (800f830 <__NVIC_SetPriority+0x50>)
 800f810:	79fb      	ldrb	r3, [r7, #7]
 800f812:	f003 030f 	and.w	r3, r3, #15
 800f816:	3b04      	subs	r3, #4
 800f818:	0112      	lsls	r2, r2, #4
 800f81a:	b2d2      	uxtb	r2, r2
 800f81c:	440b      	add	r3, r1
 800f81e:	761a      	strb	r2, [r3, #24]
}
 800f820:	bf00      	nop
 800f822:	370c      	adds	r7, #12
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr
 800f82c:	e000e100 	.word	0xe000e100
 800f830:	e000ed00 	.word	0xe000ed00

0800f834 <NVIC_EncodePriority>:
{
 800f834:	b480      	push	{r7}
 800f836:	b089      	sub	sp, #36	; 0x24
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f003 0307 	and.w	r3, r3, #7
 800f846:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800f848:	69fb      	ldr	r3, [r7, #28]
 800f84a:	f1c3 0307 	rsb	r3, r3, #7
 800f84e:	2b04      	cmp	r3, #4
 800f850:	bf28      	it	cs
 800f852:	2304      	movcs	r3, #4
 800f854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800f856:	69fb      	ldr	r3, [r7, #28]
 800f858:	3304      	adds	r3, #4
 800f85a:	2b06      	cmp	r3, #6
 800f85c:	d902      	bls.n	800f864 <NVIC_EncodePriority+0x30>
 800f85e:	69fb      	ldr	r3, [r7, #28]
 800f860:	3b03      	subs	r3, #3
 800f862:	e000      	b.n	800f866 <NVIC_EncodePriority+0x32>
 800f864:	2300      	movs	r3, #0
 800f866:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f868:	f04f 32ff 	mov.w	r2, #4294967295
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	fa02 f303 	lsl.w	r3, r2, r3
 800f872:	43da      	mvns	r2, r3
 800f874:	68bb      	ldr	r3, [r7, #8]
 800f876:	401a      	ands	r2, r3
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800f87c:	f04f 31ff 	mov.w	r1, #4294967295
 800f880:	697b      	ldr	r3, [r7, #20]
 800f882:	fa01 f303 	lsl.w	r3, r1, r3
 800f886:	43d9      	mvns	r1, r3
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800f88c:	4313      	orrs	r3, r2
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3724      	adds	r7, #36	; 0x24
 800f892:	46bd      	mov	sp, r7
 800f894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f898:	4770      	bx	lr

0800f89a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b082      	sub	sp, #8
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800f8a2:	6878      	ldr	r0, [r7, #4]
 800f8a4:	f7ff ff4c 	bl	800f740 <__NVIC_SetPriorityGrouping>
}
 800f8a8:	bf00      	nop
 800f8aa:	3708      	adds	r7, #8
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b086      	sub	sp, #24
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	60b9      	str	r1, [r7, #8]
 800f8ba:	607a      	str	r2, [r7, #4]
 800f8bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800f8be:	2300      	movs	r3, #0
 800f8c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800f8c2:	f7ff ff61 	bl	800f788 <__NVIC_GetPriorityGrouping>
 800f8c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800f8c8:	687a      	ldr	r2, [r7, #4]
 800f8ca:	68b9      	ldr	r1, [r7, #8]
 800f8cc:	6978      	ldr	r0, [r7, #20]
 800f8ce:	f7ff ffb1 	bl	800f834 <NVIC_EncodePriority>
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8d8:	4611      	mov	r1, r2
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7ff ff80 	bl	800f7e0 <__NVIC_SetPriority>
}
 800f8e0:	bf00      	nop
 800f8e2:	3718      	adds	r7, #24
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	bd80      	pop	{r7, pc}

0800f8e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800f8f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7ff ff54 	bl	800f7a4 <__NVIC_EnableIRQ>
}
 800f8fc:	bf00      	nop
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d101      	bne.n	800f916 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800f912:	2301      	movs	r3, #1
 800f914:	e00e      	b.n	800f934 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	795b      	ldrb	r3, [r3, #5]
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d105      	bne.n	800f92c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2200      	movs	r2, #0
 800f924:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7fd fa4c 	bl	800cdc4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2201      	movs	r2, #1
 800f930:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800f932:	2300      	movs	r3, #0
}
 800f934:	4618      	mov	r0, r3
 800f936:	3708      	adds	r7, #8
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b086      	sub	sp, #24
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800f944:	2300      	movs	r3, #0
 800f946:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800f948:	f7fe fc54 	bl	800e1f4 <HAL_GetTick>
 800f94c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d101      	bne.n	800f958 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800f954:	2301      	movs	r3, #1
 800f956:	e099      	b.n	800fa8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2202      	movs	r2, #2
 800f95c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	681b      	ldr	r3, [r3, #0]
 800f972:	f022 0201 	bic.w	r2, r2, #1
 800f976:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f978:	e00f      	b.n	800f99a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800f97a:	f7fe fc3b 	bl	800e1f4 <HAL_GetTick>
 800f97e:	4602      	mov	r2, r0
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	1ad3      	subs	r3, r2, r3
 800f984:	2b05      	cmp	r3, #5
 800f986:	d908      	bls.n	800f99a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	2220      	movs	r2, #32
 800f98c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2203      	movs	r2, #3
 800f992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800f996:	2303      	movs	r3, #3
 800f998:	e078      	b.n	800fa8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f003 0301 	and.w	r3, r3, #1
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d1e8      	bne.n	800f97a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800f9b0:	697a      	ldr	r2, [r7, #20]
 800f9b2:	4b38      	ldr	r3, [pc, #224]	; (800fa94 <HAL_DMA_Init+0x158>)
 800f9b4:	4013      	ands	r3, r2
 800f9b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	685a      	ldr	r2, [r3, #4]
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	689b      	ldr	r3, [r3, #8]
 800f9c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f9c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800f9d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	699b      	ldr	r3, [r3, #24]
 800f9d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800f9de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6a1b      	ldr	r3, [r3, #32]
 800f9e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800f9e6:	697a      	ldr	r2, [r7, #20]
 800f9e8:	4313      	orrs	r3, r2
 800f9ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f0:	2b04      	cmp	r3, #4
 800f9f2:	d107      	bne.n	800fa04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	697a      	ldr	r2, [r7, #20]
 800fa00:	4313      	orrs	r3, r2
 800fa02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	697a      	ldr	r2, [r7, #20]
 800fa0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	695b      	ldr	r3, [r3, #20]
 800fa12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	f023 0307 	bic.w	r3, r3, #7
 800fa1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa20:	697a      	ldr	r2, [r7, #20]
 800fa22:	4313      	orrs	r3, r2
 800fa24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa2a:	2b04      	cmp	r3, #4
 800fa2c:	d117      	bne.n	800fa5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa32:	697a      	ldr	r2, [r7, #20]
 800fa34:	4313      	orrs	r3, r2
 800fa36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d00e      	beq.n	800fa5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800fa40:	6878      	ldr	r0, [r7, #4]
 800fa42:	f000 fa6f 	bl	800ff24 <DMA_CheckFifoParam>
 800fa46:	4603      	mov	r3, r0
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d008      	beq.n	800fa5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2240      	movs	r2, #64	; 0x40
 800fa50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2201      	movs	r2, #1
 800fa56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e016      	b.n	800fa8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	697a      	ldr	r2, [r7, #20]
 800fa64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800fa66:	6878      	ldr	r0, [r7, #4]
 800fa68:	f000 fa26 	bl	800feb8 <DMA_CalcBaseAndBitshift>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fa74:	223f      	movs	r2, #63	; 0x3f
 800fa76:	409a      	lsls	r2, r3
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2200      	movs	r2, #0
 800fa80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	2201      	movs	r2, #1
 800fa86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800fa8a:	2300      	movs	r3, #0
}
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3718      	adds	r7, #24
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	f010803f 	.word	0xf010803f

0800fa98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b086      	sub	sp, #24
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	607a      	str	r2, [r7, #4]
 800faa4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800faa6:	2300      	movs	r3, #0
 800faa8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d101      	bne.n	800fabe <HAL_DMA_Start_IT+0x26>
 800faba:	2302      	movs	r3, #2
 800fabc:	e040      	b.n	800fb40 <HAL_DMA_Start_IT+0xa8>
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2201      	movs	r2, #1
 800fac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800facc:	b2db      	uxtb	r3, r3
 800face:	2b01      	cmp	r3, #1
 800fad0:	d12f      	bne.n	800fb32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2202      	movs	r2, #2
 800fad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2200      	movs	r2, #0
 800fade:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800fae0:	683b      	ldr	r3, [r7, #0]
 800fae2:	687a      	ldr	r2, [r7, #4]
 800fae4:	68b9      	ldr	r1, [r7, #8]
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f000 f9b8 	bl	800fe5c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800faf0:	223f      	movs	r2, #63	; 0x3f
 800faf2:	409a      	lsls	r2, r3
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	681a      	ldr	r2, [r3, #0]
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f042 0216 	orr.w	r2, r2, #22
 800fb06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d007      	beq.n	800fb20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	681a      	ldr	r2, [r3, #0]
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f042 0208 	orr.w	r2, r2, #8
 800fb1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	681a      	ldr	r2, [r3, #0]
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	f042 0201 	orr.w	r2, r2, #1
 800fb2e:	601a      	str	r2, [r3, #0]
 800fb30:	e005      	b.n	800fb3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	2200      	movs	r2, #0
 800fb36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800fb3a:	2302      	movs	r3, #2
 800fb3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800fb3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	3718      	adds	r7, #24
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd80      	pop	{r7, pc}

0800fb48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b086      	sub	sp, #24
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800fb50:	2300      	movs	r3, #0
 800fb52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800fb54:	4b8e      	ldr	r3, [pc, #568]	; (800fd90 <HAL_DMA_IRQHandler+0x248>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	4a8e      	ldr	r2, [pc, #568]	; (800fd94 <HAL_DMA_IRQHandler+0x24c>)
 800fb5a:	fba2 2303 	umull	r2, r3, r2, r3
 800fb5e:	0a9b      	lsrs	r3, r3, #10
 800fb60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb72:	2208      	movs	r2, #8
 800fb74:	409a      	lsls	r2, r3
 800fb76:	68fb      	ldr	r3, [r7, #12]
 800fb78:	4013      	ands	r3, r2
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	d01a      	beq.n	800fbb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	f003 0304 	and.w	r3, r3, #4
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d013      	beq.n	800fbb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	681b      	ldr	r3, [r3, #0]
 800fb90:	681a      	ldr	r2, [r3, #0]
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	f022 0204 	bic.w	r2, r2, #4
 800fb9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fba0:	2208      	movs	r2, #8
 800fba2:	409a      	lsls	r2, r3
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbac:	f043 0201 	orr.w	r2, r3, #1
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbb8:	2201      	movs	r2, #1
 800fbba:	409a      	lsls	r2, r3
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	4013      	ands	r3, r2
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d012      	beq.n	800fbea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	695b      	ldr	r3, [r3, #20]
 800fbca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d00b      	beq.n	800fbea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	409a      	lsls	r2, r3
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fbe2:	f043 0202 	orr.w	r2, r3, #2
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fbee:	2204      	movs	r2, #4
 800fbf0:	409a      	lsls	r2, r3
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	4013      	ands	r3, r2
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d012      	beq.n	800fc20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	f003 0302 	and.w	r3, r3, #2
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00b      	beq.n	800fc20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc0c:	2204      	movs	r2, #4
 800fc0e:	409a      	lsls	r2, r3
 800fc10:	693b      	ldr	r3, [r7, #16]
 800fc12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fc18:	f043 0204 	orr.w	r2, r3, #4
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc24:	2210      	movs	r2, #16
 800fc26:	409a      	lsls	r2, r3
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	4013      	ands	r3, r2
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d043      	beq.n	800fcb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f003 0308 	and.w	r3, r3, #8
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d03c      	beq.n	800fcb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fc42:	2210      	movs	r2, #16
 800fc44:	409a      	lsls	r2, r3
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d018      	beq.n	800fc8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d108      	bne.n	800fc78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d024      	beq.n	800fcb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	4798      	blx	r3
 800fc76:	e01f      	b.n	800fcb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d01b      	beq.n	800fcb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fc84:	6878      	ldr	r0, [r7, #4]
 800fc86:	4798      	blx	r3
 800fc88:	e016      	b.n	800fcb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d107      	bne.n	800fca8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	681a      	ldr	r2, [r3, #0]
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f022 0208 	bic.w	r2, r2, #8
 800fca6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d003      	beq.n	800fcb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcbc:	2220      	movs	r2, #32
 800fcbe:	409a      	lsls	r2, r3
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	4013      	ands	r3, r2
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	f000 808f 	beq.w	800fde8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f003 0310 	and.w	r3, r3, #16
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	f000 8087 	beq.w	800fde8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fcde:	2220      	movs	r2, #32
 800fce0:	409a      	lsls	r2, r3
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	2b05      	cmp	r3, #5
 800fcf0:	d136      	bne.n	800fd60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	681a      	ldr	r2, [r3, #0]
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f022 0216 	bic.w	r2, r2, #22
 800fd00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	695a      	ldr	r2, [r3, #20]
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800fd10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d103      	bne.n	800fd22 <HAL_DMA_IRQHandler+0x1da>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d007      	beq.n	800fd32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	681a      	ldr	r2, [r3, #0]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f022 0208 	bic.w	r2, r2, #8
 800fd30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd36:	223f      	movs	r2, #63	; 0x3f
 800fd38:	409a      	lsls	r2, r3
 800fd3a:	693b      	ldr	r3, [r7, #16]
 800fd3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2201      	movs	r2, #1
 800fd42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d07e      	beq.n	800fe54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fd5a:	6878      	ldr	r0, [r7, #4]
 800fd5c:	4798      	blx	r3
        }
        return;
 800fd5e:	e079      	b.n	800fe54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d01d      	beq.n	800fdaa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d10d      	bne.n	800fd98 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d031      	beq.n	800fde8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	4798      	blx	r3
 800fd8c:	e02c      	b.n	800fde8 <HAL_DMA_IRQHandler+0x2a0>
 800fd8e:	bf00      	nop
 800fd90:	20000020 	.word	0x20000020
 800fd94:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d023      	beq.n	800fde8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	4798      	blx	r3
 800fda8:	e01e      	b.n	800fde8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d10f      	bne.n	800fdd8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	681a      	ldr	r2, [r3, #0]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f022 0210 	bic.w	r2, r2, #16
 800fdc6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2201      	movs	r2, #1
 800fdcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fddc:	2b00      	cmp	r3, #0
 800fdde:	d003      	beq.n	800fde8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fde4:	6878      	ldr	r0, [r7, #4]
 800fde6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d032      	beq.n	800fe56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fdf4:	f003 0301 	and.w	r3, r3, #1
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d022      	beq.n	800fe42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2205      	movs	r2, #5
 800fe00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f022 0201 	bic.w	r2, r2, #1
 800fe12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800fe14:	68bb      	ldr	r3, [r7, #8]
 800fe16:	3301      	adds	r3, #1
 800fe18:	60bb      	str	r3, [r7, #8]
 800fe1a:	697a      	ldr	r2, [r7, #20]
 800fe1c:	429a      	cmp	r2, r3
 800fe1e:	d307      	bcc.n	800fe30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	f003 0301 	and.w	r3, r3, #1
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d1f2      	bne.n	800fe14 <HAL_DMA_IRQHandler+0x2cc>
 800fe2e:	e000      	b.n	800fe32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800fe30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2201      	movs	r2, #1
 800fe36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d005      	beq.n	800fe56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe4e:	6878      	ldr	r0, [r7, #4]
 800fe50:	4798      	blx	r3
 800fe52:	e000      	b.n	800fe56 <HAL_DMA_IRQHandler+0x30e>
        return;
 800fe54:	bf00      	nop
    }
  }
}
 800fe56:	3718      	adds	r7, #24
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b085      	sub	sp, #20
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	60b9      	str	r1, [r7, #8]
 800fe66:	607a      	str	r2, [r7, #4]
 800fe68:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	681a      	ldr	r2, [r3, #0]
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800fe78:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	683a      	ldr	r2, [r7, #0]
 800fe80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	689b      	ldr	r3, [r3, #8]
 800fe86:	2b40      	cmp	r3, #64	; 0x40
 800fe88:	d108      	bne.n	800fe9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800fe8a:	68fb      	ldr	r3, [r7, #12]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	68ba      	ldr	r2, [r7, #8]
 800fe98:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800fe9a:	e007      	b.n	800feac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	68ba      	ldr	r2, [r7, #8]
 800fea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	687a      	ldr	r2, [r7, #4]
 800feaa:	60da      	str	r2, [r3, #12]
}
 800feac:	bf00      	nop
 800feae:	3714      	adds	r7, #20
 800feb0:	46bd      	mov	sp, r7
 800feb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb6:	4770      	bx	lr

0800feb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800feb8:	b480      	push	{r7}
 800feba:	b085      	sub	sp, #20
 800febc:	af00      	add	r7, sp, #0
 800febe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	b2db      	uxtb	r3, r3
 800fec6:	3b10      	subs	r3, #16
 800fec8:	4a14      	ldr	r2, [pc, #80]	; (800ff1c <DMA_CalcBaseAndBitshift+0x64>)
 800feca:	fba2 2303 	umull	r2, r3, r2, r3
 800fece:	091b      	lsrs	r3, r3, #4
 800fed0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800fed2:	4a13      	ldr	r2, [pc, #76]	; (800ff20 <DMA_CalcBaseAndBitshift+0x68>)
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	4413      	add	r3, r2
 800fed8:	781b      	ldrb	r3, [r3, #0]
 800feda:	461a      	mov	r2, r3
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2b03      	cmp	r3, #3
 800fee4:	d909      	bls.n	800fefa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800feee:	f023 0303 	bic.w	r3, r3, #3
 800fef2:	1d1a      	adds	r2, r3, #4
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	659a      	str	r2, [r3, #88]	; 0x58
 800fef8:	e007      	b.n	800ff0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ff02:	f023 0303 	bic.w	r3, r3, #3
 800ff06:	687a      	ldr	r2, [r7, #4]
 800ff08:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3714      	adds	r7, #20
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr
 800ff1a:	bf00      	nop
 800ff1c:	aaaaaaab 	.word	0xaaaaaaab
 800ff20:	0801cc98 	.word	0x0801cc98

0800ff24 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ff24:	b480      	push	{r7}
 800ff26:	b085      	sub	sp, #20
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ff2c:	2300      	movs	r3, #0
 800ff2e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff34:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	699b      	ldr	r3, [r3, #24]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d11f      	bne.n	800ff7e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ff3e:	68bb      	ldr	r3, [r7, #8]
 800ff40:	2b03      	cmp	r3, #3
 800ff42:	d856      	bhi.n	800fff2 <DMA_CheckFifoParam+0xce>
 800ff44:	a201      	add	r2, pc, #4	; (adr r2, 800ff4c <DMA_CheckFifoParam+0x28>)
 800ff46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff4a:	bf00      	nop
 800ff4c:	0800ff5d 	.word	0x0800ff5d
 800ff50:	0800ff6f 	.word	0x0800ff6f
 800ff54:	0800ff5d 	.word	0x0800ff5d
 800ff58:	0800fff3 	.word	0x0800fff3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d046      	beq.n	800fff6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ff68:	2301      	movs	r3, #1
 800ff6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ff6c:	e043      	b.n	800fff6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ff76:	d140      	bne.n	800fffa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ff7c:	e03d      	b.n	800fffa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	699b      	ldr	r3, [r3, #24]
 800ff82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ff86:	d121      	bne.n	800ffcc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ff88:	68bb      	ldr	r3, [r7, #8]
 800ff8a:	2b03      	cmp	r3, #3
 800ff8c:	d837      	bhi.n	800fffe <DMA_CheckFifoParam+0xda>
 800ff8e:	a201      	add	r2, pc, #4	; (adr r2, 800ff94 <DMA_CheckFifoParam+0x70>)
 800ff90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff94:	0800ffa5 	.word	0x0800ffa5
 800ff98:	0800ffab 	.word	0x0800ffab
 800ff9c:	0800ffa5 	.word	0x0800ffa5
 800ffa0:	0800ffbd 	.word	0x0800ffbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	73fb      	strb	r3, [r7, #15]
      break;
 800ffa8:	e030      	b.n	801000c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d025      	beq.n	8010002 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ffba:	e022      	b.n	8010002 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ffc4:	d11f      	bne.n	8010006 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ffca:	e01c      	b.n	8010006 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ffcc:	68bb      	ldr	r3, [r7, #8]
 800ffce:	2b02      	cmp	r3, #2
 800ffd0:	d903      	bls.n	800ffda <DMA_CheckFifoParam+0xb6>
 800ffd2:	68bb      	ldr	r3, [r7, #8]
 800ffd4:	2b03      	cmp	r3, #3
 800ffd6:	d003      	beq.n	800ffe0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800ffd8:	e018      	b.n	801000c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800ffda:	2301      	movs	r3, #1
 800ffdc:	73fb      	strb	r3, [r7, #15]
      break;
 800ffde:	e015      	b.n	801000c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00e      	beq.n	801000a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ffec:	2301      	movs	r3, #1
 800ffee:	73fb      	strb	r3, [r7, #15]
      break;
 800fff0:	e00b      	b.n	801000a <DMA_CheckFifoParam+0xe6>
      break;
 800fff2:	bf00      	nop
 800fff4:	e00a      	b.n	801000c <DMA_CheckFifoParam+0xe8>
      break;
 800fff6:	bf00      	nop
 800fff8:	e008      	b.n	801000c <DMA_CheckFifoParam+0xe8>
      break;
 800fffa:	bf00      	nop
 800fffc:	e006      	b.n	801000c <DMA_CheckFifoParam+0xe8>
      break;
 800fffe:	bf00      	nop
 8010000:	e004      	b.n	801000c <DMA_CheckFifoParam+0xe8>
      break;
 8010002:	bf00      	nop
 8010004:	e002      	b.n	801000c <DMA_CheckFifoParam+0xe8>
      break;   
 8010006:	bf00      	nop
 8010008:	e000      	b.n	801000c <DMA_CheckFifoParam+0xe8>
      break;
 801000a:	bf00      	nop
    }
  } 
  
  return status; 
 801000c:	7bfb      	ldrb	r3, [r7, #15]
}
 801000e:	4618      	mov	r0, r3
 8010010:	3714      	adds	r7, #20
 8010012:	46bd      	mov	sp, r7
 8010014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010018:	4770      	bx	lr
 801001a:	bf00      	nop

0801001c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801001c:	b480      	push	{r7}
 801001e:	b089      	sub	sp, #36	; 0x24
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8010026:	2300      	movs	r3, #0
 8010028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 801002a:	2300      	movs	r3, #0
 801002c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 801002e:	2300      	movs	r3, #0
 8010030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8010032:	2300      	movs	r3, #0
 8010034:	61fb      	str	r3, [r7, #28]
 8010036:	e16b      	b.n	8010310 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8010038:	2201      	movs	r2, #1
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	fa02 f303 	lsl.w	r3, r2, r3
 8010040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	697a      	ldr	r2, [r7, #20]
 8010048:	4013      	ands	r3, r2
 801004a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801004c:	693a      	ldr	r2, [r7, #16]
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	429a      	cmp	r2, r3
 8010052:	f040 815a 	bne.w	801030a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	685b      	ldr	r3, [r3, #4]
 801005a:	f003 0303 	and.w	r3, r3, #3
 801005e:	2b01      	cmp	r3, #1
 8010060:	d005      	beq.n	801006e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 801006a:	2b02      	cmp	r3, #2
 801006c:	d130      	bne.n	80100d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	689b      	ldr	r3, [r3, #8]
 8010072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	005b      	lsls	r3, r3, #1
 8010078:	2203      	movs	r2, #3
 801007a:	fa02 f303 	lsl.w	r3, r2, r3
 801007e:	43db      	mvns	r3, r3
 8010080:	69ba      	ldr	r2, [r7, #24]
 8010082:	4013      	ands	r3, r2
 8010084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	68da      	ldr	r2, [r3, #12]
 801008a:	69fb      	ldr	r3, [r7, #28]
 801008c:	005b      	lsls	r3, r3, #1
 801008e:	fa02 f303 	lsl.w	r3, r2, r3
 8010092:	69ba      	ldr	r2, [r7, #24]
 8010094:	4313      	orrs	r3, r2
 8010096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	69ba      	ldr	r2, [r7, #24]
 801009c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	685b      	ldr	r3, [r3, #4]
 80100a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80100a4:	2201      	movs	r2, #1
 80100a6:	69fb      	ldr	r3, [r7, #28]
 80100a8:	fa02 f303 	lsl.w	r3, r2, r3
 80100ac:	43db      	mvns	r3, r3
 80100ae:	69ba      	ldr	r2, [r7, #24]
 80100b0:	4013      	ands	r3, r2
 80100b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80100b4:	683b      	ldr	r3, [r7, #0]
 80100b6:	685b      	ldr	r3, [r3, #4]
 80100b8:	091b      	lsrs	r3, r3, #4
 80100ba:	f003 0201 	and.w	r2, r3, #1
 80100be:	69fb      	ldr	r3, [r7, #28]
 80100c0:	fa02 f303 	lsl.w	r3, r2, r3
 80100c4:	69ba      	ldr	r2, [r7, #24]
 80100c6:	4313      	orrs	r3, r2
 80100c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	69ba      	ldr	r2, [r7, #24]
 80100ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	685b      	ldr	r3, [r3, #4]
 80100d4:	f003 0303 	and.w	r3, r3, #3
 80100d8:	2b03      	cmp	r3, #3
 80100da:	d017      	beq.n	801010c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	68db      	ldr	r3, [r3, #12]
 80100e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	005b      	lsls	r3, r3, #1
 80100e6:	2203      	movs	r2, #3
 80100e8:	fa02 f303 	lsl.w	r3, r2, r3
 80100ec:	43db      	mvns	r3, r3
 80100ee:	69ba      	ldr	r2, [r7, #24]
 80100f0:	4013      	ands	r3, r2
 80100f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	689a      	ldr	r2, [r3, #8]
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	005b      	lsls	r3, r3, #1
 80100fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010100:	69ba      	ldr	r2, [r7, #24]
 8010102:	4313      	orrs	r3, r2
 8010104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	69ba      	ldr	r2, [r7, #24]
 801010a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	f003 0303 	and.w	r3, r3, #3
 8010114:	2b02      	cmp	r3, #2
 8010116:	d123      	bne.n	8010160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010118:	69fb      	ldr	r3, [r7, #28]
 801011a:	08da      	lsrs	r2, r3, #3
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	3208      	adds	r2, #8
 8010120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	f003 0307 	and.w	r3, r3, #7
 801012c:	009b      	lsls	r3, r3, #2
 801012e:	220f      	movs	r2, #15
 8010130:	fa02 f303 	lsl.w	r3, r2, r3
 8010134:	43db      	mvns	r3, r3
 8010136:	69ba      	ldr	r2, [r7, #24]
 8010138:	4013      	ands	r3, r2
 801013a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	691a      	ldr	r2, [r3, #16]
 8010140:	69fb      	ldr	r3, [r7, #28]
 8010142:	f003 0307 	and.w	r3, r3, #7
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	fa02 f303 	lsl.w	r3, r2, r3
 801014c:	69ba      	ldr	r2, [r7, #24]
 801014e:	4313      	orrs	r3, r2
 8010150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010152:	69fb      	ldr	r3, [r7, #28]
 8010154:	08da      	lsrs	r2, r3, #3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	3208      	adds	r2, #8
 801015a:	69b9      	ldr	r1, [r7, #24]
 801015c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8010166:	69fb      	ldr	r3, [r7, #28]
 8010168:	005b      	lsls	r3, r3, #1
 801016a:	2203      	movs	r2, #3
 801016c:	fa02 f303 	lsl.w	r3, r2, r3
 8010170:	43db      	mvns	r3, r3
 8010172:	69ba      	ldr	r2, [r7, #24]
 8010174:	4013      	ands	r3, r2
 8010176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	f003 0203 	and.w	r2, r3, #3
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	005b      	lsls	r3, r3, #1
 8010184:	fa02 f303 	lsl.w	r3, r2, r3
 8010188:	69ba      	ldr	r2, [r7, #24]
 801018a:	4313      	orrs	r3, r2
 801018c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	69ba      	ldr	r2, [r7, #24]
 8010192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	685b      	ldr	r3, [r3, #4]
 8010198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801019c:	2b00      	cmp	r3, #0
 801019e:	f000 80b4 	beq.w	801030a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80101a2:	2300      	movs	r3, #0
 80101a4:	60fb      	str	r3, [r7, #12]
 80101a6:	4b60      	ldr	r3, [pc, #384]	; (8010328 <HAL_GPIO_Init+0x30c>)
 80101a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101aa:	4a5f      	ldr	r2, [pc, #380]	; (8010328 <HAL_GPIO_Init+0x30c>)
 80101ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80101b0:	6453      	str	r3, [r2, #68]	; 0x44
 80101b2:	4b5d      	ldr	r3, [pc, #372]	; (8010328 <HAL_GPIO_Init+0x30c>)
 80101b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80101ba:	60fb      	str	r3, [r7, #12]
 80101bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80101be:	4a5b      	ldr	r2, [pc, #364]	; (801032c <HAL_GPIO_Init+0x310>)
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	089b      	lsrs	r3, r3, #2
 80101c4:	3302      	adds	r3, #2
 80101c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80101ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80101cc:	69fb      	ldr	r3, [r7, #28]
 80101ce:	f003 0303 	and.w	r3, r3, #3
 80101d2:	009b      	lsls	r3, r3, #2
 80101d4:	220f      	movs	r2, #15
 80101d6:	fa02 f303 	lsl.w	r3, r2, r3
 80101da:	43db      	mvns	r3, r3
 80101dc:	69ba      	ldr	r2, [r7, #24]
 80101de:	4013      	ands	r3, r2
 80101e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	4a52      	ldr	r2, [pc, #328]	; (8010330 <HAL_GPIO_Init+0x314>)
 80101e6:	4293      	cmp	r3, r2
 80101e8:	d02b      	beq.n	8010242 <HAL_GPIO_Init+0x226>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	4a51      	ldr	r2, [pc, #324]	; (8010334 <HAL_GPIO_Init+0x318>)
 80101ee:	4293      	cmp	r3, r2
 80101f0:	d025      	beq.n	801023e <HAL_GPIO_Init+0x222>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4a50      	ldr	r2, [pc, #320]	; (8010338 <HAL_GPIO_Init+0x31c>)
 80101f6:	4293      	cmp	r3, r2
 80101f8:	d01f      	beq.n	801023a <HAL_GPIO_Init+0x21e>
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	4a4f      	ldr	r2, [pc, #316]	; (801033c <HAL_GPIO_Init+0x320>)
 80101fe:	4293      	cmp	r3, r2
 8010200:	d019      	beq.n	8010236 <HAL_GPIO_Init+0x21a>
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	4a4e      	ldr	r2, [pc, #312]	; (8010340 <HAL_GPIO_Init+0x324>)
 8010206:	4293      	cmp	r3, r2
 8010208:	d013      	beq.n	8010232 <HAL_GPIO_Init+0x216>
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	4a4d      	ldr	r2, [pc, #308]	; (8010344 <HAL_GPIO_Init+0x328>)
 801020e:	4293      	cmp	r3, r2
 8010210:	d00d      	beq.n	801022e <HAL_GPIO_Init+0x212>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4a4c      	ldr	r2, [pc, #304]	; (8010348 <HAL_GPIO_Init+0x32c>)
 8010216:	4293      	cmp	r3, r2
 8010218:	d007      	beq.n	801022a <HAL_GPIO_Init+0x20e>
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	4a4b      	ldr	r2, [pc, #300]	; (801034c <HAL_GPIO_Init+0x330>)
 801021e:	4293      	cmp	r3, r2
 8010220:	d101      	bne.n	8010226 <HAL_GPIO_Init+0x20a>
 8010222:	2307      	movs	r3, #7
 8010224:	e00e      	b.n	8010244 <HAL_GPIO_Init+0x228>
 8010226:	2308      	movs	r3, #8
 8010228:	e00c      	b.n	8010244 <HAL_GPIO_Init+0x228>
 801022a:	2306      	movs	r3, #6
 801022c:	e00a      	b.n	8010244 <HAL_GPIO_Init+0x228>
 801022e:	2305      	movs	r3, #5
 8010230:	e008      	b.n	8010244 <HAL_GPIO_Init+0x228>
 8010232:	2304      	movs	r3, #4
 8010234:	e006      	b.n	8010244 <HAL_GPIO_Init+0x228>
 8010236:	2303      	movs	r3, #3
 8010238:	e004      	b.n	8010244 <HAL_GPIO_Init+0x228>
 801023a:	2302      	movs	r3, #2
 801023c:	e002      	b.n	8010244 <HAL_GPIO_Init+0x228>
 801023e:	2301      	movs	r3, #1
 8010240:	e000      	b.n	8010244 <HAL_GPIO_Init+0x228>
 8010242:	2300      	movs	r3, #0
 8010244:	69fa      	ldr	r2, [r7, #28]
 8010246:	f002 0203 	and.w	r2, r2, #3
 801024a:	0092      	lsls	r2, r2, #2
 801024c:	4093      	lsls	r3, r2
 801024e:	69ba      	ldr	r2, [r7, #24]
 8010250:	4313      	orrs	r3, r2
 8010252:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010254:	4935      	ldr	r1, [pc, #212]	; (801032c <HAL_GPIO_Init+0x310>)
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	089b      	lsrs	r3, r3, #2
 801025a:	3302      	adds	r3, #2
 801025c:	69ba      	ldr	r2, [r7, #24]
 801025e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8010262:	4b3b      	ldr	r3, [pc, #236]	; (8010350 <HAL_GPIO_Init+0x334>)
 8010264:	689b      	ldr	r3, [r3, #8]
 8010266:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	43db      	mvns	r3, r3
 801026c:	69ba      	ldr	r2, [r7, #24]
 801026e:	4013      	ands	r3, r2
 8010270:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801027a:	2b00      	cmp	r3, #0
 801027c:	d003      	beq.n	8010286 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 801027e:	69ba      	ldr	r2, [r7, #24]
 8010280:	693b      	ldr	r3, [r7, #16]
 8010282:	4313      	orrs	r3, r2
 8010284:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8010286:	4a32      	ldr	r2, [pc, #200]	; (8010350 <HAL_GPIO_Init+0x334>)
 8010288:	69bb      	ldr	r3, [r7, #24]
 801028a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801028c:	4b30      	ldr	r3, [pc, #192]	; (8010350 <HAL_GPIO_Init+0x334>)
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	43db      	mvns	r3, r3
 8010296:	69ba      	ldr	r2, [r7, #24]
 8010298:	4013      	ands	r3, r2
 801029a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	685b      	ldr	r3, [r3, #4]
 80102a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d003      	beq.n	80102b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80102a8:	69ba      	ldr	r2, [r7, #24]
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	4313      	orrs	r3, r2
 80102ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80102b0:	4a27      	ldr	r2, [pc, #156]	; (8010350 <HAL_GPIO_Init+0x334>)
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80102b6:	4b26      	ldr	r3, [pc, #152]	; (8010350 <HAL_GPIO_Init+0x334>)
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	43db      	mvns	r3, r3
 80102c0:	69ba      	ldr	r2, [r7, #24]
 80102c2:	4013      	ands	r3, r2
 80102c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	685b      	ldr	r3, [r3, #4]
 80102ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d003      	beq.n	80102da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80102d2:	69ba      	ldr	r2, [r7, #24]
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	4313      	orrs	r3, r2
 80102d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80102da:	4a1d      	ldr	r2, [pc, #116]	; (8010350 <HAL_GPIO_Init+0x334>)
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80102e0:	4b1b      	ldr	r3, [pc, #108]	; (8010350 <HAL_GPIO_Init+0x334>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80102e6:	693b      	ldr	r3, [r7, #16]
 80102e8:	43db      	mvns	r3, r3
 80102ea:	69ba      	ldr	r2, [r7, #24]
 80102ec:	4013      	ands	r3, r2
 80102ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	685b      	ldr	r3, [r3, #4]
 80102f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d003      	beq.n	8010304 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80102fc:	69ba      	ldr	r2, [r7, #24]
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	4313      	orrs	r3, r2
 8010302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8010304:	4a12      	ldr	r2, [pc, #72]	; (8010350 <HAL_GPIO_Init+0x334>)
 8010306:	69bb      	ldr	r3, [r7, #24]
 8010308:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	3301      	adds	r3, #1
 801030e:	61fb      	str	r3, [r7, #28]
 8010310:	69fb      	ldr	r3, [r7, #28]
 8010312:	2b0f      	cmp	r3, #15
 8010314:	f67f ae90 	bls.w	8010038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8010318:	bf00      	nop
 801031a:	bf00      	nop
 801031c:	3724      	adds	r7, #36	; 0x24
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr
 8010326:	bf00      	nop
 8010328:	40023800 	.word	0x40023800
 801032c:	40013800 	.word	0x40013800
 8010330:	40020000 	.word	0x40020000
 8010334:	40020400 	.word	0x40020400
 8010338:	40020800 	.word	0x40020800
 801033c:	40020c00 	.word	0x40020c00
 8010340:	40021000 	.word	0x40021000
 8010344:	40021400 	.word	0x40021400
 8010348:	40021800 	.word	0x40021800
 801034c:	40021c00 	.word	0x40021c00
 8010350:	40013c00 	.word	0x40013c00

08010354 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8010354:	b480      	push	{r7}
 8010356:	b085      	sub	sp, #20
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
 801035c:	460b      	mov	r3, r1
 801035e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	691a      	ldr	r2, [r3, #16]
 8010364:	887b      	ldrh	r3, [r7, #2]
 8010366:	4013      	ands	r3, r2
 8010368:	2b00      	cmp	r3, #0
 801036a:	d002      	beq.n	8010372 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801036c:	2301      	movs	r3, #1
 801036e:	73fb      	strb	r3, [r7, #15]
 8010370:	e001      	b.n	8010376 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8010372:	2300      	movs	r3, #0
 8010374:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8010376:	7bfb      	ldrb	r3, [r7, #15]
}
 8010378:	4618      	mov	r0, r3
 801037a:	3714      	adds	r7, #20
 801037c:	46bd      	mov	sp, r7
 801037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010382:	4770      	bx	lr

08010384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010384:	b480      	push	{r7}
 8010386:	b083      	sub	sp, #12
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
 801038c:	460b      	mov	r3, r1
 801038e:	807b      	strh	r3, [r7, #2]
 8010390:	4613      	mov	r3, r2
 8010392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8010394:	787b      	ldrb	r3, [r7, #1]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d003      	beq.n	80103a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801039a:	887a      	ldrh	r2, [r7, #2]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80103a0:	e003      	b.n	80103aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80103a2:	887b      	ldrh	r3, [r7, #2]
 80103a4:	041a      	lsls	r2, r3, #16
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	619a      	str	r2, [r3, #24]
}
 80103aa:	bf00      	nop
 80103ac:	370c      	adds	r7, #12
 80103ae:	46bd      	mov	sp, r7
 80103b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b4:	4770      	bx	lr
	...

080103b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	4603      	mov	r3, r0
 80103c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80103c2:	4b08      	ldr	r3, [pc, #32]	; (80103e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80103c4:	695a      	ldr	r2, [r3, #20]
 80103c6:	88fb      	ldrh	r3, [r7, #6]
 80103c8:	4013      	ands	r3, r2
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d006      	beq.n	80103dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80103ce:	4a05      	ldr	r2, [pc, #20]	; (80103e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80103d0:	88fb      	ldrh	r3, [r7, #6]
 80103d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80103d4:	88fb      	ldrh	r3, [r7, #6]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f002 ffe9 	bl	80133ae <HAL_GPIO_EXTI_Callback>
  }
}
 80103dc:	bf00      	nop
 80103de:	3708      	adds	r7, #8
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}
 80103e4:	40013c00 	.word	0x40013c00

080103e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b084      	sub	sp, #16
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d101      	bne.n	80103fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80103f6:	2301      	movs	r3, #1
 80103f8:	e12b      	b.n	8010652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010400:	b2db      	uxtb	r3, r3
 8010402:	2b00      	cmp	r3, #0
 8010404:	d106      	bne.n	8010414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	2200      	movs	r2, #0
 801040a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f7fc fea6 	bl	800d160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2224      	movs	r2, #36	; 0x24
 8010418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	681a      	ldr	r2, [r3, #0]
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f022 0201 	bic.w	r2, r2, #1
 801042a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801043a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	681a      	ldr	r2, [r3, #0]
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801044a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 801044c:	f000 fd7e 	bl	8010f4c <HAL_RCC_GetPCLK1Freq>
 8010450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	685b      	ldr	r3, [r3, #4]
 8010456:	4a81      	ldr	r2, [pc, #516]	; (801065c <HAL_I2C_Init+0x274>)
 8010458:	4293      	cmp	r3, r2
 801045a:	d807      	bhi.n	801046c <HAL_I2C_Init+0x84>
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	4a80      	ldr	r2, [pc, #512]	; (8010660 <HAL_I2C_Init+0x278>)
 8010460:	4293      	cmp	r3, r2
 8010462:	bf94      	ite	ls
 8010464:	2301      	movls	r3, #1
 8010466:	2300      	movhi	r3, #0
 8010468:	b2db      	uxtb	r3, r3
 801046a:	e006      	b.n	801047a <HAL_I2C_Init+0x92>
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	4a7d      	ldr	r2, [pc, #500]	; (8010664 <HAL_I2C_Init+0x27c>)
 8010470:	4293      	cmp	r3, r2
 8010472:	bf94      	ite	ls
 8010474:	2301      	movls	r3, #1
 8010476:	2300      	movhi	r3, #0
 8010478:	b2db      	uxtb	r3, r3
 801047a:	2b00      	cmp	r3, #0
 801047c:	d001      	beq.n	8010482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 801047e:	2301      	movs	r3, #1
 8010480:	e0e7      	b.n	8010652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	4a78      	ldr	r2, [pc, #480]	; (8010668 <HAL_I2C_Init+0x280>)
 8010486:	fba2 2303 	umull	r2, r3, r2, r3
 801048a:	0c9b      	lsrs	r3, r3, #18
 801048c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	685b      	ldr	r3, [r3, #4]
 8010494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	68ba      	ldr	r2, [r7, #8]
 801049e:	430a      	orrs	r2, r1
 80104a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	6a1b      	ldr	r3, [r3, #32]
 80104a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	4a6a      	ldr	r2, [pc, #424]	; (801065c <HAL_I2C_Init+0x274>)
 80104b2:	4293      	cmp	r3, r2
 80104b4:	d802      	bhi.n	80104bc <HAL_I2C_Init+0xd4>
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	3301      	adds	r3, #1
 80104ba:	e009      	b.n	80104d0 <HAL_I2C_Init+0xe8>
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80104c2:	fb02 f303 	mul.w	r3, r2, r3
 80104c6:	4a69      	ldr	r2, [pc, #420]	; (801066c <HAL_I2C_Init+0x284>)
 80104c8:	fba2 2303 	umull	r2, r3, r2, r3
 80104cc:	099b      	lsrs	r3, r3, #6
 80104ce:	3301      	adds	r3, #1
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	6812      	ldr	r2, [r2, #0]
 80104d4:	430b      	orrs	r3, r1
 80104d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	69db      	ldr	r3, [r3, #28]
 80104de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80104e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	685b      	ldr	r3, [r3, #4]
 80104ea:	495c      	ldr	r1, [pc, #368]	; (801065c <HAL_I2C_Init+0x274>)
 80104ec:	428b      	cmp	r3, r1
 80104ee:	d819      	bhi.n	8010524 <HAL_I2C_Init+0x13c>
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	1e59      	subs	r1, r3, #1
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	685b      	ldr	r3, [r3, #4]
 80104f8:	005b      	lsls	r3, r3, #1
 80104fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80104fe:	1c59      	adds	r1, r3, #1
 8010500:	f640 73fc 	movw	r3, #4092	; 0xffc
 8010504:	400b      	ands	r3, r1
 8010506:	2b00      	cmp	r3, #0
 8010508:	d00a      	beq.n	8010520 <HAL_I2C_Init+0x138>
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	1e59      	subs	r1, r3, #1
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	005b      	lsls	r3, r3, #1
 8010514:	fbb1 f3f3 	udiv	r3, r1, r3
 8010518:	3301      	adds	r3, #1
 801051a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801051e:	e051      	b.n	80105c4 <HAL_I2C_Init+0x1dc>
 8010520:	2304      	movs	r3, #4
 8010522:	e04f      	b.n	80105c4 <HAL_I2C_Init+0x1dc>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	689b      	ldr	r3, [r3, #8]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d111      	bne.n	8010550 <HAL_I2C_Init+0x168>
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	1e58      	subs	r0, r3, #1
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	6859      	ldr	r1, [r3, #4]
 8010534:	460b      	mov	r3, r1
 8010536:	005b      	lsls	r3, r3, #1
 8010538:	440b      	add	r3, r1
 801053a:	fbb0 f3f3 	udiv	r3, r0, r3
 801053e:	3301      	adds	r3, #1
 8010540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010544:	2b00      	cmp	r3, #0
 8010546:	bf0c      	ite	eq
 8010548:	2301      	moveq	r3, #1
 801054a:	2300      	movne	r3, #0
 801054c:	b2db      	uxtb	r3, r3
 801054e:	e012      	b.n	8010576 <HAL_I2C_Init+0x18e>
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	1e58      	subs	r0, r3, #1
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6859      	ldr	r1, [r3, #4]
 8010558:	460b      	mov	r3, r1
 801055a:	009b      	lsls	r3, r3, #2
 801055c:	440b      	add	r3, r1
 801055e:	0099      	lsls	r1, r3, #2
 8010560:	440b      	add	r3, r1
 8010562:	fbb0 f3f3 	udiv	r3, r0, r3
 8010566:	3301      	adds	r3, #1
 8010568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801056c:	2b00      	cmp	r3, #0
 801056e:	bf0c      	ite	eq
 8010570:	2301      	moveq	r3, #1
 8010572:	2300      	movne	r3, #0
 8010574:	b2db      	uxtb	r3, r3
 8010576:	2b00      	cmp	r3, #0
 8010578:	d001      	beq.n	801057e <HAL_I2C_Init+0x196>
 801057a:	2301      	movs	r3, #1
 801057c:	e022      	b.n	80105c4 <HAL_I2C_Init+0x1dc>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	689b      	ldr	r3, [r3, #8]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d10e      	bne.n	80105a4 <HAL_I2C_Init+0x1bc>
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	1e58      	subs	r0, r3, #1
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6859      	ldr	r1, [r3, #4]
 801058e:	460b      	mov	r3, r1
 8010590:	005b      	lsls	r3, r3, #1
 8010592:	440b      	add	r3, r1
 8010594:	fbb0 f3f3 	udiv	r3, r0, r3
 8010598:	3301      	adds	r3, #1
 801059a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801059e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80105a2:	e00f      	b.n	80105c4 <HAL_I2C_Init+0x1dc>
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	1e58      	subs	r0, r3, #1
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	6859      	ldr	r1, [r3, #4]
 80105ac:	460b      	mov	r3, r1
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	440b      	add	r3, r1
 80105b2:	0099      	lsls	r1, r3, #2
 80105b4:	440b      	add	r3, r1
 80105b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80105ba:	3301      	adds	r3, #1
 80105bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80105c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80105c4:	6879      	ldr	r1, [r7, #4]
 80105c6:	6809      	ldr	r1, [r1, #0]
 80105c8:	4313      	orrs	r3, r2
 80105ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	69da      	ldr	r2, [r3, #28]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	6a1b      	ldr	r3, [r3, #32]
 80105de:	431a      	orrs	r2, r3
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	430a      	orrs	r2, r1
 80105e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	689b      	ldr	r3, [r3, #8]
 80105ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80105f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	6911      	ldr	r1, [r2, #16]
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	68d2      	ldr	r2, [r2, #12]
 80105fe:	4311      	orrs	r1, r2
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	6812      	ldr	r2, [r2, #0]
 8010604:	430b      	orrs	r3, r1
 8010606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	695a      	ldr	r2, [r3, #20]
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	699b      	ldr	r3, [r3, #24]
 801061a:	431a      	orrs	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	430a      	orrs	r2, r1
 8010622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	f042 0201 	orr.w	r2, r2, #1
 8010632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2200      	movs	r2, #0
 8010638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	2220      	movs	r2, #32
 801063e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2200      	movs	r2, #0
 801064c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8010650:	2300      	movs	r3, #0
}
 8010652:	4618      	mov	r0, r3
 8010654:	3710      	adds	r7, #16
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}
 801065a:	bf00      	nop
 801065c:	000186a0 	.word	0x000186a0
 8010660:	001e847f 	.word	0x001e847f
 8010664:	003d08ff 	.word	0x003d08ff
 8010668:	431bde83 	.word	0x431bde83
 801066c:	10624dd3 	.word	0x10624dd3

08010670 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010670:	b580      	push	{r7, lr}
 8010672:	b086      	sub	sp, #24
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d101      	bne.n	8010682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801067e:	2301      	movs	r3, #1
 8010680:	e267      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f003 0301 	and.w	r3, r3, #1
 801068a:	2b00      	cmp	r3, #0
 801068c:	d075      	beq.n	801077a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801068e:	4b88      	ldr	r3, [pc, #544]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	f003 030c 	and.w	r3, r3, #12
 8010696:	2b04      	cmp	r3, #4
 8010698:	d00c      	beq.n	80106b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801069a:	4b85      	ldr	r3, [pc, #532]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 801069c:	689b      	ldr	r3, [r3, #8]
 801069e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80106a2:	2b08      	cmp	r3, #8
 80106a4:	d112      	bne.n	80106cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80106a6:	4b82      	ldr	r3, [pc, #520]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80106a8:	685b      	ldr	r3, [r3, #4]
 80106aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80106ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80106b2:	d10b      	bne.n	80106cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80106b4:	4b7e      	ldr	r3, [pc, #504]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d05b      	beq.n	8010778 <HAL_RCC_OscConfig+0x108>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	685b      	ldr	r3, [r3, #4]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d157      	bne.n	8010778 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80106c8:	2301      	movs	r3, #1
 80106ca:	e242      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106d4:	d106      	bne.n	80106e4 <HAL_RCC_OscConfig+0x74>
 80106d6:	4b76      	ldr	r3, [pc, #472]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4a75      	ldr	r2, [pc, #468]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80106dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80106e0:	6013      	str	r3, [r2, #0]
 80106e2:	e01d      	b.n	8010720 <HAL_RCC_OscConfig+0xb0>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	685b      	ldr	r3, [r3, #4]
 80106e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80106ec:	d10c      	bne.n	8010708 <HAL_RCC_OscConfig+0x98>
 80106ee:	4b70      	ldr	r3, [pc, #448]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	4a6f      	ldr	r2, [pc, #444]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80106f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80106f8:	6013      	str	r3, [r2, #0]
 80106fa:	4b6d      	ldr	r3, [pc, #436]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	4a6c      	ldr	r2, [pc, #432]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 8010700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010704:	6013      	str	r3, [r2, #0]
 8010706:	e00b      	b.n	8010720 <HAL_RCC_OscConfig+0xb0>
 8010708:	4b69      	ldr	r3, [pc, #420]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4a68      	ldr	r2, [pc, #416]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 801070e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010712:	6013      	str	r3, [r2, #0]
 8010714:	4b66      	ldr	r3, [pc, #408]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	4a65      	ldr	r2, [pc, #404]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 801071a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801071e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d013      	beq.n	8010750 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010728:	f7fd fd64 	bl	800e1f4 <HAL_GetTick>
 801072c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801072e:	e008      	b.n	8010742 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010730:	f7fd fd60 	bl	800e1f4 <HAL_GetTick>
 8010734:	4602      	mov	r2, r0
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	1ad3      	subs	r3, r2, r3
 801073a:	2b64      	cmp	r3, #100	; 0x64
 801073c:	d901      	bls.n	8010742 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801073e:	2303      	movs	r3, #3
 8010740:	e207      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010742:	4b5b      	ldr	r3, [pc, #364]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801074a:	2b00      	cmp	r3, #0
 801074c:	d0f0      	beq.n	8010730 <HAL_RCC_OscConfig+0xc0>
 801074e:	e014      	b.n	801077a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010750:	f7fd fd50 	bl	800e1f4 <HAL_GetTick>
 8010754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010756:	e008      	b.n	801076a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010758:	f7fd fd4c 	bl	800e1f4 <HAL_GetTick>
 801075c:	4602      	mov	r2, r0
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	1ad3      	subs	r3, r2, r3
 8010762:	2b64      	cmp	r3, #100	; 0x64
 8010764:	d901      	bls.n	801076a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010766:	2303      	movs	r3, #3
 8010768:	e1f3      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801076a:	4b51      	ldr	r3, [pc, #324]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010772:	2b00      	cmp	r3, #0
 8010774:	d1f0      	bne.n	8010758 <HAL_RCC_OscConfig+0xe8>
 8010776:	e000      	b.n	801077a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	f003 0302 	and.w	r3, r3, #2
 8010782:	2b00      	cmp	r3, #0
 8010784:	d063      	beq.n	801084e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010786:	4b4a      	ldr	r3, [pc, #296]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 8010788:	689b      	ldr	r3, [r3, #8]
 801078a:	f003 030c 	and.w	r3, r3, #12
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00b      	beq.n	80107aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010792:	4b47      	ldr	r3, [pc, #284]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 8010794:	689b      	ldr	r3, [r3, #8]
 8010796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801079a:	2b08      	cmp	r3, #8
 801079c:	d11c      	bne.n	80107d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801079e:	4b44      	ldr	r3, [pc, #272]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80107a0:	685b      	ldr	r3, [r3, #4]
 80107a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d116      	bne.n	80107d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80107aa:	4b41      	ldr	r3, [pc, #260]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	f003 0302 	and.w	r3, r3, #2
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d005      	beq.n	80107c2 <HAL_RCC_OscConfig+0x152>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	68db      	ldr	r3, [r3, #12]
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	d001      	beq.n	80107c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80107be:	2301      	movs	r3, #1
 80107c0:	e1c7      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80107c2:	4b3b      	ldr	r3, [pc, #236]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	691b      	ldr	r3, [r3, #16]
 80107ce:	00db      	lsls	r3, r3, #3
 80107d0:	4937      	ldr	r1, [pc, #220]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 80107d2:	4313      	orrs	r3, r2
 80107d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80107d6:	e03a      	b.n	801084e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d020      	beq.n	8010822 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80107e0:	4b34      	ldr	r3, [pc, #208]	; (80108b4 <HAL_RCC_OscConfig+0x244>)
 80107e2:	2201      	movs	r2, #1
 80107e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107e6:	f7fd fd05 	bl	800e1f4 <HAL_GetTick>
 80107ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80107ec:	e008      	b.n	8010800 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80107ee:	f7fd fd01 	bl	800e1f4 <HAL_GetTick>
 80107f2:	4602      	mov	r2, r0
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	1ad3      	subs	r3, r2, r3
 80107f8:	2b02      	cmp	r3, #2
 80107fa:	d901      	bls.n	8010800 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80107fc:	2303      	movs	r3, #3
 80107fe:	e1a8      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010800:	4b2b      	ldr	r3, [pc, #172]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	f003 0302 	and.w	r3, r3, #2
 8010808:	2b00      	cmp	r3, #0
 801080a:	d0f0      	beq.n	80107ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801080c:	4b28      	ldr	r3, [pc, #160]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	691b      	ldr	r3, [r3, #16]
 8010818:	00db      	lsls	r3, r3, #3
 801081a:	4925      	ldr	r1, [pc, #148]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 801081c:	4313      	orrs	r3, r2
 801081e:	600b      	str	r3, [r1, #0]
 8010820:	e015      	b.n	801084e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010822:	4b24      	ldr	r3, [pc, #144]	; (80108b4 <HAL_RCC_OscConfig+0x244>)
 8010824:	2200      	movs	r2, #0
 8010826:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010828:	f7fd fce4 	bl	800e1f4 <HAL_GetTick>
 801082c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801082e:	e008      	b.n	8010842 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8010830:	f7fd fce0 	bl	800e1f4 <HAL_GetTick>
 8010834:	4602      	mov	r2, r0
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	1ad3      	subs	r3, r2, r3
 801083a:	2b02      	cmp	r3, #2
 801083c:	d901      	bls.n	8010842 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801083e:	2303      	movs	r3, #3
 8010840:	e187      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8010842:	4b1b      	ldr	r3, [pc, #108]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	f003 0302 	and.w	r3, r3, #2
 801084a:	2b00      	cmp	r3, #0
 801084c:	d1f0      	bne.n	8010830 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	f003 0308 	and.w	r3, r3, #8
 8010856:	2b00      	cmp	r3, #0
 8010858:	d036      	beq.n	80108c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	695b      	ldr	r3, [r3, #20]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d016      	beq.n	8010890 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8010862:	4b15      	ldr	r3, [pc, #84]	; (80108b8 <HAL_RCC_OscConfig+0x248>)
 8010864:	2201      	movs	r2, #1
 8010866:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010868:	f7fd fcc4 	bl	800e1f4 <HAL_GetTick>
 801086c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801086e:	e008      	b.n	8010882 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010870:	f7fd fcc0 	bl	800e1f4 <HAL_GetTick>
 8010874:	4602      	mov	r2, r0
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	1ad3      	subs	r3, r2, r3
 801087a:	2b02      	cmp	r3, #2
 801087c:	d901      	bls.n	8010882 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801087e:	2303      	movs	r3, #3
 8010880:	e167      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010882:	4b0b      	ldr	r3, [pc, #44]	; (80108b0 <HAL_RCC_OscConfig+0x240>)
 8010884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010886:	f003 0302 	and.w	r3, r3, #2
 801088a:	2b00      	cmp	r3, #0
 801088c:	d0f0      	beq.n	8010870 <HAL_RCC_OscConfig+0x200>
 801088e:	e01b      	b.n	80108c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010890:	4b09      	ldr	r3, [pc, #36]	; (80108b8 <HAL_RCC_OscConfig+0x248>)
 8010892:	2200      	movs	r2, #0
 8010894:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010896:	f7fd fcad 	bl	800e1f4 <HAL_GetTick>
 801089a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801089c:	e00e      	b.n	80108bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801089e:	f7fd fca9 	bl	800e1f4 <HAL_GetTick>
 80108a2:	4602      	mov	r2, r0
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	1ad3      	subs	r3, r2, r3
 80108a8:	2b02      	cmp	r3, #2
 80108aa:	d907      	bls.n	80108bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80108ac:	2303      	movs	r3, #3
 80108ae:	e150      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
 80108b0:	40023800 	.word	0x40023800
 80108b4:	42470000 	.word	0x42470000
 80108b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80108bc:	4b88      	ldr	r3, [pc, #544]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 80108be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80108c0:	f003 0302 	and.w	r3, r3, #2
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d1ea      	bne.n	801089e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f003 0304 	and.w	r3, r3, #4
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	f000 8097 	beq.w	8010a04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80108d6:	2300      	movs	r3, #0
 80108d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80108da:	4b81      	ldr	r3, [pc, #516]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 80108dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d10f      	bne.n	8010906 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80108e6:	2300      	movs	r3, #0
 80108e8:	60bb      	str	r3, [r7, #8]
 80108ea:	4b7d      	ldr	r3, [pc, #500]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 80108ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108ee:	4a7c      	ldr	r2, [pc, #496]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 80108f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108f4:	6413      	str	r3, [r2, #64]	; 0x40
 80108f6:	4b7a      	ldr	r3, [pc, #488]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 80108f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80108fe:	60bb      	str	r3, [r7, #8]
 8010900:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010902:	2301      	movs	r3, #1
 8010904:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010906:	4b77      	ldr	r3, [pc, #476]	; (8010ae4 <HAL_RCC_OscConfig+0x474>)
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801090e:	2b00      	cmp	r3, #0
 8010910:	d118      	bne.n	8010944 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010912:	4b74      	ldr	r3, [pc, #464]	; (8010ae4 <HAL_RCC_OscConfig+0x474>)
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a73      	ldr	r2, [pc, #460]	; (8010ae4 <HAL_RCC_OscConfig+0x474>)
 8010918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801091c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801091e:	f7fd fc69 	bl	800e1f4 <HAL_GetTick>
 8010922:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010924:	e008      	b.n	8010938 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010926:	f7fd fc65 	bl	800e1f4 <HAL_GetTick>
 801092a:	4602      	mov	r2, r0
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	1ad3      	subs	r3, r2, r3
 8010930:	2b02      	cmp	r3, #2
 8010932:	d901      	bls.n	8010938 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8010934:	2303      	movs	r3, #3
 8010936:	e10c      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010938:	4b6a      	ldr	r3, [pc, #424]	; (8010ae4 <HAL_RCC_OscConfig+0x474>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010940:	2b00      	cmp	r3, #0
 8010942:	d0f0      	beq.n	8010926 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	689b      	ldr	r3, [r3, #8]
 8010948:	2b01      	cmp	r3, #1
 801094a:	d106      	bne.n	801095a <HAL_RCC_OscConfig+0x2ea>
 801094c:	4b64      	ldr	r3, [pc, #400]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 801094e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010950:	4a63      	ldr	r2, [pc, #396]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010952:	f043 0301 	orr.w	r3, r3, #1
 8010956:	6713      	str	r3, [r2, #112]	; 0x70
 8010958:	e01c      	b.n	8010994 <HAL_RCC_OscConfig+0x324>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	689b      	ldr	r3, [r3, #8]
 801095e:	2b05      	cmp	r3, #5
 8010960:	d10c      	bne.n	801097c <HAL_RCC_OscConfig+0x30c>
 8010962:	4b5f      	ldr	r3, [pc, #380]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010966:	4a5e      	ldr	r2, [pc, #376]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010968:	f043 0304 	orr.w	r3, r3, #4
 801096c:	6713      	str	r3, [r2, #112]	; 0x70
 801096e:	4b5c      	ldr	r3, [pc, #368]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010972:	4a5b      	ldr	r2, [pc, #364]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010974:	f043 0301 	orr.w	r3, r3, #1
 8010978:	6713      	str	r3, [r2, #112]	; 0x70
 801097a:	e00b      	b.n	8010994 <HAL_RCC_OscConfig+0x324>
 801097c:	4b58      	ldr	r3, [pc, #352]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 801097e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010980:	4a57      	ldr	r2, [pc, #348]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010982:	f023 0301 	bic.w	r3, r3, #1
 8010986:	6713      	str	r3, [r2, #112]	; 0x70
 8010988:	4b55      	ldr	r3, [pc, #340]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 801098a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801098c:	4a54      	ldr	r2, [pc, #336]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 801098e:	f023 0304 	bic.w	r3, r3, #4
 8010992:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	689b      	ldr	r3, [r3, #8]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d015      	beq.n	80109c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801099c:	f7fd fc2a 	bl	800e1f4 <HAL_GetTick>
 80109a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80109a2:	e00a      	b.n	80109ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80109a4:	f7fd fc26 	bl	800e1f4 <HAL_GetTick>
 80109a8:	4602      	mov	r2, r0
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	1ad3      	subs	r3, r2, r3
 80109ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80109b2:	4293      	cmp	r3, r2
 80109b4:	d901      	bls.n	80109ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80109b6:	2303      	movs	r3, #3
 80109b8:	e0cb      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80109ba:	4b49      	ldr	r3, [pc, #292]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 80109bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109be:	f003 0302 	and.w	r3, r3, #2
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d0ee      	beq.n	80109a4 <HAL_RCC_OscConfig+0x334>
 80109c6:	e014      	b.n	80109f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80109c8:	f7fd fc14 	bl	800e1f4 <HAL_GetTick>
 80109cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80109ce:	e00a      	b.n	80109e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80109d0:	f7fd fc10 	bl	800e1f4 <HAL_GetTick>
 80109d4:	4602      	mov	r2, r0
 80109d6:	693b      	ldr	r3, [r7, #16]
 80109d8:	1ad3      	subs	r3, r2, r3
 80109da:	f241 3288 	movw	r2, #5000	; 0x1388
 80109de:	4293      	cmp	r3, r2
 80109e0:	d901      	bls.n	80109e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80109e2:	2303      	movs	r3, #3
 80109e4:	e0b5      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80109e6:	4b3e      	ldr	r3, [pc, #248]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 80109e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109ea:	f003 0302 	and.w	r3, r3, #2
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d1ee      	bne.n	80109d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80109f2:	7dfb      	ldrb	r3, [r7, #23]
 80109f4:	2b01      	cmp	r3, #1
 80109f6:	d105      	bne.n	8010a04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80109f8:	4b39      	ldr	r3, [pc, #228]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 80109fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109fc:	4a38      	ldr	r2, [pc, #224]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 80109fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010a02:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	699b      	ldr	r3, [r3, #24]
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	f000 80a1 	beq.w	8010b50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010a0e:	4b34      	ldr	r3, [pc, #208]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010a10:	689b      	ldr	r3, [r3, #8]
 8010a12:	f003 030c 	and.w	r3, r3, #12
 8010a16:	2b08      	cmp	r3, #8
 8010a18:	d05c      	beq.n	8010ad4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	699b      	ldr	r3, [r3, #24]
 8010a1e:	2b02      	cmp	r3, #2
 8010a20:	d141      	bne.n	8010aa6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010a22:	4b31      	ldr	r3, [pc, #196]	; (8010ae8 <HAL_RCC_OscConfig+0x478>)
 8010a24:	2200      	movs	r2, #0
 8010a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010a28:	f7fd fbe4 	bl	800e1f4 <HAL_GetTick>
 8010a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a2e:	e008      	b.n	8010a42 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a30:	f7fd fbe0 	bl	800e1f4 <HAL_GetTick>
 8010a34:	4602      	mov	r2, r0
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	1ad3      	subs	r3, r2, r3
 8010a3a:	2b02      	cmp	r3, #2
 8010a3c:	d901      	bls.n	8010a42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8010a3e:	2303      	movs	r3, #3
 8010a40:	e087      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a42:	4b27      	ldr	r3, [pc, #156]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010a44:	681b      	ldr	r3, [r3, #0]
 8010a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d1f0      	bne.n	8010a30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	69da      	ldr	r2, [r3, #28]
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6a1b      	ldr	r3, [r3, #32]
 8010a56:	431a      	orrs	r2, r3
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a5c:	019b      	lsls	r3, r3, #6
 8010a5e:	431a      	orrs	r2, r3
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a64:	085b      	lsrs	r3, r3, #1
 8010a66:	3b01      	subs	r3, #1
 8010a68:	041b      	lsls	r3, r3, #16
 8010a6a:	431a      	orrs	r2, r3
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a70:	061b      	lsls	r3, r3, #24
 8010a72:	491b      	ldr	r1, [pc, #108]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010a74:	4313      	orrs	r3, r2
 8010a76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010a78:	4b1b      	ldr	r3, [pc, #108]	; (8010ae8 <HAL_RCC_OscConfig+0x478>)
 8010a7a:	2201      	movs	r2, #1
 8010a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010a7e:	f7fd fbb9 	bl	800e1f4 <HAL_GetTick>
 8010a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a84:	e008      	b.n	8010a98 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a86:	f7fd fbb5 	bl	800e1f4 <HAL_GetTick>
 8010a8a:	4602      	mov	r2, r0
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	1ad3      	subs	r3, r2, r3
 8010a90:	2b02      	cmp	r3, #2
 8010a92:	d901      	bls.n	8010a98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8010a94:	2303      	movs	r3, #3
 8010a96:	e05c      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a98:	4b11      	ldr	r3, [pc, #68]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d0f0      	beq.n	8010a86 <HAL_RCC_OscConfig+0x416>
 8010aa4:	e054      	b.n	8010b50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010aa6:	4b10      	ldr	r3, [pc, #64]	; (8010ae8 <HAL_RCC_OscConfig+0x478>)
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010aac:	f7fd fba2 	bl	800e1f4 <HAL_GetTick>
 8010ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010ab2:	e008      	b.n	8010ac6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010ab4:	f7fd fb9e 	bl	800e1f4 <HAL_GetTick>
 8010ab8:	4602      	mov	r2, r0
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	1ad3      	subs	r3, r2, r3
 8010abe:	2b02      	cmp	r3, #2
 8010ac0:	d901      	bls.n	8010ac6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8010ac2:	2303      	movs	r3, #3
 8010ac4:	e045      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010ac6:	4b06      	ldr	r3, [pc, #24]	; (8010ae0 <HAL_RCC_OscConfig+0x470>)
 8010ac8:	681b      	ldr	r3, [r3, #0]
 8010aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d1f0      	bne.n	8010ab4 <HAL_RCC_OscConfig+0x444>
 8010ad2:	e03d      	b.n	8010b50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	699b      	ldr	r3, [r3, #24]
 8010ad8:	2b01      	cmp	r3, #1
 8010ada:	d107      	bne.n	8010aec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	e038      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
 8010ae0:	40023800 	.word	0x40023800
 8010ae4:	40007000 	.word	0x40007000
 8010ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010aec:	4b1b      	ldr	r3, [pc, #108]	; (8010b5c <HAL_RCC_OscConfig+0x4ec>)
 8010aee:	685b      	ldr	r3, [r3, #4]
 8010af0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	699b      	ldr	r3, [r3, #24]
 8010af6:	2b01      	cmp	r3, #1
 8010af8:	d028      	beq.n	8010b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d121      	bne.n	8010b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d11a      	bne.n	8010b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010b16:	68fa      	ldr	r2, [r7, #12]
 8010b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010b1c:	4013      	ands	r3, r2
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010b24:	4293      	cmp	r3, r2
 8010b26:	d111      	bne.n	8010b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b32:	085b      	lsrs	r3, r3, #1
 8010b34:	3b01      	subs	r3, #1
 8010b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010b38:	429a      	cmp	r2, r3
 8010b3a:	d107      	bne.n	8010b4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010b48:	429a      	cmp	r2, r3
 8010b4a:	d001      	beq.n	8010b50 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	e000      	b.n	8010b52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3718      	adds	r7, #24
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}
 8010b5a:	bf00      	nop
 8010b5c:	40023800 	.word	0x40023800

08010b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
 8010b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d101      	bne.n	8010b74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010b70:	2301      	movs	r3, #1
 8010b72:	e0cc      	b.n	8010d0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010b74:	4b68      	ldr	r3, [pc, #416]	; (8010d18 <HAL_RCC_ClockConfig+0x1b8>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f003 0307 	and.w	r3, r3, #7
 8010b7c:	683a      	ldr	r2, [r7, #0]
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d90c      	bls.n	8010b9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b82:	4b65      	ldr	r3, [pc, #404]	; (8010d18 <HAL_RCC_ClockConfig+0x1b8>)
 8010b84:	683a      	ldr	r2, [r7, #0]
 8010b86:	b2d2      	uxtb	r2, r2
 8010b88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010b8a:	4b63      	ldr	r3, [pc, #396]	; (8010d18 <HAL_RCC_ClockConfig+0x1b8>)
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	f003 0307 	and.w	r3, r3, #7
 8010b92:	683a      	ldr	r2, [r7, #0]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d001      	beq.n	8010b9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e0b8      	b.n	8010d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	f003 0302 	and.w	r3, r3, #2
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d020      	beq.n	8010bea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	f003 0304 	and.w	r3, r3, #4
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d005      	beq.n	8010bc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010bb4:	4b59      	ldr	r3, [pc, #356]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	4a58      	ldr	r2, [pc, #352]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010bba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010bbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	f003 0308 	and.w	r3, r3, #8
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d005      	beq.n	8010bd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010bcc:	4b53      	ldr	r3, [pc, #332]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010bce:	689b      	ldr	r3, [r3, #8]
 8010bd0:	4a52      	ldr	r2, [pc, #328]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010bd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010bd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010bd8:	4b50      	ldr	r3, [pc, #320]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010bda:	689b      	ldr	r3, [r3, #8]
 8010bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	689b      	ldr	r3, [r3, #8]
 8010be4:	494d      	ldr	r1, [pc, #308]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010be6:	4313      	orrs	r3, r2
 8010be8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f003 0301 	and.w	r3, r3, #1
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d044      	beq.n	8010c80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	2b01      	cmp	r3, #1
 8010bfc:	d107      	bne.n	8010c0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010bfe:	4b47      	ldr	r3, [pc, #284]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d119      	bne.n	8010c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010c0a:	2301      	movs	r3, #1
 8010c0c:	e07f      	b.n	8010d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	685b      	ldr	r3, [r3, #4]
 8010c12:	2b02      	cmp	r3, #2
 8010c14:	d003      	beq.n	8010c1e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010c1a:	2b03      	cmp	r3, #3
 8010c1c:	d107      	bne.n	8010c2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010c1e:	4b3f      	ldr	r3, [pc, #252]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d109      	bne.n	8010c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010c2a:	2301      	movs	r3, #1
 8010c2c:	e06f      	b.n	8010d0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010c2e:	4b3b      	ldr	r3, [pc, #236]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f003 0302 	and.w	r3, r3, #2
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d101      	bne.n	8010c3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	e067      	b.n	8010d0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010c3e:	4b37      	ldr	r3, [pc, #220]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010c40:	689b      	ldr	r3, [r3, #8]
 8010c42:	f023 0203 	bic.w	r2, r3, #3
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	4934      	ldr	r1, [pc, #208]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010c50:	f7fd fad0 	bl	800e1f4 <HAL_GetTick>
 8010c54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010c56:	e00a      	b.n	8010c6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010c58:	f7fd facc 	bl	800e1f4 <HAL_GetTick>
 8010c5c:	4602      	mov	r2, r0
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	1ad3      	subs	r3, r2, r3
 8010c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c66:	4293      	cmp	r3, r2
 8010c68:	d901      	bls.n	8010c6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010c6a:	2303      	movs	r3, #3
 8010c6c:	e04f      	b.n	8010d0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010c6e:	4b2b      	ldr	r3, [pc, #172]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010c70:	689b      	ldr	r3, [r3, #8]
 8010c72:	f003 020c 	and.w	r2, r3, #12
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	009b      	lsls	r3, r3, #2
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d1eb      	bne.n	8010c58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010c80:	4b25      	ldr	r3, [pc, #148]	; (8010d18 <HAL_RCC_ClockConfig+0x1b8>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f003 0307 	and.w	r3, r3, #7
 8010c88:	683a      	ldr	r2, [r7, #0]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d20c      	bcs.n	8010ca8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010c8e:	4b22      	ldr	r3, [pc, #136]	; (8010d18 <HAL_RCC_ClockConfig+0x1b8>)
 8010c90:	683a      	ldr	r2, [r7, #0]
 8010c92:	b2d2      	uxtb	r2, r2
 8010c94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010c96:	4b20      	ldr	r3, [pc, #128]	; (8010d18 <HAL_RCC_ClockConfig+0x1b8>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f003 0307 	and.w	r3, r3, #7
 8010c9e:	683a      	ldr	r2, [r7, #0]
 8010ca0:	429a      	cmp	r2, r3
 8010ca2:	d001      	beq.n	8010ca8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010ca4:	2301      	movs	r3, #1
 8010ca6:	e032      	b.n	8010d0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	f003 0304 	and.w	r3, r3, #4
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d008      	beq.n	8010cc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010cb4:	4b19      	ldr	r3, [pc, #100]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010cb6:	689b      	ldr	r3, [r3, #8]
 8010cb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	4916      	ldr	r1, [pc, #88]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010cc2:	4313      	orrs	r3, r2
 8010cc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	f003 0308 	and.w	r3, r3, #8
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d009      	beq.n	8010ce6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010cd2:	4b12      	ldr	r3, [pc, #72]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010cd4:	689b      	ldr	r3, [r3, #8]
 8010cd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	691b      	ldr	r3, [r3, #16]
 8010cde:	00db      	lsls	r3, r3, #3
 8010ce0:	490e      	ldr	r1, [pc, #56]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010ce2:	4313      	orrs	r3, r2
 8010ce4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010ce6:	f000 f821 	bl	8010d2c <HAL_RCC_GetSysClockFreq>
 8010cea:	4602      	mov	r2, r0
 8010cec:	4b0b      	ldr	r3, [pc, #44]	; (8010d1c <HAL_RCC_ClockConfig+0x1bc>)
 8010cee:	689b      	ldr	r3, [r3, #8]
 8010cf0:	091b      	lsrs	r3, r3, #4
 8010cf2:	f003 030f 	and.w	r3, r3, #15
 8010cf6:	490a      	ldr	r1, [pc, #40]	; (8010d20 <HAL_RCC_ClockConfig+0x1c0>)
 8010cf8:	5ccb      	ldrb	r3, [r1, r3]
 8010cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8010cfe:	4a09      	ldr	r2, [pc, #36]	; (8010d24 <HAL_RCC_ClockConfig+0x1c4>)
 8010d00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010d02:	4b09      	ldr	r3, [pc, #36]	; (8010d28 <HAL_RCC_ClockConfig+0x1c8>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	4618      	mov	r0, r3
 8010d08:	f7fc fc08 	bl	800d51c <HAL_InitTick>

  return HAL_OK;
 8010d0c:	2300      	movs	r3, #0
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	40023c00 	.word	0x40023c00
 8010d1c:	40023800 	.word	0x40023800
 8010d20:	0801cc80 	.word	0x0801cc80
 8010d24:	20000020 	.word	0x20000020
 8010d28:	20000024 	.word	0x20000024

08010d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010d30:	b094      	sub	sp, #80	; 0x50
 8010d32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010d34:	2300      	movs	r3, #0
 8010d36:	647b      	str	r3, [r7, #68]	; 0x44
 8010d38:	2300      	movs	r3, #0
 8010d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8010d40:	2300      	movs	r3, #0
 8010d42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010d44:	4b79      	ldr	r3, [pc, #484]	; (8010f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8010d46:	689b      	ldr	r3, [r3, #8]
 8010d48:	f003 030c 	and.w	r3, r3, #12
 8010d4c:	2b08      	cmp	r3, #8
 8010d4e:	d00d      	beq.n	8010d6c <HAL_RCC_GetSysClockFreq+0x40>
 8010d50:	2b08      	cmp	r3, #8
 8010d52:	f200 80e1 	bhi.w	8010f18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d002      	beq.n	8010d60 <HAL_RCC_GetSysClockFreq+0x34>
 8010d5a:	2b04      	cmp	r3, #4
 8010d5c:	d003      	beq.n	8010d66 <HAL_RCC_GetSysClockFreq+0x3a>
 8010d5e:	e0db      	b.n	8010f18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010d60:	4b73      	ldr	r3, [pc, #460]	; (8010f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8010d62:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8010d64:	e0db      	b.n	8010f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010d66:	4b72      	ldr	r3, [pc, #456]	; (8010f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8010d68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010d6a:	e0d8      	b.n	8010f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010d6c:	4b6f      	ldr	r3, [pc, #444]	; (8010f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8010d6e:	685b      	ldr	r3, [r3, #4]
 8010d70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d74:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010d76:	4b6d      	ldr	r3, [pc, #436]	; (8010f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8010d78:	685b      	ldr	r3, [r3, #4]
 8010d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d063      	beq.n	8010e4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010d82:	4b6a      	ldr	r3, [pc, #424]	; (8010f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	099b      	lsrs	r3, r3, #6
 8010d88:	2200      	movs	r2, #0
 8010d8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d94:	633b      	str	r3, [r7, #48]	; 0x30
 8010d96:	2300      	movs	r3, #0
 8010d98:	637b      	str	r3, [r7, #52]	; 0x34
 8010d9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8010d9e:	4622      	mov	r2, r4
 8010da0:	462b      	mov	r3, r5
 8010da2:	f04f 0000 	mov.w	r0, #0
 8010da6:	f04f 0100 	mov.w	r1, #0
 8010daa:	0159      	lsls	r1, r3, #5
 8010dac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010db0:	0150      	lsls	r0, r2, #5
 8010db2:	4602      	mov	r2, r0
 8010db4:	460b      	mov	r3, r1
 8010db6:	4621      	mov	r1, r4
 8010db8:	1a51      	subs	r1, r2, r1
 8010dba:	6139      	str	r1, [r7, #16]
 8010dbc:	4629      	mov	r1, r5
 8010dbe:	eb63 0301 	sbc.w	r3, r3, r1
 8010dc2:	617b      	str	r3, [r7, #20]
 8010dc4:	f04f 0200 	mov.w	r2, #0
 8010dc8:	f04f 0300 	mov.w	r3, #0
 8010dcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010dd0:	4659      	mov	r1, fp
 8010dd2:	018b      	lsls	r3, r1, #6
 8010dd4:	4651      	mov	r1, sl
 8010dd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010dda:	4651      	mov	r1, sl
 8010ddc:	018a      	lsls	r2, r1, #6
 8010dde:	4651      	mov	r1, sl
 8010de0:	ebb2 0801 	subs.w	r8, r2, r1
 8010de4:	4659      	mov	r1, fp
 8010de6:	eb63 0901 	sbc.w	r9, r3, r1
 8010dea:	f04f 0200 	mov.w	r2, #0
 8010dee:	f04f 0300 	mov.w	r3, #0
 8010df2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010df6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010dfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010dfe:	4690      	mov	r8, r2
 8010e00:	4699      	mov	r9, r3
 8010e02:	4623      	mov	r3, r4
 8010e04:	eb18 0303 	adds.w	r3, r8, r3
 8010e08:	60bb      	str	r3, [r7, #8]
 8010e0a:	462b      	mov	r3, r5
 8010e0c:	eb49 0303 	adc.w	r3, r9, r3
 8010e10:	60fb      	str	r3, [r7, #12]
 8010e12:	f04f 0200 	mov.w	r2, #0
 8010e16:	f04f 0300 	mov.w	r3, #0
 8010e1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010e1e:	4629      	mov	r1, r5
 8010e20:	028b      	lsls	r3, r1, #10
 8010e22:	4621      	mov	r1, r4
 8010e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010e28:	4621      	mov	r1, r4
 8010e2a:	028a      	lsls	r2, r1, #10
 8010e2c:	4610      	mov	r0, r2
 8010e2e:	4619      	mov	r1, r3
 8010e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e32:	2200      	movs	r2, #0
 8010e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010e3c:	f7ef ff24 	bl	8000c88 <__aeabi_uldivmod>
 8010e40:	4602      	mov	r2, r0
 8010e42:	460b      	mov	r3, r1
 8010e44:	4613      	mov	r3, r2
 8010e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e48:	e058      	b.n	8010efc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010e4a:	4b38      	ldr	r3, [pc, #224]	; (8010f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8010e4c:	685b      	ldr	r3, [r3, #4]
 8010e4e:	099b      	lsrs	r3, r3, #6
 8010e50:	2200      	movs	r2, #0
 8010e52:	4618      	mov	r0, r3
 8010e54:	4611      	mov	r1, r2
 8010e56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8010e5a:	623b      	str	r3, [r7, #32]
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8010e60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010e64:	4642      	mov	r2, r8
 8010e66:	464b      	mov	r3, r9
 8010e68:	f04f 0000 	mov.w	r0, #0
 8010e6c:	f04f 0100 	mov.w	r1, #0
 8010e70:	0159      	lsls	r1, r3, #5
 8010e72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010e76:	0150      	lsls	r0, r2, #5
 8010e78:	4602      	mov	r2, r0
 8010e7a:	460b      	mov	r3, r1
 8010e7c:	4641      	mov	r1, r8
 8010e7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8010e82:	4649      	mov	r1, r9
 8010e84:	eb63 0b01 	sbc.w	fp, r3, r1
 8010e88:	f04f 0200 	mov.w	r2, #0
 8010e8c:	f04f 0300 	mov.w	r3, #0
 8010e90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8010e94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8010e98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8010e9c:	ebb2 040a 	subs.w	r4, r2, sl
 8010ea0:	eb63 050b 	sbc.w	r5, r3, fp
 8010ea4:	f04f 0200 	mov.w	r2, #0
 8010ea8:	f04f 0300 	mov.w	r3, #0
 8010eac:	00eb      	lsls	r3, r5, #3
 8010eae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010eb2:	00e2      	lsls	r2, r4, #3
 8010eb4:	4614      	mov	r4, r2
 8010eb6:	461d      	mov	r5, r3
 8010eb8:	4643      	mov	r3, r8
 8010eba:	18e3      	adds	r3, r4, r3
 8010ebc:	603b      	str	r3, [r7, #0]
 8010ebe:	464b      	mov	r3, r9
 8010ec0:	eb45 0303 	adc.w	r3, r5, r3
 8010ec4:	607b      	str	r3, [r7, #4]
 8010ec6:	f04f 0200 	mov.w	r2, #0
 8010eca:	f04f 0300 	mov.w	r3, #0
 8010ece:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010ed2:	4629      	mov	r1, r5
 8010ed4:	028b      	lsls	r3, r1, #10
 8010ed6:	4621      	mov	r1, r4
 8010ed8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010edc:	4621      	mov	r1, r4
 8010ede:	028a      	lsls	r2, r1, #10
 8010ee0:	4610      	mov	r0, r2
 8010ee2:	4619      	mov	r1, r3
 8010ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ee6:	2200      	movs	r2, #0
 8010ee8:	61bb      	str	r3, [r7, #24]
 8010eea:	61fa      	str	r2, [r7, #28]
 8010eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010ef0:	f7ef feca 	bl	8000c88 <__aeabi_uldivmod>
 8010ef4:	4602      	mov	r2, r0
 8010ef6:	460b      	mov	r3, r1
 8010ef8:	4613      	mov	r3, r2
 8010efa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010efc:	4b0b      	ldr	r3, [pc, #44]	; (8010f2c <HAL_RCC_GetSysClockFreq+0x200>)
 8010efe:	685b      	ldr	r3, [r3, #4]
 8010f00:	0c1b      	lsrs	r3, r3, #16
 8010f02:	f003 0303 	and.w	r3, r3, #3
 8010f06:	3301      	adds	r3, #1
 8010f08:	005b      	lsls	r3, r3, #1
 8010f0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8010f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010f16:	e002      	b.n	8010f1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010f18:	4b05      	ldr	r3, [pc, #20]	; (8010f30 <HAL_RCC_GetSysClockFreq+0x204>)
 8010f1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010f1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010f1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8010f20:	4618      	mov	r0, r3
 8010f22:	3750      	adds	r7, #80	; 0x50
 8010f24:	46bd      	mov	sp, r7
 8010f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010f2a:	bf00      	nop
 8010f2c:	40023800 	.word	0x40023800
 8010f30:	00f42400 	.word	0x00f42400

08010f34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010f34:	b480      	push	{r7}
 8010f36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010f38:	4b03      	ldr	r3, [pc, #12]	; (8010f48 <HAL_RCC_GetHCLKFreq+0x14>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
}
 8010f3c:	4618      	mov	r0, r3
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	20000020 	.word	0x20000020

08010f4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010f50:	f7ff fff0 	bl	8010f34 <HAL_RCC_GetHCLKFreq>
 8010f54:	4602      	mov	r2, r0
 8010f56:	4b05      	ldr	r3, [pc, #20]	; (8010f6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8010f58:	689b      	ldr	r3, [r3, #8]
 8010f5a:	0a9b      	lsrs	r3, r3, #10
 8010f5c:	f003 0307 	and.w	r3, r3, #7
 8010f60:	4903      	ldr	r1, [pc, #12]	; (8010f70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010f62:	5ccb      	ldrb	r3, [r1, r3]
 8010f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010f68:	4618      	mov	r0, r3
 8010f6a:	bd80      	pop	{r7, pc}
 8010f6c:	40023800 	.word	0x40023800
 8010f70:	0801cc90 	.word	0x0801cc90

08010f74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010f78:	f7ff ffdc 	bl	8010f34 <HAL_RCC_GetHCLKFreq>
 8010f7c:	4602      	mov	r2, r0
 8010f7e:	4b05      	ldr	r3, [pc, #20]	; (8010f94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010f80:	689b      	ldr	r3, [r3, #8]
 8010f82:	0b5b      	lsrs	r3, r3, #13
 8010f84:	f003 0307 	and.w	r3, r3, #7
 8010f88:	4903      	ldr	r1, [pc, #12]	; (8010f98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010f8a:	5ccb      	ldrb	r3, [r1, r3]
 8010f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	40023800 	.word	0x40023800
 8010f98:	0801cc90 	.word	0x0801cc90

08010f9c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b083      	sub	sp, #12
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	220f      	movs	r2, #15
 8010faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010fac:	4b12      	ldr	r3, [pc, #72]	; (8010ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8010fae:	689b      	ldr	r3, [r3, #8]
 8010fb0:	f003 0203 	and.w	r2, r3, #3
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8010fb8:	4b0f      	ldr	r3, [pc, #60]	; (8010ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8010fba:	689b      	ldr	r3, [r3, #8]
 8010fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8010fc4:	4b0c      	ldr	r3, [pc, #48]	; (8010ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8010fc6:	689b      	ldr	r3, [r3, #8]
 8010fc8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8010fd0:	4b09      	ldr	r3, [pc, #36]	; (8010ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8010fd2:	689b      	ldr	r3, [r3, #8]
 8010fd4:	08db      	lsrs	r3, r3, #3
 8010fd6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010fde:	4b07      	ldr	r3, [pc, #28]	; (8010ffc <HAL_RCC_GetClockConfig+0x60>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	f003 0207 	and.w	r2, r3, #7
 8010fe6:	683b      	ldr	r3, [r7, #0]
 8010fe8:	601a      	str	r2, [r3, #0]
}
 8010fea:	bf00      	nop
 8010fec:	370c      	adds	r7, #12
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr
 8010ff6:	bf00      	nop
 8010ff8:	40023800 	.word	0x40023800
 8010ffc:	40023c00 	.word	0x40023c00

08011000 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b082      	sub	sp, #8
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d101      	bne.n	8011012 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801100e:	2301      	movs	r3, #1
 8011010:	e01c      	b.n	801104c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	795b      	ldrb	r3, [r3, #5]
 8011016:	b2db      	uxtb	r3, r3
 8011018:	2b00      	cmp	r3, #0
 801101a:	d105      	bne.n	8011028 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2200      	movs	r2, #0
 8011020:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f7fc f9ae 	bl	800d384 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2202      	movs	r2, #2
 801102c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	681a      	ldr	r2, [r3, #0]
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	f042 0204 	orr.w	r2, r2, #4
 801103c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	2201      	movs	r2, #1
 8011042:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	2200      	movs	r2, #0
 8011048:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801104a:	2300      	movs	r3, #0
}
 801104c:	4618      	mov	r0, r3
 801104e:	3708      	adds	r7, #8
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8011054:	b580      	push	{r7, lr}
 8011056:	b084      	sub	sp, #16
 8011058:	af00      	add	r7, sp, #0
 801105a:	6078      	str	r0, [r7, #4]
 801105c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801105e:	2300      	movs	r3, #0
 8011060:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	791b      	ldrb	r3, [r3, #4]
 8011066:	2b01      	cmp	r3, #1
 8011068:	d101      	bne.n	801106e <HAL_RNG_GenerateRandomNumber+0x1a>
 801106a:	2302      	movs	r3, #2
 801106c:	e044      	b.n	80110f8 <HAL_RNG_GenerateRandomNumber+0xa4>
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	2201      	movs	r2, #1
 8011072:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	795b      	ldrb	r3, [r3, #5]
 8011078:	b2db      	uxtb	r3, r3
 801107a:	2b01      	cmp	r3, #1
 801107c:	d133      	bne.n	80110e6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2202      	movs	r2, #2
 8011082:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8011084:	f7fd f8b6 	bl	800e1f4 <HAL_GetTick>
 8011088:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801108a:	e018      	b.n	80110be <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801108c:	f7fd f8b2 	bl	800e1f4 <HAL_GetTick>
 8011090:	4602      	mov	r2, r0
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	1ad3      	subs	r3, r2, r3
 8011096:	2b02      	cmp	r3, #2
 8011098:	d911      	bls.n	80110be <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	685b      	ldr	r3, [r3, #4]
 80110a0:	f003 0301 	and.w	r3, r3, #1
 80110a4:	2b01      	cmp	r3, #1
 80110a6:	d00a      	beq.n	80110be <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	2201      	movs	r2, #1
 80110ac:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	2202      	movs	r2, #2
 80110b2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	2200      	movs	r2, #0
 80110b8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80110ba:	2301      	movs	r3, #1
 80110bc:	e01c      	b.n	80110f8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	685b      	ldr	r3, [r3, #4]
 80110c4:	f003 0301 	and.w	r3, r3, #1
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d1df      	bne.n	801108c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	689a      	ldr	r2, [r3, #8]
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	68da      	ldr	r2, [r3, #12]
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	2201      	movs	r2, #1
 80110e2:	715a      	strb	r2, [r3, #5]
 80110e4:	e004      	b.n	80110f0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2204      	movs	r2, #4
 80110ea:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80110ec:	2301      	movs	r3, #1
 80110ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	2200      	movs	r2, #0
 80110f4:	711a      	strb	r2, [r3, #4]

  return status;
 80110f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80110f8:	4618      	mov	r0, r3
 80110fa:	3710      	adds	r7, #16
 80110fc:	46bd      	mov	sp, r7
 80110fe:	bd80      	pop	{r7, pc}

08011100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011100:	b580      	push	{r7, lr}
 8011102:	b082      	sub	sp, #8
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d101      	bne.n	8011112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801110e:	2301      	movs	r3, #1
 8011110:	e07b      	b.n	801120a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011116:	2b00      	cmp	r3, #0
 8011118:	d108      	bne.n	801112c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	685b      	ldr	r3, [r3, #4]
 801111e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011122:	d009      	beq.n	8011138 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2200      	movs	r2, #0
 8011128:	61da      	str	r2, [r3, #28]
 801112a:	e005      	b.n	8011138 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2200      	movs	r2, #0
 8011130:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	2200      	movs	r2, #0
 8011136:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2200      	movs	r2, #0
 801113c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011144:	b2db      	uxtb	r3, r3
 8011146:	2b00      	cmp	r3, #0
 8011148:	d106      	bne.n	8011158 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2200      	movs	r2, #0
 801114e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f7fc f96e 	bl	800d434 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	2202      	movs	r2, #2
 801115c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	681a      	ldr	r2, [r3, #0]
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801116e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	685b      	ldr	r3, [r3, #4]
 8011174:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	689b      	ldr	r3, [r3, #8]
 801117c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8011180:	431a      	orrs	r2, r3
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801118a:	431a      	orrs	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	691b      	ldr	r3, [r3, #16]
 8011190:	f003 0302 	and.w	r3, r3, #2
 8011194:	431a      	orrs	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	695b      	ldr	r3, [r3, #20]
 801119a:	f003 0301 	and.w	r3, r3, #1
 801119e:	431a      	orrs	r2, r3
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	699b      	ldr	r3, [r3, #24]
 80111a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80111a8:	431a      	orrs	r2, r3
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	69db      	ldr	r3, [r3, #28]
 80111ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80111b2:	431a      	orrs	r2, r3
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	6a1b      	ldr	r3, [r3, #32]
 80111b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80111bc:	ea42 0103 	orr.w	r1, r2, r3
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	430a      	orrs	r2, r1
 80111ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	699b      	ldr	r3, [r3, #24]
 80111d4:	0c1b      	lsrs	r3, r3, #16
 80111d6:	f003 0104 	and.w	r1, r3, #4
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111de:	f003 0210 	and.w	r2, r3, #16
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	430a      	orrs	r2, r1
 80111e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	69da      	ldr	r2, [r3, #28]
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80111f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2200      	movs	r2, #0
 80111fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	2201      	movs	r2, #1
 8011204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8011208:	2300      	movs	r3, #0
}
 801120a:	4618      	mov	r0, r3
 801120c:	3708      	adds	r7, #8
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}

08011212 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011212:	b580      	push	{r7, lr}
 8011214:	b088      	sub	sp, #32
 8011216:	af00      	add	r7, sp, #0
 8011218:	60f8      	str	r0, [r7, #12]
 801121a:	60b9      	str	r1, [r7, #8]
 801121c:	603b      	str	r3, [r7, #0]
 801121e:	4613      	mov	r3, r2
 8011220:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011222:	2300      	movs	r3, #0
 8011224:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801122c:	2b01      	cmp	r3, #1
 801122e:	d101      	bne.n	8011234 <HAL_SPI_Transmit+0x22>
 8011230:	2302      	movs	r3, #2
 8011232:	e126      	b.n	8011482 <HAL_SPI_Transmit+0x270>
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2201      	movs	r2, #1
 8011238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801123c:	f7fc ffda 	bl	800e1f4 <HAL_GetTick>
 8011240:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8011242:	88fb      	ldrh	r3, [r7, #6]
 8011244:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801124c:	b2db      	uxtb	r3, r3
 801124e:	2b01      	cmp	r3, #1
 8011250:	d002      	beq.n	8011258 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8011252:	2302      	movs	r3, #2
 8011254:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011256:	e10b      	b.n	8011470 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8011258:	68bb      	ldr	r3, [r7, #8]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d002      	beq.n	8011264 <HAL_SPI_Transmit+0x52>
 801125e:	88fb      	ldrh	r3, [r7, #6]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d102      	bne.n	801126a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8011264:	2301      	movs	r3, #1
 8011266:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011268:	e102      	b.n	8011470 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	2203      	movs	r2, #3
 801126e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2200      	movs	r2, #0
 8011276:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	68ba      	ldr	r2, [r7, #8]
 801127c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	88fa      	ldrh	r2, [r7, #6]
 8011282:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	88fa      	ldrh	r2, [r7, #6]
 8011288:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	2200      	movs	r2, #0
 801128e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2200      	movs	r2, #0
 8011294:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	2200      	movs	r2, #0
 801129a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	2200      	movs	r2, #0
 80112a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	2200      	movs	r2, #0
 80112a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	689b      	ldr	r3, [r3, #8]
 80112ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80112b0:	d10f      	bne.n	80112d2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	681a      	ldr	r2, [r3, #0]
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80112c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	681a      	ldr	r2, [r3, #0]
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80112d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112dc:	2b40      	cmp	r3, #64	; 0x40
 80112de:	d007      	beq.n	80112f0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80112ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80112f8:	d14b      	bne.n	8011392 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	685b      	ldr	r3, [r3, #4]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d002      	beq.n	8011308 <HAL_SPI_Transmit+0xf6>
 8011302:	8afb      	ldrh	r3, [r7, #22]
 8011304:	2b01      	cmp	r3, #1
 8011306:	d13e      	bne.n	8011386 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801130c:	881a      	ldrh	r2, [r3, #0]
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011318:	1c9a      	adds	r2, r3, #2
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011322:	b29b      	uxth	r3, r3
 8011324:	3b01      	subs	r3, #1
 8011326:	b29a      	uxth	r2, r3
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801132c:	e02b      	b.n	8011386 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801132e:	68fb      	ldr	r3, [r7, #12]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	689b      	ldr	r3, [r3, #8]
 8011334:	f003 0302 	and.w	r3, r3, #2
 8011338:	2b02      	cmp	r3, #2
 801133a:	d112      	bne.n	8011362 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011340:	881a      	ldrh	r2, [r3, #0]
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801134c:	1c9a      	adds	r2, r3, #2
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011356:	b29b      	uxth	r3, r3
 8011358:	3b01      	subs	r3, #1
 801135a:	b29a      	uxth	r2, r3
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	86da      	strh	r2, [r3, #54]	; 0x36
 8011360:	e011      	b.n	8011386 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011362:	f7fc ff47 	bl	800e1f4 <HAL_GetTick>
 8011366:	4602      	mov	r2, r0
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	1ad3      	subs	r3, r2, r3
 801136c:	683a      	ldr	r2, [r7, #0]
 801136e:	429a      	cmp	r2, r3
 8011370:	d803      	bhi.n	801137a <HAL_SPI_Transmit+0x168>
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011378:	d102      	bne.n	8011380 <HAL_SPI_Transmit+0x16e>
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d102      	bne.n	8011386 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8011380:	2303      	movs	r3, #3
 8011382:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011384:	e074      	b.n	8011470 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801138a:	b29b      	uxth	r3, r3
 801138c:	2b00      	cmp	r3, #0
 801138e:	d1ce      	bne.n	801132e <HAL_SPI_Transmit+0x11c>
 8011390:	e04c      	b.n	801142c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d002      	beq.n	80113a0 <HAL_SPI_Transmit+0x18e>
 801139a:	8afb      	ldrh	r3, [r7, #22]
 801139c:	2b01      	cmp	r3, #1
 801139e:	d140      	bne.n	8011422 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	330c      	adds	r3, #12
 80113aa:	7812      	ldrb	r2, [r2, #0]
 80113ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113b2:	1c5a      	adds	r2, r3, #1
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80113bc:	b29b      	uxth	r3, r3
 80113be:	3b01      	subs	r3, #1
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80113c6:	e02c      	b.n	8011422 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	689b      	ldr	r3, [r3, #8]
 80113ce:	f003 0302 	and.w	r3, r3, #2
 80113d2:	2b02      	cmp	r3, #2
 80113d4:	d113      	bne.n	80113fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	330c      	adds	r3, #12
 80113e0:	7812      	ldrb	r2, [r2, #0]
 80113e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113e8:	1c5a      	adds	r2, r3, #1
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80113f2:	b29b      	uxth	r3, r3
 80113f4:	3b01      	subs	r3, #1
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	68fb      	ldr	r3, [r7, #12]
 80113fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80113fc:	e011      	b.n	8011422 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80113fe:	f7fc fef9 	bl	800e1f4 <HAL_GetTick>
 8011402:	4602      	mov	r2, r0
 8011404:	69bb      	ldr	r3, [r7, #24]
 8011406:	1ad3      	subs	r3, r2, r3
 8011408:	683a      	ldr	r2, [r7, #0]
 801140a:	429a      	cmp	r2, r3
 801140c:	d803      	bhi.n	8011416 <HAL_SPI_Transmit+0x204>
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011414:	d102      	bne.n	801141c <HAL_SPI_Transmit+0x20a>
 8011416:	683b      	ldr	r3, [r7, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d102      	bne.n	8011422 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 801141c:	2303      	movs	r3, #3
 801141e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8011420:	e026      	b.n	8011470 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011426:	b29b      	uxth	r3, r3
 8011428:	2b00      	cmp	r3, #0
 801142a:	d1cd      	bne.n	80113c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801142c:	69ba      	ldr	r2, [r7, #24]
 801142e:	6839      	ldr	r1, [r7, #0]
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f000 fbcb 	bl	8011bcc <SPI_EndRxTxTransaction>
 8011436:	4603      	mov	r3, r0
 8011438:	2b00      	cmp	r3, #0
 801143a:	d002      	beq.n	8011442 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2220      	movs	r2, #32
 8011440:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	689b      	ldr	r3, [r3, #8]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d10a      	bne.n	8011460 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801144a:	2300      	movs	r3, #0
 801144c:	613b      	str	r3, [r7, #16]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	68db      	ldr	r3, [r3, #12]
 8011454:	613b      	str	r3, [r7, #16]
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	689b      	ldr	r3, [r3, #8]
 801145c:	613b      	str	r3, [r7, #16]
 801145e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011464:	2b00      	cmp	r3, #0
 8011466:	d002      	beq.n	801146e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8011468:	2301      	movs	r3, #1
 801146a:	77fb      	strb	r3, [r7, #31]
 801146c:	e000      	b.n	8011470 <HAL_SPI_Transmit+0x25e>
  }

error:
 801146e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	2201      	movs	r2, #1
 8011474:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2200      	movs	r2, #0
 801147c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011480:	7ffb      	ldrb	r3, [r7, #31]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3720      	adds	r7, #32
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b088      	sub	sp, #32
 801148e:	af02      	add	r7, sp, #8
 8011490:	60f8      	str	r0, [r7, #12]
 8011492:	60b9      	str	r1, [r7, #8]
 8011494:	603b      	str	r3, [r7, #0]
 8011496:	4613      	mov	r3, r2
 8011498:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801149a:	2300      	movs	r3, #0
 801149c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	685b      	ldr	r3, [r3, #4]
 80114a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80114a6:	d112      	bne.n	80114ce <HAL_SPI_Receive+0x44>
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	689b      	ldr	r3, [r3, #8]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d10e      	bne.n	80114ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2204      	movs	r2, #4
 80114b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80114b8:	88fa      	ldrh	r2, [r7, #6]
 80114ba:	683b      	ldr	r3, [r7, #0]
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	4613      	mov	r3, r2
 80114c0:	68ba      	ldr	r2, [r7, #8]
 80114c2:	68b9      	ldr	r1, [r7, #8]
 80114c4:	68f8      	ldr	r0, [r7, #12]
 80114c6:	f000 f8f1 	bl	80116ac <HAL_SPI_TransmitReceive>
 80114ca:	4603      	mov	r3, r0
 80114cc:	e0ea      	b.n	80116a4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80114d4:	2b01      	cmp	r3, #1
 80114d6:	d101      	bne.n	80114dc <HAL_SPI_Receive+0x52>
 80114d8:	2302      	movs	r3, #2
 80114da:	e0e3      	b.n	80116a4 <HAL_SPI_Receive+0x21a>
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	2201      	movs	r2, #1
 80114e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80114e4:	f7fc fe86 	bl	800e1f4 <HAL_GetTick>
 80114e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80114f0:	b2db      	uxtb	r3, r3
 80114f2:	2b01      	cmp	r3, #1
 80114f4:	d002      	beq.n	80114fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80114f6:	2302      	movs	r3, #2
 80114f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80114fa:	e0ca      	b.n	8011692 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d002      	beq.n	8011508 <HAL_SPI_Receive+0x7e>
 8011502:	88fb      	ldrh	r3, [r7, #6]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d102      	bne.n	801150e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8011508:	2301      	movs	r3, #1
 801150a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801150c:	e0c1      	b.n	8011692 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	2204      	movs	r2, #4
 8011512:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2200      	movs	r2, #0
 801151a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	68ba      	ldr	r2, [r7, #8]
 8011520:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	88fa      	ldrh	r2, [r7, #6]
 8011526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	88fa      	ldrh	r2, [r7, #6]
 801152c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2200      	movs	r2, #0
 8011532:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	2200      	movs	r2, #0
 8011538:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2200      	movs	r2, #0
 801153e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	2200      	movs	r2, #0
 8011544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2200      	movs	r2, #0
 801154a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	689b      	ldr	r3, [r3, #8]
 8011550:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011554:	d10f      	bne.n	8011576 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	681a      	ldr	r2, [r3, #0]
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011564:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	681a      	ldr	r2, [r3, #0]
 801156c:	68fb      	ldr	r3, [r7, #12]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8011574:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011580:	2b40      	cmp	r3, #64	; 0x40
 8011582:	d007      	beq.n	8011594 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011592:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	68db      	ldr	r3, [r3, #12]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d162      	bne.n	8011662 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801159c:	e02e      	b.n	80115fc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	689b      	ldr	r3, [r3, #8]
 80115a4:	f003 0301 	and.w	r3, r3, #1
 80115a8:	2b01      	cmp	r3, #1
 80115aa:	d115      	bne.n	80115d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	f103 020c 	add.w	r2, r3, #12
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115b8:	7812      	ldrb	r2, [r2, #0]
 80115ba:	b2d2      	uxtb	r2, r2
 80115bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115c2:	1c5a      	adds	r2, r3, #1
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	3b01      	subs	r3, #1
 80115d0:	b29a      	uxth	r2, r3
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80115d6:	e011      	b.n	80115fc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115d8:	f7fc fe0c 	bl	800e1f4 <HAL_GetTick>
 80115dc:	4602      	mov	r2, r0
 80115de:	693b      	ldr	r3, [r7, #16]
 80115e0:	1ad3      	subs	r3, r2, r3
 80115e2:	683a      	ldr	r2, [r7, #0]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d803      	bhi.n	80115f0 <HAL_SPI_Receive+0x166>
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115ee:	d102      	bne.n	80115f6 <HAL_SPI_Receive+0x16c>
 80115f0:	683b      	ldr	r3, [r7, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d102      	bne.n	80115fc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80115f6:	2303      	movs	r3, #3
 80115f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80115fa:	e04a      	b.n	8011692 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011600:	b29b      	uxth	r3, r3
 8011602:	2b00      	cmp	r3, #0
 8011604:	d1cb      	bne.n	801159e <HAL_SPI_Receive+0x114>
 8011606:	e031      	b.n	801166c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	f003 0301 	and.w	r3, r3, #1
 8011612:	2b01      	cmp	r3, #1
 8011614:	d113      	bne.n	801163e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	68da      	ldr	r2, [r3, #12]
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011620:	b292      	uxth	r2, r2
 8011622:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011628:	1c9a      	adds	r2, r3, #2
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011632:	b29b      	uxth	r3, r3
 8011634:	3b01      	subs	r3, #1
 8011636:	b29a      	uxth	r2, r3
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801163c:	e011      	b.n	8011662 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801163e:	f7fc fdd9 	bl	800e1f4 <HAL_GetTick>
 8011642:	4602      	mov	r2, r0
 8011644:	693b      	ldr	r3, [r7, #16]
 8011646:	1ad3      	subs	r3, r2, r3
 8011648:	683a      	ldr	r2, [r7, #0]
 801164a:	429a      	cmp	r2, r3
 801164c:	d803      	bhi.n	8011656 <HAL_SPI_Receive+0x1cc>
 801164e:	683b      	ldr	r3, [r7, #0]
 8011650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011654:	d102      	bne.n	801165c <HAL_SPI_Receive+0x1d2>
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d102      	bne.n	8011662 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 801165c:	2303      	movs	r3, #3
 801165e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8011660:	e017      	b.n	8011692 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011666:	b29b      	uxth	r3, r3
 8011668:	2b00      	cmp	r3, #0
 801166a:	d1cd      	bne.n	8011608 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801166c:	693a      	ldr	r2, [r7, #16]
 801166e:	6839      	ldr	r1, [r7, #0]
 8011670:	68f8      	ldr	r0, [r7, #12]
 8011672:	f000 fa45 	bl	8011b00 <SPI_EndRxTransaction>
 8011676:	4603      	mov	r3, r0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d002      	beq.n	8011682 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	2220      	movs	r2, #32
 8011680:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011686:	2b00      	cmp	r3, #0
 8011688:	d002      	beq.n	8011690 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 801168a:	2301      	movs	r3, #1
 801168c:	75fb      	strb	r3, [r7, #23]
 801168e:	e000      	b.n	8011692 <HAL_SPI_Receive+0x208>
  }

error :
 8011690:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	2201      	movs	r2, #1
 8011696:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	2200      	movs	r2, #0
 801169e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80116a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3718      	adds	r7, #24
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b08c      	sub	sp, #48	; 0x30
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	607a      	str	r2, [r7, #4]
 80116b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80116ba:	2301      	movs	r3, #1
 80116bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80116be:	2300      	movs	r3, #0
 80116c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80116ca:	2b01      	cmp	r3, #1
 80116cc:	d101      	bne.n	80116d2 <HAL_SPI_TransmitReceive+0x26>
 80116ce:	2302      	movs	r3, #2
 80116d0:	e18a      	b.n	80119e8 <HAL_SPI_TransmitReceive+0x33c>
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	2201      	movs	r2, #1
 80116d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80116da:	f7fc fd8b 	bl	800e1f4 <HAL_GetTick>
 80116de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80116e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	685b      	ldr	r3, [r3, #4]
 80116ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80116f0:	887b      	ldrh	r3, [r7, #2]
 80116f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80116f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80116f8:	2b01      	cmp	r3, #1
 80116fa:	d00f      	beq.n	801171c <HAL_SPI_TransmitReceive+0x70>
 80116fc:	69fb      	ldr	r3, [r7, #28]
 80116fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011702:	d107      	bne.n	8011714 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	689b      	ldr	r3, [r3, #8]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d103      	bne.n	8011714 <HAL_SPI_TransmitReceive+0x68>
 801170c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011710:	2b04      	cmp	r3, #4
 8011712:	d003      	beq.n	801171c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8011714:	2302      	movs	r3, #2
 8011716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801171a:	e15b      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801171c:	68bb      	ldr	r3, [r7, #8]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d005      	beq.n	801172e <HAL_SPI_TransmitReceive+0x82>
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d002      	beq.n	801172e <HAL_SPI_TransmitReceive+0x82>
 8011728:	887b      	ldrh	r3, [r7, #2]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d103      	bne.n	8011736 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 801172e:	2301      	movs	r3, #1
 8011730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011734:	e14e      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801173c:	b2db      	uxtb	r3, r3
 801173e:	2b04      	cmp	r3, #4
 8011740:	d003      	beq.n	801174a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2205      	movs	r2, #5
 8011746:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	2200      	movs	r2, #0
 801174e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	887a      	ldrh	r2, [r7, #2]
 801175a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	887a      	ldrh	r2, [r7, #2]
 8011760:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	68ba      	ldr	r2, [r7, #8]
 8011766:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	887a      	ldrh	r2, [r7, #2]
 801176c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	887a      	ldrh	r2, [r7, #2]
 8011772:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2200      	movs	r2, #0
 8011778:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2200      	movs	r2, #0
 801177e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801178a:	2b40      	cmp	r3, #64	; 0x40
 801178c:	d007      	beq.n	801179e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	681a      	ldr	r2, [r3, #0]
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801179c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	68db      	ldr	r3, [r3, #12]
 80117a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80117a6:	d178      	bne.n	801189a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	685b      	ldr	r3, [r3, #4]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d002      	beq.n	80117b6 <HAL_SPI_TransmitReceive+0x10a>
 80117b0:	8b7b      	ldrh	r3, [r7, #26]
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d166      	bne.n	8011884 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117ba:	881a      	ldrh	r2, [r3, #0]
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117c6:	1c9a      	adds	r2, r3, #2
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80117d0:	b29b      	uxth	r3, r3
 80117d2:	3b01      	subs	r3, #1
 80117d4:	b29a      	uxth	r2, r3
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80117da:	e053      	b.n	8011884 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	f003 0302 	and.w	r3, r3, #2
 80117e6:	2b02      	cmp	r3, #2
 80117e8:	d11b      	bne.n	8011822 <HAL_SPI_TransmitReceive+0x176>
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d016      	beq.n	8011822 <HAL_SPI_TransmitReceive+0x176>
 80117f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117f6:	2b01      	cmp	r3, #1
 80117f8:	d113      	bne.n	8011822 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80117fe:	881a      	ldrh	r2, [r3, #0]
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801180a:	1c9a      	adds	r2, r3, #2
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011814:	b29b      	uxth	r3, r3
 8011816:	3b01      	subs	r3, #1
 8011818:	b29a      	uxth	r2, r3
 801181a:	68fb      	ldr	r3, [r7, #12]
 801181c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801181e:	2300      	movs	r3, #0
 8011820:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	689b      	ldr	r3, [r3, #8]
 8011828:	f003 0301 	and.w	r3, r3, #1
 801182c:	2b01      	cmp	r3, #1
 801182e:	d119      	bne.n	8011864 <HAL_SPI_TransmitReceive+0x1b8>
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011834:	b29b      	uxth	r3, r3
 8011836:	2b00      	cmp	r3, #0
 8011838:	d014      	beq.n	8011864 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	68da      	ldr	r2, [r3, #12]
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011844:	b292      	uxth	r2, r2
 8011846:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801184c:	1c9a      	adds	r2, r3, #2
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011856:	b29b      	uxth	r3, r3
 8011858:	3b01      	subs	r3, #1
 801185a:	b29a      	uxth	r2, r3
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011860:	2301      	movs	r3, #1
 8011862:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011864:	f7fc fcc6 	bl	800e1f4 <HAL_GetTick>
 8011868:	4602      	mov	r2, r0
 801186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186c:	1ad3      	subs	r3, r2, r3
 801186e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011870:	429a      	cmp	r2, r3
 8011872:	d807      	bhi.n	8011884 <HAL_SPI_TransmitReceive+0x1d8>
 8011874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801187a:	d003      	beq.n	8011884 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 801187c:	2303      	movs	r3, #3
 801187e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011882:	e0a7      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011888:	b29b      	uxth	r3, r3
 801188a:	2b00      	cmp	r3, #0
 801188c:	d1a6      	bne.n	80117dc <HAL_SPI_TransmitReceive+0x130>
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011892:	b29b      	uxth	r3, r3
 8011894:	2b00      	cmp	r3, #0
 8011896:	d1a1      	bne.n	80117dc <HAL_SPI_TransmitReceive+0x130>
 8011898:	e07c      	b.n	8011994 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	685b      	ldr	r3, [r3, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d002      	beq.n	80118a8 <HAL_SPI_TransmitReceive+0x1fc>
 80118a2:	8b7b      	ldrh	r3, [r7, #26]
 80118a4:	2b01      	cmp	r3, #1
 80118a6:	d16b      	bne.n	8011980 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	330c      	adds	r3, #12
 80118b2:	7812      	ldrb	r2, [r2, #0]
 80118b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ba:	1c5a      	adds	r2, r3, #1
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80118c4:	b29b      	uxth	r3, r3
 80118c6:	3b01      	subs	r3, #1
 80118c8:	b29a      	uxth	r2, r3
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80118ce:	e057      	b.n	8011980 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	689b      	ldr	r3, [r3, #8]
 80118d6:	f003 0302 	and.w	r3, r3, #2
 80118da:	2b02      	cmp	r3, #2
 80118dc:	d11c      	bne.n	8011918 <HAL_SPI_TransmitReceive+0x26c>
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d017      	beq.n	8011918 <HAL_SPI_TransmitReceive+0x26c>
 80118e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ea:	2b01      	cmp	r3, #1
 80118ec:	d114      	bne.n	8011918 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	330c      	adds	r3, #12
 80118f8:	7812      	ldrb	r2, [r2, #0]
 80118fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011900:	1c5a      	adds	r2, r3, #1
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801190a:	b29b      	uxth	r3, r3
 801190c:	3b01      	subs	r3, #1
 801190e:	b29a      	uxth	r2, r3
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011914:	2300      	movs	r3, #0
 8011916:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	689b      	ldr	r3, [r3, #8]
 801191e:	f003 0301 	and.w	r3, r3, #1
 8011922:	2b01      	cmp	r3, #1
 8011924:	d119      	bne.n	801195a <HAL_SPI_TransmitReceive+0x2ae>
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801192a:	b29b      	uxth	r3, r3
 801192c:	2b00      	cmp	r3, #0
 801192e:	d014      	beq.n	801195a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	68da      	ldr	r2, [r3, #12]
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801193a:	b2d2      	uxtb	r2, r2
 801193c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011942:	1c5a      	adds	r2, r3, #1
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801194c:	b29b      	uxth	r3, r3
 801194e:	3b01      	subs	r3, #1
 8011950:	b29a      	uxth	r2, r3
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011956:	2301      	movs	r3, #1
 8011958:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801195a:	f7fc fc4b 	bl	800e1f4 <HAL_GetTick>
 801195e:	4602      	mov	r2, r0
 8011960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011962:	1ad3      	subs	r3, r2, r3
 8011964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011966:	429a      	cmp	r2, r3
 8011968:	d803      	bhi.n	8011972 <HAL_SPI_TransmitReceive+0x2c6>
 801196a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801196c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011970:	d102      	bne.n	8011978 <HAL_SPI_TransmitReceive+0x2cc>
 8011972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011974:	2b00      	cmp	r3, #0
 8011976:	d103      	bne.n	8011980 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8011978:	2303      	movs	r3, #3
 801197a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 801197e:	e029      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011984:	b29b      	uxth	r3, r3
 8011986:	2b00      	cmp	r3, #0
 8011988:	d1a2      	bne.n	80118d0 <HAL_SPI_TransmitReceive+0x224>
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801198e:	b29b      	uxth	r3, r3
 8011990:	2b00      	cmp	r3, #0
 8011992:	d19d      	bne.n	80118d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011998:	68f8      	ldr	r0, [r7, #12]
 801199a:	f000 f917 	bl	8011bcc <SPI_EndRxTxTransaction>
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d006      	beq.n	80119b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80119a4:	2301      	movs	r3, #1
 80119a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	2220      	movs	r2, #32
 80119ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80119b0:	e010      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	689b      	ldr	r3, [r3, #8]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d10b      	bne.n	80119d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80119ba:	2300      	movs	r3, #0
 80119bc:	617b      	str	r3, [r7, #20]
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	68db      	ldr	r3, [r3, #12]
 80119c4:	617b      	str	r3, [r7, #20]
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	689b      	ldr	r3, [r3, #8]
 80119cc:	617b      	str	r3, [r7, #20]
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	e000      	b.n	80119d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80119d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2201      	movs	r2, #1
 80119d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	2200      	movs	r2, #0
 80119e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80119e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80119e8:	4618      	mov	r0, r3
 80119ea:	3730      	adds	r7, #48	; 0x30
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b088      	sub	sp, #32
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	603b      	str	r3, [r7, #0]
 80119fc:	4613      	mov	r3, r2
 80119fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011a00:	f7fc fbf8 	bl	800e1f4 <HAL_GetTick>
 8011a04:	4602      	mov	r2, r0
 8011a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a08:	1a9b      	subs	r3, r3, r2
 8011a0a:	683a      	ldr	r2, [r7, #0]
 8011a0c:	4413      	add	r3, r2
 8011a0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011a10:	f7fc fbf0 	bl	800e1f4 <HAL_GetTick>
 8011a14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011a16:	4b39      	ldr	r3, [pc, #228]	; (8011afc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	015b      	lsls	r3, r3, #5
 8011a1c:	0d1b      	lsrs	r3, r3, #20
 8011a1e:	69fa      	ldr	r2, [r7, #28]
 8011a20:	fb02 f303 	mul.w	r3, r2, r3
 8011a24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011a26:	e054      	b.n	8011ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011a28:	683b      	ldr	r3, [r7, #0]
 8011a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a2e:	d050      	beq.n	8011ad2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011a30:	f7fc fbe0 	bl	800e1f4 <HAL_GetTick>
 8011a34:	4602      	mov	r2, r0
 8011a36:	69bb      	ldr	r3, [r7, #24]
 8011a38:	1ad3      	subs	r3, r2, r3
 8011a3a:	69fa      	ldr	r2, [r7, #28]
 8011a3c:	429a      	cmp	r2, r3
 8011a3e:	d902      	bls.n	8011a46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d13d      	bne.n	8011ac2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	685a      	ldr	r2, [r3, #4]
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011a54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011a5e:	d111      	bne.n	8011a84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	689b      	ldr	r3, [r3, #8]
 8011a64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011a68:	d004      	beq.n	8011a74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	689b      	ldr	r3, [r3, #8]
 8011a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011a72:	d107      	bne.n	8011a84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	681a      	ldr	r2, [r3, #0]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011a82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011a8c:	d10f      	bne.n	8011aae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011a8e:	68fb      	ldr	r3, [r7, #12]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	681a      	ldr	r2, [r3, #0]
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011a9c:	601a      	str	r2, [r3, #0]
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	681a      	ldr	r2, [r3, #0]
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011aac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	2201      	movs	r2, #1
 8011ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2200      	movs	r2, #0
 8011aba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8011abe:	2303      	movs	r3, #3
 8011ac0:	e017      	b.n	8011af2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011ac2:	697b      	ldr	r3, [r7, #20]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d101      	bne.n	8011acc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	3b01      	subs	r3, #1
 8011ad0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	689a      	ldr	r2, [r3, #8]
 8011ad8:	68bb      	ldr	r3, [r7, #8]
 8011ada:	4013      	ands	r3, r2
 8011adc:	68ba      	ldr	r2, [r7, #8]
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	bf0c      	ite	eq
 8011ae2:	2301      	moveq	r3, #1
 8011ae4:	2300      	movne	r3, #0
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	461a      	mov	r2, r3
 8011aea:	79fb      	ldrb	r3, [r7, #7]
 8011aec:	429a      	cmp	r2, r3
 8011aee:	d19b      	bne.n	8011a28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011af0:	2300      	movs	r3, #0
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3720      	adds	r7, #32
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	20000020 	.word	0x20000020

08011b00 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b086      	sub	sp, #24
 8011b04:	af02      	add	r7, sp, #8
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	685b      	ldr	r3, [r3, #4]
 8011b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011b14:	d111      	bne.n	8011b3a <SPI_EndRxTransaction+0x3a>
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	689b      	ldr	r3, [r3, #8]
 8011b1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011b1e:	d004      	beq.n	8011b2a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	689b      	ldr	r3, [r3, #8]
 8011b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b28:	d107      	bne.n	8011b3a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	681a      	ldr	r2, [r3, #0]
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011b38:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	685b      	ldr	r3, [r3, #4]
 8011b3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011b42:	d12a      	bne.n	8011b9a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	689b      	ldr	r3, [r3, #8]
 8011b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011b4c:	d012      	beq.n	8011b74 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	9300      	str	r3, [sp, #0]
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	2200      	movs	r2, #0
 8011b56:	2180      	movs	r1, #128	; 0x80
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	f7ff ff49 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d02d      	beq.n	8011bc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b68:	f043 0220 	orr.w	r2, r3, #32
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011b70:	2303      	movs	r3, #3
 8011b72:	e026      	b.n	8011bc2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	9300      	str	r3, [sp, #0]
 8011b78:	68bb      	ldr	r3, [r7, #8]
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	2101      	movs	r1, #1
 8011b7e:	68f8      	ldr	r0, [r7, #12]
 8011b80:	f7ff ff36 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 8011b84:	4603      	mov	r3, r0
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d01a      	beq.n	8011bc0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b8e:	f043 0220 	orr.w	r2, r3, #32
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011b96:	2303      	movs	r3, #3
 8011b98:	e013      	b.n	8011bc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	9300      	str	r3, [sp, #0]
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	2101      	movs	r1, #1
 8011ba4:	68f8      	ldr	r0, [r7, #12]
 8011ba6:	f7ff ff23 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d007      	beq.n	8011bc0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bb4:	f043 0220 	orr.w	r2, r3, #32
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011bbc:	2303      	movs	r3, #3
 8011bbe:	e000      	b.n	8011bc2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8011bc0:	2300      	movs	r3, #0
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3710      	adds	r7, #16
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
	...

08011bcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b088      	sub	sp, #32
 8011bd0:	af02      	add	r7, sp, #8
 8011bd2:	60f8      	str	r0, [r7, #12]
 8011bd4:	60b9      	str	r1, [r7, #8]
 8011bd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8011bd8:	4b1b      	ldr	r3, [pc, #108]	; (8011c48 <SPI_EndRxTxTransaction+0x7c>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	4a1b      	ldr	r2, [pc, #108]	; (8011c4c <SPI_EndRxTxTransaction+0x80>)
 8011bde:	fba2 2303 	umull	r2, r3, r2, r3
 8011be2:	0d5b      	lsrs	r3, r3, #21
 8011be4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011be8:	fb02 f303 	mul.w	r3, r2, r3
 8011bec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011bf6:	d112      	bne.n	8011c1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	9300      	str	r3, [sp, #0]
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	2180      	movs	r1, #128	; 0x80
 8011c02:	68f8      	ldr	r0, [r7, #12]
 8011c04:	f7ff fef4 	bl	80119f0 <SPI_WaitFlagStateUntilTimeout>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d016      	beq.n	8011c3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011c12:	f043 0220 	orr.w	r2, r3, #32
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8011c1a:	2303      	movs	r3, #3
 8011c1c:	e00f      	b.n	8011c3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d00a      	beq.n	8011c3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	3b01      	subs	r3, #1
 8011c28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	689b      	ldr	r3, [r3, #8]
 8011c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c34:	2b80      	cmp	r3, #128	; 0x80
 8011c36:	d0f2      	beq.n	8011c1e <SPI_EndRxTxTransaction+0x52>
 8011c38:	e000      	b.n	8011c3c <SPI_EndRxTxTransaction+0x70>
        break;
 8011c3a:	bf00      	nop
  }

  return HAL_OK;
 8011c3c:	2300      	movs	r3, #0
}
 8011c3e:	4618      	mov	r0, r3
 8011c40:	3718      	adds	r7, #24
 8011c42:	46bd      	mov	sp, r7
 8011c44:	bd80      	pop	{r7, pc}
 8011c46:	bf00      	nop
 8011c48:	20000020 	.word	0x20000020
 8011c4c:	165e9f81 	.word	0x165e9f81

08011c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b082      	sub	sp, #8
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d101      	bne.n	8011c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8011c5e:	2301      	movs	r3, #1
 8011c60:	e041      	b.n	8011ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d106      	bne.n	8011c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2200      	movs	r2, #0
 8011c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f7fc f81c 	bl	800dcb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2202      	movs	r2, #2
 8011c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	681a      	ldr	r2, [r3, #0]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	3304      	adds	r3, #4
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	4610      	mov	r0, r2
 8011c90:	f000 fc58 	bl	8012544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2201      	movs	r2, #1
 8011c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	2201      	movs	r2, #1
 8011ca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2201      	movs	r2, #1
 8011cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2201      	movs	r2, #1
 8011cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2201      	movs	r2, #1
 8011cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2201      	movs	r2, #1
 8011cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2201      	movs	r2, #1
 8011ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011ce4:	2300      	movs	r3, #0
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3708      	adds	r7, #8
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}
	...

08011cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b085      	sub	sp, #20
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	2b01      	cmp	r3, #1
 8011d02:	d001      	beq.n	8011d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8011d04:	2301      	movs	r3, #1
 8011d06:	e04e      	b.n	8011da6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	2202      	movs	r2, #2
 8011d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	68da      	ldr	r2, [r3, #12]
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	f042 0201 	orr.w	r2, r2, #1
 8011d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	4a23      	ldr	r2, [pc, #140]	; (8011db4 <HAL_TIM_Base_Start_IT+0xc4>)
 8011d26:	4293      	cmp	r3, r2
 8011d28:	d022      	beq.n	8011d70 <HAL_TIM_Base_Start_IT+0x80>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	681b      	ldr	r3, [r3, #0]
 8011d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011d32:	d01d      	beq.n	8011d70 <HAL_TIM_Base_Start_IT+0x80>
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	4a1f      	ldr	r2, [pc, #124]	; (8011db8 <HAL_TIM_Base_Start_IT+0xc8>)
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d018      	beq.n	8011d70 <HAL_TIM_Base_Start_IT+0x80>
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	4a1e      	ldr	r2, [pc, #120]	; (8011dbc <HAL_TIM_Base_Start_IT+0xcc>)
 8011d44:	4293      	cmp	r3, r2
 8011d46:	d013      	beq.n	8011d70 <HAL_TIM_Base_Start_IT+0x80>
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	681b      	ldr	r3, [r3, #0]
 8011d4c:	4a1c      	ldr	r2, [pc, #112]	; (8011dc0 <HAL_TIM_Base_Start_IT+0xd0>)
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	d00e      	beq.n	8011d70 <HAL_TIM_Base_Start_IT+0x80>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	4a1b      	ldr	r2, [pc, #108]	; (8011dc4 <HAL_TIM_Base_Start_IT+0xd4>)
 8011d58:	4293      	cmp	r3, r2
 8011d5a:	d009      	beq.n	8011d70 <HAL_TIM_Base_Start_IT+0x80>
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	4a19      	ldr	r2, [pc, #100]	; (8011dc8 <HAL_TIM_Base_Start_IT+0xd8>)
 8011d62:	4293      	cmp	r3, r2
 8011d64:	d004      	beq.n	8011d70 <HAL_TIM_Base_Start_IT+0x80>
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	4a18      	ldr	r2, [pc, #96]	; (8011dcc <HAL_TIM_Base_Start_IT+0xdc>)
 8011d6c:	4293      	cmp	r3, r2
 8011d6e:	d111      	bne.n	8011d94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	689b      	ldr	r3, [r3, #8]
 8011d76:	f003 0307 	and.w	r3, r3, #7
 8011d7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011d7c:	68fb      	ldr	r3, [r7, #12]
 8011d7e:	2b06      	cmp	r3, #6
 8011d80:	d010      	beq.n	8011da4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	681a      	ldr	r2, [r3, #0]
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	f042 0201 	orr.w	r2, r2, #1
 8011d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8011d92:	e007      	b.n	8011da4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	681a      	ldr	r2, [r3, #0]
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	f042 0201 	orr.w	r2, r2, #1
 8011da2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8011da4:	2300      	movs	r3, #0
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3714      	adds	r7, #20
 8011daa:	46bd      	mov	sp, r7
 8011dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db0:	4770      	bx	lr
 8011db2:	bf00      	nop
 8011db4:	40010000 	.word	0x40010000
 8011db8:	40000400 	.word	0x40000400
 8011dbc:	40000800 	.word	0x40000800
 8011dc0:	40000c00 	.word	0x40000c00
 8011dc4:	40010400 	.word	0x40010400
 8011dc8:	40014000 	.word	0x40014000
 8011dcc:	40001800 	.word	0x40001800

08011dd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d101      	bne.n	8011de2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8011dde:	2301      	movs	r3, #1
 8011de0:	e041      	b.n	8011e66 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011de8:	b2db      	uxtb	r3, r3
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d106      	bne.n	8011dfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2200      	movs	r2, #0
 8011df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f000 f839 	bl	8011e6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	2202      	movs	r2, #2
 8011e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681a      	ldr	r2, [r3, #0]
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	3304      	adds	r3, #4
 8011e0c:	4619      	mov	r1, r3
 8011e0e:	4610      	mov	r0, r2
 8011e10:	f000 fb98 	bl	8012544 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	2201      	movs	r2, #1
 8011e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2201      	movs	r2, #1
 8011e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2201      	movs	r2, #1
 8011e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2201      	movs	r2, #1
 8011e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2201      	movs	r2, #1
 8011e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2201      	movs	r2, #1
 8011e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	2201      	movs	r2, #1
 8011e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	2201      	movs	r2, #1
 8011e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2201      	movs	r2, #1
 8011e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2201      	movs	r2, #1
 8011e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011e64:	2300      	movs	r3, #0
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3708      	adds	r7, #8
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	bd80      	pop	{r7, pc}

08011e6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8011e6e:	b480      	push	{r7}
 8011e70:	b083      	sub	sp, #12
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8011e76:	bf00      	nop
 8011e78:	370c      	adds	r7, #12
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e80:	4770      	bx	lr

08011e82 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8011e82:	b580      	push	{r7, lr}
 8011e84:	b086      	sub	sp, #24
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
 8011e8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d101      	bne.n	8011e96 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8011e92:	2301      	movs	r3, #1
 8011e94:	e097      	b.n	8011fc6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e9c:	b2db      	uxtb	r3, r3
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d106      	bne.n	8011eb0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2200      	movs	r2, #0
 8011ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7fb ff88 	bl	800ddc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2202      	movs	r2, #2
 8011eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	689b      	ldr	r3, [r3, #8]
 8011ebe:	687a      	ldr	r2, [r7, #4]
 8011ec0:	6812      	ldr	r2, [r2, #0]
 8011ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011ec6:	f023 0307 	bic.w	r3, r3, #7
 8011eca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	3304      	adds	r3, #4
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	4610      	mov	r0, r2
 8011ed8:	f000 fb34 	bl	8012544 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	689b      	ldr	r3, [r3, #8]
 8011ee2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	699b      	ldr	r3, [r3, #24]
 8011eea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	6a1b      	ldr	r3, [r3, #32]
 8011ef2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8011ef4:	683b      	ldr	r3, [r7, #0]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	697a      	ldr	r2, [r7, #20]
 8011efa:	4313      	orrs	r3, r2
 8011efc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8011efe:	693b      	ldr	r3, [r7, #16]
 8011f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011f04:	f023 0303 	bic.w	r3, r3, #3
 8011f08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	689a      	ldr	r2, [r3, #8]
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	699b      	ldr	r3, [r3, #24]
 8011f12:	021b      	lsls	r3, r3, #8
 8011f14:	4313      	orrs	r3, r2
 8011f16:	693a      	ldr	r2, [r7, #16]
 8011f18:	4313      	orrs	r3, r2
 8011f1a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8011f1c:	693b      	ldr	r3, [r7, #16]
 8011f1e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8011f22:	f023 030c 	bic.w	r3, r3, #12
 8011f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8011f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8011f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	68da      	ldr	r2, [r3, #12]
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	69db      	ldr	r3, [r3, #28]
 8011f3c:	021b      	lsls	r3, r3, #8
 8011f3e:	4313      	orrs	r3, r2
 8011f40:	693a      	ldr	r2, [r7, #16]
 8011f42:	4313      	orrs	r3, r2
 8011f44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	691b      	ldr	r3, [r3, #16]
 8011f4a:	011a      	lsls	r2, r3, #4
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	6a1b      	ldr	r3, [r3, #32]
 8011f50:	031b      	lsls	r3, r3, #12
 8011f52:	4313      	orrs	r3, r2
 8011f54:	693a      	ldr	r2, [r7, #16]
 8011f56:	4313      	orrs	r3, r2
 8011f58:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8011f60:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8011f68:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	685a      	ldr	r2, [r3, #4]
 8011f6e:	683b      	ldr	r3, [r7, #0]
 8011f70:	695b      	ldr	r3, [r3, #20]
 8011f72:	011b      	lsls	r3, r3, #4
 8011f74:	4313      	orrs	r3, r2
 8011f76:	68fa      	ldr	r2, [r7, #12]
 8011f78:	4313      	orrs	r3, r2
 8011f7a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	697a      	ldr	r2, [r7, #20]
 8011f82:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	693a      	ldr	r2, [r7, #16]
 8011f8a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	68fa      	ldr	r2, [r7, #12]
 8011f92:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2201      	movs	r2, #1
 8011f98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2201      	movs	r2, #1
 8011fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2201      	movs	r2, #1
 8011fb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2201      	movs	r2, #1
 8011fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8011fc4:	2300      	movs	r3, #0
}
 8011fc6:	4618      	mov	r0, r3
 8011fc8:	3718      	adds	r7, #24
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}

08011fce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8011fce:	b580      	push	{r7, lr}
 8011fd0:	b082      	sub	sp, #8
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	691b      	ldr	r3, [r3, #16]
 8011fdc:	f003 0302 	and.w	r3, r3, #2
 8011fe0:	2b02      	cmp	r3, #2
 8011fe2:	d122      	bne.n	801202a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	68db      	ldr	r3, [r3, #12]
 8011fea:	f003 0302 	and.w	r3, r3, #2
 8011fee:	2b02      	cmp	r3, #2
 8011ff0:	d11b      	bne.n	801202a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f06f 0202 	mvn.w	r2, #2
 8011ffa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2201      	movs	r2, #1
 8012000:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	699b      	ldr	r3, [r3, #24]
 8012008:	f003 0303 	and.w	r3, r3, #3
 801200c:	2b00      	cmp	r3, #0
 801200e:	d003      	beq.n	8012018 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8012010:	6878      	ldr	r0, [r7, #4]
 8012012:	f000 fa78 	bl	8012506 <HAL_TIM_IC_CaptureCallback>
 8012016:	e005      	b.n	8012024 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 fa6a 	bl	80124f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f000 fa7b 	bl	801251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2200      	movs	r2, #0
 8012028:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	691b      	ldr	r3, [r3, #16]
 8012030:	f003 0304 	and.w	r3, r3, #4
 8012034:	2b04      	cmp	r3, #4
 8012036:	d122      	bne.n	801207e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	68db      	ldr	r3, [r3, #12]
 801203e:	f003 0304 	and.w	r3, r3, #4
 8012042:	2b04      	cmp	r3, #4
 8012044:	d11b      	bne.n	801207e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f06f 0204 	mvn.w	r2, #4
 801204e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	2202      	movs	r2, #2
 8012054:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	699b      	ldr	r3, [r3, #24]
 801205c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012060:	2b00      	cmp	r3, #0
 8012062:	d003      	beq.n	801206c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012064:	6878      	ldr	r0, [r7, #4]
 8012066:	f000 fa4e 	bl	8012506 <HAL_TIM_IC_CaptureCallback>
 801206a:	e005      	b.n	8012078 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f000 fa40 	bl	80124f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f000 fa51 	bl	801251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	2200      	movs	r2, #0
 801207c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	691b      	ldr	r3, [r3, #16]
 8012084:	f003 0308 	and.w	r3, r3, #8
 8012088:	2b08      	cmp	r3, #8
 801208a:	d122      	bne.n	80120d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	681b      	ldr	r3, [r3, #0]
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	f003 0308 	and.w	r3, r3, #8
 8012096:	2b08      	cmp	r3, #8
 8012098:	d11b      	bne.n	80120d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	f06f 0208 	mvn.w	r2, #8
 80120a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	2204      	movs	r2, #4
 80120a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	69db      	ldr	r3, [r3, #28]
 80120b0:	f003 0303 	and.w	r3, r3, #3
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d003      	beq.n	80120c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 fa24 	bl	8012506 <HAL_TIM_IC_CaptureCallback>
 80120be:	e005      	b.n	80120cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80120c0:	6878      	ldr	r0, [r7, #4]
 80120c2:	f000 fa16 	bl	80124f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f000 fa27 	bl	801251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2200      	movs	r2, #0
 80120d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	691b      	ldr	r3, [r3, #16]
 80120d8:	f003 0310 	and.w	r3, r3, #16
 80120dc:	2b10      	cmp	r3, #16
 80120de:	d122      	bne.n	8012126 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	68db      	ldr	r3, [r3, #12]
 80120e6:	f003 0310 	and.w	r3, r3, #16
 80120ea:	2b10      	cmp	r3, #16
 80120ec:	d11b      	bne.n	8012126 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	f06f 0210 	mvn.w	r2, #16
 80120f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	2208      	movs	r2, #8
 80120fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	69db      	ldr	r3, [r3, #28]
 8012104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012108:	2b00      	cmp	r3, #0
 801210a:	d003      	beq.n	8012114 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801210c:	6878      	ldr	r0, [r7, #4]
 801210e:	f000 f9fa 	bl	8012506 <HAL_TIM_IC_CaptureCallback>
 8012112:	e005      	b.n	8012120 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f000 f9ec 	bl	80124f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f000 f9fd 	bl	801251a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	2200      	movs	r2, #0
 8012124:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	691b      	ldr	r3, [r3, #16]
 801212c:	f003 0301 	and.w	r3, r3, #1
 8012130:	2b01      	cmp	r3, #1
 8012132:	d10e      	bne.n	8012152 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	68db      	ldr	r3, [r3, #12]
 801213a:	f003 0301 	and.w	r3, r3, #1
 801213e:	2b01      	cmp	r3, #1
 8012140:	d107      	bne.n	8012152 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	f06f 0201 	mvn.w	r2, #1
 801214a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f7fb f8eb 	bl	800d328 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	691b      	ldr	r3, [r3, #16]
 8012158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801215c:	2b80      	cmp	r3, #128	; 0x80
 801215e:	d10e      	bne.n	801217e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801216a:	2b80      	cmp	r3, #128	; 0x80
 801216c:	d107      	bne.n	801217e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8012176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012178:	6878      	ldr	r0, [r7, #4]
 801217a:	f000 fd53 	bl	8012c24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	691b      	ldr	r3, [r3, #16]
 8012184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012188:	2b40      	cmp	r3, #64	; 0x40
 801218a:	d10e      	bne.n	80121aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	68db      	ldr	r3, [r3, #12]
 8012192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012196:	2b40      	cmp	r3, #64	; 0x40
 8012198:	d107      	bne.n	80121aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80121a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f000 f9c2 	bl	801252e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	691b      	ldr	r3, [r3, #16]
 80121b0:	f003 0320 	and.w	r3, r3, #32
 80121b4:	2b20      	cmp	r3, #32
 80121b6:	d10e      	bne.n	80121d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	68db      	ldr	r3, [r3, #12]
 80121be:	f003 0320 	and.w	r3, r3, #32
 80121c2:	2b20      	cmp	r3, #32
 80121c4:	d107      	bne.n	80121d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f06f 0220 	mvn.w	r2, #32
 80121ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80121d0:	6878      	ldr	r0, [r7, #4]
 80121d2:	f000 fd1d 	bl	8012c10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80121d6:	bf00      	nop
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
	...

080121e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b086      	sub	sp, #24
 80121e4:	af00      	add	r7, sp, #0
 80121e6:	60f8      	str	r0, [r7, #12]
 80121e8:	60b9      	str	r1, [r7, #8]
 80121ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80121ec:	2300      	movs	r3, #0
 80121ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80121f6:	2b01      	cmp	r3, #1
 80121f8:	d101      	bne.n	80121fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80121fa:	2302      	movs	r3, #2
 80121fc:	e0ae      	b.n	801235c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	2201      	movs	r2, #1
 8012202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	2b0c      	cmp	r3, #12
 801220a:	f200 809f 	bhi.w	801234c <HAL_TIM_PWM_ConfigChannel+0x16c>
 801220e:	a201      	add	r2, pc, #4	; (adr r2, 8012214 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8012210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012214:	08012249 	.word	0x08012249
 8012218:	0801234d 	.word	0x0801234d
 801221c:	0801234d 	.word	0x0801234d
 8012220:	0801234d 	.word	0x0801234d
 8012224:	08012289 	.word	0x08012289
 8012228:	0801234d 	.word	0x0801234d
 801222c:	0801234d 	.word	0x0801234d
 8012230:	0801234d 	.word	0x0801234d
 8012234:	080122cb 	.word	0x080122cb
 8012238:	0801234d 	.word	0x0801234d
 801223c:	0801234d 	.word	0x0801234d
 8012240:	0801234d 	.word	0x0801234d
 8012244:	0801230b 	.word	0x0801230b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	68b9      	ldr	r1, [r7, #8]
 801224e:	4618      	mov	r0, r3
 8012250:	f000 fa18 	bl	8012684 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	699a      	ldr	r2, [r3, #24]
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	f042 0208 	orr.w	r2, r2, #8
 8012262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	699a      	ldr	r2, [r3, #24]
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	f022 0204 	bic.w	r2, r2, #4
 8012272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	6999      	ldr	r1, [r3, #24]
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	691a      	ldr	r2, [r3, #16]
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	430a      	orrs	r2, r1
 8012284:	619a      	str	r2, [r3, #24]
      break;
 8012286:	e064      	b.n	8012352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	68b9      	ldr	r1, [r7, #8]
 801228e:	4618      	mov	r0, r3
 8012290:	f000 fa68 	bl	8012764 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	699a      	ldr	r2, [r3, #24]
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	681b      	ldr	r3, [r3, #0]
 801229e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80122a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	699a      	ldr	r2, [r3, #24]
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80122b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	6999      	ldr	r1, [r3, #24]
 80122ba:	68bb      	ldr	r3, [r7, #8]
 80122bc:	691b      	ldr	r3, [r3, #16]
 80122be:	021a      	lsls	r2, r3, #8
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	430a      	orrs	r2, r1
 80122c6:	619a      	str	r2, [r3, #24]
      break;
 80122c8:	e043      	b.n	8012352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	68b9      	ldr	r1, [r7, #8]
 80122d0:	4618      	mov	r0, r3
 80122d2:	f000 fabd 	bl	8012850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	69da      	ldr	r2, [r3, #28]
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f042 0208 	orr.w	r2, r2, #8
 80122e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	69da      	ldr	r2, [r3, #28]
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	f022 0204 	bic.w	r2, r2, #4
 80122f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	681b      	ldr	r3, [r3, #0]
 80122fa:	69d9      	ldr	r1, [r3, #28]
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	691a      	ldr	r2, [r3, #16]
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	430a      	orrs	r2, r1
 8012306:	61da      	str	r2, [r3, #28]
      break;
 8012308:	e023      	b.n	8012352 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	68b9      	ldr	r1, [r7, #8]
 8012310:	4618      	mov	r0, r3
 8012312:	f000 fb11 	bl	8012938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	69da      	ldr	r2, [r3, #28]
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8012324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	69da      	ldr	r2, [r3, #28]
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8012334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	69d9      	ldr	r1, [r3, #28]
 801233c:	68bb      	ldr	r3, [r7, #8]
 801233e:	691b      	ldr	r3, [r3, #16]
 8012340:	021a      	lsls	r2, r3, #8
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	430a      	orrs	r2, r1
 8012348:	61da      	str	r2, [r3, #28]
      break;
 801234a:	e002      	b.n	8012352 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 801234c:	2301      	movs	r3, #1
 801234e:	75fb      	strb	r3, [r7, #23]
      break;
 8012350:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	2200      	movs	r2, #0
 8012356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801235a:	7dfb      	ldrb	r3, [r7, #23]
}
 801235c:	4618      	mov	r0, r3
 801235e:	3718      	adds	r7, #24
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}

08012364 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b084      	sub	sp, #16
 8012368:	af00      	add	r7, sp, #0
 801236a:	6078      	str	r0, [r7, #4]
 801236c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801236e:	2300      	movs	r3, #0
 8012370:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012378:	2b01      	cmp	r3, #1
 801237a:	d101      	bne.n	8012380 <HAL_TIM_ConfigClockSource+0x1c>
 801237c:	2302      	movs	r3, #2
 801237e:	e0b4      	b.n	80124ea <HAL_TIM_ConfigClockSource+0x186>
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	2201      	movs	r2, #1
 8012384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	2202      	movs	r2, #2
 801238c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	689b      	ldr	r3, [r3, #8]
 8012396:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 801239e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80123a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	68ba      	ldr	r2, [r7, #8]
 80123ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123b8:	d03e      	beq.n	8012438 <HAL_TIM_ConfigClockSource+0xd4>
 80123ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80123be:	f200 8087 	bhi.w	80124d0 <HAL_TIM_ConfigClockSource+0x16c>
 80123c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123c6:	f000 8086 	beq.w	80124d6 <HAL_TIM_ConfigClockSource+0x172>
 80123ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123ce:	d87f      	bhi.n	80124d0 <HAL_TIM_ConfigClockSource+0x16c>
 80123d0:	2b70      	cmp	r3, #112	; 0x70
 80123d2:	d01a      	beq.n	801240a <HAL_TIM_ConfigClockSource+0xa6>
 80123d4:	2b70      	cmp	r3, #112	; 0x70
 80123d6:	d87b      	bhi.n	80124d0 <HAL_TIM_ConfigClockSource+0x16c>
 80123d8:	2b60      	cmp	r3, #96	; 0x60
 80123da:	d050      	beq.n	801247e <HAL_TIM_ConfigClockSource+0x11a>
 80123dc:	2b60      	cmp	r3, #96	; 0x60
 80123de:	d877      	bhi.n	80124d0 <HAL_TIM_ConfigClockSource+0x16c>
 80123e0:	2b50      	cmp	r3, #80	; 0x50
 80123e2:	d03c      	beq.n	801245e <HAL_TIM_ConfigClockSource+0xfa>
 80123e4:	2b50      	cmp	r3, #80	; 0x50
 80123e6:	d873      	bhi.n	80124d0 <HAL_TIM_ConfigClockSource+0x16c>
 80123e8:	2b40      	cmp	r3, #64	; 0x40
 80123ea:	d058      	beq.n	801249e <HAL_TIM_ConfigClockSource+0x13a>
 80123ec:	2b40      	cmp	r3, #64	; 0x40
 80123ee:	d86f      	bhi.n	80124d0 <HAL_TIM_ConfigClockSource+0x16c>
 80123f0:	2b30      	cmp	r3, #48	; 0x30
 80123f2:	d064      	beq.n	80124be <HAL_TIM_ConfigClockSource+0x15a>
 80123f4:	2b30      	cmp	r3, #48	; 0x30
 80123f6:	d86b      	bhi.n	80124d0 <HAL_TIM_ConfigClockSource+0x16c>
 80123f8:	2b20      	cmp	r3, #32
 80123fa:	d060      	beq.n	80124be <HAL_TIM_ConfigClockSource+0x15a>
 80123fc:	2b20      	cmp	r3, #32
 80123fe:	d867      	bhi.n	80124d0 <HAL_TIM_ConfigClockSource+0x16c>
 8012400:	2b00      	cmp	r3, #0
 8012402:	d05c      	beq.n	80124be <HAL_TIM_ConfigClockSource+0x15a>
 8012404:	2b10      	cmp	r3, #16
 8012406:	d05a      	beq.n	80124be <HAL_TIM_ConfigClockSource+0x15a>
 8012408:	e062      	b.n	80124d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6818      	ldr	r0, [r3, #0]
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	6899      	ldr	r1, [r3, #8]
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	685a      	ldr	r2, [r3, #4]
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	f000 fb5d 	bl	8012ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	689b      	ldr	r3, [r3, #8]
 8012424:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801242c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	68ba      	ldr	r2, [r7, #8]
 8012434:	609a      	str	r2, [r3, #8]
      break;
 8012436:	e04f      	b.n	80124d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	6818      	ldr	r0, [r3, #0]
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	6899      	ldr	r1, [r3, #8]
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	685a      	ldr	r2, [r3, #4]
 8012444:	683b      	ldr	r3, [r7, #0]
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	f000 fb46 	bl	8012ad8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	689a      	ldr	r2, [r3, #8]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801245a:	609a      	str	r2, [r3, #8]
      break;
 801245c:	e03c      	b.n	80124d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	6818      	ldr	r0, [r3, #0]
 8012462:	683b      	ldr	r3, [r7, #0]
 8012464:	6859      	ldr	r1, [r3, #4]
 8012466:	683b      	ldr	r3, [r7, #0]
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	461a      	mov	r2, r3
 801246c:	f000 faba 	bl	80129e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	2150      	movs	r1, #80	; 0x50
 8012476:	4618      	mov	r0, r3
 8012478:	f000 fb13 	bl	8012aa2 <TIM_ITRx_SetConfig>
      break;
 801247c:	e02c      	b.n	80124d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	6818      	ldr	r0, [r3, #0]
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	6859      	ldr	r1, [r3, #4]
 8012486:	683b      	ldr	r3, [r7, #0]
 8012488:	68db      	ldr	r3, [r3, #12]
 801248a:	461a      	mov	r2, r3
 801248c:	f000 fad9 	bl	8012a42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	2160      	movs	r1, #96	; 0x60
 8012496:	4618      	mov	r0, r3
 8012498:	f000 fb03 	bl	8012aa2 <TIM_ITRx_SetConfig>
      break;
 801249c:	e01c      	b.n	80124d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6818      	ldr	r0, [r3, #0]
 80124a2:	683b      	ldr	r3, [r7, #0]
 80124a4:	6859      	ldr	r1, [r3, #4]
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	68db      	ldr	r3, [r3, #12]
 80124aa:	461a      	mov	r2, r3
 80124ac:	f000 fa9a 	bl	80129e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	2140      	movs	r1, #64	; 0x40
 80124b6:	4618      	mov	r0, r3
 80124b8:	f000 faf3 	bl	8012aa2 <TIM_ITRx_SetConfig>
      break;
 80124bc:	e00c      	b.n	80124d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681a      	ldr	r2, [r3, #0]
 80124c2:	683b      	ldr	r3, [r7, #0]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	4619      	mov	r1, r3
 80124c8:	4610      	mov	r0, r2
 80124ca:	f000 faea 	bl	8012aa2 <TIM_ITRx_SetConfig>
      break;
 80124ce:	e003      	b.n	80124d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80124d0:	2301      	movs	r3, #1
 80124d2:	73fb      	strb	r3, [r7, #15]
      break;
 80124d4:	e000      	b.n	80124d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80124d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	2201      	movs	r2, #1
 80124dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	2200      	movs	r2, #0
 80124e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80124e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	3710      	adds	r7, #16
 80124ee:	46bd      	mov	sp, r7
 80124f0:	bd80      	pop	{r7, pc}

080124f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80124f2:	b480      	push	{r7}
 80124f4:	b083      	sub	sp, #12
 80124f6:	af00      	add	r7, sp, #0
 80124f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80124fa:	bf00      	nop
 80124fc:	370c      	adds	r7, #12
 80124fe:	46bd      	mov	sp, r7
 8012500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012504:	4770      	bx	lr

08012506 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8012506:	b480      	push	{r7}
 8012508:	b083      	sub	sp, #12
 801250a:	af00      	add	r7, sp, #0
 801250c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801250e:	bf00      	nop
 8012510:	370c      	adds	r7, #12
 8012512:	46bd      	mov	sp, r7
 8012514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012518:	4770      	bx	lr

0801251a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801251a:	b480      	push	{r7}
 801251c:	b083      	sub	sp, #12
 801251e:	af00      	add	r7, sp, #0
 8012520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012522:	bf00      	nop
 8012524:	370c      	adds	r7, #12
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr

0801252e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801252e:	b480      	push	{r7}
 8012530:	b083      	sub	sp, #12
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8012536:	bf00      	nop
 8012538:	370c      	adds	r7, #12
 801253a:	46bd      	mov	sp, r7
 801253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012540:	4770      	bx	lr
	...

08012544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8012544:	b480      	push	{r7}
 8012546:	b085      	sub	sp, #20
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
 801254c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	4a40      	ldr	r2, [pc, #256]	; (8012658 <TIM_Base_SetConfig+0x114>)
 8012558:	4293      	cmp	r3, r2
 801255a:	d013      	beq.n	8012584 <TIM_Base_SetConfig+0x40>
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012562:	d00f      	beq.n	8012584 <TIM_Base_SetConfig+0x40>
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	4a3d      	ldr	r2, [pc, #244]	; (801265c <TIM_Base_SetConfig+0x118>)
 8012568:	4293      	cmp	r3, r2
 801256a:	d00b      	beq.n	8012584 <TIM_Base_SetConfig+0x40>
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	4a3c      	ldr	r2, [pc, #240]	; (8012660 <TIM_Base_SetConfig+0x11c>)
 8012570:	4293      	cmp	r3, r2
 8012572:	d007      	beq.n	8012584 <TIM_Base_SetConfig+0x40>
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	4a3b      	ldr	r2, [pc, #236]	; (8012664 <TIM_Base_SetConfig+0x120>)
 8012578:	4293      	cmp	r3, r2
 801257a:	d003      	beq.n	8012584 <TIM_Base_SetConfig+0x40>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	4a3a      	ldr	r2, [pc, #232]	; (8012668 <TIM_Base_SetConfig+0x124>)
 8012580:	4293      	cmp	r3, r2
 8012582:	d108      	bne.n	8012596 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801258a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	685b      	ldr	r3, [r3, #4]
 8012590:	68fa      	ldr	r2, [r7, #12]
 8012592:	4313      	orrs	r3, r2
 8012594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	4a2f      	ldr	r2, [pc, #188]	; (8012658 <TIM_Base_SetConfig+0x114>)
 801259a:	4293      	cmp	r3, r2
 801259c:	d02b      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80125a4:	d027      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	4a2c      	ldr	r2, [pc, #176]	; (801265c <TIM_Base_SetConfig+0x118>)
 80125aa:	4293      	cmp	r3, r2
 80125ac:	d023      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4a2b      	ldr	r2, [pc, #172]	; (8012660 <TIM_Base_SetConfig+0x11c>)
 80125b2:	4293      	cmp	r3, r2
 80125b4:	d01f      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4a2a      	ldr	r2, [pc, #168]	; (8012664 <TIM_Base_SetConfig+0x120>)
 80125ba:	4293      	cmp	r3, r2
 80125bc:	d01b      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	4a29      	ldr	r2, [pc, #164]	; (8012668 <TIM_Base_SetConfig+0x124>)
 80125c2:	4293      	cmp	r3, r2
 80125c4:	d017      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	4a28      	ldr	r2, [pc, #160]	; (801266c <TIM_Base_SetConfig+0x128>)
 80125ca:	4293      	cmp	r3, r2
 80125cc:	d013      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	4a27      	ldr	r2, [pc, #156]	; (8012670 <TIM_Base_SetConfig+0x12c>)
 80125d2:	4293      	cmp	r3, r2
 80125d4:	d00f      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 80125d6:	687b      	ldr	r3, [r7, #4]
 80125d8:	4a26      	ldr	r2, [pc, #152]	; (8012674 <TIM_Base_SetConfig+0x130>)
 80125da:	4293      	cmp	r3, r2
 80125dc:	d00b      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	4a25      	ldr	r2, [pc, #148]	; (8012678 <TIM_Base_SetConfig+0x134>)
 80125e2:	4293      	cmp	r3, r2
 80125e4:	d007      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4a24      	ldr	r2, [pc, #144]	; (801267c <TIM_Base_SetConfig+0x138>)
 80125ea:	4293      	cmp	r3, r2
 80125ec:	d003      	beq.n	80125f6 <TIM_Base_SetConfig+0xb2>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	4a23      	ldr	r2, [pc, #140]	; (8012680 <TIM_Base_SetConfig+0x13c>)
 80125f2:	4293      	cmp	r3, r2
 80125f4:	d108      	bne.n	8012608 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80125fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80125fe:	683b      	ldr	r3, [r7, #0]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	68fa      	ldr	r2, [r7, #12]
 8012604:	4313      	orrs	r3, r2
 8012606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	695b      	ldr	r3, [r3, #20]
 8012612:	4313      	orrs	r3, r2
 8012614:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	68fa      	ldr	r2, [r7, #12]
 801261a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801261c:	683b      	ldr	r3, [r7, #0]
 801261e:	689a      	ldr	r2, [r3, #8]
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	681a      	ldr	r2, [r3, #0]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	4a0a      	ldr	r2, [pc, #40]	; (8012658 <TIM_Base_SetConfig+0x114>)
 8012630:	4293      	cmp	r3, r2
 8012632:	d003      	beq.n	801263c <TIM_Base_SetConfig+0xf8>
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	4a0c      	ldr	r2, [pc, #48]	; (8012668 <TIM_Base_SetConfig+0x124>)
 8012638:	4293      	cmp	r3, r2
 801263a:	d103      	bne.n	8012644 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	691a      	ldr	r2, [r3, #16]
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	2201      	movs	r2, #1
 8012648:	615a      	str	r2, [r3, #20]
}
 801264a:	bf00      	nop
 801264c:	3714      	adds	r7, #20
 801264e:	46bd      	mov	sp, r7
 8012650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012654:	4770      	bx	lr
 8012656:	bf00      	nop
 8012658:	40010000 	.word	0x40010000
 801265c:	40000400 	.word	0x40000400
 8012660:	40000800 	.word	0x40000800
 8012664:	40000c00 	.word	0x40000c00
 8012668:	40010400 	.word	0x40010400
 801266c:	40014000 	.word	0x40014000
 8012670:	40014400 	.word	0x40014400
 8012674:	40014800 	.word	0x40014800
 8012678:	40001800 	.word	0x40001800
 801267c:	40001c00 	.word	0x40001c00
 8012680:	40002000 	.word	0x40002000

08012684 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012684:	b480      	push	{r7}
 8012686:	b087      	sub	sp, #28
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
 801268c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6a1b      	ldr	r3, [r3, #32]
 8012692:	f023 0201 	bic.w	r2, r3, #1
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6a1b      	ldr	r3, [r3, #32]
 801269e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	685b      	ldr	r3, [r3, #4]
 80126a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	699b      	ldr	r3, [r3, #24]
 80126aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80126b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	f023 0303 	bic.w	r3, r3, #3
 80126ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	68fa      	ldr	r2, [r7, #12]
 80126c2:	4313      	orrs	r3, r2
 80126c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	f023 0302 	bic.w	r3, r3, #2
 80126cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80126ce:	683b      	ldr	r3, [r7, #0]
 80126d0:	689b      	ldr	r3, [r3, #8]
 80126d2:	697a      	ldr	r2, [r7, #20]
 80126d4:	4313      	orrs	r3, r2
 80126d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	4a20      	ldr	r2, [pc, #128]	; (801275c <TIM_OC1_SetConfig+0xd8>)
 80126dc:	4293      	cmp	r3, r2
 80126de:	d003      	beq.n	80126e8 <TIM_OC1_SetConfig+0x64>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	4a1f      	ldr	r2, [pc, #124]	; (8012760 <TIM_OC1_SetConfig+0xdc>)
 80126e4:	4293      	cmp	r3, r2
 80126e6:	d10c      	bne.n	8012702 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	f023 0308 	bic.w	r3, r3, #8
 80126ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	68db      	ldr	r3, [r3, #12]
 80126f4:	697a      	ldr	r2, [r7, #20]
 80126f6:	4313      	orrs	r3, r2
 80126f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	f023 0304 	bic.w	r3, r3, #4
 8012700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	4a15      	ldr	r2, [pc, #84]	; (801275c <TIM_OC1_SetConfig+0xd8>)
 8012706:	4293      	cmp	r3, r2
 8012708:	d003      	beq.n	8012712 <TIM_OC1_SetConfig+0x8e>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	4a14      	ldr	r2, [pc, #80]	; (8012760 <TIM_OC1_SetConfig+0xdc>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d111      	bne.n	8012736 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801271a:	693b      	ldr	r3, [r7, #16]
 801271c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	695b      	ldr	r3, [r3, #20]
 8012726:	693a      	ldr	r2, [r7, #16]
 8012728:	4313      	orrs	r3, r2
 801272a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801272c:	683b      	ldr	r3, [r7, #0]
 801272e:	699b      	ldr	r3, [r3, #24]
 8012730:	693a      	ldr	r2, [r7, #16]
 8012732:	4313      	orrs	r3, r2
 8012734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	693a      	ldr	r2, [r7, #16]
 801273a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	68fa      	ldr	r2, [r7, #12]
 8012740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	685a      	ldr	r2, [r3, #4]
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	697a      	ldr	r2, [r7, #20]
 801274e:	621a      	str	r2, [r3, #32]
}
 8012750:	bf00      	nop
 8012752:	371c      	adds	r7, #28
 8012754:	46bd      	mov	sp, r7
 8012756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801275a:	4770      	bx	lr
 801275c:	40010000 	.word	0x40010000
 8012760:	40010400 	.word	0x40010400

08012764 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012764:	b480      	push	{r7}
 8012766:	b087      	sub	sp, #28
 8012768:	af00      	add	r7, sp, #0
 801276a:	6078      	str	r0, [r7, #4]
 801276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	6a1b      	ldr	r3, [r3, #32]
 8012772:	f023 0210 	bic.w	r2, r3, #16
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	6a1b      	ldr	r3, [r3, #32]
 801277e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	699b      	ldr	r3, [r3, #24]
 801278a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801279a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801279c:	683b      	ldr	r3, [r7, #0]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	021b      	lsls	r3, r3, #8
 80127a2:	68fa      	ldr	r2, [r7, #12]
 80127a4:	4313      	orrs	r3, r2
 80127a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80127a8:	697b      	ldr	r3, [r7, #20]
 80127aa:	f023 0320 	bic.w	r3, r3, #32
 80127ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80127b0:	683b      	ldr	r3, [r7, #0]
 80127b2:	689b      	ldr	r3, [r3, #8]
 80127b4:	011b      	lsls	r3, r3, #4
 80127b6:	697a      	ldr	r2, [r7, #20]
 80127b8:	4313      	orrs	r3, r2
 80127ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	4a22      	ldr	r2, [pc, #136]	; (8012848 <TIM_OC2_SetConfig+0xe4>)
 80127c0:	4293      	cmp	r3, r2
 80127c2:	d003      	beq.n	80127cc <TIM_OC2_SetConfig+0x68>
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	4a21      	ldr	r2, [pc, #132]	; (801284c <TIM_OC2_SetConfig+0xe8>)
 80127c8:	4293      	cmp	r3, r2
 80127ca:	d10d      	bne.n	80127e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80127d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80127d4:	683b      	ldr	r3, [r7, #0]
 80127d6:	68db      	ldr	r3, [r3, #12]
 80127d8:	011b      	lsls	r3, r3, #4
 80127da:	697a      	ldr	r2, [r7, #20]
 80127dc:	4313      	orrs	r3, r2
 80127de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80127e0:	697b      	ldr	r3, [r7, #20]
 80127e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	4a17      	ldr	r2, [pc, #92]	; (8012848 <TIM_OC2_SetConfig+0xe4>)
 80127ec:	4293      	cmp	r3, r2
 80127ee:	d003      	beq.n	80127f8 <TIM_OC2_SetConfig+0x94>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	4a16      	ldr	r2, [pc, #88]	; (801284c <TIM_OC2_SetConfig+0xe8>)
 80127f4:	4293      	cmp	r3, r2
 80127f6:	d113      	bne.n	8012820 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80127fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012806:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	695b      	ldr	r3, [r3, #20]
 801280c:	009b      	lsls	r3, r3, #2
 801280e:	693a      	ldr	r2, [r7, #16]
 8012810:	4313      	orrs	r3, r2
 8012812:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8012814:	683b      	ldr	r3, [r7, #0]
 8012816:	699b      	ldr	r3, [r3, #24]
 8012818:	009b      	lsls	r3, r3, #2
 801281a:	693a      	ldr	r2, [r7, #16]
 801281c:	4313      	orrs	r3, r2
 801281e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	693a      	ldr	r2, [r7, #16]
 8012824:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	68fa      	ldr	r2, [r7, #12]
 801282a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	685a      	ldr	r2, [r3, #4]
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	697a      	ldr	r2, [r7, #20]
 8012838:	621a      	str	r2, [r3, #32]
}
 801283a:	bf00      	nop
 801283c:	371c      	adds	r7, #28
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
 8012846:	bf00      	nop
 8012848:	40010000 	.word	0x40010000
 801284c:	40010400 	.word	0x40010400

08012850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012850:	b480      	push	{r7}
 8012852:	b087      	sub	sp, #28
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
 8012858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6a1b      	ldr	r3, [r3, #32]
 801285e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6a1b      	ldr	r3, [r3, #32]
 801286a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	685b      	ldr	r3, [r3, #4]
 8012870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	69db      	ldr	r3, [r3, #28]
 8012876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801287e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	f023 0303 	bic.w	r3, r3, #3
 8012886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8012888:	683b      	ldr	r3, [r7, #0]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	68fa      	ldr	r2, [r7, #12]
 801288e:	4313      	orrs	r3, r2
 8012890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	689b      	ldr	r3, [r3, #8]
 801289e:	021b      	lsls	r3, r3, #8
 80128a0:	697a      	ldr	r2, [r7, #20]
 80128a2:	4313      	orrs	r3, r2
 80128a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	4a21      	ldr	r2, [pc, #132]	; (8012930 <TIM_OC3_SetConfig+0xe0>)
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d003      	beq.n	80128b6 <TIM_OC3_SetConfig+0x66>
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	4a20      	ldr	r2, [pc, #128]	; (8012934 <TIM_OC3_SetConfig+0xe4>)
 80128b2:	4293      	cmp	r3, r2
 80128b4:	d10d      	bne.n	80128d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80128bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80128be:	683b      	ldr	r3, [r7, #0]
 80128c0:	68db      	ldr	r3, [r3, #12]
 80128c2:	021b      	lsls	r3, r3, #8
 80128c4:	697a      	ldr	r2, [r7, #20]
 80128c6:	4313      	orrs	r3, r2
 80128c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80128d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	4a16      	ldr	r2, [pc, #88]	; (8012930 <TIM_OC3_SetConfig+0xe0>)
 80128d6:	4293      	cmp	r3, r2
 80128d8:	d003      	beq.n	80128e2 <TIM_OC3_SetConfig+0x92>
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	4a15      	ldr	r2, [pc, #84]	; (8012934 <TIM_OC3_SetConfig+0xe4>)
 80128de:	4293      	cmp	r3, r2
 80128e0:	d113      	bne.n	801290a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80128ea:	693b      	ldr	r3, [r7, #16]
 80128ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80128f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80128f2:	683b      	ldr	r3, [r7, #0]
 80128f4:	695b      	ldr	r3, [r3, #20]
 80128f6:	011b      	lsls	r3, r3, #4
 80128f8:	693a      	ldr	r2, [r7, #16]
 80128fa:	4313      	orrs	r3, r2
 80128fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	699b      	ldr	r3, [r3, #24]
 8012902:	011b      	lsls	r3, r3, #4
 8012904:	693a      	ldr	r2, [r7, #16]
 8012906:	4313      	orrs	r3, r2
 8012908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	693a      	ldr	r2, [r7, #16]
 801290e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	68fa      	ldr	r2, [r7, #12]
 8012914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8012916:	683b      	ldr	r3, [r7, #0]
 8012918:	685a      	ldr	r2, [r3, #4]
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	697a      	ldr	r2, [r7, #20]
 8012922:	621a      	str	r2, [r3, #32]
}
 8012924:	bf00      	nop
 8012926:	371c      	adds	r7, #28
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr
 8012930:	40010000 	.word	0x40010000
 8012934:	40010400 	.word	0x40010400

08012938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8012938:	b480      	push	{r7}
 801293a:	b087      	sub	sp, #28
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6a1b      	ldr	r3, [r3, #32]
 8012946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6a1b      	ldr	r3, [r3, #32]
 8012952:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	685b      	ldr	r3, [r3, #4]
 8012958:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	69db      	ldr	r3, [r3, #28]
 801295e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801296e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	021b      	lsls	r3, r3, #8
 8012976:	68fa      	ldr	r2, [r7, #12]
 8012978:	4313      	orrs	r3, r2
 801297a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012982:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8012984:	683b      	ldr	r3, [r7, #0]
 8012986:	689b      	ldr	r3, [r3, #8]
 8012988:	031b      	lsls	r3, r3, #12
 801298a:	693a      	ldr	r2, [r7, #16]
 801298c:	4313      	orrs	r3, r2
 801298e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	4a12      	ldr	r2, [pc, #72]	; (80129dc <TIM_OC4_SetConfig+0xa4>)
 8012994:	4293      	cmp	r3, r2
 8012996:	d003      	beq.n	80129a0 <TIM_OC4_SetConfig+0x68>
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	4a11      	ldr	r2, [pc, #68]	; (80129e0 <TIM_OC4_SetConfig+0xa8>)
 801299c:	4293      	cmp	r3, r2
 801299e:	d109      	bne.n	80129b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80129a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	695b      	ldr	r3, [r3, #20]
 80129ac:	019b      	lsls	r3, r3, #6
 80129ae:	697a      	ldr	r2, [r7, #20]
 80129b0:	4313      	orrs	r3, r2
 80129b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	697a      	ldr	r2, [r7, #20]
 80129b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	68fa      	ldr	r2, [r7, #12]
 80129be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80129c0:	683b      	ldr	r3, [r7, #0]
 80129c2:	685a      	ldr	r2, [r3, #4]
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	693a      	ldr	r2, [r7, #16]
 80129cc:	621a      	str	r2, [r3, #32]
}
 80129ce:	bf00      	nop
 80129d0:	371c      	adds	r7, #28
 80129d2:	46bd      	mov	sp, r7
 80129d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d8:	4770      	bx	lr
 80129da:	bf00      	nop
 80129dc:	40010000 	.word	0x40010000
 80129e0:	40010400 	.word	0x40010400

080129e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80129e4:	b480      	push	{r7}
 80129e6:	b087      	sub	sp, #28
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	60f8      	str	r0, [r7, #12]
 80129ec:	60b9      	str	r1, [r7, #8]
 80129ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	6a1b      	ldr	r3, [r3, #32]
 80129f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	6a1b      	ldr	r3, [r3, #32]
 80129fa:	f023 0201 	bic.w	r2, r3, #1
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	699b      	ldr	r3, [r3, #24]
 8012a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	011b      	lsls	r3, r3, #4
 8012a14:	693a      	ldr	r2, [r7, #16]
 8012a16:	4313      	orrs	r3, r2
 8012a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	f023 030a 	bic.w	r3, r3, #10
 8012a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012a22:	697a      	ldr	r2, [r7, #20]
 8012a24:	68bb      	ldr	r3, [r7, #8]
 8012a26:	4313      	orrs	r3, r2
 8012a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	693a      	ldr	r2, [r7, #16]
 8012a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	697a      	ldr	r2, [r7, #20]
 8012a34:	621a      	str	r2, [r3, #32]
}
 8012a36:	bf00      	nop
 8012a38:	371c      	adds	r7, #28
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a40:	4770      	bx	lr

08012a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012a42:	b480      	push	{r7}
 8012a44:	b087      	sub	sp, #28
 8012a46:	af00      	add	r7, sp, #0
 8012a48:	60f8      	str	r0, [r7, #12]
 8012a4a:	60b9      	str	r1, [r7, #8]
 8012a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	6a1b      	ldr	r3, [r3, #32]
 8012a52:	f023 0210 	bic.w	r2, r3, #16
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	699b      	ldr	r3, [r3, #24]
 8012a5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	6a1b      	ldr	r3, [r3, #32]
 8012a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8012a66:	697b      	ldr	r3, [r7, #20]
 8012a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	031b      	lsls	r3, r3, #12
 8012a72:	697a      	ldr	r2, [r7, #20]
 8012a74:	4313      	orrs	r3, r2
 8012a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8012a78:	693b      	ldr	r3, [r7, #16]
 8012a7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	011b      	lsls	r3, r3, #4
 8012a84:	693a      	ldr	r2, [r7, #16]
 8012a86:	4313      	orrs	r3, r2
 8012a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	697a      	ldr	r2, [r7, #20]
 8012a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	693a      	ldr	r2, [r7, #16]
 8012a94:	621a      	str	r2, [r3, #32]
}
 8012a96:	bf00      	nop
 8012a98:	371c      	adds	r7, #28
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr

08012aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8012aa2:	b480      	push	{r7}
 8012aa4:	b085      	sub	sp, #20
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6078      	str	r0, [r7, #4]
 8012aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	689b      	ldr	r3, [r3, #8]
 8012ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8012aba:	683a      	ldr	r2, [r7, #0]
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	4313      	orrs	r3, r2
 8012ac0:	f043 0307 	orr.w	r3, r3, #7
 8012ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	68fa      	ldr	r2, [r7, #12]
 8012aca:	609a      	str	r2, [r3, #8]
}
 8012acc:	bf00      	nop
 8012ace:	3714      	adds	r7, #20
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ad6:	4770      	bx	lr

08012ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	b087      	sub	sp, #28
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	60f8      	str	r0, [r7, #12]
 8012ae0:	60b9      	str	r1, [r7, #8]
 8012ae2:	607a      	str	r2, [r7, #4]
 8012ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	689b      	ldr	r3, [r3, #8]
 8012aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8012af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8012af4:	683b      	ldr	r3, [r7, #0]
 8012af6:	021a      	lsls	r2, r3, #8
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	431a      	orrs	r2, r3
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	4313      	orrs	r3, r2
 8012b00:	697a      	ldr	r2, [r7, #20]
 8012b02:	4313      	orrs	r3, r2
 8012b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	697a      	ldr	r2, [r7, #20]
 8012b0a:	609a      	str	r2, [r3, #8]
}
 8012b0c:	bf00      	nop
 8012b0e:	371c      	adds	r7, #28
 8012b10:	46bd      	mov	sp, r7
 8012b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b16:	4770      	bx	lr

08012b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8012b18:	b480      	push	{r7}
 8012b1a:	b085      	sub	sp, #20
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	6078      	str	r0, [r7, #4]
 8012b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b28:	2b01      	cmp	r3, #1
 8012b2a:	d101      	bne.n	8012b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012b2c:	2302      	movs	r3, #2
 8012b2e:	e05a      	b.n	8012be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2201      	movs	r2, #1
 8012b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2202      	movs	r2, #2
 8012b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	689b      	ldr	r3, [r3, #8]
 8012b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	68fa      	ldr	r2, [r7, #12]
 8012b5e:	4313      	orrs	r3, r2
 8012b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	68fa      	ldr	r2, [r7, #12]
 8012b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	4a21      	ldr	r2, [pc, #132]	; (8012bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012b70:	4293      	cmp	r3, r2
 8012b72:	d022      	beq.n	8012bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012b7c:	d01d      	beq.n	8012bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	681b      	ldr	r3, [r3, #0]
 8012b82:	4a1d      	ldr	r2, [pc, #116]	; (8012bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012b84:	4293      	cmp	r3, r2
 8012b86:	d018      	beq.n	8012bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	4a1b      	ldr	r2, [pc, #108]	; (8012bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d013      	beq.n	8012bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	4a1a      	ldr	r2, [pc, #104]	; (8012c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8012b98:	4293      	cmp	r3, r2
 8012b9a:	d00e      	beq.n	8012bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	4a18      	ldr	r2, [pc, #96]	; (8012c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8012ba2:	4293      	cmp	r3, r2
 8012ba4:	d009      	beq.n	8012bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4a17      	ldr	r2, [pc, #92]	; (8012c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8012bac:	4293      	cmp	r3, r2
 8012bae:	d004      	beq.n	8012bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4a15      	ldr	r2, [pc, #84]	; (8012c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8012bb6:	4293      	cmp	r3, r2
 8012bb8:	d10c      	bne.n	8012bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8012bc2:	683b      	ldr	r3, [r7, #0]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	68ba      	ldr	r2, [r7, #8]
 8012bc8:	4313      	orrs	r3, r2
 8012bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	68ba      	ldr	r2, [r7, #8]
 8012bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	2201      	movs	r2, #1
 8012bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	2200      	movs	r2, #0
 8012be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8012be4:	2300      	movs	r3, #0
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3714      	adds	r7, #20
 8012bea:	46bd      	mov	sp, r7
 8012bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf0:	4770      	bx	lr
 8012bf2:	bf00      	nop
 8012bf4:	40010000 	.word	0x40010000
 8012bf8:	40000400 	.word	0x40000400
 8012bfc:	40000800 	.word	0x40000800
 8012c00:	40000c00 	.word	0x40000c00
 8012c04:	40010400 	.word	0x40010400
 8012c08:	40014000 	.word	0x40014000
 8012c0c:	40001800 	.word	0x40001800

08012c10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b083      	sub	sp, #12
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012c18:	bf00      	nop
 8012c1a:	370c      	adds	r7, #12
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c22:	4770      	bx	lr

08012c24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012c24:	b480      	push	{r7}
 8012c26:	b083      	sub	sp, #12
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012c2c:	bf00      	nop
 8012c2e:	370c      	adds	r7, #12
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr

08012c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b082      	sub	sp, #8
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d101      	bne.n	8012c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012c46:	2301      	movs	r3, #1
 8012c48:	e03f      	b.n	8012cca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012c50:	b2db      	uxtb	r3, r3
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d106      	bne.n	8012c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	2200      	movs	r2, #0
 8012c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012c5e:	6878      	ldr	r0, [r7, #4]
 8012c60:	f7fb f984 	bl	800df6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2224      	movs	r2, #36	; 0x24
 8012c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	68da      	ldr	r2, [r3, #12]
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012c7c:	6878      	ldr	r0, [r7, #4]
 8012c7e:	f000 f829 	bl	8012cd4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	691a      	ldr	r2, [r3, #16]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	695a      	ldr	r2, [r3, #20]
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	68da      	ldr	r2, [r3, #12]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	2200      	movs	r2, #0
 8012cb6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	2220      	movs	r2, #32
 8012cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	2220      	movs	r2, #32
 8012cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012cc8:	2300      	movs	r3, #0
}
 8012cca:	4618      	mov	r0, r3
 8012ccc:	3708      	adds	r7, #8
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}
	...

08012cd4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012cd8:	b0c0      	sub	sp, #256	; 0x100
 8012cda:	af00      	add	r7, sp, #0
 8012cdc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	691b      	ldr	r3, [r3, #16]
 8012ce8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012cf0:	68d9      	ldr	r1, [r3, #12]
 8012cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012cf6:	681a      	ldr	r2, [r3, #0]
 8012cf8:	ea40 0301 	orr.w	r3, r0, r1
 8012cfc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d02:	689a      	ldr	r2, [r3, #8]
 8012d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d08:	691b      	ldr	r3, [r3, #16]
 8012d0a:	431a      	orrs	r2, r3
 8012d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d10:	695b      	ldr	r3, [r3, #20]
 8012d12:	431a      	orrs	r2, r3
 8012d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d18:	69db      	ldr	r3, [r3, #28]
 8012d1a:	4313      	orrs	r3, r2
 8012d1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	68db      	ldr	r3, [r3, #12]
 8012d28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012d2c:	f021 010c 	bic.w	r1, r1, #12
 8012d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d34:	681a      	ldr	r2, [r3, #0]
 8012d36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012d3a:	430b      	orrs	r3, r1
 8012d3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	695b      	ldr	r3, [r3, #20]
 8012d46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d4e:	6999      	ldr	r1, [r3, #24]
 8012d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	ea40 0301 	orr.w	r3, r0, r1
 8012d5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d60:	681a      	ldr	r2, [r3, #0]
 8012d62:	4b8f      	ldr	r3, [pc, #572]	; (8012fa0 <UART_SetConfig+0x2cc>)
 8012d64:	429a      	cmp	r2, r3
 8012d66:	d005      	beq.n	8012d74 <UART_SetConfig+0xa0>
 8012d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d6c:	681a      	ldr	r2, [r3, #0]
 8012d6e:	4b8d      	ldr	r3, [pc, #564]	; (8012fa4 <UART_SetConfig+0x2d0>)
 8012d70:	429a      	cmp	r2, r3
 8012d72:	d104      	bne.n	8012d7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8012d74:	f7fe f8fe 	bl	8010f74 <HAL_RCC_GetPCLK2Freq>
 8012d78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8012d7c:	e003      	b.n	8012d86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012d7e:	f7fe f8e5 	bl	8010f4c <HAL_RCC_GetPCLK1Freq>
 8012d82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d8a:	69db      	ldr	r3, [r3, #28]
 8012d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012d90:	f040 810c 	bne.w	8012fac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012d94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012d98:	2200      	movs	r2, #0
 8012d9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012d9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8012da2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8012da6:	4622      	mov	r2, r4
 8012da8:	462b      	mov	r3, r5
 8012daa:	1891      	adds	r1, r2, r2
 8012dac:	65b9      	str	r1, [r7, #88]	; 0x58
 8012dae:	415b      	adcs	r3, r3
 8012db0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012db2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012db6:	4621      	mov	r1, r4
 8012db8:	eb12 0801 	adds.w	r8, r2, r1
 8012dbc:	4629      	mov	r1, r5
 8012dbe:	eb43 0901 	adc.w	r9, r3, r1
 8012dc2:	f04f 0200 	mov.w	r2, #0
 8012dc6:	f04f 0300 	mov.w	r3, #0
 8012dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012dd6:	4690      	mov	r8, r2
 8012dd8:	4699      	mov	r9, r3
 8012dda:	4623      	mov	r3, r4
 8012ddc:	eb18 0303 	adds.w	r3, r8, r3
 8012de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012de4:	462b      	mov	r3, r5
 8012de6:	eb49 0303 	adc.w	r3, r9, r3
 8012dea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012df2:	685b      	ldr	r3, [r3, #4]
 8012df4:	2200      	movs	r2, #0
 8012df6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012dfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8012dfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012e02:	460b      	mov	r3, r1
 8012e04:	18db      	adds	r3, r3, r3
 8012e06:	653b      	str	r3, [r7, #80]	; 0x50
 8012e08:	4613      	mov	r3, r2
 8012e0a:	eb42 0303 	adc.w	r3, r2, r3
 8012e0e:	657b      	str	r3, [r7, #84]	; 0x54
 8012e10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012e14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012e18:	f7ed ff36 	bl	8000c88 <__aeabi_uldivmod>
 8012e1c:	4602      	mov	r2, r0
 8012e1e:	460b      	mov	r3, r1
 8012e20:	4b61      	ldr	r3, [pc, #388]	; (8012fa8 <UART_SetConfig+0x2d4>)
 8012e22:	fba3 2302 	umull	r2, r3, r3, r2
 8012e26:	095b      	lsrs	r3, r3, #5
 8012e28:	011c      	lsls	r4, r3, #4
 8012e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012e2e:	2200      	movs	r2, #0
 8012e30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012e34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8012e38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8012e3c:	4642      	mov	r2, r8
 8012e3e:	464b      	mov	r3, r9
 8012e40:	1891      	adds	r1, r2, r2
 8012e42:	64b9      	str	r1, [r7, #72]	; 0x48
 8012e44:	415b      	adcs	r3, r3
 8012e46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012e4c:	4641      	mov	r1, r8
 8012e4e:	eb12 0a01 	adds.w	sl, r2, r1
 8012e52:	4649      	mov	r1, r9
 8012e54:	eb43 0b01 	adc.w	fp, r3, r1
 8012e58:	f04f 0200 	mov.w	r2, #0
 8012e5c:	f04f 0300 	mov.w	r3, #0
 8012e60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012e64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012e68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012e6c:	4692      	mov	sl, r2
 8012e6e:	469b      	mov	fp, r3
 8012e70:	4643      	mov	r3, r8
 8012e72:	eb1a 0303 	adds.w	r3, sl, r3
 8012e76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012e7a:	464b      	mov	r3, r9
 8012e7c:	eb4b 0303 	adc.w	r3, fp, r3
 8012e80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012e90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8012e94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8012e98:	460b      	mov	r3, r1
 8012e9a:	18db      	adds	r3, r3, r3
 8012e9c:	643b      	str	r3, [r7, #64]	; 0x40
 8012e9e:	4613      	mov	r3, r2
 8012ea0:	eb42 0303 	adc.w	r3, r2, r3
 8012ea4:	647b      	str	r3, [r7, #68]	; 0x44
 8012ea6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012eaa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8012eae:	f7ed feeb 	bl	8000c88 <__aeabi_uldivmod>
 8012eb2:	4602      	mov	r2, r0
 8012eb4:	460b      	mov	r3, r1
 8012eb6:	4611      	mov	r1, r2
 8012eb8:	4b3b      	ldr	r3, [pc, #236]	; (8012fa8 <UART_SetConfig+0x2d4>)
 8012eba:	fba3 2301 	umull	r2, r3, r3, r1
 8012ebe:	095b      	lsrs	r3, r3, #5
 8012ec0:	2264      	movs	r2, #100	; 0x64
 8012ec2:	fb02 f303 	mul.w	r3, r2, r3
 8012ec6:	1acb      	subs	r3, r1, r3
 8012ec8:	00db      	lsls	r3, r3, #3
 8012eca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8012ece:	4b36      	ldr	r3, [pc, #216]	; (8012fa8 <UART_SetConfig+0x2d4>)
 8012ed0:	fba3 2302 	umull	r2, r3, r3, r2
 8012ed4:	095b      	lsrs	r3, r3, #5
 8012ed6:	005b      	lsls	r3, r3, #1
 8012ed8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012edc:	441c      	add	r4, r3
 8012ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012ee8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8012eec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8012ef0:	4642      	mov	r2, r8
 8012ef2:	464b      	mov	r3, r9
 8012ef4:	1891      	adds	r1, r2, r2
 8012ef6:	63b9      	str	r1, [r7, #56]	; 0x38
 8012ef8:	415b      	adcs	r3, r3
 8012efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012efc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012f00:	4641      	mov	r1, r8
 8012f02:	1851      	adds	r1, r2, r1
 8012f04:	6339      	str	r1, [r7, #48]	; 0x30
 8012f06:	4649      	mov	r1, r9
 8012f08:	414b      	adcs	r3, r1
 8012f0a:	637b      	str	r3, [r7, #52]	; 0x34
 8012f0c:	f04f 0200 	mov.w	r2, #0
 8012f10:	f04f 0300 	mov.w	r3, #0
 8012f14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8012f18:	4659      	mov	r1, fp
 8012f1a:	00cb      	lsls	r3, r1, #3
 8012f1c:	4651      	mov	r1, sl
 8012f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012f22:	4651      	mov	r1, sl
 8012f24:	00ca      	lsls	r2, r1, #3
 8012f26:	4610      	mov	r0, r2
 8012f28:	4619      	mov	r1, r3
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	4642      	mov	r2, r8
 8012f2e:	189b      	adds	r3, r3, r2
 8012f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012f34:	464b      	mov	r3, r9
 8012f36:	460a      	mov	r2, r1
 8012f38:	eb42 0303 	adc.w	r3, r2, r3
 8012f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012f44:	685b      	ldr	r3, [r3, #4]
 8012f46:	2200      	movs	r2, #0
 8012f48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012f4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8012f50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8012f54:	460b      	mov	r3, r1
 8012f56:	18db      	adds	r3, r3, r3
 8012f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8012f5a:	4613      	mov	r3, r2
 8012f5c:	eb42 0303 	adc.w	r3, r2, r3
 8012f60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012f62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012f66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8012f6a:	f7ed fe8d 	bl	8000c88 <__aeabi_uldivmod>
 8012f6e:	4602      	mov	r2, r0
 8012f70:	460b      	mov	r3, r1
 8012f72:	4b0d      	ldr	r3, [pc, #52]	; (8012fa8 <UART_SetConfig+0x2d4>)
 8012f74:	fba3 1302 	umull	r1, r3, r3, r2
 8012f78:	095b      	lsrs	r3, r3, #5
 8012f7a:	2164      	movs	r1, #100	; 0x64
 8012f7c:	fb01 f303 	mul.w	r3, r1, r3
 8012f80:	1ad3      	subs	r3, r2, r3
 8012f82:	00db      	lsls	r3, r3, #3
 8012f84:	3332      	adds	r3, #50	; 0x32
 8012f86:	4a08      	ldr	r2, [pc, #32]	; (8012fa8 <UART_SetConfig+0x2d4>)
 8012f88:	fba2 2303 	umull	r2, r3, r2, r3
 8012f8c:	095b      	lsrs	r3, r3, #5
 8012f8e:	f003 0207 	and.w	r2, r3, #7
 8012f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012f96:	681b      	ldr	r3, [r3, #0]
 8012f98:	4422      	add	r2, r4
 8012f9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8012f9c:	e105      	b.n	80131aa <UART_SetConfig+0x4d6>
 8012f9e:	bf00      	nop
 8012fa0:	40011000 	.word	0x40011000
 8012fa4:	40011400 	.word	0x40011400
 8012fa8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012fac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012fb6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8012fba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8012fbe:	4642      	mov	r2, r8
 8012fc0:	464b      	mov	r3, r9
 8012fc2:	1891      	adds	r1, r2, r2
 8012fc4:	6239      	str	r1, [r7, #32]
 8012fc6:	415b      	adcs	r3, r3
 8012fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8012fca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012fce:	4641      	mov	r1, r8
 8012fd0:	1854      	adds	r4, r2, r1
 8012fd2:	4649      	mov	r1, r9
 8012fd4:	eb43 0501 	adc.w	r5, r3, r1
 8012fd8:	f04f 0200 	mov.w	r2, #0
 8012fdc:	f04f 0300 	mov.w	r3, #0
 8012fe0:	00eb      	lsls	r3, r5, #3
 8012fe2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8012fe6:	00e2      	lsls	r2, r4, #3
 8012fe8:	4614      	mov	r4, r2
 8012fea:	461d      	mov	r5, r3
 8012fec:	4643      	mov	r3, r8
 8012fee:	18e3      	adds	r3, r4, r3
 8012ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012ff4:	464b      	mov	r3, r9
 8012ff6:	eb45 0303 	adc.w	r3, r5, r3
 8012ffa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	2200      	movs	r2, #0
 8013006:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801300a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 801300e:	f04f 0200 	mov.w	r2, #0
 8013012:	f04f 0300 	mov.w	r3, #0
 8013016:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 801301a:	4629      	mov	r1, r5
 801301c:	008b      	lsls	r3, r1, #2
 801301e:	4621      	mov	r1, r4
 8013020:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013024:	4621      	mov	r1, r4
 8013026:	008a      	lsls	r2, r1, #2
 8013028:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 801302c:	f7ed fe2c 	bl	8000c88 <__aeabi_uldivmod>
 8013030:	4602      	mov	r2, r0
 8013032:	460b      	mov	r3, r1
 8013034:	4b60      	ldr	r3, [pc, #384]	; (80131b8 <UART_SetConfig+0x4e4>)
 8013036:	fba3 2302 	umull	r2, r3, r3, r2
 801303a:	095b      	lsrs	r3, r3, #5
 801303c:	011c      	lsls	r4, r3, #4
 801303e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013042:	2200      	movs	r2, #0
 8013044:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013048:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 801304c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8013050:	4642      	mov	r2, r8
 8013052:	464b      	mov	r3, r9
 8013054:	1891      	adds	r1, r2, r2
 8013056:	61b9      	str	r1, [r7, #24]
 8013058:	415b      	adcs	r3, r3
 801305a:	61fb      	str	r3, [r7, #28]
 801305c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8013060:	4641      	mov	r1, r8
 8013062:	1851      	adds	r1, r2, r1
 8013064:	6139      	str	r1, [r7, #16]
 8013066:	4649      	mov	r1, r9
 8013068:	414b      	adcs	r3, r1
 801306a:	617b      	str	r3, [r7, #20]
 801306c:	f04f 0200 	mov.w	r2, #0
 8013070:	f04f 0300 	mov.w	r3, #0
 8013074:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8013078:	4659      	mov	r1, fp
 801307a:	00cb      	lsls	r3, r1, #3
 801307c:	4651      	mov	r1, sl
 801307e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013082:	4651      	mov	r1, sl
 8013084:	00ca      	lsls	r2, r1, #3
 8013086:	4610      	mov	r0, r2
 8013088:	4619      	mov	r1, r3
 801308a:	4603      	mov	r3, r0
 801308c:	4642      	mov	r2, r8
 801308e:	189b      	adds	r3, r3, r2
 8013090:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013094:	464b      	mov	r3, r9
 8013096:	460a      	mov	r2, r1
 8013098:	eb42 0303 	adc.w	r3, r2, r3
 801309c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80130a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80130a4:	685b      	ldr	r3, [r3, #4]
 80130a6:	2200      	movs	r2, #0
 80130a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80130aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80130ac:	f04f 0200 	mov.w	r2, #0
 80130b0:	f04f 0300 	mov.w	r3, #0
 80130b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80130b8:	4649      	mov	r1, r9
 80130ba:	008b      	lsls	r3, r1, #2
 80130bc:	4641      	mov	r1, r8
 80130be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80130c2:	4641      	mov	r1, r8
 80130c4:	008a      	lsls	r2, r1, #2
 80130c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80130ca:	f7ed fddd 	bl	8000c88 <__aeabi_uldivmod>
 80130ce:	4602      	mov	r2, r0
 80130d0:	460b      	mov	r3, r1
 80130d2:	4b39      	ldr	r3, [pc, #228]	; (80131b8 <UART_SetConfig+0x4e4>)
 80130d4:	fba3 1302 	umull	r1, r3, r3, r2
 80130d8:	095b      	lsrs	r3, r3, #5
 80130da:	2164      	movs	r1, #100	; 0x64
 80130dc:	fb01 f303 	mul.w	r3, r1, r3
 80130e0:	1ad3      	subs	r3, r2, r3
 80130e2:	011b      	lsls	r3, r3, #4
 80130e4:	3332      	adds	r3, #50	; 0x32
 80130e6:	4a34      	ldr	r2, [pc, #208]	; (80131b8 <UART_SetConfig+0x4e4>)
 80130e8:	fba2 2303 	umull	r2, r3, r2, r3
 80130ec:	095b      	lsrs	r3, r3, #5
 80130ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80130f2:	441c      	add	r4, r3
 80130f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80130f8:	2200      	movs	r2, #0
 80130fa:	673b      	str	r3, [r7, #112]	; 0x70
 80130fc:	677a      	str	r2, [r7, #116]	; 0x74
 80130fe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8013102:	4642      	mov	r2, r8
 8013104:	464b      	mov	r3, r9
 8013106:	1891      	adds	r1, r2, r2
 8013108:	60b9      	str	r1, [r7, #8]
 801310a:	415b      	adcs	r3, r3
 801310c:	60fb      	str	r3, [r7, #12]
 801310e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013112:	4641      	mov	r1, r8
 8013114:	1851      	adds	r1, r2, r1
 8013116:	6039      	str	r1, [r7, #0]
 8013118:	4649      	mov	r1, r9
 801311a:	414b      	adcs	r3, r1
 801311c:	607b      	str	r3, [r7, #4]
 801311e:	f04f 0200 	mov.w	r2, #0
 8013122:	f04f 0300 	mov.w	r3, #0
 8013126:	e9d7 ab00 	ldrd	sl, fp, [r7]
 801312a:	4659      	mov	r1, fp
 801312c:	00cb      	lsls	r3, r1, #3
 801312e:	4651      	mov	r1, sl
 8013130:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013134:	4651      	mov	r1, sl
 8013136:	00ca      	lsls	r2, r1, #3
 8013138:	4610      	mov	r0, r2
 801313a:	4619      	mov	r1, r3
 801313c:	4603      	mov	r3, r0
 801313e:	4642      	mov	r2, r8
 8013140:	189b      	adds	r3, r3, r2
 8013142:	66bb      	str	r3, [r7, #104]	; 0x68
 8013144:	464b      	mov	r3, r9
 8013146:	460a      	mov	r2, r1
 8013148:	eb42 0303 	adc.w	r3, r2, r3
 801314c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801314e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8013152:	685b      	ldr	r3, [r3, #4]
 8013154:	2200      	movs	r2, #0
 8013156:	663b      	str	r3, [r7, #96]	; 0x60
 8013158:	667a      	str	r2, [r7, #100]	; 0x64
 801315a:	f04f 0200 	mov.w	r2, #0
 801315e:	f04f 0300 	mov.w	r3, #0
 8013162:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8013166:	4649      	mov	r1, r9
 8013168:	008b      	lsls	r3, r1, #2
 801316a:	4641      	mov	r1, r8
 801316c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8013170:	4641      	mov	r1, r8
 8013172:	008a      	lsls	r2, r1, #2
 8013174:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8013178:	f7ed fd86 	bl	8000c88 <__aeabi_uldivmod>
 801317c:	4602      	mov	r2, r0
 801317e:	460b      	mov	r3, r1
 8013180:	4b0d      	ldr	r3, [pc, #52]	; (80131b8 <UART_SetConfig+0x4e4>)
 8013182:	fba3 1302 	umull	r1, r3, r3, r2
 8013186:	095b      	lsrs	r3, r3, #5
 8013188:	2164      	movs	r1, #100	; 0x64
 801318a:	fb01 f303 	mul.w	r3, r1, r3
 801318e:	1ad3      	subs	r3, r2, r3
 8013190:	011b      	lsls	r3, r3, #4
 8013192:	3332      	adds	r3, #50	; 0x32
 8013194:	4a08      	ldr	r2, [pc, #32]	; (80131b8 <UART_SetConfig+0x4e4>)
 8013196:	fba2 2303 	umull	r2, r3, r2, r3
 801319a:	095b      	lsrs	r3, r3, #5
 801319c:	f003 020f 	and.w	r2, r3, #15
 80131a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	4422      	add	r2, r4
 80131a8:	609a      	str	r2, [r3, #8]
}
 80131aa:	bf00      	nop
 80131ac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80131b0:	46bd      	mov	sp, r7
 80131b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80131b6:	bf00      	nop
 80131b8:	51eb851f 	.word	0x51eb851f

080131bc <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 80131bc:	b580      	push	{r7, lr}
 80131be:	b084      	sub	sp, #16
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 80131c6:	2300      	movs	r3, #0
 80131c8:	60fb      	str	r3, [r7, #12]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80131d0:	68fa      	ldr	r2, [r7, #12]
 80131d2:	429a      	cmp	r2, r3
 80131d4:	d20b      	bcs.n	80131ee <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	011b      	lsls	r3, r3, #4
 80131da:	687a      	ldr	r2, [r7, #4]
 80131dc:	4413      	add	r3, r2
 80131de:	6839      	ldr	r1, [r7, #0]
 80131e0:	4618      	mov	r0, r3
 80131e2:	f000 f817 	bl	8013214 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	3301      	adds	r3, #1
 80131ea:	60fb      	str	r3, [r7, #12]
 80131ec:	e7ed      	b.n	80131ca <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 80131ee:	bf00      	nop
 80131f0:	3710      	adds	r7, #16
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bd80      	pop	{r7, pc}

080131f6 <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80131f6:	b580      	push	{r7, lr}
 80131f8:	b082      	sub	sp, #8
 80131fa:	af00      	add	r7, sp, #0
 80131fc:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 80131fe:	f7f7 fac7 	bl	800a790 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8013202:	4603      	mov	r3, r0
 8013204:	6879      	ldr	r1, [r7, #4]
 8013206:	4618      	mov	r0, r3
 8013208:	f7ff ffd8 	bl	80131bc <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 801320c:	bf00      	nop
 801320e:	3708      	adds	r7, #8
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 8013214:	b5b0      	push	{r4, r5, r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	4618      	mov	r0, r3
 8013222:	f7ee f926 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8013226:	4603      	mov	r3, r0
 8013228:	2b00      	cmp	r3, #0
 801322a:	d001      	beq.n	8013230 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 801322c:	f006 f973 	bl	8019516 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	68dc      	ldr	r4, [r3, #12]
 8013234:	687d      	ldr	r5, [r7, #4]
 8013236:	463b      	mov	r3, r7
 8013238:	4618      	mov	r0, r3
 801323a:	f7f7 fda8 	bl	800ad8e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 801323e:	4603      	mov	r3, r0
 8013240:	4619      	mov	r1, r3
 8013242:	4628      	mov	r0, r5
 8013244:	47a0      	blx	r4
 8013246:	bf00      	nop
    }
 8013248:	3708      	adds	r7, #8
 801324a:	46bd      	mov	sp, r7
 801324c:	bdb0      	pop	{r4, r5, r7, pc}

0801324e <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 801324e:	b5b0      	push	{r4, r5, r7, lr}
 8013250:	b082      	sub	sp, #8
 8013252:	af00      	add	r7, sp, #0
 8013254:	6078      	str	r0, [r7, #4]
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	240f      	movs	r4, #15
 801325a:	461d      	mov	r5, r3
 801325c:	2c00      	cmp	r4, #0
 801325e:	db05      	blt.n	801326c <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 8013260:	4628      	mov	r0, r5
 8013262:	f7f7 fc79 	bl	800ab58 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 8013266:	3510      	adds	r5, #16
 8013268:	3c01      	subs	r4, #1
 801326a:	e7f7      	b.n	801325c <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	2200      	movs	r2, #0
 8013270:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	4618      	mov	r0, r3
 8013278:	3708      	adds	r7, #8
 801327a:	46bd      	mov	sp, r7
 801327c:	bdb0      	pop	{r4, r5, r7, pc}

0801327e <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 801327e:	b590      	push	{r4, r7, lr}
 8013280:	b083      	sub	sp, #12
 8013282:	af00      	add	r7, sp, #0
 8013284:	6078      	str	r0, [r7, #4]
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d00a      	beq.n	80132a2 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	429c      	cmp	r4, r3
 8013296:	d004      	beq.n	80132a2 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 8013298:	3c10      	subs	r4, #16
 801329a:	4620      	mov	r0, r4
 801329c:	f7f7 fa34 	bl	800a708 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 80132a0:	e7f7      	b.n	8013292 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	4618      	mov	r0, r3
 80132a6:	370c      	adds	r7, #12
 80132a8:	46bd      	mov	sp, r7
 80132aa:	bd90      	pop	{r4, r7, pc}

080132ac <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 80132ac:	b580      	push	{r7, lr}
 80132ae:	af00      	add	r7, sp, #0
 80132b0:	4801      	ldr	r0, [pc, #4]	; (80132b8 <__tcf_0+0xc>)
 80132b2:	f7ff ffe4 	bl	801327e <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 80132b6:	bd80      	pop	{r7, pc}
 80132b8:	200015bc 	.word	0x200015bc

080132bc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 80132bc:	b580      	push	{r7, lr}
 80132be:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 80132c0:	4b12      	ldr	r3, [pc, #72]	; (801330c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	f3bf 8f5b 	dmb	ish
 80132c8:	b2db      	uxtb	r3, r3
 80132ca:	f003 0301 	and.w	r3, r3, #1
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	bf0c      	ite	eq
 80132d2:	2301      	moveq	r3, #1
 80132d4:	2300      	movne	r3, #0
 80132d6:	b2db      	uxtb	r3, r3
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d013      	beq.n	8013304 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 80132dc:	480b      	ldr	r0, [pc, #44]	; (801330c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 80132de:	f006 f909 	bl	80194f4 <__cxa_guard_acquire>
 80132e2:	4603      	mov	r3, r0
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	bf14      	ite	ne
 80132e8:	2301      	movne	r3, #1
 80132ea:	2300      	moveq	r3, #0
 80132ec:	b2db      	uxtb	r3, r3
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d008      	beq.n	8013304 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 80132f2:	4807      	ldr	r0, [pc, #28]	; (8013310 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 80132f4:	f7ff ffab 	bl	801324e <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 80132f8:	4806      	ldr	r0, [pc, #24]	; (8013314 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 80132fa:	f006 fb5c 	bl	80199b6 <atexit>
 80132fe:	4803      	ldr	r0, [pc, #12]	; (801330c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 8013300:	f006 f904 	bl	801950c <__cxa_guard_release>
		return instance;
 8013304:	4b02      	ldr	r3, [pc, #8]	; (8013310 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8013306:	4618      	mov	r0, r3
 8013308:	bd80      	pop	{r7, pc}
 801330a:	bf00      	nop
 801330c:	200016c0 	.word	0x200016c0
 8013310:	200015bc 	.word	0x200015bc
 8013314:	080132ad 	.word	0x080132ad

08013318 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 8013318:	b580      	push	{r7, lr}
 801331a:	b084      	sub	sp, #16
 801331c:	af00      	add	r7, sp, #0
 801331e:	6078      	str	r0, [r7, #4]
 8013320:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8013322:	2300      	movs	r3, #0
 8013324:	60fb      	str	r3, [r7, #12]
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 801332c:	68fa      	ldr	r2, [r7, #12]
 801332e:	429a      	cmp	r2, r3
 8013330:	d20b      	bcs.n	801334a <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	011b      	lsls	r3, r3, #4
 8013336:	687a      	ldr	r2, [r7, #4]
 8013338:	4413      	add	r3, r2
 801333a:	6839      	ldr	r1, [r7, #0]
 801333c:	4618      	mov	r0, r3
 801333e:	f7ff ff69 	bl	8013214 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	3301      	adds	r3, #1
 8013346:	60fb      	str	r3, [r7, #12]
 8013348:	e7ed      	b.n	8013326 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 801334a:	bf00      	nop
 801334c:	3710      	adds	r7, #16
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}

08013352 <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8013352:	b580      	push	{r7, lr}
 8013354:	b082      	sub	sp, #8
 8013356:	af00      	add	r7, sp, #0
 8013358:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 801335a:	f7ff ffaf 	bl	80132bc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 801335e:	4603      	mov	r3, r0
 8013360:	6879      	ldr	r1, [r7, #4]
 8013362:	4618      	mov	r0, r3
 8013364:	f7ff ffd8 	bl	8013318 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 8013368:	bf00      	nop
 801336a:	3708      	adds	r7, #8
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}

08013370 <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	460b      	mov	r3, r1
 801337a:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 801337c:	2300      	movs	r3, #0
 801337e:	60fb      	str	r3, [r7, #12]
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8013386:	68fa      	ldr	r2, [r7, #12]
 8013388:	429a      	cmp	r2, r3
 801338a:	d20c      	bcs.n	80133a6 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	011b      	lsls	r3, r3, #4
 8013390:	687a      	ldr	r2, [r7, #4]
 8013392:	4413      	add	r3, r2
 8013394:	887a      	ldrh	r2, [r7, #2]
 8013396:	4611      	mov	r1, r2
 8013398:	4618      	mov	r0, r3
 801339a:	f000 f819 	bl	80133d0 <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	3301      	adds	r3, #1
 80133a2:	60fb      	str	r3, [r7, #12]
 80133a4:	e7ec      	b.n	8013380 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 80133a6:	bf00      	nop
 80133a8:	3710      	adds	r7, #16
 80133aa:	46bd      	mov	sp, r7
 80133ac:	bd80      	pop	{r7, pc}

080133ae <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80133ae:	b580      	push	{r7, lr}
 80133b0:	b082      	sub	sp, #8
 80133b2:	af00      	add	r7, sp, #0
 80133b4:	4603      	mov	r3, r0
 80133b6:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 80133b8:	f7f5 fa08 	bl	80087cc <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 80133bc:	4602      	mov	r2, r0
 80133be:	88fb      	ldrh	r3, [r7, #6]
 80133c0:	4619      	mov	r1, r3
 80133c2:	4610      	mov	r0, r2
 80133c4:	f7ff ffd4 	bl	8013370 <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 80133c8:	bf00      	nop
 80133ca:	3708      	adds	r7, #8
 80133cc:	46bd      	mov	sp, r7
 80133ce:	bd80      	pop	{r7, pc}

080133d0 <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 80133d0:	b5b0      	push	{r4, r5, r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	460b      	mov	r3, r1
 80133da:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	4618      	mov	r0, r3
 80133e0:	f7ee f847 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 80133e4:	4603      	mov	r3, r0
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d001      	beq.n	80133ee <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 80133ea:	f006 f894 	bl	8019516 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	68dc      	ldr	r4, [r3, #12]
 80133f2:	687d      	ldr	r5, [r7, #4]
 80133f4:	1cbb      	adds	r3, r7, #2
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7f5 fda7 	bl	8008f4a <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80133fc:	4603      	mov	r3, r0
 80133fe:	4619      	mov	r1, r3
 8013400:	4628      	mov	r0, r5
 8013402:	47a0      	blx	r4
 8013404:	bf00      	nop
    }
 8013406:	3708      	adds	r7, #8
 8013408:	46bd      	mov	sp, r7
 801340a:	bdb0      	pop	{r4, r5, r7, pc}

0801340c <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>:
	void notify(TIM_HandleTypeDef *htim) {
 801340c:	b580      	push	{r7, lr}
 801340e:	b084      	sub	sp, #16
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
 8013414:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8013416:	2300      	movs	r3, #0
 8013418:	60fb      	str	r3, [r7, #12]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8013420:	68fa      	ldr	r2, [r7, #12]
 8013422:	429a      	cmp	r2, r3
 8013424:	d20b      	bcs.n	801343e <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0x32>
			m_listeners[i](htim);
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	011b      	lsls	r3, r3, #4
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	4413      	add	r3, r2
 801342e:	6839      	ldr	r1, [r7, #0]
 8013430:	4618      	mov	r0, r3
 8013432:	f000 f817 	bl	8013464 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	3301      	adds	r3, #1
 801343a:	60fb      	str	r3, [r7, #12]
 801343c:	e7ed      	b.n	801341a <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0xe>
	}
 801343e:	bf00      	nop
 8013440:	3710      	adds	r7, #16
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}

08013446 <PeriodElapsedCallback>:

#ifdef __cplusplus
extern "C" {
#endif

void PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8013446:	b580      	push	{r7, lr}
 8013448:	b082      	sub	sp, #8
 801344a:	af00      	add	r7, sp, #0
 801344c:	6078      	str	r0, [r7, #4]
	TimPeriodElapsedCallbackHandler::getInstance().notify(htim);
 801344e:	f7f5 fad1 	bl	80089f4 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 8013452:	4603      	mov	r3, r0
 8013454:	6879      	ldr	r1, [r7, #4]
 8013456:	4618      	mov	r0, r3
 8013458:	f7ff ffd8 	bl	801340c <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>
}
 801345c:	bf00      	nop
 801345e:	3708      	adds	r7, #8
 8013460:	46bd      	mov	sp, r7
 8013462:	bd80      	pop	{r7, pc}

08013464 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 8013464:	b5b0      	push	{r4, r5, r7, lr}
 8013466:	b082      	sub	sp, #8
 8013468:	af00      	add	r7, sp, #0
 801346a:	6078      	str	r0, [r7, #4]
 801346c:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	4618      	mov	r0, r3
 8013472:	f7ed fffe 	bl	8001472 <_ZNKSt14_Function_base8_M_emptyEv>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	d001      	beq.n	8013480 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 801347c:	f006 f84b 	bl	8019516 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	68dc      	ldr	r4, [r3, #12]
 8013484:	687d      	ldr	r5, [r7, #4]
 8013486:	463b      	mov	r3, r7
 8013488:	4618      	mov	r0, r3
 801348a:	f7f5 fe66 	bl	800915a <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 801348e:	4603      	mov	r3, r0
 8013490:	4619      	mov	r1, r3
 8013492:	4628      	mov	r0, r5
 8013494:	47a0      	blx	r4
 8013496:	bf00      	nop
    }
 8013498:	3708      	adds	r7, #8
 801349a:	46bd      	mov	sp, r7
 801349c:	bdb0      	pop	{r4, r5, r7, pc}

0801349e <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 801349e:	b480      	push	{r7}
 80134a0:	b085      	sub	sp, #20
 80134a2:	af00      	add	r7, sp, #0
 80134a4:	60b9      	str	r1, [r7, #8]
 80134a6:	607a      	str	r2, [r7, #4]
 80134a8:	603b      	str	r3, [r7, #0]
 80134aa:	4603      	mov	r3, r0
 80134ac:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80134ae:	bf00      	nop
 80134b0:	3714      	adds	r7, #20
 80134b2:	46bd      	mov	sp, r7
 80134b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134b8:	4770      	bx	lr

080134ba <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80134ba:	b580      	push	{r7, lr}
 80134bc:	b084      	sub	sp, #16
 80134be:	af00      	add	r7, sp, #0
 80134c0:	60b9      	str	r1, [r7, #8]
 80134c2:	607a      	str	r2, [r7, #4]
 80134c4:	603b      	str	r3, [r7, #0]
 80134c6:	4603      	mov	r3, r0
 80134c8:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80134ca:	7bfb      	ldrb	r3, [r7, #15]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d003      	beq.n	80134d8 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 80134d0:	7bfb      	ldrb	r3, [r7, #15]
 80134d2:	4618      	mov	r0, r3
 80134d4:	f001 fc6f 	bl	8014db6 <_putchar>
  }
}
 80134d8:	bf00      	nop
 80134da:	3710      	adds	r7, #16
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}

080134e0 <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 80134e0:	b480      	push	{r7}
 80134e2:	b085      	sub	sp, #20
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
 80134e8:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	60fb      	str	r3, [r7, #12]
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	781b      	ldrb	r3, [r3, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d006      	beq.n	8013504 <_ZL10_strnlen_sPKcj+0x24>
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	1e5a      	subs	r2, r3, #1
 80134fa:	603a      	str	r2, [r7, #0]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d001      	beq.n	8013504 <_ZL10_strnlen_sPKcj+0x24>
 8013500:	2301      	movs	r3, #1
 8013502:	e000      	b.n	8013506 <_ZL10_strnlen_sPKcj+0x26>
 8013504:	2300      	movs	r3, #0
 8013506:	2b00      	cmp	r3, #0
 8013508:	d003      	beq.n	8013512 <_ZL10_strnlen_sPKcj+0x32>
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	3301      	adds	r3, #1
 801350e:	60fb      	str	r3, [r7, #12]
 8013510:	e7ed      	b.n	80134ee <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 8013512:	68fa      	ldr	r2, [r7, #12]
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	1ad3      	subs	r3, r2, r3
}
 8013518:	4618      	mov	r0, r3
 801351a:	3714      	adds	r7, #20
 801351c:	46bd      	mov	sp, r7
 801351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013522:	4770      	bx	lr

08013524 <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8013524:	b480      	push	{r7}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
 801352a:	4603      	mov	r3, r0
 801352c:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 801352e:	79fb      	ldrb	r3, [r7, #7]
 8013530:	2b2f      	cmp	r3, #47	; 0x2f
 8013532:	d904      	bls.n	801353e <_ZL9_is_digitc+0x1a>
 8013534:	79fb      	ldrb	r3, [r7, #7]
 8013536:	2b39      	cmp	r3, #57	; 0x39
 8013538:	d801      	bhi.n	801353e <_ZL9_is_digitc+0x1a>
 801353a:	2301      	movs	r3, #1
 801353c:	e000      	b.n	8013540 <_ZL9_is_digitc+0x1c>
 801353e:	2300      	movs	r3, #0
}
 8013540:	4618      	mov	r0, r3
 8013542:	370c      	adds	r7, #12
 8013544:	46bd      	mov	sp, r7
 8013546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801354a:	4770      	bx	lr

0801354c <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 801354c:	b580      	push	{r7, lr}
 801354e:	b084      	sub	sp, #16
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8013554:	2300      	movs	r3, #0
 8013556:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	4618      	mov	r0, r3
 8013560:	f7ff ffe0 	bl	8013524 <_ZL9_is_digitc>
 8013564:	4603      	mov	r3, r0
 8013566:	2b00      	cmp	r3, #0
 8013568:	d00f      	beq.n	801358a <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 801356a:	68fa      	ldr	r2, [r7, #12]
 801356c:	4613      	mov	r3, r2
 801356e:	009b      	lsls	r3, r3, #2
 8013570:	4413      	add	r3, r2
 8013572:	005b      	lsls	r3, r3, #1
 8013574:	4618      	mov	r0, r3
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	1c59      	adds	r1, r3, #1
 801357c:	687a      	ldr	r2, [r7, #4]
 801357e:	6011      	str	r1, [r2, #0]
 8013580:	781b      	ldrb	r3, [r3, #0]
 8013582:	4403      	add	r3, r0
 8013584:	3b30      	subs	r3, #48	; 0x30
 8013586:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8013588:	e7e6      	b.n	8013558 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 801358a:	68fb      	ldr	r3, [r7, #12]
}
 801358c:	4618      	mov	r0, r3
 801358e:	3710      	adds	r7, #16
 8013590:	46bd      	mov	sp, r7
 8013592:	bd80      	pop	{r7, pc}

08013594 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8013594:	b590      	push	{r4, r7, lr}
 8013596:	b087      	sub	sp, #28
 8013598:	af00      	add	r7, sp, #0
 801359a:	60f8      	str	r0, [r7, #12]
 801359c:	60b9      	str	r1, [r7, #8]
 801359e:	607a      	str	r2, [r7, #4]
 80135a0:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80135a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135a8:	f003 0302 	and.w	r3, r3, #2
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d116      	bne.n	80135de <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 80135b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80135b2:	f003 0301 	and.w	r3, r3, #1
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d111      	bne.n	80135de <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 80135ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135bc:	617b      	str	r3, [r7, #20]
 80135be:	697a      	ldr	r2, [r7, #20]
 80135c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d20b      	bcs.n	80135de <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 80135c6:	687a      	ldr	r2, [r7, #4]
 80135c8:	1c53      	adds	r3, r2, #1
 80135ca:	607b      	str	r3, [r7, #4]
 80135cc:	68fc      	ldr	r4, [r7, #12]
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	68b9      	ldr	r1, [r7, #8]
 80135d2:	2020      	movs	r0, #32
 80135d4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	3301      	adds	r3, #1
 80135da:	617b      	str	r3, [r7, #20]
 80135dc:	e7ef      	b.n	80135be <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 80135de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d00e      	beq.n	8013602 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 80135e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e6:	3b01      	subs	r3, #1
 80135e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80135ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ee:	4413      	add	r3, r2
 80135f0:	7818      	ldrb	r0, [r3, #0]
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	1c53      	adds	r3, r2, #1
 80135f6:	607b      	str	r3, [r7, #4]
 80135f8:	68fc      	ldr	r4, [r7, #12]
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	68b9      	ldr	r1, [r7, #8]
 80135fe:	47a0      	blx	r4
  while (len) {
 8013600:	e7ed      	b.n	80135de <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8013602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013604:	f003 0302 	and.w	r3, r3, #2
 8013608:	2b00      	cmp	r3, #0
 801360a:	d00e      	beq.n	801362a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 801360c:	687a      	ldr	r2, [r7, #4]
 801360e:	693b      	ldr	r3, [r7, #16]
 8013610:	1ad3      	subs	r3, r2, r3
 8013612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013614:	429a      	cmp	r2, r3
 8013616:	d908      	bls.n	801362a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	1c53      	adds	r3, r2, #1
 801361c:	607b      	str	r3, [r7, #4]
 801361e:	68fc      	ldr	r4, [r7, #12]
 8013620:	683b      	ldr	r3, [r7, #0]
 8013622:	68b9      	ldr	r1, [r7, #8]
 8013624:	2020      	movs	r0, #32
 8013626:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8013628:	e7f0      	b.n	801360c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 801362a:	687b      	ldr	r3, [r7, #4]
}
 801362c:	4618      	mov	r0, r3
 801362e:	371c      	adds	r7, #28
 8013630:	46bd      	mov	sp, r7
 8013632:	bd90      	pop	{r4, r7, pc}

08013634 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b088      	sub	sp, #32
 8013638:	af04      	add	r7, sp, #16
 801363a:	60f8      	str	r0, [r7, #12]
 801363c:	60b9      	str	r1, [r7, #8]
 801363e:	607a      	str	r2, [r7, #4]
 8013640:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8013642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013644:	f003 0302 	and.w	r3, r3, #2
 8013648:	2b00      	cmp	r3, #0
 801364a:	d136      	bne.n	80136ba <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 801364c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801364e:	2b00      	cmp	r3, #0
 8013650:	d010      	beq.n	8013674 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 8013652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013654:	f003 0301 	and.w	r3, r3, #1
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00b      	beq.n	8013674 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 801365c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d104      	bne.n	801366e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 8013664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013666:	f003 030c 	and.w	r3, r3, #12
 801366a:	2b00      	cmp	r3, #0
 801366c:	d002      	beq.n	8013674 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 801366e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013670:	3b01      	subs	r3, #1
 8013672:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8013674:	69fa      	ldr	r2, [r7, #28]
 8013676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013678:	429a      	cmp	r2, r3
 801367a:	d20a      	bcs.n	8013692 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 801367c:	69fb      	ldr	r3, [r7, #28]
 801367e:	2b1f      	cmp	r3, #31
 8013680:	d807      	bhi.n	8013692 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 8013682:	69fb      	ldr	r3, [r7, #28]
 8013684:	1c5a      	adds	r2, r3, #1
 8013686:	61fa      	str	r2, [r7, #28]
 8013688:	69ba      	ldr	r2, [r7, #24]
 801368a:	4413      	add	r3, r2
 801368c:	2230      	movs	r2, #48	; 0x30
 801368e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8013690:	e7f0      	b.n	8013674 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8013692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013694:	f003 0301 	and.w	r3, r3, #1
 8013698:	2b00      	cmp	r3, #0
 801369a:	d00e      	beq.n	80136ba <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 801369c:	69fa      	ldr	r2, [r7, #28]
 801369e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d20a      	bcs.n	80136ba <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 80136a4:	69fb      	ldr	r3, [r7, #28]
 80136a6:	2b1f      	cmp	r3, #31
 80136a8:	d807      	bhi.n	80136ba <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 80136aa:	69fb      	ldr	r3, [r7, #28]
 80136ac:	1c5a      	adds	r2, r3, #1
 80136ae:	61fa      	str	r2, [r7, #28]
 80136b0:	69ba      	ldr	r2, [r7, #24]
 80136b2:	4413      	add	r3, r2
 80136b4:	2230      	movs	r2, #48	; 0x30
 80136b6:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80136b8:	e7eb      	b.n	8013692 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 80136ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136bc:	f003 0310 	and.w	r3, r3, #16
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d058      	beq.n	8013776 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80136c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d116      	bne.n	80136fc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 80136ce:	69fb      	ldr	r3, [r7, #28]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d013      	beq.n	80136fc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 80136d4:	69fa      	ldr	r2, [r7, #28]
 80136d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136d8:	429a      	cmp	r2, r3
 80136da:	d003      	beq.n	80136e4 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 80136dc:	69fa      	ldr	r2, [r7, #28]
 80136de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e0:	429a      	cmp	r2, r3
 80136e2:	d10b      	bne.n	80136fc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 80136e4:	69fb      	ldr	r3, [r7, #28]
 80136e6:	3b01      	subs	r3, #1
 80136e8:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 80136ea:	69fb      	ldr	r3, [r7, #28]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d005      	beq.n	80136fc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 80136f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136f2:	2b10      	cmp	r3, #16
 80136f4:	d102      	bne.n	80136fc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 80136f6:	69fb      	ldr	r3, [r7, #28]
 80136f8:	3b01      	subs	r3, #1
 80136fa:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80136fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fe:	2b10      	cmp	r3, #16
 8013700:	d10f      	bne.n	8013722 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 8013702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013704:	f003 0320 	and.w	r3, r3, #32
 8013708:	2b00      	cmp	r3, #0
 801370a:	d10a      	bne.n	8013722 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	2b1f      	cmp	r3, #31
 8013710:	d807      	bhi.n	8013722 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 8013712:	69fb      	ldr	r3, [r7, #28]
 8013714:	1c5a      	adds	r2, r3, #1
 8013716:	61fa      	str	r2, [r7, #28]
 8013718:	69ba      	ldr	r2, [r7, #24]
 801371a:	4413      	add	r3, r2
 801371c:	2278      	movs	r2, #120	; 0x78
 801371e:	701a      	strb	r2, [r3, #0]
 8013720:	e01f      	b.n	8013762 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8013722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013724:	2b10      	cmp	r3, #16
 8013726:	d10f      	bne.n	8013748 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8013728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372a:	f003 0320 	and.w	r3, r3, #32
 801372e:	2b00      	cmp	r3, #0
 8013730:	d00a      	beq.n	8013748 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8013732:	69fb      	ldr	r3, [r7, #28]
 8013734:	2b1f      	cmp	r3, #31
 8013736:	d807      	bhi.n	8013748 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 8013738:	69fb      	ldr	r3, [r7, #28]
 801373a:	1c5a      	adds	r2, r3, #1
 801373c:	61fa      	str	r2, [r7, #28]
 801373e:	69ba      	ldr	r2, [r7, #24]
 8013740:	4413      	add	r3, r2
 8013742:	2258      	movs	r2, #88	; 0x58
 8013744:	701a      	strb	r2, [r3, #0]
 8013746:	e00c      	b.n	8013762 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8013748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374a:	2b02      	cmp	r3, #2
 801374c:	d109      	bne.n	8013762 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 801374e:	69fb      	ldr	r3, [r7, #28]
 8013750:	2b1f      	cmp	r3, #31
 8013752:	d806      	bhi.n	8013762 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 8013754:	69fb      	ldr	r3, [r7, #28]
 8013756:	1c5a      	adds	r2, r3, #1
 8013758:	61fa      	str	r2, [r7, #28]
 801375a:	69ba      	ldr	r2, [r7, #24]
 801375c:	4413      	add	r3, r2
 801375e:	2262      	movs	r2, #98	; 0x62
 8013760:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8013762:	69fb      	ldr	r3, [r7, #28]
 8013764:	2b1f      	cmp	r3, #31
 8013766:	d806      	bhi.n	8013776 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	1c5a      	adds	r2, r3, #1
 801376c:	61fa      	str	r2, [r7, #28]
 801376e:	69ba      	ldr	r2, [r7, #24]
 8013770:	4413      	add	r3, r2
 8013772:	2230      	movs	r2, #48	; 0x30
 8013774:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8013776:	69fb      	ldr	r3, [r7, #28]
 8013778:	2b1f      	cmp	r3, #31
 801377a:	d824      	bhi.n	80137c6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 801377c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d007      	beq.n	8013794 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 8013784:	69fb      	ldr	r3, [r7, #28]
 8013786:	1c5a      	adds	r2, r3, #1
 8013788:	61fa      	str	r2, [r7, #28]
 801378a:	69ba      	ldr	r2, [r7, #24]
 801378c:	4413      	add	r3, r2
 801378e:	222d      	movs	r2, #45	; 0x2d
 8013790:	701a      	strb	r2, [r3, #0]
 8013792:	e018      	b.n	80137c6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8013794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013796:	f003 0304 	and.w	r3, r3, #4
 801379a:	2b00      	cmp	r3, #0
 801379c:	d007      	beq.n	80137ae <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 801379e:	69fb      	ldr	r3, [r7, #28]
 80137a0:	1c5a      	adds	r2, r3, #1
 80137a2:	61fa      	str	r2, [r7, #28]
 80137a4:	69ba      	ldr	r2, [r7, #24]
 80137a6:	4413      	add	r3, r2
 80137a8:	222b      	movs	r2, #43	; 0x2b
 80137aa:	701a      	strb	r2, [r3, #0]
 80137ac:	e00b      	b.n	80137c6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 80137ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b0:	f003 0308 	and.w	r3, r3, #8
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d006      	beq.n	80137c6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 80137b8:	69fb      	ldr	r3, [r7, #28]
 80137ba:	1c5a      	adds	r2, r3, #1
 80137bc:	61fa      	str	r2, [r7, #28]
 80137be:	69ba      	ldr	r2, [r7, #24]
 80137c0:	4413      	add	r3, r2
 80137c2:	2220      	movs	r2, #32
 80137c4:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80137c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137c8:	9303      	str	r3, [sp, #12]
 80137ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137cc:	9302      	str	r3, [sp, #8]
 80137ce:	69fb      	ldr	r3, [r7, #28]
 80137d0:	9301      	str	r3, [sp, #4]
 80137d2:	69bb      	ldr	r3, [r7, #24]
 80137d4:	9300      	str	r3, [sp, #0]
 80137d6:	683b      	ldr	r3, [r7, #0]
 80137d8:	687a      	ldr	r2, [r7, #4]
 80137da:	68b9      	ldr	r1, [r7, #8]
 80137dc:	68f8      	ldr	r0, [r7, #12]
 80137de:	f7ff fed9 	bl	8013594 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 80137e2:	4603      	mov	r3, r0
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	3710      	adds	r7, #16
 80137e8:	46bd      	mov	sp, r7
 80137ea:	bd80      	pop	{r7, pc}

080137ec <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80137ec:	b580      	push	{r7, lr}
 80137ee:	b096      	sub	sp, #88	; 0x58
 80137f0:	af08      	add	r7, sp, #32
 80137f2:	60f8      	str	r0, [r7, #12]
 80137f4:	60b9      	str	r1, [r7, #8]
 80137f6:	607a      	str	r2, [r7, #4]
 80137f8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80137fa:	2300      	movs	r3, #0
 80137fc:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80137fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013800:	2b00      	cmp	r3, #0
 8013802:	d103      	bne.n	801380c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 8013804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013806:	f023 0310 	bic.w	r3, r3, #16
 801380a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 801380c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801380e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013812:	2b00      	cmp	r3, #0
 8013814:	d002      	beq.n	801381c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 8013816:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013818:	2b00      	cmp	r3, #0
 801381a:	d033      	beq.n	8013884 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 801381c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801381e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013820:	fbb3 f2f2 	udiv	r2, r3, r2
 8013824:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8013826:	fb01 f202 	mul.w	r2, r1, r2
 801382a:	1a9b      	subs	r3, r3, r2
 801382c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8013830:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013834:	2b09      	cmp	r3, #9
 8013836:	d804      	bhi.n	8013842 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 8013838:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801383c:	3330      	adds	r3, #48	; 0x30
 801383e:	b2da      	uxtb	r2, r3
 8013840:	e00d      	b.n	801385e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 8013842:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013844:	f003 0320 	and.w	r3, r3, #32
 8013848:	2b00      	cmp	r3, #0
 801384a:	d001      	beq.n	8013850 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 801384c:	2241      	movs	r2, #65	; 0x41
 801384e:	e000      	b.n	8013852 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 8013850:	2261      	movs	r2, #97	; 0x61
 8013852:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013856:	4413      	add	r3, r2
 8013858:	b2db      	uxtb	r3, r3
 801385a:	3b0a      	subs	r3, #10
 801385c:	b2da      	uxtb	r2, r3
 801385e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013860:	1c59      	adds	r1, r3, #1
 8013862:	6379      	str	r1, [r7, #52]	; 0x34
 8013864:	3338      	adds	r3, #56	; 0x38
 8013866:	443b      	add	r3, r7
 8013868:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 801386c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801386e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013870:	fbb2 f3f3 	udiv	r3, r2, r3
 8013874:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8013876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013878:	2b00      	cmp	r3, #0
 801387a:	d003      	beq.n	8013884 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 801387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801387e:	2b1f      	cmp	r3, #31
 8013880:	d800      	bhi.n	8013884 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 8013882:	e7cb      	b.n	801381c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8013884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013886:	9306      	str	r3, [sp, #24]
 8013888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801388a:	9305      	str	r3, [sp, #20]
 801388c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801388e:	9304      	str	r3, [sp, #16]
 8013890:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013892:	9303      	str	r3, [sp, #12]
 8013894:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8013898:	9302      	str	r3, [sp, #8]
 801389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801389c:	9301      	str	r3, [sp, #4]
 801389e:	f107 0310 	add.w	r3, r7, #16
 80138a2:	9300      	str	r3, [sp, #0]
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	687a      	ldr	r2, [r7, #4]
 80138a8:	68b9      	ldr	r1, [r7, #8]
 80138aa:	68f8      	ldr	r0, [r7, #12]
 80138ac:	f7ff fec2 	bl	8013634 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 80138b0:	4603      	mov	r3, r0
}
 80138b2:	4618      	mov	r0, r3
 80138b4:	3738      	adds	r7, #56	; 0x38
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}

080138ba <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80138ba:	b580      	push	{r7, lr}
 80138bc:	b096      	sub	sp, #88	; 0x58
 80138be:	af08      	add	r7, sp, #32
 80138c0:	60f8      	str	r0, [r7, #12]
 80138c2:	60b9      	str	r1, [r7, #8]
 80138c4:	607a      	str	r2, [r7, #4]
 80138c6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 80138c8:	2300      	movs	r3, #0
 80138ca:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 80138cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80138d0:	4313      	orrs	r3, r2
 80138d2:	d103      	bne.n	80138dc <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 80138d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80138d6:	f023 0310 	bic.w	r3, r3, #16
 80138da:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 80138dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80138de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d003      	beq.n	80138ee <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 80138e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80138ea:	4313      	orrs	r3, r2
 80138ec:	d038      	beq.n	8013960 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 80138ee:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80138f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80138f6:	f7ed f9c7 	bl	8000c88 <__aeabi_uldivmod>
 80138fa:	4613      	mov	r3, r2
 80138fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8013900:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013904:	2b09      	cmp	r3, #9
 8013906:	d804      	bhi.n	8013912 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 8013908:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801390c:	3330      	adds	r3, #48	; 0x30
 801390e:	b2da      	uxtb	r2, r3
 8013910:	e00d      	b.n	801392e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 8013912:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013914:	f003 0320 	and.w	r3, r3, #32
 8013918:	2b00      	cmp	r3, #0
 801391a:	d001      	beq.n	8013920 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 801391c:	2241      	movs	r2, #65	; 0x41
 801391e:	e000      	b.n	8013922 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 8013920:	2261      	movs	r2, #97	; 0x61
 8013922:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013926:	4413      	add	r3, r2
 8013928:	b2db      	uxtb	r3, r3
 801392a:	3b0a      	subs	r3, #10
 801392c:	b2da      	uxtb	r2, r3
 801392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013930:	1c59      	adds	r1, r3, #1
 8013932:	6379      	str	r1, [r7, #52]	; 0x34
 8013934:	3338      	adds	r3, #56	; 0x38
 8013936:	443b      	add	r3, r7
 8013938:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 801393c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8013940:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8013944:	f7ed f9a0 	bl	8000c88 <__aeabi_uldivmod>
 8013948:	4602      	mov	r2, r0
 801394a:	460b      	mov	r3, r1
 801394c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8013950:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8013954:	4313      	orrs	r3, r2
 8013956:	d003      	beq.n	8013960 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 8013958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801395a:	2b1f      	cmp	r3, #31
 801395c:	d800      	bhi.n	8013960 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 801395e:	e7c6      	b.n	80138ee <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8013960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013962:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013964:	9206      	str	r2, [sp, #24]
 8013966:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013968:	9205      	str	r2, [sp, #20]
 801396a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801396c:	9204      	str	r2, [sp, #16]
 801396e:	9303      	str	r3, [sp, #12]
 8013970:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8013974:	9302      	str	r3, [sp, #8]
 8013976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013978:	9301      	str	r3, [sp, #4]
 801397a:	f107 0310 	add.w	r3, r7, #16
 801397e:	9300      	str	r3, [sp, #0]
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	687a      	ldr	r2, [r7, #4]
 8013984:	68b9      	ldr	r1, [r7, #8]
 8013986:	68f8      	ldr	r0, [r7, #12]
 8013988:	f7ff fe54 	bl	8013634 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 801398c:	4603      	mov	r3, r0
}
 801398e:	4618      	mov	r0, r3
 8013990:	3738      	adds	r7, #56	; 0x38
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
	...

08013998 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8013998:	b590      	push	{r4, r7, lr}
 801399a:	b09d      	sub	sp, #116	; 0x74
 801399c:	af04      	add	r7, sp, #16
 801399e:	6178      	str	r0, [r7, #20]
 80139a0:	6139      	str	r1, [r7, #16]
 80139a2:	60fa      	str	r2, [r7, #12]
 80139a4:	60bb      	str	r3, [r7, #8]
 80139a6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 80139aa:	2300      	movs	r3, #0
 80139ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 80139ae:	f04f 0200 	mov.w	r2, #0
 80139b2:	f04f 0300 	mov.w	r3, #0
 80139b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 80139ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80139be:	e9d7 0100 	ldrd	r0, r1, [r7]
 80139c2:	f7ed f881 	bl	8000ac8 <__aeabi_dcmpeq>
 80139c6:	4603      	mov	r3, r0
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d10f      	bne.n	80139ec <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 80139cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80139ce:	9303      	str	r3, [sp, #12]
 80139d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80139d2:	9302      	str	r3, [sp, #8]
 80139d4:	2303      	movs	r3, #3
 80139d6:	9301      	str	r3, [sp, #4]
 80139d8:	4ba7      	ldr	r3, [pc, #668]	; (8013c78 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 80139da:	9300      	str	r3, [sp, #0]
 80139dc:	68bb      	ldr	r3, [r7, #8]
 80139de:	68fa      	ldr	r2, [r7, #12]
 80139e0:	6939      	ldr	r1, [r7, #16]
 80139e2:	6978      	ldr	r0, [r7, #20]
 80139e4:	f7ff fdd6 	bl	8013594 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 80139e8:	4603      	mov	r3, r0
 80139ea:	e230      	b.n	8013e4e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 80139ec:	f04f 32ff 	mov.w	r2, #4294967295
 80139f0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 80139f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80139f8:	f7ed f870 	bl	8000adc <__aeabi_dcmplt>
 80139fc:	4603      	mov	r3, r0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d00f      	beq.n	8013a22 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8013a02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a04:	9303      	str	r3, [sp, #12]
 8013a06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013a08:	9302      	str	r3, [sp, #8]
 8013a0a:	2304      	movs	r3, #4
 8013a0c:	9301      	str	r3, [sp, #4]
 8013a0e:	4b9b      	ldr	r3, [pc, #620]	; (8013c7c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 8013a10:	9300      	str	r3, [sp, #0]
 8013a12:	68bb      	ldr	r3, [r7, #8]
 8013a14:	68fa      	ldr	r2, [r7, #12]
 8013a16:	6939      	ldr	r1, [r7, #16]
 8013a18:	6978      	ldr	r0, [r7, #20]
 8013a1a:	f7ff fdbb 	bl	8013594 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8013a1e:	4603      	mov	r3, r0
 8013a20:	e215      	b.n	8013e4e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 8013a22:	f04f 32ff 	mov.w	r2, #4294967295
 8013a26:	4b96      	ldr	r3, [pc, #600]	; (8013c80 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 8013a28:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013a2c:	f7ed f874 	bl	8000b18 <__aeabi_dcmpgt>
 8013a30:	4603      	mov	r3, r0
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d01d      	beq.n	8013a72 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8013a36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a38:	f003 0304 	and.w	r3, r3, #4
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d001      	beq.n	8013a44 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 8013a40:	4b90      	ldr	r3, [pc, #576]	; (8013c84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 8013a42:	e000      	b.n	8013a46 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 8013a44:	4b90      	ldr	r3, [pc, #576]	; (8013c88 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 8013a46:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013a48:	f002 0204 	and.w	r2, r2, #4
 8013a4c:	2a00      	cmp	r2, #0
 8013a4e:	d001      	beq.n	8013a54 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 8013a50:	2204      	movs	r2, #4
 8013a52:	e000      	b.n	8013a56 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 8013a54:	2203      	movs	r2, #3
 8013a56:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8013a58:	9103      	str	r1, [sp, #12]
 8013a5a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8013a5c:	9102      	str	r1, [sp, #8]
 8013a5e:	9201      	str	r2, [sp, #4]
 8013a60:	9300      	str	r3, [sp, #0]
 8013a62:	68bb      	ldr	r3, [r7, #8]
 8013a64:	68fa      	ldr	r2, [r7, #12]
 8013a66:	6939      	ldr	r1, [r7, #16]
 8013a68:	6978      	ldr	r0, [r7, #20]
 8013a6a:	f7ff fd93 	bl	8013594 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	e1ed      	b.n	8013e4e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8013a72:	a37d      	add	r3, pc, #500	; (adr r3, 8013c68 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 8013a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013a7c:	f7ed f84c 	bl	8000b18 <__aeabi_dcmpgt>
 8013a80:	4603      	mov	r3, r0
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d109      	bne.n	8013a9a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 8013a86:	a37a      	add	r3, pc, #488	; (adr r3, 8013c70 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 8013a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013a90:	f7ed f824 	bl	8000adc <__aeabi_dcmplt>
 8013a94:	4603      	mov	r3, r0
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d00f      	beq.n	8013aba <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8013a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013a9c:	9302      	str	r3, [sp, #8]
 8013a9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013aa0:	9301      	str	r3, [sp, #4]
 8013aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013aa4:	9300      	str	r3, [sp, #0]
 8013aa6:	ed97 0b00 	vldr	d0, [r7]
 8013aaa:	68bb      	ldr	r3, [r7, #8]
 8013aac:	68fa      	ldr	r2, [r7, #12]
 8013aae:	6939      	ldr	r1, [r7, #16]
 8013ab0:	6978      	ldr	r0, [r7, #20]
 8013ab2:	f000 f9d5 	bl	8013e60 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8013ab6:	4603      	mov	r3, r0
 8013ab8:	e1c9      	b.n	8013e4e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8013aba:	2300      	movs	r3, #0
 8013abc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8013ac0:	f04f 0200 	mov.w	r2, #0
 8013ac4:	f04f 0300 	mov.w	r3, #0
 8013ac8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013acc:	f7ed f806 	bl	8000adc <__aeabi_dcmplt>
 8013ad0:	4603      	mov	r3, r0
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d00e      	beq.n	8013af4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 8013ad6:	2301      	movs	r3, #1
 8013ad8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8013adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013ae0:	f04f 0000 	mov.w	r0, #0
 8013ae4:	f04f 0100 	mov.w	r1, #0
 8013ae8:	f7ec fbce 	bl	8000288 <__aeabi_dsub>
 8013aec:	4602      	mov	r2, r0
 8013aee:	460b      	mov	r3, r1
 8013af0:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8013af4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d101      	bne.n	8013b02 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8013afe:	2306      	movs	r3, #6
 8013b00:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8013b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b04:	2b1f      	cmp	r3, #31
 8013b06:	d80e      	bhi.n	8013b26 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 8013b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b0a:	2b09      	cmp	r3, #9
 8013b0c:	d90b      	bls.n	8013b26 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 8013b0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013b10:	1c5a      	adds	r2, r3, #1
 8013b12:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013b14:	3360      	adds	r3, #96	; 0x60
 8013b16:	443b      	add	r3, r7
 8013b18:	2230      	movs	r2, #48	; 0x30
 8013b1a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8013b1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b20:	3b01      	subs	r3, #1
 8013b22:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8013b24:	e7ed      	b.n	8013b02 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 8013b26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013b2a:	f7ed f815 	bl	8000b58 <__aeabi_d2iz>
 8013b2e:	4603      	mov	r3, r0
 8013b30:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8013b32:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013b34:	f7ec fcf6 	bl	8000524 <__aeabi_i2d>
 8013b38:	4602      	mov	r2, r0
 8013b3a:	460b      	mov	r3, r1
 8013b3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013b40:	f7ec fba2 	bl	8000288 <__aeabi_dsub>
 8013b44:	4602      	mov	r2, r0
 8013b46:	460b      	mov	r3, r1
 8013b48:	4610      	mov	r0, r2
 8013b4a:	4619      	mov	r1, r3
 8013b4c:	4a4f      	ldr	r2, [pc, #316]	; (8013c8c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 8013b4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013b50:	00db      	lsls	r3, r3, #3
 8013b52:	4413      	add	r3, r2
 8013b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b58:	f7ec fd4e 	bl	80005f8 <__aeabi_dmul>
 8013b5c:	4602      	mov	r2, r0
 8013b5e:	460b      	mov	r3, r1
 8013b60:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8013b64:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8013b68:	f7ed f81e 	bl	8000ba8 <__aeabi_d2uiz>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8013b70:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013b72:	f7ec fcc7 	bl	8000504 <__aeabi_ui2d>
 8013b76:	4602      	mov	r2, r0
 8013b78:	460b      	mov	r3, r1
 8013b7a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8013b7e:	f7ec fb83 	bl	8000288 <__aeabi_dsub>
 8013b82:	4602      	mov	r2, r0
 8013b84:	460b      	mov	r3, r1
 8013b86:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8013b8a:	f04f 0200 	mov.w	r2, #0
 8013b8e:	4b40      	ldr	r3, [pc, #256]	; (8013c90 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8013b90:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8013b94:	f7ec ffc0 	bl	8000b18 <__aeabi_dcmpgt>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d016      	beq.n	8013bcc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 8013b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ba0:	3301      	adds	r3, #1
 8013ba2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8013ba4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013ba6:	f7ec fcad 	bl	8000504 <__aeabi_ui2d>
 8013baa:	4a38      	ldr	r2, [pc, #224]	; (8013c8c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 8013bac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013bae:	00db      	lsls	r3, r3, #3
 8013bb0:	4413      	add	r3, r2
 8013bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bb6:	f7ec ffa5 	bl	8000b04 <__aeabi_dcmpge>
 8013bba:	4603      	mov	r3, r0
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d01a      	beq.n	8013bf6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 8013bc0:	2300      	movs	r3, #0
 8013bc2:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8013bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bc6:	3301      	adds	r3, #1
 8013bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8013bca:	e014      	b.n	8013bf6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 8013bcc:	f04f 0200 	mov.w	r2, #0
 8013bd0:	4b2f      	ldr	r3, [pc, #188]	; (8013c90 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8013bd2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8013bd6:	f7ec ff81 	bl	8000adc <__aeabi_dcmplt>
 8013bda:	4603      	mov	r3, r0
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d10a      	bne.n	8013bf6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8013be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d004      	beq.n	8013bf0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 8013be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013be8:	f003 0301 	and.w	r3, r3, #1
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d002      	beq.n	8013bf6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8013bf0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013bf2:	3301      	adds	r3, #1
 8013bf4:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8013bf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d14b      	bne.n	8013c94 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 8013bfc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013bfe:	f7ec fc91 	bl	8000524 <__aeabi_i2d>
 8013c02:	4602      	mov	r2, r0
 8013c04:	460b      	mov	r3, r1
 8013c06:	e9d7 0100 	ldrd	r0, r1, [r7]
 8013c0a:	f7ec fb3d 	bl	8000288 <__aeabi_dsub>
 8013c0e:	4602      	mov	r2, r0
 8013c10:	460b      	mov	r3, r1
 8013c12:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8013c16:	2301      	movs	r3, #1
 8013c18:	461c      	mov	r4, r3
 8013c1a:	f04f 0200 	mov.w	r2, #0
 8013c1e:	4b1c      	ldr	r3, [pc, #112]	; (8013c90 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8013c20:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8013c24:	f7ec ff5a 	bl	8000adc <__aeabi_dcmplt>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d101      	bne.n	8013c32 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 8013c2e:	2300      	movs	r3, #0
 8013c30:	461c      	mov	r4, r3
 8013c32:	b2e3      	uxtb	r3, r4
 8013c34:	f083 0301 	eor.w	r3, r3, #1
 8013c38:	b2db      	uxtb	r3, r3
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d109      	bne.n	8013c52 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 8013c3e:	f04f 0200 	mov.w	r2, #0
 8013c42:	4b13      	ldr	r3, [pc, #76]	; (8013c90 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 8013c44:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8013c48:	f7ec ff66 	bl	8000b18 <__aeabi_dcmpgt>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d06d      	beq.n	8013d2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8013c52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c54:	f003 0301 	and.w	r3, r3, #1
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d068      	beq.n	8013d2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8013c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013c5e:	3301      	adds	r3, #1
 8013c60:	657b      	str	r3, [r7, #84]	; 0x54
 8013c62:	e064      	b.n	8013d2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 8013c64:	f3af 8000 	nop.w
 8013c68:	00000000 	.word	0x00000000
 8013c6c:	41cdcd65 	.word	0x41cdcd65
 8013c70:	00000000 	.word	0x00000000
 8013c74:	c1cdcd65 	.word	0xc1cdcd65
 8013c78:	0801c8a0 	.word	0x0801c8a0
 8013c7c:	0801c8a4 	.word	0x0801c8a4
 8013c80:	7fefffff 	.word	0x7fefffff
 8013c84:	0801c8ac 	.word	0x0801c8ac
 8013c88:	0801c8b4 	.word	0x0801c8b4
 8013c8c:	0801cca0 	.word	0x0801cca0
 8013c90:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 8013c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013c96:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8013c98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013c9a:	2b1f      	cmp	r3, #31
 8013c9c:	d826      	bhi.n	8013cec <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 8013c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ca0:	3b01      	subs	r3, #1
 8013ca2:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8013ca4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013ca6:	4b6c      	ldr	r3, [pc, #432]	; (8013e58 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8013ca8:	fba3 2301 	umull	r2, r3, r3, r1
 8013cac:	08da      	lsrs	r2, r3, #3
 8013cae:	4613      	mov	r3, r2
 8013cb0:	009b      	lsls	r3, r3, #2
 8013cb2:	4413      	add	r3, r2
 8013cb4:	005b      	lsls	r3, r3, #1
 8013cb6:	1aca      	subs	r2, r1, r3
 8013cb8:	b2d2      	uxtb	r2, r2
 8013cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cbc:	1c59      	adds	r1, r3, #1
 8013cbe:	65f9      	str	r1, [r7, #92]	; 0x5c
 8013cc0:	3230      	adds	r2, #48	; 0x30
 8013cc2:	b2d2      	uxtb	r2, r2
 8013cc4:	3360      	adds	r3, #96	; 0x60
 8013cc6:	443b      	add	r3, r7
 8013cc8:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8013ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cce:	4a62      	ldr	r2, [pc, #392]	; (8013e58 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 8013cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8013cd4:	08db      	lsrs	r3, r3, #3
 8013cd6:	653b      	str	r3, [r7, #80]	; 0x50
 8013cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	bf0c      	ite	eq
 8013cde:	2301      	moveq	r3, #1
 8013ce0:	2300      	movne	r3, #0
 8013ce2:	b2db      	uxtb	r3, r3
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d100      	bne.n	8013cea <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8013ce8:	e7d6      	b.n	8013c98 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 8013cea:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8013cec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013cee:	2b1f      	cmp	r3, #31
 8013cf0:	d806      	bhi.n	8013d00 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8013cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cf4:	1e5a      	subs	r2, r3, #1
 8013cf6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d001      	beq.n	8013d00 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 8013cfc:	2301      	movs	r3, #1
 8013cfe:	e000      	b.n	8013d02 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 8013d00:	2300      	movs	r3, #0
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d008      	beq.n	8013d18 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 8013d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013d08:	1c5a      	adds	r2, r3, #1
 8013d0a:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013d0c:	3360      	adds	r3, #96	; 0x60
 8013d0e:	443b      	add	r3, r7
 8013d10:	2230      	movs	r2, #48	; 0x30
 8013d12:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8013d16:	e7e9      	b.n	8013cec <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8013d18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013d1a:	2b1f      	cmp	r3, #31
 8013d1c:	d807      	bhi.n	8013d2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 8013d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013d20:	1c5a      	adds	r2, r3, #1
 8013d22:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013d24:	3360      	adds	r3, #96	; 0x60
 8013d26:	443b      	add	r3, r7
 8013d28:	222e      	movs	r2, #46	; 0x2e
 8013d2a:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8013d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013d30:	2b1f      	cmp	r3, #31
 8013d32:	d827      	bhi.n	8013d84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 8013d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013d36:	4b49      	ldr	r3, [pc, #292]	; (8013e5c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8013d38:	fb83 1302 	smull	r1, r3, r3, r2
 8013d3c:	1099      	asrs	r1, r3, #2
 8013d3e:	17d3      	asrs	r3, r2, #31
 8013d40:	1ac9      	subs	r1, r1, r3
 8013d42:	460b      	mov	r3, r1
 8013d44:	009b      	lsls	r3, r3, #2
 8013d46:	440b      	add	r3, r1
 8013d48:	005b      	lsls	r3, r3, #1
 8013d4a:	1ad1      	subs	r1, r2, r3
 8013d4c:	b2ca      	uxtb	r2, r1
 8013d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013d50:	1c59      	adds	r1, r3, #1
 8013d52:	65f9      	str	r1, [r7, #92]	; 0x5c
 8013d54:	3230      	adds	r2, #48	; 0x30
 8013d56:	b2d2      	uxtb	r2, r2
 8013d58:	3360      	adds	r3, #96	; 0x60
 8013d5a:	443b      	add	r3, r7
 8013d5c:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 8013d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d62:	4a3e      	ldr	r2, [pc, #248]	; (8013e5c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 8013d64:	fb82 1203 	smull	r1, r2, r2, r3
 8013d68:	1092      	asrs	r2, r2, #2
 8013d6a:	17db      	asrs	r3, r3, #31
 8013d6c:	1ad3      	subs	r3, r2, r3
 8013d6e:	657b      	str	r3, [r7, #84]	; 0x54
 8013d70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	bf0c      	ite	eq
 8013d76:	2301      	moveq	r3, #1
 8013d78:	2300      	movne	r3, #0
 8013d7a:	b2db      	uxtb	r3, r3
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d100      	bne.n	8013d82 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8013d80:	e7d5      	b.n	8013d2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 8013d82:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8013d84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d86:	f003 0302 	and.w	r3, r3, #2
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d123      	bne.n	8013dd6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 8013d8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013d90:	f003 0301 	and.w	r3, r3, #1
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d01e      	beq.n	8013dd6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8013d98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013d9a:	2b00      	cmp	r3, #0
 8013d9c:	d00b      	beq.n	8013db6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 8013d9e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d104      	bne.n	8013db0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 8013da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013da8:	f003 030c 	and.w	r3, r3, #12
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d002      	beq.n	8013db6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 8013db0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013db2:	3b01      	subs	r3, #1
 8013db4:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8013db6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8013db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d20b      	bcs.n	8013dd6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 8013dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013dc0:	2b1f      	cmp	r3, #31
 8013dc2:	d808      	bhi.n	8013dd6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 8013dc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013dc6:	1c5a      	adds	r2, r3, #1
 8013dc8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013dca:	3360      	adds	r3, #96	; 0x60
 8013dcc:	443b      	add	r3, r7
 8013dce:	2230      	movs	r2, #48	; 0x30
 8013dd0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8013dd4:	e7ef      	b.n	8013db6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8013dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013dd8:	2b1f      	cmp	r3, #31
 8013dda:	d827      	bhi.n	8013e2c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 8013ddc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d008      	beq.n	8013df6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 8013de4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013de6:	1c5a      	adds	r2, r3, #1
 8013de8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013dea:	3360      	adds	r3, #96	; 0x60
 8013dec:	443b      	add	r3, r7
 8013dee:	222d      	movs	r2, #45	; 0x2d
 8013df0:	f803 2c48 	strb.w	r2, [r3, #-72]
 8013df4:	e01a      	b.n	8013e2c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 8013df6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013df8:	f003 0304 	and.w	r3, r3, #4
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d008      	beq.n	8013e12 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8013e00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013e02:	1c5a      	adds	r2, r3, #1
 8013e04:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013e06:	3360      	adds	r3, #96	; 0x60
 8013e08:	443b      	add	r3, r7
 8013e0a:	222b      	movs	r2, #43	; 0x2b
 8013e0c:	f803 2c48 	strb.w	r2, [r3, #-72]
 8013e10:	e00c      	b.n	8013e2c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 8013e12:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013e14:	f003 0308 	and.w	r3, r3, #8
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d007      	beq.n	8013e2c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 8013e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013e1e:	1c5a      	adds	r2, r3, #1
 8013e20:	65fa      	str	r2, [r7, #92]	; 0x5c
 8013e22:	3360      	adds	r3, #96	; 0x60
 8013e24:	443b      	add	r3, r7
 8013e26:	2220      	movs	r2, #32
 8013e28:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8013e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013e2e:	9303      	str	r3, [sp, #12]
 8013e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013e32:	9302      	str	r3, [sp, #8]
 8013e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013e36:	9301      	str	r3, [sp, #4]
 8013e38:	f107 0318 	add.w	r3, r7, #24
 8013e3c:	9300      	str	r3, [sp, #0]
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	68fa      	ldr	r2, [r7, #12]
 8013e42:	6939      	ldr	r1, [r7, #16]
 8013e44:	6978      	ldr	r0, [r7, #20]
 8013e46:	f7ff fba5 	bl	8013594 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8013e4a:	4603      	mov	r3, r0
 8013e4c:	bf00      	nop
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3764      	adds	r7, #100	; 0x64
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd90      	pop	{r4, r7, pc}
 8013e56:	bf00      	nop
 8013e58:	cccccccd 	.word	0xcccccccd
 8013e5c:	66666667 	.word	0x66666667

08013e60 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8013e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e64:	b09f      	sub	sp, #124	; 0x7c
 8013e66:	af06      	add	r7, sp, #24
 8013e68:	6278      	str	r0, [r7, #36]	; 0x24
 8013e6a:	6239      	str	r1, [r7, #32]
 8013e6c:	61fa      	str	r2, [r7, #28]
 8013e6e:	61bb      	str	r3, [r7, #24]
 8013e70:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8013e74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013e78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013e7c:	f7ec fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 8013e80:	4603      	mov	r3, r0
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d014      	beq.n	8013eb0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 8013e86:	f04f 32ff 	mov.w	r2, #4294967295
 8013e8a:	4bc1      	ldr	r3, [pc, #772]	; (8014190 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 8013e8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013e90:	f7ec fe42 	bl	8000b18 <__aeabi_dcmpgt>
 8013e94:	4603      	mov	r3, r0
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d10a      	bne.n	8013eb0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 8013e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8013e9e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8013ea2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013ea6:	f7ec fe19 	bl	8000adc <__aeabi_dcmplt>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d012      	beq.n	8013ed6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8013eb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013eb4:	9302      	str	r3, [sp, #8]
 8013eb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013eba:	9301      	str	r3, [sp, #4]
 8013ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013ec0:	9300      	str	r3, [sp, #0]
 8013ec2:	ed97 0b04 	vldr	d0, [r7, #16]
 8013ec6:	69bb      	ldr	r3, [r7, #24]
 8013ec8:	69fa      	ldr	r2, [r7, #28]
 8013eca:	6a39      	ldr	r1, [r7, #32]
 8013ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ece:	f7ff fd63 	bl	8013998 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	e23f      	b.n	8014356 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 8013ed6:	2301      	movs	r3, #1
 8013ed8:	461e      	mov	r6, r3
 8013eda:	f04f 0200 	mov.w	r2, #0
 8013ede:	f04f 0300 	mov.w	r3, #0
 8013ee2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013ee6:	f7ec fdf9 	bl	8000adc <__aeabi_dcmplt>
 8013eea:	4603      	mov	r3, r0
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d101      	bne.n	8013ef4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	461e      	mov	r6, r3
 8013ef4:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 8013ef8:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d009      	beq.n	8013f14 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 8013f00:	693b      	ldr	r3, [r7, #16]
 8013f02:	603b      	str	r3, [r7, #0]
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8013f0a:	607b      	str	r3, [r7, #4]
 8013f0c:	ed97 7b00 	vldr	d7, [r7]
 8013f10:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8013f14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8013f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d102      	bne.n	8013f26 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8013f20:	2306      	movs	r3, #6
 8013f22:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8013f26:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013f2a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8013f2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8013f32:	f04f 0200 	mov.w	r2, #0
 8013f36:	f04f 0300 	mov.w	r3, #0
 8013f3a:	0d0a      	lsrs	r2, r1, #20
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	4613      	mov	r3, r2
 8013f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013f44:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8013f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8013f4e:	4690      	mov	r8, r2
 8013f50:	f3c3 0913 	ubfx	r9, r3, #0, #20
 8013f54:	4644      	mov	r4, r8
 8013f56:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 8013f5a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013f5e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8013f62:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8013f64:	f7ec fade 	bl	8000524 <__aeabi_i2d>
 8013f68:	a37d      	add	r3, pc, #500	; (adr r3, 8014160 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 8013f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6e:	f7ec fb43 	bl	80005f8 <__aeabi_dmul>
 8013f72:	4602      	mov	r2, r0
 8013f74:	460b      	mov	r3, r1
 8013f76:	4610      	mov	r0, r2
 8013f78:	4619      	mov	r1, r3
 8013f7a:	a37b      	add	r3, pc, #492	; (adr r3, 8014168 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 8013f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f80:	f7ec f984 	bl	800028c <__adddf3>
 8013f84:	4602      	mov	r2, r0
 8013f86:	460b      	mov	r3, r1
 8013f88:	4614      	mov	r4, r2
 8013f8a:	461d      	mov	r5, r3
 8013f8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8013f90:	f04f 0200 	mov.w	r2, #0
 8013f94:	4b7f      	ldr	r3, [pc, #508]	; (8014194 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 8013f96:	f7ec f977 	bl	8000288 <__aeabi_dsub>
 8013f9a:	4602      	mov	r2, r0
 8013f9c:	460b      	mov	r3, r1
 8013f9e:	4610      	mov	r0, r2
 8013fa0:	4619      	mov	r1, r3
 8013fa2:	a373      	add	r3, pc, #460	; (adr r3, 8014170 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 8013fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fa8:	f7ec fb26 	bl	80005f8 <__aeabi_dmul>
 8013fac:	4602      	mov	r2, r0
 8013fae:	460b      	mov	r3, r1
 8013fb0:	4620      	mov	r0, r4
 8013fb2:	4629      	mov	r1, r5
 8013fb4:	f7ec f96a 	bl	800028c <__adddf3>
 8013fb8:	4602      	mov	r2, r0
 8013fba:	460b      	mov	r3, r1
 8013fbc:	4610      	mov	r0, r2
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	f7ec fdca 	bl	8000b58 <__aeabi_d2iz>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 8013fc8:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013fca:	f7ec faab 	bl	8000524 <__aeabi_i2d>
 8013fce:	a36a      	add	r3, pc, #424	; (adr r3, 8014178 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 8013fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fd4:	f7ec fb10 	bl	80005f8 <__aeabi_dmul>
 8013fd8:	4602      	mov	r2, r0
 8013fda:	460b      	mov	r3, r1
 8013fdc:	4610      	mov	r0, r2
 8013fde:	4619      	mov	r1, r3
 8013fe0:	f04f 0200 	mov.w	r2, #0
 8013fe4:	4b6c      	ldr	r3, [pc, #432]	; (8014198 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 8013fe6:	f7ec f951 	bl	800028c <__adddf3>
 8013fea:	4602      	mov	r2, r0
 8013fec:	460b      	mov	r3, r1
 8013fee:	4610      	mov	r0, r2
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	f7ec fdb1 	bl	8000b58 <__aeabi_d2iz>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 8013ffa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8013ffc:	f7ec fa92 	bl	8000524 <__aeabi_i2d>
 8014000:	a35f      	add	r3, pc, #380	; (adr r3, 8014180 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 8014002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014006:	f7ec faf7 	bl	80005f8 <__aeabi_dmul>
 801400a:	4602      	mov	r2, r0
 801400c:	460b      	mov	r3, r1
 801400e:	4614      	mov	r4, r2
 8014010:	461d      	mov	r5, r3
 8014012:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014014:	f7ec fa86 	bl	8000524 <__aeabi_i2d>
 8014018:	a35b      	add	r3, pc, #364	; (adr r3, 8014188 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 801401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801401e:	f7ec faeb 	bl	80005f8 <__aeabi_dmul>
 8014022:	4602      	mov	r2, r0
 8014024:	460b      	mov	r3, r1
 8014026:	4620      	mov	r0, r4
 8014028:	4629      	mov	r1, r5
 801402a:	f7ec f92d 	bl	8000288 <__aeabi_dsub>
 801402e:	4602      	mov	r2, r0
 8014030:	460b      	mov	r3, r1
 8014032:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 8014036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801403a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801403e:	f7ec fadb 	bl	80005f8 <__aeabi_dmul>
 8014042:	4602      	mov	r2, r0
 8014044:	460b      	mov	r3, r1
 8014046:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 801404a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801404c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8014050:	17da      	asrs	r2, r3, #31
 8014052:	469a      	mov	sl, r3
 8014054:	4693      	mov	fp, r2
 8014056:	f04f 0200 	mov.w	r2, #0
 801405a:	f04f 0300 	mov.w	r3, #0
 801405e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 8014062:	2200      	movs	r2, #0
 8014064:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8014068:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 801406c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8014070:	4602      	mov	r2, r0
 8014072:	460b      	mov	r3, r1
 8014074:	f7ec f90a 	bl	800028c <__adddf3>
 8014078:	4602      	mov	r2, r0
 801407a:	460b      	mov	r3, r1
 801407c:	4690      	mov	r8, r2
 801407e:	4699      	mov	r9, r3
 8014080:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8014084:	f04f 0000 	mov.w	r0, #0
 8014088:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801408c:	f7ec f8fc 	bl	8000288 <__aeabi_dsub>
 8014090:	4602      	mov	r2, r0
 8014092:	460b      	mov	r3, r1
 8014094:	4692      	mov	sl, r2
 8014096:	469b      	mov	fp, r3
 8014098:	f04f 0200 	mov.w	r2, #0
 801409c:	4b3f      	ldr	r3, [pc, #252]	; (801419c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 801409e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80140a2:	f7ec fbd3 	bl	800084c <__aeabi_ddiv>
 80140a6:	4602      	mov	r2, r0
 80140a8:	460b      	mov	r3, r1
 80140aa:	4610      	mov	r0, r2
 80140ac:	4619      	mov	r1, r3
 80140ae:	f04f 0200 	mov.w	r2, #0
 80140b2:	4b3b      	ldr	r3, [pc, #236]	; (80141a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 80140b4:	f7ec f8ea 	bl	800028c <__adddf3>
 80140b8:	4602      	mov	r2, r0
 80140ba:	460b      	mov	r3, r1
 80140bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80140c0:	f7ec fbc4 	bl	800084c <__aeabi_ddiv>
 80140c4:	4602      	mov	r2, r0
 80140c6:	460b      	mov	r3, r1
 80140c8:	4610      	mov	r0, r2
 80140ca:	4619      	mov	r1, r3
 80140cc:	f04f 0200 	mov.w	r2, #0
 80140d0:	4b34      	ldr	r3, [pc, #208]	; (80141a4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 80140d2:	f7ec f8db 	bl	800028c <__adddf3>
 80140d6:	4602      	mov	r2, r0
 80140d8:	460b      	mov	r3, r1
 80140da:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80140de:	f7ec fbb5 	bl	800084c <__aeabi_ddiv>
 80140e2:	4602      	mov	r2, r0
 80140e4:	460b      	mov	r3, r1
 80140e6:	4650      	mov	r0, sl
 80140e8:	4659      	mov	r1, fp
 80140ea:	f7ec f8cf 	bl	800028c <__adddf3>
 80140ee:	4602      	mov	r2, r0
 80140f0:	460b      	mov	r3, r1
 80140f2:	4640      	mov	r0, r8
 80140f4:	4649      	mov	r1, r9
 80140f6:	f7ec fba9 	bl	800084c <__aeabi_ddiv>
 80140fa:	4602      	mov	r2, r0
 80140fc:	460b      	mov	r3, r1
 80140fe:	4610      	mov	r0, r2
 8014100:	4619      	mov	r1, r3
 8014102:	f04f 0200 	mov.w	r2, #0
 8014106:	4b28      	ldr	r3, [pc, #160]	; (80141a8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 8014108:	f7ec f8c0 	bl	800028c <__adddf3>
 801410c:	4602      	mov	r2, r0
 801410e:	460b      	mov	r3, r1
 8014110:	4620      	mov	r0, r4
 8014112:	4629      	mov	r1, r5
 8014114:	f7ec fa70 	bl	80005f8 <__aeabi_dmul>
 8014118:	4602      	mov	r2, r0
 801411a:	460b      	mov	r3, r1
 801411c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 8014120:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014124:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8014128:	f7ec fcd8 	bl	8000adc <__aeabi_dcmplt>
 801412c:	4603      	mov	r3, r0
 801412e:	2b00      	cmp	r3, #0
 8014130:	d00d      	beq.n	801414e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 8014132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014134:	3b01      	subs	r3, #1
 8014136:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 8014138:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801413c:	f04f 0200 	mov.w	r2, #0
 8014140:	4b17      	ldr	r3, [pc, #92]	; (80141a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 8014142:	f7ec fb83 	bl	800084c <__aeabi_ddiv>
 8014146:	4602      	mov	r2, r0
 8014148:	460b      	mov	r3, r1
 801414a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 801414e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014150:	2b63      	cmp	r3, #99	; 0x63
 8014152:	dc2b      	bgt.n	80141ac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 8014154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014156:	f113 0f63 	cmn.w	r3, #99	; 0x63
 801415a:	db27      	blt.n	80141ac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 801415c:	2304      	movs	r3, #4
 801415e:	e026      	b.n	80141ae <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 8014160:	509f79fb 	.word	0x509f79fb
 8014164:	3fd34413 	.word	0x3fd34413
 8014168:	8b60c8b3 	.word	0x8b60c8b3
 801416c:	3fc68a28 	.word	0x3fc68a28
 8014170:	636f4361 	.word	0x636f4361
 8014174:	3fd287a7 	.word	0x3fd287a7
 8014178:	0979a371 	.word	0x0979a371
 801417c:	400a934f 	.word	0x400a934f
 8014180:	bbb55516 	.word	0xbbb55516
 8014184:	40026bb1 	.word	0x40026bb1
 8014188:	fefa39ef 	.word	0xfefa39ef
 801418c:	3fe62e42 	.word	0x3fe62e42
 8014190:	7fefffff 	.word	0x7fefffff
 8014194:	3ff80000 	.word	0x3ff80000
 8014198:	3fe00000 	.word	0x3fe00000
 801419c:	402c0000 	.word	0x402c0000
 80141a0:	40240000 	.word	0x40240000
 80141a4:	40180000 	.word	0x40180000
 80141a8:	3ff00000 	.word	0x3ff00000
 80141ac:	2305      	movs	r3, #5
 80141ae:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80141b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80141b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d03d      	beq.n	8014238 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80141bc:	a368      	add	r3, pc, #416	; (adr r3, 8014360 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 80141be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80141c6:	f7ec fc9d 	bl	8000b04 <__aeabi_dcmpge>
 80141ca:	4603      	mov	r3, r0
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d024      	beq.n	801421a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 80141d0:	a365      	add	r3, pc, #404	; (adr r3, 8014368 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 80141d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80141da:	f7ec fc7f 	bl	8000adc <__aeabi_dcmplt>
 80141de:	4603      	mov	r3, r0
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d01a      	beq.n	801421a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 80141e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80141e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80141ea:	429a      	cmp	r2, r3
 80141ec:	da07      	bge.n	80141fe <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 80141ee:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80141f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141f4:	1ad3      	subs	r3, r2, r3
 80141f6:	3b01      	subs	r3, #1
 80141f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80141fc:	e002      	b.n	8014204 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 80141fe:	2300      	movs	r3, #0
 8014200:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8014204:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014208:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801420c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 8014210:	2300      	movs	r3, #0
 8014212:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 8014214:	2300      	movs	r3, #0
 8014216:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014218:	e00e      	b.n	8014238 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 801421a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801421e:	2b00      	cmp	r3, #0
 8014220:	d00a      	beq.n	8014238 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 8014222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801422a:	2b00      	cmp	r3, #0
 801422c:	d004      	beq.n	8014238 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 801422e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014232:	3b01      	subs	r3, #1
 8014234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8014238:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801423c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 801423e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014242:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014244:	429a      	cmp	r2, r3
 8014246:	d904      	bls.n	8014252 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8014248:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801424a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801424c:	1ad3      	subs	r3, r2, r3
 801424e:	657b      	str	r3, [r7, #84]	; 0x54
 8014250:	e001      	b.n	8014256 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8014252:	2300      	movs	r3, #0
 8014254:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8014256:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801425a:	f003 0302 	and.w	r3, r3, #2
 801425e:	2b00      	cmp	r3, #0
 8014260:	d004      	beq.n	801426c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 8014262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014264:	2b00      	cmp	r3, #0
 8014266:	d001      	beq.n	801426c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8014268:	2300      	movs	r3, #0
 801426a:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 801426c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801426e:	2b00      	cmp	r3, #0
 8014270:	d009      	beq.n	8014286 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 8014272:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8014276:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801427a:	f7ec fae7 	bl	800084c <__aeabi_ddiv>
 801427e:	4602      	mov	r2, r0
 8014280:	460b      	mov	r3, r1
 8014282:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 8014286:	69fb      	ldr	r3, [r7, #28]
 8014288:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 801428a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 801428e:	2b00      	cmp	r3, #0
 8014290:	d006      	beq.n	80142a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 8014292:	693b      	ldr	r3, [r7, #16]
 8014294:	60bb      	str	r3, [r7, #8]
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 801429c:	60fb      	str	r3, [r7, #12]
 801429e:	e003      	b.n	80142a8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 80142a0:	ed97 7b04 	vldr	d7, [r7, #16]
 80142a4:	ed87 7b02 	vstr	d7, [r7, #8]
 80142a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80142ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80142b0:	9302      	str	r3, [sp, #8]
 80142b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80142b4:	9301      	str	r3, [sp, #4]
 80142b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80142ba:	9300      	str	r3, [sp, #0]
 80142bc:	ed97 0b02 	vldr	d0, [r7, #8]
 80142c0:	69bb      	ldr	r3, [r7, #24]
 80142c2:	69fa      	ldr	r2, [r7, #28]
 80142c4:	6a39      	ldr	r1, [r7, #32]
 80142c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80142c8:	f7ff fb66 	bl	8013998 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 80142cc:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 80142ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d03f      	beq.n	8014354 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80142d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80142d8:	f003 0320 	and.w	r3, r3, #32
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d001      	beq.n	80142e4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 80142e0:	2045      	movs	r0, #69	; 0x45
 80142e2:	e000      	b.n	80142e6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 80142e4:	2065      	movs	r0, #101	; 0x65
 80142e6:	69fa      	ldr	r2, [r7, #28]
 80142e8:	1c53      	adds	r3, r2, #1
 80142ea:	61fb      	str	r3, [r7, #28]
 80142ec:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80142ee:	69bb      	ldr	r3, [r7, #24]
 80142f0:	6a39      	ldr	r1, [r7, #32]
 80142f2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80142f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	bfb8      	it	lt
 80142fa:	425b      	neglt	r3, r3
 80142fc:	4618      	mov	r0, r3
 80142fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014300:	0fdb      	lsrs	r3, r3, #31
 8014302:	b2db      	uxtb	r3, r3
 8014304:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8014306:	3a01      	subs	r2, #1
 8014308:	2105      	movs	r1, #5
 801430a:	9105      	str	r1, [sp, #20]
 801430c:	9204      	str	r2, [sp, #16]
 801430e:	2200      	movs	r2, #0
 8014310:	9203      	str	r2, [sp, #12]
 8014312:	220a      	movs	r2, #10
 8014314:	9202      	str	r2, [sp, #8]
 8014316:	9301      	str	r3, [sp, #4]
 8014318:	9000      	str	r0, [sp, #0]
 801431a:	69bb      	ldr	r3, [r7, #24]
 801431c:	69fa      	ldr	r2, [r7, #28]
 801431e:	6a39      	ldr	r1, [r7, #32]
 8014320:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014322:	f7ff fa63 	bl	80137ec <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8014326:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8014328:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801432c:	f003 0302 	and.w	r3, r3, #2
 8014330:	2b00      	cmp	r3, #0
 8014332:	d00f      	beq.n	8014354 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8014334:	69fa      	ldr	r2, [r7, #28]
 8014336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014338:	1ad3      	subs	r3, r2, r3
 801433a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801433e:	429a      	cmp	r2, r3
 8014340:	d908      	bls.n	8014354 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 8014342:	69fa      	ldr	r2, [r7, #28]
 8014344:	1c53      	adds	r3, r2, #1
 8014346:	61fb      	str	r3, [r7, #28]
 8014348:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 801434a:	69bb      	ldr	r3, [r7, #24]
 801434c:	6a39      	ldr	r1, [r7, #32]
 801434e:	2020      	movs	r0, #32
 8014350:	47a0      	blx	r4
 8014352:	e7ef      	b.n	8014334 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 8014354:	69fb      	ldr	r3, [r7, #28]
}
 8014356:	4618      	mov	r0, r3
 8014358:	3764      	adds	r7, #100	; 0x64
 801435a:	46bd      	mov	sp, r7
 801435c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014360:	eb1c432d 	.word	0xeb1c432d
 8014364:	3f1a36e2 	.word	0x3f1a36e2
 8014368:	00000000 	.word	0x00000000
 801436c:	412e8480 	.word	0x412e8480

08014370 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8014370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014374:	b0a1      	sub	sp, #132	; 0x84
 8014376:	af0a      	add	r7, sp, #40	; 0x28
 8014378:	60f8      	str	r0, [r7, #12]
 801437a:	60b9      	str	r1, [r7, #8]
 801437c:	607a      	str	r2, [r7, #4]
 801437e:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 8014380:	2300      	movs	r3, #0
 8014382:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d101      	bne.n	801438e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 801438a:	4ba5      	ldr	r3, [pc, #660]	; (8014620 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 801438c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	781b      	ldrb	r3, [r3, #0]
 8014392:	2b00      	cmp	r3, #0
 8014394:	f000 84ae 	beq.w	8014cf4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	781b      	ldrb	r3, [r3, #0]
 801439c:	2b25      	cmp	r3, #37	; 0x25
 801439e:	d00d      	beq.n	80143bc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	7818      	ldrb	r0, [r3, #0]
 80143a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80143a6:	1c53      	adds	r3, r2, #1
 80143a8:	647b      	str	r3, [r7, #68]	; 0x44
 80143aa:	68fe      	ldr	r6, [r7, #12]
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	68b9      	ldr	r1, [r7, #8]
 80143b0:	47b0      	blx	r6
      format++;
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	3301      	adds	r3, #1
 80143b6:	603b      	str	r3, [r7, #0]
      continue;
 80143b8:	f000 bc9a 	b.w	8014cf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	3301      	adds	r3, #1
 80143c0:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80143c2:	2300      	movs	r3, #0
 80143c4:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	3b20      	subs	r3, #32
 80143cc:	2b10      	cmp	r3, #16
 80143ce:	d857      	bhi.n	8014480 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 80143d0:	a201      	add	r2, pc, #4	; (adr r2, 80143d8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 80143d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143d6:	bf00      	nop
 80143d8:	08014459 	.word	0x08014459
 80143dc:	08014481 	.word	0x08014481
 80143e0:	08014481 	.word	0x08014481
 80143e4:	0801446d 	.word	0x0801446d
 80143e8:	08014481 	.word	0x08014481
 80143ec:	08014481 	.word	0x08014481
 80143f0:	08014481 	.word	0x08014481
 80143f4:	08014481 	.word	0x08014481
 80143f8:	08014481 	.word	0x08014481
 80143fc:	08014481 	.word	0x08014481
 8014400:	08014481 	.word	0x08014481
 8014404:	08014445 	.word	0x08014445
 8014408:	08014481 	.word	0x08014481
 801440c:	08014431 	.word	0x08014431
 8014410:	08014481 	.word	0x08014481
 8014414:	08014481 	.word	0x08014481
 8014418:	0801441d 	.word	0x0801441d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 801441c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801441e:	f043 0301 	orr.w	r3, r3, #1
 8014422:	657b      	str	r3, [r7, #84]	; 0x54
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	3301      	adds	r3, #1
 8014428:	603b      	str	r3, [r7, #0]
 801442a:	2301      	movs	r3, #1
 801442c:	64bb      	str	r3, [r7, #72]	; 0x48
 801442e:	e02a      	b.n	8014486 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8014430:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014432:	f043 0302 	orr.w	r3, r3, #2
 8014436:	657b      	str	r3, [r7, #84]	; 0x54
 8014438:	683b      	ldr	r3, [r7, #0]
 801443a:	3301      	adds	r3, #1
 801443c:	603b      	str	r3, [r7, #0]
 801443e:	2301      	movs	r3, #1
 8014440:	64bb      	str	r3, [r7, #72]	; 0x48
 8014442:	e020      	b.n	8014486 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8014444:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014446:	f043 0304 	orr.w	r3, r3, #4
 801444a:	657b      	str	r3, [r7, #84]	; 0x54
 801444c:	683b      	ldr	r3, [r7, #0]
 801444e:	3301      	adds	r3, #1
 8014450:	603b      	str	r3, [r7, #0]
 8014452:	2301      	movs	r3, #1
 8014454:	64bb      	str	r3, [r7, #72]	; 0x48
 8014456:	e016      	b.n	8014486 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8014458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801445a:	f043 0308 	orr.w	r3, r3, #8
 801445e:	657b      	str	r3, [r7, #84]	; 0x54
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	3301      	adds	r3, #1
 8014464:	603b      	str	r3, [r7, #0]
 8014466:	2301      	movs	r3, #1
 8014468:	64bb      	str	r3, [r7, #72]	; 0x48
 801446a:	e00c      	b.n	8014486 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 801446c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801446e:	f043 0310 	orr.w	r3, r3, #16
 8014472:	657b      	str	r3, [r7, #84]	; 0x54
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	3301      	adds	r3, #1
 8014478:	603b      	str	r3, [r7, #0]
 801447a:	2301      	movs	r3, #1
 801447c:	64bb      	str	r3, [r7, #72]	; 0x48
 801447e:	e002      	b.n	8014486 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 8014480:	2300      	movs	r3, #0
 8014482:	64bb      	str	r3, [r7, #72]	; 0x48
 8014484:	bf00      	nop
      }
    } while (n);
 8014486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014488:	2b00      	cmp	r3, #0
 801448a:	d000      	beq.n	801448e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 801448c:	e79b      	b.n	80143c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 801448e:	2300      	movs	r3, #0
 8014490:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	781b      	ldrb	r3, [r3, #0]
 8014496:	4618      	mov	r0, r3
 8014498:	f7ff f844 	bl	8013524 <_ZL9_is_digitc>
 801449c:	4603      	mov	r3, r0
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d005      	beq.n	80144ae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 80144a2:	463b      	mov	r3, r7
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7ff f851 	bl	801354c <_ZL5_atoiPPKc>
 80144aa:	6538      	str	r0, [r7, #80]	; 0x50
 80144ac:	e01a      	b.n	80144e4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 80144ae:	683b      	ldr	r3, [r7, #0]
 80144b0:	781b      	ldrb	r3, [r3, #0]
 80144b2:	2b2a      	cmp	r3, #42	; 0x2a
 80144b4:	d116      	bne.n	80144e4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 80144b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80144ba:	1d1a      	adds	r2, r3, #4
 80144bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 80144c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	da07      	bge.n	80144da <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 80144ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144cc:	f043 0302 	orr.w	r3, r3, #2
 80144d0:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 80144d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144d4:	425b      	negs	r3, r3
 80144d6:	653b      	str	r3, [r7, #80]	; 0x50
 80144d8:	e001      	b.n	80144de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 80144da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144dc:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80144de:	683b      	ldr	r3, [r7, #0]
 80144e0:	3301      	adds	r3, #1
 80144e2:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80144e4:	2300      	movs	r3, #0
 80144e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80144e8:	683b      	ldr	r3, [r7, #0]
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	2b2e      	cmp	r3, #46	; 0x2e
 80144ee:	d126      	bne.n	801453e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 80144f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80144f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80144f6:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	3301      	adds	r3, #1
 80144fc:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	781b      	ldrb	r3, [r3, #0]
 8014502:	4618      	mov	r0, r3
 8014504:	f7ff f80e 	bl	8013524 <_ZL9_is_digitc>
 8014508:	4603      	mov	r3, r0
 801450a:	2b00      	cmp	r3, #0
 801450c:	d005      	beq.n	801451a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 801450e:	463b      	mov	r3, r7
 8014510:	4618      	mov	r0, r3
 8014512:	f7ff f81b 	bl	801354c <_ZL5_atoiPPKc>
 8014516:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014518:	e011      	b.n	801453e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 801451a:	683b      	ldr	r3, [r7, #0]
 801451c:	781b      	ldrb	r3, [r3, #0]
 801451e:	2b2a      	cmp	r3, #42	; 0x2a
 8014520:	d10d      	bne.n	801453e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 8014522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014526:	1d1a      	adds	r2, r3, #4
 8014528:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8014530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014532:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8014536:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8014538:	683b      	ldr	r3, [r7, #0]
 801453a:	3301      	adds	r3, #1
 801453c:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	781b      	ldrb	r3, [r3, #0]
 8014542:	3b68      	subs	r3, #104	; 0x68
 8014544:	2b12      	cmp	r3, #18
 8014546:	d867      	bhi.n	8014618 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 8014548:	a201      	add	r2, pc, #4	; (adr r2, 8014550 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 801454a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801454e:	bf00      	nop
 8014550:	080145c3 	.word	0x080145c3
 8014554:	08014619 	.word	0x08014619
 8014558:	080145f9 	.word	0x080145f9
 801455c:	08014619 	.word	0x08014619
 8014560:	0801459d 	.word	0x0801459d
 8014564:	08014619 	.word	0x08014619
 8014568:	08014619 	.word	0x08014619
 801456c:	08014619 	.word	0x08014619
 8014570:	08014619 	.word	0x08014619
 8014574:	08014619 	.word	0x08014619
 8014578:	08014619 	.word	0x08014619
 801457c:	08014619 	.word	0x08014619
 8014580:	080145e9 	.word	0x080145e9
 8014584:	08014619 	.word	0x08014619
 8014588:	08014619 	.word	0x08014619
 801458c:	08014619 	.word	0x08014619
 8014590:	08014619 	.word	0x08014619
 8014594:	08014619 	.word	0x08014619
 8014598:	08014609 	.word	0x08014609
      case 'l' :
        flags |= FLAGS_LONG;
 801459c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801459e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80145a2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80145a4:	683b      	ldr	r3, [r7, #0]
 80145a6:	3301      	adds	r3, #1
 80145a8:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 80145aa:	683b      	ldr	r3, [r7, #0]
 80145ac:	781b      	ldrb	r3, [r3, #0]
 80145ae:	2b6c      	cmp	r3, #108	; 0x6c
 80145b0:	d134      	bne.n	801461c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 80145b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80145b8:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	3301      	adds	r3, #1
 80145be:	603b      	str	r3, [r7, #0]
        }
        break;
 80145c0:	e02c      	b.n	801461c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 80145c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145c8:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80145ca:	683b      	ldr	r3, [r7, #0]
 80145cc:	3301      	adds	r3, #1
 80145ce:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 80145d0:	683b      	ldr	r3, [r7, #0]
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	2b68      	cmp	r3, #104	; 0x68
 80145d6:	d125      	bne.n	8014624 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 80145d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80145de:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 80145e0:	683b      	ldr	r3, [r7, #0]
 80145e2:	3301      	adds	r3, #1
 80145e4:	603b      	str	r3, [r7, #0]
        }
        break;
 80145e6:	e01d      	b.n	8014624 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80145e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80145ee:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80145f0:	683b      	ldr	r3, [r7, #0]
 80145f2:	3301      	adds	r3, #1
 80145f4:	603b      	str	r3, [r7, #0]
        break;
 80145f6:	e016      	b.n	8014626 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80145f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80145fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80145fe:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8014600:	683b      	ldr	r3, [r7, #0]
 8014602:	3301      	adds	r3, #1
 8014604:	603b      	str	r3, [r7, #0]
        break;
 8014606:	e00e      	b.n	8014626 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8014608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801460a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801460e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	3301      	adds	r3, #1
 8014614:	603b      	str	r3, [r7, #0]
        break;
 8014616:	e006      	b.n	8014626 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 8014618:	bf00      	nop
 801461a:	e004      	b.n	8014626 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 801461c:	bf00      	nop
 801461e:	e002      	b.n	8014626 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 8014620:	0801349f 	.word	0x0801349f
        break;
 8014624:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8014626:	683b      	ldr	r3, [r7, #0]
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	3b25      	subs	r3, #37	; 0x25
 801462c:	2b53      	cmp	r3, #83	; 0x53
 801462e:	f200 8352 	bhi.w	8014cd6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 8014632:	a201      	add	r2, pc, #4	; (adr r2, 8014638 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 8014634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014638:	08014cbf 	.word	0x08014cbf
 801463c:	08014cd7 	.word	0x08014cd7
 8014640:	08014cd7 	.word	0x08014cd7
 8014644:	08014cd7 	.word	0x08014cd7
 8014648:	08014cd7 	.word	0x08014cd7
 801464c:	08014cd7 	.word	0x08014cd7
 8014650:	08014cd7 	.word	0x08014cd7
 8014654:	08014cd7 	.word	0x08014cd7
 8014658:	08014cd7 	.word	0x08014cd7
 801465c:	08014cd7 	.word	0x08014cd7
 8014660:	08014cd7 	.word	0x08014cd7
 8014664:	08014cd7 	.word	0x08014cd7
 8014668:	08014cd7 	.word	0x08014cd7
 801466c:	08014cd7 	.word	0x08014cd7
 8014670:	08014cd7 	.word	0x08014cd7
 8014674:	08014cd7 	.word	0x08014cd7
 8014678:	08014cd7 	.word	0x08014cd7
 801467c:	08014cd7 	.word	0x08014cd7
 8014680:	08014cd7 	.word	0x08014cd7
 8014684:	08014cd7 	.word	0x08014cd7
 8014688:	08014cd7 	.word	0x08014cd7
 801468c:	08014cd7 	.word	0x08014cd7
 8014690:	08014cd7 	.word	0x08014cd7
 8014694:	08014cd7 	.word	0x08014cd7
 8014698:	08014cd7 	.word	0x08014cd7
 801469c:	08014cd7 	.word	0x08014cd7
 80146a0:	08014cd7 	.word	0x08014cd7
 80146a4:	08014cd7 	.word	0x08014cd7
 80146a8:	08014cd7 	.word	0x08014cd7
 80146ac:	08014cd7 	.word	0x08014cd7
 80146b0:	08014cd7 	.word	0x08014cd7
 80146b4:	08014cd7 	.word	0x08014cd7
 80146b8:	08014a8d 	.word	0x08014a8d
 80146bc:	08014a3d 	.word	0x08014a3d
 80146c0:	08014a8d 	.word	0x08014a8d
 80146c4:	08014cd7 	.word	0x08014cd7
 80146c8:	08014cd7 	.word	0x08014cd7
 80146cc:	08014cd7 	.word	0x08014cd7
 80146d0:	08014cd7 	.word	0x08014cd7
 80146d4:	08014cd7 	.word	0x08014cd7
 80146d8:	08014cd7 	.word	0x08014cd7
 80146dc:	08014cd7 	.word	0x08014cd7
 80146e0:	08014cd7 	.word	0x08014cd7
 80146e4:	08014cd7 	.word	0x08014cd7
 80146e8:	08014cd7 	.word	0x08014cd7
 80146ec:	08014cd7 	.word	0x08014cd7
 80146f0:	08014cd7 	.word	0x08014cd7
 80146f4:	08014cd7 	.word	0x08014cd7
 80146f8:	08014cd7 	.word	0x08014cd7
 80146fc:	08014cd7 	.word	0x08014cd7
 8014700:	08014cd7 	.word	0x08014cd7
 8014704:	08014789 	.word	0x08014789
 8014708:	08014cd7 	.word	0x08014cd7
 801470c:	08014cd7 	.word	0x08014cd7
 8014710:	08014cd7 	.word	0x08014cd7
 8014714:	08014cd7 	.word	0x08014cd7
 8014718:	08014cd7 	.word	0x08014cd7
 801471c:	08014cd7 	.word	0x08014cd7
 8014720:	08014cd7 	.word	0x08014cd7
 8014724:	08014cd7 	.word	0x08014cd7
 8014728:	08014cd7 	.word	0x08014cd7
 801472c:	08014789 	.word	0x08014789
 8014730:	08014afd 	.word	0x08014afd
 8014734:	08014789 	.word	0x08014789
 8014738:	08014a8d 	.word	0x08014a8d
 801473c:	08014a3d 	.word	0x08014a3d
 8014740:	08014a8d 	.word	0x08014a8d
 8014744:	08014cd7 	.word	0x08014cd7
 8014748:	08014789 	.word	0x08014789
 801474c:	08014cd7 	.word	0x08014cd7
 8014750:	08014cd7 	.word	0x08014cd7
 8014754:	08014cd7 	.word	0x08014cd7
 8014758:	08014cd7 	.word	0x08014cd7
 801475c:	08014cd7 	.word	0x08014cd7
 8014760:	08014789 	.word	0x08014789
 8014764:	08014c73 	.word	0x08014c73
 8014768:	08014cd7 	.word	0x08014cd7
 801476c:	08014cd7 	.word	0x08014cd7
 8014770:	08014b89 	.word	0x08014b89
 8014774:	08014cd7 	.word	0x08014cd7
 8014778:	08014789 	.word	0x08014789
 801477c:	08014cd7 	.word	0x08014cd7
 8014780:	08014cd7 	.word	0x08014cd7
 8014784:	08014789 	.word	0x08014789
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8014788:	683b      	ldr	r3, [r7, #0]
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	2b78      	cmp	r3, #120	; 0x78
 801478e:	d003      	beq.n	8014798 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	2b58      	cmp	r3, #88	; 0x58
 8014796:	d102      	bne.n	801479e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 8014798:	2310      	movs	r3, #16
 801479a:	643b      	str	r3, [r7, #64]	; 0x40
 801479c:	e013      	b.n	80147c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	2b6f      	cmp	r3, #111	; 0x6f
 80147a4:	d102      	bne.n	80147ac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 80147a6:	2308      	movs	r3, #8
 80147a8:	643b      	str	r3, [r7, #64]	; 0x40
 80147aa:	e00c      	b.n	80147c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 80147ac:	683b      	ldr	r3, [r7, #0]
 80147ae:	781b      	ldrb	r3, [r3, #0]
 80147b0:	2b62      	cmp	r3, #98	; 0x62
 80147b2:	d102      	bne.n	80147ba <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 80147b4:	2302      	movs	r3, #2
 80147b6:	643b      	str	r3, [r7, #64]	; 0x40
 80147b8:	e005      	b.n	80147c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 80147ba:	230a      	movs	r3, #10
 80147bc:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 80147be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147c0:	f023 0310 	bic.w	r3, r3, #16
 80147c4:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	2b58      	cmp	r3, #88	; 0x58
 80147cc:	d103      	bne.n	80147d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 80147ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147d0:	f043 0320 	orr.w	r3, r3, #32
 80147d4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	781b      	ldrb	r3, [r3, #0]
 80147da:	2b69      	cmp	r3, #105	; 0x69
 80147dc:	d007      	beq.n	80147ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	781b      	ldrb	r3, [r3, #0]
 80147e2:	2b64      	cmp	r3, #100	; 0x64
 80147e4:	d003      	beq.n	80147ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80147e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147e8:	f023 030c 	bic.w	r3, r3, #12
 80147ec:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 80147ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d003      	beq.n	8014800 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 80147f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80147fa:	f023 0301 	bic.w	r3, r3, #1
 80147fe:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8014800:	683b      	ldr	r3, [r7, #0]
 8014802:	781b      	ldrb	r3, [r3, #0]
 8014804:	2b69      	cmp	r3, #105	; 0x69
 8014806:	d004      	beq.n	8014812 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 8014808:	683b      	ldr	r3, [r7, #0]
 801480a:	781b      	ldrb	r3, [r3, #0]
 801480c:	2b64      	cmp	r3, #100	; 0x64
 801480e:	f040 8097 	bne.w	8014940 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8014812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014818:	2b00      	cmp	r3, #0
 801481a:	d030      	beq.n	801487e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 801481c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014820:	3307      	adds	r3, #7
 8014822:	f023 0307 	bic.w	r3, r3, #7
 8014826:	f103 0208 	add.w	r2, r3, #8
 801482a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014832:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8014836:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801483a:	2b00      	cmp	r3, #0
 801483c:	da05      	bge.n	801484a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 801483e:	2100      	movs	r1, #0
 8014840:	4254      	negs	r4, r2
 8014842:	eb61 0503 	sbc.w	r5, r1, r3
 8014846:	4622      	mov	r2, r4
 8014848:	462b      	mov	r3, r5
 801484a:	6979      	ldr	r1, [r7, #20]
 801484c:	0fc9      	lsrs	r1, r1, #31
 801484e:	b2c9      	uxtb	r1, r1
 8014850:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8014852:	2600      	movs	r6, #0
 8014854:	4680      	mov	r8, r0
 8014856:	46b1      	mov	r9, r6
 8014858:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801485a:	9008      	str	r0, [sp, #32]
 801485c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801485e:	9007      	str	r0, [sp, #28]
 8014860:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8014862:	9006      	str	r0, [sp, #24]
 8014864:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8014868:	9102      	str	r1, [sp, #8]
 801486a:	e9cd 2300 	strd	r2, r3, [sp]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014872:	68b9      	ldr	r1, [r7, #8]
 8014874:	68f8      	ldr	r0, [r7, #12]
 8014876:	f7ff f820 	bl	80138ba <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 801487a:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 801487c:	e0da      	b.n	8014a34 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 801487e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014884:	2b00      	cmp	r3, #0
 8014886:	d020      	beq.n	80148ca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 8014888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801488c:	1d1a      	adds	r2, r3, #4
 801488e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014892:	681b      	ldr	r3, [r3, #0]
 8014894:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8014896:	69fb      	ldr	r3, [r7, #28]
 8014898:	2b00      	cmp	r3, #0
 801489a:	bfb8      	it	lt
 801489c:	425b      	neglt	r3, r3
 801489e:	4619      	mov	r1, r3
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	0fdb      	lsrs	r3, r3, #31
 80148a4:	b2db      	uxtb	r3, r3
 80148a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80148a8:	9205      	str	r2, [sp, #20]
 80148aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80148ac:	9204      	str	r2, [sp, #16]
 80148ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80148b0:	9203      	str	r2, [sp, #12]
 80148b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80148b4:	9202      	str	r2, [sp, #8]
 80148b6:	9301      	str	r3, [sp, #4]
 80148b8:	9100      	str	r1, [sp, #0]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80148be:	68b9      	ldr	r1, [r7, #8]
 80148c0:	68f8      	ldr	r0, [r7, #12]
 80148c2:	f7fe ff93 	bl	80137ec <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80148c6:	6478      	str	r0, [r7, #68]	; 0x44
          }
 80148c8:	e0b4      	b.n	8014a34 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80148ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d007      	beq.n	80148e4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 80148d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80148d8:	1d1a      	adds	r2, r3, #4
 80148da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80148de:	681b      	ldr	r3, [r3, #0]
 80148e0:	b2db      	uxtb	r3, r3
 80148e2:	e012      	b.n	801490a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 80148e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80148e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d007      	beq.n	80148fe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 80148ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80148f2:	1d1a      	adds	r2, r3, #4
 80148f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	b21b      	sxth	r3, r3
 80148fc:	e005      	b.n	801490a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 80148fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014902:	1d1a      	adds	r2, r3, #4
 8014904:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 801490c:	6a3b      	ldr	r3, [r7, #32]
 801490e:	2b00      	cmp	r3, #0
 8014910:	bfb8      	it	lt
 8014912:	425b      	neglt	r3, r3
 8014914:	4619      	mov	r1, r3
 8014916:	6a3b      	ldr	r3, [r7, #32]
 8014918:	0fdb      	lsrs	r3, r3, #31
 801491a:	b2db      	uxtb	r3, r3
 801491c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801491e:	9205      	str	r2, [sp, #20]
 8014920:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014922:	9204      	str	r2, [sp, #16]
 8014924:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014926:	9203      	str	r2, [sp, #12]
 8014928:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801492a:	9202      	str	r2, [sp, #8]
 801492c:	9301      	str	r3, [sp, #4]
 801492e:	9100      	str	r1, [sp, #0]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014934:	68b9      	ldr	r1, [r7, #8]
 8014936:	68f8      	ldr	r0, [r7, #12]
 8014938:	f7fe ff58 	bl	80137ec <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 801493c:	6478      	str	r0, [r7, #68]	; 0x44
          }
 801493e:	e079      	b.n	8014a34 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8014940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014946:	2b00      	cmp	r3, #0
 8014948:	d022      	beq.n	8014990 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 801494a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801494e:	3307      	adds	r3, #7
 8014950:	f023 0307 	bic.w	r3, r3, #7
 8014954:	f103 0208 	add.w	r2, r3, #8
 8014958:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014960:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014962:	2000      	movs	r0, #0
 8014964:	468a      	mov	sl, r1
 8014966:	4683      	mov	fp, r0
 8014968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801496a:	9108      	str	r1, [sp, #32]
 801496c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801496e:	9107      	str	r1, [sp, #28]
 8014970:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8014972:	9106      	str	r1, [sp, #24]
 8014974:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8014978:	2100      	movs	r1, #0
 801497a:	9102      	str	r1, [sp, #8]
 801497c:	e9cd 2300 	strd	r2, r3, [sp]
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014984:	68b9      	ldr	r1, [r7, #8]
 8014986:	68f8      	ldr	r0, [r7, #12]
 8014988:	f7fe ff97 	bl	80138ba <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 801498c:	6478      	str	r0, [r7, #68]	; 0x44
 801498e:	e051      	b.n	8014a34 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8014990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014996:	2b00      	cmp	r3, #0
 8014998:	d018      	beq.n	80149cc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 801499a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801499e:	1d1a      	adds	r2, r3, #4
 80149a0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80149a4:	681b      	ldr	r3, [r3, #0]
 80149a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80149a8:	9205      	str	r2, [sp, #20]
 80149aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80149ac:	9204      	str	r2, [sp, #16]
 80149ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80149b0:	9203      	str	r2, [sp, #12]
 80149b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80149b4:	9202      	str	r2, [sp, #8]
 80149b6:	2200      	movs	r2, #0
 80149b8:	9201      	str	r2, [sp, #4]
 80149ba:	9300      	str	r3, [sp, #0]
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80149c0:	68b9      	ldr	r1, [r7, #8]
 80149c2:	68f8      	ldr	r0, [r7, #12]
 80149c4:	f7fe ff12 	bl	80137ec <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 80149c8:	6478      	str	r0, [r7, #68]	; 0x44
 80149ca:	e033      	b.n	8014a34 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 80149cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d007      	beq.n	80149e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 80149d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80149da:	1d1a      	adds	r2, r3, #4
 80149dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	b2db      	uxtb	r3, r3
 80149e4:	e012      	b.n	8014a0c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 80149e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80149e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d007      	beq.n	8014a00 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 80149f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80149f4:	1d1a      	adds	r2, r3, #4
 80149f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	b29b      	uxth	r3, r3
 80149fe:	e005      	b.n	8014a0c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 8014a00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a04:	1d1a      	adds	r2, r3, #4
 8014a06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8014a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a10:	9305      	str	r3, [sp, #20]
 8014a12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a14:	9304      	str	r3, [sp, #16]
 8014a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a18:	9303      	str	r3, [sp, #12]
 8014a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a1c:	9302      	str	r3, [sp, #8]
 8014a1e:	2300      	movs	r3, #0
 8014a20:	9301      	str	r3, [sp, #4]
 8014a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a24:	9300      	str	r3, [sp, #0]
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014a2a:	68b9      	ldr	r1, [r7, #8]
 8014a2c:	68f8      	ldr	r0, [r7, #12]
 8014a2e:	f7fe fedd 	bl	80137ec <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8014a32:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	3301      	adds	r3, #1
 8014a38:	603b      	str	r3, [r7, #0]
        break;
 8014a3a:	e159      	b.n	8014cf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	2b46      	cmp	r3, #70	; 0x46
 8014a42:	d103      	bne.n	8014a4c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 8014a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a46:	f043 0320 	orr.w	r3, r3, #32
 8014a4a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8014a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014a50:	3307      	adds	r3, #7
 8014a52:	f023 0307 	bic.w	r3, r3, #7
 8014a56:	f103 0208 	add.w	r2, r3, #8
 8014a5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014a5e:	ed93 7b00 	vldr	d7, [r3]
 8014a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a64:	9302      	str	r3, [sp, #8]
 8014a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a68:	9301      	str	r3, [sp, #4]
 8014a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a6c:	9300      	str	r3, [sp, #0]
 8014a6e:	eeb0 0a47 	vmov.f32	s0, s14
 8014a72:	eef0 0a67 	vmov.f32	s1, s15
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014a7a:	68b9      	ldr	r1, [r7, #8]
 8014a7c:	68f8      	ldr	r0, [r7, #12]
 8014a7e:	f7fe ff8b 	bl	8013998 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 8014a82:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	3301      	adds	r3, #1
 8014a88:	603b      	str	r3, [r7, #0]
        break;
 8014a8a:	e131      	b.n	8014cf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8014a8c:	683b      	ldr	r3, [r7, #0]
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	2b67      	cmp	r3, #103	; 0x67
 8014a92:	d003      	beq.n	8014a9c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 8014a94:	683b      	ldr	r3, [r7, #0]
 8014a96:	781b      	ldrb	r3, [r3, #0]
 8014a98:	2b47      	cmp	r3, #71	; 0x47
 8014a9a:	d103      	bne.n	8014aa4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 8014a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014a9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014aa2:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8014aa4:	683b      	ldr	r3, [r7, #0]
 8014aa6:	781b      	ldrb	r3, [r3, #0]
 8014aa8:	2b45      	cmp	r3, #69	; 0x45
 8014aaa:	d003      	beq.n	8014ab4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	781b      	ldrb	r3, [r3, #0]
 8014ab0:	2b47      	cmp	r3, #71	; 0x47
 8014ab2:	d103      	bne.n	8014abc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 8014ab4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ab6:	f043 0320 	orr.w	r3, r3, #32
 8014aba:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8014abc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014ac0:	3307      	adds	r3, #7
 8014ac2:	f023 0307 	bic.w	r3, r3, #7
 8014ac6:	f103 0208 	add.w	r2, r3, #8
 8014aca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014ace:	ed93 7b00 	vldr	d7, [r3]
 8014ad2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ad4:	9302      	str	r3, [sp, #8]
 8014ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ad8:	9301      	str	r3, [sp, #4]
 8014ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014adc:	9300      	str	r3, [sp, #0]
 8014ade:	eeb0 0a47 	vmov.f32	s0, s14
 8014ae2:	eef0 0a67 	vmov.f32	s1, s15
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014aea:	68b9      	ldr	r1, [r7, #8]
 8014aec:	68f8      	ldr	r0, [r7, #12]
 8014aee:	f7ff f9b7 	bl	8013e60 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8014af2:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	3301      	adds	r3, #1
 8014af8:	603b      	str	r3, [r7, #0]
        break;
 8014afa:	e0f9      	b.n	8014cf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8014afc:	2301      	movs	r3, #1
 8014afe:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8014b00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b02:	f003 0302 	and.w	r3, r3, #2
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d113      	bne.n	8014b32 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 8014b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b0c:	1c5a      	adds	r2, r3, #1
 8014b0e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8014b10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014b12:	429a      	cmp	r2, r3
 8014b14:	bf8c      	ite	hi
 8014b16:	2301      	movhi	r3, #1
 8014b18:	2300      	movls	r3, #0
 8014b1a:	b2db      	uxtb	r3, r3
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d008      	beq.n	8014b32 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 8014b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b22:	1c53      	adds	r3, r2, #1
 8014b24:	647b      	str	r3, [r7, #68]	; 0x44
 8014b26:	68fe      	ldr	r6, [r7, #12]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	68b9      	ldr	r1, [r7, #8]
 8014b2c:	2020      	movs	r0, #32
 8014b2e:	47b0      	blx	r6
          while (l++ < width) {
 8014b30:	e7eb      	b.n	8014b0a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8014b32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014b36:	1d1a      	adds	r2, r3, #4
 8014b38:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	b2d8      	uxtb	r0, r3
 8014b40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b42:	1c53      	adds	r3, r2, #1
 8014b44:	647b      	str	r3, [r7, #68]	; 0x44
 8014b46:	68fe      	ldr	r6, [r7, #12]
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	68b9      	ldr	r1, [r7, #8]
 8014b4c:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 8014b4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b50:	f003 0302 	and.w	r3, r3, #2
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d013      	beq.n	8014b80 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 8014b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b5a:	1c5a      	adds	r2, r3, #1
 8014b5c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8014b5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014b60:	429a      	cmp	r2, r3
 8014b62:	bf8c      	ite	hi
 8014b64:	2301      	movhi	r3, #1
 8014b66:	2300      	movls	r3, #0
 8014b68:	b2db      	uxtb	r3, r3
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	d008      	beq.n	8014b80 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 8014b6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b70:	1c53      	adds	r3, r2, #1
 8014b72:	647b      	str	r3, [r7, #68]	; 0x44
 8014b74:	68fe      	ldr	r6, [r7, #12]
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	68b9      	ldr	r1, [r7, #8]
 8014b7a:	2020      	movs	r0, #32
 8014b7c:	47b0      	blx	r6
          while (l++ < width) {
 8014b7e:	e7eb      	b.n	8014b58 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 8014b80:	683b      	ldr	r3, [r7, #0]
 8014b82:	3301      	adds	r3, #1
 8014b84:	603b      	str	r3, [r7, #0]
        break;
 8014b86:	e0b3      	b.n	8014cf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8014b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014b8c:	1d1a      	adds	r2, r3, #4
 8014b8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8014b96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d001      	beq.n	8014ba0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 8014b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b9e:	e001      	b.n	8014ba4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 8014ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ba4:	4619      	mov	r1, r3
 8014ba6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014ba8:	f7fe fc9a 	bl	80134e0 <_ZL10_strnlen_sPKcj>
 8014bac:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8014bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d007      	beq.n	8014bc8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 8014bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bbc:	429a      	cmp	r2, r3
 8014bbe:	d201      	bcs.n	8014bc4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 8014bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bc2:	e000      	b.n	8014bc6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 8014bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bc6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8014bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014bca:	f003 0302 	and.w	r3, r3, #2
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d113      	bne.n	8014bfa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 8014bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014bd4:	1c5a      	adds	r2, r3, #1
 8014bd6:	637a      	str	r2, [r7, #52]	; 0x34
 8014bd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014bda:	429a      	cmp	r2, r3
 8014bdc:	bf8c      	ite	hi
 8014bde:	2301      	movhi	r3, #1
 8014be0:	2300      	movls	r3, #0
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d008      	beq.n	8014bfa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 8014be8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014bea:	1c53      	adds	r3, r2, #1
 8014bec:	647b      	str	r3, [r7, #68]	; 0x44
 8014bee:	68fe      	ldr	r6, [r7, #12]
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	68b9      	ldr	r1, [r7, #8]
 8014bf4:	2020      	movs	r0, #32
 8014bf6:	47b0      	blx	r6
          while (l++ < width) {
 8014bf8:	e7eb      	b.n	8014bd2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8014bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d00b      	beq.n	8014c1a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8014c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d004      	beq.n	8014c16 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 8014c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c0e:	1e5a      	subs	r2, r3, #1
 8014c10:	64fa      	str	r2, [r7, #76]	; 0x4c
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d001      	beq.n	8014c1a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 8014c16:	2301      	movs	r3, #1
 8014c18:	e000      	b.n	8014c1c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	d00b      	beq.n	8014c38 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 8014c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c22:	1c5a      	adds	r2, r3, #1
 8014c24:	63ba      	str	r2, [r7, #56]	; 0x38
 8014c26:	7818      	ldrb	r0, [r3, #0]
 8014c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014c2a:	1c53      	adds	r3, r2, #1
 8014c2c:	647b      	str	r3, [r7, #68]	; 0x44
 8014c2e:	68fe      	ldr	r6, [r7, #12]
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	68b9      	ldr	r1, [r7, #8]
 8014c34:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8014c36:	e7e0      	b.n	8014bfa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8014c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c3a:	f003 0302 	and.w	r3, r3, #2
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d013      	beq.n	8014c6a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 8014c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c44:	1c5a      	adds	r2, r3, #1
 8014c46:	637a      	str	r2, [r7, #52]	; 0x34
 8014c48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c4a:	429a      	cmp	r2, r3
 8014c4c:	bf8c      	ite	hi
 8014c4e:	2301      	movhi	r3, #1
 8014c50:	2300      	movls	r3, #0
 8014c52:	b2db      	uxtb	r3, r3
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d008      	beq.n	8014c6a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 8014c58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014c5a:	1c53      	adds	r3, r2, #1
 8014c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8014c5e:	68fe      	ldr	r6, [r7, #12]
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	68b9      	ldr	r1, [r7, #8]
 8014c64:	2020      	movs	r0, #32
 8014c66:	47b0      	blx	r6
          while (l++ < width) {
 8014c68:	e7eb      	b.n	8014c42 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 8014c6a:	683b      	ldr	r3, [r7, #0]
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	603b      	str	r3, [r7, #0]
        break;
 8014c70:	e03e      	b.n	8014cf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8014c72:	2308      	movs	r3, #8
 8014c74:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8014c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c78:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8014c7c:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8014c7e:	2300      	movs	r3, #0
 8014c80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8014c84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014c88:	1d1a      	adds	r2, r3, #4
 8014c8a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	461a      	mov	r2, r3
 8014c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c94:	9305      	str	r3, [sp, #20]
 8014c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014c98:	9304      	str	r3, [sp, #16]
 8014c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014c9c:	9303      	str	r3, [sp, #12]
 8014c9e:	2310      	movs	r3, #16
 8014ca0:	9302      	str	r3, [sp, #8]
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	9301      	str	r3, [sp, #4]
 8014ca6:	9200      	str	r2, [sp, #0]
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014cac:	68b9      	ldr	r1, [r7, #8]
 8014cae:	68f8      	ldr	r0, [r7, #12]
 8014cb0:	f7fe fd9c 	bl	80137ec <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 8014cb4:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8014cb6:	683b      	ldr	r3, [r7, #0]
 8014cb8:	3301      	adds	r3, #1
 8014cba:	603b      	str	r3, [r7, #0]
        break;
 8014cbc:	e018      	b.n	8014cf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8014cbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014cc0:	1c53      	adds	r3, r2, #1
 8014cc2:	647b      	str	r3, [r7, #68]	; 0x44
 8014cc4:	68fe      	ldr	r6, [r7, #12]
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	68b9      	ldr	r1, [r7, #8]
 8014cca:	2025      	movs	r0, #37	; 0x25
 8014ccc:	47b0      	blx	r6
        format++;
 8014cce:	683b      	ldr	r3, [r7, #0]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	603b      	str	r3, [r7, #0]
        break;
 8014cd4:	e00c      	b.n	8014cf0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 8014cd6:	683b      	ldr	r3, [r7, #0]
 8014cd8:	7818      	ldrb	r0, [r3, #0]
 8014cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014cdc:	1c53      	adds	r3, r2, #1
 8014cde:	647b      	str	r3, [r7, #68]	; 0x44
 8014ce0:	68fe      	ldr	r6, [r7, #12]
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	68b9      	ldr	r1, [r7, #8]
 8014ce6:	47b0      	blx	r6
        format++;
 8014ce8:	683b      	ldr	r3, [r7, #0]
 8014cea:	3301      	adds	r3, #1
 8014cec:	603b      	str	r3, [r7, #0]
        break;
 8014cee:	bf00      	nop
  while (*format)
 8014cf0:	f7ff bb4d 	b.w	801438e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8014cf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	429a      	cmp	r2, r3
 8014cfa:	d302      	bcc.n	8014d02 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	1e5a      	subs	r2, r3, #1
 8014d00:	e000      	b.n	8014d04 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 8014d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014d04:	68fc      	ldr	r4, [r7, #12]
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	68b9      	ldr	r1, [r7, #8]
 8014d0a:	2000      	movs	r0, #0
 8014d0c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8014d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	375c      	adds	r7, #92	; 0x5c
 8014d14:	46bd      	mov	sp, r7
 8014d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d1a:	bf00      	nop

08014d1c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8014d1c:	b40f      	push	{r0, r1, r2, r3}
 8014d1e:	b580      	push	{r7, lr}
 8014d20:	b086      	sub	sp, #24
 8014d22:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8014d24:	f107 031c 	add.w	r3, r7, #28
 8014d28:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 8014d2a:	1d39      	adds	r1, r7, #4
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	9300      	str	r3, [sp, #0]
 8014d30:	69bb      	ldr	r3, [r7, #24]
 8014d32:	f04f 32ff 	mov.w	r2, #4294967295
 8014d36:	4806      	ldr	r0, [pc, #24]	; (8014d50 <printf_+0x34>)
 8014d38:	f7ff fb1a 	bl	8014370 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 8014d3c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
}
 8014d40:	4618      	mov	r0, r3
 8014d42:	3710      	adds	r7, #16
 8014d44:	46bd      	mov	sp, r7
 8014d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014d4a:	b004      	add	sp, #16
 8014d4c:	4770      	bx	lr
 8014d4e:	bf00      	nop
 8014d50:	080134bb 	.word	0x080134bb

08014d54 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8014d54:	b480      	push	{r7}
 8014d56:	b083      	sub	sp, #12
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8014d5c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8014d60:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8014d64:	f003 0301 	and.w	r3, r3, #1
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d009      	beq.n	8014d80 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8014d6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8014d70:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8014d74:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8014d78:	2b00      	cmp	r3, #0
 8014d7a:	d001      	beq.n	8014d80 <ITM_SendChar+0x2c>
 8014d7c:	2301      	movs	r3, #1
 8014d7e:	e000      	b.n	8014d82 <ITM_SendChar+0x2e>
 8014d80:	2300      	movs	r3, #0
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d010      	beq.n	8014da8 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8014d86:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	bf0c      	ite	eq
 8014d90:	2301      	moveq	r3, #1
 8014d92:	2300      	movne	r3, #0
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d001      	beq.n	8014d9e <ITM_SendChar+0x4a>
    {
      __NOP();
 8014d9a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8014d9c:	e7f3      	b.n	8014d86 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8014d9e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8014da2:	687a      	ldr	r2, [r7, #4]
 8014da4:	b2d2      	uxtb	r2, r2
 8014da6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8014da8:	687b      	ldr	r3, [r7, #4]
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	370c      	adds	r7, #12
 8014dae:	46bd      	mov	sp, r7
 8014db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db4:	4770      	bx	lr

08014db6 <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 8014db6:	b580      	push	{r7, lr}
 8014db8:	b082      	sub	sp, #8
 8014dba:	af00      	add	r7, sp, #0
 8014dbc:	4603      	mov	r3, r0
 8014dbe:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 8014dc0:	79fb      	ldrb	r3, [r7, #7]
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7ff ffc6 	bl	8014d54 <ITM_SendChar>
}
 8014dc8:	bf00      	nop
 8014dca:	3708      	adds	r7, #8
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	bd80      	pop	{r7, pc}

08014dd0 <__NVIC_SetPriority>:
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b083      	sub	sp, #12
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	6039      	str	r1, [r7, #0]
 8014dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	db0a      	blt.n	8014dfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014de4:	683b      	ldr	r3, [r7, #0]
 8014de6:	b2da      	uxtb	r2, r3
 8014de8:	490c      	ldr	r1, [pc, #48]	; (8014e1c <__NVIC_SetPriority+0x4c>)
 8014dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014dee:	0112      	lsls	r2, r2, #4
 8014df0:	b2d2      	uxtb	r2, r2
 8014df2:	440b      	add	r3, r1
 8014df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014df8:	e00a      	b.n	8014e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014dfa:	683b      	ldr	r3, [r7, #0]
 8014dfc:	b2da      	uxtb	r2, r3
 8014dfe:	4908      	ldr	r1, [pc, #32]	; (8014e20 <__NVIC_SetPriority+0x50>)
 8014e00:	79fb      	ldrb	r3, [r7, #7]
 8014e02:	f003 030f 	and.w	r3, r3, #15
 8014e06:	3b04      	subs	r3, #4
 8014e08:	0112      	lsls	r2, r2, #4
 8014e0a:	b2d2      	uxtb	r2, r2
 8014e0c:	440b      	add	r3, r1
 8014e0e:	761a      	strb	r2, [r3, #24]
}
 8014e10:	bf00      	nop
 8014e12:	370c      	adds	r7, #12
 8014e14:	46bd      	mov	sp, r7
 8014e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1a:	4770      	bx	lr
 8014e1c:	e000e100 	.word	0xe000e100
 8014e20:	e000ed00 	.word	0xe000ed00

08014e24 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8014e24:	b580      	push	{r7, lr}
 8014e26:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8014e28:	4b05      	ldr	r3, [pc, #20]	; (8014e40 <SysTick_Handler+0x1c>)
 8014e2a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8014e2c:	f003 f8a8 	bl	8017f80 <xTaskGetSchedulerState>
 8014e30:	4603      	mov	r3, r0
 8014e32:	2b01      	cmp	r3, #1
 8014e34:	d001      	beq.n	8014e3a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8014e36:	f004 f8cf 	bl	8018fd8 <xPortSysTickHandler>
  }
}
 8014e3a:	bf00      	nop
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	e000e010 	.word	0xe000e010

08014e44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8014e44:	b580      	push	{r7, lr}
 8014e46:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8014e48:	2100      	movs	r1, #0
 8014e4a:	f06f 0004 	mvn.w	r0, #4
 8014e4e:	f7ff ffbf 	bl	8014dd0 <__NVIC_SetPriority>
#endif
}
 8014e52:	bf00      	nop
 8014e54:	bd80      	pop	{r7, pc}
	...

08014e58 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8014e58:	b480      	push	{r7}
 8014e5a:	b083      	sub	sp, #12
 8014e5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014e5e:	f3ef 8305 	mrs	r3, IPSR
 8014e62:	603b      	str	r3, [r7, #0]
  return(result);
 8014e64:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d003      	beq.n	8014e72 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8014e6a:	f06f 0305 	mvn.w	r3, #5
 8014e6e:	607b      	str	r3, [r7, #4]
 8014e70:	e00c      	b.n	8014e8c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014e72:	4b0a      	ldr	r3, [pc, #40]	; (8014e9c <osKernelInitialize+0x44>)
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d105      	bne.n	8014e86 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8014e7a:	4b08      	ldr	r3, [pc, #32]	; (8014e9c <osKernelInitialize+0x44>)
 8014e7c:	2201      	movs	r2, #1
 8014e7e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014e80:	2300      	movs	r3, #0
 8014e82:	607b      	str	r3, [r7, #4]
 8014e84:	e002      	b.n	8014e8c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014e86:	f04f 33ff 	mov.w	r3, #4294967295
 8014e8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014e8c:	687b      	ldr	r3, [r7, #4]
}
 8014e8e:	4618      	mov	r0, r3
 8014e90:	370c      	adds	r7, #12
 8014e92:	46bd      	mov	sp, r7
 8014e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e98:	4770      	bx	lr
 8014e9a:	bf00      	nop
 8014e9c:	200016c4 	.word	0x200016c4

08014ea0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014ea6:	f3ef 8305 	mrs	r3, IPSR
 8014eaa:	603b      	str	r3, [r7, #0]
  return(result);
 8014eac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d003      	beq.n	8014eba <osKernelStart+0x1a>
    stat = osErrorISR;
 8014eb2:	f06f 0305 	mvn.w	r3, #5
 8014eb6:	607b      	str	r3, [r7, #4]
 8014eb8:	e010      	b.n	8014edc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8014eba:	4b0b      	ldr	r3, [pc, #44]	; (8014ee8 <osKernelStart+0x48>)
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	2b01      	cmp	r3, #1
 8014ec0:	d109      	bne.n	8014ed6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014ec2:	f7ff ffbf 	bl	8014e44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014ec6:	4b08      	ldr	r3, [pc, #32]	; (8014ee8 <osKernelStart+0x48>)
 8014ec8:	2202      	movs	r2, #2
 8014eca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8014ecc:	f002 fb98 	bl	8017600 <vTaskStartScheduler>
      stat = osOK;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	607b      	str	r3, [r7, #4]
 8014ed4:	e002      	b.n	8014edc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8014eda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8014edc:	687b      	ldr	r3, [r7, #4]
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3708      	adds	r7, #8
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}
 8014ee6:	bf00      	nop
 8014ee8:	200016c4 	.word	0x200016c4

08014eec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8014eec:	b580      	push	{r7, lr}
 8014eee:	b08e      	sub	sp, #56	; 0x38
 8014ef0:	af04      	add	r7, sp, #16
 8014ef2:	60f8      	str	r0, [r7, #12]
 8014ef4:	60b9      	str	r1, [r7, #8]
 8014ef6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014ef8:	2300      	movs	r3, #0
 8014efa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014efc:	f3ef 8305 	mrs	r3, IPSR
 8014f00:	617b      	str	r3, [r7, #20]
  return(result);
 8014f02:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d17e      	bne.n	8015006 <osThreadNew+0x11a>
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d07b      	beq.n	8015006 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8014f0e:	2380      	movs	r3, #128	; 0x80
 8014f10:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8014f12:	2318      	movs	r3, #24
 8014f14:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8014f16:	2300      	movs	r3, #0
 8014f18:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8014f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8014f1e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d045      	beq.n	8014fb2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d002      	beq.n	8014f34 <osThreadNew+0x48>
        name = attr->name;
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	699b      	ldr	r3, [r3, #24]
 8014f38:	2b00      	cmp	r3, #0
 8014f3a:	d002      	beq.n	8014f42 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	699b      	ldr	r3, [r3, #24]
 8014f40:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8014f42:	69fb      	ldr	r3, [r7, #28]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d008      	beq.n	8014f5a <osThreadNew+0x6e>
 8014f48:	69fb      	ldr	r3, [r7, #28]
 8014f4a:	2b38      	cmp	r3, #56	; 0x38
 8014f4c:	d805      	bhi.n	8014f5a <osThreadNew+0x6e>
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	685b      	ldr	r3, [r3, #4]
 8014f52:	f003 0301 	and.w	r3, r3, #1
 8014f56:	2b00      	cmp	r3, #0
 8014f58:	d001      	beq.n	8014f5e <osThreadNew+0x72>
        return (NULL);
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	e054      	b.n	8015008 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	695b      	ldr	r3, [r3, #20]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d003      	beq.n	8014f6e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	695b      	ldr	r3, [r3, #20]
 8014f6a:	089b      	lsrs	r3, r3, #2
 8014f6c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	689b      	ldr	r3, [r3, #8]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d00e      	beq.n	8014f94 <osThreadNew+0xa8>
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	68db      	ldr	r3, [r3, #12]
 8014f7a:	2bbf      	cmp	r3, #191	; 0xbf
 8014f7c:	d90a      	bls.n	8014f94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d006      	beq.n	8014f94 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	695b      	ldr	r3, [r3, #20]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d002      	beq.n	8014f94 <osThreadNew+0xa8>
        mem = 1;
 8014f8e:	2301      	movs	r3, #1
 8014f90:	61bb      	str	r3, [r7, #24]
 8014f92:	e010      	b.n	8014fb6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	689b      	ldr	r3, [r3, #8]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d10c      	bne.n	8014fb6 <osThreadNew+0xca>
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	68db      	ldr	r3, [r3, #12]
 8014fa0:	2b00      	cmp	r3, #0
 8014fa2:	d108      	bne.n	8014fb6 <osThreadNew+0xca>
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	691b      	ldr	r3, [r3, #16]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d104      	bne.n	8014fb6 <osThreadNew+0xca>
          mem = 0;
 8014fac:	2300      	movs	r3, #0
 8014fae:	61bb      	str	r3, [r7, #24]
 8014fb0:	e001      	b.n	8014fb6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014fb6:	69bb      	ldr	r3, [r7, #24]
 8014fb8:	2b01      	cmp	r3, #1
 8014fba:	d110      	bne.n	8014fde <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014fc0:	687a      	ldr	r2, [r7, #4]
 8014fc2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014fc4:	9202      	str	r2, [sp, #8]
 8014fc6:	9301      	str	r3, [sp, #4]
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	9300      	str	r3, [sp, #0]
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	6a3a      	ldr	r2, [r7, #32]
 8014fd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014fd2:	68f8      	ldr	r0, [r7, #12]
 8014fd4:	f002 f924 	bl	8017220 <xTaskCreateStatic>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	613b      	str	r3, [r7, #16]
 8014fdc:	e013      	b.n	8015006 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8014fde:	69bb      	ldr	r3, [r7, #24]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d110      	bne.n	8015006 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014fe4:	6a3b      	ldr	r3, [r7, #32]
 8014fe6:	b29a      	uxth	r2, r3
 8014fe8:	f107 0310 	add.w	r3, r7, #16
 8014fec:	9301      	str	r3, [sp, #4]
 8014fee:	69fb      	ldr	r3, [r7, #28]
 8014ff0:	9300      	str	r3, [sp, #0]
 8014ff2:	68bb      	ldr	r3, [r7, #8]
 8014ff4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014ff6:	68f8      	ldr	r0, [r7, #12]
 8014ff8:	f002 f96f 	bl	80172da <xTaskCreate>
 8014ffc:	4603      	mov	r3, r0
 8014ffe:	2b01      	cmp	r3, #1
 8015000:	d001      	beq.n	8015006 <osThreadNew+0x11a>
            hTask = NULL;
 8015002:	2300      	movs	r3, #0
 8015004:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015006:	693b      	ldr	r3, [r7, #16]
}
 8015008:	4618      	mov	r0, r3
 801500a:	3728      	adds	r7, #40	; 0x28
 801500c:	46bd      	mov	sp, r7
 801500e:	bd80      	pop	{r7, pc}

08015010 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8015010:	b580      	push	{r7, lr}
 8015012:	b084      	sub	sp, #16
 8015014:	af00      	add	r7, sp, #0
 8015016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015018:	f3ef 8305 	mrs	r3, IPSR
 801501c:	60bb      	str	r3, [r7, #8]
  return(result);
 801501e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015020:	2b00      	cmp	r3, #0
 8015022:	d003      	beq.n	801502c <osDelay+0x1c>
    stat = osErrorISR;
 8015024:	f06f 0305 	mvn.w	r3, #5
 8015028:	60fb      	str	r3, [r7, #12]
 801502a:	e007      	b.n	801503c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801502c:	2300      	movs	r3, #0
 801502e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2b00      	cmp	r3, #0
 8015034:	d002      	beq.n	801503c <osDelay+0x2c>
      vTaskDelay(ticks);
 8015036:	6878      	ldr	r0, [r7, #4]
 8015038:	f002 faae 	bl	8017598 <vTaskDelay>
    }
  }

  return (stat);
 801503c:	68fb      	ldr	r3, [r7, #12]
}
 801503e:	4618      	mov	r0, r3
 8015040:	3710      	adds	r7, #16
 8015042:	46bd      	mov	sp, r7
 8015044:	bd80      	pop	{r7, pc}

08015046 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8015046:	b580      	push	{r7, lr}
 8015048:	b088      	sub	sp, #32
 801504a:	af00      	add	r7, sp, #0
 801504c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801504e:	2300      	movs	r3, #0
 8015050:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015052:	f3ef 8305 	mrs	r3, IPSR
 8015056:	60bb      	str	r3, [r7, #8]
  return(result);
 8015058:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 801505a:	2b00      	cmp	r3, #0
 801505c:	d174      	bne.n	8015148 <osMutexNew+0x102>
    if (attr != NULL) {
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d003      	beq.n	801506c <osMutexNew+0x26>
      type = attr->attr_bits;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	685b      	ldr	r3, [r3, #4]
 8015068:	61bb      	str	r3, [r7, #24]
 801506a:	e001      	b.n	8015070 <osMutexNew+0x2a>
    } else {
      type = 0U;
 801506c:	2300      	movs	r3, #0
 801506e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8015070:	69bb      	ldr	r3, [r7, #24]
 8015072:	f003 0301 	and.w	r3, r3, #1
 8015076:	2b00      	cmp	r3, #0
 8015078:	d002      	beq.n	8015080 <osMutexNew+0x3a>
      rmtx = 1U;
 801507a:	2301      	movs	r3, #1
 801507c:	617b      	str	r3, [r7, #20]
 801507e:	e001      	b.n	8015084 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8015080:	2300      	movs	r3, #0
 8015082:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8015084:	69bb      	ldr	r3, [r7, #24]
 8015086:	f003 0308 	and.w	r3, r3, #8
 801508a:	2b00      	cmp	r3, #0
 801508c:	d15c      	bne.n	8015148 <osMutexNew+0x102>
      mem = -1;
 801508e:	f04f 33ff 	mov.w	r3, #4294967295
 8015092:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d015      	beq.n	80150c6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	689b      	ldr	r3, [r3, #8]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d006      	beq.n	80150b0 <osMutexNew+0x6a>
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	68db      	ldr	r3, [r3, #12]
 80150a6:	2b4f      	cmp	r3, #79	; 0x4f
 80150a8:	d902      	bls.n	80150b0 <osMutexNew+0x6a>
          mem = 1;
 80150aa:	2301      	movs	r3, #1
 80150ac:	613b      	str	r3, [r7, #16]
 80150ae:	e00c      	b.n	80150ca <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	689b      	ldr	r3, [r3, #8]
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	d108      	bne.n	80150ca <osMutexNew+0x84>
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	68db      	ldr	r3, [r3, #12]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d104      	bne.n	80150ca <osMutexNew+0x84>
            mem = 0;
 80150c0:	2300      	movs	r3, #0
 80150c2:	613b      	str	r3, [r7, #16]
 80150c4:	e001      	b.n	80150ca <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80150c6:	2300      	movs	r3, #0
 80150c8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d112      	bne.n	80150f6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d007      	beq.n	80150e6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	689b      	ldr	r3, [r3, #8]
 80150da:	4619      	mov	r1, r3
 80150dc:	2004      	movs	r0, #4
 80150de:	f000 fd88 	bl	8015bf2 <xQueueCreateMutexStatic>
 80150e2:	61f8      	str	r0, [r7, #28]
 80150e4:	e016      	b.n	8015114 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	689b      	ldr	r3, [r3, #8]
 80150ea:	4619      	mov	r1, r3
 80150ec:	2001      	movs	r0, #1
 80150ee:	f000 fd80 	bl	8015bf2 <xQueueCreateMutexStatic>
 80150f2:	61f8      	str	r0, [r7, #28]
 80150f4:	e00e      	b.n	8015114 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80150f6:	693b      	ldr	r3, [r7, #16]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d10b      	bne.n	8015114 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80150fc:	697b      	ldr	r3, [r7, #20]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d004      	beq.n	801510c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8015102:	2004      	movs	r0, #4
 8015104:	f000 fd5d 	bl	8015bc2 <xQueueCreateMutex>
 8015108:	61f8      	str	r0, [r7, #28]
 801510a:	e003      	b.n	8015114 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 801510c:	2001      	movs	r0, #1
 801510e:	f000 fd58 	bl	8015bc2 <xQueueCreateMutex>
 8015112:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8015114:	69fb      	ldr	r3, [r7, #28]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d00c      	beq.n	8015134 <osMutexNew+0xee>
        if (attr != NULL) {
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d003      	beq.n	8015128 <osMutexNew+0xe2>
          name = attr->name;
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	60fb      	str	r3, [r7, #12]
 8015126:	e001      	b.n	801512c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8015128:	2300      	movs	r3, #0
 801512a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 801512c:	68f9      	ldr	r1, [r7, #12]
 801512e:	69f8      	ldr	r0, [r7, #28]
 8015130:	f001 fc68 	bl	8016a04 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8015134:	69fb      	ldr	r3, [r7, #28]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d006      	beq.n	8015148 <osMutexNew+0x102>
 801513a:	697b      	ldr	r3, [r7, #20]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d003      	beq.n	8015148 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8015140:	69fb      	ldr	r3, [r7, #28]
 8015142:	f043 0301 	orr.w	r3, r3, #1
 8015146:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8015148:	69fb      	ldr	r3, [r7, #28]
}
 801514a:	4618      	mov	r0, r3
 801514c:	3720      	adds	r7, #32
 801514e:	46bd      	mov	sp, r7
 8015150:	bd80      	pop	{r7, pc}

08015152 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8015152:	b580      	push	{r7, lr}
 8015154:	b086      	sub	sp, #24
 8015156:	af00      	add	r7, sp, #0
 8015158:	6078      	str	r0, [r7, #4]
 801515a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	f023 0301 	bic.w	r3, r3, #1
 8015162:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f003 0301 	and.w	r3, r3, #1
 801516a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 801516c:	2300      	movs	r3, #0
 801516e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015170:	f3ef 8305 	mrs	r3, IPSR
 8015174:	60bb      	str	r3, [r7, #8]
  return(result);
 8015176:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8015178:	2b00      	cmp	r3, #0
 801517a:	d003      	beq.n	8015184 <osMutexAcquire+0x32>
    stat = osErrorISR;
 801517c:	f06f 0305 	mvn.w	r3, #5
 8015180:	617b      	str	r3, [r7, #20]
 8015182:	e02c      	b.n	80151de <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8015184:	693b      	ldr	r3, [r7, #16]
 8015186:	2b00      	cmp	r3, #0
 8015188:	d103      	bne.n	8015192 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 801518a:	f06f 0303 	mvn.w	r3, #3
 801518e:	617b      	str	r3, [r7, #20]
 8015190:	e025      	b.n	80151de <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	2b00      	cmp	r3, #0
 8015196:	d011      	beq.n	80151bc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8015198:	6839      	ldr	r1, [r7, #0]
 801519a:	6938      	ldr	r0, [r7, #16]
 801519c:	f000 fd78 	bl	8015c90 <xQueueTakeMutexRecursive>
 80151a0:	4603      	mov	r3, r0
 80151a2:	2b01      	cmp	r3, #1
 80151a4:	d01b      	beq.n	80151de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d003      	beq.n	80151b4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80151ac:	f06f 0301 	mvn.w	r3, #1
 80151b0:	617b      	str	r3, [r7, #20]
 80151b2:	e014      	b.n	80151de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80151b4:	f06f 0302 	mvn.w	r3, #2
 80151b8:	617b      	str	r3, [r7, #20]
 80151ba:	e010      	b.n	80151de <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80151bc:	6839      	ldr	r1, [r7, #0]
 80151be:	6938      	ldr	r0, [r7, #16]
 80151c0:	f001 f90c 	bl	80163dc <xQueueSemaphoreTake>
 80151c4:	4603      	mov	r3, r0
 80151c6:	2b01      	cmp	r3, #1
 80151c8:	d009      	beq.n	80151de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d003      	beq.n	80151d8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80151d0:	f06f 0301 	mvn.w	r3, #1
 80151d4:	617b      	str	r3, [r7, #20]
 80151d6:	e002      	b.n	80151de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80151d8:	f06f 0302 	mvn.w	r3, #2
 80151dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80151de:	697b      	ldr	r3, [r7, #20]
}
 80151e0:	4618      	mov	r0, r3
 80151e2:	3718      	adds	r7, #24
 80151e4:	46bd      	mov	sp, r7
 80151e6:	bd80      	pop	{r7, pc}

080151e8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80151e8:	b580      	push	{r7, lr}
 80151ea:	b086      	sub	sp, #24
 80151ec:	af00      	add	r7, sp, #0
 80151ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	f023 0301 	bic.w	r3, r3, #1
 80151f6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	f003 0301 	and.w	r3, r3, #1
 80151fe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8015200:	2300      	movs	r3, #0
 8015202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015204:	f3ef 8305 	mrs	r3, IPSR
 8015208:	60bb      	str	r3, [r7, #8]
  return(result);
 801520a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 801520c:	2b00      	cmp	r3, #0
 801520e:	d003      	beq.n	8015218 <osMutexRelease+0x30>
    stat = osErrorISR;
 8015210:	f06f 0305 	mvn.w	r3, #5
 8015214:	617b      	str	r3, [r7, #20]
 8015216:	e01f      	b.n	8015258 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d103      	bne.n	8015226 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 801521e:	f06f 0303 	mvn.w	r3, #3
 8015222:	617b      	str	r3, [r7, #20]
 8015224:	e018      	b.n	8015258 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d009      	beq.n	8015240 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801522c:	6938      	ldr	r0, [r7, #16]
 801522e:	f000 fcfb 	bl	8015c28 <xQueueGiveMutexRecursive>
 8015232:	4603      	mov	r3, r0
 8015234:	2b01      	cmp	r3, #1
 8015236:	d00f      	beq.n	8015258 <osMutexRelease+0x70>
        stat = osErrorResource;
 8015238:	f06f 0302 	mvn.w	r3, #2
 801523c:	617b      	str	r3, [r7, #20]
 801523e:	e00b      	b.n	8015258 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8015240:	2300      	movs	r3, #0
 8015242:	2200      	movs	r2, #0
 8015244:	2100      	movs	r1, #0
 8015246:	6938      	ldr	r0, [r7, #16]
 8015248:	f000 fdc2 	bl	8015dd0 <xQueueGenericSend>
 801524c:	4603      	mov	r3, r0
 801524e:	2b01      	cmp	r3, #1
 8015250:	d002      	beq.n	8015258 <osMutexRelease+0x70>
        stat = osErrorResource;
 8015252:	f06f 0302 	mvn.w	r3, #2
 8015256:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015258:	697b      	ldr	r3, [r7, #20]
}
 801525a:	4618      	mov	r0, r3
 801525c:	3718      	adds	r7, #24
 801525e:	46bd      	mov	sp, r7
 8015260:	bd80      	pop	{r7, pc}

08015262 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015262:	b580      	push	{r7, lr}
 8015264:	b08a      	sub	sp, #40	; 0x28
 8015266:	af02      	add	r7, sp, #8
 8015268:	60f8      	str	r0, [r7, #12]
 801526a:	60b9      	str	r1, [r7, #8]
 801526c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801526e:	2300      	movs	r3, #0
 8015270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015272:	f3ef 8305 	mrs	r3, IPSR
 8015276:	613b      	str	r3, [r7, #16]
  return(result);
 8015278:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801527a:	2b00      	cmp	r3, #0
 801527c:	d175      	bne.n	801536a <osSemaphoreNew+0x108>
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d072      	beq.n	801536a <osSemaphoreNew+0x108>
 8015284:	68ba      	ldr	r2, [r7, #8]
 8015286:	68fb      	ldr	r3, [r7, #12]
 8015288:	429a      	cmp	r2, r3
 801528a:	d86e      	bhi.n	801536a <osSemaphoreNew+0x108>
    mem = -1;
 801528c:	f04f 33ff 	mov.w	r3, #4294967295
 8015290:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d015      	beq.n	80152c4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	689b      	ldr	r3, [r3, #8]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d006      	beq.n	80152ae <osSemaphoreNew+0x4c>
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	68db      	ldr	r3, [r3, #12]
 80152a4:	2b4f      	cmp	r3, #79	; 0x4f
 80152a6:	d902      	bls.n	80152ae <osSemaphoreNew+0x4c>
        mem = 1;
 80152a8:	2301      	movs	r3, #1
 80152aa:	61bb      	str	r3, [r7, #24]
 80152ac:	e00c      	b.n	80152c8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	689b      	ldr	r3, [r3, #8]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d108      	bne.n	80152c8 <osSemaphoreNew+0x66>
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	68db      	ldr	r3, [r3, #12]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d104      	bne.n	80152c8 <osSemaphoreNew+0x66>
          mem = 0;
 80152be:	2300      	movs	r3, #0
 80152c0:	61bb      	str	r3, [r7, #24]
 80152c2:	e001      	b.n	80152c8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80152c4:	2300      	movs	r3, #0
 80152c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80152c8:	69bb      	ldr	r3, [r7, #24]
 80152ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152ce:	d04c      	beq.n	801536a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	2b01      	cmp	r3, #1
 80152d4:	d128      	bne.n	8015328 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80152d6:	69bb      	ldr	r3, [r7, #24]
 80152d8:	2b01      	cmp	r3, #1
 80152da:	d10a      	bne.n	80152f2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	689b      	ldr	r3, [r3, #8]
 80152e0:	2203      	movs	r2, #3
 80152e2:	9200      	str	r2, [sp, #0]
 80152e4:	2200      	movs	r2, #0
 80152e6:	2100      	movs	r1, #0
 80152e8:	2001      	movs	r0, #1
 80152ea:	f000 fb7b 	bl	80159e4 <xQueueGenericCreateStatic>
 80152ee:	61f8      	str	r0, [r7, #28]
 80152f0:	e005      	b.n	80152fe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80152f2:	2203      	movs	r2, #3
 80152f4:	2100      	movs	r1, #0
 80152f6:	2001      	movs	r0, #1
 80152f8:	f000 fbec 	bl	8015ad4 <xQueueGenericCreate>
 80152fc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80152fe:	69fb      	ldr	r3, [r7, #28]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d022      	beq.n	801534a <osSemaphoreNew+0xe8>
 8015304:	68bb      	ldr	r3, [r7, #8]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d01f      	beq.n	801534a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801530a:	2300      	movs	r3, #0
 801530c:	2200      	movs	r2, #0
 801530e:	2100      	movs	r1, #0
 8015310:	69f8      	ldr	r0, [r7, #28]
 8015312:	f000 fd5d 	bl	8015dd0 <xQueueGenericSend>
 8015316:	4603      	mov	r3, r0
 8015318:	2b01      	cmp	r3, #1
 801531a:	d016      	beq.n	801534a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801531c:	69f8      	ldr	r0, [r7, #28]
 801531e:	f001 fa25 	bl	801676c <vQueueDelete>
            hSemaphore = NULL;
 8015322:	2300      	movs	r3, #0
 8015324:	61fb      	str	r3, [r7, #28]
 8015326:	e010      	b.n	801534a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015328:	69bb      	ldr	r3, [r7, #24]
 801532a:	2b01      	cmp	r3, #1
 801532c:	d108      	bne.n	8015340 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	689b      	ldr	r3, [r3, #8]
 8015332:	461a      	mov	r2, r3
 8015334:	68b9      	ldr	r1, [r7, #8]
 8015336:	68f8      	ldr	r0, [r7, #12]
 8015338:	f000 fce0 	bl	8015cfc <xQueueCreateCountingSemaphoreStatic>
 801533c:	61f8      	str	r0, [r7, #28]
 801533e:	e004      	b.n	801534a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015340:	68b9      	ldr	r1, [r7, #8]
 8015342:	68f8      	ldr	r0, [r7, #12]
 8015344:	f000 fd11 	bl	8015d6a <xQueueCreateCountingSemaphore>
 8015348:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d00c      	beq.n	801536a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d003      	beq.n	801535e <osSemaphoreNew+0xfc>
          name = attr->name;
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	617b      	str	r3, [r7, #20]
 801535c:	e001      	b.n	8015362 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801535e:	2300      	movs	r3, #0
 8015360:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015362:	6979      	ldr	r1, [r7, #20]
 8015364:	69f8      	ldr	r0, [r7, #28]
 8015366:	f001 fb4d 	bl	8016a04 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801536a:	69fb      	ldr	r3, [r7, #28]
}
 801536c:	4618      	mov	r0, r3
 801536e:	3720      	adds	r7, #32
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}

08015374 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015374:	b580      	push	{r7, lr}
 8015376:	b086      	sub	sp, #24
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015382:	2300      	movs	r3, #0
 8015384:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015386:	693b      	ldr	r3, [r7, #16]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d103      	bne.n	8015394 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801538c:	f06f 0303 	mvn.w	r3, #3
 8015390:	617b      	str	r3, [r7, #20]
 8015392:	e039      	b.n	8015408 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015394:	f3ef 8305 	mrs	r3, IPSR
 8015398:	60fb      	str	r3, [r7, #12]
  return(result);
 801539a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801539c:	2b00      	cmp	r3, #0
 801539e:	d022      	beq.n	80153e6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	2b00      	cmp	r3, #0
 80153a4:	d003      	beq.n	80153ae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80153a6:	f06f 0303 	mvn.w	r3, #3
 80153aa:	617b      	str	r3, [r7, #20]
 80153ac:	e02c      	b.n	8015408 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80153ae:	2300      	movs	r3, #0
 80153b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80153b2:	f107 0308 	add.w	r3, r7, #8
 80153b6:	461a      	mov	r2, r3
 80153b8:	2100      	movs	r1, #0
 80153ba:	6938      	ldr	r0, [r7, #16]
 80153bc:	f001 f91a 	bl	80165f4 <xQueueReceiveFromISR>
 80153c0:	4603      	mov	r3, r0
 80153c2:	2b01      	cmp	r3, #1
 80153c4:	d003      	beq.n	80153ce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80153c6:	f06f 0302 	mvn.w	r3, #2
 80153ca:	617b      	str	r3, [r7, #20]
 80153cc:	e01c      	b.n	8015408 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80153ce:	68bb      	ldr	r3, [r7, #8]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d019      	beq.n	8015408 <osSemaphoreAcquire+0x94>
 80153d4:	4b0f      	ldr	r3, [pc, #60]	; (8015414 <osSemaphoreAcquire+0xa0>)
 80153d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153da:	601a      	str	r2, [r3, #0]
 80153dc:	f3bf 8f4f 	dsb	sy
 80153e0:	f3bf 8f6f 	isb	sy
 80153e4:	e010      	b.n	8015408 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80153e6:	6839      	ldr	r1, [r7, #0]
 80153e8:	6938      	ldr	r0, [r7, #16]
 80153ea:	f000 fff7 	bl	80163dc <xQueueSemaphoreTake>
 80153ee:	4603      	mov	r3, r0
 80153f0:	2b01      	cmp	r3, #1
 80153f2:	d009      	beq.n	8015408 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80153f4:	683b      	ldr	r3, [r7, #0]
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d003      	beq.n	8015402 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80153fa:	f06f 0301 	mvn.w	r3, #1
 80153fe:	617b      	str	r3, [r7, #20]
 8015400:	e002      	b.n	8015408 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8015402:	f06f 0302 	mvn.w	r3, #2
 8015406:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8015408:	697b      	ldr	r3, [r7, #20]
}
 801540a:	4618      	mov	r0, r3
 801540c:	3718      	adds	r7, #24
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	e000ed04 	.word	0xe000ed04

08015418 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015418:	b580      	push	{r7, lr}
 801541a:	b086      	sub	sp, #24
 801541c:	af00      	add	r7, sp, #0
 801541e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015424:	2300      	movs	r3, #0
 8015426:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015428:	693b      	ldr	r3, [r7, #16]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d103      	bne.n	8015436 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801542e:	f06f 0303 	mvn.w	r3, #3
 8015432:	617b      	str	r3, [r7, #20]
 8015434:	e02c      	b.n	8015490 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015436:	f3ef 8305 	mrs	r3, IPSR
 801543a:	60fb      	str	r3, [r7, #12]
  return(result);
 801543c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801543e:	2b00      	cmp	r3, #0
 8015440:	d01a      	beq.n	8015478 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015442:	2300      	movs	r3, #0
 8015444:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015446:	f107 0308 	add.w	r3, r7, #8
 801544a:	4619      	mov	r1, r3
 801544c:	6938      	ldr	r0, [r7, #16]
 801544e:	f000 fe58 	bl	8016102 <xQueueGiveFromISR>
 8015452:	4603      	mov	r3, r0
 8015454:	2b01      	cmp	r3, #1
 8015456:	d003      	beq.n	8015460 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015458:	f06f 0302 	mvn.w	r3, #2
 801545c:	617b      	str	r3, [r7, #20]
 801545e:	e017      	b.n	8015490 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d014      	beq.n	8015490 <osSemaphoreRelease+0x78>
 8015466:	4b0d      	ldr	r3, [pc, #52]	; (801549c <osSemaphoreRelease+0x84>)
 8015468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801546c:	601a      	str	r2, [r3, #0]
 801546e:	f3bf 8f4f 	dsb	sy
 8015472:	f3bf 8f6f 	isb	sy
 8015476:	e00b      	b.n	8015490 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015478:	2300      	movs	r3, #0
 801547a:	2200      	movs	r2, #0
 801547c:	2100      	movs	r1, #0
 801547e:	6938      	ldr	r0, [r7, #16]
 8015480:	f000 fca6 	bl	8015dd0 <xQueueGenericSend>
 8015484:	4603      	mov	r3, r0
 8015486:	2b01      	cmp	r3, #1
 8015488:	d002      	beq.n	8015490 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801548a:	f06f 0302 	mvn.w	r3, #2
 801548e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015490:	697b      	ldr	r3, [r7, #20]
}
 8015492:	4618      	mov	r0, r3
 8015494:	3718      	adds	r7, #24
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}
 801549a:	bf00      	nop
 801549c:	e000ed04 	.word	0xe000ed04

080154a0 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 80154a0:	b580      	push	{r7, lr}
 80154a2:	b086      	sub	sp, #24
 80154a4:	af00      	add	r7, sp, #0
 80154a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 80154ac:	693b      	ldr	r3, [r7, #16]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d102      	bne.n	80154b8 <osSemaphoreGetCount+0x18>
    count = 0U;
 80154b2:	2300      	movs	r3, #0
 80154b4:	617b      	str	r3, [r7, #20]
 80154b6:	e00e      	b.n	80154d6 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80154b8:	f3ef 8305 	mrs	r3, IPSR
 80154bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80154be:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d004      	beq.n	80154ce <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 80154c4:	6938      	ldr	r0, [r7, #16]
 80154c6:	f001 f933 	bl	8016730 <uxQueueMessagesWaitingFromISR>
 80154ca:	6178      	str	r0, [r7, #20]
 80154cc:	e003      	b.n	80154d6 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 80154ce:	6938      	ldr	r0, [r7, #16]
 80154d0:	f001 f910 	bl	80166f4 <uxQueueMessagesWaiting>
 80154d4:	6178      	str	r0, [r7, #20]
  }

  return (count);
 80154d6:	697b      	ldr	r3, [r7, #20]
}
 80154d8:	4618      	mov	r0, r3
 80154da:	3718      	adds	r7, #24
 80154dc:	46bd      	mov	sp, r7
 80154de:	bd80      	pop	{r7, pc}

080154e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b08a      	sub	sp, #40	; 0x28
 80154e4:	af02      	add	r7, sp, #8
 80154e6:	60f8      	str	r0, [r7, #12]
 80154e8:	60b9      	str	r1, [r7, #8]
 80154ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80154ec:	2300      	movs	r3, #0
 80154ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80154f0:	f3ef 8305 	mrs	r3, IPSR
 80154f4:	613b      	str	r3, [r7, #16]
  return(result);
 80154f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d15f      	bne.n	80155bc <osMessageQueueNew+0xdc>
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d05c      	beq.n	80155bc <osMessageQueueNew+0xdc>
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d059      	beq.n	80155bc <osMessageQueueNew+0xdc>
    mem = -1;
 8015508:	f04f 33ff 	mov.w	r3, #4294967295
 801550c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d029      	beq.n	8015568 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	689b      	ldr	r3, [r3, #8]
 8015518:	2b00      	cmp	r3, #0
 801551a:	d012      	beq.n	8015542 <osMessageQueueNew+0x62>
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	2b4f      	cmp	r3, #79	; 0x4f
 8015522:	d90e      	bls.n	8015542 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8015528:	2b00      	cmp	r3, #0
 801552a:	d00a      	beq.n	8015542 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	695a      	ldr	r2, [r3, #20]
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	68b9      	ldr	r1, [r7, #8]
 8015534:	fb01 f303 	mul.w	r3, r1, r3
 8015538:	429a      	cmp	r2, r3
 801553a:	d302      	bcc.n	8015542 <osMessageQueueNew+0x62>
        mem = 1;
 801553c:	2301      	movs	r3, #1
 801553e:	61bb      	str	r3, [r7, #24]
 8015540:	e014      	b.n	801556c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	689b      	ldr	r3, [r3, #8]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d110      	bne.n	801556c <osMessageQueueNew+0x8c>
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	68db      	ldr	r3, [r3, #12]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d10c      	bne.n	801556c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8015556:	2b00      	cmp	r3, #0
 8015558:	d108      	bne.n	801556c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	695b      	ldr	r3, [r3, #20]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d104      	bne.n	801556c <osMessageQueueNew+0x8c>
          mem = 0;
 8015562:	2300      	movs	r3, #0
 8015564:	61bb      	str	r3, [r7, #24]
 8015566:	e001      	b.n	801556c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8015568:	2300      	movs	r3, #0
 801556a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801556c:	69bb      	ldr	r3, [r7, #24]
 801556e:	2b01      	cmp	r3, #1
 8015570:	d10b      	bne.n	801558a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	691a      	ldr	r2, [r3, #16]
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	689b      	ldr	r3, [r3, #8]
 801557a:	2100      	movs	r1, #0
 801557c:	9100      	str	r1, [sp, #0]
 801557e:	68b9      	ldr	r1, [r7, #8]
 8015580:	68f8      	ldr	r0, [r7, #12]
 8015582:	f000 fa2f 	bl	80159e4 <xQueueGenericCreateStatic>
 8015586:	61f8      	str	r0, [r7, #28]
 8015588:	e008      	b.n	801559c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d105      	bne.n	801559c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8015590:	2200      	movs	r2, #0
 8015592:	68b9      	ldr	r1, [r7, #8]
 8015594:	68f8      	ldr	r0, [r7, #12]
 8015596:	f000 fa9d 	bl	8015ad4 <xQueueGenericCreate>
 801559a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801559c:	69fb      	ldr	r3, [r7, #28]
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d00c      	beq.n	80155bc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d003      	beq.n	80155b0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	617b      	str	r3, [r7, #20]
 80155ae:	e001      	b.n	80155b4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80155b0:	2300      	movs	r3, #0
 80155b2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80155b4:	6979      	ldr	r1, [r7, #20]
 80155b6:	69f8      	ldr	r0, [r7, #28]
 80155b8:	f001 fa24 	bl	8016a04 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80155bc:	69fb      	ldr	r3, [r7, #28]
}
 80155be:	4618      	mov	r0, r3
 80155c0:	3720      	adds	r7, #32
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
	...

080155c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b088      	sub	sp, #32
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	60f8      	str	r0, [r7, #12]
 80155d0:	60b9      	str	r1, [r7, #8]
 80155d2:	603b      	str	r3, [r7, #0]
 80155d4:	4613      	mov	r3, r2
 80155d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80155dc:	2300      	movs	r3, #0
 80155de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80155e0:	f3ef 8305 	mrs	r3, IPSR
 80155e4:	617b      	str	r3, [r7, #20]
  return(result);
 80155e6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d028      	beq.n	801563e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d005      	beq.n	80155fe <osMessageQueuePut+0x36>
 80155f2:	68bb      	ldr	r3, [r7, #8]
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d002      	beq.n	80155fe <osMessageQueuePut+0x36>
 80155f8:	683b      	ldr	r3, [r7, #0]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d003      	beq.n	8015606 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80155fe:	f06f 0303 	mvn.w	r3, #3
 8015602:	61fb      	str	r3, [r7, #28]
 8015604:	e038      	b.n	8015678 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8015606:	2300      	movs	r3, #0
 8015608:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801560a:	f107 0210 	add.w	r2, r7, #16
 801560e:	2300      	movs	r3, #0
 8015610:	68b9      	ldr	r1, [r7, #8]
 8015612:	69b8      	ldr	r0, [r7, #24]
 8015614:	f000 fcda 	bl	8015fcc <xQueueGenericSendFromISR>
 8015618:	4603      	mov	r3, r0
 801561a:	2b01      	cmp	r3, #1
 801561c:	d003      	beq.n	8015626 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801561e:	f06f 0302 	mvn.w	r3, #2
 8015622:	61fb      	str	r3, [r7, #28]
 8015624:	e028      	b.n	8015678 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8015626:	693b      	ldr	r3, [r7, #16]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d025      	beq.n	8015678 <osMessageQueuePut+0xb0>
 801562c:	4b15      	ldr	r3, [pc, #84]	; (8015684 <osMessageQueuePut+0xbc>)
 801562e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015632:	601a      	str	r2, [r3, #0]
 8015634:	f3bf 8f4f 	dsb	sy
 8015638:	f3bf 8f6f 	isb	sy
 801563c:	e01c      	b.n	8015678 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801563e:	69bb      	ldr	r3, [r7, #24]
 8015640:	2b00      	cmp	r3, #0
 8015642:	d002      	beq.n	801564a <osMessageQueuePut+0x82>
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d103      	bne.n	8015652 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801564a:	f06f 0303 	mvn.w	r3, #3
 801564e:	61fb      	str	r3, [r7, #28]
 8015650:	e012      	b.n	8015678 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015652:	2300      	movs	r3, #0
 8015654:	683a      	ldr	r2, [r7, #0]
 8015656:	68b9      	ldr	r1, [r7, #8]
 8015658:	69b8      	ldr	r0, [r7, #24]
 801565a:	f000 fbb9 	bl	8015dd0 <xQueueGenericSend>
 801565e:	4603      	mov	r3, r0
 8015660:	2b01      	cmp	r3, #1
 8015662:	d009      	beq.n	8015678 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8015664:	683b      	ldr	r3, [r7, #0]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d003      	beq.n	8015672 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801566a:	f06f 0301 	mvn.w	r3, #1
 801566e:	61fb      	str	r3, [r7, #28]
 8015670:	e002      	b.n	8015678 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8015672:	f06f 0302 	mvn.w	r3, #2
 8015676:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015678:	69fb      	ldr	r3, [r7, #28]
}
 801567a:	4618      	mov	r0, r3
 801567c:	3720      	adds	r7, #32
 801567e:	46bd      	mov	sp, r7
 8015680:	bd80      	pop	{r7, pc}
 8015682:	bf00      	nop
 8015684:	e000ed04 	.word	0xe000ed04

08015688 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8015688:	b580      	push	{r7, lr}
 801568a:	b088      	sub	sp, #32
 801568c:	af00      	add	r7, sp, #0
 801568e:	60f8      	str	r0, [r7, #12]
 8015690:	60b9      	str	r1, [r7, #8]
 8015692:	607a      	str	r2, [r7, #4]
 8015694:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8015696:	68fb      	ldr	r3, [r7, #12]
 8015698:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801569a:	2300      	movs	r3, #0
 801569c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801569e:	f3ef 8305 	mrs	r3, IPSR
 80156a2:	617b      	str	r3, [r7, #20]
  return(result);
 80156a4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d028      	beq.n	80156fc <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80156aa:	69bb      	ldr	r3, [r7, #24]
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	d005      	beq.n	80156bc <osMessageQueueGet+0x34>
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d002      	beq.n	80156bc <osMessageQueueGet+0x34>
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d003      	beq.n	80156c4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80156bc:	f06f 0303 	mvn.w	r3, #3
 80156c0:	61fb      	str	r3, [r7, #28]
 80156c2:	e037      	b.n	8015734 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80156c4:	2300      	movs	r3, #0
 80156c6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80156c8:	f107 0310 	add.w	r3, r7, #16
 80156cc:	461a      	mov	r2, r3
 80156ce:	68b9      	ldr	r1, [r7, #8]
 80156d0:	69b8      	ldr	r0, [r7, #24]
 80156d2:	f000 ff8f 	bl	80165f4 <xQueueReceiveFromISR>
 80156d6:	4603      	mov	r3, r0
 80156d8:	2b01      	cmp	r3, #1
 80156da:	d003      	beq.n	80156e4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80156dc:	f06f 0302 	mvn.w	r3, #2
 80156e0:	61fb      	str	r3, [r7, #28]
 80156e2:	e027      	b.n	8015734 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80156e4:	693b      	ldr	r3, [r7, #16]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d024      	beq.n	8015734 <osMessageQueueGet+0xac>
 80156ea:	4b15      	ldr	r3, [pc, #84]	; (8015740 <osMessageQueueGet+0xb8>)
 80156ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156f0:	601a      	str	r2, [r3, #0]
 80156f2:	f3bf 8f4f 	dsb	sy
 80156f6:	f3bf 8f6f 	isb	sy
 80156fa:	e01b      	b.n	8015734 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80156fc:	69bb      	ldr	r3, [r7, #24]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d002      	beq.n	8015708 <osMessageQueueGet+0x80>
 8015702:	68bb      	ldr	r3, [r7, #8]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d103      	bne.n	8015710 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8015708:	f06f 0303 	mvn.w	r3, #3
 801570c:	61fb      	str	r3, [r7, #28]
 801570e:	e011      	b.n	8015734 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8015710:	683a      	ldr	r2, [r7, #0]
 8015712:	68b9      	ldr	r1, [r7, #8]
 8015714:	69b8      	ldr	r0, [r7, #24]
 8015716:	f000 fd81 	bl	801621c <xQueueReceive>
 801571a:	4603      	mov	r3, r0
 801571c:	2b01      	cmp	r3, #1
 801571e:	d009      	beq.n	8015734 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d003      	beq.n	801572e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8015726:	f06f 0301 	mvn.w	r3, #1
 801572a:	61fb      	str	r3, [r7, #28]
 801572c:	e002      	b.n	8015734 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801572e:	f06f 0302 	mvn.w	r3, #2
 8015732:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015734:	69fb      	ldr	r3, [r7, #28]
}
 8015736:	4618      	mov	r0, r3
 8015738:	3720      	adds	r7, #32
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}
 801573e:	bf00      	nop
 8015740:	e000ed04 	.word	0xe000ed04

08015744 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015744:	b480      	push	{r7}
 8015746:	b085      	sub	sp, #20
 8015748:	af00      	add	r7, sp, #0
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	60b9      	str	r1, [r7, #8]
 801574e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	4a07      	ldr	r2, [pc, #28]	; (8015770 <vApplicationGetIdleTaskMemory+0x2c>)
 8015754:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015756:	68bb      	ldr	r3, [r7, #8]
 8015758:	4a06      	ldr	r2, [pc, #24]	; (8015774 <vApplicationGetIdleTaskMemory+0x30>)
 801575a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	2280      	movs	r2, #128	; 0x80
 8015760:	601a      	str	r2, [r3, #0]
}
 8015762:	bf00      	nop
 8015764:	3714      	adds	r7, #20
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr
 801576e:	bf00      	nop
 8015770:	200016c8 	.word	0x200016c8
 8015774:	20001788 	.word	0x20001788

08015778 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015778:	b480      	push	{r7}
 801577a:	b085      	sub	sp, #20
 801577c:	af00      	add	r7, sp, #0
 801577e:	60f8      	str	r0, [r7, #12]
 8015780:	60b9      	str	r1, [r7, #8]
 8015782:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	4a07      	ldr	r2, [pc, #28]	; (80157a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8015788:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	4a06      	ldr	r2, [pc, #24]	; (80157a8 <vApplicationGetTimerTaskMemory+0x30>)
 801578e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015796:	601a      	str	r2, [r3, #0]
}
 8015798:	bf00      	nop
 801579a:	3714      	adds	r7, #20
 801579c:	46bd      	mov	sp, r7
 801579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a2:	4770      	bx	lr
 80157a4:	20001988 	.word	0x20001988
 80157a8:	20001a48 	.word	0x20001a48

080157ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80157ac:	b480      	push	{r7}
 80157ae:	b083      	sub	sp, #12
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f103 0208 	add.w	r2, r3, #8
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	f04f 32ff 	mov.w	r2, #4294967295
 80157c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	f103 0208 	add.w	r2, r3, #8
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f103 0208 	add.w	r2, r3, #8
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	2200      	movs	r2, #0
 80157de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80157e0:	bf00      	nop
 80157e2:	370c      	adds	r7, #12
 80157e4:	46bd      	mov	sp, r7
 80157e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ea:	4770      	bx	lr

080157ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80157ec:	b480      	push	{r7}
 80157ee:	b083      	sub	sp, #12
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	2200      	movs	r2, #0
 80157f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80157fa:	bf00      	nop
 80157fc:	370c      	adds	r7, #12
 80157fe:	46bd      	mov	sp, r7
 8015800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015804:	4770      	bx	lr

08015806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015806:	b480      	push	{r7}
 8015808:	b085      	sub	sp, #20
 801580a:	af00      	add	r7, sp, #0
 801580c:	6078      	str	r0, [r7, #4]
 801580e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	685b      	ldr	r3, [r3, #4]
 8015814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	68fa      	ldr	r2, [r7, #12]
 801581a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	689a      	ldr	r2, [r3, #8]
 8015820:	683b      	ldr	r3, [r7, #0]
 8015822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	689b      	ldr	r3, [r3, #8]
 8015828:	683a      	ldr	r2, [r7, #0]
 801582a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	683a      	ldr	r2, [r7, #0]
 8015830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015832:	683b      	ldr	r3, [r7, #0]
 8015834:	687a      	ldr	r2, [r7, #4]
 8015836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	1c5a      	adds	r2, r3, #1
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	601a      	str	r2, [r3, #0]
}
 8015842:	bf00      	nop
 8015844:	3714      	adds	r7, #20
 8015846:	46bd      	mov	sp, r7
 8015848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584c:	4770      	bx	lr

0801584e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801584e:	b480      	push	{r7}
 8015850:	b085      	sub	sp, #20
 8015852:	af00      	add	r7, sp, #0
 8015854:	6078      	str	r0, [r7, #4]
 8015856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015858:	683b      	ldr	r3, [r7, #0]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801585e:	68bb      	ldr	r3, [r7, #8]
 8015860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015864:	d103      	bne.n	801586e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	691b      	ldr	r3, [r3, #16]
 801586a:	60fb      	str	r3, [r7, #12]
 801586c:	e00c      	b.n	8015888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	3308      	adds	r3, #8
 8015872:	60fb      	str	r3, [r7, #12]
 8015874:	e002      	b.n	801587c <vListInsert+0x2e>
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	60fb      	str	r3, [r7, #12]
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	685b      	ldr	r3, [r3, #4]
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	68ba      	ldr	r2, [r7, #8]
 8015884:	429a      	cmp	r2, r3
 8015886:	d2f6      	bcs.n	8015876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	685a      	ldr	r2, [r3, #4]
 801588c:	683b      	ldr	r3, [r7, #0]
 801588e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015890:	683b      	ldr	r3, [r7, #0]
 8015892:	685b      	ldr	r3, [r3, #4]
 8015894:	683a      	ldr	r2, [r7, #0]
 8015896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015898:	683b      	ldr	r3, [r7, #0]
 801589a:	68fa      	ldr	r2, [r7, #12]
 801589c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	683a      	ldr	r2, [r7, #0]
 80158a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80158a4:	683b      	ldr	r3, [r7, #0]
 80158a6:	687a      	ldr	r2, [r7, #4]
 80158a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	1c5a      	adds	r2, r3, #1
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	601a      	str	r2, [r3, #0]
}
 80158b4:	bf00      	nop
 80158b6:	3714      	adds	r7, #20
 80158b8:	46bd      	mov	sp, r7
 80158ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158be:	4770      	bx	lr

080158c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80158c0:	b480      	push	{r7}
 80158c2:	b085      	sub	sp, #20
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	691b      	ldr	r3, [r3, #16]
 80158cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	685b      	ldr	r3, [r3, #4]
 80158d2:	687a      	ldr	r2, [r7, #4]
 80158d4:	6892      	ldr	r2, [r2, #8]
 80158d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	689b      	ldr	r3, [r3, #8]
 80158dc:	687a      	ldr	r2, [r7, #4]
 80158de:	6852      	ldr	r2, [r2, #4]
 80158e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	687a      	ldr	r2, [r7, #4]
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d103      	bne.n	80158f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	689a      	ldr	r2, [r3, #8]
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	2200      	movs	r2, #0
 80158f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80158fa:	68fb      	ldr	r3, [r7, #12]
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	1e5a      	subs	r2, r3, #1
 8015900:	68fb      	ldr	r3, [r7, #12]
 8015902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	681b      	ldr	r3, [r3, #0]
}
 8015908:	4618      	mov	r0, r3
 801590a:	3714      	adds	r7, #20
 801590c:	46bd      	mov	sp, r7
 801590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015912:	4770      	bx	lr

08015914 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b084      	sub	sp, #16
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	2b00      	cmp	r3, #0
 8015926:	d10a      	bne.n	801593e <xQueueGenericReset+0x2a>
	__asm volatile
 8015928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801592c:	f383 8811 	msr	BASEPRI, r3
 8015930:	f3bf 8f6f 	isb	sy
 8015934:	f3bf 8f4f 	dsb	sy
 8015938:	60bb      	str	r3, [r7, #8]
}
 801593a:	bf00      	nop
 801593c:	e7fe      	b.n	801593c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801593e:	f003 fab9 	bl	8018eb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015942:	68fb      	ldr	r3, [r7, #12]
 8015944:	681a      	ldr	r2, [r3, #0]
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801594a:	68f9      	ldr	r1, [r7, #12]
 801594c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801594e:	fb01 f303 	mul.w	r3, r1, r3
 8015952:	441a      	add	r2, r3
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	2200      	movs	r2, #0
 801595c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	681a      	ldr	r2, [r3, #0]
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015966:	68fb      	ldr	r3, [r7, #12]
 8015968:	681a      	ldr	r2, [r3, #0]
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801596e:	3b01      	subs	r3, #1
 8015970:	68f9      	ldr	r1, [r7, #12]
 8015972:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015974:	fb01 f303 	mul.w	r3, r1, r3
 8015978:	441a      	add	r2, r3
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	22ff      	movs	r2, #255	; 0xff
 8015982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	22ff      	movs	r2, #255	; 0xff
 801598a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801598e:	683b      	ldr	r3, [r7, #0]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d114      	bne.n	80159be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	691b      	ldr	r3, [r3, #16]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d01a      	beq.n	80159d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	3310      	adds	r3, #16
 80159a0:	4618      	mov	r0, r3
 80159a2:	f002 f8f5 	bl	8017b90 <xTaskRemoveFromEventList>
 80159a6:	4603      	mov	r3, r0
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d012      	beq.n	80159d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80159ac:	4b0c      	ldr	r3, [pc, #48]	; (80159e0 <xQueueGenericReset+0xcc>)
 80159ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159b2:	601a      	str	r2, [r3, #0]
 80159b4:	f3bf 8f4f 	dsb	sy
 80159b8:	f3bf 8f6f 	isb	sy
 80159bc:	e009      	b.n	80159d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	3310      	adds	r3, #16
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7ff fef2 	bl	80157ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	3324      	adds	r3, #36	; 0x24
 80159cc:	4618      	mov	r0, r3
 80159ce:	f7ff feed 	bl	80157ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80159d2:	f003 fa9f 	bl	8018f14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80159d6:	2301      	movs	r3, #1
}
 80159d8:	4618      	mov	r0, r3
 80159da:	3710      	adds	r7, #16
 80159dc:	46bd      	mov	sp, r7
 80159de:	bd80      	pop	{r7, pc}
 80159e0:	e000ed04 	.word	0xe000ed04

080159e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80159e4:	b580      	push	{r7, lr}
 80159e6:	b08e      	sub	sp, #56	; 0x38
 80159e8:	af02      	add	r7, sp, #8
 80159ea:	60f8      	str	r0, [r7, #12]
 80159ec:	60b9      	str	r1, [r7, #8]
 80159ee:	607a      	str	r2, [r7, #4]
 80159f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d10a      	bne.n	8015a0e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80159f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159fc:	f383 8811 	msr	BASEPRI, r3
 8015a00:	f3bf 8f6f 	isb	sy
 8015a04:	f3bf 8f4f 	dsb	sy
 8015a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015a0a:	bf00      	nop
 8015a0c:	e7fe      	b.n	8015a0c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015a0e:	683b      	ldr	r3, [r7, #0]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d10a      	bne.n	8015a2a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a18:	f383 8811 	msr	BASEPRI, r3
 8015a1c:	f3bf 8f6f 	isb	sy
 8015a20:	f3bf 8f4f 	dsb	sy
 8015a24:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015a26:	bf00      	nop
 8015a28:	e7fe      	b.n	8015a28 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d002      	beq.n	8015a36 <xQueueGenericCreateStatic+0x52>
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d001      	beq.n	8015a3a <xQueueGenericCreateStatic+0x56>
 8015a36:	2301      	movs	r3, #1
 8015a38:	e000      	b.n	8015a3c <xQueueGenericCreateStatic+0x58>
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d10a      	bne.n	8015a56 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a44:	f383 8811 	msr	BASEPRI, r3
 8015a48:	f3bf 8f6f 	isb	sy
 8015a4c:	f3bf 8f4f 	dsb	sy
 8015a50:	623b      	str	r3, [r7, #32]
}
 8015a52:	bf00      	nop
 8015a54:	e7fe      	b.n	8015a54 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d102      	bne.n	8015a62 <xQueueGenericCreateStatic+0x7e>
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	d101      	bne.n	8015a66 <xQueueGenericCreateStatic+0x82>
 8015a62:	2301      	movs	r3, #1
 8015a64:	e000      	b.n	8015a68 <xQueueGenericCreateStatic+0x84>
 8015a66:	2300      	movs	r3, #0
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d10a      	bne.n	8015a82 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a70:	f383 8811 	msr	BASEPRI, r3
 8015a74:	f3bf 8f6f 	isb	sy
 8015a78:	f3bf 8f4f 	dsb	sy
 8015a7c:	61fb      	str	r3, [r7, #28]
}
 8015a7e:	bf00      	nop
 8015a80:	e7fe      	b.n	8015a80 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015a82:	2350      	movs	r3, #80	; 0x50
 8015a84:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	2b50      	cmp	r3, #80	; 0x50
 8015a8a:	d00a      	beq.n	8015aa2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a90:	f383 8811 	msr	BASEPRI, r3
 8015a94:	f3bf 8f6f 	isb	sy
 8015a98:	f3bf 8f4f 	dsb	sy
 8015a9c:	61bb      	str	r3, [r7, #24]
}
 8015a9e:	bf00      	nop
 8015aa0:	e7fe      	b.n	8015aa0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015aa2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d00d      	beq.n	8015aca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ab0:	2201      	movs	r2, #1
 8015ab2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015ab6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015abc:	9300      	str	r3, [sp, #0]
 8015abe:	4613      	mov	r3, r2
 8015ac0:	687a      	ldr	r2, [r7, #4]
 8015ac2:	68b9      	ldr	r1, [r7, #8]
 8015ac4:	68f8      	ldr	r0, [r7, #12]
 8015ac6:	f000 f83f 	bl	8015b48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015acc:	4618      	mov	r0, r3
 8015ace:	3730      	adds	r7, #48	; 0x30
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}

08015ad4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b08a      	sub	sp, #40	; 0x28
 8015ad8:	af02      	add	r7, sp, #8
 8015ada:	60f8      	str	r0, [r7, #12]
 8015adc:	60b9      	str	r1, [r7, #8]
 8015ade:	4613      	mov	r3, r2
 8015ae0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d10a      	bne.n	8015afe <xQueueGenericCreate+0x2a>
	__asm volatile
 8015ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015aec:	f383 8811 	msr	BASEPRI, r3
 8015af0:	f3bf 8f6f 	isb	sy
 8015af4:	f3bf 8f4f 	dsb	sy
 8015af8:	613b      	str	r3, [r7, #16]
}
 8015afa:	bf00      	nop
 8015afc:	e7fe      	b.n	8015afc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	68ba      	ldr	r2, [r7, #8]
 8015b02:	fb02 f303 	mul.w	r3, r2, r3
 8015b06:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015b08:	69fb      	ldr	r3, [r7, #28]
 8015b0a:	3350      	adds	r3, #80	; 0x50
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f003 faf3 	bl	80190f8 <pvPortMalloc>
 8015b12:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015b14:	69bb      	ldr	r3, [r7, #24]
 8015b16:	2b00      	cmp	r3, #0
 8015b18:	d011      	beq.n	8015b3e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015b1a:	69bb      	ldr	r3, [r7, #24]
 8015b1c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	3350      	adds	r3, #80	; 0x50
 8015b22:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015b24:	69bb      	ldr	r3, [r7, #24]
 8015b26:	2200      	movs	r2, #0
 8015b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015b2c:	79fa      	ldrb	r2, [r7, #7]
 8015b2e:	69bb      	ldr	r3, [r7, #24]
 8015b30:	9300      	str	r3, [sp, #0]
 8015b32:	4613      	mov	r3, r2
 8015b34:	697a      	ldr	r2, [r7, #20]
 8015b36:	68b9      	ldr	r1, [r7, #8]
 8015b38:	68f8      	ldr	r0, [r7, #12]
 8015b3a:	f000 f805 	bl	8015b48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015b3e:	69bb      	ldr	r3, [r7, #24]
	}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3720      	adds	r7, #32
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}

08015b48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b084      	sub	sp, #16
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	60f8      	str	r0, [r7, #12]
 8015b50:	60b9      	str	r1, [r7, #8]
 8015b52:	607a      	str	r2, [r7, #4]
 8015b54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015b56:	68bb      	ldr	r3, [r7, #8]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d103      	bne.n	8015b64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015b5c:	69bb      	ldr	r3, [r7, #24]
 8015b5e:	69ba      	ldr	r2, [r7, #24]
 8015b60:	601a      	str	r2, [r3, #0]
 8015b62:	e002      	b.n	8015b6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015b64:	69bb      	ldr	r3, [r7, #24]
 8015b66:	687a      	ldr	r2, [r7, #4]
 8015b68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015b6a:	69bb      	ldr	r3, [r7, #24]
 8015b6c:	68fa      	ldr	r2, [r7, #12]
 8015b6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015b70:	69bb      	ldr	r3, [r7, #24]
 8015b72:	68ba      	ldr	r2, [r7, #8]
 8015b74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015b76:	2101      	movs	r1, #1
 8015b78:	69b8      	ldr	r0, [r7, #24]
 8015b7a:	f7ff fecb 	bl	8015914 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015b7e:	69bb      	ldr	r3, [r7, #24]
 8015b80:	78fa      	ldrb	r2, [r7, #3]
 8015b82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015b86:	bf00      	nop
 8015b88:	3710      	adds	r7, #16
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}

08015b8e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8015b8e:	b580      	push	{r7, lr}
 8015b90:	b082      	sub	sp, #8
 8015b92:	af00      	add	r7, sp, #0
 8015b94:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d00e      	beq.n	8015bba <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	2200      	movs	r2, #0
 8015ba0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	2200      	movs	r2, #0
 8015bac:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015bae:	2300      	movs	r3, #0
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	2100      	movs	r1, #0
 8015bb4:	6878      	ldr	r0, [r7, #4]
 8015bb6:	f000 f90b 	bl	8015dd0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8015bba:	bf00      	nop
 8015bbc:	3708      	adds	r7, #8
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}

08015bc2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8015bc2:	b580      	push	{r7, lr}
 8015bc4:	b086      	sub	sp, #24
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	4603      	mov	r3, r0
 8015bca:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015bcc:	2301      	movs	r3, #1
 8015bce:	617b      	str	r3, [r7, #20]
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8015bd4:	79fb      	ldrb	r3, [r7, #7]
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	6939      	ldr	r1, [r7, #16]
 8015bda:	6978      	ldr	r0, [r7, #20]
 8015bdc:	f7ff ff7a 	bl	8015ad4 <xQueueGenericCreate>
 8015be0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015be2:	68f8      	ldr	r0, [r7, #12]
 8015be4:	f7ff ffd3 	bl	8015b8e <prvInitialiseMutex>

		return xNewQueue;
 8015be8:	68fb      	ldr	r3, [r7, #12]
	}
 8015bea:	4618      	mov	r0, r3
 8015bec:	3718      	adds	r7, #24
 8015bee:	46bd      	mov	sp, r7
 8015bf0:	bd80      	pop	{r7, pc}

08015bf2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8015bf2:	b580      	push	{r7, lr}
 8015bf4:	b088      	sub	sp, #32
 8015bf6:	af02      	add	r7, sp, #8
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	6039      	str	r1, [r7, #0]
 8015bfc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8015bfe:	2301      	movs	r3, #1
 8015c00:	617b      	str	r3, [r7, #20]
 8015c02:	2300      	movs	r3, #0
 8015c04:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015c06:	79fb      	ldrb	r3, [r7, #7]
 8015c08:	9300      	str	r3, [sp, #0]
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	6939      	ldr	r1, [r7, #16]
 8015c10:	6978      	ldr	r0, [r7, #20]
 8015c12:	f7ff fee7 	bl	80159e4 <xQueueGenericCreateStatic>
 8015c16:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8015c18:	68f8      	ldr	r0, [r7, #12]
 8015c1a:	f7ff ffb8 	bl	8015b8e <prvInitialiseMutex>

		return xNewQueue;
 8015c1e:	68fb      	ldr	r3, [r7, #12]
	}
 8015c20:	4618      	mov	r0, r3
 8015c22:	3718      	adds	r7, #24
 8015c24:	46bd      	mov	sp, r7
 8015c26:	bd80      	pop	{r7, pc}

08015c28 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8015c28:	b590      	push	{r4, r7, lr}
 8015c2a:	b087      	sub	sp, #28
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d10a      	bne.n	8015c50 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8015c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c3e:	f383 8811 	msr	BASEPRI, r3
 8015c42:	f3bf 8f6f 	isb	sy
 8015c46:	f3bf 8f4f 	dsb	sy
 8015c4a:	60fb      	str	r3, [r7, #12]
}
 8015c4c:	bf00      	nop
 8015c4e:	e7fe      	b.n	8015c4e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015c50:	693b      	ldr	r3, [r7, #16]
 8015c52:	689c      	ldr	r4, [r3, #8]
 8015c54:	f002 f984 	bl	8017f60 <xTaskGetCurrentTaskHandle>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	429c      	cmp	r4, r3
 8015c5c:	d111      	bne.n	8015c82 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8015c5e:	693b      	ldr	r3, [r7, #16]
 8015c60:	68db      	ldr	r3, [r3, #12]
 8015c62:	1e5a      	subs	r2, r3, #1
 8015c64:	693b      	ldr	r3, [r7, #16]
 8015c66:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8015c68:	693b      	ldr	r3, [r7, #16]
 8015c6a:	68db      	ldr	r3, [r3, #12]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d105      	bne.n	8015c7c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8015c70:	2300      	movs	r3, #0
 8015c72:	2200      	movs	r2, #0
 8015c74:	2100      	movs	r1, #0
 8015c76:	6938      	ldr	r0, [r7, #16]
 8015c78:	f000 f8aa 	bl	8015dd0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8015c7c:	2301      	movs	r3, #1
 8015c7e:	617b      	str	r3, [r7, #20]
 8015c80:	e001      	b.n	8015c86 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8015c82:	2300      	movs	r3, #0
 8015c84:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8015c86:	697b      	ldr	r3, [r7, #20]
	}
 8015c88:	4618      	mov	r0, r3
 8015c8a:	371c      	adds	r7, #28
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	bd90      	pop	{r4, r7, pc}

08015c90 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8015c90:	b590      	push	{r4, r7, lr}
 8015c92:	b087      	sub	sp, #28
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
 8015c98:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8015c9e:	693b      	ldr	r3, [r7, #16]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d10a      	bne.n	8015cba <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8015ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ca8:	f383 8811 	msr	BASEPRI, r3
 8015cac:	f3bf 8f6f 	isb	sy
 8015cb0:	f3bf 8f4f 	dsb	sy
 8015cb4:	60fb      	str	r3, [r7, #12]
}
 8015cb6:	bf00      	nop
 8015cb8:	e7fe      	b.n	8015cb8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8015cba:	693b      	ldr	r3, [r7, #16]
 8015cbc:	689c      	ldr	r4, [r3, #8]
 8015cbe:	f002 f94f 	bl	8017f60 <xTaskGetCurrentTaskHandle>
 8015cc2:	4603      	mov	r3, r0
 8015cc4:	429c      	cmp	r4, r3
 8015cc6:	d107      	bne.n	8015cd8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	68db      	ldr	r3, [r3, #12]
 8015ccc:	1c5a      	adds	r2, r3, #1
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	617b      	str	r3, [r7, #20]
 8015cd6:	e00c      	b.n	8015cf2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8015cd8:	6839      	ldr	r1, [r7, #0]
 8015cda:	6938      	ldr	r0, [r7, #16]
 8015cdc:	f000 fb7e 	bl	80163dc <xQueueSemaphoreTake>
 8015ce0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d004      	beq.n	8015cf2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	68db      	ldr	r3, [r3, #12]
 8015cec:	1c5a      	adds	r2, r3, #1
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8015cf2:	697b      	ldr	r3, [r7, #20]
	}
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	371c      	adds	r7, #28
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	bd90      	pop	{r4, r7, pc}

08015cfc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b08a      	sub	sp, #40	; 0x28
 8015d00:	af02      	add	r7, sp, #8
 8015d02:	60f8      	str	r0, [r7, #12]
 8015d04:	60b9      	str	r1, [r7, #8]
 8015d06:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015d08:	68fb      	ldr	r3, [r7, #12]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d10a      	bne.n	8015d24 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d12:	f383 8811 	msr	BASEPRI, r3
 8015d16:	f3bf 8f6f 	isb	sy
 8015d1a:	f3bf 8f4f 	dsb	sy
 8015d1e:	61bb      	str	r3, [r7, #24]
}
 8015d20:	bf00      	nop
 8015d22:	e7fe      	b.n	8015d22 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015d24:	68ba      	ldr	r2, [r7, #8]
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d90a      	bls.n	8015d42 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d30:	f383 8811 	msr	BASEPRI, r3
 8015d34:	f3bf 8f6f 	isb	sy
 8015d38:	f3bf 8f4f 	dsb	sy
 8015d3c:	617b      	str	r3, [r7, #20]
}
 8015d3e:	bf00      	nop
 8015d40:	e7fe      	b.n	8015d40 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015d42:	2302      	movs	r3, #2
 8015d44:	9300      	str	r3, [sp, #0]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	2200      	movs	r2, #0
 8015d4a:	2100      	movs	r1, #0
 8015d4c:	68f8      	ldr	r0, [r7, #12]
 8015d4e:	f7ff fe49 	bl	80159e4 <xQueueGenericCreateStatic>
 8015d52:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015d54:	69fb      	ldr	r3, [r7, #28]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d002      	beq.n	8015d60 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015d5a:	69fb      	ldr	r3, [r7, #28]
 8015d5c:	68ba      	ldr	r2, [r7, #8]
 8015d5e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015d60:	69fb      	ldr	r3, [r7, #28]
	}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3720      	adds	r7, #32
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}

08015d6a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015d6a:	b580      	push	{r7, lr}
 8015d6c:	b086      	sub	sp, #24
 8015d6e:	af00      	add	r7, sp, #0
 8015d70:	6078      	str	r0, [r7, #4]
 8015d72:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d10a      	bne.n	8015d90 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d7e:	f383 8811 	msr	BASEPRI, r3
 8015d82:	f3bf 8f6f 	isb	sy
 8015d86:	f3bf 8f4f 	dsb	sy
 8015d8a:	613b      	str	r3, [r7, #16]
}
 8015d8c:	bf00      	nop
 8015d8e:	e7fe      	b.n	8015d8e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015d90:	683a      	ldr	r2, [r7, #0]
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	429a      	cmp	r2, r3
 8015d96:	d90a      	bls.n	8015dae <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d9c:	f383 8811 	msr	BASEPRI, r3
 8015da0:	f3bf 8f6f 	isb	sy
 8015da4:	f3bf 8f4f 	dsb	sy
 8015da8:	60fb      	str	r3, [r7, #12]
}
 8015daa:	bf00      	nop
 8015dac:	e7fe      	b.n	8015dac <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015dae:	2202      	movs	r2, #2
 8015db0:	2100      	movs	r1, #0
 8015db2:	6878      	ldr	r0, [r7, #4]
 8015db4:	f7ff fe8e 	bl	8015ad4 <xQueueGenericCreate>
 8015db8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d002      	beq.n	8015dc6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	683a      	ldr	r2, [r7, #0]
 8015dc4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015dc6:	697b      	ldr	r3, [r7, #20]
	}
 8015dc8:	4618      	mov	r0, r3
 8015dca:	3718      	adds	r7, #24
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}

08015dd0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b08e      	sub	sp, #56	; 0x38
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	60f8      	str	r0, [r7, #12]
 8015dd8:	60b9      	str	r1, [r7, #8]
 8015dda:	607a      	str	r2, [r7, #4]
 8015ddc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8015dde:	2300      	movs	r3, #0
 8015de0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8015de2:	68fb      	ldr	r3, [r7, #12]
 8015de4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8015de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d10a      	bne.n	8015e02 <xQueueGenericSend+0x32>
	__asm volatile
 8015dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df0:	f383 8811 	msr	BASEPRI, r3
 8015df4:	f3bf 8f6f 	isb	sy
 8015df8:	f3bf 8f4f 	dsb	sy
 8015dfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015dfe:	bf00      	nop
 8015e00:	e7fe      	b.n	8015e00 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015e02:	68bb      	ldr	r3, [r7, #8]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d103      	bne.n	8015e10 <xQueueGenericSend+0x40>
 8015e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d101      	bne.n	8015e14 <xQueueGenericSend+0x44>
 8015e10:	2301      	movs	r3, #1
 8015e12:	e000      	b.n	8015e16 <xQueueGenericSend+0x46>
 8015e14:	2300      	movs	r3, #0
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d10a      	bne.n	8015e30 <xQueueGenericSend+0x60>
	__asm volatile
 8015e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e1e:	f383 8811 	msr	BASEPRI, r3
 8015e22:	f3bf 8f6f 	isb	sy
 8015e26:	f3bf 8f4f 	dsb	sy
 8015e2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015e2c:	bf00      	nop
 8015e2e:	e7fe      	b.n	8015e2e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015e30:	683b      	ldr	r3, [r7, #0]
 8015e32:	2b02      	cmp	r3, #2
 8015e34:	d103      	bne.n	8015e3e <xQueueGenericSend+0x6e>
 8015e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e3a:	2b01      	cmp	r3, #1
 8015e3c:	d101      	bne.n	8015e42 <xQueueGenericSend+0x72>
 8015e3e:	2301      	movs	r3, #1
 8015e40:	e000      	b.n	8015e44 <xQueueGenericSend+0x74>
 8015e42:	2300      	movs	r3, #0
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d10a      	bne.n	8015e5e <xQueueGenericSend+0x8e>
	__asm volatile
 8015e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e4c:	f383 8811 	msr	BASEPRI, r3
 8015e50:	f3bf 8f6f 	isb	sy
 8015e54:	f3bf 8f4f 	dsb	sy
 8015e58:	623b      	str	r3, [r7, #32]
}
 8015e5a:	bf00      	nop
 8015e5c:	e7fe      	b.n	8015e5c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015e5e:	f002 f88f 	bl	8017f80 <xTaskGetSchedulerState>
 8015e62:	4603      	mov	r3, r0
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d102      	bne.n	8015e6e <xQueueGenericSend+0x9e>
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d101      	bne.n	8015e72 <xQueueGenericSend+0xa2>
 8015e6e:	2301      	movs	r3, #1
 8015e70:	e000      	b.n	8015e74 <xQueueGenericSend+0xa4>
 8015e72:	2300      	movs	r3, #0
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d10a      	bne.n	8015e8e <xQueueGenericSend+0xbe>
	__asm volatile
 8015e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e7c:	f383 8811 	msr	BASEPRI, r3
 8015e80:	f3bf 8f6f 	isb	sy
 8015e84:	f3bf 8f4f 	dsb	sy
 8015e88:	61fb      	str	r3, [r7, #28]
}
 8015e8a:	bf00      	nop
 8015e8c:	e7fe      	b.n	8015e8c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015e8e:	f003 f811 	bl	8018eb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8015e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e9a:	429a      	cmp	r2, r3
 8015e9c:	d302      	bcc.n	8015ea4 <xQueueGenericSend+0xd4>
 8015e9e:	683b      	ldr	r3, [r7, #0]
 8015ea0:	2b02      	cmp	r3, #2
 8015ea2:	d129      	bne.n	8015ef8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015ea4:	683a      	ldr	r2, [r7, #0]
 8015ea6:	68b9      	ldr	r1, [r7, #8]
 8015ea8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015eaa:	f000 fc9a 	bl	80167e2 <prvCopyDataToQueue>
 8015eae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d010      	beq.n	8015eda <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eba:	3324      	adds	r3, #36	; 0x24
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f001 fe67 	bl	8017b90 <xTaskRemoveFromEventList>
 8015ec2:	4603      	mov	r3, r0
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d013      	beq.n	8015ef0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8015ec8:	4b3f      	ldr	r3, [pc, #252]	; (8015fc8 <xQueueGenericSend+0x1f8>)
 8015eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ece:	601a      	str	r2, [r3, #0]
 8015ed0:	f3bf 8f4f 	dsb	sy
 8015ed4:	f3bf 8f6f 	isb	sy
 8015ed8:	e00a      	b.n	8015ef0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8015eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d007      	beq.n	8015ef0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8015ee0:	4b39      	ldr	r3, [pc, #228]	; (8015fc8 <xQueueGenericSend+0x1f8>)
 8015ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ee6:	601a      	str	r2, [r3, #0]
 8015ee8:	f3bf 8f4f 	dsb	sy
 8015eec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8015ef0:	f003 f810 	bl	8018f14 <vPortExitCritical>
				return pdPASS;
 8015ef4:	2301      	movs	r3, #1
 8015ef6:	e063      	b.n	8015fc0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d103      	bne.n	8015f06 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8015efe:	f003 f809 	bl	8018f14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8015f02:	2300      	movs	r3, #0
 8015f04:	e05c      	b.n	8015fc0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8015f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d106      	bne.n	8015f1a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015f0c:	f107 0314 	add.w	r3, r7, #20
 8015f10:	4618      	mov	r0, r3
 8015f12:	f001 fec7 	bl	8017ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015f16:	2301      	movs	r3, #1
 8015f18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8015f1a:	f002 fffb 	bl	8018f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8015f1e:	f001 fbe1 	bl	80176e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015f22:	f002 ffc7 	bl	8018eb4 <vPortEnterCritical>
 8015f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015f2c:	b25b      	sxtb	r3, r3
 8015f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f32:	d103      	bne.n	8015f3c <xQueueGenericSend+0x16c>
 8015f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f36:	2200      	movs	r2, #0
 8015f38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8015f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8015f42:	b25b      	sxtb	r3, r3
 8015f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015f48:	d103      	bne.n	8015f52 <xQueueGenericSend+0x182>
 8015f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8015f52:	f002 ffdf 	bl	8018f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015f56:	1d3a      	adds	r2, r7, #4
 8015f58:	f107 0314 	add.w	r3, r7, #20
 8015f5c:	4611      	mov	r1, r2
 8015f5e:	4618      	mov	r0, r3
 8015f60:	f001 feb6 	bl	8017cd0 <xTaskCheckForTimeOut>
 8015f64:	4603      	mov	r3, r0
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d124      	bne.n	8015fb4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8015f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f6c:	f000 fd31 	bl	80169d2 <prvIsQueueFull>
 8015f70:	4603      	mov	r3, r0
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d018      	beq.n	8015fa8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8015f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015f78:	3310      	adds	r3, #16
 8015f7a:	687a      	ldr	r2, [r7, #4]
 8015f7c:	4611      	mov	r1, r2
 8015f7e:	4618      	mov	r0, r3
 8015f80:	f001 fdb6 	bl	8017af0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8015f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f86:	f000 fcbc 	bl	8016902 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8015f8a:	f001 fbb9 	bl	8017700 <xTaskResumeAll>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	f47f af7c 	bne.w	8015e8e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8015f96:	4b0c      	ldr	r3, [pc, #48]	; (8015fc8 <xQueueGenericSend+0x1f8>)
 8015f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015f9c:	601a      	str	r2, [r3, #0]
 8015f9e:	f3bf 8f4f 	dsb	sy
 8015fa2:	f3bf 8f6f 	isb	sy
 8015fa6:	e772      	b.n	8015e8e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8015fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015faa:	f000 fcaa 	bl	8016902 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015fae:	f001 fba7 	bl	8017700 <xTaskResumeAll>
 8015fb2:	e76c      	b.n	8015e8e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8015fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015fb6:	f000 fca4 	bl	8016902 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015fba:	f001 fba1 	bl	8017700 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8015fbe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3738      	adds	r7, #56	; 0x38
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd80      	pop	{r7, pc}
 8015fc8:	e000ed04 	.word	0xe000ed04

08015fcc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b090      	sub	sp, #64	; 0x40
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	60f8      	str	r0, [r7, #12]
 8015fd4:	60b9      	str	r1, [r7, #8]
 8015fd6:	607a      	str	r2, [r7, #4]
 8015fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8015fda:	68fb      	ldr	r3, [r7, #12]
 8015fdc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8015fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d10a      	bne.n	8015ffa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8015fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fe8:	f383 8811 	msr	BASEPRI, r3
 8015fec:	f3bf 8f6f 	isb	sy
 8015ff0:	f3bf 8f4f 	dsb	sy
 8015ff4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015ff6:	bf00      	nop
 8015ff8:	e7fe      	b.n	8015ff8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d103      	bne.n	8016008 <xQueueGenericSendFromISR+0x3c>
 8016000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016004:	2b00      	cmp	r3, #0
 8016006:	d101      	bne.n	801600c <xQueueGenericSendFromISR+0x40>
 8016008:	2301      	movs	r3, #1
 801600a:	e000      	b.n	801600e <xQueueGenericSendFromISR+0x42>
 801600c:	2300      	movs	r3, #0
 801600e:	2b00      	cmp	r3, #0
 8016010:	d10a      	bne.n	8016028 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8016012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016016:	f383 8811 	msr	BASEPRI, r3
 801601a:	f3bf 8f6f 	isb	sy
 801601e:	f3bf 8f4f 	dsb	sy
 8016022:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016024:	bf00      	nop
 8016026:	e7fe      	b.n	8016026 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016028:	683b      	ldr	r3, [r7, #0]
 801602a:	2b02      	cmp	r3, #2
 801602c:	d103      	bne.n	8016036 <xQueueGenericSendFromISR+0x6a>
 801602e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016032:	2b01      	cmp	r3, #1
 8016034:	d101      	bne.n	801603a <xQueueGenericSendFromISR+0x6e>
 8016036:	2301      	movs	r3, #1
 8016038:	e000      	b.n	801603c <xQueueGenericSendFromISR+0x70>
 801603a:	2300      	movs	r3, #0
 801603c:	2b00      	cmp	r3, #0
 801603e:	d10a      	bne.n	8016056 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016044:	f383 8811 	msr	BASEPRI, r3
 8016048:	f3bf 8f6f 	isb	sy
 801604c:	f3bf 8f4f 	dsb	sy
 8016050:	623b      	str	r3, [r7, #32]
}
 8016052:	bf00      	nop
 8016054:	e7fe      	b.n	8016054 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016056:	f003 f80f 	bl	8019078 <vPortValidateInterruptPriority>
	__asm volatile
 801605a:	f3ef 8211 	mrs	r2, BASEPRI
 801605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016062:	f383 8811 	msr	BASEPRI, r3
 8016066:	f3bf 8f6f 	isb	sy
 801606a:	f3bf 8f4f 	dsb	sy
 801606e:	61fa      	str	r2, [r7, #28]
 8016070:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8016072:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016074:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016078:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801607c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801607e:	429a      	cmp	r2, r3
 8016080:	d302      	bcc.n	8016088 <xQueueGenericSendFromISR+0xbc>
 8016082:	683b      	ldr	r3, [r7, #0]
 8016084:	2b02      	cmp	r3, #2
 8016086:	d12f      	bne.n	80160e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801608a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801608e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016096:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016098:	683a      	ldr	r2, [r7, #0]
 801609a:	68b9      	ldr	r1, [r7, #8]
 801609c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801609e:	f000 fba0 	bl	80167e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80160a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80160a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160aa:	d112      	bne.n	80160d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80160ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d016      	beq.n	80160e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80160b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160b6:	3324      	adds	r3, #36	; 0x24
 80160b8:	4618      	mov	r0, r3
 80160ba:	f001 fd69 	bl	8017b90 <xTaskRemoveFromEventList>
 80160be:	4603      	mov	r3, r0
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d00e      	beq.n	80160e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d00b      	beq.n	80160e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	2201      	movs	r2, #1
 80160ce:	601a      	str	r2, [r3, #0]
 80160d0:	e007      	b.n	80160e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80160d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80160d6:	3301      	adds	r3, #1
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	b25a      	sxtb	r2, r3
 80160dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80160de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80160e2:	2301      	movs	r3, #1
 80160e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80160e6:	e001      	b.n	80160ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80160e8:	2300      	movs	r3, #0
 80160ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80160ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80160ee:	617b      	str	r3, [r7, #20]
	__asm volatile
 80160f0:	697b      	ldr	r3, [r7, #20]
 80160f2:	f383 8811 	msr	BASEPRI, r3
}
 80160f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80160f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3740      	adds	r7, #64	; 0x40
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}

08016102 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8016102:	b580      	push	{r7, lr}
 8016104:	b08e      	sub	sp, #56	; 0x38
 8016106:	af00      	add	r7, sp, #0
 8016108:	6078      	str	r0, [r7, #4]
 801610a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016112:	2b00      	cmp	r3, #0
 8016114:	d10a      	bne.n	801612c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8016116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801611a:	f383 8811 	msr	BASEPRI, r3
 801611e:	f3bf 8f6f 	isb	sy
 8016122:	f3bf 8f4f 	dsb	sy
 8016126:	623b      	str	r3, [r7, #32]
}
 8016128:	bf00      	nop
 801612a:	e7fe      	b.n	801612a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801612c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016130:	2b00      	cmp	r3, #0
 8016132:	d00a      	beq.n	801614a <xQueueGiveFromISR+0x48>
	__asm volatile
 8016134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016138:	f383 8811 	msr	BASEPRI, r3
 801613c:	f3bf 8f6f 	isb	sy
 8016140:	f3bf 8f4f 	dsb	sy
 8016144:	61fb      	str	r3, [r7, #28]
}
 8016146:	bf00      	nop
 8016148:	e7fe      	b.n	8016148 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d103      	bne.n	801615a <xQueueGiveFromISR+0x58>
 8016152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016154:	689b      	ldr	r3, [r3, #8]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d101      	bne.n	801615e <xQueueGiveFromISR+0x5c>
 801615a:	2301      	movs	r3, #1
 801615c:	e000      	b.n	8016160 <xQueueGiveFromISR+0x5e>
 801615e:	2300      	movs	r3, #0
 8016160:	2b00      	cmp	r3, #0
 8016162:	d10a      	bne.n	801617a <xQueueGiveFromISR+0x78>
	__asm volatile
 8016164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016168:	f383 8811 	msr	BASEPRI, r3
 801616c:	f3bf 8f6f 	isb	sy
 8016170:	f3bf 8f4f 	dsb	sy
 8016174:	61bb      	str	r3, [r7, #24]
}
 8016176:	bf00      	nop
 8016178:	e7fe      	b.n	8016178 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801617a:	f002 ff7d 	bl	8019078 <vPortValidateInterruptPriority>
	__asm volatile
 801617e:	f3ef 8211 	mrs	r2, BASEPRI
 8016182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016186:	f383 8811 	msr	BASEPRI, r3
 801618a:	f3bf 8f6f 	isb	sy
 801618e:	f3bf 8f4f 	dsb	sy
 8016192:	617a      	str	r2, [r7, #20]
 8016194:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8016196:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016198:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801619e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80161a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d22b      	bcs.n	8016202 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80161aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80161b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80161b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b6:	1c5a      	adds	r2, r3, #1
 80161b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80161bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80161c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80161c4:	d112      	bne.n	80161ec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80161c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d016      	beq.n	80161fc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80161ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161d0:	3324      	adds	r3, #36	; 0x24
 80161d2:	4618      	mov	r0, r3
 80161d4:	f001 fcdc 	bl	8017b90 <xTaskRemoveFromEventList>
 80161d8:	4603      	mov	r3, r0
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d00e      	beq.n	80161fc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d00b      	beq.n	80161fc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80161e4:	683b      	ldr	r3, [r7, #0]
 80161e6:	2201      	movs	r2, #1
 80161e8:	601a      	str	r2, [r3, #0]
 80161ea:	e007      	b.n	80161fc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80161ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80161f0:	3301      	adds	r3, #1
 80161f2:	b2db      	uxtb	r3, r3
 80161f4:	b25a      	sxtb	r2, r3
 80161f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80161fc:	2301      	movs	r3, #1
 80161fe:	637b      	str	r3, [r7, #52]	; 0x34
 8016200:	e001      	b.n	8016206 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016202:	2300      	movs	r3, #0
 8016204:	637b      	str	r3, [r7, #52]	; 0x34
 8016206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016208:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	f383 8811 	msr	BASEPRI, r3
}
 8016210:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016214:	4618      	mov	r0, r3
 8016216:	3738      	adds	r7, #56	; 0x38
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b08c      	sub	sp, #48	; 0x30
 8016220:	af00      	add	r7, sp, #0
 8016222:	60f8      	str	r0, [r7, #12]
 8016224:	60b9      	str	r1, [r7, #8]
 8016226:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016228:	2300      	movs	r3, #0
 801622a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016232:	2b00      	cmp	r3, #0
 8016234:	d10a      	bne.n	801624c <xQueueReceive+0x30>
	__asm volatile
 8016236:	f04f 0350 	mov.w	r3, #80	; 0x50
 801623a:	f383 8811 	msr	BASEPRI, r3
 801623e:	f3bf 8f6f 	isb	sy
 8016242:	f3bf 8f4f 	dsb	sy
 8016246:	623b      	str	r3, [r7, #32]
}
 8016248:	bf00      	nop
 801624a:	e7fe      	b.n	801624a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801624c:	68bb      	ldr	r3, [r7, #8]
 801624e:	2b00      	cmp	r3, #0
 8016250:	d103      	bne.n	801625a <xQueueReceive+0x3e>
 8016252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016256:	2b00      	cmp	r3, #0
 8016258:	d101      	bne.n	801625e <xQueueReceive+0x42>
 801625a:	2301      	movs	r3, #1
 801625c:	e000      	b.n	8016260 <xQueueReceive+0x44>
 801625e:	2300      	movs	r3, #0
 8016260:	2b00      	cmp	r3, #0
 8016262:	d10a      	bne.n	801627a <xQueueReceive+0x5e>
	__asm volatile
 8016264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016268:	f383 8811 	msr	BASEPRI, r3
 801626c:	f3bf 8f6f 	isb	sy
 8016270:	f3bf 8f4f 	dsb	sy
 8016274:	61fb      	str	r3, [r7, #28]
}
 8016276:	bf00      	nop
 8016278:	e7fe      	b.n	8016278 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801627a:	f001 fe81 	bl	8017f80 <xTaskGetSchedulerState>
 801627e:	4603      	mov	r3, r0
 8016280:	2b00      	cmp	r3, #0
 8016282:	d102      	bne.n	801628a <xQueueReceive+0x6e>
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d101      	bne.n	801628e <xQueueReceive+0x72>
 801628a:	2301      	movs	r3, #1
 801628c:	e000      	b.n	8016290 <xQueueReceive+0x74>
 801628e:	2300      	movs	r3, #0
 8016290:	2b00      	cmp	r3, #0
 8016292:	d10a      	bne.n	80162aa <xQueueReceive+0x8e>
	__asm volatile
 8016294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016298:	f383 8811 	msr	BASEPRI, r3
 801629c:	f3bf 8f6f 	isb	sy
 80162a0:	f3bf 8f4f 	dsb	sy
 80162a4:	61bb      	str	r3, [r7, #24]
}
 80162a6:	bf00      	nop
 80162a8:	e7fe      	b.n	80162a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80162aa:	f002 fe03 	bl	8018eb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80162ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80162b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d01f      	beq.n	80162fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80162ba:	68b9      	ldr	r1, [r7, #8]
 80162bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162be:	f000 fafa 	bl	80168b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80162c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162c4:	1e5a      	subs	r2, r3, #1
 80162c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80162ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162cc:	691b      	ldr	r3, [r3, #16]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d00f      	beq.n	80162f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80162d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162d4:	3310      	adds	r3, #16
 80162d6:	4618      	mov	r0, r3
 80162d8:	f001 fc5a 	bl	8017b90 <xTaskRemoveFromEventList>
 80162dc:	4603      	mov	r3, r0
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d007      	beq.n	80162f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80162e2:	4b3d      	ldr	r3, [pc, #244]	; (80163d8 <xQueueReceive+0x1bc>)
 80162e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162e8:	601a      	str	r2, [r3, #0]
 80162ea:	f3bf 8f4f 	dsb	sy
 80162ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80162f2:	f002 fe0f 	bl	8018f14 <vPortExitCritical>
				return pdPASS;
 80162f6:	2301      	movs	r3, #1
 80162f8:	e069      	b.n	80163ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d103      	bne.n	8016308 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016300:	f002 fe08 	bl	8018f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016304:	2300      	movs	r3, #0
 8016306:	e062      	b.n	80163ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801630a:	2b00      	cmp	r3, #0
 801630c:	d106      	bne.n	801631c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801630e:	f107 0310 	add.w	r3, r7, #16
 8016312:	4618      	mov	r0, r3
 8016314:	f001 fcc6 	bl	8017ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016318:	2301      	movs	r3, #1
 801631a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801631c:	f002 fdfa 	bl	8018f14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016320:	f001 f9e0 	bl	80176e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016324:	f002 fdc6 	bl	8018eb4 <vPortEnterCritical>
 8016328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801632a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801632e:	b25b      	sxtb	r3, r3
 8016330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016334:	d103      	bne.n	801633e <xQueueReceive+0x122>
 8016336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016338:	2200      	movs	r2, #0
 801633a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801633e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016344:	b25b      	sxtb	r3, r3
 8016346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801634a:	d103      	bne.n	8016354 <xQueueReceive+0x138>
 801634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801634e:	2200      	movs	r2, #0
 8016350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016354:	f002 fdde 	bl	8018f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016358:	1d3a      	adds	r2, r7, #4
 801635a:	f107 0310 	add.w	r3, r7, #16
 801635e:	4611      	mov	r1, r2
 8016360:	4618      	mov	r0, r3
 8016362:	f001 fcb5 	bl	8017cd0 <xTaskCheckForTimeOut>
 8016366:	4603      	mov	r3, r0
 8016368:	2b00      	cmp	r3, #0
 801636a:	d123      	bne.n	80163b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801636c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801636e:	f000 fb1a 	bl	80169a6 <prvIsQueueEmpty>
 8016372:	4603      	mov	r3, r0
 8016374:	2b00      	cmp	r3, #0
 8016376:	d017      	beq.n	80163a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801637a:	3324      	adds	r3, #36	; 0x24
 801637c:	687a      	ldr	r2, [r7, #4]
 801637e:	4611      	mov	r1, r2
 8016380:	4618      	mov	r0, r3
 8016382:	f001 fbb5 	bl	8017af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8016386:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016388:	f000 fabb 	bl	8016902 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801638c:	f001 f9b8 	bl	8017700 <xTaskResumeAll>
 8016390:	4603      	mov	r3, r0
 8016392:	2b00      	cmp	r3, #0
 8016394:	d189      	bne.n	80162aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8016396:	4b10      	ldr	r3, [pc, #64]	; (80163d8 <xQueueReceive+0x1bc>)
 8016398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801639c:	601a      	str	r2, [r3, #0]
 801639e:	f3bf 8f4f 	dsb	sy
 80163a2:	f3bf 8f6f 	isb	sy
 80163a6:	e780      	b.n	80162aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80163a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163aa:	f000 faaa 	bl	8016902 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80163ae:	f001 f9a7 	bl	8017700 <xTaskResumeAll>
 80163b2:	e77a      	b.n	80162aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80163b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163b6:	f000 faa4 	bl	8016902 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80163ba:	f001 f9a1 	bl	8017700 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80163be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163c0:	f000 faf1 	bl	80169a6 <prvIsQueueEmpty>
 80163c4:	4603      	mov	r3, r0
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	f43f af6f 	beq.w	80162aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80163cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80163ce:	4618      	mov	r0, r3
 80163d0:	3730      	adds	r7, #48	; 0x30
 80163d2:	46bd      	mov	sp, r7
 80163d4:	bd80      	pop	{r7, pc}
 80163d6:	bf00      	nop
 80163d8:	e000ed04 	.word	0xe000ed04

080163dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b08e      	sub	sp, #56	; 0x38
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80163e6:	2300      	movs	r3, #0
 80163e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80163ee:	2300      	movs	r3, #0
 80163f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80163f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d10a      	bne.n	801640e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80163f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163fc:	f383 8811 	msr	BASEPRI, r3
 8016400:	f3bf 8f6f 	isb	sy
 8016404:	f3bf 8f4f 	dsb	sy
 8016408:	623b      	str	r3, [r7, #32]
}
 801640a:	bf00      	nop
 801640c:	e7fe      	b.n	801640c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801640e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016412:	2b00      	cmp	r3, #0
 8016414:	d00a      	beq.n	801642c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8016416:	f04f 0350 	mov.w	r3, #80	; 0x50
 801641a:	f383 8811 	msr	BASEPRI, r3
 801641e:	f3bf 8f6f 	isb	sy
 8016422:	f3bf 8f4f 	dsb	sy
 8016426:	61fb      	str	r3, [r7, #28]
}
 8016428:	bf00      	nop
 801642a:	e7fe      	b.n	801642a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801642c:	f001 fda8 	bl	8017f80 <xTaskGetSchedulerState>
 8016430:	4603      	mov	r3, r0
 8016432:	2b00      	cmp	r3, #0
 8016434:	d102      	bne.n	801643c <xQueueSemaphoreTake+0x60>
 8016436:	683b      	ldr	r3, [r7, #0]
 8016438:	2b00      	cmp	r3, #0
 801643a:	d101      	bne.n	8016440 <xQueueSemaphoreTake+0x64>
 801643c:	2301      	movs	r3, #1
 801643e:	e000      	b.n	8016442 <xQueueSemaphoreTake+0x66>
 8016440:	2300      	movs	r3, #0
 8016442:	2b00      	cmp	r3, #0
 8016444:	d10a      	bne.n	801645c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8016446:	f04f 0350 	mov.w	r3, #80	; 0x50
 801644a:	f383 8811 	msr	BASEPRI, r3
 801644e:	f3bf 8f6f 	isb	sy
 8016452:	f3bf 8f4f 	dsb	sy
 8016456:	61bb      	str	r3, [r7, #24]
}
 8016458:	bf00      	nop
 801645a:	e7fe      	b.n	801645a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801645c:	f002 fd2a 	bl	8018eb4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016464:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8016466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016468:	2b00      	cmp	r3, #0
 801646a:	d024      	beq.n	80164b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646e:	1e5a      	subs	r2, r3, #1
 8016470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016472:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d104      	bne.n	8016486 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801647c:	f001 fef6 	bl	801826c <pvTaskIncrementMutexHeldCount>
 8016480:	4602      	mov	r2, r0
 8016482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016484:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016488:	691b      	ldr	r3, [r3, #16]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d00f      	beq.n	80164ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801648e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016490:	3310      	adds	r3, #16
 8016492:	4618      	mov	r0, r3
 8016494:	f001 fb7c 	bl	8017b90 <xTaskRemoveFromEventList>
 8016498:	4603      	mov	r3, r0
 801649a:	2b00      	cmp	r3, #0
 801649c:	d007      	beq.n	80164ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801649e:	4b54      	ldr	r3, [pc, #336]	; (80165f0 <xQueueSemaphoreTake+0x214>)
 80164a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80164a4:	601a      	str	r2, [r3, #0]
 80164a6:	f3bf 8f4f 	dsb	sy
 80164aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80164ae:	f002 fd31 	bl	8018f14 <vPortExitCritical>
				return pdPASS;
 80164b2:	2301      	movs	r3, #1
 80164b4:	e097      	b.n	80165e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d111      	bne.n	80164e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80164bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d00a      	beq.n	80164d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80164c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c6:	f383 8811 	msr	BASEPRI, r3
 80164ca:	f3bf 8f6f 	isb	sy
 80164ce:	f3bf 8f4f 	dsb	sy
 80164d2:	617b      	str	r3, [r7, #20]
}
 80164d4:	bf00      	nop
 80164d6:	e7fe      	b.n	80164d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80164d8:	f002 fd1c 	bl	8018f14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80164dc:	2300      	movs	r3, #0
 80164de:	e082      	b.n	80165e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80164e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d106      	bne.n	80164f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80164e6:	f107 030c 	add.w	r3, r7, #12
 80164ea:	4618      	mov	r0, r3
 80164ec:	f001 fbda 	bl	8017ca4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80164f0:	2301      	movs	r3, #1
 80164f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80164f4:	f002 fd0e 	bl	8018f14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80164f8:	f001 f8f4 	bl	80176e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80164fc:	f002 fcda 	bl	8018eb4 <vPortEnterCritical>
 8016500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016502:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016506:	b25b      	sxtb	r3, r3
 8016508:	f1b3 3fff 	cmp.w	r3, #4294967295
 801650c:	d103      	bne.n	8016516 <xQueueSemaphoreTake+0x13a>
 801650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016510:	2200      	movs	r2, #0
 8016512:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801651c:	b25b      	sxtb	r3, r3
 801651e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016522:	d103      	bne.n	801652c <xQueueSemaphoreTake+0x150>
 8016524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016526:	2200      	movs	r2, #0
 8016528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801652c:	f002 fcf2 	bl	8018f14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016530:	463a      	mov	r2, r7
 8016532:	f107 030c 	add.w	r3, r7, #12
 8016536:	4611      	mov	r1, r2
 8016538:	4618      	mov	r0, r3
 801653a:	f001 fbc9 	bl	8017cd0 <xTaskCheckForTimeOut>
 801653e:	4603      	mov	r3, r0
 8016540:	2b00      	cmp	r3, #0
 8016542:	d132      	bne.n	80165aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016546:	f000 fa2e 	bl	80169a6 <prvIsQueueEmpty>
 801654a:	4603      	mov	r3, r0
 801654c:	2b00      	cmp	r3, #0
 801654e:	d026      	beq.n	801659e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d109      	bne.n	801656c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016558:	f002 fcac 	bl	8018eb4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801655c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655e:	689b      	ldr	r3, [r3, #8]
 8016560:	4618      	mov	r0, r3
 8016562:	f001 fd2b 	bl	8017fbc <xTaskPriorityInherit>
 8016566:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016568:	f002 fcd4 	bl	8018f14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801656c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801656e:	3324      	adds	r3, #36	; 0x24
 8016570:	683a      	ldr	r2, [r7, #0]
 8016572:	4611      	mov	r1, r2
 8016574:	4618      	mov	r0, r3
 8016576:	f001 fabb 	bl	8017af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801657a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801657c:	f000 f9c1 	bl	8016902 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8016580:	f001 f8be 	bl	8017700 <xTaskResumeAll>
 8016584:	4603      	mov	r3, r0
 8016586:	2b00      	cmp	r3, #0
 8016588:	f47f af68 	bne.w	801645c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 801658c:	4b18      	ldr	r3, [pc, #96]	; (80165f0 <xQueueSemaphoreTake+0x214>)
 801658e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016592:	601a      	str	r2, [r3, #0]
 8016594:	f3bf 8f4f 	dsb	sy
 8016598:	f3bf 8f6f 	isb	sy
 801659c:	e75e      	b.n	801645c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801659e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165a0:	f000 f9af 	bl	8016902 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80165a4:	f001 f8ac 	bl	8017700 <xTaskResumeAll>
 80165a8:	e758      	b.n	801645c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80165aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165ac:	f000 f9a9 	bl	8016902 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80165b0:	f001 f8a6 	bl	8017700 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80165b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165b6:	f000 f9f6 	bl	80169a6 <prvIsQueueEmpty>
 80165ba:	4603      	mov	r3, r0
 80165bc:	2b00      	cmp	r3, #0
 80165be:	f43f af4d 	beq.w	801645c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80165c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d00d      	beq.n	80165e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80165c8:	f002 fc74 	bl	8018eb4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80165cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80165ce:	f000 f8f0 	bl	80167b2 <prvGetDisinheritPriorityAfterTimeout>
 80165d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80165d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d6:	689b      	ldr	r3, [r3, #8]
 80165d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80165da:	4618      	mov	r0, r3
 80165dc:	f001 fdc4 	bl	8018168 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80165e0:	f002 fc98 	bl	8018f14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80165e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80165e6:	4618      	mov	r0, r3
 80165e8:	3738      	adds	r7, #56	; 0x38
 80165ea:	46bd      	mov	sp, r7
 80165ec:	bd80      	pop	{r7, pc}
 80165ee:	bf00      	nop
 80165f0:	e000ed04 	.word	0xe000ed04

080165f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80165f4:	b580      	push	{r7, lr}
 80165f6:	b08e      	sub	sp, #56	; 0x38
 80165f8:	af00      	add	r7, sp, #0
 80165fa:	60f8      	str	r0, [r7, #12]
 80165fc:	60b9      	str	r1, [r7, #8]
 80165fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016600:	68fb      	ldr	r3, [r7, #12]
 8016602:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016606:	2b00      	cmp	r3, #0
 8016608:	d10a      	bne.n	8016620 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801660a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801660e:	f383 8811 	msr	BASEPRI, r3
 8016612:	f3bf 8f6f 	isb	sy
 8016616:	f3bf 8f4f 	dsb	sy
 801661a:	623b      	str	r3, [r7, #32]
}
 801661c:	bf00      	nop
 801661e:	e7fe      	b.n	801661e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016620:	68bb      	ldr	r3, [r7, #8]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d103      	bne.n	801662e <xQueueReceiveFromISR+0x3a>
 8016626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801662a:	2b00      	cmp	r3, #0
 801662c:	d101      	bne.n	8016632 <xQueueReceiveFromISR+0x3e>
 801662e:	2301      	movs	r3, #1
 8016630:	e000      	b.n	8016634 <xQueueReceiveFromISR+0x40>
 8016632:	2300      	movs	r3, #0
 8016634:	2b00      	cmp	r3, #0
 8016636:	d10a      	bne.n	801664e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016638:	f04f 0350 	mov.w	r3, #80	; 0x50
 801663c:	f383 8811 	msr	BASEPRI, r3
 8016640:	f3bf 8f6f 	isb	sy
 8016644:	f3bf 8f4f 	dsb	sy
 8016648:	61fb      	str	r3, [r7, #28]
}
 801664a:	bf00      	nop
 801664c:	e7fe      	b.n	801664c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801664e:	f002 fd13 	bl	8019078 <vPortValidateInterruptPriority>
	__asm volatile
 8016652:	f3ef 8211 	mrs	r2, BASEPRI
 8016656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801665a:	f383 8811 	msr	BASEPRI, r3
 801665e:	f3bf 8f6f 	isb	sy
 8016662:	f3bf 8f4f 	dsb	sy
 8016666:	61ba      	str	r2, [r7, #24]
 8016668:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801666a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801666c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016672:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016676:	2b00      	cmp	r3, #0
 8016678:	d02f      	beq.n	80166da <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8016684:	68b9      	ldr	r1, [r7, #8]
 8016686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016688:	f000 f915 	bl	80168b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801668e:	1e5a      	subs	r2, r3, #1
 8016690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016692:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8016694:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8016698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801669c:	d112      	bne.n	80166c4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a0:	691b      	ldr	r3, [r3, #16]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d016      	beq.n	80166d4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80166a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166a8:	3310      	adds	r3, #16
 80166aa:	4618      	mov	r0, r3
 80166ac:	f001 fa70 	bl	8017b90 <xTaskRemoveFromEventList>
 80166b0:	4603      	mov	r3, r0
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d00e      	beq.n	80166d4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80166b6:	687b      	ldr	r3, [r7, #4]
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d00b      	beq.n	80166d4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	2201      	movs	r2, #1
 80166c0:	601a      	str	r2, [r3, #0]
 80166c2:	e007      	b.n	80166d4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80166c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80166c8:	3301      	adds	r3, #1
 80166ca:	b2db      	uxtb	r3, r3
 80166cc:	b25a      	sxtb	r2, r3
 80166ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80166d4:	2301      	movs	r3, #1
 80166d6:	637b      	str	r3, [r7, #52]	; 0x34
 80166d8:	e001      	b.n	80166de <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80166da:	2300      	movs	r3, #0
 80166dc:	637b      	str	r3, [r7, #52]	; 0x34
 80166de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166e0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	f383 8811 	msr	BASEPRI, r3
}
 80166e8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80166ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80166ec:	4618      	mov	r0, r3
 80166ee:	3738      	adds	r7, #56	; 0x38
 80166f0:	46bd      	mov	sp, r7
 80166f2:	bd80      	pop	{r7, pc}

080166f4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80166f4:	b580      	push	{r7, lr}
 80166f6:	b084      	sub	sp, #16
 80166f8:	af00      	add	r7, sp, #0
 80166fa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80166fc:	687b      	ldr	r3, [r7, #4]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d10a      	bne.n	8016718 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8016702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016706:	f383 8811 	msr	BASEPRI, r3
 801670a:	f3bf 8f6f 	isb	sy
 801670e:	f3bf 8f4f 	dsb	sy
 8016712:	60bb      	str	r3, [r7, #8]
}
 8016714:	bf00      	nop
 8016716:	e7fe      	b.n	8016716 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8016718:	f002 fbcc 	bl	8018eb4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016720:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8016722:	f002 fbf7 	bl	8018f14 <vPortExitCritical>

	return uxReturn;
 8016726:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8016728:	4618      	mov	r0, r3
 801672a:	3710      	adds	r7, #16
 801672c:	46bd      	mov	sp, r7
 801672e:	bd80      	pop	{r7, pc}

08016730 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8016730:	b480      	push	{r7}
 8016732:	b087      	sub	sp, #28
 8016734:	af00      	add	r7, sp, #0
 8016736:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d10a      	bne.n	8016758 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8016742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016746:	f383 8811 	msr	BASEPRI, r3
 801674a:	f3bf 8f6f 	isb	sy
 801674e:	f3bf 8f4f 	dsb	sy
 8016752:	60fb      	str	r3, [r7, #12]
}
 8016754:	bf00      	nop
 8016756:	e7fe      	b.n	8016756 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8016758:	697b      	ldr	r3, [r7, #20]
 801675a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801675c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 801675e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8016760:	4618      	mov	r0, r3
 8016762:	371c      	adds	r7, #28
 8016764:	46bd      	mov	sp, r7
 8016766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676a:	4770      	bx	lr

0801676c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801676c:	b580      	push	{r7, lr}
 801676e:	b084      	sub	sp, #16
 8016770:	af00      	add	r7, sp, #0
 8016772:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d10a      	bne.n	8016794 <vQueueDelete+0x28>
	__asm volatile
 801677e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016782:	f383 8811 	msr	BASEPRI, r3
 8016786:	f3bf 8f6f 	isb	sy
 801678a:	f3bf 8f4f 	dsb	sy
 801678e:	60bb      	str	r3, [r7, #8]
}
 8016790:	bf00      	nop
 8016792:	e7fe      	b.n	8016792 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016794:	68f8      	ldr	r0, [r7, #12]
 8016796:	f000 f95f 	bl	8016a58 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80167a0:	2b00      	cmp	r3, #0
 80167a2:	d102      	bne.n	80167aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80167a4:	68f8      	ldr	r0, [r7, #12]
 80167a6:	f002 fd77 	bl	8019298 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80167aa:	bf00      	nop
 80167ac:	3710      	adds	r7, #16
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}

080167b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80167b2:	b480      	push	{r7}
 80167b4:	b085      	sub	sp, #20
 80167b6:	af00      	add	r7, sp, #0
 80167b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d006      	beq.n	80167d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80167cc:	60fb      	str	r3, [r7, #12]
 80167ce:	e001      	b.n	80167d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80167d0:	2300      	movs	r3, #0
 80167d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80167d4:	68fb      	ldr	r3, [r7, #12]
	}
 80167d6:	4618      	mov	r0, r3
 80167d8:	3714      	adds	r7, #20
 80167da:	46bd      	mov	sp, r7
 80167dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e0:	4770      	bx	lr

080167e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80167e2:	b580      	push	{r7, lr}
 80167e4:	b086      	sub	sp, #24
 80167e6:	af00      	add	r7, sp, #0
 80167e8:	60f8      	str	r0, [r7, #12]
 80167ea:	60b9      	str	r1, [r7, #8]
 80167ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80167ee:	2300      	movs	r3, #0
 80167f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d10d      	bne.n	801681c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d14d      	bne.n	80168a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016808:	68fb      	ldr	r3, [r7, #12]
 801680a:	689b      	ldr	r3, [r3, #8]
 801680c:	4618      	mov	r0, r3
 801680e:	f001 fc3d 	bl	801808c <xTaskPriorityDisinherit>
 8016812:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	2200      	movs	r2, #0
 8016818:	609a      	str	r2, [r3, #8]
 801681a:	e043      	b.n	80168a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	2b00      	cmp	r3, #0
 8016820:	d119      	bne.n	8016856 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016822:	68fb      	ldr	r3, [r7, #12]
 8016824:	6858      	ldr	r0, [r3, #4]
 8016826:	68fb      	ldr	r3, [r7, #12]
 8016828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801682a:	461a      	mov	r2, r3
 801682c:	68b9      	ldr	r1, [r7, #8]
 801682e:	f003 f9fd 	bl	8019c2c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	685a      	ldr	r2, [r3, #4]
 8016836:	68fb      	ldr	r3, [r7, #12]
 8016838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801683a:	441a      	add	r2, r3
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	685a      	ldr	r2, [r3, #4]
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	689b      	ldr	r3, [r3, #8]
 8016848:	429a      	cmp	r2, r3
 801684a:	d32b      	bcc.n	80168a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	681a      	ldr	r2, [r3, #0]
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	605a      	str	r2, [r3, #4]
 8016854:	e026      	b.n	80168a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	68d8      	ldr	r0, [r3, #12]
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801685e:	461a      	mov	r2, r3
 8016860:	68b9      	ldr	r1, [r7, #8]
 8016862:	f003 f9e3 	bl	8019c2c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	68da      	ldr	r2, [r3, #12]
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801686e:	425b      	negs	r3, r3
 8016870:	441a      	add	r2, r3
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	68da      	ldr	r2, [r3, #12]
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	429a      	cmp	r2, r3
 8016880:	d207      	bcs.n	8016892 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	689a      	ldr	r2, [r3, #8]
 8016886:	68fb      	ldr	r3, [r7, #12]
 8016888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801688a:	425b      	negs	r3, r3
 801688c:	441a      	add	r2, r3
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2b02      	cmp	r3, #2
 8016896:	d105      	bne.n	80168a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016898:	693b      	ldr	r3, [r7, #16]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d002      	beq.n	80168a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801689e:	693b      	ldr	r3, [r7, #16]
 80168a0:	3b01      	subs	r3, #1
 80168a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80168a4:	693b      	ldr	r3, [r7, #16]
 80168a6:	1c5a      	adds	r2, r3, #1
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80168ac:	697b      	ldr	r3, [r7, #20]
}
 80168ae:	4618      	mov	r0, r3
 80168b0:	3718      	adds	r7, #24
 80168b2:	46bd      	mov	sp, r7
 80168b4:	bd80      	pop	{r7, pc}

080168b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80168b6:	b580      	push	{r7, lr}
 80168b8:	b082      	sub	sp, #8
 80168ba:	af00      	add	r7, sp, #0
 80168bc:	6078      	str	r0, [r7, #4]
 80168be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d018      	beq.n	80168fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	68da      	ldr	r2, [r3, #12]
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168d0:	441a      	add	r2, r3
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	68da      	ldr	r2, [r3, #12]
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	689b      	ldr	r3, [r3, #8]
 80168de:	429a      	cmp	r2, r3
 80168e0:	d303      	bcc.n	80168ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	681a      	ldr	r2, [r3, #0]
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	68d9      	ldr	r1, [r3, #12]
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168f2:	461a      	mov	r2, r3
 80168f4:	6838      	ldr	r0, [r7, #0]
 80168f6:	f003 f999 	bl	8019c2c <memcpy>
	}
}
 80168fa:	bf00      	nop
 80168fc:	3708      	adds	r7, #8
 80168fe:	46bd      	mov	sp, r7
 8016900:	bd80      	pop	{r7, pc}

08016902 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016902:	b580      	push	{r7, lr}
 8016904:	b084      	sub	sp, #16
 8016906:	af00      	add	r7, sp, #0
 8016908:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801690a:	f002 fad3 	bl	8018eb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016914:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016916:	e011      	b.n	801693c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801691c:	2b00      	cmp	r3, #0
 801691e:	d012      	beq.n	8016946 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	3324      	adds	r3, #36	; 0x24
 8016924:	4618      	mov	r0, r3
 8016926:	f001 f933 	bl	8017b90 <xTaskRemoveFromEventList>
 801692a:	4603      	mov	r3, r0
 801692c:	2b00      	cmp	r3, #0
 801692e:	d001      	beq.n	8016934 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016930:	f001 fa30 	bl	8017d94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016934:	7bfb      	ldrb	r3, [r7, #15]
 8016936:	3b01      	subs	r3, #1
 8016938:	b2db      	uxtb	r3, r3
 801693a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801693c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016940:	2b00      	cmp	r3, #0
 8016942:	dce9      	bgt.n	8016918 <prvUnlockQueue+0x16>
 8016944:	e000      	b.n	8016948 <prvUnlockQueue+0x46>
					break;
 8016946:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	22ff      	movs	r2, #255	; 0xff
 801694c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016950:	f002 fae0 	bl	8018f14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016954:	f002 faae 	bl	8018eb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801695e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016960:	e011      	b.n	8016986 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	691b      	ldr	r3, [r3, #16]
 8016966:	2b00      	cmp	r3, #0
 8016968:	d012      	beq.n	8016990 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	3310      	adds	r3, #16
 801696e:	4618      	mov	r0, r3
 8016970:	f001 f90e 	bl	8017b90 <xTaskRemoveFromEventList>
 8016974:	4603      	mov	r3, r0
 8016976:	2b00      	cmp	r3, #0
 8016978:	d001      	beq.n	801697e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801697a:	f001 fa0b 	bl	8017d94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801697e:	7bbb      	ldrb	r3, [r7, #14]
 8016980:	3b01      	subs	r3, #1
 8016982:	b2db      	uxtb	r3, r3
 8016984:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016986:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801698a:	2b00      	cmp	r3, #0
 801698c:	dce9      	bgt.n	8016962 <prvUnlockQueue+0x60>
 801698e:	e000      	b.n	8016992 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016990:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	22ff      	movs	r2, #255	; 0xff
 8016996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801699a:	f002 fabb 	bl	8018f14 <vPortExitCritical>
}
 801699e:	bf00      	nop
 80169a0:	3710      	adds	r7, #16
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}

080169a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80169a6:	b580      	push	{r7, lr}
 80169a8:	b084      	sub	sp, #16
 80169aa:	af00      	add	r7, sp, #0
 80169ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80169ae:	f002 fa81 	bl	8018eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d102      	bne.n	80169c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80169ba:	2301      	movs	r3, #1
 80169bc:	60fb      	str	r3, [r7, #12]
 80169be:	e001      	b.n	80169c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80169c0:	2300      	movs	r3, #0
 80169c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80169c4:	f002 faa6 	bl	8018f14 <vPortExitCritical>

	return xReturn;
 80169c8:	68fb      	ldr	r3, [r7, #12]
}
 80169ca:	4618      	mov	r0, r3
 80169cc:	3710      	adds	r7, #16
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80169d2:	b580      	push	{r7, lr}
 80169d4:	b084      	sub	sp, #16
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80169da:	f002 fa6b 	bl	8018eb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169e6:	429a      	cmp	r2, r3
 80169e8:	d102      	bne.n	80169f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80169ea:	2301      	movs	r3, #1
 80169ec:	60fb      	str	r3, [r7, #12]
 80169ee:	e001      	b.n	80169f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80169f0:	2300      	movs	r3, #0
 80169f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80169f4:	f002 fa8e 	bl	8018f14 <vPortExitCritical>

	return xReturn;
 80169f8:	68fb      	ldr	r3, [r7, #12]
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3710      	adds	r7, #16
 80169fe:	46bd      	mov	sp, r7
 8016a00:	bd80      	pop	{r7, pc}
	...

08016a04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016a04:	b480      	push	{r7}
 8016a06:	b085      	sub	sp, #20
 8016a08:	af00      	add	r7, sp, #0
 8016a0a:	6078      	str	r0, [r7, #4]
 8016a0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016a0e:	2300      	movs	r3, #0
 8016a10:	60fb      	str	r3, [r7, #12]
 8016a12:	e014      	b.n	8016a3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016a14:	4a0f      	ldr	r2, [pc, #60]	; (8016a54 <vQueueAddToRegistry+0x50>)
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d10b      	bne.n	8016a38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016a20:	490c      	ldr	r1, [pc, #48]	; (8016a54 <vQueueAddToRegistry+0x50>)
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	683a      	ldr	r2, [r7, #0]
 8016a26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016a2a:	4a0a      	ldr	r2, [pc, #40]	; (8016a54 <vQueueAddToRegistry+0x50>)
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	00db      	lsls	r3, r3, #3
 8016a30:	4413      	add	r3, r2
 8016a32:	687a      	ldr	r2, [r7, #4]
 8016a34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016a36:	e006      	b.n	8016a46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	3301      	adds	r3, #1
 8016a3c:	60fb      	str	r3, [r7, #12]
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	2b07      	cmp	r3, #7
 8016a42:	d9e7      	bls.n	8016a14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016a44:	bf00      	nop
 8016a46:	bf00      	nop
 8016a48:	3714      	adds	r7, #20
 8016a4a:	46bd      	mov	sp, r7
 8016a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a50:	4770      	bx	lr
 8016a52:	bf00      	nop
 8016a54:	20001e48 	.word	0x20001e48

08016a58 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016a58:	b480      	push	{r7}
 8016a5a:	b085      	sub	sp, #20
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016a60:	2300      	movs	r3, #0
 8016a62:	60fb      	str	r3, [r7, #12]
 8016a64:	e016      	b.n	8016a94 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016a66:	4a10      	ldr	r2, [pc, #64]	; (8016aa8 <vQueueUnregisterQueue+0x50>)
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	00db      	lsls	r3, r3, #3
 8016a6c:	4413      	add	r3, r2
 8016a6e:	685b      	ldr	r3, [r3, #4]
 8016a70:	687a      	ldr	r2, [r7, #4]
 8016a72:	429a      	cmp	r2, r3
 8016a74:	d10b      	bne.n	8016a8e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016a76:	4a0c      	ldr	r2, [pc, #48]	; (8016aa8 <vQueueUnregisterQueue+0x50>)
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	2100      	movs	r1, #0
 8016a7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016a80:	4a09      	ldr	r2, [pc, #36]	; (8016aa8 <vQueueUnregisterQueue+0x50>)
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	00db      	lsls	r3, r3, #3
 8016a86:	4413      	add	r3, r2
 8016a88:	2200      	movs	r2, #0
 8016a8a:	605a      	str	r2, [r3, #4]
				break;
 8016a8c:	e006      	b.n	8016a9c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	3301      	adds	r3, #1
 8016a92:	60fb      	str	r3, [r7, #12]
 8016a94:	68fb      	ldr	r3, [r7, #12]
 8016a96:	2b07      	cmp	r3, #7
 8016a98:	d9e5      	bls.n	8016a66 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016a9a:	bf00      	nop
 8016a9c:	bf00      	nop
 8016a9e:	3714      	adds	r7, #20
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa6:	4770      	bx	lr
 8016aa8:	20001e48 	.word	0x20001e48

08016aac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b086      	sub	sp, #24
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	60f8      	str	r0, [r7, #12]
 8016ab4:	60b9      	str	r1, [r7, #8]
 8016ab6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016ab8:	68fb      	ldr	r3, [r7, #12]
 8016aba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016abc:	f002 f9fa 	bl	8018eb4 <vPortEnterCritical>
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016ac6:	b25b      	sxtb	r3, r3
 8016ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016acc:	d103      	bne.n	8016ad6 <vQueueWaitForMessageRestricted+0x2a>
 8016ace:	697b      	ldr	r3, [r7, #20]
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016ad6:	697b      	ldr	r3, [r7, #20]
 8016ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016adc:	b25b      	sxtb	r3, r3
 8016ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ae2:	d103      	bne.n	8016aec <vQueueWaitForMessageRestricted+0x40>
 8016ae4:	697b      	ldr	r3, [r7, #20]
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016aec:	f002 fa12 	bl	8018f14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016af0:	697b      	ldr	r3, [r7, #20]
 8016af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	d106      	bne.n	8016b06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	3324      	adds	r3, #36	; 0x24
 8016afc:	687a      	ldr	r2, [r7, #4]
 8016afe:	68b9      	ldr	r1, [r7, #8]
 8016b00:	4618      	mov	r0, r3
 8016b02:	f001 f819 	bl	8017b38 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016b06:	6978      	ldr	r0, [r7, #20]
 8016b08:	f7ff fefb 	bl	8016902 <prvUnlockQueue>
	}
 8016b0c:	bf00      	nop
 8016b0e:	3718      	adds	r7, #24
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b08c      	sub	sp, #48	; 0x30
 8016b18:	af02      	add	r7, sp, #8
 8016b1a:	60f8      	str	r0, [r7, #12]
 8016b1c:	60b9      	str	r1, [r7, #8]
 8016b1e:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	2b01      	cmp	r3, #1
 8016b24:	d110      	bne.n	8016b48 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8016b26:	2301      	movs	r3, #1
 8016b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	2b04      	cmp	r3, #4
 8016b30:	d81b      	bhi.n	8016b6a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8016b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b36:	f383 8811 	msr	BASEPRI, r3
 8016b3a:	f3bf 8f6f 	isb	sy
 8016b3e:	f3bf 8f4f 	dsb	sy
 8016b42:	61fb      	str	r3, [r7, #28]
}
 8016b44:	bf00      	nop
 8016b46:	e7fe      	b.n	8016b46 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8016b48:	2300      	movs	r3, #0
 8016b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d10a      	bne.n	8016b6a <xStreamBufferGenericCreate+0x56>
	__asm volatile
 8016b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b58:	f383 8811 	msr	BASEPRI, r3
 8016b5c:	f3bf 8f6f 	isb	sy
 8016b60:	f3bf 8f4f 	dsb	sy
 8016b64:	61bb      	str	r3, [r7, #24]
}
 8016b66:	bf00      	nop
 8016b68:	e7fe      	b.n	8016b68 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8016b6a:	68ba      	ldr	r2, [r7, #8]
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	429a      	cmp	r2, r3
 8016b70:	d90a      	bls.n	8016b88 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 8016b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b76:	f383 8811 	msr	BASEPRI, r3
 8016b7a:	f3bf 8f6f 	isb	sy
 8016b7e:	f3bf 8f4f 	dsb	sy
 8016b82:	617b      	str	r3, [r7, #20]
}
 8016b84:	bf00      	nop
 8016b86:	e7fe      	b.n	8016b86 <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8016b88:	68bb      	ldr	r3, [r7, #8]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d101      	bne.n	8016b92 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8016b8e:	2301      	movs	r3, #1
 8016b90:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	3301      	adds	r3, #1
 8016b96:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8016b98:	68fb      	ldr	r3, [r7, #12]
 8016b9a:	3324      	adds	r3, #36	; 0x24
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	f002 faab 	bl	80190f8 <pvPortMalloc>
 8016ba2:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8016ba4:	6a3b      	ldr	r3, [r7, #32]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d00a      	beq.n	8016bc0 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8016baa:	6a3b      	ldr	r3, [r7, #32]
 8016bac:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8016bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016bb4:	9300      	str	r3, [sp, #0]
 8016bb6:	68bb      	ldr	r3, [r7, #8]
 8016bb8:	68fa      	ldr	r2, [r7, #12]
 8016bba:	6a38      	ldr	r0, [r7, #32]
 8016bbc:	f000 fafd 	bl	80171ba <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8016bc0:	6a3b      	ldr	r3, [r7, #32]
	}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	3728      	adds	r7, #40	; 0x28
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	bd80      	pop	{r7, pc}

08016bca <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8016bca:	b480      	push	{r7}
 8016bcc:	b087      	sub	sp, #28
 8016bce:	af00      	add	r7, sp, #0
 8016bd0:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8016bd6:	693b      	ldr	r3, [r7, #16]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d10a      	bne.n	8016bf2 <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8016bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016be0:	f383 8811 	msr	BASEPRI, r3
 8016be4:	f3bf 8f6f 	isb	sy
 8016be8:	f3bf 8f4f 	dsb	sy
 8016bec:	60fb      	str	r3, [r7, #12]
}
 8016bee:	bf00      	nop
 8016bf0:	e7fe      	b.n	8016bf0 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8016bf2:	693b      	ldr	r3, [r7, #16]
 8016bf4:	689a      	ldr	r2, [r3, #8]
 8016bf6:	693b      	ldr	r3, [r7, #16]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	4413      	add	r3, r2
 8016bfc:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	697a      	ldr	r2, [r7, #20]
 8016c04:	1ad3      	subs	r3, r2, r3
 8016c06:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8016c08:	697b      	ldr	r3, [r7, #20]
 8016c0a:	3b01      	subs	r3, #1
 8016c0c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8016c0e:	693b      	ldr	r3, [r7, #16]
 8016c10:	689b      	ldr	r3, [r3, #8]
 8016c12:	697a      	ldr	r2, [r7, #20]
 8016c14:	429a      	cmp	r2, r3
 8016c16:	d304      	bcc.n	8016c22 <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8016c18:	693b      	ldr	r3, [r7, #16]
 8016c1a:	689b      	ldr	r3, [r3, #8]
 8016c1c:	697a      	ldr	r2, [r7, #20]
 8016c1e:	1ad3      	subs	r3, r2, r3
 8016c20:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8016c22:	697b      	ldr	r3, [r7, #20]
}
 8016c24:	4618      	mov	r0, r3
 8016c26:	371c      	adds	r7, #28
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c2e:	4770      	bx	lr

08016c30 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b090      	sub	sp, #64	; 0x40
 8016c34:	af02      	add	r7, sp, #8
 8016c36:	60f8      	str	r0, [r7, #12]
 8016c38:	60b9      	str	r1, [r7, #8]
 8016c3a:	607a      	str	r2, [r7, #4]
 8016c3c:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 8016c42:	2300      	movs	r3, #0
 8016c44:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8016c4a:	68bb      	ldr	r3, [r7, #8]
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d10a      	bne.n	8016c66 <xStreamBufferSend+0x36>
	__asm volatile
 8016c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c54:	f383 8811 	msr	BASEPRI, r3
 8016c58:	f3bf 8f6f 	isb	sy
 8016c5c:	f3bf 8f4f 	dsb	sy
 8016c60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016c62:	bf00      	nop
 8016c64:	e7fe      	b.n	8016c64 <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 8016c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d10a      	bne.n	8016c82 <xStreamBufferSend+0x52>
	__asm volatile
 8016c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c70:	f383 8811 	msr	BASEPRI, r3
 8016c74:	f3bf 8f6f 	isb	sy
 8016c78:	f3bf 8f4f 	dsb	sy
 8016c7c:	623b      	str	r3, [r7, #32]
}
 8016c7e:	bf00      	nop
 8016c80:	e7fe      	b.n	8016c80 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8016c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c84:	7f1b      	ldrb	r3, [r3, #28]
 8016c86:	f003 0301 	and.w	r3, r3, #1
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d011      	beq.n	8016cb2 <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8016c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c90:	3304      	adds	r3, #4
 8016c92:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 8016c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	d80a      	bhi.n	8016cb2 <xStreamBufferSend+0x82>
	__asm volatile
 8016c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ca0:	f383 8811 	msr	BASEPRI, r3
 8016ca4:	f3bf 8f6f 	isb	sy
 8016ca8:	f3bf 8f4f 	dsb	sy
 8016cac:	61fb      	str	r3, [r7, #28]
}
 8016cae:	bf00      	nop
 8016cb0:	e7fe      	b.n	8016cb0 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8016cb2:	683b      	ldr	r3, [r7, #0]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d03e      	beq.n	8016d36 <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8016cb8:	f107 0310 	add.w	r3, r7, #16
 8016cbc:	4618      	mov	r0, r3
 8016cbe:	f000 ffcb 	bl	8017c58 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8016cc2:	f002 f8f7 	bl	8018eb4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8016cc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016cc8:	f7ff ff7f 	bl	8016bca <xStreamBufferSpacesAvailable>
 8016ccc:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8016cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cd2:	429a      	cmp	r2, r3
 8016cd4:	d217      	bcs.n	8016d06 <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8016cd6:	2000      	movs	r0, #0
 8016cd8:	f001 fbfa 	bl	80184d0 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8016cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cde:	695b      	ldr	r3, [r3, #20]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d00a      	beq.n	8016cfa <xStreamBufferSend+0xca>
	__asm volatile
 8016ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ce8:	f383 8811 	msr	BASEPRI, r3
 8016cec:	f3bf 8f6f 	isb	sy
 8016cf0:	f3bf 8f4f 	dsb	sy
 8016cf4:	61bb      	str	r3, [r7, #24]
}
 8016cf6:	bf00      	nop
 8016cf8:	e7fe      	b.n	8016cf8 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8016cfa:	f001 f931 	bl	8017f60 <xTaskGetCurrentTaskHandle>
 8016cfe:	4602      	mov	r2, r0
 8016d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d02:	615a      	str	r2, [r3, #20]
 8016d04:	e002      	b.n	8016d0c <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8016d06:	f002 f905 	bl	8018f14 <vPortExitCritical>
					break;
 8016d0a:	e014      	b.n	8016d36 <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8016d0c:	f002 f902 	bl	8018f14 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8016d10:	683b      	ldr	r3, [r7, #0]
 8016d12:	2200      	movs	r2, #0
 8016d14:	2100      	movs	r1, #0
 8016d16:	2000      	movs	r0, #0
 8016d18:	f001 fabc 	bl	8018294 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8016d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d1e:	2200      	movs	r2, #0
 8016d20:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8016d22:	463a      	mov	r2, r7
 8016d24:	f107 0310 	add.w	r3, r7, #16
 8016d28:	4611      	mov	r1, r2
 8016d2a:	4618      	mov	r0, r3
 8016d2c:	f000 ffd0 	bl	8017cd0 <xTaskCheckForTimeOut>
 8016d30:	4603      	mov	r3, r0
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d0c5      	beq.n	8016cc2 <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8016d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d103      	bne.n	8016d44 <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8016d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d3e:	f7ff ff44 	bl	8016bca <xStreamBufferSpacesAvailable>
 8016d42:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8016d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d46:	9300      	str	r3, [sp, #0]
 8016d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d4a:	687a      	ldr	r2, [r7, #4]
 8016d4c:	68b9      	ldr	r1, [r7, #8]
 8016d4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d50:	f000 f823 	bl	8016d9a <prvWriteMessageToBuffer>
 8016d54:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8016d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d019      	beq.n	8016d90 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8016d5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016d5e:	f000 fa0c 	bl	801717a <prvBytesInBuffer>
 8016d62:	4602      	mov	r2, r0
 8016d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d66:	68db      	ldr	r3, [r3, #12]
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	d311      	bcc.n	8016d90 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8016d6c:	f000 fcba 	bl	80176e4 <vTaskSuspendAll>
 8016d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d72:	691b      	ldr	r3, [r3, #16]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d009      	beq.n	8016d8c <xStreamBufferSend+0x15c>
 8016d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d7a:	6918      	ldr	r0, [r3, #16]
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	2200      	movs	r2, #0
 8016d80:	2100      	movs	r1, #0
 8016d82:	f001 fae7 	bl	8018354 <xTaskGenericNotify>
 8016d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016d88:	2200      	movs	r2, #0
 8016d8a:	611a      	str	r2, [r3, #16]
 8016d8c:	f000 fcb8 	bl	8017700 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8016d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8016d92:	4618      	mov	r0, r3
 8016d94:	3738      	adds	r7, #56	; 0x38
 8016d96:	46bd      	mov	sp, r7
 8016d98:	bd80      	pop	{r7, pc}

08016d9a <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8016d9a:	b580      	push	{r7, lr}
 8016d9c:	b086      	sub	sp, #24
 8016d9e:	af00      	add	r7, sp, #0
 8016da0:	60f8      	str	r0, [r7, #12]
 8016da2:	60b9      	str	r1, [r7, #8]
 8016da4:	607a      	str	r2, [r7, #4]
 8016da6:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8016da8:	683b      	ldr	r3, [r7, #0]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d102      	bne.n	8016db4 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8016dae:	2300      	movs	r3, #0
 8016db0:	617b      	str	r3, [r7, #20]
 8016db2:	e01d      	b.n	8016df0 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	7f1b      	ldrb	r3, [r3, #28]
 8016db8:	f003 0301 	and.w	r3, r3, #1
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d108      	bne.n	8016dd2 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8016dc0:	2301      	movs	r3, #1
 8016dc2:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8016dc4:	687a      	ldr	r2, [r7, #4]
 8016dc6:	683b      	ldr	r3, [r7, #0]
 8016dc8:	4293      	cmp	r3, r2
 8016dca:	bf28      	it	cs
 8016dcc:	4613      	movcs	r3, r2
 8016dce:	607b      	str	r3, [r7, #4]
 8016dd0:	e00e      	b.n	8016df0 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8016dd2:	683a      	ldr	r2, [r7, #0]
 8016dd4:	6a3b      	ldr	r3, [r7, #32]
 8016dd6:	429a      	cmp	r2, r3
 8016dd8:	d308      	bcc.n	8016dec <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8016dda:	2301      	movs	r3, #1
 8016ddc:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8016dde:	1d3b      	adds	r3, r7, #4
 8016de0:	2204      	movs	r2, #4
 8016de2:	4619      	mov	r1, r3
 8016de4:	68f8      	ldr	r0, [r7, #12]
 8016de6:	f000 f8dc 	bl	8016fa2 <prvWriteBytesToBuffer>
 8016dea:	e001      	b.n	8016df0 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8016dec:	2300      	movs	r3, #0
 8016dee:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8016df0:	697b      	ldr	r3, [r7, #20]
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d007      	beq.n	8016e06 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	461a      	mov	r2, r3
 8016dfa:	68b9      	ldr	r1, [r7, #8]
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f000 f8d0 	bl	8016fa2 <prvWriteBytesToBuffer>
 8016e02:	6138      	str	r0, [r7, #16]
 8016e04:	e001      	b.n	8016e0a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8016e06:	2300      	movs	r3, #0
 8016e08:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8016e0a:	693b      	ldr	r3, [r7, #16]
}
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	3718      	adds	r7, #24
 8016e10:	46bd      	mov	sp, r7
 8016e12:	bd80      	pop	{r7, pc}

08016e14 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	b08e      	sub	sp, #56	; 0x38
 8016e18:	af02      	add	r7, sp, #8
 8016e1a:	60f8      	str	r0, [r7, #12]
 8016e1c:	60b9      	str	r1, [r7, #8]
 8016e1e:	607a      	str	r2, [r7, #4]
 8016e20:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8016e22:	68fb      	ldr	r3, [r7, #12]
 8016e24:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8016e26:	2300      	movs	r3, #0
 8016e28:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8016e2a:	68bb      	ldr	r3, [r7, #8]
 8016e2c:	2b00      	cmp	r3, #0
 8016e2e:	d10a      	bne.n	8016e46 <xStreamBufferReceive+0x32>
	__asm volatile
 8016e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e34:	f383 8811 	msr	BASEPRI, r3
 8016e38:	f3bf 8f6f 	isb	sy
 8016e3c:	f3bf 8f4f 	dsb	sy
 8016e40:	61fb      	str	r3, [r7, #28]
}
 8016e42:	bf00      	nop
 8016e44:	e7fe      	b.n	8016e44 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8016e46:	6a3b      	ldr	r3, [r7, #32]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d10a      	bne.n	8016e62 <xStreamBufferReceive+0x4e>
	__asm volatile
 8016e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e50:	f383 8811 	msr	BASEPRI, r3
 8016e54:	f3bf 8f6f 	isb	sy
 8016e58:	f3bf 8f4f 	dsb	sy
 8016e5c:	61bb      	str	r3, [r7, #24]
}
 8016e5e:	bf00      	nop
 8016e60:	e7fe      	b.n	8016e60 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8016e62:	6a3b      	ldr	r3, [r7, #32]
 8016e64:	7f1b      	ldrb	r3, [r3, #28]
 8016e66:	f003 0301 	and.w	r3, r3, #1
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d002      	beq.n	8016e74 <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8016e6e:	2304      	movs	r3, #4
 8016e70:	627b      	str	r3, [r7, #36]	; 0x24
 8016e72:	e001      	b.n	8016e78 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8016e74:	2300      	movs	r3, #0
 8016e76:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8016e78:	683b      	ldr	r3, [r7, #0]
 8016e7a:	2b00      	cmp	r3, #0
 8016e7c:	d034      	beq.n	8016ee8 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8016e7e:	f002 f819 	bl	8018eb4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8016e82:	6a38      	ldr	r0, [r7, #32]
 8016e84:	f000 f979 	bl	801717a <prvBytesInBuffer>
 8016e88:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8016e8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e8e:	429a      	cmp	r2, r3
 8016e90:	d816      	bhi.n	8016ec0 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8016e92:	2000      	movs	r0, #0
 8016e94:	f001 fb1c 	bl	80184d0 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8016e98:	6a3b      	ldr	r3, [r7, #32]
 8016e9a:	691b      	ldr	r3, [r3, #16]
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d00a      	beq.n	8016eb6 <xStreamBufferReceive+0xa2>
	__asm volatile
 8016ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ea4:	f383 8811 	msr	BASEPRI, r3
 8016ea8:	f3bf 8f6f 	isb	sy
 8016eac:	f3bf 8f4f 	dsb	sy
 8016eb0:	617b      	str	r3, [r7, #20]
}
 8016eb2:	bf00      	nop
 8016eb4:	e7fe      	b.n	8016eb4 <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8016eb6:	f001 f853 	bl	8017f60 <xTaskGetCurrentTaskHandle>
 8016eba:	4602      	mov	r2, r0
 8016ebc:	6a3b      	ldr	r3, [r7, #32]
 8016ebe:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8016ec0:	f002 f828 	bl	8018f14 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8016ec4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec8:	429a      	cmp	r2, r3
 8016eca:	d811      	bhi.n	8016ef0 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8016ecc:	683b      	ldr	r3, [r7, #0]
 8016ece:	2200      	movs	r2, #0
 8016ed0:	2100      	movs	r1, #0
 8016ed2:	2000      	movs	r0, #0
 8016ed4:	f001 f9de 	bl	8018294 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8016ed8:	6a3b      	ldr	r3, [r7, #32]
 8016eda:	2200      	movs	r2, #0
 8016edc:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8016ede:	6a38      	ldr	r0, [r7, #32]
 8016ee0:	f000 f94b 	bl	801717a <prvBytesInBuffer>
 8016ee4:	62b8      	str	r0, [r7, #40]	; 0x28
 8016ee6:	e003      	b.n	8016ef0 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8016ee8:	6a38      	ldr	r0, [r7, #32]
 8016eea:	f000 f946 	bl	801717a <prvBytesInBuffer>
 8016eee:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8016ef0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ef4:	429a      	cmp	r2, r3
 8016ef6:	d91d      	bls.n	8016f34 <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8016ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016efa:	9300      	str	r3, [sp, #0]
 8016efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efe:	687a      	ldr	r2, [r7, #4]
 8016f00:	68b9      	ldr	r1, [r7, #8]
 8016f02:	6a38      	ldr	r0, [r7, #32]
 8016f04:	f000 f81b 	bl	8016f3e <prvReadMessageFromBuffer>
 8016f08:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8016f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d011      	beq.n	8016f34 <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8016f10:	f000 fbe8 	bl	80176e4 <vTaskSuspendAll>
 8016f14:	6a3b      	ldr	r3, [r7, #32]
 8016f16:	695b      	ldr	r3, [r3, #20]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d009      	beq.n	8016f30 <xStreamBufferReceive+0x11c>
 8016f1c:	6a3b      	ldr	r3, [r7, #32]
 8016f1e:	6958      	ldr	r0, [r3, #20]
 8016f20:	2300      	movs	r3, #0
 8016f22:	2200      	movs	r2, #0
 8016f24:	2100      	movs	r1, #0
 8016f26:	f001 fa15 	bl	8018354 <xTaskGenericNotify>
 8016f2a:	6a3b      	ldr	r3, [r7, #32]
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	615a      	str	r2, [r3, #20]
 8016f30:	f000 fbe6 	bl	8017700 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8016f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	3730      	adds	r7, #48	; 0x30
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}

08016f3e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8016f3e:	b580      	push	{r7, lr}
 8016f40:	b088      	sub	sp, #32
 8016f42:	af00      	add	r7, sp, #0
 8016f44:	60f8      	str	r0, [r7, #12]
 8016f46:	60b9      	str	r1, [r7, #8]
 8016f48:	607a      	str	r2, [r7, #4]
 8016f4a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8016f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d019      	beq.n	8016f86 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8016f58:	f107 0110 	add.w	r1, r7, #16
 8016f5c:	683b      	ldr	r3, [r7, #0]
 8016f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016f60:	68f8      	ldr	r0, [r7, #12]
 8016f62:	f000 f890 	bl	8017086 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8016f66:	693b      	ldr	r3, [r7, #16]
 8016f68:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8016f6a:	683a      	ldr	r2, [r7, #0]
 8016f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f6e:	1ad3      	subs	r3, r2, r3
 8016f70:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8016f72:	69fa      	ldr	r2, [r7, #28]
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	429a      	cmp	r2, r3
 8016f78:	d907      	bls.n	8016f8a <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	69ba      	ldr	r2, [r7, #24]
 8016f7e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8016f80:	2300      	movs	r3, #0
 8016f82:	61fb      	str	r3, [r7, #28]
 8016f84:	e001      	b.n	8016f8a <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8016f8a:	683b      	ldr	r3, [r7, #0]
 8016f8c:	69fa      	ldr	r2, [r7, #28]
 8016f8e:	68b9      	ldr	r1, [r7, #8]
 8016f90:	68f8      	ldr	r0, [r7, #12]
 8016f92:	f000 f878 	bl	8017086 <prvReadBytesFromBuffer>
 8016f96:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8016f98:	697b      	ldr	r3, [r7, #20]
}
 8016f9a:	4618      	mov	r0, r3
 8016f9c:	3720      	adds	r7, #32
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bd80      	pop	{r7, pc}

08016fa2 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8016fa2:	b580      	push	{r7, lr}
 8016fa4:	b08a      	sub	sp, #40	; 0x28
 8016fa6:	af00      	add	r7, sp, #0
 8016fa8:	60f8      	str	r0, [r7, #12]
 8016faa:	60b9      	str	r1, [r7, #8]
 8016fac:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	2b00      	cmp	r3, #0
 8016fb2:	d10a      	bne.n	8016fca <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8016fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fb8:	f383 8811 	msr	BASEPRI, r3
 8016fbc:	f3bf 8f6f 	isb	sy
 8016fc0:	f3bf 8f4f 	dsb	sy
 8016fc4:	61fb      	str	r3, [r7, #28]
}
 8016fc6:	bf00      	nop
 8016fc8:	e7fe      	b.n	8016fc8 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8016fca:	68fb      	ldr	r3, [r7, #12]
 8016fcc:	685b      	ldr	r3, [r3, #4]
 8016fce:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	689a      	ldr	r2, [r3, #8]
 8016fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd6:	1ad3      	subs	r3, r2, r3
 8016fd8:	687a      	ldr	r2, [r7, #4]
 8016fda:	4293      	cmp	r3, r2
 8016fdc:	bf28      	it	cs
 8016fde:	4613      	movcs	r3, r2
 8016fe0:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8016fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fe4:	6a3b      	ldr	r3, [r7, #32]
 8016fe6:	441a      	add	r2, r3
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	689b      	ldr	r3, [r3, #8]
 8016fec:	429a      	cmp	r2, r3
 8016fee:	d90a      	bls.n	8017006 <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8016ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ff4:	f383 8811 	msr	BASEPRI, r3
 8016ff8:	f3bf 8f6f 	isb	sy
 8016ffc:	f3bf 8f4f 	dsb	sy
 8017000:	61bb      	str	r3, [r7, #24]
}
 8017002:	bf00      	nop
 8017004:	e7fe      	b.n	8017004 <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	699a      	ldr	r2, [r3, #24]
 801700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801700c:	4413      	add	r3, r2
 801700e:	6a3a      	ldr	r2, [r7, #32]
 8017010:	68b9      	ldr	r1, [r7, #8]
 8017012:	4618      	mov	r0, r3
 8017014:	f002 fe0a 	bl	8019c2c <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8017018:	687a      	ldr	r2, [r7, #4]
 801701a:	6a3b      	ldr	r3, [r7, #32]
 801701c:	429a      	cmp	r2, r3
 801701e:	d91c      	bls.n	801705a <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8017020:	687a      	ldr	r2, [r7, #4]
 8017022:	6a3b      	ldr	r3, [r7, #32]
 8017024:	1ad2      	subs	r2, r2, r3
 8017026:	68fb      	ldr	r3, [r7, #12]
 8017028:	689b      	ldr	r3, [r3, #8]
 801702a:	429a      	cmp	r2, r3
 801702c:	d90a      	bls.n	8017044 <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 801702e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017032:	f383 8811 	msr	BASEPRI, r3
 8017036:	f3bf 8f6f 	isb	sy
 801703a:	f3bf 8f4f 	dsb	sy
 801703e:	617b      	str	r3, [r7, #20]
}
 8017040:	bf00      	nop
 8017042:	e7fe      	b.n	8017042 <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	6998      	ldr	r0, [r3, #24]
 8017048:	68ba      	ldr	r2, [r7, #8]
 801704a:	6a3b      	ldr	r3, [r7, #32]
 801704c:	18d1      	adds	r1, r2, r3
 801704e:	687a      	ldr	r2, [r7, #4]
 8017050:	6a3b      	ldr	r3, [r7, #32]
 8017052:	1ad3      	subs	r3, r2, r3
 8017054:	461a      	mov	r2, r3
 8017056:	f002 fde9 	bl	8019c2c <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 801705a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	4413      	add	r3, r2
 8017060:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	689b      	ldr	r3, [r3, #8]
 8017066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017068:	429a      	cmp	r2, r3
 801706a:	d304      	bcc.n	8017076 <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	689b      	ldr	r3, [r3, #8]
 8017070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017072:	1ad3      	subs	r3, r2, r3
 8017074:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801707a:	605a      	str	r2, [r3, #4]

	return xCount;
 801707c:	687b      	ldr	r3, [r7, #4]
}
 801707e:	4618      	mov	r0, r3
 8017080:	3728      	adds	r7, #40	; 0x28
 8017082:	46bd      	mov	sp, r7
 8017084:	bd80      	pop	{r7, pc}

08017086 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8017086:	b580      	push	{r7, lr}
 8017088:	b08a      	sub	sp, #40	; 0x28
 801708a:	af00      	add	r7, sp, #0
 801708c:	60f8      	str	r0, [r7, #12]
 801708e:	60b9      	str	r1, [r7, #8]
 8017090:	607a      	str	r2, [r7, #4]
 8017092:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8017094:	687a      	ldr	r2, [r7, #4]
 8017096:	683b      	ldr	r3, [r7, #0]
 8017098:	4293      	cmp	r3, r2
 801709a:	bf28      	it	cs
 801709c:	4613      	movcs	r3, r2
 801709e:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80170a0:	6a3b      	ldr	r3, [r7, #32]
 80170a2:	2b00      	cmp	r3, #0
 80170a4:	d064      	beq.n	8017170 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	689a      	ldr	r2, [r3, #8]
 80170b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80170b2:	1ad3      	subs	r3, r2, r3
 80170b4:	6a3a      	ldr	r2, [r7, #32]
 80170b6:	4293      	cmp	r3, r2
 80170b8:	bf28      	it	cs
 80170ba:	4613      	movcs	r3, r2
 80170bc:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80170be:	69fa      	ldr	r2, [r7, #28]
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	429a      	cmp	r2, r3
 80170c4:	d90a      	bls.n	80170dc <prvReadBytesFromBuffer+0x56>
	__asm volatile
 80170c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ca:	f383 8811 	msr	BASEPRI, r3
 80170ce:	f3bf 8f6f 	isb	sy
 80170d2:	f3bf 8f4f 	dsb	sy
 80170d6:	61bb      	str	r3, [r7, #24]
}
 80170d8:	bf00      	nop
 80170da:	e7fe      	b.n	80170da <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80170dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80170de:	69fb      	ldr	r3, [r7, #28]
 80170e0:	441a      	add	r2, r3
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	689b      	ldr	r3, [r3, #8]
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d90a      	bls.n	8017100 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 80170ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ee:	f383 8811 	msr	BASEPRI, r3
 80170f2:	f3bf 8f6f 	isb	sy
 80170f6:	f3bf 8f4f 	dsb	sy
 80170fa:	617b      	str	r3, [r7, #20]
}
 80170fc:	bf00      	nop
 80170fe:	e7fe      	b.n	80170fe <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	699a      	ldr	r2, [r3, #24]
 8017104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017106:	4413      	add	r3, r2
 8017108:	69fa      	ldr	r2, [r7, #28]
 801710a:	4619      	mov	r1, r3
 801710c:	68b8      	ldr	r0, [r7, #8]
 801710e:	f002 fd8d 	bl	8019c2c <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8017112:	6a3a      	ldr	r2, [r7, #32]
 8017114:	69fb      	ldr	r3, [r7, #28]
 8017116:	429a      	cmp	r2, r3
 8017118:	d919      	bls.n	801714e <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 801711a:	6a3a      	ldr	r2, [r7, #32]
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	429a      	cmp	r2, r3
 8017120:	d90a      	bls.n	8017138 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8017122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017126:	f383 8811 	msr	BASEPRI, r3
 801712a:	f3bf 8f6f 	isb	sy
 801712e:	f3bf 8f4f 	dsb	sy
 8017132:	613b      	str	r3, [r7, #16]
}
 8017134:	bf00      	nop
 8017136:	e7fe      	b.n	8017136 <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8017138:	68ba      	ldr	r2, [r7, #8]
 801713a:	69fb      	ldr	r3, [r7, #28]
 801713c:	18d0      	adds	r0, r2, r3
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	6999      	ldr	r1, [r3, #24]
 8017142:	6a3a      	ldr	r2, [r7, #32]
 8017144:	69fb      	ldr	r3, [r7, #28]
 8017146:	1ad3      	subs	r3, r2, r3
 8017148:	461a      	mov	r2, r3
 801714a:	f002 fd6f 	bl	8019c2c <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 801714e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017150:	6a3b      	ldr	r3, [r7, #32]
 8017152:	4413      	add	r3, r2
 8017154:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	689b      	ldr	r3, [r3, #8]
 801715a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801715c:	429a      	cmp	r2, r3
 801715e:	d304      	bcc.n	801716a <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	689b      	ldr	r3, [r3, #8]
 8017164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017166:	1ad3      	subs	r3, r2, r3
 8017168:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 801716a:	68fb      	ldr	r3, [r7, #12]
 801716c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801716e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8017170:	6a3b      	ldr	r3, [r7, #32]
}
 8017172:	4618      	mov	r0, r3
 8017174:	3728      	adds	r7, #40	; 0x28
 8017176:	46bd      	mov	sp, r7
 8017178:	bd80      	pop	{r7, pc}

0801717a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 801717a:	b480      	push	{r7}
 801717c:	b085      	sub	sp, #20
 801717e:	af00      	add	r7, sp, #0
 8017180:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	689a      	ldr	r2, [r3, #8]
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	685b      	ldr	r3, [r3, #4]
 801718a:	4413      	add	r3, r2
 801718c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	68fa      	ldr	r2, [r7, #12]
 8017194:	1ad3      	subs	r3, r2, r3
 8017196:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	689b      	ldr	r3, [r3, #8]
 801719c:	68fa      	ldr	r2, [r7, #12]
 801719e:	429a      	cmp	r2, r3
 80171a0:	d304      	bcc.n	80171ac <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	689b      	ldr	r3, [r3, #8]
 80171a6:	68fa      	ldr	r2, [r7, #12]
 80171a8:	1ad3      	subs	r3, r2, r3
 80171aa:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80171ac:	68fb      	ldr	r3, [r7, #12]
}
 80171ae:	4618      	mov	r0, r3
 80171b0:	3714      	adds	r7, #20
 80171b2:	46bd      	mov	sp, r7
 80171b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b8:	4770      	bx	lr

080171ba <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80171ba:	b580      	push	{r7, lr}
 80171bc:	b086      	sub	sp, #24
 80171be:	af00      	add	r7, sp, #0
 80171c0:	60f8      	str	r0, [r7, #12]
 80171c2:	60b9      	str	r1, [r7, #8]
 80171c4:	607a      	str	r2, [r7, #4]
 80171c6:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80171c8:	2355      	movs	r3, #85	; 0x55
 80171ca:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80171cc:	687a      	ldr	r2, [r7, #4]
 80171ce:	6979      	ldr	r1, [r7, #20]
 80171d0:	68b8      	ldr	r0, [r7, #8]
 80171d2:	f002 fd39 	bl	8019c48 <memset>
 80171d6:	4602      	mov	r2, r0
 80171d8:	68bb      	ldr	r3, [r7, #8]
 80171da:	4293      	cmp	r3, r2
 80171dc:	d00a      	beq.n	80171f4 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 80171de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171e2:	f383 8811 	msr	BASEPRI, r3
 80171e6:	f3bf 8f6f 	isb	sy
 80171ea:	f3bf 8f4f 	dsb	sy
 80171ee:	613b      	str	r3, [r7, #16]
}
 80171f0:	bf00      	nop
 80171f2:	e7fe      	b.n	80171f2 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80171f4:	2224      	movs	r2, #36	; 0x24
 80171f6:	2100      	movs	r1, #0
 80171f8:	68f8      	ldr	r0, [r7, #12]
 80171fa:	f002 fd25 	bl	8019c48 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	68ba      	ldr	r2, [r7, #8]
 8017202:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8017204:	68fb      	ldr	r3, [r7, #12]
 8017206:	687a      	ldr	r2, [r7, #4]
 8017208:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 801720a:	68fb      	ldr	r3, [r7, #12]
 801720c:	683a      	ldr	r2, [r7, #0]
 801720e:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	f897 2020 	ldrb.w	r2, [r7, #32]
 8017216:	771a      	strb	r2, [r3, #28]
}
 8017218:	bf00      	nop
 801721a:	3718      	adds	r7, #24
 801721c:	46bd      	mov	sp, r7
 801721e:	bd80      	pop	{r7, pc}

08017220 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017220:	b580      	push	{r7, lr}
 8017222:	b08e      	sub	sp, #56	; 0x38
 8017224:	af04      	add	r7, sp, #16
 8017226:	60f8      	str	r0, [r7, #12]
 8017228:	60b9      	str	r1, [r7, #8]
 801722a:	607a      	str	r2, [r7, #4]
 801722c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801722e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017230:	2b00      	cmp	r3, #0
 8017232:	d10a      	bne.n	801724a <xTaskCreateStatic+0x2a>
	__asm volatile
 8017234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017238:	f383 8811 	msr	BASEPRI, r3
 801723c:	f3bf 8f6f 	isb	sy
 8017240:	f3bf 8f4f 	dsb	sy
 8017244:	623b      	str	r3, [r7, #32]
}
 8017246:	bf00      	nop
 8017248:	e7fe      	b.n	8017248 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801724a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801724c:	2b00      	cmp	r3, #0
 801724e:	d10a      	bne.n	8017266 <xTaskCreateStatic+0x46>
	__asm volatile
 8017250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017254:	f383 8811 	msr	BASEPRI, r3
 8017258:	f3bf 8f6f 	isb	sy
 801725c:	f3bf 8f4f 	dsb	sy
 8017260:	61fb      	str	r3, [r7, #28]
}
 8017262:	bf00      	nop
 8017264:	e7fe      	b.n	8017264 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017266:	23c0      	movs	r3, #192	; 0xc0
 8017268:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801726a:	693b      	ldr	r3, [r7, #16]
 801726c:	2bc0      	cmp	r3, #192	; 0xc0
 801726e:	d00a      	beq.n	8017286 <xTaskCreateStatic+0x66>
	__asm volatile
 8017270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017274:	f383 8811 	msr	BASEPRI, r3
 8017278:	f3bf 8f6f 	isb	sy
 801727c:	f3bf 8f4f 	dsb	sy
 8017280:	61bb      	str	r3, [r7, #24]
}
 8017282:	bf00      	nop
 8017284:	e7fe      	b.n	8017284 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017286:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801728a:	2b00      	cmp	r3, #0
 801728c:	d01e      	beq.n	80172cc <xTaskCreateStatic+0xac>
 801728e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017290:	2b00      	cmp	r3, #0
 8017292:	d01b      	beq.n	80172cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017296:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801729a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801729c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172a0:	2202      	movs	r2, #2
 80172a2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80172a6:	2300      	movs	r3, #0
 80172a8:	9303      	str	r3, [sp, #12]
 80172aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ac:	9302      	str	r3, [sp, #8]
 80172ae:	f107 0314 	add.w	r3, r7, #20
 80172b2:	9301      	str	r3, [sp, #4]
 80172b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172b6:	9300      	str	r3, [sp, #0]
 80172b8:	683b      	ldr	r3, [r7, #0]
 80172ba:	687a      	ldr	r2, [r7, #4]
 80172bc:	68b9      	ldr	r1, [r7, #8]
 80172be:	68f8      	ldr	r0, [r7, #12]
 80172c0:	f000 f850 	bl	8017364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80172c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80172c6:	f000 f8f7 	bl	80174b8 <prvAddNewTaskToReadyList>
 80172ca:	e001      	b.n	80172d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80172cc:	2300      	movs	r3, #0
 80172ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80172d0:	697b      	ldr	r3, [r7, #20]
	}
 80172d2:	4618      	mov	r0, r3
 80172d4:	3728      	adds	r7, #40	; 0x28
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}

080172da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80172da:	b580      	push	{r7, lr}
 80172dc:	b08c      	sub	sp, #48	; 0x30
 80172de:	af04      	add	r7, sp, #16
 80172e0:	60f8      	str	r0, [r7, #12]
 80172e2:	60b9      	str	r1, [r7, #8]
 80172e4:	603b      	str	r3, [r7, #0]
 80172e6:	4613      	mov	r3, r2
 80172e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80172ea:	88fb      	ldrh	r3, [r7, #6]
 80172ec:	009b      	lsls	r3, r3, #2
 80172ee:	4618      	mov	r0, r3
 80172f0:	f001 ff02 	bl	80190f8 <pvPortMalloc>
 80172f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80172f6:	697b      	ldr	r3, [r7, #20]
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d00e      	beq.n	801731a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80172fc:	20c0      	movs	r0, #192	; 0xc0
 80172fe:	f001 fefb 	bl	80190f8 <pvPortMalloc>
 8017302:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017304:	69fb      	ldr	r3, [r7, #28]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d003      	beq.n	8017312 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801730a:	69fb      	ldr	r3, [r7, #28]
 801730c:	697a      	ldr	r2, [r7, #20]
 801730e:	631a      	str	r2, [r3, #48]	; 0x30
 8017310:	e005      	b.n	801731e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017312:	6978      	ldr	r0, [r7, #20]
 8017314:	f001 ffc0 	bl	8019298 <vPortFree>
 8017318:	e001      	b.n	801731e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801731a:	2300      	movs	r3, #0
 801731c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801731e:	69fb      	ldr	r3, [r7, #28]
 8017320:	2b00      	cmp	r3, #0
 8017322:	d017      	beq.n	8017354 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017324:	69fb      	ldr	r3, [r7, #28]
 8017326:	2200      	movs	r2, #0
 8017328:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801732c:	88fa      	ldrh	r2, [r7, #6]
 801732e:	2300      	movs	r3, #0
 8017330:	9303      	str	r3, [sp, #12]
 8017332:	69fb      	ldr	r3, [r7, #28]
 8017334:	9302      	str	r3, [sp, #8]
 8017336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017338:	9301      	str	r3, [sp, #4]
 801733a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801733c:	9300      	str	r3, [sp, #0]
 801733e:	683b      	ldr	r3, [r7, #0]
 8017340:	68b9      	ldr	r1, [r7, #8]
 8017342:	68f8      	ldr	r0, [r7, #12]
 8017344:	f000 f80e 	bl	8017364 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017348:	69f8      	ldr	r0, [r7, #28]
 801734a:	f000 f8b5 	bl	80174b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801734e:	2301      	movs	r3, #1
 8017350:	61bb      	str	r3, [r7, #24]
 8017352:	e002      	b.n	801735a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017354:	f04f 33ff 	mov.w	r3, #4294967295
 8017358:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801735a:	69bb      	ldr	r3, [r7, #24]
	}
 801735c:	4618      	mov	r0, r3
 801735e:	3720      	adds	r7, #32
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}

08017364 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b088      	sub	sp, #32
 8017368:	af00      	add	r7, sp, #0
 801736a:	60f8      	str	r0, [r7, #12]
 801736c:	60b9      	str	r1, [r7, #8]
 801736e:	607a      	str	r2, [r7, #4]
 8017370:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017374:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	009b      	lsls	r3, r3, #2
 801737a:	461a      	mov	r2, r3
 801737c:	21a5      	movs	r1, #165	; 0xa5
 801737e:	f002 fc63 	bl	8019c48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801738c:	3b01      	subs	r3, #1
 801738e:	009b      	lsls	r3, r3, #2
 8017390:	4413      	add	r3, r2
 8017392:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017394:	69bb      	ldr	r3, [r7, #24]
 8017396:	f023 0307 	bic.w	r3, r3, #7
 801739a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801739c:	69bb      	ldr	r3, [r7, #24]
 801739e:	f003 0307 	and.w	r3, r3, #7
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d00a      	beq.n	80173bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80173a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80173aa:	f383 8811 	msr	BASEPRI, r3
 80173ae:	f3bf 8f6f 	isb	sy
 80173b2:	f3bf 8f4f 	dsb	sy
 80173b6:	617b      	str	r3, [r7, #20]
}
 80173b8:	bf00      	nop
 80173ba:	e7fe      	b.n	80173ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80173bc:	68bb      	ldr	r3, [r7, #8]
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d01f      	beq.n	8017402 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80173c2:	2300      	movs	r3, #0
 80173c4:	61fb      	str	r3, [r7, #28]
 80173c6:	e012      	b.n	80173ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80173c8:	68ba      	ldr	r2, [r7, #8]
 80173ca:	69fb      	ldr	r3, [r7, #28]
 80173cc:	4413      	add	r3, r2
 80173ce:	7819      	ldrb	r1, [r3, #0]
 80173d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80173d2:	69fb      	ldr	r3, [r7, #28]
 80173d4:	4413      	add	r3, r2
 80173d6:	3334      	adds	r3, #52	; 0x34
 80173d8:	460a      	mov	r2, r1
 80173da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80173dc:	68ba      	ldr	r2, [r7, #8]
 80173de:	69fb      	ldr	r3, [r7, #28]
 80173e0:	4413      	add	r3, r2
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d006      	beq.n	80173f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80173e8:	69fb      	ldr	r3, [r7, #28]
 80173ea:	3301      	adds	r3, #1
 80173ec:	61fb      	str	r3, [r7, #28]
 80173ee:	69fb      	ldr	r3, [r7, #28]
 80173f0:	2b0f      	cmp	r3, #15
 80173f2:	d9e9      	bls.n	80173c8 <prvInitialiseNewTask+0x64>
 80173f4:	e000      	b.n	80173f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80173f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80173f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173fa:	2200      	movs	r2, #0
 80173fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017400:	e003      	b.n	801740a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017404:	2200      	movs	r2, #0
 8017406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801740c:	2b37      	cmp	r3, #55	; 0x37
 801740e:	d901      	bls.n	8017414 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017410:	2337      	movs	r3, #55	; 0x37
 8017412:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017418:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801741a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801741c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801741e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017422:	2200      	movs	r2, #0
 8017424:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017428:	3304      	adds	r3, #4
 801742a:	4618      	mov	r0, r3
 801742c:	f7fe f9de 	bl	80157ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017432:	3318      	adds	r3, #24
 8017434:	4618      	mov	r0, r3
 8017436:	f7fe f9d9 	bl	80157ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801743c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801743e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017442:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017448:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801744c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801744e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8017450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017452:	2200      	movs	r2, #0
 8017454:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017458:	2200      	movs	r2, #0
 801745a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801745e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017460:	2200      	movs	r2, #0
 8017462:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8017466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017468:	3358      	adds	r3, #88	; 0x58
 801746a:	2260      	movs	r2, #96	; 0x60
 801746c:	2100      	movs	r1, #0
 801746e:	4618      	mov	r0, r3
 8017470:	f002 fbea 	bl	8019c48 <memset>
 8017474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017476:	4a0d      	ldr	r2, [pc, #52]	; (80174ac <prvInitialiseNewTask+0x148>)
 8017478:	65da      	str	r2, [r3, #92]	; 0x5c
 801747a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801747c:	4a0c      	ldr	r2, [pc, #48]	; (80174b0 <prvInitialiseNewTask+0x14c>)
 801747e:	661a      	str	r2, [r3, #96]	; 0x60
 8017480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017482:	4a0c      	ldr	r2, [pc, #48]	; (80174b4 <prvInitialiseNewTask+0x150>)
 8017484:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017486:	683a      	ldr	r2, [r7, #0]
 8017488:	68f9      	ldr	r1, [r7, #12]
 801748a:	69b8      	ldr	r0, [r7, #24]
 801748c:	f001 fbe8 	bl	8018c60 <pxPortInitialiseStack>
 8017490:	4602      	mov	r2, r0
 8017492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017494:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017498:	2b00      	cmp	r3, #0
 801749a:	d002      	beq.n	80174a2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801749c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801749e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80174a2:	bf00      	nop
 80174a4:	3720      	adds	r7, #32
 80174a6:	46bd      	mov	sp, r7
 80174a8:	bd80      	pop	{r7, pc}
 80174aa:	bf00      	nop
 80174ac:	0801cd10 	.word	0x0801cd10
 80174b0:	0801cd30 	.word	0x0801cd30
 80174b4:	0801ccf0 	.word	0x0801ccf0

080174b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b082      	sub	sp, #8
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80174c0:	f001 fcf8 	bl	8018eb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80174c4:	4b2d      	ldr	r3, [pc, #180]	; (801757c <prvAddNewTaskToReadyList+0xc4>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	3301      	adds	r3, #1
 80174ca:	4a2c      	ldr	r2, [pc, #176]	; (801757c <prvAddNewTaskToReadyList+0xc4>)
 80174cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80174ce:	4b2c      	ldr	r3, [pc, #176]	; (8017580 <prvAddNewTaskToReadyList+0xc8>)
 80174d0:	681b      	ldr	r3, [r3, #0]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	d109      	bne.n	80174ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80174d6:	4a2a      	ldr	r2, [pc, #168]	; (8017580 <prvAddNewTaskToReadyList+0xc8>)
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80174dc:	4b27      	ldr	r3, [pc, #156]	; (801757c <prvAddNewTaskToReadyList+0xc4>)
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	2b01      	cmp	r3, #1
 80174e2:	d110      	bne.n	8017506 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80174e4:	f000 fc7a 	bl	8017ddc <prvInitialiseTaskLists>
 80174e8:	e00d      	b.n	8017506 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80174ea:	4b26      	ldr	r3, [pc, #152]	; (8017584 <prvAddNewTaskToReadyList+0xcc>)
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d109      	bne.n	8017506 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80174f2:	4b23      	ldr	r3, [pc, #140]	; (8017580 <prvAddNewTaskToReadyList+0xc8>)
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d802      	bhi.n	8017506 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017500:	4a1f      	ldr	r2, [pc, #124]	; (8017580 <prvAddNewTaskToReadyList+0xc8>)
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017506:	4b20      	ldr	r3, [pc, #128]	; (8017588 <prvAddNewTaskToReadyList+0xd0>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	3301      	adds	r3, #1
 801750c:	4a1e      	ldr	r2, [pc, #120]	; (8017588 <prvAddNewTaskToReadyList+0xd0>)
 801750e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017510:	4b1d      	ldr	r3, [pc, #116]	; (8017588 <prvAddNewTaskToReadyList+0xd0>)
 8017512:	681a      	ldr	r2, [r3, #0]
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801751c:	4b1b      	ldr	r3, [pc, #108]	; (801758c <prvAddNewTaskToReadyList+0xd4>)
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	429a      	cmp	r2, r3
 8017522:	d903      	bls.n	801752c <prvAddNewTaskToReadyList+0x74>
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017528:	4a18      	ldr	r2, [pc, #96]	; (801758c <prvAddNewTaskToReadyList+0xd4>)
 801752a:	6013      	str	r3, [r2, #0]
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017530:	4613      	mov	r3, r2
 8017532:	009b      	lsls	r3, r3, #2
 8017534:	4413      	add	r3, r2
 8017536:	009b      	lsls	r3, r3, #2
 8017538:	4a15      	ldr	r2, [pc, #84]	; (8017590 <prvAddNewTaskToReadyList+0xd8>)
 801753a:	441a      	add	r2, r3
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	3304      	adds	r3, #4
 8017540:	4619      	mov	r1, r3
 8017542:	4610      	mov	r0, r2
 8017544:	f7fe f95f 	bl	8015806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017548:	f001 fce4 	bl	8018f14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801754c:	4b0d      	ldr	r3, [pc, #52]	; (8017584 <prvAddNewTaskToReadyList+0xcc>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	2b00      	cmp	r3, #0
 8017552:	d00e      	beq.n	8017572 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017554:	4b0a      	ldr	r3, [pc, #40]	; (8017580 <prvAddNewTaskToReadyList+0xc8>)
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801755e:	429a      	cmp	r2, r3
 8017560:	d207      	bcs.n	8017572 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017562:	4b0c      	ldr	r3, [pc, #48]	; (8017594 <prvAddNewTaskToReadyList+0xdc>)
 8017564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017568:	601a      	str	r2, [r3, #0]
 801756a:	f3bf 8f4f 	dsb	sy
 801756e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017572:	bf00      	nop
 8017574:	3708      	adds	r7, #8
 8017576:	46bd      	mov	sp, r7
 8017578:	bd80      	pop	{r7, pc}
 801757a:	bf00      	nop
 801757c:	2000235c 	.word	0x2000235c
 8017580:	20001e88 	.word	0x20001e88
 8017584:	20002368 	.word	0x20002368
 8017588:	20002378 	.word	0x20002378
 801758c:	20002364 	.word	0x20002364
 8017590:	20001e8c 	.word	0x20001e8c
 8017594:	e000ed04 	.word	0xe000ed04

08017598 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017598:	b580      	push	{r7, lr}
 801759a:	b084      	sub	sp, #16
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80175a0:	2300      	movs	r3, #0
 80175a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d017      	beq.n	80175da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80175aa:	4b13      	ldr	r3, [pc, #76]	; (80175f8 <vTaskDelay+0x60>)
 80175ac:	681b      	ldr	r3, [r3, #0]
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d00a      	beq.n	80175c8 <vTaskDelay+0x30>
	__asm volatile
 80175b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175b6:	f383 8811 	msr	BASEPRI, r3
 80175ba:	f3bf 8f6f 	isb	sy
 80175be:	f3bf 8f4f 	dsb	sy
 80175c2:	60bb      	str	r3, [r7, #8]
}
 80175c4:	bf00      	nop
 80175c6:	e7fe      	b.n	80175c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80175c8:	f000 f88c 	bl	80176e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80175cc:	2100      	movs	r1, #0
 80175ce:	6878      	ldr	r0, [r7, #4]
 80175d0:	f000 ffa4 	bl	801851c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80175d4:	f000 f894 	bl	8017700 <xTaskResumeAll>
 80175d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d107      	bne.n	80175f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80175e0:	4b06      	ldr	r3, [pc, #24]	; (80175fc <vTaskDelay+0x64>)
 80175e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80175e6:	601a      	str	r2, [r3, #0]
 80175e8:	f3bf 8f4f 	dsb	sy
 80175ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80175f0:	bf00      	nop
 80175f2:	3710      	adds	r7, #16
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}
 80175f8:	20002384 	.word	0x20002384
 80175fc:	e000ed04 	.word	0xe000ed04

08017600 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017600:	b580      	push	{r7, lr}
 8017602:	b08a      	sub	sp, #40	; 0x28
 8017604:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017606:	2300      	movs	r3, #0
 8017608:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801760a:	2300      	movs	r3, #0
 801760c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801760e:	463a      	mov	r2, r7
 8017610:	1d39      	adds	r1, r7, #4
 8017612:	f107 0308 	add.w	r3, r7, #8
 8017616:	4618      	mov	r0, r3
 8017618:	f7fe f894 	bl	8015744 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801761c:	6839      	ldr	r1, [r7, #0]
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	68ba      	ldr	r2, [r7, #8]
 8017622:	9202      	str	r2, [sp, #8]
 8017624:	9301      	str	r3, [sp, #4]
 8017626:	2300      	movs	r3, #0
 8017628:	9300      	str	r3, [sp, #0]
 801762a:	2300      	movs	r3, #0
 801762c:	460a      	mov	r2, r1
 801762e:	4925      	ldr	r1, [pc, #148]	; (80176c4 <vTaskStartScheduler+0xc4>)
 8017630:	4825      	ldr	r0, [pc, #148]	; (80176c8 <vTaskStartScheduler+0xc8>)
 8017632:	f7ff fdf5 	bl	8017220 <xTaskCreateStatic>
 8017636:	4603      	mov	r3, r0
 8017638:	4a24      	ldr	r2, [pc, #144]	; (80176cc <vTaskStartScheduler+0xcc>)
 801763a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801763c:	4b23      	ldr	r3, [pc, #140]	; (80176cc <vTaskStartScheduler+0xcc>)
 801763e:	681b      	ldr	r3, [r3, #0]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d002      	beq.n	801764a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017644:	2301      	movs	r3, #1
 8017646:	617b      	str	r3, [r7, #20]
 8017648:	e001      	b.n	801764e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801764a:	2300      	movs	r3, #0
 801764c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801764e:	697b      	ldr	r3, [r7, #20]
 8017650:	2b01      	cmp	r3, #1
 8017652:	d102      	bne.n	801765a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017654:	f000 ffb6 	bl	80185c4 <xTimerCreateTimerTask>
 8017658:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	2b01      	cmp	r3, #1
 801765e:	d11d      	bne.n	801769c <vTaskStartScheduler+0x9c>
	__asm volatile
 8017660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017664:	f383 8811 	msr	BASEPRI, r3
 8017668:	f3bf 8f6f 	isb	sy
 801766c:	f3bf 8f4f 	dsb	sy
 8017670:	613b      	str	r3, [r7, #16]
}
 8017672:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017674:	4b16      	ldr	r3, [pc, #88]	; (80176d0 <vTaskStartScheduler+0xd0>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	3358      	adds	r3, #88	; 0x58
 801767a:	4a16      	ldr	r2, [pc, #88]	; (80176d4 <vTaskStartScheduler+0xd4>)
 801767c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801767e:	4b16      	ldr	r3, [pc, #88]	; (80176d8 <vTaskStartScheduler+0xd8>)
 8017680:	f04f 32ff 	mov.w	r2, #4294967295
 8017684:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017686:	4b15      	ldr	r3, [pc, #84]	; (80176dc <vTaskStartScheduler+0xdc>)
 8017688:	2201      	movs	r2, #1
 801768a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801768c:	4b14      	ldr	r3, [pc, #80]	; (80176e0 <vTaskStartScheduler+0xe0>)
 801768e:	2200      	movs	r2, #0
 8017690:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8017692:	f7f5 fbf1 	bl	800ce78 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017696:	f001 fb6b 	bl	8018d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801769a:	e00e      	b.n	80176ba <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801769c:	697b      	ldr	r3, [r7, #20]
 801769e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80176a2:	d10a      	bne.n	80176ba <vTaskStartScheduler+0xba>
	__asm volatile
 80176a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176a8:	f383 8811 	msr	BASEPRI, r3
 80176ac:	f3bf 8f6f 	isb	sy
 80176b0:	f3bf 8f4f 	dsb	sy
 80176b4:	60fb      	str	r3, [r7, #12]
}
 80176b6:	bf00      	nop
 80176b8:	e7fe      	b.n	80176b8 <vTaskStartScheduler+0xb8>
}
 80176ba:	bf00      	nop
 80176bc:	3718      	adds	r7, #24
 80176be:	46bd      	mov	sp, r7
 80176c0:	bd80      	pop	{r7, pc}
 80176c2:	bf00      	nop
 80176c4:	0801c8b8 	.word	0x0801c8b8
 80176c8:	08017dad 	.word	0x08017dad
 80176cc:	20002380 	.word	0x20002380
 80176d0:	20001e88 	.word	0x20001e88
 80176d4:	20000030 	.word	0x20000030
 80176d8:	2000237c 	.word	0x2000237c
 80176dc:	20002368 	.word	0x20002368
 80176e0:	20002360 	.word	0x20002360

080176e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80176e4:	b480      	push	{r7}
 80176e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80176e8:	4b04      	ldr	r3, [pc, #16]	; (80176fc <vTaskSuspendAll+0x18>)
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	3301      	adds	r3, #1
 80176ee:	4a03      	ldr	r2, [pc, #12]	; (80176fc <vTaskSuspendAll+0x18>)
 80176f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80176f2:	bf00      	nop
 80176f4:	46bd      	mov	sp, r7
 80176f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fa:	4770      	bx	lr
 80176fc:	20002384 	.word	0x20002384

08017700 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b084      	sub	sp, #16
 8017704:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017706:	2300      	movs	r3, #0
 8017708:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801770a:	2300      	movs	r3, #0
 801770c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801770e:	4b42      	ldr	r3, [pc, #264]	; (8017818 <xTaskResumeAll+0x118>)
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d10a      	bne.n	801772c <xTaskResumeAll+0x2c>
	__asm volatile
 8017716:	f04f 0350 	mov.w	r3, #80	; 0x50
 801771a:	f383 8811 	msr	BASEPRI, r3
 801771e:	f3bf 8f6f 	isb	sy
 8017722:	f3bf 8f4f 	dsb	sy
 8017726:	603b      	str	r3, [r7, #0]
}
 8017728:	bf00      	nop
 801772a:	e7fe      	b.n	801772a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801772c:	f001 fbc2 	bl	8018eb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017730:	4b39      	ldr	r3, [pc, #228]	; (8017818 <xTaskResumeAll+0x118>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	3b01      	subs	r3, #1
 8017736:	4a38      	ldr	r2, [pc, #224]	; (8017818 <xTaskResumeAll+0x118>)
 8017738:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801773a:	4b37      	ldr	r3, [pc, #220]	; (8017818 <xTaskResumeAll+0x118>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	2b00      	cmp	r3, #0
 8017740:	d162      	bne.n	8017808 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017742:	4b36      	ldr	r3, [pc, #216]	; (801781c <xTaskResumeAll+0x11c>)
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	2b00      	cmp	r3, #0
 8017748:	d05e      	beq.n	8017808 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801774a:	e02f      	b.n	80177ac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801774c:	4b34      	ldr	r3, [pc, #208]	; (8017820 <xTaskResumeAll+0x120>)
 801774e:	68db      	ldr	r3, [r3, #12]
 8017750:	68db      	ldr	r3, [r3, #12]
 8017752:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	3318      	adds	r3, #24
 8017758:	4618      	mov	r0, r3
 801775a:	f7fe f8b1 	bl	80158c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	3304      	adds	r3, #4
 8017762:	4618      	mov	r0, r3
 8017764:	f7fe f8ac 	bl	80158c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801776c:	4b2d      	ldr	r3, [pc, #180]	; (8017824 <xTaskResumeAll+0x124>)
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	429a      	cmp	r2, r3
 8017772:	d903      	bls.n	801777c <xTaskResumeAll+0x7c>
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017778:	4a2a      	ldr	r2, [pc, #168]	; (8017824 <xTaskResumeAll+0x124>)
 801777a:	6013      	str	r3, [r2, #0]
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017780:	4613      	mov	r3, r2
 8017782:	009b      	lsls	r3, r3, #2
 8017784:	4413      	add	r3, r2
 8017786:	009b      	lsls	r3, r3, #2
 8017788:	4a27      	ldr	r2, [pc, #156]	; (8017828 <xTaskResumeAll+0x128>)
 801778a:	441a      	add	r2, r3
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	3304      	adds	r3, #4
 8017790:	4619      	mov	r1, r3
 8017792:	4610      	mov	r0, r2
 8017794:	f7fe f837 	bl	8015806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801779c:	4b23      	ldr	r3, [pc, #140]	; (801782c <xTaskResumeAll+0x12c>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80177a2:	429a      	cmp	r2, r3
 80177a4:	d302      	bcc.n	80177ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80177a6:	4b22      	ldr	r3, [pc, #136]	; (8017830 <xTaskResumeAll+0x130>)
 80177a8:	2201      	movs	r2, #1
 80177aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80177ac:	4b1c      	ldr	r3, [pc, #112]	; (8017820 <xTaskResumeAll+0x120>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d1cb      	bne.n	801774c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d001      	beq.n	80177be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80177ba:	f000 fbb1 	bl	8017f20 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80177be:	4b1d      	ldr	r3, [pc, #116]	; (8017834 <xTaskResumeAll+0x134>)
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	2b00      	cmp	r3, #0
 80177c8:	d010      	beq.n	80177ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80177ca:	f000 f847 	bl	801785c <xTaskIncrementTick>
 80177ce:	4603      	mov	r3, r0
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d002      	beq.n	80177da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80177d4:	4b16      	ldr	r3, [pc, #88]	; (8017830 <xTaskResumeAll+0x130>)
 80177d6:	2201      	movs	r2, #1
 80177d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	3b01      	subs	r3, #1
 80177de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d1f1      	bne.n	80177ca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80177e6:	4b13      	ldr	r3, [pc, #76]	; (8017834 <xTaskResumeAll+0x134>)
 80177e8:	2200      	movs	r2, #0
 80177ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80177ec:	4b10      	ldr	r3, [pc, #64]	; (8017830 <xTaskResumeAll+0x130>)
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d009      	beq.n	8017808 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80177f4:	2301      	movs	r3, #1
 80177f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80177f8:	4b0f      	ldr	r3, [pc, #60]	; (8017838 <xTaskResumeAll+0x138>)
 80177fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177fe:	601a      	str	r2, [r3, #0]
 8017800:	f3bf 8f4f 	dsb	sy
 8017804:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017808:	f001 fb84 	bl	8018f14 <vPortExitCritical>

	return xAlreadyYielded;
 801780c:	68bb      	ldr	r3, [r7, #8]
}
 801780e:	4618      	mov	r0, r3
 8017810:	3710      	adds	r7, #16
 8017812:	46bd      	mov	sp, r7
 8017814:	bd80      	pop	{r7, pc}
 8017816:	bf00      	nop
 8017818:	20002384 	.word	0x20002384
 801781c:	2000235c 	.word	0x2000235c
 8017820:	2000231c 	.word	0x2000231c
 8017824:	20002364 	.word	0x20002364
 8017828:	20001e8c 	.word	0x20001e8c
 801782c:	20001e88 	.word	0x20001e88
 8017830:	20002370 	.word	0x20002370
 8017834:	2000236c 	.word	0x2000236c
 8017838:	e000ed04 	.word	0xe000ed04

0801783c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801783c:	b480      	push	{r7}
 801783e:	b083      	sub	sp, #12
 8017840:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8017842:	4b05      	ldr	r3, [pc, #20]	; (8017858 <xTaskGetTickCount+0x1c>)
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8017848:	687b      	ldr	r3, [r7, #4]
}
 801784a:	4618      	mov	r0, r3
 801784c:	370c      	adds	r7, #12
 801784e:	46bd      	mov	sp, r7
 8017850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017854:	4770      	bx	lr
 8017856:	bf00      	nop
 8017858:	20002360 	.word	0x20002360

0801785c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801785c:	b580      	push	{r7, lr}
 801785e:	b086      	sub	sp, #24
 8017860:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8017862:	2300      	movs	r3, #0
 8017864:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017866:	4b4f      	ldr	r3, [pc, #316]	; (80179a4 <xTaskIncrementTick+0x148>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	2b00      	cmp	r3, #0
 801786c:	f040 808f 	bne.w	801798e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017870:	4b4d      	ldr	r3, [pc, #308]	; (80179a8 <xTaskIncrementTick+0x14c>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	3301      	adds	r3, #1
 8017876:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017878:	4a4b      	ldr	r2, [pc, #300]	; (80179a8 <xTaskIncrementTick+0x14c>)
 801787a:	693b      	ldr	r3, [r7, #16]
 801787c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801787e:	693b      	ldr	r3, [r7, #16]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d120      	bne.n	80178c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8017884:	4b49      	ldr	r3, [pc, #292]	; (80179ac <xTaskIncrementTick+0x150>)
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	681b      	ldr	r3, [r3, #0]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d00a      	beq.n	80178a4 <xTaskIncrementTick+0x48>
	__asm volatile
 801788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017892:	f383 8811 	msr	BASEPRI, r3
 8017896:	f3bf 8f6f 	isb	sy
 801789a:	f3bf 8f4f 	dsb	sy
 801789e:	603b      	str	r3, [r7, #0]
}
 80178a0:	bf00      	nop
 80178a2:	e7fe      	b.n	80178a2 <xTaskIncrementTick+0x46>
 80178a4:	4b41      	ldr	r3, [pc, #260]	; (80179ac <xTaskIncrementTick+0x150>)
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	60fb      	str	r3, [r7, #12]
 80178aa:	4b41      	ldr	r3, [pc, #260]	; (80179b0 <xTaskIncrementTick+0x154>)
 80178ac:	681b      	ldr	r3, [r3, #0]
 80178ae:	4a3f      	ldr	r2, [pc, #252]	; (80179ac <xTaskIncrementTick+0x150>)
 80178b0:	6013      	str	r3, [r2, #0]
 80178b2:	4a3f      	ldr	r2, [pc, #252]	; (80179b0 <xTaskIncrementTick+0x154>)
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	6013      	str	r3, [r2, #0]
 80178b8:	4b3e      	ldr	r3, [pc, #248]	; (80179b4 <xTaskIncrementTick+0x158>)
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	3301      	adds	r3, #1
 80178be:	4a3d      	ldr	r2, [pc, #244]	; (80179b4 <xTaskIncrementTick+0x158>)
 80178c0:	6013      	str	r3, [r2, #0]
 80178c2:	f000 fb2d 	bl	8017f20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80178c6:	4b3c      	ldr	r3, [pc, #240]	; (80179b8 <xTaskIncrementTick+0x15c>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	693a      	ldr	r2, [r7, #16]
 80178cc:	429a      	cmp	r2, r3
 80178ce:	d349      	bcc.n	8017964 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80178d0:	4b36      	ldr	r3, [pc, #216]	; (80179ac <xTaskIncrementTick+0x150>)
 80178d2:	681b      	ldr	r3, [r3, #0]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d104      	bne.n	80178e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80178da:	4b37      	ldr	r3, [pc, #220]	; (80179b8 <xTaskIncrementTick+0x15c>)
 80178dc:	f04f 32ff 	mov.w	r2, #4294967295
 80178e0:	601a      	str	r2, [r3, #0]
					break;
 80178e2:	e03f      	b.n	8017964 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80178e4:	4b31      	ldr	r3, [pc, #196]	; (80179ac <xTaskIncrementTick+0x150>)
 80178e6:	681b      	ldr	r3, [r3, #0]
 80178e8:	68db      	ldr	r3, [r3, #12]
 80178ea:	68db      	ldr	r3, [r3, #12]
 80178ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80178ee:	68bb      	ldr	r3, [r7, #8]
 80178f0:	685b      	ldr	r3, [r3, #4]
 80178f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80178f4:	693a      	ldr	r2, [r7, #16]
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	429a      	cmp	r2, r3
 80178fa:	d203      	bcs.n	8017904 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80178fc:	4a2e      	ldr	r2, [pc, #184]	; (80179b8 <xTaskIncrementTick+0x15c>)
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8017902:	e02f      	b.n	8017964 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017904:	68bb      	ldr	r3, [r7, #8]
 8017906:	3304      	adds	r3, #4
 8017908:	4618      	mov	r0, r3
 801790a:	f7fd ffd9 	bl	80158c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801790e:	68bb      	ldr	r3, [r7, #8]
 8017910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017912:	2b00      	cmp	r3, #0
 8017914:	d004      	beq.n	8017920 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017916:	68bb      	ldr	r3, [r7, #8]
 8017918:	3318      	adds	r3, #24
 801791a:	4618      	mov	r0, r3
 801791c:	f7fd ffd0 	bl	80158c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8017920:	68bb      	ldr	r3, [r7, #8]
 8017922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017924:	4b25      	ldr	r3, [pc, #148]	; (80179bc <xTaskIncrementTick+0x160>)
 8017926:	681b      	ldr	r3, [r3, #0]
 8017928:	429a      	cmp	r2, r3
 801792a:	d903      	bls.n	8017934 <xTaskIncrementTick+0xd8>
 801792c:	68bb      	ldr	r3, [r7, #8]
 801792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017930:	4a22      	ldr	r2, [pc, #136]	; (80179bc <xTaskIncrementTick+0x160>)
 8017932:	6013      	str	r3, [r2, #0]
 8017934:	68bb      	ldr	r3, [r7, #8]
 8017936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017938:	4613      	mov	r3, r2
 801793a:	009b      	lsls	r3, r3, #2
 801793c:	4413      	add	r3, r2
 801793e:	009b      	lsls	r3, r3, #2
 8017940:	4a1f      	ldr	r2, [pc, #124]	; (80179c0 <xTaskIncrementTick+0x164>)
 8017942:	441a      	add	r2, r3
 8017944:	68bb      	ldr	r3, [r7, #8]
 8017946:	3304      	adds	r3, #4
 8017948:	4619      	mov	r1, r3
 801794a:	4610      	mov	r0, r2
 801794c:	f7fd ff5b 	bl	8015806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017950:	68bb      	ldr	r3, [r7, #8]
 8017952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017954:	4b1b      	ldr	r3, [pc, #108]	; (80179c4 <xTaskIncrementTick+0x168>)
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801795a:	429a      	cmp	r2, r3
 801795c:	d3b8      	bcc.n	80178d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 801795e:	2301      	movs	r3, #1
 8017960:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017962:	e7b5      	b.n	80178d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8017964:	4b17      	ldr	r3, [pc, #92]	; (80179c4 <xTaskIncrementTick+0x168>)
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801796a:	4915      	ldr	r1, [pc, #84]	; (80179c0 <xTaskIncrementTick+0x164>)
 801796c:	4613      	mov	r3, r2
 801796e:	009b      	lsls	r3, r3, #2
 8017970:	4413      	add	r3, r2
 8017972:	009b      	lsls	r3, r3, #2
 8017974:	440b      	add	r3, r1
 8017976:	681b      	ldr	r3, [r3, #0]
 8017978:	2b01      	cmp	r3, #1
 801797a:	d901      	bls.n	8017980 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801797c:	2301      	movs	r3, #1
 801797e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017980:	4b11      	ldr	r3, [pc, #68]	; (80179c8 <xTaskIncrementTick+0x16c>)
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d007      	beq.n	8017998 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017988:	2301      	movs	r3, #1
 801798a:	617b      	str	r3, [r7, #20]
 801798c:	e004      	b.n	8017998 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801798e:	4b0f      	ldr	r3, [pc, #60]	; (80179cc <xTaskIncrementTick+0x170>)
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	3301      	adds	r3, #1
 8017994:	4a0d      	ldr	r2, [pc, #52]	; (80179cc <xTaskIncrementTick+0x170>)
 8017996:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017998:	697b      	ldr	r3, [r7, #20]
}
 801799a:	4618      	mov	r0, r3
 801799c:	3718      	adds	r7, #24
 801799e:	46bd      	mov	sp, r7
 80179a0:	bd80      	pop	{r7, pc}
 80179a2:	bf00      	nop
 80179a4:	20002384 	.word	0x20002384
 80179a8:	20002360 	.word	0x20002360
 80179ac:	20002314 	.word	0x20002314
 80179b0:	20002318 	.word	0x20002318
 80179b4:	20002374 	.word	0x20002374
 80179b8:	2000237c 	.word	0x2000237c
 80179bc:	20002364 	.word	0x20002364
 80179c0:	20001e8c 	.word	0x20001e8c
 80179c4:	20001e88 	.word	0x20001e88
 80179c8:	20002370 	.word	0x20002370
 80179cc:	2000236c 	.word	0x2000236c

080179d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80179d0:	b580      	push	{r7, lr}
 80179d2:	b084      	sub	sp, #16
 80179d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80179d6:	4b3e      	ldr	r3, [pc, #248]	; (8017ad0 <vTaskSwitchContext+0x100>)
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d003      	beq.n	80179e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80179de:	4b3d      	ldr	r3, [pc, #244]	; (8017ad4 <vTaskSwitchContext+0x104>)
 80179e0:	2201      	movs	r2, #1
 80179e2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80179e4:	e070      	b.n	8017ac8 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 80179e6:	4b3b      	ldr	r3, [pc, #236]	; (8017ad4 <vTaskSwitchContext+0x104>)
 80179e8:	2200      	movs	r2, #0
 80179ea:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80179ec:	f7f5 fa4b 	bl	800ce86 <getRunTimeCounterValue>
 80179f0:	4603      	mov	r3, r0
 80179f2:	4a39      	ldr	r2, [pc, #228]	; (8017ad8 <vTaskSwitchContext+0x108>)
 80179f4:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80179f6:	4b38      	ldr	r3, [pc, #224]	; (8017ad8 <vTaskSwitchContext+0x108>)
 80179f8:	681a      	ldr	r2, [r3, #0]
 80179fa:	4b38      	ldr	r3, [pc, #224]	; (8017adc <vTaskSwitchContext+0x10c>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d909      	bls.n	8017a16 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8017a02:	4b37      	ldr	r3, [pc, #220]	; (8017ae0 <vTaskSwitchContext+0x110>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8017a08:	4a33      	ldr	r2, [pc, #204]	; (8017ad8 <vTaskSwitchContext+0x108>)
 8017a0a:	6810      	ldr	r0, [r2, #0]
 8017a0c:	4a33      	ldr	r2, [pc, #204]	; (8017adc <vTaskSwitchContext+0x10c>)
 8017a0e:	6812      	ldr	r2, [r2, #0]
 8017a10:	1a82      	subs	r2, r0, r2
 8017a12:	440a      	add	r2, r1
 8017a14:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8017a16:	4b30      	ldr	r3, [pc, #192]	; (8017ad8 <vTaskSwitchContext+0x108>)
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	4a30      	ldr	r2, [pc, #192]	; (8017adc <vTaskSwitchContext+0x10c>)
 8017a1c:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8017a1e:	4b30      	ldr	r3, [pc, #192]	; (8017ae0 <vTaskSwitchContext+0x110>)
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	681a      	ldr	r2, [r3, #0]
 8017a24:	4b2e      	ldr	r3, [pc, #184]	; (8017ae0 <vTaskSwitchContext+0x110>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017a2a:	429a      	cmp	r2, r3
 8017a2c:	d808      	bhi.n	8017a40 <vTaskSwitchContext+0x70>
 8017a2e:	4b2c      	ldr	r3, [pc, #176]	; (8017ae0 <vTaskSwitchContext+0x110>)
 8017a30:	681a      	ldr	r2, [r3, #0]
 8017a32:	4b2b      	ldr	r3, [pc, #172]	; (8017ae0 <vTaskSwitchContext+0x110>)
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	3334      	adds	r3, #52	; 0x34
 8017a38:	4619      	mov	r1, r3
 8017a3a:	4610      	mov	r0, r2
 8017a3c:	f7f5 fa2b 	bl	800ce96 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017a40:	4b28      	ldr	r3, [pc, #160]	; (8017ae4 <vTaskSwitchContext+0x114>)
 8017a42:	681b      	ldr	r3, [r3, #0]
 8017a44:	60fb      	str	r3, [r7, #12]
 8017a46:	e010      	b.n	8017a6a <vTaskSwitchContext+0x9a>
 8017a48:	68fb      	ldr	r3, [r7, #12]
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d10a      	bne.n	8017a64 <vTaskSwitchContext+0x94>
	__asm volatile
 8017a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a52:	f383 8811 	msr	BASEPRI, r3
 8017a56:	f3bf 8f6f 	isb	sy
 8017a5a:	f3bf 8f4f 	dsb	sy
 8017a5e:	607b      	str	r3, [r7, #4]
}
 8017a60:	bf00      	nop
 8017a62:	e7fe      	b.n	8017a62 <vTaskSwitchContext+0x92>
 8017a64:	68fb      	ldr	r3, [r7, #12]
 8017a66:	3b01      	subs	r3, #1
 8017a68:	60fb      	str	r3, [r7, #12]
 8017a6a:	491f      	ldr	r1, [pc, #124]	; (8017ae8 <vTaskSwitchContext+0x118>)
 8017a6c:	68fa      	ldr	r2, [r7, #12]
 8017a6e:	4613      	mov	r3, r2
 8017a70:	009b      	lsls	r3, r3, #2
 8017a72:	4413      	add	r3, r2
 8017a74:	009b      	lsls	r3, r3, #2
 8017a76:	440b      	add	r3, r1
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	d0e4      	beq.n	8017a48 <vTaskSwitchContext+0x78>
 8017a7e:	68fa      	ldr	r2, [r7, #12]
 8017a80:	4613      	mov	r3, r2
 8017a82:	009b      	lsls	r3, r3, #2
 8017a84:	4413      	add	r3, r2
 8017a86:	009b      	lsls	r3, r3, #2
 8017a88:	4a17      	ldr	r2, [pc, #92]	; (8017ae8 <vTaskSwitchContext+0x118>)
 8017a8a:	4413      	add	r3, r2
 8017a8c:	60bb      	str	r3, [r7, #8]
 8017a8e:	68bb      	ldr	r3, [r7, #8]
 8017a90:	685b      	ldr	r3, [r3, #4]
 8017a92:	685a      	ldr	r2, [r3, #4]
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	605a      	str	r2, [r3, #4]
 8017a98:	68bb      	ldr	r3, [r7, #8]
 8017a9a:	685a      	ldr	r2, [r3, #4]
 8017a9c:	68bb      	ldr	r3, [r7, #8]
 8017a9e:	3308      	adds	r3, #8
 8017aa0:	429a      	cmp	r2, r3
 8017aa2:	d104      	bne.n	8017aae <vTaskSwitchContext+0xde>
 8017aa4:	68bb      	ldr	r3, [r7, #8]
 8017aa6:	685b      	ldr	r3, [r3, #4]
 8017aa8:	685a      	ldr	r2, [r3, #4]
 8017aaa:	68bb      	ldr	r3, [r7, #8]
 8017aac:	605a      	str	r2, [r3, #4]
 8017aae:	68bb      	ldr	r3, [r7, #8]
 8017ab0:	685b      	ldr	r3, [r3, #4]
 8017ab2:	68db      	ldr	r3, [r3, #12]
 8017ab4:	4a0a      	ldr	r2, [pc, #40]	; (8017ae0 <vTaskSwitchContext+0x110>)
 8017ab6:	6013      	str	r3, [r2, #0]
 8017ab8:	4a0a      	ldr	r2, [pc, #40]	; (8017ae4 <vTaskSwitchContext+0x114>)
 8017aba:	68fb      	ldr	r3, [r7, #12]
 8017abc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017abe:	4b08      	ldr	r3, [pc, #32]	; (8017ae0 <vTaskSwitchContext+0x110>)
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	3358      	adds	r3, #88	; 0x58
 8017ac4:	4a09      	ldr	r2, [pc, #36]	; (8017aec <vTaskSwitchContext+0x11c>)
 8017ac6:	6013      	str	r3, [r2, #0]
}
 8017ac8:	bf00      	nop
 8017aca:	3710      	adds	r7, #16
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd80      	pop	{r7, pc}
 8017ad0:	20002384 	.word	0x20002384
 8017ad4:	20002370 	.word	0x20002370
 8017ad8:	2000238c 	.word	0x2000238c
 8017adc:	20002388 	.word	0x20002388
 8017ae0:	20001e88 	.word	0x20001e88
 8017ae4:	20002364 	.word	0x20002364
 8017ae8:	20001e8c 	.word	0x20001e8c
 8017aec:	20000030 	.word	0x20000030

08017af0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	b084      	sub	sp, #16
 8017af4:	af00      	add	r7, sp, #0
 8017af6:	6078      	str	r0, [r7, #4]
 8017af8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d10a      	bne.n	8017b16 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b04:	f383 8811 	msr	BASEPRI, r3
 8017b08:	f3bf 8f6f 	isb	sy
 8017b0c:	f3bf 8f4f 	dsb	sy
 8017b10:	60fb      	str	r3, [r7, #12]
}
 8017b12:	bf00      	nop
 8017b14:	e7fe      	b.n	8017b14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b16:	4b07      	ldr	r3, [pc, #28]	; (8017b34 <vTaskPlaceOnEventList+0x44>)
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	3318      	adds	r3, #24
 8017b1c:	4619      	mov	r1, r3
 8017b1e:	6878      	ldr	r0, [r7, #4]
 8017b20:	f7fd fe95 	bl	801584e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017b24:	2101      	movs	r1, #1
 8017b26:	6838      	ldr	r0, [r7, #0]
 8017b28:	f000 fcf8 	bl	801851c <prvAddCurrentTaskToDelayedList>
}
 8017b2c:	bf00      	nop
 8017b2e:	3710      	adds	r7, #16
 8017b30:	46bd      	mov	sp, r7
 8017b32:	bd80      	pop	{r7, pc}
 8017b34:	20001e88 	.word	0x20001e88

08017b38 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b086      	sub	sp, #24
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	60f8      	str	r0, [r7, #12]
 8017b40:	60b9      	str	r1, [r7, #8]
 8017b42:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017b44:	68fb      	ldr	r3, [r7, #12]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d10a      	bne.n	8017b60 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8017b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b4e:	f383 8811 	msr	BASEPRI, r3
 8017b52:	f3bf 8f6f 	isb	sy
 8017b56:	f3bf 8f4f 	dsb	sy
 8017b5a:	617b      	str	r3, [r7, #20]
}
 8017b5c:	bf00      	nop
 8017b5e:	e7fe      	b.n	8017b5e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017b60:	4b0a      	ldr	r3, [pc, #40]	; (8017b8c <vTaskPlaceOnEventListRestricted+0x54>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	3318      	adds	r3, #24
 8017b66:	4619      	mov	r1, r3
 8017b68:	68f8      	ldr	r0, [r7, #12]
 8017b6a:	f7fd fe4c 	bl	8015806 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d002      	beq.n	8017b7a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8017b74:	f04f 33ff 	mov.w	r3, #4294967295
 8017b78:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8017b7a:	6879      	ldr	r1, [r7, #4]
 8017b7c:	68b8      	ldr	r0, [r7, #8]
 8017b7e:	f000 fccd 	bl	801851c <prvAddCurrentTaskToDelayedList>
	}
 8017b82:	bf00      	nop
 8017b84:	3718      	adds	r7, #24
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}
 8017b8a:	bf00      	nop
 8017b8c:	20001e88 	.word	0x20001e88

08017b90 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b086      	sub	sp, #24
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	68db      	ldr	r3, [r3, #12]
 8017b9c:	68db      	ldr	r3, [r3, #12]
 8017b9e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8017ba0:	693b      	ldr	r3, [r7, #16]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d10a      	bne.n	8017bbc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8017ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017baa:	f383 8811 	msr	BASEPRI, r3
 8017bae:	f3bf 8f6f 	isb	sy
 8017bb2:	f3bf 8f4f 	dsb	sy
 8017bb6:	60fb      	str	r3, [r7, #12]
}
 8017bb8:	bf00      	nop
 8017bba:	e7fe      	b.n	8017bba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8017bbc:	693b      	ldr	r3, [r7, #16]
 8017bbe:	3318      	adds	r3, #24
 8017bc0:	4618      	mov	r0, r3
 8017bc2:	f7fd fe7d 	bl	80158c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017bc6:	4b1e      	ldr	r3, [pc, #120]	; (8017c40 <xTaskRemoveFromEventList+0xb0>)
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d11d      	bne.n	8017c0a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8017bce:	693b      	ldr	r3, [r7, #16]
 8017bd0:	3304      	adds	r3, #4
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f7fd fe74 	bl	80158c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017bd8:	693b      	ldr	r3, [r7, #16]
 8017bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bdc:	4b19      	ldr	r3, [pc, #100]	; (8017c44 <xTaskRemoveFromEventList+0xb4>)
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	429a      	cmp	r2, r3
 8017be2:	d903      	bls.n	8017bec <xTaskRemoveFromEventList+0x5c>
 8017be4:	693b      	ldr	r3, [r7, #16]
 8017be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017be8:	4a16      	ldr	r2, [pc, #88]	; (8017c44 <xTaskRemoveFromEventList+0xb4>)
 8017bea:	6013      	str	r3, [r2, #0]
 8017bec:	693b      	ldr	r3, [r7, #16]
 8017bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bf0:	4613      	mov	r3, r2
 8017bf2:	009b      	lsls	r3, r3, #2
 8017bf4:	4413      	add	r3, r2
 8017bf6:	009b      	lsls	r3, r3, #2
 8017bf8:	4a13      	ldr	r2, [pc, #76]	; (8017c48 <xTaskRemoveFromEventList+0xb8>)
 8017bfa:	441a      	add	r2, r3
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	3304      	adds	r3, #4
 8017c00:	4619      	mov	r1, r3
 8017c02:	4610      	mov	r0, r2
 8017c04:	f7fd fdff 	bl	8015806 <vListInsertEnd>
 8017c08:	e005      	b.n	8017c16 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	3318      	adds	r3, #24
 8017c0e:	4619      	mov	r1, r3
 8017c10:	480e      	ldr	r0, [pc, #56]	; (8017c4c <xTaskRemoveFromEventList+0xbc>)
 8017c12:	f7fd fdf8 	bl	8015806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017c16:	693b      	ldr	r3, [r7, #16]
 8017c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c1a:	4b0d      	ldr	r3, [pc, #52]	; (8017c50 <xTaskRemoveFromEventList+0xc0>)
 8017c1c:	681b      	ldr	r3, [r3, #0]
 8017c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c20:	429a      	cmp	r2, r3
 8017c22:	d905      	bls.n	8017c30 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017c24:	2301      	movs	r3, #1
 8017c26:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017c28:	4b0a      	ldr	r3, [pc, #40]	; (8017c54 <xTaskRemoveFromEventList+0xc4>)
 8017c2a:	2201      	movs	r2, #1
 8017c2c:	601a      	str	r2, [r3, #0]
 8017c2e:	e001      	b.n	8017c34 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017c30:	2300      	movs	r3, #0
 8017c32:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017c34:	697b      	ldr	r3, [r7, #20]
}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3718      	adds	r7, #24
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}
 8017c3e:	bf00      	nop
 8017c40:	20002384 	.word	0x20002384
 8017c44:	20002364 	.word	0x20002364
 8017c48:	20001e8c 	.word	0x20001e8c
 8017c4c:	2000231c 	.word	0x2000231c
 8017c50:	20001e88 	.word	0x20001e88
 8017c54:	20002370 	.word	0x20002370

08017c58 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b084      	sub	sp, #16
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	2b00      	cmp	r3, #0
 8017c64:	d10a      	bne.n	8017c7c <vTaskSetTimeOutState+0x24>
	__asm volatile
 8017c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017c6a:	f383 8811 	msr	BASEPRI, r3
 8017c6e:	f3bf 8f6f 	isb	sy
 8017c72:	f3bf 8f4f 	dsb	sy
 8017c76:	60fb      	str	r3, [r7, #12]
}
 8017c78:	bf00      	nop
 8017c7a:	e7fe      	b.n	8017c7a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8017c7c:	f001 f91a 	bl	8018eb4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017c80:	4b06      	ldr	r3, [pc, #24]	; (8017c9c <vTaskSetTimeOutState+0x44>)
 8017c82:	681a      	ldr	r2, [r3, #0]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8017c88:	4b05      	ldr	r3, [pc, #20]	; (8017ca0 <vTaskSetTimeOutState+0x48>)
 8017c8a:	681a      	ldr	r2, [r3, #0]
 8017c8c:	687b      	ldr	r3, [r7, #4]
 8017c8e:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8017c90:	f001 f940 	bl	8018f14 <vPortExitCritical>
}
 8017c94:	bf00      	nop
 8017c96:	3710      	adds	r7, #16
 8017c98:	46bd      	mov	sp, r7
 8017c9a:	bd80      	pop	{r7, pc}
 8017c9c:	20002374 	.word	0x20002374
 8017ca0:	20002360 	.word	0x20002360

08017ca4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017ca4:	b480      	push	{r7}
 8017ca6:	b083      	sub	sp, #12
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8017cac:	4b06      	ldr	r3, [pc, #24]	; (8017cc8 <vTaskInternalSetTimeOutState+0x24>)
 8017cae:	681a      	ldr	r2, [r3, #0]
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8017cb4:	4b05      	ldr	r3, [pc, #20]	; (8017ccc <vTaskInternalSetTimeOutState+0x28>)
 8017cb6:	681a      	ldr	r2, [r3, #0]
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	605a      	str	r2, [r3, #4]
}
 8017cbc:	bf00      	nop
 8017cbe:	370c      	adds	r7, #12
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cc6:	4770      	bx	lr
 8017cc8:	20002374 	.word	0x20002374
 8017ccc:	20002360 	.word	0x20002360

08017cd0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b088      	sub	sp, #32
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
 8017cd8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8017cda:	687b      	ldr	r3, [r7, #4]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d10a      	bne.n	8017cf6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8017ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ce4:	f383 8811 	msr	BASEPRI, r3
 8017ce8:	f3bf 8f6f 	isb	sy
 8017cec:	f3bf 8f4f 	dsb	sy
 8017cf0:	613b      	str	r3, [r7, #16]
}
 8017cf2:	bf00      	nop
 8017cf4:	e7fe      	b.n	8017cf4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8017cf6:	683b      	ldr	r3, [r7, #0]
 8017cf8:	2b00      	cmp	r3, #0
 8017cfa:	d10a      	bne.n	8017d12 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8017cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d00:	f383 8811 	msr	BASEPRI, r3
 8017d04:	f3bf 8f6f 	isb	sy
 8017d08:	f3bf 8f4f 	dsb	sy
 8017d0c:	60fb      	str	r3, [r7, #12]
}
 8017d0e:	bf00      	nop
 8017d10:	e7fe      	b.n	8017d10 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017d12:	f001 f8cf 	bl	8018eb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8017d16:	4b1d      	ldr	r3, [pc, #116]	; (8017d8c <xTaskCheckForTimeOut+0xbc>)
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	685b      	ldr	r3, [r3, #4]
 8017d20:	69ba      	ldr	r2, [r7, #24]
 8017d22:	1ad3      	subs	r3, r2, r3
 8017d24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8017d26:	683b      	ldr	r3, [r7, #0]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017d2e:	d102      	bne.n	8017d36 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017d30:	2300      	movs	r3, #0
 8017d32:	61fb      	str	r3, [r7, #28]
 8017d34:	e023      	b.n	8017d7e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681a      	ldr	r2, [r3, #0]
 8017d3a:	4b15      	ldr	r3, [pc, #84]	; (8017d90 <xTaskCheckForTimeOut+0xc0>)
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	429a      	cmp	r2, r3
 8017d40:	d007      	beq.n	8017d52 <xTaskCheckForTimeOut+0x82>
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	685b      	ldr	r3, [r3, #4]
 8017d46:	69ba      	ldr	r2, [r7, #24]
 8017d48:	429a      	cmp	r2, r3
 8017d4a:	d302      	bcc.n	8017d52 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017d4c:	2301      	movs	r3, #1
 8017d4e:	61fb      	str	r3, [r7, #28]
 8017d50:	e015      	b.n	8017d7e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017d52:	683b      	ldr	r3, [r7, #0]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	697a      	ldr	r2, [r7, #20]
 8017d58:	429a      	cmp	r2, r3
 8017d5a:	d20b      	bcs.n	8017d74 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	681a      	ldr	r2, [r3, #0]
 8017d60:	697b      	ldr	r3, [r7, #20]
 8017d62:	1ad2      	subs	r2, r2, r3
 8017d64:	683b      	ldr	r3, [r7, #0]
 8017d66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8017d68:	6878      	ldr	r0, [r7, #4]
 8017d6a:	f7ff ff9b 	bl	8017ca4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017d6e:	2300      	movs	r3, #0
 8017d70:	61fb      	str	r3, [r7, #28]
 8017d72:	e004      	b.n	8017d7e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017d74:	683b      	ldr	r3, [r7, #0]
 8017d76:	2200      	movs	r2, #0
 8017d78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8017d7a:	2301      	movs	r3, #1
 8017d7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017d7e:	f001 f8c9 	bl	8018f14 <vPortExitCritical>

	return xReturn;
 8017d82:	69fb      	ldr	r3, [r7, #28]
}
 8017d84:	4618      	mov	r0, r3
 8017d86:	3720      	adds	r7, #32
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}
 8017d8c:	20002360 	.word	0x20002360
 8017d90:	20002374 	.word	0x20002374

08017d94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017d94:	b480      	push	{r7}
 8017d96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8017d98:	4b03      	ldr	r3, [pc, #12]	; (8017da8 <vTaskMissedYield+0x14>)
 8017d9a:	2201      	movs	r2, #1
 8017d9c:	601a      	str	r2, [r3, #0]
}
 8017d9e:	bf00      	nop
 8017da0:	46bd      	mov	sp, r7
 8017da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da6:	4770      	bx	lr
 8017da8:	20002370 	.word	0x20002370

08017dac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b082      	sub	sp, #8
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8017db4:	f000 f852 	bl	8017e5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8017db8:	4b06      	ldr	r3, [pc, #24]	; (8017dd4 <prvIdleTask+0x28>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	2b01      	cmp	r3, #1
 8017dbe:	d9f9      	bls.n	8017db4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8017dc0:	4b05      	ldr	r3, [pc, #20]	; (8017dd8 <prvIdleTask+0x2c>)
 8017dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017dc6:	601a      	str	r2, [r3, #0]
 8017dc8:	f3bf 8f4f 	dsb	sy
 8017dcc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8017dd0:	e7f0      	b.n	8017db4 <prvIdleTask+0x8>
 8017dd2:	bf00      	nop
 8017dd4:	20001e8c 	.word	0x20001e8c
 8017dd8:	e000ed04 	.word	0xe000ed04

08017ddc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8017ddc:	b580      	push	{r7, lr}
 8017dde:	b082      	sub	sp, #8
 8017de0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017de2:	2300      	movs	r3, #0
 8017de4:	607b      	str	r3, [r7, #4]
 8017de6:	e00c      	b.n	8017e02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8017de8:	687a      	ldr	r2, [r7, #4]
 8017dea:	4613      	mov	r3, r2
 8017dec:	009b      	lsls	r3, r3, #2
 8017dee:	4413      	add	r3, r2
 8017df0:	009b      	lsls	r3, r3, #2
 8017df2:	4a12      	ldr	r2, [pc, #72]	; (8017e3c <prvInitialiseTaskLists+0x60>)
 8017df4:	4413      	add	r3, r2
 8017df6:	4618      	mov	r0, r3
 8017df8:	f7fd fcd8 	bl	80157ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	3301      	adds	r3, #1
 8017e00:	607b      	str	r3, [r7, #4]
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	2b37      	cmp	r3, #55	; 0x37
 8017e06:	d9ef      	bls.n	8017de8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8017e08:	480d      	ldr	r0, [pc, #52]	; (8017e40 <prvInitialiseTaskLists+0x64>)
 8017e0a:	f7fd fccf 	bl	80157ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017e0e:	480d      	ldr	r0, [pc, #52]	; (8017e44 <prvInitialiseTaskLists+0x68>)
 8017e10:	f7fd fccc 	bl	80157ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017e14:	480c      	ldr	r0, [pc, #48]	; (8017e48 <prvInitialiseTaskLists+0x6c>)
 8017e16:	f7fd fcc9 	bl	80157ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8017e1a:	480c      	ldr	r0, [pc, #48]	; (8017e4c <prvInitialiseTaskLists+0x70>)
 8017e1c:	f7fd fcc6 	bl	80157ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017e20:	480b      	ldr	r0, [pc, #44]	; (8017e50 <prvInitialiseTaskLists+0x74>)
 8017e22:	f7fd fcc3 	bl	80157ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8017e26:	4b0b      	ldr	r3, [pc, #44]	; (8017e54 <prvInitialiseTaskLists+0x78>)
 8017e28:	4a05      	ldr	r2, [pc, #20]	; (8017e40 <prvInitialiseTaskLists+0x64>)
 8017e2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017e2c:	4b0a      	ldr	r3, [pc, #40]	; (8017e58 <prvInitialiseTaskLists+0x7c>)
 8017e2e:	4a05      	ldr	r2, [pc, #20]	; (8017e44 <prvInitialiseTaskLists+0x68>)
 8017e30:	601a      	str	r2, [r3, #0]
}
 8017e32:	bf00      	nop
 8017e34:	3708      	adds	r7, #8
 8017e36:	46bd      	mov	sp, r7
 8017e38:	bd80      	pop	{r7, pc}
 8017e3a:	bf00      	nop
 8017e3c:	20001e8c 	.word	0x20001e8c
 8017e40:	200022ec 	.word	0x200022ec
 8017e44:	20002300 	.word	0x20002300
 8017e48:	2000231c 	.word	0x2000231c
 8017e4c:	20002330 	.word	0x20002330
 8017e50:	20002348 	.word	0x20002348
 8017e54:	20002314 	.word	0x20002314
 8017e58:	20002318 	.word	0x20002318

08017e5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017e5c:	b580      	push	{r7, lr}
 8017e5e:	b082      	sub	sp, #8
 8017e60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017e62:	e019      	b.n	8017e98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017e64:	f001 f826 	bl	8018eb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e68:	4b10      	ldr	r3, [pc, #64]	; (8017eac <prvCheckTasksWaitingTermination+0x50>)
 8017e6a:	68db      	ldr	r3, [r3, #12]
 8017e6c:	68db      	ldr	r3, [r3, #12]
 8017e6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	3304      	adds	r3, #4
 8017e74:	4618      	mov	r0, r3
 8017e76:	f7fd fd23 	bl	80158c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8017e7a:	4b0d      	ldr	r3, [pc, #52]	; (8017eb0 <prvCheckTasksWaitingTermination+0x54>)
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	3b01      	subs	r3, #1
 8017e80:	4a0b      	ldr	r2, [pc, #44]	; (8017eb0 <prvCheckTasksWaitingTermination+0x54>)
 8017e82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017e84:	4b0b      	ldr	r3, [pc, #44]	; (8017eb4 <prvCheckTasksWaitingTermination+0x58>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	3b01      	subs	r3, #1
 8017e8a:	4a0a      	ldr	r2, [pc, #40]	; (8017eb4 <prvCheckTasksWaitingTermination+0x58>)
 8017e8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017e8e:	f001 f841 	bl	8018f14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017e92:	6878      	ldr	r0, [r7, #4]
 8017e94:	f000 f810 	bl	8017eb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017e98:	4b06      	ldr	r3, [pc, #24]	; (8017eb4 <prvCheckTasksWaitingTermination+0x58>)
 8017e9a:	681b      	ldr	r3, [r3, #0]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d1e1      	bne.n	8017e64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017ea0:	bf00      	nop
 8017ea2:	bf00      	nop
 8017ea4:	3708      	adds	r7, #8
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
 8017eaa:	bf00      	nop
 8017eac:	20002330 	.word	0x20002330
 8017eb0:	2000235c 	.word	0x2000235c
 8017eb4:	20002344 	.word	0x20002344

08017eb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8017eb8:	b580      	push	{r7, lr}
 8017eba:	b084      	sub	sp, #16
 8017ebc:	af00      	add	r7, sp, #0
 8017ebe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	3358      	adds	r3, #88	; 0x58
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f002 fc1f 	bl	801a708 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d108      	bne.n	8017ee6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017ed8:	4618      	mov	r0, r3
 8017eda:	f001 f9dd 	bl	8019298 <vPortFree>
				vPortFree( pxTCB );
 8017ede:	6878      	ldr	r0, [r7, #4]
 8017ee0:	f001 f9da 	bl	8019298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8017ee4:	e018      	b.n	8017f18 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8017eec:	2b01      	cmp	r3, #1
 8017eee:	d103      	bne.n	8017ef8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8017ef0:	6878      	ldr	r0, [r7, #4]
 8017ef2:	f001 f9d1 	bl	8019298 <vPortFree>
	}
 8017ef6:	e00f      	b.n	8017f18 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8017efe:	2b02      	cmp	r3, #2
 8017f00:	d00a      	beq.n	8017f18 <prvDeleteTCB+0x60>
	__asm volatile
 8017f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f06:	f383 8811 	msr	BASEPRI, r3
 8017f0a:	f3bf 8f6f 	isb	sy
 8017f0e:	f3bf 8f4f 	dsb	sy
 8017f12:	60fb      	str	r3, [r7, #12]
}
 8017f14:	bf00      	nop
 8017f16:	e7fe      	b.n	8017f16 <prvDeleteTCB+0x5e>
	}
 8017f18:	bf00      	nop
 8017f1a:	3710      	adds	r7, #16
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	bd80      	pop	{r7, pc}

08017f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017f20:	b480      	push	{r7}
 8017f22:	b083      	sub	sp, #12
 8017f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017f26:	4b0c      	ldr	r3, [pc, #48]	; (8017f58 <prvResetNextTaskUnblockTime+0x38>)
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d104      	bne.n	8017f3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017f30:	4b0a      	ldr	r3, [pc, #40]	; (8017f5c <prvResetNextTaskUnblockTime+0x3c>)
 8017f32:	f04f 32ff 	mov.w	r2, #4294967295
 8017f36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8017f38:	e008      	b.n	8017f4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017f3a:	4b07      	ldr	r3, [pc, #28]	; (8017f58 <prvResetNextTaskUnblockTime+0x38>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	68db      	ldr	r3, [r3, #12]
 8017f40:	68db      	ldr	r3, [r3, #12]
 8017f42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017f44:	687b      	ldr	r3, [r7, #4]
 8017f46:	685b      	ldr	r3, [r3, #4]
 8017f48:	4a04      	ldr	r2, [pc, #16]	; (8017f5c <prvResetNextTaskUnblockTime+0x3c>)
 8017f4a:	6013      	str	r3, [r2, #0]
}
 8017f4c:	bf00      	nop
 8017f4e:	370c      	adds	r7, #12
 8017f50:	46bd      	mov	sp, r7
 8017f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f56:	4770      	bx	lr
 8017f58:	20002314 	.word	0x20002314
 8017f5c:	2000237c 	.word	0x2000237c

08017f60 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8017f60:	b480      	push	{r7}
 8017f62:	b083      	sub	sp, #12
 8017f64:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8017f66:	4b05      	ldr	r3, [pc, #20]	; (8017f7c <xTaskGetCurrentTaskHandle+0x1c>)
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8017f6c:	687b      	ldr	r3, [r7, #4]
	}
 8017f6e:	4618      	mov	r0, r3
 8017f70:	370c      	adds	r7, #12
 8017f72:	46bd      	mov	sp, r7
 8017f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f78:	4770      	bx	lr
 8017f7a:	bf00      	nop
 8017f7c:	20001e88 	.word	0x20001e88

08017f80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017f80:	b480      	push	{r7}
 8017f82:	b083      	sub	sp, #12
 8017f84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8017f86:	4b0b      	ldr	r3, [pc, #44]	; (8017fb4 <xTaskGetSchedulerState+0x34>)
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d102      	bne.n	8017f94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017f8e:	2301      	movs	r3, #1
 8017f90:	607b      	str	r3, [r7, #4]
 8017f92:	e008      	b.n	8017fa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017f94:	4b08      	ldr	r3, [pc, #32]	; (8017fb8 <xTaskGetSchedulerState+0x38>)
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d102      	bne.n	8017fa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017f9c:	2302      	movs	r3, #2
 8017f9e:	607b      	str	r3, [r7, #4]
 8017fa0:	e001      	b.n	8017fa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8017fa6:	687b      	ldr	r3, [r7, #4]
	}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	370c      	adds	r7, #12
 8017fac:	46bd      	mov	sp, r7
 8017fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb2:	4770      	bx	lr
 8017fb4:	20002368 	.word	0x20002368
 8017fb8:	20002384 	.word	0x20002384

08017fbc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017fbc:	b580      	push	{r7, lr}
 8017fbe:	b084      	sub	sp, #16
 8017fc0:	af00      	add	r7, sp, #0
 8017fc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8017fc8:	2300      	movs	r3, #0
 8017fca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d051      	beq.n	8018076 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017fd6:	4b2a      	ldr	r3, [pc, #168]	; (8018080 <xTaskPriorityInherit+0xc4>)
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fdc:	429a      	cmp	r2, r3
 8017fde:	d241      	bcs.n	8018064 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017fe0:	68bb      	ldr	r3, [r7, #8]
 8017fe2:	699b      	ldr	r3, [r3, #24]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	db06      	blt.n	8017ff6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017fe8:	4b25      	ldr	r3, [pc, #148]	; (8018080 <xTaskPriorityInherit+0xc4>)
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017fee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8017ff6:	68bb      	ldr	r3, [r7, #8]
 8017ff8:	6959      	ldr	r1, [r3, #20]
 8017ffa:	68bb      	ldr	r3, [r7, #8]
 8017ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ffe:	4613      	mov	r3, r2
 8018000:	009b      	lsls	r3, r3, #2
 8018002:	4413      	add	r3, r2
 8018004:	009b      	lsls	r3, r3, #2
 8018006:	4a1f      	ldr	r2, [pc, #124]	; (8018084 <xTaskPriorityInherit+0xc8>)
 8018008:	4413      	add	r3, r2
 801800a:	4299      	cmp	r1, r3
 801800c:	d122      	bne.n	8018054 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801800e:	68bb      	ldr	r3, [r7, #8]
 8018010:	3304      	adds	r3, #4
 8018012:	4618      	mov	r0, r3
 8018014:	f7fd fc54 	bl	80158c0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018018:	4b19      	ldr	r3, [pc, #100]	; (8018080 <xTaskPriorityInherit+0xc4>)
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8018022:	68bb      	ldr	r3, [r7, #8]
 8018024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018026:	4b18      	ldr	r3, [pc, #96]	; (8018088 <xTaskPriorityInherit+0xcc>)
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	429a      	cmp	r2, r3
 801802c:	d903      	bls.n	8018036 <xTaskPriorityInherit+0x7a>
 801802e:	68bb      	ldr	r3, [r7, #8]
 8018030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018032:	4a15      	ldr	r2, [pc, #84]	; (8018088 <xTaskPriorityInherit+0xcc>)
 8018034:	6013      	str	r3, [r2, #0]
 8018036:	68bb      	ldr	r3, [r7, #8]
 8018038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801803a:	4613      	mov	r3, r2
 801803c:	009b      	lsls	r3, r3, #2
 801803e:	4413      	add	r3, r2
 8018040:	009b      	lsls	r3, r3, #2
 8018042:	4a10      	ldr	r2, [pc, #64]	; (8018084 <xTaskPriorityInherit+0xc8>)
 8018044:	441a      	add	r2, r3
 8018046:	68bb      	ldr	r3, [r7, #8]
 8018048:	3304      	adds	r3, #4
 801804a:	4619      	mov	r1, r3
 801804c:	4610      	mov	r0, r2
 801804e:	f7fd fbda 	bl	8015806 <vListInsertEnd>
 8018052:	e004      	b.n	801805e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018054:	4b0a      	ldr	r3, [pc, #40]	; (8018080 <xTaskPriorityInherit+0xc4>)
 8018056:	681b      	ldr	r3, [r3, #0]
 8018058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801805a:	68bb      	ldr	r3, [r7, #8]
 801805c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801805e:	2301      	movs	r3, #1
 8018060:	60fb      	str	r3, [r7, #12]
 8018062:	e008      	b.n	8018076 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018064:	68bb      	ldr	r3, [r7, #8]
 8018066:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018068:	4b05      	ldr	r3, [pc, #20]	; (8018080 <xTaskPriorityInherit+0xc4>)
 801806a:	681b      	ldr	r3, [r3, #0]
 801806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801806e:	429a      	cmp	r2, r3
 8018070:	d201      	bcs.n	8018076 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8018072:	2301      	movs	r3, #1
 8018074:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018076:	68fb      	ldr	r3, [r7, #12]
	}
 8018078:	4618      	mov	r0, r3
 801807a:	3710      	adds	r7, #16
 801807c:	46bd      	mov	sp, r7
 801807e:	bd80      	pop	{r7, pc}
 8018080:	20001e88 	.word	0x20001e88
 8018084:	20001e8c 	.word	0x20001e8c
 8018088:	20002364 	.word	0x20002364

0801808c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801808c:	b580      	push	{r7, lr}
 801808e:	b086      	sub	sp, #24
 8018090:	af00      	add	r7, sp, #0
 8018092:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8018094:	687b      	ldr	r3, [r7, #4]
 8018096:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8018098:	2300      	movs	r3, #0
 801809a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d056      	beq.n	8018150 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80180a2:	4b2e      	ldr	r3, [pc, #184]	; (801815c <xTaskPriorityDisinherit+0xd0>)
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	693a      	ldr	r2, [r7, #16]
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d00a      	beq.n	80180c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80180ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180b0:	f383 8811 	msr	BASEPRI, r3
 80180b4:	f3bf 8f6f 	isb	sy
 80180b8:	f3bf 8f4f 	dsb	sy
 80180bc:	60fb      	str	r3, [r7, #12]
}
 80180be:	bf00      	nop
 80180c0:	e7fe      	b.n	80180c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80180c2:	693b      	ldr	r3, [r7, #16]
 80180c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180c6:	2b00      	cmp	r3, #0
 80180c8:	d10a      	bne.n	80180e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80180ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180ce:	f383 8811 	msr	BASEPRI, r3
 80180d2:	f3bf 8f6f 	isb	sy
 80180d6:	f3bf 8f4f 	dsb	sy
 80180da:	60bb      	str	r3, [r7, #8]
}
 80180dc:	bf00      	nop
 80180de:	e7fe      	b.n	80180de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80180e0:	693b      	ldr	r3, [r7, #16]
 80180e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180e4:	1e5a      	subs	r2, r3, #1
 80180e6:	693b      	ldr	r3, [r7, #16]
 80180e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80180ea:	693b      	ldr	r3, [r7, #16]
 80180ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180ee:	693b      	ldr	r3, [r7, #16]
 80180f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d02c      	beq.n	8018150 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80180f6:	693b      	ldr	r3, [r7, #16]
 80180f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d128      	bne.n	8018150 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80180fe:	693b      	ldr	r3, [r7, #16]
 8018100:	3304      	adds	r3, #4
 8018102:	4618      	mov	r0, r3
 8018104:	f7fd fbdc 	bl	80158c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018108:	693b      	ldr	r3, [r7, #16]
 801810a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801810c:	693b      	ldr	r3, [r7, #16]
 801810e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018110:	693b      	ldr	r3, [r7, #16]
 8018112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018114:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018118:	693b      	ldr	r3, [r7, #16]
 801811a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801811c:	693b      	ldr	r3, [r7, #16]
 801811e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018120:	4b0f      	ldr	r3, [pc, #60]	; (8018160 <xTaskPriorityDisinherit+0xd4>)
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	429a      	cmp	r2, r3
 8018126:	d903      	bls.n	8018130 <xTaskPriorityDisinherit+0xa4>
 8018128:	693b      	ldr	r3, [r7, #16]
 801812a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801812c:	4a0c      	ldr	r2, [pc, #48]	; (8018160 <xTaskPriorityDisinherit+0xd4>)
 801812e:	6013      	str	r3, [r2, #0]
 8018130:	693b      	ldr	r3, [r7, #16]
 8018132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018134:	4613      	mov	r3, r2
 8018136:	009b      	lsls	r3, r3, #2
 8018138:	4413      	add	r3, r2
 801813a:	009b      	lsls	r3, r3, #2
 801813c:	4a09      	ldr	r2, [pc, #36]	; (8018164 <xTaskPriorityDisinherit+0xd8>)
 801813e:	441a      	add	r2, r3
 8018140:	693b      	ldr	r3, [r7, #16]
 8018142:	3304      	adds	r3, #4
 8018144:	4619      	mov	r1, r3
 8018146:	4610      	mov	r0, r2
 8018148:	f7fd fb5d 	bl	8015806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801814c:	2301      	movs	r3, #1
 801814e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018150:	697b      	ldr	r3, [r7, #20]
	}
 8018152:	4618      	mov	r0, r3
 8018154:	3718      	adds	r7, #24
 8018156:	46bd      	mov	sp, r7
 8018158:	bd80      	pop	{r7, pc}
 801815a:	bf00      	nop
 801815c:	20001e88 	.word	0x20001e88
 8018160:	20002364 	.word	0x20002364
 8018164:	20001e8c 	.word	0x20001e8c

08018168 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018168:	b580      	push	{r7, lr}
 801816a:	b088      	sub	sp, #32
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
 8018170:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018176:	2301      	movs	r3, #1
 8018178:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d06a      	beq.n	8018256 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018180:	69bb      	ldr	r3, [r7, #24]
 8018182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018184:	2b00      	cmp	r3, #0
 8018186:	d10a      	bne.n	801819e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8018188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801818c:	f383 8811 	msr	BASEPRI, r3
 8018190:	f3bf 8f6f 	isb	sy
 8018194:	f3bf 8f4f 	dsb	sy
 8018198:	60fb      	str	r3, [r7, #12]
}
 801819a:	bf00      	nop
 801819c:	e7fe      	b.n	801819c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801819e:	69bb      	ldr	r3, [r7, #24]
 80181a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181a2:	683a      	ldr	r2, [r7, #0]
 80181a4:	429a      	cmp	r2, r3
 80181a6:	d902      	bls.n	80181ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80181a8:	683b      	ldr	r3, [r7, #0]
 80181aa:	61fb      	str	r3, [r7, #28]
 80181ac:	e002      	b.n	80181b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80181ae:	69bb      	ldr	r3, [r7, #24]
 80181b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80181b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80181b4:	69bb      	ldr	r3, [r7, #24]
 80181b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181b8:	69fa      	ldr	r2, [r7, #28]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d04b      	beq.n	8018256 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80181be:	69bb      	ldr	r3, [r7, #24]
 80181c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181c2:	697a      	ldr	r2, [r7, #20]
 80181c4:	429a      	cmp	r2, r3
 80181c6:	d146      	bne.n	8018256 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80181c8:	4b25      	ldr	r3, [pc, #148]	; (8018260 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	69ba      	ldr	r2, [r7, #24]
 80181ce:	429a      	cmp	r2, r3
 80181d0:	d10a      	bne.n	80181e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80181d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181d6:	f383 8811 	msr	BASEPRI, r3
 80181da:	f3bf 8f6f 	isb	sy
 80181de:	f3bf 8f4f 	dsb	sy
 80181e2:	60bb      	str	r3, [r7, #8]
}
 80181e4:	bf00      	nop
 80181e6:	e7fe      	b.n	80181e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80181e8:	69bb      	ldr	r3, [r7, #24]
 80181ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80181ee:	69bb      	ldr	r3, [r7, #24]
 80181f0:	69fa      	ldr	r2, [r7, #28]
 80181f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80181f4:	69bb      	ldr	r3, [r7, #24]
 80181f6:	699b      	ldr	r3, [r3, #24]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	db04      	blt.n	8018206 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80181fc:	69fb      	ldr	r3, [r7, #28]
 80181fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018202:	69bb      	ldr	r3, [r7, #24]
 8018204:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018206:	69bb      	ldr	r3, [r7, #24]
 8018208:	6959      	ldr	r1, [r3, #20]
 801820a:	693a      	ldr	r2, [r7, #16]
 801820c:	4613      	mov	r3, r2
 801820e:	009b      	lsls	r3, r3, #2
 8018210:	4413      	add	r3, r2
 8018212:	009b      	lsls	r3, r3, #2
 8018214:	4a13      	ldr	r2, [pc, #76]	; (8018264 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018216:	4413      	add	r3, r2
 8018218:	4299      	cmp	r1, r3
 801821a:	d11c      	bne.n	8018256 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801821c:	69bb      	ldr	r3, [r7, #24]
 801821e:	3304      	adds	r3, #4
 8018220:	4618      	mov	r0, r3
 8018222:	f7fd fb4d 	bl	80158c0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018226:	69bb      	ldr	r3, [r7, #24]
 8018228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801822a:	4b0f      	ldr	r3, [pc, #60]	; (8018268 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	429a      	cmp	r2, r3
 8018230:	d903      	bls.n	801823a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8018232:	69bb      	ldr	r3, [r7, #24]
 8018234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018236:	4a0c      	ldr	r2, [pc, #48]	; (8018268 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018238:	6013      	str	r3, [r2, #0]
 801823a:	69bb      	ldr	r3, [r7, #24]
 801823c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801823e:	4613      	mov	r3, r2
 8018240:	009b      	lsls	r3, r3, #2
 8018242:	4413      	add	r3, r2
 8018244:	009b      	lsls	r3, r3, #2
 8018246:	4a07      	ldr	r2, [pc, #28]	; (8018264 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018248:	441a      	add	r2, r3
 801824a:	69bb      	ldr	r3, [r7, #24]
 801824c:	3304      	adds	r3, #4
 801824e:	4619      	mov	r1, r3
 8018250:	4610      	mov	r0, r2
 8018252:	f7fd fad8 	bl	8015806 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018256:	bf00      	nop
 8018258:	3720      	adds	r7, #32
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}
 801825e:	bf00      	nop
 8018260:	20001e88 	.word	0x20001e88
 8018264:	20001e8c 	.word	0x20001e8c
 8018268:	20002364 	.word	0x20002364

0801826c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801826c:	b480      	push	{r7}
 801826e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018270:	4b07      	ldr	r3, [pc, #28]	; (8018290 <pvTaskIncrementMutexHeldCount+0x24>)
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d004      	beq.n	8018282 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018278:	4b05      	ldr	r3, [pc, #20]	; (8018290 <pvTaskIncrementMutexHeldCount+0x24>)
 801827a:	681b      	ldr	r3, [r3, #0]
 801827c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801827e:	3201      	adds	r2, #1
 8018280:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018282:	4b03      	ldr	r3, [pc, #12]	; (8018290 <pvTaskIncrementMutexHeldCount+0x24>)
 8018284:	681b      	ldr	r3, [r3, #0]
	}
 8018286:	4618      	mov	r0, r3
 8018288:	46bd      	mov	sp, r7
 801828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801828e:	4770      	bx	lr
 8018290:	20001e88 	.word	0x20001e88

08018294 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8018294:	b580      	push	{r7, lr}
 8018296:	b086      	sub	sp, #24
 8018298:	af00      	add	r7, sp, #0
 801829a:	60f8      	str	r0, [r7, #12]
 801829c:	60b9      	str	r1, [r7, #8]
 801829e:	607a      	str	r2, [r7, #4]
 80182a0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80182a2:	f000 fe07 	bl	8018eb4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80182a6:	4b29      	ldr	r3, [pc, #164]	; (801834c <xTaskNotifyWait+0xb8>)
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80182ae:	b2db      	uxtb	r3, r3
 80182b0:	2b02      	cmp	r3, #2
 80182b2:	d01c      	beq.n	80182ee <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80182b4:	4b25      	ldr	r3, [pc, #148]	; (801834c <xTaskNotifyWait+0xb8>)
 80182b6:	681b      	ldr	r3, [r3, #0]
 80182b8:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80182bc:	68fa      	ldr	r2, [r7, #12]
 80182be:	43d2      	mvns	r2, r2
 80182c0:	400a      	ands	r2, r1
 80182c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80182c6:	4b21      	ldr	r3, [pc, #132]	; (801834c <xTaskNotifyWait+0xb8>)
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	2201      	movs	r2, #1
 80182cc:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 80182d0:	683b      	ldr	r3, [r7, #0]
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d00b      	beq.n	80182ee <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80182d6:	2101      	movs	r1, #1
 80182d8:	6838      	ldr	r0, [r7, #0]
 80182da:	f000 f91f 	bl	801851c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80182de:	4b1c      	ldr	r3, [pc, #112]	; (8018350 <xTaskNotifyWait+0xbc>)
 80182e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80182e4:	601a      	str	r2, [r3, #0]
 80182e6:	f3bf 8f4f 	dsb	sy
 80182ea:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80182ee:	f000 fe11 	bl	8018f14 <vPortExitCritical>

		taskENTER_CRITICAL();
 80182f2:	f000 fddf 	bl	8018eb4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d005      	beq.n	8018308 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80182fc:	4b13      	ldr	r3, [pc, #76]	; (801834c <xTaskNotifyWait+0xb8>)
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8018308:	4b10      	ldr	r3, [pc, #64]	; (801834c <xTaskNotifyWait+0xb8>)
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8018310:	b2db      	uxtb	r3, r3
 8018312:	2b02      	cmp	r3, #2
 8018314:	d002      	beq.n	801831c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8018316:	2300      	movs	r3, #0
 8018318:	617b      	str	r3, [r7, #20]
 801831a:	e00a      	b.n	8018332 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 801831c:	4b0b      	ldr	r3, [pc, #44]	; (801834c <xTaskNotifyWait+0xb8>)
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8018324:	68ba      	ldr	r2, [r7, #8]
 8018326:	43d2      	mvns	r2, r2
 8018328:	400a      	ands	r2, r1
 801832a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 801832e:	2301      	movs	r3, #1
 8018330:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8018332:	4b06      	ldr	r3, [pc, #24]	; (801834c <xTaskNotifyWait+0xb8>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	2200      	movs	r2, #0
 8018338:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 801833c:	f000 fdea 	bl	8018f14 <vPortExitCritical>

		return xReturn;
 8018340:	697b      	ldr	r3, [r7, #20]
	}
 8018342:	4618      	mov	r0, r3
 8018344:	3718      	adds	r7, #24
 8018346:	46bd      	mov	sp, r7
 8018348:	bd80      	pop	{r7, pc}
 801834a:	bf00      	nop
 801834c:	20001e88 	.word	0x20001e88
 8018350:	e000ed04 	.word	0xe000ed04

08018354 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8018354:	b580      	push	{r7, lr}
 8018356:	b08a      	sub	sp, #40	; 0x28
 8018358:	af00      	add	r7, sp, #0
 801835a:	60f8      	str	r0, [r7, #12]
 801835c:	60b9      	str	r1, [r7, #8]
 801835e:	603b      	str	r3, [r7, #0]
 8018360:	4613      	mov	r3, r2
 8018362:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8018364:	2301      	movs	r3, #1
 8018366:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	2b00      	cmp	r3, #0
 801836c:	d10a      	bne.n	8018384 <xTaskGenericNotify+0x30>
	__asm volatile
 801836e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018372:	f383 8811 	msr	BASEPRI, r3
 8018376:	f3bf 8f6f 	isb	sy
 801837a:	f3bf 8f4f 	dsb	sy
 801837e:	61bb      	str	r3, [r7, #24]
}
 8018380:	bf00      	nop
 8018382:	e7fe      	b.n	8018382 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8018388:	f000 fd94 	bl	8018eb4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 801838c:	683b      	ldr	r3, [r7, #0]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d004      	beq.n	801839c <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8018392:	6a3b      	ldr	r3, [r7, #32]
 8018394:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8018398:	683b      	ldr	r3, [r7, #0]
 801839a:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 801839c:	6a3b      	ldr	r3, [r7, #32]
 801839e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80183a2:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80183a4:	6a3b      	ldr	r3, [r7, #32]
 80183a6:	2202      	movs	r2, #2
 80183a8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 80183ac:	79fb      	ldrb	r3, [r7, #7]
 80183ae:	2b04      	cmp	r3, #4
 80183b0:	d82d      	bhi.n	801840e <xTaskGenericNotify+0xba>
 80183b2:	a201      	add	r2, pc, #4	; (adr r2, 80183b8 <xTaskGenericNotify+0x64>)
 80183b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80183b8:	08018431 	.word	0x08018431
 80183bc:	080183cd 	.word	0x080183cd
 80183c0:	080183df 	.word	0x080183df
 80183c4:	080183ef 	.word	0x080183ef
 80183c8:	080183f9 	.word	0x080183f9
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80183cc:	6a3b      	ldr	r3, [r7, #32]
 80183ce:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80183d2:	68bb      	ldr	r3, [r7, #8]
 80183d4:	431a      	orrs	r2, r3
 80183d6:	6a3b      	ldr	r3, [r7, #32]
 80183d8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80183dc:	e02b      	b.n	8018436 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80183de:	6a3b      	ldr	r3, [r7, #32]
 80183e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80183e4:	1c5a      	adds	r2, r3, #1
 80183e6:	6a3b      	ldr	r3, [r7, #32]
 80183e8:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80183ec:	e023      	b.n	8018436 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80183ee:	6a3b      	ldr	r3, [r7, #32]
 80183f0:	68ba      	ldr	r2, [r7, #8]
 80183f2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 80183f6:	e01e      	b.n	8018436 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80183f8:	7ffb      	ldrb	r3, [r7, #31]
 80183fa:	2b02      	cmp	r3, #2
 80183fc:	d004      	beq.n	8018408 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80183fe:	6a3b      	ldr	r3, [r7, #32]
 8018400:	68ba      	ldr	r2, [r7, #8]
 8018402:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8018406:	e016      	b.n	8018436 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8018408:	2300      	movs	r3, #0
 801840a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 801840c:	e013      	b.n	8018436 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 801840e:	6a3b      	ldr	r3, [r7, #32]
 8018410:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8018414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018418:	d00c      	beq.n	8018434 <xTaskGenericNotify+0xe0>
	__asm volatile
 801841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801841e:	f383 8811 	msr	BASEPRI, r3
 8018422:	f3bf 8f6f 	isb	sy
 8018426:	f3bf 8f4f 	dsb	sy
 801842a:	617b      	str	r3, [r7, #20]
}
 801842c:	bf00      	nop
 801842e:	e7fe      	b.n	801842e <xTaskGenericNotify+0xda>
					break;
 8018430:	bf00      	nop
 8018432:	e000      	b.n	8018436 <xTaskGenericNotify+0xe2>

					break;
 8018434:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8018436:	7ffb      	ldrb	r3, [r7, #31]
 8018438:	2b01      	cmp	r3, #1
 801843a:	d13a      	bne.n	80184b2 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801843c:	6a3b      	ldr	r3, [r7, #32]
 801843e:	3304      	adds	r3, #4
 8018440:	4618      	mov	r0, r3
 8018442:	f7fd fa3d 	bl	80158c0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8018446:	6a3b      	ldr	r3, [r7, #32]
 8018448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801844a:	4b1d      	ldr	r3, [pc, #116]	; (80184c0 <xTaskGenericNotify+0x16c>)
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	429a      	cmp	r2, r3
 8018450:	d903      	bls.n	801845a <xTaskGenericNotify+0x106>
 8018452:	6a3b      	ldr	r3, [r7, #32]
 8018454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018456:	4a1a      	ldr	r2, [pc, #104]	; (80184c0 <xTaskGenericNotify+0x16c>)
 8018458:	6013      	str	r3, [r2, #0]
 801845a:	6a3b      	ldr	r3, [r7, #32]
 801845c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801845e:	4613      	mov	r3, r2
 8018460:	009b      	lsls	r3, r3, #2
 8018462:	4413      	add	r3, r2
 8018464:	009b      	lsls	r3, r3, #2
 8018466:	4a17      	ldr	r2, [pc, #92]	; (80184c4 <xTaskGenericNotify+0x170>)
 8018468:	441a      	add	r2, r3
 801846a:	6a3b      	ldr	r3, [r7, #32]
 801846c:	3304      	adds	r3, #4
 801846e:	4619      	mov	r1, r3
 8018470:	4610      	mov	r0, r2
 8018472:	f7fd f9c8 	bl	8015806 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8018476:	6a3b      	ldr	r3, [r7, #32]
 8018478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801847a:	2b00      	cmp	r3, #0
 801847c:	d00a      	beq.n	8018494 <xTaskGenericNotify+0x140>
	__asm volatile
 801847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018482:	f383 8811 	msr	BASEPRI, r3
 8018486:	f3bf 8f6f 	isb	sy
 801848a:	f3bf 8f4f 	dsb	sy
 801848e:	613b      	str	r3, [r7, #16]
}
 8018490:	bf00      	nop
 8018492:	e7fe      	b.n	8018492 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018494:	6a3b      	ldr	r3, [r7, #32]
 8018496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018498:	4b0b      	ldr	r3, [pc, #44]	; (80184c8 <xTaskGenericNotify+0x174>)
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801849e:	429a      	cmp	r2, r3
 80184a0:	d907      	bls.n	80184b2 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80184a2:	4b0a      	ldr	r3, [pc, #40]	; (80184cc <xTaskGenericNotify+0x178>)
 80184a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80184a8:	601a      	str	r2, [r3, #0]
 80184aa:	f3bf 8f4f 	dsb	sy
 80184ae:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80184b2:	f000 fd2f 	bl	8018f14 <vPortExitCritical>

		return xReturn;
 80184b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80184b8:	4618      	mov	r0, r3
 80184ba:	3728      	adds	r7, #40	; 0x28
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}
 80184c0:	20002364 	.word	0x20002364
 80184c4:	20001e8c 	.word	0x20001e8c
 80184c8:	20001e88 	.word	0x20001e88
 80184cc:	e000ed04 	.word	0xe000ed04

080184d0 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 80184d0:	b580      	push	{r7, lr}
 80184d2:	b084      	sub	sp, #16
 80184d4:	af00      	add	r7, sp, #0
 80184d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d102      	bne.n	80184e4 <xTaskNotifyStateClear+0x14>
 80184de:	4b0e      	ldr	r3, [pc, #56]	; (8018518 <xTaskNotifyStateClear+0x48>)
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	e000      	b.n	80184e6 <xTaskNotifyStateClear+0x16>
 80184e4:	687b      	ldr	r3, [r7, #4]
 80184e6:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80184e8:	f000 fce4 	bl	8018eb4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80184ec:	68bb      	ldr	r3, [r7, #8]
 80184ee:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80184f2:	b2db      	uxtb	r3, r3
 80184f4:	2b02      	cmp	r3, #2
 80184f6:	d106      	bne.n	8018506 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80184f8:	68bb      	ldr	r3, [r7, #8]
 80184fa:	2200      	movs	r2, #0
 80184fc:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 8018500:	2301      	movs	r3, #1
 8018502:	60fb      	str	r3, [r7, #12]
 8018504:	e001      	b.n	801850a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8018506:	2300      	movs	r3, #0
 8018508:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 801850a:	f000 fd03 	bl	8018f14 <vPortExitCritical>

		return xReturn;
 801850e:	68fb      	ldr	r3, [r7, #12]
	}
 8018510:	4618      	mov	r0, r3
 8018512:	3710      	adds	r7, #16
 8018514:	46bd      	mov	sp, r7
 8018516:	bd80      	pop	{r7, pc}
 8018518:	20001e88 	.word	0x20001e88

0801851c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801851c:	b580      	push	{r7, lr}
 801851e:	b084      	sub	sp, #16
 8018520:	af00      	add	r7, sp, #0
 8018522:	6078      	str	r0, [r7, #4]
 8018524:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018526:	4b21      	ldr	r3, [pc, #132]	; (80185ac <prvAddCurrentTaskToDelayedList+0x90>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801852c:	4b20      	ldr	r3, [pc, #128]	; (80185b0 <prvAddCurrentTaskToDelayedList+0x94>)
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	3304      	adds	r3, #4
 8018532:	4618      	mov	r0, r3
 8018534:	f7fd f9c4 	bl	80158c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801853e:	d10a      	bne.n	8018556 <prvAddCurrentTaskToDelayedList+0x3a>
 8018540:	683b      	ldr	r3, [r7, #0]
 8018542:	2b00      	cmp	r3, #0
 8018544:	d007      	beq.n	8018556 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018546:	4b1a      	ldr	r3, [pc, #104]	; (80185b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	3304      	adds	r3, #4
 801854c:	4619      	mov	r1, r3
 801854e:	4819      	ldr	r0, [pc, #100]	; (80185b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8018550:	f7fd f959 	bl	8015806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018554:	e026      	b.n	80185a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018556:	68fa      	ldr	r2, [r7, #12]
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	4413      	add	r3, r2
 801855c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801855e:	4b14      	ldr	r3, [pc, #80]	; (80185b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	68ba      	ldr	r2, [r7, #8]
 8018564:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018566:	68ba      	ldr	r2, [r7, #8]
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	429a      	cmp	r2, r3
 801856c:	d209      	bcs.n	8018582 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801856e:	4b12      	ldr	r3, [pc, #72]	; (80185b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018570:	681a      	ldr	r2, [r3, #0]
 8018572:	4b0f      	ldr	r3, [pc, #60]	; (80185b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	3304      	adds	r3, #4
 8018578:	4619      	mov	r1, r3
 801857a:	4610      	mov	r0, r2
 801857c:	f7fd f967 	bl	801584e <vListInsert>
}
 8018580:	e010      	b.n	80185a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018582:	4b0e      	ldr	r3, [pc, #56]	; (80185bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8018584:	681a      	ldr	r2, [r3, #0]
 8018586:	4b0a      	ldr	r3, [pc, #40]	; (80185b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	3304      	adds	r3, #4
 801858c:	4619      	mov	r1, r3
 801858e:	4610      	mov	r0, r2
 8018590:	f7fd f95d 	bl	801584e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018594:	4b0a      	ldr	r3, [pc, #40]	; (80185c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	68ba      	ldr	r2, [r7, #8]
 801859a:	429a      	cmp	r2, r3
 801859c:	d202      	bcs.n	80185a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801859e:	4a08      	ldr	r2, [pc, #32]	; (80185c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80185a0:	68bb      	ldr	r3, [r7, #8]
 80185a2:	6013      	str	r3, [r2, #0]
}
 80185a4:	bf00      	nop
 80185a6:	3710      	adds	r7, #16
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}
 80185ac:	20002360 	.word	0x20002360
 80185b0:	20001e88 	.word	0x20001e88
 80185b4:	20002348 	.word	0x20002348
 80185b8:	20002318 	.word	0x20002318
 80185bc:	20002314 	.word	0x20002314
 80185c0:	2000237c 	.word	0x2000237c

080185c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b08a      	sub	sp, #40	; 0x28
 80185c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80185ca:	2300      	movs	r3, #0
 80185cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80185ce:	f000 fb07 	bl	8018be0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80185d2:	4b1c      	ldr	r3, [pc, #112]	; (8018644 <xTimerCreateTimerTask+0x80>)
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d021      	beq.n	801861e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80185da:	2300      	movs	r3, #0
 80185dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80185de:	2300      	movs	r3, #0
 80185e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80185e2:	1d3a      	adds	r2, r7, #4
 80185e4:	f107 0108 	add.w	r1, r7, #8
 80185e8:	f107 030c 	add.w	r3, r7, #12
 80185ec:	4618      	mov	r0, r3
 80185ee:	f7fd f8c3 	bl	8015778 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80185f2:	6879      	ldr	r1, [r7, #4]
 80185f4:	68bb      	ldr	r3, [r7, #8]
 80185f6:	68fa      	ldr	r2, [r7, #12]
 80185f8:	9202      	str	r2, [sp, #8]
 80185fa:	9301      	str	r3, [sp, #4]
 80185fc:	2302      	movs	r3, #2
 80185fe:	9300      	str	r3, [sp, #0]
 8018600:	2300      	movs	r3, #0
 8018602:	460a      	mov	r2, r1
 8018604:	4910      	ldr	r1, [pc, #64]	; (8018648 <xTimerCreateTimerTask+0x84>)
 8018606:	4811      	ldr	r0, [pc, #68]	; (801864c <xTimerCreateTimerTask+0x88>)
 8018608:	f7fe fe0a 	bl	8017220 <xTaskCreateStatic>
 801860c:	4603      	mov	r3, r0
 801860e:	4a10      	ldr	r2, [pc, #64]	; (8018650 <xTimerCreateTimerTask+0x8c>)
 8018610:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018612:	4b0f      	ldr	r3, [pc, #60]	; (8018650 <xTimerCreateTimerTask+0x8c>)
 8018614:	681b      	ldr	r3, [r3, #0]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d001      	beq.n	801861e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801861a:	2301      	movs	r3, #1
 801861c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801861e:	697b      	ldr	r3, [r7, #20]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d10a      	bne.n	801863a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8018624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018628:	f383 8811 	msr	BASEPRI, r3
 801862c:	f3bf 8f6f 	isb	sy
 8018630:	f3bf 8f4f 	dsb	sy
 8018634:	613b      	str	r3, [r7, #16]
}
 8018636:	bf00      	nop
 8018638:	e7fe      	b.n	8018638 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801863a:	697b      	ldr	r3, [r7, #20]
}
 801863c:	4618      	mov	r0, r3
 801863e:	3718      	adds	r7, #24
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}
 8018644:	200023c0 	.word	0x200023c0
 8018648:	0801c8e8 	.word	0x0801c8e8
 801864c:	08018789 	.word	0x08018789
 8018650:	200023c4 	.word	0x200023c4

08018654 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018654:	b580      	push	{r7, lr}
 8018656:	b08a      	sub	sp, #40	; 0x28
 8018658:	af00      	add	r7, sp, #0
 801865a:	60f8      	str	r0, [r7, #12]
 801865c:	60b9      	str	r1, [r7, #8]
 801865e:	607a      	str	r2, [r7, #4]
 8018660:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018662:	2300      	movs	r3, #0
 8018664:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	2b00      	cmp	r3, #0
 801866a:	d10a      	bne.n	8018682 <xTimerGenericCommand+0x2e>
	__asm volatile
 801866c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018670:	f383 8811 	msr	BASEPRI, r3
 8018674:	f3bf 8f6f 	isb	sy
 8018678:	f3bf 8f4f 	dsb	sy
 801867c:	623b      	str	r3, [r7, #32]
}
 801867e:	bf00      	nop
 8018680:	e7fe      	b.n	8018680 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018682:	4b1a      	ldr	r3, [pc, #104]	; (80186ec <xTimerGenericCommand+0x98>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d02a      	beq.n	80186e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801868a:	68bb      	ldr	r3, [r7, #8]
 801868c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018696:	68bb      	ldr	r3, [r7, #8]
 8018698:	2b05      	cmp	r3, #5
 801869a:	dc18      	bgt.n	80186ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801869c:	f7ff fc70 	bl	8017f80 <xTaskGetSchedulerState>
 80186a0:	4603      	mov	r3, r0
 80186a2:	2b02      	cmp	r3, #2
 80186a4:	d109      	bne.n	80186ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80186a6:	4b11      	ldr	r3, [pc, #68]	; (80186ec <xTimerGenericCommand+0x98>)
 80186a8:	6818      	ldr	r0, [r3, #0]
 80186aa:	f107 0110 	add.w	r1, r7, #16
 80186ae:	2300      	movs	r3, #0
 80186b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80186b2:	f7fd fb8d 	bl	8015dd0 <xQueueGenericSend>
 80186b6:	6278      	str	r0, [r7, #36]	; 0x24
 80186b8:	e012      	b.n	80186e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80186ba:	4b0c      	ldr	r3, [pc, #48]	; (80186ec <xTimerGenericCommand+0x98>)
 80186bc:	6818      	ldr	r0, [r3, #0]
 80186be:	f107 0110 	add.w	r1, r7, #16
 80186c2:	2300      	movs	r3, #0
 80186c4:	2200      	movs	r2, #0
 80186c6:	f7fd fb83 	bl	8015dd0 <xQueueGenericSend>
 80186ca:	6278      	str	r0, [r7, #36]	; 0x24
 80186cc:	e008      	b.n	80186e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80186ce:	4b07      	ldr	r3, [pc, #28]	; (80186ec <xTimerGenericCommand+0x98>)
 80186d0:	6818      	ldr	r0, [r3, #0]
 80186d2:	f107 0110 	add.w	r1, r7, #16
 80186d6:	2300      	movs	r3, #0
 80186d8:	683a      	ldr	r2, [r7, #0]
 80186da:	f7fd fc77 	bl	8015fcc <xQueueGenericSendFromISR>
 80186de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80186e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80186e2:	4618      	mov	r0, r3
 80186e4:	3728      	adds	r7, #40	; 0x28
 80186e6:	46bd      	mov	sp, r7
 80186e8:	bd80      	pop	{r7, pc}
 80186ea:	bf00      	nop
 80186ec:	200023c0 	.word	0x200023c0

080186f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80186f0:	b580      	push	{r7, lr}
 80186f2:	b088      	sub	sp, #32
 80186f4:	af02      	add	r7, sp, #8
 80186f6:	6078      	str	r0, [r7, #4]
 80186f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80186fa:	4b22      	ldr	r3, [pc, #136]	; (8018784 <prvProcessExpiredTimer+0x94>)
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	68db      	ldr	r3, [r3, #12]
 8018700:	68db      	ldr	r3, [r3, #12]
 8018702:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018704:	697b      	ldr	r3, [r7, #20]
 8018706:	3304      	adds	r3, #4
 8018708:	4618      	mov	r0, r3
 801870a:	f7fd f8d9 	bl	80158c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801870e:	697b      	ldr	r3, [r7, #20]
 8018710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018714:	f003 0304 	and.w	r3, r3, #4
 8018718:	2b00      	cmp	r3, #0
 801871a:	d022      	beq.n	8018762 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801871c:	697b      	ldr	r3, [r7, #20]
 801871e:	699a      	ldr	r2, [r3, #24]
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	18d1      	adds	r1, r2, r3
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	683a      	ldr	r2, [r7, #0]
 8018728:	6978      	ldr	r0, [r7, #20]
 801872a:	f000 f8d1 	bl	80188d0 <prvInsertTimerInActiveList>
 801872e:	4603      	mov	r3, r0
 8018730:	2b00      	cmp	r3, #0
 8018732:	d01f      	beq.n	8018774 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018734:	2300      	movs	r3, #0
 8018736:	9300      	str	r3, [sp, #0]
 8018738:	2300      	movs	r3, #0
 801873a:	687a      	ldr	r2, [r7, #4]
 801873c:	2100      	movs	r1, #0
 801873e:	6978      	ldr	r0, [r7, #20]
 8018740:	f7ff ff88 	bl	8018654 <xTimerGenericCommand>
 8018744:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018746:	693b      	ldr	r3, [r7, #16]
 8018748:	2b00      	cmp	r3, #0
 801874a:	d113      	bne.n	8018774 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018750:	f383 8811 	msr	BASEPRI, r3
 8018754:	f3bf 8f6f 	isb	sy
 8018758:	f3bf 8f4f 	dsb	sy
 801875c:	60fb      	str	r3, [r7, #12]
}
 801875e:	bf00      	nop
 8018760:	e7fe      	b.n	8018760 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018762:	697b      	ldr	r3, [r7, #20]
 8018764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018768:	f023 0301 	bic.w	r3, r3, #1
 801876c:	b2da      	uxtb	r2, r3
 801876e:	697b      	ldr	r3, [r7, #20]
 8018770:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018774:	697b      	ldr	r3, [r7, #20]
 8018776:	6a1b      	ldr	r3, [r3, #32]
 8018778:	6978      	ldr	r0, [r7, #20]
 801877a:	4798      	blx	r3
}
 801877c:	bf00      	nop
 801877e:	3718      	adds	r7, #24
 8018780:	46bd      	mov	sp, r7
 8018782:	bd80      	pop	{r7, pc}
 8018784:	200023b8 	.word	0x200023b8

08018788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018788:	b580      	push	{r7, lr}
 801878a:	b084      	sub	sp, #16
 801878c:	af00      	add	r7, sp, #0
 801878e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018790:	f107 0308 	add.w	r3, r7, #8
 8018794:	4618      	mov	r0, r3
 8018796:	f000 f857 	bl	8018848 <prvGetNextExpireTime>
 801879a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801879c:	68bb      	ldr	r3, [r7, #8]
 801879e:	4619      	mov	r1, r3
 80187a0:	68f8      	ldr	r0, [r7, #12]
 80187a2:	f000 f803 	bl	80187ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80187a6:	f000 f8d5 	bl	8018954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80187aa:	e7f1      	b.n	8018790 <prvTimerTask+0x8>

080187ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b084      	sub	sp, #16
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80187b6:	f7fe ff95 	bl	80176e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80187ba:	f107 0308 	add.w	r3, r7, #8
 80187be:	4618      	mov	r0, r3
 80187c0:	f000 f866 	bl	8018890 <prvSampleTimeNow>
 80187c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80187c6:	68bb      	ldr	r3, [r7, #8]
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d130      	bne.n	801882e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80187cc:	683b      	ldr	r3, [r7, #0]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d10a      	bne.n	80187e8 <prvProcessTimerOrBlockTask+0x3c>
 80187d2:	687a      	ldr	r2, [r7, #4]
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	429a      	cmp	r2, r3
 80187d8:	d806      	bhi.n	80187e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80187da:	f7fe ff91 	bl	8017700 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80187de:	68f9      	ldr	r1, [r7, #12]
 80187e0:	6878      	ldr	r0, [r7, #4]
 80187e2:	f7ff ff85 	bl	80186f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80187e6:	e024      	b.n	8018832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80187e8:	683b      	ldr	r3, [r7, #0]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d008      	beq.n	8018800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80187ee:	4b13      	ldr	r3, [pc, #76]	; (801883c <prvProcessTimerOrBlockTask+0x90>)
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	681b      	ldr	r3, [r3, #0]
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d101      	bne.n	80187fc <prvProcessTimerOrBlockTask+0x50>
 80187f8:	2301      	movs	r3, #1
 80187fa:	e000      	b.n	80187fe <prvProcessTimerOrBlockTask+0x52>
 80187fc:	2300      	movs	r3, #0
 80187fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018800:	4b0f      	ldr	r3, [pc, #60]	; (8018840 <prvProcessTimerOrBlockTask+0x94>)
 8018802:	6818      	ldr	r0, [r3, #0]
 8018804:	687a      	ldr	r2, [r7, #4]
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	1ad3      	subs	r3, r2, r3
 801880a:	683a      	ldr	r2, [r7, #0]
 801880c:	4619      	mov	r1, r3
 801880e:	f7fe f94d 	bl	8016aac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018812:	f7fe ff75 	bl	8017700 <xTaskResumeAll>
 8018816:	4603      	mov	r3, r0
 8018818:	2b00      	cmp	r3, #0
 801881a:	d10a      	bne.n	8018832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801881c:	4b09      	ldr	r3, [pc, #36]	; (8018844 <prvProcessTimerOrBlockTask+0x98>)
 801881e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018822:	601a      	str	r2, [r3, #0]
 8018824:	f3bf 8f4f 	dsb	sy
 8018828:	f3bf 8f6f 	isb	sy
}
 801882c:	e001      	b.n	8018832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801882e:	f7fe ff67 	bl	8017700 <xTaskResumeAll>
}
 8018832:	bf00      	nop
 8018834:	3710      	adds	r7, #16
 8018836:	46bd      	mov	sp, r7
 8018838:	bd80      	pop	{r7, pc}
 801883a:	bf00      	nop
 801883c:	200023bc 	.word	0x200023bc
 8018840:	200023c0 	.word	0x200023c0
 8018844:	e000ed04 	.word	0xe000ed04

08018848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018848:	b480      	push	{r7}
 801884a:	b085      	sub	sp, #20
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018850:	4b0e      	ldr	r3, [pc, #56]	; (801888c <prvGetNextExpireTime+0x44>)
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	2b00      	cmp	r3, #0
 8018858:	d101      	bne.n	801885e <prvGetNextExpireTime+0x16>
 801885a:	2201      	movs	r2, #1
 801885c:	e000      	b.n	8018860 <prvGetNextExpireTime+0x18>
 801885e:	2200      	movs	r2, #0
 8018860:	687b      	ldr	r3, [r7, #4]
 8018862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d105      	bne.n	8018878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801886c:	4b07      	ldr	r3, [pc, #28]	; (801888c <prvGetNextExpireTime+0x44>)
 801886e:	681b      	ldr	r3, [r3, #0]
 8018870:	68db      	ldr	r3, [r3, #12]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	60fb      	str	r3, [r7, #12]
 8018876:	e001      	b.n	801887c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018878:	2300      	movs	r3, #0
 801887a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801887c:	68fb      	ldr	r3, [r7, #12]
}
 801887e:	4618      	mov	r0, r3
 8018880:	3714      	adds	r7, #20
 8018882:	46bd      	mov	sp, r7
 8018884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018888:	4770      	bx	lr
 801888a:	bf00      	nop
 801888c:	200023b8 	.word	0x200023b8

08018890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b084      	sub	sp, #16
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018898:	f7fe ffd0 	bl	801783c <xTaskGetTickCount>
 801889c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801889e:	4b0b      	ldr	r3, [pc, #44]	; (80188cc <prvSampleTimeNow+0x3c>)
 80188a0:	681b      	ldr	r3, [r3, #0]
 80188a2:	68fa      	ldr	r2, [r7, #12]
 80188a4:	429a      	cmp	r2, r3
 80188a6:	d205      	bcs.n	80188b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80188a8:	f000 f936 	bl	8018b18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	2201      	movs	r2, #1
 80188b0:	601a      	str	r2, [r3, #0]
 80188b2:	e002      	b.n	80188ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	2200      	movs	r2, #0
 80188b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80188ba:	4a04      	ldr	r2, [pc, #16]	; (80188cc <prvSampleTimeNow+0x3c>)
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80188c0:	68fb      	ldr	r3, [r7, #12]
}
 80188c2:	4618      	mov	r0, r3
 80188c4:	3710      	adds	r7, #16
 80188c6:	46bd      	mov	sp, r7
 80188c8:	bd80      	pop	{r7, pc}
 80188ca:	bf00      	nop
 80188cc:	200023c8 	.word	0x200023c8

080188d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80188d0:	b580      	push	{r7, lr}
 80188d2:	b086      	sub	sp, #24
 80188d4:	af00      	add	r7, sp, #0
 80188d6:	60f8      	str	r0, [r7, #12]
 80188d8:	60b9      	str	r1, [r7, #8]
 80188da:	607a      	str	r2, [r7, #4]
 80188dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80188de:	2300      	movs	r3, #0
 80188e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	68ba      	ldr	r2, [r7, #8]
 80188e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	68fa      	ldr	r2, [r7, #12]
 80188ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80188ee:	68ba      	ldr	r2, [r7, #8]
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	429a      	cmp	r2, r3
 80188f4:	d812      	bhi.n	801891c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80188f6:	687a      	ldr	r2, [r7, #4]
 80188f8:	683b      	ldr	r3, [r7, #0]
 80188fa:	1ad2      	subs	r2, r2, r3
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	699b      	ldr	r3, [r3, #24]
 8018900:	429a      	cmp	r2, r3
 8018902:	d302      	bcc.n	801890a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018904:	2301      	movs	r3, #1
 8018906:	617b      	str	r3, [r7, #20]
 8018908:	e01b      	b.n	8018942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801890a:	4b10      	ldr	r3, [pc, #64]	; (801894c <prvInsertTimerInActiveList+0x7c>)
 801890c:	681a      	ldr	r2, [r3, #0]
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	3304      	adds	r3, #4
 8018912:	4619      	mov	r1, r3
 8018914:	4610      	mov	r0, r2
 8018916:	f7fc ff9a 	bl	801584e <vListInsert>
 801891a:	e012      	b.n	8018942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801891c:	687a      	ldr	r2, [r7, #4]
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	429a      	cmp	r2, r3
 8018922:	d206      	bcs.n	8018932 <prvInsertTimerInActiveList+0x62>
 8018924:	68ba      	ldr	r2, [r7, #8]
 8018926:	683b      	ldr	r3, [r7, #0]
 8018928:	429a      	cmp	r2, r3
 801892a:	d302      	bcc.n	8018932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801892c:	2301      	movs	r3, #1
 801892e:	617b      	str	r3, [r7, #20]
 8018930:	e007      	b.n	8018942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018932:	4b07      	ldr	r3, [pc, #28]	; (8018950 <prvInsertTimerInActiveList+0x80>)
 8018934:	681a      	ldr	r2, [r3, #0]
 8018936:	68fb      	ldr	r3, [r7, #12]
 8018938:	3304      	adds	r3, #4
 801893a:	4619      	mov	r1, r3
 801893c:	4610      	mov	r0, r2
 801893e:	f7fc ff86 	bl	801584e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018942:	697b      	ldr	r3, [r7, #20]
}
 8018944:	4618      	mov	r0, r3
 8018946:	3718      	adds	r7, #24
 8018948:	46bd      	mov	sp, r7
 801894a:	bd80      	pop	{r7, pc}
 801894c:	200023bc 	.word	0x200023bc
 8018950:	200023b8 	.word	0x200023b8

08018954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b08e      	sub	sp, #56	; 0x38
 8018958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801895a:	e0ca      	b.n	8018af2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	2b00      	cmp	r3, #0
 8018960:	da18      	bge.n	8018994 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018962:	1d3b      	adds	r3, r7, #4
 8018964:	3304      	adds	r3, #4
 8018966:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801896a:	2b00      	cmp	r3, #0
 801896c:	d10a      	bne.n	8018984 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801896e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018972:	f383 8811 	msr	BASEPRI, r3
 8018976:	f3bf 8f6f 	isb	sy
 801897a:	f3bf 8f4f 	dsb	sy
 801897e:	61fb      	str	r3, [r7, #28]
}
 8018980:	bf00      	nop
 8018982:	e7fe      	b.n	8018982 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801898a:	6850      	ldr	r0, [r2, #4]
 801898c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801898e:	6892      	ldr	r2, [r2, #8]
 8018990:	4611      	mov	r1, r2
 8018992:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	2b00      	cmp	r3, #0
 8018998:	f2c0 80aa 	blt.w	8018af0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80189a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189a2:	695b      	ldr	r3, [r3, #20]
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d004      	beq.n	80189b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80189a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189aa:	3304      	adds	r3, #4
 80189ac:	4618      	mov	r0, r3
 80189ae:	f7fc ff87 	bl	80158c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80189b2:	463b      	mov	r3, r7
 80189b4:	4618      	mov	r0, r3
 80189b6:	f7ff ff6b 	bl	8018890 <prvSampleTimeNow>
 80189ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	2b09      	cmp	r3, #9
 80189c0:	f200 8097 	bhi.w	8018af2 <prvProcessReceivedCommands+0x19e>
 80189c4:	a201      	add	r2, pc, #4	; (adr r2, 80189cc <prvProcessReceivedCommands+0x78>)
 80189c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189ca:	bf00      	nop
 80189cc:	080189f5 	.word	0x080189f5
 80189d0:	080189f5 	.word	0x080189f5
 80189d4:	080189f5 	.word	0x080189f5
 80189d8:	08018a69 	.word	0x08018a69
 80189dc:	08018a7d 	.word	0x08018a7d
 80189e0:	08018ac7 	.word	0x08018ac7
 80189e4:	080189f5 	.word	0x080189f5
 80189e8:	080189f5 	.word	0x080189f5
 80189ec:	08018a69 	.word	0x08018a69
 80189f0:	08018a7d 	.word	0x08018a7d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80189f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80189fa:	f043 0301 	orr.w	r3, r3, #1
 80189fe:	b2da      	uxtb	r2, r3
 8018a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018a06:	68ba      	ldr	r2, [r7, #8]
 8018a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a0a:	699b      	ldr	r3, [r3, #24]
 8018a0c:	18d1      	adds	r1, r2, r3
 8018a0e:	68bb      	ldr	r3, [r7, #8]
 8018a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a14:	f7ff ff5c 	bl	80188d0 <prvInsertTimerInActiveList>
 8018a18:	4603      	mov	r3, r0
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d069      	beq.n	8018af2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a20:	6a1b      	ldr	r3, [r3, #32]
 8018a22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a2c:	f003 0304 	and.w	r3, r3, #4
 8018a30:	2b00      	cmp	r3, #0
 8018a32:	d05e      	beq.n	8018af2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018a34:	68ba      	ldr	r2, [r7, #8]
 8018a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a38:	699b      	ldr	r3, [r3, #24]
 8018a3a:	441a      	add	r2, r3
 8018a3c:	2300      	movs	r3, #0
 8018a3e:	9300      	str	r3, [sp, #0]
 8018a40:	2300      	movs	r3, #0
 8018a42:	2100      	movs	r1, #0
 8018a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a46:	f7ff fe05 	bl	8018654 <xTimerGenericCommand>
 8018a4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018a4c:	6a3b      	ldr	r3, [r7, #32]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d14f      	bne.n	8018af2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8018a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a56:	f383 8811 	msr	BASEPRI, r3
 8018a5a:	f3bf 8f6f 	isb	sy
 8018a5e:	f3bf 8f4f 	dsb	sy
 8018a62:	61bb      	str	r3, [r7, #24]
}
 8018a64:	bf00      	nop
 8018a66:	e7fe      	b.n	8018a66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a6e:	f023 0301 	bic.w	r3, r3, #1
 8018a72:	b2da      	uxtb	r2, r3
 8018a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8018a7a:	e03a      	b.n	8018af2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018a82:	f043 0301 	orr.w	r3, r3, #1
 8018a86:	b2da      	uxtb	r2, r3
 8018a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8018a8e:	68ba      	ldr	r2, [r7, #8]
 8018a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a92:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8018a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a96:	699b      	ldr	r3, [r3, #24]
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d10a      	bne.n	8018ab2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8018a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018aa0:	f383 8811 	msr	BASEPRI, r3
 8018aa4:	f3bf 8f6f 	isb	sy
 8018aa8:	f3bf 8f4f 	dsb	sy
 8018aac:	617b      	str	r3, [r7, #20]
}
 8018aae:	bf00      	nop
 8018ab0:	e7fe      	b.n	8018ab0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8018ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ab4:	699a      	ldr	r2, [r3, #24]
 8018ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab8:	18d1      	adds	r1, r2, r3
 8018aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018abe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ac0:	f7ff ff06 	bl	80188d0 <prvInsertTimerInActiveList>
					break;
 8018ac4:	e015      	b.n	8018af2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018acc:	f003 0302 	and.w	r3, r3, #2
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d103      	bne.n	8018adc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018ad6:	f000 fbdf 	bl	8019298 <vPortFree>
 8018ada:	e00a      	b.n	8018af2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ae2:	f023 0301 	bic.w	r3, r3, #1
 8018ae6:	b2da      	uxtb	r2, r3
 8018ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8018aee:	e000      	b.n	8018af2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8018af0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018af2:	4b08      	ldr	r3, [pc, #32]	; (8018b14 <prvProcessReceivedCommands+0x1c0>)
 8018af4:	681b      	ldr	r3, [r3, #0]
 8018af6:	1d39      	adds	r1, r7, #4
 8018af8:	2200      	movs	r2, #0
 8018afa:	4618      	mov	r0, r3
 8018afc:	f7fd fb8e 	bl	801621c <xQueueReceive>
 8018b00:	4603      	mov	r3, r0
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	f47f af2a 	bne.w	801895c <prvProcessReceivedCommands+0x8>
	}
}
 8018b08:	bf00      	nop
 8018b0a:	bf00      	nop
 8018b0c:	3730      	adds	r7, #48	; 0x30
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bd80      	pop	{r7, pc}
 8018b12:	bf00      	nop
 8018b14:	200023c0 	.word	0x200023c0

08018b18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018b18:	b580      	push	{r7, lr}
 8018b1a:	b088      	sub	sp, #32
 8018b1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018b1e:	e048      	b.n	8018bb2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018b20:	4b2d      	ldr	r3, [pc, #180]	; (8018bd8 <prvSwitchTimerLists+0xc0>)
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	68db      	ldr	r3, [r3, #12]
 8018b26:	681b      	ldr	r3, [r3, #0]
 8018b28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b2a:	4b2b      	ldr	r3, [pc, #172]	; (8018bd8 <prvSwitchTimerLists+0xc0>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	68db      	ldr	r3, [r3, #12]
 8018b30:	68db      	ldr	r3, [r3, #12]
 8018b32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	3304      	adds	r3, #4
 8018b38:	4618      	mov	r0, r3
 8018b3a:	f7fc fec1 	bl	80158c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018b3e:	68fb      	ldr	r3, [r7, #12]
 8018b40:	6a1b      	ldr	r3, [r3, #32]
 8018b42:	68f8      	ldr	r0, [r7, #12]
 8018b44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018b46:	68fb      	ldr	r3, [r7, #12]
 8018b48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018b4c:	f003 0304 	and.w	r3, r3, #4
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d02e      	beq.n	8018bb2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	699b      	ldr	r3, [r3, #24]
 8018b58:	693a      	ldr	r2, [r7, #16]
 8018b5a:	4413      	add	r3, r2
 8018b5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8018b5e:	68ba      	ldr	r2, [r7, #8]
 8018b60:	693b      	ldr	r3, [r7, #16]
 8018b62:	429a      	cmp	r2, r3
 8018b64:	d90e      	bls.n	8018b84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	68ba      	ldr	r2, [r7, #8]
 8018b6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	68fa      	ldr	r2, [r7, #12]
 8018b70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018b72:	4b19      	ldr	r3, [pc, #100]	; (8018bd8 <prvSwitchTimerLists+0xc0>)
 8018b74:	681a      	ldr	r2, [r3, #0]
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	3304      	adds	r3, #4
 8018b7a:	4619      	mov	r1, r3
 8018b7c:	4610      	mov	r0, r2
 8018b7e:	f7fc fe66 	bl	801584e <vListInsert>
 8018b82:	e016      	b.n	8018bb2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018b84:	2300      	movs	r3, #0
 8018b86:	9300      	str	r3, [sp, #0]
 8018b88:	2300      	movs	r3, #0
 8018b8a:	693a      	ldr	r2, [r7, #16]
 8018b8c:	2100      	movs	r1, #0
 8018b8e:	68f8      	ldr	r0, [r7, #12]
 8018b90:	f7ff fd60 	bl	8018654 <xTimerGenericCommand>
 8018b94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d10a      	bne.n	8018bb2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8018b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ba0:	f383 8811 	msr	BASEPRI, r3
 8018ba4:	f3bf 8f6f 	isb	sy
 8018ba8:	f3bf 8f4f 	dsb	sy
 8018bac:	603b      	str	r3, [r7, #0]
}
 8018bae:	bf00      	nop
 8018bb0:	e7fe      	b.n	8018bb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8018bb2:	4b09      	ldr	r3, [pc, #36]	; (8018bd8 <prvSwitchTimerLists+0xc0>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d1b1      	bne.n	8018b20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018bbc:	4b06      	ldr	r3, [pc, #24]	; (8018bd8 <prvSwitchTimerLists+0xc0>)
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8018bc2:	4b06      	ldr	r3, [pc, #24]	; (8018bdc <prvSwitchTimerLists+0xc4>)
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	4a04      	ldr	r2, [pc, #16]	; (8018bd8 <prvSwitchTimerLists+0xc0>)
 8018bc8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018bca:	4a04      	ldr	r2, [pc, #16]	; (8018bdc <prvSwitchTimerLists+0xc4>)
 8018bcc:	697b      	ldr	r3, [r7, #20]
 8018bce:	6013      	str	r3, [r2, #0]
}
 8018bd0:	bf00      	nop
 8018bd2:	3718      	adds	r7, #24
 8018bd4:	46bd      	mov	sp, r7
 8018bd6:	bd80      	pop	{r7, pc}
 8018bd8:	200023b8 	.word	0x200023b8
 8018bdc:	200023bc 	.word	0x200023bc

08018be0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8018be0:	b580      	push	{r7, lr}
 8018be2:	b082      	sub	sp, #8
 8018be4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018be6:	f000 f965 	bl	8018eb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018bea:	4b15      	ldr	r3, [pc, #84]	; (8018c40 <prvCheckForValidListAndQueue+0x60>)
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d120      	bne.n	8018c34 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8018bf2:	4814      	ldr	r0, [pc, #80]	; (8018c44 <prvCheckForValidListAndQueue+0x64>)
 8018bf4:	f7fc fdda 	bl	80157ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018bf8:	4813      	ldr	r0, [pc, #76]	; (8018c48 <prvCheckForValidListAndQueue+0x68>)
 8018bfa:	f7fc fdd7 	bl	80157ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8018bfe:	4b13      	ldr	r3, [pc, #76]	; (8018c4c <prvCheckForValidListAndQueue+0x6c>)
 8018c00:	4a10      	ldr	r2, [pc, #64]	; (8018c44 <prvCheckForValidListAndQueue+0x64>)
 8018c02:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018c04:	4b12      	ldr	r3, [pc, #72]	; (8018c50 <prvCheckForValidListAndQueue+0x70>)
 8018c06:	4a10      	ldr	r2, [pc, #64]	; (8018c48 <prvCheckForValidListAndQueue+0x68>)
 8018c08:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	9300      	str	r3, [sp, #0]
 8018c0e:	4b11      	ldr	r3, [pc, #68]	; (8018c54 <prvCheckForValidListAndQueue+0x74>)
 8018c10:	4a11      	ldr	r2, [pc, #68]	; (8018c58 <prvCheckForValidListAndQueue+0x78>)
 8018c12:	2110      	movs	r1, #16
 8018c14:	200a      	movs	r0, #10
 8018c16:	f7fc fee5 	bl	80159e4 <xQueueGenericCreateStatic>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	4a08      	ldr	r2, [pc, #32]	; (8018c40 <prvCheckForValidListAndQueue+0x60>)
 8018c1e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8018c20:	4b07      	ldr	r3, [pc, #28]	; (8018c40 <prvCheckForValidListAndQueue+0x60>)
 8018c22:	681b      	ldr	r3, [r3, #0]
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d005      	beq.n	8018c34 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018c28:	4b05      	ldr	r3, [pc, #20]	; (8018c40 <prvCheckForValidListAndQueue+0x60>)
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	490b      	ldr	r1, [pc, #44]	; (8018c5c <prvCheckForValidListAndQueue+0x7c>)
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f7fd fee8 	bl	8016a04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018c34:	f000 f96e 	bl	8018f14 <vPortExitCritical>
}
 8018c38:	bf00      	nop
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd80      	pop	{r7, pc}
 8018c3e:	bf00      	nop
 8018c40:	200023c0 	.word	0x200023c0
 8018c44:	20002390 	.word	0x20002390
 8018c48:	200023a4 	.word	0x200023a4
 8018c4c:	200023b8 	.word	0x200023b8
 8018c50:	200023bc 	.word	0x200023bc
 8018c54:	2000246c 	.word	0x2000246c
 8018c58:	200023cc 	.word	0x200023cc
 8018c5c:	0801c8f0 	.word	0x0801c8f0

08018c60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018c60:	b480      	push	{r7}
 8018c62:	b085      	sub	sp, #20
 8018c64:	af00      	add	r7, sp, #0
 8018c66:	60f8      	str	r0, [r7, #12]
 8018c68:	60b9      	str	r1, [r7, #8]
 8018c6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	3b04      	subs	r3, #4
 8018c70:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8018c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	3b04      	subs	r3, #4
 8018c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018c80:	68bb      	ldr	r3, [r7, #8]
 8018c82:	f023 0201 	bic.w	r2, r3, #1
 8018c86:	68fb      	ldr	r3, [r7, #12]
 8018c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	3b04      	subs	r3, #4
 8018c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018c90:	4a0c      	ldr	r2, [pc, #48]	; (8018cc4 <pxPortInitialiseStack+0x64>)
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	3b14      	subs	r3, #20
 8018c9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018c9c:	687a      	ldr	r2, [r7, #4]
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	3b04      	subs	r3, #4
 8018ca6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018ca8:	68fb      	ldr	r3, [r7, #12]
 8018caa:	f06f 0202 	mvn.w	r2, #2
 8018cae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	3b20      	subs	r3, #32
 8018cb4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018cb6:	68fb      	ldr	r3, [r7, #12]
}
 8018cb8:	4618      	mov	r0, r3
 8018cba:	3714      	adds	r7, #20
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc2:	4770      	bx	lr
 8018cc4:	08018cc9 	.word	0x08018cc9

08018cc8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018cc8:	b480      	push	{r7}
 8018cca:	b085      	sub	sp, #20
 8018ccc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018cce:	2300      	movs	r3, #0
 8018cd0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018cd2:	4b12      	ldr	r3, [pc, #72]	; (8018d1c <prvTaskExitError+0x54>)
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018cda:	d00a      	beq.n	8018cf2 <prvTaskExitError+0x2a>
	__asm volatile
 8018cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ce0:	f383 8811 	msr	BASEPRI, r3
 8018ce4:	f3bf 8f6f 	isb	sy
 8018ce8:	f3bf 8f4f 	dsb	sy
 8018cec:	60fb      	str	r3, [r7, #12]
}
 8018cee:	bf00      	nop
 8018cf0:	e7fe      	b.n	8018cf0 <prvTaskExitError+0x28>
	__asm volatile
 8018cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cf6:	f383 8811 	msr	BASEPRI, r3
 8018cfa:	f3bf 8f6f 	isb	sy
 8018cfe:	f3bf 8f4f 	dsb	sy
 8018d02:	60bb      	str	r3, [r7, #8]
}
 8018d04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018d06:	bf00      	nop
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d0fc      	beq.n	8018d08 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018d0e:	bf00      	nop
 8018d10:	bf00      	nop
 8018d12:	3714      	adds	r7, #20
 8018d14:	46bd      	mov	sp, r7
 8018d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1a:	4770      	bx	lr
 8018d1c:	2000002c 	.word	0x2000002c

08018d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018d20:	4b07      	ldr	r3, [pc, #28]	; (8018d40 <pxCurrentTCBConst2>)
 8018d22:	6819      	ldr	r1, [r3, #0]
 8018d24:	6808      	ldr	r0, [r1, #0]
 8018d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d2a:	f380 8809 	msr	PSP, r0
 8018d2e:	f3bf 8f6f 	isb	sy
 8018d32:	f04f 0000 	mov.w	r0, #0
 8018d36:	f380 8811 	msr	BASEPRI, r0
 8018d3a:	4770      	bx	lr
 8018d3c:	f3af 8000 	nop.w

08018d40 <pxCurrentTCBConst2>:
 8018d40:	20001e88 	.word	0x20001e88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018d44:	bf00      	nop
 8018d46:	bf00      	nop

08018d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018d48:	4808      	ldr	r0, [pc, #32]	; (8018d6c <prvPortStartFirstTask+0x24>)
 8018d4a:	6800      	ldr	r0, [r0, #0]
 8018d4c:	6800      	ldr	r0, [r0, #0]
 8018d4e:	f380 8808 	msr	MSP, r0
 8018d52:	f04f 0000 	mov.w	r0, #0
 8018d56:	f380 8814 	msr	CONTROL, r0
 8018d5a:	b662      	cpsie	i
 8018d5c:	b661      	cpsie	f
 8018d5e:	f3bf 8f4f 	dsb	sy
 8018d62:	f3bf 8f6f 	isb	sy
 8018d66:	df00      	svc	0
 8018d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018d6a:	bf00      	nop
 8018d6c:	e000ed08 	.word	0xe000ed08

08018d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b086      	sub	sp, #24
 8018d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018d76:	4b46      	ldr	r3, [pc, #280]	; (8018e90 <xPortStartScheduler+0x120>)
 8018d78:	681b      	ldr	r3, [r3, #0]
 8018d7a:	4a46      	ldr	r2, [pc, #280]	; (8018e94 <xPortStartScheduler+0x124>)
 8018d7c:	4293      	cmp	r3, r2
 8018d7e:	d10a      	bne.n	8018d96 <xPortStartScheduler+0x26>
	__asm volatile
 8018d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d84:	f383 8811 	msr	BASEPRI, r3
 8018d88:	f3bf 8f6f 	isb	sy
 8018d8c:	f3bf 8f4f 	dsb	sy
 8018d90:	613b      	str	r3, [r7, #16]
}
 8018d92:	bf00      	nop
 8018d94:	e7fe      	b.n	8018d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018d96:	4b3e      	ldr	r3, [pc, #248]	; (8018e90 <xPortStartScheduler+0x120>)
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	4a3f      	ldr	r2, [pc, #252]	; (8018e98 <xPortStartScheduler+0x128>)
 8018d9c:	4293      	cmp	r3, r2
 8018d9e:	d10a      	bne.n	8018db6 <xPortStartScheduler+0x46>
	__asm volatile
 8018da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018da4:	f383 8811 	msr	BASEPRI, r3
 8018da8:	f3bf 8f6f 	isb	sy
 8018dac:	f3bf 8f4f 	dsb	sy
 8018db0:	60fb      	str	r3, [r7, #12]
}
 8018db2:	bf00      	nop
 8018db4:	e7fe      	b.n	8018db4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018db6:	4b39      	ldr	r3, [pc, #228]	; (8018e9c <xPortStartScheduler+0x12c>)
 8018db8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018dba:	697b      	ldr	r3, [r7, #20]
 8018dbc:	781b      	ldrb	r3, [r3, #0]
 8018dbe:	b2db      	uxtb	r3, r3
 8018dc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018dc2:	697b      	ldr	r3, [r7, #20]
 8018dc4:	22ff      	movs	r2, #255	; 0xff
 8018dc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018dc8:	697b      	ldr	r3, [r7, #20]
 8018dca:	781b      	ldrb	r3, [r3, #0]
 8018dcc:	b2db      	uxtb	r3, r3
 8018dce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018dd0:	78fb      	ldrb	r3, [r7, #3]
 8018dd2:	b2db      	uxtb	r3, r3
 8018dd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018dd8:	b2da      	uxtb	r2, r3
 8018dda:	4b31      	ldr	r3, [pc, #196]	; (8018ea0 <xPortStartScheduler+0x130>)
 8018ddc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018dde:	4b31      	ldr	r3, [pc, #196]	; (8018ea4 <xPortStartScheduler+0x134>)
 8018de0:	2207      	movs	r2, #7
 8018de2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018de4:	e009      	b.n	8018dfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018de6:	4b2f      	ldr	r3, [pc, #188]	; (8018ea4 <xPortStartScheduler+0x134>)
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	3b01      	subs	r3, #1
 8018dec:	4a2d      	ldr	r2, [pc, #180]	; (8018ea4 <xPortStartScheduler+0x134>)
 8018dee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018df0:	78fb      	ldrb	r3, [r7, #3]
 8018df2:	b2db      	uxtb	r3, r3
 8018df4:	005b      	lsls	r3, r3, #1
 8018df6:	b2db      	uxtb	r3, r3
 8018df8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018dfa:	78fb      	ldrb	r3, [r7, #3]
 8018dfc:	b2db      	uxtb	r3, r3
 8018dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e02:	2b80      	cmp	r3, #128	; 0x80
 8018e04:	d0ef      	beq.n	8018de6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018e06:	4b27      	ldr	r3, [pc, #156]	; (8018ea4 <xPortStartScheduler+0x134>)
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	f1c3 0307 	rsb	r3, r3, #7
 8018e0e:	2b04      	cmp	r3, #4
 8018e10:	d00a      	beq.n	8018e28 <xPortStartScheduler+0xb8>
	__asm volatile
 8018e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e16:	f383 8811 	msr	BASEPRI, r3
 8018e1a:	f3bf 8f6f 	isb	sy
 8018e1e:	f3bf 8f4f 	dsb	sy
 8018e22:	60bb      	str	r3, [r7, #8]
}
 8018e24:	bf00      	nop
 8018e26:	e7fe      	b.n	8018e26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018e28:	4b1e      	ldr	r3, [pc, #120]	; (8018ea4 <xPortStartScheduler+0x134>)
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	021b      	lsls	r3, r3, #8
 8018e2e:	4a1d      	ldr	r2, [pc, #116]	; (8018ea4 <xPortStartScheduler+0x134>)
 8018e30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018e32:	4b1c      	ldr	r3, [pc, #112]	; (8018ea4 <xPortStartScheduler+0x134>)
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8018e3a:	4a1a      	ldr	r2, [pc, #104]	; (8018ea4 <xPortStartScheduler+0x134>)
 8018e3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018e3e:	687b      	ldr	r3, [r7, #4]
 8018e40:	b2da      	uxtb	r2, r3
 8018e42:	697b      	ldr	r3, [r7, #20]
 8018e44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018e46:	4b18      	ldr	r3, [pc, #96]	; (8018ea8 <xPortStartScheduler+0x138>)
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	4a17      	ldr	r2, [pc, #92]	; (8018ea8 <xPortStartScheduler+0x138>)
 8018e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018e50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018e52:	4b15      	ldr	r3, [pc, #84]	; (8018ea8 <xPortStartScheduler+0x138>)
 8018e54:	681b      	ldr	r3, [r3, #0]
 8018e56:	4a14      	ldr	r2, [pc, #80]	; (8018ea8 <xPortStartScheduler+0x138>)
 8018e58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8018e5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8018e5e:	f000 f8dd 	bl	801901c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8018e62:	4b12      	ldr	r3, [pc, #72]	; (8018eac <xPortStartScheduler+0x13c>)
 8018e64:	2200      	movs	r2, #0
 8018e66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8018e68:	f000 f8fc 	bl	8019064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8018e6c:	4b10      	ldr	r3, [pc, #64]	; (8018eb0 <xPortStartScheduler+0x140>)
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	4a0f      	ldr	r2, [pc, #60]	; (8018eb0 <xPortStartScheduler+0x140>)
 8018e72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8018e76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8018e78:	f7ff ff66 	bl	8018d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8018e7c:	f7fe fda8 	bl	80179d0 <vTaskSwitchContext>
	prvTaskExitError();
 8018e80:	f7ff ff22 	bl	8018cc8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8018e84:	2300      	movs	r3, #0
}
 8018e86:	4618      	mov	r0, r3
 8018e88:	3718      	adds	r7, #24
 8018e8a:	46bd      	mov	sp, r7
 8018e8c:	bd80      	pop	{r7, pc}
 8018e8e:	bf00      	nop
 8018e90:	e000ed00 	.word	0xe000ed00
 8018e94:	410fc271 	.word	0x410fc271
 8018e98:	410fc270 	.word	0x410fc270
 8018e9c:	e000e400 	.word	0xe000e400
 8018ea0:	200024bc 	.word	0x200024bc
 8018ea4:	200024c0 	.word	0x200024c0
 8018ea8:	e000ed20 	.word	0xe000ed20
 8018eac:	2000002c 	.word	0x2000002c
 8018eb0:	e000ef34 	.word	0xe000ef34

08018eb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018eb4:	b480      	push	{r7}
 8018eb6:	b083      	sub	sp, #12
 8018eb8:	af00      	add	r7, sp, #0
	__asm volatile
 8018eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ebe:	f383 8811 	msr	BASEPRI, r3
 8018ec2:	f3bf 8f6f 	isb	sy
 8018ec6:	f3bf 8f4f 	dsb	sy
 8018eca:	607b      	str	r3, [r7, #4]
}
 8018ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8018ece:	4b0f      	ldr	r3, [pc, #60]	; (8018f0c <vPortEnterCritical+0x58>)
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	3301      	adds	r3, #1
 8018ed4:	4a0d      	ldr	r2, [pc, #52]	; (8018f0c <vPortEnterCritical+0x58>)
 8018ed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018ed8:	4b0c      	ldr	r3, [pc, #48]	; (8018f0c <vPortEnterCritical+0x58>)
 8018eda:	681b      	ldr	r3, [r3, #0]
 8018edc:	2b01      	cmp	r3, #1
 8018ede:	d10f      	bne.n	8018f00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018ee0:	4b0b      	ldr	r3, [pc, #44]	; (8018f10 <vPortEnterCritical+0x5c>)
 8018ee2:	681b      	ldr	r3, [r3, #0]
 8018ee4:	b2db      	uxtb	r3, r3
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d00a      	beq.n	8018f00 <vPortEnterCritical+0x4c>
	__asm volatile
 8018eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018eee:	f383 8811 	msr	BASEPRI, r3
 8018ef2:	f3bf 8f6f 	isb	sy
 8018ef6:	f3bf 8f4f 	dsb	sy
 8018efa:	603b      	str	r3, [r7, #0]
}
 8018efc:	bf00      	nop
 8018efe:	e7fe      	b.n	8018efe <vPortEnterCritical+0x4a>
	}
}
 8018f00:	bf00      	nop
 8018f02:	370c      	adds	r7, #12
 8018f04:	46bd      	mov	sp, r7
 8018f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f0a:	4770      	bx	lr
 8018f0c:	2000002c 	.word	0x2000002c
 8018f10:	e000ed04 	.word	0xe000ed04

08018f14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018f14:	b480      	push	{r7}
 8018f16:	b083      	sub	sp, #12
 8018f18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8018f1a:	4b12      	ldr	r3, [pc, #72]	; (8018f64 <vPortExitCritical+0x50>)
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d10a      	bne.n	8018f38 <vPortExitCritical+0x24>
	__asm volatile
 8018f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f26:	f383 8811 	msr	BASEPRI, r3
 8018f2a:	f3bf 8f6f 	isb	sy
 8018f2e:	f3bf 8f4f 	dsb	sy
 8018f32:	607b      	str	r3, [r7, #4]
}
 8018f34:	bf00      	nop
 8018f36:	e7fe      	b.n	8018f36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018f38:	4b0a      	ldr	r3, [pc, #40]	; (8018f64 <vPortExitCritical+0x50>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	3b01      	subs	r3, #1
 8018f3e:	4a09      	ldr	r2, [pc, #36]	; (8018f64 <vPortExitCritical+0x50>)
 8018f40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018f42:	4b08      	ldr	r3, [pc, #32]	; (8018f64 <vPortExitCritical+0x50>)
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d105      	bne.n	8018f56 <vPortExitCritical+0x42>
 8018f4a:	2300      	movs	r3, #0
 8018f4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018f4e:	683b      	ldr	r3, [r7, #0]
 8018f50:	f383 8811 	msr	BASEPRI, r3
}
 8018f54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8018f56:	bf00      	nop
 8018f58:	370c      	adds	r7, #12
 8018f5a:	46bd      	mov	sp, r7
 8018f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f60:	4770      	bx	lr
 8018f62:	bf00      	nop
 8018f64:	2000002c 	.word	0x2000002c
	...

08018f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8018f70:	f3ef 8009 	mrs	r0, PSP
 8018f74:	f3bf 8f6f 	isb	sy
 8018f78:	4b15      	ldr	r3, [pc, #84]	; (8018fd0 <pxCurrentTCBConst>)
 8018f7a:	681a      	ldr	r2, [r3, #0]
 8018f7c:	f01e 0f10 	tst.w	lr, #16
 8018f80:	bf08      	it	eq
 8018f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8018f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f8a:	6010      	str	r0, [r2, #0]
 8018f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8018f90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8018f94:	f380 8811 	msr	BASEPRI, r0
 8018f98:	f3bf 8f4f 	dsb	sy
 8018f9c:	f3bf 8f6f 	isb	sy
 8018fa0:	f7fe fd16 	bl	80179d0 <vTaskSwitchContext>
 8018fa4:	f04f 0000 	mov.w	r0, #0
 8018fa8:	f380 8811 	msr	BASEPRI, r0
 8018fac:	bc09      	pop	{r0, r3}
 8018fae:	6819      	ldr	r1, [r3, #0]
 8018fb0:	6808      	ldr	r0, [r1, #0]
 8018fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018fb6:	f01e 0f10 	tst.w	lr, #16
 8018fba:	bf08      	it	eq
 8018fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018fc0:	f380 8809 	msr	PSP, r0
 8018fc4:	f3bf 8f6f 	isb	sy
 8018fc8:	4770      	bx	lr
 8018fca:	bf00      	nop
 8018fcc:	f3af 8000 	nop.w

08018fd0 <pxCurrentTCBConst>:
 8018fd0:	20001e88 	.word	0x20001e88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018fd4:	bf00      	nop
 8018fd6:	bf00      	nop

08018fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018fd8:	b580      	push	{r7, lr}
 8018fda:	b082      	sub	sp, #8
 8018fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8018fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fe2:	f383 8811 	msr	BASEPRI, r3
 8018fe6:	f3bf 8f6f 	isb	sy
 8018fea:	f3bf 8f4f 	dsb	sy
 8018fee:	607b      	str	r3, [r7, #4]
}
 8018ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018ff2:	f7fe fc33 	bl	801785c <xTaskIncrementTick>
 8018ff6:	4603      	mov	r3, r0
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d003      	beq.n	8019004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8018ffc:	4b06      	ldr	r3, [pc, #24]	; (8019018 <xPortSysTickHandler+0x40>)
 8018ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019002:	601a      	str	r2, [r3, #0]
 8019004:	2300      	movs	r3, #0
 8019006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8019008:	683b      	ldr	r3, [r7, #0]
 801900a:	f383 8811 	msr	BASEPRI, r3
}
 801900e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8019010:	bf00      	nop
 8019012:	3708      	adds	r7, #8
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}
 8019018:	e000ed04 	.word	0xe000ed04

0801901c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801901c:	b480      	push	{r7}
 801901e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019020:	4b0b      	ldr	r3, [pc, #44]	; (8019050 <vPortSetupTimerInterrupt+0x34>)
 8019022:	2200      	movs	r2, #0
 8019024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019026:	4b0b      	ldr	r3, [pc, #44]	; (8019054 <vPortSetupTimerInterrupt+0x38>)
 8019028:	2200      	movs	r2, #0
 801902a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801902c:	4b0a      	ldr	r3, [pc, #40]	; (8019058 <vPortSetupTimerInterrupt+0x3c>)
 801902e:	681b      	ldr	r3, [r3, #0]
 8019030:	4a0a      	ldr	r2, [pc, #40]	; (801905c <vPortSetupTimerInterrupt+0x40>)
 8019032:	fba2 2303 	umull	r2, r3, r2, r3
 8019036:	099b      	lsrs	r3, r3, #6
 8019038:	4a09      	ldr	r2, [pc, #36]	; (8019060 <vPortSetupTimerInterrupt+0x44>)
 801903a:	3b01      	subs	r3, #1
 801903c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801903e:	4b04      	ldr	r3, [pc, #16]	; (8019050 <vPortSetupTimerInterrupt+0x34>)
 8019040:	2207      	movs	r2, #7
 8019042:	601a      	str	r2, [r3, #0]
}
 8019044:	bf00      	nop
 8019046:	46bd      	mov	sp, r7
 8019048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801904c:	4770      	bx	lr
 801904e:	bf00      	nop
 8019050:	e000e010 	.word	0xe000e010
 8019054:	e000e018 	.word	0xe000e018
 8019058:	20000020 	.word	0x20000020
 801905c:	10624dd3 	.word	0x10624dd3
 8019060:	e000e014 	.word	0xe000e014

08019064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8019074 <vPortEnableVFP+0x10>
 8019068:	6801      	ldr	r1, [r0, #0]
 801906a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801906e:	6001      	str	r1, [r0, #0]
 8019070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019072:	bf00      	nop
 8019074:	e000ed88 	.word	0xe000ed88

08019078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8019078:	b480      	push	{r7}
 801907a:	b085      	sub	sp, #20
 801907c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801907e:	f3ef 8305 	mrs	r3, IPSR
 8019082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	2b0f      	cmp	r3, #15
 8019088:	d914      	bls.n	80190b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801908a:	4a17      	ldr	r2, [pc, #92]	; (80190e8 <vPortValidateInterruptPriority+0x70>)
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	4413      	add	r3, r2
 8019090:	781b      	ldrb	r3, [r3, #0]
 8019092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019094:	4b15      	ldr	r3, [pc, #84]	; (80190ec <vPortValidateInterruptPriority+0x74>)
 8019096:	781b      	ldrb	r3, [r3, #0]
 8019098:	7afa      	ldrb	r2, [r7, #11]
 801909a:	429a      	cmp	r2, r3
 801909c:	d20a      	bcs.n	80190b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801909e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190a2:	f383 8811 	msr	BASEPRI, r3
 80190a6:	f3bf 8f6f 	isb	sy
 80190aa:	f3bf 8f4f 	dsb	sy
 80190ae:	607b      	str	r3, [r7, #4]
}
 80190b0:	bf00      	nop
 80190b2:	e7fe      	b.n	80190b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80190b4:	4b0e      	ldr	r3, [pc, #56]	; (80190f0 <vPortValidateInterruptPriority+0x78>)
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80190bc:	4b0d      	ldr	r3, [pc, #52]	; (80190f4 <vPortValidateInterruptPriority+0x7c>)
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d90a      	bls.n	80190da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80190c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80190c8:	f383 8811 	msr	BASEPRI, r3
 80190cc:	f3bf 8f6f 	isb	sy
 80190d0:	f3bf 8f4f 	dsb	sy
 80190d4:	603b      	str	r3, [r7, #0]
}
 80190d6:	bf00      	nop
 80190d8:	e7fe      	b.n	80190d8 <vPortValidateInterruptPriority+0x60>
	}
 80190da:	bf00      	nop
 80190dc:	3714      	adds	r7, #20
 80190de:	46bd      	mov	sp, r7
 80190e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e4:	4770      	bx	lr
 80190e6:	bf00      	nop
 80190e8:	e000e3f0 	.word	0xe000e3f0
 80190ec:	200024bc 	.word	0x200024bc
 80190f0:	e000ed0c 	.word	0xe000ed0c
 80190f4:	200024c0 	.word	0x200024c0

080190f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80190f8:	b580      	push	{r7, lr}
 80190fa:	b08a      	sub	sp, #40	; 0x28
 80190fc:	af00      	add	r7, sp, #0
 80190fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019100:	2300      	movs	r3, #0
 8019102:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019104:	f7fe faee 	bl	80176e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8019108:	4b5d      	ldr	r3, [pc, #372]	; (8019280 <pvPortMalloc+0x188>)
 801910a:	681b      	ldr	r3, [r3, #0]
 801910c:	2b00      	cmp	r3, #0
 801910e:	d101      	bne.n	8019114 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019110:	f000 f930 	bl	8019374 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019114:	4b5b      	ldr	r3, [pc, #364]	; (8019284 <pvPortMalloc+0x18c>)
 8019116:	681a      	ldr	r2, [r3, #0]
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	4013      	ands	r3, r2
 801911c:	2b00      	cmp	r3, #0
 801911e:	f040 8093 	bne.w	8019248 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	2b00      	cmp	r3, #0
 8019126:	d01d      	beq.n	8019164 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8019128:	2208      	movs	r2, #8
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	4413      	add	r3, r2
 801912e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	f003 0307 	and.w	r3, r3, #7
 8019136:	2b00      	cmp	r3, #0
 8019138:	d014      	beq.n	8019164 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	f023 0307 	bic.w	r3, r3, #7
 8019140:	3308      	adds	r3, #8
 8019142:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	f003 0307 	and.w	r3, r3, #7
 801914a:	2b00      	cmp	r3, #0
 801914c:	d00a      	beq.n	8019164 <pvPortMalloc+0x6c>
	__asm volatile
 801914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019152:	f383 8811 	msr	BASEPRI, r3
 8019156:	f3bf 8f6f 	isb	sy
 801915a:	f3bf 8f4f 	dsb	sy
 801915e:	617b      	str	r3, [r7, #20]
}
 8019160:	bf00      	nop
 8019162:	e7fe      	b.n	8019162 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	2b00      	cmp	r3, #0
 8019168:	d06e      	beq.n	8019248 <pvPortMalloc+0x150>
 801916a:	4b47      	ldr	r3, [pc, #284]	; (8019288 <pvPortMalloc+0x190>)
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	687a      	ldr	r2, [r7, #4]
 8019170:	429a      	cmp	r2, r3
 8019172:	d869      	bhi.n	8019248 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8019174:	4b45      	ldr	r3, [pc, #276]	; (801928c <pvPortMalloc+0x194>)
 8019176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8019178:	4b44      	ldr	r3, [pc, #272]	; (801928c <pvPortMalloc+0x194>)
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801917e:	e004      	b.n	801918a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8019180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8019184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019186:	681b      	ldr	r3, [r3, #0]
 8019188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801918a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801918c:	685b      	ldr	r3, [r3, #4]
 801918e:	687a      	ldr	r2, [r7, #4]
 8019190:	429a      	cmp	r2, r3
 8019192:	d903      	bls.n	801919c <pvPortMalloc+0xa4>
 8019194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019196:	681b      	ldr	r3, [r3, #0]
 8019198:	2b00      	cmp	r3, #0
 801919a:	d1f1      	bne.n	8019180 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801919c:	4b38      	ldr	r3, [pc, #224]	; (8019280 <pvPortMalloc+0x188>)
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191a2:	429a      	cmp	r2, r3
 80191a4:	d050      	beq.n	8019248 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80191a6:	6a3b      	ldr	r3, [r7, #32]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	2208      	movs	r2, #8
 80191ac:	4413      	add	r3, r2
 80191ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80191b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191b2:	681a      	ldr	r2, [r3, #0]
 80191b4:	6a3b      	ldr	r3, [r7, #32]
 80191b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80191b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191ba:	685a      	ldr	r2, [r3, #4]
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	1ad2      	subs	r2, r2, r3
 80191c0:	2308      	movs	r3, #8
 80191c2:	005b      	lsls	r3, r3, #1
 80191c4:	429a      	cmp	r2, r3
 80191c6:	d91f      	bls.n	8019208 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80191c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	4413      	add	r3, r2
 80191ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80191d0:	69bb      	ldr	r3, [r7, #24]
 80191d2:	f003 0307 	and.w	r3, r3, #7
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	d00a      	beq.n	80191f0 <pvPortMalloc+0xf8>
	__asm volatile
 80191da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191de:	f383 8811 	msr	BASEPRI, r3
 80191e2:	f3bf 8f6f 	isb	sy
 80191e6:	f3bf 8f4f 	dsb	sy
 80191ea:	613b      	str	r3, [r7, #16]
}
 80191ec:	bf00      	nop
 80191ee:	e7fe      	b.n	80191ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80191f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191f2:	685a      	ldr	r2, [r3, #4]
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	1ad2      	subs	r2, r2, r3
 80191f8:	69bb      	ldr	r3, [r7, #24]
 80191fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80191fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191fe:	687a      	ldr	r2, [r7, #4]
 8019200:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8019202:	69b8      	ldr	r0, [r7, #24]
 8019204:	f000 f918 	bl	8019438 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019208:	4b1f      	ldr	r3, [pc, #124]	; (8019288 <pvPortMalloc+0x190>)
 801920a:	681a      	ldr	r2, [r3, #0]
 801920c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801920e:	685b      	ldr	r3, [r3, #4]
 8019210:	1ad3      	subs	r3, r2, r3
 8019212:	4a1d      	ldr	r2, [pc, #116]	; (8019288 <pvPortMalloc+0x190>)
 8019214:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8019216:	4b1c      	ldr	r3, [pc, #112]	; (8019288 <pvPortMalloc+0x190>)
 8019218:	681a      	ldr	r2, [r3, #0]
 801921a:	4b1d      	ldr	r3, [pc, #116]	; (8019290 <pvPortMalloc+0x198>)
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	429a      	cmp	r2, r3
 8019220:	d203      	bcs.n	801922a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8019222:	4b19      	ldr	r3, [pc, #100]	; (8019288 <pvPortMalloc+0x190>)
 8019224:	681b      	ldr	r3, [r3, #0]
 8019226:	4a1a      	ldr	r2, [pc, #104]	; (8019290 <pvPortMalloc+0x198>)
 8019228:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801922c:	685a      	ldr	r2, [r3, #4]
 801922e:	4b15      	ldr	r3, [pc, #84]	; (8019284 <pvPortMalloc+0x18c>)
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	431a      	orrs	r2, r3
 8019234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019236:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801923a:	2200      	movs	r2, #0
 801923c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801923e:	4b15      	ldr	r3, [pc, #84]	; (8019294 <pvPortMalloc+0x19c>)
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	3301      	adds	r3, #1
 8019244:	4a13      	ldr	r2, [pc, #76]	; (8019294 <pvPortMalloc+0x19c>)
 8019246:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019248:	f7fe fa5a 	bl	8017700 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 801924c:	69fb      	ldr	r3, [r7, #28]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d101      	bne.n	8019256 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8019252:	f7f3 fe2b 	bl	800ceac <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8019256:	69fb      	ldr	r3, [r7, #28]
 8019258:	f003 0307 	and.w	r3, r3, #7
 801925c:	2b00      	cmp	r3, #0
 801925e:	d00a      	beq.n	8019276 <pvPortMalloc+0x17e>
	__asm volatile
 8019260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019264:	f383 8811 	msr	BASEPRI, r3
 8019268:	f3bf 8f6f 	isb	sy
 801926c:	f3bf 8f4f 	dsb	sy
 8019270:	60fb      	str	r3, [r7, #12]
}
 8019272:	bf00      	nop
 8019274:	e7fe      	b.n	8019274 <pvPortMalloc+0x17c>
	return pvReturn;
 8019276:	69fb      	ldr	r3, [r7, #28]
}
 8019278:	4618      	mov	r0, r3
 801927a:	3728      	adds	r7, #40	; 0x28
 801927c:	46bd      	mov	sp, r7
 801927e:	bd80      	pop	{r7, pc}
 8019280:	2000a4cc 	.word	0x2000a4cc
 8019284:	2000a4e0 	.word	0x2000a4e0
 8019288:	2000a4d0 	.word	0x2000a4d0
 801928c:	2000a4c4 	.word	0x2000a4c4
 8019290:	2000a4d4 	.word	0x2000a4d4
 8019294:	2000a4d8 	.word	0x2000a4d8

08019298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b086      	sub	sp, #24
 801929c:	af00      	add	r7, sp, #0
 801929e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d04d      	beq.n	8019346 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80192aa:	2308      	movs	r3, #8
 80192ac:	425b      	negs	r3, r3
 80192ae:	697a      	ldr	r2, [r7, #20]
 80192b0:	4413      	add	r3, r2
 80192b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80192b4:	697b      	ldr	r3, [r7, #20]
 80192b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80192b8:	693b      	ldr	r3, [r7, #16]
 80192ba:	685a      	ldr	r2, [r3, #4]
 80192bc:	4b24      	ldr	r3, [pc, #144]	; (8019350 <vPortFree+0xb8>)
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	4013      	ands	r3, r2
 80192c2:	2b00      	cmp	r3, #0
 80192c4:	d10a      	bne.n	80192dc <vPortFree+0x44>
	__asm volatile
 80192c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192ca:	f383 8811 	msr	BASEPRI, r3
 80192ce:	f3bf 8f6f 	isb	sy
 80192d2:	f3bf 8f4f 	dsb	sy
 80192d6:	60fb      	str	r3, [r7, #12]
}
 80192d8:	bf00      	nop
 80192da:	e7fe      	b.n	80192da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80192dc:	693b      	ldr	r3, [r7, #16]
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d00a      	beq.n	80192fa <vPortFree+0x62>
	__asm volatile
 80192e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192e8:	f383 8811 	msr	BASEPRI, r3
 80192ec:	f3bf 8f6f 	isb	sy
 80192f0:	f3bf 8f4f 	dsb	sy
 80192f4:	60bb      	str	r3, [r7, #8]
}
 80192f6:	bf00      	nop
 80192f8:	e7fe      	b.n	80192f8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80192fa:	693b      	ldr	r3, [r7, #16]
 80192fc:	685a      	ldr	r2, [r3, #4]
 80192fe:	4b14      	ldr	r3, [pc, #80]	; (8019350 <vPortFree+0xb8>)
 8019300:	681b      	ldr	r3, [r3, #0]
 8019302:	4013      	ands	r3, r2
 8019304:	2b00      	cmp	r3, #0
 8019306:	d01e      	beq.n	8019346 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019308:	693b      	ldr	r3, [r7, #16]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	2b00      	cmp	r3, #0
 801930e:	d11a      	bne.n	8019346 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019310:	693b      	ldr	r3, [r7, #16]
 8019312:	685a      	ldr	r2, [r3, #4]
 8019314:	4b0e      	ldr	r3, [pc, #56]	; (8019350 <vPortFree+0xb8>)
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	43db      	mvns	r3, r3
 801931a:	401a      	ands	r2, r3
 801931c:	693b      	ldr	r3, [r7, #16]
 801931e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019320:	f7fe f9e0 	bl	80176e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8019324:	693b      	ldr	r3, [r7, #16]
 8019326:	685a      	ldr	r2, [r3, #4]
 8019328:	4b0a      	ldr	r3, [pc, #40]	; (8019354 <vPortFree+0xbc>)
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	4413      	add	r3, r2
 801932e:	4a09      	ldr	r2, [pc, #36]	; (8019354 <vPortFree+0xbc>)
 8019330:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8019332:	6938      	ldr	r0, [r7, #16]
 8019334:	f000 f880 	bl	8019438 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8019338:	4b07      	ldr	r3, [pc, #28]	; (8019358 <vPortFree+0xc0>)
 801933a:	681b      	ldr	r3, [r3, #0]
 801933c:	3301      	adds	r3, #1
 801933e:	4a06      	ldr	r2, [pc, #24]	; (8019358 <vPortFree+0xc0>)
 8019340:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8019342:	f7fe f9dd 	bl	8017700 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019346:	bf00      	nop
 8019348:	3718      	adds	r7, #24
 801934a:	46bd      	mov	sp, r7
 801934c:	bd80      	pop	{r7, pc}
 801934e:	bf00      	nop
 8019350:	2000a4e0 	.word	0x2000a4e0
 8019354:	2000a4d0 	.word	0x2000a4d0
 8019358:	2000a4dc 	.word	0x2000a4dc

0801935c <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 801935c:	b480      	push	{r7}
 801935e:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8019360:	4b03      	ldr	r3, [pc, #12]	; (8019370 <xPortGetFreeHeapSize+0x14>)
 8019362:	681b      	ldr	r3, [r3, #0]
}
 8019364:	4618      	mov	r0, r3
 8019366:	46bd      	mov	sp, r7
 8019368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801936c:	4770      	bx	lr
 801936e:	bf00      	nop
 8019370:	2000a4d0 	.word	0x2000a4d0

08019374 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019374:	b480      	push	{r7}
 8019376:	b085      	sub	sp, #20
 8019378:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801937a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801937e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8019380:	4b27      	ldr	r3, [pc, #156]	; (8019420 <prvHeapInit+0xac>)
 8019382:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	f003 0307 	and.w	r3, r3, #7
 801938a:	2b00      	cmp	r3, #0
 801938c:	d00c      	beq.n	80193a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	3307      	adds	r3, #7
 8019392:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	f023 0307 	bic.w	r3, r3, #7
 801939a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801939c:	68ba      	ldr	r2, [r7, #8]
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	1ad3      	subs	r3, r2, r3
 80193a2:	4a1f      	ldr	r2, [pc, #124]	; (8019420 <prvHeapInit+0xac>)
 80193a4:	4413      	add	r3, r2
 80193a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80193ac:	4a1d      	ldr	r2, [pc, #116]	; (8019424 <prvHeapInit+0xb0>)
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80193b2:	4b1c      	ldr	r3, [pc, #112]	; (8019424 <prvHeapInit+0xb0>)
 80193b4:	2200      	movs	r2, #0
 80193b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80193b8:	687b      	ldr	r3, [r7, #4]
 80193ba:	68ba      	ldr	r2, [r7, #8]
 80193bc:	4413      	add	r3, r2
 80193be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80193c0:	2208      	movs	r2, #8
 80193c2:	68fb      	ldr	r3, [r7, #12]
 80193c4:	1a9b      	subs	r3, r3, r2
 80193c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	f023 0307 	bic.w	r3, r3, #7
 80193ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80193d0:	68fb      	ldr	r3, [r7, #12]
 80193d2:	4a15      	ldr	r2, [pc, #84]	; (8019428 <prvHeapInit+0xb4>)
 80193d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80193d6:	4b14      	ldr	r3, [pc, #80]	; (8019428 <prvHeapInit+0xb4>)
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	2200      	movs	r2, #0
 80193dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80193de:	4b12      	ldr	r3, [pc, #72]	; (8019428 <prvHeapInit+0xb4>)
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	2200      	movs	r2, #0
 80193e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80193ea:	683b      	ldr	r3, [r7, #0]
 80193ec:	68fa      	ldr	r2, [r7, #12]
 80193ee:	1ad2      	subs	r2, r2, r3
 80193f0:	683b      	ldr	r3, [r7, #0]
 80193f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80193f4:	4b0c      	ldr	r3, [pc, #48]	; (8019428 <prvHeapInit+0xb4>)
 80193f6:	681a      	ldr	r2, [r3, #0]
 80193f8:	683b      	ldr	r3, [r7, #0]
 80193fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80193fc:	683b      	ldr	r3, [r7, #0]
 80193fe:	685b      	ldr	r3, [r3, #4]
 8019400:	4a0a      	ldr	r2, [pc, #40]	; (801942c <prvHeapInit+0xb8>)
 8019402:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019404:	683b      	ldr	r3, [r7, #0]
 8019406:	685b      	ldr	r3, [r3, #4]
 8019408:	4a09      	ldr	r2, [pc, #36]	; (8019430 <prvHeapInit+0xbc>)
 801940a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801940c:	4b09      	ldr	r3, [pc, #36]	; (8019434 <prvHeapInit+0xc0>)
 801940e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019412:	601a      	str	r2, [r3, #0]
}
 8019414:	bf00      	nop
 8019416:	3714      	adds	r7, #20
 8019418:	46bd      	mov	sp, r7
 801941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941e:	4770      	bx	lr
 8019420:	200024c4 	.word	0x200024c4
 8019424:	2000a4c4 	.word	0x2000a4c4
 8019428:	2000a4cc 	.word	0x2000a4cc
 801942c:	2000a4d4 	.word	0x2000a4d4
 8019430:	2000a4d0 	.word	0x2000a4d0
 8019434:	2000a4e0 	.word	0x2000a4e0

08019438 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019438:	b480      	push	{r7}
 801943a:	b085      	sub	sp, #20
 801943c:	af00      	add	r7, sp, #0
 801943e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019440:	4b28      	ldr	r3, [pc, #160]	; (80194e4 <prvInsertBlockIntoFreeList+0xac>)
 8019442:	60fb      	str	r3, [r7, #12]
 8019444:	e002      	b.n	801944c <prvInsertBlockIntoFreeList+0x14>
 8019446:	68fb      	ldr	r3, [r7, #12]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	60fb      	str	r3, [r7, #12]
 801944c:	68fb      	ldr	r3, [r7, #12]
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	687a      	ldr	r2, [r7, #4]
 8019452:	429a      	cmp	r2, r3
 8019454:	d8f7      	bhi.n	8019446 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	685b      	ldr	r3, [r3, #4]
 801945e:	68ba      	ldr	r2, [r7, #8]
 8019460:	4413      	add	r3, r2
 8019462:	687a      	ldr	r2, [r7, #4]
 8019464:	429a      	cmp	r2, r3
 8019466:	d108      	bne.n	801947a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019468:	68fb      	ldr	r3, [r7, #12]
 801946a:	685a      	ldr	r2, [r3, #4]
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	685b      	ldr	r3, [r3, #4]
 8019470:	441a      	add	r2, r3
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	685b      	ldr	r3, [r3, #4]
 8019482:	68ba      	ldr	r2, [r7, #8]
 8019484:	441a      	add	r2, r3
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	429a      	cmp	r2, r3
 801948c:	d118      	bne.n	80194c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801948e:	68fb      	ldr	r3, [r7, #12]
 8019490:	681a      	ldr	r2, [r3, #0]
 8019492:	4b15      	ldr	r3, [pc, #84]	; (80194e8 <prvInsertBlockIntoFreeList+0xb0>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	429a      	cmp	r2, r3
 8019498:	d00d      	beq.n	80194b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	685a      	ldr	r2, [r3, #4]
 801949e:	68fb      	ldr	r3, [r7, #12]
 80194a0:	681b      	ldr	r3, [r3, #0]
 80194a2:	685b      	ldr	r3, [r3, #4]
 80194a4:	441a      	add	r2, r3
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80194aa:	68fb      	ldr	r3, [r7, #12]
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	681a      	ldr	r2, [r3, #0]
 80194b0:	687b      	ldr	r3, [r7, #4]
 80194b2:	601a      	str	r2, [r3, #0]
 80194b4:	e008      	b.n	80194c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80194b6:	4b0c      	ldr	r3, [pc, #48]	; (80194e8 <prvInsertBlockIntoFreeList+0xb0>)
 80194b8:	681a      	ldr	r2, [r3, #0]
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	601a      	str	r2, [r3, #0]
 80194be:	e003      	b.n	80194c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	681a      	ldr	r2, [r3, #0]
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80194c8:	68fa      	ldr	r2, [r7, #12]
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	429a      	cmp	r2, r3
 80194ce:	d002      	beq.n	80194d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80194d0:	68fb      	ldr	r3, [r7, #12]
 80194d2:	687a      	ldr	r2, [r7, #4]
 80194d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80194d6:	bf00      	nop
 80194d8:	3714      	adds	r7, #20
 80194da:	46bd      	mov	sp, r7
 80194dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e0:	4770      	bx	lr
 80194e2:	bf00      	nop
 80194e4:	2000a4c4 	.word	0x2000a4c4
 80194e8:	2000a4cc 	.word	0x2000a4cc

080194ec <_ZdlPvj>:
 80194ec:	f000 b816 	b.w	801951c <_ZdlPv>

080194f0 <_ZdaPv>:
 80194f0:	f000 b814 	b.w	801951c <_ZdlPv>

080194f4 <__cxa_guard_acquire>:
 80194f4:	6803      	ldr	r3, [r0, #0]
 80194f6:	07db      	lsls	r3, r3, #31
 80194f8:	d406      	bmi.n	8019508 <__cxa_guard_acquire+0x14>
 80194fa:	7843      	ldrb	r3, [r0, #1]
 80194fc:	b103      	cbz	r3, 8019500 <__cxa_guard_acquire+0xc>
 80194fe:	deff      	udf	#255	; 0xff
 8019500:	2301      	movs	r3, #1
 8019502:	7043      	strb	r3, [r0, #1]
 8019504:	4618      	mov	r0, r3
 8019506:	4770      	bx	lr
 8019508:	2000      	movs	r0, #0
 801950a:	4770      	bx	lr

0801950c <__cxa_guard_release>:
 801950c:	2301      	movs	r3, #1
 801950e:	6003      	str	r3, [r0, #0]
 8019510:	4770      	bx	lr

08019512 <_Znaj>:
 8019512:	f000 b805 	b.w	8019520 <_Znwj>

08019516 <_ZSt25__throw_bad_function_callv>:
 8019516:	b508      	push	{r3, lr}
 8019518:	f000 fa46 	bl	80199a8 <abort>

0801951c <_ZdlPv>:
 801951c:	f000 bb7e 	b.w	8019c1c <free>

08019520 <_Znwj>:
 8019520:	2801      	cmp	r0, #1
 8019522:	bf38      	it	cc
 8019524:	2001      	movcc	r0, #1
 8019526:	b510      	push	{r4, lr}
 8019528:	4604      	mov	r4, r0
 801952a:	4620      	mov	r0, r4
 801952c:	f000 fb6e 	bl	8019c0c <malloc>
 8019530:	b930      	cbnz	r0, 8019540 <_Znwj+0x20>
 8019532:	f000 f807 	bl	8019544 <_ZSt15get_new_handlerv>
 8019536:	b908      	cbnz	r0, 801953c <_Znwj+0x1c>
 8019538:	f000 fa36 	bl	80199a8 <abort>
 801953c:	4780      	blx	r0
 801953e:	e7f4      	b.n	801952a <_Znwj+0xa>
 8019540:	bd10      	pop	{r4, pc}
	...

08019544 <_ZSt15get_new_handlerv>:
 8019544:	4b02      	ldr	r3, [pc, #8]	; (8019550 <_ZSt15get_new_handlerv+0xc>)
 8019546:	6818      	ldr	r0, [r3, #0]
 8019548:	f3bf 8f5b 	dmb	ish
 801954c:	4770      	bx	lr
 801954e:	bf00      	nop
 8019550:	2000a4e4 	.word	0x2000a4e4

08019554 <roundf>:
 8019554:	ee10 0a10 	vmov	r0, s0
 8019558:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 801955c:	3a7f      	subs	r2, #127	; 0x7f
 801955e:	2a16      	cmp	r2, #22
 8019560:	dc15      	bgt.n	801958e <roundf+0x3a>
 8019562:	2a00      	cmp	r2, #0
 8019564:	da08      	bge.n	8019578 <roundf+0x24>
 8019566:	3201      	adds	r2, #1
 8019568:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801956c:	d101      	bne.n	8019572 <roundf+0x1e>
 801956e:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8019572:	ee00 3a10 	vmov	s0, r3
 8019576:	4770      	bx	lr
 8019578:	4907      	ldr	r1, [pc, #28]	; (8019598 <roundf+0x44>)
 801957a:	4111      	asrs	r1, r2
 801957c:	4208      	tst	r0, r1
 801957e:	d0fa      	beq.n	8019576 <roundf+0x22>
 8019580:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8019584:	4113      	asrs	r3, r2
 8019586:	4403      	add	r3, r0
 8019588:	ea23 0301 	bic.w	r3, r3, r1
 801958c:	e7f1      	b.n	8019572 <roundf+0x1e>
 801958e:	2a80      	cmp	r2, #128	; 0x80
 8019590:	d1f1      	bne.n	8019576 <roundf+0x22>
 8019592:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019596:	4770      	bx	lr
 8019598:	007fffff 	.word	0x007fffff
 801959c:	00000000 	.word	0x00000000

080195a0 <log>:
 80195a0:	b538      	push	{r3, r4, r5, lr}
 80195a2:	ed2d 8b02 	vpush	{d8}
 80195a6:	ec55 4b10 	vmov	r4, r5, d0
 80195aa:	f000 f839 	bl	8019620 <__ieee754_log>
 80195ae:	4622      	mov	r2, r4
 80195b0:	462b      	mov	r3, r5
 80195b2:	4620      	mov	r0, r4
 80195b4:	4629      	mov	r1, r5
 80195b6:	eeb0 8a40 	vmov.f32	s16, s0
 80195ba:	eef0 8a60 	vmov.f32	s17, s1
 80195be:	f7e7 fab5 	bl	8000b2c <__aeabi_dcmpun>
 80195c2:	b998      	cbnz	r0, 80195ec <log+0x4c>
 80195c4:	2200      	movs	r2, #0
 80195c6:	2300      	movs	r3, #0
 80195c8:	4620      	mov	r0, r4
 80195ca:	4629      	mov	r1, r5
 80195cc:	f7e7 faa4 	bl	8000b18 <__aeabi_dcmpgt>
 80195d0:	b960      	cbnz	r0, 80195ec <log+0x4c>
 80195d2:	2200      	movs	r2, #0
 80195d4:	2300      	movs	r3, #0
 80195d6:	4620      	mov	r0, r4
 80195d8:	4629      	mov	r1, r5
 80195da:	f7e7 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 80195de:	b160      	cbz	r0, 80195fa <log+0x5a>
 80195e0:	f000 f9f0 	bl	80199c4 <__errno>
 80195e4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8019610 <log+0x70>
 80195e8:	2322      	movs	r3, #34	; 0x22
 80195ea:	6003      	str	r3, [r0, #0]
 80195ec:	eeb0 0a48 	vmov.f32	s0, s16
 80195f0:	eef0 0a68 	vmov.f32	s1, s17
 80195f4:	ecbd 8b02 	vpop	{d8}
 80195f8:	bd38      	pop	{r3, r4, r5, pc}
 80195fa:	f000 f9e3 	bl	80199c4 <__errno>
 80195fe:	ecbd 8b02 	vpop	{d8}
 8019602:	2321      	movs	r3, #33	; 0x21
 8019604:	6003      	str	r3, [r0, #0]
 8019606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801960a:	4803      	ldr	r0, [pc, #12]	; (8019618 <log+0x78>)
 801960c:	f000 b9c4 	b.w	8019998 <nan>
 8019610:	00000000 	.word	0x00000000
 8019614:	fff00000 	.word	0xfff00000
 8019618:	0801cfaf 	.word	0x0801cfaf
 801961c:	00000000 	.word	0x00000000

08019620 <__ieee754_log>:
 8019620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019624:	ec51 0b10 	vmov	r0, r1, d0
 8019628:	ed2d 8b04 	vpush	{d8-d9}
 801962c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8019630:	b083      	sub	sp, #12
 8019632:	460d      	mov	r5, r1
 8019634:	da29      	bge.n	801968a <__ieee754_log+0x6a>
 8019636:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801963a:	4303      	orrs	r3, r0
 801963c:	ee10 2a10 	vmov	r2, s0
 8019640:	d10c      	bne.n	801965c <__ieee754_log+0x3c>
 8019642:	49cf      	ldr	r1, [pc, #828]	; (8019980 <__ieee754_log+0x360>)
 8019644:	2200      	movs	r2, #0
 8019646:	2300      	movs	r3, #0
 8019648:	2000      	movs	r0, #0
 801964a:	f7e7 f8ff 	bl	800084c <__aeabi_ddiv>
 801964e:	ec41 0b10 	vmov	d0, r0, r1
 8019652:	b003      	add	sp, #12
 8019654:	ecbd 8b04 	vpop	{d8-d9}
 8019658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801965c:	2900      	cmp	r1, #0
 801965e:	da05      	bge.n	801966c <__ieee754_log+0x4c>
 8019660:	460b      	mov	r3, r1
 8019662:	f7e6 fe11 	bl	8000288 <__aeabi_dsub>
 8019666:	2200      	movs	r2, #0
 8019668:	2300      	movs	r3, #0
 801966a:	e7ee      	b.n	801964a <__ieee754_log+0x2a>
 801966c:	4bc5      	ldr	r3, [pc, #788]	; (8019984 <__ieee754_log+0x364>)
 801966e:	2200      	movs	r2, #0
 8019670:	f7e6 ffc2 	bl	80005f8 <__aeabi_dmul>
 8019674:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8019678:	460d      	mov	r5, r1
 801967a:	4ac3      	ldr	r2, [pc, #780]	; (8019988 <__ieee754_log+0x368>)
 801967c:	4295      	cmp	r5, r2
 801967e:	dd06      	ble.n	801968e <__ieee754_log+0x6e>
 8019680:	4602      	mov	r2, r0
 8019682:	460b      	mov	r3, r1
 8019684:	f7e6 fe02 	bl	800028c <__adddf3>
 8019688:	e7e1      	b.n	801964e <__ieee754_log+0x2e>
 801968a:	2300      	movs	r3, #0
 801968c:	e7f5      	b.n	801967a <__ieee754_log+0x5a>
 801968e:	152c      	asrs	r4, r5, #20
 8019690:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8019694:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8019698:	441c      	add	r4, r3
 801969a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801969e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80196a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80196a6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80196aa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80196ae:	ea42 0105 	orr.w	r1, r2, r5
 80196b2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80196b6:	2200      	movs	r2, #0
 80196b8:	4bb4      	ldr	r3, [pc, #720]	; (801998c <__ieee754_log+0x36c>)
 80196ba:	f7e6 fde5 	bl	8000288 <__aeabi_dsub>
 80196be:	1cab      	adds	r3, r5, #2
 80196c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80196c4:	2b02      	cmp	r3, #2
 80196c6:	4682      	mov	sl, r0
 80196c8:	468b      	mov	fp, r1
 80196ca:	f04f 0200 	mov.w	r2, #0
 80196ce:	dc53      	bgt.n	8019778 <__ieee754_log+0x158>
 80196d0:	2300      	movs	r3, #0
 80196d2:	f7e7 f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80196d6:	b1d0      	cbz	r0, 801970e <__ieee754_log+0xee>
 80196d8:	2c00      	cmp	r4, #0
 80196da:	f000 8122 	beq.w	8019922 <__ieee754_log+0x302>
 80196de:	4620      	mov	r0, r4
 80196e0:	f7e6 ff20 	bl	8000524 <__aeabi_i2d>
 80196e4:	a390      	add	r3, pc, #576	; (adr r3, 8019928 <__ieee754_log+0x308>)
 80196e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196ea:	4606      	mov	r6, r0
 80196ec:	460f      	mov	r7, r1
 80196ee:	f7e6 ff83 	bl	80005f8 <__aeabi_dmul>
 80196f2:	a38f      	add	r3, pc, #572	; (adr r3, 8019930 <__ieee754_log+0x310>)
 80196f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80196f8:	4604      	mov	r4, r0
 80196fa:	460d      	mov	r5, r1
 80196fc:	4630      	mov	r0, r6
 80196fe:	4639      	mov	r1, r7
 8019700:	f7e6 ff7a 	bl	80005f8 <__aeabi_dmul>
 8019704:	4602      	mov	r2, r0
 8019706:	460b      	mov	r3, r1
 8019708:	4620      	mov	r0, r4
 801970a:	4629      	mov	r1, r5
 801970c:	e7ba      	b.n	8019684 <__ieee754_log+0x64>
 801970e:	a38a      	add	r3, pc, #552	; (adr r3, 8019938 <__ieee754_log+0x318>)
 8019710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019714:	4650      	mov	r0, sl
 8019716:	4659      	mov	r1, fp
 8019718:	f7e6 ff6e 	bl	80005f8 <__aeabi_dmul>
 801971c:	4602      	mov	r2, r0
 801971e:	460b      	mov	r3, r1
 8019720:	2000      	movs	r0, #0
 8019722:	499b      	ldr	r1, [pc, #620]	; (8019990 <__ieee754_log+0x370>)
 8019724:	f7e6 fdb0 	bl	8000288 <__aeabi_dsub>
 8019728:	4652      	mov	r2, sl
 801972a:	4606      	mov	r6, r0
 801972c:	460f      	mov	r7, r1
 801972e:	465b      	mov	r3, fp
 8019730:	4650      	mov	r0, sl
 8019732:	4659      	mov	r1, fp
 8019734:	f7e6 ff60 	bl	80005f8 <__aeabi_dmul>
 8019738:	4602      	mov	r2, r0
 801973a:	460b      	mov	r3, r1
 801973c:	4630      	mov	r0, r6
 801973e:	4639      	mov	r1, r7
 8019740:	f7e6 ff5a 	bl	80005f8 <__aeabi_dmul>
 8019744:	4606      	mov	r6, r0
 8019746:	460f      	mov	r7, r1
 8019748:	b914      	cbnz	r4, 8019750 <__ieee754_log+0x130>
 801974a:	4632      	mov	r2, r6
 801974c:	463b      	mov	r3, r7
 801974e:	e0a2      	b.n	8019896 <__ieee754_log+0x276>
 8019750:	4620      	mov	r0, r4
 8019752:	f7e6 fee7 	bl	8000524 <__aeabi_i2d>
 8019756:	a374      	add	r3, pc, #464	; (adr r3, 8019928 <__ieee754_log+0x308>)
 8019758:	e9d3 2300 	ldrd	r2, r3, [r3]
 801975c:	4680      	mov	r8, r0
 801975e:	4689      	mov	r9, r1
 8019760:	f7e6 ff4a 	bl	80005f8 <__aeabi_dmul>
 8019764:	a372      	add	r3, pc, #456	; (adr r3, 8019930 <__ieee754_log+0x310>)
 8019766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801976a:	4604      	mov	r4, r0
 801976c:	460d      	mov	r5, r1
 801976e:	4640      	mov	r0, r8
 8019770:	4649      	mov	r1, r9
 8019772:	f7e6 ff41 	bl	80005f8 <__aeabi_dmul>
 8019776:	e0a7      	b.n	80198c8 <__ieee754_log+0x2a8>
 8019778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801977c:	f7e6 fd86 	bl	800028c <__adddf3>
 8019780:	4602      	mov	r2, r0
 8019782:	460b      	mov	r3, r1
 8019784:	4650      	mov	r0, sl
 8019786:	4659      	mov	r1, fp
 8019788:	f7e7 f860 	bl	800084c <__aeabi_ddiv>
 801978c:	ec41 0b18 	vmov	d8, r0, r1
 8019790:	4620      	mov	r0, r4
 8019792:	f7e6 fec7 	bl	8000524 <__aeabi_i2d>
 8019796:	ec53 2b18 	vmov	r2, r3, d8
 801979a:	ec41 0b19 	vmov	d9, r0, r1
 801979e:	ec51 0b18 	vmov	r0, r1, d8
 80197a2:	f7e6 ff29 	bl	80005f8 <__aeabi_dmul>
 80197a6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80197aa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80197ae:	9301      	str	r3, [sp, #4]
 80197b0:	4602      	mov	r2, r0
 80197b2:	460b      	mov	r3, r1
 80197b4:	4680      	mov	r8, r0
 80197b6:	4689      	mov	r9, r1
 80197b8:	f7e6 ff1e 	bl	80005f8 <__aeabi_dmul>
 80197bc:	a360      	add	r3, pc, #384	; (adr r3, 8019940 <__ieee754_log+0x320>)
 80197be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197c2:	4606      	mov	r6, r0
 80197c4:	460f      	mov	r7, r1
 80197c6:	f7e6 ff17 	bl	80005f8 <__aeabi_dmul>
 80197ca:	a35f      	add	r3, pc, #380	; (adr r3, 8019948 <__ieee754_log+0x328>)
 80197cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197d0:	f7e6 fd5c 	bl	800028c <__adddf3>
 80197d4:	4632      	mov	r2, r6
 80197d6:	463b      	mov	r3, r7
 80197d8:	f7e6 ff0e 	bl	80005f8 <__aeabi_dmul>
 80197dc:	a35c      	add	r3, pc, #368	; (adr r3, 8019950 <__ieee754_log+0x330>)
 80197de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197e2:	f7e6 fd53 	bl	800028c <__adddf3>
 80197e6:	4632      	mov	r2, r6
 80197e8:	463b      	mov	r3, r7
 80197ea:	f7e6 ff05 	bl	80005f8 <__aeabi_dmul>
 80197ee:	a35a      	add	r3, pc, #360	; (adr r3, 8019958 <__ieee754_log+0x338>)
 80197f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80197f4:	f7e6 fd4a 	bl	800028c <__adddf3>
 80197f8:	4642      	mov	r2, r8
 80197fa:	464b      	mov	r3, r9
 80197fc:	f7e6 fefc 	bl	80005f8 <__aeabi_dmul>
 8019800:	a357      	add	r3, pc, #348	; (adr r3, 8019960 <__ieee754_log+0x340>)
 8019802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019806:	4680      	mov	r8, r0
 8019808:	4689      	mov	r9, r1
 801980a:	4630      	mov	r0, r6
 801980c:	4639      	mov	r1, r7
 801980e:	f7e6 fef3 	bl	80005f8 <__aeabi_dmul>
 8019812:	a355      	add	r3, pc, #340	; (adr r3, 8019968 <__ieee754_log+0x348>)
 8019814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019818:	f7e6 fd38 	bl	800028c <__adddf3>
 801981c:	4632      	mov	r2, r6
 801981e:	463b      	mov	r3, r7
 8019820:	f7e6 feea 	bl	80005f8 <__aeabi_dmul>
 8019824:	a352      	add	r3, pc, #328	; (adr r3, 8019970 <__ieee754_log+0x350>)
 8019826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801982a:	f7e6 fd2f 	bl	800028c <__adddf3>
 801982e:	4632      	mov	r2, r6
 8019830:	463b      	mov	r3, r7
 8019832:	f7e6 fee1 	bl	80005f8 <__aeabi_dmul>
 8019836:	460b      	mov	r3, r1
 8019838:	4602      	mov	r2, r0
 801983a:	4649      	mov	r1, r9
 801983c:	4640      	mov	r0, r8
 801983e:	f7e6 fd25 	bl	800028c <__adddf3>
 8019842:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8019846:	9b01      	ldr	r3, [sp, #4]
 8019848:	3551      	adds	r5, #81	; 0x51
 801984a:	431d      	orrs	r5, r3
 801984c:	2d00      	cmp	r5, #0
 801984e:	4680      	mov	r8, r0
 8019850:	4689      	mov	r9, r1
 8019852:	dd48      	ble.n	80198e6 <__ieee754_log+0x2c6>
 8019854:	4b4e      	ldr	r3, [pc, #312]	; (8019990 <__ieee754_log+0x370>)
 8019856:	2200      	movs	r2, #0
 8019858:	4650      	mov	r0, sl
 801985a:	4659      	mov	r1, fp
 801985c:	f7e6 fecc 	bl	80005f8 <__aeabi_dmul>
 8019860:	4652      	mov	r2, sl
 8019862:	465b      	mov	r3, fp
 8019864:	f7e6 fec8 	bl	80005f8 <__aeabi_dmul>
 8019868:	4602      	mov	r2, r0
 801986a:	460b      	mov	r3, r1
 801986c:	4606      	mov	r6, r0
 801986e:	460f      	mov	r7, r1
 8019870:	4640      	mov	r0, r8
 8019872:	4649      	mov	r1, r9
 8019874:	f7e6 fd0a 	bl	800028c <__adddf3>
 8019878:	ec53 2b18 	vmov	r2, r3, d8
 801987c:	f7e6 febc 	bl	80005f8 <__aeabi_dmul>
 8019880:	4680      	mov	r8, r0
 8019882:	4689      	mov	r9, r1
 8019884:	b964      	cbnz	r4, 80198a0 <__ieee754_log+0x280>
 8019886:	4602      	mov	r2, r0
 8019888:	460b      	mov	r3, r1
 801988a:	4630      	mov	r0, r6
 801988c:	4639      	mov	r1, r7
 801988e:	f7e6 fcfb 	bl	8000288 <__aeabi_dsub>
 8019892:	4602      	mov	r2, r0
 8019894:	460b      	mov	r3, r1
 8019896:	4650      	mov	r0, sl
 8019898:	4659      	mov	r1, fp
 801989a:	f7e6 fcf5 	bl	8000288 <__aeabi_dsub>
 801989e:	e6d6      	b.n	801964e <__ieee754_log+0x2e>
 80198a0:	a321      	add	r3, pc, #132	; (adr r3, 8019928 <__ieee754_log+0x308>)
 80198a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198a6:	ec51 0b19 	vmov	r0, r1, d9
 80198aa:	f7e6 fea5 	bl	80005f8 <__aeabi_dmul>
 80198ae:	a320      	add	r3, pc, #128	; (adr r3, 8019930 <__ieee754_log+0x310>)
 80198b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80198b4:	4604      	mov	r4, r0
 80198b6:	460d      	mov	r5, r1
 80198b8:	ec51 0b19 	vmov	r0, r1, d9
 80198bc:	f7e6 fe9c 	bl	80005f8 <__aeabi_dmul>
 80198c0:	4642      	mov	r2, r8
 80198c2:	464b      	mov	r3, r9
 80198c4:	f7e6 fce2 	bl	800028c <__adddf3>
 80198c8:	4602      	mov	r2, r0
 80198ca:	460b      	mov	r3, r1
 80198cc:	4630      	mov	r0, r6
 80198ce:	4639      	mov	r1, r7
 80198d0:	f7e6 fcda 	bl	8000288 <__aeabi_dsub>
 80198d4:	4652      	mov	r2, sl
 80198d6:	465b      	mov	r3, fp
 80198d8:	f7e6 fcd6 	bl	8000288 <__aeabi_dsub>
 80198dc:	4602      	mov	r2, r0
 80198de:	460b      	mov	r3, r1
 80198e0:	4620      	mov	r0, r4
 80198e2:	4629      	mov	r1, r5
 80198e4:	e7d9      	b.n	801989a <__ieee754_log+0x27a>
 80198e6:	4602      	mov	r2, r0
 80198e8:	460b      	mov	r3, r1
 80198ea:	4650      	mov	r0, sl
 80198ec:	4659      	mov	r1, fp
 80198ee:	f7e6 fccb 	bl	8000288 <__aeabi_dsub>
 80198f2:	ec53 2b18 	vmov	r2, r3, d8
 80198f6:	f7e6 fe7f 	bl	80005f8 <__aeabi_dmul>
 80198fa:	4606      	mov	r6, r0
 80198fc:	460f      	mov	r7, r1
 80198fe:	2c00      	cmp	r4, #0
 8019900:	f43f af23 	beq.w	801974a <__ieee754_log+0x12a>
 8019904:	a308      	add	r3, pc, #32	; (adr r3, 8019928 <__ieee754_log+0x308>)
 8019906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801990a:	ec51 0b19 	vmov	r0, r1, d9
 801990e:	f7e6 fe73 	bl	80005f8 <__aeabi_dmul>
 8019912:	a307      	add	r3, pc, #28	; (adr r3, 8019930 <__ieee754_log+0x310>)
 8019914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019918:	4604      	mov	r4, r0
 801991a:	460d      	mov	r5, r1
 801991c:	ec51 0b19 	vmov	r0, r1, d9
 8019920:	e727      	b.n	8019772 <__ieee754_log+0x152>
 8019922:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8019978 <__ieee754_log+0x358>
 8019926:	e694      	b.n	8019652 <__ieee754_log+0x32>
 8019928:	fee00000 	.word	0xfee00000
 801992c:	3fe62e42 	.word	0x3fe62e42
 8019930:	35793c76 	.word	0x35793c76
 8019934:	3dea39ef 	.word	0x3dea39ef
 8019938:	55555555 	.word	0x55555555
 801993c:	3fd55555 	.word	0x3fd55555
 8019940:	df3e5244 	.word	0xdf3e5244
 8019944:	3fc2f112 	.word	0x3fc2f112
 8019948:	96cb03de 	.word	0x96cb03de
 801994c:	3fc74664 	.word	0x3fc74664
 8019950:	94229359 	.word	0x94229359
 8019954:	3fd24924 	.word	0x3fd24924
 8019958:	55555593 	.word	0x55555593
 801995c:	3fe55555 	.word	0x3fe55555
 8019960:	d078c69f 	.word	0xd078c69f
 8019964:	3fc39a09 	.word	0x3fc39a09
 8019968:	1d8e78af 	.word	0x1d8e78af
 801996c:	3fcc71c5 	.word	0x3fcc71c5
 8019970:	9997fa04 	.word	0x9997fa04
 8019974:	3fd99999 	.word	0x3fd99999
	...
 8019980:	c3500000 	.word	0xc3500000
 8019984:	43500000 	.word	0x43500000
 8019988:	7fefffff 	.word	0x7fefffff
 801998c:	3ff00000 	.word	0x3ff00000
 8019990:	3fe00000 	.word	0x3fe00000
 8019994:	00000000 	.word	0x00000000

08019998 <nan>:
 8019998:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80199a0 <nan+0x8>
 801999c:	4770      	bx	lr
 801999e:	bf00      	nop
 80199a0:	00000000 	.word	0x00000000
 80199a4:	7ff80000 	.word	0x7ff80000

080199a8 <abort>:
 80199a8:	b508      	push	{r3, lr}
 80199aa:	2006      	movs	r0, #6
 80199ac:	f000 ff40 	bl	801a830 <raise>
 80199b0:	2001      	movs	r0, #1
 80199b2:	f7f3 fee5 	bl	800d780 <_exit>

080199b6 <atexit>:
 80199b6:	2300      	movs	r3, #0
 80199b8:	4601      	mov	r1, r0
 80199ba:	461a      	mov	r2, r3
 80199bc:	4618      	mov	r0, r3
 80199be:	f000 bfa9 	b.w	801a914 <__register_exitproc>
	...

080199c4 <__errno>:
 80199c4:	4b01      	ldr	r3, [pc, #4]	; (80199cc <__errno+0x8>)
 80199c6:	6818      	ldr	r0, [r3, #0]
 80199c8:	4770      	bx	lr
 80199ca:	bf00      	nop
 80199cc:	20000030 	.word	0x20000030

080199d0 <std>:
 80199d0:	2300      	movs	r3, #0
 80199d2:	b510      	push	{r4, lr}
 80199d4:	4604      	mov	r4, r0
 80199d6:	e9c0 3300 	strd	r3, r3, [r0]
 80199da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80199de:	6083      	str	r3, [r0, #8]
 80199e0:	8181      	strh	r1, [r0, #12]
 80199e2:	6643      	str	r3, [r0, #100]	; 0x64
 80199e4:	81c2      	strh	r2, [r0, #14]
 80199e6:	6183      	str	r3, [r0, #24]
 80199e8:	4619      	mov	r1, r3
 80199ea:	2208      	movs	r2, #8
 80199ec:	305c      	adds	r0, #92	; 0x5c
 80199ee:	f000 f92b 	bl	8019c48 <memset>
 80199f2:	4b05      	ldr	r3, [pc, #20]	; (8019a08 <std+0x38>)
 80199f4:	6263      	str	r3, [r4, #36]	; 0x24
 80199f6:	4b05      	ldr	r3, [pc, #20]	; (8019a0c <std+0x3c>)
 80199f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80199fa:	4b05      	ldr	r3, [pc, #20]	; (8019a10 <std+0x40>)
 80199fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80199fe:	4b05      	ldr	r3, [pc, #20]	; (8019a14 <std+0x44>)
 8019a00:	6224      	str	r4, [r4, #32]
 8019a02:	6323      	str	r3, [r4, #48]	; 0x30
 8019a04:	bd10      	pop	{r4, pc}
 8019a06:	bf00      	nop
 8019a08:	0801a869 	.word	0x0801a869
 8019a0c:	0801a88b 	.word	0x0801a88b
 8019a10:	0801a8c3 	.word	0x0801a8c3
 8019a14:	0801a8e7 	.word	0x0801a8e7

08019a18 <_cleanup_r>:
 8019a18:	4901      	ldr	r1, [pc, #4]	; (8019a20 <_cleanup_r+0x8>)
 8019a1a:	f000 b8af 	b.w	8019b7c <_fwalk_reent>
 8019a1e:	bf00      	nop
 8019a20:	0801b7f9 	.word	0x0801b7f9

08019a24 <__sfmoreglue>:
 8019a24:	b570      	push	{r4, r5, r6, lr}
 8019a26:	2268      	movs	r2, #104	; 0x68
 8019a28:	1e4d      	subs	r5, r1, #1
 8019a2a:	4355      	muls	r5, r2
 8019a2c:	460e      	mov	r6, r1
 8019a2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019a32:	f000 f97d 	bl	8019d30 <_malloc_r>
 8019a36:	4604      	mov	r4, r0
 8019a38:	b140      	cbz	r0, 8019a4c <__sfmoreglue+0x28>
 8019a3a:	2100      	movs	r1, #0
 8019a3c:	e9c0 1600 	strd	r1, r6, [r0]
 8019a40:	300c      	adds	r0, #12
 8019a42:	60a0      	str	r0, [r4, #8]
 8019a44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019a48:	f000 f8fe 	bl	8019c48 <memset>
 8019a4c:	4620      	mov	r0, r4
 8019a4e:	bd70      	pop	{r4, r5, r6, pc}

08019a50 <__sfp_lock_acquire>:
 8019a50:	4801      	ldr	r0, [pc, #4]	; (8019a58 <__sfp_lock_acquire+0x8>)
 8019a52:	f000 b8d8 	b.w	8019c06 <__retarget_lock_acquire_recursive>
 8019a56:	bf00      	nop
 8019a58:	2000a4ea 	.word	0x2000a4ea

08019a5c <__sfp_lock_release>:
 8019a5c:	4801      	ldr	r0, [pc, #4]	; (8019a64 <__sfp_lock_release+0x8>)
 8019a5e:	f000 b8d4 	b.w	8019c0a <__retarget_lock_release_recursive>
 8019a62:	bf00      	nop
 8019a64:	2000a4ea 	.word	0x2000a4ea

08019a68 <__sinit_lock_acquire>:
 8019a68:	4801      	ldr	r0, [pc, #4]	; (8019a70 <__sinit_lock_acquire+0x8>)
 8019a6a:	f000 b8cc 	b.w	8019c06 <__retarget_lock_acquire_recursive>
 8019a6e:	bf00      	nop
 8019a70:	2000a4eb 	.word	0x2000a4eb

08019a74 <__sinit_lock_release>:
 8019a74:	4801      	ldr	r0, [pc, #4]	; (8019a7c <__sinit_lock_release+0x8>)
 8019a76:	f000 b8c8 	b.w	8019c0a <__retarget_lock_release_recursive>
 8019a7a:	bf00      	nop
 8019a7c:	2000a4eb 	.word	0x2000a4eb

08019a80 <__sinit>:
 8019a80:	b510      	push	{r4, lr}
 8019a82:	4604      	mov	r4, r0
 8019a84:	f7ff fff0 	bl	8019a68 <__sinit_lock_acquire>
 8019a88:	69a3      	ldr	r3, [r4, #24]
 8019a8a:	b11b      	cbz	r3, 8019a94 <__sinit+0x14>
 8019a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a90:	f7ff bff0 	b.w	8019a74 <__sinit_lock_release>
 8019a94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019a98:	6523      	str	r3, [r4, #80]	; 0x50
 8019a9a:	4b13      	ldr	r3, [pc, #76]	; (8019ae8 <__sinit+0x68>)
 8019a9c:	4a13      	ldr	r2, [pc, #76]	; (8019aec <__sinit+0x6c>)
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	62a2      	str	r2, [r4, #40]	; 0x28
 8019aa2:	42a3      	cmp	r3, r4
 8019aa4:	bf04      	itt	eq
 8019aa6:	2301      	moveq	r3, #1
 8019aa8:	61a3      	streq	r3, [r4, #24]
 8019aaa:	4620      	mov	r0, r4
 8019aac:	f000 f820 	bl	8019af0 <__sfp>
 8019ab0:	6060      	str	r0, [r4, #4]
 8019ab2:	4620      	mov	r0, r4
 8019ab4:	f000 f81c 	bl	8019af0 <__sfp>
 8019ab8:	60a0      	str	r0, [r4, #8]
 8019aba:	4620      	mov	r0, r4
 8019abc:	f000 f818 	bl	8019af0 <__sfp>
 8019ac0:	2200      	movs	r2, #0
 8019ac2:	60e0      	str	r0, [r4, #12]
 8019ac4:	2104      	movs	r1, #4
 8019ac6:	6860      	ldr	r0, [r4, #4]
 8019ac8:	f7ff ff82 	bl	80199d0 <std>
 8019acc:	68a0      	ldr	r0, [r4, #8]
 8019ace:	2201      	movs	r2, #1
 8019ad0:	2109      	movs	r1, #9
 8019ad2:	f7ff ff7d 	bl	80199d0 <std>
 8019ad6:	68e0      	ldr	r0, [r4, #12]
 8019ad8:	2202      	movs	r2, #2
 8019ada:	2112      	movs	r1, #18
 8019adc:	f7ff ff78 	bl	80199d0 <std>
 8019ae0:	2301      	movs	r3, #1
 8019ae2:	61a3      	str	r3, [r4, #24]
 8019ae4:	e7d2      	b.n	8019a8c <__sinit+0xc>
 8019ae6:	bf00      	nop
 8019ae8:	0801cd50 	.word	0x0801cd50
 8019aec:	08019a19 	.word	0x08019a19

08019af0 <__sfp>:
 8019af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019af2:	4607      	mov	r7, r0
 8019af4:	f7ff ffac 	bl	8019a50 <__sfp_lock_acquire>
 8019af8:	4b1e      	ldr	r3, [pc, #120]	; (8019b74 <__sfp+0x84>)
 8019afa:	681e      	ldr	r6, [r3, #0]
 8019afc:	69b3      	ldr	r3, [r6, #24]
 8019afe:	b913      	cbnz	r3, 8019b06 <__sfp+0x16>
 8019b00:	4630      	mov	r0, r6
 8019b02:	f7ff ffbd 	bl	8019a80 <__sinit>
 8019b06:	3648      	adds	r6, #72	; 0x48
 8019b08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019b0c:	3b01      	subs	r3, #1
 8019b0e:	d503      	bpl.n	8019b18 <__sfp+0x28>
 8019b10:	6833      	ldr	r3, [r6, #0]
 8019b12:	b30b      	cbz	r3, 8019b58 <__sfp+0x68>
 8019b14:	6836      	ldr	r6, [r6, #0]
 8019b16:	e7f7      	b.n	8019b08 <__sfp+0x18>
 8019b18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019b1c:	b9d5      	cbnz	r5, 8019b54 <__sfp+0x64>
 8019b1e:	4b16      	ldr	r3, [pc, #88]	; (8019b78 <__sfp+0x88>)
 8019b20:	60e3      	str	r3, [r4, #12]
 8019b22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019b26:	6665      	str	r5, [r4, #100]	; 0x64
 8019b28:	f000 f86c 	bl	8019c04 <__retarget_lock_init_recursive>
 8019b2c:	f7ff ff96 	bl	8019a5c <__sfp_lock_release>
 8019b30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019b34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019b38:	6025      	str	r5, [r4, #0]
 8019b3a:	61a5      	str	r5, [r4, #24]
 8019b3c:	2208      	movs	r2, #8
 8019b3e:	4629      	mov	r1, r5
 8019b40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019b44:	f000 f880 	bl	8019c48 <memset>
 8019b48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019b4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019b50:	4620      	mov	r0, r4
 8019b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b54:	3468      	adds	r4, #104	; 0x68
 8019b56:	e7d9      	b.n	8019b0c <__sfp+0x1c>
 8019b58:	2104      	movs	r1, #4
 8019b5a:	4638      	mov	r0, r7
 8019b5c:	f7ff ff62 	bl	8019a24 <__sfmoreglue>
 8019b60:	4604      	mov	r4, r0
 8019b62:	6030      	str	r0, [r6, #0]
 8019b64:	2800      	cmp	r0, #0
 8019b66:	d1d5      	bne.n	8019b14 <__sfp+0x24>
 8019b68:	f7ff ff78 	bl	8019a5c <__sfp_lock_release>
 8019b6c:	230c      	movs	r3, #12
 8019b6e:	603b      	str	r3, [r7, #0]
 8019b70:	e7ee      	b.n	8019b50 <__sfp+0x60>
 8019b72:	bf00      	nop
 8019b74:	0801cd50 	.word	0x0801cd50
 8019b78:	ffff0001 	.word	0xffff0001

08019b7c <_fwalk_reent>:
 8019b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b80:	4606      	mov	r6, r0
 8019b82:	4688      	mov	r8, r1
 8019b84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019b88:	2700      	movs	r7, #0
 8019b8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019b8e:	f1b9 0901 	subs.w	r9, r9, #1
 8019b92:	d505      	bpl.n	8019ba0 <_fwalk_reent+0x24>
 8019b94:	6824      	ldr	r4, [r4, #0]
 8019b96:	2c00      	cmp	r4, #0
 8019b98:	d1f7      	bne.n	8019b8a <_fwalk_reent+0xe>
 8019b9a:	4638      	mov	r0, r7
 8019b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ba0:	89ab      	ldrh	r3, [r5, #12]
 8019ba2:	2b01      	cmp	r3, #1
 8019ba4:	d907      	bls.n	8019bb6 <_fwalk_reent+0x3a>
 8019ba6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019baa:	3301      	adds	r3, #1
 8019bac:	d003      	beq.n	8019bb6 <_fwalk_reent+0x3a>
 8019bae:	4629      	mov	r1, r5
 8019bb0:	4630      	mov	r0, r6
 8019bb2:	47c0      	blx	r8
 8019bb4:	4307      	orrs	r7, r0
 8019bb6:	3568      	adds	r5, #104	; 0x68
 8019bb8:	e7e9      	b.n	8019b8e <_fwalk_reent+0x12>
	...

08019bbc <__libc_init_array>:
 8019bbc:	b570      	push	{r4, r5, r6, lr}
 8019bbe:	4d0d      	ldr	r5, [pc, #52]	; (8019bf4 <__libc_init_array+0x38>)
 8019bc0:	4c0d      	ldr	r4, [pc, #52]	; (8019bf8 <__libc_init_array+0x3c>)
 8019bc2:	1b64      	subs	r4, r4, r5
 8019bc4:	10a4      	asrs	r4, r4, #2
 8019bc6:	2600      	movs	r6, #0
 8019bc8:	42a6      	cmp	r6, r4
 8019bca:	d109      	bne.n	8019be0 <__libc_init_array+0x24>
 8019bcc:	4d0b      	ldr	r5, [pc, #44]	; (8019bfc <__libc_init_array+0x40>)
 8019bce:	4c0c      	ldr	r4, [pc, #48]	; (8019c00 <__libc_init_array+0x44>)
 8019bd0:	f002 fd0e 	bl	801c5f0 <_init>
 8019bd4:	1b64      	subs	r4, r4, r5
 8019bd6:	10a4      	asrs	r4, r4, #2
 8019bd8:	2600      	movs	r6, #0
 8019bda:	42a6      	cmp	r6, r4
 8019bdc:	d105      	bne.n	8019bea <__libc_init_array+0x2e>
 8019bde:	bd70      	pop	{r4, r5, r6, pc}
 8019be0:	f855 3b04 	ldr.w	r3, [r5], #4
 8019be4:	4798      	blx	r3
 8019be6:	3601      	adds	r6, #1
 8019be8:	e7ee      	b.n	8019bc8 <__libc_init_array+0xc>
 8019bea:	f855 3b04 	ldr.w	r3, [r5], #4
 8019bee:	4798      	blx	r3
 8019bf0:	3601      	adds	r6, #1
 8019bf2:	e7f2      	b.n	8019bda <__libc_init_array+0x1e>
 8019bf4:	0801d0d4 	.word	0x0801d0d4
 8019bf8:	0801d0d4 	.word	0x0801d0d4
 8019bfc:	0801d0d4 	.word	0x0801d0d4
 8019c00:	0801d0fc 	.word	0x0801d0fc

08019c04 <__retarget_lock_init_recursive>:
 8019c04:	4770      	bx	lr

08019c06 <__retarget_lock_acquire_recursive>:
 8019c06:	4770      	bx	lr

08019c08 <__retarget_lock_release>:
 8019c08:	4770      	bx	lr

08019c0a <__retarget_lock_release_recursive>:
 8019c0a:	4770      	bx	lr

08019c0c <malloc>:
 8019c0c:	4b02      	ldr	r3, [pc, #8]	; (8019c18 <malloc+0xc>)
 8019c0e:	4601      	mov	r1, r0
 8019c10:	6818      	ldr	r0, [r3, #0]
 8019c12:	f000 b88d 	b.w	8019d30 <_malloc_r>
 8019c16:	bf00      	nop
 8019c18:	20000030 	.word	0x20000030

08019c1c <free>:
 8019c1c:	4b02      	ldr	r3, [pc, #8]	; (8019c28 <free+0xc>)
 8019c1e:	4601      	mov	r1, r0
 8019c20:	6818      	ldr	r0, [r3, #0]
 8019c22:	f000 b819 	b.w	8019c58 <_free_r>
 8019c26:	bf00      	nop
 8019c28:	20000030 	.word	0x20000030

08019c2c <memcpy>:
 8019c2c:	440a      	add	r2, r1
 8019c2e:	4291      	cmp	r1, r2
 8019c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8019c34:	d100      	bne.n	8019c38 <memcpy+0xc>
 8019c36:	4770      	bx	lr
 8019c38:	b510      	push	{r4, lr}
 8019c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c42:	4291      	cmp	r1, r2
 8019c44:	d1f9      	bne.n	8019c3a <memcpy+0xe>
 8019c46:	bd10      	pop	{r4, pc}

08019c48 <memset>:
 8019c48:	4402      	add	r2, r0
 8019c4a:	4603      	mov	r3, r0
 8019c4c:	4293      	cmp	r3, r2
 8019c4e:	d100      	bne.n	8019c52 <memset+0xa>
 8019c50:	4770      	bx	lr
 8019c52:	f803 1b01 	strb.w	r1, [r3], #1
 8019c56:	e7f9      	b.n	8019c4c <memset+0x4>

08019c58 <_free_r>:
 8019c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019c5a:	2900      	cmp	r1, #0
 8019c5c:	d044      	beq.n	8019ce8 <_free_r+0x90>
 8019c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c62:	9001      	str	r0, [sp, #4]
 8019c64:	2b00      	cmp	r3, #0
 8019c66:	f1a1 0404 	sub.w	r4, r1, #4
 8019c6a:	bfb8      	it	lt
 8019c6c:	18e4      	addlt	r4, r4, r3
 8019c6e:	f001 fe15 	bl	801b89c <__malloc_lock>
 8019c72:	4a1e      	ldr	r2, [pc, #120]	; (8019cec <_free_r+0x94>)
 8019c74:	9801      	ldr	r0, [sp, #4]
 8019c76:	6813      	ldr	r3, [r2, #0]
 8019c78:	b933      	cbnz	r3, 8019c88 <_free_r+0x30>
 8019c7a:	6063      	str	r3, [r4, #4]
 8019c7c:	6014      	str	r4, [r2, #0]
 8019c7e:	b003      	add	sp, #12
 8019c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c84:	f001 be10 	b.w	801b8a8 <__malloc_unlock>
 8019c88:	42a3      	cmp	r3, r4
 8019c8a:	d908      	bls.n	8019c9e <_free_r+0x46>
 8019c8c:	6825      	ldr	r5, [r4, #0]
 8019c8e:	1961      	adds	r1, r4, r5
 8019c90:	428b      	cmp	r3, r1
 8019c92:	bf01      	itttt	eq
 8019c94:	6819      	ldreq	r1, [r3, #0]
 8019c96:	685b      	ldreq	r3, [r3, #4]
 8019c98:	1949      	addeq	r1, r1, r5
 8019c9a:	6021      	streq	r1, [r4, #0]
 8019c9c:	e7ed      	b.n	8019c7a <_free_r+0x22>
 8019c9e:	461a      	mov	r2, r3
 8019ca0:	685b      	ldr	r3, [r3, #4]
 8019ca2:	b10b      	cbz	r3, 8019ca8 <_free_r+0x50>
 8019ca4:	42a3      	cmp	r3, r4
 8019ca6:	d9fa      	bls.n	8019c9e <_free_r+0x46>
 8019ca8:	6811      	ldr	r1, [r2, #0]
 8019caa:	1855      	adds	r5, r2, r1
 8019cac:	42a5      	cmp	r5, r4
 8019cae:	d10b      	bne.n	8019cc8 <_free_r+0x70>
 8019cb0:	6824      	ldr	r4, [r4, #0]
 8019cb2:	4421      	add	r1, r4
 8019cb4:	1854      	adds	r4, r2, r1
 8019cb6:	42a3      	cmp	r3, r4
 8019cb8:	6011      	str	r1, [r2, #0]
 8019cba:	d1e0      	bne.n	8019c7e <_free_r+0x26>
 8019cbc:	681c      	ldr	r4, [r3, #0]
 8019cbe:	685b      	ldr	r3, [r3, #4]
 8019cc0:	6053      	str	r3, [r2, #4]
 8019cc2:	4421      	add	r1, r4
 8019cc4:	6011      	str	r1, [r2, #0]
 8019cc6:	e7da      	b.n	8019c7e <_free_r+0x26>
 8019cc8:	d902      	bls.n	8019cd0 <_free_r+0x78>
 8019cca:	230c      	movs	r3, #12
 8019ccc:	6003      	str	r3, [r0, #0]
 8019cce:	e7d6      	b.n	8019c7e <_free_r+0x26>
 8019cd0:	6825      	ldr	r5, [r4, #0]
 8019cd2:	1961      	adds	r1, r4, r5
 8019cd4:	428b      	cmp	r3, r1
 8019cd6:	bf04      	itt	eq
 8019cd8:	6819      	ldreq	r1, [r3, #0]
 8019cda:	685b      	ldreq	r3, [r3, #4]
 8019cdc:	6063      	str	r3, [r4, #4]
 8019cde:	bf04      	itt	eq
 8019ce0:	1949      	addeq	r1, r1, r5
 8019ce2:	6021      	streq	r1, [r4, #0]
 8019ce4:	6054      	str	r4, [r2, #4]
 8019ce6:	e7ca      	b.n	8019c7e <_free_r+0x26>
 8019ce8:	b003      	add	sp, #12
 8019cea:	bd30      	pop	{r4, r5, pc}
 8019cec:	2000a4ec 	.word	0x2000a4ec

08019cf0 <sbrk_aligned>:
 8019cf0:	b570      	push	{r4, r5, r6, lr}
 8019cf2:	4e0e      	ldr	r6, [pc, #56]	; (8019d2c <sbrk_aligned+0x3c>)
 8019cf4:	460c      	mov	r4, r1
 8019cf6:	6831      	ldr	r1, [r6, #0]
 8019cf8:	4605      	mov	r5, r0
 8019cfa:	b911      	cbnz	r1, 8019d02 <sbrk_aligned+0x12>
 8019cfc:	f000 fd60 	bl	801a7c0 <_sbrk_r>
 8019d00:	6030      	str	r0, [r6, #0]
 8019d02:	4621      	mov	r1, r4
 8019d04:	4628      	mov	r0, r5
 8019d06:	f000 fd5b 	bl	801a7c0 <_sbrk_r>
 8019d0a:	1c43      	adds	r3, r0, #1
 8019d0c:	d00a      	beq.n	8019d24 <sbrk_aligned+0x34>
 8019d0e:	1cc4      	adds	r4, r0, #3
 8019d10:	f024 0403 	bic.w	r4, r4, #3
 8019d14:	42a0      	cmp	r0, r4
 8019d16:	d007      	beq.n	8019d28 <sbrk_aligned+0x38>
 8019d18:	1a21      	subs	r1, r4, r0
 8019d1a:	4628      	mov	r0, r5
 8019d1c:	f000 fd50 	bl	801a7c0 <_sbrk_r>
 8019d20:	3001      	adds	r0, #1
 8019d22:	d101      	bne.n	8019d28 <sbrk_aligned+0x38>
 8019d24:	f04f 34ff 	mov.w	r4, #4294967295
 8019d28:	4620      	mov	r0, r4
 8019d2a:	bd70      	pop	{r4, r5, r6, pc}
 8019d2c:	2000a4f0 	.word	0x2000a4f0

08019d30 <_malloc_r>:
 8019d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d34:	1ccd      	adds	r5, r1, #3
 8019d36:	f025 0503 	bic.w	r5, r5, #3
 8019d3a:	3508      	adds	r5, #8
 8019d3c:	2d0c      	cmp	r5, #12
 8019d3e:	bf38      	it	cc
 8019d40:	250c      	movcc	r5, #12
 8019d42:	2d00      	cmp	r5, #0
 8019d44:	4607      	mov	r7, r0
 8019d46:	db01      	blt.n	8019d4c <_malloc_r+0x1c>
 8019d48:	42a9      	cmp	r1, r5
 8019d4a:	d905      	bls.n	8019d58 <_malloc_r+0x28>
 8019d4c:	230c      	movs	r3, #12
 8019d4e:	603b      	str	r3, [r7, #0]
 8019d50:	2600      	movs	r6, #0
 8019d52:	4630      	mov	r0, r6
 8019d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d58:	4e2e      	ldr	r6, [pc, #184]	; (8019e14 <_malloc_r+0xe4>)
 8019d5a:	f001 fd9f 	bl	801b89c <__malloc_lock>
 8019d5e:	6833      	ldr	r3, [r6, #0]
 8019d60:	461c      	mov	r4, r3
 8019d62:	bb34      	cbnz	r4, 8019db2 <_malloc_r+0x82>
 8019d64:	4629      	mov	r1, r5
 8019d66:	4638      	mov	r0, r7
 8019d68:	f7ff ffc2 	bl	8019cf0 <sbrk_aligned>
 8019d6c:	1c43      	adds	r3, r0, #1
 8019d6e:	4604      	mov	r4, r0
 8019d70:	d14d      	bne.n	8019e0e <_malloc_r+0xde>
 8019d72:	6834      	ldr	r4, [r6, #0]
 8019d74:	4626      	mov	r6, r4
 8019d76:	2e00      	cmp	r6, #0
 8019d78:	d140      	bne.n	8019dfc <_malloc_r+0xcc>
 8019d7a:	6823      	ldr	r3, [r4, #0]
 8019d7c:	4631      	mov	r1, r6
 8019d7e:	4638      	mov	r0, r7
 8019d80:	eb04 0803 	add.w	r8, r4, r3
 8019d84:	f000 fd1c 	bl	801a7c0 <_sbrk_r>
 8019d88:	4580      	cmp	r8, r0
 8019d8a:	d13a      	bne.n	8019e02 <_malloc_r+0xd2>
 8019d8c:	6821      	ldr	r1, [r4, #0]
 8019d8e:	3503      	adds	r5, #3
 8019d90:	1a6d      	subs	r5, r5, r1
 8019d92:	f025 0503 	bic.w	r5, r5, #3
 8019d96:	3508      	adds	r5, #8
 8019d98:	2d0c      	cmp	r5, #12
 8019d9a:	bf38      	it	cc
 8019d9c:	250c      	movcc	r5, #12
 8019d9e:	4629      	mov	r1, r5
 8019da0:	4638      	mov	r0, r7
 8019da2:	f7ff ffa5 	bl	8019cf0 <sbrk_aligned>
 8019da6:	3001      	adds	r0, #1
 8019da8:	d02b      	beq.n	8019e02 <_malloc_r+0xd2>
 8019daa:	6823      	ldr	r3, [r4, #0]
 8019dac:	442b      	add	r3, r5
 8019dae:	6023      	str	r3, [r4, #0]
 8019db0:	e00e      	b.n	8019dd0 <_malloc_r+0xa0>
 8019db2:	6822      	ldr	r2, [r4, #0]
 8019db4:	1b52      	subs	r2, r2, r5
 8019db6:	d41e      	bmi.n	8019df6 <_malloc_r+0xc6>
 8019db8:	2a0b      	cmp	r2, #11
 8019dba:	d916      	bls.n	8019dea <_malloc_r+0xba>
 8019dbc:	1961      	adds	r1, r4, r5
 8019dbe:	42a3      	cmp	r3, r4
 8019dc0:	6025      	str	r5, [r4, #0]
 8019dc2:	bf18      	it	ne
 8019dc4:	6059      	strne	r1, [r3, #4]
 8019dc6:	6863      	ldr	r3, [r4, #4]
 8019dc8:	bf08      	it	eq
 8019dca:	6031      	streq	r1, [r6, #0]
 8019dcc:	5162      	str	r2, [r4, r5]
 8019dce:	604b      	str	r3, [r1, #4]
 8019dd0:	4638      	mov	r0, r7
 8019dd2:	f104 060b 	add.w	r6, r4, #11
 8019dd6:	f001 fd67 	bl	801b8a8 <__malloc_unlock>
 8019dda:	f026 0607 	bic.w	r6, r6, #7
 8019dde:	1d23      	adds	r3, r4, #4
 8019de0:	1af2      	subs	r2, r6, r3
 8019de2:	d0b6      	beq.n	8019d52 <_malloc_r+0x22>
 8019de4:	1b9b      	subs	r3, r3, r6
 8019de6:	50a3      	str	r3, [r4, r2]
 8019de8:	e7b3      	b.n	8019d52 <_malloc_r+0x22>
 8019dea:	6862      	ldr	r2, [r4, #4]
 8019dec:	42a3      	cmp	r3, r4
 8019dee:	bf0c      	ite	eq
 8019df0:	6032      	streq	r2, [r6, #0]
 8019df2:	605a      	strne	r2, [r3, #4]
 8019df4:	e7ec      	b.n	8019dd0 <_malloc_r+0xa0>
 8019df6:	4623      	mov	r3, r4
 8019df8:	6864      	ldr	r4, [r4, #4]
 8019dfa:	e7b2      	b.n	8019d62 <_malloc_r+0x32>
 8019dfc:	4634      	mov	r4, r6
 8019dfe:	6876      	ldr	r6, [r6, #4]
 8019e00:	e7b9      	b.n	8019d76 <_malloc_r+0x46>
 8019e02:	230c      	movs	r3, #12
 8019e04:	603b      	str	r3, [r7, #0]
 8019e06:	4638      	mov	r0, r7
 8019e08:	f001 fd4e 	bl	801b8a8 <__malloc_unlock>
 8019e0c:	e7a1      	b.n	8019d52 <_malloc_r+0x22>
 8019e0e:	6025      	str	r5, [r4, #0]
 8019e10:	e7de      	b.n	8019dd0 <_malloc_r+0xa0>
 8019e12:	bf00      	nop
 8019e14:	2000a4ec 	.word	0x2000a4ec

08019e18 <__cvt>:
 8019e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019e1c:	ec55 4b10 	vmov	r4, r5, d0
 8019e20:	2d00      	cmp	r5, #0
 8019e22:	460e      	mov	r6, r1
 8019e24:	4619      	mov	r1, r3
 8019e26:	462b      	mov	r3, r5
 8019e28:	bfbb      	ittet	lt
 8019e2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8019e2e:	461d      	movlt	r5, r3
 8019e30:	2300      	movge	r3, #0
 8019e32:	232d      	movlt	r3, #45	; 0x2d
 8019e34:	700b      	strb	r3, [r1, #0]
 8019e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e38:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8019e3c:	4691      	mov	r9, r2
 8019e3e:	f023 0820 	bic.w	r8, r3, #32
 8019e42:	bfbc      	itt	lt
 8019e44:	4622      	movlt	r2, r4
 8019e46:	4614      	movlt	r4, r2
 8019e48:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019e4c:	d005      	beq.n	8019e5a <__cvt+0x42>
 8019e4e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8019e52:	d100      	bne.n	8019e56 <__cvt+0x3e>
 8019e54:	3601      	adds	r6, #1
 8019e56:	2102      	movs	r1, #2
 8019e58:	e000      	b.n	8019e5c <__cvt+0x44>
 8019e5a:	2103      	movs	r1, #3
 8019e5c:	ab03      	add	r3, sp, #12
 8019e5e:	9301      	str	r3, [sp, #4]
 8019e60:	ab02      	add	r3, sp, #8
 8019e62:	9300      	str	r3, [sp, #0]
 8019e64:	ec45 4b10 	vmov	d0, r4, r5
 8019e68:	4653      	mov	r3, sl
 8019e6a:	4632      	mov	r2, r6
 8019e6c:	f000 fe50 	bl	801ab10 <_dtoa_r>
 8019e70:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019e74:	4607      	mov	r7, r0
 8019e76:	d102      	bne.n	8019e7e <__cvt+0x66>
 8019e78:	f019 0f01 	tst.w	r9, #1
 8019e7c:	d022      	beq.n	8019ec4 <__cvt+0xac>
 8019e7e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8019e82:	eb07 0906 	add.w	r9, r7, r6
 8019e86:	d110      	bne.n	8019eaa <__cvt+0x92>
 8019e88:	783b      	ldrb	r3, [r7, #0]
 8019e8a:	2b30      	cmp	r3, #48	; 0x30
 8019e8c:	d10a      	bne.n	8019ea4 <__cvt+0x8c>
 8019e8e:	2200      	movs	r2, #0
 8019e90:	2300      	movs	r3, #0
 8019e92:	4620      	mov	r0, r4
 8019e94:	4629      	mov	r1, r5
 8019e96:	f7e6 fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 8019e9a:	b918      	cbnz	r0, 8019ea4 <__cvt+0x8c>
 8019e9c:	f1c6 0601 	rsb	r6, r6, #1
 8019ea0:	f8ca 6000 	str.w	r6, [sl]
 8019ea4:	f8da 3000 	ldr.w	r3, [sl]
 8019ea8:	4499      	add	r9, r3
 8019eaa:	2200      	movs	r2, #0
 8019eac:	2300      	movs	r3, #0
 8019eae:	4620      	mov	r0, r4
 8019eb0:	4629      	mov	r1, r5
 8019eb2:	f7e6 fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 8019eb6:	b108      	cbz	r0, 8019ebc <__cvt+0xa4>
 8019eb8:	f8cd 900c 	str.w	r9, [sp, #12]
 8019ebc:	2230      	movs	r2, #48	; 0x30
 8019ebe:	9b03      	ldr	r3, [sp, #12]
 8019ec0:	454b      	cmp	r3, r9
 8019ec2:	d307      	bcc.n	8019ed4 <__cvt+0xbc>
 8019ec4:	9b03      	ldr	r3, [sp, #12]
 8019ec6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019ec8:	1bdb      	subs	r3, r3, r7
 8019eca:	4638      	mov	r0, r7
 8019ecc:	6013      	str	r3, [r2, #0]
 8019ece:	b004      	add	sp, #16
 8019ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ed4:	1c59      	adds	r1, r3, #1
 8019ed6:	9103      	str	r1, [sp, #12]
 8019ed8:	701a      	strb	r2, [r3, #0]
 8019eda:	e7f0      	b.n	8019ebe <__cvt+0xa6>

08019edc <__exponent>:
 8019edc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019ede:	4603      	mov	r3, r0
 8019ee0:	2900      	cmp	r1, #0
 8019ee2:	bfb8      	it	lt
 8019ee4:	4249      	neglt	r1, r1
 8019ee6:	f803 2b02 	strb.w	r2, [r3], #2
 8019eea:	bfb4      	ite	lt
 8019eec:	222d      	movlt	r2, #45	; 0x2d
 8019eee:	222b      	movge	r2, #43	; 0x2b
 8019ef0:	2909      	cmp	r1, #9
 8019ef2:	7042      	strb	r2, [r0, #1]
 8019ef4:	dd2a      	ble.n	8019f4c <__exponent+0x70>
 8019ef6:	f10d 0407 	add.w	r4, sp, #7
 8019efa:	46a4      	mov	ip, r4
 8019efc:	270a      	movs	r7, #10
 8019efe:	46a6      	mov	lr, r4
 8019f00:	460a      	mov	r2, r1
 8019f02:	fb91 f6f7 	sdiv	r6, r1, r7
 8019f06:	fb07 1516 	mls	r5, r7, r6, r1
 8019f0a:	3530      	adds	r5, #48	; 0x30
 8019f0c:	2a63      	cmp	r2, #99	; 0x63
 8019f0e:	f104 34ff 	add.w	r4, r4, #4294967295
 8019f12:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8019f16:	4631      	mov	r1, r6
 8019f18:	dcf1      	bgt.n	8019efe <__exponent+0x22>
 8019f1a:	3130      	adds	r1, #48	; 0x30
 8019f1c:	f1ae 0502 	sub.w	r5, lr, #2
 8019f20:	f804 1c01 	strb.w	r1, [r4, #-1]
 8019f24:	1c44      	adds	r4, r0, #1
 8019f26:	4629      	mov	r1, r5
 8019f28:	4561      	cmp	r1, ip
 8019f2a:	d30a      	bcc.n	8019f42 <__exponent+0x66>
 8019f2c:	f10d 0209 	add.w	r2, sp, #9
 8019f30:	eba2 020e 	sub.w	r2, r2, lr
 8019f34:	4565      	cmp	r5, ip
 8019f36:	bf88      	it	hi
 8019f38:	2200      	movhi	r2, #0
 8019f3a:	4413      	add	r3, r2
 8019f3c:	1a18      	subs	r0, r3, r0
 8019f3e:	b003      	add	sp, #12
 8019f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019f46:	f804 2f01 	strb.w	r2, [r4, #1]!
 8019f4a:	e7ed      	b.n	8019f28 <__exponent+0x4c>
 8019f4c:	2330      	movs	r3, #48	; 0x30
 8019f4e:	3130      	adds	r1, #48	; 0x30
 8019f50:	7083      	strb	r3, [r0, #2]
 8019f52:	70c1      	strb	r1, [r0, #3]
 8019f54:	1d03      	adds	r3, r0, #4
 8019f56:	e7f1      	b.n	8019f3c <__exponent+0x60>

08019f58 <_printf_float>:
 8019f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f5c:	ed2d 8b02 	vpush	{d8}
 8019f60:	b08d      	sub	sp, #52	; 0x34
 8019f62:	460c      	mov	r4, r1
 8019f64:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8019f68:	4616      	mov	r6, r2
 8019f6a:	461f      	mov	r7, r3
 8019f6c:	4605      	mov	r5, r0
 8019f6e:	f001 fc7f 	bl	801b870 <_localeconv_r>
 8019f72:	f8d0 a000 	ldr.w	sl, [r0]
 8019f76:	4650      	mov	r0, sl
 8019f78:	f7e6 f92a 	bl	80001d0 <strlen>
 8019f7c:	2300      	movs	r3, #0
 8019f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8019f80:	6823      	ldr	r3, [r4, #0]
 8019f82:	9305      	str	r3, [sp, #20]
 8019f84:	f8d8 3000 	ldr.w	r3, [r8]
 8019f88:	f894 b018 	ldrb.w	fp, [r4, #24]
 8019f8c:	3307      	adds	r3, #7
 8019f8e:	f023 0307 	bic.w	r3, r3, #7
 8019f92:	f103 0208 	add.w	r2, r3, #8
 8019f96:	f8c8 2000 	str.w	r2, [r8]
 8019f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019f9e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019fa2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8019fa6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019faa:	9307      	str	r3, [sp, #28]
 8019fac:	f8cd 8018 	str.w	r8, [sp, #24]
 8019fb0:	ee08 0a10 	vmov	s16, r0
 8019fb4:	4b9f      	ldr	r3, [pc, #636]	; (801a234 <_printf_float+0x2dc>)
 8019fb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019fba:	f04f 32ff 	mov.w	r2, #4294967295
 8019fbe:	f7e6 fdb5 	bl	8000b2c <__aeabi_dcmpun>
 8019fc2:	bb88      	cbnz	r0, 801a028 <_printf_float+0xd0>
 8019fc4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019fc8:	4b9a      	ldr	r3, [pc, #616]	; (801a234 <_printf_float+0x2dc>)
 8019fca:	f04f 32ff 	mov.w	r2, #4294967295
 8019fce:	f7e6 fd8f 	bl	8000af0 <__aeabi_dcmple>
 8019fd2:	bb48      	cbnz	r0, 801a028 <_printf_float+0xd0>
 8019fd4:	2200      	movs	r2, #0
 8019fd6:	2300      	movs	r3, #0
 8019fd8:	4640      	mov	r0, r8
 8019fda:	4649      	mov	r1, r9
 8019fdc:	f7e6 fd7e 	bl	8000adc <__aeabi_dcmplt>
 8019fe0:	b110      	cbz	r0, 8019fe8 <_printf_float+0x90>
 8019fe2:	232d      	movs	r3, #45	; 0x2d
 8019fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019fe8:	4b93      	ldr	r3, [pc, #588]	; (801a238 <_printf_float+0x2e0>)
 8019fea:	4894      	ldr	r0, [pc, #592]	; (801a23c <_printf_float+0x2e4>)
 8019fec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8019ff0:	bf94      	ite	ls
 8019ff2:	4698      	movls	r8, r3
 8019ff4:	4680      	movhi	r8, r0
 8019ff6:	2303      	movs	r3, #3
 8019ff8:	6123      	str	r3, [r4, #16]
 8019ffa:	9b05      	ldr	r3, [sp, #20]
 8019ffc:	f023 0204 	bic.w	r2, r3, #4
 801a000:	6022      	str	r2, [r4, #0]
 801a002:	f04f 0900 	mov.w	r9, #0
 801a006:	9700      	str	r7, [sp, #0]
 801a008:	4633      	mov	r3, r6
 801a00a:	aa0b      	add	r2, sp, #44	; 0x2c
 801a00c:	4621      	mov	r1, r4
 801a00e:	4628      	mov	r0, r5
 801a010:	f000 f9d8 	bl	801a3c4 <_printf_common>
 801a014:	3001      	adds	r0, #1
 801a016:	f040 8090 	bne.w	801a13a <_printf_float+0x1e2>
 801a01a:	f04f 30ff 	mov.w	r0, #4294967295
 801a01e:	b00d      	add	sp, #52	; 0x34
 801a020:	ecbd 8b02 	vpop	{d8}
 801a024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a028:	4642      	mov	r2, r8
 801a02a:	464b      	mov	r3, r9
 801a02c:	4640      	mov	r0, r8
 801a02e:	4649      	mov	r1, r9
 801a030:	f7e6 fd7c 	bl	8000b2c <__aeabi_dcmpun>
 801a034:	b140      	cbz	r0, 801a048 <_printf_float+0xf0>
 801a036:	464b      	mov	r3, r9
 801a038:	2b00      	cmp	r3, #0
 801a03a:	bfbc      	itt	lt
 801a03c:	232d      	movlt	r3, #45	; 0x2d
 801a03e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801a042:	487f      	ldr	r0, [pc, #508]	; (801a240 <_printf_float+0x2e8>)
 801a044:	4b7f      	ldr	r3, [pc, #508]	; (801a244 <_printf_float+0x2ec>)
 801a046:	e7d1      	b.n	8019fec <_printf_float+0x94>
 801a048:	6863      	ldr	r3, [r4, #4]
 801a04a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801a04e:	9206      	str	r2, [sp, #24]
 801a050:	1c5a      	adds	r2, r3, #1
 801a052:	d13f      	bne.n	801a0d4 <_printf_float+0x17c>
 801a054:	2306      	movs	r3, #6
 801a056:	6063      	str	r3, [r4, #4]
 801a058:	9b05      	ldr	r3, [sp, #20]
 801a05a:	6861      	ldr	r1, [r4, #4]
 801a05c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a060:	2300      	movs	r3, #0
 801a062:	9303      	str	r3, [sp, #12]
 801a064:	ab0a      	add	r3, sp, #40	; 0x28
 801a066:	e9cd b301 	strd	fp, r3, [sp, #4]
 801a06a:	ab09      	add	r3, sp, #36	; 0x24
 801a06c:	ec49 8b10 	vmov	d0, r8, r9
 801a070:	9300      	str	r3, [sp, #0]
 801a072:	6022      	str	r2, [r4, #0]
 801a074:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801a078:	4628      	mov	r0, r5
 801a07a:	f7ff fecd 	bl	8019e18 <__cvt>
 801a07e:	9b06      	ldr	r3, [sp, #24]
 801a080:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a082:	2b47      	cmp	r3, #71	; 0x47
 801a084:	4680      	mov	r8, r0
 801a086:	d108      	bne.n	801a09a <_printf_float+0x142>
 801a088:	1cc8      	adds	r0, r1, #3
 801a08a:	db02      	blt.n	801a092 <_printf_float+0x13a>
 801a08c:	6863      	ldr	r3, [r4, #4]
 801a08e:	4299      	cmp	r1, r3
 801a090:	dd41      	ble.n	801a116 <_printf_float+0x1be>
 801a092:	f1ab 0b02 	sub.w	fp, fp, #2
 801a096:	fa5f fb8b 	uxtb.w	fp, fp
 801a09a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a09e:	d820      	bhi.n	801a0e2 <_printf_float+0x18a>
 801a0a0:	3901      	subs	r1, #1
 801a0a2:	465a      	mov	r2, fp
 801a0a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801a0a8:	9109      	str	r1, [sp, #36]	; 0x24
 801a0aa:	f7ff ff17 	bl	8019edc <__exponent>
 801a0ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a0b0:	1813      	adds	r3, r2, r0
 801a0b2:	2a01      	cmp	r2, #1
 801a0b4:	4681      	mov	r9, r0
 801a0b6:	6123      	str	r3, [r4, #16]
 801a0b8:	dc02      	bgt.n	801a0c0 <_printf_float+0x168>
 801a0ba:	6822      	ldr	r2, [r4, #0]
 801a0bc:	07d2      	lsls	r2, r2, #31
 801a0be:	d501      	bpl.n	801a0c4 <_printf_float+0x16c>
 801a0c0:	3301      	adds	r3, #1
 801a0c2:	6123      	str	r3, [r4, #16]
 801a0c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801a0c8:	2b00      	cmp	r3, #0
 801a0ca:	d09c      	beq.n	801a006 <_printf_float+0xae>
 801a0cc:	232d      	movs	r3, #45	; 0x2d
 801a0ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a0d2:	e798      	b.n	801a006 <_printf_float+0xae>
 801a0d4:	9a06      	ldr	r2, [sp, #24]
 801a0d6:	2a47      	cmp	r2, #71	; 0x47
 801a0d8:	d1be      	bne.n	801a058 <_printf_float+0x100>
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d1bc      	bne.n	801a058 <_printf_float+0x100>
 801a0de:	2301      	movs	r3, #1
 801a0e0:	e7b9      	b.n	801a056 <_printf_float+0xfe>
 801a0e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801a0e6:	d118      	bne.n	801a11a <_printf_float+0x1c2>
 801a0e8:	2900      	cmp	r1, #0
 801a0ea:	6863      	ldr	r3, [r4, #4]
 801a0ec:	dd0b      	ble.n	801a106 <_printf_float+0x1ae>
 801a0ee:	6121      	str	r1, [r4, #16]
 801a0f0:	b913      	cbnz	r3, 801a0f8 <_printf_float+0x1a0>
 801a0f2:	6822      	ldr	r2, [r4, #0]
 801a0f4:	07d0      	lsls	r0, r2, #31
 801a0f6:	d502      	bpl.n	801a0fe <_printf_float+0x1a6>
 801a0f8:	3301      	adds	r3, #1
 801a0fa:	440b      	add	r3, r1
 801a0fc:	6123      	str	r3, [r4, #16]
 801a0fe:	65a1      	str	r1, [r4, #88]	; 0x58
 801a100:	f04f 0900 	mov.w	r9, #0
 801a104:	e7de      	b.n	801a0c4 <_printf_float+0x16c>
 801a106:	b913      	cbnz	r3, 801a10e <_printf_float+0x1b6>
 801a108:	6822      	ldr	r2, [r4, #0]
 801a10a:	07d2      	lsls	r2, r2, #31
 801a10c:	d501      	bpl.n	801a112 <_printf_float+0x1ba>
 801a10e:	3302      	adds	r3, #2
 801a110:	e7f4      	b.n	801a0fc <_printf_float+0x1a4>
 801a112:	2301      	movs	r3, #1
 801a114:	e7f2      	b.n	801a0fc <_printf_float+0x1a4>
 801a116:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801a11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a11c:	4299      	cmp	r1, r3
 801a11e:	db05      	blt.n	801a12c <_printf_float+0x1d4>
 801a120:	6823      	ldr	r3, [r4, #0]
 801a122:	6121      	str	r1, [r4, #16]
 801a124:	07d8      	lsls	r0, r3, #31
 801a126:	d5ea      	bpl.n	801a0fe <_printf_float+0x1a6>
 801a128:	1c4b      	adds	r3, r1, #1
 801a12a:	e7e7      	b.n	801a0fc <_printf_float+0x1a4>
 801a12c:	2900      	cmp	r1, #0
 801a12e:	bfd4      	ite	le
 801a130:	f1c1 0202 	rsble	r2, r1, #2
 801a134:	2201      	movgt	r2, #1
 801a136:	4413      	add	r3, r2
 801a138:	e7e0      	b.n	801a0fc <_printf_float+0x1a4>
 801a13a:	6823      	ldr	r3, [r4, #0]
 801a13c:	055a      	lsls	r2, r3, #21
 801a13e:	d407      	bmi.n	801a150 <_printf_float+0x1f8>
 801a140:	6923      	ldr	r3, [r4, #16]
 801a142:	4642      	mov	r2, r8
 801a144:	4631      	mov	r1, r6
 801a146:	4628      	mov	r0, r5
 801a148:	47b8      	blx	r7
 801a14a:	3001      	adds	r0, #1
 801a14c:	d12c      	bne.n	801a1a8 <_printf_float+0x250>
 801a14e:	e764      	b.n	801a01a <_printf_float+0xc2>
 801a150:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801a154:	f240 80e0 	bls.w	801a318 <_printf_float+0x3c0>
 801a158:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a15c:	2200      	movs	r2, #0
 801a15e:	2300      	movs	r3, #0
 801a160:	f7e6 fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 801a164:	2800      	cmp	r0, #0
 801a166:	d034      	beq.n	801a1d2 <_printf_float+0x27a>
 801a168:	4a37      	ldr	r2, [pc, #220]	; (801a248 <_printf_float+0x2f0>)
 801a16a:	2301      	movs	r3, #1
 801a16c:	4631      	mov	r1, r6
 801a16e:	4628      	mov	r0, r5
 801a170:	47b8      	blx	r7
 801a172:	3001      	adds	r0, #1
 801a174:	f43f af51 	beq.w	801a01a <_printf_float+0xc2>
 801a178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a17c:	429a      	cmp	r2, r3
 801a17e:	db02      	blt.n	801a186 <_printf_float+0x22e>
 801a180:	6823      	ldr	r3, [r4, #0]
 801a182:	07d8      	lsls	r0, r3, #31
 801a184:	d510      	bpl.n	801a1a8 <_printf_float+0x250>
 801a186:	ee18 3a10 	vmov	r3, s16
 801a18a:	4652      	mov	r2, sl
 801a18c:	4631      	mov	r1, r6
 801a18e:	4628      	mov	r0, r5
 801a190:	47b8      	blx	r7
 801a192:	3001      	adds	r0, #1
 801a194:	f43f af41 	beq.w	801a01a <_printf_float+0xc2>
 801a198:	f04f 0800 	mov.w	r8, #0
 801a19c:	f104 091a 	add.w	r9, r4, #26
 801a1a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a1a2:	3b01      	subs	r3, #1
 801a1a4:	4543      	cmp	r3, r8
 801a1a6:	dc09      	bgt.n	801a1bc <_printf_float+0x264>
 801a1a8:	6823      	ldr	r3, [r4, #0]
 801a1aa:	079b      	lsls	r3, r3, #30
 801a1ac:	f100 8105 	bmi.w	801a3ba <_printf_float+0x462>
 801a1b0:	68e0      	ldr	r0, [r4, #12]
 801a1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a1b4:	4298      	cmp	r0, r3
 801a1b6:	bfb8      	it	lt
 801a1b8:	4618      	movlt	r0, r3
 801a1ba:	e730      	b.n	801a01e <_printf_float+0xc6>
 801a1bc:	2301      	movs	r3, #1
 801a1be:	464a      	mov	r2, r9
 801a1c0:	4631      	mov	r1, r6
 801a1c2:	4628      	mov	r0, r5
 801a1c4:	47b8      	blx	r7
 801a1c6:	3001      	adds	r0, #1
 801a1c8:	f43f af27 	beq.w	801a01a <_printf_float+0xc2>
 801a1cc:	f108 0801 	add.w	r8, r8, #1
 801a1d0:	e7e6      	b.n	801a1a0 <_printf_float+0x248>
 801a1d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	dc39      	bgt.n	801a24c <_printf_float+0x2f4>
 801a1d8:	4a1b      	ldr	r2, [pc, #108]	; (801a248 <_printf_float+0x2f0>)
 801a1da:	2301      	movs	r3, #1
 801a1dc:	4631      	mov	r1, r6
 801a1de:	4628      	mov	r0, r5
 801a1e0:	47b8      	blx	r7
 801a1e2:	3001      	adds	r0, #1
 801a1e4:	f43f af19 	beq.w	801a01a <_printf_float+0xc2>
 801a1e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a1ec:	4313      	orrs	r3, r2
 801a1ee:	d102      	bne.n	801a1f6 <_printf_float+0x29e>
 801a1f0:	6823      	ldr	r3, [r4, #0]
 801a1f2:	07d9      	lsls	r1, r3, #31
 801a1f4:	d5d8      	bpl.n	801a1a8 <_printf_float+0x250>
 801a1f6:	ee18 3a10 	vmov	r3, s16
 801a1fa:	4652      	mov	r2, sl
 801a1fc:	4631      	mov	r1, r6
 801a1fe:	4628      	mov	r0, r5
 801a200:	47b8      	blx	r7
 801a202:	3001      	adds	r0, #1
 801a204:	f43f af09 	beq.w	801a01a <_printf_float+0xc2>
 801a208:	f04f 0900 	mov.w	r9, #0
 801a20c:	f104 0a1a 	add.w	sl, r4, #26
 801a210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a212:	425b      	negs	r3, r3
 801a214:	454b      	cmp	r3, r9
 801a216:	dc01      	bgt.n	801a21c <_printf_float+0x2c4>
 801a218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a21a:	e792      	b.n	801a142 <_printf_float+0x1ea>
 801a21c:	2301      	movs	r3, #1
 801a21e:	4652      	mov	r2, sl
 801a220:	4631      	mov	r1, r6
 801a222:	4628      	mov	r0, r5
 801a224:	47b8      	blx	r7
 801a226:	3001      	adds	r0, #1
 801a228:	f43f aef7 	beq.w	801a01a <_printf_float+0xc2>
 801a22c:	f109 0901 	add.w	r9, r9, #1
 801a230:	e7ee      	b.n	801a210 <_printf_float+0x2b8>
 801a232:	bf00      	nop
 801a234:	7fefffff 	.word	0x7fefffff
 801a238:	0801cd54 	.word	0x0801cd54
 801a23c:	0801cd58 	.word	0x0801cd58
 801a240:	0801cd60 	.word	0x0801cd60
 801a244:	0801cd5c 	.word	0x0801cd5c
 801a248:	0801cd64 	.word	0x0801cd64
 801a24c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a24e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a250:	429a      	cmp	r2, r3
 801a252:	bfa8      	it	ge
 801a254:	461a      	movge	r2, r3
 801a256:	2a00      	cmp	r2, #0
 801a258:	4691      	mov	r9, r2
 801a25a:	dc37      	bgt.n	801a2cc <_printf_float+0x374>
 801a25c:	f04f 0b00 	mov.w	fp, #0
 801a260:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a264:	f104 021a 	add.w	r2, r4, #26
 801a268:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801a26a:	9305      	str	r3, [sp, #20]
 801a26c:	eba3 0309 	sub.w	r3, r3, r9
 801a270:	455b      	cmp	r3, fp
 801a272:	dc33      	bgt.n	801a2dc <_printf_float+0x384>
 801a274:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a278:	429a      	cmp	r2, r3
 801a27a:	db3b      	blt.n	801a2f4 <_printf_float+0x39c>
 801a27c:	6823      	ldr	r3, [r4, #0]
 801a27e:	07da      	lsls	r2, r3, #31
 801a280:	d438      	bmi.n	801a2f4 <_printf_float+0x39c>
 801a282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a284:	9a05      	ldr	r2, [sp, #20]
 801a286:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a288:	1a9a      	subs	r2, r3, r2
 801a28a:	eba3 0901 	sub.w	r9, r3, r1
 801a28e:	4591      	cmp	r9, r2
 801a290:	bfa8      	it	ge
 801a292:	4691      	movge	r9, r2
 801a294:	f1b9 0f00 	cmp.w	r9, #0
 801a298:	dc35      	bgt.n	801a306 <_printf_float+0x3ae>
 801a29a:	f04f 0800 	mov.w	r8, #0
 801a29e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a2a2:	f104 0a1a 	add.w	sl, r4, #26
 801a2a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801a2aa:	1a9b      	subs	r3, r3, r2
 801a2ac:	eba3 0309 	sub.w	r3, r3, r9
 801a2b0:	4543      	cmp	r3, r8
 801a2b2:	f77f af79 	ble.w	801a1a8 <_printf_float+0x250>
 801a2b6:	2301      	movs	r3, #1
 801a2b8:	4652      	mov	r2, sl
 801a2ba:	4631      	mov	r1, r6
 801a2bc:	4628      	mov	r0, r5
 801a2be:	47b8      	blx	r7
 801a2c0:	3001      	adds	r0, #1
 801a2c2:	f43f aeaa 	beq.w	801a01a <_printf_float+0xc2>
 801a2c6:	f108 0801 	add.w	r8, r8, #1
 801a2ca:	e7ec      	b.n	801a2a6 <_printf_float+0x34e>
 801a2cc:	4613      	mov	r3, r2
 801a2ce:	4631      	mov	r1, r6
 801a2d0:	4642      	mov	r2, r8
 801a2d2:	4628      	mov	r0, r5
 801a2d4:	47b8      	blx	r7
 801a2d6:	3001      	adds	r0, #1
 801a2d8:	d1c0      	bne.n	801a25c <_printf_float+0x304>
 801a2da:	e69e      	b.n	801a01a <_printf_float+0xc2>
 801a2dc:	2301      	movs	r3, #1
 801a2de:	4631      	mov	r1, r6
 801a2e0:	4628      	mov	r0, r5
 801a2e2:	9205      	str	r2, [sp, #20]
 801a2e4:	47b8      	blx	r7
 801a2e6:	3001      	adds	r0, #1
 801a2e8:	f43f ae97 	beq.w	801a01a <_printf_float+0xc2>
 801a2ec:	9a05      	ldr	r2, [sp, #20]
 801a2ee:	f10b 0b01 	add.w	fp, fp, #1
 801a2f2:	e7b9      	b.n	801a268 <_printf_float+0x310>
 801a2f4:	ee18 3a10 	vmov	r3, s16
 801a2f8:	4652      	mov	r2, sl
 801a2fa:	4631      	mov	r1, r6
 801a2fc:	4628      	mov	r0, r5
 801a2fe:	47b8      	blx	r7
 801a300:	3001      	adds	r0, #1
 801a302:	d1be      	bne.n	801a282 <_printf_float+0x32a>
 801a304:	e689      	b.n	801a01a <_printf_float+0xc2>
 801a306:	9a05      	ldr	r2, [sp, #20]
 801a308:	464b      	mov	r3, r9
 801a30a:	4442      	add	r2, r8
 801a30c:	4631      	mov	r1, r6
 801a30e:	4628      	mov	r0, r5
 801a310:	47b8      	blx	r7
 801a312:	3001      	adds	r0, #1
 801a314:	d1c1      	bne.n	801a29a <_printf_float+0x342>
 801a316:	e680      	b.n	801a01a <_printf_float+0xc2>
 801a318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a31a:	2a01      	cmp	r2, #1
 801a31c:	dc01      	bgt.n	801a322 <_printf_float+0x3ca>
 801a31e:	07db      	lsls	r3, r3, #31
 801a320:	d538      	bpl.n	801a394 <_printf_float+0x43c>
 801a322:	2301      	movs	r3, #1
 801a324:	4642      	mov	r2, r8
 801a326:	4631      	mov	r1, r6
 801a328:	4628      	mov	r0, r5
 801a32a:	47b8      	blx	r7
 801a32c:	3001      	adds	r0, #1
 801a32e:	f43f ae74 	beq.w	801a01a <_printf_float+0xc2>
 801a332:	ee18 3a10 	vmov	r3, s16
 801a336:	4652      	mov	r2, sl
 801a338:	4631      	mov	r1, r6
 801a33a:	4628      	mov	r0, r5
 801a33c:	47b8      	blx	r7
 801a33e:	3001      	adds	r0, #1
 801a340:	f43f ae6b 	beq.w	801a01a <_printf_float+0xc2>
 801a344:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801a348:	2200      	movs	r2, #0
 801a34a:	2300      	movs	r3, #0
 801a34c:	f7e6 fbbc 	bl	8000ac8 <__aeabi_dcmpeq>
 801a350:	b9d8      	cbnz	r0, 801a38a <_printf_float+0x432>
 801a352:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a354:	f108 0201 	add.w	r2, r8, #1
 801a358:	3b01      	subs	r3, #1
 801a35a:	4631      	mov	r1, r6
 801a35c:	4628      	mov	r0, r5
 801a35e:	47b8      	blx	r7
 801a360:	3001      	adds	r0, #1
 801a362:	d10e      	bne.n	801a382 <_printf_float+0x42a>
 801a364:	e659      	b.n	801a01a <_printf_float+0xc2>
 801a366:	2301      	movs	r3, #1
 801a368:	4652      	mov	r2, sl
 801a36a:	4631      	mov	r1, r6
 801a36c:	4628      	mov	r0, r5
 801a36e:	47b8      	blx	r7
 801a370:	3001      	adds	r0, #1
 801a372:	f43f ae52 	beq.w	801a01a <_printf_float+0xc2>
 801a376:	f108 0801 	add.w	r8, r8, #1
 801a37a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a37c:	3b01      	subs	r3, #1
 801a37e:	4543      	cmp	r3, r8
 801a380:	dcf1      	bgt.n	801a366 <_printf_float+0x40e>
 801a382:	464b      	mov	r3, r9
 801a384:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801a388:	e6dc      	b.n	801a144 <_printf_float+0x1ec>
 801a38a:	f04f 0800 	mov.w	r8, #0
 801a38e:	f104 0a1a 	add.w	sl, r4, #26
 801a392:	e7f2      	b.n	801a37a <_printf_float+0x422>
 801a394:	2301      	movs	r3, #1
 801a396:	4642      	mov	r2, r8
 801a398:	e7df      	b.n	801a35a <_printf_float+0x402>
 801a39a:	2301      	movs	r3, #1
 801a39c:	464a      	mov	r2, r9
 801a39e:	4631      	mov	r1, r6
 801a3a0:	4628      	mov	r0, r5
 801a3a2:	47b8      	blx	r7
 801a3a4:	3001      	adds	r0, #1
 801a3a6:	f43f ae38 	beq.w	801a01a <_printf_float+0xc2>
 801a3aa:	f108 0801 	add.w	r8, r8, #1
 801a3ae:	68e3      	ldr	r3, [r4, #12]
 801a3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a3b2:	1a5b      	subs	r3, r3, r1
 801a3b4:	4543      	cmp	r3, r8
 801a3b6:	dcf0      	bgt.n	801a39a <_printf_float+0x442>
 801a3b8:	e6fa      	b.n	801a1b0 <_printf_float+0x258>
 801a3ba:	f04f 0800 	mov.w	r8, #0
 801a3be:	f104 0919 	add.w	r9, r4, #25
 801a3c2:	e7f4      	b.n	801a3ae <_printf_float+0x456>

0801a3c4 <_printf_common>:
 801a3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a3c8:	4616      	mov	r6, r2
 801a3ca:	4699      	mov	r9, r3
 801a3cc:	688a      	ldr	r2, [r1, #8]
 801a3ce:	690b      	ldr	r3, [r1, #16]
 801a3d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a3d4:	4293      	cmp	r3, r2
 801a3d6:	bfb8      	it	lt
 801a3d8:	4613      	movlt	r3, r2
 801a3da:	6033      	str	r3, [r6, #0]
 801a3dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a3e0:	4607      	mov	r7, r0
 801a3e2:	460c      	mov	r4, r1
 801a3e4:	b10a      	cbz	r2, 801a3ea <_printf_common+0x26>
 801a3e6:	3301      	adds	r3, #1
 801a3e8:	6033      	str	r3, [r6, #0]
 801a3ea:	6823      	ldr	r3, [r4, #0]
 801a3ec:	0699      	lsls	r1, r3, #26
 801a3ee:	bf42      	ittt	mi
 801a3f0:	6833      	ldrmi	r3, [r6, #0]
 801a3f2:	3302      	addmi	r3, #2
 801a3f4:	6033      	strmi	r3, [r6, #0]
 801a3f6:	6825      	ldr	r5, [r4, #0]
 801a3f8:	f015 0506 	ands.w	r5, r5, #6
 801a3fc:	d106      	bne.n	801a40c <_printf_common+0x48>
 801a3fe:	f104 0a19 	add.w	sl, r4, #25
 801a402:	68e3      	ldr	r3, [r4, #12]
 801a404:	6832      	ldr	r2, [r6, #0]
 801a406:	1a9b      	subs	r3, r3, r2
 801a408:	42ab      	cmp	r3, r5
 801a40a:	dc26      	bgt.n	801a45a <_printf_common+0x96>
 801a40c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a410:	1e13      	subs	r3, r2, #0
 801a412:	6822      	ldr	r2, [r4, #0]
 801a414:	bf18      	it	ne
 801a416:	2301      	movne	r3, #1
 801a418:	0692      	lsls	r2, r2, #26
 801a41a:	d42b      	bmi.n	801a474 <_printf_common+0xb0>
 801a41c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a420:	4649      	mov	r1, r9
 801a422:	4638      	mov	r0, r7
 801a424:	47c0      	blx	r8
 801a426:	3001      	adds	r0, #1
 801a428:	d01e      	beq.n	801a468 <_printf_common+0xa4>
 801a42a:	6823      	ldr	r3, [r4, #0]
 801a42c:	68e5      	ldr	r5, [r4, #12]
 801a42e:	6832      	ldr	r2, [r6, #0]
 801a430:	f003 0306 	and.w	r3, r3, #6
 801a434:	2b04      	cmp	r3, #4
 801a436:	bf08      	it	eq
 801a438:	1aad      	subeq	r5, r5, r2
 801a43a:	68a3      	ldr	r3, [r4, #8]
 801a43c:	6922      	ldr	r2, [r4, #16]
 801a43e:	bf0c      	ite	eq
 801a440:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a444:	2500      	movne	r5, #0
 801a446:	4293      	cmp	r3, r2
 801a448:	bfc4      	itt	gt
 801a44a:	1a9b      	subgt	r3, r3, r2
 801a44c:	18ed      	addgt	r5, r5, r3
 801a44e:	2600      	movs	r6, #0
 801a450:	341a      	adds	r4, #26
 801a452:	42b5      	cmp	r5, r6
 801a454:	d11a      	bne.n	801a48c <_printf_common+0xc8>
 801a456:	2000      	movs	r0, #0
 801a458:	e008      	b.n	801a46c <_printf_common+0xa8>
 801a45a:	2301      	movs	r3, #1
 801a45c:	4652      	mov	r2, sl
 801a45e:	4649      	mov	r1, r9
 801a460:	4638      	mov	r0, r7
 801a462:	47c0      	blx	r8
 801a464:	3001      	adds	r0, #1
 801a466:	d103      	bne.n	801a470 <_printf_common+0xac>
 801a468:	f04f 30ff 	mov.w	r0, #4294967295
 801a46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a470:	3501      	adds	r5, #1
 801a472:	e7c6      	b.n	801a402 <_printf_common+0x3e>
 801a474:	18e1      	adds	r1, r4, r3
 801a476:	1c5a      	adds	r2, r3, #1
 801a478:	2030      	movs	r0, #48	; 0x30
 801a47a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a47e:	4422      	add	r2, r4
 801a480:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a484:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a488:	3302      	adds	r3, #2
 801a48a:	e7c7      	b.n	801a41c <_printf_common+0x58>
 801a48c:	2301      	movs	r3, #1
 801a48e:	4622      	mov	r2, r4
 801a490:	4649      	mov	r1, r9
 801a492:	4638      	mov	r0, r7
 801a494:	47c0      	blx	r8
 801a496:	3001      	adds	r0, #1
 801a498:	d0e6      	beq.n	801a468 <_printf_common+0xa4>
 801a49a:	3601      	adds	r6, #1
 801a49c:	e7d9      	b.n	801a452 <_printf_common+0x8e>
	...

0801a4a0 <_printf_i>:
 801a4a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a4a4:	7e0f      	ldrb	r7, [r1, #24]
 801a4a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801a4a8:	2f78      	cmp	r7, #120	; 0x78
 801a4aa:	4691      	mov	r9, r2
 801a4ac:	4680      	mov	r8, r0
 801a4ae:	460c      	mov	r4, r1
 801a4b0:	469a      	mov	sl, r3
 801a4b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801a4b6:	d807      	bhi.n	801a4c8 <_printf_i+0x28>
 801a4b8:	2f62      	cmp	r7, #98	; 0x62
 801a4ba:	d80a      	bhi.n	801a4d2 <_printf_i+0x32>
 801a4bc:	2f00      	cmp	r7, #0
 801a4be:	f000 80d8 	beq.w	801a672 <_printf_i+0x1d2>
 801a4c2:	2f58      	cmp	r7, #88	; 0x58
 801a4c4:	f000 80a3 	beq.w	801a60e <_printf_i+0x16e>
 801a4c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a4cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a4d0:	e03a      	b.n	801a548 <_printf_i+0xa8>
 801a4d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a4d6:	2b15      	cmp	r3, #21
 801a4d8:	d8f6      	bhi.n	801a4c8 <_printf_i+0x28>
 801a4da:	a101      	add	r1, pc, #4	; (adr r1, 801a4e0 <_printf_i+0x40>)
 801a4dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a4e0:	0801a539 	.word	0x0801a539
 801a4e4:	0801a54d 	.word	0x0801a54d
 801a4e8:	0801a4c9 	.word	0x0801a4c9
 801a4ec:	0801a4c9 	.word	0x0801a4c9
 801a4f0:	0801a4c9 	.word	0x0801a4c9
 801a4f4:	0801a4c9 	.word	0x0801a4c9
 801a4f8:	0801a54d 	.word	0x0801a54d
 801a4fc:	0801a4c9 	.word	0x0801a4c9
 801a500:	0801a4c9 	.word	0x0801a4c9
 801a504:	0801a4c9 	.word	0x0801a4c9
 801a508:	0801a4c9 	.word	0x0801a4c9
 801a50c:	0801a659 	.word	0x0801a659
 801a510:	0801a57d 	.word	0x0801a57d
 801a514:	0801a63b 	.word	0x0801a63b
 801a518:	0801a4c9 	.word	0x0801a4c9
 801a51c:	0801a4c9 	.word	0x0801a4c9
 801a520:	0801a67b 	.word	0x0801a67b
 801a524:	0801a4c9 	.word	0x0801a4c9
 801a528:	0801a57d 	.word	0x0801a57d
 801a52c:	0801a4c9 	.word	0x0801a4c9
 801a530:	0801a4c9 	.word	0x0801a4c9
 801a534:	0801a643 	.word	0x0801a643
 801a538:	682b      	ldr	r3, [r5, #0]
 801a53a:	1d1a      	adds	r2, r3, #4
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	602a      	str	r2, [r5, #0]
 801a540:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a544:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a548:	2301      	movs	r3, #1
 801a54a:	e0a3      	b.n	801a694 <_printf_i+0x1f4>
 801a54c:	6820      	ldr	r0, [r4, #0]
 801a54e:	6829      	ldr	r1, [r5, #0]
 801a550:	0606      	lsls	r6, r0, #24
 801a552:	f101 0304 	add.w	r3, r1, #4
 801a556:	d50a      	bpl.n	801a56e <_printf_i+0xce>
 801a558:	680e      	ldr	r6, [r1, #0]
 801a55a:	602b      	str	r3, [r5, #0]
 801a55c:	2e00      	cmp	r6, #0
 801a55e:	da03      	bge.n	801a568 <_printf_i+0xc8>
 801a560:	232d      	movs	r3, #45	; 0x2d
 801a562:	4276      	negs	r6, r6
 801a564:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a568:	485e      	ldr	r0, [pc, #376]	; (801a6e4 <_printf_i+0x244>)
 801a56a:	230a      	movs	r3, #10
 801a56c:	e019      	b.n	801a5a2 <_printf_i+0x102>
 801a56e:	680e      	ldr	r6, [r1, #0]
 801a570:	602b      	str	r3, [r5, #0]
 801a572:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a576:	bf18      	it	ne
 801a578:	b236      	sxthne	r6, r6
 801a57a:	e7ef      	b.n	801a55c <_printf_i+0xbc>
 801a57c:	682b      	ldr	r3, [r5, #0]
 801a57e:	6820      	ldr	r0, [r4, #0]
 801a580:	1d19      	adds	r1, r3, #4
 801a582:	6029      	str	r1, [r5, #0]
 801a584:	0601      	lsls	r1, r0, #24
 801a586:	d501      	bpl.n	801a58c <_printf_i+0xec>
 801a588:	681e      	ldr	r6, [r3, #0]
 801a58a:	e002      	b.n	801a592 <_printf_i+0xf2>
 801a58c:	0646      	lsls	r6, r0, #25
 801a58e:	d5fb      	bpl.n	801a588 <_printf_i+0xe8>
 801a590:	881e      	ldrh	r6, [r3, #0]
 801a592:	4854      	ldr	r0, [pc, #336]	; (801a6e4 <_printf_i+0x244>)
 801a594:	2f6f      	cmp	r7, #111	; 0x6f
 801a596:	bf0c      	ite	eq
 801a598:	2308      	moveq	r3, #8
 801a59a:	230a      	movne	r3, #10
 801a59c:	2100      	movs	r1, #0
 801a59e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a5a2:	6865      	ldr	r5, [r4, #4]
 801a5a4:	60a5      	str	r5, [r4, #8]
 801a5a6:	2d00      	cmp	r5, #0
 801a5a8:	bfa2      	ittt	ge
 801a5aa:	6821      	ldrge	r1, [r4, #0]
 801a5ac:	f021 0104 	bicge.w	r1, r1, #4
 801a5b0:	6021      	strge	r1, [r4, #0]
 801a5b2:	b90e      	cbnz	r6, 801a5b8 <_printf_i+0x118>
 801a5b4:	2d00      	cmp	r5, #0
 801a5b6:	d04d      	beq.n	801a654 <_printf_i+0x1b4>
 801a5b8:	4615      	mov	r5, r2
 801a5ba:	fbb6 f1f3 	udiv	r1, r6, r3
 801a5be:	fb03 6711 	mls	r7, r3, r1, r6
 801a5c2:	5dc7      	ldrb	r7, [r0, r7]
 801a5c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801a5c8:	4637      	mov	r7, r6
 801a5ca:	42bb      	cmp	r3, r7
 801a5cc:	460e      	mov	r6, r1
 801a5ce:	d9f4      	bls.n	801a5ba <_printf_i+0x11a>
 801a5d0:	2b08      	cmp	r3, #8
 801a5d2:	d10b      	bne.n	801a5ec <_printf_i+0x14c>
 801a5d4:	6823      	ldr	r3, [r4, #0]
 801a5d6:	07de      	lsls	r6, r3, #31
 801a5d8:	d508      	bpl.n	801a5ec <_printf_i+0x14c>
 801a5da:	6923      	ldr	r3, [r4, #16]
 801a5dc:	6861      	ldr	r1, [r4, #4]
 801a5de:	4299      	cmp	r1, r3
 801a5e0:	bfde      	ittt	le
 801a5e2:	2330      	movle	r3, #48	; 0x30
 801a5e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a5e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a5ec:	1b52      	subs	r2, r2, r5
 801a5ee:	6122      	str	r2, [r4, #16]
 801a5f0:	f8cd a000 	str.w	sl, [sp]
 801a5f4:	464b      	mov	r3, r9
 801a5f6:	aa03      	add	r2, sp, #12
 801a5f8:	4621      	mov	r1, r4
 801a5fa:	4640      	mov	r0, r8
 801a5fc:	f7ff fee2 	bl	801a3c4 <_printf_common>
 801a600:	3001      	adds	r0, #1
 801a602:	d14c      	bne.n	801a69e <_printf_i+0x1fe>
 801a604:	f04f 30ff 	mov.w	r0, #4294967295
 801a608:	b004      	add	sp, #16
 801a60a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a60e:	4835      	ldr	r0, [pc, #212]	; (801a6e4 <_printf_i+0x244>)
 801a610:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801a614:	6829      	ldr	r1, [r5, #0]
 801a616:	6823      	ldr	r3, [r4, #0]
 801a618:	f851 6b04 	ldr.w	r6, [r1], #4
 801a61c:	6029      	str	r1, [r5, #0]
 801a61e:	061d      	lsls	r5, r3, #24
 801a620:	d514      	bpl.n	801a64c <_printf_i+0x1ac>
 801a622:	07df      	lsls	r7, r3, #31
 801a624:	bf44      	itt	mi
 801a626:	f043 0320 	orrmi.w	r3, r3, #32
 801a62a:	6023      	strmi	r3, [r4, #0]
 801a62c:	b91e      	cbnz	r6, 801a636 <_printf_i+0x196>
 801a62e:	6823      	ldr	r3, [r4, #0]
 801a630:	f023 0320 	bic.w	r3, r3, #32
 801a634:	6023      	str	r3, [r4, #0]
 801a636:	2310      	movs	r3, #16
 801a638:	e7b0      	b.n	801a59c <_printf_i+0xfc>
 801a63a:	6823      	ldr	r3, [r4, #0]
 801a63c:	f043 0320 	orr.w	r3, r3, #32
 801a640:	6023      	str	r3, [r4, #0]
 801a642:	2378      	movs	r3, #120	; 0x78
 801a644:	4828      	ldr	r0, [pc, #160]	; (801a6e8 <_printf_i+0x248>)
 801a646:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a64a:	e7e3      	b.n	801a614 <_printf_i+0x174>
 801a64c:	0659      	lsls	r1, r3, #25
 801a64e:	bf48      	it	mi
 801a650:	b2b6      	uxthmi	r6, r6
 801a652:	e7e6      	b.n	801a622 <_printf_i+0x182>
 801a654:	4615      	mov	r5, r2
 801a656:	e7bb      	b.n	801a5d0 <_printf_i+0x130>
 801a658:	682b      	ldr	r3, [r5, #0]
 801a65a:	6826      	ldr	r6, [r4, #0]
 801a65c:	6961      	ldr	r1, [r4, #20]
 801a65e:	1d18      	adds	r0, r3, #4
 801a660:	6028      	str	r0, [r5, #0]
 801a662:	0635      	lsls	r5, r6, #24
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	d501      	bpl.n	801a66c <_printf_i+0x1cc>
 801a668:	6019      	str	r1, [r3, #0]
 801a66a:	e002      	b.n	801a672 <_printf_i+0x1d2>
 801a66c:	0670      	lsls	r0, r6, #25
 801a66e:	d5fb      	bpl.n	801a668 <_printf_i+0x1c8>
 801a670:	8019      	strh	r1, [r3, #0]
 801a672:	2300      	movs	r3, #0
 801a674:	6123      	str	r3, [r4, #16]
 801a676:	4615      	mov	r5, r2
 801a678:	e7ba      	b.n	801a5f0 <_printf_i+0x150>
 801a67a:	682b      	ldr	r3, [r5, #0]
 801a67c:	1d1a      	adds	r2, r3, #4
 801a67e:	602a      	str	r2, [r5, #0]
 801a680:	681d      	ldr	r5, [r3, #0]
 801a682:	6862      	ldr	r2, [r4, #4]
 801a684:	2100      	movs	r1, #0
 801a686:	4628      	mov	r0, r5
 801a688:	f7e5 fdaa 	bl	80001e0 <memchr>
 801a68c:	b108      	cbz	r0, 801a692 <_printf_i+0x1f2>
 801a68e:	1b40      	subs	r0, r0, r5
 801a690:	6060      	str	r0, [r4, #4]
 801a692:	6863      	ldr	r3, [r4, #4]
 801a694:	6123      	str	r3, [r4, #16]
 801a696:	2300      	movs	r3, #0
 801a698:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a69c:	e7a8      	b.n	801a5f0 <_printf_i+0x150>
 801a69e:	6923      	ldr	r3, [r4, #16]
 801a6a0:	462a      	mov	r2, r5
 801a6a2:	4649      	mov	r1, r9
 801a6a4:	4640      	mov	r0, r8
 801a6a6:	47d0      	blx	sl
 801a6a8:	3001      	adds	r0, #1
 801a6aa:	d0ab      	beq.n	801a604 <_printf_i+0x164>
 801a6ac:	6823      	ldr	r3, [r4, #0]
 801a6ae:	079b      	lsls	r3, r3, #30
 801a6b0:	d413      	bmi.n	801a6da <_printf_i+0x23a>
 801a6b2:	68e0      	ldr	r0, [r4, #12]
 801a6b4:	9b03      	ldr	r3, [sp, #12]
 801a6b6:	4298      	cmp	r0, r3
 801a6b8:	bfb8      	it	lt
 801a6ba:	4618      	movlt	r0, r3
 801a6bc:	e7a4      	b.n	801a608 <_printf_i+0x168>
 801a6be:	2301      	movs	r3, #1
 801a6c0:	4632      	mov	r2, r6
 801a6c2:	4649      	mov	r1, r9
 801a6c4:	4640      	mov	r0, r8
 801a6c6:	47d0      	blx	sl
 801a6c8:	3001      	adds	r0, #1
 801a6ca:	d09b      	beq.n	801a604 <_printf_i+0x164>
 801a6cc:	3501      	adds	r5, #1
 801a6ce:	68e3      	ldr	r3, [r4, #12]
 801a6d0:	9903      	ldr	r1, [sp, #12]
 801a6d2:	1a5b      	subs	r3, r3, r1
 801a6d4:	42ab      	cmp	r3, r5
 801a6d6:	dcf2      	bgt.n	801a6be <_printf_i+0x21e>
 801a6d8:	e7eb      	b.n	801a6b2 <_printf_i+0x212>
 801a6da:	2500      	movs	r5, #0
 801a6dc:	f104 0619 	add.w	r6, r4, #25
 801a6e0:	e7f5      	b.n	801a6ce <_printf_i+0x22e>
 801a6e2:	bf00      	nop
 801a6e4:	0801cd66 	.word	0x0801cd66
 801a6e8:	0801cd77 	.word	0x0801cd77

0801a6ec <cleanup_glue>:
 801a6ec:	b538      	push	{r3, r4, r5, lr}
 801a6ee:	460c      	mov	r4, r1
 801a6f0:	6809      	ldr	r1, [r1, #0]
 801a6f2:	4605      	mov	r5, r0
 801a6f4:	b109      	cbz	r1, 801a6fa <cleanup_glue+0xe>
 801a6f6:	f7ff fff9 	bl	801a6ec <cleanup_glue>
 801a6fa:	4621      	mov	r1, r4
 801a6fc:	4628      	mov	r0, r5
 801a6fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a702:	f7ff baa9 	b.w	8019c58 <_free_r>
	...

0801a708 <_reclaim_reent>:
 801a708:	4b2c      	ldr	r3, [pc, #176]	; (801a7bc <_reclaim_reent+0xb4>)
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	4283      	cmp	r3, r0
 801a70e:	b570      	push	{r4, r5, r6, lr}
 801a710:	4604      	mov	r4, r0
 801a712:	d051      	beq.n	801a7b8 <_reclaim_reent+0xb0>
 801a714:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a716:	b143      	cbz	r3, 801a72a <_reclaim_reent+0x22>
 801a718:	68db      	ldr	r3, [r3, #12]
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d14a      	bne.n	801a7b4 <_reclaim_reent+0xac>
 801a71e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a720:	6819      	ldr	r1, [r3, #0]
 801a722:	b111      	cbz	r1, 801a72a <_reclaim_reent+0x22>
 801a724:	4620      	mov	r0, r4
 801a726:	f7ff fa97 	bl	8019c58 <_free_r>
 801a72a:	6961      	ldr	r1, [r4, #20]
 801a72c:	b111      	cbz	r1, 801a734 <_reclaim_reent+0x2c>
 801a72e:	4620      	mov	r0, r4
 801a730:	f7ff fa92 	bl	8019c58 <_free_r>
 801a734:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a736:	b111      	cbz	r1, 801a73e <_reclaim_reent+0x36>
 801a738:	4620      	mov	r0, r4
 801a73a:	f7ff fa8d 	bl	8019c58 <_free_r>
 801a73e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a740:	b111      	cbz	r1, 801a748 <_reclaim_reent+0x40>
 801a742:	4620      	mov	r0, r4
 801a744:	f7ff fa88 	bl	8019c58 <_free_r>
 801a748:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a74a:	b111      	cbz	r1, 801a752 <_reclaim_reent+0x4a>
 801a74c:	4620      	mov	r0, r4
 801a74e:	f7ff fa83 	bl	8019c58 <_free_r>
 801a752:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a754:	b111      	cbz	r1, 801a75c <_reclaim_reent+0x54>
 801a756:	4620      	mov	r0, r4
 801a758:	f7ff fa7e 	bl	8019c58 <_free_r>
 801a75c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a75e:	b111      	cbz	r1, 801a766 <_reclaim_reent+0x5e>
 801a760:	4620      	mov	r0, r4
 801a762:	f7ff fa79 	bl	8019c58 <_free_r>
 801a766:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a768:	b111      	cbz	r1, 801a770 <_reclaim_reent+0x68>
 801a76a:	4620      	mov	r0, r4
 801a76c:	f7ff fa74 	bl	8019c58 <_free_r>
 801a770:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a772:	b111      	cbz	r1, 801a77a <_reclaim_reent+0x72>
 801a774:	4620      	mov	r0, r4
 801a776:	f7ff fa6f 	bl	8019c58 <_free_r>
 801a77a:	69a3      	ldr	r3, [r4, #24]
 801a77c:	b1e3      	cbz	r3, 801a7b8 <_reclaim_reent+0xb0>
 801a77e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a780:	4620      	mov	r0, r4
 801a782:	4798      	blx	r3
 801a784:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a786:	b1b9      	cbz	r1, 801a7b8 <_reclaim_reent+0xb0>
 801a788:	4620      	mov	r0, r4
 801a78a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a78e:	f7ff bfad 	b.w	801a6ec <cleanup_glue>
 801a792:	5949      	ldr	r1, [r1, r5]
 801a794:	b941      	cbnz	r1, 801a7a8 <_reclaim_reent+0xa0>
 801a796:	3504      	adds	r5, #4
 801a798:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a79a:	2d80      	cmp	r5, #128	; 0x80
 801a79c:	68d9      	ldr	r1, [r3, #12]
 801a79e:	d1f8      	bne.n	801a792 <_reclaim_reent+0x8a>
 801a7a0:	4620      	mov	r0, r4
 801a7a2:	f7ff fa59 	bl	8019c58 <_free_r>
 801a7a6:	e7ba      	b.n	801a71e <_reclaim_reent+0x16>
 801a7a8:	680e      	ldr	r6, [r1, #0]
 801a7aa:	4620      	mov	r0, r4
 801a7ac:	f7ff fa54 	bl	8019c58 <_free_r>
 801a7b0:	4631      	mov	r1, r6
 801a7b2:	e7ef      	b.n	801a794 <_reclaim_reent+0x8c>
 801a7b4:	2500      	movs	r5, #0
 801a7b6:	e7ef      	b.n	801a798 <_reclaim_reent+0x90>
 801a7b8:	bd70      	pop	{r4, r5, r6, pc}
 801a7ba:	bf00      	nop
 801a7bc:	20000030 	.word	0x20000030

0801a7c0 <_sbrk_r>:
 801a7c0:	b538      	push	{r3, r4, r5, lr}
 801a7c2:	4d06      	ldr	r5, [pc, #24]	; (801a7dc <_sbrk_r+0x1c>)
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	4604      	mov	r4, r0
 801a7c8:	4608      	mov	r0, r1
 801a7ca:	602b      	str	r3, [r5, #0]
 801a7cc:	f7f3 f850 	bl	800d870 <_sbrk>
 801a7d0:	1c43      	adds	r3, r0, #1
 801a7d2:	d102      	bne.n	801a7da <_sbrk_r+0x1a>
 801a7d4:	682b      	ldr	r3, [r5, #0]
 801a7d6:	b103      	cbz	r3, 801a7da <_sbrk_r+0x1a>
 801a7d8:	6023      	str	r3, [r4, #0]
 801a7da:	bd38      	pop	{r3, r4, r5, pc}
 801a7dc:	2000a4f4 	.word	0x2000a4f4

0801a7e0 <_raise_r>:
 801a7e0:	291f      	cmp	r1, #31
 801a7e2:	b538      	push	{r3, r4, r5, lr}
 801a7e4:	4604      	mov	r4, r0
 801a7e6:	460d      	mov	r5, r1
 801a7e8:	d904      	bls.n	801a7f4 <_raise_r+0x14>
 801a7ea:	2316      	movs	r3, #22
 801a7ec:	6003      	str	r3, [r0, #0]
 801a7ee:	f04f 30ff 	mov.w	r0, #4294967295
 801a7f2:	bd38      	pop	{r3, r4, r5, pc}
 801a7f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a7f6:	b112      	cbz	r2, 801a7fe <_raise_r+0x1e>
 801a7f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a7fc:	b94b      	cbnz	r3, 801a812 <_raise_r+0x32>
 801a7fe:	4620      	mov	r0, r4
 801a800:	f000 f830 	bl	801a864 <_getpid_r>
 801a804:	462a      	mov	r2, r5
 801a806:	4601      	mov	r1, r0
 801a808:	4620      	mov	r0, r4
 801a80a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a80e:	f000 b817 	b.w	801a840 <_kill_r>
 801a812:	2b01      	cmp	r3, #1
 801a814:	d00a      	beq.n	801a82c <_raise_r+0x4c>
 801a816:	1c59      	adds	r1, r3, #1
 801a818:	d103      	bne.n	801a822 <_raise_r+0x42>
 801a81a:	2316      	movs	r3, #22
 801a81c:	6003      	str	r3, [r0, #0]
 801a81e:	2001      	movs	r0, #1
 801a820:	e7e7      	b.n	801a7f2 <_raise_r+0x12>
 801a822:	2400      	movs	r4, #0
 801a824:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a828:	4628      	mov	r0, r5
 801a82a:	4798      	blx	r3
 801a82c:	2000      	movs	r0, #0
 801a82e:	e7e0      	b.n	801a7f2 <_raise_r+0x12>

0801a830 <raise>:
 801a830:	4b02      	ldr	r3, [pc, #8]	; (801a83c <raise+0xc>)
 801a832:	4601      	mov	r1, r0
 801a834:	6818      	ldr	r0, [r3, #0]
 801a836:	f7ff bfd3 	b.w	801a7e0 <_raise_r>
 801a83a:	bf00      	nop
 801a83c:	20000030 	.word	0x20000030

0801a840 <_kill_r>:
 801a840:	b538      	push	{r3, r4, r5, lr}
 801a842:	4d07      	ldr	r5, [pc, #28]	; (801a860 <_kill_r+0x20>)
 801a844:	2300      	movs	r3, #0
 801a846:	4604      	mov	r4, r0
 801a848:	4608      	mov	r0, r1
 801a84a:	4611      	mov	r1, r2
 801a84c:	602b      	str	r3, [r5, #0]
 801a84e:	f7f2 ff87 	bl	800d760 <_kill>
 801a852:	1c43      	adds	r3, r0, #1
 801a854:	d102      	bne.n	801a85c <_kill_r+0x1c>
 801a856:	682b      	ldr	r3, [r5, #0]
 801a858:	b103      	cbz	r3, 801a85c <_kill_r+0x1c>
 801a85a:	6023      	str	r3, [r4, #0]
 801a85c:	bd38      	pop	{r3, r4, r5, pc}
 801a85e:	bf00      	nop
 801a860:	2000a4f4 	.word	0x2000a4f4

0801a864 <_getpid_r>:
 801a864:	f7f2 bf74 	b.w	800d750 <_getpid>

0801a868 <__sread>:
 801a868:	b510      	push	{r4, lr}
 801a86a:	460c      	mov	r4, r1
 801a86c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a870:	f001 fbba 	bl	801bfe8 <_read_r>
 801a874:	2800      	cmp	r0, #0
 801a876:	bfab      	itete	ge
 801a878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a87a:	89a3      	ldrhlt	r3, [r4, #12]
 801a87c:	181b      	addge	r3, r3, r0
 801a87e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a882:	bfac      	ite	ge
 801a884:	6563      	strge	r3, [r4, #84]	; 0x54
 801a886:	81a3      	strhlt	r3, [r4, #12]
 801a888:	bd10      	pop	{r4, pc}

0801a88a <__swrite>:
 801a88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a88e:	461f      	mov	r7, r3
 801a890:	898b      	ldrh	r3, [r1, #12]
 801a892:	05db      	lsls	r3, r3, #23
 801a894:	4605      	mov	r5, r0
 801a896:	460c      	mov	r4, r1
 801a898:	4616      	mov	r6, r2
 801a89a:	d505      	bpl.n	801a8a8 <__swrite+0x1e>
 801a89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8a0:	2302      	movs	r3, #2
 801a8a2:	2200      	movs	r2, #0
 801a8a4:	f000 ffe8 	bl	801b878 <_lseek_r>
 801a8a8:	89a3      	ldrh	r3, [r4, #12]
 801a8aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a8ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a8b2:	81a3      	strh	r3, [r4, #12]
 801a8b4:	4632      	mov	r2, r6
 801a8b6:	463b      	mov	r3, r7
 801a8b8:	4628      	mov	r0, r5
 801a8ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a8be:	f000 b817 	b.w	801a8f0 <_write_r>

0801a8c2 <__sseek>:
 801a8c2:	b510      	push	{r4, lr}
 801a8c4:	460c      	mov	r4, r1
 801a8c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8ca:	f000 ffd5 	bl	801b878 <_lseek_r>
 801a8ce:	1c43      	adds	r3, r0, #1
 801a8d0:	89a3      	ldrh	r3, [r4, #12]
 801a8d2:	bf15      	itete	ne
 801a8d4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a8d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a8da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a8de:	81a3      	strheq	r3, [r4, #12]
 801a8e0:	bf18      	it	ne
 801a8e2:	81a3      	strhne	r3, [r4, #12]
 801a8e4:	bd10      	pop	{r4, pc}

0801a8e6 <__sclose>:
 801a8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8ea:	f000 b875 	b.w	801a9d8 <_close_r>
	...

0801a8f0 <_write_r>:
 801a8f0:	b538      	push	{r3, r4, r5, lr}
 801a8f2:	4d07      	ldr	r5, [pc, #28]	; (801a910 <_write_r+0x20>)
 801a8f4:	4604      	mov	r4, r0
 801a8f6:	4608      	mov	r0, r1
 801a8f8:	4611      	mov	r1, r2
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	602a      	str	r2, [r5, #0]
 801a8fe:	461a      	mov	r2, r3
 801a900:	f7f2 ff65 	bl	800d7ce <_write>
 801a904:	1c43      	adds	r3, r0, #1
 801a906:	d102      	bne.n	801a90e <_write_r+0x1e>
 801a908:	682b      	ldr	r3, [r5, #0]
 801a90a:	b103      	cbz	r3, 801a90e <_write_r+0x1e>
 801a90c:	6023      	str	r3, [r4, #0]
 801a90e:	bd38      	pop	{r3, r4, r5, pc}
 801a910:	2000a4f4 	.word	0x2000a4f4

0801a914 <__register_exitproc>:
 801a914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a918:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801a9d4 <__register_exitproc+0xc0>
 801a91c:	4606      	mov	r6, r0
 801a91e:	f8d8 0000 	ldr.w	r0, [r8]
 801a922:	461f      	mov	r7, r3
 801a924:	460d      	mov	r5, r1
 801a926:	4691      	mov	r9, r2
 801a928:	f7ff f96d 	bl	8019c06 <__retarget_lock_acquire_recursive>
 801a92c:	4b25      	ldr	r3, [pc, #148]	; (801a9c4 <__register_exitproc+0xb0>)
 801a92e:	681c      	ldr	r4, [r3, #0]
 801a930:	b934      	cbnz	r4, 801a940 <__register_exitproc+0x2c>
 801a932:	4c25      	ldr	r4, [pc, #148]	; (801a9c8 <__register_exitproc+0xb4>)
 801a934:	601c      	str	r4, [r3, #0]
 801a936:	4b25      	ldr	r3, [pc, #148]	; (801a9cc <__register_exitproc+0xb8>)
 801a938:	b113      	cbz	r3, 801a940 <__register_exitproc+0x2c>
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801a940:	6863      	ldr	r3, [r4, #4]
 801a942:	2b1f      	cmp	r3, #31
 801a944:	dd07      	ble.n	801a956 <__register_exitproc+0x42>
 801a946:	f8d8 0000 	ldr.w	r0, [r8]
 801a94a:	f7ff f95e 	bl	8019c0a <__retarget_lock_release_recursive>
 801a94e:	f04f 30ff 	mov.w	r0, #4294967295
 801a952:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a956:	b34e      	cbz	r6, 801a9ac <__register_exitproc+0x98>
 801a958:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801a95c:	b988      	cbnz	r0, 801a982 <__register_exitproc+0x6e>
 801a95e:	4b1c      	ldr	r3, [pc, #112]	; (801a9d0 <__register_exitproc+0xbc>)
 801a960:	b923      	cbnz	r3, 801a96c <__register_exitproc+0x58>
 801a962:	f8d8 0000 	ldr.w	r0, [r8]
 801a966:	f7ff f94f 	bl	8019c08 <__retarget_lock_release>
 801a96a:	e7f0      	b.n	801a94e <__register_exitproc+0x3a>
 801a96c:	f44f 7084 	mov.w	r0, #264	; 0x108
 801a970:	f7ff f94c 	bl	8019c0c <malloc>
 801a974:	2800      	cmp	r0, #0
 801a976:	d0f4      	beq.n	801a962 <__register_exitproc+0x4e>
 801a978:	2300      	movs	r3, #0
 801a97a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801a97e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801a982:	6863      	ldr	r3, [r4, #4]
 801a984:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801a988:	2201      	movs	r2, #1
 801a98a:	409a      	lsls	r2, r3
 801a98c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801a990:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801a994:	4313      	orrs	r3, r2
 801a996:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801a99a:	2e02      	cmp	r6, #2
 801a99c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801a9a0:	bf02      	ittt	eq
 801a9a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801a9a6:	4313      	orreq	r3, r2
 801a9a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801a9ac:	6863      	ldr	r3, [r4, #4]
 801a9ae:	f8d8 0000 	ldr.w	r0, [r8]
 801a9b2:	1c5a      	adds	r2, r3, #1
 801a9b4:	3302      	adds	r3, #2
 801a9b6:	6062      	str	r2, [r4, #4]
 801a9b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801a9bc:	f7ff f925 	bl	8019c0a <__retarget_lock_release_recursive>
 801a9c0:	2000      	movs	r0, #0
 801a9c2:	e7c6      	b.n	801a952 <__register_exitproc+0x3e>
 801a9c4:	2000a584 	.word	0x2000a584
 801a9c8:	2000a4f8 	.word	0x2000a4f8
 801a9cc:	00000000 	.word	0x00000000
 801a9d0:	08019c0d 	.word	0x08019c0d
 801a9d4:	20000094 	.word	0x20000094

0801a9d8 <_close_r>:
 801a9d8:	b538      	push	{r3, r4, r5, lr}
 801a9da:	4d06      	ldr	r5, [pc, #24]	; (801a9f4 <_close_r+0x1c>)
 801a9dc:	2300      	movs	r3, #0
 801a9de:	4604      	mov	r4, r0
 801a9e0:	4608      	mov	r0, r1
 801a9e2:	602b      	str	r3, [r5, #0]
 801a9e4:	f7f2 ff0f 	bl	800d806 <_close>
 801a9e8:	1c43      	adds	r3, r0, #1
 801a9ea:	d102      	bne.n	801a9f2 <_close_r+0x1a>
 801a9ec:	682b      	ldr	r3, [r5, #0]
 801a9ee:	b103      	cbz	r3, 801a9f2 <_close_r+0x1a>
 801a9f0:	6023      	str	r3, [r4, #0]
 801a9f2:	bd38      	pop	{r3, r4, r5, pc}
 801a9f4:	2000a4f4 	.word	0x2000a4f4

0801a9f8 <quorem>:
 801a9f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9fc:	6903      	ldr	r3, [r0, #16]
 801a9fe:	690c      	ldr	r4, [r1, #16]
 801aa00:	42a3      	cmp	r3, r4
 801aa02:	4607      	mov	r7, r0
 801aa04:	f2c0 8081 	blt.w	801ab0a <quorem+0x112>
 801aa08:	3c01      	subs	r4, #1
 801aa0a:	f101 0814 	add.w	r8, r1, #20
 801aa0e:	f100 0514 	add.w	r5, r0, #20
 801aa12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801aa16:	9301      	str	r3, [sp, #4]
 801aa18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801aa1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801aa20:	3301      	adds	r3, #1
 801aa22:	429a      	cmp	r2, r3
 801aa24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801aa28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801aa2c:	fbb2 f6f3 	udiv	r6, r2, r3
 801aa30:	d331      	bcc.n	801aa96 <quorem+0x9e>
 801aa32:	f04f 0e00 	mov.w	lr, #0
 801aa36:	4640      	mov	r0, r8
 801aa38:	46ac      	mov	ip, r5
 801aa3a:	46f2      	mov	sl, lr
 801aa3c:	f850 2b04 	ldr.w	r2, [r0], #4
 801aa40:	b293      	uxth	r3, r2
 801aa42:	fb06 e303 	mla	r3, r6, r3, lr
 801aa46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801aa4a:	b29b      	uxth	r3, r3
 801aa4c:	ebaa 0303 	sub.w	r3, sl, r3
 801aa50:	f8dc a000 	ldr.w	sl, [ip]
 801aa54:	0c12      	lsrs	r2, r2, #16
 801aa56:	fa13 f38a 	uxtah	r3, r3, sl
 801aa5a:	fb06 e202 	mla	r2, r6, r2, lr
 801aa5e:	9300      	str	r3, [sp, #0]
 801aa60:	9b00      	ldr	r3, [sp, #0]
 801aa62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801aa66:	b292      	uxth	r2, r2
 801aa68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801aa6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801aa70:	f8bd 3000 	ldrh.w	r3, [sp]
 801aa74:	4581      	cmp	r9, r0
 801aa76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801aa7a:	f84c 3b04 	str.w	r3, [ip], #4
 801aa7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801aa82:	d2db      	bcs.n	801aa3c <quorem+0x44>
 801aa84:	f855 300b 	ldr.w	r3, [r5, fp]
 801aa88:	b92b      	cbnz	r3, 801aa96 <quorem+0x9e>
 801aa8a:	9b01      	ldr	r3, [sp, #4]
 801aa8c:	3b04      	subs	r3, #4
 801aa8e:	429d      	cmp	r5, r3
 801aa90:	461a      	mov	r2, r3
 801aa92:	d32e      	bcc.n	801aaf2 <quorem+0xfa>
 801aa94:	613c      	str	r4, [r7, #16]
 801aa96:	4638      	mov	r0, r7
 801aa98:	f001 f98e 	bl	801bdb8 <__mcmp>
 801aa9c:	2800      	cmp	r0, #0
 801aa9e:	db24      	blt.n	801aaea <quorem+0xf2>
 801aaa0:	3601      	adds	r6, #1
 801aaa2:	4628      	mov	r0, r5
 801aaa4:	f04f 0c00 	mov.w	ip, #0
 801aaa8:	f858 2b04 	ldr.w	r2, [r8], #4
 801aaac:	f8d0 e000 	ldr.w	lr, [r0]
 801aab0:	b293      	uxth	r3, r2
 801aab2:	ebac 0303 	sub.w	r3, ip, r3
 801aab6:	0c12      	lsrs	r2, r2, #16
 801aab8:	fa13 f38e 	uxtah	r3, r3, lr
 801aabc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801aac0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801aac4:	b29b      	uxth	r3, r3
 801aac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801aaca:	45c1      	cmp	r9, r8
 801aacc:	f840 3b04 	str.w	r3, [r0], #4
 801aad0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801aad4:	d2e8      	bcs.n	801aaa8 <quorem+0xb0>
 801aad6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801aada:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801aade:	b922      	cbnz	r2, 801aaea <quorem+0xf2>
 801aae0:	3b04      	subs	r3, #4
 801aae2:	429d      	cmp	r5, r3
 801aae4:	461a      	mov	r2, r3
 801aae6:	d30a      	bcc.n	801aafe <quorem+0x106>
 801aae8:	613c      	str	r4, [r7, #16]
 801aaea:	4630      	mov	r0, r6
 801aaec:	b003      	add	sp, #12
 801aaee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aaf2:	6812      	ldr	r2, [r2, #0]
 801aaf4:	3b04      	subs	r3, #4
 801aaf6:	2a00      	cmp	r2, #0
 801aaf8:	d1cc      	bne.n	801aa94 <quorem+0x9c>
 801aafa:	3c01      	subs	r4, #1
 801aafc:	e7c7      	b.n	801aa8e <quorem+0x96>
 801aafe:	6812      	ldr	r2, [r2, #0]
 801ab00:	3b04      	subs	r3, #4
 801ab02:	2a00      	cmp	r2, #0
 801ab04:	d1f0      	bne.n	801aae8 <quorem+0xf0>
 801ab06:	3c01      	subs	r4, #1
 801ab08:	e7eb      	b.n	801aae2 <quorem+0xea>
 801ab0a:	2000      	movs	r0, #0
 801ab0c:	e7ee      	b.n	801aaec <quorem+0xf4>
	...

0801ab10 <_dtoa_r>:
 801ab10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab14:	ed2d 8b04 	vpush	{d8-d9}
 801ab18:	ec57 6b10 	vmov	r6, r7, d0
 801ab1c:	b093      	sub	sp, #76	; 0x4c
 801ab1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801ab20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801ab24:	9106      	str	r1, [sp, #24]
 801ab26:	ee10 aa10 	vmov	sl, s0
 801ab2a:	4604      	mov	r4, r0
 801ab2c:	9209      	str	r2, [sp, #36]	; 0x24
 801ab2e:	930c      	str	r3, [sp, #48]	; 0x30
 801ab30:	46bb      	mov	fp, r7
 801ab32:	b975      	cbnz	r5, 801ab52 <_dtoa_r+0x42>
 801ab34:	2010      	movs	r0, #16
 801ab36:	f7ff f869 	bl	8019c0c <malloc>
 801ab3a:	4602      	mov	r2, r0
 801ab3c:	6260      	str	r0, [r4, #36]	; 0x24
 801ab3e:	b920      	cbnz	r0, 801ab4a <_dtoa_r+0x3a>
 801ab40:	4ba7      	ldr	r3, [pc, #668]	; (801ade0 <_dtoa_r+0x2d0>)
 801ab42:	21ea      	movs	r1, #234	; 0xea
 801ab44:	48a7      	ldr	r0, [pc, #668]	; (801ade4 <_dtoa_r+0x2d4>)
 801ab46:	f001 fa61 	bl	801c00c <__assert_func>
 801ab4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801ab4e:	6005      	str	r5, [r0, #0]
 801ab50:	60c5      	str	r5, [r0, #12]
 801ab52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ab54:	6819      	ldr	r1, [r3, #0]
 801ab56:	b151      	cbz	r1, 801ab6e <_dtoa_r+0x5e>
 801ab58:	685a      	ldr	r2, [r3, #4]
 801ab5a:	604a      	str	r2, [r1, #4]
 801ab5c:	2301      	movs	r3, #1
 801ab5e:	4093      	lsls	r3, r2
 801ab60:	608b      	str	r3, [r1, #8]
 801ab62:	4620      	mov	r0, r4
 801ab64:	f000 fee6 	bl	801b934 <_Bfree>
 801ab68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ab6a:	2200      	movs	r2, #0
 801ab6c:	601a      	str	r2, [r3, #0]
 801ab6e:	1e3b      	subs	r3, r7, #0
 801ab70:	bfaa      	itet	ge
 801ab72:	2300      	movge	r3, #0
 801ab74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 801ab78:	f8c8 3000 	strge.w	r3, [r8]
 801ab7c:	4b9a      	ldr	r3, [pc, #616]	; (801ade8 <_dtoa_r+0x2d8>)
 801ab7e:	bfbc      	itt	lt
 801ab80:	2201      	movlt	r2, #1
 801ab82:	f8c8 2000 	strlt.w	r2, [r8]
 801ab86:	ea33 030b 	bics.w	r3, r3, fp
 801ab8a:	d11b      	bne.n	801abc4 <_dtoa_r+0xb4>
 801ab8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ab8e:	f242 730f 	movw	r3, #9999	; 0x270f
 801ab92:	6013      	str	r3, [r2, #0]
 801ab94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ab98:	4333      	orrs	r3, r6
 801ab9a:	f000 8592 	beq.w	801b6c2 <_dtoa_r+0xbb2>
 801ab9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801aba0:	b963      	cbnz	r3, 801abbc <_dtoa_r+0xac>
 801aba2:	4b92      	ldr	r3, [pc, #584]	; (801adec <_dtoa_r+0x2dc>)
 801aba4:	e022      	b.n	801abec <_dtoa_r+0xdc>
 801aba6:	4b92      	ldr	r3, [pc, #584]	; (801adf0 <_dtoa_r+0x2e0>)
 801aba8:	9301      	str	r3, [sp, #4]
 801abaa:	3308      	adds	r3, #8
 801abac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801abae:	6013      	str	r3, [r2, #0]
 801abb0:	9801      	ldr	r0, [sp, #4]
 801abb2:	b013      	add	sp, #76	; 0x4c
 801abb4:	ecbd 8b04 	vpop	{d8-d9}
 801abb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abbc:	4b8b      	ldr	r3, [pc, #556]	; (801adec <_dtoa_r+0x2dc>)
 801abbe:	9301      	str	r3, [sp, #4]
 801abc0:	3303      	adds	r3, #3
 801abc2:	e7f3      	b.n	801abac <_dtoa_r+0x9c>
 801abc4:	2200      	movs	r2, #0
 801abc6:	2300      	movs	r3, #0
 801abc8:	4650      	mov	r0, sl
 801abca:	4659      	mov	r1, fp
 801abcc:	f7e5 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 801abd0:	ec4b ab19 	vmov	d9, sl, fp
 801abd4:	4680      	mov	r8, r0
 801abd6:	b158      	cbz	r0, 801abf0 <_dtoa_r+0xe0>
 801abd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801abda:	2301      	movs	r3, #1
 801abdc:	6013      	str	r3, [r2, #0]
 801abde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	f000 856b 	beq.w	801b6bc <_dtoa_r+0xbac>
 801abe6:	4883      	ldr	r0, [pc, #524]	; (801adf4 <_dtoa_r+0x2e4>)
 801abe8:	6018      	str	r0, [r3, #0]
 801abea:	1e43      	subs	r3, r0, #1
 801abec:	9301      	str	r3, [sp, #4]
 801abee:	e7df      	b.n	801abb0 <_dtoa_r+0xa0>
 801abf0:	ec4b ab10 	vmov	d0, sl, fp
 801abf4:	aa10      	add	r2, sp, #64	; 0x40
 801abf6:	a911      	add	r1, sp, #68	; 0x44
 801abf8:	4620      	mov	r0, r4
 801abfa:	f001 f983 	bl	801bf04 <__d2b>
 801abfe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801ac02:	ee08 0a10 	vmov	s16, r0
 801ac06:	2d00      	cmp	r5, #0
 801ac08:	f000 8084 	beq.w	801ad14 <_dtoa_r+0x204>
 801ac0c:	ee19 3a90 	vmov	r3, s19
 801ac10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ac14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 801ac18:	4656      	mov	r6, sl
 801ac1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801ac1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ac22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801ac26:	4b74      	ldr	r3, [pc, #464]	; (801adf8 <_dtoa_r+0x2e8>)
 801ac28:	2200      	movs	r2, #0
 801ac2a:	4630      	mov	r0, r6
 801ac2c:	4639      	mov	r1, r7
 801ac2e:	f7e5 fb2b 	bl	8000288 <__aeabi_dsub>
 801ac32:	a365      	add	r3, pc, #404	; (adr r3, 801adc8 <_dtoa_r+0x2b8>)
 801ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac38:	f7e5 fcde 	bl	80005f8 <__aeabi_dmul>
 801ac3c:	a364      	add	r3, pc, #400	; (adr r3, 801add0 <_dtoa_r+0x2c0>)
 801ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac42:	f7e5 fb23 	bl	800028c <__adddf3>
 801ac46:	4606      	mov	r6, r0
 801ac48:	4628      	mov	r0, r5
 801ac4a:	460f      	mov	r7, r1
 801ac4c:	f7e5 fc6a 	bl	8000524 <__aeabi_i2d>
 801ac50:	a361      	add	r3, pc, #388	; (adr r3, 801add8 <_dtoa_r+0x2c8>)
 801ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac56:	f7e5 fccf 	bl	80005f8 <__aeabi_dmul>
 801ac5a:	4602      	mov	r2, r0
 801ac5c:	460b      	mov	r3, r1
 801ac5e:	4630      	mov	r0, r6
 801ac60:	4639      	mov	r1, r7
 801ac62:	f7e5 fb13 	bl	800028c <__adddf3>
 801ac66:	4606      	mov	r6, r0
 801ac68:	460f      	mov	r7, r1
 801ac6a:	f7e5 ff75 	bl	8000b58 <__aeabi_d2iz>
 801ac6e:	2200      	movs	r2, #0
 801ac70:	9000      	str	r0, [sp, #0]
 801ac72:	2300      	movs	r3, #0
 801ac74:	4630      	mov	r0, r6
 801ac76:	4639      	mov	r1, r7
 801ac78:	f7e5 ff30 	bl	8000adc <__aeabi_dcmplt>
 801ac7c:	b150      	cbz	r0, 801ac94 <_dtoa_r+0x184>
 801ac7e:	9800      	ldr	r0, [sp, #0]
 801ac80:	f7e5 fc50 	bl	8000524 <__aeabi_i2d>
 801ac84:	4632      	mov	r2, r6
 801ac86:	463b      	mov	r3, r7
 801ac88:	f7e5 ff1e 	bl	8000ac8 <__aeabi_dcmpeq>
 801ac8c:	b910      	cbnz	r0, 801ac94 <_dtoa_r+0x184>
 801ac8e:	9b00      	ldr	r3, [sp, #0]
 801ac90:	3b01      	subs	r3, #1
 801ac92:	9300      	str	r3, [sp, #0]
 801ac94:	9b00      	ldr	r3, [sp, #0]
 801ac96:	2b16      	cmp	r3, #22
 801ac98:	d85a      	bhi.n	801ad50 <_dtoa_r+0x240>
 801ac9a:	9a00      	ldr	r2, [sp, #0]
 801ac9c:	4b57      	ldr	r3, [pc, #348]	; (801adfc <_dtoa_r+0x2ec>)
 801ac9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aca6:	ec51 0b19 	vmov	r0, r1, d9
 801acaa:	f7e5 ff17 	bl	8000adc <__aeabi_dcmplt>
 801acae:	2800      	cmp	r0, #0
 801acb0:	d050      	beq.n	801ad54 <_dtoa_r+0x244>
 801acb2:	9b00      	ldr	r3, [sp, #0]
 801acb4:	3b01      	subs	r3, #1
 801acb6:	9300      	str	r3, [sp, #0]
 801acb8:	2300      	movs	r3, #0
 801acba:	930b      	str	r3, [sp, #44]	; 0x2c
 801acbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801acbe:	1b5d      	subs	r5, r3, r5
 801acc0:	1e6b      	subs	r3, r5, #1
 801acc2:	9305      	str	r3, [sp, #20]
 801acc4:	bf45      	ittet	mi
 801acc6:	f1c5 0301 	rsbmi	r3, r5, #1
 801acca:	9304      	strmi	r3, [sp, #16]
 801accc:	2300      	movpl	r3, #0
 801acce:	2300      	movmi	r3, #0
 801acd0:	bf4c      	ite	mi
 801acd2:	9305      	strmi	r3, [sp, #20]
 801acd4:	9304      	strpl	r3, [sp, #16]
 801acd6:	9b00      	ldr	r3, [sp, #0]
 801acd8:	2b00      	cmp	r3, #0
 801acda:	db3d      	blt.n	801ad58 <_dtoa_r+0x248>
 801acdc:	9b05      	ldr	r3, [sp, #20]
 801acde:	9a00      	ldr	r2, [sp, #0]
 801ace0:	920a      	str	r2, [sp, #40]	; 0x28
 801ace2:	4413      	add	r3, r2
 801ace4:	9305      	str	r3, [sp, #20]
 801ace6:	2300      	movs	r3, #0
 801ace8:	9307      	str	r3, [sp, #28]
 801acea:	9b06      	ldr	r3, [sp, #24]
 801acec:	2b09      	cmp	r3, #9
 801acee:	f200 8089 	bhi.w	801ae04 <_dtoa_r+0x2f4>
 801acf2:	2b05      	cmp	r3, #5
 801acf4:	bfc4      	itt	gt
 801acf6:	3b04      	subgt	r3, #4
 801acf8:	9306      	strgt	r3, [sp, #24]
 801acfa:	9b06      	ldr	r3, [sp, #24]
 801acfc:	f1a3 0302 	sub.w	r3, r3, #2
 801ad00:	bfcc      	ite	gt
 801ad02:	2500      	movgt	r5, #0
 801ad04:	2501      	movle	r5, #1
 801ad06:	2b03      	cmp	r3, #3
 801ad08:	f200 8087 	bhi.w	801ae1a <_dtoa_r+0x30a>
 801ad0c:	e8df f003 	tbb	[pc, r3]
 801ad10:	59383a2d 	.word	0x59383a2d
 801ad14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 801ad18:	441d      	add	r5, r3
 801ad1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801ad1e:	2b20      	cmp	r3, #32
 801ad20:	bfc1      	itttt	gt
 801ad22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801ad26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801ad2a:	fa0b f303 	lslgt.w	r3, fp, r3
 801ad2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 801ad32:	bfda      	itte	le
 801ad34:	f1c3 0320 	rsble	r3, r3, #32
 801ad38:	fa06 f003 	lslle.w	r0, r6, r3
 801ad3c:	4318      	orrgt	r0, r3
 801ad3e:	f7e5 fbe1 	bl	8000504 <__aeabi_ui2d>
 801ad42:	2301      	movs	r3, #1
 801ad44:	4606      	mov	r6, r0
 801ad46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801ad4a:	3d01      	subs	r5, #1
 801ad4c:	930e      	str	r3, [sp, #56]	; 0x38
 801ad4e:	e76a      	b.n	801ac26 <_dtoa_r+0x116>
 801ad50:	2301      	movs	r3, #1
 801ad52:	e7b2      	b.n	801acba <_dtoa_r+0x1aa>
 801ad54:	900b      	str	r0, [sp, #44]	; 0x2c
 801ad56:	e7b1      	b.n	801acbc <_dtoa_r+0x1ac>
 801ad58:	9b04      	ldr	r3, [sp, #16]
 801ad5a:	9a00      	ldr	r2, [sp, #0]
 801ad5c:	1a9b      	subs	r3, r3, r2
 801ad5e:	9304      	str	r3, [sp, #16]
 801ad60:	4253      	negs	r3, r2
 801ad62:	9307      	str	r3, [sp, #28]
 801ad64:	2300      	movs	r3, #0
 801ad66:	930a      	str	r3, [sp, #40]	; 0x28
 801ad68:	e7bf      	b.n	801acea <_dtoa_r+0x1da>
 801ad6a:	2300      	movs	r3, #0
 801ad6c:	9308      	str	r3, [sp, #32]
 801ad6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad70:	2b00      	cmp	r3, #0
 801ad72:	dc55      	bgt.n	801ae20 <_dtoa_r+0x310>
 801ad74:	2301      	movs	r3, #1
 801ad76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ad7a:	461a      	mov	r2, r3
 801ad7c:	9209      	str	r2, [sp, #36]	; 0x24
 801ad7e:	e00c      	b.n	801ad9a <_dtoa_r+0x28a>
 801ad80:	2301      	movs	r3, #1
 801ad82:	e7f3      	b.n	801ad6c <_dtoa_r+0x25c>
 801ad84:	2300      	movs	r3, #0
 801ad86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ad88:	9308      	str	r3, [sp, #32]
 801ad8a:	9b00      	ldr	r3, [sp, #0]
 801ad8c:	4413      	add	r3, r2
 801ad8e:	9302      	str	r3, [sp, #8]
 801ad90:	3301      	adds	r3, #1
 801ad92:	2b01      	cmp	r3, #1
 801ad94:	9303      	str	r3, [sp, #12]
 801ad96:	bfb8      	it	lt
 801ad98:	2301      	movlt	r3, #1
 801ad9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ad9c:	2200      	movs	r2, #0
 801ad9e:	6042      	str	r2, [r0, #4]
 801ada0:	2204      	movs	r2, #4
 801ada2:	f102 0614 	add.w	r6, r2, #20
 801ada6:	429e      	cmp	r6, r3
 801ada8:	6841      	ldr	r1, [r0, #4]
 801adaa:	d93d      	bls.n	801ae28 <_dtoa_r+0x318>
 801adac:	4620      	mov	r0, r4
 801adae:	f000 fd81 	bl	801b8b4 <_Balloc>
 801adb2:	9001      	str	r0, [sp, #4]
 801adb4:	2800      	cmp	r0, #0
 801adb6:	d13b      	bne.n	801ae30 <_dtoa_r+0x320>
 801adb8:	4b11      	ldr	r3, [pc, #68]	; (801ae00 <_dtoa_r+0x2f0>)
 801adba:	4602      	mov	r2, r0
 801adbc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801adc0:	e6c0      	b.n	801ab44 <_dtoa_r+0x34>
 801adc2:	2301      	movs	r3, #1
 801adc4:	e7df      	b.n	801ad86 <_dtoa_r+0x276>
 801adc6:	bf00      	nop
 801adc8:	636f4361 	.word	0x636f4361
 801adcc:	3fd287a7 	.word	0x3fd287a7
 801add0:	8b60c8b3 	.word	0x8b60c8b3
 801add4:	3fc68a28 	.word	0x3fc68a28
 801add8:	509f79fb 	.word	0x509f79fb
 801addc:	3fd34413 	.word	0x3fd34413
 801ade0:	0801cd95 	.word	0x0801cd95
 801ade4:	0801cdac 	.word	0x0801cdac
 801ade8:	7ff00000 	.word	0x7ff00000
 801adec:	0801cd91 	.word	0x0801cd91
 801adf0:	0801cd88 	.word	0x0801cd88
 801adf4:	0801cd65 	.word	0x0801cd65
 801adf8:	3ff80000 	.word	0x3ff80000
 801adfc:	0801cea0 	.word	0x0801cea0
 801ae00:	0801ce07 	.word	0x0801ce07
 801ae04:	2501      	movs	r5, #1
 801ae06:	2300      	movs	r3, #0
 801ae08:	9306      	str	r3, [sp, #24]
 801ae0a:	9508      	str	r5, [sp, #32]
 801ae0c:	f04f 33ff 	mov.w	r3, #4294967295
 801ae10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ae14:	2200      	movs	r2, #0
 801ae16:	2312      	movs	r3, #18
 801ae18:	e7b0      	b.n	801ad7c <_dtoa_r+0x26c>
 801ae1a:	2301      	movs	r3, #1
 801ae1c:	9308      	str	r3, [sp, #32]
 801ae1e:	e7f5      	b.n	801ae0c <_dtoa_r+0x2fc>
 801ae20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ae22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801ae26:	e7b8      	b.n	801ad9a <_dtoa_r+0x28a>
 801ae28:	3101      	adds	r1, #1
 801ae2a:	6041      	str	r1, [r0, #4]
 801ae2c:	0052      	lsls	r2, r2, #1
 801ae2e:	e7b8      	b.n	801ada2 <_dtoa_r+0x292>
 801ae30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae32:	9a01      	ldr	r2, [sp, #4]
 801ae34:	601a      	str	r2, [r3, #0]
 801ae36:	9b03      	ldr	r3, [sp, #12]
 801ae38:	2b0e      	cmp	r3, #14
 801ae3a:	f200 809d 	bhi.w	801af78 <_dtoa_r+0x468>
 801ae3e:	2d00      	cmp	r5, #0
 801ae40:	f000 809a 	beq.w	801af78 <_dtoa_r+0x468>
 801ae44:	9b00      	ldr	r3, [sp, #0]
 801ae46:	2b00      	cmp	r3, #0
 801ae48:	dd32      	ble.n	801aeb0 <_dtoa_r+0x3a0>
 801ae4a:	4ab7      	ldr	r2, [pc, #732]	; (801b128 <_dtoa_r+0x618>)
 801ae4c:	f003 030f 	and.w	r3, r3, #15
 801ae50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801ae54:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ae58:	9b00      	ldr	r3, [sp, #0]
 801ae5a:	05d8      	lsls	r0, r3, #23
 801ae5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 801ae60:	d516      	bpl.n	801ae90 <_dtoa_r+0x380>
 801ae62:	4bb2      	ldr	r3, [pc, #712]	; (801b12c <_dtoa_r+0x61c>)
 801ae64:	ec51 0b19 	vmov	r0, r1, d9
 801ae68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ae6c:	f7e5 fcee 	bl	800084c <__aeabi_ddiv>
 801ae70:	f007 070f 	and.w	r7, r7, #15
 801ae74:	4682      	mov	sl, r0
 801ae76:	468b      	mov	fp, r1
 801ae78:	2503      	movs	r5, #3
 801ae7a:	4eac      	ldr	r6, [pc, #688]	; (801b12c <_dtoa_r+0x61c>)
 801ae7c:	b957      	cbnz	r7, 801ae94 <_dtoa_r+0x384>
 801ae7e:	4642      	mov	r2, r8
 801ae80:	464b      	mov	r3, r9
 801ae82:	4650      	mov	r0, sl
 801ae84:	4659      	mov	r1, fp
 801ae86:	f7e5 fce1 	bl	800084c <__aeabi_ddiv>
 801ae8a:	4682      	mov	sl, r0
 801ae8c:	468b      	mov	fp, r1
 801ae8e:	e028      	b.n	801aee2 <_dtoa_r+0x3d2>
 801ae90:	2502      	movs	r5, #2
 801ae92:	e7f2      	b.n	801ae7a <_dtoa_r+0x36a>
 801ae94:	07f9      	lsls	r1, r7, #31
 801ae96:	d508      	bpl.n	801aeaa <_dtoa_r+0x39a>
 801ae98:	4640      	mov	r0, r8
 801ae9a:	4649      	mov	r1, r9
 801ae9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801aea0:	f7e5 fbaa 	bl	80005f8 <__aeabi_dmul>
 801aea4:	3501      	adds	r5, #1
 801aea6:	4680      	mov	r8, r0
 801aea8:	4689      	mov	r9, r1
 801aeaa:	107f      	asrs	r7, r7, #1
 801aeac:	3608      	adds	r6, #8
 801aeae:	e7e5      	b.n	801ae7c <_dtoa_r+0x36c>
 801aeb0:	f000 809b 	beq.w	801afea <_dtoa_r+0x4da>
 801aeb4:	9b00      	ldr	r3, [sp, #0]
 801aeb6:	4f9d      	ldr	r7, [pc, #628]	; (801b12c <_dtoa_r+0x61c>)
 801aeb8:	425e      	negs	r6, r3
 801aeba:	4b9b      	ldr	r3, [pc, #620]	; (801b128 <_dtoa_r+0x618>)
 801aebc:	f006 020f 	and.w	r2, r6, #15
 801aec0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aec8:	ec51 0b19 	vmov	r0, r1, d9
 801aecc:	f7e5 fb94 	bl	80005f8 <__aeabi_dmul>
 801aed0:	1136      	asrs	r6, r6, #4
 801aed2:	4682      	mov	sl, r0
 801aed4:	468b      	mov	fp, r1
 801aed6:	2300      	movs	r3, #0
 801aed8:	2502      	movs	r5, #2
 801aeda:	2e00      	cmp	r6, #0
 801aedc:	d17a      	bne.n	801afd4 <_dtoa_r+0x4c4>
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d1d3      	bne.n	801ae8a <_dtoa_r+0x37a>
 801aee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	f000 8082 	beq.w	801afee <_dtoa_r+0x4de>
 801aeea:	4b91      	ldr	r3, [pc, #580]	; (801b130 <_dtoa_r+0x620>)
 801aeec:	2200      	movs	r2, #0
 801aeee:	4650      	mov	r0, sl
 801aef0:	4659      	mov	r1, fp
 801aef2:	f7e5 fdf3 	bl	8000adc <__aeabi_dcmplt>
 801aef6:	2800      	cmp	r0, #0
 801aef8:	d079      	beq.n	801afee <_dtoa_r+0x4de>
 801aefa:	9b03      	ldr	r3, [sp, #12]
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d076      	beq.n	801afee <_dtoa_r+0x4de>
 801af00:	9b02      	ldr	r3, [sp, #8]
 801af02:	2b00      	cmp	r3, #0
 801af04:	dd36      	ble.n	801af74 <_dtoa_r+0x464>
 801af06:	9b00      	ldr	r3, [sp, #0]
 801af08:	4650      	mov	r0, sl
 801af0a:	4659      	mov	r1, fp
 801af0c:	1e5f      	subs	r7, r3, #1
 801af0e:	2200      	movs	r2, #0
 801af10:	4b88      	ldr	r3, [pc, #544]	; (801b134 <_dtoa_r+0x624>)
 801af12:	f7e5 fb71 	bl	80005f8 <__aeabi_dmul>
 801af16:	9e02      	ldr	r6, [sp, #8]
 801af18:	4682      	mov	sl, r0
 801af1a:	468b      	mov	fp, r1
 801af1c:	3501      	adds	r5, #1
 801af1e:	4628      	mov	r0, r5
 801af20:	f7e5 fb00 	bl	8000524 <__aeabi_i2d>
 801af24:	4652      	mov	r2, sl
 801af26:	465b      	mov	r3, fp
 801af28:	f7e5 fb66 	bl	80005f8 <__aeabi_dmul>
 801af2c:	4b82      	ldr	r3, [pc, #520]	; (801b138 <_dtoa_r+0x628>)
 801af2e:	2200      	movs	r2, #0
 801af30:	f7e5 f9ac 	bl	800028c <__adddf3>
 801af34:	46d0      	mov	r8, sl
 801af36:	46d9      	mov	r9, fp
 801af38:	4682      	mov	sl, r0
 801af3a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801af3e:	2e00      	cmp	r6, #0
 801af40:	d158      	bne.n	801aff4 <_dtoa_r+0x4e4>
 801af42:	4b7e      	ldr	r3, [pc, #504]	; (801b13c <_dtoa_r+0x62c>)
 801af44:	2200      	movs	r2, #0
 801af46:	4640      	mov	r0, r8
 801af48:	4649      	mov	r1, r9
 801af4a:	f7e5 f99d 	bl	8000288 <__aeabi_dsub>
 801af4e:	4652      	mov	r2, sl
 801af50:	465b      	mov	r3, fp
 801af52:	4680      	mov	r8, r0
 801af54:	4689      	mov	r9, r1
 801af56:	f7e5 fddf 	bl	8000b18 <__aeabi_dcmpgt>
 801af5a:	2800      	cmp	r0, #0
 801af5c:	f040 8295 	bne.w	801b48a <_dtoa_r+0x97a>
 801af60:	4652      	mov	r2, sl
 801af62:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801af66:	4640      	mov	r0, r8
 801af68:	4649      	mov	r1, r9
 801af6a:	f7e5 fdb7 	bl	8000adc <__aeabi_dcmplt>
 801af6e:	2800      	cmp	r0, #0
 801af70:	f040 8289 	bne.w	801b486 <_dtoa_r+0x976>
 801af74:	ec5b ab19 	vmov	sl, fp, d9
 801af78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	f2c0 8148 	blt.w	801b210 <_dtoa_r+0x700>
 801af80:	9a00      	ldr	r2, [sp, #0]
 801af82:	2a0e      	cmp	r2, #14
 801af84:	f300 8144 	bgt.w	801b210 <_dtoa_r+0x700>
 801af88:	4b67      	ldr	r3, [pc, #412]	; (801b128 <_dtoa_r+0x618>)
 801af8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801af8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801af92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801af94:	2b00      	cmp	r3, #0
 801af96:	f280 80d5 	bge.w	801b144 <_dtoa_r+0x634>
 801af9a:	9b03      	ldr	r3, [sp, #12]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	f300 80d1 	bgt.w	801b144 <_dtoa_r+0x634>
 801afa2:	f040 826f 	bne.w	801b484 <_dtoa_r+0x974>
 801afa6:	4b65      	ldr	r3, [pc, #404]	; (801b13c <_dtoa_r+0x62c>)
 801afa8:	2200      	movs	r2, #0
 801afaa:	4640      	mov	r0, r8
 801afac:	4649      	mov	r1, r9
 801afae:	f7e5 fb23 	bl	80005f8 <__aeabi_dmul>
 801afb2:	4652      	mov	r2, sl
 801afb4:	465b      	mov	r3, fp
 801afb6:	f7e5 fda5 	bl	8000b04 <__aeabi_dcmpge>
 801afba:	9e03      	ldr	r6, [sp, #12]
 801afbc:	4637      	mov	r7, r6
 801afbe:	2800      	cmp	r0, #0
 801afc0:	f040 8245 	bne.w	801b44e <_dtoa_r+0x93e>
 801afc4:	9d01      	ldr	r5, [sp, #4]
 801afc6:	2331      	movs	r3, #49	; 0x31
 801afc8:	f805 3b01 	strb.w	r3, [r5], #1
 801afcc:	9b00      	ldr	r3, [sp, #0]
 801afce:	3301      	adds	r3, #1
 801afd0:	9300      	str	r3, [sp, #0]
 801afd2:	e240      	b.n	801b456 <_dtoa_r+0x946>
 801afd4:	07f2      	lsls	r2, r6, #31
 801afd6:	d505      	bpl.n	801afe4 <_dtoa_r+0x4d4>
 801afd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801afdc:	f7e5 fb0c 	bl	80005f8 <__aeabi_dmul>
 801afe0:	3501      	adds	r5, #1
 801afe2:	2301      	movs	r3, #1
 801afe4:	1076      	asrs	r6, r6, #1
 801afe6:	3708      	adds	r7, #8
 801afe8:	e777      	b.n	801aeda <_dtoa_r+0x3ca>
 801afea:	2502      	movs	r5, #2
 801afec:	e779      	b.n	801aee2 <_dtoa_r+0x3d2>
 801afee:	9f00      	ldr	r7, [sp, #0]
 801aff0:	9e03      	ldr	r6, [sp, #12]
 801aff2:	e794      	b.n	801af1e <_dtoa_r+0x40e>
 801aff4:	9901      	ldr	r1, [sp, #4]
 801aff6:	4b4c      	ldr	r3, [pc, #304]	; (801b128 <_dtoa_r+0x618>)
 801aff8:	4431      	add	r1, r6
 801affa:	910d      	str	r1, [sp, #52]	; 0x34
 801affc:	9908      	ldr	r1, [sp, #32]
 801affe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801b002:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b006:	2900      	cmp	r1, #0
 801b008:	d043      	beq.n	801b092 <_dtoa_r+0x582>
 801b00a:	494d      	ldr	r1, [pc, #308]	; (801b140 <_dtoa_r+0x630>)
 801b00c:	2000      	movs	r0, #0
 801b00e:	f7e5 fc1d 	bl	800084c <__aeabi_ddiv>
 801b012:	4652      	mov	r2, sl
 801b014:	465b      	mov	r3, fp
 801b016:	f7e5 f937 	bl	8000288 <__aeabi_dsub>
 801b01a:	9d01      	ldr	r5, [sp, #4]
 801b01c:	4682      	mov	sl, r0
 801b01e:	468b      	mov	fp, r1
 801b020:	4649      	mov	r1, r9
 801b022:	4640      	mov	r0, r8
 801b024:	f7e5 fd98 	bl	8000b58 <__aeabi_d2iz>
 801b028:	4606      	mov	r6, r0
 801b02a:	f7e5 fa7b 	bl	8000524 <__aeabi_i2d>
 801b02e:	4602      	mov	r2, r0
 801b030:	460b      	mov	r3, r1
 801b032:	4640      	mov	r0, r8
 801b034:	4649      	mov	r1, r9
 801b036:	f7e5 f927 	bl	8000288 <__aeabi_dsub>
 801b03a:	3630      	adds	r6, #48	; 0x30
 801b03c:	f805 6b01 	strb.w	r6, [r5], #1
 801b040:	4652      	mov	r2, sl
 801b042:	465b      	mov	r3, fp
 801b044:	4680      	mov	r8, r0
 801b046:	4689      	mov	r9, r1
 801b048:	f7e5 fd48 	bl	8000adc <__aeabi_dcmplt>
 801b04c:	2800      	cmp	r0, #0
 801b04e:	d163      	bne.n	801b118 <_dtoa_r+0x608>
 801b050:	4642      	mov	r2, r8
 801b052:	464b      	mov	r3, r9
 801b054:	4936      	ldr	r1, [pc, #216]	; (801b130 <_dtoa_r+0x620>)
 801b056:	2000      	movs	r0, #0
 801b058:	f7e5 f916 	bl	8000288 <__aeabi_dsub>
 801b05c:	4652      	mov	r2, sl
 801b05e:	465b      	mov	r3, fp
 801b060:	f7e5 fd3c 	bl	8000adc <__aeabi_dcmplt>
 801b064:	2800      	cmp	r0, #0
 801b066:	f040 80b5 	bne.w	801b1d4 <_dtoa_r+0x6c4>
 801b06a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b06c:	429d      	cmp	r5, r3
 801b06e:	d081      	beq.n	801af74 <_dtoa_r+0x464>
 801b070:	4b30      	ldr	r3, [pc, #192]	; (801b134 <_dtoa_r+0x624>)
 801b072:	2200      	movs	r2, #0
 801b074:	4650      	mov	r0, sl
 801b076:	4659      	mov	r1, fp
 801b078:	f7e5 fabe 	bl	80005f8 <__aeabi_dmul>
 801b07c:	4b2d      	ldr	r3, [pc, #180]	; (801b134 <_dtoa_r+0x624>)
 801b07e:	4682      	mov	sl, r0
 801b080:	468b      	mov	fp, r1
 801b082:	4640      	mov	r0, r8
 801b084:	4649      	mov	r1, r9
 801b086:	2200      	movs	r2, #0
 801b088:	f7e5 fab6 	bl	80005f8 <__aeabi_dmul>
 801b08c:	4680      	mov	r8, r0
 801b08e:	4689      	mov	r9, r1
 801b090:	e7c6      	b.n	801b020 <_dtoa_r+0x510>
 801b092:	4650      	mov	r0, sl
 801b094:	4659      	mov	r1, fp
 801b096:	f7e5 faaf 	bl	80005f8 <__aeabi_dmul>
 801b09a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b09c:	9d01      	ldr	r5, [sp, #4]
 801b09e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b0a0:	4682      	mov	sl, r0
 801b0a2:	468b      	mov	fp, r1
 801b0a4:	4649      	mov	r1, r9
 801b0a6:	4640      	mov	r0, r8
 801b0a8:	f7e5 fd56 	bl	8000b58 <__aeabi_d2iz>
 801b0ac:	4606      	mov	r6, r0
 801b0ae:	f7e5 fa39 	bl	8000524 <__aeabi_i2d>
 801b0b2:	3630      	adds	r6, #48	; 0x30
 801b0b4:	4602      	mov	r2, r0
 801b0b6:	460b      	mov	r3, r1
 801b0b8:	4640      	mov	r0, r8
 801b0ba:	4649      	mov	r1, r9
 801b0bc:	f7e5 f8e4 	bl	8000288 <__aeabi_dsub>
 801b0c0:	f805 6b01 	strb.w	r6, [r5], #1
 801b0c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b0c6:	429d      	cmp	r5, r3
 801b0c8:	4680      	mov	r8, r0
 801b0ca:	4689      	mov	r9, r1
 801b0cc:	f04f 0200 	mov.w	r2, #0
 801b0d0:	d124      	bne.n	801b11c <_dtoa_r+0x60c>
 801b0d2:	4b1b      	ldr	r3, [pc, #108]	; (801b140 <_dtoa_r+0x630>)
 801b0d4:	4650      	mov	r0, sl
 801b0d6:	4659      	mov	r1, fp
 801b0d8:	f7e5 f8d8 	bl	800028c <__adddf3>
 801b0dc:	4602      	mov	r2, r0
 801b0de:	460b      	mov	r3, r1
 801b0e0:	4640      	mov	r0, r8
 801b0e2:	4649      	mov	r1, r9
 801b0e4:	f7e5 fd18 	bl	8000b18 <__aeabi_dcmpgt>
 801b0e8:	2800      	cmp	r0, #0
 801b0ea:	d173      	bne.n	801b1d4 <_dtoa_r+0x6c4>
 801b0ec:	4652      	mov	r2, sl
 801b0ee:	465b      	mov	r3, fp
 801b0f0:	4913      	ldr	r1, [pc, #76]	; (801b140 <_dtoa_r+0x630>)
 801b0f2:	2000      	movs	r0, #0
 801b0f4:	f7e5 f8c8 	bl	8000288 <__aeabi_dsub>
 801b0f8:	4602      	mov	r2, r0
 801b0fa:	460b      	mov	r3, r1
 801b0fc:	4640      	mov	r0, r8
 801b0fe:	4649      	mov	r1, r9
 801b100:	f7e5 fcec 	bl	8000adc <__aeabi_dcmplt>
 801b104:	2800      	cmp	r0, #0
 801b106:	f43f af35 	beq.w	801af74 <_dtoa_r+0x464>
 801b10a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801b10c:	1e6b      	subs	r3, r5, #1
 801b10e:	930f      	str	r3, [sp, #60]	; 0x3c
 801b110:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801b114:	2b30      	cmp	r3, #48	; 0x30
 801b116:	d0f8      	beq.n	801b10a <_dtoa_r+0x5fa>
 801b118:	9700      	str	r7, [sp, #0]
 801b11a:	e049      	b.n	801b1b0 <_dtoa_r+0x6a0>
 801b11c:	4b05      	ldr	r3, [pc, #20]	; (801b134 <_dtoa_r+0x624>)
 801b11e:	f7e5 fa6b 	bl	80005f8 <__aeabi_dmul>
 801b122:	4680      	mov	r8, r0
 801b124:	4689      	mov	r9, r1
 801b126:	e7bd      	b.n	801b0a4 <_dtoa_r+0x594>
 801b128:	0801cea0 	.word	0x0801cea0
 801b12c:	0801ce78 	.word	0x0801ce78
 801b130:	3ff00000 	.word	0x3ff00000
 801b134:	40240000 	.word	0x40240000
 801b138:	401c0000 	.word	0x401c0000
 801b13c:	40140000 	.word	0x40140000
 801b140:	3fe00000 	.word	0x3fe00000
 801b144:	9d01      	ldr	r5, [sp, #4]
 801b146:	4656      	mov	r6, sl
 801b148:	465f      	mov	r7, fp
 801b14a:	4642      	mov	r2, r8
 801b14c:	464b      	mov	r3, r9
 801b14e:	4630      	mov	r0, r6
 801b150:	4639      	mov	r1, r7
 801b152:	f7e5 fb7b 	bl	800084c <__aeabi_ddiv>
 801b156:	f7e5 fcff 	bl	8000b58 <__aeabi_d2iz>
 801b15a:	4682      	mov	sl, r0
 801b15c:	f7e5 f9e2 	bl	8000524 <__aeabi_i2d>
 801b160:	4642      	mov	r2, r8
 801b162:	464b      	mov	r3, r9
 801b164:	f7e5 fa48 	bl	80005f8 <__aeabi_dmul>
 801b168:	4602      	mov	r2, r0
 801b16a:	460b      	mov	r3, r1
 801b16c:	4630      	mov	r0, r6
 801b16e:	4639      	mov	r1, r7
 801b170:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801b174:	f7e5 f888 	bl	8000288 <__aeabi_dsub>
 801b178:	f805 6b01 	strb.w	r6, [r5], #1
 801b17c:	9e01      	ldr	r6, [sp, #4]
 801b17e:	9f03      	ldr	r7, [sp, #12]
 801b180:	1bae      	subs	r6, r5, r6
 801b182:	42b7      	cmp	r7, r6
 801b184:	4602      	mov	r2, r0
 801b186:	460b      	mov	r3, r1
 801b188:	d135      	bne.n	801b1f6 <_dtoa_r+0x6e6>
 801b18a:	f7e5 f87f 	bl	800028c <__adddf3>
 801b18e:	4642      	mov	r2, r8
 801b190:	464b      	mov	r3, r9
 801b192:	4606      	mov	r6, r0
 801b194:	460f      	mov	r7, r1
 801b196:	f7e5 fcbf 	bl	8000b18 <__aeabi_dcmpgt>
 801b19a:	b9d0      	cbnz	r0, 801b1d2 <_dtoa_r+0x6c2>
 801b19c:	4642      	mov	r2, r8
 801b19e:	464b      	mov	r3, r9
 801b1a0:	4630      	mov	r0, r6
 801b1a2:	4639      	mov	r1, r7
 801b1a4:	f7e5 fc90 	bl	8000ac8 <__aeabi_dcmpeq>
 801b1a8:	b110      	cbz	r0, 801b1b0 <_dtoa_r+0x6a0>
 801b1aa:	f01a 0f01 	tst.w	sl, #1
 801b1ae:	d110      	bne.n	801b1d2 <_dtoa_r+0x6c2>
 801b1b0:	4620      	mov	r0, r4
 801b1b2:	ee18 1a10 	vmov	r1, s16
 801b1b6:	f000 fbbd 	bl	801b934 <_Bfree>
 801b1ba:	2300      	movs	r3, #0
 801b1bc:	9800      	ldr	r0, [sp, #0]
 801b1be:	702b      	strb	r3, [r5, #0]
 801b1c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b1c2:	3001      	adds	r0, #1
 801b1c4:	6018      	str	r0, [r3, #0]
 801b1c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	f43f acf1 	beq.w	801abb0 <_dtoa_r+0xa0>
 801b1ce:	601d      	str	r5, [r3, #0]
 801b1d0:	e4ee      	b.n	801abb0 <_dtoa_r+0xa0>
 801b1d2:	9f00      	ldr	r7, [sp, #0]
 801b1d4:	462b      	mov	r3, r5
 801b1d6:	461d      	mov	r5, r3
 801b1d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b1dc:	2a39      	cmp	r2, #57	; 0x39
 801b1de:	d106      	bne.n	801b1ee <_dtoa_r+0x6de>
 801b1e0:	9a01      	ldr	r2, [sp, #4]
 801b1e2:	429a      	cmp	r2, r3
 801b1e4:	d1f7      	bne.n	801b1d6 <_dtoa_r+0x6c6>
 801b1e6:	9901      	ldr	r1, [sp, #4]
 801b1e8:	2230      	movs	r2, #48	; 0x30
 801b1ea:	3701      	adds	r7, #1
 801b1ec:	700a      	strb	r2, [r1, #0]
 801b1ee:	781a      	ldrb	r2, [r3, #0]
 801b1f0:	3201      	adds	r2, #1
 801b1f2:	701a      	strb	r2, [r3, #0]
 801b1f4:	e790      	b.n	801b118 <_dtoa_r+0x608>
 801b1f6:	4ba6      	ldr	r3, [pc, #664]	; (801b490 <_dtoa_r+0x980>)
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	f7e5 f9fd 	bl	80005f8 <__aeabi_dmul>
 801b1fe:	2200      	movs	r2, #0
 801b200:	2300      	movs	r3, #0
 801b202:	4606      	mov	r6, r0
 801b204:	460f      	mov	r7, r1
 801b206:	f7e5 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 801b20a:	2800      	cmp	r0, #0
 801b20c:	d09d      	beq.n	801b14a <_dtoa_r+0x63a>
 801b20e:	e7cf      	b.n	801b1b0 <_dtoa_r+0x6a0>
 801b210:	9a08      	ldr	r2, [sp, #32]
 801b212:	2a00      	cmp	r2, #0
 801b214:	f000 80d7 	beq.w	801b3c6 <_dtoa_r+0x8b6>
 801b218:	9a06      	ldr	r2, [sp, #24]
 801b21a:	2a01      	cmp	r2, #1
 801b21c:	f300 80ba 	bgt.w	801b394 <_dtoa_r+0x884>
 801b220:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b222:	2a00      	cmp	r2, #0
 801b224:	f000 80b2 	beq.w	801b38c <_dtoa_r+0x87c>
 801b228:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801b22c:	9e07      	ldr	r6, [sp, #28]
 801b22e:	9d04      	ldr	r5, [sp, #16]
 801b230:	9a04      	ldr	r2, [sp, #16]
 801b232:	441a      	add	r2, r3
 801b234:	9204      	str	r2, [sp, #16]
 801b236:	9a05      	ldr	r2, [sp, #20]
 801b238:	2101      	movs	r1, #1
 801b23a:	441a      	add	r2, r3
 801b23c:	4620      	mov	r0, r4
 801b23e:	9205      	str	r2, [sp, #20]
 801b240:	f000 fc30 	bl	801baa4 <__i2b>
 801b244:	4607      	mov	r7, r0
 801b246:	2d00      	cmp	r5, #0
 801b248:	dd0c      	ble.n	801b264 <_dtoa_r+0x754>
 801b24a:	9b05      	ldr	r3, [sp, #20]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	dd09      	ble.n	801b264 <_dtoa_r+0x754>
 801b250:	42ab      	cmp	r3, r5
 801b252:	9a04      	ldr	r2, [sp, #16]
 801b254:	bfa8      	it	ge
 801b256:	462b      	movge	r3, r5
 801b258:	1ad2      	subs	r2, r2, r3
 801b25a:	9204      	str	r2, [sp, #16]
 801b25c:	9a05      	ldr	r2, [sp, #20]
 801b25e:	1aed      	subs	r5, r5, r3
 801b260:	1ad3      	subs	r3, r2, r3
 801b262:	9305      	str	r3, [sp, #20]
 801b264:	9b07      	ldr	r3, [sp, #28]
 801b266:	b31b      	cbz	r3, 801b2b0 <_dtoa_r+0x7a0>
 801b268:	9b08      	ldr	r3, [sp, #32]
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	f000 80af 	beq.w	801b3ce <_dtoa_r+0x8be>
 801b270:	2e00      	cmp	r6, #0
 801b272:	dd13      	ble.n	801b29c <_dtoa_r+0x78c>
 801b274:	4639      	mov	r1, r7
 801b276:	4632      	mov	r2, r6
 801b278:	4620      	mov	r0, r4
 801b27a:	f000 fcd3 	bl	801bc24 <__pow5mult>
 801b27e:	ee18 2a10 	vmov	r2, s16
 801b282:	4601      	mov	r1, r0
 801b284:	4607      	mov	r7, r0
 801b286:	4620      	mov	r0, r4
 801b288:	f000 fc22 	bl	801bad0 <__multiply>
 801b28c:	ee18 1a10 	vmov	r1, s16
 801b290:	4680      	mov	r8, r0
 801b292:	4620      	mov	r0, r4
 801b294:	f000 fb4e 	bl	801b934 <_Bfree>
 801b298:	ee08 8a10 	vmov	s16, r8
 801b29c:	9b07      	ldr	r3, [sp, #28]
 801b29e:	1b9a      	subs	r2, r3, r6
 801b2a0:	d006      	beq.n	801b2b0 <_dtoa_r+0x7a0>
 801b2a2:	ee18 1a10 	vmov	r1, s16
 801b2a6:	4620      	mov	r0, r4
 801b2a8:	f000 fcbc 	bl	801bc24 <__pow5mult>
 801b2ac:	ee08 0a10 	vmov	s16, r0
 801b2b0:	2101      	movs	r1, #1
 801b2b2:	4620      	mov	r0, r4
 801b2b4:	f000 fbf6 	bl	801baa4 <__i2b>
 801b2b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	4606      	mov	r6, r0
 801b2be:	f340 8088 	ble.w	801b3d2 <_dtoa_r+0x8c2>
 801b2c2:	461a      	mov	r2, r3
 801b2c4:	4601      	mov	r1, r0
 801b2c6:	4620      	mov	r0, r4
 801b2c8:	f000 fcac 	bl	801bc24 <__pow5mult>
 801b2cc:	9b06      	ldr	r3, [sp, #24]
 801b2ce:	2b01      	cmp	r3, #1
 801b2d0:	4606      	mov	r6, r0
 801b2d2:	f340 8081 	ble.w	801b3d8 <_dtoa_r+0x8c8>
 801b2d6:	f04f 0800 	mov.w	r8, #0
 801b2da:	6933      	ldr	r3, [r6, #16]
 801b2dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801b2e0:	6918      	ldr	r0, [r3, #16]
 801b2e2:	f000 fb8f 	bl	801ba04 <__hi0bits>
 801b2e6:	f1c0 0020 	rsb	r0, r0, #32
 801b2ea:	9b05      	ldr	r3, [sp, #20]
 801b2ec:	4418      	add	r0, r3
 801b2ee:	f010 001f 	ands.w	r0, r0, #31
 801b2f2:	f000 8092 	beq.w	801b41a <_dtoa_r+0x90a>
 801b2f6:	f1c0 0320 	rsb	r3, r0, #32
 801b2fa:	2b04      	cmp	r3, #4
 801b2fc:	f340 808a 	ble.w	801b414 <_dtoa_r+0x904>
 801b300:	f1c0 001c 	rsb	r0, r0, #28
 801b304:	9b04      	ldr	r3, [sp, #16]
 801b306:	4403      	add	r3, r0
 801b308:	9304      	str	r3, [sp, #16]
 801b30a:	9b05      	ldr	r3, [sp, #20]
 801b30c:	4403      	add	r3, r0
 801b30e:	4405      	add	r5, r0
 801b310:	9305      	str	r3, [sp, #20]
 801b312:	9b04      	ldr	r3, [sp, #16]
 801b314:	2b00      	cmp	r3, #0
 801b316:	dd07      	ble.n	801b328 <_dtoa_r+0x818>
 801b318:	ee18 1a10 	vmov	r1, s16
 801b31c:	461a      	mov	r2, r3
 801b31e:	4620      	mov	r0, r4
 801b320:	f000 fcda 	bl	801bcd8 <__lshift>
 801b324:	ee08 0a10 	vmov	s16, r0
 801b328:	9b05      	ldr	r3, [sp, #20]
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	dd05      	ble.n	801b33a <_dtoa_r+0x82a>
 801b32e:	4631      	mov	r1, r6
 801b330:	461a      	mov	r2, r3
 801b332:	4620      	mov	r0, r4
 801b334:	f000 fcd0 	bl	801bcd8 <__lshift>
 801b338:	4606      	mov	r6, r0
 801b33a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b33c:	2b00      	cmp	r3, #0
 801b33e:	d06e      	beq.n	801b41e <_dtoa_r+0x90e>
 801b340:	ee18 0a10 	vmov	r0, s16
 801b344:	4631      	mov	r1, r6
 801b346:	f000 fd37 	bl	801bdb8 <__mcmp>
 801b34a:	2800      	cmp	r0, #0
 801b34c:	da67      	bge.n	801b41e <_dtoa_r+0x90e>
 801b34e:	9b00      	ldr	r3, [sp, #0]
 801b350:	3b01      	subs	r3, #1
 801b352:	ee18 1a10 	vmov	r1, s16
 801b356:	9300      	str	r3, [sp, #0]
 801b358:	220a      	movs	r2, #10
 801b35a:	2300      	movs	r3, #0
 801b35c:	4620      	mov	r0, r4
 801b35e:	f000 fb0b 	bl	801b978 <__multadd>
 801b362:	9b08      	ldr	r3, [sp, #32]
 801b364:	ee08 0a10 	vmov	s16, r0
 801b368:	2b00      	cmp	r3, #0
 801b36a:	f000 81b1 	beq.w	801b6d0 <_dtoa_r+0xbc0>
 801b36e:	2300      	movs	r3, #0
 801b370:	4639      	mov	r1, r7
 801b372:	220a      	movs	r2, #10
 801b374:	4620      	mov	r0, r4
 801b376:	f000 faff 	bl	801b978 <__multadd>
 801b37a:	9b02      	ldr	r3, [sp, #8]
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	4607      	mov	r7, r0
 801b380:	f300 808e 	bgt.w	801b4a0 <_dtoa_r+0x990>
 801b384:	9b06      	ldr	r3, [sp, #24]
 801b386:	2b02      	cmp	r3, #2
 801b388:	dc51      	bgt.n	801b42e <_dtoa_r+0x91e>
 801b38a:	e089      	b.n	801b4a0 <_dtoa_r+0x990>
 801b38c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b38e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801b392:	e74b      	b.n	801b22c <_dtoa_r+0x71c>
 801b394:	9b03      	ldr	r3, [sp, #12]
 801b396:	1e5e      	subs	r6, r3, #1
 801b398:	9b07      	ldr	r3, [sp, #28]
 801b39a:	42b3      	cmp	r3, r6
 801b39c:	bfbf      	itttt	lt
 801b39e:	9b07      	ldrlt	r3, [sp, #28]
 801b3a0:	9607      	strlt	r6, [sp, #28]
 801b3a2:	1af2      	sublt	r2, r6, r3
 801b3a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801b3a6:	bfb6      	itet	lt
 801b3a8:	189b      	addlt	r3, r3, r2
 801b3aa:	1b9e      	subge	r6, r3, r6
 801b3ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 801b3ae:	9b03      	ldr	r3, [sp, #12]
 801b3b0:	bfb8      	it	lt
 801b3b2:	2600      	movlt	r6, #0
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	bfb7      	itett	lt
 801b3b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 801b3bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 801b3c0:	1a9d      	sublt	r5, r3, r2
 801b3c2:	2300      	movlt	r3, #0
 801b3c4:	e734      	b.n	801b230 <_dtoa_r+0x720>
 801b3c6:	9e07      	ldr	r6, [sp, #28]
 801b3c8:	9d04      	ldr	r5, [sp, #16]
 801b3ca:	9f08      	ldr	r7, [sp, #32]
 801b3cc:	e73b      	b.n	801b246 <_dtoa_r+0x736>
 801b3ce:	9a07      	ldr	r2, [sp, #28]
 801b3d0:	e767      	b.n	801b2a2 <_dtoa_r+0x792>
 801b3d2:	9b06      	ldr	r3, [sp, #24]
 801b3d4:	2b01      	cmp	r3, #1
 801b3d6:	dc18      	bgt.n	801b40a <_dtoa_r+0x8fa>
 801b3d8:	f1ba 0f00 	cmp.w	sl, #0
 801b3dc:	d115      	bne.n	801b40a <_dtoa_r+0x8fa>
 801b3de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801b3e2:	b993      	cbnz	r3, 801b40a <_dtoa_r+0x8fa>
 801b3e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b3e8:	0d1b      	lsrs	r3, r3, #20
 801b3ea:	051b      	lsls	r3, r3, #20
 801b3ec:	b183      	cbz	r3, 801b410 <_dtoa_r+0x900>
 801b3ee:	9b04      	ldr	r3, [sp, #16]
 801b3f0:	3301      	adds	r3, #1
 801b3f2:	9304      	str	r3, [sp, #16]
 801b3f4:	9b05      	ldr	r3, [sp, #20]
 801b3f6:	3301      	adds	r3, #1
 801b3f8:	9305      	str	r3, [sp, #20]
 801b3fa:	f04f 0801 	mov.w	r8, #1
 801b3fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b400:	2b00      	cmp	r3, #0
 801b402:	f47f af6a 	bne.w	801b2da <_dtoa_r+0x7ca>
 801b406:	2001      	movs	r0, #1
 801b408:	e76f      	b.n	801b2ea <_dtoa_r+0x7da>
 801b40a:	f04f 0800 	mov.w	r8, #0
 801b40e:	e7f6      	b.n	801b3fe <_dtoa_r+0x8ee>
 801b410:	4698      	mov	r8, r3
 801b412:	e7f4      	b.n	801b3fe <_dtoa_r+0x8ee>
 801b414:	f43f af7d 	beq.w	801b312 <_dtoa_r+0x802>
 801b418:	4618      	mov	r0, r3
 801b41a:	301c      	adds	r0, #28
 801b41c:	e772      	b.n	801b304 <_dtoa_r+0x7f4>
 801b41e:	9b03      	ldr	r3, [sp, #12]
 801b420:	2b00      	cmp	r3, #0
 801b422:	dc37      	bgt.n	801b494 <_dtoa_r+0x984>
 801b424:	9b06      	ldr	r3, [sp, #24]
 801b426:	2b02      	cmp	r3, #2
 801b428:	dd34      	ble.n	801b494 <_dtoa_r+0x984>
 801b42a:	9b03      	ldr	r3, [sp, #12]
 801b42c:	9302      	str	r3, [sp, #8]
 801b42e:	9b02      	ldr	r3, [sp, #8]
 801b430:	b96b      	cbnz	r3, 801b44e <_dtoa_r+0x93e>
 801b432:	4631      	mov	r1, r6
 801b434:	2205      	movs	r2, #5
 801b436:	4620      	mov	r0, r4
 801b438:	f000 fa9e 	bl	801b978 <__multadd>
 801b43c:	4601      	mov	r1, r0
 801b43e:	4606      	mov	r6, r0
 801b440:	ee18 0a10 	vmov	r0, s16
 801b444:	f000 fcb8 	bl	801bdb8 <__mcmp>
 801b448:	2800      	cmp	r0, #0
 801b44a:	f73f adbb 	bgt.w	801afc4 <_dtoa_r+0x4b4>
 801b44e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b450:	9d01      	ldr	r5, [sp, #4]
 801b452:	43db      	mvns	r3, r3
 801b454:	9300      	str	r3, [sp, #0]
 801b456:	f04f 0800 	mov.w	r8, #0
 801b45a:	4631      	mov	r1, r6
 801b45c:	4620      	mov	r0, r4
 801b45e:	f000 fa69 	bl	801b934 <_Bfree>
 801b462:	2f00      	cmp	r7, #0
 801b464:	f43f aea4 	beq.w	801b1b0 <_dtoa_r+0x6a0>
 801b468:	f1b8 0f00 	cmp.w	r8, #0
 801b46c:	d005      	beq.n	801b47a <_dtoa_r+0x96a>
 801b46e:	45b8      	cmp	r8, r7
 801b470:	d003      	beq.n	801b47a <_dtoa_r+0x96a>
 801b472:	4641      	mov	r1, r8
 801b474:	4620      	mov	r0, r4
 801b476:	f000 fa5d 	bl	801b934 <_Bfree>
 801b47a:	4639      	mov	r1, r7
 801b47c:	4620      	mov	r0, r4
 801b47e:	f000 fa59 	bl	801b934 <_Bfree>
 801b482:	e695      	b.n	801b1b0 <_dtoa_r+0x6a0>
 801b484:	2600      	movs	r6, #0
 801b486:	4637      	mov	r7, r6
 801b488:	e7e1      	b.n	801b44e <_dtoa_r+0x93e>
 801b48a:	9700      	str	r7, [sp, #0]
 801b48c:	4637      	mov	r7, r6
 801b48e:	e599      	b.n	801afc4 <_dtoa_r+0x4b4>
 801b490:	40240000 	.word	0x40240000
 801b494:	9b08      	ldr	r3, [sp, #32]
 801b496:	2b00      	cmp	r3, #0
 801b498:	f000 80ca 	beq.w	801b630 <_dtoa_r+0xb20>
 801b49c:	9b03      	ldr	r3, [sp, #12]
 801b49e:	9302      	str	r3, [sp, #8]
 801b4a0:	2d00      	cmp	r5, #0
 801b4a2:	dd05      	ble.n	801b4b0 <_dtoa_r+0x9a0>
 801b4a4:	4639      	mov	r1, r7
 801b4a6:	462a      	mov	r2, r5
 801b4a8:	4620      	mov	r0, r4
 801b4aa:	f000 fc15 	bl	801bcd8 <__lshift>
 801b4ae:	4607      	mov	r7, r0
 801b4b0:	f1b8 0f00 	cmp.w	r8, #0
 801b4b4:	d05b      	beq.n	801b56e <_dtoa_r+0xa5e>
 801b4b6:	6879      	ldr	r1, [r7, #4]
 801b4b8:	4620      	mov	r0, r4
 801b4ba:	f000 f9fb 	bl	801b8b4 <_Balloc>
 801b4be:	4605      	mov	r5, r0
 801b4c0:	b928      	cbnz	r0, 801b4ce <_dtoa_r+0x9be>
 801b4c2:	4b87      	ldr	r3, [pc, #540]	; (801b6e0 <_dtoa_r+0xbd0>)
 801b4c4:	4602      	mov	r2, r0
 801b4c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 801b4ca:	f7ff bb3b 	b.w	801ab44 <_dtoa_r+0x34>
 801b4ce:	693a      	ldr	r2, [r7, #16]
 801b4d0:	3202      	adds	r2, #2
 801b4d2:	0092      	lsls	r2, r2, #2
 801b4d4:	f107 010c 	add.w	r1, r7, #12
 801b4d8:	300c      	adds	r0, #12
 801b4da:	f7fe fba7 	bl	8019c2c <memcpy>
 801b4de:	2201      	movs	r2, #1
 801b4e0:	4629      	mov	r1, r5
 801b4e2:	4620      	mov	r0, r4
 801b4e4:	f000 fbf8 	bl	801bcd8 <__lshift>
 801b4e8:	9b01      	ldr	r3, [sp, #4]
 801b4ea:	f103 0901 	add.w	r9, r3, #1
 801b4ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801b4f2:	4413      	add	r3, r2
 801b4f4:	9305      	str	r3, [sp, #20]
 801b4f6:	f00a 0301 	and.w	r3, sl, #1
 801b4fa:	46b8      	mov	r8, r7
 801b4fc:	9304      	str	r3, [sp, #16]
 801b4fe:	4607      	mov	r7, r0
 801b500:	4631      	mov	r1, r6
 801b502:	ee18 0a10 	vmov	r0, s16
 801b506:	f7ff fa77 	bl	801a9f8 <quorem>
 801b50a:	4641      	mov	r1, r8
 801b50c:	9002      	str	r0, [sp, #8]
 801b50e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b512:	ee18 0a10 	vmov	r0, s16
 801b516:	f000 fc4f 	bl	801bdb8 <__mcmp>
 801b51a:	463a      	mov	r2, r7
 801b51c:	9003      	str	r0, [sp, #12]
 801b51e:	4631      	mov	r1, r6
 801b520:	4620      	mov	r0, r4
 801b522:	f000 fc65 	bl	801bdf0 <__mdiff>
 801b526:	68c2      	ldr	r2, [r0, #12]
 801b528:	f109 3bff 	add.w	fp, r9, #4294967295
 801b52c:	4605      	mov	r5, r0
 801b52e:	bb02      	cbnz	r2, 801b572 <_dtoa_r+0xa62>
 801b530:	4601      	mov	r1, r0
 801b532:	ee18 0a10 	vmov	r0, s16
 801b536:	f000 fc3f 	bl	801bdb8 <__mcmp>
 801b53a:	4602      	mov	r2, r0
 801b53c:	4629      	mov	r1, r5
 801b53e:	4620      	mov	r0, r4
 801b540:	9207      	str	r2, [sp, #28]
 801b542:	f000 f9f7 	bl	801b934 <_Bfree>
 801b546:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b54a:	ea43 0102 	orr.w	r1, r3, r2
 801b54e:	9b04      	ldr	r3, [sp, #16]
 801b550:	430b      	orrs	r3, r1
 801b552:	464d      	mov	r5, r9
 801b554:	d10f      	bne.n	801b576 <_dtoa_r+0xa66>
 801b556:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b55a:	d02a      	beq.n	801b5b2 <_dtoa_r+0xaa2>
 801b55c:	9b03      	ldr	r3, [sp, #12]
 801b55e:	2b00      	cmp	r3, #0
 801b560:	dd02      	ble.n	801b568 <_dtoa_r+0xa58>
 801b562:	9b02      	ldr	r3, [sp, #8]
 801b564:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 801b568:	f88b a000 	strb.w	sl, [fp]
 801b56c:	e775      	b.n	801b45a <_dtoa_r+0x94a>
 801b56e:	4638      	mov	r0, r7
 801b570:	e7ba      	b.n	801b4e8 <_dtoa_r+0x9d8>
 801b572:	2201      	movs	r2, #1
 801b574:	e7e2      	b.n	801b53c <_dtoa_r+0xa2c>
 801b576:	9b03      	ldr	r3, [sp, #12]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	db04      	blt.n	801b586 <_dtoa_r+0xa76>
 801b57c:	9906      	ldr	r1, [sp, #24]
 801b57e:	430b      	orrs	r3, r1
 801b580:	9904      	ldr	r1, [sp, #16]
 801b582:	430b      	orrs	r3, r1
 801b584:	d122      	bne.n	801b5cc <_dtoa_r+0xabc>
 801b586:	2a00      	cmp	r2, #0
 801b588:	ddee      	ble.n	801b568 <_dtoa_r+0xa58>
 801b58a:	ee18 1a10 	vmov	r1, s16
 801b58e:	2201      	movs	r2, #1
 801b590:	4620      	mov	r0, r4
 801b592:	f000 fba1 	bl	801bcd8 <__lshift>
 801b596:	4631      	mov	r1, r6
 801b598:	ee08 0a10 	vmov	s16, r0
 801b59c:	f000 fc0c 	bl	801bdb8 <__mcmp>
 801b5a0:	2800      	cmp	r0, #0
 801b5a2:	dc03      	bgt.n	801b5ac <_dtoa_r+0xa9c>
 801b5a4:	d1e0      	bne.n	801b568 <_dtoa_r+0xa58>
 801b5a6:	f01a 0f01 	tst.w	sl, #1
 801b5aa:	d0dd      	beq.n	801b568 <_dtoa_r+0xa58>
 801b5ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b5b0:	d1d7      	bne.n	801b562 <_dtoa_r+0xa52>
 801b5b2:	2339      	movs	r3, #57	; 0x39
 801b5b4:	f88b 3000 	strb.w	r3, [fp]
 801b5b8:	462b      	mov	r3, r5
 801b5ba:	461d      	mov	r5, r3
 801b5bc:	3b01      	subs	r3, #1
 801b5be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801b5c2:	2a39      	cmp	r2, #57	; 0x39
 801b5c4:	d071      	beq.n	801b6aa <_dtoa_r+0xb9a>
 801b5c6:	3201      	adds	r2, #1
 801b5c8:	701a      	strb	r2, [r3, #0]
 801b5ca:	e746      	b.n	801b45a <_dtoa_r+0x94a>
 801b5cc:	2a00      	cmp	r2, #0
 801b5ce:	dd07      	ble.n	801b5e0 <_dtoa_r+0xad0>
 801b5d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801b5d4:	d0ed      	beq.n	801b5b2 <_dtoa_r+0xaa2>
 801b5d6:	f10a 0301 	add.w	r3, sl, #1
 801b5da:	f88b 3000 	strb.w	r3, [fp]
 801b5de:	e73c      	b.n	801b45a <_dtoa_r+0x94a>
 801b5e0:	9b05      	ldr	r3, [sp, #20]
 801b5e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 801b5e6:	4599      	cmp	r9, r3
 801b5e8:	d047      	beq.n	801b67a <_dtoa_r+0xb6a>
 801b5ea:	ee18 1a10 	vmov	r1, s16
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	220a      	movs	r2, #10
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	f000 f9c0 	bl	801b978 <__multadd>
 801b5f8:	45b8      	cmp	r8, r7
 801b5fa:	ee08 0a10 	vmov	s16, r0
 801b5fe:	f04f 0300 	mov.w	r3, #0
 801b602:	f04f 020a 	mov.w	r2, #10
 801b606:	4641      	mov	r1, r8
 801b608:	4620      	mov	r0, r4
 801b60a:	d106      	bne.n	801b61a <_dtoa_r+0xb0a>
 801b60c:	f000 f9b4 	bl	801b978 <__multadd>
 801b610:	4680      	mov	r8, r0
 801b612:	4607      	mov	r7, r0
 801b614:	f109 0901 	add.w	r9, r9, #1
 801b618:	e772      	b.n	801b500 <_dtoa_r+0x9f0>
 801b61a:	f000 f9ad 	bl	801b978 <__multadd>
 801b61e:	4639      	mov	r1, r7
 801b620:	4680      	mov	r8, r0
 801b622:	2300      	movs	r3, #0
 801b624:	220a      	movs	r2, #10
 801b626:	4620      	mov	r0, r4
 801b628:	f000 f9a6 	bl	801b978 <__multadd>
 801b62c:	4607      	mov	r7, r0
 801b62e:	e7f1      	b.n	801b614 <_dtoa_r+0xb04>
 801b630:	9b03      	ldr	r3, [sp, #12]
 801b632:	9302      	str	r3, [sp, #8]
 801b634:	9d01      	ldr	r5, [sp, #4]
 801b636:	ee18 0a10 	vmov	r0, s16
 801b63a:	4631      	mov	r1, r6
 801b63c:	f7ff f9dc 	bl	801a9f8 <quorem>
 801b640:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801b644:	9b01      	ldr	r3, [sp, #4]
 801b646:	f805 ab01 	strb.w	sl, [r5], #1
 801b64a:	1aea      	subs	r2, r5, r3
 801b64c:	9b02      	ldr	r3, [sp, #8]
 801b64e:	4293      	cmp	r3, r2
 801b650:	dd09      	ble.n	801b666 <_dtoa_r+0xb56>
 801b652:	ee18 1a10 	vmov	r1, s16
 801b656:	2300      	movs	r3, #0
 801b658:	220a      	movs	r2, #10
 801b65a:	4620      	mov	r0, r4
 801b65c:	f000 f98c 	bl	801b978 <__multadd>
 801b660:	ee08 0a10 	vmov	s16, r0
 801b664:	e7e7      	b.n	801b636 <_dtoa_r+0xb26>
 801b666:	9b02      	ldr	r3, [sp, #8]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	bfc8      	it	gt
 801b66c:	461d      	movgt	r5, r3
 801b66e:	9b01      	ldr	r3, [sp, #4]
 801b670:	bfd8      	it	le
 801b672:	2501      	movle	r5, #1
 801b674:	441d      	add	r5, r3
 801b676:	f04f 0800 	mov.w	r8, #0
 801b67a:	ee18 1a10 	vmov	r1, s16
 801b67e:	2201      	movs	r2, #1
 801b680:	4620      	mov	r0, r4
 801b682:	f000 fb29 	bl	801bcd8 <__lshift>
 801b686:	4631      	mov	r1, r6
 801b688:	ee08 0a10 	vmov	s16, r0
 801b68c:	f000 fb94 	bl	801bdb8 <__mcmp>
 801b690:	2800      	cmp	r0, #0
 801b692:	dc91      	bgt.n	801b5b8 <_dtoa_r+0xaa8>
 801b694:	d102      	bne.n	801b69c <_dtoa_r+0xb8c>
 801b696:	f01a 0f01 	tst.w	sl, #1
 801b69a:	d18d      	bne.n	801b5b8 <_dtoa_r+0xaa8>
 801b69c:	462b      	mov	r3, r5
 801b69e:	461d      	mov	r5, r3
 801b6a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b6a4:	2a30      	cmp	r2, #48	; 0x30
 801b6a6:	d0fa      	beq.n	801b69e <_dtoa_r+0xb8e>
 801b6a8:	e6d7      	b.n	801b45a <_dtoa_r+0x94a>
 801b6aa:	9a01      	ldr	r2, [sp, #4]
 801b6ac:	429a      	cmp	r2, r3
 801b6ae:	d184      	bne.n	801b5ba <_dtoa_r+0xaaa>
 801b6b0:	9b00      	ldr	r3, [sp, #0]
 801b6b2:	3301      	adds	r3, #1
 801b6b4:	9300      	str	r3, [sp, #0]
 801b6b6:	2331      	movs	r3, #49	; 0x31
 801b6b8:	7013      	strb	r3, [r2, #0]
 801b6ba:	e6ce      	b.n	801b45a <_dtoa_r+0x94a>
 801b6bc:	4b09      	ldr	r3, [pc, #36]	; (801b6e4 <_dtoa_r+0xbd4>)
 801b6be:	f7ff ba95 	b.w	801abec <_dtoa_r+0xdc>
 801b6c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801b6c4:	2b00      	cmp	r3, #0
 801b6c6:	f47f aa6e 	bne.w	801aba6 <_dtoa_r+0x96>
 801b6ca:	4b07      	ldr	r3, [pc, #28]	; (801b6e8 <_dtoa_r+0xbd8>)
 801b6cc:	f7ff ba8e 	b.w	801abec <_dtoa_r+0xdc>
 801b6d0:	9b02      	ldr	r3, [sp, #8]
 801b6d2:	2b00      	cmp	r3, #0
 801b6d4:	dcae      	bgt.n	801b634 <_dtoa_r+0xb24>
 801b6d6:	9b06      	ldr	r3, [sp, #24]
 801b6d8:	2b02      	cmp	r3, #2
 801b6da:	f73f aea8 	bgt.w	801b42e <_dtoa_r+0x91e>
 801b6de:	e7a9      	b.n	801b634 <_dtoa_r+0xb24>
 801b6e0:	0801ce07 	.word	0x0801ce07
 801b6e4:	0801cd64 	.word	0x0801cd64
 801b6e8:	0801cd88 	.word	0x0801cd88

0801b6ec <__sflush_r>:
 801b6ec:	898a      	ldrh	r2, [r1, #12]
 801b6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b6f2:	4605      	mov	r5, r0
 801b6f4:	0710      	lsls	r0, r2, #28
 801b6f6:	460c      	mov	r4, r1
 801b6f8:	d458      	bmi.n	801b7ac <__sflush_r+0xc0>
 801b6fa:	684b      	ldr	r3, [r1, #4]
 801b6fc:	2b00      	cmp	r3, #0
 801b6fe:	dc05      	bgt.n	801b70c <__sflush_r+0x20>
 801b700:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b702:	2b00      	cmp	r3, #0
 801b704:	dc02      	bgt.n	801b70c <__sflush_r+0x20>
 801b706:	2000      	movs	r0, #0
 801b708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b70c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b70e:	2e00      	cmp	r6, #0
 801b710:	d0f9      	beq.n	801b706 <__sflush_r+0x1a>
 801b712:	2300      	movs	r3, #0
 801b714:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b718:	682f      	ldr	r7, [r5, #0]
 801b71a:	602b      	str	r3, [r5, #0]
 801b71c:	d032      	beq.n	801b784 <__sflush_r+0x98>
 801b71e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b720:	89a3      	ldrh	r3, [r4, #12]
 801b722:	075a      	lsls	r2, r3, #29
 801b724:	d505      	bpl.n	801b732 <__sflush_r+0x46>
 801b726:	6863      	ldr	r3, [r4, #4]
 801b728:	1ac0      	subs	r0, r0, r3
 801b72a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b72c:	b10b      	cbz	r3, 801b732 <__sflush_r+0x46>
 801b72e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b730:	1ac0      	subs	r0, r0, r3
 801b732:	2300      	movs	r3, #0
 801b734:	4602      	mov	r2, r0
 801b736:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b738:	6a21      	ldr	r1, [r4, #32]
 801b73a:	4628      	mov	r0, r5
 801b73c:	47b0      	blx	r6
 801b73e:	1c43      	adds	r3, r0, #1
 801b740:	89a3      	ldrh	r3, [r4, #12]
 801b742:	d106      	bne.n	801b752 <__sflush_r+0x66>
 801b744:	6829      	ldr	r1, [r5, #0]
 801b746:	291d      	cmp	r1, #29
 801b748:	d82c      	bhi.n	801b7a4 <__sflush_r+0xb8>
 801b74a:	4a2a      	ldr	r2, [pc, #168]	; (801b7f4 <__sflush_r+0x108>)
 801b74c:	40ca      	lsrs	r2, r1
 801b74e:	07d6      	lsls	r6, r2, #31
 801b750:	d528      	bpl.n	801b7a4 <__sflush_r+0xb8>
 801b752:	2200      	movs	r2, #0
 801b754:	6062      	str	r2, [r4, #4]
 801b756:	04d9      	lsls	r1, r3, #19
 801b758:	6922      	ldr	r2, [r4, #16]
 801b75a:	6022      	str	r2, [r4, #0]
 801b75c:	d504      	bpl.n	801b768 <__sflush_r+0x7c>
 801b75e:	1c42      	adds	r2, r0, #1
 801b760:	d101      	bne.n	801b766 <__sflush_r+0x7a>
 801b762:	682b      	ldr	r3, [r5, #0]
 801b764:	b903      	cbnz	r3, 801b768 <__sflush_r+0x7c>
 801b766:	6560      	str	r0, [r4, #84]	; 0x54
 801b768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b76a:	602f      	str	r7, [r5, #0]
 801b76c:	2900      	cmp	r1, #0
 801b76e:	d0ca      	beq.n	801b706 <__sflush_r+0x1a>
 801b770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b774:	4299      	cmp	r1, r3
 801b776:	d002      	beq.n	801b77e <__sflush_r+0x92>
 801b778:	4628      	mov	r0, r5
 801b77a:	f7fe fa6d 	bl	8019c58 <_free_r>
 801b77e:	2000      	movs	r0, #0
 801b780:	6360      	str	r0, [r4, #52]	; 0x34
 801b782:	e7c1      	b.n	801b708 <__sflush_r+0x1c>
 801b784:	6a21      	ldr	r1, [r4, #32]
 801b786:	2301      	movs	r3, #1
 801b788:	4628      	mov	r0, r5
 801b78a:	47b0      	blx	r6
 801b78c:	1c41      	adds	r1, r0, #1
 801b78e:	d1c7      	bne.n	801b720 <__sflush_r+0x34>
 801b790:	682b      	ldr	r3, [r5, #0]
 801b792:	2b00      	cmp	r3, #0
 801b794:	d0c4      	beq.n	801b720 <__sflush_r+0x34>
 801b796:	2b1d      	cmp	r3, #29
 801b798:	d001      	beq.n	801b79e <__sflush_r+0xb2>
 801b79a:	2b16      	cmp	r3, #22
 801b79c:	d101      	bne.n	801b7a2 <__sflush_r+0xb6>
 801b79e:	602f      	str	r7, [r5, #0]
 801b7a0:	e7b1      	b.n	801b706 <__sflush_r+0x1a>
 801b7a2:	89a3      	ldrh	r3, [r4, #12]
 801b7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b7a8:	81a3      	strh	r3, [r4, #12]
 801b7aa:	e7ad      	b.n	801b708 <__sflush_r+0x1c>
 801b7ac:	690f      	ldr	r7, [r1, #16]
 801b7ae:	2f00      	cmp	r7, #0
 801b7b0:	d0a9      	beq.n	801b706 <__sflush_r+0x1a>
 801b7b2:	0793      	lsls	r3, r2, #30
 801b7b4:	680e      	ldr	r6, [r1, #0]
 801b7b6:	bf08      	it	eq
 801b7b8:	694b      	ldreq	r3, [r1, #20]
 801b7ba:	600f      	str	r7, [r1, #0]
 801b7bc:	bf18      	it	ne
 801b7be:	2300      	movne	r3, #0
 801b7c0:	eba6 0807 	sub.w	r8, r6, r7
 801b7c4:	608b      	str	r3, [r1, #8]
 801b7c6:	f1b8 0f00 	cmp.w	r8, #0
 801b7ca:	dd9c      	ble.n	801b706 <__sflush_r+0x1a>
 801b7cc:	6a21      	ldr	r1, [r4, #32]
 801b7ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b7d0:	4643      	mov	r3, r8
 801b7d2:	463a      	mov	r2, r7
 801b7d4:	4628      	mov	r0, r5
 801b7d6:	47b0      	blx	r6
 801b7d8:	2800      	cmp	r0, #0
 801b7da:	dc06      	bgt.n	801b7ea <__sflush_r+0xfe>
 801b7dc:	89a3      	ldrh	r3, [r4, #12]
 801b7de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b7e2:	81a3      	strh	r3, [r4, #12]
 801b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 801b7e8:	e78e      	b.n	801b708 <__sflush_r+0x1c>
 801b7ea:	4407      	add	r7, r0
 801b7ec:	eba8 0800 	sub.w	r8, r8, r0
 801b7f0:	e7e9      	b.n	801b7c6 <__sflush_r+0xda>
 801b7f2:	bf00      	nop
 801b7f4:	20400001 	.word	0x20400001

0801b7f8 <_fflush_r>:
 801b7f8:	b538      	push	{r3, r4, r5, lr}
 801b7fa:	690b      	ldr	r3, [r1, #16]
 801b7fc:	4605      	mov	r5, r0
 801b7fe:	460c      	mov	r4, r1
 801b800:	b913      	cbnz	r3, 801b808 <_fflush_r+0x10>
 801b802:	2500      	movs	r5, #0
 801b804:	4628      	mov	r0, r5
 801b806:	bd38      	pop	{r3, r4, r5, pc}
 801b808:	b118      	cbz	r0, 801b812 <_fflush_r+0x1a>
 801b80a:	6983      	ldr	r3, [r0, #24]
 801b80c:	b90b      	cbnz	r3, 801b812 <_fflush_r+0x1a>
 801b80e:	f7fe f937 	bl	8019a80 <__sinit>
 801b812:	4b14      	ldr	r3, [pc, #80]	; (801b864 <_fflush_r+0x6c>)
 801b814:	429c      	cmp	r4, r3
 801b816:	d11b      	bne.n	801b850 <_fflush_r+0x58>
 801b818:	686c      	ldr	r4, [r5, #4]
 801b81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b81e:	2b00      	cmp	r3, #0
 801b820:	d0ef      	beq.n	801b802 <_fflush_r+0xa>
 801b822:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b824:	07d0      	lsls	r0, r2, #31
 801b826:	d404      	bmi.n	801b832 <_fflush_r+0x3a>
 801b828:	0599      	lsls	r1, r3, #22
 801b82a:	d402      	bmi.n	801b832 <_fflush_r+0x3a>
 801b82c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b82e:	f7fe f9ea 	bl	8019c06 <__retarget_lock_acquire_recursive>
 801b832:	4628      	mov	r0, r5
 801b834:	4621      	mov	r1, r4
 801b836:	f7ff ff59 	bl	801b6ec <__sflush_r>
 801b83a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b83c:	07da      	lsls	r2, r3, #31
 801b83e:	4605      	mov	r5, r0
 801b840:	d4e0      	bmi.n	801b804 <_fflush_r+0xc>
 801b842:	89a3      	ldrh	r3, [r4, #12]
 801b844:	059b      	lsls	r3, r3, #22
 801b846:	d4dd      	bmi.n	801b804 <_fflush_r+0xc>
 801b848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b84a:	f7fe f9de 	bl	8019c0a <__retarget_lock_release_recursive>
 801b84e:	e7d9      	b.n	801b804 <_fflush_r+0xc>
 801b850:	4b05      	ldr	r3, [pc, #20]	; (801b868 <_fflush_r+0x70>)
 801b852:	429c      	cmp	r4, r3
 801b854:	d101      	bne.n	801b85a <_fflush_r+0x62>
 801b856:	68ac      	ldr	r4, [r5, #8]
 801b858:	e7df      	b.n	801b81a <_fflush_r+0x22>
 801b85a:	4b04      	ldr	r3, [pc, #16]	; (801b86c <_fflush_r+0x74>)
 801b85c:	429c      	cmp	r4, r3
 801b85e:	bf08      	it	eq
 801b860:	68ec      	ldreq	r4, [r5, #12]
 801b862:	e7da      	b.n	801b81a <_fflush_r+0x22>
 801b864:	0801cd10 	.word	0x0801cd10
 801b868:	0801cd30 	.word	0x0801cd30
 801b86c:	0801ccf0 	.word	0x0801ccf0

0801b870 <_localeconv_r>:
 801b870:	4800      	ldr	r0, [pc, #0]	; (801b874 <_localeconv_r+0x4>)
 801b872:	4770      	bx	lr
 801b874:	20000188 	.word	0x20000188

0801b878 <_lseek_r>:
 801b878:	b538      	push	{r3, r4, r5, lr}
 801b87a:	4d07      	ldr	r5, [pc, #28]	; (801b898 <_lseek_r+0x20>)
 801b87c:	4604      	mov	r4, r0
 801b87e:	4608      	mov	r0, r1
 801b880:	4611      	mov	r1, r2
 801b882:	2200      	movs	r2, #0
 801b884:	602a      	str	r2, [r5, #0]
 801b886:	461a      	mov	r2, r3
 801b888:	f7f1 ffe4 	bl	800d854 <_lseek>
 801b88c:	1c43      	adds	r3, r0, #1
 801b88e:	d102      	bne.n	801b896 <_lseek_r+0x1e>
 801b890:	682b      	ldr	r3, [r5, #0]
 801b892:	b103      	cbz	r3, 801b896 <_lseek_r+0x1e>
 801b894:	6023      	str	r3, [r4, #0]
 801b896:	bd38      	pop	{r3, r4, r5, pc}
 801b898:	2000a4f4 	.word	0x2000a4f4

0801b89c <__malloc_lock>:
 801b89c:	4801      	ldr	r0, [pc, #4]	; (801b8a4 <__malloc_lock+0x8>)
 801b89e:	f7fe b9b2 	b.w	8019c06 <__retarget_lock_acquire_recursive>
 801b8a2:	bf00      	nop
 801b8a4:	2000a4e9 	.word	0x2000a4e9

0801b8a8 <__malloc_unlock>:
 801b8a8:	4801      	ldr	r0, [pc, #4]	; (801b8b0 <__malloc_unlock+0x8>)
 801b8aa:	f7fe b9ae 	b.w	8019c0a <__retarget_lock_release_recursive>
 801b8ae:	bf00      	nop
 801b8b0:	2000a4e9 	.word	0x2000a4e9

0801b8b4 <_Balloc>:
 801b8b4:	b570      	push	{r4, r5, r6, lr}
 801b8b6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b8b8:	4604      	mov	r4, r0
 801b8ba:	460d      	mov	r5, r1
 801b8bc:	b976      	cbnz	r6, 801b8dc <_Balloc+0x28>
 801b8be:	2010      	movs	r0, #16
 801b8c0:	f7fe f9a4 	bl	8019c0c <malloc>
 801b8c4:	4602      	mov	r2, r0
 801b8c6:	6260      	str	r0, [r4, #36]	; 0x24
 801b8c8:	b920      	cbnz	r0, 801b8d4 <_Balloc+0x20>
 801b8ca:	4b18      	ldr	r3, [pc, #96]	; (801b92c <_Balloc+0x78>)
 801b8cc:	4818      	ldr	r0, [pc, #96]	; (801b930 <_Balloc+0x7c>)
 801b8ce:	2166      	movs	r1, #102	; 0x66
 801b8d0:	f000 fb9c 	bl	801c00c <__assert_func>
 801b8d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b8d8:	6006      	str	r6, [r0, #0]
 801b8da:	60c6      	str	r6, [r0, #12]
 801b8dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801b8de:	68f3      	ldr	r3, [r6, #12]
 801b8e0:	b183      	cbz	r3, 801b904 <_Balloc+0x50>
 801b8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b8e4:	68db      	ldr	r3, [r3, #12]
 801b8e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b8ea:	b9b8      	cbnz	r0, 801b91c <_Balloc+0x68>
 801b8ec:	2101      	movs	r1, #1
 801b8ee:	fa01 f605 	lsl.w	r6, r1, r5
 801b8f2:	1d72      	adds	r2, r6, #5
 801b8f4:	0092      	lsls	r2, r2, #2
 801b8f6:	4620      	mov	r0, r4
 801b8f8:	f000 fb60 	bl	801bfbc <_calloc_r>
 801b8fc:	b160      	cbz	r0, 801b918 <_Balloc+0x64>
 801b8fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b902:	e00e      	b.n	801b922 <_Balloc+0x6e>
 801b904:	2221      	movs	r2, #33	; 0x21
 801b906:	2104      	movs	r1, #4
 801b908:	4620      	mov	r0, r4
 801b90a:	f000 fb57 	bl	801bfbc <_calloc_r>
 801b90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b910:	60f0      	str	r0, [r6, #12]
 801b912:	68db      	ldr	r3, [r3, #12]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d1e4      	bne.n	801b8e2 <_Balloc+0x2e>
 801b918:	2000      	movs	r0, #0
 801b91a:	bd70      	pop	{r4, r5, r6, pc}
 801b91c:	6802      	ldr	r2, [r0, #0]
 801b91e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b922:	2300      	movs	r3, #0
 801b924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b928:	e7f7      	b.n	801b91a <_Balloc+0x66>
 801b92a:	bf00      	nop
 801b92c:	0801cd95 	.word	0x0801cd95
 801b930:	0801ce18 	.word	0x0801ce18

0801b934 <_Bfree>:
 801b934:	b570      	push	{r4, r5, r6, lr}
 801b936:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801b938:	4605      	mov	r5, r0
 801b93a:	460c      	mov	r4, r1
 801b93c:	b976      	cbnz	r6, 801b95c <_Bfree+0x28>
 801b93e:	2010      	movs	r0, #16
 801b940:	f7fe f964 	bl	8019c0c <malloc>
 801b944:	4602      	mov	r2, r0
 801b946:	6268      	str	r0, [r5, #36]	; 0x24
 801b948:	b920      	cbnz	r0, 801b954 <_Bfree+0x20>
 801b94a:	4b09      	ldr	r3, [pc, #36]	; (801b970 <_Bfree+0x3c>)
 801b94c:	4809      	ldr	r0, [pc, #36]	; (801b974 <_Bfree+0x40>)
 801b94e:	218a      	movs	r1, #138	; 0x8a
 801b950:	f000 fb5c 	bl	801c00c <__assert_func>
 801b954:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b958:	6006      	str	r6, [r0, #0]
 801b95a:	60c6      	str	r6, [r0, #12]
 801b95c:	b13c      	cbz	r4, 801b96e <_Bfree+0x3a>
 801b95e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801b960:	6862      	ldr	r2, [r4, #4]
 801b962:	68db      	ldr	r3, [r3, #12]
 801b964:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b968:	6021      	str	r1, [r4, #0]
 801b96a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b96e:	bd70      	pop	{r4, r5, r6, pc}
 801b970:	0801cd95 	.word	0x0801cd95
 801b974:	0801ce18 	.word	0x0801ce18

0801b978 <__multadd>:
 801b978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b97c:	690d      	ldr	r5, [r1, #16]
 801b97e:	4607      	mov	r7, r0
 801b980:	460c      	mov	r4, r1
 801b982:	461e      	mov	r6, r3
 801b984:	f101 0c14 	add.w	ip, r1, #20
 801b988:	2000      	movs	r0, #0
 801b98a:	f8dc 3000 	ldr.w	r3, [ip]
 801b98e:	b299      	uxth	r1, r3
 801b990:	fb02 6101 	mla	r1, r2, r1, r6
 801b994:	0c1e      	lsrs	r6, r3, #16
 801b996:	0c0b      	lsrs	r3, r1, #16
 801b998:	fb02 3306 	mla	r3, r2, r6, r3
 801b99c:	b289      	uxth	r1, r1
 801b99e:	3001      	adds	r0, #1
 801b9a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b9a4:	4285      	cmp	r5, r0
 801b9a6:	f84c 1b04 	str.w	r1, [ip], #4
 801b9aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b9ae:	dcec      	bgt.n	801b98a <__multadd+0x12>
 801b9b0:	b30e      	cbz	r6, 801b9f6 <__multadd+0x7e>
 801b9b2:	68a3      	ldr	r3, [r4, #8]
 801b9b4:	42ab      	cmp	r3, r5
 801b9b6:	dc19      	bgt.n	801b9ec <__multadd+0x74>
 801b9b8:	6861      	ldr	r1, [r4, #4]
 801b9ba:	4638      	mov	r0, r7
 801b9bc:	3101      	adds	r1, #1
 801b9be:	f7ff ff79 	bl	801b8b4 <_Balloc>
 801b9c2:	4680      	mov	r8, r0
 801b9c4:	b928      	cbnz	r0, 801b9d2 <__multadd+0x5a>
 801b9c6:	4602      	mov	r2, r0
 801b9c8:	4b0c      	ldr	r3, [pc, #48]	; (801b9fc <__multadd+0x84>)
 801b9ca:	480d      	ldr	r0, [pc, #52]	; (801ba00 <__multadd+0x88>)
 801b9cc:	21b5      	movs	r1, #181	; 0xb5
 801b9ce:	f000 fb1d 	bl	801c00c <__assert_func>
 801b9d2:	6922      	ldr	r2, [r4, #16]
 801b9d4:	3202      	adds	r2, #2
 801b9d6:	f104 010c 	add.w	r1, r4, #12
 801b9da:	0092      	lsls	r2, r2, #2
 801b9dc:	300c      	adds	r0, #12
 801b9de:	f7fe f925 	bl	8019c2c <memcpy>
 801b9e2:	4621      	mov	r1, r4
 801b9e4:	4638      	mov	r0, r7
 801b9e6:	f7ff ffa5 	bl	801b934 <_Bfree>
 801b9ea:	4644      	mov	r4, r8
 801b9ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b9f0:	3501      	adds	r5, #1
 801b9f2:	615e      	str	r6, [r3, #20]
 801b9f4:	6125      	str	r5, [r4, #16]
 801b9f6:	4620      	mov	r0, r4
 801b9f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9fc:	0801ce07 	.word	0x0801ce07
 801ba00:	0801ce18 	.word	0x0801ce18

0801ba04 <__hi0bits>:
 801ba04:	0c03      	lsrs	r3, r0, #16
 801ba06:	041b      	lsls	r3, r3, #16
 801ba08:	b9d3      	cbnz	r3, 801ba40 <__hi0bits+0x3c>
 801ba0a:	0400      	lsls	r0, r0, #16
 801ba0c:	2310      	movs	r3, #16
 801ba0e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801ba12:	bf04      	itt	eq
 801ba14:	0200      	lsleq	r0, r0, #8
 801ba16:	3308      	addeq	r3, #8
 801ba18:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801ba1c:	bf04      	itt	eq
 801ba1e:	0100      	lsleq	r0, r0, #4
 801ba20:	3304      	addeq	r3, #4
 801ba22:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801ba26:	bf04      	itt	eq
 801ba28:	0080      	lsleq	r0, r0, #2
 801ba2a:	3302      	addeq	r3, #2
 801ba2c:	2800      	cmp	r0, #0
 801ba2e:	db05      	blt.n	801ba3c <__hi0bits+0x38>
 801ba30:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801ba34:	f103 0301 	add.w	r3, r3, #1
 801ba38:	bf08      	it	eq
 801ba3a:	2320      	moveq	r3, #32
 801ba3c:	4618      	mov	r0, r3
 801ba3e:	4770      	bx	lr
 801ba40:	2300      	movs	r3, #0
 801ba42:	e7e4      	b.n	801ba0e <__hi0bits+0xa>

0801ba44 <__lo0bits>:
 801ba44:	6803      	ldr	r3, [r0, #0]
 801ba46:	f013 0207 	ands.w	r2, r3, #7
 801ba4a:	4601      	mov	r1, r0
 801ba4c:	d00b      	beq.n	801ba66 <__lo0bits+0x22>
 801ba4e:	07da      	lsls	r2, r3, #31
 801ba50:	d423      	bmi.n	801ba9a <__lo0bits+0x56>
 801ba52:	0798      	lsls	r0, r3, #30
 801ba54:	bf49      	itett	mi
 801ba56:	085b      	lsrmi	r3, r3, #1
 801ba58:	089b      	lsrpl	r3, r3, #2
 801ba5a:	2001      	movmi	r0, #1
 801ba5c:	600b      	strmi	r3, [r1, #0]
 801ba5e:	bf5c      	itt	pl
 801ba60:	600b      	strpl	r3, [r1, #0]
 801ba62:	2002      	movpl	r0, #2
 801ba64:	4770      	bx	lr
 801ba66:	b298      	uxth	r0, r3
 801ba68:	b9a8      	cbnz	r0, 801ba96 <__lo0bits+0x52>
 801ba6a:	0c1b      	lsrs	r3, r3, #16
 801ba6c:	2010      	movs	r0, #16
 801ba6e:	b2da      	uxtb	r2, r3
 801ba70:	b90a      	cbnz	r2, 801ba76 <__lo0bits+0x32>
 801ba72:	3008      	adds	r0, #8
 801ba74:	0a1b      	lsrs	r3, r3, #8
 801ba76:	071a      	lsls	r2, r3, #28
 801ba78:	bf04      	itt	eq
 801ba7a:	091b      	lsreq	r3, r3, #4
 801ba7c:	3004      	addeq	r0, #4
 801ba7e:	079a      	lsls	r2, r3, #30
 801ba80:	bf04      	itt	eq
 801ba82:	089b      	lsreq	r3, r3, #2
 801ba84:	3002      	addeq	r0, #2
 801ba86:	07da      	lsls	r2, r3, #31
 801ba88:	d403      	bmi.n	801ba92 <__lo0bits+0x4e>
 801ba8a:	085b      	lsrs	r3, r3, #1
 801ba8c:	f100 0001 	add.w	r0, r0, #1
 801ba90:	d005      	beq.n	801ba9e <__lo0bits+0x5a>
 801ba92:	600b      	str	r3, [r1, #0]
 801ba94:	4770      	bx	lr
 801ba96:	4610      	mov	r0, r2
 801ba98:	e7e9      	b.n	801ba6e <__lo0bits+0x2a>
 801ba9a:	2000      	movs	r0, #0
 801ba9c:	4770      	bx	lr
 801ba9e:	2020      	movs	r0, #32
 801baa0:	4770      	bx	lr
	...

0801baa4 <__i2b>:
 801baa4:	b510      	push	{r4, lr}
 801baa6:	460c      	mov	r4, r1
 801baa8:	2101      	movs	r1, #1
 801baaa:	f7ff ff03 	bl	801b8b4 <_Balloc>
 801baae:	4602      	mov	r2, r0
 801bab0:	b928      	cbnz	r0, 801babe <__i2b+0x1a>
 801bab2:	4b05      	ldr	r3, [pc, #20]	; (801bac8 <__i2b+0x24>)
 801bab4:	4805      	ldr	r0, [pc, #20]	; (801bacc <__i2b+0x28>)
 801bab6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801baba:	f000 faa7 	bl	801c00c <__assert_func>
 801babe:	2301      	movs	r3, #1
 801bac0:	6144      	str	r4, [r0, #20]
 801bac2:	6103      	str	r3, [r0, #16]
 801bac4:	bd10      	pop	{r4, pc}
 801bac6:	bf00      	nop
 801bac8:	0801ce07 	.word	0x0801ce07
 801bacc:	0801ce18 	.word	0x0801ce18

0801bad0 <__multiply>:
 801bad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bad4:	4691      	mov	r9, r2
 801bad6:	690a      	ldr	r2, [r1, #16]
 801bad8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801badc:	429a      	cmp	r2, r3
 801bade:	bfb8      	it	lt
 801bae0:	460b      	movlt	r3, r1
 801bae2:	460c      	mov	r4, r1
 801bae4:	bfbc      	itt	lt
 801bae6:	464c      	movlt	r4, r9
 801bae8:	4699      	movlt	r9, r3
 801baea:	6927      	ldr	r7, [r4, #16]
 801baec:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801baf0:	68a3      	ldr	r3, [r4, #8]
 801baf2:	6861      	ldr	r1, [r4, #4]
 801baf4:	eb07 060a 	add.w	r6, r7, sl
 801baf8:	42b3      	cmp	r3, r6
 801bafa:	b085      	sub	sp, #20
 801bafc:	bfb8      	it	lt
 801bafe:	3101      	addlt	r1, #1
 801bb00:	f7ff fed8 	bl	801b8b4 <_Balloc>
 801bb04:	b930      	cbnz	r0, 801bb14 <__multiply+0x44>
 801bb06:	4602      	mov	r2, r0
 801bb08:	4b44      	ldr	r3, [pc, #272]	; (801bc1c <__multiply+0x14c>)
 801bb0a:	4845      	ldr	r0, [pc, #276]	; (801bc20 <__multiply+0x150>)
 801bb0c:	f240 115d 	movw	r1, #349	; 0x15d
 801bb10:	f000 fa7c 	bl	801c00c <__assert_func>
 801bb14:	f100 0514 	add.w	r5, r0, #20
 801bb18:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801bb1c:	462b      	mov	r3, r5
 801bb1e:	2200      	movs	r2, #0
 801bb20:	4543      	cmp	r3, r8
 801bb22:	d321      	bcc.n	801bb68 <__multiply+0x98>
 801bb24:	f104 0314 	add.w	r3, r4, #20
 801bb28:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801bb2c:	f109 0314 	add.w	r3, r9, #20
 801bb30:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801bb34:	9202      	str	r2, [sp, #8]
 801bb36:	1b3a      	subs	r2, r7, r4
 801bb38:	3a15      	subs	r2, #21
 801bb3a:	f022 0203 	bic.w	r2, r2, #3
 801bb3e:	3204      	adds	r2, #4
 801bb40:	f104 0115 	add.w	r1, r4, #21
 801bb44:	428f      	cmp	r7, r1
 801bb46:	bf38      	it	cc
 801bb48:	2204      	movcc	r2, #4
 801bb4a:	9201      	str	r2, [sp, #4]
 801bb4c:	9a02      	ldr	r2, [sp, #8]
 801bb4e:	9303      	str	r3, [sp, #12]
 801bb50:	429a      	cmp	r2, r3
 801bb52:	d80c      	bhi.n	801bb6e <__multiply+0x9e>
 801bb54:	2e00      	cmp	r6, #0
 801bb56:	dd03      	ble.n	801bb60 <__multiply+0x90>
 801bb58:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	d05a      	beq.n	801bc16 <__multiply+0x146>
 801bb60:	6106      	str	r6, [r0, #16]
 801bb62:	b005      	add	sp, #20
 801bb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bb68:	f843 2b04 	str.w	r2, [r3], #4
 801bb6c:	e7d8      	b.n	801bb20 <__multiply+0x50>
 801bb6e:	f8b3 a000 	ldrh.w	sl, [r3]
 801bb72:	f1ba 0f00 	cmp.w	sl, #0
 801bb76:	d024      	beq.n	801bbc2 <__multiply+0xf2>
 801bb78:	f104 0e14 	add.w	lr, r4, #20
 801bb7c:	46a9      	mov	r9, r5
 801bb7e:	f04f 0c00 	mov.w	ip, #0
 801bb82:	f85e 2b04 	ldr.w	r2, [lr], #4
 801bb86:	f8d9 1000 	ldr.w	r1, [r9]
 801bb8a:	fa1f fb82 	uxth.w	fp, r2
 801bb8e:	b289      	uxth	r1, r1
 801bb90:	fb0a 110b 	mla	r1, sl, fp, r1
 801bb94:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801bb98:	f8d9 2000 	ldr.w	r2, [r9]
 801bb9c:	4461      	add	r1, ip
 801bb9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bba2:	fb0a c20b 	mla	r2, sl, fp, ip
 801bba6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801bbaa:	b289      	uxth	r1, r1
 801bbac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801bbb0:	4577      	cmp	r7, lr
 801bbb2:	f849 1b04 	str.w	r1, [r9], #4
 801bbb6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801bbba:	d8e2      	bhi.n	801bb82 <__multiply+0xb2>
 801bbbc:	9a01      	ldr	r2, [sp, #4]
 801bbbe:	f845 c002 	str.w	ip, [r5, r2]
 801bbc2:	9a03      	ldr	r2, [sp, #12]
 801bbc4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801bbc8:	3304      	adds	r3, #4
 801bbca:	f1b9 0f00 	cmp.w	r9, #0
 801bbce:	d020      	beq.n	801bc12 <__multiply+0x142>
 801bbd0:	6829      	ldr	r1, [r5, #0]
 801bbd2:	f104 0c14 	add.w	ip, r4, #20
 801bbd6:	46ae      	mov	lr, r5
 801bbd8:	f04f 0a00 	mov.w	sl, #0
 801bbdc:	f8bc b000 	ldrh.w	fp, [ip]
 801bbe0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801bbe4:	fb09 220b 	mla	r2, r9, fp, r2
 801bbe8:	4492      	add	sl, r2
 801bbea:	b289      	uxth	r1, r1
 801bbec:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801bbf0:	f84e 1b04 	str.w	r1, [lr], #4
 801bbf4:	f85c 2b04 	ldr.w	r2, [ip], #4
 801bbf8:	f8be 1000 	ldrh.w	r1, [lr]
 801bbfc:	0c12      	lsrs	r2, r2, #16
 801bbfe:	fb09 1102 	mla	r1, r9, r2, r1
 801bc02:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801bc06:	4567      	cmp	r7, ip
 801bc08:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801bc0c:	d8e6      	bhi.n	801bbdc <__multiply+0x10c>
 801bc0e:	9a01      	ldr	r2, [sp, #4]
 801bc10:	50a9      	str	r1, [r5, r2]
 801bc12:	3504      	adds	r5, #4
 801bc14:	e79a      	b.n	801bb4c <__multiply+0x7c>
 801bc16:	3e01      	subs	r6, #1
 801bc18:	e79c      	b.n	801bb54 <__multiply+0x84>
 801bc1a:	bf00      	nop
 801bc1c:	0801ce07 	.word	0x0801ce07
 801bc20:	0801ce18 	.word	0x0801ce18

0801bc24 <__pow5mult>:
 801bc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc28:	4615      	mov	r5, r2
 801bc2a:	f012 0203 	ands.w	r2, r2, #3
 801bc2e:	4606      	mov	r6, r0
 801bc30:	460f      	mov	r7, r1
 801bc32:	d007      	beq.n	801bc44 <__pow5mult+0x20>
 801bc34:	4c25      	ldr	r4, [pc, #148]	; (801bccc <__pow5mult+0xa8>)
 801bc36:	3a01      	subs	r2, #1
 801bc38:	2300      	movs	r3, #0
 801bc3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bc3e:	f7ff fe9b 	bl	801b978 <__multadd>
 801bc42:	4607      	mov	r7, r0
 801bc44:	10ad      	asrs	r5, r5, #2
 801bc46:	d03d      	beq.n	801bcc4 <__pow5mult+0xa0>
 801bc48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801bc4a:	b97c      	cbnz	r4, 801bc6c <__pow5mult+0x48>
 801bc4c:	2010      	movs	r0, #16
 801bc4e:	f7fd ffdd 	bl	8019c0c <malloc>
 801bc52:	4602      	mov	r2, r0
 801bc54:	6270      	str	r0, [r6, #36]	; 0x24
 801bc56:	b928      	cbnz	r0, 801bc64 <__pow5mult+0x40>
 801bc58:	4b1d      	ldr	r3, [pc, #116]	; (801bcd0 <__pow5mult+0xac>)
 801bc5a:	481e      	ldr	r0, [pc, #120]	; (801bcd4 <__pow5mult+0xb0>)
 801bc5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801bc60:	f000 f9d4 	bl	801c00c <__assert_func>
 801bc64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801bc68:	6004      	str	r4, [r0, #0]
 801bc6a:	60c4      	str	r4, [r0, #12]
 801bc6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801bc70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801bc74:	b94c      	cbnz	r4, 801bc8a <__pow5mult+0x66>
 801bc76:	f240 2171 	movw	r1, #625	; 0x271
 801bc7a:	4630      	mov	r0, r6
 801bc7c:	f7ff ff12 	bl	801baa4 <__i2b>
 801bc80:	2300      	movs	r3, #0
 801bc82:	f8c8 0008 	str.w	r0, [r8, #8]
 801bc86:	4604      	mov	r4, r0
 801bc88:	6003      	str	r3, [r0, #0]
 801bc8a:	f04f 0900 	mov.w	r9, #0
 801bc8e:	07eb      	lsls	r3, r5, #31
 801bc90:	d50a      	bpl.n	801bca8 <__pow5mult+0x84>
 801bc92:	4639      	mov	r1, r7
 801bc94:	4622      	mov	r2, r4
 801bc96:	4630      	mov	r0, r6
 801bc98:	f7ff ff1a 	bl	801bad0 <__multiply>
 801bc9c:	4639      	mov	r1, r7
 801bc9e:	4680      	mov	r8, r0
 801bca0:	4630      	mov	r0, r6
 801bca2:	f7ff fe47 	bl	801b934 <_Bfree>
 801bca6:	4647      	mov	r7, r8
 801bca8:	106d      	asrs	r5, r5, #1
 801bcaa:	d00b      	beq.n	801bcc4 <__pow5mult+0xa0>
 801bcac:	6820      	ldr	r0, [r4, #0]
 801bcae:	b938      	cbnz	r0, 801bcc0 <__pow5mult+0x9c>
 801bcb0:	4622      	mov	r2, r4
 801bcb2:	4621      	mov	r1, r4
 801bcb4:	4630      	mov	r0, r6
 801bcb6:	f7ff ff0b 	bl	801bad0 <__multiply>
 801bcba:	6020      	str	r0, [r4, #0]
 801bcbc:	f8c0 9000 	str.w	r9, [r0]
 801bcc0:	4604      	mov	r4, r0
 801bcc2:	e7e4      	b.n	801bc8e <__pow5mult+0x6a>
 801bcc4:	4638      	mov	r0, r7
 801bcc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bcca:	bf00      	nop
 801bccc:	0801cf68 	.word	0x0801cf68
 801bcd0:	0801cd95 	.word	0x0801cd95
 801bcd4:	0801ce18 	.word	0x0801ce18

0801bcd8 <__lshift>:
 801bcd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bcdc:	460c      	mov	r4, r1
 801bcde:	6849      	ldr	r1, [r1, #4]
 801bce0:	6923      	ldr	r3, [r4, #16]
 801bce2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801bce6:	68a3      	ldr	r3, [r4, #8]
 801bce8:	4607      	mov	r7, r0
 801bcea:	4691      	mov	r9, r2
 801bcec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801bcf0:	f108 0601 	add.w	r6, r8, #1
 801bcf4:	42b3      	cmp	r3, r6
 801bcf6:	db0b      	blt.n	801bd10 <__lshift+0x38>
 801bcf8:	4638      	mov	r0, r7
 801bcfa:	f7ff fddb 	bl	801b8b4 <_Balloc>
 801bcfe:	4605      	mov	r5, r0
 801bd00:	b948      	cbnz	r0, 801bd16 <__lshift+0x3e>
 801bd02:	4602      	mov	r2, r0
 801bd04:	4b2a      	ldr	r3, [pc, #168]	; (801bdb0 <__lshift+0xd8>)
 801bd06:	482b      	ldr	r0, [pc, #172]	; (801bdb4 <__lshift+0xdc>)
 801bd08:	f240 11d9 	movw	r1, #473	; 0x1d9
 801bd0c:	f000 f97e 	bl	801c00c <__assert_func>
 801bd10:	3101      	adds	r1, #1
 801bd12:	005b      	lsls	r3, r3, #1
 801bd14:	e7ee      	b.n	801bcf4 <__lshift+0x1c>
 801bd16:	2300      	movs	r3, #0
 801bd18:	f100 0114 	add.w	r1, r0, #20
 801bd1c:	f100 0210 	add.w	r2, r0, #16
 801bd20:	4618      	mov	r0, r3
 801bd22:	4553      	cmp	r3, sl
 801bd24:	db37      	blt.n	801bd96 <__lshift+0xbe>
 801bd26:	6920      	ldr	r0, [r4, #16]
 801bd28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bd2c:	f104 0314 	add.w	r3, r4, #20
 801bd30:	f019 091f 	ands.w	r9, r9, #31
 801bd34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bd38:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801bd3c:	d02f      	beq.n	801bd9e <__lshift+0xc6>
 801bd3e:	f1c9 0e20 	rsb	lr, r9, #32
 801bd42:	468a      	mov	sl, r1
 801bd44:	f04f 0c00 	mov.w	ip, #0
 801bd48:	681a      	ldr	r2, [r3, #0]
 801bd4a:	fa02 f209 	lsl.w	r2, r2, r9
 801bd4e:	ea42 020c 	orr.w	r2, r2, ip
 801bd52:	f84a 2b04 	str.w	r2, [sl], #4
 801bd56:	f853 2b04 	ldr.w	r2, [r3], #4
 801bd5a:	4298      	cmp	r0, r3
 801bd5c:	fa22 fc0e 	lsr.w	ip, r2, lr
 801bd60:	d8f2      	bhi.n	801bd48 <__lshift+0x70>
 801bd62:	1b03      	subs	r3, r0, r4
 801bd64:	3b15      	subs	r3, #21
 801bd66:	f023 0303 	bic.w	r3, r3, #3
 801bd6a:	3304      	adds	r3, #4
 801bd6c:	f104 0215 	add.w	r2, r4, #21
 801bd70:	4290      	cmp	r0, r2
 801bd72:	bf38      	it	cc
 801bd74:	2304      	movcc	r3, #4
 801bd76:	f841 c003 	str.w	ip, [r1, r3]
 801bd7a:	f1bc 0f00 	cmp.w	ip, #0
 801bd7e:	d001      	beq.n	801bd84 <__lshift+0xac>
 801bd80:	f108 0602 	add.w	r6, r8, #2
 801bd84:	3e01      	subs	r6, #1
 801bd86:	4638      	mov	r0, r7
 801bd88:	612e      	str	r6, [r5, #16]
 801bd8a:	4621      	mov	r1, r4
 801bd8c:	f7ff fdd2 	bl	801b934 <_Bfree>
 801bd90:	4628      	mov	r0, r5
 801bd92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bd96:	f842 0f04 	str.w	r0, [r2, #4]!
 801bd9a:	3301      	adds	r3, #1
 801bd9c:	e7c1      	b.n	801bd22 <__lshift+0x4a>
 801bd9e:	3904      	subs	r1, #4
 801bda0:	f853 2b04 	ldr.w	r2, [r3], #4
 801bda4:	f841 2f04 	str.w	r2, [r1, #4]!
 801bda8:	4298      	cmp	r0, r3
 801bdaa:	d8f9      	bhi.n	801bda0 <__lshift+0xc8>
 801bdac:	e7ea      	b.n	801bd84 <__lshift+0xac>
 801bdae:	bf00      	nop
 801bdb0:	0801ce07 	.word	0x0801ce07
 801bdb4:	0801ce18 	.word	0x0801ce18

0801bdb8 <__mcmp>:
 801bdb8:	b530      	push	{r4, r5, lr}
 801bdba:	6902      	ldr	r2, [r0, #16]
 801bdbc:	690c      	ldr	r4, [r1, #16]
 801bdbe:	1b12      	subs	r2, r2, r4
 801bdc0:	d10e      	bne.n	801bde0 <__mcmp+0x28>
 801bdc2:	f100 0314 	add.w	r3, r0, #20
 801bdc6:	3114      	adds	r1, #20
 801bdc8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801bdcc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801bdd0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801bdd4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801bdd8:	42a5      	cmp	r5, r4
 801bdda:	d003      	beq.n	801bde4 <__mcmp+0x2c>
 801bddc:	d305      	bcc.n	801bdea <__mcmp+0x32>
 801bdde:	2201      	movs	r2, #1
 801bde0:	4610      	mov	r0, r2
 801bde2:	bd30      	pop	{r4, r5, pc}
 801bde4:	4283      	cmp	r3, r0
 801bde6:	d3f3      	bcc.n	801bdd0 <__mcmp+0x18>
 801bde8:	e7fa      	b.n	801bde0 <__mcmp+0x28>
 801bdea:	f04f 32ff 	mov.w	r2, #4294967295
 801bdee:	e7f7      	b.n	801bde0 <__mcmp+0x28>

0801bdf0 <__mdiff>:
 801bdf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdf4:	460c      	mov	r4, r1
 801bdf6:	4606      	mov	r6, r0
 801bdf8:	4611      	mov	r1, r2
 801bdfa:	4620      	mov	r0, r4
 801bdfc:	4690      	mov	r8, r2
 801bdfe:	f7ff ffdb 	bl	801bdb8 <__mcmp>
 801be02:	1e05      	subs	r5, r0, #0
 801be04:	d110      	bne.n	801be28 <__mdiff+0x38>
 801be06:	4629      	mov	r1, r5
 801be08:	4630      	mov	r0, r6
 801be0a:	f7ff fd53 	bl	801b8b4 <_Balloc>
 801be0e:	b930      	cbnz	r0, 801be1e <__mdiff+0x2e>
 801be10:	4b3a      	ldr	r3, [pc, #232]	; (801befc <__mdiff+0x10c>)
 801be12:	4602      	mov	r2, r0
 801be14:	f240 2132 	movw	r1, #562	; 0x232
 801be18:	4839      	ldr	r0, [pc, #228]	; (801bf00 <__mdiff+0x110>)
 801be1a:	f000 f8f7 	bl	801c00c <__assert_func>
 801be1e:	2301      	movs	r3, #1
 801be20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801be24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be28:	bfa4      	itt	ge
 801be2a:	4643      	movge	r3, r8
 801be2c:	46a0      	movge	r8, r4
 801be2e:	4630      	mov	r0, r6
 801be30:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801be34:	bfa6      	itte	ge
 801be36:	461c      	movge	r4, r3
 801be38:	2500      	movge	r5, #0
 801be3a:	2501      	movlt	r5, #1
 801be3c:	f7ff fd3a 	bl	801b8b4 <_Balloc>
 801be40:	b920      	cbnz	r0, 801be4c <__mdiff+0x5c>
 801be42:	4b2e      	ldr	r3, [pc, #184]	; (801befc <__mdiff+0x10c>)
 801be44:	4602      	mov	r2, r0
 801be46:	f44f 7110 	mov.w	r1, #576	; 0x240
 801be4a:	e7e5      	b.n	801be18 <__mdiff+0x28>
 801be4c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801be50:	6926      	ldr	r6, [r4, #16]
 801be52:	60c5      	str	r5, [r0, #12]
 801be54:	f104 0914 	add.w	r9, r4, #20
 801be58:	f108 0514 	add.w	r5, r8, #20
 801be5c:	f100 0e14 	add.w	lr, r0, #20
 801be60:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801be64:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801be68:	f108 0210 	add.w	r2, r8, #16
 801be6c:	46f2      	mov	sl, lr
 801be6e:	2100      	movs	r1, #0
 801be70:	f859 3b04 	ldr.w	r3, [r9], #4
 801be74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801be78:	fa1f f883 	uxth.w	r8, r3
 801be7c:	fa11 f18b 	uxtah	r1, r1, fp
 801be80:	0c1b      	lsrs	r3, r3, #16
 801be82:	eba1 0808 	sub.w	r8, r1, r8
 801be86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801be8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801be8e:	fa1f f888 	uxth.w	r8, r8
 801be92:	1419      	asrs	r1, r3, #16
 801be94:	454e      	cmp	r6, r9
 801be96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801be9a:	f84a 3b04 	str.w	r3, [sl], #4
 801be9e:	d8e7      	bhi.n	801be70 <__mdiff+0x80>
 801bea0:	1b33      	subs	r3, r6, r4
 801bea2:	3b15      	subs	r3, #21
 801bea4:	f023 0303 	bic.w	r3, r3, #3
 801bea8:	3304      	adds	r3, #4
 801beaa:	3415      	adds	r4, #21
 801beac:	42a6      	cmp	r6, r4
 801beae:	bf38      	it	cc
 801beb0:	2304      	movcc	r3, #4
 801beb2:	441d      	add	r5, r3
 801beb4:	4473      	add	r3, lr
 801beb6:	469e      	mov	lr, r3
 801beb8:	462e      	mov	r6, r5
 801beba:	4566      	cmp	r6, ip
 801bebc:	d30e      	bcc.n	801bedc <__mdiff+0xec>
 801bebe:	f10c 0203 	add.w	r2, ip, #3
 801bec2:	1b52      	subs	r2, r2, r5
 801bec4:	f022 0203 	bic.w	r2, r2, #3
 801bec8:	3d03      	subs	r5, #3
 801beca:	45ac      	cmp	ip, r5
 801becc:	bf38      	it	cc
 801bece:	2200      	movcc	r2, #0
 801bed0:	441a      	add	r2, r3
 801bed2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801bed6:	b17b      	cbz	r3, 801bef8 <__mdiff+0x108>
 801bed8:	6107      	str	r7, [r0, #16]
 801beda:	e7a3      	b.n	801be24 <__mdiff+0x34>
 801bedc:	f856 8b04 	ldr.w	r8, [r6], #4
 801bee0:	fa11 f288 	uxtah	r2, r1, r8
 801bee4:	1414      	asrs	r4, r2, #16
 801bee6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801beea:	b292      	uxth	r2, r2
 801beec:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801bef0:	f84e 2b04 	str.w	r2, [lr], #4
 801bef4:	1421      	asrs	r1, r4, #16
 801bef6:	e7e0      	b.n	801beba <__mdiff+0xca>
 801bef8:	3f01      	subs	r7, #1
 801befa:	e7ea      	b.n	801bed2 <__mdiff+0xe2>
 801befc:	0801ce07 	.word	0x0801ce07
 801bf00:	0801ce18 	.word	0x0801ce18

0801bf04 <__d2b>:
 801bf04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bf08:	4689      	mov	r9, r1
 801bf0a:	2101      	movs	r1, #1
 801bf0c:	ec57 6b10 	vmov	r6, r7, d0
 801bf10:	4690      	mov	r8, r2
 801bf12:	f7ff fccf 	bl	801b8b4 <_Balloc>
 801bf16:	4604      	mov	r4, r0
 801bf18:	b930      	cbnz	r0, 801bf28 <__d2b+0x24>
 801bf1a:	4602      	mov	r2, r0
 801bf1c:	4b25      	ldr	r3, [pc, #148]	; (801bfb4 <__d2b+0xb0>)
 801bf1e:	4826      	ldr	r0, [pc, #152]	; (801bfb8 <__d2b+0xb4>)
 801bf20:	f240 310a 	movw	r1, #778	; 0x30a
 801bf24:	f000 f872 	bl	801c00c <__assert_func>
 801bf28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801bf2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801bf30:	bb35      	cbnz	r5, 801bf80 <__d2b+0x7c>
 801bf32:	2e00      	cmp	r6, #0
 801bf34:	9301      	str	r3, [sp, #4]
 801bf36:	d028      	beq.n	801bf8a <__d2b+0x86>
 801bf38:	4668      	mov	r0, sp
 801bf3a:	9600      	str	r6, [sp, #0]
 801bf3c:	f7ff fd82 	bl	801ba44 <__lo0bits>
 801bf40:	9900      	ldr	r1, [sp, #0]
 801bf42:	b300      	cbz	r0, 801bf86 <__d2b+0x82>
 801bf44:	9a01      	ldr	r2, [sp, #4]
 801bf46:	f1c0 0320 	rsb	r3, r0, #32
 801bf4a:	fa02 f303 	lsl.w	r3, r2, r3
 801bf4e:	430b      	orrs	r3, r1
 801bf50:	40c2      	lsrs	r2, r0
 801bf52:	6163      	str	r3, [r4, #20]
 801bf54:	9201      	str	r2, [sp, #4]
 801bf56:	9b01      	ldr	r3, [sp, #4]
 801bf58:	61a3      	str	r3, [r4, #24]
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	bf14      	ite	ne
 801bf5e:	2202      	movne	r2, #2
 801bf60:	2201      	moveq	r2, #1
 801bf62:	6122      	str	r2, [r4, #16]
 801bf64:	b1d5      	cbz	r5, 801bf9c <__d2b+0x98>
 801bf66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801bf6a:	4405      	add	r5, r0
 801bf6c:	f8c9 5000 	str.w	r5, [r9]
 801bf70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801bf74:	f8c8 0000 	str.w	r0, [r8]
 801bf78:	4620      	mov	r0, r4
 801bf7a:	b003      	add	sp, #12
 801bf7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801bf84:	e7d5      	b.n	801bf32 <__d2b+0x2e>
 801bf86:	6161      	str	r1, [r4, #20]
 801bf88:	e7e5      	b.n	801bf56 <__d2b+0x52>
 801bf8a:	a801      	add	r0, sp, #4
 801bf8c:	f7ff fd5a 	bl	801ba44 <__lo0bits>
 801bf90:	9b01      	ldr	r3, [sp, #4]
 801bf92:	6163      	str	r3, [r4, #20]
 801bf94:	2201      	movs	r2, #1
 801bf96:	6122      	str	r2, [r4, #16]
 801bf98:	3020      	adds	r0, #32
 801bf9a:	e7e3      	b.n	801bf64 <__d2b+0x60>
 801bf9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801bfa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801bfa4:	f8c9 0000 	str.w	r0, [r9]
 801bfa8:	6918      	ldr	r0, [r3, #16]
 801bfaa:	f7ff fd2b 	bl	801ba04 <__hi0bits>
 801bfae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801bfb2:	e7df      	b.n	801bf74 <__d2b+0x70>
 801bfb4:	0801ce07 	.word	0x0801ce07
 801bfb8:	0801ce18 	.word	0x0801ce18

0801bfbc <_calloc_r>:
 801bfbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bfbe:	fba1 2402 	umull	r2, r4, r1, r2
 801bfc2:	b94c      	cbnz	r4, 801bfd8 <_calloc_r+0x1c>
 801bfc4:	4611      	mov	r1, r2
 801bfc6:	9201      	str	r2, [sp, #4]
 801bfc8:	f7fd feb2 	bl	8019d30 <_malloc_r>
 801bfcc:	9a01      	ldr	r2, [sp, #4]
 801bfce:	4605      	mov	r5, r0
 801bfd0:	b930      	cbnz	r0, 801bfe0 <_calloc_r+0x24>
 801bfd2:	4628      	mov	r0, r5
 801bfd4:	b003      	add	sp, #12
 801bfd6:	bd30      	pop	{r4, r5, pc}
 801bfd8:	220c      	movs	r2, #12
 801bfda:	6002      	str	r2, [r0, #0]
 801bfdc:	2500      	movs	r5, #0
 801bfde:	e7f8      	b.n	801bfd2 <_calloc_r+0x16>
 801bfe0:	4621      	mov	r1, r4
 801bfe2:	f7fd fe31 	bl	8019c48 <memset>
 801bfe6:	e7f4      	b.n	801bfd2 <_calloc_r+0x16>

0801bfe8 <_read_r>:
 801bfe8:	b538      	push	{r3, r4, r5, lr}
 801bfea:	4d07      	ldr	r5, [pc, #28]	; (801c008 <_read_r+0x20>)
 801bfec:	4604      	mov	r4, r0
 801bfee:	4608      	mov	r0, r1
 801bff0:	4611      	mov	r1, r2
 801bff2:	2200      	movs	r2, #0
 801bff4:	602a      	str	r2, [r5, #0]
 801bff6:	461a      	mov	r2, r3
 801bff8:	f7f1 fbcc 	bl	800d794 <_read>
 801bffc:	1c43      	adds	r3, r0, #1
 801bffe:	d102      	bne.n	801c006 <_read_r+0x1e>
 801c000:	682b      	ldr	r3, [r5, #0]
 801c002:	b103      	cbz	r3, 801c006 <_read_r+0x1e>
 801c004:	6023      	str	r3, [r4, #0]
 801c006:	bd38      	pop	{r3, r4, r5, pc}
 801c008:	2000a4f4 	.word	0x2000a4f4

0801c00c <__assert_func>:
 801c00c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c00e:	4614      	mov	r4, r2
 801c010:	461a      	mov	r2, r3
 801c012:	4b09      	ldr	r3, [pc, #36]	; (801c038 <__assert_func+0x2c>)
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	4605      	mov	r5, r0
 801c018:	68d8      	ldr	r0, [r3, #12]
 801c01a:	b14c      	cbz	r4, 801c030 <__assert_func+0x24>
 801c01c:	4b07      	ldr	r3, [pc, #28]	; (801c03c <__assert_func+0x30>)
 801c01e:	9100      	str	r1, [sp, #0]
 801c020:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c024:	4906      	ldr	r1, [pc, #24]	; (801c040 <__assert_func+0x34>)
 801c026:	462b      	mov	r3, r5
 801c028:	f000 f80e 	bl	801c048 <fiprintf>
 801c02c:	f7fd fcbc 	bl	80199a8 <abort>
 801c030:	4b04      	ldr	r3, [pc, #16]	; (801c044 <__assert_func+0x38>)
 801c032:	461c      	mov	r4, r3
 801c034:	e7f3      	b.n	801c01e <__assert_func+0x12>
 801c036:	bf00      	nop
 801c038:	20000030 	.word	0x20000030
 801c03c:	0801cf74 	.word	0x0801cf74
 801c040:	0801cf81 	.word	0x0801cf81
 801c044:	0801cfaf 	.word	0x0801cfaf

0801c048 <fiprintf>:
 801c048:	b40e      	push	{r1, r2, r3}
 801c04a:	b503      	push	{r0, r1, lr}
 801c04c:	4601      	mov	r1, r0
 801c04e:	ab03      	add	r3, sp, #12
 801c050:	4805      	ldr	r0, [pc, #20]	; (801c068 <fiprintf+0x20>)
 801c052:	f853 2b04 	ldr.w	r2, [r3], #4
 801c056:	6800      	ldr	r0, [r0, #0]
 801c058:	9301      	str	r3, [sp, #4]
 801c05a:	f000 f843 	bl	801c0e4 <_vfiprintf_r>
 801c05e:	b002      	add	sp, #8
 801c060:	f85d eb04 	ldr.w	lr, [sp], #4
 801c064:	b003      	add	sp, #12
 801c066:	4770      	bx	lr
 801c068:	20000030 	.word	0x20000030

0801c06c <__ascii_mbtowc>:
 801c06c:	b082      	sub	sp, #8
 801c06e:	b901      	cbnz	r1, 801c072 <__ascii_mbtowc+0x6>
 801c070:	a901      	add	r1, sp, #4
 801c072:	b142      	cbz	r2, 801c086 <__ascii_mbtowc+0x1a>
 801c074:	b14b      	cbz	r3, 801c08a <__ascii_mbtowc+0x1e>
 801c076:	7813      	ldrb	r3, [r2, #0]
 801c078:	600b      	str	r3, [r1, #0]
 801c07a:	7812      	ldrb	r2, [r2, #0]
 801c07c:	1e10      	subs	r0, r2, #0
 801c07e:	bf18      	it	ne
 801c080:	2001      	movne	r0, #1
 801c082:	b002      	add	sp, #8
 801c084:	4770      	bx	lr
 801c086:	4610      	mov	r0, r2
 801c088:	e7fb      	b.n	801c082 <__ascii_mbtowc+0x16>
 801c08a:	f06f 0001 	mvn.w	r0, #1
 801c08e:	e7f8      	b.n	801c082 <__ascii_mbtowc+0x16>

0801c090 <__sfputc_r>:
 801c090:	6893      	ldr	r3, [r2, #8]
 801c092:	3b01      	subs	r3, #1
 801c094:	2b00      	cmp	r3, #0
 801c096:	b410      	push	{r4}
 801c098:	6093      	str	r3, [r2, #8]
 801c09a:	da08      	bge.n	801c0ae <__sfputc_r+0x1e>
 801c09c:	6994      	ldr	r4, [r2, #24]
 801c09e:	42a3      	cmp	r3, r4
 801c0a0:	db01      	blt.n	801c0a6 <__sfputc_r+0x16>
 801c0a2:	290a      	cmp	r1, #10
 801c0a4:	d103      	bne.n	801c0ae <__sfputc_r+0x1e>
 801c0a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0aa:	f000 b94b 	b.w	801c344 <__swbuf_r>
 801c0ae:	6813      	ldr	r3, [r2, #0]
 801c0b0:	1c58      	adds	r0, r3, #1
 801c0b2:	6010      	str	r0, [r2, #0]
 801c0b4:	7019      	strb	r1, [r3, #0]
 801c0b6:	4608      	mov	r0, r1
 801c0b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c0bc:	4770      	bx	lr

0801c0be <__sfputs_r>:
 801c0be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c0c0:	4606      	mov	r6, r0
 801c0c2:	460f      	mov	r7, r1
 801c0c4:	4614      	mov	r4, r2
 801c0c6:	18d5      	adds	r5, r2, r3
 801c0c8:	42ac      	cmp	r4, r5
 801c0ca:	d101      	bne.n	801c0d0 <__sfputs_r+0x12>
 801c0cc:	2000      	movs	r0, #0
 801c0ce:	e007      	b.n	801c0e0 <__sfputs_r+0x22>
 801c0d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c0d4:	463a      	mov	r2, r7
 801c0d6:	4630      	mov	r0, r6
 801c0d8:	f7ff ffda 	bl	801c090 <__sfputc_r>
 801c0dc:	1c43      	adds	r3, r0, #1
 801c0de:	d1f3      	bne.n	801c0c8 <__sfputs_r+0xa>
 801c0e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c0e4 <_vfiprintf_r>:
 801c0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0e8:	460d      	mov	r5, r1
 801c0ea:	b09d      	sub	sp, #116	; 0x74
 801c0ec:	4614      	mov	r4, r2
 801c0ee:	4698      	mov	r8, r3
 801c0f0:	4606      	mov	r6, r0
 801c0f2:	b118      	cbz	r0, 801c0fc <_vfiprintf_r+0x18>
 801c0f4:	6983      	ldr	r3, [r0, #24]
 801c0f6:	b90b      	cbnz	r3, 801c0fc <_vfiprintf_r+0x18>
 801c0f8:	f7fd fcc2 	bl	8019a80 <__sinit>
 801c0fc:	4b89      	ldr	r3, [pc, #548]	; (801c324 <_vfiprintf_r+0x240>)
 801c0fe:	429d      	cmp	r5, r3
 801c100:	d11b      	bne.n	801c13a <_vfiprintf_r+0x56>
 801c102:	6875      	ldr	r5, [r6, #4]
 801c104:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c106:	07d9      	lsls	r1, r3, #31
 801c108:	d405      	bmi.n	801c116 <_vfiprintf_r+0x32>
 801c10a:	89ab      	ldrh	r3, [r5, #12]
 801c10c:	059a      	lsls	r2, r3, #22
 801c10e:	d402      	bmi.n	801c116 <_vfiprintf_r+0x32>
 801c110:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c112:	f7fd fd78 	bl	8019c06 <__retarget_lock_acquire_recursive>
 801c116:	89ab      	ldrh	r3, [r5, #12]
 801c118:	071b      	lsls	r3, r3, #28
 801c11a:	d501      	bpl.n	801c120 <_vfiprintf_r+0x3c>
 801c11c:	692b      	ldr	r3, [r5, #16]
 801c11e:	b9eb      	cbnz	r3, 801c15c <_vfiprintf_r+0x78>
 801c120:	4629      	mov	r1, r5
 801c122:	4630      	mov	r0, r6
 801c124:	f000 f96e 	bl	801c404 <__swsetup_r>
 801c128:	b1c0      	cbz	r0, 801c15c <_vfiprintf_r+0x78>
 801c12a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c12c:	07dc      	lsls	r4, r3, #31
 801c12e:	d50e      	bpl.n	801c14e <_vfiprintf_r+0x6a>
 801c130:	f04f 30ff 	mov.w	r0, #4294967295
 801c134:	b01d      	add	sp, #116	; 0x74
 801c136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c13a:	4b7b      	ldr	r3, [pc, #492]	; (801c328 <_vfiprintf_r+0x244>)
 801c13c:	429d      	cmp	r5, r3
 801c13e:	d101      	bne.n	801c144 <_vfiprintf_r+0x60>
 801c140:	68b5      	ldr	r5, [r6, #8]
 801c142:	e7df      	b.n	801c104 <_vfiprintf_r+0x20>
 801c144:	4b79      	ldr	r3, [pc, #484]	; (801c32c <_vfiprintf_r+0x248>)
 801c146:	429d      	cmp	r5, r3
 801c148:	bf08      	it	eq
 801c14a:	68f5      	ldreq	r5, [r6, #12]
 801c14c:	e7da      	b.n	801c104 <_vfiprintf_r+0x20>
 801c14e:	89ab      	ldrh	r3, [r5, #12]
 801c150:	0598      	lsls	r0, r3, #22
 801c152:	d4ed      	bmi.n	801c130 <_vfiprintf_r+0x4c>
 801c154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c156:	f7fd fd58 	bl	8019c0a <__retarget_lock_release_recursive>
 801c15a:	e7e9      	b.n	801c130 <_vfiprintf_r+0x4c>
 801c15c:	2300      	movs	r3, #0
 801c15e:	9309      	str	r3, [sp, #36]	; 0x24
 801c160:	2320      	movs	r3, #32
 801c162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c166:	f8cd 800c 	str.w	r8, [sp, #12]
 801c16a:	2330      	movs	r3, #48	; 0x30
 801c16c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801c330 <_vfiprintf_r+0x24c>
 801c170:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c174:	f04f 0901 	mov.w	r9, #1
 801c178:	4623      	mov	r3, r4
 801c17a:	469a      	mov	sl, r3
 801c17c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c180:	b10a      	cbz	r2, 801c186 <_vfiprintf_r+0xa2>
 801c182:	2a25      	cmp	r2, #37	; 0x25
 801c184:	d1f9      	bne.n	801c17a <_vfiprintf_r+0x96>
 801c186:	ebba 0b04 	subs.w	fp, sl, r4
 801c18a:	d00b      	beq.n	801c1a4 <_vfiprintf_r+0xc0>
 801c18c:	465b      	mov	r3, fp
 801c18e:	4622      	mov	r2, r4
 801c190:	4629      	mov	r1, r5
 801c192:	4630      	mov	r0, r6
 801c194:	f7ff ff93 	bl	801c0be <__sfputs_r>
 801c198:	3001      	adds	r0, #1
 801c19a:	f000 80aa 	beq.w	801c2f2 <_vfiprintf_r+0x20e>
 801c19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c1a0:	445a      	add	r2, fp
 801c1a2:	9209      	str	r2, [sp, #36]	; 0x24
 801c1a4:	f89a 3000 	ldrb.w	r3, [sl]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	f000 80a2 	beq.w	801c2f2 <_vfiprintf_r+0x20e>
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	f04f 32ff 	mov.w	r2, #4294967295
 801c1b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c1b8:	f10a 0a01 	add.w	sl, sl, #1
 801c1bc:	9304      	str	r3, [sp, #16]
 801c1be:	9307      	str	r3, [sp, #28]
 801c1c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c1c4:	931a      	str	r3, [sp, #104]	; 0x68
 801c1c6:	4654      	mov	r4, sl
 801c1c8:	2205      	movs	r2, #5
 801c1ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1ce:	4858      	ldr	r0, [pc, #352]	; (801c330 <_vfiprintf_r+0x24c>)
 801c1d0:	f7e4 f806 	bl	80001e0 <memchr>
 801c1d4:	9a04      	ldr	r2, [sp, #16]
 801c1d6:	b9d8      	cbnz	r0, 801c210 <_vfiprintf_r+0x12c>
 801c1d8:	06d1      	lsls	r1, r2, #27
 801c1da:	bf44      	itt	mi
 801c1dc:	2320      	movmi	r3, #32
 801c1de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c1e2:	0713      	lsls	r3, r2, #28
 801c1e4:	bf44      	itt	mi
 801c1e6:	232b      	movmi	r3, #43	; 0x2b
 801c1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c1ec:	f89a 3000 	ldrb.w	r3, [sl]
 801c1f0:	2b2a      	cmp	r3, #42	; 0x2a
 801c1f2:	d015      	beq.n	801c220 <_vfiprintf_r+0x13c>
 801c1f4:	9a07      	ldr	r2, [sp, #28]
 801c1f6:	4654      	mov	r4, sl
 801c1f8:	2000      	movs	r0, #0
 801c1fa:	f04f 0c0a 	mov.w	ip, #10
 801c1fe:	4621      	mov	r1, r4
 801c200:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c204:	3b30      	subs	r3, #48	; 0x30
 801c206:	2b09      	cmp	r3, #9
 801c208:	d94e      	bls.n	801c2a8 <_vfiprintf_r+0x1c4>
 801c20a:	b1b0      	cbz	r0, 801c23a <_vfiprintf_r+0x156>
 801c20c:	9207      	str	r2, [sp, #28]
 801c20e:	e014      	b.n	801c23a <_vfiprintf_r+0x156>
 801c210:	eba0 0308 	sub.w	r3, r0, r8
 801c214:	fa09 f303 	lsl.w	r3, r9, r3
 801c218:	4313      	orrs	r3, r2
 801c21a:	9304      	str	r3, [sp, #16]
 801c21c:	46a2      	mov	sl, r4
 801c21e:	e7d2      	b.n	801c1c6 <_vfiprintf_r+0xe2>
 801c220:	9b03      	ldr	r3, [sp, #12]
 801c222:	1d19      	adds	r1, r3, #4
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	9103      	str	r1, [sp, #12]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	bfbb      	ittet	lt
 801c22c:	425b      	neglt	r3, r3
 801c22e:	f042 0202 	orrlt.w	r2, r2, #2
 801c232:	9307      	strge	r3, [sp, #28]
 801c234:	9307      	strlt	r3, [sp, #28]
 801c236:	bfb8      	it	lt
 801c238:	9204      	strlt	r2, [sp, #16]
 801c23a:	7823      	ldrb	r3, [r4, #0]
 801c23c:	2b2e      	cmp	r3, #46	; 0x2e
 801c23e:	d10c      	bne.n	801c25a <_vfiprintf_r+0x176>
 801c240:	7863      	ldrb	r3, [r4, #1]
 801c242:	2b2a      	cmp	r3, #42	; 0x2a
 801c244:	d135      	bne.n	801c2b2 <_vfiprintf_r+0x1ce>
 801c246:	9b03      	ldr	r3, [sp, #12]
 801c248:	1d1a      	adds	r2, r3, #4
 801c24a:	681b      	ldr	r3, [r3, #0]
 801c24c:	9203      	str	r2, [sp, #12]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	bfb8      	it	lt
 801c252:	f04f 33ff 	movlt.w	r3, #4294967295
 801c256:	3402      	adds	r4, #2
 801c258:	9305      	str	r3, [sp, #20]
 801c25a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801c340 <_vfiprintf_r+0x25c>
 801c25e:	7821      	ldrb	r1, [r4, #0]
 801c260:	2203      	movs	r2, #3
 801c262:	4650      	mov	r0, sl
 801c264:	f7e3 ffbc 	bl	80001e0 <memchr>
 801c268:	b140      	cbz	r0, 801c27c <_vfiprintf_r+0x198>
 801c26a:	2340      	movs	r3, #64	; 0x40
 801c26c:	eba0 000a 	sub.w	r0, r0, sl
 801c270:	fa03 f000 	lsl.w	r0, r3, r0
 801c274:	9b04      	ldr	r3, [sp, #16]
 801c276:	4303      	orrs	r3, r0
 801c278:	3401      	adds	r4, #1
 801c27a:	9304      	str	r3, [sp, #16]
 801c27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c280:	482c      	ldr	r0, [pc, #176]	; (801c334 <_vfiprintf_r+0x250>)
 801c282:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c286:	2206      	movs	r2, #6
 801c288:	f7e3 ffaa 	bl	80001e0 <memchr>
 801c28c:	2800      	cmp	r0, #0
 801c28e:	d03f      	beq.n	801c310 <_vfiprintf_r+0x22c>
 801c290:	4b29      	ldr	r3, [pc, #164]	; (801c338 <_vfiprintf_r+0x254>)
 801c292:	bb1b      	cbnz	r3, 801c2dc <_vfiprintf_r+0x1f8>
 801c294:	9b03      	ldr	r3, [sp, #12]
 801c296:	3307      	adds	r3, #7
 801c298:	f023 0307 	bic.w	r3, r3, #7
 801c29c:	3308      	adds	r3, #8
 801c29e:	9303      	str	r3, [sp, #12]
 801c2a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2a2:	443b      	add	r3, r7
 801c2a4:	9309      	str	r3, [sp, #36]	; 0x24
 801c2a6:	e767      	b.n	801c178 <_vfiprintf_r+0x94>
 801c2a8:	fb0c 3202 	mla	r2, ip, r2, r3
 801c2ac:	460c      	mov	r4, r1
 801c2ae:	2001      	movs	r0, #1
 801c2b0:	e7a5      	b.n	801c1fe <_vfiprintf_r+0x11a>
 801c2b2:	2300      	movs	r3, #0
 801c2b4:	3401      	adds	r4, #1
 801c2b6:	9305      	str	r3, [sp, #20]
 801c2b8:	4619      	mov	r1, r3
 801c2ba:	f04f 0c0a 	mov.w	ip, #10
 801c2be:	4620      	mov	r0, r4
 801c2c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c2c4:	3a30      	subs	r2, #48	; 0x30
 801c2c6:	2a09      	cmp	r2, #9
 801c2c8:	d903      	bls.n	801c2d2 <_vfiprintf_r+0x1ee>
 801c2ca:	2b00      	cmp	r3, #0
 801c2cc:	d0c5      	beq.n	801c25a <_vfiprintf_r+0x176>
 801c2ce:	9105      	str	r1, [sp, #20]
 801c2d0:	e7c3      	b.n	801c25a <_vfiprintf_r+0x176>
 801c2d2:	fb0c 2101 	mla	r1, ip, r1, r2
 801c2d6:	4604      	mov	r4, r0
 801c2d8:	2301      	movs	r3, #1
 801c2da:	e7f0      	b.n	801c2be <_vfiprintf_r+0x1da>
 801c2dc:	ab03      	add	r3, sp, #12
 801c2de:	9300      	str	r3, [sp, #0]
 801c2e0:	462a      	mov	r2, r5
 801c2e2:	4b16      	ldr	r3, [pc, #88]	; (801c33c <_vfiprintf_r+0x258>)
 801c2e4:	a904      	add	r1, sp, #16
 801c2e6:	4630      	mov	r0, r6
 801c2e8:	f7fd fe36 	bl	8019f58 <_printf_float>
 801c2ec:	4607      	mov	r7, r0
 801c2ee:	1c78      	adds	r0, r7, #1
 801c2f0:	d1d6      	bne.n	801c2a0 <_vfiprintf_r+0x1bc>
 801c2f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801c2f4:	07d9      	lsls	r1, r3, #31
 801c2f6:	d405      	bmi.n	801c304 <_vfiprintf_r+0x220>
 801c2f8:	89ab      	ldrh	r3, [r5, #12]
 801c2fa:	059a      	lsls	r2, r3, #22
 801c2fc:	d402      	bmi.n	801c304 <_vfiprintf_r+0x220>
 801c2fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801c300:	f7fd fc83 	bl	8019c0a <__retarget_lock_release_recursive>
 801c304:	89ab      	ldrh	r3, [r5, #12]
 801c306:	065b      	lsls	r3, r3, #25
 801c308:	f53f af12 	bmi.w	801c130 <_vfiprintf_r+0x4c>
 801c30c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c30e:	e711      	b.n	801c134 <_vfiprintf_r+0x50>
 801c310:	ab03      	add	r3, sp, #12
 801c312:	9300      	str	r3, [sp, #0]
 801c314:	462a      	mov	r2, r5
 801c316:	4b09      	ldr	r3, [pc, #36]	; (801c33c <_vfiprintf_r+0x258>)
 801c318:	a904      	add	r1, sp, #16
 801c31a:	4630      	mov	r0, r6
 801c31c:	f7fe f8c0 	bl	801a4a0 <_printf_i>
 801c320:	e7e4      	b.n	801c2ec <_vfiprintf_r+0x208>
 801c322:	bf00      	nop
 801c324:	0801cd10 	.word	0x0801cd10
 801c328:	0801cd30 	.word	0x0801cd30
 801c32c:	0801ccf0 	.word	0x0801ccf0
 801c330:	0801cfba 	.word	0x0801cfba
 801c334:	0801cfc4 	.word	0x0801cfc4
 801c338:	08019f59 	.word	0x08019f59
 801c33c:	0801c0bf 	.word	0x0801c0bf
 801c340:	0801cfc0 	.word	0x0801cfc0

0801c344 <__swbuf_r>:
 801c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c346:	460e      	mov	r6, r1
 801c348:	4614      	mov	r4, r2
 801c34a:	4605      	mov	r5, r0
 801c34c:	b118      	cbz	r0, 801c356 <__swbuf_r+0x12>
 801c34e:	6983      	ldr	r3, [r0, #24]
 801c350:	b90b      	cbnz	r3, 801c356 <__swbuf_r+0x12>
 801c352:	f7fd fb95 	bl	8019a80 <__sinit>
 801c356:	4b21      	ldr	r3, [pc, #132]	; (801c3dc <__swbuf_r+0x98>)
 801c358:	429c      	cmp	r4, r3
 801c35a:	d12b      	bne.n	801c3b4 <__swbuf_r+0x70>
 801c35c:	686c      	ldr	r4, [r5, #4]
 801c35e:	69a3      	ldr	r3, [r4, #24]
 801c360:	60a3      	str	r3, [r4, #8]
 801c362:	89a3      	ldrh	r3, [r4, #12]
 801c364:	071a      	lsls	r2, r3, #28
 801c366:	d52f      	bpl.n	801c3c8 <__swbuf_r+0x84>
 801c368:	6923      	ldr	r3, [r4, #16]
 801c36a:	b36b      	cbz	r3, 801c3c8 <__swbuf_r+0x84>
 801c36c:	6923      	ldr	r3, [r4, #16]
 801c36e:	6820      	ldr	r0, [r4, #0]
 801c370:	1ac0      	subs	r0, r0, r3
 801c372:	6963      	ldr	r3, [r4, #20]
 801c374:	b2f6      	uxtb	r6, r6
 801c376:	4283      	cmp	r3, r0
 801c378:	4637      	mov	r7, r6
 801c37a:	dc04      	bgt.n	801c386 <__swbuf_r+0x42>
 801c37c:	4621      	mov	r1, r4
 801c37e:	4628      	mov	r0, r5
 801c380:	f7ff fa3a 	bl	801b7f8 <_fflush_r>
 801c384:	bb30      	cbnz	r0, 801c3d4 <__swbuf_r+0x90>
 801c386:	68a3      	ldr	r3, [r4, #8]
 801c388:	3b01      	subs	r3, #1
 801c38a:	60a3      	str	r3, [r4, #8]
 801c38c:	6823      	ldr	r3, [r4, #0]
 801c38e:	1c5a      	adds	r2, r3, #1
 801c390:	6022      	str	r2, [r4, #0]
 801c392:	701e      	strb	r6, [r3, #0]
 801c394:	6963      	ldr	r3, [r4, #20]
 801c396:	3001      	adds	r0, #1
 801c398:	4283      	cmp	r3, r0
 801c39a:	d004      	beq.n	801c3a6 <__swbuf_r+0x62>
 801c39c:	89a3      	ldrh	r3, [r4, #12]
 801c39e:	07db      	lsls	r3, r3, #31
 801c3a0:	d506      	bpl.n	801c3b0 <__swbuf_r+0x6c>
 801c3a2:	2e0a      	cmp	r6, #10
 801c3a4:	d104      	bne.n	801c3b0 <__swbuf_r+0x6c>
 801c3a6:	4621      	mov	r1, r4
 801c3a8:	4628      	mov	r0, r5
 801c3aa:	f7ff fa25 	bl	801b7f8 <_fflush_r>
 801c3ae:	b988      	cbnz	r0, 801c3d4 <__swbuf_r+0x90>
 801c3b0:	4638      	mov	r0, r7
 801c3b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c3b4:	4b0a      	ldr	r3, [pc, #40]	; (801c3e0 <__swbuf_r+0x9c>)
 801c3b6:	429c      	cmp	r4, r3
 801c3b8:	d101      	bne.n	801c3be <__swbuf_r+0x7a>
 801c3ba:	68ac      	ldr	r4, [r5, #8]
 801c3bc:	e7cf      	b.n	801c35e <__swbuf_r+0x1a>
 801c3be:	4b09      	ldr	r3, [pc, #36]	; (801c3e4 <__swbuf_r+0xa0>)
 801c3c0:	429c      	cmp	r4, r3
 801c3c2:	bf08      	it	eq
 801c3c4:	68ec      	ldreq	r4, [r5, #12]
 801c3c6:	e7ca      	b.n	801c35e <__swbuf_r+0x1a>
 801c3c8:	4621      	mov	r1, r4
 801c3ca:	4628      	mov	r0, r5
 801c3cc:	f000 f81a 	bl	801c404 <__swsetup_r>
 801c3d0:	2800      	cmp	r0, #0
 801c3d2:	d0cb      	beq.n	801c36c <__swbuf_r+0x28>
 801c3d4:	f04f 37ff 	mov.w	r7, #4294967295
 801c3d8:	e7ea      	b.n	801c3b0 <__swbuf_r+0x6c>
 801c3da:	bf00      	nop
 801c3dc:	0801cd10 	.word	0x0801cd10
 801c3e0:	0801cd30 	.word	0x0801cd30
 801c3e4:	0801ccf0 	.word	0x0801ccf0

0801c3e8 <__ascii_wctomb>:
 801c3e8:	b149      	cbz	r1, 801c3fe <__ascii_wctomb+0x16>
 801c3ea:	2aff      	cmp	r2, #255	; 0xff
 801c3ec:	bf85      	ittet	hi
 801c3ee:	238a      	movhi	r3, #138	; 0x8a
 801c3f0:	6003      	strhi	r3, [r0, #0]
 801c3f2:	700a      	strbls	r2, [r1, #0]
 801c3f4:	f04f 30ff 	movhi.w	r0, #4294967295
 801c3f8:	bf98      	it	ls
 801c3fa:	2001      	movls	r0, #1
 801c3fc:	4770      	bx	lr
 801c3fe:	4608      	mov	r0, r1
 801c400:	4770      	bx	lr
	...

0801c404 <__swsetup_r>:
 801c404:	4b32      	ldr	r3, [pc, #200]	; (801c4d0 <__swsetup_r+0xcc>)
 801c406:	b570      	push	{r4, r5, r6, lr}
 801c408:	681d      	ldr	r5, [r3, #0]
 801c40a:	4606      	mov	r6, r0
 801c40c:	460c      	mov	r4, r1
 801c40e:	b125      	cbz	r5, 801c41a <__swsetup_r+0x16>
 801c410:	69ab      	ldr	r3, [r5, #24]
 801c412:	b913      	cbnz	r3, 801c41a <__swsetup_r+0x16>
 801c414:	4628      	mov	r0, r5
 801c416:	f7fd fb33 	bl	8019a80 <__sinit>
 801c41a:	4b2e      	ldr	r3, [pc, #184]	; (801c4d4 <__swsetup_r+0xd0>)
 801c41c:	429c      	cmp	r4, r3
 801c41e:	d10f      	bne.n	801c440 <__swsetup_r+0x3c>
 801c420:	686c      	ldr	r4, [r5, #4]
 801c422:	89a3      	ldrh	r3, [r4, #12]
 801c424:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c428:	0719      	lsls	r1, r3, #28
 801c42a:	d42c      	bmi.n	801c486 <__swsetup_r+0x82>
 801c42c:	06dd      	lsls	r5, r3, #27
 801c42e:	d411      	bmi.n	801c454 <__swsetup_r+0x50>
 801c430:	2309      	movs	r3, #9
 801c432:	6033      	str	r3, [r6, #0]
 801c434:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c438:	81a3      	strh	r3, [r4, #12]
 801c43a:	f04f 30ff 	mov.w	r0, #4294967295
 801c43e:	e03e      	b.n	801c4be <__swsetup_r+0xba>
 801c440:	4b25      	ldr	r3, [pc, #148]	; (801c4d8 <__swsetup_r+0xd4>)
 801c442:	429c      	cmp	r4, r3
 801c444:	d101      	bne.n	801c44a <__swsetup_r+0x46>
 801c446:	68ac      	ldr	r4, [r5, #8]
 801c448:	e7eb      	b.n	801c422 <__swsetup_r+0x1e>
 801c44a:	4b24      	ldr	r3, [pc, #144]	; (801c4dc <__swsetup_r+0xd8>)
 801c44c:	429c      	cmp	r4, r3
 801c44e:	bf08      	it	eq
 801c450:	68ec      	ldreq	r4, [r5, #12]
 801c452:	e7e6      	b.n	801c422 <__swsetup_r+0x1e>
 801c454:	0758      	lsls	r0, r3, #29
 801c456:	d512      	bpl.n	801c47e <__swsetup_r+0x7a>
 801c458:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c45a:	b141      	cbz	r1, 801c46e <__swsetup_r+0x6a>
 801c45c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c460:	4299      	cmp	r1, r3
 801c462:	d002      	beq.n	801c46a <__swsetup_r+0x66>
 801c464:	4630      	mov	r0, r6
 801c466:	f7fd fbf7 	bl	8019c58 <_free_r>
 801c46a:	2300      	movs	r3, #0
 801c46c:	6363      	str	r3, [r4, #52]	; 0x34
 801c46e:	89a3      	ldrh	r3, [r4, #12]
 801c470:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c474:	81a3      	strh	r3, [r4, #12]
 801c476:	2300      	movs	r3, #0
 801c478:	6063      	str	r3, [r4, #4]
 801c47a:	6923      	ldr	r3, [r4, #16]
 801c47c:	6023      	str	r3, [r4, #0]
 801c47e:	89a3      	ldrh	r3, [r4, #12]
 801c480:	f043 0308 	orr.w	r3, r3, #8
 801c484:	81a3      	strh	r3, [r4, #12]
 801c486:	6923      	ldr	r3, [r4, #16]
 801c488:	b94b      	cbnz	r3, 801c49e <__swsetup_r+0x9a>
 801c48a:	89a3      	ldrh	r3, [r4, #12]
 801c48c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c494:	d003      	beq.n	801c49e <__swsetup_r+0x9a>
 801c496:	4621      	mov	r1, r4
 801c498:	4630      	mov	r0, r6
 801c49a:	f000 f847 	bl	801c52c <__smakebuf_r>
 801c49e:	89a0      	ldrh	r0, [r4, #12]
 801c4a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c4a4:	f010 0301 	ands.w	r3, r0, #1
 801c4a8:	d00a      	beq.n	801c4c0 <__swsetup_r+0xbc>
 801c4aa:	2300      	movs	r3, #0
 801c4ac:	60a3      	str	r3, [r4, #8]
 801c4ae:	6963      	ldr	r3, [r4, #20]
 801c4b0:	425b      	negs	r3, r3
 801c4b2:	61a3      	str	r3, [r4, #24]
 801c4b4:	6923      	ldr	r3, [r4, #16]
 801c4b6:	b943      	cbnz	r3, 801c4ca <__swsetup_r+0xc6>
 801c4b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c4bc:	d1ba      	bne.n	801c434 <__swsetup_r+0x30>
 801c4be:	bd70      	pop	{r4, r5, r6, pc}
 801c4c0:	0781      	lsls	r1, r0, #30
 801c4c2:	bf58      	it	pl
 801c4c4:	6963      	ldrpl	r3, [r4, #20]
 801c4c6:	60a3      	str	r3, [r4, #8]
 801c4c8:	e7f4      	b.n	801c4b4 <__swsetup_r+0xb0>
 801c4ca:	2000      	movs	r0, #0
 801c4cc:	e7f7      	b.n	801c4be <__swsetup_r+0xba>
 801c4ce:	bf00      	nop
 801c4d0:	20000030 	.word	0x20000030
 801c4d4:	0801cd10 	.word	0x0801cd10
 801c4d8:	0801cd30 	.word	0x0801cd30
 801c4dc:	0801ccf0 	.word	0x0801ccf0

0801c4e0 <__swhatbuf_r>:
 801c4e0:	b570      	push	{r4, r5, r6, lr}
 801c4e2:	460e      	mov	r6, r1
 801c4e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c4e8:	2900      	cmp	r1, #0
 801c4ea:	b096      	sub	sp, #88	; 0x58
 801c4ec:	4614      	mov	r4, r2
 801c4ee:	461d      	mov	r5, r3
 801c4f0:	da08      	bge.n	801c504 <__swhatbuf_r+0x24>
 801c4f2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801c4f6:	2200      	movs	r2, #0
 801c4f8:	602a      	str	r2, [r5, #0]
 801c4fa:	061a      	lsls	r2, r3, #24
 801c4fc:	d410      	bmi.n	801c520 <__swhatbuf_r+0x40>
 801c4fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c502:	e00e      	b.n	801c522 <__swhatbuf_r+0x42>
 801c504:	466a      	mov	r2, sp
 801c506:	f000 f851 	bl	801c5ac <_fstat_r>
 801c50a:	2800      	cmp	r0, #0
 801c50c:	dbf1      	blt.n	801c4f2 <__swhatbuf_r+0x12>
 801c50e:	9a01      	ldr	r2, [sp, #4]
 801c510:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c514:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c518:	425a      	negs	r2, r3
 801c51a:	415a      	adcs	r2, r3
 801c51c:	602a      	str	r2, [r5, #0]
 801c51e:	e7ee      	b.n	801c4fe <__swhatbuf_r+0x1e>
 801c520:	2340      	movs	r3, #64	; 0x40
 801c522:	2000      	movs	r0, #0
 801c524:	6023      	str	r3, [r4, #0]
 801c526:	b016      	add	sp, #88	; 0x58
 801c528:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c52c <__smakebuf_r>:
 801c52c:	898b      	ldrh	r3, [r1, #12]
 801c52e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c530:	079d      	lsls	r5, r3, #30
 801c532:	4606      	mov	r6, r0
 801c534:	460c      	mov	r4, r1
 801c536:	d507      	bpl.n	801c548 <__smakebuf_r+0x1c>
 801c538:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c53c:	6023      	str	r3, [r4, #0]
 801c53e:	6123      	str	r3, [r4, #16]
 801c540:	2301      	movs	r3, #1
 801c542:	6163      	str	r3, [r4, #20]
 801c544:	b002      	add	sp, #8
 801c546:	bd70      	pop	{r4, r5, r6, pc}
 801c548:	ab01      	add	r3, sp, #4
 801c54a:	466a      	mov	r2, sp
 801c54c:	f7ff ffc8 	bl	801c4e0 <__swhatbuf_r>
 801c550:	9900      	ldr	r1, [sp, #0]
 801c552:	4605      	mov	r5, r0
 801c554:	4630      	mov	r0, r6
 801c556:	f7fd fbeb 	bl	8019d30 <_malloc_r>
 801c55a:	b948      	cbnz	r0, 801c570 <__smakebuf_r+0x44>
 801c55c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c560:	059a      	lsls	r2, r3, #22
 801c562:	d4ef      	bmi.n	801c544 <__smakebuf_r+0x18>
 801c564:	f023 0303 	bic.w	r3, r3, #3
 801c568:	f043 0302 	orr.w	r3, r3, #2
 801c56c:	81a3      	strh	r3, [r4, #12]
 801c56e:	e7e3      	b.n	801c538 <__smakebuf_r+0xc>
 801c570:	4b0d      	ldr	r3, [pc, #52]	; (801c5a8 <__smakebuf_r+0x7c>)
 801c572:	62b3      	str	r3, [r6, #40]	; 0x28
 801c574:	89a3      	ldrh	r3, [r4, #12]
 801c576:	6020      	str	r0, [r4, #0]
 801c578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c57c:	81a3      	strh	r3, [r4, #12]
 801c57e:	9b00      	ldr	r3, [sp, #0]
 801c580:	6163      	str	r3, [r4, #20]
 801c582:	9b01      	ldr	r3, [sp, #4]
 801c584:	6120      	str	r0, [r4, #16]
 801c586:	b15b      	cbz	r3, 801c5a0 <__smakebuf_r+0x74>
 801c588:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c58c:	4630      	mov	r0, r6
 801c58e:	f000 f81f 	bl	801c5d0 <_isatty_r>
 801c592:	b128      	cbz	r0, 801c5a0 <__smakebuf_r+0x74>
 801c594:	89a3      	ldrh	r3, [r4, #12]
 801c596:	f023 0303 	bic.w	r3, r3, #3
 801c59a:	f043 0301 	orr.w	r3, r3, #1
 801c59e:	81a3      	strh	r3, [r4, #12]
 801c5a0:	89a0      	ldrh	r0, [r4, #12]
 801c5a2:	4305      	orrs	r5, r0
 801c5a4:	81a5      	strh	r5, [r4, #12]
 801c5a6:	e7cd      	b.n	801c544 <__smakebuf_r+0x18>
 801c5a8:	08019a19 	.word	0x08019a19

0801c5ac <_fstat_r>:
 801c5ac:	b538      	push	{r3, r4, r5, lr}
 801c5ae:	4d07      	ldr	r5, [pc, #28]	; (801c5cc <_fstat_r+0x20>)
 801c5b0:	2300      	movs	r3, #0
 801c5b2:	4604      	mov	r4, r0
 801c5b4:	4608      	mov	r0, r1
 801c5b6:	4611      	mov	r1, r2
 801c5b8:	602b      	str	r3, [r5, #0]
 801c5ba:	f7f1 f930 	bl	800d81e <_fstat>
 801c5be:	1c43      	adds	r3, r0, #1
 801c5c0:	d102      	bne.n	801c5c8 <_fstat_r+0x1c>
 801c5c2:	682b      	ldr	r3, [r5, #0]
 801c5c4:	b103      	cbz	r3, 801c5c8 <_fstat_r+0x1c>
 801c5c6:	6023      	str	r3, [r4, #0]
 801c5c8:	bd38      	pop	{r3, r4, r5, pc}
 801c5ca:	bf00      	nop
 801c5cc:	2000a4f4 	.word	0x2000a4f4

0801c5d0 <_isatty_r>:
 801c5d0:	b538      	push	{r3, r4, r5, lr}
 801c5d2:	4d06      	ldr	r5, [pc, #24]	; (801c5ec <_isatty_r+0x1c>)
 801c5d4:	2300      	movs	r3, #0
 801c5d6:	4604      	mov	r4, r0
 801c5d8:	4608      	mov	r0, r1
 801c5da:	602b      	str	r3, [r5, #0]
 801c5dc:	f7f1 f92f 	bl	800d83e <_isatty>
 801c5e0:	1c43      	adds	r3, r0, #1
 801c5e2:	d102      	bne.n	801c5ea <_isatty_r+0x1a>
 801c5e4:	682b      	ldr	r3, [r5, #0]
 801c5e6:	b103      	cbz	r3, 801c5ea <_isatty_r+0x1a>
 801c5e8:	6023      	str	r3, [r4, #0]
 801c5ea:	bd38      	pop	{r3, r4, r5, pc}
 801c5ec:	2000a4f4 	.word	0x2000a4f4

0801c5f0 <_init>:
 801c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5f2:	bf00      	nop
 801c5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c5f6:	bc08      	pop	{r3}
 801c5f8:	469e      	mov	lr, r3
 801c5fa:	4770      	bx	lr

0801c5fc <_fini>:
 801c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c5fe:	bf00      	nop
 801c600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c602:	bc08      	pop	{r3}
 801c604:	469e      	mov	lr, r3
 801c606:	4770      	bx	lr
